////////////////////////////////////////////////////////////////////////////////
// Подсистема "Криптография (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СоздатьМенеджерКриптографии

Процедура СоздатьМенеджерКриптографии(
		ОповещениеОЗавершении,
		ВыводитьСообщения,
		ПараметрыКриптографии = Неопределено,
		ПредлагатьУстановкуРасширения = Неопределено,
		ПослеУстановки = Ложь,
		ПараметрыОпределенияАлгоритма = Неопределено) Экспорт
	
	Попытка
		МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	ПутьВК = ДокументооборотСКОКлиент.ПолучитьПутьВК();
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ПутьВК", ПутьВК);
	Контекст.Вставить("ПослеУстановки", ПослеУстановки);
	Контекст.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ПредлагатьУстановкуРасширения", ПредлагатьУстановкуРасширения);
	Контекст.Вставить("ПараметрыОпределенияАлгоритма", ПараметрыОпределенияАлгоритма);
	
	Если МенеджерКриптографии = Неопределено Тогда // компонента еще не подключена
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияКомпоненты", ЭтотОбъект, Контекст);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, ПутьВК, "ЭДОNative");
	Иначе
		СоздатьМенеджерКриптографииИнициализацияНачало(Контекст);
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПодключенияКомпоненты(Подключена, ВходящийКонтекст) Экспорт
	
	Если Подключена Тогда
		СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст);
	Иначе
		Если ВходящийКонтекст.ПослеУстановки Тогда
			// Побробовали установить компоненту, но не вышло
			
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		Иначе
			// Возможно компонента еще не установлена
			Если ВходящийКонтекст.ПредлагатьУстановкуРасширения = Истина
				ИЛИ ВходящийКонтекст.ПредлагатьУстановкуРасширения = Неопределено И ВходящийКонтекст.ВыводитьСообщения Тогда
				Оповещение = Новый ОписаниеОповещения(
					"СоздатьМенеджерКриптографииПослеУстановкиКомпоненты", ЭтотОбъект, ВходящийКонтекст);
				НачатьУстановкуВнешнейКомпоненты(Оповещение, ВходящийКонтекст.ПутьВК);
			Иначе
				ВыполнитьОбработкуОповещения(
					ВходящийКонтекст.ОповещениеОЗавершении,
					КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии()));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиКомпоненты(ВходящийКонтекст) Экспорт
	
	СоздатьМенеджерКриптографии(
		ВходящийКонтекст.ОповещениеОЗавершении,
		ВходящийКонтекст.ВыводитьСообщения,
		ВходящийКонтекст.ПараметрыКриптографии,,
		Истина,
		ВходящийКонтекст.ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализацияНачало(ВходящийКонтекст) Экспорт
	
	Попытка
		МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
	Исключение
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьОбъектКриптографии();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		Возврат;
	КонецПопытки;
	
	ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ЭтотОбъект, ВходящийКонтекст,
		"СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках", ЭтотОбъект);	
		
	// Отключим вывод сообщений об ошибках пользователю. 
	// Ошибки будем получать из свойства СписокОшибок.
	МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ВходящийКонтекст) Экспорт
	
	ПараметрыОпределенияАлгоритма 	= ВходящийКонтекст.ПараметрыОпределенияАлгоритма;
	ВыводитьСообщения 				= ВходящийКонтекст.ВыводитьСообщения;
	
	Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеОпределенияАлгоритма", ЭтотОбъект, ВходящийКонтекст);
	
	ПараметрыВызова = СоздатьПараметрыОпределенияАлгоритма();
	Если ПараметрыОпределенияАлгоритма <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВызова, ПараметрыОпределенияАлгоритма);
	КонецЕсли;
	
	Если ВходящийКонтекст.ПараметрыКриптографии <> Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено, Алгоритм, ТипКриптопровайдераВладельца",
			Истина, ПараметрыВызова.Алгоритм, ПараметрыВызова.ТипКриптопровайдераВладельца);
		ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
		
	Иначе
		ВыводитьСообщенияПриОпределенииАлгоритма = ВыводитьСообщения;
		
		Если ПараметрыВызова.Алгоритм = Неопределено И ПараметрыВызова.Криптосообщение = Неопределено
			И ПараметрыВызова.Сертификат <> Неопределено Тогда
			
			ВыводитьСообщенияПриОпределенииАлгоритма = Ложь; // ошибки поиска сертификата игнорируем до определения алгоритма
		КонецЕсли;
		
		ОпределитьАлгоритм(
			Оповещение,
			Ложь,
			ПараметрыОпределенияАлгоритма,
			ВыводитьСообщенияПриОпределенииАлгоритма);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеОпределенияАлгоритма(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыОпределенияАлгоритма = ВходящийКонтекст.ПараметрыОпределенияАлгоритма;
	
	Алгоритм 						= ?(Результат.Выполнено, Строка(Результат.Алгоритм), "");
	ТипКриптопровайдераВладельца 	= ?(Результат.Выполнено, Результат.ТипКриптопровайдераВладельца, Неопределено);
	
	// Если в СоздатьМенеджерКриптографии были переданы значения параметров криптопровайдера,
	// то будут использованы они, иначе будут получены данные из ИБ или выполнен перебор по поддерживаемым криптопровайдерам.
	Если ВходящийКонтекст.ПараметрыКриптографии <> Неопределено Тогда
		Если ТипЗнч(ВходящийКонтекст.ПараметрыКриптографии) = Тип("Массив")
			ИЛИ ТипЗнч(ВходящийКонтекст.ПараметрыКриптографии) = Тип("ФиксированныйМассив") Тогда
			
			ДоступныеКриптопровайдеры = ВходящийКонтекст.ПараметрыКриптографии;
			
		Иначе
			ДоступныеКриптопровайдеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВходящийКонтекст.ПараметрыКриптографии);
		КонецЕсли;
		
	Иначе
		ПредлагатьУстановкуРасширения = ВходящийКонтекст.Свойство("ПредлагатьУстановкуРасширения")
			И ВходящийКонтекст.ПредлагатьУстановкуРасширения = Истина;
		ПриоритетViPNet = ПараметрыОпределенияАлгоритма <> Неопределено
			И ПараметрыОпределенияАлгоритма.Свойство("ПриоритетViPNet")
			И ПараметрыОпределенияАлгоритма.ПриоритетViPNet;
		РезультатЗаполнения = ЗаполнитьПараметрыКриптографии(Алгоритм, ПредлагатьУстановкуРасширения, ПриоритетViPNet);
		ДоступныеКриптопровайдеры = РезультатЗаполнения.ДоступныеКриптопровайдеры;
		
		Если ДоступныеКриптопровайдеры = Неопределено Тогда
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, РезультатЗаполнения.ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", РезультатЗаполнения.ОписаниеОшибки));
			Возврат;
			
		Иначе
			ТипКриптопровайдера = ПараметрыПриложения[?(ПриоритетViPNet, "КриптографияЭДКО.ТипКриптопровайдераПриоритетViPNet",
				"КриптографияЭДКО.ТипКриптопровайдера")];
			Если ЗначениеЗаполнено(ТипКриптопровайдера) Тогда
				ДоступныеКриптопровайдерыПоПриоритетности = Новый Массив;
				ДоступныеКриптопровайдерыНизкогоПриоритета = Новый Массив;
				
				Для каждого ДоступныйКриптопровайдер Из ДоступныеКриптопровайдеры Цикл
					Если ДоступныйКриптопровайдер.ТипКриптопровайдера = ТипКриптопровайдера Тогда
						ДоступныеКриптопровайдерыПоПриоритетности.Добавить(ДоступныйКриптопровайдер);
					Иначе
						ДоступныеКриптопровайдерыНизкогоПриоритета.Добавить(ДоступныйКриптопровайдер);
					КонецЕсли;
				КонецЦикла;
				Для каждого ДоступныйКриптопровайдерНизкогоПриоритета Из ДоступныеКриптопровайдерыНизкогоПриоритета Цикл
					ДоступныеКриптопровайдерыПоПриоритетности.Добавить(ДоступныйКриптопровайдерНизкогоПриоритета);
				КонецЦикла;
				
				ДоступныеКриптопровайдеры = Новый ФиксированныйМассив(ДоступныеКриптопровайдерыПоПриоритетности);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДоступныеКриптопровайдеры", 		ДоступныеКриптопровайдеры);
	Контекст.Вставить("МенеджерКриптографии", 			ВходящийКонтекст.МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", 			ВходящийКонтекст.ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", 				ВходящийКонтекст.ВыводитьСообщения);
	Контекст.Вставить("ТекущийКриптопровайдер", 		0);
	Контекст.Вставить("ПараметрыКриптографии", 			ВходящийКонтекст.ПараметрыКриптографии);
	Контекст.Вставить("ТипКриптопровайдераВладельца", 	ТипКриптопровайдераВладельца);
	Контекст.Вставить("ТипКриптопровайдераИнициализации", 	Неопределено);
	Контекст.Вставить("ПараметрыОпределенияАлгоритма", 	ПараметрыОпределенияАлгоритма);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеИнициализации", ЭтотОбъект, Контекст);
	
	СоздатьМенеджерКриптографииИнициализация(Оповещение, Контекст);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПриОшибкеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибках(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "НеВыводитьСообщенияОбОшибках",, ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииИнициализация(ОповещениеОЗавершении, ВходящийКонтекст)
	
	Имя = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя; 
	Путь = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь;
	Тип = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип;
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	Если ЭтоLinux И НЕ ЗначениеЗаполнено(Путь) Тогда
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографииНеНастроенПуть();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьМенеджераКриптографии(
		ОповещениеОЗавершении, Имя, Путь, Тип);
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализации(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	// Надо проверить не было ли ошибок при инициализации - проверить свойство СписокОшибок.
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст) Экспорт
	
	// Менеджер криптографии инициализовать не удалось.
	// Попробуем следующий криптопровайдер.
	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		// Сохраним информацию в журнал регистрации.
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось создать менеджер криптографии (%2, %3, %4) по причине:
					   |%1';
					   |en = 'Не удалось создать менеджер криптографии (%2, %3, %4) по причине:
					   |%1'"),
			СписокОшибок,
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Имя, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Путь, 
			ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер].Тип); 
		
		КриптографияЭДКОКлиентСервер.ЗаписатьСобытиеВЖурнал(ИмяСобытия(), "Информация", ОписаниеОшибки);
		
		// Создадим новый менеджер, чтобы обнулить свойство СписокОшибок
		Попытка
			ВходящийКонтекст.МенеджерКриптографии = Новый("Addin.ЭДОNative.CryptS");
		Исключение
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьОбъектКриптографии();
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
			Возврат;
		КонецПопытки;
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибкахПовторно", ЭтотОбъект, ВходящийКонтекст);	
		
		// Отключим вывод сообщений об ошибках пользователю. 
		// Ошибки будем получать из свойства СписокОшибок.
		ВходящийКонтекст.МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);	
	Иначе
		// Криптопровайдеры могут маскироваться под другие, например, ViPNet может маскироваться под CryptoPro.
		// Поэтому проверим установлен ли криптопровайдер в системе.
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров", ЭтотОбъект, ВходящийКонтекст);
		ПолучитьКриптопровайдеры(Оповещение, Истина, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеУстановкиЗначенияСвойстваНеВыводитьСообщенияОбОшибкахПовторно(ВходящийКонтекст) Экспорт
	
	// Попробуем следующий криптопровайдер.		
	Если ВходящийКонтекст.ТекущийКриптопровайдер < ВходящийКонтекст.ДоступныеКриптопровайдеры.ВГраница() Тогда
		ВходящийКонтекст.ТекущийКриптопровайдер = ВходящийКонтекст.ТекущийКриптопровайдер + 1;
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеИнициализации", ЭтотОбъект, ВходящийКонтекст);
		
		СоздатьМенеджерКриптографииИнициализация(Оповещение, ВходящийКонтекст);
		
	Иначе
		Если (НЕ ВходящийКонтекст.Свойство("ВыводитьСообщения")
			ИЛИ ТипЗнч(ВходящийКонтекст.ВыводитьСообщения) <> Тип("Булево"))
			И ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
			
			ТекстСсылки =
				"https://support.cryptopro.ru/index.php?/Knowledgebase/Article/View/455/8/ustnovk-kriptopro-csp-n-macos-posle-blokirovki";
			ТекстСсылки = Новый ФорматированнаяСтрока(ТекстСсылки,,,, ТекстСсылки);
			ТекстСообщения = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Криптопровайдер КриптоПро CSP недоступен.
						   |Вероятно, это связано с тем, что компания Apple заблокировала приложения компании КриптоПро в связи с санкциями США. Для решения проблемы воспользуйтесь инструкцией на сайте КриптоПро:
						   |';
						   |en = 'Криптопровайдер КриптоПро CSP недоступен.
						   |Вероятно, это связано с тем, что компания Apple заблокировала приложения компании КриптоПро в связи с санкциями США. Для решения проблемы воспользуйтесь инструкцией на сайте КриптоПро:
						   |'"),
				ТекстСсылки);
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
			
		ИначеЕсли (НЕ ВходящийКонтекст.Свойство("ВыводитьСообщения")
			ИЛИ ТипЗнч(ВходящийКонтекст.ВыводитьСообщения) <> Тип("Булево"))
			И ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
			
			ТекстСсылки = "https://its.1c.ru/db/elreps#content:131:hdoc";
			ТекстСсылки = Новый ФорматированнаяСтрока(ТекстСсылки,,,, ТекстСсылки);
			ТекстСообщения = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Проверьте настройки 1С-Отчетности на Linux по инструкции:
						   |';
						   |en = 'Проверьте настройки 1С-Отчетности на Linux по инструкции:
						   |'"),
				ТекстСсылки);
			ПоказатьПредупреждение(, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		// Менеджер криптографии инициализовать не удалось.
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияСпискаКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ТекущийКриптопровайдер = ВходящийКонтекст.ДоступныеКриптопровайдеры[ВходящийКонтекст.ТекущийКриптопровайдер];
		КриптопровайдерУстановленВСистеме = Ложь;
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ТекущийКриптопровайдер.Имя = Криптопровайдер.Имя
				И ТекущийКриптопровайдер.Тип = Криптопровайдер.Тип Тогда
				КриптопровайдерУстановленВСистеме = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КриптопровайдерУстановленВСистеме Тогда
			Если ВходящийКонтекст.ПараметрыКриптографии = Неопределено Тогда
				ПриоритетViPNet = ВходящийКонтекст.Свойство("ПараметрыОпределенияАлгоритма")
					И ВходящийКонтекст.ПараметрыОпределенияАлгоритма <> Неопределено
					И ВходящийКонтекст.ПараметрыОпределенияАлгоритма.Свойство("ПриоритетViPNet")
					И ВходящийКонтекст.ПараметрыОпределенияАлгоритма.ПриоритетViPNet;
				ПараметрыПриложения.Вставить(?(ПриоритетViPNet, "КриптографияЭДКО.ТипКриптопровайдераПриоритетViPNet",
					"КриптографияЭДКО.ТипКриптопровайдера"), ТекущийКриптопровайдер.ТипКриптопровайдера);
			КонецЕсли;
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("Алгоритм", ТекущийКриптопровайдер.Алгоритм);
			РезультатВыполнения.Вставить("ТипКриптопровайдераВладельца",
				?(ВходящийКонтекст.Свойство("ТипКриптопровайдераВладельца"), ВходящийКонтекст.ТипКриптопровайдераВладельца,
				Неопределено));
			РезультатВыполнения.Вставить("ТипКриптопровайдераИнициализации", ТекущийКриптопровайдер.ТипКриптопровайдера);
			РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "МенеджерКриптографии",
				ВходящийКонтекст.МенеджерКриптографии, РезультатВыполнения);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				РезультатВыполнения);
		Иначе
			СписокОшибок = НСтр("ru = 'Менеджер криптографии успешно инициализирован с указанными параметрами криптопровайдера, но криптопровайдер не найден в системе.';
								|en = 'Менеджер криптографии успешно инициализирован с указанными параметрами криптопровайдера, но криптопровайдер не найден в системе.'");		
			СоздатьМенеджерКриптографииПослеИнициализацииПослеПолученияОшибкиИнициализации(СписокОшибок, ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКриптопровайдеры

Процедура ПолучитьКриптопровайдеры(ОповещениеОЗавершении, ТолькоПоддерживаемые, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ТолькоПоддерживаемые);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, 
		"ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, 
		ВыводитьСообщения, 
		МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритм", Результат.Алгоритм);
		Контекст.Вставить("Криптопровайдеры", Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьКриптопровайдерыЗавершение", ЭтотОбъект, Контекст);
			ПолучитьКриптопровайдерыПолучитьСледующий(Оповещение, Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Криптопровайдеры = Новый Массив;
		
		ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
		ДоступныеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(, ЭтоLinux);
		ИндексКриптопровайдеров = Неопределено;
		
		Для Каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			Если ВходящийКонтекст.ВходящиеПараметры[0] Тогда // ТолькоПоддерживаемые
				КриптопровайдерПоддерживается = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
					Криптопровайдер.Имя,
					Криптопровайдер.Тип,
					ДоступныеКриптопровайдеры,
					ИндексКриптопровайдеров) <> Неопределено;
				
				Если НЕ КриптопровайдерПоддерживается Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Криптопровайдеры.Добавить(Криптопровайдер);
		КонецЦикла;
		
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Криптопровайдеры", Новый ФиксированныйМассив(Криптопровайдеры), ВходящийКонтекст);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер", ЭтотОбъект, Контекст,
		"ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер", ЭтотОбъект);
		
	Имя = "";
	Путь = "";
	Тип = 0;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийКриптопровайдер(Оповещение, Имя, Путь, Тип);
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПослеПолучитьСледующийКриптопровайдер(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Криптопровайдер получен
		Криптопровайдер = Новый Структура("Имя,Путь,Тип", "", "", 0);
		Криптопровайдер.Имя = Параметры[0];
		Криптопровайдер.Путь = Параметры[1];
		Криптопровайдер.Тип = Параметры[2];
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры.Добавить(Новый ФиксированнаяСтруктура(Криптопровайдер));		
		ПолучитьКриптопровайдерыПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Криптопровайдеры", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Криптопровайдеры, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКриптопровайдерыПриОшибкеПолучитьСледующийКриптопровайдер(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийКриптопровайдер",, ИнформацияОбОшибке);			  
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьАлгоритмы

Процедура ПолучитьАлгоритмы(
		ОповещениеОЗавершении,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмИлиСертификат) Экспорт
	
	Если ТипЗнч(АлгоритмИлиСертификат) = Тип("Структура") ИЛИ ТипЗнч(АлгоритмИлиСертификат) = Тип("ФиксированнаяСтруктура") Тогда
		Сертификат = АлгоритмИлиСертификат;
		ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", Сертификат);
		
	Иначе
		Алгоритм = ?(АлгоритмИлиСертификат = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), АлгоритмИлиСертификат);
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
	КонецЕсли;
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьАлгоритмыПослеСозданияМенеджераКриптографии",,
		ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритм", Результат.Алгоритм);
		Контекст.Вставить("Алгоритмы", Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьАлгоритмыЗавершение", ЭтотОбъект, Контекст);
		ПолучитьАлгоритмыПолучитьСледующий(Оповещение, Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Алгоритмы", Новый ФиксированныйМассив(Результат.Алгоритмы), ВходящийКонтекст);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьАлгоритмыПослеПолучитьСледующийАлгоритм", ЭтотОбъект, Контекст,
		"ПолучитьАлгоритмыПриОшибкеПолучитьСледующийАлгоритм", ЭтотОбъект);
		
	Алгоритмы = ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы;
	
	Если Алгоритмы.Количество() > 0 Тогда
		Идентификатор = Алгоритмы[Алгоритмы.ВГраница()].Идентификатор;
		Имя = Алгоритмы[Алгоритмы.ВГраница()].Имя;
		ДлинаКлюча = Алгоритмы[Алгоритмы.ВГраница()].ДлинаКлюча;
	Иначе
		Идентификатор = 0;
		Имя = "";
		ДлинаКлюча = 0;
	КонецЕсли;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийАлгоритм(Оповещение, Идентификатор, Имя, ДлинаКлюча);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПослеПолучитьСледующийАлгоритм(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Алгоритм получен
		Алгоритм = Новый Структура("Идентификатор,Имя,ДлинаКлюча", "", "", 0);
		Алгоритм.Идентификатор = Параметры[0];
		Алгоритм.Имя = Параметры[1];
		Алгоритм.ДлинаКлюча = Параметры[2];
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы.Добавить(Новый ФиксированнаяСтруктура(Алгоритм));		
		ПолучитьАлгоритмыПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Алгоритмы", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Алгоритмы, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыПриОшибкеПолучитьСледующийАлгоритм(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийАлгоритм",, ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьАлгоритмыШифрования

Процедура ПолучитьАлгоритмыШифрования(
		ОповещениеОЗавершении,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмИлиСертификат,
		ИспользоватьКеширование) Экспорт
	
	Если ИспользоватьКеширование Тогда
		АлгоритмыШифрования = ПараметрыПриложения["КриптографияЭДКО.АлгоритмыШифрования"];
		Если АлгоритмыШифрования <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
					Истина,
					"АлгоритмыШифрования",
					АлгоритмыШифрования));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(АлгоритмИлиСертификат) = Тип("Структура")
		ИЛИ ТипЗнч(АлгоритмИлиСертификат) = Тип("ФиксированнаяСтруктура") Тогда
		
		Сертификат = АлгоритмИлиСертификат;
		ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", Сертификат);
		
	Иначе
		Алгоритм = ?(АлгоритмИлиСертификат = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(),
			АлгоритмИлиСертификат);
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
	КонецЕсли;
	ПараметрыОпределенияАлгоритма.Вставить("ПриоритетViPNet", Истина);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении,
		"ПолучитьАлгоритмыШифрованияПослеСозданияМенеджераКриптографии",,
		ВыводитьСообщения,
		МенеджерКриптографии,
		ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыШифрованияПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", 		ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", 	ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", 	Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритм", 				Результат.Алгоритм);
		Контекст.Вставить("АлгоритмыШифрования", 	Новый Массив);
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьАлгоритмыШифрованияЗавершение", ЭтотОбъект, Контекст);
		ПолучитьАлгоритмыШифрованияПолучитьСледующий(
			Оповещение,
			Результат.МенеджерКриптографии,
			ВходящийКонтекст.ВыводитьСообщения);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыШифрованияЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
			Истина,
			"АлгоритмыШифрования",
			Новый ФиксированныйМассив(Результат.АлгоритмыШифрования),
			ВходящийКонтекст);
		
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
			Ложь,
			"ОписаниеОшибки",
			Результат.ОписаниеОшибки,
			ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыШифрованияПолучитьСледующий(ОповещениеОЗавершении, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", 	МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", 		ВыводитьСообщения);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьАлгоритмыШифрованияПослеПолучитьСледующийАлгоритмШифрования", ЭтотОбъект, Контекст,
		"ПолучитьАлгоритмыШифрованияПриОшибкеПолучитьСледующийАлгоритмШифрования", ЭтотОбъект);
	
	АлгоритмыШифрования = ОповещениеОЗавершении.ДополнительныеПараметры.АлгоритмыШифрования;
	
	Если АлгоритмыШифрования.Количество() > 0 Тогда
		Идентификатор 	= АлгоритмыШифрования[АлгоритмыШифрования.ВГраница()].Идентификатор;
		Имя 			= АлгоритмыШифрования[АлгоритмыШифрования.ВГраница()].Имя;
		ДлинаКлюча 		= АлгоритмыШифрования[АлгоритмыШифрования.ВГраница()].ДлинаКлюча;
		
	Иначе
		Идентификатор 	= 0;
		Имя 			= "";
		ДлинаКлюча 		= 0;
	КонецЕсли;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийАлгоритмШифрования(Оповещение, Идентификатор, Имя, ДлинаКлюча);
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыШифрованияПослеПолучитьСледующийАлгоритмШифрования(
		Результат,
		Параметры,
		ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // алгоритм шифрования получен
		АлгоритмШифрования = Новый Структура;
		АлгоритмШифрования.Вставить("Идентификатор", 	Параметры[0]);
		АлгоритмШифрования.Вставить("Имя", 				Параметры[1]);
		АлгоритмШифрования.Вставить("ДлинаКлюча", 		Параметры[2]);
		
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.АлгоритмыШифрования.Добавить(
			Новый ФиксированнаяСтруктура(АлгоритмШифрования));
		ПолучитьАлгоритмыШифрованияПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении,
			ВходящийКонтекст.МенеджерКриптографии,
			ВходящийКонтекст.ВыводитьСообщения);
		
	Иначе
		ПараметрыПриложения["КриптографияЭДКО.АлгоритмыШифрования"] =
			ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.АлгоритмыШифрования;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Истина,
				"АлгоритмыШифрования",
				ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.АлгоритмыШифрования,
				ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАлгоритмыШифрованияПриОшибкеПолучитьСледующийАлгоритмШифрования(
		ИнформацияОбОшибке,
		СтандартнаяОбработка,
		ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка,
		ВходящийКонтекст,
		"ПолучитьСледующийАлгоритмШифрования",,
		ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьКонтейнерыКлючей

Процедура ПолучитьКонтейнерыКлючей(ОповещениеОЗавершении, ПолучатьУникальныеИмена, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(1, ПолучатьУникальныеИмена);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьКонтейнерыКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
		
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритм", Результат.Алгоритм);
		Контекст.Вставить("КонтейнерыКлючей", Новый Массив);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьКонтейнерыКлючейЗавершение", ЭтотОбъект, Контекст);
		ПолучитьКонтейнерыКлючейПолучитьСледующий(
			Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], Результат.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейЗавершение(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "КонтейнерыКлючей", Новый ФиксированныйМассив(Результат.КонтейнерыКлючей), ВходящийКонтекст);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПолучитьСледующий(ОповещениеОЗавершении, ПолучатьУникальныеИмена, МенеджерКриптографии, ВыводитьСообщения)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьКонтейнерыКлючейПослеПолучитьСледующийКонтейнерКлючей", ЭтотОбъект, Контекст,
		"ПолучитьКонтейнерыКлючейПриОшибкеПолучитьСледующийКонтейнерКлючей", ЭтотОбъект);
		
	КонтейнерыКлючей = ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей;
	
	Если КонтейнерыКлючей.Количество() > 0 Тогда
		ИмяКонтейнера = КонтейнерыКлючей[КонтейнерыКлючей.ВГраница()];
	Иначе
		ИмяКонтейнера = "";
	КонецЕсли;
	
	МенеджерКриптографии.НачатьВызовПолучитьСледующийКонтейнерКлючей(Оповещение, ИмяКонтейнера, ПолучатьУникальныеИмена);
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПослеПолучитьСледующийКонтейнерКлючей(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда // Контейнер получен
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей.Добавить(Параметры[0]);		
		ПолучитьКонтейнерыКлючейПолучитьСледующий(
			ВходящийКонтекст.ОповещениеОЗавершении, Параметры[1], ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "КонтейнерыКлючей", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.КонтейнерыКлючей, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьКонтейнерыКлючейПриОшибкеПолучитьСледующийКонтейнерКлючей(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийКонтейнерКлючей",, ИнформацияОбОшибке);
		
КонецПроцедуры

#КонецОбласти

#Область СгенерироватьИмяКонтейнера

Функция СгенерироватьИмяКонтейнера(ОсноваИмени) Экспорт
	
	ТекущаяДатаНаСервере = ОбщегоНазначенияКлиент.ДатаСеанса();
	ОсноваИмениБезНедопустимыхСимволов = ЗаменитьНедопустимыеСимволы(ОсноваИмени);
	ПрефиксИмени = ?(ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux(), "\\.\HDIMAGE\", "");
	ДлинаПрефиксаИмени = СтрДлина(ПрефиксИмени);
	Возврат ПрефиксИмени + Формат(ТекущаяДатаНаСервере, "ДФ='гггг-ММ-дд ЧЧ-мм-сс'") + " "
		+ Лев(ОсноваИмениБезНедопустимыхСимволов, 43 - ДлинаПрефиксаИмени);
	
КонецФункции

#КонецОбласти

#Область СоздатьКонтейнерКлючей

Процедура СоздатьКонтейнерКлючей(
		ОповещениеОЗавершении,
		ИмяКонтейнера,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм,
		ЭкспортируемыйКлюч) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяКонтейнера, ЭкспортируемыйКлюч);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм",
		?(Алгоритм = Неопределено И МенеджерКриптографии = Неопределено,
		КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), Алгоритм));
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СоздатьКонтейнерКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		Контекст.Вставить("Алгоритм", Результат.Алгоритм);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		
		Оповещение = Новый ОписаниеОповещения("СоздатьКонтейнерКлючейПослеСоздания", ЭтотОбъект, Контекст,
			"СоздатьКонтейнерКлючейПриОшибкеСоздания", ЭтотОбъект);
		
		Если ВходящийКонтекст.ВходящиеПараметры[1] = Ложь Тогда
			Результат.МенеджерКриптографии.НачатьВызовСоздатьКонтейнер(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0], 0);
		Иначе
			Результат.МенеджерКриптографии.НачатьВызовСоздатьКонтейнер(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0]);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПослеСоздания(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "УникальноеИмяКонтейнера", Результат, ВходящийКонтекст));	
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКонтейнерКлючейПослеПолученияОшибки", ЭтотОбъект, ВходящийКонтекст);
	
		ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПослеПолученияОшибки(СписокОшибок, ВходящийКонтекст) Экспорт
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, СписокОшибок);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", СписокОшибок, ВходящийКонтекст));
		
КонецПроцедуры

Процедура СоздатьКонтейнерКлючейПриОшибкеСоздания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "СоздатьКонтейнерКлючей",, ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьЗапросНаСертификат

Процедура СоздатьЗапросНаСертификат(
		ОповещениеОЗавершении,
		ТелоЗапросаНаСертификат,
		ИмяКонтейнера,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	Флаг = 67108864; // Квалифицированная ЭП
	
	ВходящиеПараметры = ПараметрыВМассив(3, ТелоЗапросаНаСертификат, ИмяКонтейнера, Флаг);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм",
		?(Алгоритм = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), Алгоритм));
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СоздатьЗапросНаСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификатПослеПолученияИмениФайла");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьЗапросНаСертификатПослеСоздания", ЭтотОбъект, ВходящийКонтекст, "СоздатьЗапросНаСертификатПриОшибкеСоздания", ЭтотОбъект);
				
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьЗапросНаСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // тело запроса 
			ВходящиеПараметры[1], // имя контейнера 
			Результат.ИмяФайла, // файл запроса
			ВходящиеПараметры[2] // флаг
			);	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеСоздания(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаЗапросаНаСертификат", Параметры[2]);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьЗапросНаСертификатПослеЧтенияИзФайла", ЭтотОбъект, ВходящийКонтекст);
			
		ОперацииСФайламиЭДКОКлиент.ФайлВТекст(Оповещение, Параметры[2], "UTF-8", ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.ДвоичныеДанные);	
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПослеЧтенияИзФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ЗапросНаСертификат", Результат.Текст, ВходящийКонтекст));
			
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.ИмяФайлаЗапросаНаСертификат);
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьЗапросНаСертификатПриОшибкеСоздания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
 
 СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "СоздатьЗапросНаСертификат",, ИнформацияОбОшибке);
 
КонецПроцедуры

#КонецОбласти

#Область НачатьВызовСоздатьКонтейнерИЗапросНаСертификат

Процедура СоздатьКонтейнерИЗапросНаСертификат(
		ОповещениеОЗавершении,
		ТелоЗапросаНаСертификат,
		ИмяКонтейнера,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм,
		ЭкспортируемыйКлюч) Экспорт
	
	Флаг = 67108864 + ?(ЭкспортируемыйКлюч, 65536, 0); // Квалифицированная ЭП, экспортируемый ключ
	
	ВходящиеПараметры = ПараметрыВМассив(3, ТелоЗапросаНаСертификат, ИмяКонтейнера, Флаг);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм",
		?(Алгоритм = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), Алгоритм));
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СоздатьКонтейнерИЗапросНаСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура СоздатьКонтейнерИЗапросНаСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(Неопределено, ВходящийКонтекст, "СоздатьКонтейнерИЗапросНаСертификатПослеПолученияИмениФайла");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонтейнерИЗапросНаСертификатПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКонтейнерИЗапросНаСертификатПослеСоздания", ЭтотОбъект, ВходящийКонтекст, "СоздатьКонтейнерИЗапросНаСертификатПриОшибкеСоздания", ЭтотОбъект);
				
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьКонтейнерИЗапросНаСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // тело запроса 
			ВходящиеПараметры[1], // имя контейнера 
			Результат.ИмяФайла, // файл запроса
			ВходящиеПараметры[2] // флаг
			);	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонтейнерИЗапросНаСертификатПослеСоздания(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ВходящийКонтекст.Вставить("УникальноеИмяКонтейнера", Результат);
		ВходящийКонтекст.Вставить("ИмяФайлаЗапросаНаСертификат", Параметры[2]);
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьКонтейнерИЗапросНаСертификатПослеЧтенияИзФайла", ЭтотОбъект, ВходящийКонтекст);
			
		ОперацииСФайламиЭДКОКлиент.ФайлВТекст(Оповещение, Параметры[2], "UTF-8", ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.ДвоичныеДанные);	
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьКонтейнерИЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСоздатьКонтейнерИЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьКонтейнерИЗапросНаСертификатПослеЧтенияИзФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ЗапросНаСертификат = Результат.Текст;
		
		РезультатФормирования = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ЗапросНаСертификат", ЗапросНаСертификат, ВходящийКонтекст);
		РезультатФормирования.Вставить("УникальноеИмяКонтейнера", ВходящийКонтекст.УникальноеИмяКонтейнера);
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатФормирования);
			
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.ИмяФайлаЗапросаНаСертификат);
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "СоздатьКонтейнерИЗапросНаСертификат",
			ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьКонтейнерИЗапросНаСертификатПриОшибкеСоздания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
 
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "СоздатьКонтейнерИЗапросНаСертификат",, ИнформацияОбОшибке);
 
КонецПроцедуры

#КонецОбласти

#Область СвязатьСертификатСКонтейнеромКлючей

Процедура СвязатьСертификатСКонтейнеромКлючей(
		ОповещениеОЗавершении,
		Сертификат,
		ИмяКонтейнераКлючей,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, Сертификат, ИмяКонтейнераКлючей);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, Сертификат);
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "СвязатьСертификатСКонтейнеромКлючейПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"СвязатьСертификатСКонтейнеромКлючейПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"СвязатьСертификатСКонтейнеромКлючейПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСвязатьСертификатСКонтейнеромКлючей(
			Оповещение, 
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат в хранилище
			ВходящиеПараметры[1] // контейнер
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина,,, ВходящийКонтекст));
	
КонецПроцедуры

Процедура СвязатьСертификатСКонтейнеромКлючейПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "СвязатьСертификатСКонтейнеромКлючей",
		ОписаниеОшибкиНеУдалосьПривязатьСертификатКЗакрытомуКлючу(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьСертификатВКонтейнерИХранилище

Процедура УстановитьСертификатВКонтейнерИХранилище(
		ОповещениеОЗавершении,
		ИмяФайлаСертификата,
		ИмяКонтейнераКлючей,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаСертификата, ИмяКонтейнераКлючей);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, ИмяФайлаСертификата);
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "УстановитьСертификатВКонтейнерИХранилищеПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура УстановитьСертификатВКонтейнерИХранилищеПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьСертификатВКонтейнерИХранилищеПослеВыполнения", ЭтотОбъект, ВходящийКонтекст, "УстановитьСертификатВКонтейнерИХранилищеПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовУстановитьСертификатВКонтейнерИХранилище(
			Оповещение, 
			ВходящиеПараметры[0], // файл сертификата 
			ВходящиеПараметры[1] // контейнер
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатВКонтейнерИХранилищеПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина,,, ВходящийКонтекст));	
	Иначе
		СтандартнаяОбработкаОшибки(
			Неопределено, ВходящийКонтекст, "УстановитьСертификатВКонтейнерИХранилище",
			ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат());
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСертификатВКонтейнерИХранилищеПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "УстановитьСертификатВКонтейнерИХранилище",ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат(),ИнформацияОбОшибке);
			
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСертификатИзКонтейнера

Процедура ПолучитьСертификатИзКонтейнера(
		ОповещениеОЗавершении,
		ИмяКонтейнераКлючей,
		ИмяФайлаИлиРасширение,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяКонтейнераКлючей, ИмяФайлаИлиРасширение);
	
	ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм",
		?(Алгоритм = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), Алгоритм));
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьСертификатИзКонтейнераПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура ПолучитьСертификатИзКонтейнераПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", 	Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", 				Результат.Алгоритм);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[1], ВходящийКонтекст, "ПолучитьСертификатИзКонтейнераПослеПолученияИмениФайла");
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатИзКонтейнераПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСертификатИзКонтейнераПослеПолученияСертификата", ЭтотОбъект, ВходящийКонтекст,
			"ПолучитьСертификатИзКонтейнераПриОшибкеПолученияСертификата", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПолучитьСертификатИзКонтенера(
			Оповещение,
			ВходящиеПараметры[0], // имя контейнера ключей
			ВходящийКонтекст.ИмяФайлаРезультата // файл сертификата
		);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатИзКонтейнераПослеПолученияСертификата(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайлаСертификата", Параметры[1], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПолучитьСертификатИзКонтейнераПриОшибкеПолученияСертификата(
		ИнформацияОбОшибке,
		СтандартнаяОбработка,
		ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСертификатИзКонтейнера",
		ОписаниеОшибкиНеУдалосьПолучитьСертификатИзКонтейнера(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСертификаты

Процедура ПолучитьСертификаты(ОповещениеОЗавершении, ХранилищеСертификатов, ДополнительныеПараметры) Экспорт
	
	Параметры = ЗаполнитьДополнительныеПараметрыПриНеобходимости(ДополнительныеПараметры);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", СоздатьОповещениеОЗавершении(ОповещениеОЗавершении, Параметры));
	Контекст.Вставить("ХранилищеСертификатов", ПолучитьСписокХранилищСертификатов(ХранилищеСертификатов));
	Контекст.Вставить("ДополнительныеПараметры", Параметры);
	Контекст.Вставить("Сертификаты", Новый Массив);
	
	ЗаполнитьДополнительныеПараметрыПриНеобходимости(Контекст);
	
	Если ЗначениеЗаполнено(Контекст.ХранилищеСертификатов.ЛокальныеХранилища) Тогда
		Параметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Параметры);
		Параметры.ВыводитьСообщения = Ложь;
		
		ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
		ПутьМодуляКриптографии = "";
		Если ЭтоLinux Тогда
			ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
			Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.';
										|en = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.'");
				ВыполнитьОбработкуОповещения(
					Контекст.ОповещениеОЗавершении,
					КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, Контекст));
				Возврат;
			КонецЕсли;
			Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(, ЭтоLinux,, ПутьМодуляКриптографии);
			
		Иначе
			Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
		СоздатьМенеджерКриптографии2(
			Оповещение,
			Криптопровайдер,
			Параметры);
	Иначе
		ПолучитьСертификатыИзОблачногоХранилища(Контекст);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСертификатыПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		ВходящийКонтекст.Вставить("ТекущееЛокальноеХранилище", 0);
		ПолучитьСертификатыИзЛокальногоХранилища(ВходящийКонтекст);
	Иначе
		Если ЗначениеЗаполнено(ВходящийКонтекст.ХранилищеСертификатов.ХранилищаНаСервере) Тогда
			ПолучитьСертификатыИзОблачногоХранилища(ВходящийКонтекст);
		Иначе
			ЗавершитьСОтрицательнымРезультатом(ПолучитьОписаниеОшибки(Результат), ВходящийКонтекст, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если ВходящийКонтекст.ВходящиеПараметры[0].ХранилищаНаСервере.Количество() > 0 Тогда
			СертификатыНаСервере = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСертификаты(
				ВходящийКонтекст.ВходящиеПараметры[0].ХранилищаНаСервере);
			Для Каждого Сертификат Из СертификатыНаСервере Цикл
				Сертификаты.Добавить(Сертификат);
			КонецЦикла;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", Сертификаты, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСертификатыПолучитьСледующий(ОповещениеОЗавершении, ХранилищаСертификатов, ТекущееХранилище,
												ТолькоКлючевыеСвойства, МенеджерКриптографии, ВыводитьСообщения) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ХранилищаСертификатов", ХранилищаСертификатов);
	Контекст.Вставить("ТекущееХранилище", ТекущееХранилище);
	Контекст.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолучитьСледующийСертификат", ЭтотОбъект, Контекст,
		"ПолучитьСертификатыПриОшибкеПолучитьСледующийСертификат", ЭтотОбъект);
		
	МенеджерКриптографии.НачатьВызовПолучитьСледующийСертификат(ОписаниеОповещения, ХранилищаСертификатов[ТекущееХранилище]);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолучитьСледующийСертификат(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда	
		Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияСвойств", ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ТолькоКлючевыеСвойства);	
	Иначе
		Если ВходящийКонтекст.ТекущееХранилище < ВходящийКонтекст.ХранилищаСертификатов.ВГраница() Тогда				
			ПолучитьСертификатыПолучитьСледующий(
				ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст.ХранилищаСертификатов, ВходящийКонтекст.ТекущееХранилище + 1,
				ВходящийКонтекст.ТолькоКлючевыеСвойства, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Сертификаты, ВходящийКонтекст));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПриОшибкеПолучитьСледующийСертификат(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(СтандартнаяОбработка, ВходящийКонтекст, "ПолучитьСледующийСертификат",, ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСвойств(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
		СвойстваСертификата = Результат.СвойстваСертификата;

		ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;	
		Если ОповещениеОЗавершении.ДополнительныеПараметры.Свойство("Сертификаты") Тогда
			ОповещениеОЗавершении.ДополнительныеПараметры.Сертификаты.Добавить(Новый ФиксированнаяСтруктура(СвойстваСертификата));
		Иначе
			Сертификаты = Новый Массив;
			Сертификаты.Добавить(Новый ФиксированнаяСтруктура(СвойстваСертификата));
			ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
		КонецЕсли;
		ПолучитьСертификатыПолучитьСледующий(
			ОповещениеОЗавершении, ВходящийКонтекст.ХранилищаСертификатов, ВходящийКонтекст.ТекущееХранилище, 
			ВходящийКонтекст.ТолькоКлючевыеСвойства, ВходящийКонтекст.МенеджерКриптографии, ВходящийКонтекст.ВыводитьСообщения);
	Иначе 
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыИзЛокальногоХранилища(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущееЛокальноеХранилище < ВходящийКонтекст.ХранилищеСертификатов.ЛокальныеХранилища.Количество() Тогда
		Хранилище = ВходящийКонтекст.ХранилищеСертификатов.ЛокальныеХранилища[ВходящийКонтекст.ТекущееЛокальноеХранилище];
		
		Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияСертификатов", ЭтотОбъект, ВходящийКонтекст, "ПолучитьСертификатыПослеПолученияСертификатов_Ошибка", ЭтотОбъект);
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПолучитьСертификаты(Оповещение, Хранилище);
	Иначе
		ПолучитьСертификатыИзОблачногоХранилища(ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСертификатов_Ошибка(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "УстановитьСертификатВКонтейнерИХранилище",ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат(),ИнформацияОбОшибке);
			
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСертификатов(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Сертификаты = КриптографияЭДКОСлужебныйКлиентПовтИсп.ПреобразоватьСертификатыНаСервере(Результат);
	Для Каждого Сертификат Из Сертификаты Цикл
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь, Сертификат); 
		ВходящийКонтекст.Сертификаты.Добавить(Сертификат);
	КонецЦикла;
	ВходящийКонтекст.ТекущееЛокальноеХранилище = ВходящийКонтекст.ТекущееЛокальноеХранилище + 1;
	ПолучитьСертификатыИзЛокальногоХранилища(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ПолучитьСертификатыИзОблачногоХранилища(ВходящийКонтекст) Экспорт
	
	Сертификаты = ВходящийКонтекст.Сертификаты;
	Если ВходящийКонтекст.ХранилищеСертификатов.ХранилищаНаСервере.Количество() > 0 Тогда
		СертификатыНаСервере = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСертификаты(
			ВходящийКонтекст.ХранилищеСертификатов.ХранилищаНаСервере);
		Для Каждого Сертификат Из СертификатыНаСервере Цикл
			Сертификаты.Добавить(Сертификат);
		КонецЦикла;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении, 
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", Новый ФиксированныйМассив(Сертификаты), ВходящийКонтекст));
		
КонецПроцедуры

Функция ПолучитьОписаниеОшибки(Результат)
	
	Если Результат.Свойство("КодОшибки") Тогда
		Возврат Новый Структура("Код,Описание", Результат.КодОшибки, Результат.ОписаниеОшибки);
	Иначе
		Возврат КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеклассифицированнаяОшибкаВыполнения(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецФункции

Процедура ЗавершитьСОтрицательнымРезультатом(Ошибка, ВходящийКонтекст, ЗаписатьВЖурналРегистрации = Истина)
	
	ОбщегоНазначенияЭДКОКлиент.ЗавершитьСОтрицательнымРезультатом(
		Ошибка,
		ВходящийКонтекст,
		ИмяСобытия(),
		ЗаписатьВЖурналРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьСвойстваСертификата

Процедура ПолучитьСвойстваСертификата(ОповещениеОЗавершении, ВыводитьСообщения, МенеджерКриптографии, ТолькоКлючевыеСвойства = Ложь) 
	
	Контекст = Новый Структура;
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	СписокСвойствСертификатаСтрокой = СтрСоединить(ПолучитьСписокСвойствСертификата(ТолькоКлючевыеСвойства), ",");
	СвойстваСертификата = Новый Структура(СписокСвойствСертификатаСтрокой);
	Контекст.Вставить("СвойстваСертификата", СвойстваСертификата); 
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСвойстваСертификатаПослеПолучения", ЭтотОбъект, Контекст);
		
	ПолучитьСвойствоСертификата(0, ВыводитьСообщения, МенеджерКриптографии, Оповещение, ТолькоКлючевыеСвойства);
	
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатаПослеПолучения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящийКонтекст.СвойстваСертификата, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификата(ИндексСвойства, ВыводитьСообщения, МенеджерКриптографии, ОповещениеОЗавершении, ТолькоКлючевыеСвойства)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ИндексСвойства", ИндексСвойства);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ТолькоКлючевыеСвойства", ТолькоКлючевыеСвойства);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойствоСертификатаПослеПолучения", ЭтотОбъект, Контекст,
		"ПолучитьСвойствоСертификатаПриОшибкеПолучения", ЭтотОбъект);
		
	СписокСвойствСертификата = ПолучитьСписокСвойствСертификата();
	Свойство = СписокСвойствСертификата[ИндексСвойства];
	Если Свойство = "Версия" Тогда
		МенеджерКриптографии.НачатьПолучениеВерсия(Оповещение);
	ИначеЕсли Свойство = "Наименование" Тогда
		МенеджерКриптографии.НачатьПолучениеИмяСертификата(Оповещение);
	ИначеЕсли Свойство = "СерийныйНомер" Тогда
		МенеджерКриптографии.НачатьПолучениеСерийныйНомер(Оповещение);
	ИначеЕсли Свойство = "Поставщик" Тогда
		МенеджерКриптографии.НачатьПолучениеПоставщик(Оповещение);
	ИначеЕсли Свойство = "Владелец" Тогда
		МенеджерКриптографии.НачатьПолучениеСубъект(Оповещение);
	ИначеЕсли Свойство = "Отпечаток" Тогда
		МенеджерКриптографии.НачатьПолучениеОтпечаток(Оповещение);
	ИначеЕсли Свойство = "ИспользоватьДляПодписи" Тогда
		МенеджерКриптографии.НачатьПолучениеПригоденДляПодписывания(Оповещение);
	ИначеЕсли Свойство = "ИспользоватьДляШифрования" Тогда
		МенеджерКриптографии.НачатьПолучениеПригоденДляШифрования(Оповещение);
	ИначеЕсли Свойство = "ДействителенС" Тогда
		МенеджерКриптографии.НачатьПолучениеДействителенС(Оповещение);
	ИначеЕсли Свойство = "ДействителенПо" Тогда
		МенеджерКриптографии.НачатьПолучениеДействителенДо(Оповещение);
	ИначеЕсли Свойство = "Хранилище" Тогда
		МенеджерКриптографии.НачатьПолучениеИмяХранилища(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификатаПослеПолучения(Значение, ВходящийКонтекст) Экспорт
	
	СписокСвойствСертификата = ПолучитьСписокСвойствСертификата(ВходящийКонтекст.ТолькоКлючевыеСвойства);
	Свойство = СписокСвойствСертификата[ВходящийКонтекст.ИндексСвойства];
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	Если Свойство = "Наименование" Тогда
		Значение = ОбщегоНазначенияЭДКОКлиентСервер.ЗаменитьНечитаемыеСимволы(Значение);
		
	ИначеЕсли (Свойство = "ДействителенС" ИЛИ Свойство = "ДействителенПо") И ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Значение - СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ПоправкаКУниверсальномуВремени;
	КонецЕсли;
	ОповещениеОЗавершении.ДополнительныеПараметры.СвойстваСертификата[Свойство] = Значение;
	
	Если ВходящийКонтекст.ИндексСвойства >= СписокСвойствСертификата.ВГраница() Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Истина, "СвойстваСертификата", 
				ОповещениеОЗавершении.ДополнительныеПараметры.СвойстваСертификата,
				ВходящийКонтекст));
	Иначе 
		ПолучитьСвойствоСертификата(
			ВходящийКонтекст.ИндексСвойства + 1, ВходящийКонтекст.ВыводитьСообщения, 
			ВходящийКонтекст.МенеджерКриптографии, ОповещениеОЗавершении, ВходящийКонтекст.ТолькоКлючевыеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСвойствоСертификатаПриОшибкеПолучения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, 
		ПолучитьСписокСвойствСертификата()[ВходящийКонтекст.ИндексСвойства],, ИнформацияОбОшибке);
			
КонецПроцедуры

Функция ПолучитьСписокСвойствСертификата(ТолькоКлючевыеСвойства = Ложь)
	
	СписокСвойствСертификата = Новый Массив;
	СписокСвойствСертификата.Добавить("СерийныйНомер");
	СписокСвойствСертификата.Добавить("Поставщик");
	СписокСвойствСертификата.Добавить("Отпечаток");
	
	Если Не ТолькоКлючевыеСвойства Тогда
		СписокСвойствСертификата.Добавить("Версия");
		СписокСвойствСертификата.Добавить("Наименование");
		СписокСвойствСертификата.Добавить("Владелец");		
		СписокСвойствСертификата.Добавить("ИспользоватьДляПодписи");
		СписокСвойствСертификата.Добавить("ИспользоватьДляШифрования");
		СписокСвойствСертификата.Добавить("ДействителенС");
		СписокСвойствСертификата.Добавить("ДействителенПо");
		СписокСвойствСертификата.Добавить("Хранилище");
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(СписокСвойствСертификата);
	
КонецФункции

Функция СоздатьОповещениеОЗавершении(ОповещениеОЗавершении, ДополнительныеПараметры)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеВызоваПроцедуры", ЭтотОбъект, Контекст);
	
	Возврат Оповещение;
	
КонецФункции

Процедура ОбработатьЗавершениеВызоваПроцедуры(Результат, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);

КонецПроцедуры


#КонецОбласти

#Область ЭкспортироватьСертификатВФайл

Процедура ЭкспортироватьСертификатВФайл(ОповещениеОЗавершении, Сертификат, ИмяФайлаСертификата, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, Сертификат, ИмяФайлаСертификата);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ЭкспортироватьСертификатВФайлПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[1], ВходящийКонтекст, "ЭкспортироватьСертификатВФайлПослеПолученияИмениФайла");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"ЭкспортироватьСертификатВФайлПослеПолученияСертификата", ЭтотОбъект, ВходящийКонтекст);
			
		Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[0]) Тогда
			РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[0], ВходящийКонтекст);
			РезультатВыполнения.Вставить("СертификатНайден", Истина);
			ВыполнитьОбработкуОповещения(
				Оповещение,
				РезультатВыполнения);
		Иначе
			НайтиСертификат(
				Оповещение,
				ВходящиеПараметры[0],
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Неопределено);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
		
		Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеЭкспорта", ЭтотОбъект, ВходящийКонтекст,
		"ЭкспортироватьСертификатВФайлПриОшибкеЭкспорта", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовЭкспортироватьСертификат(
			Оповещение, 
			ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат для экспорта
			ВходящийКонтекст.ИмяФайлаРезультата // файл сертификата
		);
	ИначеЕсли Результат.Выполнено И Не Результат.СертификатНайден Тогда		
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьНайтиСертификат(ВходящийКонтекст.ВходящиеПараметры[0]);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеЭкспорта(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайлаСертификата", Параметры[2], ВходящийКонтекст));	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПриОшибкеЭкспорта(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ЭкспортироватьСертификат",
		ОписаниеОшибкиНеУдалосьВыгрузитьСертификат(), ИнформацияОбОшибке);

КонецПроцедуры

#КонецОбласти

#Область ЭкспортироватьСертификатВBase64

Процедура ЭкспортироватьСертификатВBase64(ОповещениеОЗавершении, Сертификат, ВыводитьСообщения, МенеджерКриптографии, ДвоичныеДанные) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Истина, "СтрокаBase64", 
				КриптографияЭДКОСлужебныйВызовСервера.ЭкспортироватьСертификатВBase64(Сертификат), Контекст));
				
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
		СодержимоеСертификата = "";
		ДанныеСертификата = КриптографияЭДКОСлужебныйВызовСервера.НайтиОблачныйСертификат(Сертификат);
		Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
			СодержимоеСертификата = Base64Строка(ДанныеСертификата.Сертификат);
		КонецЕсли;
	
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Истина, "СтрокаBase64", 
				СодержимоеСертификата, Контекст));
				
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ЭкспортироватьСертификатВBase64ПослеЭкспортВФайл", 
			ЭтотОбъект, 
			Контекст);
			
		ЭкспортироватьСертификатВФайл(
			Оповещение, Сертификат, ".cer", ВыводитьСообщения, МенеджерКриптографии);
			
	КонецЕсли;		
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВBase64ПослеЭкспортВФайл(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		
		ВходящийКонтекст.Вставить("ИмяФайлаСертификата", Результат.ИмяФайлаСертификата);
		
		Оповещение = Новый ОписаниеОповещения(
			"ЭкспортироватьСертификатВBase64ПослеКонвертацииВBase64", 
			ЭтотОбъект, 
			ВходящийКонтекст);
		
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			Результат.ИмяФайлаСертификата, 
			ВходящийКонтекст.ВыводитьСообщения, 
			ВходящийКонтекст.ДвоичныеДанные,
			Ложь);
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВBase64ПослеКонвертацииВBase64(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено Тогда
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.ИмяФайлаСертификата);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИмпортироватьСертификат

Процедура ИмпортироватьСертификат(ОповещениеОЗавершении, ИмяФайлаСертификата, ХранилищеСертификатов, ВыводитьСообщения, МенеджерКриптографии) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаСертификата, ХранилищеСертификатов);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ИмпортироватьСертификатПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ДлительнаяОтправкаКлиент.ЗапомнитьКонтекстДлительнойОперации(ВходящийКонтекст,
			"КриптографияЭДКОКлиент.ИмпортироватьСертификат");
		
		// глобальный обработчик из модуля ДлительнаяОтправкаКлиентГлобальный
		ПодключитьОбработчикОжидания("Подключаемый_ИмпортироватьСертификатКриптографии", 0.1, Истина);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмпортироватьСертификатКриптографии() Экспорт
	
	ВходящийКонтекст = ДлительнаяОтправкаКлиент.КонтекстДлительнойОперации(
		"КриптографияЭДКОКлиент.ИмпортироватьСертификат");
	
	Оповещение = Новый ОписаниеОповещения(
		"ИмпортироватьСертификатПослеИмпорта", ЭтотОбъект, ВходящийКонтекст,
		"ИмпортироватьСертификатПриОшибкеИмпорта", ЭтотОбъект);
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
	ВходящийКонтекст.МенеджерКриптографии.НачатьВызовИмпортироватьСертификат(
		Оповещение, 
		ВходящиеПараметры[0], // файл сертификата 
		ВходящиеПараметры[1] // хранилище
		);
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеИмпорта(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"ИмпортироватьСертификатПослеИмпортаПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
	
	ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПослеИмпортаПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", Результат.СвойстваСертификата, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмпортироватьСертификатПриОшибкеИмпорта(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	
	Если ЭтоLinux Тогда
		// обход - игнорируем ошибку недостатка прав установки корневых и промежуточных сертификатов УЦ
		ХранилищеСертификатов = ВРег(ВходящийКонтекст.ВходящиеПараметры[1]);
		Если ХранилищеСертификатов = "ROOT" ИЛИ ХранилищеСертификатов = "CA" Тогда
			СвойстваСертификата = Новый Структура("Отпечаток", "");
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", СвойстваСертификата, ВходящийКонтекст));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "ИмпортироватьСертификат",
		ОписаниеОшибкиНеУдалосьИмпортироватьСертификат(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификат

Процедура НайтиСертификат(
		ОповещениеОЗавершении,
		Сертификат,
		ВыполнятьПроверку,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмПроверки,
		ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПослеПоиска", ЭтотОбъект, Контекст);
	
	Сертификаты = Новый Массив;
	Сертификаты.Добавить(Сертификат);
	
	НайтиСертификаты(
		Оповещение,
		Сертификаты,
		ВыполнятьПроверку,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмПроверки,
		ТолькоКлючевыеСвойства);
	
КонецПроцедуры

Процедура НайтиСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если Сертификаты.Количество() >= 1 Тогда
			СертификатНайден = Истина;
		Иначе
			СертификатНайден = Ложь;
		КонецЕсли;
		
		РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СертификатНайден", СертификатНайден, ВходящийКонтекст);
		Если СертификатНайден Тогда
			РезультатВыполнения.Вставить("СвойстваСертификата", Сертификаты[0]);
		КонецЕсли;
		РезультатВыполнения.Вставить("МенеджерКриптографии", ?(Результат.Свойство("МенеджерКриптографии"),
			Результат.МенеджерКриптографии, Неопределено));
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатВыполнения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификаты

Процедура НайтиСертификаты(
		ОповещениеОЗавершении,
		Сертификаты,
		ВыполнятьПроверку,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмПроверки,
		ТолькоКлючевыеСвойства = Ложь) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами 
	// есть одноименная процедура, которая используется при отправке отчетов 
	// из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	СертификатыВЗащищенномХранилищеНаСервере = Новый Массив;
	СертификатыВЛокальномХранилищеПоискПоОтпечатку = Новый Массив;
	СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру = Новый Массив;
	СертификатыОблачнойПодписи = Новый Массив;
	
	Для Каждого Сертификат Из Сертификаты Цикл
		Если КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
			СертификатыОблачнойПодписи.Добавить(Сертификат);
		ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
			СертификатыВЗащищенномХранилищеНаСервере.Добавить(Сертификат);
		Иначе
			Если ЗаполненСерийныйНомерСертификата(Сертификат) Тогда
				СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру.Добавить(Сертификат);
			Иначе
				СертификатыВЛокальномХранилищеПоискПоОтпечатку.Добавить(Сертификат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("СертификатыОблачнойПодписи", СертификатыОблачнойПодписи);
	Контекст.Вставить("СертификатыВЗащищенномХранилищеНаСервере", СертификатыВЗащищенномХранилищеНаСервере);
	Контекст.Вставить("СертификатыВЛокальномХранилищеПоискПоОтпечатку", СертификатыВЛокальномХранилищеПоискПоОтпечатку);
	Контекст.Вставить("СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру", СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру);
	Контекст.Вставить("ВыполнятьПроверку", ВыполнятьПроверку);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("АлгоритмПроверки", АлгоритмПроверки);

	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПослеПоискаПоОтпечаткам", ЭтотОбъект, Контекст);
		
	Отпечатки = Новый Массив;
	Для Каждого Сертификат Из СертификатыВЛокальномХранилищеПоискПоОтпечатку Цикл
		Отпечатки.Добавить(Сертификат.Отпечаток);
	КонецЦикла;
	
	Если Отпечатки.Количество() = 0 Тогда
		Результат = Новый Структура("Выполнено,Сертификаты,НенайденныеСертификаты,МенеджерКриптографии", Истина, Новый Массив, Новый Массив, МенеджерКриптографии); 
		НайтиСертификатПослеПоискаПоОтпечаткам(Результат , Контекст);
	Иначе
		СписокХранилищСертификатов = Новый Массив;
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "AddressBook", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "CA", Истина));
		СписокХранилищСертификатов.Добавить(Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "ROOT", Истина));
		
		НайтиСертификатыПоОтпечаткам(
			Оповещение,
			Отпечатки,
			СписокХранилищСертификатов,
			ВыполнятьПроверку,
			ВыводитьСообщения,
			МенеджерКриптографии,
			АлгоритмПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПослеПоискаПоОтпечаткам(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("НайденныеСертификаты", Результат.Сертификаты);
		ВходящийКонтекст.Вставить("МенеджерКриптографии", ?(Результат.Свойство("МенеджерКриптографии"), Результат.МенеджерКриптографии, Неопределено));
		НенайденныеСертификаты = Новый Массив;
		Для Каждого НенайденныйСертификат Из Результат.НенайденныеСертификаты Цикл
			НенайденныеСертификаты.Добавить(Новый Структура("Отпечаток", НенайденныйСертификат));
		КонецЦикла;
		
		ВходящийКонтекст.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
	Иначе 
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
			Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатыПослеПоискаПоСерийнымНомерам", ЭтотОбъект, ВходящийКонтекст);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
	Контекст.Вставить("Сертификаты", ВходящийКонтекст.СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру);
	Контекст.Вставить("ТекущийСертификат", 0);
	Контекст.Вставить("ВыполнятьПроверку", ВходящийКонтекст.ВыполнятьПроверку);
	Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
	Контекст.Вставить("НайденныеСертификаты", Новый Массив);
	Контекст.Вставить("НенайденныеСертификаты", Новый Массив);
	Контекст.Вставить("АлгоритмПроверки", ВходящийКонтекст.АлгоритмПроверки);
	
	Если ВходящийКонтекст.СертификатыВЛокальномХранилищеПоискПоСерийномуНомеру.Количество() = 0 Тогда
		Результат = Новый Структура("Выполнено,НайденныеСертификаты,НенайденныеСертификаты", Истина, Новый Массив, Новый Массив);
		НайтиСертификатыПослеПоискаПоСерийнымНомерам(Результат, ВходящийКонтекст);
	Иначе
		НайтиСертификатыПоСерийнымНомерам(Контекст);
	КонецЕсли;

КонецПроцедуры

Процедура НайтиСертификатыПоСерийнымНомерам(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущийСертификат < ВходящийКонтекст.Сертификаты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПослеПоискаПоСерийномуНомеру", ЭтотОбъект, ВходящийКонтекст);
		НайтиСертификатПоСерийномуНомеру(
			Оповещение,
			ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат].СерийныйНомер,
			ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат].Поставщик,
			ВходящийКонтекст.ВыполнятьПроверку,
			ВходящийКонтекст.ВыводитьСообщения,
			ВходящийКонтекст.МенеджерКриптографии,
			ВходящийКонтекст.АлгоритмПроверки);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "НайденныеСертификаты", ВходящийКонтекст.НайденныеСертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", ВходящийКонтекст.НенайденныеСертификаты);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПослеПоискаПоСерийномуНомеру(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.НайденныеСертификаты.Добавить(Результат.СвойстваСертификата);
	ИначеЕсли Результат.Выполнено И Не Результат.СертификатНайден Тогда
		ВходящийКонтекст.НенайденныеСертификаты.Добавить(ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат]);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
		Возврат;
	КонецЕсли;
	ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
	НайтиСертификатыПоСерийнымНомерам(ВходящийКонтекст);
	
КонецПроцедуры

Процедура НайтиСертификатыПослеПоискаПоСерийнымНомерам(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		НайденныеСертификаты = ВходящийКонтекст.НайденныеСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСертификаты, Результат.НайденныеСертификаты);
		
		НенайденныеСертификаты = ВходящийКонтекст.НенайденныеСертификаты;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НенайденныеСертификаты, Результат.НенайденныеСертификаты);
		
		Если ВходящийКонтекст.СертификатыВЗащищенномХранилищеНаСервере.Количество() > 0 Тогда
			РезультатПоиска = КриптографияЭДКОСлужебныйВызовСервера.НайтиСертификатыВЗащищенномХранилищеНаСервере(
				ВходящийКонтекст.СертификатыВЗащищенномХранилищеНаСервере, ВходящийКонтекст.ВыполнятьПроверку);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСертификаты, РезультатПоиска.Сертификаты);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НенайденныеСертификаты, РезультатПоиска.НенайденныеСертификаты);
		ИначеЕсли ВходящийКонтекст.СертификатыОблачнойПодписи.Количество() > 0 Тогда
			РезультатПоиска = КриптографияЭДКОСлужебныйВызовСервера.НайтиСертификатыОблачнойПодписи(
				ВходящийКонтекст.СертификатыОблачнойПодписи, Неопределено, ВходящийКонтекст.ВыполнятьПроверку);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеСертификаты, РезультатПоиска.Сертификаты);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НенайденныеСертификаты, РезультатПоиска.НенайденныеСертификаты);
		КонецЕсли;
		
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", НайденныеСертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатПоСерийномуНомеру

Процедура НайтиСертификатПоСерийномуНомеру(
		ОповещениеОЗавершении,
		СерийныйНомер,
		Поставщик,
		ВыполнятьПроверку,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмПроверки) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(4, СерийныйНомер, Поставщик, ВыполнятьПроверку, АлгоритмПроверки);
	
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "НайтиСертификатПоСерийномуНомеруПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии);
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПоиска", ЭтотОбъект, ВходящийКонтекст,
			"НайтиСертификатПоСерийномуНомеруПриОшибкеПоиска", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовНайтиСертификат(
			Оповещение, 
			ВходящиеПараметры[0], // серийный номер 
			ВходящиеПараметры[1] // поставщик
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПоиска(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьСвойстваСертификата(Оповещение, ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СертификатНайден", Ложь, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
		
		АлгоритмПроверки = ВходящийКонтекст.ВходящиеПараметры[3];
		
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатПоСерийномуНомеруПослеПроверкиСертификата", ЭтотОбъект, Контекст);
			
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда // выполнять проверку
			ПроверитьСертификат(
				Оповещение,
				Результат.СвойстваСертификата,,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				АлгоритмПроверки);
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина,,, ВходящийКонтекст));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеруПослеПроверкиСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда // выполнять проверку
			ВходящийКонтекст.СвойстваСертификата.Вставить("Валиден", Результат.Валиден);
		КонецЕсли;
		СвойстваСертификата = Новый ФиксированнаяСтруктура(ВходящийКонтекст.СвойстваСертификата);
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СертификатНайден", Истина, ВходящийКонтекст);
		Результат.Вставить("СвойстваСертификата", СвойстваСертификата);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры
	
Процедура НайтиСертификатПоСерийномуНомеруПриОшибкеПоиска(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст, "НайтиСертификат",
		ОписаниеОшибкиНеУдалосьНайтиСертификат(), ИнформацияОбОшибке);
		
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатыПоОтпечаткам

Процедура СохранитьНайденныеСертификаты(Сертификаты) Экспорт
	
	СертификатыДляСохранения = ПолучитьСохраненныеСертификаты();
	
	Для Каждого Сертификат Из Сертификаты Цикл
	СертификатыДляСохранения.Вставить(
		"Отпечаток_" + Сертификат.Отпечаток,
		Новый Структура("СерийныйНомер, Поставщик", Сертификат.СерийныйНомер, Сертификат.Поставщик));
	КонецЦикла;
		
	ПараметрыПриложения.Вставить("ДокументооборотСКО/Криптография", СертификатыДляСохранения);
	
КонецПроцедуры

Функция ПолучитьСохраненныеСертификаты() Экспорт
	
	Сертификаты = ПараметрыПриложения.Получить("ДокументооборотСКО/Криптография");
	Если Не ЗначениеЗаполнено(Сертификаты) Тогда
		Сертификаты = Новый Структура;
	КонецЕсли;
	
	Возврат Сертификаты;
	
КонецФункции

Процедура НайтиСертификатыПоОтпечаткам(
		ОповещениеОЗавершении,
		Отпечатки,
		ХранилищеСертификатов,
		ВыполнятьПроверку,
		ВыводитьСообщения,
		МенеджерКриптографии,
		АлгоритмПроверки) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВходящиеПараметры", ПараметрыВМассив(4, Отпечатки, ХранилищеСертификатов, ВыполнятьПроверку, АлгоритмПроверки));
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
			
	КешСертификатов = ПолучитьСохраненныеСертификаты();
	
	Контекст.Вставить("КешСертификатов", КешСертификатов);
	Контекст.Вставить("Отпечатки", Отпечатки);
		
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств", ЭтотОбъект, Контекст);
		
	ОсталосьНайти = Новый Массив;
	Для Каждого Отпечаток Из Отпечатки Цикл
		Если Не КешСертификатов.Свойство("Отпечаток_" + Отпечаток) Тогда
			ОсталосьНайти.Добавить(Отпечаток);
		КонецЕсли;
	КонецЦикла;
	
	Если ОсталосьНайти.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ХранилищеСертификатов) Тогда
			Если ТипЗнч(ХранилищеСертификатов) = Тип("Строка") Тогда
				Хранилище = Новый Структура("Хранилище, ЭтоЛокальноеХранилище", ХранилищеСертификатов, Истина);
			Иначе
				Хранилище = ХранилищеСертификатов;
			КонецЕсли;
		Иначе
			Хранилище = Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметрыМетода = Неопределено;
		Если НЕ ВыводитьСообщения Тогда
			ДополнительныеПараметрыМетода = Новый Структура;
			ДополнительныеПараметрыМетода.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", Ложь);
			ДополнительныеПараметрыМетода.Вставить("ВыводитьСообщения", Ложь);
		КонецЕсли;
		КриптографияЭДКОКлиент.ПолучитьСертификаты(Оповещение, Хранилище, ДополнительныеПараметрыМетода);
		
	Иначе
		НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств(
			Новый Структура("Выполнено, МенеджерКриптографии", Истина, МенеджерКриптографии), Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПолученияКлючевыхСвойств(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПоОтпечаткамПослеПолученияСертификатов", ЭтотОбъект, ВходящийКонтекст);
		Контекст = Новый Структура;	
		Если Результат.Свойство("Сертификаты") Тогда
			КешСертификатов = Новый Структура;
			Для Каждого Сертификат Из Результат.Сертификаты Цикл
				КешСертификатов.Вставить(
					"Отпечаток_" + Сертификат.Отпечаток,
					Новый Структура("СерийныйНомер, Поставщик", Сертификат.СерийныйНомер, Сертификат.Поставщик));
			КонецЦикла;
			Контекст.Вставить("КешСертификатов", КешСертификатов);	
		Иначе 
			Контекст.Вставить("КешСертификатов", ВходящийКонтекст.КешСертификатов);
		КонецЕсли;
		Контекст.Вставить("ТекущийСертификат", 0);
		Контекст.Вставить("Сертификаты", Новый Массив);
		Контекст.Вставить("Отпечатки", ВходящийКонтекст.Отпечатки);
		Контекст.Вставить("ОповещениеОЗавершении", Оповещение);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("МенеджерКриптографии", ?(Результат.Свойство("МенеджерКриптографии"),
			Результат.МенеджерКриптографии, Неопределено));
		Контекст.Вставить("АлгоритмПроверки", ВходящийКонтекст.ВходящиеПараметры[3]);
		
		НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(Контекст);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, Контекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ТекущийСертификат <= ВходящийКонтекст.Отпечатки.ВГраница() Тогда
		Отпечаток = "Отпечаток_" + ВходящийКонтекст.Отпечатки[ВходящийКонтекст.ТекущийСертификат];
		Если ВходящийКонтекст.КешСертификатов.Свойство(Отпечаток) Тогда
			Оповещение = Новый ОписаниеОповещения(
				"НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру", ЭтотОбъект, ВходящийКонтекст);
			Сертификат = ВходящийКонтекст.КешСертификатов[Отпечаток];
			НайтиСертификатПоСерийномуНомеру(
				Оповещение,
				Сертификат.СерийныйНомер,
				Сертификат.Поставщик,
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				ВходящийКонтекст.АлгоритмПроверки);
		Иначе
			НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру(
				Новый Структура("Выполнено,СертификатНайден", Истина, Ложь), ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.Сертификаты, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПоискаПоСерийномуНомеру(Результат, ВходящийКонтекст) Экспорт

	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		ВходящийКонтекст.Сертификаты.Добавить(Результат.СвойстваСертификата);	
	КонецЕсли;
	
	Если ВходящийКонтекст.Свойство("МенеджерКриптографии") И ВходящийКонтекст.МенеджерКриптографии = Неопределено И Результат.Свойство("МенеджерКриптографии") Тогда
		ВходящийКонтекст.МенеджерКриптографии = Результат.МенеджерКриптографии;
	КонецЕсли;
	
	ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
	НайтиСертификатыПоОтпечаткамПоискомПоСерийномуНомеру(ВходящийКонтекст);
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПослеПолученияСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Отпечатки = ВходящийКонтекст.ВходящиеПараметры[0];
	
		НайденныеСертификаты = Новый Массив;
		НайденныеСертификатыОтпечатки = Новый Массив;
		Для Каждого Сертификат Из Результат.Сертификаты Цикл
			Если Отпечатки.Найти(Сертификат.Отпечаток) <> Неопределено 
				И НайденныеСертификатыОтпечатки.Найти(Сертификат.Отпечаток) = Неопределено Тогда
				НайденныеСертификаты.Добавить(Сертификат);
				НайденныеСертификатыОтпечатки.Добавить(Сертификат.Отпечаток);
			КонецЕсли;
		КонецЦикла;
		НенайденныеСертификаты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Отпечатки, НайденныеСертификатыОтпечатки);
		
		СохранитьНайденныеСертификаты(НайденныеСертификаты);
		
		Контекст = Новый Структура;
		Контекст.Вставить("Сертификаты", НайденныеСертификаты);
		Контекст.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
		Контекст.Вставить("ВходящиеПараметры", ВходящийКонтекст.ВходящиеПараметры);
		Контекст.Вставить("МенеджерКриптографии", ?(Результат.Свойство("МенеджерКриптографии"),
			Результат.МенеджерКриптографии, Неопределено));
		Контекст.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Контекст.Вставить("ТекущийСертификат", 0);
		Контекст.Вставить("ВыводитьСообщения", ВходящийКонтекст.ВыводитьСообщения);
		Контекст.Вставить("АлгоритмПроверки", ВходящийКонтекст.ВходящиеПараметры[3]);
		
		Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда
			НайтиСертификатыПоОтпечаткамПроверитьСертификаты(Контекст);
		Иначе
			Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", НайденныеСертификаты, Контекст);
			Результат.Вставить("НенайденныеСертификаты", НенайденныеСертификаты);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				Результат);
		КонецЕсли;		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, Контекст));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПроверитьСертификаты(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущийСертификат <= ВходящийКонтекст.Сертификаты.ВГраница() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"НайтиСертификатыПоОтпечаткамПроверитьСертификатыПослеПроверки", ЭтотОбъект, ВходящийКонтекст);
		
		ПроверитьСертификат(
			Оповещение,
			ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат],,
			ВходящийКонтекст.ВыводитьСообщения,
			ВходящийКонтекст.МенеджерКриптографии,
			ВходящийКонтекст.АлгоритмПроверки);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Сертификаты", ВходящийКонтекст.Сертификаты, ВходящийКонтекст);
		Результат.Вставить("НенайденныеСертификаты", ВходящийКонтекст.НенайденныеСертификаты);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Результат);
	КонецЕсли;
		
КонецПроцедуры

Процедура НайтиСертификатыПоОтпечаткамПроверитьСертификатыПослеПроверки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификат = Новый Структура(ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат]);
		Сертификат.Вставить("Валиден", Результат.Валиден);
		ВходящийКонтекст.Сертификаты[ВходящийКонтекст.ТекущийСертификат] = Новый ФиксированнаяСтруктура(Сертификат);
		ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
		НайтиСертификатыПоОтпечаткамПроверитьСертификаты(ВходящийКонтекст);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НайтиСертификатПоОтпечатку

Процедура НайтиСертификатПоОтпечатку(
		ОповещениеОЗавершении,
		Отпечаток,
		ХранилищеСертификатов,
		ВыполнятьПроверку,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		АлгоритмПроверки) Экспорт
	
	Отпечатки = Новый Массив;
	Отпечатки.Добавить(Отпечаток);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Оповещение = Новый ОписаниеОповещения(
		"НайтиСертификатПоОтпечаткуПослеПолученияСертификатов", ЭтотОбъект, Контекст);
	
	НайтиСертификатыПоОтпечаткам(
		Оповещение,
		Отпечатки,
		ХранилищеСертификатов,
		ВыполнятьПроверку,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		АлгоритмПроверки);
	
КонецПроцедуры

Процедура НайтиСертификатПоОтпечаткуПослеПолученияСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Сертификаты = Результат.Сертификаты;
		Если Сертификаты.Количество() = 1 Тогда
			СертификатНайден = Истина;
		Иначе
			СертификатНайден = Ложь;
		КонецЕсли;
		
		РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СертификатНайден", СертификатНайден, ВходящийКонтекст);
		Если СертификатНайден Тогда
			РезультатВыполнения.Вставить("СвойстваСертификата", Сертификаты[0]);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатВыполнения);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьСертификат

Процедура ПроверитьСертификат(
		ОповещениеОЗавершении,
		Сертификат,
		Проверки,
		ВыводитьСообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
		
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		
		Сертификат_ = Сертификат;
		
		Если ТипЗнч(Сертификат) = Тип("Структура") Тогда 
			Сертификат.Свойство("Сертификат", Сертификат_);
		КонецЕсли;
		
		Попытка
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
			 	КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
					Истина, "Валиден", 
					КриптографияЭДКОСлужебныйВызовСервера.ПроверитьСертификат(Сертификат_)));
		Исключение
			ТексОшибки = ОписаниеОшибки();
			Если СтрНайти(ТексОшибки, "CertificateHasExpiredOrIsNotYetValidError") > 0 Тогда
				РезультатПроверки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Валиден", Ложь);
			Иначе
				РезультатПроверки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ТексОшибки);
			КонецЕсли;	
			
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				РезультатПроверки);
		КонецПопытки;
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
		Сертификат_ = Сертификат;
		
		Если ТипЗнч(Сертификат) = Тип("Структура") Тогда 
			Сертификат.Свойство("Сертификат", Сертификат_);
		КонецЕсли;
		
		УчетнаяЗаписьОблачнойПодписи = Неопределено;
		Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(Сертификат, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
			Возврат;
		КонецЕсли;
		
		РезультатВыполнения = КриптографияЭДКОСлужебныйВызовСервера.ПроверитьСертификатОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи, Сертификат_);
		Если РезультатВыполнения.Выполнено Тогда
			РезультатПроверки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Валиден", РезультатВыполнения.Результат);
		Иначе 
			РезультатПроверки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", РезультатВыполнения.Ошибка);
		КонецЕсли;	
		
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			РезультатПроверки);
		
	Иначе
		ВходящиеПараметры = ПараметрыВМассив(3, Сертификат, Проверки, Алгоритм);
		
		Если Алгоритм = "*" Тогда
			ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", Сертификат);
		Иначе
			ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
		КонецЕсли;
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПроверитьСертификатПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Алгоритм = ВходящийКонтекст.ВходящиеПараметры[2];
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьСертификатПослеПоискаСертификата", ЭтотОбъект, ВходящийКонтекст);
		НайтиСертификат(
			Оповещение,
			ВходящийКонтекст.ВходящиеПараметры[0],
			Ложь,
			ВходящийКонтекст.ВыводитьСообщения,
			ВходящийКонтекст.МенеджерКриптографии,
			Алгоритм,
			Истина);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПоискаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		// обход нереализованности проверки без учета даты во внешней компоненте; обход недоступности проверки в Linux
		ПроверитьТолькоПоСпискуУстановленныхУЦ = (ВходящийКонтекст.ВходящиеПараметры[1] =
			"ПроверитьТолькоПоСпискуУстановленныхУЦ");
		ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
		Если ПроверитьТолькоПоСпискуУстановленныхУЦ ИЛИ ЭтоLinux Тогда
			ТекДата = ОбщегоНазначенияКлиент.ДатаУниверсальная();
			ПогрешностьДаты = 49 * 3600;
			
			ДатыДействияИзвестны = (ТипЗнч(Результат.СвойстваСертификата.ДействителенС) = Тип("Дата")
				И ТипЗнч(Результат.СвойстваСертификата.ДействителенПо) = Тип("Дата"));
			Если ПроверитьТолькоПоСпискуУстановленныхУЦ Тогда
				СертификатМожетИстекатьИлиНеБытьНачавшимДействовать = НЕ ДатыДействияИзвестны
					ИЛИ ТекДата - ПогрешностьДаты < Результат.СвойстваСертификата.ДействителенС
					ИЛИ ТекДата + ПогрешностьДаты > Результат.СвойстваСертификата.ДействителенПо;
			ИначеЕсли ЭтоLinux Тогда
				СертификатНеНачалДействовать = ДатыДействияИзвестны
					И ТекДата + ПогрешностьДаты < Результат.СвойстваСертификата.ДействителенС;
				СертификатИстек = ДатыДействияИзвестны
					И ТекДата - ПогрешностьДаты > Результат.СвойстваСертификата.ДействителенПо;
			КонецЕсли;
			
			Если ПроверитьТолькоПоСпискуУстановленныхУЦ И (ЭтоLinux ИЛИ СертификатМожетИстекатьИлиНеБытьНачавшимДействовать)
				ИЛИ НЕ ПроверитьТолькоПоСпискуУстановленныхУЦ И ЭтоLinux И НЕ СертификатНеНачалДействовать
				И НЕ СертификатИстек Тогда
				
				ВыполнитьОбработкуОповещения(
					ВходящийКонтекст.ОповещениеОЗавершении,
					КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Валиден", Истина, ВходящийКонтекст));
				Возврат;
				
			ИначеЕсли НЕ ПроверитьТолькоПоСпискуУстановленныхУЦ И ЭтоLinux И (СертификатНеНачалДействовать ИЛИ СертификатИстек) Тогда
				ОписаниеОшибки = ?(СертификатНеНачалДействовать, НСтр("ru = 'Срок действия сертификата еще не наступил';
																		|en = 'Срок действия сертификата еще не наступил'"),
					НСтр("ru = 'Срок действия сертификата истек';
						|en = 'Срок действия сертификата истек'"));
				ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
				Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ОписаниеОшибки", ОписаниеОшибки,
					ВходящийКонтекст);
				Результат.Вставить("Валиден", Ложь);
				ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьСертификатПослеПроверки", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьСертификатПриОшибкеПроверки", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПроверитьСертификат(
			Оповещение, 
			Результат.СвойстваСертификата.СерийныйНомер, 
			Результат.СвойстваСертификата.Поставщик);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверки(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Валиден", Результат, ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПроверитьСертификатПриОшибкеПроверки(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПолученияОшибки", ЭтотОбъект, ВходящийКонтекст);

	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПолученияОшибки(СписокОшибок, ВходящийКонтекст) Экспорт
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, СписокОшибок);
	Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ОписаниеОшибки", СписокОшибок, ВходящийКонтекст);
	Результат.Вставить("Валиден", Ложь);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьСертификат

Процедура ПоказатьСертификат(Сертификат, ФормаВладелец = Неопределено) Экспорт
	
	МестоХраненияКлюча = Неопределено;
	
	Если ТипЗнч(Сертификат) <> Тип("Массив")
		И ТипЗнч(Сертификат) <> Тип("ФиксированныйМассив") Тогда
		Если Сертификат.Свойство("Адрес") Тогда
			ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(Сертификат.Адрес, "Сертификат.cer");
			Возврат;
		КонецЕсли;
		
	    Сертификаты = Новый Массив;
		Сертификаты.Добавить(Сертификат);
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификат);
		
	Иначе
		Сертификаты = Сертификат;
		Если Сертификаты.Количество() > 0 Тогда
			МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификаты[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ФормаВладелец", ФормаВладелец);
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, Контекст);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьСертификатПослеПоиска", ЭтотОбъект, Контекст);
	НайтиСертификаты(
		Оповещение,
		Сертификаты,
		Ложь,
		Истина,
		Неопределено,
		Неопределено);
	
КонецПроцедуры

Процедура ПоказатьСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.Сертификаты.Количество() = 1 И Результат.НенайденныеСертификаты.Количество() = 0 Тогда
			ПоказатьСертификатПослеВыбораСертификата(
				Новый Структура("Значение", Результат.Сертификаты[0]), ВходящийКонтекст);
		Иначе
			СписокСертификатов = Новый СписокЗначений;
			Для Каждого НайденныйСертификат Из Результат.Сертификаты Цикл
				СписокСертификатов.Добавить(НайденныйСертификат, НайденныйСертификат.Наименование);
			КонецЦикла;
			Для Каждого НенайденныйСертификат Из Результат.НенайденныеСертификаты Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(
					ОписаниеОшибкиНеУдалосьНайтиСертификат(НенайденныйСертификат));
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения(
				"ПоказатьСертификатПослеВыбораСертификата", ЭтотОбъект, ВходящийКонтекст);
			СписокСертификатов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите сертификат для детального просмотра';
																		|en = 'Выберите сертификат для детального просмотра'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибкиНеУдалосьОткрытьСертификат());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификатПослеВыбораСертификата(ВыбранныйЭлемент, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ТипЗнч(ВходящийКонтекст.ФормаВладелец) = Тип("ФормаКлиентскогоПриложения")
			И ВходящийКонтекст.ФормаВладелец.Открыта() Тогда
			ФормаВладелец = ВходящийКонтекст.ФормаВладелец;
		Иначе
			ФормаВладелец = Неопределено;
		КонецЕсли;
		
		ВыбранныйСертификат = ВыбранныйЭлемент.Значение;
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст.МестоХраненияКлюча, ВыбранныйСертификат);
		
		ПараметрыФормы = Новый Структура("Сертификат", ВыбранныйСертификат);
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСертификата", ПараметрыФормы,
			ФормаВладелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ВыбратьСертификат

Процедура ВыбратьСертификат(
		ОповещениеОЗавершении, 
		МестоХраненияКлюча, 
		НачальноеЗначениеВыбора, 
		ХранилищеСертификатов, 
		ПоказыватьПросроченные, 
		МножественныйВыбор, 
		Отпечатки, 
		ЗапретитьВыборПросроченных, 
		БезВозможностиВыбора, 
		ОтпечаткиЗапрещенныхСертификатов, 
		СообщениеПриВыбореЗапрещенного) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Хранилище", ХранилищеСертификатов);
	ПараметрыФормы.Вставить("ПоказыватьПросроченные", ПоказыватьПросроченные);
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", МножественныйВыбор);
	ПараметрыФормы.Вставить("Отпечатки", Отпечатки);
	ПараметрыФормы.Вставить("ЗапретитьВыборПросроченных", ЗапретитьВыборПросроченных);
	ПараметрыФормы.Вставить("БезВозможностиВыбора", БезВозможностиВыбора);
	ПараметрыФормы.Вставить("ОтпечаткиЗапрещенныхСертификатов", ОтпечаткиЗапрещенныхСертификатов);
	ПараметрыФормы.Вставить("СообщениеПриВыбореЗапрещенного", СообщениеПриВыбореЗапрещенного);
	
	Контекст = Новый Структура();
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
	
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеВыбора", 
		ЭтотОбъект, 
		Контекст);
		
	Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		ПараметрыФормы.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		ОткрытьФорму("РегистрСведений.ХранилищеСертификатовПолучателей.Форма.ВыборСертификата",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
		ОткрытьФорму(
			"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВыборСертификатаЭлектроннаяПодписьВМоделиСервиса", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		ОткрытьФорму(
			"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВыборСертификатаИзСистемногоХранилища", 
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьСертификатПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	Успешно = Ложь;
	
	Если Результат <> Неопределено Тогда
		Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(ВходящийКонтекст.МестоХраненияКлюча) Тогда
			Если Результат.Выполнено Тогда
				Результат = Результат.Результат;
				Успешно = Истина
			КонецЕсли;
		Иначе
			Успешно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Успешно, ?(Успешно, "ВыбранноеЗначение", ""), Результат, ВходящийКонтекст));
		
КонецПроцедуры

#КонецОбласти

#Область ОтобразитьПредставлениеСертификата

Процедура ОтобразитьПредставлениеСертификата(
		МестоХраненияКлюча, 
		ПолеВвода, 
		Сертификат, 
		Форма, 
		ИмяРеквизитаПредставлениеСертификата, 
		ВыполняемоеОповещение,
		ИспользоватьКомпонентуЕслиНеМодельСервиса) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МестоХраненияКлюча",	 						МестоХраненияКлюча);
	ДополнительныеПараметры.Вставить("ПолеВвода",									ПолеВвода);
	ДополнительныеПараметры.Вставить("Форма", 										Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставлениеСертификата", 		ИмяРеквизитаПредставлениеСертификата);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 						ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", 	ИспользоватьКомпонентуЕслиНеМодельСервиса);
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = "";
		ПолеВвода.ПодсказкаВвода = НСтр("ru = 'Выберите сертификат';
										|en = 'Выберите сертификат'");
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// возможные варианты параметра Сертификат на входе: строка, структура, соответствие или табличная часть
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат <> Тип("Строка") И ТипЗнчСертификат <> Тип("Структура") 
		И ТипЗнчСертификат <> Тип("Соответствие") И Сертификат.Количество() = 1 Тогда
		Сертификат = Сертификат[0].Сертификат;
		ТипЗнчСертификат = Тип("Строка");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);

	Если ТипЗнчСертификат = Тип("Строка") ИЛИ ТипЗнчСертификат = Тип("Структура") ИЛИ ТипЗнчСертификат = Тип("Соответствие") Тогда
		ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры);
	Иначе
		ОтобразитьНесколькоСертификатовВПолеВвода(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры)
	
	Сертификат 									= ДополнительныеПараметры.Сертификат;
	МестоХраненияКлюча							= ДополнительныеПараметры.МестоХраненияКлюча;
	ИспользоватьКомпонентуЕслиНеМодельСервиса 	= ДополнительныеПараметры.ИспользоватьКомпонентуЕслиНеМодельСервиса;
	
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	
	Если ТипЗнчСертификат <> Тип("Структура") И ТипЗнчСертификат <> Тип("Соответствие") Тогда
		
		ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Ложь);
		Если ИспользоватьКомпонентуЕслиНеМодельСервиса
			ИЛИ НЕ КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(МестоХраненияКлюча) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата", 
				ЭтотОбъект, 
				ДополнительныеПараметры);
			
			ПараметрыСертификата = Новый Структура();
			ПараметрыСертификата.Вставить("МестоХраненияКлюча", 	МестоХраненияКлюча);
			ПараметрыСертификата.Вставить("Отпечаток", 				Сертификат);
			
			НайтиСертификат(
				ОписаниеОповещения,
				ПараметрыСертификата,
				Ложь,
				Истина,
				Неопределено,
				Неопределено);
		Иначе
			
			// Ветка для предотвращения повторного предложения установить компоненту, если первый раз получили отказ
			
			Результат = Новый Структура;
			Результат.Вставить("Выполнено", 		Ложь);
			Результат.Вставить("ОписаниеОшибки", 	НСтр("ru = 'Не установлена компонента работы с криптографией';
															|en = 'Не установлена компонента работы с криптографией'"));
			
			ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		СвойстваСертификата = Сертификат;
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(СвойстваСертификата, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ВходящиеПараметры) Экспорт
	
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	Сертификат 								= ВходящиеПараметры.Сертификат;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		
		ВходящиеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Истина);
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Результат.СвойстваСертификата, ВходящиеПараметры);
		
	Иначе
		
		ВходящиеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Результат.Выполнено);
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = Сертификат;
		ПолеВвода.РасширеннаяПодсказка.Заголовок	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов';
				|en = 'Сертификат не зарегистрирован в системном хранилище сертификатов'"),,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Знач СвойстваСертификата, ВходящиеПараметры)
	
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(СвойстваСертификата);
	
	ТекДата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ТекущаяДатаНаСервере();
	Если ТекДата > СвойстваСертификата.ДействителенПо Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата истек';
				|en = 'Срок действия сертификата истек'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ИначеЕсли ТекДата < СвойстваСертификата.ДействителенС Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата еще не наступил';
				|en = 'Срок действия сертификата еще не наступил'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = "";
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьНесколькоСертификатовВПолеВвода(ДополнительныеПараметры)
	
	МестоХраненияКлюча					 		= ДополнительныеПараметры.МестоХраненияКлюча;
	ИспользоватьКомпонентуЕслиНеМодельСервиса 	= ДополнительныеПараметры.ИспользоватьКомпонентуЕслиНеМодельСервиса;
	Сертификат 									= ДополнительныеПараметры.Сертификат;
	
	// получаем свойства сертификатов
	Сертификаты = Новый Массив;
	Для Каждого СтрСертификат Из Сертификат Цикл		
		СвойствоСертификата = Новый Структура();
		СвойствоСертификата.Вставить("Отпечаток", 			СтрСертификат.Сертификат);
		СвойствоСертификата.Вставить("МестоХраненияКлюча", 	МестоХраненияКлюча);
		
		Сертификаты.Добавить(СвойствоСертификата);	
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Ложь);
	Если ИспользоватьКомпонентуЕслиНеМодельСервиса 
		ИЛИ КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча)
		ИЛИ КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
		
		НайтиСертификаты(
			ОписаниеОповещения,
			Сертификаты,
			Ложь,
			Истина,
			Неопределено,
			Неопределено);
	Иначе
		
		// Ветка для предотвращения повторного предложения установить компоненту, если первый раз получили отказ
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Не установлена компонента работы с криптографией';
													|en = 'Не установлена компонента работы с криптографией'"));
			
		ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов(Результат, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьНесколькоСертификатовВПолеВводаПослеПолученияСвойствСертификатов(Результат, ВходящиеПараметры) Экспорт
	
	// Получаем представление сертификатов
	ЧислоСертификатов 				= ВходящиеПараметры.Сертификаты.Количество();
	ПредставлениеЧислаСертификатов 	= ПредставлениеЧислаСертификатов(ЧислоСертификатов);
	
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.Выполнено Тогда
		
		ВходящиеПараметры.Вставить("ИспользоватьКомпонентуЕслиНеМодельСервиса", Истина);
		
		// проверяем, есть ли ошибки связанные хотя бы с одним сертификатом
		ОшибкиЕсть 	= Ложь;
		ТекДата 	= ОперацииСФайламиЭДКОСлужебныйВызовСервера.ТекущаяДатаНаСервере();
		
		Для Каждого Сертификат Из Результат.Сертификаты Цикл
			
			Если Сертификат.ДействителенПо < ТекДата ИЛИ Сертификат.ДействителенС > ТекДата Тогда
				ОшибкиЕсть = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// прорисовываем поле
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеЧислаСертификатов;
		Если ОшибкиЕсть Тогда
			ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
			Подсказка = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Один или несколько сертификатов недействительны';
					|en = 'Один или несколько сертификатов недействительны'"),,
				Новый Цвет(255, 0, 0));
			ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ИначеЕсли Результат.НенайденныеСертификаты.Количество() > 0 Тогда
			ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
			Подсказка = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Обратите внимание, один или несколько сертификатов 
                      |не зарегистрированы в системном хранилище сертификатов';
                      |en = 'Обратите внимание, один или несколько сертификатов 
                      |не зарегистрированы в системном хранилище сертификатов'"),,
				Новый Цвет(255, 0, 0));
			ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Иначе
			ПолеВвода.ЦветТекста = Новый Цвет;
			ПолеВвода.РасширеннаяПодсказка.Заголовок = "";
			ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьАвто;
		КонецЕсли;
		
	Иначе
		
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеЧислаСертификатов;
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Результат.ОписаниеОшибки;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
		
КонецПроцедуры

Функция ПредставлениеЧислаСертификатов(ЧислоСертификатов)
	
	Если ЧислоСертификатов = 0 Тогда
		Результат = НСтр("ru = 'Сертификат не выбран';
						|en = 'Сертификат не выбран'");
	ИначеЕсли ЧислоСертификатов = 1 Тогда
		Результат = НСтр("ru = '1 сертификат';
						|en = '1 сертификат'");
	ИначеЕсли ЧислоСертификатов >= 2 И ЧислоСертификатов <= 4 Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1  сертификата';
																				|en = '%1  сертификата'"), ЧислоСертификатов);
	Иначе // считаем, что больше 20 сертификатов не будет, иначе следует дописать
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1  сертификатов';
																				|en = '%1  сертификатов'"), ЧислоСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолноеПредставлениеСертификата(Сертификат) Экспорт
	
	СертификатДействителенС = Сертификат.ДействителенС;
	СертификатДействителенПо = Сертификат.ДействителенПо;
	
	Если ТипЗнч(СертификатДействителенС) = Тип("Строка") Тогда 
		СертификатДействителенС = СтрЗаменить(СертификатДействителенС, Символ(10), "");
	КонецЕсли;
		
	Если ТипЗнч(СертификатДействителенПо) = Тип("Строка") Тогда 
		СертификатДействителенПо = СтрЗаменить(СертификатДействителенПо, Символ(10), "");
	КонецЕсли;
	
	Возврат СокрЛП(Сертификат.Наименование) + " (" + СертификатДействителенС + " - " + СертификатДействителенПо + ")";
	
КонецФункции

#КонецОбласти

#Область ОтобразитьПредставлениеСертификата

Процедура ОтобразитьПредставленияСертификатов(ПараметрыОтображенияСертификатов, Форма, МестоХраненияКлюча, ВыполняемоеОповещение) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыОтображенияСертификатов", 	ПараметрыОтображенияСертификатов);
	ДополнительныеПараметры.Вставить("МестоХраненияКлюча", 					МестоХраненияКлюча);
	ДополнительныеПараметры.Вставить("Форма", 								Форма);
	ДополнительныеПараметры.Вставить("НомерПараметра", 					 	0);
	ДополнительныеПараметры.Вставить("КоличествоПараметров", 			 	ПараметрыОтображенияСертификатов.Количество());
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			 	ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтобразитьПредставлениеКаждогоСертификата", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	
КонецПроцедуры

Процедура ОтобразитьПредставлениеКаждогоСертификата(Результат, ВходящийКонтекст) Экспорт
	
	ПараметрыОтображенияСертификатов 	= ВходящийКонтекст.ПараметрыОтображенияСертификатов;
	НомерПараметра 						= ВходящийКонтекст.НомерПараметра;
	КоличествоПараметров				= ВходящийКонтекст.КоличествоПараметров;
	ВыполняемоеОповещение 				= ВходящийКонтекст.ВыполняемоеОповещение; 
	МестоХраненияКлюча 					= ВходящийКонтекст.МестоХраненияКлюча; 
	Форма 								= ВходящийКонтекст.Форма; 
	
	Если НомерПараметра + 1 > КоличествоПараметров Тогда
		
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтображенияСертификата = ПараметрыОтображенияСертификатов[НомерПараметра];
		
		НомерПараметра = НомерПараметра + 1;
		ВходящийКонтекст.Вставить("НомерПараметра", НомерПараметра);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьПредставлениеКаждогоСертификата", 
			ЭтотОбъект, 
			ВходящийКонтекст);
			
		ПолеВвода							 = ПараметрыОтображенияСертификата.ПолеВвода;
		Сертификат							 = ПараметрыОтображенияСертификата.Сертификат;
		ИмяРеквизитаПредставлениеСертификата = ПараметрыОтображенияСертификата.ИмяРеквизитаПредставлениеСертификата;
		
		Если НомерПараметра = 1 Тогда
			ИспользоватьКомпонентуЕслиНеМодельСервиса = Истина;
		Иначе
			ИспользоватьКомпонентуЕслиНеМодельСервиса = Результат.ИспользоватьКомпонентуЕслиНеМодельСервиса;
		КонецЕсли;
			
		ОтобразитьПредставлениеСертификата(
			МестоХраненияКлюча, 
			ПолеВвода, 
			Сертификат, 
			Форма, 
			ИмяРеквизитаПредставлениеСертификата, 
			ОписаниеОповещения,
			ИспользоватьКомпонентуЕслиНеМодельСервиса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодписатьPKCS7

Процедура ПодписатьPKCS7(
		ОповещениеОЗавершении,
		Сертификат,
		ИмяФайлаДанных,
		ВключатьИсходныеДанные,
		ИмяФайлаПодписи,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		ЭтоПодписаниеЗаявления,
		Алгоритм) Экспорт
	
	Если Не СертификатЗаполнен(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУказаныКлючевыеПараметрыСертификатаДляПоиска()));
		Возврат;
	КонецЕсли;
	
	ОрганизацияНеаккредитованногоУЦ = НеаккредитованныйУЦСертификата(Сертификат);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", 				ОповещениеОЗавершении);
	Контекст.Вставить("Сертификат", 						Сертификат);
	Контекст.Вставить("ИмяФайлаДанных", 					ИмяФайлаДанных);
	Контекст.Вставить("ВключатьИсходныеДанные", 			ВключатьИсходныеДанные);
	Контекст.Вставить("ИмяФайлаПодписи", 					ИмяФайлаПодписи);
	Контекст.Вставить("ВыводитьСоообщения", 				ВыводитьСоообщения);
	Контекст.Вставить("МенеджерКриптографии", 				МенеджерКриптографии);
	Контекст.Вставить("ЭтоПодписаниеЗаявления", 			ЭтоПодписаниеЗаявления);
	Контекст.Вставить("Алгоритм", 							Алгоритм);
	Контекст.Вставить("ОрганизацияНеаккредитованногоУЦ", 	ОрганизацияНеаккредитованногоУЦ);
	
	Если ЗначениеЗаполнено(ОрганизацияНеаккредитованногоУЦ) И НЕ ЭтоПодписаниеЗаявления
		И ОбщегоНазначенияКлиент.ДатаСеанса() >= '20220101' Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПолучениеКонтекста",
			ЭтотОбъект,
			Контекст);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			Контекст);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПолучениеКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиСертификатНеаккредитованногоУЦ()));
		Возврат;
	КонецЕсли;
	
	Организация = ОрганизацияОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
	ВходящийКонтекст.Вставить("Организация", Организация);
	
	Если ПодписаниеСертификатомНеаккредитованногоУЦВременноРазрешено(Организация) Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			ВходящийКонтекст);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			ВходящийКонтекст);
		
		ОтпечатокСертификата = ?(ТипЗнч(ВходящийКонтекст.Сертификат) = Тип("Структура")
			ИЛИ ТипЗнч(ВходящийКонтекст.Сертификат) = Тип("ФиксированнаяСтруктура")
			И ВходящийКонтекст.Сертификат.Свойство("Отпечаток"), ВходящийКонтекст.Сертификат.Отпечаток, "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", 						Организация);
		ПараметрыФормы.Вставить("ОрганизацияНеаккредитованногоУЦ", 	ВходящийКонтекст.ОрганизацияНеаккредитованногоУЦ);
		ПараметрыФормы.Вставить("ОтпечатокСертификата", 			ОтпечатокСертификата);
		
		ОткрытьФорму(
			Результат.КонтекстЭДО.ПутьКОбъекту + ".Форма.ПредупреждениеНеаккредитованныйУЦ",
			ПараметрыФормы,,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПроверкиАккредитацииУЦ(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да И Результат <> КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиСертификатНеаккредитованногоУЦ()));
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ВременноРазрешитьПодписаниеПодписаниеСертификатомНеаккредитованногоУЦ(ВходящийКонтекст.Организация);
	КонецЕсли;
	
	ОповещениеОЗавершении 	= ВходящийКонтекст.ОповещениеОЗавершении;
	Сертификат 				= ВходящийКонтекст.Сертификат;
	ИмяФайлаДанных 			= ВходящийКонтекст.ИмяФайлаДанных;
	ВключатьИсходныеДанные 	= ВходящийКонтекст.ВключатьИсходныеДанные;
	ИмяФайлаПодписи 		= ВходящийКонтекст.ИмяФайлаПодписи;
	ВыводитьСоообщения 		= ВходящийКонтекст.ВыводитьСоообщения;
	МенеджерКриптографии 	= ВходящийКонтекст.МенеджерКриптографии;
	ЭтоПодписаниеЗаявления 	= ВходящийКонтекст.ЭтоПодписаниеЗаявления;
	Алгоритм 				= ВходящийКонтекст.Алгоритм;
	
	Если Не СертификатЗаполнен(Сертификат) Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУказаныКлючевыеПараметрыСертификатаДляПоиска()));
		Возврат;
	КонецЕсли;
	
	ВходящиеПараметры = ПараметрыВМассив(6, Сертификат, ИмяФайлаДанных, ВключатьИсходныеДанные, ИмяФайлаПодписи, ЭтоПодписаниеЗаявления, Алгоритм);
	
	Если КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
		ПараметрыЦикла = Новый Структура();
		ПараметрыЦикла.Вставить("ВключатьИсходныеДанные", ВключатьИсходныеДанные);
		ПараметрыЦикла.Вставить("Сертификат", Сертификат);
		ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыЦикла.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		ПараметрыЦикла.Вставить("Алгоритм", Алгоритм);
		ПараметрыЦикла.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьPKCS7ОблачнойПодписью", ЭтотОбъект, ПараметрыЦикла);
		ПроверитьДанныеДляОперацииОблачнойПодписи(ПредварительноеОповещениеОЗавершении, ИмяФайлаДанных, "Подписание");
			
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		
		ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ПолучательРезультата", "ФайлПодписи");
		ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
		
		Если ТипЗнч(ВключатьИсходныеДанные) = Тип("Булево") Тогда 
			ПараметрыПодписания = Новый Структура;
			ПараметрыПодписания.Вставить("ОтсоединеннаяПодпись", Не ВключатьИсходныеДанные);
		Иначе
			ПараметрыПодписания = Неопределено;
		КонецЕсли;
		
		ПараметрыПодписания = СвойстваРасшифрованияПодписанияСертификата(Сертификат, ПараметрыПодписания);

		СервисКриптографииКлиент.Подписать(
			ПредварительноеОповещениеОЗавершении,
			ИмяФайлаДанных, 
			Сертификат,
			"CMS", 
			ПараметрыПодписания); 
			
	Иначе
		Если Алгоритм = "*" Тогда
			ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", Сертификат);
		Иначе
			ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
		КонецЕсли;
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПодписатьPKCS7ПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПодписатьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ТипКриптопровайдераВладельца = ?(Результат.Свойство("ТипКриптопровайдераВладельца"),
			Результат.ТипКриптопровайдераВладельца, Неопределено);
		
		ВходящийКонтекст.Вставить("МенеджерКриптографии", 			Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", 						Результат.Алгоритм);
		ВходящийКонтекст.Вставить("ТипКриптопровайдераВладельца", 	ТипКриптопровайдераВладельца);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПолученияФайлаДляПодписания", ЭтотОбъект, ВходящийКонтекст);
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[1],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[1])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПолученияФайлаДляПодписания(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаДанных", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[3]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[3]),
			ВходящийКонтекст, "ПодписатьPKCS7ПослеПолученияИмениФайлаРезультата");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
		
Процедура ПодписатьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПолученияСертификатаПодписанта", ЭтотОбъект, ВходящийКонтекст);
			 
		Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[0]) Тогда
			РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[0], ВходящийКонтекст);
			РезультатВыполнения.Вставить("СертификатНайден", Истина);
			ВыполнитьОбработкуОповещения(
				Оповещение,
				РезультатВыполнения);
		Иначе
			Алгоритм = ВходящийКонтекст.ВходящиеПараметры[5];
			
			НайтиСертификат(
				Оповещение,
				ВходящиеПараметры[0],
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Алгоритм);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПолученияСертификатаПодписанта(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.СертификатНайден Тогда
			ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
			Оповещение = Новый ОписаниеОповещения(
				"ПодписатьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
				
			ЗаполнитьПарольДоступаКЗакрытомуКлючу(Оповещение, Результат.СвойстваСертификата, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении, 
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
					Ложь, "ОписаниеОшибки", 
					ОписаниеОшибкиНеУдалосьНайтиСертификат(ВходящийКонтекст.ВходящиеПараметры[0])));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(Результат, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Свойство("ВходящиеПараметры") И ВходящийКонтекст.ВходящиеПараметры.Количество() >= 5 Тогда
		ЭтоПодписаниеЗаявления = ВходящийКонтекст.ВходящиеПараметры[4];
	Иначе
		ЭтоПодписаниеЗаявления = 0;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ПодписиВJSON = ПодписиСертификатовДокументооборотаВJSON(ВходящийКонтекст.СвойстваСертификата);
		
		Если ВходящиеПараметры[2] Тогда // Включать исходные данные
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьСДанными(
				Оповещение, 
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат подписанта
				ВходящийКонтекст.ИмяФайлаДанных, // файл данных
				ВходящийКонтекст.ИмяФайлаРезультата, // файл подписи
				ПодписиВJSON
				);	
		ИначеЕсли ЭтоПодписаниеЗаявления Тогда
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьЗаявление(
				Оповещение, 
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат подписанта
				ВходящийКонтекст.ИмяФайлаДанных, // файл данных 
				ВходящийКонтекст.ИмяФайлаРезультата, // файл подписи
				ПодписиВJSON
				);
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Подписать(
				Оповещение, 
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, ВходящийКонтекст.СвойстваСертификата.Поставщик, // сертификат подписанта
				ВходящийКонтекст.ИмяФайлаДанных, // файл данных 
				ВходящийКонтекст.ИмяФайлаРезультата, // файл подписи
				ПодписиВJSON
				);
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры
	
Процедура ПодписатьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	АдресРезультата = ПолучитьАдресРезультата(ВходящийКонтекст.ВходящиеПараметры[3], ВходящийКонтекст.ВходящиеПараметры[1]);
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[3], ВходящийКонтекст.ВыводитьСообщения);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ФайлПодписи", Параметры[3], ВходящийКонтекст));	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		?(ВходящийКонтекст.ВходящиеПараметры[2], "PKCS7ПодписатьСДанными", "PKCS7Подписать"),
		ОписаниеОшибкиНеУдалосьПодписатьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПодписатьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда                                      
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ФайлПодписи", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

Процедура ПодписатьPKCS7ОблачнойПодписью(РезультатВыполнения, ВходящийКонтекст) Экспорт
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	
	Если НЕ РезультатВыполнения.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;	
	КонецЕсли;
	
	Сертификат = ВходящийКонтекст.Сертификат;
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификат);
	СертификатОблачнойПодписи = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьНастройкиОблачнойПодписиПоСертификату(Сертификат);
	
	Если НЕ СертификатОблачнойПодписи.Выполнено Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", СертификатОблачнойПодписи.Ошибка));
		Возврат;
	КонецЕсли;
			
	ИмяФайлаДанных = РезультатВыполнения.ДанныеФайла;
	ИмяФайлаПодписи = ВходящийКонтекст.ИмяФайлаПодписи;
	Алгоритм = ВходящийКонтекст.Алгоритм;
	ВключатьИсходныеДанные = ВходящийКонтекст.ВключатьИсходныеДанные;
	ВыводитьСоообщения = ВходящийКонтекст.ВыводитьСоообщения;
	
	ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыОповещения.Вставить("ПолучательРезультата", "ФайлПодписи");
	ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
	ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
	ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
	ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);

	ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);

	СвойствоПодписи 	= ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер").ПолучитьСвойствоПодписиCMS(Не ВключатьИсходныеДанные, Ложь);
	ПараметрыОперации   = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
	Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер").ПолучитьИнформациюДокументаДляПодписи(
							СвойствоПодписи, 
							ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ИмяФайла", "Данные документа"),
							ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ТипФайла", "txt"));
		ПараметрыОперации.Вставить("ПодтверждатьПринудительно", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ПодтверждатьПринудительно", Ложь));
		ПараметрыОперации.Вставить("ОжидатьВыполнения", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ОжидатьВыполнения", Ложь));
	КонецЕсли;

	Псевдонимы = Новый Структура();
	Псевдонимы.Вставить("Выполнено", "Выполнено");
	Псевдонимы.Вставить("Результат", "Подпись");
	Псевдонимы.Вставить("Ошибка", "ИнформацияОбОшибке");

	ПараметрыОперации.Вставить("Псевдонимы", Псевдонимы);

	ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Подписать(
		ПредварительноеОповещениеОЗавершении,
		СертификатОблачнойПодписи.УчетнаяЗапись,
		ИмяФайлаДанных,
		СвойствоПодписи,
		СертификатОблачнойПодписи.Идентификатор,
		ПараметрыОперации);
				
КонецПроцедуры

#КонецОбласти

#Область ПроверитьПодписьPKCS7

Процедура ПроверитьПодписьPKCS7(
		ОповещениеОЗавершении,
		МестоХраненияКлюча,
		ФайлПодписи,
		ФайлДанных,
		ИмпортироватьСертификаты,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(5, МестоХраненияКлюча, ФайлПодписи, ФайлДанных, ИмпортироватьСертификаты, Алгоритм);
	
	Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
		Попытка
			Результат = КриптографияЭДКОКлиентСервер.ПроверитьПодписьPKCS7ВМоделиСервиса(ФайлПодписи, ФайлДанных);

			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				Результат);
		Исключение
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПроверитьПодпись()));
		КонецПопытки;
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		Попытка
			УчетнаяЗаписьОблачнойПодписи = Неопределено;
			Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(МестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
				Возврат;
			КонецЕсли;
			Результат = КриптографияЭДКОКлиентСервер.ПроверитьПодписьОблачнаяПодпись(УчетнаяЗаписьОблачнойПодписи, ФайлПодписи, ФайлДанных);

			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				Результат);
		Исключение
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПроверитьПодпись()));
		КонецПопытки;
		
	Иначе
		Если Алгоритм = "*" Тогда
			ПараметрыОпределенияАлгоритма = Новый Структура("Криптосообщение", ФайлПодписи);
		Иначе
			ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
		КонецЕсли;
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПроверитьПодписьPKCS7ПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		#Если ВебКлиент Тогда
			// обход ошибки компоненты
			Если ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux() Тогда
				РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ПодписьВалидна", Истина, ВходящийКонтекст);
				МассивПодписантов = Новый ФиксированныйМассив(Новый Массив);
				РезультатВыполнения.Вставить("Подписанты", МассивПодписантов);
				ВыполнитьОбработкуОповещения(
					ВходящийКонтекст.ОповещениеОЗавершении,
					РезультатВыполнения);
				Возврат;
			КонецЕсли;
		#КонецЕсли
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияФайлаПодписи", ЭтотОбъект, ВходящийКонтекст);
			
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[1],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[1])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияФайлаПодписи(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаПодписи", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияФайлаДанных", ЭтотОбъект, ВходящийКонтекст);
			
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[2]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[2],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[2])); 
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияФайлаДанных(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаДанных", Результат.ИмяФайла);
		
		ИмпортироватьСертификаты = ВходящийКонтекст.ВходящиеПараметры[3];
		
		Если ИмпортироватьСертификаты Тогда
			Оповещение = Новый ОписаниеОповещения(
				"ПроверитьПодписьPKCS7ПослеПолученияИмениКаталога", ЭтотОбъект, ВходящийКонтекст);
			
			ОперацииСФайламиЭДКОКлиент.СоздатьКаталогНаКлиенте(Оповещение, ВходящийКонтекст.ВыводитьСообщения);
		Иначе
			Алгоритм = ВходящийКонтекст.ВходящиеПараметры[4];
			
			Оповещение = Новый ОписаниеОповещения(
				"ПроверитьПодписьPKCS7ПослеПолученияПодписантов", ЭтотОбъект, ВходящийКонтекст);
			
			ПолучитьПодписантовPKCS7(
				Оповещение,
				ВходящийКонтекст.ИмяФайлаПодписи,,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Алгоритм);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияИмениКаталога(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("КаталогСертификатов", Результат.ИмяКаталога);
		
		Алгоритм = ВходящийКонтекст.ВходящиеПараметры[4];
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПолученияПодписантов", ЭтотОбъект, ВходящийКонтекст);
		
		ПолучитьПодписантовPKCS7(
			Оповещение,
			ВходящийКонтекст.ИмяФайлаПодписи,
			ВходящийКонтекст.КаталогСертификатов,
			ВходящийКонтекст.ВыводитьСообщения,
			ВходящийКонтекст.МенеджерКриптографии,
			Алгоритм);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияПодписантов(Результат, ВходящийКонтекст) Экспорт
	
	ИмпортироватьСертификаты = ВходящийКонтекст.ВходящиеПараметры[3];
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("Подписанты", Результат.Подписанты);
		
		Если ИмпортироватьСертификаты Тогда
			Алгоритм = ВходящийКонтекст.ВходящиеПараметры[4];
			
			Оповещение = Новый ОписаниеОповещения(
				"ПроверитьПодписьPKCS7ПослеПоискаСертификатов", ЭтотОбъект, ВходящийКонтекст);
			
			НайтиСертификаты(
				Оповещение,
				ВходящийКонтекст.Подписанты,
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Алгоритм,
				Истина);
		Иначе
			ВходящийКонтекст.Вставить("ТекущийПодписант", 0);
			
			ПроверитьПодписьPKCS7ПроверкаПодписей(ВходящийКонтекст);
		КонецЕсли;
	Иначе
		Если ИмпортироватьСертификаты Тогда
			ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.КаталогСертификатов);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПоискаСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("НенайденныеСертификаты", Результат.НенайденныеСертификаты);
		ВходящийКонтекст.Вставить("ТекущийСертификат", 0);
		
		ВходящийКонтекст.Подписанты = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВходящийКонтекст.Подписанты, Ложь);
		Для ИндексПодписанта = 0 По ВходящийКонтекст.Подписанты.Количество() - 1 Цикл
			ВходящийКонтекст.Подписанты[ИндексПодписанта] = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
				ВходящийКонтекст.Подписанты[ИндексПодписанта], Ложь);
			ВходящийКонтекст.Подписанты[ИндексПодписанта].Вставить("Отпечаток", "");
			ВходящийКонтекст.Подписанты[ИндексПодписанта].Вставить("Выполнено", Ложь);
			ВходящийКонтекст.Подписанты[ИндексПодписанта].Вставить("ПодписьВалидна", Ложь);
		КонецЦикла;
		
		Для каждого НайденныйСертификат Из Результат.Сертификаты Цикл
			Для ИндексПодписанта = 0 По ВходящийКонтекст.Подписанты.Количество() - 1 Цикл
				Если НайденныйСертификат.СерийныйНомер = ВходящийКонтекст.Подписанты[ИндексПодписанта].СерийныйНомер
				И НайденныйСертификат.Поставщик = ВходящийКонтекст.Подписанты[ИндексПодписанта].Поставщик Тогда
					ВходящийКонтекст.Подписанты[ИндексПодписанта].Отпечаток = НайденныйСертификат.Отпечаток;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// дополнительный поиск на случай отличий написания поставщика
		Для каждого НайденныйСертификат Из Результат.Сертификаты Цикл
			Для ИндексПодписанта = 0 По ВходящийКонтекст.Подписанты.Количество() - 1 Цикл
				Если НЕ ЗначениеЗаполнено(ВходящийКонтекст.Подписанты[ИндексПодписанта].Отпечаток)
				И НайденныйСертификат.СерийныйНомер = ВходящийКонтекст.Подписанты[ИндексПодписанта].СерийныйНомер Тогда
					ВходящийКонтекст.Подписанты[ИндексПодписанта].Поставщик = НайденныйСертификат.Поставщик;
					ВходящийКонтекст.Подписанты[ИндексПодписанта].Отпечаток = НайденныйСертификат.Отпечаток;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПроверитьПодписьPKCS7УстановкаСертификатовИПроверкаПодписей(ВходящийКонтекст);
	Иначе
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.КаталогСертификатов);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7УстановкаСертификатовИПроверкаПодписей(ВходящийКонтекст)
	
	Если ВходящийКонтекст.ТекущийСертификат < ВходящийКонтекст.НенайденныеСертификаты.Количество() Тогда
		ИмяФайлаСертификата = ВходящийКонтекст.НенайденныеСертификаты[ВходящийКонтекст.ТекущийСертификат].СерийныйНомер + ".cer";
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеЧтенияСертификатаИзФайла", ЭтотОбъект, ВходящийКонтекст);
		
		ОперацииСФайламиЭДКОКлиент.ФайлВТекст(
			Оповещение, ВходящийКонтекст.КаталогСертификатов + ИмяФайлаСертификата, "windows-1251", Ложь);
		Возврат;
	КонецЕсли;
	
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.КаталогСертификатов);
	
	ВходящийКонтекст.Вставить("ТекущийПодписант", 0);
	
	ПроверитьПодписьPKCS7ПроверкаПодписей(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеЧтенияСертификатаИзФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ИмяФайлаСертификата = ВходящийКонтекст.НенайденныеСертификаты[ВходящийКонтекст.ТекущийСертификат].СерийныйНомер + ".cer";
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеИмпортаСертификата", ЭтотОбъект, ВходящийКонтекст);
		
		ИмпортироватьСертификат(
			Оповещение, ВходящийКонтекст.КаталогСертификатов + ИмяФайлаСертификата, "AddressBook",
			ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.МенеджерКриптографии);
	Иначе
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.КаталогСертификатов);
		ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
		ПроверитьПодписьPKCS7УстановкаСертификатовИПроверкаПодписей(ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеИмпортаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		СвойстваСертификата = Результат.СвойстваСертификата;
		
		Для ИндексПодписанта = 0 По ВходящийКонтекст.Подписанты.Количество() - 1 Цикл
			Если СвойстваСертификата.СерийныйНомер = ВходящийКонтекст.Подписанты[ИндексПодписанта].СерийныйНомер
			И (СвойстваСертификата.Поставщик = ВходящийКонтекст.Подписанты[ИндексПодписанта].Поставщик
			ИЛИ НЕ ЗначениеЗаполнено(ВходящийКонтекст.Подписанты[ИндексПодписанта].Отпечаток)) Тогда
				ВходящийКонтекст.Подписанты[ИндексПодписанта].Поставщик = СвойстваСертификата.Поставщик;
				ВходящийКонтекст.Подписанты[ИндексПодписанта].Отпечаток = СвойстваСертификата.Отпечаток;
			КонецЕсли;
		КонецЦикла;
		
		ИмяФайлаСертификата = ВходящийКонтекст.НенайденныеСертификаты[ВходящийКонтекст.ТекущийСертификат].СерийныйНомер + ".cer";
		
		ВходящийКонтекст.ТекущийСертификат = ВходящийКонтекст.ТекущийСертификат + 1;
		ПроверитьПодписьPKCS7УстановкаСертификатовИПроверкаПодписей(ВходящийКонтекст);
		
	Иначе
		ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, ВходящийКонтекст.КаталогСертификатов);
		
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки);
		Результат.Вставить("Подписанты", ВходящийКонтекст.Подписанты);
		Для ИндексПодписанта = 0 По Результат.Подписанты.Количество() - 1 Цикл
			Результат.Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура(Результат.Подписанты[ИндексПодписанта]);
		КонецЦикла;
		Результат.Подписанты = Новый ФиксированныйМассив(Результат.Подписанты);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПроверкаПодписей(ВходящийКонтекст, ПодписьВалидна = Истина)
	
	Если ПодписьВалидна И ВходящийКонтекст.ТекущийПодписант < ВходящийКонтекст.Подписанты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьПодписьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПроверитьПодпись(
			Оповещение,
			ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].СерийныйНомер,
			ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].Поставщик,
			ВходящийКонтекст.ИмяФайлаПодписи, // файл подписи
			ВходящийКонтекст.ИмяФайлаДанных // файл данных
			);
		Возврат;
	КонецЕсли;
	
	Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ПодписьВалидна", ПодписьВалидна, ВходящийКонтекст);
	Результат.Вставить("Подписанты", ВходящийКонтекст.Подписанты);
	Для ИндексПодписанта = 0 По Результат.Подписанты.Количество() - 1 Цикл
		Результат.Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура(Результат.Подписанты[ИндексПодписанта]);
	КонецЦикла;
	Результат.Подписанты = Новый ФиксированныйМассив(Результат.Подписанты);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда
		Алгоритм = ВходящийКонтекст.ВходящиеПараметры[4];
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьPKCS7ПослеПроверкиСертификата", ЭтотОбъект, ВходящийКонтекст);
		
		ПроверитьСертификат(
			Оповещение,
			ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант],
			"ПроверитьТолькоПоСпискуУстановленныхУЦ",
			ВходящийКонтекст.ВыводитьСообщения,
			ВходящийКонтекст.МенеджерКриптографии,
			Алгоритм);
	Иначе
		ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].Выполнено = Истина;
		ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].ПодписьВалидна = Результат;
		
		ВходящийКонтекст.ТекущийПодписант = ВходящийКонтекст.ТекущийПодписант + 1;
		ПроверитьПодписьPKCS7ПроверкаПодписей(ВходящийКонтекст, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПроверкиСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].Выполнено = Истина;
		ВходящийКонтекст.Подписанты[ВходящийКонтекст.ТекущийПодписант].ПодписьВалидна = Результат.Валиден;
		Если НЕ Результат.Валиден Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка при проверке сертификата подписи. %1';
								|en = 'Ошибка при проверке сертификата подписи. %1'");
			ТекстОшибки = СтрШаблон(
				ТекстОшибки,
				Результат.ОписаниеОшибки);
			ВходящийКонтекст.Вставить("ОписаниеОшибки", ТекстОшибки);
		КонецЕсли;
		
		ВходящийКонтекст.ТекущийПодписант = ВходящийКонтекст.ТекущийПодписант + 1;
		ПроверитьПодписьPKCS7ПроверкаПодписей(ВходящийКонтекст, Результат.Валиден);
		
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки, ВходящийКонтекст);
		Результат.Вставить("Подписанты", ВходящийКонтекст.Подписанты);
		Для ИндексПодписанта = 0 По Результат.Подписанты.Количество() - 1 Цикл
			Результат.Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура(Результат.Подписанты[ИндексПодписанта]);
		КонецЦикла;
		Результат.Подписанты = Новый ФиксированныйМассив(Результат.Подписанты);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	Для ИндексПодписанта = 0 По ВходящийКонтекст.Подписанты.Количество() - 1 Цикл
		ВходящийКонтекст.Подписанты[ИндексПодписанта] = Новый ФиксированнаяСтруктура(ВходящийКонтекст.Подписанты[ИндексПодписанта]);
	КонецЦикла;
	ВходящийКонтекст.Подписанты = Новый ФиксированныйМассив(ВходящийКонтекст.Подписанты);
	
	ВходящийКонтекст.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	ВходящийКонтекст.Вставить("ИмяМетода", "PKCS7ПроверитьПодпись");
	ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПроверитьПодпись();
	ВходящийКонтекст.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"ПроверитьПодписьPKCS7ПослеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект, ВходящийКонтекст,
		"ПроверитьПодписьPKCS7ПриОшибкеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект);
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПослеПолученияЗначенияСвойстваСписокОшибок(ЗначениеСвойства, ВходящийКонтекст) Экспорт
	
	ЗаписатьИнформациюОбОшибке(ВходящийКонтекст.ИмяМетода, ЗначениеСвойства, ВходящийКонтекст.ИнформацияОбОшибке);
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ВходящийКонтекст.ОписаниеОшибки);
	
	Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ВходящийКонтекст.ОписаниеОшибки, ВходящийКонтекст);
	Результат.Вставить("Подписанты", ВходящийКонтекст.Подписанты);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьPKCS7ПриОшибкеПолученияЗначенияСвойстваСписокОшибок(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.';
							|en = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.'");
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия(), "Ошибка", ОписаниеОшибки,, Истина);
	
	ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	
	Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст);
	Результат.Вставить("Подписанты", ВходящийКонтекст.Подписанты);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗашифроватьPKCS7

Процедура ЗашифроватьPKCS7(
		ОповещениеОЗавершении,
		ИсходныйФайл,
		Сертификаты,
		ИмяФайлаИлиРасширениеИлиАдрес,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		МестоХраненияКлюча, // или КлючевойКонтейнер
		Алгоритм,
		ПараметрыОперации) Экспорт
	
	ПараметрыОперацииВызова = Новый Структура;
	ПараметрыОперацииВызова.Вставить("АлгоритмШифрования", 				"");
	ПараметрыОперацииВызова.Вставить("АлгоритмШифрованияОбязателен", 	Ложь);
	ПараметрыОперацииВызова.Вставить("СобиратьСведенияОШифровании", 	Ложь);
	Если ПараметрыОперации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперацииВызова, ПараметрыОперации);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОперацииВызова.АлгоритмШифрования) Тогда
		ПараметрыОперацииВызова.АлгоритмШифрования = "GOST 28147-89";
	КонецЕсли;
	ПараметрыОперацииВызова.Вставить("ИспользуемыйАлгоритмШифрования", ПараметрыОперацииВызова.АлгоритмШифрования);
	
	ВходящиеПараметры = ПараметрыВМассив(
		6,
		ИсходныйФайл,
		Сертификаты,
		ИмяФайлаИлиРасширениеИлиАдрес,
		МестоХраненияКлюча,
		Алгоритм,
		ПараметрыОперацииВызова);
	
	ТипыПодходятДляЭПСервиса = (ТипЗнч(ИсходныйФайл) = Тип("Строка")
		И КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл))
		ИЛИ ТипЗнч(ИсходныйФайл) = Тип("ДвоичныеДанные");
		
	СертификатыВЗащищенномХранилищеНаСервере = Ложь;
	СертификатыОблачнойПодписи = Ложь;
	
	Для Каждого Сертификат Из Сертификаты Цикл 
		Если КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
			МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификат);
			СертификатыОблачнойПодписи = Истина;
			Прервать;
		ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда	
			СертификатыВЗащищенномХранилищеНаСервере = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СертификатыОблачнойПодписи 
		И КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		СертификатыОблачнойПодписи = Истина;
	КонецЕсли;
	
	Если СертификатыОблачнойПодписи
		И ИспользованиеОблачнойПодписиВозможно() 
		И ТипыПодходятДляЭПСервиса Тогда
		
		ПараметрыЦикла = Новый Структура();
		ПараметрыЦикла.Вставить("Сертификаты", Сертификаты);
		ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыЦикла.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
		ПараметрыЦикла.Вставить("Алгоритм", Алгоритм);
		ПараметрыЦикла.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		ПараметрыЦикла.Вставить("МестоХраненияКлюча", МестоХраненияКлюча);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ЗашифроватьPKCS7ШифрованиеСервисомОблачнойПодписи",
			ЭтотОбъект, ПараметрыЦикла);
		ПроверитьДанныеДляОперацииОблачнойПодписи(ПредварительноеОповещениеОЗавершении, ИсходныйФайл, "Шифрование");
		
	ИначеЕсли СертификатыВЗащищенномХранилищеНаСервере И ТипыПодходятДляЭПСервиса И 
		ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно() Тогда		
		
		Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
		Контекст.Вставить("ИсходныйФайл", ИсходныйФайл);
		Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографии", ЭтотОбъект, Контекст);
		
		СервисКриптографииКлиент.Зашифровать(Оповещение, ИсходныйФайл, Сертификаты, "CMS");
		
	Иначе
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", 			ОповещениеОЗавершении);
		Контекст.Вставить("ВходящиеПараметры", 				ВходящиеПараметры);
		Контекст.Вставить("ВыводитьСоообщения", 			ВыводитьСоообщения);
		Контекст.Вставить("МенеджерКриптографии", 			МенеджерКриптографии);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеПолученияАлгоритмовШифрования", ЭтотОбъект, Контекст);
		
		Если ПараметрыОперацииВызова.АлгоритмШифрованияОбязателен ИЛИ
			ВРег(ПараметрыОперацииВызова.АлгоритмШифрования) = "GOST 28147-89" Тогда
			
			ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
			
		Иначе
			ПолучитьАлгоритмыШифрования(
				Оповещение,
				ВыводитьСоообщения,
				МенеджерКриптографии,
				?(Алгоритм = "*", ?(Сертификаты.Количество() >= 1, Сертификаты[0], Неопределено), Алгоритм),
				Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПолученияАлгоритмовШифрования(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ ВходящийКонтекст.ВходящиеПараметры[5].АлгоритмШифрованияОбязателен Тогда
		АлгоритмШифрованияНайден = Ложь;
		Если Результат <> Неопределено И Результат.Выполнено Тогда
			Для каждого СвойстваАлгоритмаШифрования Из Результат.АлгоритмыШифрования Цикл
				Если ВРег(СвойстваАлгоритмаШифрования.Имя) =
					ВРег(ВходящийКонтекст.ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования) Тогда
					
					АлгоритмШифрованияНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НЕ АлгоритмШифрованияНайден Тогда
			ВходящийКонтекст.ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования = "GOST 28147-89"; // алгоритм шифрования
		КонецЕсли;
	КонецЕсли;
	
	Алгоритм = ВходящийКонтекст.ВходящиеПараметры[4];
	Если Алгоритм = "*" Тогда
		ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат",
			?(ВходящийКонтекст.Сертификаты.Количество() >= 1, ВходящийКонтекст.Сертификаты[0], Неопределено));
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
	КонецЕсли;
	ПараметрыОпределенияАлгоритма.Вставить("ПриоритетViPNet", Истина);
	ПредварительноСоздатьМенеджерКриптографии(
		ВходящийКонтекст.ОповещениеОЗавершении,
		"ЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящийКонтекст.ВходящиеПараметры,
		ВходящийКонтекст.ВыводитьСоообщения,
		ВходящийКонтекст.МенеджерКриптографии,
		ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат)=Тип("Структура") Тогда
		ЗашифрованныеДанные = Неопределено;
		Результат.Свойство("ЗашифрованныеДанные", ЗашифрованныеДанные);  //Адрес в хранилище или двоичные данные
		Результат.Вставить("ЗашифрованныйФайл", ЗашифрованныеДанные);
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда 
			Результат.Вставить("ОписаниеОшибки", КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		МенеджерКриптографии = Неопределено;
		Если Не Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда 
			Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		КонецЕсли;
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;
		
		Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда //Результат необходимо переложить по адресу/пути исходных данных
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				КонецЕсли;
				
			Иначе //Путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
					АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
				Иначе
					АдресЗашифрованныхДанных = ЗашифрованныеДанные;
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИсходныйФайл, ВходящийКонтекст.ВыводитьСоообщения);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаИлиРасширениеИлиАдрес) Тогда	//Результат необходимо поместить по указанному адресу
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
			
		Иначе	//Результат необходимо поместить в указанный файл / новый файл с указанным расширением
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
				АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
			Иначе
				АдресЗашифрованныхДанных = ЗашифрованныеДанные;
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИмяФайлаИлиРасширениеИлиАдрес, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографииПослеЗаписиФайла(Результат, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ТипКриптопровайдераИнициализации =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ТипКриптопровайдераИнициализации");
		
		ВходящийКонтекст.Вставить("МенеджерКриптографии", 				Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", 							Результат.Алгоритм);
		ВходящийКонтекст.Вставить("ТипКриптопровайдераИнициализации", 	ТипКриптопровайдераИнициализации);
		ВходящийКонтекст.Вставить("ИнформацияОКриптопровайдерах", 		Неопределено);
		
		#Если НЕ ВебКлиент Тогда
		ИнформацияОКриптопровайдерах = ОбщегоНазначенияЭДКОКлиент.ИнформацияОКриптопровайдерах();
		
		Если НЕ ЗначениеЗаполнено(ИнформацияОКриптопровайдерах.ВерсияКриптоПроCSP)
			И (Лев(ИнформацияОКриптопровайдерах.ВерсияViPNetCSP, 3) = "4.0"
			ИЛИ Лев(ИнформацияОКриптопровайдерах.ВерсияViPNetCSP, 4) = "4.1.") Тогда
			
			ОшибкаТекстом = НСтр("ru = 'Для шифрования по стандарту ГОСТ Р 34.10-2012 требуется ViPNet CSP версии 4.2 или выше.';
								|en = 'Для шифрования по стандарту ГОСТ Р 34.10-2012 требуется ViPNet CSP версии 4.2 или выше.'");
			ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОшибкаТекстом);
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОшибкаТекстом));
			Возврат;
		КонецЕсли;
		
		ВходящийКонтекст.Вставить("ИнформацияОКриптопровайдерах", ИнформацияОКриптопровайдерах);
		#КонецЕсли
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеПолученияФайлаДляШифрования", ЭтотОбъект, ВходящийКонтекст);
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0])); 
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПолученияФайлаДляШифрования(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[2]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[2]),
			ВходящийКонтекст, "ЗашифроватьPKCS7ПослеПолученияИмениФайлаРезультата");
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ЗашифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		МассивПреобразований = Новый Массив;
		МассивСерийныхНомеров = Новый Массив;
		МассивПоставщиков = Новый Массив;
		Для Каждого Сертификат Из ВходящиеПараметры[1] Цикл
			Если Сертификат.Свойство("Поставщик") И Сертификат.Свойство("СерийныйНомер") Тогда 
				МассивПоставщиков.Добавить(Сертификат.Поставщик);
				МассивСерийныхНомеров.Добавить(Сертификат.СерийныйНомер);
			Иначе //Только сертификаты с отпечатком
				МассивПреобразований.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
		
		ВходящийКонтекст.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
		ВходящийКонтекст.Вставить("МассивПоставщиков", МассивПоставщиков);
		ВходящийКонтекст.Вставить("ОповещениеПослеОбработки", Оповещение);
		ВходящийКонтекст.Вставить("ПолученноеИмяФайла", Результат.ИмяФайла);
		ВходящийКонтекст.Вставить("ИспользуемыйАлгоритмШифрования", ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования);
		
		Если МассивПреобразований.Количество() > 0 Тогда 
			Алгоритм = ВходящиеПараметры[4];
			
			ОповещениеПоиска = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеТрансформацииМассиваСертификатов", ЭтотОбъект, ВходящийКонтекст);
			
			НайтиСертификаты(
				ОповещениеПоиска,
				МассивПреобразований,
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Алгоритм,
				Ложь);
			
			Возврат;
		КонецЕсли;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ЗашифроватьДляНескольких(
			Оповещение,
			ВходящийКонтекст.ИмяФайла, // файл данных 
			МассивВСтрокуСРазделителями(МассивСерийныхНомеров), // получатель 
			МассивВСтрокуСРазделителями(МассивПоставщиков), // получатель 
			Результат.ИмяФайла, // зашифрованный файл
			ВходящийКонтекст.ИспользуемыйАлгоритмШифрования); // алгоритм шифрования
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеТрансформацииМассиваСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = ВходящийКонтекст.ОповещениеПослеОбработки;
		
		МассивСерийныхНомеров = ВходящийКонтекст.МассивСерийныхНомеров;
		МассивПоставщиков = ВходящийКонтекст.МассивПоставщиков;
		Для Каждого Сертификат Из Результат.Сертификаты Цикл 
			МассивПоставщиков.Добавить(Сертификат.Поставщик);
			МассивСерийныхНомеров.Добавить(Сертификат.СерийныйНомер);
		КонецЦикла;
		
		ВходящийКонтекст.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
		ВходящийКонтекст.Вставить("МассивПоставщиков", МассивПоставщиков);
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ЗашифроватьДляНескольких(
			Оповещение,
			ВходящийКонтекст.ИмяФайла, // файл данных 
			МассивВСтрокуСРазделителями(МассивСерийныхНомеров), // получатель 
			МассивВСтрокуСРазделителями(МассивПоставщиков), // получатель 
			ВходящийКонтекст.ПолученноеИмяФайла, // зашифрованный файл
			ВходящийКонтекст.ИспользуемыйАлгоритмШифрования); // алгоритм шифрования
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если ВРег(ВходящийКонтекст.ИспользуемыйАлгоритмШифрования) <>
		ВРег(ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования) Тогда
		
		// удалить алгоритм из кеша
		АлгоритмыШифрования = ПараметрыПриложения["КриптографияЭДКО.АлгоритмыШифрования"];
		Если АлгоритмыШифрования <> Неопределено Тогда
			КоличествоАлгоритмовШифрования = АлгоритмыШифрования.Количество();
			Для ИндексАлгоритмаШифрованияСКонца = 0 По КоличествоАлгоритмовШифрования - 1 Цикл
				ИндексАлгоритмаШифрования = КоличествоАлгоритмовШифрования - ИндексАлгоритмаШифрованияСКонца - 1;
				СвойстваАлгоритмаШифрования = АлгоритмыШифрования[ИндексАлгоритмаШифрования];
				Если ВРег(СвойстваАлгоритмаШифрования.Имя) = ВРег(ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования) Тогда
					АлгоритмыШифрования.Удалить(ИндексАлгоритмаШифрования);
				КонецЕсли;
			КонецЦикла;
			ПараметрыПриложения["КриптографияЭДКО.АлгоритмыШифрования"] = АлгоритмыШифрования;
		КонецЕсли;
	КонецЕсли;
	
	ЗашифроватьPKCS7СохранитьСведенияОШифровании(ВходящийКонтекст);
	
	АдресРезультата = Неопределено;
	Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящиеПараметры[2]) Тогда
		АдресРезультата = ВходящиеПараметры[2]; // поместить расшифрованные данные по указанному адресу
	ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящиеПараметры[0])
		И Не ЗначениеЗаполнено(ВходящиеПараметры[2]) Тогда
		АдресРезультата = ВходящиеПараметры[0]; // заместить исходный файл
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[3], ВходящийКонтекст.ВыводитьСообщения);
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ЗашифрованныйФайл", Параметры[3], ВходящийКонтекст));
	КонецЕсли;
	
	// Удаление исходного файла.
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, Параметры[0]);
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если ВходящиеПараметры[5].АлгоритмШифрованияОбязателен
		ИЛИ ВРег(ВходящийКонтекст.ИспользуемыйАлгоритмШифрования) = "GOST 28147-89" Тогда
		
		СтандартнаяОбработкаОшибки(
			СтандартнаяОбработка,
			ВходящийКонтекст,
			"PKCS7ЗашифроватьДляНескольких",
			ОписаниеОшибкиНеУдалосьЗашифроватьФайл(),
			ИнформацияОбОшибке);
		
	Иначе
		СтандартнаяОбработка = Ложь;
		
		ВходящийКонтекст.Вставить("ИспользуемыйАлгоритмШифрования", "GOST 28147-89");
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ЗашифроватьДляНескольких(
			ВходящийКонтекст.ОповещениеПослеОбработки,
			ВходящийКонтекст.ИмяФайла, // файл данных
			МассивВСтрокуСРазделителями(ВходящийКонтекст.МассивСерийныхНомеров), // получатель
			МассивВСтрокуСРазделителями(ВходящийКонтекст.МассивПоставщиков), // получатель
			ВходящийКонтекст.ПолученноеИмяФайла, // зашифрованный файл
			ВходящийКонтекст.ИспользуемыйАлгоритмШифрования); // алгоритм шифрования
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7СохранитьСведенияОШифровании(ВходящийКонтекст)
	
	ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
	Если ВРег(ВходящиеПараметры[5].АлгоритмШифрования) = "GOST 28147-89"
		ИЛИ НЕ ВходящиеПараметры[5].СобиратьСведенияОШифровании Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмШифрованияНайден = (ВходящиеПараметры[5].АлгоритмШифрования =
		ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования);
	ЗашифрованоУспешно = АлгоритмШифрованияНайден И ВходящиеПараметры[5].ИспользуемыйАлгоритмШифрования =
		ВходящийКонтекст.ИспользуемыйАлгоритмШифрования;
	
	Если ВходящийКонтекст.ТипКриптопровайдераИнициализации =
		ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
		
		ТипКриптопровайдера = "ViPNet CSP";
		ВерсияКриптопровайдера = ?(ВходящийКонтекст.ИнформацияОКриптопровайдерах = Неопределено, "",
			ВходящийКонтекст.ИнформацияОКриптопровайдерах.ВерсияViPNetCSP);
		
	Иначе
		ТипКриптопровайдера = "КриптоПро CSP";
		ВерсияКриптопровайдера = ?(ВходящийКонтекст.ИнформацияОКриптопровайдерах = Неопределено, "",
			ВходящийКонтекст.ИнформацияОКриптопровайдерах.ВерсияКриптоПроCSP);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоLinuxКлиент() Тогда
		ТипОС = "Linux";
	ИначеЕсли ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		ТипОС = "MacOS";
	Иначе
		ТипОС = "Windows";
	КонецЕсли;
	
	СведенияОШифровании = Новый Структура;
	СведенияОШифровании.Вставить("АлгоритмШифрования", 				ВходящиеПараметры[5].АлгоритмШифрования);
	СведенияОШифровании.Вставить("ИспользуемыйАлгоритмШифрования", 	ВходящийКонтекст.ИспользуемыйАлгоритмШифрования);
	СведенияОШифровании.Вставить("АлгоритмШифрованияОбязателен", 	ВходящиеПараметры[5].АлгоритмШифрованияОбязателен);
	СведенияОШифровании.Вставить("ЗашифрованоУспешно", 				ЗашифрованоУспешно);
	СведенияОШифровании.Вставить("АлгоритмШифрованияНайден", 		АлгоритмШифрованияНайден);
	СведенияОШифровании.Вставить("ТипКриптопровайдера", 			ТипКриптопровайдера);
	СведенияОШифровании.Вставить("ВерсияКриптопровайдера", 			ВерсияКриптопровайдера);
	СведенияОШифровании.Вставить("ТипОС", 							ТипОС);
	
	ПараметрыПриложения["КриптографияЭДКО.СведенияОШифровании"] = СведенияОШифровании;
	
КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ЗашифрованныйФайл", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗашифроватьPKCS7ШифрованиеСервисомОблачнойПодписи(РезультатВыполнения, ВходящийКонтекст) Экспорт
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	
	Если НЕ РезультатВыполнения.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ИсходныйФайл = РезультатВыполнения.ДанныеФайла;
	Сертификаты = ВходящийКонтекст.Сертификаты;
	ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
	ВыводитьСоообщения = ВходящийКонтекст.ВыводитьСоообщения;
	МестоХраненияКлюча = ВходящийКонтекст.МестоХраненияКлюча;
	УчетнаяЗаписьОблачнойПодписи = КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча);
	Алгоритм = ВходящийКонтекст.Алгоритм;
	
	Если НЕ ПроверитьНастройкиУчетнойЗаписиОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении, "Шифрование") Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
	Контекст.Вставить("ИсходныйФайл", ИсходныйФайл);
	Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомОблачнойПодписи", ЭтотОбъект, Контекст);

	ВсеСертификаты = Новый Массив;
	Для Каждого СтрокаМассива Из Сертификаты Цикл
		ВсеСертификаты.Добавить(СтрокаМассива.Сертификат);
	КонецЦикла;

	ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
	Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
		ПараметрыОперации.Вставить("ОбработкаОшибок", Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, Алгоритм);
	КонецЕсли;

	МодульСервисКриптографииDSSКлиент = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент");
	МодульСервисКриптографииDSSКлиент.Зашифровать(
		Оповещение, 
		МодульСервисКриптографииDSSКлиент.ПолучитьНастройкиПользователя(УчетнаяЗаписьОблачнойПодписи, ПараметрыОперации),
		ИсходныйФайл, 
		ВсеСертификаты, 
		"CMS", 
		ПараметрыОперации);

КонецПроцедуры

Процедура ЗашифроватьPKCS7ПослеШифрованияСервисомОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВызова) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", РезультатВызова.Выполнено);
		
		ЗашифрованныеДанные = Неопределено;
		
		Если РезультатВызова.Выполнено Тогда
			ЗашифрованныеДанные = РезультатВызова.Результат;
		Иначе
			Результат.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
		КонецЕсли;
		
		Результат.Вставить("ЗашифрованныйФайл", ЗашифрованныеДанные);
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;
		
		Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда //Результат необходимо переложить по адресу/пути исходных данных
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				КонецЕсли;
				
			Иначе //Путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
					АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
				Иначе
					АдресЗашифрованныхДанных = ЗашифрованныеДанные;
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИсходныйФайл, ВходящийКонтекст.ВыводитьСоообщения);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаИлиРасширениеИлиАдрес) Тогда	//Результат необходимо поместить по указанному адресу
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
			
		Иначе	//Результат необходимо поместить в указанный файл / новый файл с указанным расширением
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
				АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
			Иначе
				АдресЗашифрованныхДанных = ЗашифрованныеДанные;
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("ЗашифроватьPKCS7ПослеШифрованияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИмяФайлаИлиРасширениеИлиАдрес, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПодписатьИЗашифроватьPKCS7

Процедура ПодписатьИЗашифроватьPKCS7(
		ОповещениеОЗавершении,
		СертификатПодписанта,
		ИмяФайлаДанных,
		ВключатьИсходныеДанные,
		СертификатыПолучателей,
		ИмяЗашифрованногоФайла,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(5, СертификатПодписанта, ИмяФайлаДанных, ВключатьИсходныеДанные, СертификатыПолучателей, ИмяЗашифрованногоФайла);
	
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(СертификатПодписанта) Тогда
		ПараметрыОповещения = Новый Структура("ВходящиеПараметры", ВходящиеПараметры);
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("СертификатыПолучателей", СертификатыПолучателей);
		ПараметрыОповещения.Вставить("СертификатПодписанта", СертификатПодписанта);
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьИЗашифроватьPKCS7ПослеПодписания", ЭтотОбъект, ПараметрыОповещения);
		
		ПараметрыПодписания = Новый Структура("ОтсоединеннаяПодпись", Ложь);
		ПараметрыПодписания = СвойстваРасшифрованияПодписанияСертификата(СертификатПодписанта, ПараметрыПодписания);
		
		СервисКриптографииКлиент.Подписать(
			ПредварительноеОповещениеОЗавершении,
			ИмяФайлаДанных, 
			СертификатПодписанта,
			"CMS", 
			ПараметрыПодписания);
			
			
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(СертификатПодписанта) Тогда
		Если НЕ ИспользованиеОблачнойПодписиВозможно() Тогда
			ОтрицательныйРезультат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, 
								"ОписаниеОшибки", НСтр("ru = 'Не разрешено использование криптографии сервиса DSS.';
														|en = 'Не разрешено использование криптографии сервиса DSS.'"));
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ОтрицательныйРезультат);
			Возврат;
		КонецЕсли;
		
		УчетнаяЗаписьОблачнойПодписи = Неопределено;
		Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(СертификатПодписанта, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
			Возврат;
		КонецЕсли;
		
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СертификатПодписанта);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ВходящиеПараметры", ВходящиеПараметры);
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("СертификатыПолучателей", СертификатыПолучателей);
		ПараметрыОповещения.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
		ПараметрыОповещения.Вставить("СертификатПодписанта", СертификатПодписанта);
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьИЗашифроватьPKCS7ПослеПодписания", ЭтотОбъект, ПараметрыОповещения);
		
		МодульСервисКриптографииDSSКлиентСервер = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер");
		СвойствоПодписи 	= МодульСервисКриптографииDSSКлиентСервер.ПолучитьСвойствоПодписиCMS(Ложь, Ложь);
		ПараметрыОперации   = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
		Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
			МодульСервисКриптографииDSSКлиентСервер.ПолучитьИнформациюДокументаДляПодписи(
								СвойствоПодписи, 
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ИмяФайла", "Данные документа"),
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ТипФайла", "txt"));
			ПараметрыОперации.Вставить("ПодтверждатьПринудительно", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ПодтверждатьПринудительно", Ложь));
		КонецЕсли;
							
		// в параметре алгоритм можно передать структуру с дополнительными параметрами для подписи: принудительное и описание файла
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Подписать(
			ПредварительноеОповещениеОЗавершении,
			УчетнаяЗаписьОблачнойПодписи,
			ИмяФайлаДанных, 
			СвойствоПодписи,
			СертификатПодписанта,
			ПараметрыОперации); 
			
	Иначе
	
		Если Алгоритм = "*" Тогда
			ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", СертификатПодписанта);
		Иначе
			ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
		КонецЕсли;
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПодписатьИЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(ВходящийКонтекст.СертификатПодписанта) Тогда
		Если Результат.Выполнено Тогда 
			
			ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьИЗашифроватьPKCS7ПослеШифрования", ЭтотОбъект, ВходящийКонтекст);
			
			СервисКриптографииКлиент.Зашифровать(
				ПредварительноеОповещениеОЗавершении, 
				Результат.Подпись, 
				ВходящийКонтекст.СертификатыПолучателей, 
				"CMS", Неопределено);
			
		Иначе
			
			РезультатОшибки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Ложь,
				"ОписаниеОшибки",
				КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении, 
				РезультатОшибки);
				
		КонецЕсли;
			
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(ВходящийКонтекст.СертификатПодписанта) Тогда
		Если Результат.Выполнено Тогда 
			УчетнаяЗаписьОблачнойПодписи = Неопределено;
			Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(ВходящийКонтекст.СертификатПодписанта, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
				Возврат;
			КонецЕсли;
			
			ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьИЗашифроватьPKCS7ПослеШифрования", ЭтотОбъект, ВходящийКонтекст);
			
			Псевдонимы = Новый Структура();
			Псевдонимы.Вставить("Выполнено", "Выполнено");
			Псевдонимы.Вставить("Результат", "ЗашифрованныеДанные");
			Псевдонимы.Вставить("Ошибка", "ИнформацияОбОшибке");
			
			ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Зашифровать(
				ПредварительноеОповещениеОЗавершении,
				УчетнаяЗаписьОблачнойПодписи,
				Результат.Результат, 
				ВходящийКонтекст.СертификатыПолучателей, 
				"CMS",
				Новый Структура("Псевдонимы", Псевдонимы));
			
		Иначе
			
			РезультатОшибки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Ложь,
				"ОписаниеОшибки",
				Результат.Ошибка);
			
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении, 
				РезультатОшибки);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеШифрования(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда 
		
		ЗашифрованныйПакет = Новый Структура;
		ЗашифрованныйПакет.Вставить("ИмяФайлаЗашифрованногоПакета", Результат.ЗашифрованныеДанные);
		ЗашифрованныйПакет.Вставить("ИмяФайлаВыгрузки", ВходящийКонтекст.ВходящиеПараметры[4]);
								
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("ЗашифрованныйПакет", ЗашифрованныйПакет);
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("АдресПодписанныхИЗашифрованныхДанных", Результат.ЗашифрованныеДанные);		
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Новый Структура("Выполнено, ИмяЗашифрованногоФайла, ЗашифрованныйПакет", Истина, Результат.ЗашифрованныеДанные, ЗашифрованныйПакет));
	Иначе
		
		РезультатОшибки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
			Ложь,
			"ОписаниеОшибки",
			КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатОшибки);
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[4], ВходящийКонтекст, "ПодписатьИЗашифроватьPKCS7ПослеПолученияИмениФайла");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьИЗашифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьИЗашифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ПодписиВJSON = ПодписиСертификатовДокументооборотаВJSON(ВходящиеПараметры[0]);
		
		Если ВходящиеПараметры[2] Тогда // Включать исходные данные
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьСДаннымиИЗашифровать(
				Оповещение, 
				ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
				ВходящиеПараметры[1], // файл данных 
				ВходящиеПараметры[3][0].СерийныйНомер, ВходящиеПараметры[3][0].Поставщик, // сертификат получателя
				Результат.ИмяФайла, // зашифрованный файл
				ПодписиВJSON
				);	
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПодписатьИЗашифровать(
				Оповещение, 
				ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
				ВходящиеПараметры[1], // файл данных 
				ВходящиеПараметры[3][0].СерийныйНомер, ВходящиеПараметры[3][0].Поставщик, // сертификат получателя
				Результат.ИмяФайла, // зашифрованный файл
				ПодписиВJSON
				);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяЗашифрованногоФайла", Параметры[5], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		?(ВходящийКонтекст.ВходящиеПараметры[2], "PKCS7ПодписатьСДаннымиИЗашифровать", "PKCS7ПодписатьИЗашифровать"),
		ОписаниеОшибкиНеУдалосьПодписатьИЗашифроватьФайл(), ИнформацияОбОшибке);

КонецПроцедуры

Процедура ПодписатьИЗашифроватьPKCS7ПослеШифрованияОблачнаяПодпись(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда 
		
		ЗашифрованныйПакет = Новый Структура;
		ЗашифрованныйПакет.Вставить("ИмяФайлаЗашифрованногоПакета", Результат.Результат);
		ЗашифрованныйПакет.Вставить("ИмяФайлаВыгрузки", ВходящийКонтекст.ВходящиеПараметры[4]);
								
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("ЗашифрованныйПакет", ЗашифрованныйПакет);
		ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("АдресПодписанныхИЗашифрованныхДанных", Результат.Результат);		
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			Новый Структура("Выполнено, ИмяЗашифрованногоФайла, ЗашифрованныйПакет", Истина, Результат.Результат, ЗашифрованныйПакет));
	Иначе
		
		РезультатОшибки = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
			Ложь,
			"ОписаниеОшибки",
			КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.Ошибка));
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			РезультатОшибки);
			
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РасшифроватьPKCS7

Процедура РасшифроватьPKCS7(
		ОповещениеОЗавершении,
		ЗашифрованныйФайл,
		ИмяФайлаИлиРасширениеИлиАдрес,
		Сертификат,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть одноименная процедура,
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	ВходящиеПараметры 		= ПараметрыВМассив(4, ЗашифрованныйФайл, ИмяФайлаИлиРасширениеИлиАдрес, Сертификат, Алгоритм);
	
	ПараметрыЦикла			= Новый Структура();
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("ЗашифрованныйФайл", ЗашифрованныйФайл);
	ПараметрыЦикла.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
	ПараметрыЦикла.Вставить("Сертификат", Сертификат);
	ПараметрыЦикла.Вставить("Алгоритм", Алгоритм);
	ПараметрыЦикла.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
	ПараметрыЦикла.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ПараметрыЦикла.Вставить("ВходящиеПараметры", ВходящиеПараметры);

	СертификатВХранилище    = КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат);
	СертификатОблака		= КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат);
	
	Если ИспользованиеОблачнойПодписиВозможно() И СертификатОблака Тогда
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьPKCS7СервисомОблачнойПодписи", ЭтотОбъект, ПараметрыЦикла);
		ПроверитьДанныеДляОперацииОблачнойПодписи(ПредварительноеОповещениеОЗавершении, ЗашифрованныйФайл, "Расшифрование");
		
	ИначеЕсли Сертификат = Неопределено Или СертификатВХранилище Тогда
		РасшифроватьPKCS7СервисомКриптографии(ПараметрыЦикла);
		
	Иначе
		РасшифроватьPKCS7Компонентой(ОповещениеОЗавершении, ВходящиеПараметры, ЗашифрованныйФайл, ВыводитьСоообщения, МенеджерКриптографии, Алгоритм)
		
	КонецЕсли;

КонецПроцедуры
	
Процедура РасшифроватьPKCS7Компонентой(ОповещениеОЗавершении, ВходящиеПараметры, ЗашифрованныйФайл, ВыводитьСоообщения, МенеджерКриптографии, Алгоритм)
	
	Если Алгоритм = "*" Тогда
		ПараметрыОпределенияАлгоритма = Новый Структура("Криптосообщение", ЗашифрованныйФайл);
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
	КонецЕсли;
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "РасшифроватьPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);

КонецПроцедуры
	
Процедура РасшифроватьPKCS7ПослеРасшифровкиСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть аналогичная процедура РасшифроватьPKCS7(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если ТипЗнч(Результат)=Тип("Структура") Тогда
		РасшифрованныеДанные = Неопределено;
		Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные);
		Результат.Вставить("РасшифрованныйФайл", РасшифрованныеДанные);
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда 
			
			ОшибкаСервиса = Результат.ИнформацияОбОшибке;
			Если Не ВходящийКонтекст.Свойство("ИнформацияОбОшибкеКомпоненты") И 
				СтрНайти(ОшибкаСервиса.Описание, "отсутствуют сертификаты для расшифровки") > 0 Тогда 
			
				ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Вставить("ИнформацияОбОшибкеСервиса", Результат.ИнформацияОбОшибке);
				ПараметрыЛокальнойРасшифровки = ВходящийКонтекст.ПараметрыЛокальнойРасшифровки;
				РасшифроватьPKCS7Компонентой(
					ВходящийКонтекст.ОповещениеОЗавершении, 
					ПараметрыЛокальнойРасшифровки.ВходящиеПараметры,
					ВходящийКонтекст.ИсходныйФайл,				// << ЗашифрованныйФайл
					ВходящийКонтекст.ВыводитьСоообщения,
					ПараметрыЛокальнойРасшифровки.МенеджерКриптографии,
					ПараметрыЛокальнойРасшифровки.Алгоритм);
					
				Возврат;
			КонецЕсли;
			
			ИнформацияОбОшибкеКомпоненты = Неопределено;
			Если ВходящийКонтекст.Свойство("ИнформацияОбОшибкеКомпоненты") Тогда
				ИнформацияОбОшибкеКомпоненты = ВходящийКонтекст.ИнформацияОбОшибкеКомпоненты;
			КонецЕсли;
				
			Результат.Вставить("ОписаниеОшибки", 
				КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке, ИнформацияОбОшибкеКомпоненты));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;
		
		Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда //Результат необходимо переложить по адресу исходного файла / пути нового файла
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИсходныйФайл);
				КонецЕсли;
				
			Иначе //Путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда //Двоичные данные
					АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Новый УникальныйИдентификатор);
				Иначе
					АдресЗашифрованныхДанных = РасшифрованныеДанные;
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровыванияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ".bin", ВходящийКонтекст.ВыводитьСоообщения); //В новый файл с расширением .bin
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаИлиРасширениеИлиАдрес) Тогда	//Результат необходимо поместить по указанному адресу
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
			
		Иначе	//Результат необходимо поместить в указанный файл / новый файл с указанным расширением
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда //Двоичные данные
				АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Новый УникальныйИдентификатор);
			Иначе
				АдресЗашифрованныхДанных = РасшифрованныеДанные;
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровыванияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИмяФайлаИлиРасширениеИлиАдрес, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеРасшифровыванияСервисомКриптографииПослеЗаписиФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда 
		
		ВходящийКонтекст.Вставить("РасшифрованныйФайл", Результат.ИмяФайла);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст);
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПолученияФайлаДляРасшифровки", ЭтотОбъект, ВходящийКонтекст);
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения); 
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0])); 
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияФайлаДляРасшифровки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяИсходногоФайла", Результат.ИмяФайла);
		
		ПолучитьИмяФайла(
			?(КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[1]), Неопределено, ВходящийКонтекст.ВходящиеПараметры[1]),
			ВходящийКонтекст, "РасшифроватьPKCS7ПослеПолученияИмениФайлаРезультата");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияИмениФайлаРезультата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПолученияСертификата", ЭтотОбъект, ВходящийКонтекст);
			 
		Если СертификатЗаполнен(ВходящиеПараметры[2]) Тогда // указан приоритетный сертификат
			Если ЗаполненСерийныйНомерСертификата(ВходящиеПараметры[2]) Тогда
				РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "СвойстваСертификата", ВходящиеПараметры[2], ВходящийКонтекст);
				РезультатВыполнения.Вставить("СертификатНайден", Истина);
				ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
			Иначе
				Алгоритм = ВходящиеПараметры[3];
				
				НайтиСертификат(
					Оповещение,
					ВходящиеПараметры[2],
					Ложь,
					ВходящийКонтекст.ВыводитьСообщения,
					ВходящийКонтекст.МенеджерКриптографии,
					Алгоритм);
			КонецЕсли;
		Иначе
			РасшифроватьPKCS7ПослеПолученияСертификата(
				Новый Структура("Выполнено, СертификатНайден", Истина, Ложь), ВходящийКонтекст);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если Результат.СертификатНайден Тогда
			ВходящийКонтекст.Вставить("СвойстваСертификата", Результат.СвойстваСертификата);
			
			Оповещение = Новый ОписаниеОповещения(
				"РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
				
			ЗаполнитьПарольДоступаКЗакрытомуКлючу(
				Оповещение, Результат.СвойстваСертификата, ВходящийКонтекст.МенеджерКриптографии);
		Иначе
			РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(
				Новый Структура("Выполнено", Истина), ВходящийКонтекст);	
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеЗаполненияПароляДоступаКЗакрытомуКлючу(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"РасшифроватьPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		ПодписиВJSON = ПодписиСертификатовДокументооборотаВJSON();
				
		Если ВходящийКонтекст.Свойство("СвойстваСертификата") 
			И СертификатЗаполнен(ВходящийКонтекст.СвойстваСертификата) Тогда // указан приоритетный сертификат
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Расшифровать(
				Оповещение,
				ВходящийКонтекст.ИмяИсходногоФайла, // зашифрованный файл
				ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованный файл
				ВходящийКонтекст.СвойстваСертификата.СерийныйНомер, 
				ВходящийКонтекст.СвойстваСертификата.Поставщик, // приоритетный сертификат
				ПодписиВJSON
				);	
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7Расшифровать(
				Оповещение,
				ВходящийКонтекст.ИмяИсходногоФайла, // зашифрованный файл
				ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованный файл
				"00", // обход падения компоненты, передача несуществующего приоритетного сертификата
				"C=RU", // обход падения компоненты, передача несуществующего приоритетного сертификата
				ПодписиВJSON
				);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	АдресРезультата = ПолучитьАдресРезультата(ВходящийКонтекст.ВходящиеПараметры[1], ВходящийКонтекст.ВходящиеПараметры[0]);
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		ВходящийКонтекст.Вставить("АдресРезультата", АдресРезультата);
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьPKCS7ПослеПреобразованияРезультатаВBase64", ЭтотОбъект, ВходящийКонтекст);
		ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
			Оповещение, Параметры[1], ВходящийКонтекст.ВыводитьСообщения);	
	Иначе		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "РасшифрованныйФайл", Параметры[1], ВходящийКонтекст));	
	КонецЕсли;
	
	// Удаление исходного файла.	
	ОперацииСФайламиЭДКОКлиент.УдалитьФайлыНаКлиенте(, Параметры[0]);
		
КонецПроцедуры

Процедура РасшифроватьPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	// Не нашлось в сервисе и локальном криптопровайдере сертификатов для расшифровки
	ОшибкаСервиса = Неопределено;
	Если ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.Свойство("ИнформацияОбОшибкеСервиса") Тогда
		ОшибкаСервиса = ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.ИнформацияОбОшибкеСервиса;		
	Иначе		
		
		Если КриптографияЭДКОСлужебныйВызовСервера.ИспользованиеКриптосервисаВозможно() Тогда 
			
			СтандартнаяОбработка = Ложь;
			
			ВходящийКонтекст.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
			ВходящийКонтекст.Вставить("ИнформацияОбОшибкеСервиса", ОшибкаСервиса);
			ВходящийКонтекст.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
			
			ЗашифрованныеДанные = ВходящийКонтекст.ВходящиеПараметры[0];
			
			Оповещение = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеПолученияСвойствКриптосообщения", ЭтотОбъект, ВходящийКонтекст);
			СервисКриптографииСлужебныйКлиент.ОжидатьЗавершенияВыполненияВФоне(
			Оповещение, СервисКриптографииСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(ЗашифрованныеДанные, Истина));	
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7Расшифровать",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке, ОшибкаСервиса);
			
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПолученияСвойствКриптосообщения(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = ВходящийКонтекст.СтандартнаяОбработка;
	ОшибкаСервиса = ВходящийКонтекст.ИнформацияОбОшибкеСервиса;
	ИнформацияОбОшибке = ВходящийКонтекст.ИнформацияОбОшибке;
		
	Результат = СервисКриптографииСлужебныйКлиент.ПолучитьРезультатВыполненияВФоне(ДлительнаяОперация);	
	Если Результат.Выполнено Тогда		
		СвойстваСообщения = Результат.РезультатВыполнения;
		
		Идентификаторы = Новый Массив;
		Если СвойстваСообщения.Тип = "envelopedData" Тогда
			Для Каждого Получатель Из СвойстваСообщения.Получатели Цикл
				Если Получатель.Свойство("Идентификатор") Тогда
					Идентификаторы.Добавить(Получатель.Идентификатор);
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		Если Идентификаторы.Количество() > 0 Тогда 
			ЗашифрованныйФайл = ВходящийКонтекст.ВходящиеПараметры[0];
			ВыводитьСоообщения = ВходящийКонтекст.ВыводитьСообщения;
			ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ВходящиеПараметры[1];
			
			ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
			ПараметрыОповещения.Вставить("ИсходныйФайл", ЗашифрованныйФайл);
			ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
			ПараметрыОповещения.Вставить("ИнформацияОбОшибкеКомпоненты", ИнформацияОбОшибке);
			
			ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровкиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
			
			СервисКриптографииКлиент.Расшифровать(
				ПредварительноеОповещениеОЗавершении,
				ЗашифрованныйФайл, 
				"CMS", 
				Неопределено); 
				
			Возврат;
		Иначе
			Если ОшибкаСервиса = Неопределено Тогда 
				ОшибкаСервиса = "В криптосервисе не найдены сертификаты получателей сообщения"
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"PKCS7Расшифровать",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке, ОшибкаСервиса);
		
КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеПреобразованияРезультатаВBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда                                      
		АдресРезультата = ОперацииСФайламиЭДКОСлужебныйВызовСервера.Base64ВоВременноеХранилище(
			Результат.СтрокаBase64, ВходящийКонтекст.АдресРезультата);
			
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "РасшифрованныйФайл", АдресРезультата, ВходящийКонтекст));	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьPKCS7СервисомКриптографии(ПараметрыОперации)
	
	ЗашифрованныйФайл = ПараметрыОперации.ЗашифрованныйФайл;
	Сертификат = ПараметрыОперации.Сертификат;
	
	Если НЕ КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныйФайл) И ТипЗнч(ЗашифрованныйФайл)<>Тип("ДвоичныеДанные") Тогда
		
		ОшибкаТекстом = НСтр("ru = 'Для электронной подписи из программы данные могут быть переданы как двоичные данные или как адрес в хранилище';
							|en = 'Для электронной подписи из программы данные могут быть переданы как двоичные данные или как адрес в хранилище'");
		
		ВыполнитьОбработкуОповещения(
			ПараметрыОперации.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОшибкаТекстом));
			
		Возврат;
	КонецЕсли;
	
	ПараметрыШифрования	= Неопределено;
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		ПараметрыШифрования = СвойстваРасшифрованияПодписанияСертификата(Сертификат);
	КонецЕсли;	
	
	ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ПараметрыОперации.ОповещениеОЗавершении);
	ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ПараметрыОперации.ИмяФайлаИлиРасширениеИлиАдрес);
	ПараметрыОповещения.Вставить("ИсходныйФайл", ЗашифрованныйФайл);
	ПараметрыОповещения.Вставить("ВыводитьСоообщения", ПараметрыОперации.ВыводитьСоообщения);
	
	// Особые параметры для перешедших с локальной учетки в облако
	ПараметрыЛокальнойРасшифровки = Новый Структура;
	ПараметрыЛокальнойРасшифровки.Вставить("ВходящиеПараметры", ПараметрыОперации.ВходящиеПараметры);
	ПараметрыЛокальнойРасшифровки.Вставить("МенеджерКриптографии", ПараметрыОперации.МенеджерКриптографии);
	ПараметрыЛокальнойРасшифровки.Вставить("Алгоритм", ПараметрыОперации.Алгоритм);
	
	ПараметрыОповещения.Вставить("ПараметрыЛокальнойРасшифровки", ПараметрыЛокальнойРасшифровки);
	
	ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровкиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
	
	СервисКриптографииКлиент.Расшифровать(
		ПредварительноеОповещениеОЗавершении,
		ЗашифрованныйФайл, 
		"CMS", 
		ПараметрыШифрования); 

КонецПроцедуры

Процедура РасшифроватьPKCS7СервисомОблачнойПодписи(РезультатВыполнения, ВходящийКонтекст) Экспорт
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	
	Если НЕ РезультатВыполнения.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;	
	КонецЕсли;
	
	ЗашифрованныйФайл = РезультатВыполнения.ДанныеФайла;
	Сертификат = ВходящийКонтекст.Сертификат;
	Алгоритм = ВходящийКонтекст.Алгоритм;
	
	Если НЕ КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныйФайл) И ТипЗнч(ЗашифрованныйФайл)<>Тип("ДвоичныеДанные") Тогда
		
		ОшибкаТекстом = НСтр("ru = 'Для электронной подписи в облаке данные могут быть переданы как двоичные данные или как адрес в хранилище';
							|en = 'Для электронной подписи в облаке данные могут быть переданы как двоичные данные или как адрес в хранилище'");
		
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОшибкаТекстом));
			
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыОперацииОблачнойПодписи();
	Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОперации, Алгоритм);
		ПараметрыОперации.Вставить("ПодтверждатьПринудительно", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ПодтверждатьПринудительно", Ложь));
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("ЗашифрованныйФайл", ЗашифрованныйФайл);
	ВходящийКонтекст.Вставить("ПараметрыОперации", ПараметрыОперации);
	ВходящийКонтекст.Вставить("ПерваяПопытка", Истина);
	
	ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровкиСервисомОблачнойПодписи", ЭтотОбъект, ВходящийКонтекст);
	
	Если Сертификат = Неопределено Тогда
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").РасшифроватьВЦикле(
			ПредварительноеОповещениеОЗавершении,
			ЗашифрованныйФайл,
			"CMS",
			ПараметрыОперации);
	Иначе
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификат);
		УчетнаяЗаписьОблачнойПодписи = Неопределено;
		ИдентификаторСертификата = Неопределено;
		ДополнитьПараметрыОперацииОблачнойПодписи(ПараметрыОперации, МестоХраненияКлюча);
		
		Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
			УчетнаяЗаписьОблачнойПодписи = КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьОблачнойПодписи) Тогда
			СертификатОблачнойПодписи = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьНастройкиОблачнойПодписиПоСертификату(Сертификат);
			Если СертификатОблачнойПодписи.Выполнено Тогда
				УчетнаяЗаписьОблачнойПодписи = СертификатОблачнойПодписи.УчетнаяЗапись;
				ИдентификаторСертификата = СертификатОблачнойПодписи.Идентификатор;
			КонецЕсли;			
		КонецЕсли;	
		
		Если НЕ ПроверитьНастройкиУчетнойЗаписиОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении, "Расшифровать") Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Расшифровать(
			ПредварительноеОповещениеОЗавершении,
			УчетнаяЗаписьОблачнойПодписи,
			ЗашифрованныйФайл,
			"CMS",
			ИдентификаторСертификата,
			ПараметрыОперации);
	КонецЕсли;	

КонецПроцедуры

Процедура РасшифроватьPKCS7ПослеРасшифровкиСервисомОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт

	Выполнено = РезультатВызова.Выполнено;
	КодОшибки = РезультатВызова.КодОшибки;
	
	Если Выполнено Тогда
		ПараметрыЦикла = ВходящийКонтекст;
		ПараметрыЦикла.Вставить("РасшифрованныеДанные", РезультатВызова.Результат);
		ОписаниеСледующее = Новый ОписаниеОповещения("РасшифроватьPKCS7СервисомОблачнойПодписиРезультат", ЭтотОбъект, ПараметрыЦикла);
		ПроверитьПодготовкуОблачногоСертификата(РезультатВызова.Сертификат, "Расшифрование", ОписаниеСледующее);
		
	ИначеЕсли КодОшибки = "100004" Тогда
		РасшифроватьPKCS7СервисомКриптографии(ВходящийКонтекст);
		
	ИначеЕсли КодОшибки = "300006" И ВходящийКонтекст.Сертификат <> Неопределено И ВходящийКонтекст.ПерваяПопытка Тогда
		ВходящийКонтекст.ПерваяПопытка = Ложь;
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровкиСервисомОблачнойПодписи", ЭтотОбъект, ВходящийКонтекст);
		
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").РасшифроватьВЦикле(
			ПредварительноеОповещениеОЗавершении,
			ВходящийКонтекст.ЗашифрованныйФайл,
			"CMS",
			ВходящийКонтекст.ПараметрыОперации);
		
	Иначе	
		ПараметрыЦикла = Новый Структура();
		ПараметрыЦикла.Вставить("Выполнено", Выполнено);
		ПараметрыЦикла.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура РасшифроватьPKCS7СервисомОблачнойПодписиРезультат(РезультатВызова, ВходящийКонтекст) Экспорт
	
	МодульСервисКриптографииDSSКлиентСервер = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер");
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", РезультатВызова.Выполнено);
	
	ТекстОшибки = МодульСервисКриптографииDSSКлиентСервер.ПолучитьПолеСтруктуры(РезультатВызова, "Ошибка", "");
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = МодульСервисКриптографииDSSКлиентСервер.ПолучитьПолеСтруктуры(РезультатВызова, "ОписаниеОшибки", "");
	КонецЕсли;	
	
	Если РезультатВызова.Выполнено Тогда
		
		РасшифрованныеДанные = ВходящийКонтекст.РасшифрованныеДанные;
		
		Результат.Вставить("РасшифрованныйФайл", РасшифрованныеДанные);
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ЗашифрованныйФайл;
		
		Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда //Результат необходимо переложить по адресу исходного файла / пути нового файла
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИсходныйФайл);
				КонецЕсли;
				
			Иначе //Путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда //Двоичные данные
					АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Новый УникальныйИдентификатор);
				Иначе
					АдресЗашифрованныхДанных = РасшифрованныеДанные;
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровыванияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ".bin", ВходящийКонтекст.ВыводитьСоообщения); //В новый файл с расширением .bin
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаИлиРасширениеИлиАдрес) Тогда	//Результат необходимо поместить по указанному адресу
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
			
		Иначе	//Результат необходимо поместить в указанный файл / новый файл с указанным расширением
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда //Двоичные данные
				АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, Новый УникальныйИдентификатор);
			Иначе
				АдресЗашифрованныхДанных = РасшифрованныеДанные;
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("РасшифроватьPKCS7ПослеРасшифровыванияСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИмяФайлаИлиРасширениеИлиАдрес, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли НЕ ВходящийКонтекст.Свойство("ИнформацияОбОшибкеКомпоненты") И 
		(МодульСервисКриптографииDSSКлиентСервер.ПолучитьКодОшибки(ТекстОшибки) = "100002"
		ИЛИ МодульСервисКриптографииDSSКлиентСервер.ПолучитьКодОшибки(ТекстОшибки) = "000000"
		ИЛИ МодульСервисКриптографииDSSКлиентСервер.ЭтоОшибкаОтказа(ТекстОшибки)) Тогда
		РасшифроватьPKCS7СервисомКриптографии(ВходящийКонтекст);
		Возврат;
		
	Иначе
		Результат.Вставить("ОписаниеОшибки", ТекстОшибки);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьПодписантовPKCS7

Процедура ПолучитьПодписантовPKCS7(
		ОповещениеОЗавершении,
		ИмяФайлаПодписи,
		КаталогСертификатов,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(2, ИмяФайлаПодписи, КаталогСертификатов);
	
	Если Алгоритм = "*" Тогда
		ПараметрыОпределенияАлгоритма = Новый Структура("Криптосообщение", ИмяФайлаПодписи);
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
	КонецЕсли;
	ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении, "ПолучитьПодписантовPKCS7ПослеСозданияМенеджераКриптографии",
		ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
	
КонецПроцедуры

Процедура ПолучитьПодписантовPKCS7ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьПодписантовPKCS7ПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПолучитьПодписантовPKCS7ПриОшибкеВыполнения", ЭтотОбъект);
		
		Если ВходящийКонтекст.ВходящиеПараметры[1] <> Неопределено Тогда
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПолучитьРасширенныеСвойстваПодписанта(
				Оповещение,
				ВходящийКонтекст.ВходящиеПараметры[0], // файл подписи
				ВходящийКонтекст.ВходящиеПараметры[1] // каталог для сохранения сертификатов подписантов
				);
		Иначе
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовPKCS7ПолучитьСвойстваПодписи(
				Оповещение,
				ВходящийКонтекст.ВходящиеПараметры[0], // файл подписи
				"",
				""
				);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПодписантовPKCS7ПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ВходящиеПараметры[1] <> Неопределено Тогда
		Подписанты = КриптографияЭДКОСлужебныйВызовСервера.ИзвлечьИнформациюОПодписантахИзJSON(Результат);
	Иначе
		ИзвлеченныйПодписант = Новый ФиксированнаяСтруктура("СерийныйНомер, Поставщик", Параметры[1], Параметры[2]);
		Подписанты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзвлеченныйПодписант);
		Подписанты = Новый ФиксированныйМассив(Подписанты);
	КонецЕсли;
	
	Если Подписанты <> Неопределено И Подписанты.Количество() > 0 Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Подписанты", Подписанты, ВходящийКонтекст));
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Отсутствует информация о подписантах в подписи PKCS #7.';
								|en = 'Отсутствует информация о подписантах в подписи PKCS #7.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия(), "Ошибка", ОписаниеОшибки,, Истина);
		
		ОписаниеОшибки = ОписаниеОшибкиНеУдалосьПолучитьСвойстваПодписи();
		ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьПодписантовPKCS7ПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		?(ВходящийКонтекст.ВходящиеПараметры[1] <> Неопределено, "PKCS7ПолучитьРасширенныеСвойстваПодписанта", "PKCS7ПолучитьСвойстваПодписи"),
		ОписаниеОшибкиНеУдалосьПолучитьСвойстваПодписи(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область Подписать

Процедура Подписать(
		ОповещениеОЗавершении,
		Сертификат,
		ИмяФайлаДанных,
		ПараметрыКриптографии,
		ИмяФайлаПодписи,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ОрганизацияНеаккредитованногоУЦ = НеаккредитованныйУЦСертификата(Сертификат);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", 				ОповещениеОЗавершении);
	Контекст.Вставить("Сертификат", 						Сертификат);
	Контекст.Вставить("ИмяФайлаДанных", 					ИмяФайлаДанных);
	Контекст.Вставить("ПараметрыКриптографии", 				ПараметрыКриптографии);
	Контекст.Вставить("ИмяФайлаПодписи", 					ИмяФайлаПодписи);
	Контекст.Вставить("ВыводитьСоообщения", 				ВыводитьСоообщения);
	Контекст.Вставить("МенеджерКриптографии", 				МенеджерКриптографии);
	Контекст.Вставить("Алгоритм", 							Алгоритм);
	Контекст.Вставить("ОрганизацияНеаккредитованногоУЦ", 	ОрганизацияНеаккредитованногоУЦ);
	
	Если ЗначениеЗаполнено(ОрганизацияНеаккредитованногоУЦ) И ОбщегоНазначенияКлиент.ДатаСеанса() >= '20220101' Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеПолучениеКонтекста",
			ЭтотОбъект,
			Контекст);
		ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(Оповещение);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			Контекст);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПолучениеКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.КонтекстЭДО = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиСертификатНеаккредитованногоУЦ()));
		Возврат;
	КонецЕсли;
	
	Организация = ОрганизацияОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
	ВходящийКонтекст.Вставить("Организация", Организация);
	
	Если ПодписаниеСертификатомНеаккредитованногоУЦВременноРазрешено(Организация) Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			ВходящийКонтекст);
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.ОК);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеПроверкиАккредитацииУЦ",
			ЭтотОбъект,
			ВходящийКонтекст);
		
		ОтпечатокСертификата = ?(ТипЗнч(ВходящийКонтекст.Сертификат) = Тип("Структура")
			ИЛИ ТипЗнч(ВходящийКонтекст.Сертификат) = Тип("ФиксированнаяСтруктура")
			И ВходящийКонтекст.Сертификат.Свойство("Отпечаток"), ВходящийКонтекст.Сертификат.Отпечаток, "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", 						Организация);
		ПараметрыФормы.Вставить("ОрганизацияНеаккредитованногоУЦ", 	ВходящийКонтекст.ОрганизацияНеаккредитованногоУЦ);
		ПараметрыФормы.Вставить("ОтпечатокСертификата", 			ОтпечатокСертификата);
		
		ОткрытьФорму(
			Результат.КонтекстЭДО.ПутьКОбъекту + ".Форма.ПредупреждениеНеаккредитованныйУЦ",
			ПараметрыФормы,,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПроверкиАккредитацииУЦ(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да И Результат <> КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиСертификатНеаккредитованногоУЦ()));
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ВременноРазрешитьПодписаниеПодписаниеСертификатомНеаккредитованногоУЦ(ВходящийКонтекст.Организация);
	КонецЕсли;
	
	ОповещениеОЗавершении 	= ВходящийКонтекст.ОповещениеОЗавершении;
	Сертификат 				= ВходящийКонтекст.Сертификат;
	ИмяФайлаДанных 			= ВходящийКонтекст.ИмяФайлаДанных;
	ПараметрыКриптографии 	= ВходящийКонтекст.ПараметрыКриптографии;
	ИмяФайлаПодписи 		= ВходящийКонтекст.ИмяФайлаПодписи;
	ВыводитьСоообщения 		= ВходящийКонтекст.ВыводитьСоообщения;
	МенеджерКриптографии 	= ВходящийКонтекст.МенеджерКриптографии;
	Алгоритм 				= ВходящийКонтекст.Алгоритм;
	
	ВходящиеПараметры = ПараметрыВМассив(5, Сертификат, ИмяФайлаДанных, ПараметрыКриптографии, ИмяФайлаПодписи, Алгоритм);
	
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		
		ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
	
		ПараметрыПодписания = СвойстваРасшифрованияПодписанияСертификата(Сертификат);
		
		СервисКриптографииКлиент.Подписать(
			ПредварительноеОповещениеОЗавершении,
			ИмяФайлаДанных, 
			Сертификат,
			"GOST3410", 
			ПараметрыПодписания); 
			
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
		
		УчетнаяЗаписьОблачнойПодписи = Неопределено;
		Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(Сертификат, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		ПараметрыОповещения.Вставить("Сертификат", Сертификат);
		ПараметрыОповещения.Вставить("Алгоритм", Алгоритм);
		ПараметрыОповещения.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьПослеПолученияДанныхОблачнойПодписи", ЭтотОбъект, ПараметрыОповещения);
	
		ПроверитьДанныеДляОперацииОблачнойПодписи(ПредварительноеОповещениеОЗавершении, ИмяФайлаДанных, "Подписание");
			
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, Сертификат);
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПодписатьПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПодписиСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
				
	Если ТипЗнч(Результат)=Тип("Структура") Тогда
		Подпись = Неопределено;
		ПолучательРезультата = Неопределено;
		ИмяФайлаПодписи = Неопределено;
		
		МенеджерКриптографии = Неопределено;
		Если Не Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда 
			Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		КонецЕсли;
		
		Алгоритм = Неопределено;
		Если НЕ Результат.Свойство("Алгоритм", Алгоритм) Тогда
			Результат.Вставить("Алгоритм", Алгоритм);
		КонецЕсли;
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда 
			Результат.Вставить("ОписаниеОшибки", КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
			
		Результат.Свойство("Подпись", Подпись);		
		Результат.Свойство("ПолучательРезультата", ПолучательРезультата);
		ВходящийКонтекст.Свойство("ИмяФайлаПодписи", ИмяФайлаПодписи);
		Если ЗначениеЗаполнено(ПолучательРезультата) Тогда 
			Результат.Вставить(ПолучательРезультата, Подпись);
		Иначе 
			Результат.Вставить("ФайлПодписи", Подпись);
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда 
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаПодписи) Тогда 
				Если Результат.Выполнено Тогда 
					ДД = ПолучитьИзВременногоХранилища(Подпись);
					ПоместитьВоВременноеХранилище(ДД, ИмяФайлаПодписи);
					Результат.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
				Иначе
					Результат.Вставить("ИмяФайлаПодписи", Неопределено);
				КонецЕсли;
			КонецЕсли;
			
		Иначе //Поместим результат по адресу исходных данных / запишем в новый файл
			
			Результат.Вставить("ИмяФайлаПодписи", Подпись);
			
			ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
			ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;			
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(Подпись) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(Подпись, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(Подпись, ИсходныйФайл);
				КонецЕсли;
			Иначе //Исходные данные переданы как полный путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(Подпись) Тогда //Двоичные данные
					АдресПодписи = ПоместитьВоВременноеХранилище(Подпись, Новый УникальныйИдентификатор);
				Иначе
					АдресПодписи = Подпись;
				КонецЕсли;
				
				Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда 
					ИсходныйФайл = ".p7b";
				Иначе
					ИсходныйФайл = ИмяФайлаИлиРасширениеИлиАдрес; //Расширение нового файла или полный путь к файлу результата
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресПодписи, ИсходныйФайл, ВходящийКонтекст.ВыводитьСоообщения);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;							
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПодписатьПослеПодписиСервисомКриптографииПослеЗаписиФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда 
		
		ВходящийКонтекст.Вставить("ИмяФайлаПодписи", Результат.ИмяФайла);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст);
	
КонецПроцедуры

Процедура ПодписатьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[3], ВходящийКонтекст, "ПодписатьПослеПолученияИмениФайла");	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПодписатьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПодписатьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Сертификат = ВходящиеПараметры[0];
		Если НЕ (Сертификат.Свойство("Поставщик") И Сертификат.Свойство("СерийныйНомер")) Тогда 
			ВходящийКонтекст.Вставить("ОповещениеПослеОбработки", Оповещение);
			ВходящийКонтекст.Вставить("ДвоичныеДанные", Результат.ДвоичныеДанные);
			ВходящийКонтекст.Вставить("ИмяФайла", Результат.ИмяФайла);
			ВходящийКонтекст.Вставить("ПолучательРезультата", "ИмяФайлаПодписи");
			
			Алгоритм = ВходящиеПараметры[4];
			
			ОповещениеПоиска = Новый ОписаниеОповещения(
			"ПодписатьПослеТрансформацииМассиваСертификатов", ЭтотОбъект, ВходящийКонтекст);
			
			СертификатыДляПоиска = Новый Массив();
			СертификатыДляПоиска.Добавить(Сертификат);
						
			НайтиСертификаты(
				ОповещениеПоиска,
				СертификатыДляПоиска,
				Ложь,
				ВходящийКонтекст.ВыводитьСообщения,
				ВходящийКонтекст.МенеджерКриптографии,
				Алгоритм,
				Ложь);
			
			Возврат;
		КонецЕсли;
		
		ПодписиВJSON = ПодписиСертификатовДокументооборотаВJSON(Сертификат);
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПодписать(
			Оповещение,
			Сертификат.СерийныйНомер, Сертификат.Поставщик, // сертификат подписанта
			ВходящиеПараметры[1], // файл данных
			Результат.ИмяФайла, // файл подписи
			ВходящиеПараметры[2].АлгоритмХеширования, // идентификатор алгоритма хеширования
			ПодписиВJSON
		);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПослеТрансформацииМассиваСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено и Результат.Сертификаты.Количество() > 0 Тогда
		
		Оповещение = ВходящийКонтекст.ОповещениеПослеОбработки;
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Сертификат = Результат.Сертификаты[0];
		
		Если ВходящиеПараметры[2] <> Неопределено Тогда
			АлгоритмХеширования = ВходящиеПараметры[2].АлгоритмХеширования;
		Иначе
			АлгоритмХеширования = КриптографияЭДКОКлиентСервер.СвойстваАлгоритма(ВходящийКонтекст.Алгоритм).АлгоритмХеширования;
		КонецЕсли;
		
		ПодписиВJSON = ПодписиСертификатовДокументооборотаВJSON(Сертификат);
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПодписать(
			Оповещение,
			Сертификат.СерийныйНомер, Сертификат.Поставщик, // сертификат подписанта
			ВходящиеПараметры[1], // файл данных
			ВходящийКонтекст.ИмяФайла, // файл подписи
			АлгоритмХеширования, // идентификатор алгоритма хеширования
			ПодписиВJSON
		);
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПодписатьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайлаПодписи", Параметры[3], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ПодписатьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"Подписать",
		ОписаниеОшибкиНеУдалосьПодписатьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПодписатьПослеПолученияДанныхОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомОблачнойПодписи", ЭтотОбъект, ВходящийКонтекст);

		МодульСервисКриптографииDSSКлиентСервер = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер");
		Алгоритм = ВходящийКонтекст.Алгоритм;
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВходящийКонтекст.Сертификат);		

		СвойствоПодписи = МодульСервисКриптографииDSSКлиентСервер.ПолучитьСвойствоПодписиГост();
		ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
		Если ТипЗнч(Алгоритм) = Тип("Структура") Тогда
			МодульСервисКриптографииDSSКлиентСервер.ПолучитьИнформациюДокументаДляПодписи(
								СвойствоПодписи, 
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ИмяФайла", "Данные документа"),
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ТипФайла", "txt"));
			ПараметрыОперации.Вставить("ПодтверждатьПринудительно", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ПодтверждатьПринудительно", Ложь));
			ПараметрыОперации.Вставить("ОжидатьВыполнения", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Алгоритм, "ОжидатьВыполнения", Ложь));
		КонецЕсли;
		
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Подписать(
			ПредварительноеОповещениеОЗавершении,
			ВходящийКонтекст.УчетнаяЗаписьОблачнойПодписи,
			РезультатВызова.ДанныеФайла,
			СвойствоПодписи,
			ВходящийКонтекст.Сертификат,
			ПараметрыОперации);
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", НСтр("ru = 'Нет файла для подписи';
																							|en = 'Нет файла для подписи'")));
			
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПодписатьПослеПодписиСервисомОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", РезультатВызова.Выполнено);
	
	Подпись = Неопределено;
	ПолучательРезультата = Неопределено;
	ИмяФайлаПодписи = Неопределено;
		
	Если РезультатВызова.Выполнено Тогда
		Подпись = РезультатВызова.Результат;
	Иначе
		Результат.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	Если Не Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда 
		Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	КонецЕсли;
	
	Алгоритм = Неопределено;
	Если НЕ Результат.Свойство("Алгоритм", Алгоритм) Тогда
		Результат.Вставить("Алгоритм", Алгоритм);
	КонецЕсли;
		
	Результат.Свойство("ПолучательРезультата", ПолучательРезультата);
	ВходящийКонтекст.Свойство("ИмяФайлаПодписи", ИмяФайлаПодписи);
	Если ЗначениеЗаполнено(ПолучательРезультата) Тогда 
		Результат.Вставить(ПолучательРезультата, Подпись);
	Иначе 
		Результат.Вставить("ФайлПодписи", Подпись);
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда 
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаПодписи) Тогда 
			Если Результат.Выполнено Тогда 
				ДД = ПолучитьИзВременногоХранилища(Подпись);
				ПоместитьВоВременноеХранилище(ДД, ИмяФайлаПодписи);
				Результат.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
			Иначе
				Результат.Вставить("ИмяФайлаПодписи", Неопределено);
			КонецЕсли;
		КонецЕсли;
		
	Иначе //Поместим результат по адресу исходных данных / запишем в новый файл
		
		Результат.Вставить("ИмяФайлаПодписи", Подпись);
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;			
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(Подпись) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(Подпись, ИсходныйФайл);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(Подпись, ИсходныйФайл);
			КонецЕсли;
			
		Иначе //Исходные данные переданы как полный путь к файлу на диске
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(Подпись) Тогда //Двоичные данные
				АдресПодписи = ПоместитьВоВременноеХранилище(Подпись, Новый УникальныйИдентификатор);
			Иначе
				АдресПодписи = Подпись;
			КонецЕсли;
			
			Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда 
				ИсходныйФайл = ".p7b";
			Иначе
				ИсходныйФайл = ИмяФайлаИлиРасширениеИлиАдрес; //Расширение нового файла или полный путь к файлу результата
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("ПодписатьПослеПодписиСервисомКриптографииПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресПодписи, ИсходныйФайл, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;							
		
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьПодпись

Процедура ПроверитьПодпись(
		ОповещениеОЗавершении,
		Сертификат,
		ИмяФайлаПодписи,
		ИмяФайлаДанных,
		ПараметрыКриптографии,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(4, Сертификат, ИмяФайлаПодписи, ИмяФайлаДанных, ПараметрыКриптографии);
	
	Если КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(Сертификат) Тогда
		
		ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПодписатьПослеПроверкиПодписиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
		
		ДвоичныеДанныеСертификата = Неопределено;
		Если Сертификат.Свойство("Сертификат") Тогда
			ДвоичныеДанныеСертификата = Сертификат.Сертификат;
		Иначе
			СертификатыДляПоиска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
			РезультатПоиска = КриптографияЭДКОСлужебныйВызовСервера.НайтиСертификатыВЗащищенномХранилищеНаСервере(
				СертификатыДляПоиска, Ложь);
			Если РезультатПоиска.Сертификаты.Количество() >= 1 И РезультатПоиска.Сертификаты[0].Свойство("Сертификат") Тогда
				ДвоичныеДанныеСертификата = РезультатПоиска.Сертификаты[0].Сертификат;
			КонецЕсли;
		КонецЕсли;
		ПараметрыПодписания = Новый Структура("Сертификат", ДвоичныеДанныеСертификата);
		
		СервисКриптографииКлиент.ПроверитьПодпись(
			ПредварительноеОповещениеОЗавершении,
			ИмяФайлаПодписи,
			ИмяФайлаДанных,
			"GOST3410",
			ПараметрыПодписания);
	
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(Сертификат) Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ИмяФайлаПодписи", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаПодписи);
		ПараметрыОповещения.Вставить("ИсходныйФайл", ИмяФайлаДанных);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьПодписатьПослеПроверкиПодписиСервисомОблачнойПодписи", ЭтотОбъект, ПараметрыОповещения);
		УчетнаяЗаписьОблачнойПодписи = Неопределено;
		Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(Сертификат, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
			Возврат;
		КонецЕсли;
		
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Сертификат);
		ДвоичныеДанныеСертификата = Неопределено;
		Если Сертификат.Свойство("Сертификат") Тогда
			ДвоичныеДанныеСертификата = Сертификат.Сертификат;
		Иначе
			СертификатыДляПоиска = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
			РезультатПоиска = КриптографияЭДКОСлужебныйВызовСервера.НайтиСертификатыОблачнойПодписи(
				СертификатыДляПоиска, Неопределено, Ложь);
			Если РезультатПоиска.Сертификаты.Количество() >= 1 И РезультатПоиска.Сертификаты[0].Свойство("Сертификат") Тогда
				ДвоичныеДанныеСертификата = РезультатПоиска.Сертификаты[0].Сертификат;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Алгоритм) Тогда
			АлгоритмаХеша = Алгоритм;
		Иначе
			СвойстваСертификата = ПолучитьМодульПодсистемы("СервисКриптографииDSSASNКлиентСервер").ПолучитьСвойстваСертификата(ДвоичныеДанныеСертификата);
			Если СвойстваСертификата.АлгоритмыХеш.Количество() > 0 Тогда
				АлгоритмаХеша = СвойстваСертификата.АлгоритмыХеш[0];
			КонецЕсли;	
		КонецЕсли;	
		
		Если АлгоритмаХеша = "GOST R 34.11-2012-256" Тогда
			АлгоритмаХеша = "GR 34.11-2012 256";
		ИначеЕсли АлгоритмаХеша = "GOST R 34.11-2012-512" Тогда
			АлгоритмаХеша = "GR 34.11-2012 512";
		КонецЕсли;
			
		ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
		ПараметрыОперации.Вставить("Сертификат", ДвоичныеДанныеСертификата);
		ПараметрыОперации.Вставить("СвойстваПроверки", ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер").ПолучитьСвойстваПроверкиПодписиХеш(АлгоритмаХеша, Истина));

		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").ПроверитьПодпись(
			ПредварительноеОповещениеОЗавершении,
			УчетнаяЗаписьОблачнойПодписи,
			ИмяФайлаПодписи,
			ИмяФайлаДанных,
			"GOST3410",
			ПараметрыОперации);
			
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, Сертификат);
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ПроверитьПодписьПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьПодписатьПослеПроверкиПодписиСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		МенеджерКриптографии = Неопределено;
		Если НЕ Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда
			Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		КонецЕсли;
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда
			Результат.Вставить("ОписаниеОшибки", КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		Если НЕ Результат.Свойство("ПодписьВалидна") Тогда
			ПодписьВалидна = Ложь;
			Если Результат.Свойство("ПодписьДействительна") Тогда
				ПодписьВалидна = Результат.ПодписьДействительна;
				Результат.Удалить("ПодписьДействительна");
			КонецЕсли;
			
			Результат.Вставить("ПодписьВалидна", ПодписьВалидна);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроверитьПодписьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПроверитьПодписьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Если ВходящиеПараметры[3] <> Неопределено Тогда
			АлгоритмХеширования = ВходящиеПараметры[3].АлгоритмХеширования;
		Иначе
			АлгоритмХеширования = КриптографияЭДКОКлиентСервер.СвойстваАлгоритма(Результат.Алгоритм).АлгоритмХеширования;
		КонецЕсли;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПроверитьПодпись(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат подписанта
			ВходящиеПараметры[2], // файл данных
			ВходящиеПараметры[1], // файл подписи
			АлгоритмХеширования // идентификатор алгоритма хеширования
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ПодписьВалидна", Результат, ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ПроверитьПодпись",
		ОписаниеОшибкиНеУдалосьПроверитьПодпись(), 
		ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ПроверитьПодписатьПослеПроверкиПодписиСервисомОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", РезультатВызова.Выполнено);
	
	Если РезультатВызова.Выполнено Тогда
		Результат.Вставить("ПодписьВалидна", РезультатВызова.Результат);
	Иначе
		Результат.Вставить("ПодписьВалидна", Ложь);
		Результат.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	ВходящийКонтекст.Свойство("МенеджерКриптографии", МенеджерКриптографии);
	Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Зашифровать

Процедура Зашифровать(
		ОповещениеОЗавершении,
		СертификатОтправителя,
		ИмяФайлаДанных,
		СертификатПолучателя,
		ПараметрыКриптографии,
		КаталогРезультатаИлиАдреса,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(5, СертификатОтправителя, ИмяФайлаДанных, СертификатПолучателя, ПараметрыКриптографии, КаталогРезультатаИлиАдреса);
	
	ТипыПодходятДляЭПСервиса = (ТипЗнч(ИмяФайлаДанных) = Тип("Строка") И КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаДанных))
		ИЛИ ТипЗнч(ИмяФайлаДанных) = Тип("ДвоичныеДанные");
	
	СертификатВЗащищенномХранилищеНаСервере = КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(СертификатПолучателя);
	
	Если СертификатВЗащищенномХранилищеНаСервере И ТипыПодходятДляЭПСервиса И
		ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно() Тогда
		
		Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("КаталогРезультатаИлиАдреса", КаталогРезультатаИлиАдреса);
		Контекст.Вставить("ИмяФайлаДанных", 			ИмяФайлаДанных);
		Контекст.Вставить("ВыводитьСоообщения", 		ВыводитьСоообщения);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияСервисомКриптографии", ЭтотОбъект, Контекст);
		
		СервисКриптографииКлиент.ЗашифроватьБлок(
			Оповещение,
			ИмяФайлаДанных,
			СертификатПолучателя);
			
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(СертификатПолучателя) 
			И ТипыПодходятДляЭПСервиса 
			И ИспользованиеОблачнойПодписиВозможно() Тогда
			
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Ложь, 
				"ОписаниеОшибки", 
				НСтр("ru = 'Сервис облачной подписи не поддерживает операцию блочного шифрования';
					|en = 'Сервис облачной подписи не поддерживает операцию блочного шифрования'")));
			
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, СертификатПолучателя);
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ЗашифроватьПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеШифрованияСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗашифрованныеДанные = Неопределено;
		Результат.Свойство("ЗашифрованныеДанные", ЗашифрованныеДанные); //Адрес в хранилище или структура
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда
			Результат.Вставить("ОписаниеОшибки", КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		МенеджерКриптографии = Неопределено;
		Если НЕ Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда
			Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		КонецЕсли;
		
		Если ЗашифрованныеДанные <> Неопределено И ТипЗнч(ЗашифрованныеДанные) <> Тип("Структура")
			И ТипЗнч(ЗашифрованныеДанные) <> Тип("ФиксированнаяСтруктура") Тогда
			
			ЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ЗашифрованныеДанные);
		КонецЕсли;
		
		Если ЗашифрованныеДанные <> Неопределено Тогда
			СписокДанныхИАдресов = Новый Массив;
			
			ДанныеИАдресЗашифрованногоФайла = Новый Структура("Данные, Адрес",
				ЗашифрованныеДанные.encrypted_data, ВходящийКонтекст.КаталогРезультатаИлиАдреса.ЗашифрованныйФайл);
			СписокДанныхИАдресов.Добавить(ДанныеИАдресЗашифрованногоФайла);
			
			ДанныеИАдресПубличногоКлючаОтправителя = Новый Структура("Данные, Адрес",
				ЗашифрованныеДанные.ephemeral_key, ВходящийКонтекст.КаталогРезультатаИлиАдреса.ПубличныйКлючОтправителя);
			СписокДанныхИАдресов.Добавить(ДанныеИАдресПубличногоКлючаОтправителя);
			
			ДанныеИАдресСессионногоКлюча = Новый Структура("Данные, Адрес",
				ЗашифрованныеДанные.session_key, ВходящийКонтекст.КаталогРезультатаИлиАдреса.СессионныйКлюч);
			СписокДанныхИАдресов.Добавить(ДанныеИАдресСессионногоКлюча);
			
			ДанныеИАдресИнициализационногоВектора = Новый Структура("Данные, Адрес",
				ЗашифрованныеДанные.iv_data, ВходящийКонтекст.КаталогРезультатаИлиАдреса.ИнициализационныйВектор);
			СписокДанныхИАдресов.Добавить(ДанныеИАдресИнициализационногоВектора);
			
			СписокАдресов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ПоместитьДанныеВоВременноеХранилище(СписокДанныхИАдресов);
			
			КаталогРезультатаИлиАдреса = Новый Структура;
			КаталогРезультатаИлиАдреса.Вставить("ЗашифрованныйФайл", 		СписокАдресов[0]);
			КаталогРезультатаИлиАдреса.Вставить("ПубличныйКлючОтправителя", СписокАдресов[1]);
			КаталогРезультатаИлиАдреса.Вставить("СессионныйКлюч", 			СписокАдресов[2]);
			КаталогРезультатаИлиАдреса.Вставить("ИнициализационныйВектор", 	СписокАдресов[3]);
			
			Результат.Вставить("КаталогРезультатаИлиАдреса", КаталогРезультатаИлиАдреса);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ЗашифроватьПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		Оповещение = Новый ОписаниеОповещения("ЗашифроватьПослеПолученияИмениКаталога", ЭтотОбъект, ВходящийКонтекст);
		Если ЗначениеЗаполнено(ВходящийКонтекст.ВходящиеПараметры[4]) Тогда // Каталог результата
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяКаталога", ВходящийКонтекст.ВходящиеПараметры[4], ВходящийКонтекст));
		Иначе
			ОперацииСФайламиЭДКОКлиент.СоздатьКаталогНаКлиенте(Оповещение, ВходящийКонтекст.ВыводитьСообщения);
		КонецЕсли;	
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеПолученияИмениКаталога(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ЗашифроватьПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ЗашифроватьПриОшибкеВыполнения", ЭтотОбъект);
			
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;	
		
		Если ЗначениеЗаполнено(ВходящиеПараметры[0]) Тогда
			СертификатОтправителяСерийныйНомер = ВходящиеПараметры[0].СерийныйНомер;
			СертификатОтправителяПоставщик = ВходящиеПараметры[0].Поставщик;	
		Иначе
			СертификатОтправителяСерийныйНомер = "";
			СертификатОтправителяПоставщик = "";
		КонецЕсли;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовЗашифровать(
			Оповещение,
			ВходящиеПараметры[1], // исходный файл
			СертификатОтправителяСерийныйНомер, СертификатОтправителяПоставщик, // сертификат отправителя
			ВходящиеПараметры[2].СерийныйНомер, ВходящиеПараметры[2].Поставщик, // сертификат получателя
			Результат.ИмяКаталога, // каталог с результатом
			ВходящиеПараметры[3].АлгоритмШифрования, 
			ВходящиеПараметры[3].АлгоритмКлюча,
			ВходящиеПараметры[3].Режим
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗашифроватьПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "КаталогРезультатаИлиАдреса", Параметры[5], ВходящийКонтекст));
	
КонецПроцедуры

Процедура ЗашифроватьПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"Зашифровать",
		ОписаниеОшибкиНеУдалосьЗашифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифроватьФайл

Процедура РасшифроватьФайл(
		ОповещениеОЗавершении,
		СертификатПолучателя,
		ИмяЗашифрованногоФайла,
		ПубличныйКлючОтправителя,
		СессионныйКлюч,
		ИнициализационныйВектор,
		ИмяФайлаИлиРасширениеИлиАдрес,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		Алгоритм) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(6, СертификатПолучателя, ИмяЗашифрованногоФайла, ПубличныйКлючОтправителя, СессионныйКлюч, ИнициализационныйВектор, ИмяФайлаИлиРасширениеИлиАдрес);
	
	СертификатВХранилище = КриптографияЭДКОКлиентСервер.СертификатВЗащищенномХранилищеНаСервере(СертификатПолучателя);
	Если СертификатПолучателя = Неопределено ИЛИ СертификатВХранилище Тогда
		Если НЕ КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяЗашифрованногоФайла) И ТипЗнч(ИмяЗашифрованногоФайла) <> Тип("ДвоичныеДанные") Тогда
			ОшибкаТекстом = НСтр("ru = 'Для электронной подписи из программы данные могут быть переданы как двоичные данные или как адрес в хранилище';
								|en = 'Для электронной подписи из программы данные могут быть переданы как двоичные данные или как адрес в хранилище'");
			
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОшибкаТекстом));
			
			Возврат;
		КонецЕсли;
		
		ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", 	ИмяФайлаИлиРасширениеИлиАдрес);
		ПараметрыОповещения.Вставить("ВыводитьСоообщения", 				ВыводитьСоообщения);
		
		Оповещение = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиСервисомКриптографии", ЭтотОбъект, ПараметрыОповещения);
		
		ДанныеПубличногоКлючаОтправителя 	= ПолучитьИзВременногоХранилища(ПубличныйКлючОтправителя);
		ДанныеСессионногоКлюча 				= ПолучитьИзВременногоХранилища(СессионныйКлюч);
		ДанныеИнициализационногоВектора 	= ПолучитьИзВременногоХранилища(ИнициализационныйВектор);
		
		КлючеваяИнформация = Новый Структура;
		КлючеваяИнформация.Вставить("ephemeral_key", 	ДанныеПубличногоКлючаОтправителя);
		КлючеваяИнформация.Вставить("session_key", 		ДанныеСессионногоКлюча);
		КлючеваяИнформация.Вставить("iv_data", 			ДанныеИнициализационногоВектора);
		
		ПараметрыШифрования = Новый Структура;
		ПараметрыШифрования.Вставить("ОчиститьДополняющиеБайты", Ложь);
		
		Если СертификатВХранилище Тогда
			ПараметрыШифрования = СвойстваРасшифрованияПодписанияСертификата(СертификатПолучателя, ПараметрыШифрования);
		КонецЕсли;	
		
		СервисКриптографииКлиент.РасшифроватьБлок(
			Оповещение,
			ИмяЗашифрованногоФайла,
			СертификатПолучателя,
			КлючеваяИнформация,
			ПараметрыШифрования);
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.СертификатОблачнойПодписи(СертификатПолучателя) 
			И ИспользованиеОблачнойПодписиВозможно() Тогда
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Ложь, 
				"ОписаниеОшибки", 
				НСтр("ru = 'Сервис облачной подписи не поддерживает операцию блочного расшифрования';
					|en = 'Сервис облачной подписи не поддерживает операцию блочного расшифрования'")));
				
	Иначе
		ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм, Сертификат", Алгоритм, СертификатПолучателя);
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "РасшифроватьФайлПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьПослеРасшифровкиСервисомКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат)=Тип("Структура") Тогда
		РасшифрованныеДанные = Неопределено;
		Результат.Свойство("РасшифрованныеДанные", РасшифрованныеДанные);
		
		Если Результат.Свойство("ИнформацияОбОшибке") Тогда 
			Результат.Вставить("ОписаниеОшибки", КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(Результат.ИнформацияОбОшибке));
			Результат.Удалить("ИнформацияОбОшибке");
		КонецЕсли;
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		Если РасшифрованныеДанные <> Неопределено Тогда
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда
				РасшифрованныйФайл = КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные,
					ИмяФайлаИлиРасширениеИлиАдрес,, Истина);
			Иначе //Двоичные данные
				РасшифрованныйФайл = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Вставить("РасшифрованныйФайл", РасшифрованныйФайл);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ПолучитьИмяФайла(ВходящийКонтекст.ВходящиеПараметры[5], ВходящийКонтекст, "РасшифроватьФайлПослеПолученияИмениФайла");
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеПолученияИмениФайла(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("ИмяФайлаРезультата", Результат.ИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения(
			"РасшифроватьФайлПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"РасшифроватьФайлПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовРасшифроватьФайл(
			Оповещение,
			ВходящиеПараметры[0].СерийныйНомер, ВходящиеПараметры[0].Поставщик, // сертификат получателя
			ВходящиеПараметры[1], // зашифрованный файл
			ВходящийКонтекст.ИмяФайлаРезультата, // расшифрованны файл
			ВходящиеПараметры[2], // файл публичного ключа
			ВходящиеПараметры[3], // файл сессионного ключа
			ВходящиеПараметры[4] // файл инициализационного вектора
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьФайлПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "РасшифрованныйФайл", ВходящийКонтекст.ИмяФайлаРезультата, ВходящийКонтекст));
	
КонецПроцедуры

Процедура РасшифроватьФайлПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"РасшифрованныйФайл",
		ОписаниеОшибкиНеУдалосьРасшифроватьФайл(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ХешироватьДанные

Процедура ХешироватьДанные(
		ОповещениеОЗавершении,
		МестоХраненияКлюча,
		ИмяФайлаДанных,
		ПараметрыКриптографии,
		ВыводитьСоообщения,
		МенеджерКриптографии,
		АлгоритмИлиСертификат,
		ПеревернутьБайтыХеша = Ложь) Экспорт
	
	ВходящиеПараметры = ПараметрыВМассив(3, ИмяФайлаДанных, ПараметрыКриптографии, ПеревернутьБайтыХеша);
	
	Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
		
		ПараметрыОповещения = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ПараметрыОповещения.Вставить("ПеревернутьБайтыХеша", ПеревернутьБайтыХеша);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ХешироватьДанныеСервисПередЗавершением",
			ЭтотОбъект, ПараметрыОповещения);
		
		АлгоритмХешированияВМоделиСервиса = КриптографияЭДКОКлиентСервер.СвойстваАлгоритма(
			АлгоритмИлиСертификат).АлгоритмХешированияВМоделиСервиса;
		ПараметрыОповещения.Вставить("АлгоритмХешированияВМоделиСервиса", АлгоритмХешированияВМоделиСервиса);
		
		СервисКриптографииКлиент.ХешированиеДанных(
			ПредварительноеОповещениеОЗавершении,
			ИмяФайлаДанных,
			АлгоритмХешированияВМоделиСервиса);
		
	ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
		
	 	УчетнаяЗаписьОблачнойПодписи = Неопределено;
		Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(МестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
			Возврат;
		КонецЕсли;
		
		АлгоритмХешированияОблачнойПодписи = КриптографияЭДКОКлиентСервер.СвойстваАлгоритма(
			АлгоритмИлиСертификат).АлгоритмХешированияОблачнойПодписи;
			
		ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
		ПараметрыОперации.Вставить("ИнвертироватьПолубайты", АлгоритмХешированияОблачнойПодписи <> "GOST R 34.11-94" И НЕ ПеревернутьБайтыХеша);

		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыОповещения.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ПараметрыОповещения.Вставить("АлгоритмХешированияОблачнойПодписи", АлгоритмХешированияОблачнойПодписи);
		ПараметрыОповещения.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
		ПараметрыОповещения.Вставить("ПараметрыОперации", ПараметрыОперации);
		
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ХешироватьДанныеПослеПолученияДанныхФайлаОблачнойПодписи",
			ЭтотОбъект, ПараметрыОповещения);
			
		ПроверитьДанныеДляОперацииОблачнойПодписи(ПредварительноеОповещениеОЗавершении, ИмяФайлаДанных, "Хеширование");
		
	Иначе
			
		Если ТипЗнч(АлгоритмИлиСертификат) = Тип("Структура") ИЛИ ТипЗнч(АлгоритмИлиСертификат) = Тип("ФиксированнаяСтруктура") Тогда
			Сертификат = АлгоритмИлиСертификат;
			ПараметрыОпределенияАлгоритма = Новый Структура("Сертификат", Сертификат);
			
		Иначе
			Алгоритм = ?(АлгоритмИлиСертификат = Неопределено, КриптографияЭДКОКлиентСервер.АлгоритмПоУмолчанию(), АлгоритмИлиСертификат);
			ПараметрыОпределенияАлгоритма = Новый Структура("Алгоритм", Алгоритм);
		КонецЕсли;
		
		ПредварительноСоздатьМенеджерКриптографии(
			ОповещениеОЗавершении, "ХешироватьДанныеПослеСозданияМенеджераКриптографии",
			ВходящиеПараметры, ВыводитьСоообщения, МенеджерКриптографии, ПараметрыОпределенияАлгоритма);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ХешироватьДанныеСервисПередЗавершением(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Хеш = Неопределено;
		
		МенеджерКриптографии = Неопределено;
		Если Не Результат.Свойство("МенеджерКриптографии", МенеджерКриптографии) Тогда
			Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		КонецЕсли;
		
		Результат.Свойство("Хеш", Хеш);
		Если ТипЗнч(Хеш) = Тип("ДвоичныеДанные") Тогда
			Хеш = ПолучитьHexСтрокуИзДвоичныхДанных(Хеш);
			
			Если ВходящийКонтекст.АлгоритмХешированияВМоделиСервиса <> "GOST R 34.11-94"
				И НЕ ВходящийКонтекст.ПеревернутьБайтыХеша Тогда
				
				// инвертировать полубайты самостоятельно
				ПоследнийПолубайт = "";
				Для ИндексСимвола = 1 По СтрДлина(Хеш) Цикл
					Если ИндексСимвола % 2 = 0 Тогда
						Хеш = Лев(Хеш, ИндексСимвола - 2) + Сред(Хеш, ИндексСимвола, 1) + ПоследнийПолубайт
							+ Сред(Хеш, ИндексСимвола + 1);
						
					Иначе
						ПоследнийПолубайт = Сред(Хеш, ИндексСимвола, 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Результат.Выполнено Тогда
			ВыполнитьОбработкуОповещения(
				ВходящийКонтекст.ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибкиНеУдалосьПолучитьХешФайла()));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, 
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Результат.Выполнено, "Хеш", Хеш, ВходящийКонтекст));
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"ХешироватьДанныеПослеПолученияФайлаДляХеширования", ЭтотОбъект, ВходящийКонтекст);
		
		Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ВходящийКонтекст.ВходящиеПараметры[0]) Тогда
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(
				Оповещение, ВходящийКонтекст.ВходящиеПараметры[0],, ВходящийКонтекст.ВыводитьСообщения);
		Иначе
			ВыполнитьОбработкуОповещения(
				Оповещение,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ВходящийКонтекст.ВходящиеПараметры[0]));
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеПолученияФайлаДляХеширования(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ХешироватьДанныеПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ХешироватьДанныеПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящиеПараметры = ВходящийКонтекст.ВходящиеПараметры;
		
		Если ВходящиеПараметры[1] <> Неопределено Тогда
			АлгоритмХеширования = ВходящиеПараметры[1].АлгоритмХеширования;
		Иначе
			АлгоритмХеширования = КриптографияЭДКОКлиентСервер.СвойстваАлгоритма(ВходящийКонтекст.Алгоритм).АлгоритмХеширования;
		КонецЕсли;
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовХешироватьДанные(
			Оповещение,
			Результат.ИмяФайла, // файл данных
			АлгоритмХеширования // идентификатор алгоритма хеширования
			);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.ВходящиеПараметры[2] Тогда
		Результат = ПеревернутьБайты(Результат);
	КонецЕсли;
	РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Хеш", Результат, ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		РезультатВыполнения);
	
КонецПроцедуры

Процедура ХешироватьДанныеПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ХешироватьДанные",
		ОписаниеОшибкиНеУдалосьПолучитьХешФайла(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура ХешироватьДанныеПослеПолученияДанныхФайлаОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПредварительноеОповещениеОЗавершении = Новый ОписаниеОповещения("ХешироватьДанныеОблачнаяПодписьПередЗавершением",
			ЭтотОбъект, ВходящийКонтекст);
			
		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").ХешированиеДанных(
			ПредварительноеОповещениеОЗавершении,
			ВходящийКонтекст.УчетнаяЗаписьОблачнойПодписи,
			РезультатВызова.ДанныеФайла,
			ВходящийКонтекст.АлгоритмХешированияОблачнойПодписи,
			ВходящийКонтекст.ПараметрыОперации);
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", НСтр("ru = 'Нет файла для хеширования';
																							|en = 'Нет файла для хеширования'")));
			
	КонецЕсли;		
	
КонецПроцедуры

Процедура ХешироватьДанныеОблачнаяПодписьПередЗавершением(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		Хеш = РезультатВызова.Результат;
		Если ЭтоАдресВременногоХранилища(Хеш) Тогда
			Хеш = ПолучитьИзВременногоХранилища(Хеш);
		КонецЕсли;
		
		Если ТипЗнч(Хеш) = Тип("ДвоичныеДанные") Тогда
			Хеш = ПолучитьHexСтрокуИзДвоичныхДанных(Хеш);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Хеш", Хеш, ВходящийКонтекст));
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", РезультатВызова.Ошибка, ВходящийКонтекст));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьУстройстваUSB

Процедура ПолучитьУстройстваUSB(ОповещениеОЗавершении) Экспорт
		
	Параметры = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	ПутьМодуляКриптографии = "";
	Если ЭтоLinux Тогда
		ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.';
									|en = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.'");
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, Параметры));
			Возврат;
		КонецЕсли;
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(, ЭтоLinux,, ПутьМодуляКриптографии);
		
	Иначе
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьУстройстваUSBПослеСозданияМенеджераКриптографии", ЭтотОбъект, Параметры);
	
	СоздатьМенеджерКриптографии2(
		Оповещение,
		Криптопровайдер,
		Параметры);
	
КонецПроцедуры

Процедура ПолучитьУстройстваUSBПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьУстройстваUSBПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"ПолучитьУстройстваUSBПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовПолучитьУстройстваUSB(
			Оповещение);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьУстройстваUSBПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = ?(ЗначениеЗаполнено(Результат), ОбщегоНазначенияЭДКОСлужебныйВызовСервера.JsonВСтруктура(Результат),
		Новый Массив);
	
	РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "УстройстваUSB", Результат,
		ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		РезультатВыполнения);
	
КонецПроцедуры

Процедура ПолучитьУстройстваUSBПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ПолучитьУстройстваUSB",
		ОписаниеОшибкиНеУдалосьПолучитьУстройстваUSB(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьОбработчикСобытия

Процедура УстановитьОбработчикСобытия(ОповещениеОЗавершении, Фильтр) Экспорт
		
	Параметры = Новый Структура("Фильтр, ОповещениеОЗавершении", Фильтр, ОповещениеОЗавершении);
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	ПутьМодуляКриптографии = "";
	Если ЭтоLinux Тогда
		ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.';
									|en = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.'");
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, Параметры));
			Возврат;
		КонецЕсли;
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(, ЭтоLinux,, ПутьМодуляКриптографии);
		
	Иначе
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОбработчикСобытияПослеСозданияМенеджераКриптографии", ЭтотОбъект, Параметры);
	
	СоздатьМенеджерКриптографии2(
		Оповещение,
		Криптопровайдер,
		Параметры);
	
КонецПроцедуры

Процедура УстановитьОбработчикСобытияПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьОбработчикСобытияПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"УстановитьОбработчикСобытияПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовУстановитьОбработчикСобытия(
			Оповещение,
			ВходящийКонтекст.Фильтр);
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбработчикСобытияПослеВыполнения(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина,,, ВходящийКонтекст);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		РезультатВыполнения);
	
КонецПроцедуры

Процедура УстановитьОбработчикСобытияПриОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"УстановитьОбработчикСобытия",
		ОписаниеОшибкиНеУдалосьУстановитьОбработчикСобытия(), ИнформацияОбОшибке);
	
КонецПроцедуры

Процедура УстановитьОбработчикСобытия_ПослеСозданияМенеджера(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьОбработчикСобытияПослеВыполнения", ЭтотОбъект, ВходящийКонтекст,
			"УстановитьОбработчикСобытияПриОшибкеВыполнения", ЭтотОбъект);
		
		ВходящийКонтекст.МенеджерКриптографии.НачатьВызовУстановитьОбработчикСобытия(
			Оповещение,
			ВходящийКонтекст.Фильтр); // фильтр
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпределитьАлгоритм

Процедура ОпределитьАлгоритм(
		ОповещениеОЗавершении,
		МестоХраненияКлюча,
		ПараметрыОпределенияАлгоритма,
		ВыводитьСообщения = Истина) Экспорт
	
	ПараметрыВызова = СоздатьПараметрыОпределенияАлгоритма();
	Если ПараметрыОпределенияАлгоритма <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыВызова, ПараметрыОпределенияАлгоритма);
	КонецЕсли;
	
	Если ПараметрыВызова.Алгоритм <> Неопределено ИЛИ ПараметрыВызова.Криптосообщение = Неопределено
		И ПараметрыВызова.Сертификат = Неопределено Тогда
		
		Алгоритм = ?(ПараметрыВызова.Алгоритм <> Неопределено, ПараметрыВызова.Алгоритм, "");
		РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Алгоритм", Алгоритм);
		РезультатВыполнения.Вставить("ТипКриптопровайдераВладельца", ПараметрыВызова.ТипКриптопровайдераВладельца);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		
	ИначеЕсли ПараметрыВызова.Криптосообщение <> Неопределено Тогда
		ЭтоИмяФайла = НЕ КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ПараметрыВызова.Криптосообщение)
			И ТипЗнч(ПараметрыВызова.Криптосообщение) <> Тип("ДвоичныеДанные");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("МестоХраненияКлюча", 			МестоХраненияКлюча);
		ДополнительныеПараметры.Вставить("ЭтоИмяФайла", 				ЭтоИмяФайла);
		ДополнительныеПараметры.Вставить("ТипКриптопровайдераВладельца",ПараметрыВызова.ТипКриптопровайдераВладельца);
		Оповещение = Новый ОписаниеОповещения("ОпределитьАлгоритмПослеЧтенияФайлаКриптосообщения", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ЭтоИмяФайла Тогда
			ОперацииСФайламиЭДКОКлиент.ФайлВBase64(Оповещение, ПараметрыВызова.Криптосообщение, ВыводитьСообщения);
		Иначе
			РезультатВыполнения = Новый Структура("Выполнено, Адрес", Истина, ПараметрыВызова.Криптосообщение);
			ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
		КонецЕсли;
		
	Иначе
		ВозможенФорматBase64 = (ТипЗнч(ПараметрыВызова.Сертификат) = Тип("Строка"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 	ОповещениеОЗавершении);
		ДополнительныеПараметры.Вставить("МестоХраненияКлюча", 		МестоХраненияКлюча);
		ДополнительныеПараметры.Вставить("ВозможенФорматBase64", 	ВозможенФорматBase64);
		Оповещение = Новый ОписаниеОповещения("ОпределитьАлгоритмПослеЭкспортаСертификата", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ТипЗнч(ПараметрыВызова.Сертификат) = Тип("Строка") Тогда
			ОперацииСФайламиЭДКОКлиент.ФайлВBase64(Оповещение, ПараметрыВызова.Сертификат, ВыводитьСообщения);
			
		ИначеЕсли ПараметрыВызова.Сертификат.Свойство("Сертификат")
			И ТипЗнч(ПараметрыВызова.Сертификат.Сертификат) = Тип("Строка") Тогда
			
			РезультатВыполнения = Новый Структура("Выполнено, СтрокаBase64", Истина, ПараметрыВызова.Сертификат.Сертификат);
			ВыполнитьОбработкуОповещения(Оповещение, РезультатВыполнения);
			
		Иначе
			КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(Оповещение, ПараметрыВызова.Сертификат, ВыводитьСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьАлгоритмПослеЧтенияФайлаКриптосообщения(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении 				= ДополнительныеПараметры.ОповещениеОЗавершении;
	МестоХраненияКлюча 					= ДополнительныеПараметры.МестоХраненияКлюча;
	ЭтоИмяФайла 						= ДополнительныеПараметры.ЭтоИмяФайла;
	ТипКриптопровайдераВладельца 		= ДополнительныеПараметры.ТипКриптопровайдераВладельца;
	
	Если Результат.Выполнено Тогда
		Настройки = Новый Структура;
		Настройки.Вставить("ПрочитатьПодписанныеДанные", 			Ложь);
		Настройки.Вставить("ПрочитатьИздателяИСерийныйНомер", 		Ложь);
		Настройки.Вставить("ПрочитатьАлгоритмПубличногоКлюча", 		Истина);
		Настройки.Вставить("МестоХраненияКлюча", 	МестоХраненияКлюча);
		Настройки.Вставить("ЭтоСтрокаBase64", 						ЭтоИмяФайла);
		Настройки.Вставить("ВозвращатьИсключения", 					Ложь);
		СвойстваКриптосообщения = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(
			?(ЭтоИмяФайла, Результат.СтрокаBase64, Результат.Адрес), Настройки);
		
		АлгоритмКриптосообщения = Неопределено;
		Если СвойстваКриптосообщения.Тип = "EnvelopedData" И СвойстваКриптосообщения.Получатели.Количество() >= 1 Тогда
			АлгоритмКриптосообщения = СвойстваКриптосообщения.Получатели[0].АлгоритмПубличногоКлюча;
		ИначеЕсли СвойстваКриптосообщения.Тип = "SignedData" И СвойстваКриптосообщения.Подписанты.Количество() >= 1 Тогда
			АлгоритмКриптосообщения = СвойстваКриптосообщения.Подписанты[0].АлгоритмПодписи;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АлгоритмКриптосообщения) Тогда
			РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Алгоритм",
				АлгоритмКриптосообщения);
			РезультатВыполнения.Вставить("ТипКриптопровайдераВладельца", ТипКриптопровайдераВладельца);
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		Иначе
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьОпределитьКриптографическийАлгоритм();
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьАлгоритмПослеЭкспортаСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении 	= ДополнительныеПараметры.ОповещениеОЗавершении;
	МестоХраненияКлюча 		= ДополнительныеПараметры.МестоХраненияКлюча;
	ВозможенФорматBase64 	= ДополнительныеПараметры.ВозможенФорматBase64;
	
	Если Результат.Выполнено Тогда
		
		Если ТипЗнч(МестоХраненияКлюча) = Тип("Булево")
			И ТипЗнч(ВозможенФорматBase64) = Тип("Булево")
			И ТипЗнч(Результат.СтрокаBase64) = Тип("Строка") Тогда
			
			СвойстваСертификата = КриптографияЭДКОСлужебныйКлиентПовтИсп.ПолучитьСвойстваСертификата(
				Результат.СтрокаBase64, 
				МестоХраненияКлюча, 
				ВозможенФорматBase64);
			
		Иначе
			
			Настройки = Новый Структура;
			Настройки.Вставить("МестоХраненияКлюча", 	МестоХраненияКлюча);
			Настройки.Вставить("ЭтоСтрокаBase64", 		Истина);
			Настройки.Вставить("ВозможенФорматBase64", 	ВозможенФорматBase64);
			Настройки.Вставить("ВозвращатьИсключения", 	Ложь);
			
			СвойстваСертификата = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(
				Результат.СтрокаBase64,
				Настройки);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвойстваСертификата.АлгоритмПубличногоКлюча) Тогда
			РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "Алгоритм",
				СвойстваСертификата.АлгоритмПубличногоКлюча);
			РезультатВыполнения.Вставить("ТипКриптопровайдераВладельца", СвойстваСертификата.ТипКриптопровайдераВладельца);
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		Иначе
			ОписаниеОшибки = ОписаниеОшибкиНеУдалосьОпределитьКриптографическийАлгоритм();
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки));
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОшибок

Функция ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографии()

	Возврат НСтр("ru = 'Не удалось подключить внешнюю компоненту для работы с криптографией.';
				|en = 'Не удалось подключить внешнюю компоненту для работы с криптографией.'");

КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьОбъектКриптографии()
	
	Возврат НСтр("ru = 'Не удалось создать объект для работы с криптографией.
					   |Попробуйте временно отключить антивирус, проверьте права.
					   |В 1С-Отчетности, разделе ""Настройки"", по ссылке ""Прочие настройки обмена"" проверьте, что внешняя компонента установлена.';
					   |en = 'Не удалось создать объект для работы с криптографией.
					   |Попробуйте временно отключить антивирус, проверьте права.
					   |В 1С-Отчетности, разделе ""Настройки"", по ссылке ""Прочие настройки обмена"" проверьте, что внешняя компонента установлена.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии() Экспорт
	
	Возврат НСтр("ru = 'Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.';
				|en = 'Не удалось создать объект для работы с криптографией. В системе не обнаружен криптопровайдер.'");
	
КонецФункции

Функция ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии()
	
	Возврат НСтр("ru = 'Ошибка внешней компоненты для работы с криптографией.';
				|en = 'Ошибка внешней компоненты для работы с криптографией.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСформироватьЗапросНаСертификат()
	
	Возврат НСтр("ru = 'Криптографическая ошибка: не удалось сформировать запрос на сертификат для контролирующих органов.';
				|en = 'Криптографическая ошибка: не удалось сформировать запрос на сертификат для контролирующих органов.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьСоздатьКонтейнерИЗапросНаСертификат()
	
	Возврат НСтр("ru = 'Криптографическая ошибка: не удалось сформировать контейнер и запрос на сертификат для контролирующих органов.';
				|en = 'Криптографическая ошибка: не удалось сформировать контейнер и запрос на сертификат для контролирующих органов.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПривязатьСертификатКЗакрытомуКлючу()
	
	Возврат НСтр("ru = 'Не удалось привязать сертификат к закрытому ключу.
                  |Возможно выбран не верный закрытый ключ.';
                  |en = 'Не удалось привязать сертификат к закрытому ключу.
                  |Возможно выбран не верный закрытый ключ.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьУстановитьЛичныйСертификат()
	
	Возврат НСтр("ru = 'Не удалось установить личный сертификат.';
				|en = 'Не удалось установить личный сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьСертификатИзКонтейнера()
	
	Возврат НСтр("ru = 'Не удалось получить сертификат из контейнера.';
				|en = 'Не удалось получить сертификат из контейнера.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьВыгрузитьСертификат()
	
	Возврат НСтр("ru = 'Не удалось выгрузить сертификат.';
				|en = 'Не удалось выгрузить сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьИмпортироватьСертификат()
	
	Возврат НСтр("ru = 'Не удалось зарегистрировать сертификат в системном хранилище.';
				|en = 'Не удалось зарегистрировать сертификат в системном хранилище.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодписатьФайл()

	Возврат НСтр("ru = 'Не удалось подписать файл по причине:
                  |%1';
                  |en = 'Не удалось подписать файл по причине:
                  |%1'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПроверитьПодпись()

	Возврат КриптографияЭДКОКлиентСервер.ОписаниеОшибкиНеУдалосьПроверитьПодпись();
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьЗашифроватьФайл()

	Возврат НСтр("ru = 'Не удалось зашифровать файл.';
				|en = 'Не удалось зашифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодписатьИЗашифроватьФайл()

	Возврат НСтр("ru = 'Не удалось подписать и зашифровать файл.';
				|en = 'Не удалось подписать и зашифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьРасшифроватьФайл()

	Возврат НСтр("ru = 'Не удалось расшифровать файл.';
				|en = 'Не удалось расшифровать файл.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьСвойстваПодписи()

	Возврат НСтр("ru = 'Не удалось получить свойства подписи.';
				|en = 'Не удалось получить свойства подписи.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьХешФайла()
	
	Возврат НСтр("ru = 'Не удалось получить хеш файла.';
				|en = 'Не удалось получить хеш файла.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьНайтиСертификат(Сертификат = Неопределено)

	ПредставлениеСертификата = "";
	Если ЗначениеЗаполнено(Сертификат) Тогда
		Если ЗаполненОтпечатокСертификата(Сертификат) Тогда
			ПредставлениеСертификата = Сертификат.Отпечаток;
		ИначеЕсли ЗаполненСерийныйНомерСертификата(Сертификат) Тогда
			ПредставлениеСертификата = Сертификат.СерийныйНомер + " : " + Сертификат.Поставщик;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось найти сертификат <%1>  в системном хранилище.';
							|en = 'Не удалось найти сертификат <%1>  в системном хранилище.'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ПредставлениеСертификата);
	
КонецФункции

Функция ОписаниеОшибкиНеВведенПарольДоступаКЗакрытомуКлючу()

	Возврат НСтр("ru = 'Операция прервана: требуется ввести пароль доступа к закрытому ключу!';
				|en = 'Операция прервана: требуется ввести пароль доступа к закрытому ключу!'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьОткрытьСертификат()

	Возврат НСтр("ru = 'Не удалось открыть сертификат.';
				|en = 'Не удалось открыть сертификат.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьОпределитьКриптографическийАлгоритм()
	
	Возврат НСтр("ru = 'Не удалось определить криптографический алгоритм.';
				|en = 'Не удалось определить криптографический алгоритм.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПодключитьВнешнююКомпонентуКриптографииНеНастроенПуть()
	
	Возврат НСтр("ru = 'Не удалось подключить внешнюю компоненту для работы с криптографией: не настроен путь к программе криптографии в настройках электронной подписи и шифрования.';
				|en = 'Не удалось подключить внешнюю компоненту для работы с криптографией: не настроен путь к программе криптографии в настройках электронной подписи и шифрования.'");
	
КонецФункции

Функция ОписаниеОшибкиСертификатНеаккредитованногоУЦ()
	
	Возврат НСтр("ru = 'Сертификат издан удостоверяющим центром, который не прошел аккредитацию по новым правилам.';
				|en = 'Сертификат издан удостоверяющим центром, который не прошел аккредитацию по новым правилам.'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьУстройстваUSB()
	
	Возврат НСтр("ru = 'Не удалось получить USB устройства';
				|en = 'Не удалось получить USB устройства'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьПолучитьУстановленныеПрограммы()
	
	Возврат НСтр("ru = 'Не удалось получить установленные программы';
				|en = 'Не удалось получить установленные программы'");
	
КонецФункции

Функция ОписаниеОшибкиНеУдалосьУстановитьОбработчикСобытия()
	
	Возврат НСтр("ru = 'Не удалось установить обработчик события';
				|en = 'Не удалось установить обработчик события'");
	
КонецФункции

#КонецОбласти

Функция МассивВСтрокуСРазделителями(ИсходныйМассив)
	
	СтроксСРазделителями = "";
	Для Инд = 1 По ИсходныйМассив.Количество() Цикл
		СтроксСРазделителями = СтроксСРазделителями + ИсходныйМассив[Инд - 1] + Символы.ПС;
	КонецЦикла;
	Возврат СокрЛП(СтроксСРазделителями);
	
КонецФункции

Функция ЗаменитьНедопустимыеСимволы(СтрокаДляОбработки)
	
	СтрокаПослеОбработки = СтрЗаменить(СтрокаДляОбработки, "\", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "/", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "*", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "<", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, ">", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "|", " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, ":", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, """", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, "?", "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.ВК, "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.ПС, " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.Таб, " ");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символы.НПП, " ");
	// замена символов кавычек
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(171), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(187), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8195), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8194), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8216), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8218), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8217), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8220), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8222), "");
	СтрокаПослеОбработки = СтрЗаменить(СтрокаПослеОбработки, Символ(8221), "");
	
	Возврат СтрокаПослеОбработки;
	
КонецФункции

Функция ПолучитьСписокХранилищСертификатов(ХранилищеСертификатов)
	
	СписокЛокальныхХранилищСертификатов = Новый Массив;
	СписокЗащищенныхХранилищСертификатовНаСервере = Новый Массив;
	Если Не ЗначениеЗаполнено(ХранилищеСертификатов) Тогда
		СписокЛокальныхХранилищСертификатов.Добавить("MY");
		СписокЛокальныхХранилищСертификатов.Добавить("AddressBook");
		СписокЛокальныхХранилищСертификатов.Добавить("CA");
		СписокЛокальныхХранилищСертификатов.Добавить("ROOT");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("MY");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("AddressBook");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("CA");
		СписокЗащищенныхХранилищСертификатовНаСервере.Добавить("ROOT");
	ИначеЕсли ТипЗнч(ХранилищеСертификатов) = Тип("Массив") Тогда
		Для Каждого Хранилище Из ХранилищеСертификатов Цикл
			Если Хранилище.ЭтоЛокальноеХранилище Тогда
				СписокЛокальныхХранилищСертификатов.Добавить(Хранилище.Хранилище);
			Иначе
				СписокЗащищенныхХранилищСертификатовНаСервере.Добавить(Хранилище.Хранилище);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ХранилищеСертификатов) = Тип("Структура") Тогда
		Если ХранилищеСертификатов.ЭтоЛокальноеХранилище Тогда
			СписокЛокальныхХранилищСертификатов.Добавить(ХранилищеСертификатов.Хранилище);
		Иначе
			СписокЗащищенныхХранилищСертификатовНаСервере.Добавить(ХранилищеСертификатов.Хранилище);
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Параметр <ХранилищеСертификатов> должен иметь тип Структура, Массив или Неопределено.';
								|en = 'Параметр <ХранилищеСертификатов> должен иметь тип Структура, Массив или Неопределено.'"));
	КонецЕсли;
	
	Результат = Новый Структура("ЛокальныеХранилища, ХранилищаНаСервере", 
		СписокЛокальныхХранилищСертификатов, СписокЗащищенныхХранилищСертификатовНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыВМассив(КоличествоПараметров, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено,
						Параметр4 = Неопределено, Параметр5 = Неопределено, Параметр6 = Неопределено, 
						Параметр7 = Неопределено, Параметр8 = Неопределено, Параметр9 = Неопределено)
						
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Параметр1);
	
	Если КоличествоПараметров > 1 Тогда
		МассивПараметров.Добавить(Параметр2);
	КонецЕсли;
	
	Если КоличествоПараметров > 2 Тогда
		МассивПараметров.Добавить(Параметр3);
	КонецЕсли;
	
	Если КоличествоПараметров > 3 Тогда
		МассивПараметров.Добавить(Параметр4);
	КонецЕсли;
	
	Если КоличествоПараметров > 4 Тогда
		МассивПараметров.Добавить(Параметр5);
	КонецЕсли;
	
	Если КоличествоПараметров > 5 Тогда
		МассивПараметров.Добавить(Параметр6);
	КонецЕсли;
	
	Если КоличествоПараметров > 6 Тогда
		МассивПараметров.Добавить(Параметр7);
	КонецЕсли;
	
	Если КоличествоПараметров > 7 Тогда
		МассивПараметров.Добавить(Параметр8);
	КонецЕсли;
	
	Если КоличествоПараметров > 8 Тогда
		МассивПараметров.Добавить(Параметр9);
	КонецЕсли;
	
	Возврат МассивПараметров;
						
КонецФункции

Процедура ПредварительноСоздатьМенеджерКриптографии(
		ОповещениеОЗавершении,
		ИмяМетода,
		ВходящиеПараметры = Неопределено,
		ВыводитьСообщения = Истина,
		МенеджерКриптографии = Неопределено,
		ПараметрыОпределенияАлгоритма = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Если ЗначениеЗаполнено(ВходящиеПараметры) Тогда
		Контекст.Вставить("ВходящиеПараметры", ВходящиеПараметры);
	КонецЕсли;
	Контекст.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	
	Оповещение = Новый ОписаниеОповещения(
		ИмяМетода, ЭтотОбъект, Контекст);
		
	Если МенеджерКриптографии <> Неопределено Тогда
		Алгоритм = ?(ПараметрыОпределенияАлгоритма <> Неопределено И ПараметрыОпределенияАлгоритма.Свойство("Алгоритм"),
			ПараметрыОпределенияАлгоритма.Алгоритм, "");
		КонтекстДляАлгоритма = Новый Структура("Алгоритм, ТипКриптопровайдераВладельца", Алгоритм,
			?(ПараметрыОпределенияАлгоритма <> Неопределено
			И ПараметрыОпределенияАлгоритма.Свойство("ТипКриптопровайдераВладельца"),
			ПараметрыОпределенияАлгоритма.ТипКриптопровайдераВладельца, Неопределено));
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "МенеджерКриптографии",
			МенеджерКриптографии, КонтекстДляАлгоритма);
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	Иначе
		СоздатьМенеджерКриптографии(
			Оповещение,
			ВыводитьСообщения,,,,
			ПараметрыОпределенияАлгоритма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибке(ИмяМетода, ОписаниеОшибки, ИнформацияОбОшибке = Неопределено, Знач ИнформацияОбОшибкеСервиса = Неопределено)
	
	Если ИнформацияОбОшибкеСервиса <> Неопределено Тогда
		ИнформацияОбОшибкеСервиса = КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(ИнформацияОбОшибкеСервиса);
	КонецЕсли;
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда		
		Если ИнформацияОбОшибкеСервиса <> Неопределено Тогда
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове ""%1"" менеджера криптографии.
		              |по причине:
		              |%2
		              |по причине:
		              |%3
					  |после ошибки в сервисе:
		              |%4';
		              |en = 'Ошибка при вызове ""%1"" менеджера криптографии.
		              |по причине:
		              |%2
		              |по причине:
		              |%3
		              |после ошибки в сервисе:
		              |%4'"),
				ИмяМетода, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), 
				ОписаниеОшибки,
				ИнформацияОбОшибкеСервиса);
		Иначе	
			Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при вызове ""%1"" менеджера криптографии.
		              |по причине:
		              |%2
		              |по причине:
		              |%3';
		              |en = 'Ошибка при вызове ""%1"" менеджера криптографии.
		              |по причине:
		              |%2
		              |по причине:
		              |%3'"),
				ИмяМетода, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при вызове ""%1"" менеджера криптографии.
                  |по причине:
                  |%2';
                  |en = 'Ошибка при вызове ""%1"" менеджера криптографии.
                  |по причине:
                  |%2'"),
			ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
		
	КриптографияЭДКОКлиентСервер.ЗаписатьСобытиеВЖурнал(ИмяСобытия(), "Ошибка", Комментарий);
			
КонецПроцедуры
	
Процедура СтандартнаяОбработкаОшибки(
				СтандартнаяОбработка, 
				ВходящийКонтекст, 
				ИмяМетода, 
				ОписаниеОшибки = Неопределено, 
				ИнформацияОбОшибке = Неопределено,
				ИнформацияОбОшибкеСервиса = Неопределено)
	
	ВходящийКонтекст.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	ВходящийКонтекст.Вставить("ИнформацияОбОшибкеСервиса", ИнформацияОбОшибкеСервиса);
	ВходящийКонтекст.Вставить("ИмяМетода", ИмяМетода);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВходящийКонтекст.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения(
		"МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект, ВходящийКонтекст,
		"МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок", ЭтотОбъект);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Функция ЗначениеСтруктуры(Знач Контекст, Знач Ключи = "", Результат)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Контекст) <> Тип("Структура") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Ключи = СтрРазделить(Ключи, ".", Ложь);
	
	Попытка
		Для Каждого Ключ Из Ключи Цикл 		
			Контекст = Контекст[Ключ]
		КонецЦикла;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Результат = Контекст;
	Возврат Истина;
	
КонецФункции

Функция ИзвлечьСвязанныйОбъект(ВходящийКонтекст)
	
	СвязанныйОбъект = Неопределено;
	Если ЗначениеСтруктуры(ВходящийКонтекст, "ОповещениеОЗавершении.ДополнительныеПараметры.СсылкаНаОбъект", СвязанныйОбъект) Тогда 
		// ВходящийКонтекст.ОповещениеОЗавершении.ДополнительныеПараметры.СсылкаНаОбъект
		Возврат СвязанныйОбъект;
	КонецЕсли;

	Возврат СвязанныйОбъект;
КонецФункции

Процедура МенеджерКриптографииПослеПолученияЗначенияСвойстваСписокОшибок(ЗначениеСвойства, ВходящийКонтекст) Экспорт
	
	Если ВходящийКонтекст.Свойство("ИнформацияОбОшибке") Тогда
		ИнформацияОбОшибке = ВходящийКонтекст.ИнформацияОбОшибке;
	Иначе
		ИнформацияОбОшибке = Неопределено;
	КонецЕсли;
	
	Если ВходящийКонтекст.Свойство("ИнформацияОбОшибкеСервиса") Тогда
		ИнформацияОбОшибкеСервиса = ВходящийКонтекст.ИнформацияОбОшибкеСервиса;
	Иначе
		ИнформацияОбОшибкеСервиса = Неопределено;
	КонецЕсли;
	
	Если (ВходящийКонтекст.ИмяМетода = "PKCS7Подписать" ИЛИ ВходящийКонтекст.ИмяМетода = "PKCS7ПодписатьСДанными"
		ИЛИ ВходящийКонтекст.ИмяМетода = "PKCS7Расшифровать" ИЛИ ВходящийКонтекст.ИмяМетода = "Подписать"
		ИЛИ ВходящийКонтекст.ИмяМетода = "РасшифрованныйФайл") Тогда
		
		Если СтрНайти(ЗначениеСвойства, "Объект или свойство не найдено.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Cannot find object or property.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Набор ключей не определен.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "The keyset is not defined.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Набор ключей не существует.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Keyset does not exist.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Не удается найти сертификат и закрытый ключ для расшифровки.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Cannot find the certificate and private key for decryption.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Тип сертификата не имеет параметра, ссылающегося на закрытый ключ.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "The certificate type does not have a private key parameter.") > 0 Тогда
			
			ЗначениеСвойства = СокрП(ЗначениеСвойства) + " "
				+ НСтр("ru = 'Переустановите сертификат абонента из ключевого носителя.';
						|en = 'Переустановите сертификат абонента из ключевого носителя.'");
			
		ИначеЕсли СтрНайти(ЗначениеСвойства, "Отказано в доступе.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Access denied.") > 0 Тогда
			
			ЗначениеСвойства = СокрП(ЗначениеСвойства) + " "
				+ НСтр("ru = 'Проверьте период использования закрытого ключа в свойствах сертификата абонента.';
						|en = 'Проверьте период использования закрытого ключа в свойствах сертификата абонента.'");
			
		ИначеЕсли СтрНайти(ЗначениеСвойства, "Ошибка исполнения функции.") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "Function failed during execution.") > 0 Тогда
			
			ЗначениеСвойства = СокрП(ЗначениеСвойства) + " "
				+ НСтр("ru = 'Проверьте, что криптопровайдер зарегистрирован, лицензия не истекла.';
						|en = 'Проверьте, что криптопровайдер зарегистрирован, лицензия не истекла.'");
			
		ИначеЕсли СтрНайти(ЗначениеСвойства, "не авторизован фирмой") > 0
			ИЛИ СтрНайти(ЗначениеСвойства, "not authorized by") > 0 Тогда
			
			ЗначениеСвойства = НСтр("ru = 'Для выбранного сертификата не найдено подключение к 1С-Отчетности.';
									|en = 'Для выбранного сертификата не найдено подключение к 1С-Отчетности.'");
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИнформациюОбОшибке(ВходящийКонтекст.ИмяМетода, ЗначениеСвойства, ИнформацияОбОшибке, ИнформацияОбОшибкеСервиса);
	
	Если ВходящийКонтекст.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ВходящийКонтекст.ОписаниеОшибки) Тогда
		ОписаниеОшибки = ВходящийКонтекст.ОписаниеОшибки;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ЗначениеСвойства);
	Иначе
		ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	КонецЕсли;
	
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки, ИзвлечьСвязанныйОбъект(ВходящийКонтекст));
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры

Процедура МенеджерКриптографииПриОшибкеПолученияЗначенияСвойстваСписокОшибок(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.';
							|en = 'Ошибка чтения свойства ""СписокОшибок"" менеджера криптографии.'");
	КриптографияЭДКОКлиентСервер.ЗаписатьСобытиеВЖурнал(ИмяСобытия(), "Ошибка", ОписаниеОшибки);
	
	ОписаниеОшибки = ОписаниеОшибкиОбщийТекстПриОшибкахВМенеджереКриптографии();
	ВывестиСообщениеПриНеобходимости(ВходящийКонтекст.ВыводитьСообщения, ОписаниеОшибки);
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, ВходящийКонтекст));
	
КонецПроцедуры
	
Процедура ВывестиСообщениеПриНеобходимости(ВыводитьСообщения, Сообщение, Знач СвязанныйОбъект = Неопределено)
	
	Если ВыводитьСообщения Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Сообщение, СвязанныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция КраткоеПредставлениеОшибкиКриптосервиса(Знач ИнформацияОбОшибке) Экспорт
	
	Возврат КриптографияЭДКОКлиентСервер.КраткоеПредставлениеОшибкиКриптосервиса(ИнформацияОбОшибке);
	
КонецФункции

Функция ИмяСобытия()
	
	Возврат НСтр("ru = 'Электронный документооборот с контролирующими органами. Менеджер криптографии';
				|en = 'Электронный документооборот с контролирующими органами. Менеджер криптографии'");
	
КонецФункции

Функция ЗаполнитьПараметрыКриптографии(Алгоритм = "", ВыводитьДиалоги = Ложь, ПриоритетViPNet = Ложь)
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	
	ПутьМодуляКриптографии = "";
	Если ЭтоLinux Тогда
		ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.';
									|en = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.'");
			Если ВыводитьДиалоги Тогда
				Оповещение = Новый ОписаниеОповещения("ЗаполнитьПараметрыКриптографииПослеПредупреждения", ЭтотОбъект);
				ПоказаноПредупреждение = ПараметрыПриложения["КриптографияЭДКО.ПоказаноПредупреждение"];
				Если ПоказаноПредупреждение = Истина Тогда
					ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
				Иначе
					ПараметрыПриложения["КриптографияЭДКО.ПоказаноПредупреждение"] = Истина;
					ПоказатьПредупреждение(Оповещение, ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Возврат Новый Структура("ДоступныеКриптопровайдеры, ОписаниеОшибки", Неопределено, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(
		Алгоритм,
		ЭтоLinux,,
		ПутьМодуляКриптографии,
		ПриоритетViPNet);
	Возврат Новый Структура("ДоступныеКриптопровайдеры, ОписаниеОшибки", ДоступныеКриптопровайдеры, "");
	
КонецФункции

Процедура ЗаполнитьПараметрыКриптографииПослеПредупреждения(ВходящийКонтекст) Экспорт
	
	ПараметрыПриложения["КриптографияЭДКО.ПоказаноПредупреждение"] = Ложь;
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	
КонецПроцедуры

Процедура ПолучитьИмяФайла(ИмяФайлаИлиРасширение, Контекст, ИмяМетода)
		
	Оповещение = Новый ОписаниеОповещения(ИмяМетода, ЭтотОбъект, Контекст);
	Если СтрНайти(ИмяФайлаИлиРасширение, "|") Тогда
		СоставляющиеПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФайлаИлиРасширение, "|");
		ИмяФайлаИлиРасширение = СоставляющиеПути[0] + СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", "") + СоставляющиеПути[1];
	КонецЕсли;                                 
	
	Если ЗначениеЗаполнено(ИмяФайлаИлиРасширение) И Лев(ИмяФайлаИлиРасширение, 1) <> "." Тогда
		ВыполнитьОбработкуОповещения(
			Оповещение,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ИмяФайла", ИмяФайлаИлиРасширение, Контекст));
	Иначе
		ОперацииСФайламиЭДКОКлиент.ПолучитьИмяВременногоФайлаНаКлиенте(
			Оповещение, ИмяФайлаИлиРасширение, Контекст.ВыводитьСообщения);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПарольДоступаКЗакрытомуКлючу(ОповещениеОЗавершении, Сертификат, МенеджерКриптографии)
	
	ПоддерживаетсяЗапросПароляВнешнейКомпонентой = Истина;
	
	Если ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux() И НЕ ПоддерживаетсяЗапросПароляВнешнейКомпонентой Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СерийныйНомер", Сертификат.СерийныйНомер);
		ПараметрыФормы.Вставить("Поставщик", Сертификат.Поставщик);
		
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗаполнитьПарольДоступаКЗакрытомуКлючуЗавершение", ЭтотОбъект, Контекст);
			
		ОткрытьФорму(
			"ОбщаяФорма.ФормаВводаПароляЗакрытогоКлюча",
			ПараметрыФормы,,,,, 
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(
			ОповещениеОЗавершении, 
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "МенеджерКриптографии", МенеджерКриптографии));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПарольДоступаКЗакрытомуКлючуЗавершение(Пароль, ВходящийКонтекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"МенеджерКриптографииПослеУстановкиЗначенияСвойстваПарольДоступаКЗакрытомуКлючу", ЭтотОбъект, ВходящийКонтекст);
	Если ТипЗнч(Пароль) = Тип("Строка") Тогда
		ВходящийКонтекст.МенеджерКриптографии.НачатьУстановкуПарольДоступаКЗакрытомуКлючу(Оповещение, Пароль);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(
				Ложь, "ОписаниеОшибки", 
				ОписаниеОшибкиНеВведенПарольДоступаКЗакрытомуКлючу(),
				ВходящийКонтекст));	
	КонецЕсли;
		
КонецПроцедуры

Процедура МенеджерКриптографииПослеУстановкиЗначенияСвойстваПарольДоступаКЗакрытомуКлючу(ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ОповещениеОЗавершении,
		КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии));
	
КонецПроцедуры

Функция СертификатЗаполнен(Сертификат)
	
	Возврат ЗаполненОтпечатокСертификата(Сертификат) ИЛИ ЗаполненСерийныйНомерСертификата(Сертификат);
	
КонецФункции

Функция ЗаполненСерийныйНомерСертификата(Сертификат)
	
	Если ЗначениеЗаполнено(Сертификат)
		И Сертификат.Свойство("СерийныйНомер") И Сертификат.Свойство("Поставщик")
		И ЗначениеЗаполнено(Сертификат.СерийныйНомер) И ЗначениеЗаполнено(Сертификат.Поставщик) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗаполненОтпечатокСертификата(Сертификат)
	
	Если ЗначениеЗаполнено(Сертификат)
		И Сертификат.Свойство("Отпечаток") 
		И ЗначениеЗаполнено(Сертификат.Отпечаток) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьАдресРезультата(ФайлРезультата, ИсходныйФайл)
	
	АдресРезультата = Неопределено;
	Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ФайлРезультата) Тогда
		АдресРезультата = ФайлРезультата; // поместить расшифрованные данные по указанному адресу
	ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл)
		И Не ЗначениеЗаполнено(ФайлРезультата) Тогда
		АдресРезультата = ИсходныйФайл; // заместить исходный файл
	КонецЕсли;
	
	Возврат АдресРезультата;
	
КонецФункции

Функция СоздатьПараметрыОпределенияАлгоритма()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Алгоритм", 						Неопределено);
	Результат.Вставить("Криптосообщение", 				Неопределено);
	Результат.Вставить("Сертификат", 					Неопределено);
	Результат.Вставить("ТипКриптопровайдераВладельца", 	Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОшибкиНеУказаныКлючевыеПараметрыСертификатаДляПоиска()
	
	Возврат НСтр("ru = 'Не указаны ключевые параметры сертификата для поиска.';
				|en = 'Не указаны ключевые параметры сертификата для поиска.'");
	
КонецФункции

Функция СвойстваРасшифрованияПодписанияСертификата(Сертификат, ТекущиеСвойства = Неопределено)
	
	Результат = ТекущиеСвойства;
	
	Если ЗначениеЗаполнено(Сертификат) Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ИспользоватьДлительныйМаркерБезопасности", Ложь);
		Иначе
			Результат = Новый Структура("ИспользоватьДлительныйМаркерБезопасности", Ложь);
		КонецЕсли;
		
		НовоеЗначение   = Ложь;
		Если Сертификат.Свойство("ИспользоватьДлительныйМаркерБезопасности", НовоеЗначение) Тогда
			Результат.ИспользоватьДлительныйМаркерБезопасности = НовоеЗначение;
		Иначе
			СвойстваПодписания = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.СвойстваРасшифрованияПодписанияСертификата(Сертификат);
			Результат.ИспользоватьДлительныйМаркерБезопасности = СвойстваПодписания.СпособПодтвержденияКриптоопераций = ПредопределенноеЗначение("Перечисление.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен");
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПодписиСертификатовДокументооборотаВJSON(Сертификат = Неопределено) Экспорт
	
	ОтпечатокСертификата = ?(ЗначениеЗаполнено(Сертификат) И (ТипЗнч(Сертификат) = Тип("Структура")
		ИЛИ ТипЗнч(Сертификат) = Тип("ФиксированнаяСтруктура")) И Сертификат.Свойство("Отпечаток")
		И ЗначениеЗаполнено(Сертификат.Отпечаток), нрег(Сертификат.Отпечаток), Неопределено);
	
	ПодписиСертификатовДокументооборота = ПараметрыПриложения["КриптографияЭДКО.ПодписиСертификатовДокументооборота"];
	Если НЕ ЗначениеЗаполнено(ПодписиСертификатовДокументооборота)
		ИЛИ НЕ ПодписиСертификатовДокументооборота.Свойство("ЗначениеВJSON" + ОтпечатокСертификата) Тогда
		
		ЗначениеВJSON = КриптографияЭДКОСлужебныйВызовСервера.ПодписиСертификатовДокументооборотаВJSON(ОтпечатокСертификата);
		Если НЕ ЗначениеЗаполнено(ПодписиСертификатовДокументооборота) Тогда
			ПодписиСертификатовДокументооборота = Новый Структура;
		КонецЕсли;
		ПодписиСертификатовДокументооборота.Вставить("ЗначениеВJSON" + ОтпечатокСертификата, ЗначениеВJSON);
		
		ПараметрыПриложения.Вставить("КриптографияЭДКО.ПодписиСертификатовДокументооборота",
			ПодписиСертификатовДокументооборота);
	КонецЕсли;
	
	Возврат ПодписиСертификатовДокументооборота["ЗначениеВJSON" + ОтпечатокСертификата];
	
КонецФункции

Функция НеаккредитованныйУЦСертификата(Сертификат)
	
	Если (ТипЗнч(Сертификат) <> Тип("Структура") И ТипЗнч(Сертификат) <> Тип("ФиксированнаяСтруктура"))
		ИЛИ НЕ Сертификат.Свойство("ДействителенПо") ИЛИ НЕ Сертификат.Свойство("Поставщик")
		ИЛИ ТипЗнч(Сертификат.ДействителенПо) <> Тип("Дата") ИЛИ Сертификат.ДействителенПо < '20220101'
		ИЛИ ТипЗнч(Сертификат.Поставщик) <> Тип("Строка") Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияНачала = СтрНайти("," + Сертификат.Поставщик, ",O=");
	Если ПозицияНачала = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОрганизацияПоставщика = Сред(Сертификат.Поставщик, ПозицияНачала + 2);
	ПозицияРазделителя = СтрНайти(ОрганизацияПоставщика, ",");
	Если ПозицияРазделителя <> 0 Тогда
		ОрганизацияПоставщика = Лев(ОрганизацияПоставщика, ПозицияРазделителя - 1);
	КонецЕсли;
	ОрганизацияПоставщика = ВРег(ОрганизацияПоставщика);
	
	Если СтрНайти(ОрганизацияПоставщика, "АСТРАЛ-М") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "ООО ""АСТРАЛ-М""";
	
КонецФункции

Функция ОрганизацияОповещения(ОповещениеИлиПараметры, УровеньВложенностиВызова = 0)
	
	ДополнительныеПараметры = ?(ТипЗнч(ОповещениеИлиПараметры) = Тип("ОписаниеОповещения"),
		ОповещениеИлиПараметры.ДополнительныеПараметры, ОповещениеИлиПараметры);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("СправочникСсылка.Организации") Тогда
		Возврат ДополнительныеПараметры;
	КонецЕсли;
	
	Если УровеньВложенностиВызова > 5 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("ОписаниеОповещения") Тогда
		Возврат ОрганизацияОповещения(ДополнительныеПараметры, УровеньВложенностиВызова + 1);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура")
		И ТипЗнч(ДополнительныеПараметры) <> Тип("ФиксированнаяСтруктура") Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("СправочникСсылка.Организации") Тогда
			Возврат КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
			ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированнаяСтруктура") Тогда
			
			Результат = ОрганизацияОповещения(КлючИЗначение.Значение, УровеньВложенностиВызова + 1);
			Если ТипЗнч(Результат) = Тип("СправочникСсылка.Организации") Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ДополнительныеПараметры Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ОписаниеОповещения") Тогда
			Результат = ОрганизацияОповещения(КлючИЗначение.Значение, УровеньВложенностиВызова + 1);
			Если ТипЗнч(Результат) = Тип("СправочникСсылка.Организации") Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПодписаниеСертификатомНеаккредитованногоУЦВременноРазрешено(Организация)
	
	ДатыПодписанияСертификатамиНеаккредитованныхУЦ =
		ПараметрыПриложения["КриптографияЭДКО.ДатыПодписанияСертификатамиНеаккредитованныхУЦ"];
	Если ДатыПодписанияСертификатамиНеаккредитованныхУЦ = Неопределено Тогда
		ДатыПодписанияСертификатамиНеаккредитованныхУЦ = Новый Соответствие;
	КонецЕсли;
	ДатаПодписанияСертификатомНеаккредитованногоУЦ = ДатыПодписанияСертификатамиНеаккредитованныхУЦ[Организация];
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Возврат ЗначениеЗаполнено(ДатаПодписанияСертификатомНеаккредитованногоУЦ)
		И ДатаСеанса < ДатаПодписанияСертификатомНеаккредитованногоУЦ + 10 * 60
		И ДатаСеанса >= ДатаПодписанияСертификатомНеаккредитованногоУЦ;
	
КонецФункции

Процедура ВременноРазрешитьПодписаниеПодписаниеСертификатомНеаккредитованногоУЦ(Организация)
	
	ДатыПодписанияСертификатамиНеаккредитованныхУЦ =
		ПараметрыПриложения["КриптографияЭДКО.ДатыПодписанияСертификатамиНеаккредитованныхУЦ"];
	Если ДатыПодписанияСертификатамиНеаккредитованныхУЦ = Неопределено Тогда
		ДатыПодписанияСертификатамиНеаккредитованныхУЦ = Новый Соответствие;
	КонецЕсли;
	
	ДатыПодписанияСертификатамиНеаккредитованныхУЦ[Организация] = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ПараметрыПриложения["КриптографияЭДКО.ДатыПодписанияСертификатамиНеаккредитованныхУЦ"] =
		ДатыПодписанияСертификатамиНеаккредитованныхУЦ;
	
КонецПроцедуры

Функция ПеревернутьБайты(СтрокаШестнадцатеричныхСимволов)
	
	Результат = "";
	
	НомерСимвола = 1;
	Пока НомерСимвола < СтрДлина(СтрокаШестнадцатеричныхСимволов) Цикл
		Результат = Результат + Сред(СтрокаШестнадцатеричныхСимволов, НомерСимвола + 1, 1)
			+ Сред(СтрокаШестнадцатеричныхСимволов, НомерСимвола, 1);
		НомерСимвола = НомерСимвола + 2;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СоздатьМенеджерКриптографии2

Процедура СоздатьМенеджерКриптографии2(
		ОповещениеОЗавершении,
		Криптопровайдер = Неопределено,
		ДополнительныеПараметры = Неопределено,
		ПослеУстановкиВнешнейКомпоненты = Ложь,
		ВыполнятьПроверкуКриптопровайдера = Истина) Экспорт
	
	Параметры = ЗаполнитьДополнительныеПараметрыПриНеобходимости(ДополнительныеПараметры);	
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", СоздатьОповещениеОЗавершении(ОповещениеОЗавершении, Параметры));
	Контекст.Вставить("Криптопровайдер", Криптопровайдер);
	Контекст.Вставить("ДополнительныеПараметры", Параметры);
	Контекст.Вставить("ПослеУстановкиВнешнейКомпоненты", ПослеУстановкиВнешнейКомпоненты);
	Контекст.Вставить("ВыполнятьПроверкуКриптопровайдера", ВыполнятьПроверкуКриптопровайдера);
	
	Если ОбщегоНазначенияЭДКОКлиент.ЭтоКлиентскоеПриложениеПоддерживается() Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии2ПослеПодключенияВнешнейКомпоненты", ЭтотОбъект, Контекст);
		НачатьПодключениеВнешнейКомпоненты(Оповещение, ОбщегоНазначенияЭДКОКлиент.ПолучитьМестоположениеВнешнейКомпоненты(), "ЭДОNative");	
	Иначе
		ЗавершитьСОтрицательнымРезультатом(
			КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаОтсутствуетКомпонентаДляИспользуемогоКлиентскогоПриложения(),
			Контекст,
			Параметры.ПредлагатьУстановкуВнешнейКомпоненты ИЛИ Параметры.ВыводитьСообщения);
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьМенеджерКриптографии2ПослеПодключенияВнешнейКомпоненты(Подключена, ВходящийКонтекст) Экспорт
	
	ДополнительныеПараметры = ВходящийКонтекст.ДополнительныеПараметры;
	
	Если Подключена Тогда
		Попытка
			ВходящийКонтекст.Вставить("МенеджерКриптографии", Новый("Addin.ЭДОNative.CryptS"));
		Исключение
			ЗавершитьСОтрицательнымРезультатом(
				КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаВнешняяКомпонентаПодключенаНоНеУдалосьСоздатьAddIn(),
				ВходящийКонтекст,
				ДополнительныеПараметры.ПредлагатьУстановкуВнешнейКомпоненты ИЛИ ДополнительныеПараметры.ВыводитьСообщения);
			Возврат;
		КонецПопытки;
		
		Оповещение = Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографии2ПослеУстановкиСвойстваНеВыводитьСообщенияОбОшибках", 
			ЭтотОбъект, 
			ВходящийКонтекст);	
		
		// Отключим вывод сообщений об ошибках пользователю. Ошибки будем получать из свойства СписокОшибок.
		ВходящийКонтекст.МенеджерКриптографии.НачатьУстановкуНеВыводитьСообщенияОбОшибках(Оповещение, Истина);
	Иначе
		Если ВходящийКонтекст.ПослеУстановкиВнешнейКомпоненты Тогда
			ЗавершитьСОтрицательнымРезультатом(
				КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеУдалосьПодключитьВнешнююКомпоненту(), ВходящийКонтекст);
			Возврат;
		Иначе
			Если ДополнительныеПараметры.ПредлагатьУстановкуВнешнейКомпоненты Тогда
				Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии2ПослеУстановкиВнешнейКомпоненты", ЭтотОбъект, ВходящийКонтекст);		
				НачатьУстановкуВнешнейКомпоненты(Оповещение, ОбщегоНазначенияЭДКОКлиент.ПолучитьМестоположениеВнешнейКомпоненты());
			Иначе
				ЗавершитьСОтрицательнымРезультатом(
					КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеУдалосьПодключитьВнешнююКомпоненту(),
					ВходящийКонтекст,
					ДополнительныеПараметры.ПредлагатьУстановкуВнешнейКомпоненты ИЛИ ДополнительныеПараметры.ВыводитьСообщения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьМенеджерКриптографии2ПослеУстановкиВнешнейКомпоненты(ВходящийКонтекст) Экспорт
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВходящийКонтекст.ДополнительныеПараметры);
	ДополнительныеПараметры.ВыводитьСообщения = Ложь;
	
	СоздатьМенеджерКриптографии2(
		ВходящийКонтекст.ОповещениеОЗавершении, 
		ВходящийКонтекст.Криптопровайдер, 
		ДополнительныеПараметры, 
		Истина);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографии2ПослеУстановкиСвойстваНеВыводитьСообщенияОбОшибках(ВходящийКонтекст) Экспорт
	
	ДополнительныеПараметры = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ВходящийКонтекст.ДополнительныеПараметры);
	ДополнительныеПараметры.ВыводитьСообщения = Ложь;
	
	// Для поддерживаемых криптопровайдеров предварительно проверим установлены ли они в системе
	Если ЗначениеЗаполнено(ВходящийКонтекст.Криптопровайдер) Тогда
		Если ВходящийКонтекст.Криптопровайдер.Поддерживается И ВходящийКонтекст.ВыполнятьПроверкуКриптопровайдера Тогда
			Оповещение = Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографии2ПослеПолученияКриптопровайдеров",
				ЭтотОбъект,
				ВходящийКонтекст);
			КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение, Истина, ДополнительныеПараметры);
		Иначе
			Имя = ВходящийКонтекст.Криптопровайдер.Имя; 
			Путь = ВходящийКонтекст.Криптопровайдер.Путь;
			Тип = ВходящийКонтекст.Криптопровайдер.Тип;
			
			Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии2ПослеИнициализации", ЭтотОбъект, ВходящийКонтекст);			
			ВходящийКонтекст.МенеджерКриптографии.НачатьВызовСоздатьМенеджераКриптографии(Оповещение, Имя, Путь, Тип);		
		КонецЕсли;	
	Иначе
		// Если криптопровайдер явно не указан, то будем использовать один из поддерживаемых
		Оповещение = Новый ОписаниеОповещения("СоздатьМенеджерКриптографии2ПослеПолученияКриптопровайдеров", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение, Истина, ДополнительныеПараметры);
	КонецЕсли;	
	
КонецПроцедуры
	
Процедура СоздатьМенеджерКриптографии2ПослеПолученияКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Если ЗначениеЗаполнено(Результат.Криптопровайдеры) Тогда
			Если ЗначениеЗаполнено(ВходящийКонтекст.Криптопровайдер) Тогда
				Криптопровайдер = Неопределено;
				Для Каждого ДоступныйКриптопровайдер Из Результат.Криптопровайдеры Цикл
					Если ДоступныйКриптопровайдер.Имя = ВходящийКонтекст.Криптопровайдер.Имя
						И ДоступныйКриптопровайдер.Тип = ВходящийКонтекст.Криптопровайдер.Тип Тогда
						Криптопровайдер = ВходящийКонтекст.Криптопровайдер;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Если криптопровайдер не был задан, то возьмем первый из поддерживаемых
				Криптопровайдер = Результат.Криптопровайдеры[0];
			КонецЕсли;
		Иначе
			ЗавершитьСОтрицательнымРезультатом(
				КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеУстановленКриптопровайдер(ВходящийКонтекст.Криптопровайдер), ВходящийКонтекст);
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Криптопровайдер) Тогда
			ВходящийКонтекст.ВыполнятьПроверкуКриптопровайдера = Ложь;
			ПоддерживаемыеКриптопровайдеры =
				КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(,,, Криптопровайдер.Путь);
			СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(Криптопровайдер.Имя,
				Криптопровайдер.Тип, ПоддерживаемыеКриптопровайдеры);
			ВходящийКонтекст.Вставить("Криптопровайдер", СвойстваКриптопровайдера);
			ВходящийКонтекст.Вставить("Алгоритм", ?(СвойстваКриптопровайдера = Неопределено, "", СвойстваКриптопровайдера.Алгоритм));
			СоздатьМенеджерКриптографии2ПослеУстановкиСвойстваНеВыводитьСообщенияОбОшибках(ВходящийКонтекст);
		Иначе
			ЗавершитьСОтрицательнымРезультатом(
				КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеУстановленКриптопровайдер(ВходящийКонтекст.Криптопровайдер), ВходящийКонтекст);
			Возврат; 
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);	
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьМенеджерКриптографии2ПослеИнициализации(Результат, Параметры, ВходящийКонтекст) Экспорт
	
	// Надо проверить не было ли ошибок при инициализации
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографии2ПослеПолученияСвойстваКодОшибки", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	ВходящийКонтекст.МенеджерКриптографии.НачатьПолучениеСписокОшибок(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографии2ПослеПолученияСвойстваКодОшибки(СписокОшибок, ВходящийКонтекст) Экспорт

	Если ЗначениеЗаполнено(СписокОшибок) Тогда
		ЗавершитьСОтрицательнымРезультатом(
			КриптографияЭДКОСлужебныйКлиентСервер.ОшибкаНеУдалосьИнициализироватьМенеджерКриптографии(
				ВходящийКонтекст.Криптопровайдер, СписокОшибок),
			ВходящийКонтекст);
		Возврат;
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Истина);
		РезультатВыполнения.Вставить("МенеджерКриптографии", ВходящийКонтекст.МенеджерКриптографии);
		РезультатВыполнения.Вставить("Криптопровайдер", ВходящийКонтекст.Криптопровайдер);
		СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
			ВходящийКонтекст.Криптопровайдер.Имя, ВходящийКонтекст.Криптопровайдер.Тип);
		РезультатВыполнения.Вставить("Алгоритм", ?(СвойстваКриптопровайдера = Неопределено, "", СвойстваКриптопровайдера.Алгоритм));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьДополнительныеПараметрыПриНеобходимости(ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", Истина);
		ДополнительныеПараметры.Вставить("ВыводитьСообщения", Истина);
	Иначе
		Если Не ДополнительныеПараметры.Свойство("ПредлагатьУстановкуВнешнейКомпоненты") Тогда
			ДополнительныеПараметры.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", Истина);
		КонецЕсли;
		Если Не ДополнительныеПараметры.Свойство("ВыводитьСообщения") Тогда
			ДополнительныеПараметры.Вставить("ВыводитьСообщения", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#Область ЗашифроватьXML

Процедура ЗашифроватьXML(
		ОповещениеОЗавершении,
		МестоХраненияКлюча,
		ИсходныйФайл,
		Сертификаты,
		ИмяФайлаИлиРасширениеИлиАдрес,
		ВыводитьСоообщения,
		ПараметрыОперации = Неопределено) Экспорт
	
	Если НЕ ИспользованиеОблачнойПодписиВозможно() Тогда
		ОтрицательныйРезультат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, 
							"ОписаниеОшибки", НСтр("ru = 'Не разрешено использование криптографии сервиса DSS.';
													|en = 'Не разрешено использование криптографии сервиса DSS.'"));
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ОтрицательныйРезультат);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Контекст.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
	Контекст.Вставить("ИсходныйФайл", ИсходныйФайл);
	Контекст.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
	Оповещение = Новый ОписаниеОповещения("ЗашифроватьXMLПослеШифрованияСервисомОблачнойПодписи", ЭтотОбъект, Контекст);
	
	ВсеСертификаты = Новый Массив;
	Если ТипЗнч(Сертификаты) = Тип("Массив") Тогда
		Для Каждого СтрокаМассива Из Сертификаты Цикл
			ВсеСертификаты.Добавить(СтрокаМассива.Сертификат);
		КонецЦикла;
	Иначе
		ВсеСертификаты.Добавить(Сертификаты.Сертификат);
	КонецЕсли;	
	
	УчетнаяЗаписьОблачнойПодписи = Неопределено;
	Если НЕ ПолучитьУчетнуюЗаписьОблачнойПодписи(МестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча, ПараметрыОперации);
	
	ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Зашифровать(
		Оповещение, 
		УчетнаяЗаписьОблачнойПодписи,
		ИсходныйФайл, 
		ВсеСертификаты, 
		"XML",
		ПараметрыОперации);
	
КонецПроцедуры

Процедура ЗашифроватьXMLПослеШифрованияСервисомОблачнойПодписи(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	ЗашифрованныеДанные = Неопределено;
		
	Если ТипЗнч(РезультатВызова) = Тип("Структура") Тогда
		Результат.Вставить("Выполнено", РезультатВызова.Выполнено);
		
		Если РезультатВызова.Выполнено Тогда
			ЗашифрованныеДанные = РезультатВызова.Результат;
		Иначе
			Результат.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
	
		Результат.Вставить("ЗашифрованныйФайл", ЗашифрованныеДанные);
		
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		ИсходныйФайл = ВходящийКонтекст.ИсходныйФайл;
		
		Если ИмяФайлаИлиРасширениеИлиАдрес = Неопределено Тогда //Результат необходимо переложить по адресу/пути исходных данных
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИсходныйФайл) Тогда 
				
				Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
					КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				Иначе //Двоичные данные
					ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИсходныйФайл);
				КонецЕсли;
				
			Иначе //Путь к файлу на диске
				
				Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
					АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
				Иначе
					АдресЗашифрованныхДанных = ЗашифрованныеДанные;
				КонецЕсли;
				
				Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
				Оповещение = Новый ОписаниеОповещения("ЗашифроватьXMLПослеШифрованияПослеЗаписиФайла", ЭтотОбъект, Результат);
				ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИсходныйФайл, ВходящийКонтекст.ВыводитьСоообщения);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ИмяФайлаИлиРасширениеИлиАдрес) Тогда	//Результат необходимо поместить по указанному адресу
			
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда 
				КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе //Двоичные данные
				ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
			
		Иначе	//Результат необходимо поместить в указанный файл / новый файл с указанным расширением
			
			Если Не КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(ЗашифрованныеДанные) Тогда //Двоичные данные
				АдресЗашифрованныхДанных = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные, Новый УникальныйИдентификатор);
			Иначе
				АдресЗашифрованныхДанных = ЗашифрованныеДанные;
			КонецЕсли;
			
			Результат.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
			Оповещение = Новый ОписаниеОповещения("ЗашифроватьXMLПослеШифрованияПослеЗаписиФайла", ЭтотОбъект, Результат);
			ОперацииСФайламиЭДКОКлиент.ДанныеССервераВФайл(Оповещение, АдресЗашифрованныхДанных, ИмяФайлаИлиРасширениеИлиАдрес, ВходящийКонтекст.ВыводитьСоообщения);
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ЗашифроватьXMLПослеШифрованияПослеЗаписиФайла(Результат, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифоватьXML

Процедура РасшифроватьXML(
		ОповещениеОЗавершении,
		ЗашифрованныйФайл,
		ИмяФайлаИлиРасширениеИлиАдрес,
		Сертификат,
		МестоХраненияКлюча,
		ВыводитьСоообщения,
		ПараметрыОперации = Неопределено) Экспорт
		
	Если НЕ ИспользованиеОблачнойПодписиВозможно() Тогда
		ОтрицательныйРезультат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, 
							"ОписаниеОшибки", НСтр("ru = 'Не разрешено использование криптографии сервиса DSS.';
													|en = 'Не разрешено использование криптографии сервиса DSS.'"));
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ОтрицательныйРезультат);
		Возврат;
	КонецЕсли;
	
	ПараметрыЦикла			= Новый Структура();
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("ЗашифрованныйФайл", ЗашифрованныйФайл);
	ПараметрыЦикла.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ИмяФайлаИлиРасширениеИлиАдрес);
	ПараметрыЦикла.Вставить("Сертификат", Сертификат);
	ПараметрыЦикла.Вставить("ВыводитьСоообщения", ВыводитьСоообщения);
	Оповещение = Новый ОписаниеОповещения("РасшифроватьXMLПослеРасшифрования", ЭтотОбъект, ПараметрыЦикла);
	
	УчетнаяЗаписьОблачнойПодписи = Неопределено;
	Если ПолучитьУчетнуюЗаписьОблачнойПодписи(МестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении) Тогда
		ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча, ПараметрыОперации);

		ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиент").Расшифровать(
			Оповещение,
			УчетнаяЗаписьОблачнойПодписи,
			ЗашифрованныйФайл,
			"XML",
			Сертификат,
			ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифроватьXMLПослеРасшифрования(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Выполнено = Ложь;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("Выполнено", Выполнено);
	ПараметрыЦикла.Вставить("ОписаниеОшибки", "");
	
	Если ТипЗнч(РезультатВызова) = Тип("Структура") Тогда
		
		РасшифрованныеДанные = Неопределено;
		Если РезультатВызова.Выполнено Тогда
			Выполнено = Истина;
			ПараметрыЦикла = Новый Структура;
			ПараметрыЦикла.Вставить("РасшифрованныеДанные", РезультатВызова.Результат);
			ПараметрыЦикла.Вставить("ИмяФайлаИлиРасширениеИлиАдрес", ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес);
			ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ВходящийКонтекст.ОповещениеОЗавершении);
		Иначе	
			ПараметрыЦикла.Вставить("ОписаниеОшибки", РезультатВызова.Ошибка);
		КонецЕсли;
	
	КонецЕсли;
	
	Если Выполнено Тогда
		ОписаниеСледующее = Новый ОписаниеОповещения("РасшифроватьXMLПодготовитьРезультат", ЭтотОбъект, ПараметрыЦикла);
		ПроверитьПодготовкуОблачногоСертификата(РезультатВызова.Сертификат, "РасшифрованиеXML", ОписаниеСледующее);
	Иначе
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ПараметрыЦикла);
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифроватьXMLПодготовитьРезультат(РезультатВызова, ВходящийКонтекст) Экспорт
		
	Если РезультатВызова.Выполнено Тогда
		ИмяФайлаИлиРасширениеИлиАдрес = ВходящийКонтекст.ИмяФайлаИлиРасширениеИлиАдрес;
		РасшифрованныеДанные = ВходящийКонтекст.РасшифрованныеДанные;
		
		Если РасшифрованныеДанные <> Неопределено Тогда
			Если КриптографияЭДКОКлиентСервер.ЭтоАдресВоВременномХранилище(РасшифрованныеДанные) Тогда
				РасшифрованныйФайл = КриптографияЭДКОКлиентСервер.ПереместитьВоВременномХранилище(РасшифрованныеДанные,
					ИмяФайлаИлиРасширениеИлиАдрес,, Истина);
			ИначеЕсли ТипЗнч(РасшифрованныеДанные) = Тип("ДвоичныеДанные") Тогда
				РасшифрованныйФайл = ПоместитьВоВременноеХранилище(РасшифрованныеДанные, ИмяФайлаИлиРасширениеИлиАдрес);
			Иначе
				РасшифрованныйФайл = ПоместитьВоВременноеХранилище(Base64Значение(РасшифрованныеДанные), ИмяФайлаИлиРасширениеИлиАдрес);
			КонецЕсли;
		КонецЕсли;
		
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина);
		Результат.Вставить("РасшифрованныйФайл", РасшифрованныйФайл);
		
	Иначе
		Результат = РезультатВызова;

	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура РасшифроватьXMLПослеШифрованияПослеЗаписиФайла(Результат, ВходящийКонтекст) Экспорт
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВходящийКонтекст);
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяПодпись

Процедура ПакетнаяПодписьОблачнойПодписи(
		ОписаниеОповещения,
		УчетнаяЗаписьОблачнойПодписи,
		МассивДокументов,
		СертификатПодписи,
		ПараметрыОперации = Неопределено) Экспорт
		
	ОписаниеДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ОписаниеДокумента", НСтр("ru = 'Пакетная подпись';
																													|en = 'Пакетная подпись'"));
	ТипДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ТипДокумента", "bin");
	ПодтверждатьОперацию = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОперации, "ПодтверждатьОперацию", Истина);
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОписаниеОповещения);
	ПараметрыЦикла.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
	ПараметрыЦикла.Вставить("МассивДокументов", МассивДокументов);
	ПараметрыЦикла.Вставить("СертификатПодписи", СертификатПодписи);
	ПараметрыЦикла.Вставить("ПодтверждатьОперацию", ПодтверждатьОперацию);
	ПараметрыЦикла.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	ПараметрыЦикла.Вставить("ТипДокумента", ТипДокумента);
	
	
	Если НЕ ИспользованиеОблачнойПодписиВозможно() Тогда
		ОтрицательныйРезультат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, 
							"ОписаниеОшибки", НСтр("ru = 'Не разрешено использование криптографии сервиса DSS.';
													|en = 'Не разрешено использование криптографии сервиса DSS.'"));
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ОтрицательныйРезультат);
	Иначе
		ОписаниеСледующее = Новый ОписаниеОповещения("ПакетнаяПодписьОблачнойПодписиПослеПодготовки", ЭтотОбъект, ПараметрыЦикла);
		ПроверитьПодготовкуОблачногоСертификата(СертификатПодписи, "ПакетнаяПодпись", ОписаниеСледующее);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПакетнаяПодписьОблачнойПодписиПослеПодготовки(РезультатВызова, ВходящийКонтекст) Экспорт
	
	ПодтверждатьОперацию = ВходящийКонтекст.ПодтверждатьОперацию;
	ОписаниеДокумента = ВходящийКонтекст.ОписаниеДокумента;
	ТипДокумента = ВходящийКонтекст.ТипДокумента;
	УчетнаяЗаписьОблачнойПодписи = ВходящийКонтекст.УчетнаяЗаписьОблачнойПодписи;
	МассивДокументов = ВходящийКонтекст.МассивДокументов;
	СертификатПодписи = ВходящийКонтекст.СертификатПодписи;
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СертификатПодписи);
	
	Если РезультатВызова.Выполнено Тогда
		ПараметрыОперации = ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча);
		ПараметрыОперации.Вставить("ПодтверждатьПринудительно", ПодтверждатьОперацию);
		МодульСервисКриптографииDSSКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииDSSКлиентСервер");
		МодульСервисКриптографииDSSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииDSSКлиент");
		
		СвойстваПодписи = МодульСервисКриптографииDSSКлиентСервер.ПолучитьСвойствоПодписиCMS(Истина, Ложь);
		МодульСервисКриптографииDSSКлиентСервер.ПолучитьИнформациюДокументаДляПодписи(СвойстваПодписи, ОписаниеДокумента, ТипДокумента);
		МодульСервисКриптографииDSSКлиент.Подписать(ОповещениеОЗавершении, УчетнаяЗаписьОблачнойПодписи, МассивДокументов, СвойстваПодписи, СертификатПодписи, ПараметрыОперации);
		
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "Ошибка", РезультатВызова.ОписаниеОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВызова);
		
	КонецЕсли;		
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОблачнойПодписью

Процедура ПроверитьДанныеДляОперацииОблачнойПодписи(ОповещениеОЗавершении, ИмяФайлаДанных, ТипОперации)
	
	Если НЕ ИспользованиеОблачнойПодписиВозможно() Тогда
		ОтрицательныйРезультат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, 
							"ОписаниеОшибки", НСтр("ru = 'Не разрешено использование криптографии сервиса DSS.';
													|en = 'Не разрешено использование криптографии сервиса DSS.'"));
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ОтрицательныйРезультат);
	Иначе
		ПараметрыЦикла = Новый Структура;
		ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыЦикла.Вставить("ИмяФайлаДанных", ИмяФайлаДанных);
		ПараметрыЦикла.Вставить("ТипДанных", "Неопределено");
		
		ПродолжитьВыполнение = Истина;
		
		Если ТипОперации = "Подписание" Тогда
			
			СертификатПодписи = ОповещениеОЗавершении.ДополнительныеПараметры.Сертификат;
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СертификатПодписи, "ПодготовитьСертификат", Истина) Тогда
				ОповещениеСледующее = Новый ОписаниеОповещения("ПроверитьДанныеДляОперацииОблачнойПодписи_Продолжение", ЭтотОбъект, ПараметрыЦикла);
				ПроверитьПодготовкуОблачногоСертификата(СертификатПодписи, ТипОперации, ОповещениеСледующее);
				ПродолжитьВыполнение = Ложь;
			КонецЕсли;	
				
		КонецЕсли;
		
		Если ПродолжитьВыполнение Тогда
			ПроверитьДанныеДляОперацииОблачнойПодписи_Продолжение(КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина), ПараметрыЦикла);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДляОперацииОблачнойПодписи_Продолжение(РезультатВызова, ВходящийКонтекст) Экспорт
	
	ТипДанных = ВходящийКонтекст.ТипДанных;
	ИмяФайлаДанных = ВходящийКонтекст.ИмяФайлаДанных;
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	
	Если РезультатВызова.Выполнено Тогда
		ТекущийТипДанных = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер").ПолучитьТипДанныхДокумента(ИмяФайлаДанных);
		
		Если ТекущийТипДанных = "Файл" И ТипДанных = "Неопределено" Тогда
			ВходящийКонтекст.Вставить("ТипДанных", "ДвоичныеДанные"); 
		ИначеЕсли ТипДанных = "Неопределено" Тогда
			ВходящийКонтекст.Вставить("ТипДанных", ТекущийТипДанных); 
		КонецЕсли;
		
		ОповещениеСледующее = Новый ОписаниеОповещения("ПроверитьДанныеДляОперацииОблачнойПодписиЗавершение", ЭтотОбъект, ВходящийКонтекст);
		
		// для облачной подписи передача файла недопустима, т.к. он не будет доступен на сервере
		Если ТекущийТипДанных = "Файл" Тогда
			НачатьСозданиеДвоичныхДанныхИзФайла(ОповещениеСледующее, ИмяФайлаДанных);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеСледующее, ИмяФайлаДанных);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВызова);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеДляОперацииОблачнойПодписиЗавершение(РезультатВызова, ВходящийКонтекст) Экспорт
	
	Если РезультатВызова <> Неопределено Тогда
		Результат = ПреобразоватьДанныеОблачнойПодписи(РезультатВызова, ВходящийКонтекст.ТипДанных);
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина, "ДанныеФайла", Результат));
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", НСтр("ru = 'Нет файла для выполнения операции.';
																							|en = 'Нет файла для выполнения операции.'")));
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусПодготовкиСертификата(СертификатОперации, ДанныеСертификата, ПодписьСертификата, ОтпечатокСертификата)
	
	ИмяПараметра = "ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОблачныеСертификаты";
	РеестрСертификатов = ПараметрыПриложения[ИмяПараметра];
	Если РеестрСертификатов = Неопределено Тогда
		РеестрСертификатов = Новый Соответствие;
	КонецЕсли;
	
	ОтпечатокСертификата = "";
	Если ТипЗнч(СертификатОперации) = Тип("Структура") ИЛИ ТипЗнч(СертификатОперации) = Тип("ФиксированнаяСтруктура") Тогда
		ОтпечатокСертификата = ВРег(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СертификатОперации, "Отпечаток", ""));
	КонецЕсли;
	
	Результат = РеестрСертификатов[ОтпечатокСертификата];
	// временно отключим проверку сертификата на УЦ
	Результат = Истина;
	Если Результат = Неопределено Тогда
		Результат = ДокументооборотСКООблачнаяПодписьВызовСервера.СтатусПодготовкиСертификата(СертификатОперации, ДанныеСертификата, ПодписьСертификата, ОтпечатокСертификата);
		Если Результат <> Неопределено Тогда
			УстановитьСтатусПодготовкиСертификата(ОтпечатокСертификата, Результат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьСтатусПодготовкиСертификата(ОтпечатокСертификата, НовоеЗначение, ВключаяСервер = Ложь)
	
	ИмяПараметра = "ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОблачныеСертификаты";
	РеестрСертификатов = ПараметрыПриложения[ИмяПараметра];
	Если РеестрСертификатов = Неопределено Тогда
		РеестрСертификатов = Новый Соответствие;
	КонецЕсли;
	
	РеестрСертификатов.Вставить(ВРег(ОтпечатокСертификата), НовоеЗначение);
	ПараметрыПриложения.Вставить(ИмяПараметра, РеестрСертификатов);
	
	Если ВключаяСервер Тогда
		ДокументооборотСКООблачнаяПодписьВызовСервера.ДополнитьРеестрПроверенныхСертификатов(ОтпечатокСертификата, НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодготовкуОблачногоСертификата(СертификатОперации, ТипОперации, ОповещениеОЗавершении)
	
	ДанныеСертификата = Неопределено;
	ОтпечатокСертификата = "";
	ПодписьСертификата = Неопределено;
	ПодготовкаСертификата = ПолучитьСтатусПодготовкиСертификата(СертификатОперации, ДанныеСертификата, ПодписьСертификата, ОтпечатокСертификата);
	Если ПодготовкаСертификата = Неопределено Тогда
		
		ПродолжитьВыполнение = Ложь;
		ИмяПроцедуры = "ДокументооборотСКООблачнаяПодписьВызовСервера.ПодготовитьСертификатСПараметрами";
		
		ПараметрыЦикла = Новый Структура;
		ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		ПараметрыЦикла.Вставить("ТипОперации", ТипОперации);
		ПараметрыЦикла.Вставить("Сертификат", СертификатОперации);
		ПараметрыЦикла.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		
		ОповещениеПослеПроверки = Новый ОписаниеОповещения("ПроверитьПодготовкуОблачногоСертификата_Окончание", ЭтотОбъект, ПараметрыЦикла);
		
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Сертификат", ДанныеСертификата);
		ПараметрыВызова.Вставить("Подпись", ПодписьСертификата);
		
		ДлительнаяОперация = ДокументооборотСКООблачнаяПодписьВызовСервера.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыВызова);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеПослеПроверки, ПараметрыОжидания);
		
	Иначе
		Результат = ПроверитьПодготовкуОблачногоСертификата_Результат(ПодготовкаСертификата, СертификатОперации, ТипОперации);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПроверитьПодготовкуОблачногоСертификата_Окончание(ДлительнаяОперация, ВходящийКонтекст) Экспорт

	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	СертификатОперации = ВходящийКонтекст.Сертификат;
	ТипОперации = ВходящийКонтекст.ТипОперации;
	ОтпечатокСертификата = ВходящийКонтекст.ОтпечатокСертификата;
	РезультатПодготовки = Ложь;
	ТекстОшибки = "";
	
	Если ДлительнаяОперация = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Работа сервиса подготовки сертификата завершилась с ошибкой.';
							|en = 'Работа сервиса подготовки сертификата завершилась с ошибкой.'");
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатПодготовки = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		УстановитьСтатусПодготовкиСертификата(ОтпечатокСертификата, РезультатПодготовки, Истина);
	Иначе
		ТекстОшибки = НСтр("ru = 'Работа сервиса подготовки сертификата завершилась с ошибкой.';
							|en = 'Работа сервиса подготовки сертификата завершилась с ошибкой.'") 
						+ ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Результат = ПроверитьПодготовкуОблачногоСертификата_Результат(РезультатПодготовки, СертификатОперации, ТипОперации, ТекстОшибки);
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Функция ПроверитьПодготовкуОблачногоСертификата_Результат(ПодготовкаСертификата, СертификатОперации, ТипОперации, Дополнение = "")

	Если НЕ ПодготовкаСертификата Тогда
		Отпечаток = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СертификатОперации, "Отпечаток", "неизвестный");
		ТекстПредупреждения = НСтр("ru = 'Выбранный сертификат с отпечатком %1 для операции %2 не может быть использован при документообороте с КО.';
									|en = 'Выбранный сертификат с отпечатком %1 для операции %2 не может быть использован при документообороте с КО.'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Отпечаток, ТипОперации);
		Если ЗначениеЗаполнено(Дополнение) Тогда
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Дополнение;
		КонецЕсли;	
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ТекстПредупреждения);
	Иначе
		Результат = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Функция ПреобразоватьДанныеОблачнойПодписи(ДанныеФайла, ТипДанных) Экспорт
	
	ТипРезультата = ПолучитьМодульПодсистемы("СервисКриптографииDSSКлиентСервер").ПолучитьТипДанныхДокумента(ДанныеФайла);
	
	Результат = ДанныеФайла;
	
	Если ТипДанных = "АдресХранилища" И ТипРезультата = "ДвоичныеДанные" Тогда
		Результат = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	ИначеЕсли ТипДанных = "АдресХранилища" И ТипРезультата = "Base64" Тогда
		Результат = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеФайла), Новый УникальныйИдентификатор);
	ИначеЕсли ТипДанных = "Base64" И ТипРезультата = "ДвоичныеДанные" Тогда
		Результат = Base64Строка(ДанныеФайла);
	ИначеЕсли ТипДанных = "Base64" И ТипРезультата = "АдресХранилища" Тогда
		Результат = ПолучитьИзВременногоХранилища(ДанныеФайла);
		Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
			Результат = Base64Строка(Результат);
		КонецЕсли;	
	ИначеЕсли ТипДанных = "ДвоичныеДанные" И ТипРезультата = "АдресХранилища" Тогда
		Результат = ПолучитьИзВременногоХранилища(ДанныеФайла);
		Если ТипЗнч(Результат) <> Тип("ДвоичныеДанные") Тогда
			Результат = Base64Значение(Результат);
		КонецЕсли;	
	ИначеЕсли ТипДанных = "ДвоичныеДанные" И ТипРезультата = "Base64" Тогда
		Результат = Base64Значение(ДанныеФайла);
	Иначе
		Результат = ДанныеФайла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользованиеОблачнойПодписиВозможно() Экспорт
	
	ПредыдущееИмя = "СтандартныеПодсистемы.ЭлектроннаяОблачнаяПодпись";
	
	Результат = Ложь;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПредыдущееИмя)
		ИЛИ ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииDSSКлиент");
		Результат = МодульСервисКриптографииDSSКлиент.ИспользоватьСервисОблачнойПодписи()
				И СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУчетнуюЗаписьОблачнойПодписи(МестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи, ОписаниеСледующее = Неопределено) 
	
	УчетнаяЗаписьОблачнойПодписи = КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча);
	Результат = ПроверитьНастройкиУчетнойЗаписиОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи, ОписаниеСледующее);
	
	Возврат Результат;
	
КонецФункции

// Получение модуля указанной подсистемы.
// Позволяет избежать ошибки синтаксической проверки, если подсистемы нет.
//
Функция ПолучитьМодульПодсистемы(ИмяМодуля, ИмяПодсистемы = "")
	
	Результат = Неопределено;
	
	ПредыдущееИмя = "СтандартныеПодсистемы.ЭлектроннаяОблачнаяПодпись";
	ЕстьПодсистема = Ложь;
	Если ЗначениеЗаполнено(ИмяПодсистемы) Тогда
		ЕстьПодсистема = ОбщегоНазначенияКлиент.ПодсистемаСуществует(ИмяПодсистемы);
	Иначе
		ЕстьПодсистема = ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПредыдущееИмя)
			ИЛИ ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS");
	КонецЕсли;
	
	Если ЕстьПодсистема Тогда
		Результат = ОбщегоНазначенияКлиент.ОбщийМодуль(ИмяМодуля);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ПроверитьНастройкиУчетнойЗаписиОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи, ОповещениеОЗавершении = Неопределено, ВидОперации = "")
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьОблачнойПодписи) Тогда
		Результат = Истина;
		
	ИначеЕсли ОповещениеОЗавершении <> Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Обнаружены неправильные настройки облачной подписи.';
							|en = 'Обнаружены неправильные настройки облачной подписи.'");
		Если ЗначениеЗаполнено(ВидОперации) Тогда
			ТекстОшибки = НСтр("ru = 'Для выполнения операции: ';
								|en = 'Для выполнения операции: '") + ВидОперации 
						+ Символы.ПС + НСтр("ru = 'не удалось получить настройки учетной записи облачной подписи.';
											|en = 'не удалось получить настройки учетной записи облачной подписи.'");
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Проверьте настройки учетной записи документооборота и настройки обмена с КО.';
														|en = 'Проверьте настройки учетной записи документооборота и настройки обмена с КО.'");
		
		РезультатВыполнения = КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыОперацииОблачнойПодписи(ПараметрыОперации, МестоХраненияКлюча)
	
	Если ЗначениеЗаполнено(МестоХраненияКлюча) Тогда
		ПарольПользователя = КриптографияЭДКОКлиентСервер.ПараметрыМестаХраненияКлюча(МестоХраненияКлюча, "Пароль");
		Если ПарольПользователя <> Неопределено Тогда
			ПараметрыОперации.Вставить("ПарольПользователя", ПарольПользователя);
			ПараметрыОперации.Вставить("ПоказатьДиалог", Ложь);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПараметрыОперацииОблачнойПодписи(МестоХраненияКлюча = Неопределено, ПараметрыОперации = Неопределено)
	
	Если ПараметрыОперации = Неопределено Тогда
		Результат = Новый Структура;
	Иначе
		Результат = ПараметрыОперации;
	КонецЕсли;
	Результат.Вставить("ОжидатьВыполнения", Ложь);
	
	ДополнитьПараметрыОперацииОблачнойПодписи(Результат, МестоХраненияКлюча);
	
	Возврат Результат;
	
КонецФункции

#Область ПолучитьУстановленныеПрограммы

Процедура ПолучитьУстановленныеПрограммы(ОповещениеОЗавершении, ФильтрПрограмм) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Параметры.Вставить("ФильтрПрограмм", ФильтрПрограмм);
	
	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
	ПутьМодуляКриптографии = "";
	Если ЭтоLinux Тогда
		ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
		Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
			ОписаниеОшибки = НСтр("ru = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.';
									|en = 'Не указан путь к программе криптографии в настройках электронной подписи и шифрования.'");
			ВыполнитьОбработкуОповещения(
				ОповещениеОЗавершении,
				КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", ОписаниеОшибки, Параметры));
			Возврат;
		КонецЕсли;
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(, ЭтоLinux,, ПутьМодуляКриптографии);
		
	Иначе
		Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьУстановленныеПрограммы_ПослеСозданияМенеджера", ЭтотОбъект, Параметры);
	
	СоздатьМенеджерКриптографии2(
		Оповещение,
		Криптопровайдер,
		Параметры);
	
КонецПроцедуры
	
Процедура ПолучитьУстановленныеПрограммы_ПослеСозданияМенеджера(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ВходящийКонтекст.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
		ВходящийКонтекст.Вставить("Алгоритм", Результат.Алгоритм);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПолучитьУстановленныеПрограммы_ОбработатьРезультат", 
			ЭтотОбъект, 
			ВходящийКонтекст,
			"ПолучитьУстановленныеПрограммы_ОшибкеВыполнения", ЭтотОбъект);
		
		Результат.МенеджерКриптографии.НачатьВызовПолучитьУстановленныеПрограммы(
			ОписаниеОповещения, 
			ВходящийКонтекст.ФильтрПрограмм);
			
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			КриптографияЭДКОКлиентСервер.ПодготовитьРезультат(Ложь, "ОписаниеОшибки", Результат.ОписаниеОшибки));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьУстановленныеПрограммы_ОбработатьРезультат(Программы, Параметры, ВходящийКонтекст) Экспорт
	
	Результат = Новый Структура("Выполнено, Программы", Истина, Новый Массив);
	
	Если ЗначениеЗаполнено(Программы) Тогда
		Результат.Программы = ОбщегоНазначенияЭДКОСлужебныйВызовСервера.JsonВСтруктура(Программы);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ПолучитьУстановленныеПрограммы_ОшибкеВыполнения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработкаОшибки(
		СтандартнаяОбработка, ВходящийКонтекст,
		"ПолучитьУстановленныеПрограммы",
		ОписаниеОшибкиНеУдалосьПолучитьУстановленныеПрограммы(), ИнформацияОбОшибке);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучитьПутьККриптоПроНаMacOSиLinux

// На основе метода БСП ПолучитьПутьКПрограммеПоУмолчанию
//
Процедура ПолучитьПутьККриптоПроНаMacOSиLinux(ОбработкаЗавершения) Экспорт
	
	Результат = Новый Структура("ПутьКПрограмме, Существует", "", Ложь);
	
	Пути = ПутиККриптоПроНаMacOSиLinux();
	
	ПутиКМодулямПрограммы = Пути.Получить(
		ОбщегоНазначенияКлиентСервер.ИмяТипаПлатформы());
	
	Если ПутиКМодулямПрограммы = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработкаЗавершения, Результат);
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	Контекст.Вставить("ПутиКМодулямПрограммы", ПутиКМодулямПрограммы);
	Контекст.Вставить("Индекс", -1);
	
	ПолучитьПутьКПрограммеПоУмолчаниюЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПутьКПрограммеПоУмолчанию.
Процедура ПолучитьПутьКПрограммеПоУмолчаниюЦиклНачало(Контекст)
	
	Если Контекст.ПутиКМодулямПрограммы.Количество() <= Контекст.Индекс + 1 Тогда
		// После цикла.
		ПолучитьПутьКПрограммеПоУмолчаниюЦиклЗавершение(Контекст, Ложь);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	
	ПроверитьПутьКПрограмме(Новый ОписаниеОповещения(
		"ПолучитьПутьКПрограммеПоУмолчаниюЦиклПослеПроверкиПути", ЭтотОбъект, Контекст),
		Контекст.ПутиКМодулямПрограммы.Получить(Контекст.Индекс))
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПутьКПрограммеПоУмолчанию.
Процедура ПолучитьПутьКПрограммеПоУмолчаниюЦиклПослеПроверкиПути(Существует, Контекст) Экспорт
	
	Если Существует <> Ложь Тогда
		ПолучитьПутьКПрограммеПоУмолчаниюЦиклЗавершение(Контекст, Существует);
		Возврат;
	КонецЕсли;
	
	ПолучитьПутьКПрограммеПоУмолчаниюЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПолучитьПутьКПрограммеПоУмолчанию.
Процедура ПолучитьПутьКПрограммеПоУмолчаниюЦиклЗавершение(Контекст, Существует)
	
	ТекущийПуть = Контекст.ПутиКМодулямПрограммы.Получить(
		?(Существует <> Истина, 0, Контекст.Индекс));
	
	Результат = Новый Структура("ПутьКПрограмме, Существует", ТекущийПуть, Существует);
	
	ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Результат);
	
КонецПроцедуры

// Функция реализована на основе метода ДобавитьПоставляемыеПутиКМодулямПрограмм БСП
//
Функция ПутиККриптоПроНаMacOSиLinux() Экспорт
	
	ПутиКриптоПро = Новый Соответствие;
	
	ПутиКриптоПро.Вставить("Linux_x86",    ПутиКМодулямПрограммыКриптоПроНаLinux32());
	ПутиКриптоПро.Вставить("Linux_x86_64", ПутиКМодулямПрограммыКриптоПроНаLinux64());
	ПутиКриптоПро.Вставить("MacOS_x86",    ПутиКМодулямПрограммыКриптоПроНаMacOS());
	ПутиКриптоПро.Вставить("MacOS_x86_64", ПутиКМодулямПрограммыКриптоПроНаMacOS());
	ПутиКриптоПро.Вставить("Linux_E2K",    ПутиКМодулямПрограммыКриптоПроНаLinuxE2K());
	ПутиКриптоПро.Вставить("Linux_ARM64",  ПутиКМодулямПрограммыКриптоПроНаLinuxARM64());
	
	Возврат ПутиКриптоПро;
	
КонецФункции

Функция ПутиКМодулямПрограммыКриптоПроНаLinuxE2K()
	
	МодулиПрограммы = Новый Массив;
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/lib64/libcapi10.so");
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/lib64/libcapi20.so");
	
	ПутиКМодулям = Новый Массив;
	ПутиКМодулям.Добавить(СтрСоединить(МодулиПрограммы, ":"));
	Возврат Новый ФиксированныйМассив(ПутиКМодулям);
	
КонецФункции

Функция ПутиКМодулямПрограммыКриптоПроНаLinuxARM64()
	
	МодулиПрограммы = Новый Массив;
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/lib64/libcapi10.so");
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/lib64/libcapi20.so");
	
	ПутиКМодулям = Новый Массив;
	ПутиКМодулям.Добавить(СтрСоединить(МодулиПрограммы, ":"));
	Возврат Новый ФиксированныйМассив(ПутиКМодулям);
	
КонецФункции

Функция ПутиКМодулямПрограммыКриптоПроНаLinux64()
	
	МодулиПрограммы = Новый Массив;
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/amd64/libcapi10.so");
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/amd64/libcapi20.so");
	
	ПутиКМодулям = Новый Массив;
	ПутиКМодулям.Добавить(СтрСоединить(МодулиПрограммы, ":"));
	Возврат Новый ФиксированныйМассив(ПутиКМодулям);
	
КонецФункции

Функция ПутиКМодулямПрограммыКриптоПроНаLinux32()
	
	МодулиПрограммы = Новый Массив;
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/ia32/libcapi10.so");
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/ia32/libcapi20.so");
	
	ПутиКМодулям = Новый Массив;
	ПутиКМодулям.Добавить(СтрСоединить(МодулиПрограммы, ":"));
	Возврат Новый ФиксированныйМассив(ПутиКМодулям);
	
КонецФункции

Функция ПутиКМодулямПрограммыКриптоПроНаMacOS()
	
	МодулиПрограммы = Новый Массив;
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/libcapi10.dylib");
	МодулиПрограммы.Добавить("/opt/cprocsp/lib/libcapi20.dylib");
	
	ПутиКМодулям = Новый Массив;
	ПутиКМодулям.Добавить(СтрСоединить(МодулиПрограммы, ":"));
	Возврат Новый ФиксированныйМассив(ПутиКМодулям);
	
КонецФункции

// Процедура взята из БСП
// Пути к программе разделены символом ":"
// Если путь существует, то существование остальных путей не проверяет!
Процедура ПроверитьПутьКПрограмме(ОбработкаЗавершения, ПутьКПрограмме) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработкаЗавершения", ОбработкаЗавершения);
	Контекст.Вставить("ПутьКПрограмме", ПутьКПрограмме);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Новый ОписаниеОповещения(
		"ПроверитьПутьКПрограммеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПутьКПрограмме.
Процедура ПроверитьПутьКПрограммеПослеПодключенияРасширенияРаботыСФайлами(РасширениеПодключено, Контекст) Экспорт
	
	Если Не РасширениеПодключено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Неопределено);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПутиКМодулям", СтрРазделить(Контекст.ПутьКПрограмме, ":", Ложь));
	Контекст.Вставить("Индекс", -1);
	
	ПроверитьПутьКПрограммеЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПутьКПрограмме.
//
// Параметры:
//  Контекст - Структура
//
Процедура ПроверитьПутьКПрограммеЦиклНачало(Контекст)
	
	Если Контекст.ПутиКМодулям.Количество() <= Контекст.Индекс + 1 Тогда
		// После цикла.
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Ложь);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	
	Файл = Новый Файл(Контекст.ПутиКМодулям[Контекст.Индекс]);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
		"ПроверитьПутьКПрограммеЦиклПослеПроверкиСуществованияФайла", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Продолжение процедуры ПроверитьПутьКПрограмме.
Процедура ПроверитьПутьКПрограммеЦиклПослеПроверкиСуществованияФайла(Существует, Контекст) Экспорт
	
	Если Существует Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработкаЗавершения, Истина);
		Возврат;
	КонецЕсли;
	
	ПроверитьПутьКПрограммеЦиклНачало(Контекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


