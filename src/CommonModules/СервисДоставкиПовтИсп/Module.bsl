////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиПовтИсп.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Параметры соединения к сервисам.
//
// Параметры:
//  ИмяСервиса	 - Строка - имя сервиса "БизнесСеть", "Рубрикатор", "ТорговыеПредложения"
// 
// Возвращаемое значение:
//  Структура - параметры соединения:
//   * Сервер - Строка - имя сервера.
//   * Порт - Число - порт соединения.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * Таймаут - Число - длительность ожидания ответа в секундах.
//   * ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL.
//   * Прокси - ИнтернетПрокси - параметры прокси-сервера.
//   * ИдентификаторПрограммы - Строка - уникальный идентификатор информационной базы.
//
Функция ПараметрыСоединения(ИмяСервиса) Экспорт

	ПараметрыСоединения = Неопределено;
	
	Если ИмяСервиса = "Доставка" Тогда
		ПараметрыСоединения = НовыйПараметрыСоединения("edi.1cfresh.com",443, Истина);
		ПараметрыСоединения.Аутентификация = Ложь;
		ПараметрыСоединения.Таймаут = 120;
	КонецЕсли;
	
	Возврат ПараметрыСоединения;

КонецФункции

Функция ТипыДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",   Новый ОписаниеТипов("Строка, Булево, Число, Дата, Null"));
	Результат.Вставить("Булево",    Новый ОписаниеТипов("Булево, Null"));
	Результат.Вставить("Число",     Новый ОписаниеТипов("Число, Null"));
	Результат.Вставить("Дата",      Новый ОписаниеТипов("Дата, Null"));
	Результат.Вставить("Строка",    Новый ОписаниеТипов("Строка, Null"));
	Результат.Вставить("Структура", Новый ОписаниеТипов("Структура, Null"));
	Результат.Вставить("Массив",    Новый ОписаниеТипов("Массив, Null"));
	Результат.Вставить("Таблица",   Новый ОписаниеТипов("ТаблицаЗначений, Null"));
	Результат.Вставить("Цена",      Новый ОписаниеТипов("Число, Null", 
		Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
		
	Результат.Вставить("Ссылка",    Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Заполняет соответствие ставок НДС.
//
// Возвращаемое значение:
//  Соответствие - Содержит список соответствий ставок НДС из сервиса ставкам НДС в прикладном решении:
//  *Ключ - Строка - строковое значение ставки НДС из сервиса доставки
//  *Значение - Строка - представление ставки НДС
//
Функция СоответствиеСтавокНДСИзСервиса() Экспорт
	
	СтавкиНДС = Новый Соответствие();
	СтавкиНДС.Вставить("0", "0%");
	СтавкиНДС.Вставить("10", "10%");
	СтавкиНДС.Вставить("18", "18%");
	СтавкиНДС.Вставить("10/110", "10/110");
	СтавкиНДС.Вставить("18/118", "18/118");
	СтавкиНДС.Вставить("БезНДС", "без НДС");
	СтавкиНДС.Вставить("20", "20%");
	СтавкиНДС.Вставить("20/120", "20/120");
	
	СервисДоставкиПереопределяемый.ЗаполнитьСоответствиеСтавокНДСИзСервиса(СтавкиНДС);
	
	Возврат СтавкиНДС;
	
КонецФункции

// Варианты времени отгрузки.
// 
// Возвращаемое значение:
//  Структура - Варианты времени отгрузки:
// * КакМожноСкорее - Число - устанавливается в 0
// * ВОпределенноеВремя - Число - устанавливается в 1
// * ВТечениеДня - Число - устанавливается в 2
Функция ВариантыВремениОтгрузки() Экспорт
	
	Возврат СервисДоставкиКлиентСервер.ВариантыВремениОтгрузки();
	
КонецФункции

// Варианты времени отгрузки списком.
// 
// Возвращаемое значение:
//  см. СервисДоставкиКлиентСервер.СписокВариантовВремениОтгрузки
Функция СписокВариантовВремениОтгрузки() Экспорт
	
	Возврат СервисДоставкиКлиентСервер.СписокВариантовВремениОтгрузки();
	
КонецФункции

// Получить идентификатор пользователя на портале.
// 
// Параметры:
//  ВладелецТикета - Строка - владелец тикета
// 
// Возвращаемое значение:
//  Произвольный, Неопределено - Получить идентификатор пользователя на портале
Функция ПолучитьИдентификаторПользователяНаПортале(ВладелецТикета) Экспорт
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Тикет = Данные.Тикет;
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	НастройкиСоединения = ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами();
	URLСервиса = СтрШаблон("https://%1/rest/public/ticket/check",
		ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(
			НастройкиСоединения.ДоменРасположенияСерверовИПП));
		
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("ticket");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тикет);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	ДанныеДляОбработки = ЗаписьДанныхСообщения.Закрыть();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод" , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки" , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета" , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки" , ДанныеДляОбработки);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут" , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,,,
		ДопПараметрыЗапроса);
	
	Если ТипЗнч(РезультатОперации) = Тип("Структура")
		И РезультатОперации.КодСостояния = 200
		И РезультатОперации.Свойство("Содержимое") Тогда
		
		Результат = ОбщегоНазначения.JSONВЗначение(РезультатОперации.Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйПараметрыСоединения(Сервер = "", Порт = 80, ЗащищенноеСоединение = Ложь)

	Результат = Новый Структура;
	Результат.Вставить("Сервер",         Сервер);
	Результат.Вставить("Порт",           Порт);
	Результат.Вставить("Аутентификация", Ложь);
	Результат.Вставить("Таймаут",        120);
	Результат.Вставить("Прокси",         Неопределено);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	Результат.Вставить("ИдентификаторПрограммы", Неопределено);
	
	Если ЗащищенноеСоединение Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,Новый СертификатыУдостоверяющихЦентровОС);
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	Иначе
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	КонецЕсли;
	
	Результат.ИдентификаторПрограммы = ИдентификаторПрограммы();
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторПрограммы()
	
	Возврат 0;
	
КонецФункции

#КонецОбласти