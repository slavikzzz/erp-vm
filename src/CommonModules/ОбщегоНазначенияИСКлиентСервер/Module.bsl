#Область ПрограммныйИнтерфейс

// Это расширенная версия гос ИС.
// 
// Параметры:
//  Подсистема - Неопределено, Строка - Подсистема
// 
// Возвращаемое значение:
//  Булево - Это расширенная версия гос ИС
Функция ЭтоРасширеннаяВерсияГосИС(Подсистема = Неопределено) Экспорт
	
	Если Подсистема = Неопределено Тогда
		Подсистема = "БазоваяФункциональность";
	КонецЕсли;
	
	Возврат ОбщегоНазначенияИСКлиентСерверПовтИсп.ЭтоРасширеннаяВерсияГосИС();
	
КонецФункции

#Область ИнтегрируемыеПодсистемы

Функция ПолноеИмяПодсистемы(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("ГосИС.%1", ИмяПодсистемы);
	
КонецФункции

Функция ПредставлениеПодсистемы(Представление = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Возврат НСтр("ru = '<Интеграция>';
					|en = '<Интеграция>'");
	Иначе
		Возврат Представление;
	КонецЕсли;
	
КонецФункции

Функция МодульКлиент(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1Клиент", ИмяПодсистемы);
	
КонецФункции

Функция МодульСервер(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1", ИмяПодсистемы);
	
КонецФункции

Функция МодульКлиентСервер(ИмяПодсистемы) Экспорт
	
	Возврат СтрШаблон("Интеграция%1КлиентСервер", ИмяПодсистемы);
	
КонецФункции

// Данные представления срока годности.
// 
// Параметры:
//  СрокГодности - Дата - Срок годности
//  ПроверяемаяДата - Дата - Проверяемая дата
// 
// Возвращаемое значение:
//  Структура - Данные представления срока годности:
// * ОсталосьДней - Число - Осталось дней
// * Представление - Строка, Неопределено - Представление срока годности
Функция ДанныеПредставленияСрокаГодности(СрокГодности, ПроверяемаяДата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОсталосьДней");
	ВозвращаемоеЗначение.Вставить("Представление");
	
	ВозвращаемоеЗначение.ОсталосьДней = (НачалоДня(СрокГодности) - НачалоДня(ПроверяемаяДата)) / (60 * 60 * 24);
	
	Если ВозвращаемоеЗначение.ОсталосьДней < 0 Тогда
		ВозвращаемоеЗначение.Представление = НСтр("ru = 'Просрочен';
													|en = 'Просрочен'");
	ИначеЕсли ВозвращаемоеЗначение.ОсталосьДней = 0 Тогда
		ВозвращаемоеЗначение.Представление = НСтр("ru = 'Сегодня';
													|en = 'Сегодня'");
	Иначе
		ПредставлениеДней                  = НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня';
													|en = ';%1 день;;%1 дня;%1 дней;%1 дня'");
		ПредставлениеЛет                   = НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 года';
													|en = ';%1 год;;%1 года;%1 лет;%1 года'");
		ОсталосьЛет = Цел(ВозвращаемоеЗначение.ОсталосьДней / 365);
		Если ОсталосьЛет = 0 Тогда
			ВозвращаемоеЗначение.Представление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				ПредставлениеДней, ВозвращаемоеЗначение.ОсталосьДней);
		Иначе
			ДанныеПредставления = Новый Массив();
			ДанныеПредставления.Добавить(
				СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					ПредставлениеЛет, ОсталосьЛет));
			ОсталосьДней = ВозвращаемоеЗначение.ОсталосьДней - (ОсталосьЛет * 365);
			Если ОсталосьДней > 0 Тогда
				ДанныеПредставления.Добавить(
					СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
						ПредставлениеДней, ОсталосьДней));
			КонецЕсли;
			ВозвращаемоеЗначение.Представление = СтрСоединить(ДанныеПредставления, ", ");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Ошибки

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если ПустаяСтрока(Сообщение.ТекстОшибки) Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Если Сообщение.Свойство("ТребуетсяПодписание") Тогда
		Сообщение.ТребуетсяПодписание = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст для представления внутренней ошибки библиотек ГосИС.
//
// Параметры:
//  ПредставлениеПодсистемы  - Строка - представление интегрированной подсистемы
//  УточнениеОшибки - Строка - описание возникшей ошибки
//
// Возвращаемое значение:
//	Строка - дополненное описание ошибки
//
Функция ТекстОшибки(Знач ПредставлениеПодсистемы = "", Знач УточнениеОшибки) Экспорт
	
	ПредставлениеПодсистемы = ПредставлениеПодсистемы(ПредставлениеПодсистемы);
	
	ТекстОшибки = 
		СтрШаблон(НСтр("ru = 'Внутренняя ошибки библиотеки %1.';
						|en = 'Внутренняя ошибки библиотеки %1.'"),ПредставлениеПодсистемы)
		+ Символы.ПС
		+ УточнениеОшибки;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Новый параметры ошибки.
// 
// Возвращаемое значение:
//  Структура - Новый параметры ошибки:
// * ВыбрасыватьИсключение - Булево - 
// * ЗаписыватьВЖурналРегистрации - Булево - 
// * ПрерватьОбработкуОчередиСообщений - Булево - 
// * СообщатьОбОшибке - Булево - 
Функция НовыйПараметрыОшибки() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ВыбрасыватьИсключение",             Ложь);
	ВозвращаемоеЗначение.Вставить("ЗаписыватьВЖурналРегистрации",      Ложь);
	ВозвращаемоеЗначение.Вставить("ПрерватьОбработкуОчередиСообщений", Ложь);
	ВозвращаемоеЗначение.Вставить("СообщатьОбОшибке",                  Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ТекстыСтандартныхСообщений

Функция ТекстКомандаНеМожетБытьВыполнена() Экспорт
	Возврат НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
				|en = 'Команда не может быть выполнена для указанного объекта.'");
КонецФункции

#КонецОбласти

#Область Перекодировка

// Возвращает индекси вида продукции по переданному параметру и наоборот, а именно:
//  - Алкогольная - 0.
//  - Табак - 1.
//  - Обувь - 2.
// 
// Параметры:
// 	ВидПродукцииИлиИндекс - Число, ПеречислениеСсылка.ВидыПродукцииИС - Параметр расчета индекса или значения по индексу.
// Возвращаемое значение:
// 	Число, ПеречислениеСсылка.ВидыПродукцииИС - Индекс или значение по индексу.
//
Функция ИндексВидаПродукцииИС(ВидПродукцииИлиИндекс) Экспорт
	
	Если ВидПродукцииИлиИндекс = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли ВидПродукцииИлиИндекс = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ИначеЕсли ВидПродукцииИлиИндекс = 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ИначеЕсли ВидПродукцииИлиИндекс = 3 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ИначеЕсли ВидПродукцииИлиИндекс = 4 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 5 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ИначеЕсли ВидПродукцииИлиИндекс = 6 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
	ИначеЕсли ВидПродукцииИлиИндекс = 7 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
	ИначеЕсли ВидПродукцииИлиИндекс = 8 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
	ИначеЕсли ВидПродукцииИлиИндекс = 9 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
	ИначеЕсли ВидПродукцииИлиИндекс = 10 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ИначеЕсли ВидПродукцииИлиИндекс = 11 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
	ИначеЕсли ВидПродукцииИлиИндекс = 12 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 13 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
	ИначеЕсли ВидПродукцииИлиИндекс = 14 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
	ИначеЕсли ВидПродукцииИлиИндекс = 15 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 16 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
	ИначеЕсли ВидПродукцииИлиИндекс = 17 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	ИначеЕсли ВидПродукцииИлиИндекс = 18 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 19 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво");
	ИначеЕсли ВидПродукцииИлиИндекс = 20 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 21 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 22 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 23 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 24 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты");
	ИначеЕсли ВидПродукцииИлиИндекс = 25 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей");
	ИначеЕсли ВидПродукцииИлиИндекс = 26 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 27 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 28 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 29 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 30 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла");
	ИначеЕсли ВидПродукцииИлиИндекс = 31 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 32 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия");
	ИначеЕсли ВидПродукцииИлиИндекс = 33 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 34 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы");
	ИначеЕсли ВидПродукцииИлиИндекс = 35 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы");
	ИначеЕсли ВидПродукцииИлиИндекс = 36 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея");
	ИначеЕсли ВидПродукцииИлиИндекс = 37 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов");
	ИначеЕсли ВидПродукцииИлиИндекс = 38 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки");
	ИначеЕсли ВидПродукцииИлиИндекс = 39 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности");
	ИначеЕсли ВидПродукцииИлиИндекс = 40 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция");
	ИначеЕсли ВидПродукцииИлиИндекс = 41 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла");
	ИначеЕсли ВидПродукцииИлиИндекс = 42 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки");
	ИначеЕсли ВидПродукцииИлиИндекс = 43 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ИначеЕсли ВидПродукцииИлиИндекс = 44 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации");
	ИначеЕсли ВидПродукцииИлиИндекс = 45 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
	ИначеЕсли ВидПродукцииИлиИндекс = 46 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20");
	ИначеЕсли ВидПродукцииИлиИндекс = 47 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025");
	ИначеЕсли ВидПродукцииИлиИндекс = 48 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 49 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС");
	ИначеЕсли ВидПродукцииИлиИндекс = 50 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы");
	ИначеЕсли ВидПродукцииИлиИндекс = 51 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия");
	ИначеЕсли ВидПродукцииИлиИндекс = 52 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты");
	ИначеЕсли ВидПродукцииИлиИндекс = 53 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства");
	ИначеЕсли ВидПродукцииИлиИндекс = 54 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025");
	ИначеЕсли ВидПродукцииИлиИндекс = 99 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат 0;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		Возврат 1;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
		Возврат 2;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность") Тогда
		Возврат 3;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат 4;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
		Возврат 5;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		Возврат 6;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
		Возврат 7;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
		Возврат 8;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски") Тогда
		Возврат 9;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		Возврат 10;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
		Возврат 11;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
		Возврат 12;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики") Тогда
		Возврат 13;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы") Тогда
		Возврат 14;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Возврат 15;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво") Тогда
		Возврат 16;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		Возврат 17;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция") Тогда
		Возврат 18;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Возврат 19;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
		Возврат 20;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС") Тогда
		Возврат 21;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
		Возврат 22;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат 23;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат 24;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат 25;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция") Тогда
		Возврат 26;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат 27;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат 28;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат 29;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат 30;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат 31;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат 32;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат 33;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат 34;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат 35;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат 36;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат 37;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
		Возврат 38;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат 39;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат 40;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат 41;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
		Возврат 42;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
		Возврат 43;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации") Тогда
		Возврат 44;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
		Возврат 45;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20") Тогда
		Возврат 46;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025") Тогда
		Возврат 47;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС") Тогда
		Возврат 48;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС") Тогда
		Возврат 49;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы") Тогда
		Возврат 50;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия") Тогда
		Возврат 51;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты") Тогда
		Возврат 52;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства") Тогда
		Возврат 53;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025") Тогда
		Возврат 54;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка") Тогда
		Возврат 99;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВидовПродукции

// Возвращает признак принадлежности переданного в параметре вида продукции к виду продукции ИС МП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак вкючения молочной продукции
// Возвращаемое значение:
//  Булево - Принадлежность к виду продукции ИСМП.
//
Функция ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	ВидыПродукцииИСМП = ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию, ВключатьМолочнуюПродукцию);
	
	Возврат ВидыПродукцииИСМП.Найти(ВидПродукции) <> Неопределено;

КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к виду продукции МОТП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Булево - Принадлежность к виду продукции МОТП.
//
Функция ЭтоПродукцияМОТП(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
КонецФункции

// Возвращает перечень маркируемой продукции, оборот которой фиксируется в ИС МП.
//
// Параметры:
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак включения молочной продукции
//  ВключатьАлкоголь          - Булево - Признак включения пивной и слабоалкогольной продукции
//
// Возвращаемое значение:
//   Массив Из ПеречислениеСсылка.ВидыПродукцииИС - список видов маркируемой продукции ИСМП.
//
Функция ВидыПродукцииИСМП(ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина, ВключатьАлкоголь = Истина) Экспорт
	
	ВидыПродукцииИСМП = Новый Массив();
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия"));
	
	Если МясоИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС"));
	КонецЕсли;
	
	Если ПечатнаяПродукцияИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция"));
	КонецЕсли;
	Если СтроительныеМатериалыИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы"));
	КонецЕсли;
	Если ОтопительныеПриборыИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы"));
	КонецЕсли;
	Если БакалеяИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея"));
	КонецЕсли;
	Если ТелефоныИНоутбукиИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки"));
	КонецЕсли;
	Если ПечатныеПлатыИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты"));
	КонецЕсли;
	Если ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности"));
	КонецЕсли;
	Если КабельнаяПродукцияИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция"));
	КонецЕсли;
	Если МоторныеМаслаИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла"));
	КонецЕсли;
	Если ПолимерныеТрубыИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы"));
	КонецЕсли;
	Если СладостиИКондитерскиеИзделияИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия"));
	КонецЕсли;
	Если ДезинфицирующиеСредстваИспользуется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства"));
	КонецЕсли;
	Если БАДы2025Используется() Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025"));
	КонецЕсли;
	
	Если ВключатьТабачнуюПродукцию Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"));
	КонецЕсли;
	
	Если ВключатьМолочнуюПродукцию Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	КонецЕсли;
	
	Если ВключатьАлкоголь Тогда
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
		ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
		Если АлкогольнаяПродукцияДо9ПроцентовИспользуется() Тогда
			ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидыПродукцииИСМП;
	
КонецФункции

// Признак использования наборов для вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Признак использования наборов для вида продукции.
Функция ВидПродукцииИспользуетНаборы(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПолимерныеТрубыИспользуетНабор();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.СладостиИКондитерскиеИзделияИспользуетНабор();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает список товарных групп, поддерживающих ОСУ при продаже
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС
Функция ВидыПродукцииОбъемноСортовогоУчета() Экспорт
	
	ВидыПродукции = Новый Массив();
	
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС"));
	
	Возврат ВидыПродукции;
	
КонецФункции

// Функция возвращает список товарных групп, поддерживающих ОСУ при внутреннем перемещении
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС
Функция ВидыПродукцииОбъемноСортовогоУчетаДляВнутреннегоПеремещения() Экспорт
	
	ВидыПродукции = Новый Массив();
	
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов"));
	
	Возврат ВидыПродукции;
	
КонецФункции

// Функция возвращает список товарных групп, подлежащих прослеживанию перемещений между МОД
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС
Функция ВидыПродукцииПрослеживаемогоПеремещенияМеждуМОД() Экспорт
	
	ВидыПродукции = Новый Массив();
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов"));
	
	Возврат ВидыПродукции;
	
КонецФункции

// Признак использования групповых упаковок для вида продукции.
// 
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
// Возвращаемое значение:
// 	Булево - Признак использования групповых упаковок для вида продукции.
Функция ВидПродукцииИспользуетГрупповыеУпаковки(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.ПолимерныеТрубыИспользуетГрупповуюУпаковку();
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия") Тогда
		Возврат ОбщегоНазначенияИСМПКлиентСервер.СладостиИКондитерскиеИзделияИспользуетГрупповуюУпаковку();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вид продукции ИС МП требует указание срока годности в операциях нанесения КМ
// 
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  УчитыватьМолочнуюПродукцию - Булево - Флаг учета молочной продукции
// 
// Возвращаемое значение:
//  Булево - вид продукции требует указания срока годности
Функция ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции, УчитыватьМолочнуюПродукцию = Истина) Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции, УчитыватьМолочнуюПродукцию);
	
КонецФункции

Функция ВидыПродукцииЕГАИС() Экспорт
	
	ВидыПродукцииЕГАИС = Новый Массив;
	ВидыПродукцииЕГАИС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
	ВидыПродукцииЕГАИС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ВидыПродукцииЕГАИС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
	ВидыПродукцииЕГАИС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов"));
	
	Возврат ВидыПродукцииЕГАИС;
	
КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к молочной продукции ИСМП.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Булево - Принадлежность к виду молочной продукции ИСМП.
//
Функция ЭтоМолочнаяПродукцияИСМП(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
КонецФункции

// Возвращает признак принадлежности переданного в параметре вида продукции к видам продукции, подконтрольным учету в ВетИС.
//
// Параметры:
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для анализа
// Возвращаемое значение:
//  Булево - Истина, если по виду продукции ведется учет в ВетИС.
//
Функция ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции) Экспорт
	Возврат ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС");
КонецФункции

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ВидУпаковки                 - ПеречислениеСсылка.ТипыУпаковок - тип упаковки
//  НеЗаполненКакУпаковка       - Булево - Истина если пустой вид рассматривать как "возможно упаковка"
//  ВключатьОбъемноСортовойУчет - Булево - Обработка объемно-сортовых кодов
//Возвращаемое значение:
//   Булево - Истина, если вид упаковки относится к логистической или групповой.
Функция ЭтоУпаковкаПоВиду(ВидУпаковки, НеЗаполненКакУпаковка = Ложь, ВключатьОбъемноСортовойУчет = Истина) Экспорт
	
	Возврат ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		Или ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		Или ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")
		Или (ВключатьОбъемноСортовойУчет 
			И ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет"))
		Или (НеЗаполненКакУпаковка И ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ПустаяСсылка"));
	
КонецФункции

#КонецОбласти

// Конвертирует двоичные данные в Base64
// 
// Параметры:
// 	ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
// Возвращаемое значение:
// 	Строка - Строка в Base64
Функция ДвоичныеДанныеBase64(ДвоичныеДанные) Экспорт
	
	Base64 = Base64Строка(ДвоичныеДанные);
	Base64 = СтрЗаменить(Base64, Символы.ПС, "");
	Base64 = СтрЗаменить(Base64, Символы.ВК, "");
	
	Возврат Base64;
	
КонецФункции

// Формирует представление параметра в формате CamelCase в строковое представление с пробелами.
// 
// Параметры:
//  ИмяПараметра - Произвольный - Имя параметра.
// 
// Возвращаемое значение:
//  Строка - Представление параметра с пробелами.
Функция ПредставлениеВстроенногоИмени(ИмяПараметра) Экспорт
	
	ДлинаСтроки = СтрДлина(ИмяПараметра);
	
	Если ДлинаСтроки = 0 Тогда
		Возврат ИмяПараметра;
	КонецЕсли;
	
	ИтоговыеДанные      = Новый Массив();
	ПредыдущийЗаглавный = Ложь;
	
	Для НомерСимвола = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол      = Сред(ИмяПараметра, НомерСимвола, 1);
		ТекущийЗаглавный   = (ТекущийСимвол = ВРег(ТекущийСимвол));
		СледующийЗаглавный = Ложь;
		Если НомерСимвола < ДлинаСтроки Тогда
			СледующийСимвол    = Сред(ИмяПараметра, НомерСимвола + 1, 1);
			СледующийЗаглавный = (СледующийСимвол = ВРег(СледующийСимвол));
		КонецЕсли;
		
		Если НомерСимвола = 1 Тогда
			ИтоговыеДанные.Добавить(Врег(ТекущийСимвол));
		Иначе
			Если ПредыдущийЗаглавный Тогда
				ИтоговыеДанные.Добавить(ТекущийСимвол);
			Иначе
				Если ТекущийЗаглавный Тогда
					ИтоговыеДанные.Добавить(" ");
					Если СледующийЗаглавный Тогда
						ИтоговыеДанные.Добавить(ТекущийСимвол);
					Иначе
						ИтоговыеДанные.Добавить(НРег(ТекущийСимвол));
					КонецЕсли;
				Иначе
					ИтоговыеДанные.Добавить(ТекущийСимвол);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийЗаглавный = (ТекущийСимвол = ВРег(ТекущийСимвол));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИтоговыеДанные);
	
КонецФункции

// Функция возвращает текущее рабочее место пользователя
// 
// Возвращаемое значение:
//  ОпределяемыйТип.РабочиеМестаИС - Рабочее место пользователя
Функция РабочееМестоПользователя() Экспорт
	
	#Если Сервер Тогда
		
		МодульМенеджерОборудованияВызовСервера = ОбщегоНазначения.ОбщийМодуль("МенеджерОборудованияВызовСервера");
		ТекущееРабочееМесто = МодульМенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		
	#ИначеЕсли ВнешнееСоединение Тогда
		
		ТекущееРабочееМесто = Неопределено;
		
	#Иначе
		
		
		Если МенеджерОборудованияИСКлиентПовтИсп.ИспользуетсяПодсистемаБиблиотекиБПО3() Тогда
			МодульМенеджерОборудованияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияКлиент");
			ТекущееРабочееМесто = МодульМенеджерОборудованияКлиент.РабочееМестоКлиента();
		Иначе
			МодульМенеджерОборудованияВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("МенеджерОборудованияВызовСервера");
			ТекущееРабочееМесто = МодульМенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат ТекущееРабочееМесто;
	
КонецФункции

Функция ПересечениеМассивов(Массив1, Массив2) Экспорт
	
	Если Массив1.Количество() >= Массив2.Количество() Тогда
		Коллекция1 = Массив1;
		Коллекция2 = Массив2;
	Иначе
		Коллекция1 = Массив2;
		Коллекция2 = Массив1;
	КонецЕсли;
	
	ЭлементыКоллекции = Новый Соответствие;
	Для Каждого Элемент Из Коллекция1 Цикл
		ЭлементыКоллекции.Вставить(Элемент, Истина);
	КонецЦикла;
	
	ОбщиеЭлементы = Новый Массив;
	
	Для Каждого Элемент Из Коллекция2 Цикл
		Если ЭлементыКоллекции[Элемент] <> Неопределено Тогда
			ОбщиеЭлементы.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщиеЭлементы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСДатами

Функция ДатаИзСтрокиUNIX(Знач Значение, Делитель = 1000, ПриводитьКМестномуВремени = Истина) Экспорт
	
	Значение = '19700101' + Цел(Значение / Делитель);
	
	Если ПриводитьКМестномуВремени Тогда
		Возврат МестноеВремя(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДоступностьРеквизитовДокументов

// Устанавливает признак доступности для массива элементов формы.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма, для элементов которой устанавливается признак доступности. 
//  МассивЭлементов  - Массив Из Строка - содержит имена элементов формы.
//  Доступно         - Булево           - признак доступности.
//
Процедура УстановитьДоступностьЭлементовФормы(Форма, МассивЭлементов, Доступно) Экспорт
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		ТекущийЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
		
		Если ТекущийЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ТекущийЭлемент);
		
		Если ТипЭлемента = Тип("КнопкаФормы")
		 Или ТипЭлемента = Тип("ГруппаФормы")
			И (ТекущийЭлемент.Вид = ВидГруппыФормы.Подменю
			Или ТекущийЭлемент.Вид = ВидГруппыФормы.ГруппаКнопок) Тогда
			Форма.Элементы[ИмяЭлемента].Доступность = Доступно;
		Иначе
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Не Доступно;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно устанавливает для подчиненных элементов типа "ПолеФормы" - признак "ТолькоПросмотр",
// для подчиненных элементов типа "КнопкаФормы" - признак "Доступность", за исключением элементов,
// имена которых перечислены в исключениях.
//
// Параметры:
//  ГруппаЭлементовФормы - ГруппаФормы, ТаблицаФормы - Группа элементов управляемой формы.
//  Доступность          - Булево      - Признак доступности подчиненных элементов.
//  Исключения           - Строка, Массив Из Строка - Имена элементов формы.
// 
Процедура УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ГруппаЭлементовФормы, Доступность, Исключения = "") Экспорт
	
	ТипГруппыФормы = ТипЗнч(ГруппаЭлементовФормы);
	Если НЕ (ТипГруппыФормы = Тип("ГруппаФормы") или ТипГруппыФормы = Тип("ТаблицаФормы")) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	ТипИсключения = ТипЗнч(Исключения);
	Если ТипИсключения = Тип("Строка") и ЗначениеЗаполнено(Исключения) Тогда
		МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исключения, ", ");
	ИначеЕсли ТипИсключения = Тип("Массив") Тогда
		МассивИсключений = Исключения;
	КонецЕсли;
	
	Для Каждого ЭлементФормы из ГруппаЭлементовФормы.ПодчиненныеЭлементы Цикл
		
		Если НЕ МассивИсключений.Найти(ЭлементФормы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементФормы);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда 
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаФормы") Тогда
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КоманднаяПанель, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КонтекстноеМеню, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы.ТолькоПросмотр = НЕ Доступность;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") Тогда
			ЭлементФормы.Доступность = Доступность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура НастроитьОтборПоОрганизации(Форма, Результат, Префикс = Неопределено, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Форма.Организации.ЗагрузитьЗначения(Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
	ИначеЕсли Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда
		Форма.Организации.Очистить();
	Иначе
		Форма.Организации.Очистить();
		ЭлементСписка = Форма.Организации.Добавить();
		ЭлементСписка.Значение = Результат;
		Если Не(ЭлементСписка.Значение = Результат) Тогда
			Форма.Организации.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Организации.Количество() = 1 Тогда
		Форма.Организация = Форма.Организации.Получить(0).Значение;
		Форма.ОрганизацииПредставление = Строка(Форма.Организация);
	ИначеЕсли Форма.Организации.Количество() = 0 Тогда
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = "";
	Иначе
		Форма.Организация = Неопределено;
		Форма.ОрганизацииПредставление = Строка(Форма.Организации);
	КонецЕсли;
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		Если Форма.Организации.Количество() > 1 Тогда
			Окончание = "Организации";
		Иначе 
			Окончание = "Организация";
		КонецЕсли;
		
		Если Значение = "Отбор" Тогда
			Постфикс = Окончание;
		Иначе
			Постфикс = "Отбор" + Окончание;
		КонецЕсли;
		
		СтраницыОтбораОрганизация = Форма.Элементы.Найти("Страницы" + Значение + Постфикс);
		Если СтраницыОтбораОрганизация <> Неопределено Тогда
			СтраницыОтбораОрганизация.ТекущаяСтраница = Форма.Элементы["Страница" + Значение + Окончание];
		КонецЕсли;
	КонецЦикла;
	
	Если Префикс <> Неопределено Тогда
		ЭлементОтбораОрганизация = Форма.Элементы.Найти(Префикс + ?(Форма.Организации.Количество() > 1,
		                                                                "Организации",
		                                                                "Организация"));
		Если ЭлементОтбораОрганизация <> Неопределено Тогда
			Форма.ТекущийЭлемент = ЭлементОтбораОрганизация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПредставленияНоменклатуры() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Номенклатура",               Неопределено);
	Параметры.Вставить("Характеристика",             Неопределено);
	Параметры.Вставить("ХарактеристикиИспользуются", Ложь);
	Параметры.Вставить("Серия",                      Неопределено);
	Параметры.Вставить("СерииИспользуются",          Ложь);
	Параметры.Вставить("ТолькоПросмотр",             Неопределено);
	Параметры.Вставить("ДляОтображения",             Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ПредставлениеНоменклатурыФорматированнойСтрокой(Параметры) Экспорт
	
	Номенклатура               = Параметры.Номенклатура;
	Характеристика             = Параметры.Характеристика;
	ХарактеристикиИспользуются = Параметры.ХарактеристикиИспользуются;
	Серия                      = Параметры.Серия;
	СерииИспользуются          = Параметры.СерииИспользуются;
	ТолькоПросмотр             = Параметры.ТолькоПросмотр;
	ДляОтображения             = Параметры.ДляОтображения;
	
	МассивСтрок = Новый Массив;
	
	Если ТолькоПросмотр Тогда
		ЦветТекста = WebЦвета.Серый; // ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	Иначе
		ЦветТекста = Неопределено;
	КонецЕсли;
	
	ПустоеЗначение = Истина;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПустоеЗначение = Ложь;
		Если ТолькоПросмотр Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Номенклатура);
		Иначе 
			Ссылка = "ВыбратьНоменклатуру";
		КонецЕсли;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			СокрЛП(Номенклатура), , ЦветТекста, , Ссылка));
	Иначе
		Если ТолькоПросмотр Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Номенклатура не указана';
					|en = 'Номенклатура не указана'"),, ЦветТекста));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'выбрать номенклатуру';
					|en = 'выбрать номенклатуру'"), , , , "ВыбратьНоменклатуру"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустоеЗначение И (ХарактеристикиИспользуются Или ДляОтображения) Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Характеристика) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Характеристика);
		Иначе
			Ссылка = "ВыбратьХарактеристику";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Характеристика), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			Если Не ДляОтображения Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '(характеристика не указана)';
						|en = '(характеристика не указана)'"),,ЦветТекста));
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать характеристику)';
					|en = '(выбрать характеристику)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ПустоеЗначение И (СерииИспользуются Или ДляОтображения) Тогда
	
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(" "));
		
		Если ТолькоПросмотр И ЗначениеЗаполнено(Серия) Тогда
			Ссылка = ПолучитьНавигационнуюСсылку(Серия);
		Иначе 
			Ссылка = "ВыбратьСерию";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Серия) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон("(%1)", Серия), , ЦветТекста, , Ссылка));
		ИначеЕсли ТолькоПросмотр Тогда
			Если Не ДляОтображения Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru = '(серия не указана)';
						|en = '(серия не указана)'"),,ЦветТекста));
			КонецЕсли;
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = '(выбрать серию)';
					|en = '(выбрать серию)'"), , , , Ссылка));
		КонецЕсли;
	
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

// Сформировать текст ошибки по результату отправки запроса.
//
// Параметры:
//  URLЗапроса - Строка - Заголовок ошибки, например: Параметры авторизации не получены из ИС МОТП.
//  РезультатОтправкиЗапроса - Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиПоРезультатуОтправкиЗапроса(URLЗапроса, РезультатОтправкиЗапроса) Экспорт
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки: %3.';
				     |en = 'При выполнении запроса %1 возникла ошибка.
				     |Код состояния HTTP: %2.
				     |Текст ошибки: %3.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.КодСостояния,
			ПредставлениеОшибкиИзJSON(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON));
			
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При отправке запроса %1 возникла ошибка.
				     |Текст ошибки: %2.';
				     |en = 'При отправке запроса %1 возникла ошибка.
				     |Текст ошибки: %2.'"),
			URLЗапроса,
			РезультатОтправкиЗапроса.ТекстОшибки);

	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено, Произвольный - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь) Экспорт
	
	РезультатРазбора = Неопределено;
	
	#Если ВебКлиент Тогда
		
		РезультатРазбора = ОбщегоНазначенияИСВызовСервера.ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие);	
		
	#Иначе
	
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТекстJSON);
		
		Попытка
			РезультатРазбора = ПрочитатьJSON(Чтение, ПреобразовыватьВСоответствие);
		Исключение
			РезультатРазбора = Неопределено;
		КонецПопытки;
		
	#КонецЕсли
	
	Возврат РезультатРазбора;
	
КонецФункции

// Формирует из структуры текст JSON
// 
// Параметры:
// 	Структура                    - Структура - Произвольная структура данных
//  УдалитьПробелыИПереносыСтрок - Булево    - признак использования отступов, по умолчанию Истина.
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок = Ложь) Экспорт
	
	ТекстJSON = "";
	
	#Если ВебКлиент Тогда
		
		ТекстJSON = ОбщегоНазначенияИСВызовСервера.ОбъектВТекстJSON(Структура, УдалитьПробелыИПереносыСтрок);	
		
	#Иначе
	
		Если УдалитьПробелыИПереносыСтрок Тогда
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "");
		Иначе
			ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  ");
		КонецЕсли;
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		
		ЗаписатьJSON(ЗаписьJSON, Структура);
		
		ТекстJSON = ЗаписьJSON.Закрыть();
	
	#КонецЕсли
	
	Возврат ТекстJSON;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НовыеТоварныеГруппыВнедрение

#Область Используется

Функция МясоИспользуется()
	Возврат Ложь;
КонецФункции

Функция ПечатнаяПродукцияИспользуется()
	Возврат Истина;
КонецФункции

Функция СтроительныеМатериалыИспользуется()
	Возврат Истина;
КонецФункции

Функция ОтопительныеПриборыИспользуется()
	Возврат Истина;
КонецФункции

Функция БакалеяИспользуется()
	Возврат Истина;
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИспользуется()
	Возврат Ложь;
КонецФункции

Функция ТелефоныИНоутбукиИспользуется()
	Возврат Истина;
КонецФункции

Функция ПечатныеПлатыИспользуется()
	Возврат Истина;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуется()
	Возврат Истина;
КонецФункции

Функция КабельнаяПродукцияИспользуется()
	Возврат Истина;
КонецФункции

Функция МоторныеМаслаИспользуется()
	Возврат Истина;
КонецФункции

Функция ПолимерныеТрубыИспользуется()
	Возврат Истина;
КонецФункции

Функция СладостиИКондитерскиеИзделияИспользуется()
	Возврат Истина;
КонецФункции

Функция ДезинфицирующиеСредстваИспользуется()
	Возврат Истина;
КонецФункции

Функция БАДы2025Используется()
	Возврат Истина;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

Функция ПредставлениеЕдиницыЧастичногоВыбытия(ВидПродукции) Экспорт
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
		Возврат НСтр("ru = 'л.';
					|en = 'л.'");
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат НСтр("ru = 'мл.';
					|en = 'мл.'");
	Иначе
		Возврат НСтр("ru = 'шт.';
					|en = 'шт.'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ИмяОбъектаИзИмениФормы(Форма, ПолноеИмя = Истина) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если ПолноеИмя Тогда
		ИмяОбъекта = ЧастиИмени[0] + "." + ЧастиИмени[1];
	Иначе
		ИмяОбъекта = ЧастиИмени[1];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

#Область РаботаСJSONТекстом

// Конвертирует входящий текст JSON содержащий globalErrors в представление ошибки.
// 
// Параметры:
// 	ТекстВходящегоСообщенияJSON - Строка - Текст сообщения JSON.
// Возвращаемое значение:
// 	Строка - Представление ошибки.
Функция ПредставлениеОшибкиИзJSON(ТекстВходящегоСообщенияJSON)
	
	ДанныеJSON = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON);
	
	Если ДанныеJSON <> Неопределено
		И ТипЗнч(ДанныеJSON) = Тип("Структура")
		И ДанныеJSON.Свойство("globalErrors")
		И ТипЗнч(ДанныеJSON.globalErrors) = Тип("Массив") Тогда
		
		ТекстыОшибок = Новый Массив;
		Для Каждого СтрокаОшибки Из ДанныеJSON.globalErrors Цикл
			
			Если Не (ТипЗнч(СтрокаОшибки) = Тип("Строка") Или ТипЗнч(СтрокаОшибки) = Тип("Структура")) Тогда
				Возврат ТекстВходящегоСообщенияJSON;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаОшибки) = Тип("Строка") И ЗначениеЗаполнено(СтрокаОшибки) Тогда
				ТекстыОшибок.Добавить(ТекстПредставленияОшибки(СтрокаОшибки));
			ИначеЕсли ТипЗнч(СтрокаОшибки) = Тип("Структура") Тогда
				
				ТекстОшибки = Неопределено;
				КодОшибки   = Неопределено;
				СтрокаОшибки.Свойство("error",     ТекстОшибки);
				СтрокаОшибки.Свойство("errorCode", КодОшибки);
				ПредставлениеОшибки = СокрЛП(СтрШаблон("%1: %2", КодОшибки, ТекстОшибки));
				Если ЗначениеЗаполнено(КодОшибки) Или ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ПредставлениеОшибки);
				Иначе
					Возврат ТекстВходящегоСообщенияJSON;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеJSON.Свойство("fieldErrors") И ТипЗнч(ДанныеJSON.fieldErrors) = Тип("Массив") Тогда
			
			Для Каждого СтрокаОшибкиПоля Из ДанныеJSON.fieldErrors Цикл
				
				ИмяПоля     = Неопределено;
				ТекстОшибки = Неопределено;
				СтрокаОшибкиПоля.Свойство("fieldName",  ИмяПоля);
				СтрокаОшибкиПоля.Свойство("fieldError", ТекстОшибки);
				
				ПредставлениеОшибки = СокрЛП(СтрШаблон("%1: %2", ИмяПоля, ТекстОшибки));
				Если ЗначениеЗаполнено(ИмяПоля) Или ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстыОшибок.Добавить(ПредставлениеОшибки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	ИначеЕсли ДанныеJSON <> Неопределено
		И ТипЗнч(ДанныеJSON) = Тип("Массив") Тогда
		
		ТекстыОшибок = Новый Массив;
		Для Каждого СтрокаОшибки Из ДанныеJSON Цикл
			
			Если Не ТипЗнч(СтрокаОшибки) = Тип("Структура")
				Или Не СтрокаОшибки.Свойство("cisInfo")
				Или Не СтрокаОшибки.Свойство("errorMessage") Тогда
				Возврат ТекстВходящегоСообщенияJSON;
			КонецЕсли;
			
			ТекстыОшибок.Добавить(ТекстПредставленияОшибки(СтрокаОшибки.errorMessage));
			
		КонецЦикла;
		
		Возврат СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	Иначе
		Возврат ТекстВходящегоСообщенияJSON;
	КонецЕсли;
	
КонецФункции

// Возвращает найденое значение во внутреннем соответствии текстов ошибок.
// Если значение в соответствии не найдено, то возвращается исходное значение.
// 
// Параметры:
// 	ИсходноеСообщение - Строка - Исходный текст.
// Возвращаемое значение:
// 	Строка - Найденое значение или сходнное.
Функция ТекстПредставленияОшибки(ИсходноеСообщение)
	
	ЗначениеПоиска = СокрЛП(НРег(ИсходноеСообщение));
	
	ТекстыОшибок = Новый Соответствие();
	
	ТекстыОшибок.Вставить(
		НРег("Not enough balance"),
		НСтр("ru = 'Недостаточно средств на балансе для получения кодов маркировки из СУЗ';
			|en = 'Недостаточно средств на балансе для получения кодов маркировки из СУЗ'"));
	
	ВозвращаемоеЗначение = ТекстыОшибок.Получить(ЗначениеПоиска);
	
	Если ВозвращаемоеЗначение = Неопределено Тогда
		ВозвращаемоеЗначение = ИсходноеСообщение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти
