#Область СлужебныйПрограммныйИнтерфейс

Процедура Отключить(Движения) Экспорт
	КонтролируемыеРегистры = Метаданные.ПодпискиНаСобытия.КонтрольСоответствияНачисленийИВыплатПередЗаписью.Источник.Типы();		
	Для Каждого КонтролируемыйРегистр Из КонтролируемыеРегистры Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(КонтролируемыйРегистр);
		НаборЗаписейРегистра = Движения.Найти(МетаданныеРегистра.Имя);
		Если НаборЗаписейРегистра <> Неопределено Тогда
			ДополнительныеСвойства(НаборЗаписейРегистра).Проверять = Ложь
		КонецЕсли	
	КонецЦикла	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПередЗаписьюЗарплатыКВыплате(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
	     Возврат; 
	КонецЕсли;
	
	Если Не Проверять(Источник) Тогда
		Возврат
	КонецЕсли;	
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ВидДвижения КАК ВидДвижения,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеПередЗаписью
	|ИЗ
	|	#ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ВидДвижения,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗарплатаКВыплате", Источник.Метаданные().ПолноеИмя());
	
	Запрос.Выполнить();
	
	ДополнительныеСвойства(Источник).МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
КонецПроцедуры

Процедура ПриЗаписиЗарплатыКВыплате(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда 
	     Возврат; 
	КонецЕсли;
	
	Если Не Проверять(Источник) Тогда
		Возврат
	КонецЕсли;	
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	
	МенеджерВременныхТаблиц = ДополнительныеСвойства(Источник).МенеджерВременныхТаблиц;
	
	// Разрезы учета, по которым сальдо изменяется в сторону увеличения задолженности работника
	СоздатьВТУвеличениеЗадолженности(МенеджерВременныхТаблиц, Регистратор, Источник);
	
	// Возникающие из-за изменений переплаты 
	Переплаты = Переплаты(МенеджерВременныхТаблиц, Регистратор, Источник);
	
	Если Переплаты = Неопределено Или Переплаты.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.ДокументОснование КАК ДокументОснование,
	|	Изменения.Сотрудник КАК Сотрудник,
	|	Изменения.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Изменения.СтатьяРасходов КАК СтатьяРасходов,
	|	Изменения.ВидДвижения КАК ВидДвижения,
	|	Изменения.Старый КАК Старый,
	|	Изменения.Новый КАК Новый
	|ИЗ
	|	ВТУвеличениеЗадолженности КАК Изменения";
	Изменения = Запрос.Выполнить().Выгрузить();
	
	ПоляКлюча = "ДокументОснование, Сотрудник, СтатьяФинансирования, СтатьяРасходов";
	Изменения.Индексы.Добавить(ПоляКлюча);
	ПараметрыОтбораИзменений = Новый Структура(ПоляКлюча);
	
	ПревышенияВыплат     = Новый Массив;
	УменьшенияНачислений = Новый Массив;
	УдаленияНачислений   = Новый Массив;
	
	Пока Переплаты.Следующий() Цикл
		
		// Нет основания - нет и начислений, которым должны соответствовать выплаты.
		// Если основание не изменяет зарплату к выплате - тоже нечего сопоставлять.
		Если Не ЗначениеЗаполнено(Переплаты.ДокументОснование)
			Или Не Переплаты.ДокументОснование.Метаданные().Движения.Содержит(Источник.Метаданные()) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораИзменений, Переплаты); 
		Изменение = Изменения.НайтиСтроки(ПараметрыОтбораИзменений)[0];
		
		Если Изменение.ВидДвижения = ВидДвиженияНакопления.Расход И Изменение.Старый И Не Изменение.Новый Тогда
			// удаление выплаты не контролируем
		ИначеЕсли Изменение.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			ПревышенияВыплат.Добавить(Изменение);
		ИначеЕсли Изменение.ВидДвижения = ВидДвиженияНакопления.Приход И Изменение.Старый И Изменение.Новый Тогда
			УменьшенияНачислений.Добавить(Изменение)
		ИначеЕсли Изменение.ВидДвижения = ВидДвиженияНакопления.Приход И Изменение.Старый И Не Изменение.Новый Тогда
			УдаленияНачислений.Добавить(Изменение)
		КонецЕсли;
		
	КонецЦикла;
	
	СообщитьПользователю(Регистратор, Отказ, УменьшенияНачислений, УдаленияНачислений, ПревышенияВыплат);
	
КонецПроцедуры

Функция ДополнительныеСвойства(Источник)
	
	Ключ = "КонтрольСоответствияНачисленийИВыплат";
	
	Если Не Источник.ДополнительныеСвойства.Свойство(Ключ) Тогда
		ДопСвойства = Новый Структура;
		ДопСвойства.Вставить("Проверять",               Истина);
		ДопСвойства.Вставить("МенеджерВременныхТаблиц", Неопределено);
		Источник.ДополнительныеСвойства.Вставить(Ключ, ДопСвойства);
	КонецЕсли;	
	
	Возврат Источник.ДополнительныеСвойства[Ключ]
	
КонецФункции	

Функция Проверять(Источник)
	Возврат 
		ПолучитьФункциональнуюОпцию("ПроверятьСоответствиеНачисленийИВыплат")
		И ДополнительныеСвойства(Источник).Проверять
КонецФункции

Процедура СоздатьВТУвеличениеЗадолженности(МенеджерВременныхТаблиц, Регистратор, Источник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ВидДвижения КАК ВидДвижения,
	|	МАКСИМУМ(ЗарплатаКВыплате.Старый) КАК Старый,
	|	МАКСИМУМ(ЗарплатаКВыплате.Новый) КАК Новый,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК Сумма
	|ПОМЕСТИТЬ ВТУвеличениеЗадолженности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплате.ВидДвижения КАК ВидДвижения,
	|		ИСТИНА КАК Старый,
	|		ЛОЖЬ КАК Новый,
	|		ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|		-ЗарплатаКВыплате.СуммаКВыплате КАК СуммаКВыплате
	|	ИЗ
	|		ВТЗарплатаКВыплатеПередЗаписью КАК ЗарплатаКВыплате
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.ВидДвижения,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.СуммаКВыплате
	|	ИЗ
	|		#ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор = &Регистратор) КАК ЗарплатаКВыплате
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ВидДвижения,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) < 0";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗарплатаКВыплате", Источник.Метаданные().ПолноеИмя());
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция Переплаты(МенеджерВременныхТаблиц, Регистратор, Источник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Те изменения сальдо, по которым были выплаты
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изменения.ДокументОснование КАК ДокументОснование,
	|	Изменения.Сотрудник КАК Сотрудник,
	|	Изменения.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Изменения.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТОтборыИзменений
	|ИЗ
	|	ВТУвеличениеЗадолженности КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|			И Изменения.ДокументОснование = ЗарплатаКВыплате.ДокументОснование
	|			И Изменения.Сотрудник = ЗарплатаКВыплате.Сотрудник
	|			И Изменения.СтатьяФинансирования = ЗарплатаКВыплате.СтатьяФинансирования
	|			И Изменения.СтатьяРасходов = ЗарплатаКВыплате.СтатьяРасходов";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗарплатаКВыплате", Источник.Метаданные().ПолноеИмя());
	ОтборыИзменений = Запрос.Выполнить().Выбрать();
	Если Не ОтборыИзменений.Следующий() Или ОтборыИзменений.Количество = 0 Тогда
		Возврат Неопределено
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборыИзменений КАК Отборы
	|		ПО ЗарплатаКВыплате.ДокументОснование = Отборы.ДокументОснование
	|			И ЗарплатаКВыплате.Сотрудник = Отборы.Сотрудник
	|			И ЗарплатаКВыплате.СтатьяФинансирования = Отборы.СтатьяФинансирования
	|			И ЗарплатаКВыплате.СтатьяРасходов = Отборы.СтатьяРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура СообщитьПользователю(Регистратор, Отказ, УменьшенияНачислений, УдаленияНачислений, ПревышенияВыплат)
	
	ПоказыватьСтатьи = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		КодыСтатейФинансирования = КодыСтатейИзменений(УменьшенияНачислений, УдаленияНачислений, ПревышенияВыплат, "СтатьяФинансирования");
		ПоказыватьСтатьи = Истина;
	Иначе
		КодыСтатейФинансирования = Новый Соответствие;
	КонецЕсли;	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		КодыСтатейРасходов = КодыСтатейИзменений(УменьшенияНачислений, УдаленияНачислений, ПревышенияВыплат, "СтатьяРасходов");
		ПоказыватьСтатьи = Истина;
	Иначе
		КодыСтатейРасходов = Новый Соответствие;
	КонецЕсли;	
	
	СообщенияПользователю = Новый Массив;
	
	Если УменьшенияНачислений.Количество() > 0 Тогда
		
		Если ПоказыватьСтатьи Тогда
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Сотруднику %1 на основании этого документа уже произведена выплата по источнику %2, превышающая начисленное.';
						|en = 'Payment by source %2 based on this document has already been made to employee %1, which exceeds the accruals.'"),
					УменьшенияНачислений[0].Сотрудник,
					ПредставлениеФинансированияИзменения(УменьшенияНачислений[0], КодыСтатейФинансирования, КодыСтатейРасходов)));
		Иначе
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Сотруднику %1 на основании этого документа уже произведена выплата, превышающая начисленное.';
						|en = 'Payment based on this document has already been made to employee %1, which exceeds the accruals.'"),
					УменьшенияНачислений[0].Сотрудник));
		КонецЕсли;
				
		Если УменьшенияНачислений.Количество() > 1 Тогда
			СообщенияПользователю.Добавить(НСтр("ru = 'Имеются и другие начисления, которые меньше уже произведенных выплат.';
												|en = 'There are other accruals that are less than the payments made.'"));
		КонецЕсли;
		
	КонецЕсли;	
	
	Если УдаленияНачислений.Количество() > 0 Тогда
		
		Если ПоказыватьСтатьи Тогда
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Сотруднику %1 на основании этого документа уже произведена выплата по источнику %2. Эти начисления нельзя отменять.';
						|en = 'Payment by source %2 based on this document has already been made to employee %1. These accruals cannot be canceled.'"),
					УдаленияНачислений[0].Сотрудник,
					ПредставлениеФинансированияИзменения(УдаленияНачислений[0], КодыСтатейФинансирования, КодыСтатейРасходов)));
		Иначе
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Сотруднику %1 на основании этого документа уже произведена выплата. Эти начисления нельзя отменять.';
						|en = 'Payment based on this document has already been made to employee %1. These accruals cannot be canceled.'"),
					УдаленияНачислений[0].Сотрудник));
		КонецЕсли;
		
			
		Если УдаленияНачислений.Количество() > 1 Тогда
			СообщенияПользователю.Добавить(НСтр("ru = 'Имеются и другие удаленные начисления, по которым уже произведена выплата.';
												|en = 'There are other remote accruals, by which the payment was made.'"));
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПревышенияВыплат.Количество() > 0 Тогда
		
		Если ПоказыватьСтатьи Тогда
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Выплата сотруднику %1 по источнику %2 превышает начисленное документом %3.';
						|en = 'Payment to employee %1 by source %2exceeds the %3 document accruals.'"),
					ПревышенияВыплат[0].Сотрудник,
					ПредставлениеФинансированияИзменения(ПревышенияВыплат[0], КодыСтатейФинансирования, КодыСтатейРасходов),
					ПревышенияВыплат[0].ДокументОснование));
		Иначе
			СообщенияПользователю.Добавить(			
				СтрШаблон(
					НСтр("ru = 'Выплата сотруднику %1 превышает начисленное документом %3.';
						|en = 'Payment to employee %1 exceeds the %3 document accruals.'"),
					ПревышенияВыплат[0].Сотрудник,
					ПредставлениеФинансированияИзменения(ПревышенияВыплат[0], КодыСтатейФинансирования, КодыСтатейРасходов),
					ПревышенияВыплат[0].ДокументОснование));
		КонецЕсли;
		
		Если ПревышенияВыплат.Количество() > 1 Тогда
			СообщенияПользователю.Добавить(НСтр("ru = 'Имеются и другие переплаты.';
												|en = 'There are other overpayments.'"));			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СообщенияПользователю.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрСоединить(СообщенияПользователю, Символы.ПС), Регистратор, , , Отказ);
	КонецЕсли;
			
КонецПроцедуры	

Функция КодыСтатейИзменений(УменьшенияНачислений, УдаленияНачислений, ПревышенияВыплат, ИмяКолонки)
	
	Статьи = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Статьи, 
		ОбщегоНазначения.ВыгрузитьКолонку(УменьшенияНачислений, ИмяКолонки));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Статьи, 
		ОбщегоНазначения.ВыгрузитьКолонку(УдаленияНачислений, ИмяКолонки));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Статьи, 
		ОбщегоНазначения.ВыгрузитьКолонку(ПревышенияВыплат, ИмяКолонки));
		
	КодыСтатей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Статьи, "Код");

	Возврат КодыСтатей
	
КонецФункции

Функция ПредставлениеФинансированияИзменения(Изменение, КодыСтатейФинансирования, КодыСтатейРасходов)
	
	СтатьяФинансирования = КодыСтатейФинансирования[Изменение.СтатьяФинансирования];
	СтатьяРасходов       = КодыСтатейРасходов[Изменение.СтатьяРасходов];
	
	Если ЗначениеЗаполнено(СтатьяФинансирования) И ЗначениеЗаполнено(СтатьяРасходов) Тогда
		ПредставлениеФинансирования =
			СтрШаблон(
				НСтр("ru = '%1(%2)';
					|en = '%1(%2)'"),
				СтатьяФинансирования,
				СтатьяРасходов)
	ИначеЕсли ЗначениеЗаполнено(СтатьяФинансирования) Тогда 
		ПредставлениеФинансирования =
			СтрШаблон(
				НСтр("ru = '%1';
					|en = '%1'"),
				СтатьяФинансирования,
				СтатьяРасходов)
	Иначе	
		ПредставлениеФинансирования = "";
	КонецЕсли;
	
	Возврат ПредставлениеФинансирования
	
КонецФункции

#КонецОбласти