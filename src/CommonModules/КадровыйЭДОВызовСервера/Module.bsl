#Область ПрограммныйИнтерфейс

// Возвращает массив описаний файлов для вывода на диск, отправке по почте, публикации ...
//
// Параметры:
//  ФайлыДляВывода         - Массив, ссылок на присоединенные файлы.
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы из которой выполняется вывод.
//
// Возвращаемое значение:
//  Массив - описаний выводимых файлов, см. ОписаниеВыводимогоФайла
//
Функция ВыводимыеФайлыПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища = Неопределено, ПапкиЭлектронныхДокументов = Неопределено) Экспорт
	
	ВыводимыеФайлы = Новый Массив;
	
	Если ФайлыДляВывода.Количество() > 0 Тогда
		
		ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
		Если ИдентификаторХранилища = Неопределено Тогда
			ИдентификаторХранилища = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Пака = "";
		ПоместитьВсеДокументыВОднуПапку = Истина;
		Если ПапкиЭлектронныхДокументов <> Неопределено Тогда
			ВсеПапки = ОбщегоНазначения.ВыгрузитьКолонку(ПапкиЭлектронныхДокументов, "Значение", Истина);
			ПоместитьВсеДокументыВОднуПапку = (ВсеПапки.Количество() <= 1);
		КонецЕсли;
		
		ДанныеФайлов = ДанныеФайловПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища);
		
		Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
			
			Если Не ПоместитьВсеДокументыВОднуПапку Тогда
				Папка = ПапкиЭлектронныхДокументов.Получить(ДанныеФайла.Ключ);
				Если Папка = Неопределено Тогда
					Папка = "";
				Иначе
					Папка = Папка + ПолучитьРазделительПути();
				КонецЕсли;
			КонецЕсли;
			
			// Упаковка оригинала с подписями
			Файл = Новый файл(ДанныеФайла.Значение.Оригинал.ИмяФайлаСРасширением);
			ИмяФайлаАрхива = Строка(Папка) + Файл.ИмяБезРасширения + ".zip";
			ПолноеИмяФайлаАрхива = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ИмяФайлаАрхива;
			
			ФайлАрхива = Новый ЗаписьZipФайла();
			
			// Оригинал
			ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ДанныеФайла.Значение.Оригинал.ИмяФайлаСРасширением;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.Значение.Оригинал.АдресВоВременномХранилище);
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
			
			ФайлАрхива.Добавить(ПолноеИмяФайла);
			
			// Подписи
			ВывестиВФайлАрхиваПодписи(ДанныеФайла.Значение.Подписи, ФайлАрхива, ИмяВременногоКаталога);
			
			// Представление
			Для Каждого ДанныеФайлаПредставления Из ДанныеФайла.Значение.Представления Цикл
				ПолноеИмяФайлаПредставления = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
					+ ДанныеФайлаПредставления.ИмяФайлаСРасширением;
				ДвоичныеДанныеФайлаПредставления = ПолучитьИзВременногоХранилища(ДанныеФайлаПредставления.АдресВоВременномХранилище);
				ДвоичныеДанныеФайлаПредставления.Записать(ПолноеИмяФайлаПредставления);
				
				ФайлАрхива.Добавить(ПолноеИмяФайлаПредставления);
			КонецЦикла;
			
			ОписаниеФайла = ОписаниеВыводимогоФайла();
			
			ОписаниеФайла.ИмяФайлаСРасширением = ИмяФайлаАрхива;
			ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ФайлАрхива.ПолучитьДвоичныеДанные(), ИдентификаторХранилища);
			
			ВыводимыеФайлы.Добавить(ОписаниеФайла);
			
		КонецЦикла;
		
		УдалитьФайлы(ИмяВременногоКаталога);
		
	КонецЕсли;
	
	Возврат ВыводимыеФайлы;
	
КонецФункции

// Возвращает массив данных печатных форм объектов.
//
// Параметры:
//  ОписанияПечатныхФорм   - Массив, структур описывающих табличные документы общей формы ПечатьДокументов
//                            Ключи структуры:
//                             * ПечатнаяФорма              - ТабличныйДокумент
//                             * ИдентификаторПечатнойФормы - Строка
//                             * Название                   - Строка
//  ОбъектыПечати          - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ПараметрыПечати        - см. УправлениеПечатьюПереопределяемый.ПриПечати
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы для которой собирается коллекция.
//
// Возвращаемое значение:
//  Массив - данных печатных форм, см. КадровыйЭДО.ДанныеПечатнойФормы
//
Функция ПечатныеФормыОбъектов(ОписанияПечатныхФорм, ОбъектыПечати, ПараметрыПечати, ИдентификаторХранилища) Экспорт
	
	ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
	
	ИдентификаторыОбластейОбъектов = Неопределено;
	ДополнительныеПараметры = ПараметрыПечати.ДополнительныеПараметры;
	Если ДополнительныеПараметры.Свойство("ИдентификаторыОбластейОбъектов") Тогда
		ДетализироватьОбластиДокументов = Истина;
		ИдентификаторыОбластейОбъектов = ДополнительныеПараметры.ИдентификаторыОбластейОбъектов;
	Иначе
		ДетализироватьОбластиДокументов = Ложь;
	КонецЕсли;
	
	ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровПечати(ПараметрыПечати);
	Если ОписанияФайлов = Неопределено Тогда
		ОписанияФайлов = КадровыйЭДО.ОписанияФайловПечатныхФорм();
		КадровыйЭДОКлиентСервер.ДобавитьВПараметрыПечатиОписанияФайловПечатныхФорм(ПараметрыПечати, ОписанияФайлов);
	КонецЕсли;
	
	ПутьКПодписантам = "";
	Если ДополнительныеПараметры.Свойство("ПутьКПодписантам") Тогда
		ПутьКПодписантам = ДополнительныеПараметры.ПутьКПодписантам;
	КонецЕсли;
	
	ОригиналыПечатныхФорм = ОписанияФайлов.ОригиналыПечатныхФорм;
	ПечатныеФормыОбъектов = ОписанияФайлов.ПечатныеФормыОбъектов;
	
	РеквизитыОбъектов = РеквизитыАдресацииОбъектов(ОбъектыПечати.ВыгрузитьЗначения(), ПутьКПодписантам);
	ПечатныеФормы = Новый Массив;
	Для Каждого ОписаниеПечатнойФормы Из ОписанияПечатныхФорм Цикл
		
		ИдентификаторПечатнойФормы = КадровыйЭДОКлиентСервер.ТолькоИдентификаторПечатнойФормы(
			ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы);
		
		ПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ОписаниеПечатнойФормы.ПечатнаяФорма, ОбъектыПечати);
		Для Каждого СоответствиеОбъектаПечатнойФорме Из ПечатныеФормыПоОбъектам Цикл
			
			ОбъектПечати = СоответствиеОбъектаПечатнойФорме.Ключ;
			ПечатнаяФорма = СоответствиеОбъектаПечатнойФорме.Значение;
			
			Если ТипЗнч(ОбъектПечати) = Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			ПечатныеФормыОбъекта = ПечатныеФормыОбъектов.Получить(ОбъектПечати);
			Если ПечатныеФормыОбъекта <> Неопределено Тогда
				
				ФайлыПечатнойФормыОбъекта = ПечатныеФормыОбъекта.Получить(ИдентификаторПечатнойФормы);
				Если ФайлыПечатнойФормыОбъекта <> Неопределено Тогда
					
					Для Каждого ФайлПечатнойФормыОбъекта Из ФайлыПечатнойФормыОбъекта Цикл
						
						ОписаниеОригиналовИдентификатора = ОригиналыПечатныхФорм.Получить(ИдентификаторПечатнойФормы);
						Если ОписаниеОригиналовИдентификатора <> Неопределено Тогда
							
							ДанныеПечатнойФормы = ОписаниеОригиналовИдентификатора.Оригиналы.Получить(ФайлПечатнойФормыОбъекта);
							ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
							
						КонецЕсли;
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДетальныеОбласти = Неопределено;
			Если ДетализироватьОбластиДокументов Тогда
				ДетальныеОбласти = ИдентификаторыОбластейОбъектов.Получить(ОбъектПечати);
			КонецЕсли;
			
			ЕстьДетальныеОбласти = ДетальныеОбласти <> Неопределено;
			Если ЕстьДетальныеОбласти Тогда
				
				ДетальныеПечатныеФормыПоОбъектам = УправлениеПечатью.ПечатныеФормыПоОбъектам(ПечатнаяФорма, ДетальныеОбласти);
				Если ДетальныеПечатныеФормыПоОбъектам.Количество() = 0 Тогда
					ЕстьДетальныеОбласти = Ложь;
					Если ДетальныеОбласти.Количество() = 1 Тогда
						
						ЗначениеДетализации = ДетальныеОбласти[0];
						
						ИмяОбласти = ОбъектыПечати.НайтиПоЗначению(ОбъектПечати).Представление;
						ОбластьПечатнойФормы = ОписаниеПечатнойФормы.ПечатнаяФорма.Области.Найти(ИмяОбласти);
						
						Если ОбластьПечатнойФормы <> Неопределено Тогда
							Если ЗначениеДетализации.Значение.НомерСтрокиНачалаОбласти = ОбластьПечатнойФормы.Верх
								И ЗначениеДетализации.Значение.НомерСтрокиОкончаниеОбласти = ОбластьПечатнойФормы.Низ Тогда
								
								ЗначениеДетализации.Представление = ИмяОбласти;
								
								ДетальныеПечатныеФормыПоОбъектам = Новый Соответствие;
								ДетальныеПечатныеФормыПоОбъектам.Вставить(ЗначениеДетализации.Значение, ПечатнаяФорма);
								
								ЕстьДетальныеОбласти = Истина;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			РасшифровкиИмени = Новый Массив;
			РеквизитыОбъекта = РеквизитыОбъектов.Получить(ОбъектПечати);
			Если РеквизитыОбъекта <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(РеквизитыОбъекта.Номер) Тогда
					РасшифровкиИмени.Добавить(ЗарплатаКадрыОтчеты.НомерНаПечать(
						РеквизитыОбъекта.Номер, РеквизитыОбъекта.НомерПриказа));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыОбъекта.Дата) Тогда
					РасшифровкиИмени.Добавить(Формат(РеквизитыОбъекта.Дата, "ДФ=ггггММдд"));
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЕстьДетальныеОбласти Тогда
				
				ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
				ДанныеПечатнойФормы.Владелец                   = ОбъектПечати;
				ДанныеПечатнойФормы.ПечатнаяФорма              = ПечатнаяФорма;
				ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
				
				НазваниеПечатнойФормы = НаименованиеПечатнойФормы(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
				Если ЗначениеЗаполнено(НазваниеПечатнойФормы) Тогда
					ДанныеПечатнойФормы.Название = НазваниеПечатнойФормы;
				Иначе
					ДанныеПечатнойФормы.Название = ОписаниеПечатнойФормы.Название;
				КонецЕсли;
				
				ЧастиИмени = Новый Массив;
				Если ЗначениеЗаполнено(РеквизитыОбъекта) Тогда
					
					ЗаполнитьЗначенияСвойств(ДанныеПечатнойФормы, РеквизитыОбъекта, "Организация,Сотрудник,ФизическоеЛицо,Дата");
					ДанныеПечатнойФормы.Номер                      = ЗарплатаКадрыОтчеты.НомерНаПечать(
						РеквизитыОбъекта.Номер, РеквизитыОбъекта.НомерПриказа);
					
					Если ЗначениеЗаполнено(РеквизитыОбъекта.ФИО) Тогда
						ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, РеквизитыОбъекта.ФИО, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ДанныеПечатнойФормы.Название, Ложь);
				
				ДатаНомерДокумента = "";
				Если РасшифровкиИмени.Количество() > 0 Тогда
					ДатаНомерДокумента = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СтрСоединить(РасшифровкиИмени, " "));
				КонецЕсли;
			
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
					СтрСоединить(ЧастиИмени, " "));
				
				Если СтрДлина(ИмяФайла) + СтрДлина(ДатаНомерДокумента) + 5 > 100 Тогда
					ИмяФайла = СокрЛП(Лев(ИмяФайла, 100 - СтрДлина(ДатаНомерДокумента) - 5));
				КонецЕсли;
				
				Если Не ПустаяСтрока(ДатаНомерДокумента) Тогда
					ИмяФайла = ИмяФайла + " " + ДатаНомерДокумента;
				КонецЕсли;
				
				ДанныеПечатнойФормы.ИмяФайла = ИмяФайла;
				
				СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища);
				ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
				
				Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
					
					КадровыйЭДО.ДобавитьОписаниеФайла(
						ОписанияФайлов, ДанныеПечатнойФормы)
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого СоответствиеОбъектаДетальнойПечатнойФорме Из ДетальныеПечатныеФормыПоОбъектам Цикл
					
					ОбъектДетализацииПечати = СоответствиеОбъектаДетальнойПечатнойФорме.Ключ;
					ДетальнаяПечатнаяФорма = СоответствиеОбъектаДетальнойПечатнойФорме.Значение;
					
					ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
					ДанныеПечатнойФормы.Владелец                   = ОбъектПечати;
					ДанныеПечатнойФормы.ПечатнаяФорма              = ДетальнаяПечатнаяФорма;
					ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
					
					ЭлементДетальнойОбласти = ДетальныеОбласти.НайтиПоЗначению(СоответствиеОбъектаДетальнойПечатнойФорме.Ключ);
					Если ЭлементДетальнойОбласти <> Неопределено Тогда
						ДанныеПечатнойФормы.ИмяОбласти = ЭлементДетальнойОбласти.Представление;
					КонецЕсли;
					
					НазваниеПечатнойФормы = НаименованиеПечатнойФормы(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
					Если ЗначениеЗаполнено(НазваниеПечатнойФормы) Тогда
						ДанныеПечатнойФормы.Название = НазваниеПечатнойФормы;
					Иначе
						ДанныеПечатнойФормы.Название = ОписаниеПечатнойФормы.Название;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(ДанныеПечатнойФормы, РеквизитыОбъекта, "Организация,Сотрудник,ФизическоеЛицо,Дата");
					ДанныеПечатнойФормы.Номер                      = ЗарплатаКадрыОтчеты.НомерНаПечать(
						РеквизитыОбъекта.Номер, РеквизитыОбъекта.НомерПриказа);
					
					ЧастиИмени = Новый Массив;
					
					ФИОДобавлено = Ложь;
					ОбъектыДетализации = Новый Массив;
					Для Каждого Элемент Из ОбъектДетализацииПечати Цикл
						Если Элемент.Ключ <> "НомерСтрокиНачалаОбласти"
							И Элемент.Ключ <> "НомерСтрокиОкончаниеОбласти" Тогда
							
							ОбъектыДетализации.Добавить(Элемент.Значение);
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ОбъектДетализации Из ОбъектыДетализации Цикл
						
						ЭтоФИО = Ложь;
						Если ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.Сотрудники")
							Или ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
							
							Если ТипЗнч(ОбъектДетализации) = Тип("СправочникСсылка.Сотрудники") Тогда
								ДанныеПечатнойФормы.Сотрудник = ОбъектДетализации;
							Иначе
								ДанныеПечатнойФормы.ФизическоеЛицо = ОбъектДетализации;
							КонецЕсли;
							
							ЭтоФИО = Истина;
							Если ФИОДобавлено Тогда
								Продолжить;
							Иначе
								ФИОДобавлено = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
						ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ОбъектДетализации, ЭтоФИО);
						
					КонецЦикла;
					
					ЧастиИмени.Добавить(ДанныеПечатнойФормы.Название);
					Если РасшифровкиИмени.Количество() > 0 Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧастиИмени, РасшифровкиИмени);
					КонецЕсли;
					
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
						СтрСоединить(ЧастиИмени, " "));
					
					ДанныеПечатнойФормы.ИмяФайла = ИмяФайла;
					
					СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища);
					ПечатныеФормы.Добавить(ДанныеПечатнойФормы);
					
					КадровыйЭДО.ДобавитьОписаниеФайла(
						ОписанияФайлов, ДанныеПечатнойФормы);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат ПечатныеФормы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РазблокироватьФормуОбъекта(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = КадровыйЭДО.РазблокироватьОбъектДляИзменений(СсылкаНаОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ФайлыМЧДДляСохранениеНаДиск(СписокМЧД) Экспорт
	
	ФайлыДляСохранения = Новый Массив;
	
	ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
	ИдентификаторХранилища = Новый УникальныйИдентификатор;
	
	Для Каждого МЧД Из СписокМЧД Цикл
		
		ИмяФайла = ИмяВыгружаемогоФайлаМЧД(МЧД);
		
		ИмяФайла = ИмяФайлаКЭДО(ИмяФайла);
		
		Файл = Новый файл(ИмяФайла);
		ИмяФайлаАрхива = Файл.ИмяБезРасширения + ".zip";
		ПолноеИмяФайлаАрхива = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
			+ ИмяФайлаАрхива;
		
		ФайлАрхива = Новый ЗаписьZipФайла();
		
		ВывестиВФайлАрхиваМЧД(ФайлАрхива, МЧД, ИмяВременногоКаталога);
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
			ИмяФайлаАрхива,
			ПоместитьВоВременноеХранилище(
				ФайлАрхива.ПолучитьДвоичныеДанные(), ИдентификаторХранилища));
		
		ФайлыДляСохранения.Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
	Возврат ФайлыДляСохранения;
	
КонецФункции

Функция ФайлыПечатныхФормДляСохраненияНаДиск(СписокФайлов, ПапкиЭлектронныхДокументов = Неопределено) Экспорт
	
	ФайлыДляСохранения = Новый Массив;
	
	ФайлыПечатныхФорм = ВыводимыеФайлыПечатныхФорм(СписокФайлов, , ПапкиЭлектронныхДокументов);
	Для Каждого ФайлПечатнойФормы Из ФайлыПечатныхФорм Цикл
		
		ФайлыДляСохранения.Добавить(Новый ОписаниеПередаваемогоФайла(
			ФайлПечатнойФормы.ИмяФайлаСРасширением,
			ФайлПечатнойФормы.АдресВоВременномХранилище));
		
	КонецЦикла;
	
	Возврат ФайлыДляСохранения;
	
КонецФункции

Функция ФайлыЭлектронныхДокументовДляСохраненияНаДиск(ДокументыКЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыКЭДО", ДокументыКЭДО);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	МАКСИМУМ(ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо.СтраховойНомерПФР) КАК СтраховойНомерПФР,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо) КАК КоличествоФизическихЛиц
		|ИЗ
		|	Документ.ДокументКадровогоЭДО.ВнешниеПодписанты КАК ДокументКадровогоЭДОВнешниеПодписанты
		|ГДЕ
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка В(&ДокументыКЭДО)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументКадровогоЭДОВнешниеПодписанты.Ссылка.ЭлектронныйДокумент";
	
	ПапкиЭлектронныхДокументов = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоФизическихЛиц = 1 Тогда
			Если ЗначениеЗаполнено(Выборка.СтраховойНомерПФР) Тогда
				Папка = Выборка.СтраховойНомерПФР;
			Иначе
				Папка = НСтр("ru = 'СНИЛС Не заполнен';
							|en = 'SNILS is not filled in'");
			КонецЕсли;
		Иначе
			Папка = НСтр("ru = 'Списочные документы';
						|en = 'List-based documents'");
		КонецЕсли;
		ПапкиЭлектронныхДокументов.Вставить(Выборка.ЭлектронныйДокумент, Папка);
	КонецЦикла;
	
	ЭлектронныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ПапкиЭлектронныхДокументов, "Ключ");
	Возврат ФайлыПечатныхФормДляСохраненияНаДиск(ЭлектронныеДокументы, ПапкиЭлектронныхДокументов);
	
КонецФункции

Функция ДанныеСертификатовОрганизаций(Организации) Экспорт
	
	ДанныеСертификатов = Новый Структура;
	ДанныеСертификатов.Вставить("Сертификаты", Новый Соответствие);
	ДанныеСертификатов.Вставить("ГоловныеОрганизации", Новый Соответствие);
	
	ПодписантыОрганизаций = Неопределено;
	
	Запрос = ЗапросСертификатыОрганизацииПользователя(Организации);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			Если Выборка.Организация <> Выборка.ГоловнаяОрганизация Тогда
				ДанныеСертификатов.ГоловныеОрганизации.Вставить(Выборка.Организация, Выборка.ГоловнаяОрганизация);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Сертификат) Тогда
				ВсеСертификаты = Новый Массив;
				СписокСертификатов = Новый Массив;
				ДанныеСертификатов.Сертификаты.Вставить(Выборка.Организация, СписокСертификатов);
				Пока Выборка.Следующий() Цикл
					Если Не ЗначениеЗаполнено(Выборка.Сертификат) Тогда
						Продолжить;
					КонецЕсли;
					ВсеСертификаты.Добавить(Выборка.Сертификат);
					СписокСертификатов.Добавить(Выборка.Сертификат);
				КонецЦикла;
			Иначе
				Если ПодписантыОрганизаций = Неопределено Тогда
					ПодписантыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
				КонецЕсли;
				Подписанты = ПодписантыОрганизаций.Получить(Выборка.Организация);
				Если Подписанты <> Неопределено Тогда
					ДанныеСертификатов.Сертификаты.Вставить(Выборка.Организация, Подписанты);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСертификатов;
	
КонецФункции

Процедура ЗаменитьПечатныеФормы(ПечатныеФормыОбъектов, ПечатныеФормы, ОбъектыПечати) Экспорт
	
	Для Каждого ОписаниеФайла Из ПечатныеФормыОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеФайла.ФайлОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеПечатнойФормы Из ПечатныеФормы Цикл
			
			Если СтрЗаканчиваетсяНа(ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы, ОписаниеФайла.ИдентификаторПечатнойФормы) Тогда
				
				Если ЗначениеЗаполнено(ОписаниеФайла.ИмяОбласти) Тогда
					
					ЗаменитьОбластьТабличногоДокумента(
						ОписаниеПечатнойФормы.ПечатнаяФорма,
						ОписаниеФайла.ИмяОбласти,
						КадровыйЭДО.ПечатнаяФормаСоШтампами(ОписаниеФайла.ФайлОбъекта, ОписаниеФайла.ПечатнаяФорма, Истина, Истина));
					
				Иначе
					
					ЭлементСписка = ОбъектыПечати.НайтиПоЗначению(ОписаниеФайла.Владелец);
					Если ЭлементСписка <> Неопределено Тогда
						
						ЗаменитьОбластьТабличногоДокумента(
							ОписаниеПечатнойФормы.ПечатнаяФорма,
							ЭлементСписка.Представление,
							КадровыйЭДО.ПечатнаяФормаСоШтампами(ОписаниеФайла.ФайлОбъекта, ОписаниеФайла.ПечатнаяФорма, Истина, Истина));
						
					КонецЕсли;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьНаПодписаниеПоКоллекцииНаправлений(НаправленияНаПодписание, Действие) Экспорт
	
	Для Каждого НаправленияПоОрганизации Из НаправленияНаПодписание Цикл
		Для Каждого НаправленияПоИдентификатору Из НаправленияПоОрганизации.Значение Цикл
			Для Каждого НаправленияПоТипуОбъекта Из НаправленияПоИдентификатору.Значение Цикл
				Для Каждого НаправлениеПоПодписантам Из НаправленияПоТипуОбъекта.Значение Цикл
					НаправитьНаПодпись(НаправлениеПоПодписантам.Значение.ПрисоединенныеФайлы,
						Действие, НаправлениеПоПодписантам.Значение.ОтветственныеЛица);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьНаПодпись(ДанныеФайлов, Действие, Исполнители) Экспорт
	
	ЗапланироватьДействияСПечатнымиФормами(ДанныеФайлов, Действие, Исполнители);
	УдалитьФайлыИзОбработкиПользователя(ДанныеФайлов);
	
КонецПроцедуры

Процедура ЗапланироватьДействияСПечатнымиФормами(ДанныеФайлов, Действие, Исполнители = Неопределено) Экспорт
	
	РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
		ДанныеФайлов, Действие, Исполнители);
	
КонецПроцедуры

Процедура ЗапомнитьПодписантов(Организация, ВыбранныеПодписанты) Экспорт
	
	ПодписантыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
	ПодписантыОрганизаций.Вставить(Организация, ВыбранныеПодписанты);
	ЗапомнитьПодписантовОрганизаций(ПодписантыОрганизаций);
	
КонецПроцедуры

Процедура ЗапомнитьПодписантовОрганизаций(ПодписантыОрганизаций)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот", "ПодписантыОрганизаций", ПодписантыОрганизаций);
	
КонецПроцедуры

Процедура ЗапомнитьСертификатыОрганизации(Организация, СертификатыОрганизации, НеобходимостьЗадаватьВопросОрганизации) Экспорт
	
	СертификатыОрганизаций = ПодписантыОрганизацийПоУмолчанию();
	СертификатыОрганизаций.Вставить(?(Организация = Неопределено, "Неопределено", Организация), СертификатыОрганизации);
	ЗапомнитьСертификатыОрганизаций(СертификатыОрганизаций);
	ЗапомнитьНеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(
		Организация, НеобходимостьЗадаватьВопросОрганизации);
	
КонецПроцедуры

Процедура ЗапомнитьСертификатыОрганизаций(СертификатыОрганизаций) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот", "СертификатыОрганизаций", СертификатыОрганизаций);
	
КонецПроцедуры

Функция НеобходимостьЗадаватьВопросПриВыбореСертификатов()
	
	НеобходимостьЗадаватьВопрос = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "НеобходимостьЗадаватьВопросПриВыбореСертификатов");
	
	Если НеобходимостьЗадаватьВопрос = Неопределено Тогда
		НеобходимостьЗадаватьВопрос = Новый Соответствие;
	КонецЕсли;
	
	Возврат НеобходимостьЗадаватьВопрос;
	
КонецФункции

Функция НеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(Организация) Экспорт
	
	НеобходимостьЗадаватьВопрос = НеобходимостьЗадаватьВопросПриВыбореСертификатов();
	НеобходимостьЗадаватьВопросОрганизации = НеобходимостьЗадаватьВопрос.Получить(Организация);
	
	Возврат НеобходимостьЗадаватьВопросОрганизации <> Ложь;
	
КонецФункции

Процедура ЗапомнитьНеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(Организация, НеобходимостьЗадаватьВопросОрганизации) Экспорт
	
	Если Организация <> Неопределено Тогда
		НеобходимостьЗадаватьВопрос = НеобходимостьЗадаватьВопросПриВыбореСертификатов();
		НеобходимостьЗадаватьВопрос.Вставить(Организация, НеобходимостьЗадаватьВопросОрганизации);
	ИначеЕсли НеобходимостьЗадаватьВопросОрганизации = Неопределено Тогда
		НеобходимостьЗадаватьВопрос = Неопределено;
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот",
		"НеобходимостьЗадаватьВопросПриВыбореСертификатов", НеобходимостьЗадаватьВопрос);
	
КонецПроцедуры

Функция НастройкиПодписанияОрганизаций() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот",
		"НастройкиПодписанияОрганизаций");
КонецФункции

Процедура ЗапомнитьНастройкиПодписанияОрганизаций(НастройкиПодписанияОрганизаций) Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ЭлектронныйКадровыйДокументооборот",
		"НастройкиПодписанияОрганизаций",
		НастройкиПодписанияОрганизаций);
КонецПроцедуры

Функция ПодписыватьСертификатамиГоловнойОрганизации() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "ПодписыватьСертификатамиГоловнойОрганизации");
КонецФункции

Процедура ЗапомнитьПодписыватьСертификатамиГоловнойОрганизации(ПодписыватьСертификатамиГоловнойОрганизации) Экспорт
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныйКадровыйДокументооборот",
		"ПодписыватьСертификатамиГоловнойОрганизации",
		ПодписыватьСертификатамиГоловнойОрганизации);
КонецПроцедуры

Процедура ОчиститьНастройкиПодписанияПечатныхФорм() Экспорт
	ЗапомнитьПодписантовОрганизаций(Неопределено);
	ЗапомнитьСертификатыОрганизаций(Неопределено);
	ЗапомнитьНеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(Неопределено, Неопределено);
	ЗапомнитьНастройкиПодписанияОрганизаций(Неопределено);
	ЗапомнитьПодписыватьСертификатамиГоловнойОрганизации(Неопределено);
КонецПроцедуры

Процедура УдалитьФайлыИзОбработкиПользователя(ФайлыКОбработке, Действие = Неопределено) Экспорт
	
	РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.УдалитьФайлыИзОбработкиПользователя(ФайлыКОбработке, , Действие);
	
КонецПроцедуры

// Возвращает структуру информации о печатной форме, созданном присоединенном файле.
//
// Параметры:
//  ПечатнаяФорма              - ТабличныйДокумент
//  ОбъектВладелец             - Ссылка, на объект владелец присоединенных файлов
//  ИдентификаторПечатнойФормы - Строка, Идентификатор печатной формы отличающий одни однотипные формы от других
//  Название                   - Строка, человекочитаемое представление печатной формы
//  Организация                - СправочникСсылка.Организации
//  ФизическоеЛицо             - СправочникСсылка.ФизическиеЛица
//  ИмяФайла                   - Строка, имя файла
//	РегистрироватьКОтправке	   - Булево
//
// Возвращаемое значение:
//  Структура - см. КадровыйЭДО.ДанныеПечатнойФормы()
//
Функция ДобавитьПечатнуюФорму(ПечатнаяФорма, ОбъектВладелец, ИдентификаторПечатнойФормы, Название, Организация, ФизическоеЛицо, ИмяФайла = "", РегистрироватьКОтправке = Ложь) Экспорт
	
	ДанныеПечатнойФормы = КадровыйЭДО.ДанныеПечатнойФормы();
	ДанныеПечатнойФормы.Владелец                   = ОбъектВладелец;
	ДанныеПечатнойФормы.ПечатнаяФорма              = ПечатнаяФорма;
	ДанныеПечатнойФормы.ИдентификаторПечатнойФормы = ИдентификаторПечатнойФормы;
	ДанныеПечатнойФормы.Название                   = Название;
	ДанныеПечатнойФормы.Организация                = Организация;
	ДанныеПечатнойФормы.ФизическоеЛицо             = ФизическоеЛицо;
	Если ПустаяСтрока(ИмяФайла) Тогда
		ДанныеПечатнойФормы.ИмяФайла               = ДанныеПечатнойФормы.Название;
	Иначе
		ДанныеПечатнойФормы.ИмяФайла               = ИмяФайла;
	КонецЕсли;
	ДанныеПечатнойФормы.РегистрироватьКОтправке	   = РегистрироватьКОтправке;
	
	СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, РаботаСФайламиБЗК.ВременныйКаталог(), Новый УникальныйИдентификатор);
	
	Возврат ДанныеПечатнойФормы;
	
КонецФункции

Функция ПараметрыОткрытияФормыПодписанияПрисоединенныхФайлов(ПрисоединенныеФайлы, ЗаполнитьПараметрыКоманды = Ложь) Экспорт
	
	Возврат ПараметрыОткрытияФормыПодписанияПечатныхФорм(
		РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФормНаПодпись(ПрисоединенныеФайлы), ЗаполнитьПараметрыКоманды);
	
КонецФункции

Функция ПараметрыОткрытияФормыПодписанияПечатныхФорм(ДанныеПрисоединенныхФайлов, ЗаполнитьПараметрыКоманды = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыФормы.ПараметрКоманды = Новый Массив;
	
	КоллекцияПечатныхФорм = Новый Массив;
	ОбъектыПечати = Новый СписокЗначений;
	ПараметрыПечати = Новый Структура;
	ОписанияФайлов = КадровыйЭДО.ОписанияФайловПечатныхФорм();
	КадровыйЭДОКлиентСервер.ДобавитьВПараметрыПечатиОписанияФайловПечатныхФорм(ПараметрыПечати, ОписанияФайлов);
	
	Поля = УправлениеПечатьюКлиентСервер.ИменаПолейКоллекцииПечатныхФорм();
	Владельцы = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПрисоединенныхФайлов, "Владелец", Истина);
	Идентификаторы = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПрисоединенныхФайлов, "ИдентификаторПечатнойФормы", Истина);
	
	ДобавленныеКоллекции = Новый Соответствие;
	Для Каждого Владелец Из Владельцы Цикл
		
		Для Каждого ИдентификаторПечатнойФормы Из Идентификаторы Цикл
			
			ОтборСтрок = Новый Структура("Владелец,ИдентификаторПечатнойФормы", Владелец, ИдентификаторПечатнойФормы);
			НайденныеПечатныеФормы = ДанныеПрисоединенныхФайлов.НайтиСтроки(ОтборСтрок);
			
			Если НайденныеПечатныеФормы.Количество() > 0 Тогда
				
				ПечатнаяФорма = ДобавленныеКоллекции.Получить(ИдентификаторПечатнойФормы);
				Если ПечатнаяФорма = Неопределено Тогда
					
					ПечатнаяФорма = Новый Структура(СтрСоединить(Поля, ","));
					ПечатнаяФорма.СинонимМакета = НайденныеПечатныеФормы[0].Название;
					ПечатнаяФорма.Экземпляров = 1;
					
					ПечатнаяФорма.ИмяМакета = ИдентификаторПечатнойФормы;
					ПечатнаяФорма.ИмяВРЕГ = ВРег(ПечатнаяФорма.ИмяМакета);
					
					ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент();
					ПечатнаяФорма.ТабличныйДокумент.Защита = Истина;
					
					КоллекцияПечатныхФорм.Добавить(ПечатнаяФорма);
					ДобавленныеКоллекции.Вставить(ИдентификаторПечатнойФормы, ПечатнаяФорма);
					
				КонецЕсли;
				
				НачалоФормы = ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы + 1;
				Для Каждого ФайлНаПодпись Из НайденныеПечатныеФормы Цикл
					
					Если ЗаполнитьПараметрыКоманды Тогда
						ПараметрыФормы.ПараметрКоманды.Добавить(ФайлНаПодпись.Владелец);
					КонецЕсли;
					
					НачалоДетальнойФормы = ПечатнаяФорма.ТабличныйДокумент.ВысотаТаблицы + 1;
					
					ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма.ТабличныйДокумент,
						КадровыйЭДО.ПечатнаяФормаСоШтампами(ФайлНаПодпись.ФайлОбъекта, ФайлНаПодпись.Оригинал.Получить(), Ложь, Истина));
					
					КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ПечатнаяФорма.ТабличныйДокумент,
						ИдентификаторПечатнойФормы, НачалоДетальнойФормы, ПечатнаяФорма, Владелец);
					
					КадровыйЭДО.ДобавитьОписаниеФайла(ОписанияФайлов, КадровыйЭДО.ДанныеПечатнойФормыПоДаннымФайлаПечатнойФормы(ФайлНаПодпись));
					
				КонецЦикла;
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ПечатнаяФорма.ТабличныйДокумент, НачалоФормы, ОбъектыПечати, Владелец);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("КоллекцияПечатныхФорм",  КоллекцияПечатныхФорм);
	ПараметрыФормы.Вставить("ОбъектыПечати",          ОбъектыПечати);
	ПараметрыФормы.Вставить("ПараметрыПечати",        ПараметрыПечати);
	ПараметрыФормы.Вставить("ПодписаниеПечатныхФорм", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает соответствия описаний файлов печатных форм.
//
// Параметры:
//  ФайлыДляВывода         - Массив, ссылок на присоединенные файлы.
//  ИдентификаторХранилища - УникальныйИдентификатор, идентификатор формы из которой выполняется вывод.
//
// Возвращаемое значение:
//  Соответствие - Ключ, ссылка на присоединенный файл
//                Значение, Структура с ключами:
//                 * Оригинал      - Структура, описание выводимого
//                                   файла-оригинала, см. ОписаниеВыводимогоФайла
//                 * Представления - Массив описаний выводимых
//                                   файлов-представлений, см. ОписаниеВыводимогоФайла
//                 * Подписи       - Массив описаний выводимых
//                                   файлов-подписей, см. ОписаниеВыводимогоФайла
//
Функция ДанныеФайловПечатныхФорм(ФайлыДляВывода, ИдентификаторХранилища = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Соответствие;
	Если ФайлыДляВывода.Количество() > 0 Тогда
		
		Если ИдентификаторХранилища = Неопределено Тогда
			ИдентификаторХранилища = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ОписанияФайлов = Новый Массив;
		ПрисоединенныеФайлы = Новый Массив;
		Для Каждого ФайлДляВывода Из ФайлыДляВывода Цикл
			
			Если ТипЗнч(ФайлДляВывода) = Тип("Структура") Тогда
				ОписанияФайлов.Добавить(ФайлДляВывода);
			Иначе
				ПрисоединенныеФайлы.Добавить(ФайлДляВывода);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПрисоединенныеФайлы.Количество() > 0 Тогда
			ВставитьДанныеПрисоединенныхФайловПечатныхФорм(ДанныеФайлов, ПрисоединенныеФайлы, ИдентификаторХранилища);
		КонецЕсли;
		
		Если ОписанияФайлов.Количество() > 0 Тогда
			ВставитьДанныеОписанийФайловПечатныхФорм(ДанныеФайлов, ОписанияФайлов, ИдентификаторХранилища);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеФайлов;
	
КонецФункции

Функция ПодписиБезСертификатов(ОбъектыПечати, ИдентификаторПечатнойФормы) Экспорт
	
	Выборка = КадровыйЭДО.ВыборкаДанныхПечатныхФорм(ОбъектыПечати,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПечатнойФормы));
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторХранилища = Новый УникальныйИдентификатор;
	
	ПодписанныеОбъекты = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ПодписанныеОбъекты.Добавить(Выборка.ФайлОбъекта);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект В(&ПодписанныеОбъекты)";
	
	УстановитьПривилегированныйРежим(Истина);
	Подписи = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
	ПодписиССертификатами = Новый Массив;
	Для Каждого ДанныеПодписи Из Подписи Цикл
		Если Не ЗначениеЗаполнено(ДанныеПодписи.Отпечаток) Тогда
			ДанныеПодписи.Сертификат = Неопределено;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ДанныеПодписи.Сертификат.Получить()) = Тип("ДвоичныеДанные") Тогда
			ПодписиССертификатами.Добавить(ДанныеПодписи);
			Продолжить;
		КонецЕсли;
		ДанныеПодписи.Отпечаток = "";
		ДанныеПодписи.Сертификат = Неопределено;
		ДанныеПодписи.Подпись = ПоместитьВоВременноеХранилище(
			ДанныеПодписи.Подпись.Получить(), ИдентификаторХранилища);
	КонецЦикла;
	
	Для Каждого ПодписьССертификатом Из ПодписиССертификатами Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Подписи, ПодписьССертификатом);
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

Функция ФайлыНаПодписьПользователя() Экспорт
	Возврат РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ФайлыНаПодписьПользователя(Истина).
		ВыгрузитьКолонку("ФайлОбъекта");
КонецФункции

Функция ЭлектронныеДокументыПоСсылкамНаДокументыКадровогоЭДО(ДокументыКадровогоЭДО) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПечатныеФормы", Новый Массив);
	Результат.Вставить("ПрисоединенныеФайлы", Новый Массив);
	Результат.Вставить("ДокументыПоКатегориям", Новый Соответствие);
	Результат.Вставить("Организации", Новый Соответствие);
	Результат.Вставить("ГоловныеОрганизации", Новый Соответствие);
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДокументыКадровогоЭДО, "ЭлектронныйДокумент,КатегорияДокумента,Внешний,Организация");
	Для Каждого РеквизитыДокумента Из РеквизитыДокументов Цикл
		Результат.Организации.Вставить(РеквизитыДокумента.Значение.Организация, Истина);
		Результат.ГоловныеОрганизации.Вставить(ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(РеквизитыДокумента.Значение.Организация), Истина);
		Если РеквизитыДокумента.Значение.Внешний = Истина Тогда
			Результат.ПрисоединенныеФайлы.Добавить(РеквизитыДокумента.Значение.ЭлектронныйДокумент);
		Иначе
			Результат.ПечатныеФормы.Добавить(РеквизитыДокумента.Значение.ЭлектронныйДокумент);
		КонецЕсли;
		ДокументыКатегории = Результат.ДокументыПоКатегориям.Получить(РеквизитыДокумента.Значение.КатегорияДокумента);
		Если ДокументыКатегории = Неопределено Тогда
			ДокументыКатегории = Новый Массив();
			Результат.ДокументыПоКатегориям.Вставить(РеквизитыДокумента.Значение.КатегорияДокумента, ДокументыКатегории);
		КонецЕсли;
		ДокументыКатегории.Добавить(РеквизитыДокумента.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлектронныйДокументКадровогоЭДО(ДокументКадровогоЭДО) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКадровогоЭДО, "ЭлектронныйДокумент");
	
КонецФункции

Функция ДанныеФайловНаПодпись(ПрисоединенныеФайлы, Знач ИдентификаторХранилища = Неопределено) Экспорт
	
	ДанныеФайлов = Новый Массив;
	Если ИдентификаторХранилища = Неопределено Тогда
		ИдентификаторХранилища = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ПрисоединенныеФайлы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Организация КАК Организация,
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент В(&ЭлектронныеДокументы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеФайла = КадровыйЭДО.ДанныеПодписываемогоФайла();
		
		ДанныеФайла.Организация = Выборка.Организация;
		ДанныеФайла.ФайлОбъекта = Выборка.ЭлектронныйДокумент;
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторХранилища;
		
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(ДанныеФайла.ФайлОбъекта, ДополнительныеПараметры);
		ДанныеФайла.ИмяФайла = ДанныеПрисоединенногоФайла.ИмяФайла;
		ДанныеФайла.АдресВХранилище = ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла;
		
		Если ДанныеПрисоединенногоФайла.ПодписанЭП Тогда
			КадровыйЭДО.ЗаполнитьКоллекциюОтпечатковПодписей(ДанныеФайла, ДанныеФайла.ФайлОбъекта);
		КонецЕсли;
		
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

Процедура ОбновитьУведомленияВФоне() Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление уведомлений от 1С:Кабинет Сотрудника';
															|en = 'Update notifications from 1C:Employee Account'");
	ПараметрыВыполнения.КлючФоновогоЗадания = "4576cbf4-8395-46a1-9e66-54f66847c297";
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.БезРасширений = Истина;
	
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "ОбсужденияБЗК.ОбновитьУведомленияОНеобходимостиПодписанияФайловДокументовКЭДО");
	
КонецПроцедуры

Функция НастройкиПечатнойФормы(ИдентификаторПечатнойФормы)
	Возврат НастройкиПечатныхФорм().Получить(ИдентификаторПечатнойФормы);
КонецФункции

Функция СодержимоеДокументаПечатнойФормы(ИдентификаторПечатнойФормы) Экспорт
	
	Настройки = НастройкиПечатнойФормы(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат Перечисления.СодержимоеДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Настройки.СодержимоеДокумента;
	
КонецФункции

Функция КодКадровогоМероприятияПечатнойФормы(ИдентификаторПечатнойФормы)
	Настройки = НастройкиПечатнойФормы(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Настройки.КодДокументаКадровогоМероприятия;
КонецФункции

Функция ВариантПодписанияПечатнойФормы(ИдентификаторПечатнойФормы)
	Настройки = НастройкиПечатнойФормы(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Настройки.ВариантПодписания;
КонецФункции

Функция ЭтоСписочнаяПечатнаяФорма(ИдентификаторПечатнойФормы)
	
	Настройки = НастройкиПечатнойФормы(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Настройки.НаСписокСотрудников;
	
КонецФункции

Функция НаименованиеПечатнойФормы(ИдентификаторПечатнойФормы)
	
	Настройки = НастройкиПечатнойФормы(ИдентификаторПечатнойФормы);
	Если Настройки = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Настройки.Наименование;
	
КонецФункции

Функция НастройкиПечатныхФорм() Экспорт
	
	Возврат КадровыйЭДОПовтИсп.НастройкиПечатныхФорм();
	
КонецФункции

Функция ОбновитьСостоянияДокументовКЭДОВФоне(ДокументыКадровогоЭДО = Неопределено) Экспорт
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(, "КадровыйЭДО.ОбновитьСостоянияДокументовКЭДО", 
		ДокументыКадровогоЭДО);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает пустое описание выводимого файла.
//
// Возвращаемое значение:
//  Структура
//   * ИмяФайлаСРасширением       - Строка
//   * АдресВоВременномХранилище  - Строка
//   * Кодировка                  - см. РаботаСФайлами.ДанныеФайла.КодировкаТекущейВерсии
//   * ИдентификаторПечатнойФормы - Строка
//   * ФизическоеЛицо             - СправочникСсылка.ФизическиеЛица
//   * Владелец                   - Ссылка на объект владелец файла
//   * Комментарий                - Строка
//   * Размер                     - Число
//
Функция ОписаниеВыводимогоФайла()
	
	ОписаниеФайла = Новый Структура(
		"Ссылка,
		|ИмяФайлаСРасширением,
		|АдресВоВременномХранилище,
		|Кодировка,
		|ИдентификаторПечатнойФормы,
		|ФизическоеЛицо,
		|Владелец,
		|Комментарий,
		|Размер,
		|ИмяФайлаБезРасширения,
		|РасширениеФайла,
		|Номер,
		|Дата,
		|Название");
	
	ОписаниеФайла.Комментарий = "";
	ОписаниеФайла.Размер = 0;
	
	Возврат ОписаниеФайла;
	
КонецФункции

Функция ОписаниеВыводимогоФайлаПодписи() Экспорт
	ОписаниеФайла = ОписаниеВыводимогоФайла();
	ОписаниеФайла.Удалить("Дата");
	ОписаниеФайла.Вставить("ДатаПодписи");
	ОписаниеФайла.Вставить("Отпечаток");
	ОписаниеФайла.Вставить("УстановившийПодпись");
	ОписаниеФайла.Вставить("КомуВыданСертификат");
	ОписаниеФайла.Вставить("НаборСвойствПодписиКЭДО");
	Возврат ОписаниеФайла;
КонецФункции

Процедура ДобавитьЧастьИмениФайлаДетализации(ЧастиИмени, ОбъектДетализации, ЭтоФИО)
	
	ПредставлениеОбъекта = Строка(ОбъектДетализации);
	Если Не ПустаяСтрока(ПредставлениеОбъекта) Тогда
		
		Если ЭтоФИО Тогда
			ЧастиИмени.Добавить(СокрЛП(
				ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ПредставлениеОбъекта)));
		Иначе
			ЧастиИмени.Добавить(СокрЛП(ПредставлениеОбъекта));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыАдресацииОбъектов(ОбъектыПечати, ПутьКПодписантам = "")
	
	РеквизитыОбъектов = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ЧастиПутиКРеквизиту = СтрРазделить(ПутьКПодписантам, ".");
	ТипыОбъектов = ОбщегоНазначенияБЗК.ОбъектыПоТипам(ОбъектыПечати);
	ТекстыЗапроса = Новый Массив;
	СчетчикПараметров = 0;
	Для Каждого ОбъектыТипа Из ТипыОбъектов Цикл
		
		ДобавитьДетальныеЗаписи = Ложь;
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОбъектыТипа.Ключ);
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.Сотрудник.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
					|	ТаблицаДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.Сотрудник.Наименование КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СовмещающийСотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.СовмещающийСотрудник.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	ТаблицаДокумента.СовмещающийСотрудник КАК Сотрудник,
					|	ТаблицаДокумента.СовмещающийСотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.СовмещающийСотрудник.Наименование КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Сотрудник", МетаданныеТипа)
				И МетаданныеТипа.Реквизиты.Сотрудник.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	ТаблицаДокумента.Сотрудник КАК ФизическоеЛицо,
					|	ТаблицаДокумента.Сотрудник.Наименование КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ФизическоеЛицо", МетаданныеТипа) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ТаблицаДокумента.ФизическоеЛицо.Наименование КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			ИначеЕсли ЧастиПутиКРеквизиту.Количество() = 2
				И МетаданныеТипа.ТабличныеЧасти.Найти(ЧастиПутиКРеквизиту[0]) <> Неопределено
				И МетаданныеТипа.ТабличныеЧасти[ЧастиПутиКРеквизиту[0]].Реквизиты.Найти(ЧастиПутиКРеквизиту[1]) <> Неопределено Тогда
				
				ДобавитьДетальныеЗаписи = Истина;
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)";
				
			Иначе
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка КАК Ссылка,
					|	ТаблицаДокумента.Номер КАК Номер,
					|	ТаблицаДокумента.НомерПриказа КАК НомерПриказа,
					|	ТаблицаДокумента.Дата КАК Дата,
					|	ТаблицаДокумента.Организация КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО,
					|	НЕОПРЕДЕЛЕНО КАК Детализация
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
					|		ПО ТаблицаДокумента.Ссылка = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация
					|
					|ИМЕЮЩИЕ
					|	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.ФизическоеЛицо) >= 2
					|		ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.Сотрудник) >= 2)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация,
					|	МАКСИМУМ(СоставДокументовЗарплатаКадры.Сотрудник),
					|	МАКСИМУМ(СоставДокументовЗарплатаКадры.ФизическоеЛицо),
					|	"""",
					|	НЕОПРЕДЕЛЕНО
					|ИЗ
					|	#ТаблицаДокумента КАК ТаблицаДокумента
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
					|		ПО ТаблицаДокумента.Ссылка = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
					|ГДЕ
					|	ТаблицаДокумента.Ссылка В(&Объекты)
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаДокумента.Ссылка,
					|	ТаблицаДокумента.Номер,
					|	ТаблицаДокумента.НомерПриказа,
					|	ТаблицаДокумента.Дата,
					|	ТаблицаДокумента.Организация
					|
					|ИМЕЮЩИЕ
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.ФизическоеЛицо) < 2 И
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоставДокументовЗарплатаКадры.Сотрудник) < 2";
					
			КонецЕсли;
			
			Если ДобавитьДетальныеЗаписи Тогда
				
				ИмяТаблицыДетализации = МетаданныеТипа.ПолноеИмя() + "." + ЧастиПутиКРеквизиту[0];
				ПсевдонимТаблицыДетализации = СтрЗаменить(ИмяТаблицыДетализации, ".", "");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "НЕОПРЕДЕЛЕНО КАК Детализация",
					ПсевдонимТаблицыДетализации + "." + ЧастиПутиКРеквизиту[1] + " КАК Детализация");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "#ТаблицаДокумента КАК ТаблицаДокумента",
					"#ТаблицаДокумента КАК ТаблицаДокумента
					|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыДетализации + " КАК " + ПсевдонимТаблицыДетализации + "
					|	По ТаблицаДокумента.Ссылка = " + ПсевдонимТаблицыДетализации + ".Ссылка");
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументЗаполнения", МетаданныеТипа) Тогда
				
				МетаданныеДетализации = Метаданные.НайтиПоТипу(МетаданныеТипа.Реквизиты["ДокументЗаполнения"].Тип.Типы()[0]);
				ИмяТаблицыДетализации = МетаданныеДетализации.ПолноеИмя();
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.Дата",
					"ЕСТЬNUll(ТаблицаСписочногоДокумента.Дата, ТаблицаДокумента.Дата)");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.Номер,",
					"ЕСТЬNUll(ТаблицаСписочногоДокумента.Номер, ТаблицаДокумента.Номер),");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.Номер КАК",
					"ЕСТЬNUll(ТаблицаСписочногоДокумента.Номер, ТаблицаДокумента.Номер) КАК");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.НомерПриказа",
					"ЕСТЬNUll(ТаблицаСписочногоДокумента.НомерПервичногоДокумента, ТаблицаДокумента.НомерПриказа)");
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "#ТаблицаДокумента КАК ТаблицаДокумента",
					"#ТаблицаДокумента КАК ТаблицаДокумента
					|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыДетализации + " КАК ТаблицаСписочногоДокумента
					|	По ТаблицаДокумента.ДокументЗаполнения = ТаблицаСписочногоДокумента.Ссылка");
				
			КонецЕсли;
			
			ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "#ТаблицаДокумента", МетаданныеТипа.ПолноеИмя());
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПервичногоДокумента", МетаданныеТипа) Тогда
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.НомерПриказа", "ТаблицаДокумента.НомерПервичногоДокумента");
			ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПриказа", МетаданныеТипа) Тогда
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "ТаблицаДокумента.НомерПриказа", "НЕОПРЕДЕЛЕНО");
			КонецЕсли;
			
			ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
			ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
			
			ТекстыЗапроса.Добавить(ТекстЗапрос);
			Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
			
			СчетчикПараметров = СчетчикПараметров + 1;
			
		ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа) Тогда
			
			Если МетаданныеТипа = Метаданные.Справочники.Сотрудники Тогда
				
				Запрос.УстановитьПараметр("Сегодня", ТекущаяДатаСеанса());
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
					
					ТекстЗапрос =
						"ВЫБРАТЬ
						|	ТаблицаСправочника.Ссылка КАК Ссылка,
						|	"""" КАК Номер,
						|	"""" КАК НомерПриказа,
						|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
						|	КадроваяИстория.Организация КАК Организация,
						|	ТаблицаСправочника.Ссылка КАК Сотрудник,
						|	ТаблицаСправочника.ФизическоеЛицо КАК ФизическоеЛицо,
						|	ТаблицаСправочника.ФизическоеЛицо.Наименование КАК ФИО,
						|	НЕОПРЕДЕЛЕНО КАК Детализация 
						|ИЗ
						|	Справочник.Сотрудники КАК ТаблицаСправочника
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИстория
						|		ПО ТаблицаСправочника.Ссылка = КадроваяИстория.Сотрудник
						|			И (&Сегодня МЕЖДУ КадроваяИстория.ДатаНачала И КадроваяИстория.ДатаОкончания)
						|ГДЕ
						|	ТаблицаСправочника.Ссылка В(&Объекты)";
					
				Иначе
					
					ТекстЗапрос =
						"ВЫБРАТЬ
						|	ТаблицаСправочника.Ссылка КАК Ссылка,
						|	"""" КАК Номер,
						|	"""" КАК НомерПриказа,
						|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
						|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
						|	ТаблицаСправочника.Ссылка КАК Сотрудник,
						|	ТаблицаСправочника.ФизическоеЛицо КАК ФизическоеЛицо,
						|	ТаблицаСправочника.ФизическоеЛицо.Наименование КАК ФИО,
						|	НЕОПРЕДЕЛЕНО КАК Детализация
						|ИЗ
						|	Справочник.Сотрудники КАК ТаблицаСправочника
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
						|		ПО ТаблицаСправочника.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
						|ГДЕ
						|	ТаблицаСправочника.Ссылка В(&Объекты)";
					
				КонецЕсли;
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа = Метаданные.Справочники.ФизическиеЛица Тогда
				
				Запрос.УстановитьПараметр("Сегодня", ТекущаяДатаСеанса());
				Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
					
					ТекстЗапрос =
						"ВЫБРАТЬ
						|	ТаблицаСправочника.Ссылка КАК Ссылка,
						|	"""" КАК Номер,
						|	"""" КАК НомерПриказа,
						|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
						|	КадроваяИстория.Организация КАК Организация,
						|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
						|	ТаблицаСправочника.Ссылка КАК ФизическоеЛицо,
						|	ТаблицаСправочника.Наименование КАК ФИО
						|ИЗ
						|	Справочник.ФизическиеЛица КАК ТаблицаСправочника
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
						|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИстория
						|			ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = КадроваяИстория.Сотрудник
						|				И (&Сегодня МЕЖДУ КадроваяИстория.ДатаНачала И КадроваяИстория.ДатаОкончания)
						|		ПО ТаблицаСправочника.Ссылка = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
						|			И (&Сегодня МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаОкончания, ДЕНЬ))
						|ГДЕ
						|	ТаблицаСправочника.Ссылка В(&Объекты)";
					
				Иначе
					
					ТекстЗапрос =
						"ВЫБРАТЬ
						|	ТаблицаСправочника.Ссылка КАК Ссылка,
						|	"""" КАК Номер,
						|	"""" КАК НомерПриказа,
						|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
						|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
						|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
						|	ТаблицаСправочника.Ссылка КАК ФизическоеЛицо,
						|	ТаблицаСправочника.Наименование КАК ФИО
						|ИЗ
						|	Справочник.ФизическиеЛица КАК ТаблицаСправочника
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
						|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
						|			ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
						|		ПО ТаблицаСправочника.Ссылка = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
						|			И (&Сегодня МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И КОНЕЦПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаОкончания, ДЕНЬ))
						|ГДЕ
						|	ТаблицаСправочника.Ссылка В(&Объекты)";
					
				КонецЕсли;
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа = Метаданные.Справочники.Организации Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	ТаблицаСправочника.Ссылка КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО
					|ИЗ
					|	Справочник.Организации КАК ТаблицаСправочника
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			ИначеЕсли МетаданныеТипа.Владельцы.Содержит(Метаданные.Справочники.Организации) Тогда
				
				ТекстЗапрос =
					"ВЫБРАТЬ
					|	ТаблицаСправочника.Ссылка КАК Ссылка,
					|	"""" КАК Номер,
					|	"""" КАК НомерПриказа,
					|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
					|	ТаблицаСправочника.Владелец КАК Организация,
					|	НЕОПРЕДЕЛЕНО КАК Сотрудник,
					|	НЕОПРЕДЕЛЕНО КАК ФизическоеЛицо,
					|	"""" КАК ФИО
					|ИЗ
					|	Справочник.ШтатноеРасписание КАК ТаблицаСправочника
					|ГДЕ
					|	ТаблицаСправочника.Ссылка В(&Объекты)";
				
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "Справочник.ШтатноеРасписание", МетаданныеТипа.ПолноеИмя());
				
				ИмяПараметра = "Объекты_" + Формат(СчетчикПараметров, "ЧН=; ЧГ=");
				ТекстЗапрос = СтрЗаменить(ТекстЗапрос, "(&Объекты)", "(&" + ИмяПараметра + ")");
				
				ТекстыЗапроса.Добавить(ТекстЗапрос);
				Запрос.УстановитьПараметр(ИмяПараметра, ОбъектыТипа.Значение);
				
				СчетчикПараметров = СчетчикПараметров + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса,Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
			+ "
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			РеквизитыОбъекта = Новый Структура("Номер,НомерПриказа,Дата,Организация,Сотрудник,ФизическоеЛицо,ФИО");
			ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Выборка);
			
			РеквизитыОбъектов.Вставить(Выборка.Ссылка, РеквизитыОбъекта);
			Если Не ЗначениеЗаполнено(РеквизитыОбъекта.ФизическоеЛицо) Тогда
				
				ФизическиеЛицаДокумента = Новый Массив;
				Пока Выборка.Следующий() Цикл
					Если ЗначениеЗаполнено(Выборка.Детализация) Тогда
						ФизическиеЛицаДокумента.Добавить(Выборка.Детализация);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ФизическиеЛицаДокумента) Тогда
					РеквизитыОбъекта.ФизическоеЛицо = ФизическиеЛицаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РеквизитыОбъектов;
	
КонецФункции

Процедура СоздатьФайлПечатнойФормы(ДанныеПечатнойФормы, ИмяВременногоКаталога, ИдентификаторХранилища)
	
	ТипФайла = ТипФайлаЭлектронногоДокумента();
	НастройкиФормата = НастройкиФорматаСохраненияЭлектронногоДокумента(ТипФайла);
	
	ДатаВыпуска = ТекущаяДатаСеанса();
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
		
		Если ДанныеПечатнойФормы.ПечатнаяФорма <> Неопределено Тогда
			
			ПечатнаяФорма = Новый ТабличныйДокумент;
			ЗарплатаКадрыОтчеты.ВывестиБланкВТабличныйДокумент(ПечатнаяФорма, ДанныеПечатнойФормы.ПечатнаяФорма);
			
			ПечатнаяФорма.Область(ПечатнаяФорма.ВысотаТаблицы, , ПечатнаяФорма.ВысотаТаблицы).КонецСтраницы = Ложь;
			
			ОбластиКУдалению = Новый Массив;
			Для Каждого Область Из ПечатнаяФорма.Области Цикл
				Если СтрНайти(Область.Имя, "ШтампЭП") = 0 Тогда
					ОбластиКУдалению.Добавить(Область.Имя);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ОбластьКУдалению Из ОбластиКУдалению Цикл
				ПечатнаяФорма.Области.Найти(ОбластьКУдалению).Имя = Неопределено;		
			КонецЦикла;
			
			ПечатнаяФорма.НижнийКолонтитул.Выводить = Истина;
			ПечатнаяФорма.НижнийКолонтитул.ТекстВЦентре =
				СтрШаблон("%1 (%2). " + НСтр("ru = 'Стр';
											|en = 'Page'") + ". [&НомерСтраницы]/[&СтраницВсего]",
				Формат(ДатаВыпуска, "ДЛФ=DT"),
				Метаданные.Синоним);
			ПечатнаяФорма.НижнийКолонтитул.Шрифт = Новый Шрифт(ШрифтыСтиля.ВажнаяНадписьШрифт, , 6, Ложь);
			
			ИмяФайлаСРасширением = ИмяФайлаКЭДО(ДанныеПечатнойФормы.ИмяФайла + "." + НастройкиФормата.Расширение);
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ФайлКЭДО = Новый Файл(ПолноеИмяФайла);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов     = ДанныеПечатнойФормы.Владелец;
			ПараметрыФайла.ИмяБезРасширения   = ФайлКЭДО.ИмяБезРасширения;
			ПараметрыФайла.РасширениеБезТочки = СтрЗаменить(ФайлКЭДО.Расширение, ".", "");
			
			Если КадровыйЭДО.ЭтоОбъектСПечатнымиФормами(ДанныеПечатнойФормы.Владелец) Тогда
				ДанныеПечатнойФормы.ФайлОбъекта = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище);
			КонецЕсли;
			
			ДанныеПечатнойФормы.АдресВХранилище = АдресВХранилище;
			
			Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.ФизическоеЛицо)
				И ЗначениеЗаполнено(ДанныеПечатнойФормы.Сотрудник) Тогда
				
				ДанныеПечатнойФормы.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДанныеПечатнойФормы.Сотрудник, "ФизическоеЛицо");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПечатнойФормы.ФайлОбъекта) Тогда
				
				НачатьТранзакцию();
				Попытка
					РегистрыСведений.ПодписанныеПечатныеФормы.ДобавитьПечатнуюФорму(ДанныеПечатнойФормы, ПечатнаяФорма, ДатаВыпуска);
					Если ТипЗнч(ДанныеПечатнойФормы.Владелец) <> Тип("ДокументСсылка.ДокументКадровогоЭДО") Тогда
						ОписаниеДокумента = Документы.ДокументКадровогоЭДО.СвойстваДокумента(
							ДанныеПечатнойФормы.ФайлОбъекта,
							ДанныеПечатнойФормы.Организация,
							ДанныеПечатнойФормы.ФизическоеЛицо,
							ДанныеПечатнойФормы.Владелец,
							,
							СодержимоеДокументаПечатнойФормы(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы),
							КодКадровогоМероприятияПечатнойФормы(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы),
							,
							ВариантПодписанияПечатнойФормы(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы));
						Если ЗначениеЗаполнено(ДанныеПечатнойФормы.РегистрироватьКОтправке) И ДанныеПечатнойФормы.РегистрироватьКОтправке Тогда
							ОписаниеДокумента.ДополнительныеСвойства = Новый Структура("РегистрироватьИзмененияКабинетСотрудника", Истина);			
						КонецЕсли;
						ОписаниеДокумента.НаСписокСотрудников = ЭтоСписочнаяПечатнаяФорма(ДанныеПечатнойФормы.ИдентификаторПечатнойФормы);
						ДокументКадровогоЭДО = Документы.ДокументКадровогоЭДО.Добавить(ОписаниеДокумента);
						Если Не ЗначениеЗаполнено(ДанныеПечатнойФормы.Владелец) Тогда
							ДанныеПечатнойФормы.Владелец = ДокументКадровогоЭДО;
						КонецЕсли;
					КонецЕсли;
					ЗафиксироватьТранзакцию();
				Исключение
					Ошибка = ИнформацияОбОшибке();
					ОтменитьТранзакцию();
					ВызватьИсключение КраткоеПредставлениеОшибки(Ошибка);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаменитьОбластьТабличногоДокумента(ТабличныйДокумент, ИмяОбласти, ТабличныйДокументСНовойОбластью)
	
	ОбластьПриемник = ТабличныйДокумент.Области.Найти(ИмяОбласти);
	Если ОбластьПриемник <> Неопределено Тогда
		
		ПерваяСтрокаОбластиПриемника = ОбластьПриемник.Верх;
		ПоследняяСтрокаОбластиПриемника = ОбластьПриемник.Низ;
		
		УдалитьКонецСтраницыПрежнейОбласти = Ложь;
		Если СтрокаТабличногоДокументаСодержитКонецСтраницы(ТабличныйДокумент, ПоследняяСтрокаОбластиПриемника) Тогда
			
			УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокументСНовойОбластью, ТабличныйДокументСНовойОбластью.ВысотаТаблицы, Истина);
			УдалитьКонецСтраницыПрежнейОбласти = 
				(ТабличныйДокументСНовойОбластью.ВысотаТаблицы <> ПоследняяСтрокаОбластиПриемника - ПерваяСтрокаОбластиПриемника + 1);
			
		КонецЕсли;
		
		Пока ТабличныйДокументСНовойОбластью.Области.Количество() > 0 Цикл
			ТабличныйДокументСНовойОбластью.Области[0].Имя = Неопределено;
		КонецЦикла;
		
		ИсходнаяОбласть = ТабличныйДокументСНовойОбластью.Область(1, , ТабличныйДокументСНовойОбластью.ВысотаТаблицы);
		ИсходнаяОбласть.Имя = ИмяОбласти;
		
		ТабличныйДокумент.УдалитьОбласть(ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ОбластьВставки = ТабличныйДокумент.Область(ПерваяСтрокаОбластиПриемника, , ПерваяСтрокаОбластиПриемника);
		ТабличныйДокумент.ВставитьОбласть(ИсходнаяОбласть, ОбластьВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если УдалитьКонецСтраницыПрежнейОбласти Тогда
			УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокумент, ПоследняяСтрокаОбластиПриемника, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаТабличногоДокументаСодержитКонецСтраницы(ТабличныйДокумент, НомерСтроки)
	
	Если ТабличныйДокумент.ВысотаТаблицы < НомерСтроки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки).КонецСтраницы;
	
КонецФункции

Процедура УстановитьВТабличномДокументеКонецСтраницы(ТабличныйДокумент, НомерСтроки, КонецСтраницы)
	
	Если ТабличныйДокумент.ВысотаТаблицы < НомерСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Область(НомерСтроки, , НомерСтроки).КонецСтраницы = КонецСтраницы;
	
КонецПроцедуры

Функция ПодписантыОрганизацийПоУмолчанию()
	
	ПодписантыОрганизаций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "ПодписантыОрганизаций");
	
	Если ПодписантыОрганизаций = Неопределено Тогда
		ПодписантыОрганизаций = Новый Соответствие;
	КонецЕсли;
	
	Возврат ПодписантыОрганизаций;
	
КонецФункции

Функция СертификатыОрганизацийПоУмолчанию() Экспорт
	
	СертификатыОрганизаций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ЭлектронныйКадровыйДокументооборот", "СертификатыОрганизаций");
	
	Если СертификатыОрганизаций = Неопределено Тогда
		СертификатыОрганизаций = Новый Соответствие;
	КонецЕсли;
	
	Возврат СертификатыОрганизаций;
	
КонецФункции

Функция ДанныеЭлектронногоДокументаСоШтампамиПодписей(ЭлектронныйДокумент, ИдентификаторФормы) Экспорт
	
	Если КадровыйЭДО.ЭтоФайлПечатнойФормы(ЭлектронныйДокумент)
		Или ЭтоФайлЭлектронногоДокумента(ЭлектронныйДокумент) Тогда
		
		Возврат ФайлыСоШтампамиПодписей(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент)).Получить(ЭлектронныйДокумент);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФайлЭлектронногоДокумента(ЭлектронныйДокумент)
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент, ПараметрыДанныхФайла);
	Возврат КадровыйЭДОКлиентСервер.ЭтоРасширениеФайлаСПредставлением(ДанныеФайла.Расширение);
КонецФункции

Функция PDFПредставлениеPDFФайлаСоШтампамиПодписей(Оригинал, АдресВХранилище, ИмяФайла, ИдентификаторФормы)
	
	ДанныеФайлаНаПечать = Новый Структура;
	
	Попытка
		
		ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
		
		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
		ДанныеПрисоединенногоФайла = РаботаСФайлами.ДанныеФайла(Оригинал, ДополнительныеПараметры);
		
		ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ДанныеПрисоединенногоФайла.ИмяФайла);
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
		
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Оригинал);
		ТаблицаСоШтампами = КадровыйЭДО.ПечатнаяФормаСоШтампамиПоОригиналу(
			Новый ТабличныйДокумент, УстановленныеПодписи);
		ТаблицаСоШтампами.Область(ТаблицаСоШтампами.ВысотаТаблицы + 1, , ТаблицаСоШтампами.ВысотаТаблицы + 1, ).ВысотаСтроки = 6;
		
		// Подготовка файла со штампами
		ЗаписьФайлаНаПечать = Новый ЗаписьPDF();
		ЗаписьФайлаНаПечать.Открыть(ПолноеИмяФайла);
		
		// Добавление отображаемого объекта
		ОписаниеОбъекта = Новый ОписаниеОтображаемогоОбъектаPDF;
		ОписаниеОбъекта.Объект = ТаблицаСоШтампами;
		ЗаписьФайлаНаПечать.ЗаписатьОтображаемыйОбъект(ОписаниеОбъекта);
		
		ЗаписьФайлаНаПечать.Закрыть();
		
		ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
		
		ДанныеФайлаНаПечать.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
		
		ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
		ДанныеФайлаНаПечать.Вставить("ИмяФайла", Лев(ИмяФайла, ПозицияТочки) + "pdf");
		ДанныеФайлаНаПечать.Вставить("Размер", ДанныеФайла.Размер());
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			КадровыйЭДО.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Подготовка файла представления электронного документа';
					|en = 'Подготовка файла представления электронного документа'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(Ошибка));
		ДанныеФайлаНаПечать = Неопределено;
	КонецПопытки;
	
	Возврат ДанныеФайлаНаПечать;
	
КонецФункции

Функция PDFПредставлениеMXLФайлаСоШтампамиПодписей(Оригинал, АдресВХранилище, ИмяФайла, ИдентификаторФормы)
	
	ПредставлениеОригинала = Новый ТабличныйДокумент;
	ПредставлениеОригинала.Прочитать(ПолучитьИзВременногоХранилища(АдресВХранилище).ОткрытьПотокДляЧтения());
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Оригинал);
	ПредставлениеСоШтампами = КадровыйЭДО.ПечатнаяФормаСоШтампамиПоОригиналу(ПредставлениеОригинала, УстановленныеПодписи);
	
	ПотокЗаписи = Новый ПотокВПамяти;
	ПредставлениеСоШтампами.Записать(ПотокЗаписи, ТипФайлаЭлектронногоДокумента());
	ДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДанныеФайлаНаПечать = Новый Структура;
	ДанныеФайлаНаПечать.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	ДанныеФайлаНаПечать.Вставить("ИмяФайла", Лев(ИмяФайла, ПозицияТочки) + "pdf");
	ДанныеФайлаНаПечать.Вставить("Размер", ДанныеФайла.Размер());
	
	Возврат ДанныеФайлаНаПечать;
	
КонецФункции

Функция PDFПредставлениеФайлаИзображенияСоШтампамиПодписей(Оригинал, АдресВХранилище, ИмяФайла, ИдентификаторФормы)
	
	Представление = ПолучитьОбщийМакет("ШаблонПредставленияИзображенияЭлектронногоДокумента");
	Представление.Рисунки.ИзображениеЭлектронногоДокумента.Картинка = 
		Новый Картинка(ПолучитьИзВременногоХранилища(АдресВХранилище));
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Оригинал);
	ПредставлениеСоШтампами = КадровыйЭДО.ПечатнаяФормаСоШтампамиПоОригиналу(Представление, УстановленныеПодписи);
	
	ПотокЗаписи = Новый ПотокВПамяти;
	ПредставлениеСоШтампами.Записать(ПотокЗаписи, ТипФайлаЭлектронногоДокумента());
	ДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДанныеФайлаНаПечать = Новый Структура;
	ДанныеФайлаНаПечать.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	ДанныеФайлаНаПечать.Вставить("ИмяФайла", Лев(ИмяФайла, ПозицияТочки) + "pdf");
	ДанныеФайлаНаПечать.Вставить("Размер", ДанныеФайла.Размер());
	
	Возврат ДанныеФайлаНаПечать;
	
КонецФункции

Функция HTMLПредставлениеФайлаTXTСоШтампамиПодписей(Оригинал, АдресВХранилище, ИмяФайла, ИдентификаторФормы)
	
	ТелоДокумента = Новый ТекстовыйДокумент;
	ТелоДокумента.Прочитать(
		ПолучитьИзВременногоХранилища(АдресВХранилище).ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
	ТелоДокументаСтрокой = ТелоДокумента.ПолучитьТекст();
	
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, Символы.Таб, "    ");
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, " ", "&nbsp;");
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, Символы.НПП, "&nbsp;");
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, Символы.ПС, "<br/>");
	
	МакетПредставления = ПолучитьОбщийМакет("ШаблонHTMLПредставленияTXTФайла");
	ТелоДокументаСтрокой = СтрЗаменить(МакетПредставления.ПолучитьТекст(), "[ТекстБланка]", ТелоДокументаСтрокой);
	
	ВывестиПодписиВHTMLДокумент(Оригинал, ТелоДокументаСтрокой);
	
	ТелоДокумента.УстановитьТекст(ТелоДокументаСтрокой);
	
	ПотокЗаписи = Новый ПотокВПамяти;
	ТелоДокумента.Записать(ПотокЗаписи, КодировкаТекста.UTF8);
	ДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДанныеФайлаНаПечать = Новый Структура;
	ДанныеФайлаНаПечать.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
	ДанныеФайлаНаПечать.Вставить("ИмяФайла", Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4) + ".html");
	ДанныеФайлаНаПечать.Вставить("Размер", ДанныеФайла.Размер());
	
	Возврат ДанныеФайлаНаПечать;
	
КонецФункции

Функция HTMLПредставлениеФайлаHTMLСоШтампамиПодписей(Оригинал, АдресВХранилище, ИмяФайла, ИдентификаторФормы)
	
	ТелоДокумента = Новый ТекстовыйДокумент;
	ТелоДокумента.Прочитать(
		ПолучитьИзВременногоХранилища(АдресВХранилище).ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
	ТелоДокументаСтрокой = ТелоДокумента.ПолучитьТекст();
	
	ВывестиПодписиВHTMLДокумент(Оригинал, ТелоДокументаСтрокой);
	
	ТелоДокумента.УстановитьТекст(ТелоДокументаСтрокой);
	
	ПотокЗаписи = Новый ПотокВПамяти;
	ТелоДокумента.Записать(ПотокЗаписи, КодировкаТекста.UTF8);
	ДанныеФайла = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДанныеФайлаНаПечать = Новый Структура;
	ДанныеФайлаНаПечать.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
	ДанныеФайлаНаПечать.Вставить("ИмяФайла", ИмяФайла);
	ДанныеФайлаНаПечать.Вставить("Размер", ДанныеФайла.Размер());
	
	Возврат ДанныеФайлаНаПечать;
	
КонецФункции

Процедура ВывестиПодписиВHTMLДокумент(ЭлектронныйДокумент, HTMLДокумент)
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	Если УстановленныеПодписи.Количество() > 0 Тогда
		
		ЕстьОбластьШтампа = СтрНайти(HTMLДокумент, ТэгШтампаПодписи()) > 0;
		ЕстьОбластьШтампов = СтрНайти(HTMLДокумент, ТэгШтамповПодписей()) > 0;
		
		Если Не ЕстьОбластьШтампов
			И (Не ЕстьОбластьШтампа
				Или УстановленныеПодписи.Количество() > 1) Тогда
			
			ЕстьОбластьШтампов = ДобавитьОбластьПодписейHTMLДокументу(HTMLДокумент);
		КонецЕсли;
		
		НачальныйИндексСпискаПодписей = 0;
		Если ЕстьОбластьШтампа Тогда
			ВывестиHTMLШтампПодписи(HTMLДокумент, ТэгШтампаПодписи(), УстановленныеПодписи[0]);
			НачальныйИндексСпискаПодписей = 1;
		КонецЕсли;
		
		Если НачальныйИндексСпискаПодписей < УстановленныеПодписи.Количество() Тогда
			ВывестиHTMLШтампыПодписей(HTMLДокумент, ТэгШтамповПодписей(),
				УстановленныеПодписи, НачальныйИндексСпискаПодписей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОбластьПодписейHTMLДокументу(ТелоДокументаСтрокой)
	
	ПозицияКонцаТела = СтрНайти(ВРег(ТелоДокументаСтрокой), ВРег("</body>"));
	Если ПозицияКонцаТела > 0 Тогда
		ТелоДокументаСтрокой = Лев(ТелоДокументаСтрокой, ПозицияКонцаТела - 1)
			+ ТэгШтамповПодписей()
			+ Сред(ТелоДокументаСтрокой, ПозицияКонцаТела);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТэгШтампаПодписи()
	Возврат "<!-- Место для штампа подписи -->";
КонецФункции

Функция ТэгШтамповПодписей()
	Возврат "<!-- Место для штампов подписей -->";
КонецФункции

Процедура ВывестиHTMLШтампПодписи(ТелоДокументаСтрокой, ТэгШтампа, Подпись)
	
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, ТэгШтампа, HTMLШтампПодписи(Подпись));
	
КонецПроцедуры

Процедура ВывестиHTMLШтампыПодписей(ТелоДокументаСтрокой, ТэгШтампов, Подписи, ИндексПервойПодписи)
	
	ТелоШтампов = ПолучитьОбщийМакет("ШаблонHTMLТаблицыШтамповПодписей").ПолучитьТекст();
	ПраваяКолонка = Новый Массив;
	ЛеваяКолонка = Новый Массив;
	Для Индекс = ИндексПервойПодписи По Подписи.Количество() - 1 Цикл
		
		Если Цел(ИндексПервойПодписи / 2) = ИндексПервойПодписи / 2
			И Цел(Индекс / 2) = Индекс / 2
				Или Цел(ИндексПервойПодписи / 2) <> ИндексПервойПодписи / 2
					И Цел(Индекс / 2) <> Индекс / 2 Тогда
			
			ЛеваяКолонка.Добавить(HTMLШтампПодписи(Подписи[Индекс]));
		Иначе
			ПраваяКолонка.Добавить(HTMLШтампПодписи(Подписи[Индекс]));
		КонецЕсли;
		
	КонецЦикла;
	ТелоШтампов = СтрЗаменить(ТелоШтампов, "<!-- Левая колонка штампов -->", СтрСоединить(ЛеваяКолонка, Символы.ВК));
	ТелоШтампов = СтрЗаменить(ТелоШтампов, "<!-- Правая колонка штампов -->", СтрСоединить(ПраваяКолонка, Символы.ВК));
	
	ТелоДокументаСтрокой = СтрЗаменить(ТелоДокументаСтрокой, ТэгШтампов, ТелоШтампов);
	
КонецПроцедуры

Функция HTMLШтампПодписи(Подпись)
	
	Если ТипЗнч(Подпись.Сертификат) = Тип("ДвоичныеДанные") Тогда
		Сертификат = Подпись.Сертификат;
	Иначе
		Сертификат = Подпись.Сертификат.Получить();
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		Сертификат = ПолучитьИзВременногоХранилища(Сертификат);
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) <> Тип("ДвоичныеДанные") Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить данные сертификата подписи %1 от %2 (отпечаток: %3)';
										|en = 'Cannot get signature certificate data %1 from %2 (thumbprint: %3)'"),
			Подпись.КомуВыданСертификат,
			Подпись.ДатаПодписи,
			Подпись.Отпечаток);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	ТелоШтампа = ПолучитьОбщийМакет("ШаблонHTMLШтампаПодписи").ПолучитьТекст();
	Если Сертификат <> Неопределено Тогда
		СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
		СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСертификата(СертификатКриптографии);
		
		ПериодДействия = НСтр("ru = 'с %1 по %2';
								|en = 'from %1 to %2'");
		ПериодДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПериодДействия,
			Формат(СвойстваСертификата.ДатаНачала,    "ДЛФ=D"),
			Формат(СвойстваСертификата.ДатаОкончания, "ДЛФ=D"));
		
		ТелоШтампа = СтрЗаменить(ТелоШтампа, "[Номер Сертификата]", СвойстваСертификата.СерийныйНомер);
		ТелоШтампа = СтрЗаменить(ТелоШтампа, "[Имя Владельца Сертификата]", СвойстваСертификата.КомуВыдан);
		ТелоШтампа = СтрЗаменить(ТелоШтампа, "[Даты Действия Сертификата]", ПериодДействия);
	КонецЕсли;
	
	Возврат ТелоШтампа;
	
КонецФункции

Функция ФайлыСоШтампамиПодписей(ФайлыДляПечати)
	
	ФайлыСоШтампами = Новый Соответствие;
	
	ИмяВременногоКаталога = РаботаСФайламиБЗК.ВременныйКаталог();
	
	ТипФайла = ТипФайлаЭлектронногоДокумента();
	НастройкиФормата = НастройкиФорматаСохраненияЭлектронногоДокумента(ТипФайла);
	
	ПрисоединенныеФайлы = Новый Массив;
	ОписанияФайлов = Новый Массив;
	Для Каждого ФайлДляПечати Из ФайлыДляПечати Цикл
		
		Если ТипЗнч(ФайлДляПечати) = Тип("Структура") Тогда
			ОписанияФайлов.Добавить(ФайлДляПечати);
		Иначе
			ПрисоединенныеФайлы.Добавить(ФайлДляПечати);
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторХранилища = Новый УникальныйИдентификатор;
	ИменаФайлов = Новый Соответствие;
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		Для Каждого ОписаниеФайла Из ОписанияФайлов Цикл
			
			Оригинал = ОписаниеФайла.ПечатнаяФорма;
			ПечатнаяФорма = КадровыйЭДО.ПечатнаяФормаСоШтампамиПоОригиналу(
				Оригинал, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеФайла.СвойстваПодписи));
			
			ИмяФайла = КадровыйЭДОКлиентСервер.УникальноеИмяФайла(ОписаниеФайла.Название, ИменаФайлов);
			ИмяФайлаСРасширением = ИмяФайла + "." + НастройкиФормата.Расширение;
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ОписаниеФайлаФайлаСоШтампом = Новый Структура;
			ОписаниеФайлаФайлаСоШтампом.Вставить("ИмяФайла",                   ИмяФайлаСРасширением);
			ОписаниеФайлаФайлаСоШтампом.Вставить("АдресВХранилище",            АдресВХранилище);
			ОписаниеФайлаФайлаСоШтампом.Вставить("ИдентификаторПечатнойФормы", ОписаниеФайла.ИдентификаторПечатнойФормы);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Название",                   ОписаниеФайла.Название);
			ОписаниеФайлаФайлаСоШтампом.Вставить("ФизическоеЛицо",             ОписаниеФайла.ФизическоеЛицо);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Расширение",                 НастройкиФормата.Расширение);
			ОписаниеФайлаФайлаСоШтампом.Вставить("Размер",                     ДвоичныеДанные.Размер());
			
			ФайлыСоШтампами.Вставить(ОписаниеФайла, ОписаниеФайлаФайлаСоШтампом);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ФайлыПечатныхФорм = КадровыйЭДО.ОтобратьФайлыПечатныхФорм(ПрисоединенныеФайлы);
		ФайлыЭлектронныхДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПрисоединенныеФайлы, ФайлыПечатныхФорм);
		
		ДанныеПечатныхФорм = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФорм(ФайлыПечатныхФорм);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого ДанныеПечатнойФормы Из ДанныеПечатныхФорм Цикл
			
			ПрисоединенныйФайл = ДанныеПечатнойФормы.Ключ;
			ДанныеФормы = ДанныеПечатнойФормы.Значение;
			
			ПечатнаяФорма = КадровыйЭДО.ПечатнаяФормаСоШтампами(ПрисоединенныйФайл, ДанныеФормы.Оригинал);
			ИмяФайла = КадровыйЭДОКлиентСервер.УникальноеИмяФайла(Строка(ПрисоединенныйФайл), ИменаФайлов);
			
			ИмяФайлаСРасширением = ИмяФайла + "." + НастройкиФормата.Расширение;
			
			ПолноеИмяФайла = РаботаСФайламиБЗК.УникальноеИмяФайла(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайлаСРасширением);
			
			ПечатнаяФорма.Записать(ПолноеИмяФайла, ТипФайла);
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
			
			АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторХранилища);
			
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("ИмяФайла",                   ИмяФайлаСРасширением);
			ОписаниеФайла.Вставить("АдресВХранилище",            АдресВХранилище);
			ОписаниеФайла.Вставить("ИдентификаторПечатнойФормы", ДанныеФормы.ИдентификаторПечатнойФормы);
			ОписаниеФайла.Вставить("ДатаВыпуска",                ДанныеФормы.ДатаВыпуска);
			ОписаниеФайла.Вставить("Название",                   ДанныеФормы.Название);
			ОписаниеФайла.Вставить("Организация",                ДанныеФормы.Организация);
			ОписаниеФайла.Вставить("Сотрудник",                  ДанныеФормы.Сотрудник);
			ОписаниеФайла.Вставить("ФизическоеЛицо",             ДанныеФормы.ФизическоеЛицо);
			ОписаниеФайла.Вставить("Номер",                      ДанныеФормы.Номер);
			ОписаниеФайла.Вставить("Дата",                       ДанныеФормы.Дата);
			ОписаниеФайла.Вставить("Размер",                     ДвоичныеДанные.Размер());
			
			ФайлыСоШтампами.Вставить(ПрисоединенныйФайл, ОписаниеФайла);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ФайлыЭлектронныхДокументов) Тогда
			
			РеквизитыОбъектов = РеквизитыАдресацииОбъектов(ФайлыЭлектронныхДокументов);
			Для Каждого ФайлЭлектронногоДокумента Из ФайлыЭлектронныхДокументов Цикл
				
				ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторХранилища;
				ДанныеДокумента = РаботаСФайлами.ДанныеФайла(ФайлЭлектронногоДокумента, ПараметрыДанныхФайла);
				Если КадровыйЭДОКлиентСервер.ЭтоРасширениеФайлаСПредставлением(ДанныеДокумента.Расширение) Тогда
					
					ДанныеФайлаНаПечать = Неопределено;
					Если КадровыйЭДОКлиентСервер.ЭтоРасширениеPDFДокумента(ДанныеДокумента.Расширение) Тогда
						ДанныеФайлаНаПечать = PDFПредставлениеPDFФайлаСоШтампамиПодписей(ФайлЭлектронногоДокумента,
							ДанныеДокумента.СсылкаНаДвоичныеДанныеФайла, ДанныеДокумента.ИмяФайла, ИдентификаторХранилища);
					ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеHTMLДокумента(ДанныеДокумента.Расширение) Тогда
						ДанныеФайлаНаПечать = HTMLПредставлениеФайлаHTMLСоШтампамиПодписей(ФайлЭлектронногоДокумента,
							ДанныеДокумента.СсылкаНаДвоичныеДанныеФайла, ДанныеДокумента.ИмяФайла, ИдентификаторХранилища);
					ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеTXTДокумента(ДанныеДокумента.Расширение) Тогда
						ДанныеФайлаНаПечать = HTMLПредставлениеФайлаTXTСоШтампамиПодписей(ФайлЭлектронногоДокумента,
							ДанныеДокумента.СсылкаНаДвоичныеДанныеФайла, ДанныеДокумента.ИмяФайла, ИдентификаторХранилища);
					ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеИзображения(ДанныеДокумента.Расширение) Тогда
						ДанныеФайлаНаПечать = PDFПредставлениеФайлаИзображенияСоШтампамиПодписей(ФайлЭлектронногоДокумента,
							ДанныеДокумента.СсылкаНаДвоичныеДанныеФайла, ДанныеДокумента.ИмяФайла, ИдентификаторХранилища);
					ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеMXLДокумента(ДанныеДокумента.Расширение) Тогда
						ДанныеФайлаНаПечать = PDFПредставлениеMXLФайлаСоШтампамиПодписей(ФайлЭлектронногоДокумента,
							ДанныеДокумента.СсылкаНаДвоичныеДанныеФайла, ДанныеДокумента.ИмяФайла, ИдентификаторХранилища);
					КонецЕсли;
					
					Если ДанныеФайлаНаПечать <> Неопределено Тогда
						ОписаниеФайла = Новый Структура;
						ОписаниеФайла.Вставить("ИмяФайла",                   ДанныеФайлаНаПечать.ИмяФайла);
						ОписаниеФайла.Вставить("АдресВХранилище",            ДанныеФайлаНаПечать.АдресВХранилище);
						ОписаниеФайла.Вставить("ИдентификаторПечатнойФормы", "");
						ОписаниеФайла.Вставить("ДатаВыпуска",                ДанныеДокумента.ДатаМодификацииУниверсальная);
						ОписаниеФайла.Вставить("Название",                   ДанныеДокумента.Наименование);
						ОписаниеФайла.Вставить("Размер",                     ДанныеФайлаНаПечать.Размер);
						
						РеквизитыВладельца = РеквизитыОбъектов.Получить(ДанныеДокумента.Владелец);
						Если РеквизитыВладельца <> Неопределено Тогда
							ОписаниеФайла.Вставить("Организация",                РеквизитыВладельца.Организация);
							ОписаниеФайла.Вставить("Сотрудник",                  РеквизитыВладельца.Сотрудник);
							ОписаниеФайла.Вставить("ФизическоеЛицо",             РеквизитыВладельца.ФизическоеЛицо);
							ОписаниеФайла.Вставить("Номер",                      РеквизитыВладельца.Номер);
							ОписаниеФайла.Вставить("Дата",                       РеквизитыВладельца.Дата);
						Иначе
							ОписаниеФайла.Вставить("Организация",                Неопределено);
							ОписаниеФайла.Вставить("Сотрудник",                  Неопределено);
							ОписаниеФайла.Вставить("ФизическоеЛицо",             Неопределено);
							ОписаниеФайла.Вставить("Номер",                      "");
							ОписаниеФайла.Вставить("Дата",                       '00010101');
						КонецЕсли;
						
						ФайлыСоШтампами.Вставить(ФайлЭлектронногоДокумента, ОписаниеФайла);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат ФайлыСоШтампами;
	
КонецФункции

Процедура ВставитьДанныеПрисоединенныхФайловПечатныхФорм(ДанныеФайлов, ПрисоединенныеФайлы, ИдентификаторХранилища)
	
	Если ПрисоединенныеФайлы.Количество() > 0 Тогда
		
		ФайлыСоШтампами = ФайлыСоШтампамиПодписей(ПрисоединенныеФайлы);
		ФайлыДокументовКЭДО = Новый Соответствие;
		Для Каждого ФайлДляВывода Из ПрисоединенныеФайлы Цикл
			
			ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторХранилища;
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлДляВывода, ПараметрыДанныхФайла);
			ФайлСоШтампами = ФайлыСоШтампами.Получить(ФайлДляВывода);
			
			ДанныеВыводимогоФайла = СвойстваВыводимогоФайла(КадровыйЭДОПовтИсп.ДокументКЭДОЭлектронногоДокумента(ФайлДляВывода));
			
			ИмяОсновногоФайлаСРасширением = СокрЛП(ДанныеФайла.Наименование);
			Если Не СтрЗаканчиваетсяНа(ВРег(ИмяОсновногоФайлаСРасширением), ВРег("." + СокрЛП(ДанныеФайла.Расширение))) Тогда
				ИмяОсновногоФайлаСРасширением = ИмяОсновногоФайлаСРасширением + "." + СокрЛП(ДанныеФайла.Расширение)
			КонецЕсли;
			ИмяОсновногоФайлаСРасширением = ИмяФайлаКЭДО(ИмяОсновногоФайлаСРасширением);
			
			// Оригинал
			ДанныеВыводимогоФайла.Оригинал.Ссылка = ФайлДляВывода;
			ДанныеВыводимогоФайла.Оригинал.ИмяФайлаСРасширением = ИмяОсновногоФайлаСРасширением;
			ДанныеВыводимогоФайла.Оригинал.Кодировка = ДанныеФайла.КодировкаТекущейВерсии;
			ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ДанныеВыводимогоФайла.Оригинал.Владелец = ДанныеФайла.Владелец;
			ДанныеВыводимогоФайла.Оригинал.Размер = ДанныеФайла.Размер;
			Если ФайлСоШтампами <> Неопределено Тогда
				ДанныеВыводимогоФайла.Оригинал.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
				ДанныеВыводимогоФайла.Оригинал.ФизическоеЛицо = ФайлСоШтампами.ФизическоеЛицо;
				ДанныеВыводимогоФайла.Оригинал.Название = ФайлСоШтампами.Название;
				ДанныеВыводимогоФайла.Оригинал.Дата = ФайлСоШтампами.Дата;
				ДанныеВыводимогоФайла.Оригинал.Номер = ФайлСоШтампами.Номер;
			КонецЕсли;
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ДанныеВыводимогоФайла.Оригинал);
			
			Если ДанныеФайла.ПодписанЭП Тогда
				
				// Представления
				Если ФайлСоШтампами <> Неопределено Тогда
					
					ОписаниеФайла = ОписаниеВыводимогоФайла();
					ОписаниеФайла.ИмяФайлаСРасширением = ИмяФайлаДляПечати(ИмяОсновногоФайлаСРасширением);
					ОписаниеФайла.АдресВоВременномХранилище = ФайлСоШтампами.АдресВХранилище;
					ОписаниеФайла.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
					ОписаниеФайла.ФизическоеЛицо = ФайлСоШтампами.ФизическоеЛицо;
					ОписаниеФайла.Размер = ФайлСоШтампами.Размер;
					ОписаниеФайла.Владелец = ДанныеФайла.Владелец;
					
					УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
					ДанныеВыводимогоФайла.Представления.Добавить(ОписаниеФайла);
					
				КонецЕсли;
				
				// Подписи
				ПодписиФайла = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(ФайлДляВывода);
				Для Каждого ОписаниеПодписи Из ПодписиФайла Цикл
					
					ИмяФайлаПодписи = ИмяФайлаПодписи(ИмяОсновногоФайлаСРасширением,
						ПодписиФайла.Количество() > 1, ДанныеВыводимогоФайла.Подписи.Количество() + 1);
					
					ОписаниеФайла = ОписаниеВыводимогоФайлаПодписи();
					ОписаниеФайла.ИмяФайлаСРасширением = ИмяФайлаПодписи;
					ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
						ОписаниеПодписи.Подпись, ИдентификаторХранилища);
					ОписаниеФайла.Владелец = ДанныеВыводимогоФайла.Оригинал.Ссылка;
					ОписаниеФайла.Комментарий = ОписаниеПодписи.Комментарий;
					Если ОписаниеПодписи.Подпись = Неопределено Тогда
						ОписаниеФайла.Размер = 0;
					Иначе
						ОписаниеФайла.Размер = ОписаниеПодписи.Подпись.Размер();
					КонецЕсли;
					ОписаниеФайла.Отпечаток = ОписаниеПодписи.Отпечаток;
					ОписаниеФайла.УстановившийПодпись = ОписаниеПодписи.УстановившийПодпись;
					ОписаниеФайла.КомуВыданСертификат = ОписаниеПодписи.КомуВыданСертификат;
					ОписаниеФайла.ДатаПодписи = ОписаниеПодписи.ДатаПодписи;
					
					Если ОписаниеПодписи.НаборСвойствПодписиКЭДО <> Неопределено Тогда
						ОписаниеФайла.НаборСвойствПодписиКЭДО = Новый Массив;
						Для Каждого ОписаниеСвойств Из ОписаниеПодписи.НаборСвойствПодписиКЭДО Цикл
							ОписаниеСвойствФайла = Новый Структура("МЧД,РольПодписанта");
							ОписаниеФайла.НаборСвойствПодписиКЭДО.Добавить(ОписаниеСвойствФайла);
							ОписаниеСвойствФайла.РольПодписанта = ОписаниеСвойств.РольПодписанта;
							Если ЗначениеЗаполнено(ОписаниеСвойств.МЧД) Тогда
								ОписаниеСвойствФайла.МЧД = ДанныеМЧДПодписи(ОписаниеСвойств.МЧД, ИдентификаторХранилища);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
					ДанныеВыводимогоФайла.Подписи.Добавить(ОписаниеФайла);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДобавитьФайлОписания(ДанныеВыводимогоФайла, ИдентификаторХранилища);
			
			Если ТипЗнч(ДанныеВыводимогоФайла.Оригинал.Владелец) = Тип("ДокументСсылка.ДокументКадровогоЭДО") Тогда
				ФайлыДокументовКЭДО.Вставить(ФайлДляВывода, ДанныеВыводимогоФайла.Оригинал.Владелец);
			КонецЕсли;
			
			ДанныеФайлов.Вставить(ФайлДляВывода, ДанныеВыводимогоФайла)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьДанныеОписанийФайловПечатныхФорм(ДанныеФайлов, ОписанияФайлов, ИдентификаторХранилища)
	
	Если ОписанияФайлов.Количество() > 0 Тогда
		
		ФайлыСоШтампами = ФайлыСоШтампамиПодписей(ОписанияФайлов);
		Для Каждого ДанныеОписанияФайла Из ОписанияФайлов Цикл
			
			ФайлСоШтампами = ФайлыСоШтампами.Получить(ДанныеОписанияФайла);
			
			ДанныеВыводимогоФайла = СвойстваВыводимогоФайла(Неопределено);
			
			ИмяОсновногоФайлаСРасширением = ИмяФайлаКЭДО(ФайлСоШтампами.ИмяФайла);
			
			// Оригинал
			ДанныеВыводимогоФайла.Оригинал.ИмяФайлаСРасширением = ИмяОсновногоФайлаСРасширением;
			ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище = ДанныеОписанияФайла.АдресВХранилище;
			ДанныеВыводимогоФайла.Оригинал.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
			ДанныеВыводимогоФайла.Оригинал.ФизическоеЛицо = ДанныеОписанияФайла.ФизическоеЛицо;
			ДанныеВыводимогоФайла.Оригинал.Размер = ПолучитьИзВременногоХранилища(
				ДанныеВыводимогоФайла.Оригинал.АдресВоВременномХранилище).Размер();
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ДанныеВыводимогоФайла.Оригинал);
			
			// Представления
			ОписаниеФайла = ОписаниеВыводимогоФайла();
			ОписаниеФайла.ИмяФайлаСРасширением = ИмяФайлаДляПечати(ИмяОсновногоФайлаСРасширением);
			ОписаниеФайла.АдресВоВременномХранилище = ФайлСоШтампами.АдресВХранилище;
			ОписаниеФайла.ИдентификаторПечатнойФормы = ФайлСоШтампами.ИдентификаторПечатнойФормы;
			ОписаниеФайла.ФизическоеЛицо = ДанныеОписанияФайла.ФизическоеЛицо;
			ОписаниеФайла.Размер = ФайлСоШтампами.Размер;
			
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
			ДанныеВыводимогоФайла.Представления.Добавить(ОписаниеФайла);
			
			// Подписи
			ОписаниеФайла = ОписаниеВыводимогоФайлаПодписи();
			ОписаниеФайла.ИмяФайлаСРасширением = ИмяФайлаПодписи(ИмяОсновногоФайлаСРасширением);
			ОписаниеФайла.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ДанныеОписанияФайла.СвойстваПодписи.Подпись, ИдентификаторХранилища);
			ОписаниеФайла.Размер = ДанныеОписанияФайла.СвойстваПодписи.Подпись.Размер();
			ОписаниеФайла.УстановившийПодпись = ДанныеОписанияФайла.СвойстваПодписи.УстановившийПодпись;
			ОписаниеФайла.КомуВыданСертификат = ДанныеОписанияФайла.СвойстваПодписи.КомуВыданСертификат;
			ОписаниеФайла.ДатаПодписи = ДанныеОписанияФайла.СвойстваПодписи.ДатаПодписи;
			
			УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла);
			ДанныеВыводимогоФайла.Подписи.Добавить(ОписаниеФайла);
			
			ДанныеФайлов.Вставить(ОписаниеФайла, ДанныеВыводимогоФайла)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИмяФайлаИРасширениеВыводимогоФайла(ОписаниеФайла, ИсходноеИмяФайла = Неопределено)
	
	Файл = Новый Файл(ОписаниеФайла.ИмяФайлаСРасширением);
	ОписаниеФайла.ИмяФайлаБезРасширения = Файл.ИмяБезРасширения;
	ОписаниеФайла.РасширениеФайла = СтрЗаменить(Файл.Расширение, ".", "");
	
	Если ИсходноеИмяФайла <> Неопределено Тогда
		Файл = Новый Файл(ИсходноеИмяФайла);
		РасширениеФайла = СтрЗаменить(Файл.Расширение, ".", "");
		Если Не ПустаяСтрока(РасширениеФайла)
			И ОписаниеФайла.РасширениеФайла <> РасширениеФайла Тогда
			
			Если Не ПустаяСтрока(ОписаниеФайла.РасширениеФайла) Тогда
				ОписаниеФайла.ИмяФайлаБезРасширения = ОписаниеФайла.ИмяФайлаБезРасширения + "." + ОписаниеФайла.РасширениеФайла;
			КонецЕсли;
			ОписаниеФайла.РасширениеФайла = РасширениеФайла;
			ОписаниеФайла.ИмяФайлаСРасширением = ОписаниеФайла.ИмяФайлаБезРасширения + "." + ОписаниеФайла.РасширениеФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СертификатыОрганизацииПользователя(Организации = Неопределено) Экспорт
	Запрос = ЗапросСертификатыОрганизацииПользователя(Организации);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЗапросСертификатыОрганизацииПользователя(Организации = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)) КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО Организации.Ссылка = СертификатыКлючейЭлектроннойПодписиИШифрования.Организация
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Подписание)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван = ЛОЖЬ)
		|			И (НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДата)
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ГоловнаяОрганизация,
		|	ЕСТЬNULL(СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка, ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)),
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО Организации.Ссылка = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Организация
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Подписание)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.Отозван = ЛОЖЬ)
		|			И (НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.ПометкаУдаления)
		|			И (СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка.ДействителенДо > &ТекущаяДата)
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ГоловнаяОрганизация,
		|	СертификатыПодписей.Ссылка,
		|	СертификатыПодписей.Ссылка.Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыПодписей
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|	И СертификатыПодписей.Подписание
		|	И НЕ СертификатыПодписей.Отозван
		|	И СертификатыПодписей.ДействителенДо >= &ТекущаяДата
		|	И (СертификатыПодписей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИЛИ СертификатыПодписей.Организация = НЕОПРЕДЕЛЕНО)
		|	И ТИПЗНАЧЕНИЯ(СертификатыПодписей.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|	И СертификатыПодписей.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И СертификатыПодписей.Пользователь = &Пользователь
		|	И НЕ СертификатыПодписей.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ГоловнаяОрганизация,
		|	СертификатыПодписей.Ссылка,
		|	СертификатыПодписей.Ссылка.Отпечаток
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК СертификатыПодписей
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Организации.Ссылка В(&Организации)
		|	И СертификатыПодписей.Ссылка.Подписание
		|	И НЕ СертификатыПодписей.Ссылка.Отозван
		|	И СертификатыПодписей.Ссылка.ДействителенДо >= &ТекущаяДата
		|	И (СертификатыПодписей.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИЛИ СертификатыПодписей.Ссылка.Организация = НЕОПРЕДЕЛЕНО)
		|	И ТИПЗНАЧЕНИЯ(СертификатыПодписей.Ссылка.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|	И СертификатыПодписей.Ссылка.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	И СертификатыПодписей.Пользователь = &Пользователь
		|	И НЕ СертификатыПодписей.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Сертификат УБЫВ";
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации.Ссылка В(&Организации)", "(ИСТИНА)");
	Иначе
		ОтборПоОрганизациям = ОбщегоНазначения.СкопироватьРекурсивно(Организации);
		УстановитьПривилегированныйРежим(Истина);
		ГоловныеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Организации, "ГоловнаяОрганизация");
		УстановитьПривилегированныйРежим(Ложь);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоОрганизациям, ОбщегоНазначения.ВыгрузитьКолонку(ГоловныеОрганизации, "Значение"), Истина);
		Запрос.УстановитьПараметр("Организации", ОтборПоОрганизациям);
	КонецЕсли;
	
	Если Не ДоступенВыборПользователей() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СертификатыПодписей.Пользователь = &Пользователь", "");
	Иначе
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ДоступенВыборПользователей() Экспорт
	
	Возврат Пользователи.ТекущийПользователь() <> Пользователи.СсылкаНеуказанногоПользователя();
	
КонецФункции

// Возвращает пустое описание выводимого файла.
//
// Возвращаемое значение:
//  Структура с ключами:
//   * Оригинал                   - Структура, описание выводимого
//                                   файла-оригинала, см. ОписаниеВыводимогоФайла
//   * Представления              - Массив описаний выводимых
//                                   файлов-представлений, см. ОписаниеВыводимогоФайла
//   * Подписи                    - Массив описаний выводимых
//                                   файлов-подписей, см. ОписаниеВыводимогоФайла
//
Функция СвойстваВыводимогоФайла(ДокументКЭДО)
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ДокументКЭДО", ДокументКЭДО);
	СвойстваФайла.Вставить("Оригинал", ОписаниеВыводимогоФайла());
	СвойстваФайла.Вставить("Представления", Новый Массив());
	СвойстваФайла.Вставить("Подписи", Новый Массив());
	СвойстваФайла.Вставить("ВариантПодписания", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументКЭДО, "ВариантПодписания"));
	
	Возврат СвойстваФайла;
	
КонецФункции

Функция НастройкиФорматаСохраненияЭлектронногоДокумента(ТипФайла) Экспорт
	
	НастройкиФорматов = УправлениеПечатью.НастройкиФорматовСохраненияТабличногоДокумента();
	Если ТипФайла = ТипФайлаЭлектронногоДокумента() Тогда
		НастройкаФормата = НастройкиФорматов.Найти(ТипФайлаТабличногоДокумента.PDF_A_3, "ТипФайлаТабличногоДокумента");
		НастройкаФормата.ТипФайлаТабличногоДокумента = ТипФайлаЭлектронногоДокумента();
	Иначе
		НастройкаФормата = НастройкиФорматов.Найти(ТипФайла, "ТипФайлаТабличногоДокумента");
	КонецЕсли;
	
	Возврат НастройкаФормата;
	
КонецФункции

Функция ТипФайлаЭлектронногоДокумента() Экспорт
	Возврат ТипФайлаТабличногоДокумента.PDF_A_1;
КонецФункции

Процедура ВывестиВФайлАрхиваМЧД(ФайлАрхива, МЧД, ИмяВременногоКаталога)
	
	ФайлДоверенности =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "ФайлДоверенности");
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлДоверенности);
	
	ИмяФайла = ИмяВыгружаемогоФайлаМЧД(МЧД);
	
	ИмяФайла = ИмяФайлаКЭДО(ИмяФайла);
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ИмяВременногоКаталога)+ ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ПолноеИмяФайла);
	
	ФайлАрхива.Добавить(ПолноеИмяФайла);
	
	Если ДанныеФайла.ПодписанЭП Тогда
		
		УстановленныеПодписи = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(МЧД);
		ВывестиВФайлАрхиваМЧДПодписи(УстановленныеПодписи, ФайлАрхива, ИмяФайла, ИмяВременногоКаталога);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВФайлАрхиваМЧДПодписи(ДанныеПодписиПодписей, ФайлАрхива, ИмяОсновногоФайлаСРасширением, ИмяВременногоКаталога)
	
	ПорядковыйНомер = 1;
	Для Каждого ДанныеПодписи Из ДанныеПодписиПодписей Цикл
		
		ДвоичныеДанныеФайла = ДанныеПодписи.Подпись;
		Если ДвоичныеДанныеФайла <> Неопределено Тогда
			
			ПолноеИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ИмяФайлаПодписи(ИмяОсновногоФайлаСРасширением, ДанныеПодписиПодписей.Количество() > 1, ПорядковыйНомер);
			ПолноеИмяФайлаПодписи = РаботаСФайламиБЗК.УникальноеИмяФайла(ПолноеИмяФайлаПодписи);
			
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаПодписи);
			ФайлАрхива.Добавить(ПолноеИмяФайлаПодписи);
			
			Если ЗначениеЗаполнено(ДанныеПодписи.НаборСвойствПодписиКЭДО) Тогда
				Для Каждого СвойстваПодписи Из ДанныеПодписи.НаборСвойствПодписиКЭДО Цикл
					Если ЗначениеЗаполнено(СвойстваПодписи.МЧД) Тогда
						ВывестиВФайлАрхиваМЧД(ФайлАрхива, СвойстваПодписи.МЧД, ИмяВременногоКаталога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВФайлАрхиваПодписи(ДанныеПодписиПодписей, ФайлАрхива, ИмяВременногоКаталога)
	
	Для Каждого ДанныеПодписи Из ДанныеПодписиПодписей Цикл
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресВоВременномХранилище);
		Если ДвоичныеДанныеФайла <> Неопределено Тогда
			
			ПолноеИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
				+ ДанныеПодписи.ИмяФайлаСРасширением;
			ПолноеИмяФайлаПодписи = РаботаСФайламиБЗК.УникальноеИмяФайла(ПолноеИмяФайлаПодписи);
			
			ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаПодписи);
			ФайлАрхива.Добавить(ПолноеИмяФайлаПодписи);
			
			Если ЗначениеЗаполнено(ДанныеПодписи.НаборСвойствПодписиКЭДО) Тогда
				Для Каждого СвойстваПодписи Из ДанныеПодписи.НаборСвойствПодписиКЭДО Цикл
					Если ЗначениеЗаполнено(СвойстваПодписи.МЧД) Тогда
						ПолноеИмяФайлаДоверенности = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога)
							+ СвойстваПодписи.МЧД.ИмяФайлаСРасширением;
						ПолноеИмяФайлаДоверенности = РаботаСФайламиБЗК.УникальноеИмяФайла(ПолноеИмяФайлаДоверенности);
						ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СвойстваПодписи.МЧД.Доверенность);
						ДвоичныеДанныеФайла.Записать(ПолноеИмяФайлаДоверенности);
						ФайлАрхива.Добавить(ПолноеИмяФайлаДоверенности);
						ВывестиВФайлАрхиваПодписи(СвойстваПодписи.МЧД.Подписи, ФайлАрхива, ИмяВременногоКаталога)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОписаниеФайловКЭДО

Процедура ДобавитьФайлОписания(ДанныеВыводимогоФайла, ИдентификаторХранилища)
	
	Если Не ЗначениеЗаполнено(ДанныеВыводимогоФайла.ДокументКЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВыводимогоФайла.ДокументКЭДО, "ВариантПодписания")
		<> Перечисления.ВариантыПодписанияДокументовКЭДО.Требуется Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ДокументГотовДляАрхивирования(ДанныеВыводимогоФайла.ДокументКЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьИнформациюОбОшибке = Ложь;
	Попытка
		
		ФайлОписания = Новый Файл("wredc_data.xml");
		
		URIПространстваИмен = Метаданные.ПакетыXDTO.wredc_data_1_1.ПространствоИмен;
		
		// Преобразуем дерево в строковое описание XML.
		ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
		
		ДанныеФайла = ДанныеФайлаДляОписания(ДанныеВыводимогоФайла);
		ВывестиВФайлОписанияДанные(ПотокВыгрузкиXML, URIПространстваИмен, ДанныеФайла);
		
		// Закрываем файл.
		ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
		ТекстФайла = СтрЗаменить(ТекстФайла, "xmlns=""" + URIПространстваИмен + """", "xmlns:edoc=""" + URIПространстваИмен + """");
		ТекстФайла = СтрЗаменить(ТекстФайла, "wredcData", "edoc:wredcData");
		ТекстФайла = СтрЗаменить(ТекстФайла, "<content xmlns="""" xmlns:d2p1=""https://mintrud.gov.ru/uploads/eksperiment/xml_schema.xsd"">", "<content>");
		
		ДанныеФайлаОписания = ПолучитьДвоичныеДанныеИзСтроки(ТекстФайла, КодировкаТекста.UTF8);
		
		ОписаниеФайла = ОписаниеВыводимогоФайла();
		ОписаниеФайла.Владелец                   = ДанныеВыводимогоФайла.Оригинал.Владелец;
		ОписаниеФайла.ИмяФайлаСРасширением       = ФайлОписания.Имя;
		ОписаниеФайла.ИдентификаторПечатнойФормы = ДанныеВыводимогоФайла.Оригинал.ИдентификаторПечатнойФормы;
		ОписаниеФайла.ФизическоеЛицо             = ДанныеФайла.Оригинал.ФизическоеЛицо;
		ОписаниеФайла.АдресВоВременномХранилище  = ПоместитьВоВременноеХранилище(ДанныеФайлаОписания, ИдентификаторХранилища);
		ОписаниеФайла.Размер                     = ДанныеФайлаОписания.Размер();
		ОписаниеФайла.ИмяФайлаБезРасширения      = ФайлОписания.ИмяБезРасширения;
		ОписаниеФайла.РасширениеФайла            = НРег(СтрЗаменить(ФайлОписания.Расширение, ".", ""));
		
		ДанныеВыводимогоФайла.Представления.Добавить(ОписаниеФайла);
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		СохранитьИнформациюОбОшибке = Истина;
		ЗаписьЖурналаРегистрации(
			КадровыйЭДО.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Подготовка файла описания электронного документа';
					|en = 'Prepare a description file of the electronic document'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(Ошибка));
	КонецПопытки;
	
	Попытка
		ТекстПроблемы = НСтр("ru = 'Ошибка при подготовке файла описания.';
							|en = 'An error occurred when preparing the description file.'");
		КомментарийДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла.Оригинал.ДокументКадровогоЭДО, "Комментарий");
		Если СохранитьИнформациюОбОшибке Тогда
			Если СтрНайти(КомментарийДокумента, ТекстПроблемы) = 0 Тогда
				ДокументОбъект = ДанныеФайла.Оригинал.ДокументКадровогоЭДО.ПолучитьОбъект();
				ДокументОбъект.Комментарий = СтрШаблон("%1 %2",
					ТекстПроблемы, ДокументОбъект.Комментарий);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			Если СтрНайти(КомментарийДокумента, ТекстПроблемы) > 0 Тогда
				ДокументОбъект = ДанныеФайла.Оригинал.ДокументКадровогоЭДО.ПолучитьОбъект();
				ДокументОбъект.Комментарий = СокрЛП(СтрЗаменить(ДокументОбъект.Комментарий, ТекстПроблемы, ""));
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			КадровыйЭДО.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Не удалось обновить информацию о проблеме подготовка файла описания электронного документа';
					|en = 'Cannot update information about the issue prepare a description file of the electronic document'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(Ошибка));
	КонецПопытки;
	
КонецПроцедуры

Процедура ВывестиВФайлОписанияДанные(ПотокВыгрузкиXML, URIПространстваИмен, ДанныеФайла)
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИмен);
	
	wredcDataТип = ПакетXDTO.КорневыеСвойства.Получить("wredcData").Тип;
	Заголовок = ФабрикаXDTO.Создать(wredcDataТип);
	
	Заголовок.id		= Строка(ДанныеФайла.Оригинал.Ссылка.УникальныйИдентификатор());
	Заголовок.created	= ОтформатированнаяДатаДляФайлаОписания(ТекущаяДатаСеанса());
	Заголовок.version	= "1.1";
	
	ВывестиСодержимоеОписанияФайла(Заголовок, ДанныеФайла);
	ВывестиПодписиФайлаОписания(Заголовок, ДанныеФайла);
	
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, Заголовок, "wredcData");
	
КонецПроцедуры

Процедура ВывестиСодержимоеОписанияФайла(Заголовок, ДанныеФайла)
	
	contentТип = Заголовок.Свойства().Получить("Content").Тип;
	Содержимое = ФабрикаXDTO.Создать(contentТип);
	
	Содержимое.employername = ДанныеФайла.Оригинал.ОрганизацияНаименование;
	Содержимое.innemployer = ДанныеФайла.Оригинал.ОрганизацияИНН;
	Содержимое.ogrn = ДанныеФайла.Оригинал.ОрганизацияОГРН;
	ЗаполнитьXMLСвойство(Содержимое, "kpp", ДанныеФайла.Оригинал, "ОрганизацияКПП");
	ЗаполнитьXMLСвойство(Содержимое, "jobtitle", ДанныеФайла.Оригинал, "ДолжностьПредставителя");
	ВывестиВСодержимоеИнформациюОДокументе(Содержимое, ДанныеФайла);
	
	Заголовок.Content = Содержимое;
	
КонецПроцедуры

Процедура ВывестиВСодержимоеИнформациюОДокументе(Содержимое, ДанныеФайла)
	
	docinfoТип			= Содержимое.Свойства().Получить("docinfo").Тип;
	ОписаниеДокумента	= ФабрикаXDTO.Создать(docinfoТип);
	
	ОписаниеДокумента.docName		= ДанныеФайла.Оригинал.Название;
	ЗаполнитьXMLСвойство(ОписаниеДокумента, "docNumber", ДанныеФайла.Оригинал, "Номер");
	ОписаниеДокумента.date			= ОтформатированнаяДатаДляФайлаОписания(ДанныеФайла.Оригинал.Дата);
	ОписаниеДокумента.docType		= ДанныеФайла.Оригинал.КодДокументаКадровогоМероприятия;
	ЗаполнитьXMLСвойство(ОписаниеДокумента, "annotation", ДанныеФайла.Оригинал, "Комментарий");
	ОписаниеДокумента.file			= ДанныеФайла.Оригинал.ИмяФайлаСРасширением;
	ОписаниеДокумента.size			= ДанныеФайла.Оригинал.Размер;
	
	ВывестиВОписаниеФайлаПодписи(ОписаниеДокумента, ДанныеФайла.Оригинал.ПодписиОрганизации);
	ВывестиВОписаниеДокументаВложения(ОписаниеДокумента, ДанныеФайла);
	ВывестиВОписаниеДокументаСотрудников(ОписаниеДокумента, ДанныеФайла);
	
	Содержимое.docinfo = ОписаниеДокумента;
	
КонецПроцедуры

Процедура ВывестиПодписиФайлаОписания(Заголовок, ДанныеФайла)
	
	ПодписиФайлаОписания = Неопределено;
	Если ДанныеФайла.Свойство("ПодписиФайлаОписания", ПодписиФайлаОписания) Тогда
		
		Если ЗначениеЗаполнено(ПодписиФайлаОписания) Тогда
			Для Каждого ОписаниеФайлаПодписи Из ПодписиФайлаОписания Цикл
				
				signatureТип	= Заголовок.Свойства().Получить("signature").Тип;
				ПодписьОписания = ФабрикаXDTO.Создать(signatureТип);
				
				ПодписьОписания.file = ОписаниеФайлаПодписи.ИмяФайлаСРасширением;
				ПодписьОписания.size = ОписаниеФайлаПодписи.Размер;
				
				Если ТипЗнч(Заголовок.signature) = Тип("СписокXDTO") Тогда
					Заголовок.signature.Добавить(ПодписьОписания);
				Иначе
					Заголовок.signature = ПодписьОписания;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВОписаниеФайлаПодписи(ОбъектСПодписями, Подписи)
	
	signatureТип = ОбъектСПодписями.Свойства().Получить("signature").Тип;
	Для Каждого СведенияОПодписи Из Подписи Цикл
		
		Подпись = ФабрикаXDTO.Создать(signatureТип);
		Подпись.date = ОтформатированнаяДатаДляФайлаОписания(СведенияОПодписи.ДатаПодписи);
		
		ЗаполнитьXMLСвойство(Подпись, "snils", СведенияОПодписи, "СНИЛС");
		
		ПростаяПодпись = Неопределено;
		Если Не СведенияОПодписи.Свойство("ПростаяПодпись", ПростаяПодпись) Тогда
			ПростаяПодпись = СведенияОПодписи.Размер = 0;
		КонецЕсли;
		
		Если ПростаяПодпись = Истина Тогда
			Подпись.simple = Истина;
		КонецЕсли;
		
		Если Подпись.simple <> Истина Тогда
			X509Тип = Подпись.Свойства().Получить("X509").Тип;
			X509 = ФабрикаXDTO.Создать(X509Тип);
			X509.file = СведенияОПодписи.ИмяФайлаСРасширением;
			X509.size = СведенияОПодписи.Размер;
			Подпись.X509 = X509;
			Если СведенияОПодписи.Свойство("НаборСвойствПодписиКЭДО")
				И ЗначениеЗаполнено(СведенияОПодписи.НаборСвойствПодписиКЭДО) Тогда
				
				Для Каждого СвойствоПодписиКЭДО Из СведенияОПодписи.НаборСвойствПодписиКЭДО Цикл
					ВывестиВОписаниеПодписиДоверенность(Подпись, СвойствоПодписиКЭДО);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектСПодписями.signature) = Тип("СписокXDTO") Тогда
			ОбъектСПодписями.signature.Добавить(Подпись);
		Иначе
			ОбъектСПодписями.signature = Подпись;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВОписаниеПодписиДоверенность(ОбъектСДоверенностью, СведенияОбъектаСМЧД)
	
	МЧД = Неопределено;
	Если СведенияОбъектаСМЧД.Свойство("МЧД", МЧД) Тогда
		Если ЗначениеЗаполнено(МЧД) Тогда
			powerOfAttorneyТип = ОбъектСДоверенностью.Свойства().Получить("powerOfAttorney").Тип;
			МЧД = ФабрикаXDTO.Создать(powerOfAttorneyТип);
			МЧД.file = СведенияОбъектаСМЧД.МЧД.ИмяФайлаСРасширением;
			МЧД.size = СведенияОбъектаСМЧД.МЧД.Размер;
			ВывестиВОписаниеПодписиДоверенность(МЧД, СведенияОбъектаСМЧД.МЧД);
			ОбъектСДоверенностью.powerOfAttorney = МЧД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВОписаниеДокументаВложения(ОписаниеДокумента, ДанныеФайла)
	
	attachmentТип = ОписаниеДокумента.Свойства().Получить("attachment").Тип;
	Для Каждого ОписаниеПредставления Из ДанныеФайла.Представления Цикл
		Вложение = ФабрикаXDTO.Создать(attachmentТип);
		Вложение.extention = ОписаниеПредставления.РасширениеФайла;
		Вложение.file = ОписаниеПредставления.ИмяФайлаСРасширением;
		Вложение.size = ОписаниеПредставления.Размер;
		ЗаполнитьXMLСвойство(Вложение, "annotation", ОписаниеПредставления, "Комментарий");
		ОписаниеДокумента.attachment.Добавить(Вложение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВОписаниеДокументаСотрудников(ОписаниеДокумента, ДанныеФайла)
	
	employeeInfoТип = ОписаниеДокумента.Свойства().Получить("employeeInfo").Тип;
	Для Каждого ДанныеПодписи Из ДанныеФайла.ПодписиСотрудников Цикл
		ДанныеСотрудника = ФабрикаXDTO.Создать(employeeInfoТип);
		ДанныеСотрудника.lastnameinfo = ДанныеПодписи.Фамилия;
		ДанныеСотрудника.firstnameinfo = ДанныеПодписи.Имя;
		ЗаполнитьXMLСвойство(ДанныеСотрудника, "patronymicInfo", ДанныеПодписи, "Отчество");
		ЗаполнитьXMLСвойство(ДанныеСотрудника, "jobtitle", ДанныеПодписи, "Должность");
		ВывестиВОписаниеФайлаПодписи(ДанныеСотрудника,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписи));
		ОписаниеДокумента.employeeInfo.Добавить(ДанныеСотрудника);
	КонецЦикла;
	
КонецПроцедуры

Функция ОтформатированнаяДатаДляФайлаОписания(ФорматируемаяДата)
	Возврат Формат(ФорматируемаяДата, "ДФ=гггг-ММ-дд; ДП=");
КонецФункции

Функция ДанныеФайлаДляОписания(ДанныеВыводимогоФайла)
	
	ДанныеФайла = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеВыводимогоФайла);
	ПодписиСотрудников = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеФайла.Оригинал.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодписиДокументовКЭДО.Объект КАК Ссылка,
		|	&Ссылка КАК ЭлектронныйДокумент,
		|	ПодписиДокументовКЭДО.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПодписиДокументовКЭДО.Отпечаток КАК Отпечаток,
		|	ПодписиДокументовКЭДО.ДатаПодписи КАК ДатаПодписи,
		|	ВЫБОР
		|		КОГДА ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПодписьСотрудника
		|ПОМЕСТИТЬ ВТДанныеПодписейДокумента
		|ИЗ
		|	РегистрСведений.ПодписиДокументовКЭДО КАК ПодписиДокументовКЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО.ВнешниеПодписанты КАК ДокументКадровогоЭДОВнешниеПодписанты
		|		ПО (ДокументКадровогоЭДОВнешниеПодписанты.Ссылка = ПодписиДокументовКЭДО.Объект)
		|			И (ДокументКадровогоЭДОВнешниеПодписанты.ФизическоеЛицо = ПодписиДокументовКЭДО.ФизическоеЛицо)
		|ГДЕ
		|	ПодписиДокументовКЭДО.Объект В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Документ.ДокументКадровогоЭДО.Ссылка
		|			ИЗ
		|				Документ.ДокументКадровогоЭДО
		|			ГДЕ
		|				Документ.ДокументКадровогоЭДО.ЭлектронныйДокумент = &Ссылка)
		|	И ПодписиДокументовКЭДО.ДатаПодписи <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПодписейТолькоСотрудников.Ссылка КАК Ссылка,
		|	ДанныеПодписейТолькоСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеПодписейТолькоСотрудников.Отпечаток КАК Отпечаток,
		|	ДанныеПодписейТолькоСотрудников.ДатаПодписи КАК ДатаПодписи,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ДанныеПодписейТолькоСотрудников.ПодписьСотрудника КАК ПодписьСотрудника
		|ПОМЕСТИТЬ ВТДанныеПодписейСотрудников
		|ИЗ
		|	ВТДанныеПодписейДокумента КАК ДанныеПодписейТолькоСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|				И СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо
		|		КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|				И ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|			ТОГДА ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|	КОНЕЦ,
		|	ЭлектронныеПодписи.Отпечаток,
		|	ЭлектронныеПодписи.ДатаПодписи,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|			ПО ЭлектронныеПодписи.Отпечаток = СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПодписейДокумента КАК ДанныеПодписейТолькоСотрудников
		|			ПО ЭлектронныеПодписи.ПодписанныйОбъект = ДанныеПодписейТолькоСотрудников.ЭлектронныйДокумент
		|				И ЭлектронныеПодписи.Отпечаток = ДанныеПодписейТолькоСотрудников.Отпечаток
		|		ПО ДокументКадровогоЭДО.ЭлектронныйДокумент = ЭлектронныеПодписи.ПодписанныйОбъект
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент = &Ссылка
		|	И ДанныеПодписейТолькоСотрудников.ЭлектронныйДокумент ЕСТЬ NULL
		|	И ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|					И СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				ТОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо
		|			КОГДА ТИПЗНАЧЕНИЯ(ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо) = ТИП(Справочник.ФизическиеЛица)
		|					И ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|				ТОГДА ЭлектронныеПодписи.УстановившийПодпись.ФизическоеЛицо
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
		|	ДокументКадровогоЭДО.ОснованиеДокумента КАК ОснованиеДокумента,
		|	ДокументКадровогоЭДО.Дата КАК Дата,
		|	ДокументКадровогоЭДО.Номер КАК Номер,
		|	"""" КАК НомерПриказа,
		|	ДокументКадровогоЭДО.Организация КАК Организация,
		|	ДокументКадровогоЭДО.КодДокументаКадровогоМероприятия КАК КодДокументаКадровогоМероприятия,
		|	ДокументКадровогоЭДО.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.ЭлектронныйДокумент = &Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		
		МетаданныеОснования = Выборка.ОснованиеДокумента.Метаданные();
		Если МетаданныеОснования = Метаданные.Документы.ДокументКадровогоЭДО Тогда
			ДанныеОснования = Выборка;
		Иначе
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Дата", МетаданныеОснования) Тогда
				ИменаРеквизитовОснования = "Дата,Номер";
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПриказа", МетаданныеОснования) Тогда
					ИменаРеквизитовОснования = ИменаРеквизитовОснования + ",НомерПриказа";
				КонецЕсли;
				ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ОснованиеДокумента, ИменаРеквизитовОснования);
			Иначе
				ДанныеОснования = Новый Структура("Дата,Номер", Выборка.Дата);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Оригинал.Дата) Тогда
			ДанныеФайла.Оригинал.Дата = ДанныеОснования.Дата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Оригинал.Номер) Тогда
			Если ТипЗнч(ДанныеОснования) = Тип("Структура") Тогда
				Если ТипЗнч(ДанныеОснования) = Тип("Структура") И ДанныеОснования.Свойство("НомерПриказа") Тогда
					ДанныеФайла.Оригинал.Номер = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеОснования.Номер, ДанныеОснования.НомерПриказа);
				Иначе
					ДанныеФайла.Оригинал.Номер = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеОснования.Номер);
				КонецЕсли;
			Иначе
				ДанныеФайла.Оригинал.Номер = ЗарплатаКадрыОтчеты.НомерНаПечать(ДанныеОснования.Номер, ДанныеОснования.НомерПриказа);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Оригинал.Название) Тогда
			ДанныеФайла.Оригинал.Название = МетаданныеОснования.Синоним;
		КонецЕсли;
		
		ДанныеФайла.Оригинал.Вставить("ДокументКадровогоЭДО", Выборка.Ссылка);
		ДанныеФайла.Оригинал.Вставить("Комментарий", Выборка.Комментарий);
		
		КодДокументаКадровогоМероприятия = Выборка.КодДокументаКадровогоМероприятия;
		Если Не ЗначениеЗаполнено(КодДокументаКадровогоМероприятия) Тогда
			КодДокументаКадровогоМероприятия = КадровыйЭДОПовтИсп.КодКадровогоДокументаПоУмолчанию();
		КонецЕсли;
		ДанныеФайла.Оригинал.Вставить("КодДокументаКадровогоМероприятия",
			КадровыйЭДОПовтИсп.СвойстваКодаКадровогоДокумента(КодДокументаКадровогоМероприятия).Код);
		
		ДанныеФайла.Оригинал.Вставить("Организация", Выборка.Организация);
		СведенияОбОрганизации = 
			ЗарплатаКадры.СведенияОбОрганизации(
				ДанныеФайла.Оригинал.Организация, "НаимЮЛПол,ОГРН,ИННЮЛ,КППЮЛ", ДанныеФайла.Оригинал.Дата);
		
		ДанныеФайла.Оригинал.Вставить("ОрганизацияНаименование", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеФайла.Оригинал.Вставить("ОрганизацияОГРН", СведенияОбОрганизации.ОГРН);
		ДанныеФайла.Оригинал.Вставить("ОрганизацияИНН", СведенияОбОрганизации.ИННЮЛ);
		ДанныеФайла.Оригинал.Вставить("ОрганизацияКПП", СведенияОбОрганизации.КППЮЛ);
		
	КонецЕсли;
	
	КадровыеДанныеФизическогоЛица = "Фамилия,Имя,Отчество,СтраховойНомерПФР";
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолучения.Организация = ДанныеФайла.Оригинал.Организация;
	ПараметрыПолучения.НачалоПериода = НачалоДня(ДанныеФайла.Оригинал.Дата);
	ПараметрыПолучения.ОкончаниеПериода = КонецДня(ПараметрыПолучения.НачалоПериода);
	ПараметрыПолучения.КадровыеДанные = КадровыеДанныеФизическогоЛица + ",Должность,ДатаПриема,ДатаУвольнения,ВидЗанятости";
	ПараметрыПолучения.ИмяВТФизическиеЛица = "ВТДанныеПодписейСотрудников";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолучения);
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц, "ВТДанныеПодписейСотрудников");
	Описатель.ИмяВТКадровыеДанныеФизическихЛиц = "ВТДанныеФизическихЛиц";
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(Описатель, Ложь, КадровыеДанныеФизическогоЛица);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизации.ВидЗанятости ЕСТЬ NULL
		|			ТОГДА 99999999999999999
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(2100, 1, 1)
		|					ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
		|				КОНЕЦ, ДАТАВРЕМЯ(2100, 1, 1), ДЕНЬ) * 1000000000 + СотрудникиОрганизации.ВидЗанятости.Порядок * 1000000 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1900, 1, 1), ВЫБОР
		|					КОГДА СотрудникиОрганизации.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(1900, 1, 1)
		|					ИНАЧЕ СотрудникиОрганизации.ДатаПриема
		|				КОНЕЦ, ДЕНЬ)
		|	КОНЕЦ КАК ПриоритетРабочегоМеста
		|ПОМЕСТИТЬ ВТПриоритетыРабочихМест
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.Фамилия КАК Фамилия,
		|	СотрудникиОрганизации.Имя КАК Имя,
		|	СотрудникиОрганизации.Отчество КАК Отчество,
		|	ВЫРАЗИТЬ(СотрудникиОрганизации.Должность КАК Справочник.Должности) КАК Должность,
		|	СотрудникиОрганизации.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ПОМЕСТИТЬ ВТДанныеСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыРабочихМест КАК ПриоритетыРабочихМест
		|		ПО СотрудникиОрганизации.Сотрудник = ПриоритетыРабочихМест.Сотрудник
		|			И (ПриоритетыРабочихМест.ПриоритетРабочегоМеста В
		|				(ВЫБРАТЬ
		|					МИНИМУМ(ВТПриоритетыРабочихМест.ПриоритетРабочегоМеста)
		|				ИЗ
		|					ВТПриоритетыРабочихМест
		|				ГДЕ
		|					ВТПриоритетыРабочихМест.ФизическоеЛицо = ПриоритетыРабочихМест.ФизическоеЛицо))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПодписейСотрудников.Ссылка КАК Ссылка,
		|	ДанныеПодписейСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеПодписейСотрудников.Отпечаток КАК Отпечаток,
		|	ДанныеПодписейСотрудников.ДатаПодписи КАК ДатаПодписи,
		|	ВЫБОР
		|		КОГДА ДанныеПодписейСотрудников.Отпечаток = """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростаяПодпись,
		|	ЕСТЬNULL(ДанныеСотрудников.Фамилия, ДанныеФизическихЛиц.Фамилия) КАК Фамилия,
		|	ЕСТЬNULL(ДанныеСотрудников.Имя, ДанныеФизическихЛиц.Имя) КАК Имя,
		|	ЕСТЬNULL(ДанныеСотрудников.Отчество, ДанныеФизическихЛиц.Отчество) КАК Отчество,
		|	ЕСТЬNULL(ДанныеСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьСсылка,
		|	ЕСТЬNULL(ДанныеСотрудников.СтраховойНомерПФР, ДанныеФизическихЛиц.СтраховойНомерПФР) КАК СНИЛС,
		|	ВЫБОР
		|		КОГДА ДанныеСотрудников.Должность ЕСТЬ NULL
		|			ТОГДА """"
		|		КОГДА ДанныеСотрудников.Должность.НаименованиеДляЗаписейОТрудовойДеятельности = """"
		|			ТОГДА ДанныеСотрудников.Должность.Наименование
		|		ИНАЧЕ ДанныеСотрудников.Должность.НаименованиеДляЗаписейОТрудовойДеятельности
		|	КОНЕЦ КАК Должность,
		|	ДанныеПодписейСотрудников.ПодписьСотрудника КАК ПодписьСотрудника
		|ИЗ
		|	ВТДанныеПодписейСотрудников КАК ДанныеПодписейСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеФизическихЛиц КАК ДанныеФизическихЛиц
		|		ПО ДанныеПодписейСотрудников.ФизическоеЛицо = ДанныеФизическихЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСотрудников КАК ДанныеСотрудников
		|		ПО ДанныеПодписейСотрудников.ФизическоеЛицо = ДанныеСотрудников.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПодписи";
	
	ДанныеПодписейБазы = Запрос.Выполнить().Выгрузить();
	ПодписьОрганизации = Неопределено;
	Для Каждого ДанныеПодписиФайла Из ДанныеФайла.Подписи Цикл
		ПодписьСотрудника = Ложь;
		ДанныеПодписиБазы = ДанныеПодписейБазы.Найти(ДанныеПодписиФайла.Отпечаток, "Отпечаток");
		Если ДанныеПодписиБазы <> Неопределено Тогда
			ДанныеПодписиФайла.Вставить("Фамилия",			ДанныеПодписиБазы.Фамилия);
			ДанныеПодписиФайла.Вставить("Имя",				ДанныеПодписиБазы.Имя);
			ДанныеПодписиФайла.Вставить("Отчество",			ДанныеПодписиБазы.Отчество);
			ДанныеПодписиФайла.Вставить("СНИЛС",			ДанныеПодписиБазы.СНИЛС);
			ДанныеПодписиФайла.Вставить("Должность",		ДанныеПодписиБазы.Должность);
			ДанныеПодписиФайла.Вставить("ПростаяПодпись",	ДанныеПодписиБазы.ПростаяПодпись);
			Если Не ДанныеПодписиФайла.Свойство("ДатаПодписи") Тогда
				ДанныеПодписиФайла.Вставить("ДатаПодписи", ДанныеПодписиБазы.ДатаПодписи);
			КонецЕсли;
			ПодписьСотрудника = ДанныеПодписиБазы.ПодписьСотрудника;
			ДанныеПодписейБазы.Удалить(ДанныеПодписиБазы);
		КонецЕсли;
		Если ДанныеПодписиФайла.Размер > 0
			И Не ПодписьСотрудника Тогда
			
			ПодписьОрганизации = ДанныеПодписиФайла;
		Иначе
			ПодписиСотрудников.Добавить(ДанныеПодписиФайла);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеПодписейБазы) Тогда
		ДанныеПодписиБазыМассивом = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеПодписейБазы);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодписиСотрудников, ДанныеПодписиБазыМассивом);
	КонецЕсли;
	
	Если ПодписьОрганизации <> Неопределено Тогда
		ДанныеФайла.Оригинал.Вставить("ПодписиОрганизации",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписьОрганизации));
		ДолжностьПредставителя = Неопределено;
		ПодписьОрганизации.Свойство("Должность", ДолжностьПредставителя);
		ДанныеФайла.Оригинал.Вставить("ДолжностьПредставителя", ДолжностьПредставителя);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ДанныеФайла.Подписи, ПодписьОрганизации);
	Иначе
		ДанныеФайла.Оригинал.Вставить("ПодписиОрганизации", Новый Массив);
	КонецЕсли;
	
	ДанныеФайла.Вставить("ПодписиСотрудников", ПодписиСотрудников);
	Возврат ДанныеФайла;
	
КонецФункции

Процедура ЗаполнитьXMLСвойство(ОбъектXML, ИмяXMLСвойства, ИсходныеДанные, ИмяСвойстваДанных)
	
	ЗначениеСвойства = Неопределено;
	Если ИсходныеДанные.Свойство(ИмяСвойстваДанных, ЗначениеСвойства) Тогда
		Если ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			ОбъектXML[ИмяXMLСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИменаФайловКЭДО

Функция ДлинаИмениФайлаСРасширением()
	Возврат 150;
КонецФункции

Функция ИмяФайлаКЭДО(Знач ИмяФайлаСРасширением) Экспорт
	
	Файл = Новый Файл(ИмяФайлаСРасширением);
	ИмяБезРасширения = "";
	Для НомерСимвола = 1 По СтрДлина(Файл.ИмяБезРасширения) Цикл
		СимволИмени = Сред(Файл.ИмяБезРасширения, НомерСимвола, 1);
		Если СимволИмени = "_"
			Или СимволИмени = " "
			Или СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СимволИмени)
			Или СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СимволИмени)
			Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СимволИмени) Тогда
			
			ИмяБезРасширения = ИмяБезРасширения + СимволИмени;
		КонецЕсли;
	КонецЦикла;
	
	ИмяБезРасширения = СокрЛП(СтрЗаменить(ИмяБезРасширения, " ", "_"));
	Пока СтрНайти(ИмяБезРасширения, "__") Цикл
		ИмяБезРасширения = СокрЛП(СтрЗаменить(ИмяБезРасширения, "__", "_"));
	КонецЦикла;
	
	Если СтрДлина(ИмяБезРасширения) + СтрДлина(Файл.Расширение) > ДлинаИмениФайлаСРасширением() Тогда
		ИмяБезРасширения = Лев(ИмяБезРасширения, ДлинаИмениФайлаСРасширением() - СтрДлина(Файл.Расширение));
		Если СтрЗаканчиваетсяНа(ИмяБезРасширения, "_") Тогда
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяБезРасширения + НРег(Файл.Расширение);
	
КонецФункции

Функция ИмяФайлаДляПечати(Знач ИмяОсновногоФайлаСРасширением)
	
	Файл = Новый Файл(ИмяОсновногоФайлаСРасширением);
	
	Возврат ИмяФайлаСДополнением(ИмяОсновногоФайлаСРасширением, НСтр("ru = '_для_печати';
																	|en = '_to_print'"),
		РасширенияФайлаПредставления(Файл.Расширение));
	
КонецФункции

Функция ИмяФайлаПодписи(Знач ИмяОсновногоФайлаСРасширением, Знач ВыводитьИндексПодписи = Ложь, Знач ПорядковыйНомерПодписи = 0) Экспорт
	
	Если Не ВыводитьИндексПодписи Тогда
		Файл = Новый Файл(ИмяОсновногоФайлаСРасширением);
		Возврат Файл.ИмяБезРасширения + "." + ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи;
	КонецЕсли;
	
	Возврат ИмяФайлаСДополнением(ИмяОсновногоФайлаСРасширением, "_" + Формат(ПорядковыйНомерПодписи, "ЧГ="),
		ЭлектроннаяПодпись.ПерсональныеНастройки().РасширениеДляФайловПодписи);
	
КонецФункции

Функция ИмяФайлаСДополнением(Знач ИмяОсновногоФайлаСРасширением, Знач Дополнение, Знач Расширение)
	
	Файл = Новый Файл(ИмяОсновногоФайлаСРасширением);
	ДлинаРасширения = СтрДлина(Файл.Расширение);
	ДлинаДополненияИмени = СтрДлина(Дополнение);
	
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	Если СтрДлина(ИмяОсновногоФайлаСРасширением) + ДлинаДополненияИмени > ДлинаИмениФайлаСРасширением() Тогда
		ИмяБезРасширения = Лев(ИмяБезРасширения, ДлинаИмениФайлаСРасширением() - ДлинаРасширения - ДлинаДополненияИмени);
	КонецЕсли;
	
	ИмяБезРасширения = ИмяБезРасширения + Дополнение;
	ИмяБезРасширения = СокрЛП(СтрЗаменить(ИмяБезРасширения, "__", "_"));
	
	Возврат ИмяБезРасширения + "." + НРег(Расширение);
	
КонецФункции

Функция РасширенияФайлаПредставления(Знач Расширение)
	
	Расширение = СтрЗаменить(Расширение, ".", "");
	
	Если КадровыйЭДОКлиентСервер.ЭтоРасширениеTXTДокумента(Расширение) Тогда
		Возврат КадровыйЭДОКлиентСервер.ТолькоРасширение(КадровыйЭДОКлиентСервер.РасширениеHTMLДокумента());
		
	ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеИзображения(Расширение) Тогда
		Возврат КадровыйЭДОКлиентСервер.ТолькоРасширение(КадровыйЭДОКлиентСервер.РасширениеPDFДокумента());
		
	ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеHTMLДокумента(Расширение) Тогда
		Возврат КадровыйЭДОКлиентСервер.ТолькоРасширение(КадровыйЭДОКлиентСервер.РасширениеHTMLДокумента());
		
	ИначеЕсли КадровыйЭДОКлиентСервер.ЭтоРасширениеMXLДокумента(Расширение) Тогда
		Возврат КадровыйЭДОКлиентСервер.ТолькоРасширение(КадровыйЭДОКлиентСервер.РасширениеPDFДокумента());
		
	КонецЕсли;
	
	Возврат КадровыйЭДОКлиентСервер.ТолькоРасширение(КадровыйЭДОКлиентСервер.РасширениеPDFДокумента());
	
КонецФункции

#КонецОбласти

#Область КонвертацияДокументов

Функция КонвертироватьДокументы(ДокументыКадровогоЭДО) Экспорт
	
	ИмяРеквизита = "КодДокументаКадровогоМероприятия_7696640660b0414980c152bb6380949b";
	РеквизитКодДокументаКадровогоМероприятия =
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяРеквизита);
	
	Результат = Новый Структура;
	Протокол = Новый ТекстовыйДокумент;
	Результат.Вставить("Протокол", Протокол);
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ЕстьДругиеДокументы", Ложь);
	Результат.Вставить("ДокументыСПечатнымиФормами", Новый Массив);
	Результат.Вставить("ДокументыНеТребующиеКонвертации", Новый Массив);
	Результат.Вставить("ДокументыПрошлыхПериодов", Новый Массив);
	
	ДокументыСПечатнымиФормами = Новый Массив;
	ДокументыНеТребующиеКонвертации = Новый Массив;
	ДокументыПрошлыхПериодов = Новый Массив;
	
	ИменаРеквизитов = "ЭлектронныйДокумент,Дата";
	ЕстьРеквизитКодДокументаКадровогоМероприятия =
		ОбщегоНазначения.ЕстьРеквизитОбъекта("КодДокументаКадровогоМероприятия", Метаданные.Документы.ДокументКадровогоЭДО);
	Если ЕстьРеквизитКодДокументаКадровогоМероприятия Тогда
		ИменаРеквизитов = ИменаРеквизитов + ",КодДокументаКадровогоМероприятия";
	КонецЕсли;
	
	РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыКадровогоЭДО, ИменаРеквизитов);
	ЭлектронныеДокументы = Новый Массив;
	Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
		ЭлектронныеДокументы.Добавить(РеквизитыОбъекта.Значение.ЭлектронныйДокумент);
	КонецЦикла;
	ФайлыПечатныхФорм = КадровыйЭДО.ОтобратьФайлыПечатныхФорм(ЭлектронныеДокументы);
	Для Каждого ВыделенныйДокумент Из ДокументыКадровогоЭДО Цикл
		
		РеквизитыОбъекта = РеквизитыОбъектов.Получить(ВыделенныйДокумент);
		ЭлектронныйДокумент = РеквизитыОбъекта.ЭлектронныйДокумент;
		Если ЭлектронныйДокумент = Неопределено Тогда
			Результат.ЕстьОшибки = Истина;
			СообщениеПротокола = СтрШаблон(НСтр("ru = 'Не найден файл электронный документ для %1';
												|en = 'An electronic document file for %1 is not found'"), ВыделенныйДокумент);
			Протокол.ДобавитьСтроку(СообщениеПротокола);
			Продолжить;
		КонецЕсли;
		
		ИндексФайла = ФайлыПечатныхФорм.Найти(ЭлектронныйДокумент);
		Если ИндексФайла = Неопределено Тогда
			Результат.ЕстьДругиеДокументы = Истина;
			СообщениеПротокола = СтрШаблон(НСтр("ru = 'Файл электронного документа %1 не является печатной формой (%2)';
												|en = 'The %1 electronic document file is not a print form (%2)'"), ЭлектронныйДокумент, ВыделенныйДокумент);
			Протокол.ДобавитьСтроку(СообщениеПротокола);
			Продолжить;
		КонецЕсли;
		
		ДокументыСПечатнымиФормами.Добавить(ВыделенныйДокумент);
		Если РеквизитыОбъекта.Дата < '20230301' Тогда
			ДокументыПрошлыхПериодов.Добавить(ВыделенныйДокумент);
		КонецЕсли;
		ЗначениеРеквизита = Неопределено;
		Если ЗначениеЗаполнено(РеквизитКодДокументаКадровогоМероприятия) Тогда
			ЗначениеРеквизита = УправлениеСвойствами.ЗначениеСвойства(ВыделенныйДокумент, РеквизитКодДокументаКадровогоМероприятия);
		КонецЕсли;
		Если ЗначениеРеквизита = Неопределено
			И ЕстьРеквизитКодДокументаКадровогоМероприятия Тогда
			
			ЗначениеРеквизита = РеквизитыОбъекта["КодДокументаКадровогоМероприятия"];
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			СообщениеПротокола = СтрШаблон(НСтр("ru = 'Электронный документ %1, возможно не требует конвертации';
												|en = 'The %1 electronic document might not require conversion'"), ВыделенныйДокумент);
			Протокол.ДобавитьСтроку(СообщениеПротокола);
			ДокументыНеТребующиеКонвертации.Добавить(ВыделенныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.ДокументыСПечатнымиФормами = ДокументыСПечатнымиФормами;
	Результат.ДокументыНеТребующиеКонвертации = ДокументыНеТребующиеКонвертации;
	Результат.ДокументыПрошлыхПериодов = ДокументыПрошлыхПериодов;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьПодписиИОбновитьОсновныеДокументыПриКонвертацииДокументов(Результат) Экспорт
	
	ИмяРеквизита = "КодДокументаКадровогоМероприятия_7696640660b0414980c152bb6380949b";
	РеквизитКодДокументаКадровогоМероприятия =
		ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", ИмяРеквизита);
	
	ДокументыКЭДОККонвертации = Результат.ДокументыСПечатнымиФормами;
	Попытка
		
		НачатьТранзакцию();
		
		ИменаРеквизитов = "ЭлектронныйДокумент,КатегорияДокумента";
		ЕстьРеквизитКодДокументаКадровогоМероприятия =
			ОбщегоНазначения.ЕстьРеквизитОбъекта("КодДокументаКадровогоМероприятия", Метаданные.Документы.ДокументКадровогоЭДО);
		Если ЕстьРеквизитКодДокументаКадровогоМероприятия Тогда
			ИменаРеквизитов = ИменаРеквизитов + ",КодДокументаКадровогоМероприятия";
		КонецЕсли;
		
		РеквизитыОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыКЭДОККонвертации, ИменаРеквизитов);
		ЭлектронныеДокументы = Новый Массив;
		ЭлектронныеДокументыНаПодпись = Новый Массив;
		ЭлектронныеДокументыНаОзнакомление = Новый Массив;
		ДокументыКЭДОЭлектронныхДокументов = Новый Соответствие;
		Для Каждого РеквизитыОбъекта Из РеквизитыОбъектов Цикл
			ЭлектронныеДокументы.Добавить(РеквизитыОбъекта.Значение.ЭлектронныйДокумент);
			ДокументыКЭДОЭлектронныхДокументов.Вставить(РеквизитыОбъекта.Значение.ЭлектронныйДокумент, РеквизитыОбъекта.Ключ);
			Если РеквизитыОбъекта.Значение.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток Тогда
				ЭлектронныеДокументыНаОзнакомление.Добавить(РеквизитыОбъекта.Значение.ЭлектронныйДокумент);
			Иначе
				ЭлектронныеДокументыНаПодпись.Добавить(РеквизитыОбъекта.Значение.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
		Результат.Вставить("ЭлектронныеДокументыНаОзнакомление", ЭлектронныеДокументыНаОзнакомление);
		Результат.Вставить("ЭлектронныеДокументыНаПодпись", ЭлектронныеДокументыНаПодпись);
		ДанныеФайловПечатныхФорм = РегистрыСведений.ПодписанныеПечатныеФормы.ДанныеФайловПечатныхФорм(
			Результат.ЭлектронныеДокументы);
		Для Каждого ДанныеФайла Из ДанныеФайловПечатныхФорм Цикл
			
			ДокументКЭДОСсылка = ДокументыКЭДОЭлектронныхДокументов.Получить(ДанныеФайла.Ключ);
			Если ДокументКЭДОСсылка = Неопределено Тогда
				СообщениеПротокола = СтрШаблон(НСтр("ru = 'Электронный документ %1 - удалены подписи, сконвертирован в формат PDF/A-1A';
													|en = 'The %1 electronic document: signatures are deleted, and the document is converted into PDF/A-1A'"), ДанныеФайла.Ключ);
			Иначе
				СообщениеПротокола = СтрШаблон(НСтр("ru = 'Электронный документ %1 - удалены подписи, сконвертирован в формат PDF/A-1A';
													|en = 'The %1 electronic document: signatures are deleted, and the document is converted into PDF/A-1A'"), ДокументКЭДОСсылка);
			КонецЕсли;
			
			Результат.Протокол.ДобавитьСтроку(СообщениеПротокола);
			
			НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ДанныеФайла.Ключ);
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ДокументКЭДОСсылка);
			НаборЗаписей.Записать();
			
			Оригинал = ДанныеФайла.Значение.Оригинал.Получить();
			Если Оригинал <> Неопределено Тогда
				
				ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
				ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Ложь;
				
				СведенияОФайле = РаботаСФайлами.ДанныеФайла(ДанныеФайла.Ключ, ПараметрыДанныхФайла);
				
				Файл = Новый Файл(ИмяФайлаКЭДО(СведенияОФайле.ИмяФайла));
				ИмяБезРасширения = Файл.ИмяБезРасширения;
				Расширение = СтрЗаменить(Файл.Расширение, ".", "");
				
				Поток = Новый ПотокВПамяти();
				Оригинал.Записать(Поток, ТипФайлаТабличногоДокумента.PDF_A_1);
				ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
				РазмерФайла = ДвоичныеДанные.Размер();
				
				ИнформацияОбОбновляемомФайле = Новый Структура;
				ИнформацияОбОбновляемомФайле.Вставить("АдресФайлаВоВременномХранилище",
					ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор));
				ИнформацияОбОбновляемомФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
				ИнформацияОбОбновляемомФайле.Вставить("ИмяБезРасширения", 				ИмяБезРасширения);
				ИнформацияОбОбновляемомФайле.Вставить("Расширение", 					Расширение);
				
				РаботаСФайлами.ОбновитьФайл(ДанныеФайла.Ключ, ИнформацияОбОбновляемомФайле);
				
			КонецЕсли;
			
			ДокументКЭДОСсылка = ДокументыКЭДОЭлектронныхДокументов.Получить(ДанныеФайла.Ключ);
			Если ДокументКЭДОСсылка <> Неопределено Тогда
				Если ЕстьРеквизитКодДокументаКадровогоМероприятия Тогда
					ЗначениеРеквизита = "";
					ЗначенияРеквизитов = РеквизитыОбъектов.Получить(ДокументКЭДОСсылка);
					Если ЗначенияРеквизитов <> Неопределено Тогда
						ЗначениеРеквизита = ЗначенияРеквизитов.КодДокументаКадровогоМероприятия;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДокументКЭДООбъект = ДокументКЭДОСсылка.ПолучитьОбъект();
						Если Метаданные.Справочники.Найти("КодыДокументовКадровыхМероприятий") = Неопределено Тогда
							ДокументКЭДООбъект.КодДокументаКадровогоМероприятия = "12.999";
						Иначе
							ДокументКЭДООбъект.КодДокументаКадровогоМероприятия = КадровыйЭДОПовтИсп.КодКадровогоДокументаПоУмолчанию();
						КонецЕсли;
						ДокументКЭДООбъект.ОбменДанными.Загрузка = Истина;
						ДокументКЭДООбъект.Записать();
					КонецЕсли;
				ИначеЕсли РеквизитКодДокументаКадровогоМероприятия <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(УправлениеСвойствами.ЗначениеСвойства(ДокументКЭДОСсылка, РеквизитКодДокументаКадровогоМероприятия)) Тогда
						ТаблицаСвойств = Новый ТаблицаЗначений;
						ТаблицаСвойств.Колонки.Добавить("Свойство", Новый ОписаниеТипов());
						ТаблицаСвойств.Колонки.Добавить("Значение", Новый ОписаниеТипов());
						СтрокаСвойств = ТаблицаСвойств.Добавить();
						СтрокаСвойств.Свойство = РеквизитКодДокументаКадровогоМероприятия;
						СтрокаСвойств.Значение = "12.999";
						УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокументКЭДОСсылка, ТаблицаСвойств);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение(ПодробноеПредставлениеОшибки(Ошибка));
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеМЧДПодписи(МЧД, ИдентификаторХранилища)
	
	Возврат КадровыйЭДОПовтИсп.ДанныеМЧДПодписи(МЧД, Строка(ИдентификаторХранилища));
	
КонецФункции

#КонецОбласти

Функция ДокументГотовДляАрхивирования(ДокументКЭДОСсылка) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПроверитьГотовностьДокументовДляАрхивирования(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументКЭДОСсылка));
	
	Возврат КонтрольВеденияУчетаБЗК.КоличествоПроблемПоОбъекту(ДокументКЭДОСсылка,
		КадровыйЭДО.ИдентификаторПроверкиТогоЧтоВсеПодписиПроходилиПроверку()) = 0;
	
КонецФункции

Процедура ПроверитьГотовностьДокументовДляАрхивирования(ДокументыКЭДО) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольВеденияУчетаБЗК.ВыполнитьПроверку(
		КадровыйЭДО.ИдентификаторГруппыПроверокСоответствияТребованиямПриказа578(),
		ДокументыКЭДО);
	
КонецПроцедуры

Процедура ПослеПодписанияФайловСертификатом(Знач Результат) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписей = Новый Массив;
	Если Результат.Свойство("СвойстваПодписи") Тогда
		ДанныеПодписей.Добавить(Результат);
	Иначе
		ДанныеПодписей = Результат.НаборДанных;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		
		РольПодписанта = Неопределено;
		Если ДанныеПодписи.СвойстваПодписи.Свойство("РезультатПроверкиПодписиПоМЧД")
			И ТипЗнч(ДанныеПодписи.СвойстваПодписи.РезультатПроверкиПодписиПоМЧД) = Тип("Структура")
			И ДанныеПодписи.СвойстваПодписи.РезультатПроверкиПодписиПоМЧД.Свойство("МашиночитаемаяДоверенность")
			И ЗначениеЗаполнено(ДанныеПодписи.СвойстваПодписи.РезультатПроверкиПодписиПоМЧД.МашиночитаемаяДоверенность) Тогда
			
			РольПодписанта = Перечисления.РолиПодписантовКЭДО.Организация;
		ИначеЕсли ДанныеПодписи.СвойстваПодписи.Свойство("Сертификат")
			И ЗначениеЗаполнено(ДанныеПодписи.СвойстваПодписи.Сертификат) Тогда
			
			Сертификат = Новый СертификатКриптографии(ДанныеПодписи.СвойстваПодписи.Сертификат);
			СвойстваСертификата = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
			Если ЗначениеЗаполнено(СвойстваСертификата.Организация) Тогда
				РольПодписанта = Перечисления.РолиПодписантовКЭДО.Организация;
			Иначе
				РольПодписанта = Перечисления.РолиПодписантовКЭДО.Исполнитель;
			КонецЕсли;
		Иначе
			РольПодписанта = Перечисления.РолиПодписантовКЭДО.Исполнитель;
		КонецЕсли;
		
		ЭлектроннаяПодписьКЭДО.ЗарегистрироватьНаборСвойствПодписи(
			ДанныеПодписи.Объект, ДанныеПодписи.СвойстваПодписи.ИдентификаторПодписи, РольПодписанта);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриДобавленииПодписи(РезультатПодписания, ДанныеПодписейКЭДО) Экспорт
	
	Если ТипЗнч(РезультатПодписания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПодписейКЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ДанныеПодписейКЭДО Цикл
		Если ЗначениеЗаполнено(ДанныеПодписи.МЧД) Тогда
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеПодписи.РольПодписанта) Тогда
			ЭлектроннаяПодписьКЭДО.ЗарегистрироватьНаборСвойствПодписи(
				РезультатПодписания.Объект,
				РезультатПодписания.ИдентификаторПодписи,
				ДанныеПодписи.РольПодписанта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляПроверкиНепроверенныхПодписей(ДокументыКадровогоЭДО, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыКадровогоЭДО, "ЭлектронныйДокумент");
	
	ДанныеДляПроверки = Новый Массив;
	Для Каждого ДанныеДокумента Из ЭлектронныеДокументы Цикл
		ЭлектронныйДокумент = ДанныеДокумента.Значение;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанныхФайла.ИдентификаторФормы = ИдентификаторФормы;
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент, ПараметрыДанныхФайла);
			Если ДанныеФайла.ПодписанЭП Тогда
				
				ДанныеДляПроверкиПодписей = Новый Структура(
					"ДокументКЭДО,
					|ЭлектронныйДокумент,
					|Зашифрован,
					|СсылкаНаДвоичныеДанныеФайла,
					|ПодписиИБ,
					|ПодписиСервиса",
					ДанныеДокумента.Ключ,
					ЭлектронныйДокумент,
					ДанныеФайла.Зашифрован,
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
					Новый Массив,
					Новый Массив);
				
				Подписи = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(ЭлектронныйДокумент);
				Для Каждого Подпись Из Подписи Цикл
					Если Подпись.ПодписьВерна Тогда
						Продолжить;
					КонецЕсли;
					Если КабинетСотрудника.ЭтоПодписанСервиса(Подпись.Комментарий) Тогда
						ДанныеДляПроверкиПодписей.ПодписиСервиса.Добавить(
							ДанныеОПодписи(Подпись, ИдентификаторФормы));
					Иначе
						ДанныеДляПроверкиПодписей.ПодписиИБ.Добавить(
							ДанныеОПодписи(Подпись, ИдентификаторФормы));
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ДанныеДляПроверкиПодписей.ПодписиИБ)
					Или ЗначениеЗаполнено(ДанныеДляПроверкиПодписей.ПодписиСервиса) Тогда
					
					ДанныеДляПроверки.Добавить(ДанныеДляПроверкиПодписей);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

Функция ДанныеОПодписи(Подпись, ИдентификаторФормы)
	
	Данные = ОбщегоНазначения.СкопироватьРекурсивно(Подпись);
	Данные.Вставить("АдресПодписи", ПоместитьВоВременноеХранилище(Подпись.Подпись, ИдентификаторФормы));
	Данные.Удалить("Подпись");
	
	Возврат Данные;
	
КонецФункции

Процедура ПроверитьПодписи(ПодписиСервиса, СсылкаНаДвоичныеДанные) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанные);
	Для Каждого СтрокаПодписи Из ПодписиСервиса Цикл
		
		ОписаниеОшибки = "";
		ПодписьВерна = Ложь;
		Статус = "";
		
		ПараметрыСоздания = ЭлектроннаяПодписьСлужебный.ПараметрыСозданияМенеджераКриптографии();
		
		ПодписьДляПроверки = ПолучитьИзВременногоХранилища(СтрокаПодписи.АдресПодписи);
		ПараметрыСоздания.АлгоритмПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.АлгоритмСформированнойПодписи(ПодписьДляПроверки);
		
		МенеджерКриптографии = ЭлектроннаяПодписьСлужебный.МенеджерКриптографии("ПроверкаПодписи", ПараметрыСоздания);
		Если МенеджерКриптографии = Неопределено Тогда
			ОписаниеОшибки = ПараметрыСоздания.ОписаниеОшибки;
		Иначе
			
			Сертификат = Неопределено;
			Попытка
				
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ПодписьДляПроверки, Сертификат);
				
				МассивРежимовПроверки = Новый Массив;
				МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
				МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
				МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
				
				ПодписьВерна = Истина;
				Статус = НСтр("ru = 'Верна';
								|en = 'Valid'");
				
			Исключение
				
				Статус = НСтр("ru = 'Не верна';
								|en = 'Invalid'");
				Инфо = ИнформацияОбОшибке();
				Если Инфо.Причина <> Неопределено Тогда
					Статус = Статус + ": " + Инфо.Причина.Описание;
				КонецЕсли;
				ПодписьВерна = Ложь;
				
			КонецПопытки;
			
			СтрокаПодписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаПодписи.ПодписьВерна   = ПодписьВерна;
			СтрокаПодписи.ОписаниеОшибки = ОписаниеОшибки;
			СтрокаПодписи.Статус 		 = Статус;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРезультатПроверкиПодписи(ЭлектронныйДокумент, ПорядковыйНомер, ДатаПроверкиПодписи, ПодписьВерна) Экспорт
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.ПорядковыйНомер = ПорядковыйНомер;
	СвойстваПодписи.ДатаПроверкиПодписи = ДатаПроверкиПодписи;
	СвойстваПодписи.ПодписьВерна = ПодписьВерна;
	УстановитьПривилегированныйРежим(Истина);
	ЭлектроннаяПодпись.ОбновитьПодпись(ЭлектронныйДокумент, СвойстваПодписи, Истина);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ИмяВыгружаемогоФайлаМЧД(Ссылка) Экспорт
	
	РеквизитыДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ДатаВыдачи,НомерДоверенности");
	ИмяФайлаДоверенности = СтрШаблон(
		"ON_EMCHD_%1_%2.xml",
		Формат(РеквизитыДоверенности.ДатаВыдачи, "ДФ=yyyyMMdd;"),
		РеквизитыДоверенности.НомерДоверенности);
	Возврат КадровыйЭДОВызовСервера.ИмяФайлаКЭДО(ИмяФайлаДоверенности);
	
КонецФункции

#КонецОбласти
