#Область СлужебныйПрограммныйИнтерфейс

#Область ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	НовыеРазрешения = Новый Массив;

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		АдресСервера(),
		443,
		НСтр("ru = 'Система онлайн бронирования командировок Smartway (https://smartway.today/)';
			|en = 'Smartway system of online business trip booking (https://smartway.today/)'"));
	НовыеРазрешения.Добавить(Разрешение);

	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти

Процедура ОтправитьСотрудников(СистемаБронирования, ДанныеФизическихЛиц, ПараметрыОтправки) Экспорт
	
	Если СистемаБронирования <> Перечисления.СистемыБронированияКомандировок.Smartway Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура("employees");
	
	ЗаполнитьПараметрыОтправкиСотрудников(ПараметрыМетода, ДанныеФизическихЛиц);
	
	Попытка
		ОтветСервиса = СтруктураОтветаОтСервиса("employees.save", ПараметрыМетода);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ОбработатьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаявкаНаБронирование

Процедура ДобавитьДанныеПаспортаВОписаниеФизическогоЛица(ОписанияДокументов, СтрокаДокумента) Экспорт
	
	Паспорт = Новый Структура(
		"type,
		|number,
		|due_date");
	
	ОписанияДокументов.Добавить(Паспорт);
	
	Если СтрокаДокумента.ВидДокумента = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
		Паспорт["type"] = "foreign_passport";
	Иначе
		Паспорт["type"] = "domestic_passport";
	КонецЕсли;
	
	Паспорт["number"] = СтрокаДокумента.НомерДокумента;
	Если ЗначениеЗаполнено(СтрокаДокумента.СрокДействияДокумента) Тогда
		Паспорт["due_date"] = СтрокаДокумента.СрокДействияДокумента;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеФизическогоЛица() Экспорт
	
	ОписаниеФизлица = Новый Структура(
		"id,
		|name,
		|surname,
		|patronymic,
		|name_eng,
		|surname_eng,
		|patronymic_eng,
		|sex,
		|birthday,
		|citizenship_code,
		|email,
		|mobile_phone,
		|documents,
		|companies_inn,
		|airline_bonuses");
	
	ОписаниеФизлица["documents"] = Новый Массив;
	ОписаниеФизлица["companies_inn"] = Новый Массив;
	
	Возврат ОписаниеФизлица;
	
КонецФункции

#КонецОбласти

#Область СловариЗначений

Функция ПолФизическогоЛица(Пол) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "male");
	Соответствие.Вставить(Перечисления.ПолФизическогоЛица.Женский, "female");
	
	Возврат Соответствие[Пол];
	
КонецФункции

#КонецОбласти

#Область ВзаимодействиеССервисом

Функция СтруктураОтветаОтСервиса(ИмяМетода, ПараметрыМетода, ПоляСДатами = Неопределено, ПоказыватьСообщения = Неопределено) Экспорт
	
	СтруктураЗапроса = СтруктураЗапросаКСервису(ИмяМетода, ПараметрыМетода);
	ТекстЗапроса = ДанныеВJSON(СтруктураЗапроса);
	
	Запрос = HTTPЗапросКСервису("");
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса);
	
	Соединение = HTTPСоединениеСервиса();
	
	Если ПоказыватьСообщения = Неопределено Тогда
		ПоказыватьСообщения = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	КонецЕсли;
	
	Попытка
		Ответ = ВыполнитьЗапросКСервису(Соединение, Запрос);
	Исключение
		ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке(), ПоказыватьСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	СтруктураОтвета = JSONВДанные(Ответ, ПоляСДатами);
	
	Попытка
		ПроверитьОтветСервиса(СтруктураОтвета);
	Исключение
		ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке(), ПоказыватьСообщения);
		ВызватьИсключение;
	КонецПопытки;
		
	Возврат СтруктураОтвета;
	
КонецФункции

Функция СтруктураЗапросаКСервису(ИмяМетода, ПараметрыМетода)
	
	ПараметрыЗапроса = Новый Структура(
		"authorization,
		|query");
	ПараметрыЗапроса["authorization"] = СтруктураАвторизации();
	ПараметрыЗапроса["query"] = ПараметрыМетода;
	
	СтруктураЗапроса = Новый Структура(
		"jsonrpc,
		|id,
		|method,
		|params");
	СтруктураЗапроса["jsonrpc"] = "2.0";
	СтруктураЗапроса["id"] = Строка(Новый УникальныйИдентификатор);
	СтруктураЗапроса["method"] = ИмяМетода;
	СтруктураЗапроса["params"] = ПараметрыЗапроса;
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция СтруктураАвторизации()
	
	Smartway = Перечисления.СистемыБронированияКомандировок.Smartway;
	Настройки = БронированиеКомандировок.НовыеНастройкиСистемыБронирования();
	БронированиеКомандировок.ЗаполнитьНастройкиСистемыБронирования(Настройки, Smartway);
	
	Если Не ЗначениеЗаполнено(Настройки.Логин) Тогда
		ТекстСообщения = НСтр("ru = 'Доступ к сервису бронирования Smartway не настроен';
								|en = 'Access to Smartway booking service is not configured'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураАвторизации = Новый Структура(
		"username,
		|password");
	
	СтруктураАвторизации["username"] = Настройки.Логин;
	СтруктураАвторизации["password"] = Настройки.Пароль;
	
	Возврат СтруктураАвторизации;
	
КонецФункции

Функция HTTPСоединениеСервиса()
	
	АдресСервера = АдресСервера();
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	КонецЕсли;
	
	Таймаут = 40;
	
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Возврат Новый HTTPСоединение(АдресСервера,,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Функция АдресСервера()
	
	Возврат "api.smartway.today/v2";
	
КонецФункции

Функция HTTPЗапросКСервису(ТекстЗапроса)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("charset", "UTF-8");
	
	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
	
КонецФункции

Функция ВыполнитьЗапросКСервису(Соединение, Запрос)
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(Соединение.Сервер);
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Результат диагностики:
			           |%2';
			           |en = '%1
			           |
			           |Diagnostics result:
			           |%2'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			РезультатДиагностики.ОписаниеОшибки);
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при обработке запроса к ресурсу:
			           |%1';
			           |en = 'An error occurred while processing a resource query:
			           |%1'"),
			Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
		
	Возврат Ответ;
	
КонецФункции

Процедура ПроверитьОтветСервиса(СтруктураОтвета)
		
	Если СтруктураОтвета.Свойство("error") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                  |Код ошибки: %1,
                  |Сообщение: %2.';
                  |en = 'Error when verifying response from the service.
                  |Error code: %1,
                  |Message: %2.'"), 
			СтруктураОтвета["error"]["code"], 
			СтруктураОтвета["error"]["message"]);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Не СтруктураОтвета.Свойство("result") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                                |Отсутствует поле result.';
                                |en = 'Error when verifying response from the service.
                                |The result field is missing.'");
	КонецЕсли;
	
КонецПроцедуры

Функция JSONВДанные(Ответ, ПоляСДатами)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	Результат = ПрочитатьJSON(ЧтениеJSON, , ПоляСДатами);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеВJSON(СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Процедура ЗарегистрироватьОшибкуСервиса(ИнформацияОбОшибке, ПоказыватьСообщения)
	
	ИмяСобытия = НСтр("ru = 'Бронирование командировок.Обращение к сервису Smartway';
						|en = 'Business trip booking.Access Smartway service'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	Если Не ПоказыватьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при обращении к сервису Smartway. Обратитесь к администратору.
			       |Техническая информация:
			       |%1';
			       |en = 'Error when contacting Smartway service. Contact your administrator.
			       |Technical information:
			       |%1'"), 
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСотрудников

Процедура ЗаполнитьПараметрыОтправкиСотрудников(ПараметрыМетода, ДанныеФизическихЛиц)
	
	ПараметрыМетода["employees"] = Новый Массив;
	Для Каждого СтрокаФизическоеЛицо Из ДанныеФизическихЛиц Цикл
		ДобавитьСотрудникаВСписокОтправляемых(ПараметрыМетода["employees"], СтрокаФизическоеЛицо);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСотрудникаВСписокОтправляемых(ОписанияСотрудников, СтрокаФизическоеЛицо)
	
	ОписаниеСотрудника = ОписаниеСотрудникаДляОтправки();
	ЗаполнитьОписаниеСотрудника(ОписаниеСотрудника, СтрокаФизическоеЛицо);
	ОписанияСотрудников.Добавить(ОписаниеСотрудника);
	
КонецПроцедуры

Функция ОписаниеСотрудникаДляОтправки()
	
	ОписаниеСотрудника = ОписаниеФизическогоЛица();
	ОписаниеСотрудника.Вставить("is_archive");
	ОписаниеСотрудника.Вставить("bonuses");
	ОписаниеСотрудника.Удалить("airline_bonuses");
	
	Возврат ОписаниеСотрудника;
	
КонецФункции

Процедура ЗаполнитьОписаниеСотрудника(ОписаниеСотрудника, СтрокаФизическоеЛицо)
	
	ОписаниеСотрудника["id"] = СтрокаФизическоеЛицо.Идентификатор;
	ОписаниеСотрудника["name"] = СтрокаФизическоеЛицо.Имя;
	ОписаниеСотрудника["surname"] = СтрокаФизическоеЛицо.Фамилия;
	ОписаниеСотрудника["patronymic"] = СтрокаФизическоеЛицо.Отчество;
	ОписаниеСотрудника["name_eng"] = СтрокаФизическоеЛицо.ИмяЛатиницей;
	ОписаниеСотрудника["surname_eng"] = СтрокаФизическоеЛицо.ФамилияЛатиницей;
	ОписаниеСотрудника["patronymic_eng"] = СтрокаФизическоеЛицо.ОтчествоЛатиницей;
	ОписаниеСотрудника["sex"] = ПолФизическогоЛица(СтрокаФизическоеЛицо.Пол);
	ОписаниеСотрудника["birthday"] = СтрокаФизическоеЛицо.ДатаРождения;
	ОписаниеСотрудника["citizenship_code"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаФизическоеЛицо.Гражданство, "КодАльфа2");
	ОписаниеСотрудника["email"] = СтрокаФизическоеЛицо.EMail;
	ОписаниеСотрудника["mobile_phone"] = СтрокаФизическоеЛицо.Телефон;
	ОписаниеСотрудника["is_archive"] = СтрокаФизическоеЛицо.Архивный;
	
	Для Каждого СтрокаДокумента Из СтрокаФизическоеЛицо.Документы Цикл
		ДобавитьДанныеПаспортаВОписаниеФизическогоЛица(ОписаниеСотрудника["documents"], СтрокаДокумента);
	КонецЦикла;
	
	Для каждого СтрокаИНН Из СтрокаФизическоеЛицо.Организации Цикл
		ОписаниеСотрудника["companies_inn"].Добавить(СтрокаИНН);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки)

	ТекстСообщения = "";

	Если ОтветСервиса.Свойство("error") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке ответа от сервиса.
                  |Код ошибки: %1,
                  |Сообщение: %2.';
                  |en = 'Error when verifying response from the service.
                  |Error code: %1,
                  |Message: %2.'"), 
			ОтветСервиса["error"]["code"], 
			ОтветСервиса["error"]["message"]);
		ПараметрыОтправки.ТекстОшибки = ТекстСообщения;
	КонецЕсли;

	Если Не ОтветСервиса.Свойство("result") Тогда
		Если ТекстСообщения = "" Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка при проверке ответа от сервиса. Отсутствует поле result.';
									|en = 'An error occurred while checking the service response. The result field is missing.'");
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
							|Ошибка при проверке ответа от сервиса. Отсутствует поле result.';
							|en = '%1
							|Error when verifying response from the service.The result field is missing.'"), ТекстСообщения);
		КонецЕсли;
	Иначе
		Если ОтветСервиса.Свойство("result") Тогда
			Если ОтветСервиса["result"].Количество() > 0 Тогда
				ЗаполнитьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПараметрыОтправки.ТекстОшибки = ТекстСообщения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРезультатОтправкиСотрудников(ОтветСервиса, ДанныеФизическихЛиц, ПараметрыОтправки)

	ДанныеФизическихЛиц.Индексы.Добавить("Идентификатор");
	ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц.Индексы.Добавить("ФизическоеЛицо");

	Для каждого СтрокаРезультата Из ОтветСервиса["result"] Цикл

		ОтборПоИдентификатору = Новый Структура("Идентификатор", СтрокаРезультата.id);
		ФизическиеЛицаПоИдентификатору = ДанныеФизическихЛиц.НайтиСтроки(ОтборПоИдентификатору);
		Если ФизическиеЛицаПоИдентификатору.Количество() > 0 Тогда

			ОтборПоФизическомуЛицу = Новый Структура("ФизическоеЛицо", ФизическиеЛицаПоИдентификатору[0].Ссылка);
			ФизическиеЛица = ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц.НайтиСтроки(ОтборПоФизическомуЛицу);
			Если ФизическиеЛица.Количество() > 0 Тогда

				ФизическиеЛица[0].Отправлено = СтрокаРезультата["success"];
				Если ЗначениеЗаполнено(СтрокаРезультата["error"]) Тогда
					ФизическиеЛица[0].Комментарий = СтрокаРезультата["error"];
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти