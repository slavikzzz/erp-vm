////////////////////////////////////////////////////////////////////////////////
// Состояние сдачи отчетности
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Заказчик функции - БП 3.0
// Возвращает сведения по всем отправкам отчета или уведомления, 
// отсортированные по убыванию даты отправки.
// Сведения по прочим объектам не возвращает.
//
// Параметры:
//  Ссылка	 - ДокументСсылка, СправочникСсылка - отправляемый отчет или уведомление.
// 
// Возвращаемое значение:
//  Массив структур - сведения по отправкам.
// 		Набор данных в структуре - см в функции ШаблонОбщихСведенийОтправке.
//
Функция СведенияПоВсемОтправкам(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	
	ТаблицаВсехОтправок = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВсеОтправки(Ссылка);
	
	Для каждого Отправка Из ТаблицаВсехОтправок Цикл
		
		Сведения = ШаблонОбщихСведенийОтправке();
		ЗаполнитьЗначенияСвойств(Сведения, Отправка);
		
		Результат.Добавить(Сведения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заказчик функции - БП 3.0
// Возвращает подробные сведения по идентификатору отправки и ссылке.
// Только для отчетов и уведомлений.
// Сведения по прочим объектам не возвращает.
//
// Параметры:
//  Ссылка					 - ДокументСсылка, СправочникСсылка - отправляемый отчет или уведомление.
//  ИдентификаторОтправки	 - Идентификатор цикла обмена, если есть цикл обмена, 
// 			или ИдентификаторОтправкиНаСервере соответствующей отправки, если нет цикла обмена
//			или Транспортное сообщение.
//  ДополнительныеПараметры	 - Структура - Структура с полями из ШаблонОбщихСведенийОтправке()
// 
// Возвращаемое значение:
//  Структура - описание см в ШаблонПодробныхСведенийПоОтправкам. 
//		Если заполнен параметр ДополнительныеПараметры, то структура так же дополняется
//		значениями, указанными в дополнительных параметрах.
//
Функция СведенияПоОтправке(
		Ссылка,
		ИдентификаторОтправки,
		ДополнительныеПараметры = Неопределено,
		НастройкиПолучения = Неопределено) Экспорт
	
	НастрокиВызова = Новый Структура;
	НастрокиВызова.Вставить("ЗаполнятьИмяИДанныеФайла", Истина);
	Если НастройкиПолучения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастрокиВызова, НастройкиПолучения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Результат = ШаблонПодробныхСведенийПоОтправкам();
	
	// Проверяем, отправлялся ли отчет и есть ли отправка с нужным идентификатором или транспортным сообщением.
	Отправки = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВсеОтправки(Ссылка);
	
	Если ТипЗнч(ИдентификаторОтправки) = Тип("Строка") Тогда
		СведенияПоОтправке  = Отправки.Найти(ИдентификаторОтправки, "ИдентификаторОтправки");
	Иначе
		СведенияПоОтправке  = Отправки.Найти(ИдентификаторОтправки, "Сообщение");
	КонецЕсли;

	Если НастрокиВызова.ЗаполнятьИмяИДанныеФайла Тогда
		ЗаполнитьИмяИДанныеФайла(Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	КонецЕсли;
	ЗаполнитьДатуРезультата(Ссылка, Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	ЗаполнитьСтатусОтправки(Результат, СведенияПоОтправке, КонтекстЭДОСервер);
	
	ДополнитьОбщимиСведениями(Результат, СведенияПоОтправке, ДополнительныеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Возвращает файл отправленного отчета, подпись организации, подпись гос. органа
//
// Параметры:
//  Отчет	 - ДокументСсылка, СправочникСсылка - ссылка на отправленный отчет
// 
// Возвращаемое значение:
//  Структура - файл отправленного отчета, подпись организации, подпись гос. орган.
//              см. метод ШаблонРезультатаФайлыОтправкиОтчета
//
Функция ПолучитьФайлыОтправкиОтчета(Отчет) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Отчет, Истина);
	Орган             = КонтекстЭДОСервер.ТипКонтролирующегоОргана(СведенияПоОбъекту.ВидКонтролирующегоОргана);
	
	Если Орган = Перечисления.ТипыКонтролирующихОрганов.ФСС
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР 
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.ФТС 
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
		
		Результат = ПолучитьФайлы1САрхиваПоОтправке(Отчет, Орган);
			
	Иначе
		
		Результат = ПолучитьФайлы1САрхиваПоЦиклуОбмена(Отчет, Орган);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СведенияПоВсемОтправкамСДопСведениями(Ссылка) Экспорт

	ВсеОбщиеСведения = СведенияПоОтправкам.СведенияПоВсемОтправкам(Ссылка);
	
	ДополнительныеПараметры = ШаблонОбщихСведенийОтправке();
	
	Результат = Новый Массив;
	Для каждого ДанныеОднойОтправка Из ВсеОбщиеСведения Цикл
		 Результат.Добавить(СведенияПоОтправкам.СведенияПоОтправке(Ссылка, ДанныеОднойОтправка.ИдентификаторОтправки, ДополнительныеПараметры)); 
	КонецЦикла;
	 
	Возврат Результат; 

КонецФункции

Функция СтатусОтправкиРеглОтчета(Ссылка) Экспорт
	
	Результат = "";
	
	Если Ссылка = Неопределено Тогда
		
		Возврат Результат;
		
	КонецЕсли;
		
	Отправки = СведенияПоВсемОтправкам(Ссылка);
			
	Если Отправки.Количество() > 0 Тогда
		
		НастройкиПолучения = Новый Структура("ЗаполнятьИмяИДанныеФайла", Ложь);
		Результат = СведенияПоОтправке(Ссылка, Отправки[0].ИдентификаторОтправки,, НастройкиПолучения).Статус;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИмяИДанныеФайла(Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СведенияПоОтправке.Сообщение)
		ИЛИ НЕ ТипЗнч(СведенияПоОтправке.Сообщение) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрПоТипу = ДокументооборотСКОВызовСервера.ТипыСодержимогоТранспортногоКонтейнераПервичныхСообщений();
	
	ТаблицаСРезультатом = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		СведенияПоОтправке.Сообщение,
		Истина, 
		ФильтрПоТипу,
		,
		Истина);
		
	Для Каждого СтрокаРезультата Из ТаблицаСРезультатом Цикл
			
		Результат.ИмяФайла 		= СтрокаРезультата.ИмяФайла;
		Результат.АдресДвДанных = СтрокаРезультата.Адрес;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДатуРезультата(Ссылка, Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияПоОтправке.Отправка) Тогда
		Возврат;
	КонецЕсли;
	
	ОтправкаСсылка = СведенияПоОтправке.Отправка;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Отправка", 		ОтправкаСсылка);
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 	Истина);
	
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ссылка, 
		СведенияПоОтправке.ВидКонтролирующегоОргана, 
		ДополнительныеПараметры);
	
	Если ТекущееСостояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ТекущееСостояние.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
	
	Если СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота Тогда
			
		Результат.ДатаРезультата = ТекущееСостояние.ТекущийЭтапОтправки.Дата;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатусОтправки(Результат, СведенияПоОтправке, КонтекстЭДОСервер)
	
	Если СведенияПоОтправке = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СведенияПоОтправке.Отправка) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтролирующегоОргана = СведенияПоОтправке.ВидКонтролирующегоОргана;
	
	Если ВидКонтролирующегоОргана = "ФНС" 
		ИЛИ ВидКонтролирующегоОргана = "ПФР"
		ИЛИ ВидКонтролирующегоОргана = "ФСГС" Тогда 
		
		ЦиклОбмена = СведенияПоОтправке.Отправка;
		Результат.Статус = КонтекстЭДОСервер.РассчитатьСтатусЦиклаОбмена(ЦиклОбмена);
		
	ИначеЕсли ВидКонтролирующегоОргана = "ФСС" 
		ИЛИ ВидКонтролирующегоОргана = "ФСРАР"
		ИЛИ ВидКонтролирующегоОргана = "РПН"
		ИЛИ ВидКонтролирующегоОргана = "ФТС" Тогда
		
		Отправка = СведенияПоОтправке.Отправка;
		
		Результат.Статус = Отправка.СтатусОтправки;
		
	КонецЕсли;
	
	
КонецПроцедуры

Функция ШаблонОбщихСведенийОтправке()
	
	Параметры = Новый Структура();
	// Дата начала документооборота.
	Параметры.Вставить("ДатаОтправки", 				Дата(1,1,1));
	// Дата полного завершения документооборота.
	Параметры.Вставить("ДатаЗавершения", 			Дата(1,1,1));
	Параметры.Вставить("ВидКонтролирующегоОргана", 	Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка());
	Параметры.Вставить("КодКонтролирующегоОргана", 	"");
	// Идентификатор цикла обмена, если есть цикл обмена, 
	// или ИдентификаторОтправкиНаСервере соответствующей отправки, если нет цикла обмена.
	Параметры.Вставить("ИдентификаторОтправки", 	"");
	
	Возврат Параметры;
	
КонецФункции

Функция ШаблонПодробныхСведенийПоОтправкам()
	
	Параметры = Новый Структура();
	// Имя отправленного файла отчета или уведомления.
	// Возвращается только для ФНС, ПФР, Росстат.
	Параметры.Вставить("ИмяФайла", 			"");
	// Адрес временного хранилища с двоичными данными отправленного файла.
	// Возвращается только для ФНС, ПФР, Росстат.
	Параметры.Вставить("АдресДвДанных", 	"");
	// Дата сдачи или отказа.
	Параметры.Вставить("ДатаРезультата", 	Дата(1,1,1));
	// Текущее состояние отправки, тип - Перечисления.СтатусыОтправки
	Параметры.Вставить("Статус", 			Перечисления.СтатусыОтправки.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

Процедура ДополнитьОбщимиСведениями(Результат, СведенияПоОтправке, Знач ДополнительныеПараметры)
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияПоОтправке <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СведенияПоОтправке);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДополнительныеПараметры, Ложь);
	
КонецПроцедуры 

// Описание см. в функции ТекущееСостояниеОтправки в модуле объекта обработки ДокументооборотСКонтролирующимиОрганами
Функция ТекущееСостояниеОтправки(Знач Ссылка, Знач КонтролирующийОрган = "ФНС", Отправка = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПолучатьДаты", 			Истина);
	ДополнительныеПараметры.Вставить("ПолучатьОшибкиОтправки", 	Истина);
	
	Если ЗначениеЗаполнено(Отправка) Тогда
		ДополнительныеПараметры.Вставить("Отправка", Отправка);
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Ссылка, КонтролирующийОрган, ДополнительныеПараметры);
	
	Возврат СостояниеОтправки;

КонецФункции

Функция ПолучитьФайлы1САрхиваПоОтправке(Отчет, Орган)
	
	Результат = ШаблонРезультатаФайлыОтправкиОтчета();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ПоследняяОтправка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчета(Орган, Отчет);
	Если НЕ ЗначениеЗаполнено(ПоследняяОтправка) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось найти отправку объекта';
										|en = 'Не удалось найти отправку объекта'");
		Возврат Результат;
	КонецЕсли;
		
	Если ТипЗнч(ПоследняяОтправка) = Тип("СправочникСсылка.ОтправкиФТС") Тогда
		
		ВАрхиве = ОбъектВАрхиве(ПоследняяОтправка, "Подпись");
		Если ВАрхиве Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Данные не обнаружены в базе (были заархивированы, подробнее: https://its.1c.ru/db/elreps/content/59/hdoc)");
			Возврат Результат;
		КонецЕсли;
		
		Результат.ИмяФайлаОтчета = ПоследняяОтправка.ИмяФайлаВыгрузки;
		Результат.АдресФайлаОтчета = ПоместитьВоВременноеХранилище(ПоследняяОтправка.Подпись.Получить(), Новый УникальныйИдентификатор);
		
	Иначе
		
		ВАрхиве = ОбъектВАрхиве(ПоследняяОтправка, "ЗашифрованныйПакет");
		Если ВАрхиве Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Данные не обнаружены в базе (были заархивированы, подробнее: https://its.1c.ru/db/elreps/content/59/hdoc)");
			Возврат Результат;
		КонецЕсли;
		
		Результат.ИмяФайлаОтчета = ПоследняяОтправка.ИмяФайлаПакета;
		Результат.АдресФайлаОтчета = ПоместитьВоВременноеХранилище(ПоследняяОтправка.ЗашифрованныйПакет.Получить(), Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектВАрхиве(Знач ОбъектОтправки, Знач ИмяФайла)
	
	КонтекстМодуля = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстМодуля.ОбъектВАрхиве(ОбъектОтправки, ИмяФайла);
	
КонецФункции

Функция ПолучитьФайлы1САрхиваПоЦиклуОбмена(Отчет, Орган)
	
	Результат = ШаблонРезультатаФайлыОтправкиОтчета();
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(Отчет);
	Если ЦиклОбмена = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось найти отправку объекта';
										|en = 'Не удалось найти отправку объекта'");
		Возврат Результат;
	КонецЕсли;

	Настройки = Новый Структура("ПечататьДокумент", Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ДополнитьНастройкиПечати(Настройки);
	
	Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда 
		ТаблицаЗапроса = КонтекстЭДОСервер.ПолучитьТаблицуФайловЦиклаОбмена534(ЦиклОбмена, Настройки);
	Иначе
		ТаблицаЗапроса = КонтекстЭДОСервер.ПолучитьТаблицуФайловЦиклаОбмена(ЦиклОбмена, Настройки);
	КонецЕсли;
	
	Если ТаблицаЗапроса = Неопределено Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось найти отправку объекта';
										|en = 'Не удалось найти отправку объекта'");
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаЗапроса.Колонки.Добавить("Файл");
	ТаблицаЗапроса.Колонки.Добавить("ЦиклОбмена");
	
	Для каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаТаблицыЗапроса.ВАрхиве Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицыЗапроса.Файл = ДвоичныеДанныеФайла(СтрокаТаблицыЗапроса);
		СтрокаТаблицыЗапроса.ЦиклОбмена = СтрокаТаблицыЗапроса.ТранспортноеСообщение.ЦиклОбмена;
		
	КонецЦикла;
	
	Файлы = ПолучитьЭЦП(Результат, ТаблицаЗапроса);
	
	Возврат Файлы;
	
КонецФункции

Функция ДвоичныеДанныеФайла(СтрокаТаблицыЗапроса)
	
	ДвоичныеДанныеФайла = СтрокаТаблицыЗапроса.Данные.Получить();
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		ТаблицаФайлов = ОбщегоНазначенияЭДКО.ПрикрепленныеФайлыКОбъектуИзСправочника(
			СтрокаТаблицыЗапроса.ТранспортноеСообщение,
			"ТранспортноеСообщениеПрисоединенныеФайлы",
			,
			"ВладелецФайла, ИсходноеИмяФайла");
			
		Для каждого СтрокаТаблицы Из ТаблицаФайлов Цикл
			СтрокаТаблицы.ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицы.ИсходноеИмяФайла);
		КонецЦикла;
		
		ИсходноеИмяФайла = ВРЕГ(СтрокаТаблицыЗапроса.ИмяФайла);
		
		ПараметрыОтбора = Новый Структура("ВладелецФайла, ИсходноеИмяФайла",
			СтрокаТаблицыЗапроса.ТранспортноеСообщение, ИсходноеИмяФайла);
			
		СтрокиТаблицы = ТаблицаФайлов.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокиТаблицы[0].Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

Функция ПолучитьЭЦП(Результат, Файлы)
	
	ИсходныйФайл = Файлы[0];
	
	Результат.ИмяФайлаОтчета   = ИсходныйФайл.ИмяФайла;
	Результат.АдресФайлаОтчета = ПоместитьВоВременноеХранилище(ИсходныйФайл.Файл, Новый УникальныйИдентификатор);
	
	// инициализируем таблицу возможных подписей и их свойств
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КартаДокументовИПодписей = КонтекстЭДОСервер.ИнициализироватьКартуДокументовИПодписей();
	
	// находим строку, соответствующую типу подписанного файла, во вспомогательной таблице
	СтрОпределениеТипа = КартаДокументовИПодписей.Найти(ИсходныйФайл.ИдТипа, "ИдТипа");
	Если СтрОпределениеТипа = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// определяем подписи сначала абонента, а затем сторонней организации
	Если Файлы.НайтиСтроки(Новый Структура("ИмяПодписанногоФайла", "")).Количество() <> Файлы.Количество() Тогда 
		ПодписиАбонентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа, ИмяПодписанногоФайла", СтрОпределениеТипа.ИдПодписиНалогоплательщика, ИсходныйФайл.ИмяФайла));
		ПодписиКонтрагентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа, ИмяПодписанногоФайла", СтрОпределениеТипа.ИдПодписиКонтрагента, ИсходныйФайл.ИмяФайла));
		Если ПодписиКонтрагентаМассив.Количество() = 0 Тогда
			ПодписиКонтрагентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиКонтрагента));
		КонецЕсли;
	Иначе
		
		ПодписиАбонентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиНалогоплательщика));
		Если ПодписиАбонентаМассив.Количество() = 0 И ЗначениеЗаполнено(СтрОпределениеТипа.ИдПодписиНалогоплательщика2) Тогда
			ПодписиАбонентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиНалогоплательщика2));
		КонецЕсли;
		
		ПодписиКонтрагентаМассив = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиКонтрагента));
		
	КонецЕсли;
	
	Для каждого ПодписьАбонентаМассив Из ПодписиАбонентаМассив Цикл
		
		Результат.ПодписьОрганизации.ИмяФайла   = ПодписьАбонентаМассив.ИмяФайла;
		Результат.ПодписьОрганизации.АдресФайла = ПоместитьВоВременноеХранилище(ПодписьАбонентаМассив.Файл, Новый УникальныйИдентификатор);
		
		Данные = ДанныеПодписи(ПодписьАбонентаМассив.Файл);
		ЗаполнитьЗначенияСвойств(Результат.ПодписьОрганизации, Данные);
		
	КонецЦикла;
	
	Для каждого ПодписьКонтрагентаМассив Из ПодписиКонтрагентаМассив Цикл
		
		Результат.ПодписьОргана.ИмяФайла   = ПодписьКонтрагентаМассив.ИмяФайла;
		Результат.ПодписьОргана.АдресФайла = ПоместитьВоВременноеХранилище(ПодписьКонтрагентаМассив.Файл, Новый УникальныйИдентификатор);

		Данные = ДанныеПодписи(ПодписьКонтрагентаМассив.Файл);
		
		Данные = ДанныеПодписи(ПодписьКонтрагентаМассив.Файл);
		ЗаполнитьЗначенияСвойств(Результат.ПодписьОргана, Данные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПодписи(ДвДанныеПодписи) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВремяПодписания", Неопределено);
	Результат.Вставить("ПодписантФИО", Неопределено);
	Результат.Вставить("ПодписантДолжность", Неопределено);
	
	Попытка
		СвойстваПодписи = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваКриптосообщения(ДвДанныеПодписи);
	Исключение
		СвойстваПодписи = Неопределено;
	КонецПопытки;
	
	Если СвойстваПодписи = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваПодписи.Свойство("Подписанты") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Подписант Из СвойстваПодписи.Подписанты Цикл
		
		Если НЕ Подписант.Сертификат.Свойство("Сертификат") Тогда
			Продолжить;
		КонецЕсли;
		
		ДвДанныеСертификат = Подписант.Сертификат.Сертификат;
		Сертификат = Новый СертификатКриптографии(ДвДанныеСертификат);
		
		Если Подписант.Свойство("ПодписанныеАтрибуты") И Подписант.ПодписанныеАтрибуты.Свойство("ВремяПодписания") Тогда
			
			ВремяПодписания = Подписант.ПодписанныеАтрибуты.ВремяПодписания;
			Результат.ВремяПодписания = МестноеВремя(ВремяПодписания);
		
		КонецЕсли;
		
		Владелец = ДокументооборотСКОКлиентСервер.ВладелецСертификат(Сертификат);
		Результат.ПодписантФИО = ДокументооборотСКОКлиентСервер.ФИОИзСертификата(Владелец);
		Результат.ПодписантДолжность = ДокументооборотСКОКлиентСервер.ДолжностьИзСертификата(Владелец);
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

Функция ШаблонРезультатаФайлыОтправкиОтчета()
	
	Результат = Новый Структура();
	Результат.Вставить("ОписаниеОшибки", "");
	
	Результат.Вставить("ИмяФайлаОтчета",   "");
	Результат.Вставить("АдресФайлаОтчета", "");
	
	Результат.Вставить("ПодписьОрганизации", ШаблонДанныхПодписи());
	Результат.Вставить("ПодписьОргана",      ШаблонДанныхПодписи());
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонДанныхПодписи()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайла", Неопределено);
	Результат.Вставить("АдресФайла", Неопределено);
	Результат.Вставить("ВремяПодписания", Неопределено);
	Результат.Вставить("ПодписантФИО", Неопределено);
	Результат.Вставить("ПодписантДолжность", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти