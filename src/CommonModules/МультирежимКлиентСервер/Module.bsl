
#Область СлужебныеПроцедурыИФункции

Функция ГосОрганыДляСравнения(Строка) Экспорт
	
	Органы = Новый Массив;
	Если Строка.СдаватьВФНС Тогда
		Органы.Добавить("ФНС");
	КонецЕсли;
	
	Если Строка.СдаватьВРосстат Тогда
		Органы.Добавить("ФСГС");
	КонецЕсли;
	
	Если Строка.СдаватьВПФР ИЛИ Строка.СдаватьВФСС Тогда
		Органы.Добавить("СФР");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		Органы.Добавить("ФСРАР");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаПодключениеРПН Тогда
		Органы.Добавить("РПН");
	КонецЕсли;
	
	Если Строка.ПодатьЗаявкуНаПодключениеФТС Тогда
		Органы.Добавить("ФТС");
	КонецЕсли;
	
	Если Строка.СдаватьВЦБ Тогда
		Органы.Добавить("Банк России");
	КонецЕсли;
	
	Результат = СтрСоединить(Органы, ", ");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоГосОрганыУчетнойЗаписи(Форма, ВключаяОднопользовательский = Истина) Экспорт
	
	СталАдмином = БылПользователемСталАдмином(Форма, Форма.ВладелецЭЦП);
	
	Возврат 
		Форма.ЭтоМультиРежим И Форма.ВладелецЭЦПЭтоАдмин И НЕ СталАдмином 
		ИЛИ ВключаяОднопользовательский И НЕ Форма.ЭтоМультиРежим
		ИЛИ ЭтоПодключениеМультирежима(Форма)
		ИЛИ ЭтоСаморазрегистрацияАдмина(Форма)
		ИЛИ ТекущийПользовательБылАдминомСталПользователем(Форма);
	
КонецФункции
	
Функция ПредставлениеОргановПоМассивуНаправление(Органы) Экспорт
	
	Если ТипЗнч(Органы) = Тип("Строка") Тогда
		ПредставлениеОрганов = Органы;
	Иначе
		ПредставлениеОрганов = СтрСоединить(Органы, ", ");
	КонецЕсли;
	
	ПозицияПоследнейЗапятой = СтрНайти(ПредставлениеОрганов, ",", НаправлениеПоиска.СКонца);
	
	ЛеваяЧасть  = СокрЛП(Лев(ПредставлениеОрганов, ПозицияПоследнейЗапятой - 1));
	ПраваяЧасть = СокрЛП(Сред(ПредставлениеОрганов, ПозицияПоследнейЗапятой + 1));
	
	// Добавляем "и" перед последним словом
	Если ЛеваяЧасть = "" Тогда
		ПредставлениеОрганов = ПраваяЧасть;
	Иначе
		ПредставлениеОрганов = ЛеваяЧасть + " и " + ПраваяЧасть;
	КонецЕсли;

	Возврат ПредставлениеОрганов;
	
КонецФункции

Функция ВладелецПомеченВТаблице(Форма) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ФизическоеЛицо", Форма.ВладелецЭЦП);
	Отбор.Вставить("Пометка", Истина);
	
	НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Функция ПредставлениеПользователя(Строка) Экспорт
	
	Если Строка = Неопределено Тогда
		
		Возврат "";
		
	ИначеЕсли ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
		
		Результат = НСтр("ru = '%1 (%2)';
						|en = '%1 (%2)'");
		Результат = СтрШаблон(Результат, Строка.Пользователь, Строка.ФизическоеЛицо);
		Возврат Результат;
		
	Иначе
		
		Возврат Строка(Строка.Пользователь);
		
	КонецЕсли;
	
КонецФункции

Функция РольПользователя(Строка) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат "";
	ИначеЕсли НЕ Строка.Пометка Тогда
		Возврат "";
	Иначе
		Возврат ПредставлениеРоли(Строка.ЭтоАдмин);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеРоли(ЭтоАдмин) Экспорт
	
	Если ЭтоАдмин Тогда
		Возврат НСтр("ru = 'Администратор';
					|en = 'Администратор'");
	Иначе
		Возврат НСтр("ru = 'Пользователь';
					|en = 'Пользователь'");
	КонецЕсли;
	
КонецФункции

Функция СтрокаТаблицыПользователей(Источник, Сотрудник, ВызыватьИсключение = Ложь, ЭтоВладелецЭЦП = Ложь) Экспорт

	Отбор = Новый Структура();
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Отбор.Вставить("ФизическоеЛицо", Сотрудник);
	Иначе
		Отбор.Вставить("Пользователь", Сотрудник);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПользователей(Источник).НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Если ВызыватьИсключение Тогда
			
			ВызватьИсключениеЕслиНеУстановленоСоответствиеПользователяИФизЛица(Сотрудник, ЭтоВладелецЭЦП);
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		
		Строка = НайденныеСтроки[0];
		
	Иначе
		
		ЕстьПомеченая = Ложь;
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Пометка Тогда
				Строка = НайденнаяСтрока;
				ЕстьПомеченая = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПомеченая Тогда
			Строка = НайденныеСтроки[0];
			
			Если ВызыватьИсключение Тогда
			
				Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ТекстОшибки = НСтр("ru = 'Физ. лицу %1 сопоставлено более одного пользователя в таблице пользователей. Исправьте и повторите операцию';
										|en = 'Физ. лицу %1 сопоставлено более одного пользователя в таблице пользователей. Исправьте и повторите операцию'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Пользователю %1 сопоставлено более одного физ. лица в таблице пользователей. Исправьте и повторите операцию';
										|en = 'Пользователю %1 сопоставлено более одного физ. лица в таблице пользователей. Исправьте и повторите операцию'");
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(ТекстОшибки, Сотрудник);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция ЭтоРазрегистрация(Источник, Строка) Экспорт
	
	Результат = 
		НЕ ЭтоОтключениеМультирежима(Источник)
		И НЕ ЭтоПодключениеМультирежима(Источник)
		И Строка <> Неопределено
		И НЕ Строка.Пометка 
		И Строка.ПометкаИсходная;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоСаморазрегистрацияАдмина(Форма) Экспорт
	
	Строка = СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
	
	Результат = 
		Строка <> Неопределено
		И ЭтоРазрегистрация(Форма, Строка)
		И ЭтоЛичныеНастройки(Форма, Строка);
	
	Возврат Результат;
	
КонецФункции

Функция ВладелецЭЦПУказанКорректно(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	МассивРезультов = Новый Массив;
	
	Если Форма.ЭтоМультиРежим Тогда
		
		Если ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		
			ВладелецЭЦПЕстьВТаблице = Ложь;
			Строка = СтрокаТаблицыПользователей(Форма.ТаблицаПользователей, Форма.ВладелецЭЦП);
			Пользователь = МультирежимВызовСервера.ПользовательПоФизЛицуИзСправочникаПользователи(Форма.ВладелецЭЦП);
			
			Если Строка = Неопределено 
				И Пользователь = Неопределено Тогда
				
				ВызватьИсключениеЕслиНеНайденПользователь(Форма.ВладелецЭЦП, Истина);
				
			ИначеЕсли Строка <> Неопределено 
				И Строка.Пометка 
				ИЛИ ЭтоРазрегистрация(Форма, Строка) Тогда
				
				ВладелецЭЦПЕстьВТаблице = Истина;
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Владелец сертификата %1 должен быть добавлен в список пользователей. Поставьте в таблице флаг напротив владельца сертификата %1 или выберите другого владельца.';
									|en = 'Владелец сертификата %1 должен быть добавлен в список пользователей. Поставьте в таблице флаг напротив владельца сертификата %1 или выберите другого владельца.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, Форма.ВладелецЭЦП);
				
				РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
				РезультатПроверки.ТекстОшибки 	= ТекстОшибки;
				РезультатПроверки.Реквизит 		= "УказательПользователи";
				
				МассивРезультов.Добавить(РезультатПроверки);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Форма.ВладелецЭЦПФамилия) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не удалось найти в справочнике ""Физические лица"" владельца сертификата %1. Создайте в программе физ. лицо %1, либо проверьте корректность его ФИО, ИНН, СНИЛС, если он уже создан. После этого создайте заявление заново.';
								|en = 'Не удалось найти в справочнике ""Физические лица"" владельца сертификата %1. Создайте в программе физ. лицо %1, либо проверьте корректность его ФИО, ИНН, СНИЛС, если он уже создан. После этого создайте заявление заново.'");
			
			ФИО = СокрЛП(Форма.ВладелецЭЦПФамилия + " " + Форма.ВладелецЭЦПИмя + " " + Форма.ВладелецЭЦПОтчество);
			ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
			
			РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
			РезультатПроверки.ТекстОшибки 	= ТекстОшибки;
			РезультатПроверки.Реквизит 		= "УказательПользователи";
			
			МассивРезультов.Добавить(РезультатПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из МассивРезультов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат МассивРезультов;
	
КонецФункции

Процедура ВызватьИсключениеЕслиНеУстановленоСоответствиеПользователяИФизЛица(Сотрудник, ЭтоВладелецЭЦП = Ложь) Экспорт
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВызватьИсключениеЕслиНеНайденПользователь(Сотрудник, ЭтоВладелецЭЦП);
	Иначе
		ВызватьИсключениеЕслиНеНайденоФизЛицо(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьИсключениеЕслиНеНайденПользователь(ФизЛицо, ЭтоВладелецЭЦП = Ложь) Экспорт
	
	Если ЭтоВладелецЭЦП Тогда
		Параметр2 = НСтр("ru = 'владельцу эл. подписи';
						|en = 'владельцу эл. подписи'");
		Параметр3 = НСтр("ru = 'владелец эл. подписи';
						|en = 'владелец эл. подписи'");
		
	Иначе
	    Параметр2 = НСтр("ru = 'физ. лицу';
						|en = 'физ. лицу'");
		Параметр3 = НСтр("ru = 'сотрудник';
						|en = 'сотрудник'");
	КонецЕсли;
	
	СНИЛС = МультирежимВызовСервера.СНИЛСФизЛица(ФизЛицо);
	
	Текст = НСтр("ru = 'В справочнике ""Пользователи"" не удалось найти пользователя программы, который соответствует %2 %1.
                  |
                  |Варианты исправления:
                  |
                  |1. В справочнике ""Пользователи"" найдите пользователя, под которым заходит в программу %3 %1, и заполните поле ""Физическое лицо"" в карточке этого пользователя.
                  |
                  |2. Проверьте, что в справочнике ""Физические лица"" нет физ. лиц с таким же СНИЛС, как и у физ. лица %1 (%4).
                  |
                  |После исправления повторите операцию.';
                  |en = 'В справочнике ""Пользователи"" не удалось найти пользователя программы, который соответствует %2 %1.
                  |
                  |Варианты исправления:
                  |
                  |1. В справочнике ""Пользователи"" найдите пользователя, под которым заходит в программу %3 %1, и заполните поле ""Физическое лицо"" в карточке этого пользователя.
                  |
                  |2. Проверьте, что в справочнике ""Физические лица"" нет физ. лиц с таким же СНИЛС, как и у физ. лица %1 (%4).
                  |
                  |После исправления повторите операцию.'");
	
	
	Текст = СтрШаблон(Текст, ФизЛицо, Параметр2, Параметр3, СНИЛС);
	
	ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Текст);
	ВызватьИсключение Текст;
			
КонецПроцедуры

Процедура ВызватьИсключениеЕслиНеНайденоФизЛицо(Пользователь) Экспорт
	
	Текст = НСтр("ru = 'Не удалось найти физ. лицо, которое соответствует пользователю %1.
                          |
                          |В справочнике ""Пользователи"" зайдите в карточку пользователя %1, и заполните поле ""Физическое лицо"".
                          |
                          |После исправления повторите операцию.';
                          |en = 'Не удалось найти физ. лицо, которое соответствует пользователю %1.
                          |
                          |В справочнике ""Пользователи"" зайдите в карточку пользователя %1, и заполните поле ""Физическое лицо"".
                          |
                          |После исправления повторите операцию.'");
	
	Текст = СтрШаблон(Текст, Пользователь);
	
	ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Текст);
	ВызватьИсключение Текст;
			
КонецПроцедуры

Функция ТаблицаПользователей(Источник) Экспорт

	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		Результат = Источник.ПользователиУчетнойЗаписи.Выгрузить();
	ИначеЕсли ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения")
		ИЛИ ТипЗнч(Источник) = Тип("Структура") И Источник.Свойство("ТаблицаПользователей") Тогда
		Результат = Источник.ТаблицаПользователей;
	Иначе
		Результат = Источник;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоШифровальщиков(ТаблицаПользователей) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("ЭтоШифровальщик", Истина);
	
	НайденныеСтроки = ТаблицаПользователей.НайтиСтроки(Отбор);
	Выбрано = НайденныеСтроки.Количество();
	
	Возврат Выбрано;
		
КонецФункции

Функция ПодключатьФНС(ТаблицаПользователей) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("СдаватьВФНС", Истина);
	
	НайденныеСтроки = ТаблицаПользователей.НайтиСтроки(Отбор);
	ЕстьФНС = НайденныеСтроки.Количество();
	
	Возврат ЕстьФНС;
		
КонецФункции

Функция ПроверитьШифровальщиковФНС(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина, Реквизит = Неопределено, Поле = Неопределено) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Реквизит = Реквизит;
	РезультатПроверки.Поле = Поле;
	
	ЕстьТаблица = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаПользователей");
	
	Если НЕ ЕстьТаблица Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТаблицаПользователей = Форма.ТаблицаПользователей;
	
	ЕстьФНС = ПодключатьФНС(ТаблицаПользователей);
	Если НЕ ЕстьФНС Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Выбрано = КоличествоШифровальщиков(ТаблицаПользователей);
	Если Выбрано > 3 Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Получателей сообщений ФНС может быть максимум 3';
											|en = 'Получателей сообщений ФНС может быть максимум 3'");
	ИначеЕсли Выбрано = 0 Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Выберите получателей сообщений ФНС (максимум 3)';
											|en = 'Выберите получателей сообщений ФНС (максимум 3)'");
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;

КонецФункции

Функция ПользователиФТС(Форма) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ПодатьЗаявкуНаПодключениеФТС", Истина);
	
	НайденныеСтроки = ТаблицаПользователей(Форма).НайтиСтроки(Отбор);
	
	НайденныеПользователиМассив = Новый Массив;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденныеПользователиМассив.Добавить(НайденнаяСтрока.Пользователь);
	КонецЦикла;
	
	Возврат НайденныеПользователиМассив;

КонецФункции

Функция ПользователиФТССтрокой(Форма) Экспорт
	
	ВсеПользователиФТС = ПользователиФТС(Форма);
	
	ВсеПользователиФТССтрокой = Новый Массив;
	Для каждого Пользователь Из ВсеПользователиФТС Цикл
		ВсеПользователиФТССтрокой.Добавить(Строка(Пользователь));
	КонецЦикла;
	
	ВсеПользователиФТССтрокой = СтрСоединить(ВсеПользователиФТССтрокой, ", ");
		
	Возврат ВсеПользователиФТССтрокой;

КонецФункции

Функция КоличествоПользователейФТС(Форма) Экспорт
	
	Выбрано = ПользователиФТС(Форма).Количество();
	
	Возврат Выбрано;

КонецФункции

Функция ЭтоПроизвольныйНаборГосОргановПользователя(Форма) Экспорт
	
	Результат = 
		ЭтоНаборГосОргановПользователя(Форма)
		И НЕ Форма.ЕстьДоступКоВсемГосОрганам;
		
	Возврат Результат;
	
КонецФункции

Функция ПользователиСДоступомКоВсемОрганам(ТаблицаПользователей) Экспорт
	
	ИмеющиеДоступ = ПользователиСДоступомКОргану(
		ТаблицаПользователей, 
		"ЕстьДоступКоВсемГосОрганам", 
		Истина);
	
	Возврат ИмеющиеДоступ;
	
КонецФункции

Функция ПользователиСДоступомКОргану(ТаблицаПользователей, ИмяРеквизита, Значение) Экспорт
	
	ИмеющиеДоступ = Новый Массив;
	Для каждого Строка Из ТаблицаПользователей Цикл
		
		Добавить = 
			Строка.Пометка = Истина 
			И Строка[ИмяРеквизита] = Значение;
		
		Если Добавить Тогда
			
			ИмеющиеДоступ.Добавить(Строка.Пользователь);
			
		КонецЕсли;

	КонецЦикла; 
	
	Возврат ИмеющиеДоступ;
	
КонецФункции

Функция ИзмениласьРоль(Строка) Экспорт
	
	Изменилась = РольПользователя(Строка) <> Строка.РольПредставлениеИсходный;
	
	Возврат Изменилась;
	
КонецФункции

Функция БылПользователемСталАдмином(Форма, Сотрудник) Экспорт
	
	СталАдмином = ИзменилсяЭтоАдминНаНовоеЗначение(
		Форма,
		Сотрудник,
		Истина);
	
	Возврат СталАдмином;
	
КонецФункции

Функция БылАдминомСталПользователем(Форма, Сотрудник) Экспорт
	
	СталПользователем = ИзменилсяЭтоАдминНаНовоеЗначение(
		Форма, 
		Сотрудник, 
		Ложь);
	
	Возврат СталПользователем;
	
КонецФункции

Функция ИзменилсяЭтоАдминНаНовоеЗначение(Форма, Сотрудник, НовоеЗначениеЭтоАдмин) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = СтрокаТаблицыПользователей(Форма, Сотрудник);
	Если Строка = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СталАдмином = 
		ИзмениласьРоль(Строка) 
		И Строка.ЭтоАдмин = НовоеЗначениеЭтоАдмин 
		И НЕ ЭтоПодключениеМультирежима(Форма);
	
	Возврат СталАдмином;
	
КонецФункции

Функция ТекущийПользовательБылАдминомСталПользователем(Форма) Экспорт
	
	Возврат БылАдминомСталПользователем(Форма, Форма.ТекущийПользователь);
	
КонецФункции

Функция ЭтоПодключениеМультирежима(Форма) Экспорт
	
	Возврат Форма.ЭтоМультиРежим И НЕ Форма.ЭтоМультиРежимИсходный;
	
КонецФункции

Функция ЭтоОтключениеМультирежима(Форма) Экспорт
	
	Возврат НЕ Форма.ЭтоМультиРежим И Форма.ЭтоМультиРежимИсходный;
	
КонецФункции

Функция ЭтоНаборГосОргановПользователя(Форма) Экспорт
	
	Результат = Форма.ЭтоМультиРежим И НЕ Форма.ЭтоГосОрганыУчетнойЗаписи;
	Возврат Результат;
	
КонецФункции

Функция ПоказыватьЛичныеНастройки(Форма) Экспорт
	
	СталАдмином = БылПользователемСталАдмином(Форма, Форма.ВладелецЭЦП);
	
	Возврат Форма.ЭтоМультиРежим 
		И (НЕ Форма.ВладелецЭЦПЭтоАдмин ИЛИ СталАдмином)
		И НЕ ЭтоПодключениеМультирежима(Форма)
		И НЕ ЭтоСаморазрегистрацияАдмина(Форма)
		И НЕ ТекущийПользовательБылАдминомСталПользователем(Форма);
	
КонецФункции
	
Функция ЭтоЛичныеНастройки(Форма, Строка) Экспорт
	
	Возврат Строка.ФизическоеЛицо = Форма.ВладелецЭЦП;
	
КонецФункции	

Функция ЭтоДобавлениеПользователяПоСтроке(Форма, Строка) Экспорт
	
	ЭтоПодключениеМультирежима = ЭтоПодключениеМультирежима(Форма);

	ЭтоДобавление = 
		НЕ Строка.ПометкаИсходная И Строка.Пометка 
		ИЛИ ЭтоПодключениеМультирежима;
		
	Возврат ЭтоДобавление;
		
КонецФункции

Функция ЭтоДобавлениеПользователяПоСотруднику(Форма, Сотрудник) Экспорт
	
	Строка = СтрокаТаблицыПользователей(Форма, Сотрудник);
	ЭтоДобавление = ЭтоДобавлениеПользователяПоСтроке(Форма, Строка);
		
	Возврат ЭтоДобавление;
		
КонецФункции

Функция ПоказыватьСообщениеПроОтсутствиеПрав(Форма) Экспорт
	
	Видимость = 
		Форма.ЭтоМультиРежим 
		И Форма.ВладелецЭЦПРасширилСебеПрава
		И НЕ Форма.ЗапретитьИзменение
		И НЕ ЭтоПодключениеМультирежима(Форма)
		И НЕ ЭтоРуководительМеняетСебеПрава(Форма);
		
	Возврат Видимость;
		
КонецФункции

Процедура РасширитьПрава(Форма) Экспорт
	
	ТекущаяСтрока = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ТекущийПользователь);
	ТекущаяСтрока.ЭтоАдмин = Истина;

	Форма.ВладелецЭЦПЭтоАдмин = Истина;
	Форма.ВладелецЭЦПРасширилСебеПрава = Истина;
	
КонецПроцедуры

Функция РуководительМожетМенятьПраваБезБумажки() Экспорт
	
	Возврат Истина;
		
КонецФункции

Функция ЭтоРуководительМеняетСебеПрава(Форма) Экспорт
	
	Возврат РуководительМожетМенятьПраваБезБумажки() 
		И ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
		
КонецФункции

Процедура ИзменитьОформлениеПредупрежденияПроОтсутствиеПрав(Форма) Экспорт

	Элементы = Форма.Элементы;
	
	Видимость = ПоказыватьСообщениеПроОтсутствиеПрав(Форма);
		
	Элементы.ПредупреждениеПроОтсутствиеПрав.Видимость = Видимость;
	
	Если НЕ Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоДобавление = ЭтоДобавлениеПользователяПоСотруднику(Форма, Форма.ВладелецЭЦП);
	
	Если ЭтоДобавление Тогда
		Текст1 = НСтр("ru = 'Поскольку администратор не предоставил Вам права доступа, то для подключения Вам понадобится приложить скан заявления на предоставление прав с печатью организации. ';
						|en = 'Поскольку администратор не предоставил Вам права доступа, то для подключения Вам понадобится приложить скан заявления на предоставление прав с печатью организации. '");
	Иначе
		Текст1 = НСтр("ru = 'Поскольку администратор не предоставил Вам запрошенных прав доступа, то для изменения прав Вам понадобится приложить скан заявления на предоставление прав с печатью организации. ';
						|en = 'Поскольку администратор не предоставил Вам запрошенных прав доступа, то для изменения прав Вам понадобится приложить скан заявления на предоставление прав с печатью организации. '");
	КонецЕсли;	
	
	Админы  = ПодключенныеАдминистраторыПоТаблице(Форма, Ложь);
	Админов = Админы.Количество();
	
	Если Админов = 0 Тогда
		Текст2 = НСтр("ru = 'Либо обратитесь к администратору.';
						|en = 'Либо обратитесь к администратору.'");
	ИначеЕсли Админов = 1 Тогда
		Текст2 = НСтр("ru = 'Либо обратитесь к администратору %1.';
						|en = 'Либо обратитесь к администратору %1.'");
		Текст2 = СтрШаблон(Текст2, Админы[0]);
	Иначе
		Текст2 = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Либо обратитесь к ';
				|en = 'Либо обратитесь к '"),
			Новый ФорматированнаяСтрока(НСтр("ru = 'администратору';
											|en = 'администратору'"),,,,"администраторы"),
			НСтр("ru = '.';
				|en = '.'"));
	КонецЕсли;
		
	Текст = Новый ФорматированнаяСтрока(Текст1, Текст2);
	
	Элементы.ПредупреждениеПроОтсутствиеПрав.Заголовок = Текст;
	
КонецПроцедуры

Функция ПодключенныеАдминистраторыПоТаблице(Форма, ИгнорироватьИзменениеРоли = Истина) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("ЭтоАдмин", Истина);
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ЭтоПотенциальныйПользователь", Ложь);
	
	НайденныеСтроки = ТаблицаПользователей(Форма).НайтиСтроки(Отбор);
	
	Админы = Новый Массив;
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Добавить = 
			(ИгнорироватьИзменениеРоли ИЛИ НЕ ИзмениласьРоль(Строка))
			И ЗначениеЗаполнено(Строка.ФизическоеЛицо);
			
		Если Добавить Тогда 
			Админы.Добавить(Строка.ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Админы;

КонецФункции

Функция ЭтоЕдинственныйПодключенныйАдмин(Форма) Экспорт
	
	Админы = ПодключенныеАдминистраторыПоТаблице(Форма);
	Результат = 
		Админы.Количество() = 1 
		И Админы[0] = Форма.ВладелецЭЦП 
		И Форма.ВладелецЭЦПЭтоАдмин;
	
	Возврат Результат;
	
КонецФункции

Процедура РасчитатьНаправленияУчетнойЗаписиПоТаблицеПользователей(Форма) Экспорт
	
	ПропуститьДействие = НЕ Форма.ЭтоМультиРежим;
	
	Если ПропуститьДействие Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = ФлагиНаправлений();
	Свойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства, ",", Истина, Истина);

	Для каждого Свойство Из Свойства Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить(Свойство, Истина);
		
		НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
		Форма[Свойство] = НайденныеСтроки.Количество() > 0;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ФлагиНаправлений() Экспорт
	
	Свойства = 
	"СдаватьВФНС,
	|СдаватьВПФР, 
	|СдаватьВРосстат, 
	|СдаватьВФСС,
	|СдаватьВЦБ,
	|ПодатьЗаявкуНаПодключениеРПН,
	|ПодатьЗаявкуНаПодключениеФТС,
	|ПодатьЗаявкуНаСертификатДляФСРАР";
	
	Возврат Свойства;
	
КонецФункции

Функция СтруктураНаправлений() Экспорт
	
	Результат = Новый Структура(ФлагиНаправлений());
	Для каждого Запись Из Результат Цикл
		Результат[Запись.Ключ] = Ложь;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НаправленияУчеткиИПользователейСовпадают(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	
	ЭтоВызовИзГлавнойФормы = 
		Тип(Форма) = Тип("Структура") И Форма.Свойство("ЭтоВызовИзГлавногоОкна") 
		ИЛИ Тип(Форма) = Тип("ФормаКлиентскогоПриложения") И ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаЗаявления(Форма);
	
	ПродолжитьПроверку = 
		ЭтоВызовИзГлавнойФормы
		И Форма.ВладелецЭЦПЭтоАдмин 
		И Форма.ЭтоМультиРежим
		И НЕ Форма.ВладелецЭЦПРасширилСебеПрава
		И НЕ БылПользователемСталАдмином(Форма, Форма.ВладелецЭЦП);
	
	Если НЕ ПродолжитьПроверку Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Свойства = ФлагиНаправлений();
	Свойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства, ",", Истина, Истина);

	Для каждого Свойство Из Свойства Цикл
		
		Направление = СтрЗаменить(Свойство, НСтр("ru = 'СдаватьВ';
												|en = 'СдаватьВ'"), "");
		Направление = СтрЗаменить(Направление, НСтр("ru = 'ПодатьЗаявкуНаПодключение';
													|en = 'ПодатьЗаявкуНаПодключение'"), "");
		Направление = СтрЗаменить(Направление, НСтр("ru = 'ПодатьЗаявкуНаСертификатДля';
													|en = 'ПодатьЗаявкуНаСертификатДля'"), "");
		
		Отбор = Новый Структура();
		Отбор.Вставить(Свойство, Истина);
		Отбор.Вставить("Пометка", Истина);
		
		НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
		НаправлениеЕстьУПользователей = НайденныеСтроки.Количество() > 0;
		НаправлениеЕстьУУчетки = Форма[Свойство];

		Если НаправлениеЕстьУПользователей И НЕ НаправлениеЕстьУУчетки Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Пользователям добавлено направление %1, которое не добавлено учетной записи. Добавьте направление %1 в учетную записи или удалите у всех пользователей';
												|en = 'Пользователям добавлено направление %1, которое не добавлено учетной записи. Добавьте направление %1 в учетную записи или удалите у всех пользователей'");
			РезультатПроверки.ТекстОшибки = СтрШаблон(РезультатПроверки.ТекстОшибки, Направление);
		КонецЕсли;
	
	КонецЦикла;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ВладелецЭЦПЭтоАдмин(Форма) Экспорт
	
	Возврат СотрудникЭЦПЭтоАдмин(Форма, Форма.ВладелецЭЦП);
	
КонецФункции

Функция СотрудникЭЦПЭтоАдмин(Форма, Сотрудник) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Строка = СтрокаТаблицыПользователей(Форма, Сотрудник);
	
	Если Строка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Строка.ЭтоАдмин;
	КонецЕсли;
	
КонецФункции

Функция РольПользователяПоФорме(Форма) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат "";
	КонецЕсли;
	
	Строка = СтрокаТаблицыПользователей(Форма, Форма.ТекущийПользователь);
	
	Если Строка = Неопределено Тогда
		Роль = ПредставлениеРоли(Ложь);
	Иначе
		Роль = РольПользователя(Строка);
	КонецЕсли;
	
	Возврат Роль;
	
КонецФункции

Функция ОткрытоИзЗаявления(Форма) Экспорт
	
	Возврат 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОткрытоИзЗаявления")
		И Форма.ОткрытоИзЗаявления
		ИЛИ ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаЗаявления(Форма);
			
КонецФункции

Функция ПоказыватьПолныйИнтерфейсПравПользователя(Форма, ЭтоВызовИзГлавногоОкна) Экспорт
	
	ЭтоПолныйИнтерфейс = 
		Форма.ВладелецЭЦПЭтоАдмин 
		И НЕ ЭтоВызовИзГлавногоОкна
		ИЛИ ЭтоПодключениеМультирежима(Форма)
		ИЛИ ТекущийПользовательБылАдминомСталПользователем(Форма);
		
	Возврат ЭтоПолныйИнтерфейс;
	
КонецФункции

Функция ПоказыватьПочтуДляПриглашений(Форма, Строка, ЭтоВызовИзГлавногоОкна) Экспорт
	
	ЭтоПолныйИнтерфейс = ПоказыватьПолныйИнтерфейсПравПользователя(
		Форма, 
		ЭтоВызовИзГлавногоОкна);
		
	Показывать = 
		ЭтоПолныйИнтерфейс 
		И (Строка.ЭтоПотенциальныйПользователь
		ИЛИ ЭтоПодключениеМультирежима(Форма));
		
	Возврат Показывать;

КонецФункции

Процедура ОбновитьВсеГосОрганыУчетнойЗаписи(Форма, Ключ) Экспорт
	
	Данные = Новый Структура(Форма.ВсеГосОрганыУчетнойЗаписи);
	Данные[Ключ] = Форма[Ключ];
	Форма.ВсеГосОрганыУчетнойЗаписи = Новый ФиксированнаяСтруктура(Данные);
	
КонецПроцедуры

Функция ВладелецЭЦПТипПоФизЛицу(Форма, ФизЛицо) Экспорт

	ЕстьРуководитель = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Руководитель");
	Если ЕстьРуководитель Тогда
		Руководитель = Форма.Руководитель;
	Иначе
		Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Форма.Организация);
	КонецЕсли;
	
	ЕстьГлБухгалтер = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ГлБухгалтер");
	Если ЕстьГлБухгалтер Тогда
		ГлБухгалтер = Форма.ГлБухгалтер;
	Иначе
		ГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Форма.Организация);
	КонецЕсли;
	
	Если ФизЛицо = Руководитель Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	ИначеЕсли ФизЛицо = ГлБухгалтер Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	КонецЕсли;
		
КонецФункции

Функция РеквизитыИОрганы() Экспорт
	
	//НайтиПоЗначению (FindByValue)

	Список = Новый СписокЗначений;
	
	Перечень = РеквизитыИОрганыСтрокой();
	Для каждого Запись Из Перечень Цикл
		// Добавить(<Значение>, <Представление>, <Пометка>, <Картинка>)
		Список.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов." + Запись.Значение), 
			Запись.Представление);
	КонецЦикла; 
	
	Возврат Список;

КонецФункции

Функция ОрганыСтрокойИПеречислением() Экспорт
	
	Список = Новый СписокЗначений;
	
	Перечень = РеквизитыИОрганыСтрокой();
	Для каждого Запись Из Перечень Цикл
		// Добавить(<Значение>, <Представление>, <Пометка>, <Картинка>)
		Список.Добавить(
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов." + Запись.Значение), 
			Запись.Значение);
	КонецЦикла; 
	
	Возврат Список;

КонецФункции

Функция РеквизитыИОрганыСтрокой() Экспорт
	
	//НайтиПоЗначению (FindByValue)

	Список = Новый СписокЗначений;
	
	// Добавить(<Значение>, <Представление>, <Пометка>, <Картинка>)
	Список.Добавить("ФНС", "СдаватьВФНС");
	Список.Добавить("ПФР", "СдаватьВПФР");
	Список.Добавить("ФСГС", "СдаватьВРосстат");
	Список.Добавить("ФСС", "СдаватьВФСС");
	Список.Добавить("РПН", "ПодатьЗаявкуНаПодключениеРПН");
	Список.Добавить("ФТС", "ПодатьЗаявкуНаПодключениеФТС");
	Список.Добавить("ФСРАР", "ПодатьЗаявкуНаСертификатДляФСРАР");
	Список.Добавить("ЦБ", "СдаватьВЦБ");
	
	Возврат Список;

КонецФункции

Функция РеквизитПоОргану(Направление) Экспорт

	Соответствие = РеквизитыИОрганы();
	ИмяРеквизита = Соответствие.НайтиПоЗначению(Направление).Представление;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция РеквизитПоОргануСтрокой(Направление) Экспорт

	Соответствие = РеквизитыИОрганыСтрокой();
	ИмяРеквизита = Соответствие.НайтиПоЗначению(Направление).Представление;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Функция ОрганСтрокойПоПеречислению(Орган) Экспорт
	
	Соответствие = ОрганыСтрокойИПеречислением();
	ОрганСтрокой = Соответствие.НайтиПоЗначению(Орган).Представление;
	
	Возврат ОрганСтрокой;
			
КонецФункции

#КонецОбласти