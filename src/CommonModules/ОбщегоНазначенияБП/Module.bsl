#Область ПрограммныйИнтерфейс

Функция ЭтоИнтерфейсИнтеграцииСБанком() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Позволяет определить заполнен ли реквизит в документе.
//
// Параметры:
//  ИмяРеквизита - Строка - Строковое имя искомого реквизита.
//  ДокументОбъект - ДокументОбъект - Объект, в котором проверяется заполненность реквизита.
//  МетаданныеДокумента - Метаданные - Объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево - Истина, если реквизит с указанным именем не заполнен в документе.
//
Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеДокумента) Экспорт

	Результат =
		ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеДокумента)
		И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);

	Возврат Результат;

КонецФункции

// Заменяет отбор, установленный пользователем в сохраненной настройке списка, на отбор, установленный программно при создании формы списка.
// Вызывается при восстановлении пользовательских настроек динамического списка
// из обработчика списка ПередЗагрузкойПользовательскихНастроекНаСервере.
//
// Параметры:
//  Список      - ДинамическийСписок - Динамический список, для которого устанавливается отбор.
//  Настройки   - ПользовательскиеНастройкиКомпоновкиДанных - Восстанавливаемые настройки списка.
//  ИмяОтбора   - Строка - Имя элемента отбора.
//
Процедура ВосстановитьОтборСписка(Список, Настройки, ИмяОтбора) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор, ИмяОтбора);
	
	Если Отборы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОтбора = Отборы[0];
	ИдентификаторНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
	
	Для каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементНастроек.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки Тогда
			ЭлементНастроек.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементНастроек.Использование  = ЭлементОтбора.Использование;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Устанавливает имя сохраняемого файла.
//
// Параметры:
//  МассивОбъектов - Массив - Массив объектов печати.
//  КоллекцияПечатныхФорм - Массив - Коллекция печатных форм.
//  ОбъектыПечати - Массив - Массив объектов печати.
//  ПараметрыВывода - Структура - Параметры вывода печатной формы.
//
Процедура ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода = Неопределено) Экспорт
	
	// В БРУ и УП2 не используется, оставлено для совместимости с БП.

КонецПроцедуры

// Позволяет получить индекс картинки состояния документа из коллекции СостоянияДокумента
// по свойствам Проведен/ПометкаУдаления/РучнаяКорректировка.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Основной реквизит формы документа.
//
// Возвращаемое значение:
//	Число - Индекс картинки.
//
Функция СостояниеДокумента(Объект) Экспорт
	
	Если Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 1;
	ИначеЕсли Объект.Проведен Тогда
		СостояниеДокумента = 0;
	Иначе
		СостояниеДокумента = 2;
	КонецЕсли;
	
	Возврат СостояниеДокумента;
	
КонецФункции

// Возвращает массив пустых ссылок указанных типов документов.
// Обрабатывает только ссылки на документы, другие виды объектов метаданных не учитывает.
//
// Параметры:
//	Типы - Массив - Массив значений типа Тип.
//
// Возвращаемое значение:
//	Массив - массив с пустыми ссылками указанных типов.
//
Функция ПустыеСсылки(Типы) Экспорт

	Результат = Новый Массив;

	Для Каждого ТекущийТип Из Типы Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекущийТип);
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
			Результат.Добавить(Документы[МетаданныеТипа.Имя].ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	Если Типы.Количество() > 1 Тогда
		// Для составных типов в качестве пустого значения может выступать Неопределено.
		Результат.Добавить(Неопределено);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Подтверждает, что переданная организация входит в список доступных для пользователя.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - проверяемая организация. Может быть пустым значением.
//  ВключатьОбособленныеПодразделения - Булево - признак добавления в список доступных обособленных подразделений.
//	ПравоНаИзменение - Булево - Истина, если список будет использоваться в алгоритмах изменения данных.
//
// Возвращаемое значение:
//   Массив      - список из всех доступных, если было передано пустое значение;
//               - список из Организация и её доступных обособленных подразделений;
//               - пустой список, если организация недоступна для пользователя.
//
Функция СписокДоступныхОрганизаций(Организация, ВключатьОбособленныеПодразделения = Ложь, ПравоНаИзменение = Ложь) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение);
	
	Если ЗначениеЗаполнено(Организация) Тогда // проверяем конкретную организацию
		
		Если ВключатьОбособленныеПодразделения
			И БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
			
			СписокОбособленныхПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(Организация);
			ОбособленныеПодразделения = СписокОбособленныхПодразделений.ВыгрузитьЗначения();
			НедоступныеОрганизации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбособленныеПодразделения, ДоступныеОрганизации);
			СписокОрганизаций = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбособленныеПодразделения, НедоступныеОрганизации);
			
		Иначе
			
			СписокОрганизаций = Новый Массив;
			
		КонецЕсли;
		
		Если ДоступныеОрганизации.Найти(Организация) <> Неопределено
		   И СписокОрганизаций.Найти(Организация) = Неопределено Тогда
			СписокОрганизаций.Вставить(0, Организация);
		КонецЕсли;
		
		ДоступныеОрганизации = СписокОрганизаций;
		
	КонецЕсли;
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

// Возвращает текущую дату сеанса на сервере.
//
// Возвращаемое значение:
//	Дата - текущая дата сеанаса на сервере.
//
Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// Возвращает значение перечисления по его имени.
// Предназначена для использования в случаях, когда значение перечисления приходит из внешних систем
// и может отсутствовать в текущей конфигурации, из-за чего прямое обращение к нему по имени небезопасно.
//
// Параметры:
//	ИмяПеречисления - Строка - Имя перечисления в метаданных.
//	ИмяЗначения - Строка - Имя значения перечисления.
//
// Возвращаемое значение:
//	ПеречислениеСсылка или Неопределено, если значение не найдено.
//
Функция НайтиЗначениеПеречисления(ИмяПеречисления, Знач ИмяЗначения) Экспорт

	МетаданныеПеречисления = Метаданные.Перечисления.Найти(ИмяПеречисления);
	Если МетаданныеПеречисления = Неопределено Тогда
		// Нет такого перечисления.
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяЗначения = ВРег(ИмяЗначения);
	
	Если ИмяЗначения = "ПУСТАЯССЫЛКА" Тогда
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
	КонецЕсли;
	
	Для каждого МетаданныеЗначения Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		Если ВРег(МетаданныеЗначения.Имя) = ИмяЗначения Тогда
			Возврат Перечисления[ИмяПеречисления][ИмяЗначения];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция МассивПустыхЗначенийРеквизита(МетаданныеРеквизита) Экспорт
	МассивПустыхЗначений = Новый Массив;
	
	МассивТипов = МетаданныеРеквизита.Тип.Типы();
	Для Каждого ТипЗначения Из МассивТипов Цикл
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначения);
		Если МетаданныеПоТипу <> Неопределено  Тогда
			МенеджерОбъекта =ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПоТипу.ПолноеИмя());
			МассивПустыхЗначений.Добавить(МенеджерОбъекта.ПустаяСсылка());
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивПустыхЗначений.Количество() > 1 Тогда
		МассивПустыхЗначений.Добавить(Неопределено);
	КонецЕсли;

	Возврат МассивПустыхЗначений;
КонецФункции

// Уничтожает временные таблицы менеджера временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно уничтожить.
//  СписокТаблиц			 - Строка, Массив			 - имена временных таблиц для уничтожения, разделенные запятыми. Если параметр не установлен - все таблицы.
//  ИсключаяТаблицы			 - Строка, Массив			 - имена временных таблиц, которые нужно оставить, разделенные запятыми.
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СписокТаблиц = Неопределено, ИсключаяТаблицы = Неопределено) Экспорт
	
	Если ИсключаяТаблицы <> Неопределено Тогда
		МассивИсключаемыхТаблиц = ?(ТипЗнч(ИсключаяТаблицы) = Тип("Массив"), ИсключаяТаблицы, СтрРазделить(ИсключаяТаблицы, ","));
	Иначе
		МассивИсключаемыхТаблиц = Новый Массив();
	КонецЕсли;
	
	Если СписокТаблиц <> Неопределено Тогда
		МассивТаблиц = ?(ТипЗнч(СписокТаблиц) = Тип("Массив"), СписокТаблиц, СтрРазделить(СписокТаблиц, ","));
	Иначе
		МассивТаблиц = Новый Массив();
		Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если МассивИсключаемыхТаблиц.Найти(Таблица.ПолноеИмя) = Неопределено Тогда
				МассивТаблиц.Добавить(Таблица.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Формирует список временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно получить.
// 
// Возвращаемое значение:
//  Массив - Временные таблицы, находящиеся в менеджере.
//
Функция СписокВременныхТаблиц(МенеджерВременныхТаблиц) Экспорт

	СписокВременныхТаблиц = Новый Массив;
	
	Для каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		СписокВременныхТаблиц.Добавить(Таблица.ПолноеИмя);
	КонецЦикла; 
	
	Возврат СписокВременныхТаблиц;

КонецФункции

#Область РаботаСХранилищемДанных

// Записывает данные в хранилище.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка
//
//  Данные  - Произвольный - Данные помещаемые хранилище. Неопределено - удаляет все данные.
//             Для удаления данных по ключу следует использовать процедуру УдалитьДанныеИзХранилища.
//  Ключ    - Строка       - Ключ сохраняемых настроек
//                           Ключ должен соответствовать правилам, установленным для идентификаторов:
//                           * Первым символом ключа должна быть буква или символ подчеркивания (_).
//                           * Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).
Процедура ЗаписатьДанныеВХранилище(Владелец, Данные, Ключ) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.';
																			|en = 'Не указан владелец данных.'"));
	
	ХранилищеДанных = РегистрыСведений.ХранилищеДанных.СоздатьМенеджерЗаписи();
	ХранилищеДанных.Владелец = Владелец;
	ХранилищеДанных.Прочитать();
	Если Данные <> Неопределено Тогда
		Если ХранилищеДанных.Выбран() Тогда
			ДанныеДляСохранения = ХранилищеДанных.Данные.Получить();
			Если ТипЗнч(ДанныеДляСохранения) <> Тип("Структура") Тогда
				ДанныеДляСохранения = Новый Структура();
			КонецЕсли;
			ДанныеДляСохранения.Вставить(Ключ, Данные);
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			ХранилищеДанных.Записать();
		Иначе
			ДанныеДляСохранения = Новый Структура(Ключ, Данные);
			ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
			ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
			ХранилищеДанных.Владелец = Владелец;
			ХранилищеДанных.Записать();
		КонецЕсли;
	Иначе
		ХранилищеДанных.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные из хранилища.
//
// Параметры:
//  Владелец    - ПланОбменаСсылка, СправочникСсылка, Строка
//  Ключи       - Строка - Содержит список имен сохраненных данных, указанных через запятую.
// 
// Возвращаемое значение:
//  Произвольный, Структура, Неопределено - Данные из хранилища. Если указан один ключ,
//                            то возвращается его значение, иначе структура.
//                            Если данные отсутствуют - Неопределено.
//
Функция ПрочитатьДанныеИзХранилища(Владелец, Ключи) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.';
																			|en = 'Не указан владелец данных.'"));
	
	Результат = Новый Структура(Ключи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанных.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ХранилищеДанных КАК ХранилищеДанных
	|ГДЕ
	|	ХранилищеДанных.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Если ЗначениеЗаполнено(РезультатЗапроса.Данные) Тогда
			СохраненныеДанные = РезультатЗапроса.Данные.Получить();
			Если ЗначениеЗаполнено(СохраненныеДанные) Тогда
				ЗаполнитьЗначенияСвойств(Результат, СохраненныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено И Результат.Количество() = 1 Тогда
		Возврат ?(Результат.Свойство(Ключи), Результат[Ключи], Неопределено);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Удаляет данные из хранилища.
//
// Параметры:
//  Владелец - ПланОбменаСсылка, СправочникСсылка, Строка
//  Ключи    - Строка - Содержит список имен удаляемых данных, указанных через запятую. 
//             Неопределено - удаляет все данные.
//
Процедура УдалитьДанныеИзХранилища(Владелец, Ключи = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(Владелец), НСтр("ru = 'Не указан владелец данных.';
																			|en = 'Не указан владелец данных.'"));
	
	ХранилищеДанных = РегистрыСведений.ХранилищеДанных.СоздатьМенеджерЗаписи();
	
	Отбор = Новый Структура("Владелец", Владелец);
	ХранилищеДанных.Владелец = Владелец;
	ХранилищеДанных.Прочитать();
	Если ТипЗнч(ХранилищеДанных.Данные) = Тип("ХранилищеЗначения") Тогда
		ДанныеДляСохранения = ХранилищеДанных.Данные.Получить();
		Если Ключи <> Неопределено И ТипЗнч(ДанныеДляСохранения) = Тип("Структура") Тогда
			СписокКлючей = СтрРазделить(Ключи, ",", Ложь);
			Если ХранилищеДанных.Выбран() И СписокКлючей.Количество() > 0 Тогда
				Для каждого КлючДляУдаления Из СписокКлючей Цикл
					Если ДанныеДляСохранения.Свойство(КлючДляУдаления) Тогда
						ДанныеДляСохранения.Удалить(КлючДляУдаления);
					КонецЕсли;
				КонецЦикла;
				ДанныеДляХранилищеЗначения = Новый ХранилищеЗначения(ДанныеДляСохранения, Новый СжатиеДанных(6));
				ХранилищеДанных.Данные = ДанныеДляХранилищеЗначения;
				ХранилищеДанных.Записать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеДанных.Удалить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначения.ЕстьРеквизитОбъекта
// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры:
//  ИмяРеквизита - строковое имя искомого реквизита,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Устарела. Необходимо использовать функцию БСП ОбщегоНазначения.ТекущаяДатаПользователя().
//
// Возвращаемое значение:
//	Дата - рабочая дата пользователя.
//
Функция ПолучитьРабочуюДату() Экспорт

	Возврат ОбщегоНазначения.ТекущаяДатаПользователя();

КонецФункции
 
#КонецОбласти

#Область СлужебнаяЗаписьОбъектов

// Устанавливает признак пропуска бизнес-логики в ходе записи объекта для выполнения служебных действий:
// обновление данных в ходе обновления версии программы, загрузка данных, изменение активности движений.
//
// См. также ПропущенаБизнесЛогикаПриЗаписи
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект,
//           РегистрБухгалтерииНаборЗаписей, РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей,
//           КонстантаМенеджерЗначения - записываемый объект.
//
Процедура ПропуститьБизнесЛогикуПриЗаписи(Знач Объект) Экспорт
	
	// Если свойство отсутствует, то бизнес-логика проверяется.
	Объект.ДополнительныеСвойства.Вставить("ПропуститьБизнесЛогикуПриЗаписи", Истина);
	
КонецПроцедуры

// Определяет, следует ли пропустить выполнение бизнес-логики при записи объекта.
// Пропуск бизнес-логики может потребоваться для выполнения служебных действий:
// обновление данных в ходе обновления версии программы, загрузка данных, изменение активности движений.
// Следует вызывать из обработчика ПередЗаписью.
//
// См. также ПропуститьБизнесЛогикуПриЗаписи
//
// Параметры:
//  Объект - ДокументОбъект, СправочникОбъект, ПланСчетовОбъект, ПланВидовХарактеристикОбъект,
//           РегистрБухгалтерииНаборЗаписей, РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей,
//           КонстантаМенеджерЗначения - записываемый объект.
//
// Возвращаемое значение:
//  Булево - Истина, если бизнес-логику выполнять не следует.
//
Функция ПропущенаБизнесЛогикаПриЗаписи(Знач Объект) Экспорт
	
	// неявно, в загрузке данных
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат Истина;
	КонецЕсли;
	
	// явно, например, в обработчике обновления
	Возврат Объект.ДополнительныеСвойства.Свойство("ПропуститьБизнесЛогикуПриЗаписи")
		И Объект.ДополнительныеСвойства.ПропуститьБизнесЛогикуПриЗаписи;
	
КонецФункции

#КонецОбласти
