// АПК:389-выкл 
// АПК:401-выкл 
// АПК:405-выкл 
// АПК:416-выкл 

#Область ПрограммныйИнтерфейс

// Выполняет регистрацию доходов по дивидендам и налога с этих доходов.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаВыплаты - дата - дата, которой будет зарегистрировано движение.
//		Дивиденды - ТаблицаЗначений - содержит, как минимум, колонки:
//			Акционер
//			Начислено
//			ВычетПоНДФЛ
//			НДФЛ
//		ВключатьВДекларациюПоНалогуНаПрибыль - булево -
//		РегистрироватьУдержаниеПеречислениеНДФЛ - булево - признак того, что необходимо зарегистрировать удержание и перечисление НДФЛ
//		ДатаПлатежа - дата -
//		РеквизитыПлатежа - строка - реквизиты платежного поручения на перечисление налога.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДоходыИНДФЛСДивидендов(Регистратор, Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, ВключатьВДекларациюПоНалогуНаПрибыль, РегистрироватьУдержаниеПеречислениеНДФЛ = Ложь, ДатаПлатежа = Неопределено, РеквизитыПлатежа = "", Записывать = Ложь) Экспорт
	
	УчетНДФЛ.СформироватьДоходыИНДФЛСДивидендов(Регистратор, Движения, Отказ, Организация, ДатаВыплаты, Дивиденды, ВключатьВДекларациюПоНалогуНаПрибыль, РегистрироватьУдержаниеПеречислениеНДФЛ, ДатаПлатежа, РеквизитыПлатежа, Записывать)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Расчет НДФЛ

// Выполняет расчет налога по отдельным доходам с учетом вида дохода и резидентства получателя дохода.
// Заполняет в переданной таблице Доходы колонку НДФЛ, если такой колонки нет - создает ее.
//
// Параметры:
//		ДатаПолученияДохода - дата -
//		Доходы - ТаблицаЗначений - содержит колонки
//			ФизическоеЛицо
//			КатегорияДохода
//			КодДохода 
//			СуммаДохода
//  	    КодВычета (необязательная)
//  	    СуммаВычета (необязательная)
//  	    НомерСтроки (необязательная)
//		ИмяКолонкиДатаПолученияДохода - необязательный, если задан, то данные берутся из колонки с датой получения дохода
Процедура РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, Доходы, ИмяКолонкиДатаПолученияДохода = "") Экспорт
	
	УчетНДФЛ.РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, Доходы, ИмяКолонкиДатаПолученияДохода)
	
КонецПроцедуры

// Метод выполняет расчет материальной выгоды и налога.
// Исходная таблица дополняется двумя колонками 
//	МатериальнаяВыгода и НалогНаМатериальнуюВыгоду, 
//	в которую соответственно заполняются значения выгоды и налога.
//
//
// Параметры:
//		Организация - СправочникСсылка.Организации -
//		ДатаПолученияДохода - дата -
//		РасчетЗаймов - ТаблицаЗначений - содержит колонки
//			ФизическоеЛицо
//			Подразделение
//			ДатаНачала - начало периода, за который выполняется начисление/погашение процентов.
//			ДатаОкончания - конец периода.
//			ПогашениеПроцентов - сумма погашения процентов.
//			ПроцентнаяСтавка - годовая процентная ставка по договору.
//			МатериальнаяВыгодаОблагаетсяНДФЛ - признак необходимости начислять материальную выгоду.
//			ОстатокЗайма - сумма с которой производится расчет материальной выгоды
//			Регистратор - документ, который необходимо исключить при расчете материальной выгоды.
//		АрхивныйАлгоритм - булево, признак использования алгоритма, при котором используется ключевая ставка
//								   по дате начисления мат. выгоды (вместо даты выдачи или даты изменения условий займа)
Процедура РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, ДатаПолученияДохода, РасчетЗаймов, Регистратор, АрхивныйАлгоритм = Ложь) Экспорт
	
	Отбор = Новый Структура("МатериальнаяВыгодаОблагаетсяНДФЛ", Истина);
	СтрокиКРасчету = РасчетЗаймов.НайтиСтроки(Отбор);
	Если СтрокиКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИдентификаторСтроки = 1;
	СтрокиРасчета = Новый Соответствие;
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		СтрокаРасчета.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиРасчета.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	РасчетЗаймов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетЗаймов.ДатаНачала КАК ДатаНачала,
	|	РасчетЗаймов.ДатаОкончания КАК ДатаОкончания,
	|	РасчетЗаймов.ПогашениеЗайма КАК ПогашениеЗайма,
	|	РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ КАК МатериальнаяВыгодаОблагаетсяНДФЛ
	|ПОМЕСТИТЬ ВТРасчетЗаймов
	|ИЗ
	|	&РасчетЗаймов КАК РасчетЗаймов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	РасчетЗаймов.ДатаНачала КАК Период,
	|	РасчетЗаймов.ДатаНачала КАК ДатаНачала,
	|	РасчетЗаймов.ДатаОкончания КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(РасчетЗаймов.ДатаОкончания, МЕСЯЦ), ДЕНЬ) КАК ПоследнийДеньМесяца
	|ПОМЕСТИТЬ ВТПериодыПогашенияЗайма
	|ИЗ
	|	ВТРасчетЗаймов КАК РасчетЗаймов
	|ГДЕ
	|	РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыПогашенияЗайма.ПоследнийДеньМесяца КАК Период
	|ПОМЕСТИТЬ ВТДатыОкончанияПогашенияЗайма
	|ИЗ
	|	ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	МАКСИМУМ(НачисленияУдержанияПоСотрудникам.ДатаОкончания) КАК Период
	|ПОМЕСТИТЬ ВТДатыНачисленияМатериальнойВыгоды
	|ИЗ
	|	ВТРасчетЗаймов КАК РасчетЗаймов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ПО (НачисленияУдержанияПоСотрудникам.ДокументОснование = РасчетЗаймов.ДоговорЗайма)
	|			И (НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = РасчетЗаймов.ФизическоеЛицо)
	|			И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам))
	|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
	|			И (НачисленияУдержанияПоСотрудникам.Период <= &ДатаОперации)
	|			И (НачисленияУдержанияПоСотрудникам.ДатаОкончания <= &ДатаОперации)
	|			И (РасчетЗаймов.МатериальнаяВыгодаОблагаетсяНДФЛ)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетЗаймов.ДоговорЗайма
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорЗайма";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РасчетЗаймов", РасчетЗаймов);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаПолученияДохода);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	// Запрашиваем ставку рефинансирования на дату получения дохода по документу
	СтавкаРефинансирования = 0;
	Выборка = РегистрыСведений.СтавкаРефинансированияЦБ.Выбрать(, КонецМесяца(ДатаПолученияДохода), , "Убыв");
	Если Выборка.Следующий() Тогда 
		СтавкаРефинансирования = Выборка.Размер;
	КонецЕсли;
	
	ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма = ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма();
	Запрос.УстановитьПараметр("ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма", ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма);
	Запрос.УстановитьПараметр("СтавкаНаДатуПолученияДоходаПоДокументу", СтавкаРефинансирования);
	Запрос.УстановитьПараметр("АрхивныйАлгоритм", АрхивныйАлгоритм);

	// Получаем информацию о датах начала и датах изменения договоров займа.
	
	// Интересует ли дата получения денежных средств (п. 1, ст. 807 ГК РФ), либо последняя дата изменения договора,
	// когда было изменение процентной ставки займа
	Если Не АрхивныйАлгоритм И ДатаПолученияДохода >= ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ДоговорЗайма КАК ДоговорЗайма,
		|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ПроцентнаяСтавка КАК ПроцентнаяСтавка
		|ПОМЕСТИТЬ ВТУсловияДоговораЗаймаСотрудникуСрезПоследних
		|ИЗ
		|	РегистрСведений.УсловияДоговораЗаймаСотруднику.СрезПоследних(
		|			&ДатаОперации,
		|			ДоговорЗайма В
		|				(ВЫБРАТЬ
		|					ВТРасчетЗаймов.ДоговорЗайма
		|				ИЗ
		|					ВТРасчетЗаймов)) КАК УсловияДоговораЗаймаСотрудникуСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорЗайма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма КАК ДоговорЗайма,
		|	МИНИМУМ(ВзаиморасчетыПоЗаймамСотрудникам.Период) КАК Период
		|ПОМЕСТИТЬ ВТДатыПервойВыдачиЗайма
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам
		|ГДЕ
		|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма В
		|			(ВЫБРАТЬ
		|				ВТРасчетЗаймов.ДоговорЗайма
		|			ИЗ
		|				ВТРасчетЗаймов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорЗайма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТДатыПервойВыдачиЗайма.Период, УсловияДоговораЗаймаСотруднику.Период) КАК Период,
		|	УсловияДоговораЗаймаСотруднику.ДоговорЗайма КАК ДоговорЗайма,
		|	УсловияДоговораЗаймаСотруднику.ПроцентнаяСтавка КАК ПроцентнаяСтавка
		|ПОМЕСТИТЬ ВТУсловияДоговораЗаймаСотруднику
		|ИЗ
		|	РегистрСведений.УсловияДоговораЗаймаСотруднику КАК УсловияДоговораЗаймаСотруднику
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПервойВыдачиЗайма КАК ВТДатыПервойВыдачиЗайма
		|		ПО (УсловияДоговораЗаймаСотруднику.Регистратор ССЫЛКА Документ.ДоговорЗаймаСотруднику)
		|			И УсловияДоговораЗаймаСотруднику.ДоговорЗайма = ВТДатыПервойВыдачиЗайма.ДоговорЗайма
		|ГДЕ
		|	УсловияДоговораЗаймаСотруднику.ДоговорЗайма В
		|			(ВЫБРАТЬ
		|				ВТРасчетЗаймов.ДоговорЗайма
		|			ИЗ
		|				ВТРасчетЗаймов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорЗайма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ДоговорЗайма КАК ДоговорЗайма,
		|	МИНИМУМ(УсловияДоговораЗаймаСотруднику.Период) КАК Период
		|ПОМЕСТИТЬ ВТДатыЗаключенияДоговора
		|ИЗ
		|	ВТУсловияДоговораЗаймаСотрудникуСрезПоследних КАК УсловияДоговораЗаймаСотрудникуСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияДоговораЗаймаСотруднику КАК УсловияДоговораЗаймаСотруднику
		|		ПО УсловияДоговораЗаймаСотрудникуСрезПоследних.ДоговорЗайма = УсловияДоговораЗаймаСотруднику.ДоговорЗайма
		|			И УсловияДоговораЗаймаСотрудникуСрезПоследних.ПроцентнаяСтавка = УсловияДоговораЗаймаСотруднику.ПроцентнаяСтавка
		|			И (УсловияДоговораЗаймаСотруднику.Период <= &ДатаОперации)
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ДоговорЗайма";
		Запрос.Выполнить();
		
		// Запрашиваем ставки рефинансирования на даты изменения договоров займа
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"СтавкаРефинансированияЦБ",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТДатыЗаключенияДоговора"));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыЗаключенияДоговора.ДоговорЗайма КАК ДоговорЗайма,
		|	ЕСТЬNULL(СтавкаРефинансированияЦБСрезПоследних.Размер, &СтавкаНаДатуПолученияДоходаПоДокументу) КАК Размер
		|ПОМЕСТИТЬ ВТСтавкиРефинансированияНаДатуЗаключенияДоговора
		|ИЗ
		|	ВТДатыЗаключенияДоговора КАК ДатыЗаключенияДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаРефинансированияЦБСрезПоследних КАК СтавкаРефинансированияЦБСрезПоследних
		|		ПО ДатыЗаключенияДоговора.Период = СтавкаРефинансированияЦБСрезПоследних.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорЗайма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтавкаРефинансированияЦБСрезПоследних";
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка) КАК ДоговорЗайма,
		|	0 КАК Размер
		|ПОМЕСТИТЬ ВТСтавкиРефинансированияНаДатуЗаключенияДоговора";
		
		Запрос.Выполнить();
		
	КонецЕсли;
		
	// Запрашиваем ставки рефинансирования на даты окончания интервалов расчета займа
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтавкаРефинансированияЦБ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДатыОкончанияПогашенияЗайма"));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыПогашенияЗайма.Период КАК Период,
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма КАК ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала КАК ИсходнаяДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания КАК ИсходнаяДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыНачисленияМатериальнойВыгоды
	|ИЗ
	|	ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, ДЕНЬ), СЕКУНДА, 1),
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания
	|ИЗ
	|	ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|ГДЕ
	|	КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, ДЕНЬ) <> КОНЕЦПЕРИОДА(ПериодыПогашенияЗайма.ДатаОкончания, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДатыНачисленияМатериальнойВыгоды.Период, ДЕНЬ), СЕКУНДА, 1),
	|	ПериодыПогашенияЗайма.ИдентификаторСтроки,
	|	ПериодыПогашенияЗайма.ДоговорЗайма,
	|	ПериодыПогашенияЗайма.ДатаНачала,
	|	ПериодыПогашенияЗайма.ДатаОкончания
	|ИЗ
	|	ВТДатыНачисленияМатериальнойВыгоды КАК ДатыНачисленияМатериальнойВыгоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПогашенияЗайма КАК ПериодыПогашенияЗайма
	|		ПО ДатыНачисленияМатериальнойВыгоды.ДоговорЗайма = ПериодыПогашенияЗайма.ДоговорЗайма
	|			И (ДатыНачисленияМатериальнойВыгоды.Период МЕЖДУ ПериодыПогашенияЗайма.ДатаНачала И ПериодыПогашенияЗайма.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Периоды.ДоговорЗайма КАК ДоговорЗайма,
	|	Периоды.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL
	|			ТОГДА Периоды.ИсходнаяДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|	КОНЕЦ КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ВЫБОР
	|				КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL
	|					ТОГДА Периоды.ИсходнаяДатаОкончания
	|				ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|			КОНЕЦ, МЕСЯЦ), ДЕНЬ) КАК ПоследнийДеньМесяца
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТПериодыНачисленияМатериальнойВыгоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыНачисленияМатериальнойВыгоды КАК ПериодыСлед
	|		ПО Периоды.Период < ПериодыСлед.Период
	|			И Периоды.ИдентификаторСтроки = ПериодыСлед.ИдентификаторСтроки
	|ГДЕ
	|	Периоды.Период >= Периоды.ИсходнаяДатаНачала
	|	И Периоды.Период <= Периоды.ИсходнаяДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ИдентификаторСтроки,
	|	Периоды.ДоговорЗайма,
	|	Периоды.Период,
	|	Периоды.ИсходнаяДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Интервалы.ДоговорЗайма КАК ДоговорЗайма,
	|	Интервалы.ДатаНачала КАК ДатаНачала,
	|	Интервалы.ДатаОкончания КАК ДатаОкончания,
	|	РАЗНОСТЬДАТ(Интервалы.ДатаНачала, Интервалы.ДатаОкончания, ДЕНЬ) + 1 КАК Дней,
	|	ВЫБОР
	|		КОГДА ДатыНачисленияМатериальнойВыгоды.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РассчитыватьМатериальнуюВыгоду,
	|	ВЫБОР
	|		КОГДА НЕ &АрхивныйАлгоритм
	|				И Интервалы.ДатаОкончания >= &ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма
	|				И СтавкиРефинансированияНаДатуЗаключенияДоговора.Размер <= ЕСТЬNULL(СтавкаРефинансированияЦБСрезПоследних.Размер, &СтавкаНаДатуПолученияДоходаПоДокументу)
	|			ТОГДА СтавкиРефинансированияНаДатуЗаключенияДоговора.Размер
	|		ИНАЧЕ ЕСТЬNULL(СтавкаРефинансированияЦБСрезПоследних.Размер, &СтавкаНаДатуПолученияДоходаПоДокументу)
	|	КОНЕЦ КАК СтавкаРефинансирования
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачисленияМатериальнойВыгоды КАК ДатыНачисленияМатериальнойВыгоды
	|		ПО Интервалы.ДоговорЗайма = ДатыНачисленияМатериальнойВыгоды.ДоговорЗайма
	|			И (ДатыНачисленияМатериальнойВыгоды.Период >= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкаРефинансированияЦБСрезПоследних КАК СтавкаРефинансированияЦБСрезПоследних
	|		ПО Интервалы.ПоследнийДеньМесяца = СтавкаРефинансированияЦБСрезПоследних.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиРефинансированияНаДатуЗаключенияДоговора КАК СтавкиРефинансированияНаДатуЗаключенияДоговора
	|		ПО Интервалы.ДоговорЗайма = СтавкиРефинансированияНаДатуЗаключенияДоговора.ДоговорЗайма
	|
	|УПОРЯДОЧИТЬ ПО
	|	Интервалы.ИдентификаторСтроки,
	|	Интервалы.ДоговорЗайма";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.РассчитыватьМатериальнуюВыгоду Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРасчета = СтрокиРасчета[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.РассчитыватьМатериальнуюВыгоду = Выборка.РассчитыватьМатериальнуюВыгоду;
		
		Если СтрокаРасчета.ПроцентнаяСтавка >= Выборка.СтавкаРефинансирования * (2/3) Тогда
			Продолжить;
		КонецЕсли;
		
		ДнейВГоду = ЗаймыСотрудникамКлиентСервер.КоличествоДнейВГоду(Год(СтрокаРасчета.ДатаНачала));
		// Материальная выгода рассчитывается как превышение суммы процентов за пользование заемными средствами, 
		// исчисленной исходя из двух третьих действующей ставки рефинансирования, 
		// над суммой процентов, исчисленной исходя из условий договора (п. 1 ст. 212 НК РФ).
		МатериальнаяВыгода = СтрокаРасчета.ОстатокЗайма 
				* (Выборка.СтавкаРефинансирования * (2/3) - СтрокаРасчета.ПроцентнаяСтавка) * 0.01 / ДнейВГоду 
				* Выборка.Дней;
		СтрокаРасчета.МатериальнаяВыгода = СтрокаРасчета.МатериальнаяВыгода + МатериальнаяВыгода; 
		
	КонецЦикла;
	
	РасчетЗаймов.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	РасчетЗаймов.ЗаполнитьЗначения(Перечисления.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы, "КатегорияДохода");
	РасчетЗаймов.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	РасчетЗаймов.ЗаполнитьЗначения(Справочники.ВидыДоходовНДФЛ.Код2610, "КодДохода");
	РасчетЗаймов.Колонки.МатериальнаяВыгода.Имя = "СуммаДохода";
	РасчетЗаймов.Колонки.НалогНаМатериальнуюВыгоду.Имя = "НДФЛ";
	
	РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, РасчетЗаймов, "ДатаОкончания");
	РасчетЗаймов.Колонки.НДФЛ.Имя = "НалогНаМатериальнуюВыгоду";
	РасчетЗаймов.Колонки.СуммаДохода.Имя = "МатериальнаяВыгода";
	
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		Если СтрокаРасчета.МатериальнаяВыгода = 0 Или Не СтрокаРасчета.РассчитыватьМатериальнуюВыгоду Тогда
			СтрокаРасчета.НалогНаМатериальнуюВыгоду = 0 
		КонецЕсли;
	КонецЦикла;
	
	РасчетЗаймов.Колонки.Удалить("КодДохода");
	
КонецПроцедуры

// Выполняет расчет налога с дивидендов для одного акционера.
//
// Параметры:
//	- ДатаПолученияДохода
//	- Организация
//	- Акционер
//	- Начислено
//	- ВычетПоНДФЛ
//	- КатегорияДивидендов
// Возвращаемое значение - величина НДФЛ.
// 
Функция НалогСДивидендовАкционера(ДатаПолученияДохода, Организация, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов = Неопределено, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Возврат УчетНДФЛ.НалогСДивидендовАкционера(ДатаПолученияДохода, Организация, Акционер, Начислено, ВычетПоНДФЛ, КатегорияДивидендов, ИсключаемыйРегистратор)
	
КонецФункции

// формирование движений

// Формирует движения по регистрам подсистемы.
// Среди оплаченных в межрасчет документов (ОкончательныйРасчет = Ложь), запоминаем те, по которым налог удерживать не должны.     	 
// Последующие ведомости с выплатой "под расчет" смогут вспомнить про эти документы и удержать по ним налог.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Регистратор - ДокументСсылка - 
//		ТаблицаВыплат - ТаблицаЗначений - с колонками:
//				ФизическоеЛицо: должно быть непустым
//				ОкончательныйРасчет, булево, необязательная, если отсутствует, все строки считаются межрасчетными.
//				а также ДокументОснование, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьДокументыОплаченныеБезУдержанияНДФЛ(Движения, Отказ, Организация, Регистратор, ТаблицаВыплат, Записывать = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплат) Тогда
		Возврат
	КонецЕсли;
	
	УточненнаяТаблицаВыплат = ТаблицаВыплат; // оставим строки межрасчетных выплат
	Если ТаблицаВыплат.Колонки.Найти("ОкончательныйРасчет") <> Неопределено Тогда
		УточненнаяТаблицаВыплат = ТаблицаВыплат.Скопировать(ТаблицаВыплат.НайтиСтроки(Новый Структура("ОкончательныйРасчет", Ложь)));
		Если Не ЗначениеЗаполнено(УточненнаяТаблицаВыплат) Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВыплат", УточненнаяТаблицаВыплат);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	// ФизическоеЛицо, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение, ДокументОснование и др. поля
	|	*
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	&ТаблицаВыплат КАК ТаблицаВыплат";
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблица.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВременнаяТаблица.ПериодВзаиморасчетов КАК ПериодРегистрации,
	|	ВременнаяТаблица.Сотрудник КАК Сотрудник,
	|	ВременнаяТаблица.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВременнаяТаблица.СтатьяРасходов КАК СтатьяРасходов,
	|	ВременнаяТаблица.Подразделение КАК Подразделение
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО ВременнаяТаблица.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
	|			И ВременнаяТаблица.ДокументОснование = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыОплаченныеБезУдержанияНДФЛ КАК ДокументыОплаченныеБезУдержанияНДФЛ
	|		ПО ВременнаяТаблица.ФизическоеЛицо = ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо
	|			И ВременнаяТаблица.ДокументОснование = ДокументыОплаченныеБезУдержанияНДФЛ.ДокументОснование
	|			И ВременнаяТаблица.ПериодВзаиморасчетов = ДокументыОплаченныеБезУдержанияНДФЛ.ПериодРегистрации
	|			И ВременнаяТаблица.Сотрудник = ДокументыОплаченныеБезУдержанияНДФЛ.Сотрудник
	|			И ВременнаяТаблица.СтатьяФинансирования = ДокументыОплаченныеБезУдержанияНДФЛ.СтатьяФинансирования
	|			И ВременнаяТаблица.СтатьяРасходов = ДокументыОплаченныеБезУдержанияНДФЛ.СтатьяРасходов
	|			И ВременнаяТаблица.Подразделение = ДокументыОплаченныеБезУдержанияНДФЛ.Подразделение
	|			И (ДокументыОплаченныеБезУдержанияНДФЛ.Регистратор <> &Регистратор)
	|ГДЕ
	|	ДокументыУчтенныеПриРасчетеНДФЛ.УдержатьНалогПриВыплатеЗарплаты
	|	И ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо ЕСТЬ NULL";
	
	ДокументыФизическихЛиц = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаДанных Из ДокументыФизическихЛиц Цикл
		НоваяСтрока = Движения.ДокументыОплаченныеБезУдержанияНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Организация = Организация;
	КонецЦикла;
	
	Если Записывать Тогда
		Движения.ДокументыОплаченныеБезУдержанияНДФЛ.Записать();
		Движения.ДокументыОплаченныеБезУдержанияНДФЛ.Записывать = Ложь;
	Иначе
		Движения.ДокументыОплаченныеБезУдержанияНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом возможных сторнирований и
// исправлений документов.
//      	 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ДатаВыплаты - дата -
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит вр. таблицу 
//			ВТНачисления с полями.
//				Сотрудник, тип СправочникСсылка.Сотрудники.
//				Начисление, тип ПланВидовРасчетаСсылка.Начисления,СправочникСсылка.ВидыДоходовНДФЛ 
//				ДатаНачала, тип дата 
//				Сторно, тип булево 
//				СторнируемыйДокумент, тип ДокументСсылка
//				СуммаДохода, тип число
//				СуммаВычетаНДФЛ, тип число
//				КодВычетаНДФЛ, тип СправочникСсылка.ВидыВычетовНДФЛ.
//				Подразделение, тип ОпределяемыйТип.ТерриторияВыполненияРаботВОрганизации.
//				ПодразделениеОрганизации, тип СправочникСсылка.ПодразделенияОрганизаций.
//				СуммаЗаСчетГрантов, тип число - необязательная
//		МесяцНачисления - дата -
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		ИсключаемыйРегистратор - ДокументСсылка - документ, движения которого не следует учитывать при расчете движений.
//		МенеджерКадровогоУчета - Общий модуль - держатель метода СоздатьВТКадровыеДанныеСотрудников.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления = Неопределено, Записывать = Ложь, ОкончательныйРасчет = Истина, ИмяВТНачисления = "ВТНачисления", ИсключаемыйРегистратор = Неопределено, МенеджерКадровогоУчета = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт
		
	Если Не ЗначениеЗаполнено(МесяцНачисления) Тогда
		МесяцНачисления = ДатаОперации
	КонецЕсли;
	
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	СуммыЗаСчетГрантовНеПереданы = МенеджерВременныхТаблиц.Таблицы[ИмяВТНачисления].Колонки.Найти("СуммаЗаСчетГрантов") = Неопределено;
	УменьшатьСуммуДоходаВСвязиСУвольнением = МенеджерВременныхТаблиц.Таблицы[ИмяВТНачисления].Колонки.Найти("СуммаДоходаНеОблагаемаяНДФЛ") <> Неопределено;
	
	Если ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения().ИспользоватьВоеннуюСлужбу Тогда
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВТНачисления, "Сотрудник, ДатаНачала");
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТВоеннослужащиеПоПризыву";
		МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ЯвляетсяВоеннослужащимПоПризыву");
		РасчетЗарплаты.СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК СуммаЗаСчетГрантов,
		|	ВЫБОР
		|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|			ТОГДА НачисленияДокумента.СуммаДохода
		|		КОГДА (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) * (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) < НачисленияДокумента.СуммаЗаСчетГрантов * НачисленияДокумента.СуммаЗаСчетГрантов
		|			ТОГДА 0
		|		ИНАЧЕ НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ - НачисленияДокумента.СуммаЗаСчетГрантов
		|	КОНЕЦ КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|				ИЛИ (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) = 0
		|			ТОГДА НачисленияДокумента.СуммаВычетаНДФЛ
		|		ИНАЧЕ НачисленияДокумента.СуммаВычетаНДФЛ * (1 - НачисленияДокумента.СуммаЗаСчетГрантов / (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ))
		|	КОНЕЦ КАК СуммаВычетаНДФЛ,
		|	*
		|ПОМЕСТИТЬ ВТВременнаяТаблица
		|ИЗ
		|	#ИмяВТНачисления КАК НачисленияДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВоеннослужащиеПоПризыву КАК ДанныеОСотруднике
		|		ПО НачисленияДокумента.Сотрудник = ДанныеОСотруднике.Сотрудник
		|		И НачисленияДокумента.ДатаНачала = ДанныеОСотруднике.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваНачислений КАК СвойстваНачислений
		|		ПО НачисленияДокумента.Начисление = СвойстваНачислений.Начисление
		|ГДЕ
		|	(НЕ ДанныеОСотруднике.ЯвляетсяВоеннослужащимПоПризыву
		|			ИЛИ ЕСТЬNULL(НЕ СвойстваНачислений.ЯвляетсяДенежнымДовольствием, ИСТИНА))";
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИНеОблагаемымиДоходами(ТекстЗапроса, ИмяВТНачисления, УменьшатьСуммуДоходаВСвязиСУвольнением);
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИГрантами(ТекстЗапроса, ИмяВТНачисления, СуммыЗаСчетГрантовНеПереданы);
		Запрос.Выполнить();
		
		ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТВоеннослужащиеПоПризыву");
		ТаблицыКУдалению.Добавить("ВТДополнительныеСвойстваНачислений");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияДокумента.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТВременнаяТаблица КАК НачисленияДокумента
		|ГДЕ
		|	НачисленияДокумента.Сторно
		|	И (НачисленияДокумента.СуммаДохода <> 0
		|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)";
		Если Запрос.Выполнить().Пустой() Тогда // Сторнировать доходы не требуется.
			УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, "ВТВременнаяТаблица", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
			ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВременнаяТаблица");
			Возврат 
		КонецЕсли;
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	#ИмяВТНачисления КАК НачисленияДокумента
		|ГДЕ
		|	НачисленияДокумента.Сторно
		|	И (ВЫБОР
		|				КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|					ТОГДА (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ)
		|				КОГДА (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) * (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) < НачисленияДокумента.СуммаЗаСчетГрантов * НачисленияДокумента.СуммаЗаСчетГрантов
		|					ТОГДА 0
		|				ИНАЧЕ НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ - НачисленияДокумента.СуммаЗаСчетГрантов
		|			КОНЕЦ <> 0
		|			ИЛИ ВЫБОР
		|				КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|						ИЛИ (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) = 0
		|					ТОГДА НачисленияДокумента.СуммаВычетаНДФЛ
		|				ИНАЧЕ НачисленияДокумента.СуммаВычетаНДФЛ * (1 - НачисленияДокумента.СуммаЗаСчетГрантов / (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ))
		|			КОНЕЦ <> 0)";
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИНеОблагаемымиДоходами(ТекстЗапроса, ИмяВТНачисления, УменьшатьСуммуДоходаВСвязиСУвольнением);
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИГрантами(ТекстЗапроса, ИмяВТНачисления, СуммыЗаСчетГрантовНеПереданы);
		Если Запрос.Выполнить().Пустой() Тогда // Сторнировать доходы не требуется.
			УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчет, ИмяВТНачисления, ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
			Возврат 
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК СуммаЗаСчетГрантов,
		|	ВЫБОР
		|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|			ТОГДА (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ)
		|		КОГДА (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) * (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) < НачисленияДокумента.СуммаЗаСчетГрантов * НачисленияДокумента.СуммаЗаСчетГрантов
		|			ТОГДА 0
		|		ИНАЧЕ НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ - НачисленияДокумента.СуммаЗаСчетГрантов
		|	КОНЕЦ КАК СуммаДохода,
		|	ВЫБОР
		|		КОГДА НачисленияДокумента.СуммаЗаСчетГрантов = 0
		|				ИЛИ (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ) = 0
		|			ТОГДА НачисленияДокумента.СуммаВычетаНДФЛ
		|		ИНАЧЕ НачисленияДокумента.СуммаВычетаНДФЛ * (1 - НачисленияДокумента.СуммаЗаСчетГрантов / (НачисленияДокумента.СуммаДохода - НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ))
		|	КОНЕЦ КАК СуммаВычетаНДФЛ,
		|	*
		|ПОМЕСТИТЬ ВТВременнаяТаблица
		|ИЗ
		|	#ИмяВТНачисления КАК НачисленияДокумента";
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИНеОблагаемымиДоходами(ТекстЗапроса, ИмяВТНачисления, УменьшатьСуммуДоходаВСвязиСУвольнением);
		Запрос.Текст = ТекстЗапросаСТаблицейНачисленийИГрантами(ТекстЗапроса, ИмяВТНачисления, СуммыЗаСчетГрантовНеПереданы);
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&ДатаОперации,
	|			СтруктурнаяЕдиница В
	|				(ВЫБРАТЬ
	|					Начисления.Подразделение
	|				ИЗ
	|					ВТВременнаяТаблица КАК Начисления)) КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТСторноЗаписи
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НачисленияДокумента.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноЗаписи КАК СторноЗаписи
	|		ПО НачисленияДокумента.Сотрудник.ФизическоеЛицо = СторноЗаписи.ФизическоеЛицо
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = СторноЗаписи.КодДоходаНДФЛ)
	|			И (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = СторноЗаписи.РегистрацияВНалоговомОргане)
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И СторноЗаписи.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСторноЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.Сотрудник.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Отдельно отразим доходы сотрудников, у которых не было сторнирования.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПоложительныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	НАЧАЛОПЕРИОДА(НачисленияДокумента.ДатаНачала, МЕСЯЦ) КАК ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.СуммаДохода КАК СуммаДохода,
	|	НачисленияДокумента.СуммаВычетаНДФЛ КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ПОМЕСТИТЬ ВТНеПоложительныеДоходы
	|ИЗ
	|	ВТВременнаяТаблица КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.Сотрудник.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычетаНДФЛ <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтрицательныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.КодДоходаНДФЛ,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.ДатаНачала
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.КодДоходаНДФЛ,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.ДатаНачала
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО НачисленияДокумента.РегистрацияВНалоговомОргане = ОтрицательныеДоходы.РегистрацияВНалоговомОргане
	|			И НачисленияДокумента.КодДоходаНДФЛ = ОтрицательныеДоходы.КодДоходаНДФЛ
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|			И НачисленияДокумента.ДатаНачала = ОтрицательныеДоходы.ДатаНачала
	|ГДЕ
	|	ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Отдельно отразим доходы за те месяцы, когда не было сторнирования.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТПоложительныеДоходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычетаНДФЛ) КАК СуммаВычета,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ИЗ
	|	ВТНеПоложительныеДоходы КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО НачисленияДокумента.РегистрацияВНалоговомОргане = ОтрицательныеДоходы.РегистрацияВНалоговомОргане
	|			И НачисленияДокумента.КодДоходаНДФЛ = ОтрицательныеДоходы.КодДоходаНДФЛ
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|			И НачисленияДокумента.ДатаНачала = ОтрицательныеДоходы.ДатаНачала
	|ГДЕ
	|	ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Сотрудник.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно";
	
	Результат = Запрос.Выполнить();
	ЕстьСторно = Не Результат.Пустой();
	
	Если ЕстьСторно Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
		|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
		|ИЗ
		|	ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних";
		ТаблицаРегистраций = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТНеПоложительныеДоходы");
	ТаблицыКУдалению.Добавить("ВТОтрицательныеДоходы");
	ТаблицыКУдалению.Добавить("ВТВременнаяТаблица");
	ТаблицыКУдалению.Добавить("ВТРегистрацииВНалоговомОргане");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	
	Если Не ЕстьСторно Тогда
		УчетНДФЛ.ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, ИсключаемыйРегистратор); 
		Если Записывать Тогда
			Движения.СведенияОДоходахНДФЛ.Записать();
			Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
		Иначе
			Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
		КонецЕсли;
		Возврат
	КонецЕсли;
	
	ВременнаяТаблица = Результат.Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	НомерСтроки = 1;
	Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
		СтрокаТЗ.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", ВременнаяТаблица); ВременнаяТаблица = Неопределено;
	Запрос.УстановитьПараметр("ДатаВыплаты", ДатаВыплаты);
	Запрос.УстановитьПараметр("НеУчитыватьОплатуТрудаПоДатеВыплаты", Не УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(ДатаВыплаты));
	Запрос.УстановитьПараметр("ТаблицаРегистраций", ТаблицаРегистраций);
	Запрос.УстановитьПараметр("КонецМесяцаНачисления", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	&КонецМесяцаНачисления КАК Период,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.СуммаДохода,
	|	НачисленияДокумента.СуммаВычета,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.СторнируемыйДокумент,
	|	НачисленияДокумента.Сторно
	|ПОМЕСТИТЬ ВТНачисленияДокумента
	|ИЗ
	|	&Начисления КАК НачисленияДокумента";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТНачисленияДокумента");
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТДатыУвольненияНДФЛ";
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ДатаУвольнения");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТРегистрацииВНалоговомОргане
	|ИЗ
	|	&ТаблицаРегистраций КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТСторноНачисленияДокумента
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТПарныеСтроки
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ПО НачисленияДокумента.Сотрудник = СторноНачисленияДокумента.Сотрудник
	|			И НачисленияДокумента.Начисление = СторноНачисленияДокумента.Начисление
	|			И НачисленияДокумента.ДатаНачала = СторноНачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НЕ НачисленияДокумента.Сторно
	|	И СторноНачисленияДокумента.Сотрудник ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СторноНачисленияДокумента.НомерСтроки
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ПО НачисленияДокумента.Сотрудник = СторноНачисленияДокумента.Сотрудник
	|			И НачисленияДокумента.Начисление = СторноНачисленияДокумента.Начисление
	|			И НачисленияДокумента.ДатаНачала = СторноНачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НЕ НачисленияДокумента.Сторно
	|	И СторноНачисленияДокумента.Сотрудник ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиДокументаСПарнымиНачислениями
	|ИЗ
	|	ВТПарныеСтроки КАК НачисленияДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СторноНачисленияДокумента.НомерСтроки
	|ИЗ
	|	ВТСторноНачисленияДокумента КАК СторноНачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НачисленияДокумента.ДатаНачала КАК ДатаНачала,
	|			НачисленияДокумента.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТНачисленияДокумента КАК НачисленияДокумента
	|		ГДЕ
	|			НЕ НачисленияДокумента.Сторно
	|			И НЕ НачисленияДокумента.НомерСтроки В
	|						(ВЫБРАТЬ
	|							ПарныеСтроки.НомерСтроки
	|						ИЗ
	|							ВТПарныеСтроки КАК ПарныеСтроки)) КАК НачисленияДокумента
	|		ПО СторноНачисленияДокумента.Сотрудник = НачисленияДокумента.Сотрудник
	|			И СторноНачисленияДокумента.ДатаНачала = НачисленияДокумента.ДатаНачала
	|ГДЕ
	|	НачисленияДокумента.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НачисленияДокумента.НомерСтроки) КАК НомерСтроки,
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.Сторно,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиДоходов
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|ГДЕ
	|	НачисленияДокумента.НомерСтроки В
	|			(ВЫБРАТЬ
	|				СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|			ИЗ
	|				ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Сторно,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.ДатаНачала,
	|	ДанныеДокумента.КодВычетаНДФЛ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаДохода
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода < 0
	|			ТОГДА ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Сторно
	|				И ЕСТЬNULL(СтрокиДокумента.НомерСтроки, 0) <> ДанныеДокумента.НомерСтроки
	|			ТОГДА 0
	|		КОГДА СторноЗаписиДокумента.СуммаДохода ЕСТЬ NULL 
	|			ТОГДА ДанныеДокумента.СуммаВычета
	|		КОГДА НЕ ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода > 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		КОГДА ДанныеДокумента.Сторно
	|				И ДанныеДокумента.СуммаДохода + СторноЗаписиДокумента.СуммаДохода <= 0
	|			ТОГДА ДанныеДокумента.СуммаВычета + СторноЗаписиДокумента.СуммаВычета
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно,
	|	СтрокиДокумента.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписямиПоПарнымСтрокам
	|ИЗ
	|	ВТСтрокиДоходов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиДоходов КАК СторноЗаписиДокумента
	|		ПО ДанныеДокумента.Сотрудник = СторноЗаписиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СторноЗаписиДокумента.ФизическоеЛицо
	|			И ДанныеДокумента.Начисление = СторноЗаписиДокумента.Начисление
	|			И ДанныеДокумента.КодВычетаНДФЛ = СторноЗаписиДокумента.КодВычетаНДФЛ
	|			И ДанныеДокумента.ДатаНачала = СторноЗаписиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СторноЗаписиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СторноЗаписиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СторноЗаписиДокумента.РегистрацияВНалоговомОргане
	|			И (НЕ ДанныеДокумента.Сторно
	|					И СторноЗаписиДокумента.Сторно
	|				ИЛИ ДанныеДокумента.Сторно
	|					И НЕ СторноЗаписиДокумента.Сторно)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК СтрокиДокумента
	|		ПО ДанныеДокумента.Сотрудник = СтрокиДокумента.Сотрудник
	|			И ДанныеДокумента.ФизическоеЛицо = СтрокиДокумента.ФизическоеЛицо
	|			И ДанныеДокумента.Начисление = СтрокиДокумента.Начисление
	|			И ДанныеДокумента.ДатаНачала = СтрокиДокумента.ДатаНачала
	|			И ДанныеДокумента.Подразделение = СтрокиДокумента.Подразделение
	|			И ДанныеДокумента.ПодразделениеСотрудника = СтрокиДокумента.ПодразделениеСотрудника
	|			И ДанныеДокумента.РегистрацияВНалоговомОргане = СтрокиДокумента.РегистрацияВНалоговомОргане
	|			И ДанныеДокумента.Сторно = СтрокиДокумента.Сторно
	|			И (ДанныеДокумента.Сторно)
	|			И (СтрокиДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТСторноЗаписи
	|ИЗ
	|	ВТСторноНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|ГДЕ
	|	НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТОтрицательныеДоходы
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСторноЗаписи КАК СторноЗаписи
	|		ПО НачисленияДокумента.ФизическоеЛицо = СторноЗаписи.ФизическоеЛицо
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = СторноЗаписи.КодДоходаНДФЛ)
	|			И (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = СторноЗаписи.РегистрацияВНалоговомОргане)
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычета <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|	И СторноЗаписи.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|
	|ИМЕЮЩИЕ
	|	СУММА(НачисленияДокумента.СуммаДохода) - СУММА(НачисленияДокумента.СуммаВычета) < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСторноЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.СуммаДохода КАК СуммаДохода,
	|	НачисленияДокумента.СуммаВычета КАК СуммаВычета,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеСотрудника КАК ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.НомерСтроки
	|ПОМЕСТИТЬ ВТСтрокиПоложительныхДоходов
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО НачисленияДокумента.Подразделение = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеДоходы КАК ОтрицательныеДоходы
	|		ПО (ЕСТЬNULL(ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) = ОтрицательныеДоходы.РегистрацияВНалоговомОргане)
	|			И (ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) = ОтрицательныеДоходы.КодДоходаНДФЛ)
	|			И НачисленияДокумента.ФизическоеЛицо = ОтрицательныеДоходы.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияДокумента.СуммаДохода <> 0
	|			ИЛИ НачисленияДокумента.СуммаВычета <> 0)
	|	И ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И ОтрицательныеДоходы.ФизическоеЛицо ЕСТЬ NULL 
	|	И НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычетаНДФЛ,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение
	|ПОМЕСТИТЬ ВТПоложительныеДоходы
	|ИЗ
	|	ВТСтрокиПоложительныхДоходов КАК НачисленияДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	НачисленияДокумента.Начисление,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.ПодразделениеОрганизации,
	|	НачисленияДокумента.Подразделение";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда // Могли остаться только положительные доходы.
		УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперации, ДатаВыплаты, Запрос.МенеджерВременныхТаблиц, МесяцНачисления, Ложь, ОкончательныйРасчет, "ВТПоложительныеДоходы", ИсключаемыйРегистратор, МенеджерКадровогоУчета, ДоходПолученНаТерриторииРФ);
	КонецЕсли;
		
	// Описание алгоритма:
	// 1. Получаем ВТ из начислений документа, где суммируем доход и вычет в разрезе группировок.
	// 2. Получаем две ВТ со сторно и без сторно по выборке из первой ВТ.
	// 3. Получаем ВТ, выполнив "полное соединение" с двумя ВТ полученными на шаге 2, 
	// получаем разницу по суммам дохода и суммам вычета в разрезе группировок между сторно и не сторно записями. 
	// Группировка сторно будет истина - если сумма дохода по сторнируемым записям больше, чем по не сторнируемым.
	// 4. Получаем ТЗ по выборке из начислений документа с добавленным полем Код дохода НДФЛ.
	//
	// Таким образом, мы получаем выборку на шаге 3, в которой есть сумма в разрезе группировок, которые надо распределить 
	// по ТЗ, которая получается на шаге 4.
	//
	// 5. Выполняем распределение и подставляем полученные данные в запрос, используемый ранее.
	//
	// Таким образом, на шаге 1-3 мы не используем поля "Номер строки" и "Сторнируемый документ" из таблицы начислений,
	// а получаем выборку сумм - разницу между сторно и не сторно.
	// На шаге 4 мы получаем начисления с номерами строк, на которую мы кодом распределим сумму с шага 3. 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияДокумента.Сотрудник КАК Сотрудник,
	|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление) КАК КодДохода,
	|	НачисленияДокумента.ДатаНачала КАК ДатаНачала,
	|	НачисленияДокумента.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	НачисленияДокумента.Подразделение КАК Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НачисленияДокумента.Сторно КАК Сторно,
	|	СУММА(НачисленияДокумента.СуммаДохода) КАК СуммаДохода,
	|	СУММА(НачисленияДокумента.СуммаВычета) КАК СуммаВычета
	|ПОМЕСТИТЬ ВТСтрокиДоходовПоКодамДохода
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияДокумента.Начисление = Начисления.Ссылка
	|ГДЕ
	|	НЕ НачисленияДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					СтрокиПоложительныхДоходов.НомерСтроки
	|				ИЗ
	|					ВТСтрокиПоложительныхДоходов КАК СтрокиПоложительныхДоходов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияДокумента.Сотрудник,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияДокумента.Начисление),
	|	НачисленияДокумента.КодВычетаНДФЛ,
	|	НачисленияДокумента.Сторно,
	|	НачисленияДокумента.ФизическоеЛицо,
	|	НачисленияДокумента.ДатаНачала,
	|	НачисленияДокумента.Подразделение,
	|	НачисленияДокумента.ПодразделениеСотрудника,
	|	НачисленияДокумента.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВложенныйЗапрос.КодДохода КАК КодДоходаНДФЛ,
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	ВложенныйЗапрос.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ВложенныйЗапрос.СуммаДохода) < 0 КАК Сторно,
	|	СУММА(ВложенныйЗапрос.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВложенныйЗапрос.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТСтрокиДоходовПоКодамДохода.Сотрудник КАК Сотрудник,
	|		ВТСтрокиДоходовПоКодамДохода.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВТСтрокиДоходовПоКодамДохода.КодДохода КАК КодДохода,
	|		ВТСтрокиДоходовПоКодамДохода.ДатаНачала КАК ДатаНачала,
	|		ВТСтрокиДоходовПоКодамДохода.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|		ВТСтрокиДоходовПоКодамДохода.Подразделение КАК Подразделение,
	|		ВТСтрокиДоходовПоКодамДохода.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|		ВТСтрокиДоходовПоКодамДохода.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		ВТСтрокиДоходовПоКодамДохода.СуммаДохода КАК СуммаДохода,
	|		ВТСтрокиДоходовПоКодамДохода.СуммаВычета КАК СуммаВычета
	|	ИЗ
	|		ВТСтрокиДоходовПоКодамДохода КАК ВТСтрокиДоходовПоКодамДохода
	|	ГДЕ
	|		НЕ ВТСтрокиДоходовПоКодамДохода.Сторно
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТСтрокиДоходовПоКодамДохода.Сотрудник,
	|		ВТСтрокиДоходовПоКодамДохода.ФизическоеЛицо,
	|		ВТСтрокиДоходовПоКодамДохода.КодДохода,
	|		ВТСтрокиДоходовПоКодамДохода.ДатаНачала,
	|		ВТСтрокиДоходовПоКодамДохода.КодВычетаНДФЛ,
	|		ВТСтрокиДоходовПоКодамДохода.Подразделение,
	|		ВТСтрокиДоходовПоКодамДохода.ПодразделениеСотрудника,
	|		ВТСтрокиДоходовПоКодамДохода.РегистрацияВНалоговомОргане,
	|		ВТСтрокиДоходовПоКодамДохода.СуммаДохода,
	|		ВТСтрокиДоходовПоКодамДохода.СуммаВычета
	|	ИЗ
	|		ВТСтрокиДоходовПоКодамДохода КАК ВТСтрокиДоходовПоКодамДохода
	|	ГДЕ
	|		ВТСтрокиДоходовПоКодамДохода.Сторно) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.КодВычетаНДФЛ,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.ПодразделениеСотрудника,
	|	ВложенныйЗапрос.ФизическоеЛицо,
	|	ВложенныйЗапрос.КодДохода,
	|	ВложенныйЗапрос.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	|	СтрокиДокумента.Сотрудник КАК Сотрудник,
	|	СтрокиДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, СтрокиДокумента.Начисление) КАК КодДоходаНДФЛ,
	|	СтрокиДокумента.Начисление КАК Начисление,
	|	СтрокиДокумента.ДатаНачала КАК ДатаНачала,
	|	СтрокиДокумента.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	СтрокиДокумента.СуммаДохода КАК СуммаДохода,
	|	СтрокиДокумента.СуммаВычета КАК СуммаВычета,
	|	СтрокиДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СтрокиДокумента.Подразделение КАК Подразделение,
	|	СтрокиДокумента.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СтрокиДокумента.Сторно КАК Сторно,
	|	СтрокиДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	ВТНачисленияДокумента КАК СтрокиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО СтрокиДокумента.Начисление = Начисления.Ссылка
	|ГДЕ
	|	НЕ СтрокиДокумента.НомерСтроки В
	|				(ВЫБРАТЬ
	|					СтрокиДокументаСПарнымиНачислениями.НомерСтроки
	|				ИЗ
	|					ВТСтрокиДокументаСПарнымиНачислениями КАК СтрокиДокументаСПарнымиНачислениями
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					СтрокиПоложительныхДоходов.НомерСтроки
	|				ИЗ
	|					ВТСтрокиПоложительныхДоходов КАК СтрокиПоложительныхДоходов)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	Выборка				= РезультатЗапроса[1].Выбрать();
	ТЗКРаспределению	= РезультатЗапроса[2].Выгрузить();
	
	ПараметрыОтбора = Новый Структура("Сотрудник,ФизическоеЛицо,КодДоходаНДФЛ,КодВычетаНДФЛ,ДатаНачала,Подразделение," +
									  "ПодразделениеСотрудника,РегистрацияВНалоговомОргане,Сторно");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора,Выборка);
		СтрокиКРаспределению = ТЗКРаспределению.НайтиСтроки(ПараметрыОтбора);
		
		СуммаДохода = Выборка.СуммаДохода;
		СуммаВычета = Выборка.СуммаВычета;
		
		Если СуммаДохода = 0 И СуммаВычета = 0 Тогда
			Для Каждого УдаляемаяСтрока Из СтрокиКРаспределению Цикл
				ТЗКРаспределению.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		Иначе
			Коэффициенты				= ОбщегоНазначения.ВыгрузитьКолонку(СтрокиКРаспределению, "СуммаДохода");
			РаспределенныеСуммыДохода	= ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаДохода, Коэффициенты);
			
			Коэффициенты				= ОбщегоНазначения.ВыгрузитьКолонку(СтрокиКРаспределению, "СуммаВычета");
			РаспределенныеСуммыВычета	= ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СуммаВычета, Коэффициенты);
			
			Для Индекс = 0 По Коэффициенты.ВГраница() Цикл 
				СтрокиКРаспределению[Индекс].СуммаДохода	= ?(СуммаДохода = 0, 0, РаспределенныеСуммыДохода[Индекс]);
				СтрокиКРаспределению[Индекс].СуммаВычета	= ?(СуммаВычета = 0, 0, РаспределенныеСуммыВычета[Индекс]);
			КонецЦикла;
		КонецЕсли;
		
		// Если суммы сторно меньше чем суммы доходов (и наоборот), то очистим эти строки 
		ПараметрыОтбора.Сторно = Не ПараметрыОтбора.Сторно;
		СтрокиКУдалению = ТЗКРаспределению.НайтиСтроки(ПараметрыОтбора);
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			ТЗКРаспределению.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВТСтрокиДоходовПоКодамДохода",ТЗКРаспределению);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.ДатаНачала КАК ДатаНачала,
	|	ДанныеДокумента.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	ДанныеДокумента.СуммаДохода КАК СуммаДохода,
	|	ДанныеДокумента.СуммаВычета КАК СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно КАК Сторно,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписямиБезПарныхСтрок
	|ИЗ
	|	&ВТСтрокиДоходовПоКодамДохода КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДокумента.Начисление КАК Начисление,
	|	ДанныеДокумента.ДатаНачала КАК ДатаНачала,
	|	ДанныеДокумента.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	ДанныеДокумента.СуммаДохода КАК СуммаДохода,
	|	ДанныеДокумента.СуммаВычета КАК СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно КАК Сторно,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТНачисленияСоСторноЗаписями
	|ИЗ
	|	ВТНачисленияСоСторноЗаписямиПоПарнымСтрокам КАК ДанныеДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.ДатаНачала,
	|	ДанныеДокумента.КодВычетаНДФЛ,
	|	ДанныеДокумента.СуммаДохода,
	|	ДанныеДокумента.СуммаВычета,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.ПодразделениеСотрудника,
	|	ДанныеДокумента.Сторно,
	|	ДанныеДокумента.СторнируемыйДокумент
	|ИЗ
	|	ВТНачисленияСоСторноЗаписямиБезПарныхСтрок КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСоСторноЗаписями.НомерСтроки КАК НомерСтроки,
	|	НачисленияСоСторноЗаписями.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
	|ГДЕ
	|	НачисленияСоСторноЗаписями.Сторно";
	
	ТаблицаСторнируемыхДокументов = Запрос.Выполнить().Выгрузить();
		
	ТаблицаПромежуточныхИсправлений = ТаблицаСторнируемыхДокументов.СкопироватьКолонки("СторнируемыйДокумент");
	ТаблицаПромежуточныхИсправлений.Колонки.Добавить("ПромежуточноеИсправление", ТаблицаСторнируемыхДокументов.Колонки.СторнируемыйДокумент.ТипЗначения);
	УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений);
	УточнитьСторнируемыеПоНачислениям(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений, Запрос.МенеджерВременныхТаблиц, "ВТНачисленияСоСторноЗаписями");
	Запрос.УстановитьПараметр("ТаблицаСторнируемыхДокументов", ТаблицаСторнируемыхДокументов);
	Запрос.УстановитьПараметр("ТаблицаПромежуточныхИсправлений", ТаблицаПромежуточныхИсправлений);
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСторнируемыхДокументов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСторнируемыхДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаСторнируемыхДокументов
	|ИЗ
	|	&ТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление КАК ПромежуточноеИсправление,
	|	ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТТаблицаПромежуточныхИсправлений
	|ИЗ
	|	&ТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ДокументОснование КАК Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСведенияРегистраБезУточнений
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СторноЗаписи.СторнируемыйДокумент КАК Документ
	|		ИЗ
	|			ВТТаблицаСторнируемыхДокументов КАК СторноЗаписи) КАК СторнируемыеДокументы
	|		ПО СведенияОДоходахНДФЛ.ДокументОснование = СторнируемыеДокументы.Документ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Начисления.ФизическоеЛицо
	|			ИЗ
	|				ВТНачисленияСоСторноЗаписями КАК Начисления)
	|	И (НЕ СведенияОДоходахНДФЛ.ДокументОснование ССЫЛКА Документ.НачислениеЗарплаты
	|			ИЛИ СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.ДокументОснование,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияРегистраБезУточнений.Регистратор КАК Регистратор,
	|	СведенияРегистраБезУточнений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияРегистраБезУточнений.КодДохода КАК КодДохода,
	|	МИНИМУМ(СведенияРегистраБезУточнений.МесяцНалоговогоПериода) КАК МесяцНалоговогоПериода,
	|	МИНИМУМ(СведенияРегистраБезУточнений.ДатаПолученияДохода) КАК ДатаПолученияДохода,
	|	СведенияРегистраБезУточнений.Начисление КАК Начисление,
	|	СведенияРегистраБезУточнений.Подразделение КАК Подразделение,
	|	СведенияРегистраБезУточнений.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияРегистраБезУточнений.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияРегистраБезУточнений.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСторнируемыеСтрокиДоходов
	|ИЗ
	|	ВТСведенияРегистраБезУточнений КАК СведенияРегистраБезУточнений
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияРегистраБезУточнений.Регистратор,
	|	СведенияРегистраБезУточнений.ФизическоеЛицо,
	|	СведенияРегистраБезУточнений.КодДохода,
	|	СведенияРегистраБезУточнений.Начисление,
	|	СведенияРегистраБезУточнений.Подразделение,
	|	СведенияРегистраБезУточнений.ПодразделениеСотрудника,
	|	СведенияРегистраБезУточнений.РегистрацияВНалоговомОргане,
	|	СведенияРегистраБезУточнений.ИсточникДоходаЗаПределамиРФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК Ключ,
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) КАК СуммаДохода,
	|	СУММА(СведенияОДоходахНДФЛ.СуммаВычета) КАК СуммаВычета,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ
	|ПОМЕСТИТЬ ВТСведенияРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|		СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходахНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|		СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|		СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|		СведенияОДоходахНДФЛ.СуммаДохода КАК СуммаДохода,
	|		СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаВычета,
	|		СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	|		СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|		СведенияОДоходахНДФЛ.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
	|		СведенияОДоходахНДФЛ.ДатаПолученияДохода КАК ДатаПолученияДохода
	|	ИЗ
	|		ВТСведенияРегистраБезУточнений КАК СведенияОДоходахНДФЛ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтрокиДоходов.Регистратор,
	|		СтрокиДоходов.ФизическоеЛицо,
	|		СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|		СтрокиДоходов.КодДохода,
	|		СтрокиДоходов.РегистрацияВНалоговомОргане,
	|		СтрокиДоходов.ИсточникДоходаЗаПределамиРФ,
	|		СУММА(СведенияОДоходахНДФЛ.СуммаДохода),
	|		СУММА(СведенияОДоходахНДФЛ.СуммаВычета),
	|		СтрокиДоходов.Начисление,
	|		СтрокиДоходов.Подразделение,
	|		СтрокиДоходов.ПодразделениеСотрудника,
	|		СведенияОДоходахНДФЛ.ДатаПолученияДохода
	|	ИЗ
	|		ВТСторнируемыеСтрокиДоходов КАК СтрокиДоходов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПромежуточныхИсправлений КАК ТаблицаПромежуточныхИсправлений
	|			ПО СтрокиДоходов.Регистратор = ТаблицаПромежуточныхИсправлений.СторнируемыйДокумент
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|			ПО (ТаблицаПромежуточныхИсправлений.ПромежуточноеИсправление = СведенияОДоходахНДФЛ.ДокументОснование)
	|				И СтрокиДоходов.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо
	|				И СтрокиДоходов.Начисление = СведенияОДоходахНДФЛ.Начисление
	|				И СтрокиДоходов.Подразделение = СведенияОДоходахНДФЛ.Подразделение
	|				И СтрокиДоходов.РегистрацияВНалоговомОргане = СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
	|				И СтрокиДоходов.ИсточникДоходаЗаПределамиРФ = СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ
	|	ГДЕ
	|		СведенияОДоходахНДФЛ.ФизическоеЛицо ЕСТЬ НЕ NULL 
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтрокиДоходов.Регистратор,
	|		СтрокиДоходов.ФизическоеЛицо,
	|		СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|		СтрокиДоходов.КодДохода,
	|		СтрокиДоходов.РегистрацияВНалоговомОргане,
	|		СтрокиДоходов.ИсточникДоходаЗаПределамиРФ,
	|		СтрокиДоходов.Начисление,
	|		СтрокиДоходов.Подразделение,
	|		СтрокиДоходов.ПодразделениеСотрудника,
	|		СведенияОДоходахНДФЛ.ДатаПолученияДохода) КАК СведенияОДоходахНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахНДФЛ.Регистратор,
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.КодДохода,
	|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода,
	|	СведенияОДоходахНДФЛ.Начисление,
	|	СведенияОДоходахНДФЛ.Подразделение,
	|	СведенияОДоходахНДФЛ.ПодразделениеСотрудника,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.ИсточникДоходаЗаПределамиРФ
	|
	|ИМЕЮЩИЕ
	|	СУММА(СведенияОДоходахНДФЛ.СуммаДохода) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.КодДохода КАК Ссылка
	|ПОМЕСТИТЬ ВТОплатаТруда
	|ИЗ
	|	ВТДополнительныеСвойстваКодаДохода КАК ВидыДоходовНДФЛ
	|ГДЕ
	|	ВидыДоходовНДФЛ.СоответствуетОплатеТруда
	|	И &НеУчитыватьОплатуТрудаПоДатеВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСоСторноЗаписями.НомерСтроки КАК НомерСтроки,
	|	НачисленияСоСторноЗаписями.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СведенияРегистра.Подразделение, НачисленияСоСторноЗаписями.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(СведенияРегистра.ПодразделениеСотрудника, НачисленияСоСторноЗаписями.ПодразделениеСотрудника) КАК ПодразделениеСотрудника,
	|	ЕСТЬNULL(СведенияРегистра.РегистрацияВНалоговомОргане, НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	СведенияРегистра.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
	|	ЕСТЬNULL(СведенияРегистра.ДатаПолученияДохода, ВЫБОР
	|			КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
	|					(ВЫБРАТЬ
	|						ОплатаТруда.Ссылка
	|					ИЗ
	|						ВТОплатаТруда КАК ОплатаТруда)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
	|								И Начисления.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
	|							ТОГДА &ДатаВыплаты
	|						КОГДА ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
	|								И ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ДанныеОСотруднике.ДатаУвольнения
	|						ИНАЧЕ ВЫБОР
	|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
	|									ТОГДА &КонецМесяцаНачисления
	|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
	|									ТОГДА КОНЕЦПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ)
	|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
	|									ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|								ИНАЧЕ &КонецМесяцаНачисления
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ &ДатаВыплаты
	|		КОНЕЦ) КАК ДатаПолученияДохода,
	|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) КАК КодДохода,
	|	ЕСТЬNULL(СведенияРегистра.МесяцНалоговогоПериода, НАЧАЛОПЕРИОДА(ВЫБОР
	|				КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
	|						(ВЫБРАТЬ
	|							ОплатаТруда.Ссылка
	|						ИЗ
	|							ВТОплатаТруда КАК ОплатаТруда)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
	|									И Начисления.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
	|								ТОГДА &ДатаВыплаты
	|							КОГДА ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
	|									И ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА ДанныеОСотруднике.ДатаУвольнения
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
	|										ТОГДА &КонецМесяцаНачисления
	|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
	|										ТОГДА КОНЕЦПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ)
	|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
	|										ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
	|									ИНАЧЕ &КонецМесяцаНачисления
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ &ДатаВыплаты
	|			КОНЕЦ, МЕСЯЦ)) КАК МесяцНалоговогоПериода,
	|	НачисленияСоСторноЗаписями.СуммаДохода КАК СуммаДохода,
	|	НачисленияСоСторноЗаписями.КодВычетаНДФЛ КАК КодВычета,
	|	НачисленияСоСторноЗаписями.СуммаВычета КАК СуммаВычета,
	|	НачисленияСоСторноЗаписями.Сотрудник КАК Сотрудник,
	|	Начисления.Ссылка КАК Начисление,
	|	ВЫБОР
	|		КОГДА СведенияРегистра.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьСторнируемыеДанныеУчета,
	|	СведенияРегистра.Ключ КАК КлючСведенийРегистра,
	|	ЕСТЬNULL(СведенияРегистра.СуммаДохода, 0) КАК СуммаДоходаВУчете,
	|	ЕСТЬNULL(СведенияРегистра.СуммаВычета, 0) КАК СуммаВычетаВУчете
	|ПОМЕСТИТЬ ВТНачисленияСоСведениямиРегистра
	|ИЗ
	|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСторнируемыхДокументов КАК ТаблицаСторнируемыхДокументов
	|		ПО НачисленияСоСторноЗаписями.НомерСтроки = ТаблицаСторнируемыхДокументов.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольненияНДФЛ КАК ДанныеОСотруднике
	|		ПО НачисленияСоСторноЗаписями.Сотрудник = ДанныеОСотруднике.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО НачисленияСоСторноЗаписями.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияРегистра КАК СведенияРегистра
	|		ПО (ТаблицаСторнируемыхДокументов.СторнируемыйДокумент = СведенияРегистра.Регистратор)
	|			И НачисленияСоСторноЗаписями.ФизическоеЛицо = СведенияРегистра.ФизическоеЛицо
	|			И НачисленияСоСторноЗаписями.Подразделение = СведенияРегистра.Подразделение
	|			И НачисленияСоСторноЗаписями.ПодразделениеСотрудника = СведенияРегистра.ПодразделениеСотрудника
	|			И НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане = СведенияРегистра.РегистрацияВНалоговомОргане
	|			И (НачисленияСоСторноЗаписями.Сторно)
	|			И (НачисленияСоСторноЗаписями.Начисление = СведенияРегистра.Начисление
	|				ИЛИ НачисленияСоСторноЗаписями.Начисление = СведенияРегистра.КодДохода)
	|ГДЕ
	|	(НачисленияСоСторноЗаписями.СуммаДохода <> 0
	|			ИЛИ НачисленияСоСторноЗаписями.СуммаВычета <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
	|	-НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаСторнирования,
	|	СУММА(НачисленияСоСведениямиРегистра.СуммаДоходаВУчете) КАК СуммаВУчете,
	|	МИНИМУМ(НачисленияСоСведениямиРегистра.ДатаПолученияДохода) КАК РанняяДатаПолученияДохода
	|ПОМЕСТИТЬ ВТНекомпенсированныеСторноНачисления
	|ИЗ
	|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
	|ГДЕ
	|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСоСведениямиРегистра.НомерСтроки,
	|	-НачисленияСоСведениямиРегистра.СуммаДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияРегистра.Ключ КАК Ключ,
	|	СведенияРегистра.СуммаДохода КАК СуммаДоходаВУчете,
	|	СведенияРегистра.СуммаВычета КАК СуммаВычетаВУчете
	|ИЗ
	|	ВТСведенияРегистра КАК СведенияРегистра";
	СведенияРегистра = Запрос.Выполнить().Выгрузить();
	
	Если ДоходПолученНаТерриторииРФ Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияСоСведениямиРегистра.Подразделение КАК Подразделение,
		|	НачисленияСоСведениямиРегистра.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	НачисленияСоСведениямиРегистра.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ЛОЖЬ КАК ИсточникДоходаЗаПределамиРФ,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	НачисленияСоСведениямиРегистра.КодДохода КАК КодДохода,
		|	НачисленияСоСведениямиРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаДохода,
		|	НачисленияСоСведениямиРегистра.КодВычета КАК КодВычета,
		|	НачисленияСоСведениямиРегистра.СуммаВычета КАК СуммаВычета,
		|	НачисленияСоСведениямиРегистра.Сотрудник КАК Сотрудник,
		|	НачисленияСоСведениямиРегистра.Начисление КАК Начисление,
		|	ЕСТЬNULL(НачисленияСоСведениямиРегистра.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ДатаПолученияДоходаФиксирована,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ЕстьСторнируемыеДанныеУчета,
		|	НачисленияСоСведениямиРегистра.КлючСведенийРегистра КАК КлючСведенийРегистра
		|ИЗ
		|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
		|		ПО НачисленияСоСведениямиРегистра.НомерСтроки = СторноНачисления.НомерСтроки
		|ГДЕ
		|	(НЕ НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
		|			ИЛИ ЕСТЬNULL(СторноНачисления.СуммаСторнирования, 0) <= ЕСТЬNULL(СторноНачисления.СуммаВУчете, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСоСведениямиРегистра.НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода УБЫВ";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСоСведениямиРегистра.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияСоСведениямиРегистра.Подразделение КАК Подразделение,
		|	НачисленияСоСведениямиРегистра.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	НачисленияСоСведениямиРегистра.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВЫБОР
		|		КОГДА НачисленияСоСведениямиРегистра.ИсточникДоходаЗаПределамиРФ ЕСТЬ НЕ NULL 
		|			ТОГДА НачисленияСоСведениямиРегистра.ИсточникДоходаЗаПределамиРФ
		|		КОГДА СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникДоходаЗаПределамиРФ,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	НачисленияСоСведениямиРегистра.КодДохода КАК КодДохода,
		|	НачисленияСоСведениямиРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НачисленияСоСведениямиРегистра.СуммаДохода КАК СуммаДохода,
		|	НачисленияСоСведениямиРегистра.КодВычета КАК КодВычета,
		|	НачисленияСоСведениямиРегистра.СуммаВычета КАК СуммаВычета,
		|	НачисленияСоСведениямиРегистра.Сотрудник КАК Сотрудник,
		|	НачисленияСоСведениямиРегистра.Начисление КАК Начисление,
		|	ЕСТЬNULL(НачисленияСоСведениямиРегистра.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ДатаПолученияДоходаФиксирована,
		|	НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета КАК ЕстьСторнируемыеДанныеУчета,
		|	НачисленияСоСведениямиРегистра.КлючСведенийРегистра КАК КлючСведенийРегистра
		|ИЗ
		|	ВТНачисленияСоСведениямиРегистра КАК НачисленияСоСведениямиРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
		|		ПО НачисленияСоСведениямиРегистра.НомерСтроки = СторноНачисления.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
		|		ПО НачисленияСоСведениямиРегистра.ПодразделениеСотрудника = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
		|			И (НачисленияСоСведениямиРегистра.ДатаПолученияДохода МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)
		|ГДЕ
		|	(НЕ НачисленияСоСведениямиРегистра.ЕстьСторнируемыеДанныеУчета
		|			ИЛИ ЕСТЬNULL(СторноНачисления.СуммаСторнирования, 0) <= ЕСТЬNULL(СторноНачисления.СуммаВУчете, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачисленияСоСведениямиРегистра.НомерСтроки,
		|	НачисленияСоСведениямиРегистра.ДатаПолученияДохода УБЫВ";
	КонецЕсли;
	
	РегистрацияОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		Если Выборка.ЕстьСторнируемыеДанныеУчета Тогда
			
			СторноВсего = -Выборка.СуммаДохода;
			СторноВычета = -Выборка.СуммаВычета;
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаСведений = СведенияРегистра.Найти(Выборка.КлючСведенийРегистра, "Ключ");
				Если СтрокаСведений.СуммаДоходаВУчете = 0 Тогда
					Продолжить;
				КонецЕсли;
				СуммаДохода = -Мин(СторноВсего, СтрокаСведений.СуммаДоходаВУчете);
				СторноВсего = СторноВсего + СуммаДохода;
				СтрокаСведений.СуммаДоходаВУчете = СтрокаСведений.СуммаДоходаВУчете + СуммаДохода;
				Если СторноВычета = 0 Тогда
					СуммаВычета = 0
				Иначе
					СуммаВычета = -Мин(СторноВычета, СтрокаСведений.СуммаВычетаВУчете);
					СторноВычета = СторноВычета + СуммаВычета;
					СтрокаСведений.СуммаВычетаВУчете = СтрокаСведений.СуммаВычетаВУчете + СуммаВычета;
				КонецЕсли;
				
				НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
				УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
				НоваяСтрока.СуммаДохода	= СуммаДохода;
				НоваяСтрока.СуммаВычета	= СуммаВычета;
				
				Если СторноВсего = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
			УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
			
		КонецЕсли;
	КонецЦикла;
	
	// Теперь поищем отменяемые начисления по периоду действия.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СторноНачисления.НомерСтроки,
	|	СторноНачисления.РанняяДатаПолученияДохода
	|ПОМЕСТИТЬ ВТСтрокиСторноПериода
	|ИЗ
	|	ВТНекомпенсированныеСторноНачисления КАК СторноНачисления
	|ГДЕ
	|	СторноНачисления.СуммаСторнирования > СторноНачисления.СуммаВУчете";
	Если Запрос.Выполнить().Выгрузить()[0].Количество > 0 Тогда 
		
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСоСторноЗаписями.НомерСтроки КАК НомерСтроки,
		|	НачисленияСоСторноЗаписями.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(СведенияОДоходах.Подразделение, НачисленияСоСторноЗаписями.Подразделение) КАК Подразделение,
		|	ЕСТЬNULL(СведенияОДоходах.ПодразделениеСотрудника, НачисленияСоСторноЗаписями.ПодразделениеСотрудника) КАК ПодразделениеСотрудника,
		|	ЕСТЬNULL(СведенияОДоходах.РегистрацияВНалоговомОргане, НачисленияСоСторноЗаписями.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
		|	СведенияОДоходах.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
		|	ЕСТЬNULL(СведенияОДоходах.ДатаПолученияДохода, ВЫБОР
		|			КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
		|					(ВЫБРАТЬ
		|						ОплатаТруда.Ссылка
		|					ИЗ
		|						ВТОплатаТруда КАК ОплатаТруда)
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
		|								И Начисления.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
		|							ТОГДА &ДатаВыплаты
		|						КОГДА ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
		|								И ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА ДанныеОСотруднике.ДатаУвольнения
		|						ИНАЧЕ ВЫБОР
		|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
		|									ТОГДА &КонецМесяцаНачисления
		|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
		|									ТОГДА КОНЕЦПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ)
		|								КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
		|									ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
		|								ИНАЧЕ &КонецМесяцаНачисления
		|							КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ &ДатаВыплаты
		|		КОНЕЦ) КАК ДатаПолученияДохода,
		|	ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) КАК КодДохода,
		|	ЕСТЬNULL(СведенияОДоходах.МесяцНалоговогоПериода, НАЧАЛОПЕРИОДА(ВЫБОР
		|				КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) В
		|						(ВЫБРАТЬ
		|							ОплатаТруда.Ссылка
		|						ИЗ
		|							ВТОплатаТруда КАК ОплатаТруда)
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(Начисления.КодДоходаНДФЛ, НачисленияСоСторноЗаписями.Начисление) = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
		|									И Начисления.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности)
		|								ТОГДА &ДатаВыплаты
		|							КОГДА ДанныеОСотруднике.ДатаУвольнения < &КонецМесяцаНачисления
		|									И ДанныеОСотруднике.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА ДанныеОСотруднике.ДатаУвольнения
		|							ИНАЧЕ ВЫБОР
		|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуНачисления)
		|										ТОГДА &КонецМесяцаНачисления
		|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
		|										ТОГДА КОНЕЦПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ)
		|									КОГДА Начисления.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПредшествующемуМесяцуПериодаДействия)
		|										ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(НачисленияСоСторноЗаписями.ДатаНачала, МЕСЯЦ), СЕКУНДА, -1)
		|									ИНАЧЕ &КонецМесяцаНачисления
		|								КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ &ДатаВыплаты
		|			КОНЕЦ, МЕСЯЦ)) КАК МесяцНалоговогоПериода,
		|	НачисленияСоСторноЗаписями.СуммаДохода КАК СуммаДохода,
		|	НачисленияСоСторноЗаписями.КодВычетаНДФЛ КАК КодВычета,
		|	НачисленияСоСторноЗаписями.СуммаВычета КАК СуммаВычета,
		|	НачисленияСоСторноЗаписями.Сотрудник КАК Сотрудник,
		|	Начисления.Ссылка КАК Начисление,
		|	ЕСТЬNULL(СведенияОДоходах.СуммаДохода, 0) КАК СуммаДоходаВУчете,
		|	ЕСТЬNULL(СведенияОДоходах.СуммаВычета, 0) КАК СуммаВычетаВУчете
		|ПОМЕСТИТЬ ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто
		|ИЗ
		|	ВТНачисленияСоСторноЗаписями КАК НачисленияСоСторноЗаписями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО НачисленияСоСторноЗаписями.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольненияНДФЛ КАК ДанныеОСотруднике
		|		ПО НачисленияСоСторноЗаписями.Сотрудник = ДанныеОСотруднике.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиСторноПериода КАК ТаблицаСторнируемыхСтрок
		|		ПО НачисленияСоСторноЗаписями.НомерСтроки = ТаблицаСторнируемыхСтрок.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
		|		ПО НачисленияСоСторноЗаписями.ФизическоеЛицо = СведенияОДоходах.ФизическоеЛицо
		|			И НачисленияСоСторноЗаписями.Начисление = СведенияОДоходах.Начисление
		|			И (СведенияОДоходах.Регистратор <> &ИсключаемыйРегистратор)
		|			И (СведенияОДоходах.Организация = &Организация)
		|			И (СведенияОДоходах.ДатаПолученияДохода >= ТаблицаСторнируемыхСтрок.РанняяДатаПолученияДохода)
		|ГДЕ
		|	(НачисленияСоСторноЗаписями.СуммаДохода <> 0
		|			ИЛИ НачисленияСоСторноЗаписями.СуммаВычета <> 0)
		|	И ТаблицаСторнируемыхСтрок.НомерСтроки ЕСТЬ НЕ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.НомерСтроки КАК НомерСтроки,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Подразделение КАК Подразделение,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ИсточникДоходаЗаПределамиРФ КАК ИсточникДоходаЗаПределамиРФ,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ДатаПолученияДохода КАК ДатаПолученияДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.КодДохода КАК КодДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаДохода КАК СуммаДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.КодВычета КАК КодВычета,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаВычета КАК СуммаВычета,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Сотрудник КАК Сотрудник,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Начисление КАК Начисление,
		|	СУММА(ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаДоходаВУчете) КАК СуммаДоходаВУчете,
		|	СУММА(ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаВычетаВУчете) КАК СуммаВычетаВУчете
		|ПОМЕСТИТЬ ВТНачисленияОтменяемыеПоПериодуДействия
		|ИЗ
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто КАК ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.НомерСтроки,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ФизическоеЛицо,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Подразделение,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ПодразделениеСотрудника,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.РегистрацияВНалоговомОргане,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ИсточникДоходаЗаПределамиРФ,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.ДатаПолученияДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.КодДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.МесяцНалоговогоПериода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаДохода,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.КодВычета,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.СуммаВычета,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Сотрудник,
		|	ВТНачисленияОтменяемыеПоПериодуДействияРазвернуто.Начисление";
		Запрос.Выполнить();
		
		Если ДоходПолученНаТерриторииРФ Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияОтменяемыеПоПериодуДействия.НомерСтроки КАК НомерСтроки,
			|	НачисленияОтменяемыеПоПериодуДействия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияОтменяемыеПоПериодуДействия.Подразделение КАК Подразделение,
			|	НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
			|	НачисленияОтменяемыеПоПериодуДействия.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ЛОЖЬ КАК ИсточникДоходаЗаПределамиРФ,
			|	НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодДохода КАК КодДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДохода КАК СуммаДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодВычета КАК КодВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычета КАК СуммаВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.Сотрудник КАК Сотрудник,
			|	НачисленияОтменяемыеПоПериодуДействия.Начисление КАК Начисление,
			|	ЕСТЬNULL(НачисленияОтменяемыеПоПериодуДействия.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
			|	ИСТИНА КАК ДатаПолученияДоходаФиксирована,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычетаВУчете КАК СуммаВычетаВУчете
			|ИЗ
			|	ВТНачисленияОтменяемыеПоПериодуДействия КАК НачисленияОтменяемыеПоПериодуДействия
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	ДатаПолученияДохода УБЫВ";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияОтменяемыеПоПериодуДействия.НомерСтроки КАК НомерСтроки,
			|	НачисленияОтменяемыеПоПериодуДействия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	НачисленияОтменяемыеПоПериодуДействия.Подразделение КАК Подразделение,
			|	НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника КАК ПодразделениеСотрудника,
			|	НачисленияОтменяемыеПоПериодуДействия.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ВЫБОР
			|		КОГДА НачисленияОтменяемыеПоПериодуДействия.ИсточникДоходаЗаПределамиРФ ЕСТЬ НЕ NULL 
			|			ТОГДА НачисленияОтменяемыеПоПериодуДействия.ИсточникДоходаЗаПределамиРФ
			|		КОГДА СтруктурныеЕдиницыЗаПределамиРФ.Подразделение ЕСТЬ НЕ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИсточникДоходаЗаПределамиРФ,
			|	НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода КАК ДатаПолученияДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодДохода КАК КодДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДохода КАК СуммаДохода,
			|	НачисленияОтменяемыеПоПериодуДействия.КодВычета КАК КодВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычета КАК СуммаВычета,
			|	НачисленияОтменяемыеПоПериодуДействия.Сотрудник КАК Сотрудник,
			|	НачисленияОтменяемыеПоПериодуДействия.Начисление КАК Начисление,
			|	ЕСТЬNULL(НачисленияОтменяемыеПоПериодуДействия.Начисление.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода,
			|	ИСТИНА КАК ДатаПолученияДоходаФиксирована,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаДоходаВУчете КАК СуммаДоходаВУчете,
			|	НачисленияОтменяемыеПоПериодуДействия.СуммаВычетаВУчете КАК СуммаВычетаВУчете
			|ИЗ
			|	ВТНачисленияОтменяемыеПоПериодуДействия КАК НачисленияОтменяемыеПоПериодуДействия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодразделенияЗаПределамиРФ КАК СтруктурныеЕдиницыЗаПределамиРФ
			|		ПО НачисленияОтменяемыеПоПериодуДействия.ПодразделениеСотрудника = СтруктурныеЕдиницыЗаПределамиРФ.Подразделение
			|			И (НачисленияОтменяемыеПоПериодуДействия.ДатаПолученияДохода МЕЖДУ СтруктурныеЕдиницыЗаПределамиРФ.ДатаНачала И СтруктурныеЕдиницыЗаПределамиРФ.ДатаОкончания)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки,
			|	ДатаПолученияДохода УБЫВ";
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СторноВсего = -Выборка.СуммаДохода;
			СторноВычета = -Выборка.СуммаВычета;
			Пока Выборка.Следующий() Цикл
				
				СуммаДохода = -Мин(СторноВсего, Выборка.СуммаДоходаВУчете);
				СторноВсего = СторноВсего + СуммаДохода;
				Если СторноВычета = 0 Тогда
					СуммаВычета = 0
				Иначе
					СуммаВычета = -Мин(СторноВычета, Выборка.СуммаВычетаВУчете);
					СторноВычета = СторноВычета + СуммаВычета;
				КонецЕсли;
				
				НоваяСтрока = УчетНДФЛ.СтрокаСведенийОДоходах(Движения.СведенияОДоходахНДФЛ, Организация, ДатаОперации, Выборка, ОкончательныйРасчет, ИсключаемыйРегистратор);
				УчетНДФЛ.ПроставитьРегистрациюВНалоговомОрганеВСтроке(НоваяСтрока, НоваяСтрока.РегистрацияВНалоговомОргане, РегистрацияОрганизации);
				НоваяСтрока.СуммаДохода	= СуммаДохода;
				НоваяСтрока.СуммаВычета	= СуммаВычета;
				
				Если СторноВсего = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	УчетНДФЛ.ПроставитьПорядокУчетаДоходовВ6НДФЛ(Движения, ИсключаемыйРегистратор); 
	
	Если Записывать Тогда
		Движения.СведенияОДоходахНДФЛ.Записать();
		Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	Иначе
		Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы, от базовой реализации отличается учетом расширенных настроек.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		МесяцНалоговогоПериода - дата -
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				КатегорияУдержания - тип ПеречислениеСсылка.КатегорииУдержаний.
//				Удержание - тип ПланВидовРасчетаСсылка.Удержания.
//				ДокументОснование - тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ, ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных
//				Сумма
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		ОкончательныйРасчет - булево - признак того, надо ли помечать движения как предназначенные для межрасчетного
//		                               исчисления налога.
//
Процедура СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНалоговогоПериода, Удержания, Записывать = Ложь, ОкончательныйРасчет = Истина) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Удержания", Удержания);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаОперации КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.КатегорияУдержания КАК КатегорияВзносов,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&Удержания КАК Удержания";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов КАК КатегорияУдержания,
	|	ДанныеДокумента.Удержание,
	|	ДанныеДокумента.Сумма
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)";
	
	УчетНДФЛБазовый.СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперации, МесяцНалоговогоПериода, Запрос.Выполнить().Выгрузить(), Записывать, ОкончательныйРасчет);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Удержания - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым
//				КатегорияВзносов: должно быть непустым, тип ПеречислениеСсылка.КатегорииУдержаний.
//				ДокументОснование - необязательное, тип ДокументСсылка.УдержаниеДобровольныхВзносовВНПФ,
//				                    ДокументСсылка.УдержаниеДобровольныхСтраховыхВзносов, ДокументСсылка.ПереносДанных.
//				НеПредоставлятьВычет - необязательное, булево.
//				ДействуетДо - необязательное, дата.
//				НеПредоставлятьВычетПоОкончании - необязательное, булево.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура СформироватьПрименениеСоциальныхВычетовПоУдержаниям(Движения, Отказ, Организация, ДатаОперации, Удержания, Записывать = Ложь) Экспорт
	
	Если Удержания = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЕстьНовыеСтроки = Ложь;
	Для Каждого СтрокаДанных Из Удержания Цикл
		ЕстьНовыеСтроки = Истина;
		НоваяСтрока = СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, СтрокаДанных);
	КонецЦикла;
	
	Если ЕстьНовыеСтроки Тогда
		Если Записывать Тогда
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записать();
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Ложь;
		Иначе
			Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Записывать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата, ПериодРегистрации - реквизиты регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//		ПеречислитьНалогПриВыплатеЗарплаты - булево - признак того, надо ли регистрировать исчисленный НДФЛ как удерживаемый при выплате з/пл.
//      ИмяТаблицыФизлиц - строка - используется при регистрации документа-регистратора как посчитавшего свой налог
//		ИмяВТНачисления - строка - имя вр. таблицы начислений, по умолчанию "ВТНачисления".
//		ЗасчитыватьДанныеАвансов - булево - признак того, надо ли ...
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(Регистратор, Движения, Отказ, Организация, Дата, ПериодРегистрации, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДанныеДляПроведения, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено, ДоходПолученНаТерриторииРФ = Ложь, ПеречислитьНалогПриВыплатеЗарплаты = Ложь, ИмяТаблицыФизлиц = "ВТФизическиеЛица", ИмяВТНачисления = "ВТНачисления", ЗасчитыватьДанныеАвансов = Ложь) Экспорт 

	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// регистрация доходов
	СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПериодРегистрации, Ложь, Не РегистрироватьСуммыНалога, ИмяВТНачисления, Регистратор, , ДоходПолученНаТерриторииРФ);
	
	СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, ?(УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(ПериодРегистрации, -1), ПланируемаяДатаВыплаты, ПериодРегистрации), ДанныеДляПроведения.УдержанияПоСотрудникам, Записывать, Ложь);
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, ?(ЗасчитыватьДанныеАвансов,Ложь,Записывать), Ложь, ПланируемаяДатаВыплаты);
		Если Движения.Найти("ДокументыУчтенныеПриРасчетеНДФЛ") <> Неопределено Тогда
			УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, Регистратор, ИмяТаблицыФизлиц, Записывать, ПеречислитьНалогПриВыплатеЗарплаты); 	
		КонецЕсли;
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогам);
		ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
		ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
		ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
		ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= ПериодРегистрации;
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= ПорядокВыплаты;
		ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
		ДанныеДляПроведенияУчетЗарплаты.ВыплатитьКакАванс 		= РегистрироватьДокументКакАвансБезНДФЛ(ПорядокВыплаты, ПеречислитьНалогПриВыплатеЗарплаты);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛПоСотрудникам(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НДФЛПоСотрудникам);
		
	КонецЕсли;
	
	// Если ранее были зарегистрированы "авансовые" доходы, их надо вычесть.
	Если ЗасчитыватьДанныеАвансов Тогда
		ДополнитьДвиженияСписаниемАванса(Регистратор, Движения, Организация, ДатаОперацииПоНалогам);
	КонецЕсли;
	
	// Дополняем доходы НДФЛ сведениями о распределении по статьям финансирования и/или статьям расходов.
	ОтражениеЗарплатыВУчетеРасширенный.ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения);
	
	Для каждого Движение Из Движения Цикл
	
		Если ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.СведенияОДоходахНДФЛ") Тогда
			Если Записывать Тогда
				Движения.СведенияОДоходахНДФЛ.Записать();
				Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
			Иначе
				Движения.СведенияОДоходахНДФЛ.Записывать = Истина;
			КонецЕсли;
		ИначеЕсли РегистрироватьСуммыНалога И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.РасчетыНалогоплательщиковСБюджетомПоНДФЛ") И Движение.Количество() > 0 Тогда
			Если Записывать Тогда
				Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записать();
				Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Ложь;
			Иначе
				Движения.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Записывать = Истина;
			КонецЕсли;
		ИначеЕсли РегистрироватьСуммыНалога И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.АвансовыеПлатежиИностранцевПоНДФЛ") И Движение.Количество() > 0 Тогда
			Если Записывать Тогда
				Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записать();
				Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Ложь;
			Иначе
				Движения.АвансовыеПлатежиИностранцевПоНДФЛ.Записывать = Истина;
			КонецЕсли;
		ИначеЕсли РегистрироватьСуммыНалога И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ") И Движение.Количество() > 0 Тогда
			Если Записывать Тогда
				Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записать();
				Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Ложь;
			Иначе
				Движения.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Записывать = Истина;
			КонецЕсли;
		ИначеЕсли РегистрироватьСуммыНалога И ТипЗнч(Движение) = Тип("РегистрНакопленияНаборЗаписей.ИмущественныеВычетыНДФЛ") И Движение.Количество() > 0 Тогда
			Если Записывать Тогда
				Движения.ИмущественныеВычетыНДФЛ.Записать();
				Движения.ИмущественныеВычетыНДФЛ.Записывать = Ложь;
			Иначе
				Движения.ИмущественныеВычетыНДФЛ.Записывать = Истина;
			КонецЕсли;
		Иначе
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата - дата - реквизит регистратора.
//		МесяцНачисления - дата.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицей ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		ТаблицаДоходов - ТаблицаЗначений - содержит колонки
//				ФизическоеЛицо: должно быть непустым.
//				Подразделение: тип СправочникСсылка.ПодразделенияОрганизаций
//      	    ДатаПолученияДохода: должно быть непустым
//				КодДохода
//				СуммаДохода
//      	    КодВычета
//          	СуммаВычета.
//				Сотрудник - необязательная, может отсутствовать.
//      	    Начисление - необязательная, может отсутствовать.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоТаблицеДоходов(Регистратор, Движения, Отказ, Организация, Дата, МесяцНачисления, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДанныеДляПроведения, ТаблицаДоходов, Записывать = Ложь, РегистрироватьСуммыНалога = Неопределено, ДоходПолученНаТерриторииРФ = Ложь) Экспорт 
	
	ДатаОперацииПоНалогам = ДатаОперацииПоДокументу(Дата, МесяцНачисления);
	
	Если РегистрироватьСуммыНалога = Неопределено Тогда 
		РегистрироватьСуммыНалога = РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// регистрация доходов
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ТаблицаДоходов, Истина, Не РегистрироватьСуммыНалога, Регистратор, ДоходПолученНаТерриторииРФ);
	
	СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, ?(УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления, -1), ПланируемаяДатаВыплаты, МесяцНачисления), ДанныеДляПроведения.УдержанияПоСотрудникам, Записывать, Ложь);
	
	Если РегистрироватьСуммыНалога Тогда
		
		// Регистрация исчисленного налога.
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, Записывать, Ложь, ПланируемаяДатаВыплаты);
		
		// Учет исчисленного налога в "зарплате".
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам, Организация, ДатаОперацииПоНалогам);
		
		ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
		ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
		ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
		ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= МесяцНачисления;
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= ПорядокВыплаты;
		ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛПоСотрудникам(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.НДФЛПоСотрудникам);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по НДФЛ: регистрирует доходы, вычеты и исчисленный налог (как в учете НДФЛ, так и в учете
// начисленной зарплаты).
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		Дата, ПериодРегистрации - реквизиты регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ПланируемаяДатаВыплаты - дата -
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					НДФЛ - таблица значений с данными об исчисленном НДФЛ и предоставленных вычетах.
//					УдержанияПоСотрудникам - таблица значений с данными о суммах удержаний.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыНалога - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//		ДоходПолученНаТерриторииРФ - булево - признак того, надо ли регистрировать доход как полученный за пределами РФ: 
//		                               если ДоходПолученНаТерриторииРФ = Истина, весь доход регистрируется как полученный из источников на территории РФ.
//		ПеречислитьНалогПриВыплатеЗарплаты - булево - признак того, надо ли регистрировать исчисленный НДФЛ как удерживаемый при выплате з/пл.
//      ИмяТаблицыФизлиц - строка - используется при регистрации документа-регистратора как посчитавшего свой налог
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПриНачисленииАванса(Регистратор, Движения, Отказ, Организация, Дата, ПериодРегистрации, ПланируемаяДатаВыплаты, ДанныеДляПроведения, Записывать, ИмяТаблицыФизлиц, ИмяВТНачисления) Экспорт 
	
	ДатаОперацииПоНалогам = УчетНДФЛ.ДатаОперацииПоДокументу(Дата, ПериодРегистрации);
	
	// регистрация доходов
	СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, ПериодРегистрации, , Ложь, ИмяВТНачисления, Регистратор);
	
	// Дополняем доходы НДФЛ сведениями о распределении по статьям финансирования и/или статьям расходов.
	ОтражениеЗарплатыВУчетеРасширенный.ДополнитьСведенияОДоходахНДФЛСведениямиОРаспределенииПоСтатьям(Движения, Истина);
	
	// Регистрация исчисленного налога.
	УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ, , Ложь, ПланируемаяДатаВыплаты);
	СформироватьСоциальныеВычетыПоУдержаниям(Регистратор, Движения, Отказ, Организация, ДатаОперацииПоНалогам, ?(УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(ПериодРегистрации, -1), ПланируемаяДатаВыплаты, ПериодРегистрации), ДанныеДляПроведения.УдержанияПоСотрудникам, , Ложь);
	УчетНДФЛ.СформироватьДокументыУчтенныеПриРасчетеДляМежрасчетногоДокументаПоВременнойТаблице(Движения, Отказ, Организация, ДанныеДляПроведения.МенеджерВременныхТаблиц, Регистратор, ИмяТаблицыФизлиц); 	
	
	// Пометим особым образом строки только что сформированных движений.
	ПереченьРегистров = Новый Массив;
	ПереченьРегистров.Добавить("СведенияОДоходахНДФЛ");
	ПереченьРегистров.Добавить("РасчетыНалогоплательщиковСБюджетомПоНДФЛ");
	ПереченьРегистров.Добавить("ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ");
	ПереченьРегистров.Добавить("ИмущественныеВычетыНДФЛ");
	ПереченьРегистров.Добавить("АвансовыеПлатежиИностранцевПоНДФЛ");
	Для каждого ИмяРегистра Из ПереченьРегистров Цикл
		Если ПроведениеСервер.ЕстьДвижения(Движения, ИмяРегистра) Тогда
			НаборЗаписей = Движения[ИмяРегистра];
			Для каждого СтрокаНабора Из НаборЗаписей Цикл
				СтрокаНабора.ЗарегистрированоПриНачисленииАванса = ПериодРегистрации;
				Если ИмяРегистра = "СведенияОДоходахНДФЛ" Тогда
					СтрокаНабора.ДоходМежрасчетногоПериода = Ложь
				ИначеЕсли ИмяРегистра = "РасчетыНалогоплательщиковСБюджетомПоНДФЛ" Тогда
					СтрокаНабора.РасчетМежрасчетногоПериода = Ложь
				ИначеЕсли ИмяРегистра = "ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ" Тогда
					СтрокаНабора.ВычетМежрасчетногоПериода = Ложь
				ИначеЕсли ИмяРегистра = "ИмущественныеВычетыНДФЛ" Тогда
					СтрокаНабора.ВычетМежрасчетногоПериода = Ложь
				Иначе
				КонецЕсли;
			КонецЦикла;
			Если Записывать Тогда
				НаборЗаписей.Записать();
				НаборЗаписей.Записывать = Ложь;
			Иначе
				НаборЗаписей.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Формирует движения по перечисленному НДФЛ с учетом зарегистрированных ранее авансов по налогу.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация 
//		ДатаОперации - дата
//		РеквизитыПлатежногоПоручения - строка.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаОперации, РеквизитыПлатежногоПоручения, Записывать = Ложь) Экспорт
	
	УчетНДФЛ.ЗарегистрироватьНДФЛПеречисленныйПоПлатежномуДокументу(Движения, Отказ, Организация, ДатаОперации, РеквизитыПлатежногоПоручения, Записывать)	
	
КонецПроцедуры

// Формирует движения для отражения в 6-НДФЛ сумм фактически полученных натуральных доходов.
// Из сформированных данных о доходах переписывает в регистр РасчетыНалогоплательщиковСБюджетомПоНДФЛ сведения о доходах, 
// не превышающих суммы вычета как фактически полученные без сумм налога.
//
// Параметры:
//		Движения - коллекция движений регистратора, должна содержать данные для регистра СведенияОДоходахНДФЛ.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации - должно быть непустым значением.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Записывать - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//
Процедура ПереписатьМалыеНатуральныеДоходыВФактическиПолученныеДоходы(Движения, Отказ, Организация, ДатаОперации, Записывать = Ложь) Экспорт 
	
	Если ДатаОперации >= УчетНДФЛ.ПараметрыРасчетаНДФЛПоПрогрессивнойШкале().НачалоРасчетаНДФЛПоПрогрессивнойШкале Тогда
		Возврат
	КонецЕсли;
	Если Движения.Найти("СведенияОДоходахНДФЛ") = Неопределено Или Движения.СведенияОДоходахНДФЛ.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	КолонкиДляКопирования = "ФизическоеЛицо,ДатаПолученияДохода,КодДохода,КатегорияДохода,РегистрацияВНалоговомОргане,СуммаДохода,СуммаВычета,Подразделение,ВключатьВДекларациюПоНалогуНаПрибыль,ДокументОснование";
	УдержанныйНалог = Движения.СведенияОДоходахНДФЛ.Выгрузить(, КолонкиДляКопирования);
	
	СтрокиКУдалению = Новый Соответствие;
	Для каждого СтрокаТаблицы Из УдержанныйНалог Цикл
	    Если СтрокаТаблицы.СуммаДохода > СтрокаТаблицы.СуммаВычета Тогда
			СтрокиКУдалению.Вставить(СтрокаТаблицы, Истина);
		КонецЕсли;
	    Если СтрокаТаблицы.КатегорияДохода <> Перечисления.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы Тогда
			СтрокиКУдалению.Вставить(СтрокаТаблицы, Истина);
		КонецЕсли;
	КонецЦикла;
	Если УдержанныйНалог.Количество() = СтрокиКУдалению.Количество() Тогда
		Возврат
	КонецЕсли;
	
	Для каждого Элемент Из СтрокиКУдалению Цикл
		УдержанныйНалог.Удалить(Элемент.Ключ)
	КонецЦикла;
	
	УдержанныйНалог.Колонки.Добавить("СтавкаНалогообложенияРезидента", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	ОписаниеКодовДохода = Новый Соответствие;
	Для каждого СтрокаТаблицы Из УдержанныйНалог Цикл
		Ставка = ОписаниеКодовДохода[СтрокаТаблицы.КодДохода];
		Если Ставка = Неопределено Тогда
			Ставка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.КодДохода, "СтавкаНалогообложенияРезидента");
			ОписаниеКодовДохода.Вставить(СтрокаТаблицы.КодДохода, Ставка)
		КонецЕсли;
		СтрокаТаблицы.СтавкаНалогообложенияРезидента = Ставка
	КонецЦикла;
	
	УдержанныйНалог.Колонки.ДатаПолученияДохода.Имя = "МесяцНалоговогоПериода";
	УдержанныйНалог.Колонки.СуммаДохода.Имя = "СуммаВыплаченногоДохода";
	УдержанныйНалог.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	УдержанныйНалог.Колонки.Добавить("УчитыватьВыплаченныйДоходВ6НДФЛ", Новый ОписаниеТипов("Булево"));
	УдержанныйНалог.ЗаполнитьЗначения(Истина, "УчитыватьВыплаченныйДоходВ6НДФЛ");
	
	УчетНДФЛ.СформироватьУдержанныйНалогПоТаблицеЗначений(Движения, Отказ, Организация, ДатаОперации, УдержанныйНалог, , Записывать, Ложь)	

КонецПроцедуры

// Заполняет данные для регистрации факта применения вычетов по результатам удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляПримененияСоциальныхВычетов(ДанныеДляПроведения, Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДокументУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Удержание.КатегорияУдержания КАК КатегорияВзносов,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ДокументУдержания.Ссылка.НеПредоставлятьСоциальныйВычетУРаботодателя
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НеПредоставлятьВычет
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ";
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"
			|	&ПустойДокументОснование КАК ДокументОснование,");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", МетаданныеДокумента.ПолноеИмя() + ".Удержания");
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДанныеДокумента",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ДанныеДокумента.КатегорияВзносов,
	|	ДанныеДокумента.ДокументОснование,
	|	ДанныеДокумента.ДействуетДо,
	|	ДанныеДокумента.НеПредоставлятьВычет,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ)
	|	КОНЕЦ КАК НеПредоставлятьВычетПоОкончании
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	ДанныеДляПроведения.Вставить("ПримененияСоциальныхВычетов",Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Взводит флажок ВключатьВДекларациюПоНалогуНаПрибыль в регистрах учета для доходов по акциям.
// 
// Параметры:
//		Движения - коллекция движений регистратора.
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
// 
Процедура УточнитьУчетНалогаПоЦеннымБумагам(Движения, Записывать = Ложь) Экспорт
	
	Если Движения.Найти("СведенияОДоходахНДФЛ") = Неопределено Или Движения.СведенияОДоходахНДФЛ.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Регистры = Новый Массив;
	Регистры.Добавить("ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ");
	Регистры.Добавить("РасчетыНалогоплательщиковСБюджетомПоНДФЛ");
	Регистры.Добавить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
	
	ДвиженияДокумента = Движения.СведенияОДоходахНДФЛ.Выгрузить();

	СтрокиВДекларациюПоНалогуНаПрибыль = ДвиженияДокумента.НайтиСтроки(Новый Структура("ВключатьВДекларациюПоНалогуНаПрибыль", Истина));
	Если СтрокиВДекларациюПоНалогуНаПрибыль.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если ДвиженияДокумента.Количество() = СтрокиВДекларациюПоНалогуНаПрибыль.Количество() Тогда
		
		КрайнийСрокУплаты = '00010101';
		Для каждого Регистр Из Регистры Цикл
			
			НаборЗаписей = Движения.Найти(Регистр);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УточнятьКрайнийСрокУплаты = Регистр = "РасчетыНалогоплательщиковСБюджетомПоНДФЛ";
			ПроставлятьКрайнийСрокУплаты = Регистр = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ" И ЗначениеЗаполнено(КрайнийСрокУплаты); 
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ВключатьВДекларациюПоНалогуНаПрибыль = Истина;
				Если УточнятьКрайнийСрокУплаты Тогда
					Запись.КрайнийСрокУплаты = '00010101';
				КонецЕсли;
				Если ПроставлятьКрайнийСрокУплаты Тогда
					Запись.КрайнийСрокУплаты = КрайнийСрокУплаты;
				КонецЕсли;
			КонецЦикла;
			Если УточнятьКрайнийСрокУплаты И НаборЗаписей.Количество() > 0 Тогда
				УчетНДФЛ.ПроставитьКрайнийСрокУплаты(НаборЗаписей, НаборЗаписей[0].Организация);
				Для каждого Запись Из НаборЗаписей Цикл
					Если Запись.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано Тогда
						КрайнийСрокУплаты = Запись.КрайнийСрокУплаты;
						Прервать;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				Если Записывать Тогда
					НаборЗаписей.Записать();
					НаборЗаписей.Записывать = Ложь;
				Иначе
					НаборЗаписей.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Движения", ДвиженияДокумента);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.ДатаПолученияДохода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
		|ПОМЕСТИТЬ ВТДвиженияДокумента
		|ИЗ
		|	&Движения КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ДатаПолученияДохода >= ДАТАВРЕМЯ(2014, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ ВТФизлицаСОднотипнымиДоходами
		|ИЗ
		|	ВТДвиженияДокумента КАК СведенияОДоходахНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода,
		|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизлицаСОднотипнымиДоходами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаСОднотипнымиДоходами.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	СведенияОДоходахНДФЛ.МесяцНалоговогоПериода
		|ИЗ
		|	ВТФизлицаСОднотипнымиДоходами КАК ФизлицаСОднотипнымиДоходами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДвиженияДокумента КАК СведенияОДоходахНДФЛ
		|		ПО ФизлицаСОднотипнымиДоходами.ФизическоеЛицо = СведенияОДоходахНДФЛ.ФизическоеЛицо
		|			И ФизлицаСОднотипнымиДоходами.МесяцНалоговогоПериода = СведенияОДоходахНДФЛ.МесяцНалоговогоПериода
		|			И ФизлицаСОднотипнымиДоходами.РегистрацияВНалоговомОргане = СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	РегистрацияВНалоговомОргане";
		ТаблицаФизлиц = Запрос.Выполнить().Выгрузить();
		
		СтруктураПоиска = Новый Структура("ФизическоеЛицо, РегистрацияВНалоговомОргане, МесяцНалоговогоПериода");
		Если ТаблицаФизлиц.Количество() > 100 Тогда
			ТаблицаФизлиц.Индексы.Добавить(СтруктураПоиска);
		КонецЕсли;
		
		КрайнийСрокУплаты = '00010101';
		Для каждого Регистр Из Регистры Цикл
			
			НаборЗаписей = Движения.Найти(Регистр);
			Если НаборЗаписей = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УточнятьКрайнийСрокУплаты = Регистр = "РасчетыНалогоплательщиковСБюджетомПоНДФЛ";
			ПроставлятьКрайнийСрокУплаты = Регистр = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ" И ЗначениеЗаполнено(КрайнийСрокУплаты); 
			Для каждого Запись Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
				СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(СтруктураПоиска.МесяцНалоговогоПериода);
				Если ТаблицаФизлиц.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
					Запись.ВключатьВДекларациюПоНалогуНаПрибыль = Истина;
					Если УточнятьКрайнийСрокУплаты Тогда
						Запись.КрайнийСрокУплаты = '00010101';
					КонецЕсли;
					Если ПроставлятьКрайнийСрокУплаты Тогда
						Запись.КрайнийСрокУплаты = КрайнийСрокУплаты;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если УточнятьКрайнийСрокУплаты И НаборЗаписей.Количество() > 0 Тогда
				УчетНДФЛ.ПроставитьКрайнийСрокУплаты(НаборЗаписей, НаборЗаписей[0].Организация);
				Для каждого Запись Из НаборЗаписей Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Запись);
					СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(СтруктураПоиска.МесяцНалоговогоПериода);
					Если ТаблицаФизлиц.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
						Если Запись.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано Тогда
							КрайнийСрокУплаты = Запись.КрайнийСрокУплаты;
							Прервать;	
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если НаборЗаписей.Модифицированность() Тогда
				Если Записывать Тогда
					НаборЗаписей.Записать();
					НаборЗаписей.Записывать = Ложь;
				Иначе
					НаборЗаписей.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКорректировкуДвижений(Набор, ПараметрыКорректировки) Экспорт
	Если ПараметрыКорректировки.ВидКорректировки = "ВосстановлениеДатПолученияДохода" Тогда
		ВосстановитьДатыПолученияДохода(Набор, ПараметрыКорректировки);
	КонецЕсли;
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения				 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент	 - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  ПараметрыИсправления	 - Структура					 - Свойства см. в описании функции СторнироватьПоУчетам модулей менеджеров документов.
//  ИсключаемыйРегистратор	 - ДокументСсылка				 - Документ, движения которого не следует учитывать при расчете движений.
//  Записывать				 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыИсправления = Неопределено, ИсключаемыйРегистратор = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетНДФЛРасширенный";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	ИсправлениеВТекущемПериоде = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ИсправлениеВТекущемПериоде") И ПараметрыИсправления.ИсправлениеВТекущемПериоде;
	ОтменаДокумента = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ОтменаДокумента") И ПараметрыИсправления.ОтменаДокумента;
	СторнироватьЗарегистрированноеПриНачисленииАванса = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("СторнироватьЗарегистрированноеПриНачисленииАванса") И ПараметрыИсправления.СторнироватьЗарегистрированноеПриНачисленииАванса;
	
	Если ОтменаДокумента И Не ИсправлениеВТекущемПериоде Тогда
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
		
		Для Каждого МетаданныеРегистра Из ИсключаемыеРегистры Цикл
			Если ДвиженияВСтруктуре Тогда
				Движения.Свойство(МетаданныеРегистра.Имя, Набор);
			Иначе
				Набор = Движения.Найти(МетаданныеРегистра.Имя);
			КонецЕсли;
			
			Если Набор <> Неопределено Тогда
				// Наборы для исключаемых регистров изолируются, но не сторнируются.
				ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИсправлениеВТекущемПериоде Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ;
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		Если Набор <> Неопределено И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			
			Запрос = Новый Запрос;
			
			ДокументИсправление = Набор.Отбор.Регистратор.Значение;
			Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключаемыйРегистратор = Неопределено, ДокументИсправление, ИсключаемыйРегистратор));
			Запрос.УстановитьПараметр("ДокументИсправление", ДокументИсправление);
			Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	РегистрНакопления.ДокументОснование = &ИсправленныйДокумент
			|	И РегистрНакопления.Регистратор <> &ИсключаемыйРегистратор
			|	И РегистрНакопления.Регистратор <> &ИсправленныйДокумент
			|	И РегистрНакопления.Регистратор <> &ДокументИсправление
			|	И НЕ РегистрНакопления.Сторно
			|	И &УсловиеДляНачисленногоВАванс
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	РегистрНакопления.Регистратор = &ИсправленныйДокумент
			|	И НЕ РегистрНакопления.Сторно
			|	И &УсловиеДляНачисленногоВАванс";
			Если СторнироватьЗарегистрированноеПриНачисленииАванса Тогда
				Запрос.УстановитьПараметр("УсловиеДляНачисленногоВАванс", Истина);
				Запрос.Текст = ТекстЗапроса;
			Иначе
				Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляНачисленногоВАванс", "РегистрНакопления.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)")
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
				
				СохраняемыеДатыДохода = Новый ТаблицаЗначений();
				СохраняемыеДатыДохода.Колонки.Добавить("СуммаДохода");
				СохраняемыеДатыДохода.Колонки.Добавить("СуммаВычета");
				КолонкиГруппировки = "ФизическоеЛицо,ДатаПолученияДохода,СтатьяФинансирования,СтатьяРасходов,Сотрудник,Подразделение,КодДохода,КатегорияДохода";
				Для Каждого Колонка Из СтрРазделить(КолонкиГруппировки, ",") Цикл
					СохраняемыеДатыДохода.Колонки.Добавить(Колонка);
				КонецЦикла;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					// Формирование сторно строк.
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
						НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
					КонецЦикла;
					НоваяСтрока.Сторно = Истина;
					
					// Формирование таблицы дат получения дохода для восстановления их после формирования новых движений.
					Если Выборка.ДокументОснование <> Выборка.Регистратор И Не Выборка.ДатаПолученияДоходаФиксирована
						И Не ЗначениеЗаполнено(Выборка.ЗарегистрированоПриНачисленииАванса) 
						И ЗначениеЗаполнено(Выборка.УстаревшаяДатаПолученияДохода) Тогда
						ЗаполнитьЗначенияСвойств(СохраняемыеДатыДохода.Добавить(), Выборка);
					КонецЕсли;
				КонецЦикла;
				
				Если СохраняемыеДатыДохода.Количество() > 0 Тогда
					ВариантыГруппировки = Новый Массив;
					ВариантыГруппировки.Добавить(КолонкиГруппировки);
					ВариантыГруппировки.Добавить("ФизическоеЛицо,ДатаПолученияДохода,СтатьяФинансирования,СтатьяРасходов,Сотрудник,Подразделение,КодДохода");
					ВариантыГруппировки.Добавить("ФизическоеЛицо,ДатаПолученияДохода,СтатьяФинансирования,СтатьяРасходов,Сотрудник,Подразделение");
					ВариантыГруппировки.Добавить("ФизическоеЛицо,ДатаПолученияДохода");
					
					ПараметрыКорректировки = Новый Структура;
					ПараметрыКорректировки.Вставить("ИмяМодуля", "УчетНДФЛРасширенный");
					ПараметрыКорректировки.Вставить("ВидКорректировки", "ВосстановлениеДатПолученияДохода");
					ПараметрыКорректировки.Вставить("ВариантыГруппировки", ВариантыГруппировки);
					ПараметрыКорректировки.Вставить("ПоляКорректировки", "ДатаПолученияДохода,МесяцНалоговогоПериода");
					ПараметрыКорректировки.Вставить("Ресурсы", "СуммаДохода,СуммаВычета");
					ПараметрыКорректировки.Вставить("СохраняемыеДатыДохода", СохраняемыеДатыДохода);
					ПараметрыКорректировки.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
					
					ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки);
				КонецЕсли;
					
				Если Записывать Тогда
					Набор.Записать();
					Набор.Записывать = Ложь;
				Иначе
					Набор.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ;
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(МетаданныеРегистра.Имя, Набор);
		Иначе
			Набор = Движения.Найти(МетаданныеРегистра.Имя);
		КонецЕсли;
		Если Набор <> Неопределено И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			
			Запрос = Новый Запрос;
			
			ДокументИсправление = Набор.Отбор.Регистратор.Значение;
			Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ?(ИсключаемыйРегистратор = Неопределено, ДокументИсправление, ИсключаемыйРегистратор));
			Запрос.УстановитьПараметр("ДокументИсправление", ДокументИсправление);
			Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	РегистрНакопления.ДокументОснование = &ИсправленныйДокумент
			|	И РегистрНакопления.Регистратор <> &ИсключаемыйРегистратор
			|	И РегистрНакопления.Регистратор <> &ИсправленныйДокумент
			|	И РегистрНакопления.Регистратор <> &ДокументИсправление
			|	И РегистрНакопления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И НЕ РегистрНакопления.Сторно
			|	И &УсловиеДляНачисленногоВАванс
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РегистрНакопления
			|ГДЕ
			|	РегистрНакопления.Регистратор = &ИсправленныйДокумент
			|	И РегистрНакопления.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И НЕ РегистрНакопления.Сторно
			|	И &УсловиеДляНачисленногоВАванс";
			Если СторнироватьЗарегистрированноеПриНачисленииАванса Тогда
				Запрос.УстановитьПараметр("УсловиеДляНачисленногоВАванс", Истина);
				Запрос.Текст = ТекстЗапроса;
			Иначе
				Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеДляНачисленногоВАванс", "РегистрНакопления.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)")
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				МетаданныеРесурсыРегистра = МетаданныеРегистра.Ресурсы;
				
				СохраняемыеДатыДохода = Новый ТаблицаЗначений();
				СохраняемыеДатыДохода.Колонки.Добавить("Сумма");
				КолонкиГруппировки = "ФизическоеЛицо,МесяцНалоговогоПериода,СтавкаНалогообложенияРезидента,КатегорияДохода,СрокПеречисления,Подразделение";
				Для Каждого Колонка Из СтрРазделить(КолонкиГруппировки, ",") Цикл
					СохраняемыеДатыДохода.Колонки.Добавить(Колонка);
				КонецЦикла;
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					// Формирование сторно строк.
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Для Каждого Ресурс Из МетаданныеРесурсыРегистра Цикл
						НоваяСтрока[Ресурс.Имя] = - НоваяСтрока[Ресурс.Имя];
					КонецЦикла;
					НоваяСтрока.Сторно = Истина;
					
					// Формирование таблицы дат получения дохода для восстановления их после формирования новых движений.
					Если Выборка.ДокументОснование <> Выборка.Регистратор И Не Выборка.ДатаПолученияДоходаФиксирована
						И Не ЗначениеЗаполнено(Выборка.ЗарегистрированоПриНачисленииАванса) 
						И ЗначениеЗаполнено(Выборка.УстаревшаяДатаПолученияДохода) Тогда
						ЗаполнитьЗначенияСвойств(СохраняемыеДатыДохода.Добавить(), Выборка);
					КонецЕсли;
				КонецЦикла;
				
				Если СохраняемыеДатыДохода.Количество() > 0 Тогда
					ВариантыГруппировки = Новый Массив;
					ВариантыГруппировки.Добавить(КолонкиГруппировки);
					ВариантыГруппировки.Добавить("ФизическоеЛицо,МесяцНалоговогоПериода,Подразделение");
					ВариантыГруппировки.Добавить("ФизическоеЛицо,МесяцНалоговогоПериода");
					
					ПараметрыКорректировки = Новый Структура;
					ПараметрыКорректировки.Вставить("ИмяМодуля", "УчетНДФЛРасширенный");
					ПараметрыКорректировки.Вставить("ВидКорректировки", "ВосстановлениеДатПолученияДохода");
					ПараметрыКорректировки.Вставить("ВариантыГруппировки", ВариантыГруппировки);
					ПараметрыКорректировки.Вставить("ПоляКорректировки", "МесяцНалоговогоПериода");
					ПараметрыКорректировки.Вставить("Ресурсы", "Сумма");
					ПараметрыКорректировки.Вставить("СохраняемыеДатыДохода", СохраняемыеДатыДохода);
					ПараметрыКорректировки.Вставить("ИсправленныйДокумент", ИсправленныйДокумент);
					ПараметрыКорректировки.Вставить("ДополнительнаяПроверкаФиксированныхСтрок", Истина);
					
					ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки);
				КонецЕсли;
				
				Если Записывать Тогда
					Набор.Записать();
					Набор.Записывать = Ложь;
				Иначе
					Набор.Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		ИмяРегистра = МетаданныеРегистра.Имя;
		
		Если ДвиженияВСтруктуре Тогда
			Движения.Свойство(ИмяРегистра, Набор);
		Иначе
			Набор = Движения.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			Если ИсправлениеВТекущемПериоде Тогда
				Если ИмяРегистра = "ИмущественныеВычетыНДФЛ" Или ИмяРегистра = "ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ" Тогда
					Если Не СторнироватьЗарегистрированноеПриНачисленииАванса Тогда
						ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра);
						СтрокиКУдалению = Новый Соответствие;
						Для каждого СтрокаНабора Из Набор Цикл
							Если Не СторнироватьЗарегистрированноеПриНачисленииАванса И ЗначениеЗаполнено(СтрокаНабора.ЗарегистрированоПриНачисленииАванса) Тогда
								СтрокиКУдалению.Вставить(СтрокаНабора, Истина)
							КонецЕсли;
						КонецЦикла;
						Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
							Набор.Удалить(УдаляемаяСтрока.Ключ);		
						КонецЦикла;	
						Если Записывать Тогда
							Набор.Записать();
							Набор.Записывать = Ложь;
						Иначе
							Набор.Записывать = Истина;
						КонецЕсли;
					Иначе 	
						ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
					КонецЕсли;  
				ИначеЕсли ИмяРегистра = "АвансовыеПлатежиИностранцевПоНДФЛ" Тогда
					Если Не СторнироватьЗарегистрированноеПриНачисленииАванса Тогда
						ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра);
						СтрокиКУдалению = Новый Соответствие;
						Для каждого СтрокаНабора Из Набор Цикл
							Если Не СторнироватьЗарегистрированноеПриНачисленииАванса И ЗначениеЗаполнено(СтрокаНабора.ЗарегистрированоПриНачисленииАванса) Тогда
								СтрокиКУдалению.Вставить(СтрокаНабора, Истина)
							КонецЕсли;
						КонецЦикла;
						Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
							Набор.Удалить(УдаляемаяСтрока.Ключ);		
						КонецЦикла;	
						Если Записывать Тогда
							Набор.Записать();
							Набор.Записывать = Ложь;
						Иначе
							Набор.Записывать = Истина;
						КонецЕсли;
					Иначе 	
						ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
					КонецЕсли;  
				Иначе
					ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
				КонецЕсли;
			Иначе	
				ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дописывает к движениям документов, начисливших з/пл за месяц, строки, обнуляющие движения по начислению аванса.
//
// Параметры:
//		Регистратор - ДокументСсылка -
//		Движения - коллекция движений регистратора.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата -
//      ПериодыРегистрацииСотрудников - ТаблицаЗначений - содержит как минимум колонку ПериодРегистрации (тип Дата)
//
Процедура ДополнитьДвиженияСписаниемАванса(Регистратор, Движения, Организация, ДатаОперации, ПериодыРегистрацииСотрудников = Неопределено) Экспорт
	УчетНДФЛ.ДополнитьДвиженияСписаниемАванса(Регистратор, Движения, Организация, ДатаОперации, ПериодыРегистрацииСотрудников);
КонецПроцедуры

Функция МежрасчетныйДокументИсчисляетНДФЛ(Организация, ИсчислятьНалогПриОкончательномРасчете, ПорядокВыплаты, СведенияОНачислениях, ДатаПолученияДохода = '00010101') Экспорт
	
	Если УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(ДатаПолученияДохода) Тогда
		Возврат Истина
	КонецЕсли;
	
	Если ТипЗнч(СведенияОНачислениях) = Тип("Булево") Тогда
		ОбязательныйРасчетНДФЛ = СведенияОНачислениях
	Иначе
		ОбязательныйРасчетНДФЛ = ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(СведенияОНачислениях)
	КонецЕсли;
	Возврат	ОбязательныйРасчетНДФЛ Или РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) 
		И Не ИсчислятьНалогПриОкончательномРасчете И Не ОтложитьРасчетНалогаВМежрасчетахДоРасчетаЗарплаты(Организация)

КонецФункции

Функция ИсчисленныйНалогСДоходами(ИсчисленныйНалог, НачисленныеДоходы, ДатаПолученияДохода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПолученияДохода", ДатаПолученияДохода);
	Запрос.УстановитьПараметр("ИсчисленныйНалог", ИсчисленныйНалог);
	Запрос.УстановитьПараметр("НачисленныеДоходы", НачисленныеДоходы);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Подразделение КАК Подразделение,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	&Сумма КАК Сумма,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогСДивидендовУплаченныйЗаРубежом КАК НалогСДивидендовУплаченныйЗаРубежом,
	|	0 КАК СуммаДоходаСКоторогоНеУдержанНалог,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДокументОснование КАК ДокументОснование,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована
	|ПОМЕСТИТЬ ВТИсчисленныйНалог
	|ИЗ
	|	&ИсчисленныйНалог КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода = &ДатаПолученияДохода
	|	И 0 > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета КАК СуммаДохода,
	|	СведенияОДоходахНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СведенияОДоходахНДФЛ.Подразделение КАК Подразделение,
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода,
	|	СведенияОДоходахНДФЛ.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТНачисленныеДоходы
	|ИЗ
	|	&НачисленныеДоходы КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.ДатаПолученияДохода = &ДатаПолученияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленныйНалог.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсчисленныйНалог.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ИсчисленныйНалог.КатегорияДохода КАК КатегорияДохода,
	|	ИсчисленныйНалог.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИсчисленныйНалог.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(0) КАК Сумма,
	|	СУММА(ИсчисленныйНалог.НалогНаПрибыльДляДивидендов) КАК НалогНаПрибыльДляДивидендов,
	|	СУММА(ИсчисленныйНалог.НалогСДивидендовУплаченныйЗаРубежом) КАК НалогСДивидендовУплаченныйЗаРубежом,
	|	СУММА(ИсчисленныйНалог.СуммаДоходаСКоторогоНеУдержанНалог) КАК СуммаДоходаСКоторогоНеУдержанНалог,
	|	ИсчисленныйНалог.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
	|	ИсчисленныйНалог.ДокументОснование КАК ДокументОснование,
	|	ИсчисленныйНалог.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТИтогиНалогов
	|ИЗ
	|	ВТИсчисленныйНалог КАК ИсчисленныйНалог
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленныйНалог.ФизическоеЛицо,
	|	ИсчисленныйНалог.СтавкаНалогообложенияРезидента,
	|	ИсчисленныйНалог.КатегорияДохода,
	|	ИсчисленныйНалог.РегистрацияВНалоговомОргане,
	|	ИсчисленныйНалог.МесяцНалоговогоПериода,
	|	ИсчисленныйНалог.ДатаПолученияДоходаФиксирована,
	|	ИсчисленныйНалог.ДокументОснование,
	|	ИсчисленныйНалог.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленныеДоходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленныеДоходы.СуммаДохода) КАК СуммаДохода,
	|	НачисленныеДоходы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НачисленныеДоходы.КатегорияДохода КАК КатегорияДохода,
	|	НачисленныеДоходы.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТИтогиДоходов
	|ИЗ
	|	ВТНачисленныеДоходы КАК НачисленныеДоходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО НачисленныеДоходы.КодДохода = ВидыДоходовНДФЛ.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленныеДоходы.ФизическоеЛицо,
	|	НачисленныеДоходы.РегистрацияВНалоговомОргане,
	|	НачисленныеДоходы.КатегорияДохода,
	|	ВидыДоходовНДФЛ.СтавкаНалогообложенияРезидента,
	|	НачисленныеДоходы.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогиНалогов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИтогиНалогов.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	ИтогиНалогов.КатегорияДохода КАК КатегорияДохода,
	|	ИтогиНалогов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ИтогиНалогов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	0 КАК Сумма,
	|	ИтогиНалогов.НалогНаПрибыльДляДивидендов КАК НалогНаПрибыльДляДивидендов,
	|	ИтогиНалогов.НалогСДивидендовУплаченныйЗаРубежом КАК НалогСДивидендовУплаченныйЗаРубежом,
	|	ЕСТЬNULL(ИтогиДоходов.СуммаДохода, ИтогиНалогов.СуммаДоходаСКоторогоНеУдержанНалог) КАК СуммаДоходаСКоторогоНеУдержанНалог,
	|	ИтогиНалогов.ДатаПолученияДоходаФиксирована КАК ДатаПолученияДоходаФиксирована,
	|	ИтогиНалогов.ДокументОснование КАК ДокументОснование,
	|	ИтогиНалогов.Подразделение КАК Подразделение
	|ИЗ
	|	ВТИтогиНалогов КАК ИтогиНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтогиДоходов КАК ИтогиДоходов
	|		ПО ИтогиНалогов.ФизическоеЛицо = ИтогиДоходов.ФизическоеЛицо
	|			И ИтогиНалогов.СтавкаНалогообложенияРезидента = ИтогиДоходов.СтавкаНалогообложенияРезидента
	|			И ИтогиНалогов.КатегорияДохода = ИтогиДоходов.КатегорияДохода
	|			И ИтогиНалогов.РегистрацияВНалоговомОргане = ИтогиДоходов.РегистрацияВНалоговомОргане
	|			И ИтогиНалогов.Подразделение = ИтогиДоходов.Подразделение";

	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + "
	|	ВЫБОР
	|		КОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ." + ИмяРесурса + " > 0
	|			ТОГДА РасчетыНалогоплательщиковСБюджетомПоНДФЛ." + ИмяРесурса + "
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК " + ИмяРесурса + "," + Символы.ПС;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Сумма КАК Сумма,", ТекстНалогов);
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "ИЛИ ", "") + "РасчетыНалогоплательщиковСБюджетомПоНДФЛ." + ИмяРесурса + " > 0 ";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И 0 > 0", "И (" + ТекстНалогов + ")");
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + "ИтогиНалогов." + ИмяРесурса + " КАК " + ИмяРесурса + "," + Символы.ПС;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "0 КАК Сумма,", ТекстНалогов);
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + "СУММА(ИсчисленныйНалог." + ИмяРесурса + ") КАК " + ИмяРесурса + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК Сумма,", ТекстНалогов);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция осматривает переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваКодаДохода КАК СвойстваКодаДохода
	|		ПО Начисления.КодДоходаНДФЛ = СвойстваКодаДохода.КодДохода
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|	И Начисления.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|	И (НЕ СвойстваКодаДохода.СоответствуетОплатеТруда
	|			ИЛИ Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2002)
	|				И Начисления.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеДоходыВДенежнойФормеОтТрудовойДеятельности))";
	Запрос.УстановитьПараметр("Начисления", Начисления);
	
	Возврат Не Запрос.Выполнить().Пустой()
	
КонецФункции 

Функция ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления) Экспорт

	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления);
	
КонецФункции

// Процедура преобразует таблицу значений, где при наличии данных в колонках 
// "КодВычетаДополнительный" и "СуммаВычетаДополнительная" создается копия текущей строки, 
// где поля "КодВычета", "СуммаВычета" заполняются соответствующими значениями. При 
// этом значения поля "СуммаДоходов" разбивается на обе строки.
//
// Параметры:
//		Начисления - ТаблицаЗначений
//
Процедура ПреобразоватьДополнительныйВычетВСтроку(Начисления) Экспорт
	
	Если Начисления.Колонки.Найти("КодВычетаДополнительный") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	КоличествоСтрок = Начисления.Количество();
	Для НомерСтроки = 0 По КоличествоСтрок - 1 Цикл
		ТекущаяСтрока = Начисления[НомерСтроки];
		КодВычета = ТекущаяСтрока.КодВычетаДополнительный;
		СуммаВычета = ТекущаяСтрока.СуммаВычетаДополнительная;
		Если ЗначениеЗаполнено(КодВычета) И ЗначениеЗаполнено(СуммаВычета) Тогда
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока,,"СуммаДохода,КодВычета,СуммаВычета,КодВычетаДополнительный,СуммаВычетаДополнительная");
			НоваяСтрока.КодВычета = КодВычета;
			НоваяСтрока.СуммаВычета = СуммаВычета;
			НоваяСтрока.СуммаДохода = СуммаВычета;
			ТекущаяСтрока.СуммаДохода = ТекущаяСтрока.СуммаДохода - СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Специфические алгоритмы чтения данных

// Дополняет перечень оплачиваемых платежным документом начислятелей оплаченными ранее документами, по которым по
// желанию пользователя не был удержан налог.
//      	 
// Параметры:
//      Регистратор - ДокументСсылка - ссылка на документ-регистратор.
//		Организация - СправочникСсылка.Организации -
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		ПериодРегистрации - дата - 
//      МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, содержит вр. таблицу 
//      	ВТСписокСотрудников с полями 
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты,
//          	ДокументОснование,
//          	СуммаНачисленная,
//          	СуммаВыплаченная
//		ТаблицаВыплат - таблица значений - выплачиваемые документом-регистратором суммы с колонками
//				ФизическоеЛицо, 
//				ПериодВзаиморасчетов, 
//				Сотрудник, 
//				Подразделение, 
//				ДокументОснование,      	 
//				СтатьяФинансирования, 
//				СтатьяРасходов 
//		ИмяТаблицыСписокСотрудников - Строка - 
//      	 
Процедура ДописатьДокументыОплаченныеБезУдержанияНДФЛ(Регистратор, Организация, ДатаОперации, ПериодРегистрации, МенеджерВременныхТаблиц, ТаблицаВыплат, ИмяТаблицыСписокСотрудников) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВыплат) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВыплат", ТаблицаВыплат);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ДопустимаяДоляЗадолженности", 1- УчетНДФЛ.ДоляПолнойВыплаты());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	// ФизическоеЛицо, ПериодВзаиморасчетов, Сотрудник, СтатьяФинансирования, СтатьяРасходов, Подразделение, ДокументОснование и др. поля
	|	*
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	&ТаблицаВыплат КАК ТаблицаВыплат";
	Запрос.Выполнить();
	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВТВременнаяТаблица");
	
	// Получаем остатки к выплате для сотрудников из заполняемой ведомости.
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплате();
	ПараметрыПолученияЗарплатыКВыплате.СпособПолучения      = Перечисления.СпособыПолученияЗарплатыКВыплате.ОкончательныйРасчет;
	ПараметрыПолученияЗарплатыКВыплате.Организация          = Организация;
	ПараметрыПолученияЗарплатыКВыплате.ПериодРегистрации    = ПериодРегистрации;
	ПараметрыПолученияЗарплатыКВыплате.Дата                 = ДатаОперации;
	ПараметрыПолученияЗарплатыКВыплате.ИгнорируемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор);
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате, "ВТВременнаяТаблица");
	ТаблицыКУдалению.Добавить("ВТЗарплатаКВыплате");
	
	// АПК:96-выкл Использование ОБЪЕДИНИТЬ оправдано
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНевыплаченного.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаБезЗадолженности
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|		-СписокСотрудников.СуммаВыплаты КАК ОстатокКВыплате
	|	ИЗ
	|		ВТСписокСотрудников КАК СписокСотрудников
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписокСотрудников.ФизическоеЛицо,
	|		СписокСотрудников.КВыплате
	|	ИЗ
	|		ВТЗарплатаКВыплате КАК СписокСотрудников) КАК ОстаткиНевыплаченного
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|			СУММА(СписокСотрудников.КВыплате) КАК КВыплате
	|		ИЗ
	|			ВТЗарплатаКВыплате КАК СписокСотрудников
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СписокСотрудников.ФизическоеЛицо) КАК СуммыКВыплате
	|		ПО ОстаткиНевыплаченного.ФизическоеЛицо = СуммыКВыплате.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыКВыплате.КВыплате,
	|	ОстаткиНевыплаченного.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ОстаткиНевыплаченного.ОстатокКВыплате) <= 7
	|		ИЛИ ЕСТЬNULL(СуммыКВыплате.КВыплате, 0) <= 0
	|		ИЛИ СУММА(ОстаткиНевыплаченного.ОстатокКВыплате) < ЕСТЬNULL(СуммыКВыплате.КВыплате, 0) * &ДопустимаяДоляЗадолженности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОплаченныеБезУдержанияНДФЛ.ДокументОснование КАК ДокументОснование,
	|	ВременнаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	1 КАК СуммаНачисленная,
	|	1 КАК СуммаВыплаты,
	|	0 КАК СуммаВыплаченная
	|ПОМЕСТИТЬ ВТДополненныйСписокСотрудников
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыОплаченныеБезУдержанияНДФЛ КАК ДокументыОплаченныеБезУдержанияНДФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК СписокСотрудников
	|			ПО ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо = СписокСотрудников.ФизическоеЛицо
	|				И ДокументыОплаченныеБезУдержанияНДФЛ.ДокументОснование = СписокСотрудников.ДокументОснование
	|		ПО ВременнаяТаблица.ФизическоеЛицо = ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо
	|			И (&ПериодРегистрации = ДокументыОплаченныеБезУдержанияНДФЛ.ПериодРегистрации)
	|			И ВременнаяТаблица.Сотрудник = ДокументыОплаченныеБезУдержанияНДФЛ.Сотрудник
	|			И ВременнаяТаблица.СтатьяФинансирования = ДокументыОплаченныеБезУдержанияНДФЛ.СтатьяФинансирования
	|			И ВременнаяТаблица.СтатьяРасходов = ДокументыОплаченныеБезУдержанияНДФЛ.СтатьяРасходов
	|			И ВременнаяТаблица.Подразделение = ДокументыОплаченныеБезУдержанияНДФЛ.Подразделение
	|ГДЕ
	|	СписокСотрудников.ФизическоеЛицо ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСотрудников.ДокументОснование,
	|	СписокСотрудников.ФизическоеЛицо,
	|	СписокСотрудников.СуммаНачисленная,
	|	СписокСотрудников.СуммаВыплаты,
	|	СписокСотрудников.СуммаВыплаченная
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОплаченныеБезУдержанияНДФЛ.ДокументОснование,
	|	ВременнаяТаблица.ФизическоеЛицо,
	|	1,
	|	1,
	|	0
	|ИЗ
	|	ВТФизическиеЛицаБезЗадолженности КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыОплаченныеБезУдержанияНДФЛ КАК ДокументыОплаченныеБезУдержанияНДФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокСотрудников КАК СписокСотрудников
	|			ПО ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо = СписокСотрудников.ФизическоеЛицо
	|				И ДокументыОплаченныеБезУдержанияНДФЛ.ДокументОснование = СписокСотрудников.ДокументОснование
	|		ПО ВременнаяТаблица.ФизическоеЛицо = ДокументыОплаченныеБезУдержанияНДФЛ.ФизическоеЛицо
	|			И (&ПериодРегистрации = ДокументыОплаченныеБезУдержанияНДФЛ.ПериодРегистрации)
	|ГДЕ
	|	СписокСотрудников.ФизическоеЛицо ЕСТЬ NULL";
	// АПК:96-вкл 
	Запрос.Выполнить();
	ТаблицыКУдалению.Добавить("ВТФизическиеЛицаБезЗадолженности");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);
	ИмяТаблицыСписокСотрудников = "ВТДополненныйСписокСотрудников";
	
КонецПроцедуры

// Формирует массив физических лиц, получивших доход в указанном периоде, исключая заданных.
//
Функция ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ИсключаяФизическихЛиц, Начало, Окончание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ФизическиеЛица", ИсключаяФизическихЛиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И СведенияОДоходахНДФЛ.ФизическоеЛицо НЕ В (&ФизическиеЛица)
		|	И СведенияОДоходахНДФЛ.Организация = &Организация
		|	И СведенияОДоходахНДФЛ.ПодразделениеСотрудника В ИЕРАРХИИ (&Подразделение)";
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОДоходахНДФЛ.ПодразделениеСотрудника В ИЕРАРХИИ (&Подразделение)", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции

Функция УчтенныеПриРасчетеДокументы(ДокументСсылка, ФизическиеЛица) Экспорт 
	
	ОписаниеМетаданных = ДокументСсылка.Метаданные();
	
	Если ОписаниеМетаданных.ТабличныеЧасти.Найти("УчтенныеПриРасчетеНДФЛДокументы") = Неопределено Тогда
		
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ПустаяТаблица.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.РегистраторыДоходовПоНДФЛ.Тип);
		Возврат ПустаяТаблица
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчтенныеДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УчтенныеДокументы.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	#УчтенныеПриРасчетеНДФЛДокументы КАК УчтенныеДокументы
		|ГДЕ
		|	УчтенныеДокументы.Ссылка = &Ссылка
		|	И &УсловиеНаФизическиеЛица";
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#УчтенныеПриРасчетеНДФЛДокументы", ОписаниеМетаданных.ПолноеИмя() + ".УчтенныеПриРасчетеНДФЛДокументы");
		Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
			Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаФизическиеЛица", "ФизическоеЛицо В(&ФизическиеЛица)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаФизическиеЛица", "Истина");
		КонецЕсли; 
		
		Возврат Запрос.Выполнить().Выгрузить()
		
	КонецЕсли;
	
КонецФункции 

// Возвращает суммы налога к уплате в разрезе крайних сроков уплаты.
//
// Параметры:
//		Организации - Массив, содержит ссылки на организации, по которым получаются данные.
//		ДатаАктуальности - дата.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация 					- СправочникСсылка.Организации
//			* РегистрацияВНалоговомОргане 	- СправочникСсылка.РегистрацииВНалоговомОргане
//			* СтатьяФинансирования 			- СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов 				- СправочникСсылка.СтатьиРасходовЗарплата
//			* КрайнийСрокУплаты - Дата
//			* Сумма 			- Число.
//
Функция НДФЛКУплатеДляПлатежейПоРезультатамРасчета(Организации, ДатаАктуальности) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Организации", Организации);
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(0) КАК Сумма,
	|	НДФЛКПеречислению.Организация КАК Организация,
	|	НДФЛКПеречислению.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НДФЛКПеречислению.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НДФЛКПеречислению.СтатьяРасходов КАК СтатьяРасходов,
	|	НДФЛКПеречислению.КрайнийСрокУплаты КАК КрайнийСрокУплаты
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|ГДЕ
	|	НДФЛКПеречислению.Организация В(&Организации)
	|	И НДФЛКПеречислению.КрайнийСрокУплаты >= &ДатаАктуальности
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛКПеречислению.КрайнийСрокУплаты,
	|	НДФЛКПеречислению.СтатьяРасходов,
	|	НДФЛКПеречислению.Организация,
	|	НДФЛКПеречислению.СтатьяФинансирования,
	|	НДФЛКПеречислению.РегистрацияВНалоговомОргане";
	
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + "СУММА(НДФЛКПеречислению." + ИмяРесурса + ") КАК " + ИмяРесурса + "," + Символы.ПС;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "СУММА(0) КАК Сумма,", ТекстНалогов);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Чтение учетной политики

Функция УдерживатьНалогПриВыплатеАванса(Организация, МесяцНачисления = '20010101') Экспорт

	Если УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления) Тогда
		Возврат Истина
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		Возврат РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.Получить(Новый Структура("Организация", Организация)).УдержаниеНДФЛПриВыплатеАванса = Перечисления.УдержаниеНДФЛПриВыплатеАванса.УдерживатьНалог
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции 

Функция УдерживатьНДФЛСНатуральногоДоходаПриБлижайшейВыплате(Организация) Экспорт

	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.Получить(Новый Структура("Организация", Организация)).УдерживатьНДФЛСНатуральногоДоходаПриБлижайшейВыплате;
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции

Функция ОтложитьУдержаниеНалогаПоМежрасчетуВыплаченномуСАвансомДоВыплатыЗарплаты(Организация, МесяцНачисления = '20010101') Экспорт

	Если УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		Возврат РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.Получить(Новый Структура("Организация", Организация)).УдержаниеНДФЛПриВыплатеМежрасчетныхНачисленийСАвансом = Перечисления.УдержаниеНДФЛПриВыплатеМежрасчетныхНачисленийСАвансом.НеУдерживатьНалог	
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции 

Функция ОтложитьРасчетНалогаВМежрасчетахДоРасчетаЗарплаты(Организация, МесяцНачисления = '20010101') Экспорт

	Если УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления) Тогда
		Возврат Ложь
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		Возврат РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.Получить(Новый Структура("Организация", Организация)).ИсчислениеНДФЛПриМежрасчетныхНачислениях = Перечисления.ИсчислениеНДФЛПриМежрасчетныхНачислениях.НеИсчислятьНалог	
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции 

Функция ОтложитьРасчетНалогаВАвансеДоРасчетаЗарплаты(Организация) Экспорт

	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.Получить(Новый Структура("Организация", Организация)).ИсчислениеНДФЛВАвансе = Перечисления.ИсчислениеНДФЛВАвансе.НеИсчислятьНалог	
	Иначе
		Возврат Ложь
	КонецЕсли;

КонецФункции 

// Обслуживание печати в документах выплаты зарплаты.

Процедура ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНалоговИВзносов, ЧтениеНалоговИВзносов", , Ложь) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.Идентификатор = "ПФ_MXL_РеестрПеречисленныхСумм";
		КомандаПечати.Представление = НСтр("ru = 'Реестр перечисленных сумм НДФЛ';
											|en = 'Registry of paid PIT amounts'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли
	
КонецПроцедуры

Процедура ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.ПеречислениеНДФЛРеквизиты КАК ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Бухгалтер КАК Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеРегистраторов
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивОбъектов)
	|	И ВедомостьНаВыплатуЗарплатыВБанк.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В(&МассивОбъектов)
	|	И ВедомостьНаВыплатуЗарплатыВКассу.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ВедомостьНаВыплатуЗарплатыПеречислением
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыПеречислением.Ссылка В(&МассивОбъектов)
	|	И ВедомостьНаВыплатуЗарплатыПеречислением.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.ГлавныйБухгалтер,
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ВедомостьНаВыплатуЗарплатыРаздатчиком
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыРаздатчиком.Ссылка В(&МассивОбъектов)
	|	И ВедомостьНаВыплатуЗарплатыРаздатчиком.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовВКассу.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовВКассу.Ссылка,
	|	ВедомостьПрочихДоходовВКассу.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовВКассу.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК ВедомостьПрочихДоходовВКассу
	|ГДЕ
	|	ВедомостьПрочихДоходовВКассу.Ссылка В(&МассивОбъектов)
	|	И ВедомостьПрочихДоходовВКассу.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовВБанк.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовВБанк.Ссылка,
	|	ВедомостьПрочихДоходовВБанк.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовВБанк.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК ВедомостьПрочихДоходовВБанк
	|ГДЕ
	|	ВедомостьПрочихДоходовВБанк.Ссылка В(&МассивОбъектов)
	|	И ВедомостьПрочихДоходовВБанк.ПеречислениеНДФЛВыполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьПрочихДоходовПеречислением.ПеречислениеНДФЛРеквизиты,
	|	ВедомостьПрочихДоходовПеречислением.Ссылка,
	|	ВедомостьПрочихДоходовПеречислением.ГлавныйБухгалтер,
	|	ВедомостьПрочихДоходовПеречислением.Бухгалтер
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК ВедомостьПрочихДоходовПеречислением
	|ГДЕ
	|	ВедомостьПрочихДоходовПеречислением.Ссылка В(&МассивОбъектов)
	|	И ВедомостьПрочихДоходовПеречислением.ПеречислениеНДФЛВыполнено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Организация КАК Организация,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Период КАК ДатаПлатежа,
	|	ЕСТЬNULL(ДанныеРегистраторов.ПеречислениеНДФЛРеквизиты, """") КАК РеквизитыПлатежногоПоручения,
	|	ДанныеРегистраторов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеРегистраторов.Бухгалтер КАК Бухгалтер
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистраторов КАК ДанныеРегистраторов
	|		ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = ДанныеРегистраторов.Ссылка
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				ДанныеРегистраторов.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТДанныеРегистраторов КАК ДанныеРегистраторов)
	|	И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
				   
	РеквизитыПлатежа = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаДанных Из РеквизитыПлатежа Цикл
		СтрокаДанных.РеквизитыПлатежногоПоручения = Лев(СокрЛП(СтрокаДанных.РеквизитыПлатежногоПоручения), 50)
	КонецЦикла;
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(РеквизитыПлатежа);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, ?(ЗначениеЗаполнено(МассивОбъектов), МассивОбъектов[0], Документы.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка()));
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм", 
		НСтр("ru = 'Реестр перечисленных сумм';
			|en = 'Paid amounts registry'"), ТабличныйДокумент, , "ОбщийМакет.ПФ_MXL_РеестрПеречисленныхСуммНДФЛ");
	
КонецПроцедуры

Функция НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Экспорт
	
	Возврат УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм");
	
КонецФункции

#Область ДатыИзмененийЗаконодательства

// Возвращает дату начала действия законопроекта №577665-8 "О внесении изменений в части первую и вторую НК РФ
// и отдельные законодательные акты РФ о налогах и сборах"
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//   дата
//
Функция ДатаУчетаСтавкиРефинансированияПоДатеВыдачеЗайма() Экспорт 

	Возврат '20240101'

КонецФункции

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриРасчетеСроковХраненияПерсональныхДанных.
Процедура ПриРасчетеСроковХраненияПерсональныхДанных(ДанныеСубъектов, СрокиХранения) Экспорт
	
	ФизическиеЛица = ЗащитаПерсональныхДанныхЗарплатаКадры.ФизическиеЛицаИзДанныхСубъектов(ДанныеСубъектов,
		СрокиХранения);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатыПолученияДоходов = МаксимальныеДатыПолученияДоходовОблагаемыхНДФЛ(ФизическиеЛица);
	
	Для Каждого СтрокаТаблицы Из ДатыПолученияДоходов Цикл
		
		ДобавитьСтроку = Истина;
		
		СрокХранения = ЗащитаПерсональныхДанныхЗарплатаКадры.СрокХраненияПоДатеСобытия(
			СтрокаТаблицы.Дата);
		
		НайденныеСтроки = СрокиХранения.НайтиСтроки(Новый Структура("Субъект", СтрокаТаблицы.ФизическоеЛицо));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.СрокХранения >= СрокХранения Тогда
				ДобавитьСтроку = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавитьСтроку Тогда
			НоваяСтрока = СрокиХранения.Добавить();
			НоваяСтрока.Субъект = СтрокаТаблицы.ФизическоеЛицо;
			НоваяСтрока.Организация = СтрокаТаблицы.Организация;
			НоваяСтрока.СрокХранения = СрокХранения;
			НоваяСтрока.Комментарий = СтрШаблон(НСтр("ru = '%1 получен доход, облагаемый НДФЛ';
													|en = 'On %1 income subject to PIT is earned'"),
				Формат(СтрокаТаблицы.Дата, "ДЛФ=Д"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный;

	// Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛ;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный;
	
	// Метаданные.РегистрыСведений.РазмерВычетовНДФЛ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.РазмерВычетовНДФЛ;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.РазмерВычетовНДФЛВторичный;
	
	// Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный;
	
	// Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла() Экспорт
	
	// АПК:277-выкл 
	РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ЗаполнитьВторичныеДанные();
	РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный.ЗаполнитьВторичныеДанные();
	РегистрыСведений.РазмерВычетовНДФЛВторичный.ЗаполнитьВторичныеДанные();
	РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный.ЗаполнитьВторичныеДанныеЛичныеВычеты();
	РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный.ЗаполнитьВторичныеДанныеВычетыНаДетей();
	// АПК:277-вкл 
	
КонецПроцедуры

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.101";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ИсправитьФлажокМежрасчетностиВСведенияхОДоходахСторнирования";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1622a77e-6d07-4ecf-95a0-5a88ece3c1ef");
	Обработчик.Комментарий = НСтр("ru = 'Исправление движений документа Сторнирование начислений';
									|en = 'Correct register records of the ""Accrual reversal"" document'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.58";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗарегистрироватьПереносыДанныхКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c06fd418-09a0-44be-9514-4ca937048d72");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация Переносов данных как учтенных при расчете НДФЛ документов.';
									|en = 'Registration of Data transfers as recorded when calculating PIT documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.109";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ЗарегистрироватьНачисленияЗарплатыКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("84212d6d-57b9-4b1e-92d6-743007ad4b30");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация Начисления з/пл как учтенных при расчете НДФЛ документов.';
									|en = 'Registration of Salary accruals as recorded when calculating PIT documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.131";
	Обработчик.Процедура = "РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.ЗаполнитьУчетнуюПолитикуОбособленныхПодразделений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7bc62eb3-e170-4063-97aa-724a1bcb9cc0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение учетной политики НДФЛ.';
									|en = 'Fill in PIT accounting policy.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.18";
	Обработчик.Процедура = "РегистрыСведений.УчетнаяПолитикаПоНДФЛРасширенный.ДозаполнитьУчетнуюПолитику";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.18";
	Обработчик.Процедура = "Документы.НачислениеЗаПервуюПоловинуМесяца.ПроставитьДатуВыплаты";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7ccaa3b4-b70e-416b-ae0f-056a8a8a965b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение планируемой даты выплаты в Начислении за первую половину месяца.';
									|en = 'Filling of the planned date of payment in the Accrual for the first half of the month.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.127";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВычеркнутьЛишниеНачисленияЗарплатыИзУчтенныхПриРасчетеНДФЛ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.18.83";
	Обработчик.Процедура = "УчетНДФЛРасширенный.ВосстановитьКод2400";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.3";
	Обработчик.Процедура = "Документы.ПризПодарок.ПроставитьКатегориюДохода";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("15a4f5dd-0a42-405b-8738-e02e75ce1584");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение категории дохода в документе Приз, подарок.';
									|en = 'Filling in the income category in the Prize document, present.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.174";
	Обработчик.Процедура = "УчетНДФЛРасширенный.УточнитьКодДоходаПоКомпенсацииНеИспользованныхДнейЧасовОтдыха";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c545301f-8524-4f88-aef6-aa247e9c80f3");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение отражения кода дохода для начислений с категорией ""Компенсация не использованных дней часов отдыха""';
									|en = 'Уточнение отражения кода дохода для начислений с категорией ""Компенсация не использованных дней часов отдыха""'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РегистрироватьДокументКакАвансБезНДФЛ(ПорядокВыплаты, УдержатьНалогПриВыплатеЗарплаты) Экспорт
	Возврат ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс И УдержатьНалогПриВыплатеЗарплаты	
КонецФункции

Функция ДоходыНДФЛПоВидуПризовПодарков(ВидНачисления) Экспорт

	ВидыДоходаНДФЛ = Новый Массив;
	Если ВидНачисления = Перечисления.ВидыПризовПодарков.Подарок Тогда
 		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2720c2021);
 		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2720);
	ИначеЕсли ВидНачисления = Перечисления.ВидыПризовПодарков.Приз Тогда
 		ВидыДоходаНДФЛ.Добавить(Справочники.ВидыДоходовНДФЛ.Код2740);
		КодДохода2750 = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2750");
		Если ЗначениеЗаполнено(КодДохода2750) Тогда
			ВидыДоходаНДФЛ.Добавить(КодДохода2750);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидыДоходаНДФЛ;

КонецФункции

// Функция возвращает Ставку налогообложения резидента для дохода НДФЛ.
// Если код вычета не определен, то возвращается пустая ссылка.
Функция СтавкаНалогообложенияРезидентаПоКодуДоходаНДФЛ(КодДоходаНДФЛ) Экспорт
	СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка();	
	Если ЗначениеЗаполнено(КодДоходаНДФЛ) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КодДоходаНДФЛ, "СтавкаНалогообложенияРезидента");
	КонецЕсли;
	Возврат СтавкаНалогообложенияРезидента	
КонецФункции 

Функция ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации) Экспорт

	Возврат УчетНДФЛ.ДатаОперацииПоДокументу(ДатаДокумента, ПериодРегистрации)

КонецФункции

// Функция возвращает структуру с доходами НДФЛ.
// Параметр
//	ПрочиеДоходы - структура
//		Ключ - вид дохода, для которого надо подобрать вид дохода НДФЛ.
//
Функция ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы) Экспорт

	ДоходыНДФЛ = Новый Структура;
	Для каждого ВидДоход Из ПрочиеДоходы Цикл
		
		Доход = ВидДоход.Ключ;
		Если Доход = "АрендаТранспорта" Тогда
			Код = "2400";
		ИначеЕсли Доход = "ПризыВЦеляхРекламы" Тогда
			Код = "2740";
		ИначеЕсли Доход = "Подарки" Тогда
			Код = "2720";
		ИначеЕсли Доход = "ЛицензионныйДоговор" Тогда
			Код = "1300";
		ИначеЕсли Доход = "ОтчуждениеАвторскихПрав" Тогда
			Код = "1301";
		ИначеЕсли Доход = "ВознагражденияНаследникам" Тогда
			Код = "2210";
		ИначеЕсли Доход = "МатериальнаяПомощьБывшимСотрудникам" Тогда
			Код = "2760";
		ИначеЕсли Доход = "ВозмещениеСтоимостиМедикаментов" Тогда
			Код = "2770";	
		Иначе
			Код = "";
		КонецЕсли;
		
		СсылкаНаЭлемент = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду(Код);
		ДоходыНДФЛ.Вставить(Доход, СсылкаНаЭлемент);
	
	КонецЦикла;
		
	Возврат ДоходыНДФЛ;

КонецФункции 

// Функция анализирует порядок выплаты и переданные начисления и сообщает, нужна ли дата выплаты.
//
// Параметры:
//	ПорядокВыплаты - ПорядокВыплаты, ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//	Начисления - массив в.р. из ПВР Начисления.
//
// Возвращаемое значение - Истина/Ложь.
//
Функция ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, Начисления, МесяцНачисления = '20010101') Экспорт

	Возврат УчетНДФЛ.ДоходыУчитываютсяТолькоПоДатеВыплаты(МесяцНачисления, -1)
			Или РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
			Или ДоходыВУчетеНДФЛРегистрируютсяПоДатеВыплаты(Начисления);
	
КонецФункции 

// Функция возвращает массив кодов дохода, которыми регистрируется оплата труда для целей ст. 223 НК РФ.
//
// Параметры:
//	нет
//
// Возвращаемое значение - массив значений типа СправочникСсылка.ВидыДоходовНДФЛ.
//
Функция КодыДоходовОплатыТруда() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	УчетНДФЛ.СоздатьВТДополнительныеСвойстваКодаДохода(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДоходовНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеСвойстваКодаДохода КАК СвойстваКодаДохода
	|		ПО ВидыДоходовНДФЛ.Ссылка = СвойстваКодаДохода.КодДохода
	|ГДЕ
	|	СвойстваКодаДохода.СоответствуетОплатеТруда";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Определяет, применяется ли автоматически социальный вычет, соответствующий переданному документу-основанию.
//
// Параметры:
//	Организация
//	ФизическоеЛицо
//	Удержание - тип ПланВидовРасчетаСсылка.Удержания
//	ДокументОснование.
//	ДатаАктуальности - дата, на которую определяется применение вычета.
//	Регистратор - если указан, движения регистратора игнорируются.
//	
Функция ПрименениеСоциальныхВычетовНаДату(Организация, ФизическоеЛицо, Удержание, ДокументОснование, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаАктуальности КАК Период,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	&ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДокументОснование КАК ДокументОснование,
	|	&Удержание КАК Удержание
	|ПОМЕСТИТЬ ВТДанныеДокумента";
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.ГоловнаяОрганизация,
	|	ДанныеДокумента.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|			ТОГДА ЗНАЧЕНИЕ(Документ.УдержаниеДобровольныхСтраховыхВзносов.ПустаяСсылка)
	|		ИНАЧЕ ДанныеДокумента.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДанныеДокумента.Удержание.КатегорияУдержания КАК КатегорияВзносов
	|ПОМЕСТИТЬ ВТИзмерения
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента";
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(Регистратор) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПредоставлениеСоциальныхВычетовУРаботодателя",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмерения",
			"ГоловнаяОрганизация,ФизическоеЛицо,КатегорияВзносов,ДокументОснование"),
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеРегистра.НеПредоставлятьВычет, ЛОЖЬ) КАК НеПредоставлятьВычет
	|ИЗ
	|	ВТИзмерения КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставлениеСоциальныхВычетовУРаботодателяСрезПоследних КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ГоловнаяОрганизация = ДанныеРегистра.ГоловнаяОрганизация
	|			И ДанныеДокумента.ФизическоеЛицо = ДанныеРегистра.ФизическоеЛицо
	|			И ДанныеДокумента.КатегорияВзносов = ДанныеРегистра.КатегорияВзносов
	|			И ДанныеДокумента.ДокументОснование = ДанныеРегистра.ДокументОснование";
	
	НеПредоставлятьВычет = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НеПредоставлятьВычет = Выборка.НеПредоставлятьВычет;
	КонецЕсли;
	
	Возврат НеПредоставлятьВычет;
	
КонецФункции

Функция КонтролируемыеПоляДляФиксацииРезультатов() Экспорт

	НДФЛФиксРасчет = Новый Массив;
	НДФЛФиксРасчет.Добавить("Налог");
	НДФЛФиксРасчет.Добавить("ЗачтеноАвансовыхПлатежей");
	НДФЛФиксРасчет.Добавить("НалогКЗачетуВозврату");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичный");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКодВычета");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйНалоговаяБаза");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКЗачетуВозврату");
	НДФЛФиксРасчет.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета");

	НДФЛФиксСтрока = Новый Массив;
	НДФЛФиксСтрока.Добавить("ФизическоеЛицо");
	НДФЛФиксСтрока.Добавить("МесяцНалоговогоПериода");
	НДФЛФиксСтрока.Добавить("Подразделение");
	
	Возврат Новый Структура("ФиксРасчет, ФиксСтрока", НДФЛФиксРасчет, НДФЛФиксСтрока)
	
КонецФункции

Процедура ЗапланироватьКорректировкуНабора(Набор, ПараметрыКорректировки)
	
	КорректировкиПоУчетам = Неопределено;
	Если Не Набор.ДополнительныеСвойства.Свойство("КорректировкиПоУчетам", КорректировкиПоУчетам) Тогда
		КорректировкиПоУчетам = Новый Массив;
		Набор.ДополнительныеСвойства.Вставить("КорректировкиПоУчетам", КорректировкиПоУчетам);
	КонецЕсли;
	КорректировкиПоУчетам.Добавить(ПараметрыКорректировки);
	
КонецПроцедуры

Процедура ВосстановитьДатыПолученияДохода(Набор, ПараметрыКорректировки)
	
	ИмяСвойства = "ДополнительнаяПроверкаФиксированныхСтрок";
	ДополнительнаяПроверкаФиксированныхСтрок = ПараметрыКорректировки.Свойство(ИмяСвойства) И ПараметрыКорректировки[ИмяСвойства];
	
	// Подготовка вспомогательной таблицы для корректировки строк набора.
	ДоступныеСтрокиНабора = Набор.ВыгрузитьКолонки();
	ДоступныеСтрокиНабора.Колонки.Добавить("СтрокаНабора"); // Строка исходного набора, изменяться будут эти строки.
	Для Каждого Строка Из Набор Цикл
		Если Не Строка.Сторно Тогда
			Если ДополнительнаяПроверкаФиксированныхСтрок Тогда
				ДатаПолученияДоходаФиксирована = Строка.ДатаПолученияДоходаФиксирована
					И УчетНДФЛ.ДатаПолученияДоходаДолжнаБытьЗафиксирована(Строка.КатегорияДохода, Строка.МесяцНалоговогоПериода);
			Иначе
				ДатаПолученияДоходаФиксирована = Строка.ДатаПолученияДоходаФиксирована;
			КонецЕсли;
			
			Если Не ДатаПолученияДоходаФиксирована Тогда
				НоваяСтрока = ДоступныеСтрокиНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.СтрокаНабора = Строка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СохраняемыеДатыДохода = ПараметрыКорректировки.СохраняемыеДатыДохода;
	ПоляКорректировки = СтрРазделить(ПараметрыКорректировки.ПоляКорректировки, ",");
	Ресурсы           = СтрРазделить(ПараметрыКорректировки.Ресурсы, ",");
	
	ЗначенияКорректировки = Новый Структура(ПараметрыКорректировки.ПоляКорректировки);
	ЗначенияКорректировки.Вставить("УстаревшаяДатаПолученияДохода");
	
	Для Каждого КолонкиГруппировки Из ПараметрыКорректировки.ВариантыГруппировки Цикл
		
		СохраняемыеДатыДохода.Свернуть(КолонкиГруппировки, ПараметрыКорректировки.Ресурсы);
		
		Для Сч = -СохраняемыеДатыДохода.Количество() + 1 По 0 Цикл
			Сохраняемое = СохраняемыеДатыДохода[-Сч];
			НулевыеРесурсы = Истина;
			Для Каждого Ресурс Из Ресурсы Цикл
				Если Сохраняемое[Ресурс] <> 0 Тогда
					НулевыеРесурсы = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НулевыеРесурсы Тогда
				СохраняемыеДатыДохода.Удалить(-Сч);
			КонецЕсли;
		КонецЦикла;
		Если СохраняемыеДатыДохода.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОтборПоГруппировке = Новый Структура(КолонкиГруппировки);
		ОтборПоПолямКорректировки = Новый Структура;
		
		Для Каждого Колонка Из ПоляКорректировки Цикл
			Если ОтборПоГруппировке.Свойство(Колонка) Тогда
				ОтборПоГруппировке.Удалить(Колонка);
			КонецЕсли;
			Если СохраняемыеДатыДохода.Колонки.Найти(Колонка) <> Неопределено Тогда
				ОтборПоПолямКорректировки.Вставить(Колонка);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Сохраняемое Из СохраняемыеДатыДохода Цикл
			
			ЗаполнитьЗначенияСвойств(ОтборПоГруппировке, Сохраняемое);
			СтрокиДляКорректировки = ДоступныеСтрокиНабора.Скопировать(ДоступныеСтрокиНабора.НайтиСтроки(ОтборПоГруппировке));
			СтрокиДляКорректировки.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
			ЗаполнитьЗначенияСвойств(ОтборПоПолямКорректировки, Сохраняемое);
			ПервыеСтроки = СтрокиДляКорректировки.НайтиСтроки(ОтборПоПолямКорректировки);
			Для Каждого Строка Из ПервыеСтроки Цикл
				Строка.Порядок = 1;
			КонецЦикла;
			СтрокиДляКорректировки.Сортировать("Порядок Убыв");
			
			ЗаполнитьЗначенияСвойств(ЗначенияКорректировки, Сохраняемое);
			Если ЗначенияКорректировки.Свойство("ДатаПолученияДохода") И ЗначенияКорректировки.Свойство("МесяцНалоговогоПериода") Тогда
				ЗначенияКорректировки.МесяцНалоговогоПериода = НачалоМесяца(Сохраняемое.ДатаПолученияДохода);
				ЗначенияКорректировки.УстаревшаяДатаПолученияДохода = Сохраняемое.ДатаПолученияДохода;
			Иначе
				ЗначенияКорректировки.УстаревшаяДатаПолученияДохода = Сохраняемое.МесяцНалоговогоПериода;
			КонецЕсли;
			
			РаспределениеВыполнялось = Ложь;
			РаспределенаПолностью = Ложь;
			
			Для Каждого Строка Из СтрокиДляКорректировки Цикл
				
				СтрокаНабораНовая = Неопределено;
				
				РаспределениеВыполнялось = Истина;
				РаспределенаПолностью = Истина;
				
				Для Каждого Ресурс Из Ресурсы Цикл
					Если Сохраняемое[Ресурс] = 0 И Строка.СтрокаНабора[Ресурс] = 0 Тогда
						Продолжить;
					КонецЕсли;
						
					Остаток = Сохраняемое[Ресурс] - Строка.СтрокаНабора[Ресурс];
					Если Остаток = 0 Тогда
						Сохраняемое[Ресурс] = 0;
					ИначеЕсли Остаток > 0 Тогда
						Сохраняемое[Ресурс] = Остаток;
						РаспределенаПолностью = Ложь;
					Иначе
						Если СтрокаНабораНовая = Неопределено Тогда
							СтрокаНабораНовая = Набор.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаНабораНовая, Строка,, ПараметрыКорректировки.Ресурсы);
						КонецЕсли;
						СтрокаНабораНовая[Ресурс] = - Остаток;
						Строка.СтрокаНабора[Ресурс] = Сохраняемое[Ресурс];
						Сохраняемое[Ресурс] = 0;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(Строка.СтрокаНабора, ЗначенияКорректировки);
				Строка.СтрокаНабора.ДокументОснование = ПараметрыКорректировки.ИсправленныйДокумент;
				Набор.Записывать = Истина;
				
				Если РаспределенаПолностью Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если РаспределениеВыполнялось И Не РаспределенаПолностью Тогда
				Для Каждого Ресурс Из Ресурсы Цикл
					Сохраняемое[Ресурс] = 0; // Обнуление остатков корректировки.
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьКатегориюДоходаВПеренесенныеДанные() Экспорт 
	
	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций) КАК КатегорияДохода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор КАК Регистратор,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НомерСтроки КАК НомерСтроки,
	|	*
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("РасчетыНалогоплательщиковСБюджетомПоНДФЛ", Текст);

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор ССЫЛКА Документ.ПереносДанных
	|	И СведенияОДоходахНДФЛ.КатегорияДохода = ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ДоходыПредыдущихРедакций) КАК КатегорияДохода,
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст);

КонецПроцедуры

// Возвращает данные о датах последнего получения физическими лицами доходов облагаемых НДФЛ.
//
// Параметры:
//	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица, СправочникСсылка.ФизическиеЛица -
//	  ссылка или массив ссылок проверяемых физических лиц.
//
// Возвращаемое значение: см. ЗащитаПерсональныхДанныхЗарплатаКадры.НоваяТаблицаДатПолученияДоходов
Функция МаксимальныеДатыПолученияДоходовОблагаемыхНДФЛ(ФизическиеЛица)
	
	ДанныеОДоходах = ЗащитаПерсональныхДанныхЗарплатаКадры.НоваяТаблицаДатПолученияДоходов();
	
	Если Не ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Возврат ДанныеОДоходах;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация КАК Организация,
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период КАК Дата
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		|ГДЕ
		|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо В (&ФизическиеЛица)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо,
		|	СведенияОДоходахНДФЛ.Организация,
		|	СведенияОДоходахНДФЛ.Период
		|ИЗ
		|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		|ГДЕ
		|	СведенияОДоходахНДФЛ.ФизическоеЛицо В (&ФизическиеЛица)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеОДоходах;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		НоваяСтрока = ДанныеОДоходах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	Возврат ДанныеОДоходах;
	
КонецФункции

#Область ВспомогательныеФункцииИПроцедуры

Процедура УточнитьСторнируемыеПоНачислениям(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений, МенеджерВременныхТаблиц, ИмяВТ)

	Текст =
	"ВЫБРАТЬ
	|	ТаблицаСторнируемыхДокументов.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДляУточнения
	|ИЗ
	|	&ДляУточнения КАК ТаблицаСторнируемыхДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исходная.НомерСтроки КАК НомерСтроки,
	|	Исходная.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсходныйДокумент,
	|	Исходная.Начисление КАК ВидРасчета,
	|	Исходная.Сотрудник КАК Сотрудник,
	|	Исходная.ДатаНачала КАК ПериодДействия,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	ЛОЖЬ КАК Зацикливание
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	ИмяВТ КАК Исходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляУточнения КАК ДляУточнения
	|		ПО (ДляУточнения.НомерСтроки = Исходная.НомерСтроки)
	|ГДЕ
	|	Исходная.СуммаДохода < 0";

	Текст = СтрЗаменить(Текст, "ИмяВТ", ИмяВТ);

	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДляУточнения", ТаблицаСторнируемыхДокументов);
	Запрос.Выполнить();

	Шаблон = 
	"ВЫБРАТЬ
	|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
	|	СторнируемыеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ЕСТЬNULL(СтрокиДокумента.СторнируемыйДокумент, СтрокиДокумента.ИсходныйДокумент) КАК ИсходныйДокумент,
	|	СторнируемыеНачисления.ВидРасчета КАК ВидРасчета,
	|	СторнируемыеНачисления.Сотрудник КАК Сотрудник,
	|	СторнируемыеНачисления.ПериодДействия КАК ПериодДействия,
	|	СторнируемыеНачисления.Регистратор КАК Регистратор,
	|	СторнируемыеНачисления.СторнируемыйДокумент = СтрокиДокумента.Регистратор КАК Зацикливание
	|ПОМЕСТИТЬ ВТ2
	|ИЗ
	|	ВТ1 КАК СтрокиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторнируемыеНачисления
	|		ПО (СторнируемыеНачисления.Регистратор = СтрокиДокумента.СторнируемыйДокумент)
	|			И (СторнируемыеНачисления.ВидРасчета = СтрокиДокумента.ВидРасчета)
	|			И (СторнируемыеНачисления.Сотрудник = СтрокиДокумента.Сотрудник)
	|			И (СторнируемыеНачисления.ПериодДействия = СтрокиДокумента.ПериодДействия)
	|			И (СторнируемыеНачисления.Результат <> 0)
	|			И (СторнируемыеНачисления.Сторно
	|				ИЛИ СторнируемыеНачисления.ФиксСторно)
	|			И (НЕ СторнируемыеНачисления.СторнируемыйДокумент В (&МассивПустыхСсылок))
	|			И (НЕ СтрокиДокумента.Зацикливание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСторнируемого.НомерСтроки КАК НомерСтроки,
	|	СтрокиСторнируемого.Регистратор КАК ПромежуточноеИсправление,
	|	СтрокиСторнируемого.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	СтрокиСторнируемого.Зацикливание КАК Зацикливание
	|ИЗ
	|	ВТ2 КАК СтрокиСторнируемого
	|ГДЕ
	|	НЕ СтрокиСторнируемого.СторнируемыйДокумент ЕСТЬ NULL";

	Запрос.УстановитьПараметр("МассивПустыхСсылок", ЗарплатаКадрыРасширенныйПовтИсп.МассивПустыхСсылокСторнируемогоДокумента());

	Зацикливания = Новый ТаблицаЗначений;
	Зацикливания.Колонки.Добавить("Исходный");
	Зацикливания.Колонки.Добавить("Сторнируемый");

	ИмяВТ1 = "ВТСтрокиДокумента";
	ИмяВТ2 = "ВТПромежуточная";
	ПервыйПроход = Истина;
	НайденыВсеИсходные = Ложь;

	Пока Не НайденыВсеИсходные Цикл

		Текст = СтрЗаменить(Шаблон, "ВТ1", ИмяВТ1);
		Запрос.Текст = СтрЗаменить(Текст, "ВТ2", ИмяВТ2);
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			НайденыВсеИсходные = Истина;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаПромежуточныхИсправлений.Добавить(), Выборка);
				СтрокаПоНомеру = ТаблицаСторнируемыхДокументов.Найти(Выборка.НомерСтроки, "НомерСтроки");
				СтрокаПоНомеру.СторнируемыйДокумент = Выборка.СторнируемыйДокумент;
				Если Выборка.Зацикливание Тогда
					НоваяСтрока = Зацикливания.Добавить();
					НоваяСтрока.Исходный = Выборка.ПромежуточноеИсправление;
					НоваяСтрока.Сторнируемый = Выборка.СторнируемыйДокумент;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ДопИмя = ИмяВТ1;
		ИмяВТ1 = ИмяВТ2;
		ИмяВТ2 = ДопИмя;

		Если ПервыйПроход Тогда
			ПервыйПроход = Ложь;
			Шаблон = "УНИЧТОЖИТЬ ВТ2" + ОбщегоНазначения.РазделительПакетаЗапросов() + Шаблон;
		КонецЕсли;

	КонецЦикла;

	ТаблицыКУдалению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяВТ1);
	ТаблицыКУдалению.Добавить(ИмяВТ2);
	ТаблицыКУдалению.Добавить("ВТДляУточнения");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ТаблицыКУдалению);

	Если Зацикливания.Количество() Тогда
		Зацикливания.Свернуть("Исходный, Сторнируемый");
		Для Каждого Строка Из Зацикливания Цикл
			ИмяСобытия = НСтр("ru = 'Зацикливание';
								|en = 'Loop'", ОбщегоНазначения.КодОсновногоЯзыка());
			ШаблонСообщения = НСтр("ru = 'Обнаружено зацикливание ссылкой на сторнируемый документ: %1
				|Следует пересчитать и перепровести документы в правильном порядке, или вручную отредактировать перерасчеты в документе.';
				|en = 'Loop by the reversed document link is found: %1
				|Recalculate and repost the documents in the correct order or edit the document recalculations manually.'");
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыРасчета.Начисления, Строка.Исходный, СтрШаблон(ШаблонСообщения, Строка(Строка.Сторнируемый)));

			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыРасчета.Начисления, Строка.Сторнируемый, СтрШаблон(ШаблонСообщения, Строка(Строка.Исходный)));
		КонецЦикла;

		ВызватьИсключение
			НСтр("ru = 'Обнаружено зацикливание сторнируемых документов. Подробности см. в журнале регистрации (Предупреждение ""Зацикливание"")';
				|en = 'Reversed document loop is found. For more information, see the event log (""Loop"" Warning)'");
	КонецЕсли;

КонецПроцедуры

Процедура УточнитьСторнируемыеДокументы(ТаблицаСторнируемыхДокументов, ТаблицаПромежуточныхИсправлений)
    
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
	    Если Не ЗначениеЗаполнено(СтрокаТЗ.СторнируемыйДокумент) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ)
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		ТаблицаСторнируемыхДокументов.Удалить(СтрокаТЗ)
	КонецЦикла;
	
	ОбработанныеДокументы = Новый Соответствие;	
	Для каждого СтрокаТЗ Из ТаблицаСторнируемыхДокументов Цикл
		УточненныйДокумент = ОбработанныеДокументы[СтрокаТЗ.СторнируемыйДокумент];
		Если ЗначениеЗаполнено(УточненныйДокумент) Тогда
			СтрокаТЗ.СторнируемыйДокумент = УточненныйДокумент
		Иначе
			Если СтрокаТЗ.СторнируемыйДокумент.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
				ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, СтрокаТЗ.СторнируемыйДокумент);
				Продолжить;
			КонецЕсли;
			ПредыдущаяСсылка = СтрокаТЗ.СторнируемыйДокумент;
			СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент");
			НовыеСтроки = Новый Массив;
			Пока ЗначениеЗаполнено(СледующаяСсылка) Цикл
				СтрокаТаблицыПромежуточныхИсправлений = ТаблицаПромежуточныхИсправлений.Добавить();
				СтрокаТаблицыПромежуточныхИсправлений.ПромежуточноеИсправление = ПредыдущаяСсылка;
				НовыеСтроки.Добавить(СтрокаТаблицыПромежуточныхИсправлений);
				ПредыдущаяСсылка = СледующаяСсылка;
				Если ПредыдущаяСсылка.Метаданные().Реквизиты.Найти("ИсправленныйДокумент") = Неопределено Тогда
					Прервать;
				КонецЕсли;
				СледующаяСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущаяСсылка, "ИсправленныйДокумент")
			КонецЦикла;
			ОбработанныеДокументы.Вставить(СтрокаТЗ.СторнируемыйДокумент, ПредыдущаяСсылка);
			СтрокаТЗ.СторнируемыйДокумент = ПредыдущаяСсылка;
			Для каждого СтрокаТаблицыПромежуточныхИсправлений Из НовыеСтроки Цикл
				СтрокаТаблицыПромежуточныхИсправлений.СторнируемыйДокумент = ПредыдущаяСсылка;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ);
	Регистры.Добавить(Метаданные.РегистрыНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению);
	
	Возврат Регистры;
КонецФункции

Функция СтрокаПримененияСоциальныхВычетов(Движения, Организация, ДатаОперации, ДанныеДокумента)
	
	НоваяСтрока = Движения.ПредоставлениеСоциальныхВычетовУРаботодателя.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДокумента);
	НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	НоваяСтрока.Период = ДатаОперации;
	
    Возврат НоваяСтрока
	
КонецФункции

Функция ТекстЗапросаСТаблицейНачисленийИГрантами(ТекстЗапроса, ИмяВТНачисления, СуммыЗаСчетГрантовНеПереданы)

	Если СуммыЗаСчетГрантовНеПереданы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СуммаЗаСчетГрантов", "0");
	КонецЕсли;
	
	Возврат	 СтрЗаменить(ТекстЗапроса, "#ИмяВТНачисления", ИмяВТНачисления)
	
КонецФункции 

Функция ТекстЗапросаСТаблицейНачисленийИНеОблагаемымиДоходами(ТекстЗапроса, ИмяВТНачисления, НеОблагаемыеДоходыПереданы)

	Если Не НеОблагаемыеДоходыПереданы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СуммаДоходаНеОблагаемаяНДФЛ", "0");
	КонецЕсли;
	
	Возврат	 СтрЗаменить(ТекстЗапроса, "#ИмяВТНачисления", ИмяВТНачисления)
	
КонецФункции

// Обновление ИБ

Процедура ИсправитьФлажокМежрасчетностиВСведенияхОДоходахСторнирования(ПараметрыОбновления = Неопределено) Экспорт 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СторнированиеНачислений КАК СторнированиеНачислений
	|		ПО СведенияОДоходахНДФЛ.Регистратор = СторнированиеНачислений.Ссылка
	|ГДЕ
	|	СведенияОДоходахНДФЛ.ДоходМежрасчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ДоходМежрасчетногоПериода,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	УчетНДФЛ.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", ТекстЗапроса, , , ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗарегистрироватьПереносыДанныхКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	УчетНДФЛ.ЗарегистрироватьДокументыКакУчтенныеПриРасчетеНДФЛ("ПереносДанных", ПараметрыОбновления)
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияЗарплатыКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	УчетНДФЛ.ЗарегистрироватьДокументыКакУчтенныеПриРасчетеНДФЛ("НачислениеЗарплаты", ПараметрыОбновления)
	
КонецПроцедуры

Процедура ВычеркнутьЛишниеНачисленияЗарплатыИзУчтенныхПриРасчетеНДФЛ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК ДокументОснование,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация КАК Организация
	|ПОМЕСТИТЬ ВТЗадвоенныеСтроки
	|ИЗ
	|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|ГДЕ
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор ССЫЛКА Документ.НачислениеЗарплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДокументыУчтенныеПриРасчетеНДФЛ.НомерСтроки) > 1";
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда // Задвоенных строк не оказалось.
		//Возврат	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадвоенныеСтроки.ДокументОснование КАК ДокументОснование,
	|	ЗадвоенныеСтроки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗадвоенныеСтроки.Организация КАК Организация,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор КАК Регистратор,
	|	НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ФизическоеЛицо ЕСТЬ НЕ NULL  КАК ЕстьВТЧДокумента
	|ПОМЕСТИТЬ ВТЗадвоенныеСтрокиСРегистраторами
	|ИЗ
	|	ВТЗадвоенныеСтроки КАК ЗадвоенныеСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ПО ЗадвоенныеСтроки.ДокументОснование = ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование
	|			И ЗадвоенныеСтроки.ФизическоеЛицо = ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо
	|			И ЗадвоенныеСтроки.Организация = ДокументыУчтенныеПриРасчетеНДФЛ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.УчтенныеПриРасчетеНДФЛДокументы КАК НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы
	|		ПО (ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор = НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.Ссылка)
	|			И ЗадвоенныеСтроки.ФизическоеЛицо = НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ФизическоеЛицо
	|			И ЗадвоенныеСтроки.ДокументОснование = НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадвоенныеСтрокиСРегистраторами.ДокументОснование КАК ДокументОснование,
	|	ЗадвоенныеСтрокиСРегистраторами.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗадвоенныеСтрокиСРегистраторами.Организация КАК Организация,
	|	МИНИМУМ(ЗадвоенныеСтрокиСРегистраторами.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыСоСтрокамиСвоейТЧ
	|ИЗ
	|	ВТЗадвоенныеСтрокиСРегистраторами КАК ЗадвоенныеСтрокиСРегистраторами
	|ГДЕ
	|	ЗадвоенныеСтрокиСРегистраторами.ЕстьВТЧДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадвоенныеСтрокиСРегистраторами.ДокументОснование,
	|	ЗадвоенныеСтрокиСРегистраторами.ФизическоеЛицо,
	|	ЗадвоенныеСтрокиСРегистраторами.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадвоенныеСтрокиСРегистраторами.ДокументОснование КАК ДокументОснование,
	|	ЗадвоенныеСтрокиСРегистраторами.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗадвоенныеСтрокиСРегистраторами.Организация КАК Организация,
	|	ЗадвоенныеСтрокиСРегистраторами.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТСтрокиКУдалениюИзРегистратора
	|ИЗ
	|	ВТЗадвоенныеСтрокиСРегистраторами КАК ЗадвоенныеСтрокиСРегистраторами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистраторыСоСтрокамиСвоейТЧ КАК РегистраторыСоСтрокамиСвоейТЧ
	|		ПО ЗадвоенныеСтрокиСРегистраторами.ДокументОснование = РегистраторыСоСтрокамиСвоейТЧ.ДокументОснование
	|			И ЗадвоенныеСтрокиСРегистраторами.ФизическоеЛицо = РегистраторыСоСтрокамиСвоейТЧ.ФизическоеЛицо
	|			И ЗадвоенныеСтрокиСРегистраторами.Организация = РегистраторыСоСтрокамиСвоейТЧ.Организация
	|			И ЗадвоенныеСтрокиСРегистраторами.Регистратор = РегистраторыСоСтрокамиСвоейТЧ.Регистратор
	|ГДЕ
	|	ЗадвоенныеСтрокиСРегистраторами.ЕстьВТЧДокумента
	|	И РегистраторыСоСтрокамиСвоейТЧ.Регистратор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадвоенныеСтрокиСРегистраторами.Регистратор КАК Регистратор
	|ИЗ
	|	ВТЗадвоенныеСтрокиСРегистраторами КАК ЗадвоенныеСтрокиСРегистраторами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор КАК Регистратор,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Активность КАК Активность,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование КАК ДокументОснование,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Организация КАК Организация,
	|	ДокументыУчтенныеПриРасчетеНДФЛ.УдержатьНалогПриВыплатеЗарплаты КАК УдержатьНалогПриВыплатеЗарплаты
	|ИЗ
	|	РегистрСведений.ДокументыУчтенныеПриРасчетеНДФЛ КАК ДокументыУчтенныеПриРасчетеНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗадвоенныеСтроки КАК ЗадвоенныеСтроки
	|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = ЗадвоенныеСтроки.ДокументОснование
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = ЗадвоенныеСтроки.ФизическоеЛицо
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = ЗадвоенныеСтроки.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистраторыСоСтрокамиСвоейТЧ КАК СтрокиИзТЧ
	|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = СтрокиИзТЧ.ДокументОснование
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = СтрокиИзТЧ.ФизическоеЛицо
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = СтрокиИзТЧ.Организация
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор = СтрокиИзТЧ.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиКУдалениюИзРегистратора КАК СтрокиКУдалениюИзРегистратора
	|		ПО ДокументыУчтенныеПриРасчетеНДФЛ.ДокументОснование = СтрокиКУдалениюИзРегистратора.ДокументОснование
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.ФизическоеЛицо = СтрокиКУдалениюИзРегистратора.ФизическоеЛицо
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.Организация = СтрокиКУдалениюИзРегистратора.Организация
	|			И ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор = СтрокиКУдалениюИзРегистратора.Регистратор
	|ГДЕ
	|	ДокументыУчтенныеПриРасчетеНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				ЗадвоенныеСтрокиСРегистраторами.Регистратор КАК Регистратор
	|			ИЗ
	|				ВТЗадвоенныеСтрокиСРегистраторами КАК ЗадвоенныеСтрокиСРегистраторами)
	|	И (ЗадвоенныеСтроки.ДокументОснование ЕСТЬ NULL
	|			ИЛИ СтрокиИзТЧ.ДокументОснование ЕСТЬ НЕ NULL )
	|	И СтрокиКУдалениюИзРегистратора.ДокументОснование ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	Результаты= Запрос.ВыполнитьПакет();
	РегистраторыДляОчистки = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(Результаты[3].Выгрузить().ВыгрузитьКолонку("Регистратор"));
	Если Не Результаты[4].Пустой() Тогда
		Выборка = Результаты[4].Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			РегистраторыДляОчистки.Удалить(Выборка.Регистратор);
			НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;
	КонецЕсли;
	Для каждого Элемент Из РегистраторыДляОчистки Цикл
		НаборЗаписей = РегистрыСведений.ДокументыУчтенныеПриРасчетеНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Элемент.Ключ);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.Ссылка КАК Ссылка,
	|	НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.НачислениеЗарплаты.УчтенныеПриРасчетеНДФЛДокументы КАК НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиКУдалениюИзРегистратора КАК СтрокиКУдалениюИзРегистратора
	|		ПО НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.Ссылка = СтрокиКУдалениюИзРегистратора.Регистратор
	|			И НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ФизическоеЛицо = СтрокиКУдалениюИзРегистратора.ФизическоеЛицо
	|			И НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.ДокументОснование = СтрокиКУдалениюИзРегистратора.ДокументОснование
	|ГДЕ
	|	НачислениеЗарплатыУчтенныеПриРасчетеНДФЛДокументы.Ссылка В
	|			(ВЫБРАТЬ
	|				СтрокиКУдалениюИзРегистратора.Регистратор КАК Регистратор
	|			ИЗ
	|				ВТСтрокиКУдалениюИзРегистратора КАК СтрокиКУдалениюИзРегистратора)
	|	И СтрокиКУдалениюИзРегистратора.ФизическоеЛицо ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТабличнаяЧасть = ДокументОбъект.УчтенныеПриРасчетеНДФЛДокументы;
			ТабличнаяЧасть.Очистить();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьКод2400() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	СведенияОДоходахНДФЛ.КодДохода КАК КодДохода
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|		ПО СведенияОДоходахНДФЛ.Регистратор = РегистрацияПрочихДоходов.Ссылка
	|			И СведенияОДоходахНДФЛ.Начисление = РегистрацияПрочихДоходов.ВидПрочегоДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО СведенияОДоходахНДФЛ.КодДохода = ВидыДоходовНДФЛ.Ссылка
	|ГДЕ
	|	ВидыДоходовНДФЛ.Ссылка ЕСТЬ NULL
	|	И РегистрацияПрочихДоходов.Ссылка ЕСТЬ НЕ NULL 
	|	И СведенияОДоходахНДФЛ.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)";
	Результаты = Запрос.Выполнить().Выгрузить();
	Если Результаты.Количество() <> 1 Тогда
		 Возврат
	КонецЕсли;
	
	ЗаменяемаяСсылка = Результаты[0].КодДохода;
	ЗаменяющаяСсылка = Справочники.ВидыДоходовНДФЛ.НайтиПоКоду("2400");
	Запрос.УстановитьПараметр("ЗаменяемаяСсылка", ЗаменяемаяСсылка);
	Запрос.УстановитьПараметр("ЗаменяющаяСсылка", ЗаменяющаяСсылка);
	
	// Обновление прочего дохода
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПрочихДоходовФизическихЛиц.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПрочихДоходовФизическихЛиц КАК ВидыПрочихДоходовФизическихЛиц
	|ГДЕ
	|	ВидыПрочихДоходовФизическихЛиц.КодДоходаНДФЛ = &ЗаменяемаяСсылка";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.КодДоходаНДФЛ = ЗаменяющаяСсылка;
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов"); 
			Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			Объект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	// Обновление данных учета
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПрочихДоходов КАК РегистрацияПрочихДоходов
	|		ПО СведенияОДоходахНДФЛ.Регистратор = РегистрацияПрочихДоходов.Ссылка
	|			И СведенияОДоходахНДФЛ.Начисление = РегистрацияПрочихДоходов.ВидПрочегоДохода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияНалоговогоУчетаПоНДФЛ КАК ОперацияНалоговогоУчетаПоНДФЛ
	|		ПО СведенияОДоходахНДФЛ.Регистратор = ОперацияНалоговогоУчетаПоНДФЛ.Ссылка
	|ГДЕ
	|	(РегистрацияПрочихДоходов.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОперацияНалоговогоУчетаПоНДФЛ.Ссылка ЕСТЬ НЕ NULL )
	|	И СведенияОДоходахНДФЛ.КодДохода = &ЗаменяемаяСсылка";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка КАК Ссылка,
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.КодДохода = &ЗаменяемаяСсылка
	|			ТОГДА &ЗаменяющаяСсылка
	|		ИНАЧЕ ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.КодДохода
	|	КОНЕЦ КАК КодДохода,
	|	*
	|ИЗ
	|	Документ.ОперацияНалоговогоУчетаПоНДФЛ.СведенияОДоходах КАК ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах
	|ГДЕ
	|	ОперацияНалоговогоУчетаПоНДФЛСведенияОДоходах.Ссылка В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор КАК Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТабличнаяЧасть = ДокументОбъект.СведенияОДоходах;
			ТабличнаяЧасть.Очистить();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.КодДохода = &ЗаменяемаяСсылка
	|			ТОГДА &ЗаменяющаяСсылка
	|		ИНАЧЕ СведенияОДоходахНДФЛ.КодДохода
	|	КОНЕЦ КАК КодДохода,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор КАК Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ПараметрыЗапроса = Новый Структура("ЗаменяемаяСсылка, ЗаменяющаяСсылка", ЗаменяемаяСсылка, ЗаменяющаяСсылка);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, ПараметрыЗапроса, Запрос.МенеджерВременныхТаблиц);

КонецПроцедуры

Процедура УточнитьКодДоходаПоКомпенсацииНеИспользованныхДнейЧасовОтдыха(ПараметрыОбновления = Неопределено) Экспорт

	Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияНеИспользованныхДнейЧасовОтдыха)
	|	И СведенияОДоходахНДФЛ.КодДохода <> СведенияОДоходахНДФЛ.Начисление.КодДоходаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияНеИспользованныхДнейЧасовОтдыха)
	|			ТОГДА СведенияОДоходахНДФЛ.Начисление.КодДоходаНДФЛ
	|		ИНАЧЕ СведенияОДоходахНДФЛ.КодДохода
	|	КОНЕЦ КАК КодДохода,
	|	*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Если ПараметрыОбновления = НеОпределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОбработатьНаборыЗаписейРегистраНакопления("СведенияОДоходахНДФЛ", Текст, , , ПараметрыОбновления)

КонецПроцедуры

#КонецОбласти

#КонецОбласти
