#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.<Имя документа> - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	// Счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
	КомандаПечати.Идентификатор  = "СчетФактура";
	КомандаПечати.Представление  = НСтр("ru = 'Счет-фактура';
										|en = 'Tax invoice'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("ПечатьВВалюте", Ложь);

	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		// Счет-фактура (в валюте)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати      = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор       = "СчетФактураВВалюте";
		КомандаПечати.Представление       = НСтр("ru = 'Счет-фактура (в валюте)';
												|en = 'Tax invoice (in currency)'");
		КомандаПечати.ФункциональныеОпции = "ИспользоватьНесколькоВалют";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ПечатьВВалюте", Истина);
		
		// УПД (Универсальный передаточный документ)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьОбщихФорм";
		КомандаПечати.Идентификатор  = "УПД";
		КомандаПечати.Представление  = НСтр("ru = 'УПД (Универсальный передаточный документ)';
											|en = 'UTD (Universal transfer document)'");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		// Извещение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьИзвещений";
		КомандаПечати.Идентификатор  = "Извещение";
		КомандаПечати.Представление  = НСтр("ru = 'Извещение';
											|en = 'Notification'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов        - см. Документы.ОтчетДавальцу2_5.Печать.МассивОбъектов
//  ПараметрыПечати       - см. Документы.ОтчетДавальцу2_5.Печать.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. Документы.ОтчетДавальцу2_5.Печать.КоллекцияПечатныхФорм
//  ОбъектыПечати         - см. Документы.ОтчетДавальцу2_5.Печать.ОбъектыПечати
//  ПараметрыВывода       - см. Документы.ОтчетДавальцу2_5.Печать.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

// Сформировать комплект печатных форм.
// 
// Параметры:
//  МассивОбъектов        - см. Документы.ОтчетДавальцу2_5.Печать.МассивОбъектов
//  ПараметрыПечати       - см. Документы.ОтчетДавальцу2_5.Печать.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. Документы.ОтчетДавальцу2_5.Печать.КоллекцияПечатныхФорм
//  ОбъектыПечати         - см. Документы.ОтчетДавальцу2_5.Печать.ОбъектыПечати
//  КомплектПечатныхФорм  - см. РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм
//
Процедура СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, КомплектПечатныхФорм) Экспорт
	
	//++ Локализация
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "Извещение");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу2_5", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьИзвещений.СформироватьПечатнуюФормуИзвещение(
				СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "СчетФактураОтчетДавальцу2_5");
		
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу2_5", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСчетФактура(
				СтруктураТипов, ОбъектыПечати, Новый Структура("ПечатьВВалюте", Ложь)));
		
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "СчетФактураОтчетДавальцуВВалюте2_5");
	
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу2_5", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСчетФактура(
				СтруктураТипов, ОбъектыПечати, Новый Структура("ПечатьВВалюте", Истина)));
		
	КонецЦикла;
		
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(
		КоллекцияПечатныхФорм, КомплектПечатныхФорм, МассивОбъектов, "УПДОтчетДавальцу2_5");
		
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу2_5", КомплектПечати.Объекты);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, Неопределено));
		
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

// Комплект печатных форм.
// 
// Параметры:
//  КомплектПечатныхФорм - см. РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм
//
Процедура КомплектПечатныхФорм(КомплектПечатныхФорм) Экспорт
	
	//++ Локализация
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм, "СчетФактураОтчетДавальцу2_5", НСтр("ru = 'Счет-фактура';
																	|en = 'Tax invoice'"), 2);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
			КомплектПечатныхФорм, "СчетФактураОтчетДавальцуВВалюте2_5", НСтр("ru = 'Счет-фактура (в валюте)';
																			|en = 'Tax invoice (in currency)'"));
		
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
		КомплектПечатныхФорм, "УПДОтчетДавальцу2_5", НСтр("ru = 'УПД (Универсальный передаточный документ)';
															|en = 'UTD (Universal transfer document)'"));
		
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(
			КомплектПечатныхФорм, "Извещение", НСтр("ru = 'Извещение';
													|en = 'Notification'"));
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Формирует текст запроса для получения данных основания при печати Счет-фактуры.
// 
// Возвращаемое значение:
//  Строка - Текст запроса данных основания для печатной формы счет фактура
//
Функция ТекстЗапросаДанныхОснованияДляПечатнойФормыСчетФактура() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                       КАК Ссылка,
	|	ДанныеДокументов.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	ДанныеДокументов.Валюта                       КАК Валюта,
	|	ДанныеДокументов.Организация                  КАК Организация,
	|	ДанныеДокументов.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	ДанныеДокументов.Подразделение                КАК Подразделение,
	|	ДанныеДокументов.Склад                        КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Грузоотправитель,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Грузополучатель,
	|	ЛОЖЬ                                          КАК РасчетыЧерезОтдельногоКонтрагента,
	|	НЕОПРЕДЕЛЕНО                                  КАК Номенклатура,
	|	ДанныеДокументов.УслугаПоПереработке          КАК Содержание,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Комиссионер,
	|	ДанныеДокументов.Основание                    КАК Основание,
	|	ДанныеДокументов.ОснованиеДата                КАК ОснованиеДата,
	|	ДанныеДокументов.ОснованиеНомер               КАК ОснованиеНомер,
	|	ДанныеДокументов.БанковскийСчетОрганизации    КАК БанковскийСчетОрганизации,
	|	ДанныеДокументов.БанковскийСчетКонтрагента    КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО                                  КАК БанковскийСчетГрузоотправителя,
	|	НЕОПРЕДЕЛЕНО                                  КАК БанковскийСчетГрузополучателя,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДоверенностьЛицо,
	|	ДанныеДокументов.Менеджер                     КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО                                  КАК Кладовщик,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДолжностьКладовщика,
	|	""""                                          КАК АдресДоставки,
	|	""""                                          КАК АдресДоставкиЗначенияПолей,
	|	""""                                          КАК АдресДоставкиЗначение
	|
	|//ОператорПОМЕСТИТЬ
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокументов
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&ДокументОснование_ОтчетДавальцу2_5)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получить данные для печатной формы извещения.
// 
// Параметры:
//  ПараметрыПечати       - см. Документы.ОтчетДавальцу2_5.Печать.ПараметрыПечати
//  МассивОбъектов        - см. Документы.ОтчетДавальцу2_5.Печать.МассивОбъектов
// 
// Возвращаемое значение:
//  Структура - Получить данные для печатной формы извещения:
// * РезультатПоШапке - РезультатЗапроса -
// * РезультатПоЭтапамОплаты - РезультатЗапроса -
// * РезультатПоТабличнойЧасти - РезультатЗапроса -
Функция ПолучитьДанныеДляПечатнойФормыИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат Документы.ОтчетДавальцу2_5.ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

// Получить данные для печатной формы УПД.
// 
// Параметры:
//  ПараметрыПечати       - см. Документы.ОтчетДавальцу2_5.Печать.ПараметрыПечати
//  МассивОбъектов        - см. Документы.ОтчетДавальцу2_5.Печать.МассивОбъектов
// 
// Возвращаемое значение:
//  Структура - Получить данные для печатной формы УПД:
// * РезультатПоШапке - РезультатЗапроса -
// * РезультатПоТабличнойЧасти - РезультатЗапроса -
Функция ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Код";
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка              КАК Ссылка,
	|	ДанныеДокументов.Валюта              КАК Валюта,
	|	ДанныеДокументов.Организация         КАК Организация,
	|	ДанныеДокументов.Подразделение       КАК Подразделение,
	|	ДанныеДокументов.Склад               КАК Склад,
	|	ДанныеДокументов.УслугаПоПереработке КАК Содержание,
	|	ДанныеДокументов.Дата                КАК Период
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	УчетНДСРФ.ДополнитьЗапросПолученияДанныхДляПечатиУПД(Запрос, "Содержание");
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	
	Обработки.ПечатьОбщихФорм.ПоместитьВременнуюТаблицуДанныхПоставщика(МенеджерВременныхТаблиц);
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
		МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	&ПредставлениеСчетФактура                            КАК ПредставлениеДокумента,
	|	2                                                    КАК СтатусУПД,
	|	ДанныеДокумента.Номер                                КАК Номер,
	|	ДанныеДокумента.Дата                                 КАК Дата,
	|	НЕОПРЕДЕЛЕНО                                         КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО                                         КАК ДатаИсправления,
	|	ЛОЖЬ                                                 КАК Исправление,
	|	НЕОПРЕДЕЛЕНО                                         КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО                                         КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО                                         КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО                                         КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ                                                 КАК КорректировочныйСчетФактура,
	|	""""                                                 КАК СтрокаПоДокументу,
	|	НЕОПРЕДЕЛЕНО                                         КАК ВалютаСчетаФактуры,
	|	ДанныеДокумента.Партнер                              КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Контрагент.ОбособленноеПодразделение
	|			ТОГДА ДанныеДокумента.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ ДанныеДокумента.Контрагент
	|	КОНЕЦ                                                 КАК Контрагент,
	|	ДанныеДокумента.НалогообложениеНДС                    КАК НалогообложениеНДС,
	|	ДанныеПоставщика.ГоловнаяОрганизация                  КАК Организация,
	|	ДанныеДокумента.Организация.Префикс                   КАК Префикс,
	|	0                                                     КАК ИндексПодразделения,
	|	ТаблицаОтветственныеЛица.РуководительНаименование     КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность        КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.Контрагент                            КАК Грузополучатель,
	|	НЕОПРЕДЕЛЕНО                                          КАК Грузоотправитель,
	|	ДанныеПоставщика.КПППоставщика                        КАК КПППоставщика,
	|	""""                                                  КАК КПППокупателя,
	|	ДанныеДокумента.Контрагент.ИНН                        КАК ИННПокупателя,
	|	НЕОПРЕДЕЛЕНО                                          КАК АдресДоставки,
	|	ДанныеДокумента.Валюта                                КАК Валюта,
	|	ДанныеДокумента.Валюта.НаименованиеПолное             КАК ВалютаНаименованиеПолное,
	|	ДанныеДокумента.Валюта.Код                            КАК ВалютаКод,
	|	ИСТИНА                                                КАК ТолькоУслуги,
	|	ЛОЖЬ                                                  КАК ЕстьПрослеживаемыеТовары,
	|	ЛОЖЬ                                                  КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.Основание                             КАК Основание,
	|	НЕОПРЕДЕЛЕНО                                          КАК ДоверенностьНомер,
	|	НЕОПРЕДЕЛЕНО                                          КАК ДоверенностьДата,
	|	НЕОПРЕДЕЛЕНО                                          КАК ДоверенностьВыдана,
	|	НЕОПРЕДЕЛЕНО                                          КАК ДоверенностьЛицо,
	|	НЕОПРЕДЕЛЕНО                                          КАК Кладовщик,
	|	НЕОПРЕДЕЛЕНО                                          КАК ДолжностьКладовщика,
	|	ДанныеДокументов.ТребуетсяНаличиеСФ                   КАК ТребуетсяНаличиеСФ
	|ИЗ
	|	Документ.ОтчетДавальцу2_5 КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО ДанныеДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоставщика КАК ДанныеПоставщика
	|		ПО ДанныеДокумента.Ссылка = ДанныеПоставщика.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                       КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                  КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                 КАК Номенклатура,
	|	ТаблицаДокумента.Номенклатура.Представление   КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА &КолонкаКодов = ""Артикул""
	|			ТОГДА ТаблицаДокумента.Номенклатура.Артикул
	|		ИНАЧЕ ТаблицаДокумента.Номенклатура.Код
	|	КОНЕЦ                                         КАК НоменклатураКод,
	|	ТаблицаДокумента.Характеристика               КАК Характеристика,
	|	ТаблицаДокумента.Характеристика.Представление КАК ХарактеристикаНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаДокумента.Упаковка
	|	КОНЕЦ                                         КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.Представление
	|	КОНЕЦ                                         КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ ТаблицаДокумента.Упаковка.Код
	|	КОНЕЦ                                         КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.НомерГТД                     КАК НомерГТДСсылка,
	|	ЕСТЬNULL(ТаблицаДокумента.НомерГТД.ТипНомераГТД, НЕОПРЕДЕЛЕНО) КАК ТипНомераГТД,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.НомерГТД.РегистрационныйНомер = """"
	|			ТОГДА ТаблицаДокумента.НомерГТД
	|		ИНАЧЕ ТаблицаДокумента.НомерГТД.РегистрационныйНомер
	|	КОНЕЦ                                         КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО                                  КАК СтранаПроисхождения,
	|	НЕОПРЕДЕЛЕНО                                  КАК СтранаПроисхожденияКод,
	|	ТаблицаДокумента.КоличествоУпаковок           КАК Количество,
	|	ТаблицаДокумента.Цена                         КАК Цена,
	|	ТаблицаДокумента.СтавкаНДС                    КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС                  КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС                     КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС
	|		+ ТаблицаДокумента.СуммаНДС               КАК СуммаСНДС,
	|	ЛОЖЬ                                          КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ОтчетДавальцу2_5ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|";
	
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru = 'счет-фактура';
																|en = 'tax invoice'"));
	Запрос.УстановитьПараметр("КолонкаКодов",             КолонкаКодов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ДанныеДляПечати   = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке",          МассивРезультатов[0]);
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", МассивРезультатов[1]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПараметрыЗаполнения - Структура - структура, возвращаемая функцией ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",   ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	
	Если ПараметрыЗаполнения.ПересчитыватьВВалютуРегл И ПараметрыЗаполнения.АктуализироватьРасчеты Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
			|		ПО РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
			|
			|ГДЕ
			|	ДанныеДокументов.Валюта <> ДанныеДокументов.Организация.ВалютаРегламентированногоУчета
			|	И РасчетыСКлиентами.Активность
			|";
			
			ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
			МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
			
			Если МассивАналитикУчетаПоПартнерам.Количество() > 0 Тогда
				
				ОкончаниеПериодаРасчета = КонецМесяца(ВзаиморасчетыСервер.ПолучитьМаксимальнуюДатуВКоллекцииДокументов(
											МенеджерВременныхТаблиц)) + 1;
				
				АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
				АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикУчетаПоПартнерам;
				
				Попытка
					
					РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(
						ОкончаниеПериодаРасчета, АналитикиРасчета);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Печатная форма сформирована по неактуальным данным.
												|Необходимо актуализировать взаиморасчеты вручную и переформировать печатную форму.';
												|en = 'Print form is generated according to irrelevant data. 
												|Update AR/AP accounting manually, and then create the print form again.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокументов.Ссылка КАК Ссылка
			|ИЗ
			|	ТаблицаДанныхДокументов КАК ДанныеДокументов
			|ГДЕ 
			|	ДанныеДокументов.Валюта <> ДанныеДокументов.Организация.ВалютаРегламентированногоУчета
			|	ИЛИ ДанныеДокументов.Валюта <> &ВалютаУправленческогоУчета";
			
			МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивДокументов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК Ссылка,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	МАКСИМУМ(ТаблицаТоваров.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ СтрокиТоваров
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО ТаблицаТоваров.Ссылка = ДанныеДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Ссылка,
	|	ТаблицаТоваров.ИдентификаторСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	// Работы
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                     КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                                КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                               КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                             КАК Характеристика,
	|	ВЫРАЗИТЬ("""" КАК Строка(200))                              КАК Содержание,
	|	ТаблицаДокумента.Серия                                      КАК Серия,
	|	ТаблицаДокумента.Количество                                 КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок                         КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Упаковка                                   КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)                 КАК НомерГТД,
	|	0                                                           КАК КоличествоПоРНПТ,
	|	ТаблицаДокумента.Цена                                       КАК Цена,
	|	ТаблицаДокумента.Ссылка.СтавкаНДС                           КАК СтавкаНДС,
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютахУчета.БазаНДСРегл,
	|		ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС) КАК СуммаБезНДС,
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютахУчета.СуммаНДСРегл,
	|		ТаблицаДокумента.СуммаНДС)                              КАК СуммаНДС,
	|	ЛОЖЬ                                                        КАК ЭтоТовар,
	|	ЛОЖЬ                                                        КАК ВернутьМногооборотнуюТару
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.Продукция КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|	ПО ТаблицаДокумента.Ссылка = СуммыДокументовВВалютахУчета.Регистратор
	|	И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютахУчета.ИдентификаторСтроки
	|	И СуммыДокументовВВалютахУчета.Активность
	|	И &ПересчитыватьВВалютуРегл
	|
	|ГДЕ
	|	ТаблицаДокумента.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Товары
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                      КАК Ссылка,
	|	МИНИМУМ(СтрокиТоваров.НомерСтроки)                           КАК НомерСтроки,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура     КАК Номенклатура,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Характеристика   КАК Характеристика,
	|	ВЫРАЗИТЬ("""" КАК Строка(200))                               КАК Содержание,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры.Серия            КАК Серия,
	|	СУММА(ТаблицаДокумента.Количество)                           КАК Количество,
	|	СУММА(ТаблицаДокумента.КоличествоУпаковок)                   КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Упаковка                                    КАК Упаковка,
	|	ТаблицаДокумента.НомерГТД                                    КАК НомерГТД,
	|	СУММА(ТаблицаДокумента.КоличествоПоРНПТ)                     КАК КоличествоПоРНПТ,
	|	ТаблицаДокумента.Цена                                        КАК Цена,
	|	ТаблицаДокумента.Ссылка.СтавкаНДС                            КАК СтавкаНДС,
	|	СУММА(ЕСТЬNULL(
	|		СуммыДокументовВВалютахУчета.БазаНДСРегл,
	|		ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС)) КАК СуммаБезНДС,
	|	СУММА(ЕСТЬNULL(
	|		СуммыДокументовВВалютахУчета.СуммаНДСРегл,
	|		ТаблицаДокумента.СуммаНДС))                              КАК СуммаНДС,
	|	ИСТИНА                                                       КАК ЭтоТовар,
	|	ЛОЖЬ                                                         КАК ВернутьМногооборотнуюТару
	|ИЗ
	|	Документ.ОтчетДавальцу2_5.ВидыЗапасов КАК ТаблицаДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|	ПО ТаблицаДокумента.Ссылка = СуммыДокументовВВалютахУчета.Регистратор
	|	И ТаблицаДокумента.ИдентификаторФинЗаписи = СуммыДокументовВВалютахУчета.ИдентификаторСтроки
	|	И СуммыДокументовВВалютахУчета.Активность
	|	И &ПересчитыватьВВалютуРегл
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтрокиТоваров КАК СтрокиТоваров
	|	ПО ТаблицаДокумента.Ссылка = СтрокиТоваров.Ссылка
	|	И ТаблицаДокумента.ИдентификаторСтроки = СтрокиТоваров.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.АналитикаУчетаНоменклатуры,
	|	ТаблицаДокумента.Упаковка,
	|	ТаблицаДокумента.НомерГТД,
	|	ТаблицаДокумента.Цена
	|";
	
	ШаблонСодержания = НСтр("ru = 'Услуга по выпуску продукции ""%1"" из давальческого сырья';
							|en = 'Service to release the ""%1"" product from provided materials'");
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущиеДанные Из ТаблицаТоваров Цикл
		Если ТекущиеДанные.ЭтоТовар Тогда
			ТекущиеДанные.Содержание = СтрШаблон(ШаблонСодержания, ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка             КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки        КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура       КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика     КАК Характеристика,
	|	ТаблицаДокумента.Содержание         КАК Содержание,
	|	ТаблицаДокумента.Серия              КАК Серия,
	|	ТаблицаДокумента.Количество         КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.Упаковка           КАК Упаковка,
	|	ТаблицаДокумента.Цена               КАК Цена,
	|	ТаблицаДокумента.СтавкаНДС          КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС        КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС           КАК СуммаНДС,
	|	ТаблицаДокумента.НомерГТД           КАК НомерГТД,
	|	ТаблицаДокумента.КоличествоПоРНПТ   КАК КоличествоПоРНПТ,
	|	ЛОЖЬ                                КАК ЭтоТовар,
	|	ТаблицаДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
	|ПОМЕСТИТЬ ОтчетДавальцу2_5ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет, есть ли в документах-основаниях счета-фактуры корректировки реализации по отчетам давальцу ред 2.5.
//
//	Параметры:
//		МассивОснований - Массив Из ДокументСсылка - массив ссылок на документы информационной базы
//  Возвращаемое значение:
//		Булево - 
//
Функция ЕстьОтчетыДавальцу(МассивОснований) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОснованияСФ", МассивОснований);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО СчетФактураВыданныйДокументыОснования.ДокументОснование = КорректировкаРеализации.Ссылка
	|			И КорректировкаРеализации.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5)
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка В (&ОснованияСФ)
	|";
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Преобразует временную таблицу товаров, созданную функцией ПоместитьВременнуюТаблицуТоваров()
// к виду, используемому при печати счетов-фактур.
// После преобразования временная таблица уничтожается.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу СчетФактураВыданныйДляОтчетаДавальцуТаблицаТоваров.
//
Процедура ПреобразоватьВременнуюТаблицуТоваровДляСчетаФактуры(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ СчетФактураВыданныйДляОтчетаДавальцуТаблицаТоваров";
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ШаблонСодержания = НСтр("ru = 'Услуга по выпуску продукции ""%1"" из давальческого сырья';
							|en = 'Service to release the ""%1"" product from provided materials'");
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущиеДанные Из ТаблицаТоваров Цикл
		Если ТекущиеДанные.ЭтоТовар Тогда
			ТекущиеДанные.Содержание = СтрШаблон(ШаблонСодержания, ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.НомерСтрокиИсходногоСФ КАК НомерСтрокиИсходногоСФ,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ТаблицаДокумента.Серия КАК Серия,
	|	ТаблицаДокумента.Упаковка КАК Упаковка,
	|	ТаблицаДокумента.НомерГТД КАК НомерГТД,
	|	ТаблицаДокумента.КодТНВЭД КАК КодТНВЭД,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.КоличествоПоРНПТ КАК КоличествоПоРНПТ,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.Содержание КАК Содержание,
	|	ТаблицаДокумента.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	ТаблицаДокумента.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ТаблицаДокумента.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	ТаблицаДокумента.НоменклатураНабора КАК НоменклатураНабора,
	|	ТаблицаДокумента.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ТаблицаДокумента.КоличествоДо КАК КоличествоДо,
	|	ТаблицаДокумента.КоличествоУпаковокДо КАК КоличествоУпаковокДо,
	|	ТаблицаДокумента.КоличествоПоРНПТДо КАК КоличествоПоРНПТДо,
	|	ТаблицаДокумента.КоличествоПоРНПТУвеличение КАК КоличествоПоРНПТУвеличение,
	|	ТаблицаДокумента.КоличествоПоРНПТУменьшение КАК КоличествоПоРНПТУменьшение,
	|	ТаблицаДокумента.СуммаБезНДСДо КАК СуммаБезНДСДо,
	|	ТаблицаДокумента.СуммаНДСДо КАК СуммаНДСДо,
	|	0 КАК МежценоваяРазница,
	|	0 КАК МежценоваяРазницаДо,
	|	ТаблицаДокумента.РазницаБезНДСУвеличение КАК РазницаБезНДСУвеличение,
	|	ТаблицаДокумента.РазницаБезНДСУменьшение КАК РазницаБезНДСУменьшение,
	|	ТаблицаДокумента.РазницаНДСУвеличение КАК РазницаНДСУвеличение,
	|	ТаблицаДокумента.РазницаНДСУменьшение КАК РазницаНДСУменьшение,
	|	ТаблицаДокумента.РазницаСНДСУвеличение КАК РазницаСНДСУвеличение,
	|	ТаблицаДокумента.РазницаСНДСУменьшение КАК РазницаСНДСУменьшение,
	|	ТаблицаДокумента.ЭтоТовар КАК ЭтоТовар,
	|	ТаблицаДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару
	|ПОМЕСТИТЬ СчетФактураВыданныйТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СчетФактураВыданныйДляОтчетаДавальцуТаблицаТоваров
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Выполнить();
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстыОтражения = Новый Массив;
	
	//++ Локализация
	
	ТекстыОтражения.Добавить(ТекстТекстЗадолженностьДавальцаЗаУслуги()); // Задолженность давальца за услуги (Дт <62.1, 76> :: Кт <90.1, 91.1>)
	ТекстыОтражения.Добавить(ТекстНачислениеНДСЗаУслуги()); // Начисление НДС (Дт <90.3, 91.2> :: Кт <68.2>)
	ТекстыОтражения.Добавить(ТекстСебестоимость()); // Выпуск продукции (Дт 90.02, 91.02 :: Кт 20.01, 23)
	ТекстыОтражения.Добавить(ТекстПередачаТоваровЗаБалансом()); // Передача товаров за балансом (Дт 002, 003, 004 :: Кт 002, 003, 004)
	ТекстыОтражения.Добавить(ПроизводствоБезЗаказаЛокализация.ТекстСписаниеТоваровНаРасходы()); // Списание на расходы (Дт 94, 44 :: Кт 20, 41.01, 76.06)
	ТекстыОтражения.Добавить(ПроизводствоБезЗаказаЛокализация.ТекстСписаниеТоваровНаСтатьиАктивовПассивов()); // Списание на прочие активы (Дт ХХ.ХХ :: Кт 20, 41.01, 76.06)
	
	//-- Локализация
	
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	//++ Локализация
	
	#Область ВТПолученияНалогообложенияПрибыли
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимость.Ссылка КАК Ссылка,
	|	ВыручкаИСебестоимость.Период КАК Период,
	|	ВыручкаИСебестоимость.Организация КАК Организация,
	|	ВыручкаИСебестоимость.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимость.НДВыручки КАК НаправлениеДеятельности,
	|	ВыручкаИСебестоимость.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТПолученияНалогообложенияПрибыли
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|	ПО ДокументыКОтражению.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И ВыручкаИСебестоимость.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО 
	|		УчетнаяПолитикаОрганизаций.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И УчетнаяПолитикаОрганизаций.Организация = ВыручкаИСебестоимость.Организация
	|		И УчетнаяПолитикаОрганизаций.Период = ВыручкаИСебестоимость.Период
	|		И УчетнаяПолитикаОрганизаций.РаздельныйУчетПоНалогуНаПрибыль
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Ссылка КАК Ссылка,
	|	Строки.Период КАК Период,
	|	Строки.Организация КАК Организация,
	|	ВыручкаИСебестоимость.Подразделение КАК Подразделение,
	|	ВыручкаИСебестоимость.НДСебестоимости КАК НаправлениеДеятельности,
	|	Строки.Номенклатура КАК Номенклатура
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5)
	|		И Строки.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		И Строки.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|		И Строки.СтатьяАктивовПассивов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|	ПО Строки.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И Строки.ИдентификаторФинЗаписи = ВыручкаИСебестоимость.ИдентификаторФинЗаписи
	|		И Строки.НастройкаХозяйственнойОперации = ВыручкаИСебестоимость.НастройкаХозОперации
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО 
	|		УчетнаяПолитикаОрганизаций.Ссылка = Строки.Ссылка
	|		И УчетнаяПолитикаОрганизаций.Организация = Строки.Организация
	|		И УчетнаяПолитикаОрганизаций.Период = Строки.Период
	|		И УчетнаяПолитикаОрганизаций.РаздельныйУчетПоНалогуНаПрибыль";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

	#КонецОбласти
	
	#Область РаздельныйУчет_НастройкиНалогообложенияПрибыли
	
	ПараметрыПолученияНалогообложенияПрибыли = РаздельныйУчетПоНалогуНаПрибыль.НовыйПараметрыПолученияТаблицыНастроекНалогообложенияПрибыли();
	ПараметрыПолученияНалогообложенияПрибыли.ИмяТаблицы = "ВТПолученияНалогообложенияПрибыли";
	ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Период = "Период";
	ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Организация = "Организация";
	ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Подразделение = "Подразделение";
	ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_НаправлениеДеятельности = "НаправлениеДеятельности";
	ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_ОбъектУчета = "Номенклатура";
	ТекстыЗапроса.Добавить(РаздельныйУчетПоНалогуНаПрибыль.ТекстЗапроса_НастройкиНалогообложенияПрибыли(ПараметрыПолученияНалогообложенияПрибыли));
	ТекстыЗапроса.Добавить("УНИЧТОЖИТЬ ВТПолученияНалогообложенияПрибыли");

	#КонецОбласти
	
	ТекстыЗапроса.Добавить("");
	
	//-- Локализация
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПериодыОтражения.Период        КАК Период,
	|	ПериодыОтражения.Организация   КАК Организация,
	|	ПериодыОтражения.ДатаОтражения КАК ДатаОтражения
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Период                      КАК Период,
	|		&Организация                 КАК Организация,
	|		НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Период                                                        КАК Период,
	|		&Организация                                                   КАК Организация,
	|		НАЧАЛОПЕРИОДА(НДССостояниеРеализации0.ДатаПодтверждения, ДЕНЬ) КАК ДатаОтражения
	|	ИЗ
	|		РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|	ГДЕ
	|		НДССостояниеРеализации0.ДокументРеализации = &Ссылка
	|		И НДССостояниеРеализации0.Состояние В (
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0),
	|			ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0))
	|	) КАК ПериодыОтражения
	|";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);

	ТекстЗапроса = РеглУчетПроведениеСервер.ТекстЗапросаОтраженияПоДоговору("&Договор");
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

//-- Локализация

#КонецОбласти

//++ Локализация

//++ НЕ УТ

#Область ФрагментыПроводокРеглУчета

Функция ТекстТекстЗадолженностьДавальцаЗаУслуги()
	
	ТекстЗадолженностьДавальцаЗаУслуги = "
	|ВЫБРАТЬ // Задолженность давальца за услуги (Дт <62.1, 76> :: Кт <90.1, 91.1>)
	|
	|	Расчеты.Ссылка КАК Ссылка,
	|	Расчеты.Период КАК Период,
	|	Расчеты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ВыручкаИСебестоимость.СуммаРегл КАК Сумма,
	|	ВыручкаИСебестоимость.СуммаУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ВыручкаИСебестоимость.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаНалогообложенияПрибыли.Организация ЕСТЬ NULL
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаРаздельныйНУ)
	|		ИНАЧЕ ВыручкаИСебестоимость.ВидСчетаВыручки
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ВыручкаИСебестоимость.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	ВыручкаИСебестоимость.Подразделение КАК ПодразделениеКт,
	|	ВыручкаИСебестоимость.НДВыручки КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	ВыручкаИСебестоимость.Номенклатура КАК СубконтоКт1,
	|	Суммы.СтавкаНДС.ПеречислениеСтавкаНДС КАК СубконтоКт2,
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли, ВыручкаИСебестоимость.Номенклатура) КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	ВыручкаИСебестоимость.Количество КАК КоличествоКт,
	|	ВыручкаИСебестоимость.СуммаБезНДСРегл КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Задолженность давальца за услуги"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасчетыСКлиентамиНоваяАрхитектура КАК Расчеты
	|	ПО ДокументыКОтражению.Ссылка = Расчеты.Ссылка
	|		И Расчеты.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|	ПО Расчеты.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И Расчеты.ОбъектРасчетов = ВыручкаИСебестоимость.ИсточникГФУРасчетов
	|		И ВыручкаИСебестоимость.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО Суммы.Регистратор = ВыручкаИСебестоимость.Ссылка
	|		И Суммы.ИдентификаторСтроки = ВыручкаИСебестоимость.ИдентификаторФинЗаписи
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
	|	ПО 
	|		ТаблицаНалогообложенияПрибыли.Период = Расчеты.Период
	|		И ТаблицаНалогообложенияПрибыли.Организация = Расчеты.Организация
	|		И ТаблицаНалогообложенияПрибыли.Подразделение = ВыручкаИСебестоимость.Подразделение
	|		И ТаблицаНалогообложенияПрибыли.ОбъектУчета = ВыручкаИСебестоимость.Номенклатура
	|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = ВыручкаИСебестоимость.НДВыручки";
	Возврат ТекстЗадолженностьДавальцаЗаУслуги;
	
КонецФункции

Функция ТекстНачислениеНДСЗаУслуги()
	
	ТекстНачислениеНДСЗаУслуги = "
	|ВЫБРАТЬ // Начисление НДС (Дт <90.3, 91.2> :: Кт <68.2>)
	|
	|	ВыручкаИСебестоимость.Ссылка КАК Ссылка,
	|	ВыручкаИСебестоимость.Период КАК Период,
	|	ВыручкаИСебестоимость.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже) КАК ВидСчетаДт,
	|	ВыручкаИСебестоимость.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	ВыручкаИСебестоимость.Подразделение КАК ПодразделениеДт,
	|	ВыручкаИСебестоимость.НДВыручки КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	ВыручкаИСебестоимость.Номенклатура КАК СубконтоДт1,
	|	Суммы.СтавкаНДС.ПеречислениеСтавкаНДС КАК СубконтоДт2,
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	&ВалютаРеглУчета КАК ВалютаКт,
	|	ВыручкаИСебестоимость.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Суммы.СуммаНДСРегл КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Начисление НДС"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|	ПО ДокументыКОтражению.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И ВыручкаИСебестоимость.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ОтчетДавальцу2_5)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО Суммы.Регистратор = ВыручкаИСебестоимость.Ссылка
	|		И Суммы.ИдентификаторСтроки = ВыручкаИСебестоимость.ИдентификаторФинЗаписи
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
	|	ПО 
	|		ТаблицаНалогообложенияПрибыли.Период = ВыручкаИСебестоимость.Период
	|		И ТаблицаНалогообложенияПрибыли.Организация = ВыручкаИСебестоимость.Организация
	|		И ТаблицаНалогообложенияПрибыли.Подразделение = ВыручкаИСебестоимость.Подразделение
	|		И ТаблицаНалогообложенияПрибыли.ОбъектУчета = ВыручкаИСебестоимость.Номенклатура
	|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = ВыручкаИСебестоимость.НДВыручки
	|
	|ГДЕ
	|	Суммы.СуммаНДСРегл <> 0";
	Возврат ТекстНачислениеНДСЗаУслуги;
	
КонецФункции

Функция ТекстСебестоимость()
	
	ТекстСебестоимость = "
	|ВЫБРАТЬ // Выпуск продукции (Дт 90.02, 91.02 :: Кт 20.01, 23)
	|
	|	Строки.Ссылка КАК Ссылка,
	|	Строки.Период КАК Период,
	|	Строки.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Стоимости.СуммаБалансовая КАК Сумма,
	|	Стоимости.СуммаБалансоваяУУ КАК СуммаУУ,
	|
	|	ВыручкаИСебестоимость.ВидСчетаСебестоимости КАК ВидСчетаДт,
	|	ВыручкаИСебестоимость.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ВыручкаИСебестоимость.Подразделение КАК ПодразделениеДт,
	|	ВыручкаИСебестоимость.НДСебестоимости КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ВыручкаИСебестоимость.Номенклатура КАК СубконтоДт1,
	|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	Строки.Количество КАК КоличествоДт,
	|	Стоимости.СуммаНУ КАК СуммаНУДт,
	|	Стоимости.СуммаПР КАК СуммаПРДт,
	|	Стоимости.СуммаВР КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Производство) КАК ВидСчетаКт,
	|	Строки.ГруппаПродукции КАК АналитикаУчетаКт,
	|	Строки.ПодразделениеАналитики КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Строки.ПодразделениеАналитики КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Строки.Номенклатура КАК СубконтоКт1,
	|	Строки.ГруппаПродукции КАК СубконтоКт2,
	|	Строки.ТипЗатрат КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Стоимости.СуммаНУ КАК СуммаНУКт,
	|	Стоимости.СуммаПР КАК СуммаПРКт,
	|	Стоимости.СуммаВР КАК СуммаВРКт,
	|	""Выпуск продукции"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу2_5)
	|		И Строки.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		И Строки.СтатьяДоходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка)
	|		И Строки.СтатьяАктивовПассивов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.ТипЗапасов = Стоимости.ТипЗапасов
	|		И Строки.СтатьяРасходов = Стоимости.СтатьяРасходов
	|		И Строки.ВидДвижения = Стоимости.ВидДвижения
	|		И Строки.ХозяйственнаяОперация = Стоимости.ХозяйственнаяОперация
	|		И Строки.ИдентификаторСтроки = Стоимости.ИдентификаторСтроки
	|		И Строки.ИдентификаторФинЗаписи = Стоимости.ИдентификаторФинЗаписи
	|		И Строки.НастройкаХозяйственнойОперации = Стоимости.НастройкаХозяйственнойОперации
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимость
	|	ПО Строки.Ссылка = ВыручкаИСебестоимость.Ссылка
	|		И Строки.ИдентификаторФинЗаписи = ВыручкаИСебестоимость.ИдентификаторФинЗаписи
	|		И Строки.НастройкаХозяйственнойОперации = ВыручкаИСебестоимость.НастройкаХозОперации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
	|	ПО 
	|		ТаблицаНалогообложенияПрибыли.Период = Строки.Период
	|		И ТаблицаНалогообложенияПрибыли.Организация = Строки.Организация
	|		И ТаблицаНалогообложенияПрибыли.Подразделение = ВыручкаИСебестоимость.Подразделение
	|		И ТаблицаНалогообложенияПрибыли.ОбъектУчета = Строки.Номенклатура
	|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = ВыручкаИСебестоимость.НДСебестоимости";
	Возврат ТекстСебестоимость;
	
КонецФункции

Функция ТекстПередачаТоваровЗаБалансом()
	
	ТекстЗапроса = ПроизводствоБезЗаказаЛокализация.ТекстПередачаТоваровЗаБалансом(Ложь, Ложь);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Содержание", "ВЫБОР
	|		КОГДА Строки.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость))
	|		ТОГДА ""Выпуск продукции давальца""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|			И НЕ Строки.КорПроизводственныеЗатраты
	|		ТОГДА ""Передача материалов давальца из производства""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|			И НЕ Строки.КорПроизводственныеЗатраты
	|		ТОГДА ""Передача полуфабрикатов давальца из производства""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|			И НЕ Строки.КорПроизводственныеЗатраты
	|		ТОГДА ""Передача товаров, принятых на ответственное хранение из производства""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|			И НЕ Строки.КорПроизводственныеЗатраты
	|		ТОГДА ""Передача товаров принятых на комиссию из производства""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|		ТОГДА ""Передача материалов давальца в производство""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|		ТОГДА ""Передача полуфабрикатов давальца в производство""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажи)
	|		ТОГДА ""Передача товаров, принятых на ответственное хранение в производство""
	|		КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		ТОГДА ""Передача товаров принятых на комиссию в производство""
	|		ИНАЧЕ ""Передача товаров, принятых на хранение в производство""
	|	КОНЕЦ");
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

//-- Локализация

#КонецОбласти
