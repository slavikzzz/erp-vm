
#Область ПрограммныйИнтерфейс

Процедура СформироватьЭтапыКЗапуску(ГруппыИзделий, Изделия, Параметры, АдресХранилища) Экспорт
	
	// Инициализация результата
	Результат = РезультатФормирования();
	
	// Порционная обработка
	ГруппыИзделийКопия = ГруппыИзделий.СкопироватьКолонки();
	ИзделияКопия = Изделия.СкопироватьКолонки();
	
	Изделия.Индексы.Добавить("НомерГруппы");
	СтруктураПоиска = Новый Структура("НомерГруппы");
	
	Счетчик = 1;
	РазмерПорции = 500;
	МаксимальныйИндекс = ГруппыИзделий.Количество()-1;
	
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		СтрокаГруппа = ГруппыИзделий[Индекс];
		ЗаполнитьЗначенияСвойств(ГруппыИзделийКопия.Добавить(), СтрокаГруппа);
		
		СтруктураПоиска.НомерГруппы = СтрокаГруппа.НомерГруппы;
		Для каждого СтрокаИзделие Из Изделия.НайтиСтроки(СтруктураПоиска) Цикл
			ЗаполнитьЗначенияСвойств(ИзделияКопия.Добавить(), СтрокаИзделие);
		КонецЦикла;
		
		Если Счетчик = РазмерПорции ИЛИ Индекс = МаксимальныйИндекс Тогда
			
			СформироватьПорциюЭтапов(ГруппыИзделийКопия, ИзделияКопия, Параметры, Результат, АдресХранилища);
			
			ГруппыИзделийКопия.Очистить();
			ИзделияКопия.Очистить();
			Счетчик = 1;
			
		Иначе
			Счетчик = Счетчик+1;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбеспечениеВДокументахВызовСервера.ЕстьЗаданияПоЗаказам(Результат.СозданныеОбъекты);
	
	СтруктураЗаказа.ЗапуститьРасчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РезультатФормирования() Экспорт
	
	РезультатФормирования = Новый ТаблицаЗначений;
	РезультатФормирования.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	РезультатФормирования.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	
	СозданныеОбъекты = Новый Массив;
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Ошибки.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Ошибки.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	Ошибки.Колонки.Добавить("Спецификация", Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	Ошибки.Колонки.Добавить("Сообщения", Новый ОписаниеТипов("Массив, ФиксированныйМассив"));
	
	Сообщения = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатФормирования", РезультатФормирования);
	Результат.Вставить("СозданныеОбъекты", СозданныеОбъекты);
	Результат.Вставить("Сообщения", Сообщения);
	Результат.Вставить("Ошибки", Ошибки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьПорциюЭтапов(ГруппыИзделий, Изделия, Параметры, Результат, АдресХранилища)
	
	РезультатФормирования = Результат.РезультатФормирования;
	СозданныеОбъекты = Результат.СозданныеОбъекты;
	Ошибки = Результат.Ошибки;
	Сообщения = Результат.Сообщения;
	
	ПередатьКВыполнениюВсе = Параметры.ВариантПередачиЭтаповКВыполнению = "Все";
	ПередатьКВыполнениюПервые = Параметры.ВариантПередачиЭтаповКВыполнению = "Первые";
	
	СтруктураПоискаГруппа = Новый Структура("НомерГруппы");
	СтруктураПоискаРаспоряжение = Новый Структура("Распоряжение", Документы.ЗаказНаПроизводство2_2.ПустаяСсылка());
	
	ИменаКолонок = Новый Массив;
	Для каждого Колонка Из Изделия.Колонки Цикл
		Если Колонка.Имя <> "НомерГруппы"
			И Колонка.Имя <> "НомерПартииВГруппе"
			И Колонка.Имя <> "Количество" Тогда
			ИменаКолонок.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	КолонкиГруппировок = СтрСоединить(ИменаКолонок, ",");

	СписокСпецификаций = ОбщегоНазначенияУТ.УникальныеЗначенияИзКолонкиТаблицы(ГруппыИзделий, "Спецификация");
    КлючиПартий = ГруппыИзделий.ВыгрузитьКолонку("КлючПартия");
	
	// Подготовка данных для заполнения нормативного графика и сроков выполнения в этапах 
	ТекущаяДата = ТекущаяДатаСеанса();
	НормативныйГрафикПересчитатьОтТекущейДаты = Параметры.ВариантЗаполненияНормативногоГрафикаЭтапов = "РассчитатьОтТекущейДаты";
	ДатыЗапускаВыпускаОтТекущейДаты = ДатыЗапускаВыпуска(СписокСпецификаций, ТекущаяДата, НормативныйГрафикПересчитатьОтТекущейДаты);
	СтруктураПоискаОтгрузка = Новый Структура("КлючПартия, Этап");
	ДатыНормативногоГрафика = Неопределено;
	Если Не НормативныйГрафикПересчитатьОтТекущейДаты Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НормативныйГрафик.КлючПартия КАК КлючПартия,
			|	НормативныйГрафик.Этап       КАК Этап,
			|	НормативныйГрафик.Начало     КАК ДатаОтгрузки,
			|	НормативныйГрафик.Окончание  КАК ДатаПроизводства
			|ИЗ
			|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
			|ГДЕ
			|	НормативныйГрафик.КлючПартия В (&КлючиПартий)
			|	И НормативныйГрафик.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)");
		Запрос.УстановитьПараметр("КлючиПартий", КлючиПартий);
		ДатыНормативногоГрафика = Запрос.Выполнить().Выгрузить();
		ДатыНормативногоГрафика.Индексы.Добавить("КлючПартия, Этап");
	КонецЕсли;  
	
	// Подготовка данных для заполнения обеспечения (доступные резервы в графике)
	ДоступныеРезервыВГрафике = Неопределено;
	Если Параметры.РезервироватьМатериалы Тогда
		// Обеспечение заполняется по очереди - результат распределения группировать по партиям не требуется
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КлючиПартий", КлючиПартий);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СтруктураЗаказа.ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
			Запрос.МенеджерВременныхТаблиц, 
			"Изделия", 
			Изделия, 
			"Номенклатура,Характеристика,Склад,Назначение,Количество", 
			"Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)", 
			"Номенклатура,Характеристика,Склад,Назначение");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИнформацияОДоступности.Номенклатура        КАК Номенклатура,
			|	ИнформацияОДоступности.Характеристика      КАК Характеристика,
			|	ИнформацияОДоступности.Склад               КАК Склад,
			|	ИнформацияОДоступности.Назначение          КАК Назначение,
			|	СУММА(ИнформацияОДоступности.Количество)   КАК Количество
			|ИЗ
			|	(ВЫБРАТЬ
			|		Изделия.Номенклатура        КАК Номенклатура,
			|		Изделия.Характеристика      КАК Характеристика,
			|		Изделия.Склад               КАК Склад,
			|		Изделия.Назначение          КАК Назначение,
			|		Изделия.Количество          КАК Количество
			|	ИЗ
			|		Изделия КАК Изделия
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		РаспределениеЗапасов.Номенклатура        КАК Номенклатура,
			|		РаспределениеЗапасов.Характеристика      КАК Характеристика,
			|		РаспределениеЗапасов.Склад               КАК Склад,
			|		РаспределениеЗапасов.НазначениеСтруктуры КАК Назначение,
			|		РаспределениеЗапасов.РаспределеноИзПартийОбособленно + РаспределениеЗапасов.РаспределеноИзЗапасовОбособленно КАК Количество
			|	ИЗ
			|		РегистрСведений.СтруктураЗаказа КАК РаспределениеЗапасов
			|	ГДЕ
			|		ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.СтруктураЗаказа КАК СтруктураЗаказа
			|				ГДЕ
			|					СтруктураЗаказа.КлючПартия В (&КлючиПартий)
			|					И СтруктураЗаказа.Номенклатура        = РаспределениеЗапасов.Номенклатура
			|					И СтруктураЗаказа.Характеристика      = РаспределениеЗапасов.Характеристика
			|					И СтруктураЗаказа.Склад               = РаспределениеЗапасов.Склад
			|					И СтруктураЗаказа.Назначение          = РаспределениеЗапасов.Назначение
			|					И СтруктураЗаказа.ЗаказНаПроизводство = РаспределениеЗапасов.ЗаказНаПроизводство)
			|
			|		И РаспределениеЗапасов.ЗаказНаПоступление <> Неопределено
			|
			|	) КАК ИнформацияОДоступности
			|
			|СГРУППИРОВАТЬ ПО
			|	ИнформацияОДоступности.Номенклатура,
			|	ИнформацияОДоступности.Характеристика,
			|	ИнформацияОДоступности.Склад,
			|	ИнформацияОДоступности.Назначение
			|ИМЕЮЩИЕ
			|	СУММА(ИнформацияОДоступности.Количество) > 0";
		ДоступныеРезервыВГрафике = Запрос.Выполнить().Выгрузить();
		ДоступныеРезервыВГрафике.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение");
	КонецЕсли;
	
	СписокСпецификаций = Неопределено;
	КлючиПартий = Неопределено;
 	
	// Создание заказов
	Для каждого Группа Из ГруппыИзделий.НайтиСтроки(СтруктураПоискаРаспоряжение) Цикл
		
		СчетчикОшибок = 1;
		Пока Истина Цикл
			
			Попытка
				
				РеквизитыШапки = Новый Структура;
				
				РеквизитыШапки.Вставить("Подразделение", Группа.ПодразделениеДиспетчер);
				РеквизитыШапки.Вставить("Организация", Группа.Организация);
				РеквизитыШапки.Вставить("НаправлениеДеятельности", Группа.НаправлениеДеятельности);
				РеквизитыШапки.Вставить("ХозяйственнаяОперация", Группа.ХозяйственнаяОперация);
				РеквизитыШапки.Вставить("Партнер", Группа.Партнер);
				РеквизитыШапки.Вставить("Договор", Группа.Договор);
				РеквизитыШапки.Вставить("ЗаказПодДеятельность", Группа.ЗаказПодДеятельность);
				
				РасчетныеДаты = ДатыЗапускаВыпускаОтТекущейДаты.Найти(Группа.Спецификация, "Ссылка");
				
				Если НормативныйГрафикПересчитатьОтТекущейДаты
					И РасчетныеДаты <> Неопределено Тогда
					РеквизитыШапки.Вставить("РазмещениеВыпуска", Группа.РазмещениеВыпуска);
					РеквизитыШапки.Вставить("НачатьНеРанее", РасчетныеДаты.ДатаЗапуска);
					РеквизитыШапки.Вставить("ДатаПотребности", РасчетныеДаты.ДатаВыпуска);
				Иначе
					РеквизитыШапки.Вставить("РазмещениеВыпуска", Группа.РазмещениеВыпуска);
					РеквизитыШапки.Вставить("НачатьНеРанее", Группа.НачатьНеРанее);
					РеквизитыШапки.Вставить("ДатаПотребности", Группа.ДатаПотребности); // сохраняем всегда
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Группа.Приоритет) Тогда
					РеквизитыШапки.Вставить("Приоритет", Группа.Приоритет);
					РеквизитыШапки.Вставить("Очередь",
						Документы.ЗаказНаПроизводство2_2.НомерОчередиДляВставкиПередДокументами(Группа.СледующийЗаказВОчереди));
				КонецЕсли;
				
				РеквизитыШапки.Вставить("ДинамическаяСтруктура", Истина);
				РеквизитыШапки.Вставить("Дата", ТекущаяДатаСеанса());
				РеквизитыШапки.Вставить("Статус", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
				РеквизитыШапки.Вставить("ВариантОбособления", Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции);
				РеквизитыШапки.Вставить("Комментарий", НСтр("ru = 'Сформирован автоматически (запуск партий)';
															|en = 'Generated automatically (lot launch)'"));
				
				СтруктураПоискаГруппа.НомерГруппы = Группа.НомерГруппы;
				Товары = Изделия.Скопировать(СтруктураПоискаГруппа);
				Товары.Свернуть(КолонкиГруппировок, "Количество");
				
				ДанныеЗаполнения = Новый Структура;
				ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
				ДанныеЗаполнения.Вставить("Товары", Товары);
				
				Заказ = Документы.ЗаказНаПроизводство2_2.СоздатьДокумент();
				Заказ.Заполнить(ДанныеЗаполнения);
				
				// Отказ от проверки заполнения дополнительных реквизитов
				ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Истина;
				
				Если Заказ.ПроверитьЗаполнение() Тогда
					Заказ.Записать(РежимЗаписиДокумента.Проведение);
					
					Группа.Распоряжение = Заказ.Ссылка;
					Для каждого Изделие Из Изделия.НайтиСтроки(СтруктураПоискаГруппа) Цикл
						Изделие.Распоряжение = Заказ.Ссылка;
					КонецЦикла;
					СозданныеОбъекты.Добавить(Заказ.Ссылка);
				Иначе
					ДобавитьОшибку(Ошибки, Группа, Изделия);
				КонецЕсли;
				
				// Фиксация результата
				ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
				
			Исключение
				
				Событие = НСтр("ru = 'Этап производства';
								|en = 'Production stage'", ОбщегоНазначения.КодОсновногоЯзыка()) + "."
					+ НСтр("ru = 'Формирование этапов';
							|en = 'Generate stages'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				Если СчетчикОшибок < 3 Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Неудачная попытка записи (%1): %2';
													|en = 'Unsuccessful attempt to write (%1): %2'"),
						СчетчикОшибок, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСообщения);
					
					СчетчикОшибок = СчетчикОшибок + 1;
					Продолжить;
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ДобавитьОшибку(Ошибки, Группа, Изделия, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//
	ГруппыИзделий.Индексы.Добавить("НомерГруппы");
	Изделия.Индексы.Добавить("НомерГруппы");
	Изделия.Индексы.Добавить("НомерГруппы, НомерПартииВГруппе");
	СтруктураПоискаПартия = Новый Структура("НомерГруппы, НомерПартииВГруппе");
	
	//
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("ДинамическаяСтруктура", Истина);
	ДанныеПартии.Вставить("ПартияПроизводства", Неопределено);
	ДанныеПартии.Вставить("НазначениеПродукция");
	ДанныеПартии.Вставить("Распоряжение");
	ДанныеПартии.Вставить("Спецификация");
	ДанныеПартии.Вставить("ТипПроизводственногоПроцесса");
	
	// Чтение данных спецификаций
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
	ПараметрыВыборки.УчитыватьВероятностьБрака = Ложь;
	ПараметрыВыборки.РассчитыватьДолиСтоимостиВыходныхИзделий = Истина;
	ПараметрыВыборки.ПолучитьПромежуточныйВыпуск = Истина;
	
	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(
		Изделия,
		ПараметрыВыборки,
		Истина,
		"НомерГруппы,НомерПартииВГруппе");
	
	// Создание партий
	ПартииПроизводства = Новый ТаблицаЗначений();
	ПартииПроизводства.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	ПартииПроизводства.Колонки.Добавить("ПартияПроизводства", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	ПартииПроизводства.Колонки.Добавить("ДанныеСпецификацииИндексСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого Реквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		ПартииПроизводства.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Метаданные.Справочники.ПартииПроизводства.ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		ПартииПроизводства.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЦикла;
	
	Для Индекс = 0 По ДанныеСпецификаций.ВГраница() Цикл
		ДанныеСпецификации = ДанныеСпецификаций[Индекс];
		Группа = ГруппыИзделий.Найти(ДанныеСпецификации.НомерГруппы, "НомерГруппы");
		Если Группа.Распоряжение.Пустая() Тогда
			Продолжить; // Заказ не был проведен
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеПартии, Группа, "Распоряжение, НазначениеПродукция");
		ЗаполнитьЗначенияСвойств(ДанныеПартии, ДанныеСпецификации, "Спецификация, ТипПроизводственногоПроцесса");
		ПоляПартии = Документы.ЭтапПроизводства2_2.ПоляПартии(
			ДанныеПартии, ДанныеСпецификации.ОсновноеИзделие,, ДанныеСпецификации);
		
		СтрокаПартия = ПартииПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПартия, ПоляПартии);
		СтрокаПартия.ДанныеСпецификацииИндексСтроки = Индекс;
	КонецЦикла;
	
	Если ПартииПроизводства.Количество() <> 0 Тогда
		МестоПартииВСтруктуреЗаказа = Новый ТаблицаЗначений();
		МестоПартииВСтруктуреЗаказа.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
		МестоПартииВСтруктуреЗаказа.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		МестоПартииВСтруктуреЗаказа.Колонки.Добавить("ДлительностьДоВыпуска", Новый ОписаниеТипов("Число"));
		
		Справочники.ПартииПроизводства.СформироватьПартииПроизводстваДляСпискаЭтапов(ПартииПроизводства);
		Для Индекс = -ПартииПроизводства.Количество()+1 По 0 Цикл
			СтрокаПартия = ПартииПроизводства[-Индекс];
			Если СтрокаПартия.ПартияПроизводства.Пустая() Тогда
				ДанныеСпецификаций.Удалить(СтрокаПартия.ДанныеСпецификацииИндексСтроки);
			Иначе
				ДанныеСпецификации = ДанныеСпецификаций[СтрокаПартия.ДанныеСпецификацииИндексСтроки];
				ДанныеСпецификации.Вставить("ПартияПроизводства", СтрокаПартия.ПартияПроизводства);
				
				НоваяСтрока = МестоПартииВСтруктуреЗаказа.Добавить();
				НоваяСтрока.Партия = СтрокаПартия.ПартияПроизводства;
				ЗаполнитьЗначенияСвойств(СтруктураПоискаПартия, ДанныеСпецификации, "НомерГруппы, НомерПартииВГруппе");
				Для каждого НайденнаяСтрока Из Изделия.НайтиСтроки(СтруктураПоискаПартия) Цикл
					НоваяСтрока.Уровень = Макс(НоваяСтрока.Уровень, НайденнаяСтрока.Уровень);
					НоваяСтрока.ДлительностьДоВыпуска = Макс(НоваяСтрока.ДлительностьДоВыпуска, НайденнаяСтрока.ДлительностьДоВыпуска);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Кешируем место партии в структуре заказа
		РегистрыСведений.МестоПартииВСтруктуреЗаказа.ЗаписатьПриЗапускеПартий(МестоПартииВСтруктуреЗаказа);
	КонецЕсли;
	
	//
	СсылкиПроведен = Новый Массив;
	Для каждого ДанныеСпецификации Из ДанныеСпецификаций Цикл
		
		Группа = ГруппыИзделий.Найти(ДанныеСпецификации.НомерГруппы, "НомерГруппы");
		Если Группа.Распоряжение.Пустая() Тогда
			Продолжить; // Заказ не был проведен
		КонецЕсли;
		
		// Плановая дата отгрузки и производства
		ДанныеСпецификации.Этапы.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		ДанныеСпецификации.Этапы.Колонки.Добавить("НеОтгружатьЧастями", Новый ОписаниеТипов("Булево"));
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Истина, "НеОтгружатьЧастями");
		
		ДанныеСпецификации.Этапы.Колонки.Добавить("ДатаПроизводства", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты));
		ДанныеСпецификации.Этапы.Колонки.Добавить("ПроизводствоОднойДатой", Новый ОписаниеТипов("Булево"));
		ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Истина, "ПроизводствоОднойДатой");
		
		Если НормативныйГрафикПересчитатьОтТекущейДаты Тогда
			Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
				РасчетныеДаты = ДатыЗапускаВыпускаОтТекущейДаты.Найти(Строка.Этап, "Ссылка");
				Если РасчетныеДаты = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Строка.ДатаОтгрузки = РасчетныеДаты.ДатаЗапуска;
				Строка.ДатаПроизводства = РасчетныеДаты.ДатаВыпуска;
			КонецЦикла;
		Иначе
			Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
				СтруктураПоискаОтгрузка.КлючПартия = Группа.КлючПартия;
				СтруктураПоискаОтгрузка.Этап = Строка.Этап;
				НайденныеСтроки = ДатыНормативногоГрафика.НайтиСтроки(СтруктураПоискаОтгрузка);
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					ЗаполнитьЗначенияСвойств(Строка, НайденныеСтроки[0], "ДатаОтгрузки,ДатаПроизводства");
				КонецЕсли;
				РасчетныеДаты = ДатыЗапускаВыпускаОтТекущейДаты.Найти(Строка.Этап, "Ссылка");
				Если РасчетныеДаты <> Неопределено Тогда
					Строка.ДатаПроизводства = Макс(Строка.ДатаПроизводства, РасчетныеДаты.ДатаВыпуска);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Наследование реквизитов выпуска
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПартия, ДанныеСпецификации, "НомерГруппы, НомерПартииВГруппе");
		ИзделияПартии = Изделия.Скопировать(СтруктураПоискаПартия);
		ЗаполнитьИзделияСпецификацииПоИзделиямКЗапуску(ДанныеСпецификации, ИзделияПартии);
		
		// Объект-имитация партии
		ЗаполнитьЗначенияСвойств(ДанныеПартии, Группа, "Распоряжение, НазначениеПродукция");
		ЗаполнитьЗначенияСвойств(ДанныеПартии, ДанныеСпецификации, "Спецификация, ТипПроизводственногоПроцесса");
		
		// Назначение материалов
		НазначенияМатериалов = ОбеспечениеПроизводства.КоэффицентыНазначенийОбеспеченияВЭтапеПроизводства(
			ДанныеПартии,
			ДанныеСпецификации.ВыходныеИзделия);
		ДанныеСпецификации.Вставить("НазначенияМатериалов", НазначенияМатериалов);
		
		// Дополнение данных спецификации
		Документы.ЭтапПроизводства2_2.ПодготовитьДанныеСпецификацииКСозданиюЭтапов(ДанныеСпецификации, ДанныеПартии);
		
		// Статус этапов
		ДанныеСпецификации.Этапы.Колонки.Добавить(
			"Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЭтаповПроизводства2_2"));
		
		Если ПередатьКВыполнениюВсе Тогда
			ДанныеСпецификации.Этапы.ЗаполнитьЗначения(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению, "Статус");
		Иначе
			Для каждого Этап Из ДанныеСпецификации.Этапы Цикл
				Если ПередатьКВыполнениюПервые И Этап.НомерЭтапа = 1 Тогда
					Этап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению;
				Иначе
					Этап.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Очистка стека сообщений
		Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
			Сообщения.Добавить(Сообщение);
		КонецЦикла;
		
		// Создание этапов
		ПартияСсылка = Неопределено;
		
		РеквизитыШапки = УправлениеПроизводствомВызовСервера.ЗначенияЗаполненияНовогоЭтапаПроизводства(
			ДанныеСпецификации.Распоряжение,
			ДанныеСпецификации.НазначениеПродукция,
			ДанныеСпецификации.ПартияПроизводства,
			ДанныеСпецификации.ТипПроизводственногоПроцесса,
			ДанныеСпецификации.Спецификация);
		
		Для Индекс = 0 По ДанныеСпецификации.Этапы.Количество()-1 Цикл
			
			ДанныеЭтапа = ДанныеСпецификации.Этапы[Индекс];
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
			ДанныеЗаполнения.Вставить("ДанныеСпецификации", ДанныеСпецификации);
			ДанныеЗаполнения.Вставить("ДанныеЭтапа", ДанныеЭтапа);
			
			ДокументОбъект = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(ДанныеЭтапа.ЭтапПроизводства);
			ДокументОбъект.УстановитьРежимПакетногоФормирования();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			// Отказ от проверки заполнения дополнительных реквизитов
			ПараметрыСеанса.ИнтерактивнаяПроверкаЗаполненияСвойств = Истина;
			
			Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
			КонецЕсли;
			
			Пока Истина Цикл
				
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					СсылкиПроведен.Добавить(ДокументОбъект.Ссылка);
				Исключение
					
					Если ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
						ДокументОбъект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
						Продолжить;
					КонецЕсли;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
				КонецПопытки;
				
				Прервать;
			
			КонецЦикла;
			
			Если ПартияСсылка = Неопределено Тогда
				ПартияСсылка = ДокументОбъект.ПартияПроизводства;
				НоваяСтрока = РезультатФормирования.Добавить();
				НоваяСтрока.Партия = ПартияСсылка;
				СозданныеОбъекты.Добавить(ПартияСсылка);
			КонецЕсли;
			
			НоваяСтрока = РезультатФормирования.Добавить();
			НоваяСтрока.Партия = ПартияСсылка;
			НоваяСтрока.Документ = ДокументОбъект.Ссылка;
			СозданныеОбъекты.Добавить(ДокументОбъект.Ссылка);
			
			Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
				Сообщение.КлючДанных = ДокументОбъект.Ссылка;
				Сообщения.Добавить(Сообщение);
			КонецЦикла;
			
		КонецЦикла;
		
		// Фиксация результата
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		
	КонецЦикла;
	
	// Очистка стека сообщений
	Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		Сообщения.Добавить(Сообщение);
	КонецЦикла;
	
	Если СсылкиПроведен.ВГраница() <> -1 Тогда
		
		Распоряжения = ОбщегоНазначенияУТ.УникальныеЗначенияИзКолонкиТаблицы(ГруппыИзделий, "Распоряжение");
		
		// Заполнение обеспечения и формирование движений
		ПараметрыФормирования = Документы.ЭтапПроизводства2_2.ПараметрыФормированияЭтапов();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, Параметры, "РезервироватьМатериалы, ЗаменятьМатериалыНаАналоги");
		ПараметрыФормирования.Распоряжения = Распоряжения;
		ПараметрыФормирования.ДоступныеРезервыВГрафике = ДоступныеРезервыВГрафике;
		Документы.ЭтапПроизводства2_2.ЗаполнитьОбеспечениеИОтразитьДвиженияПоЭтапам(ПараметрыФормирования, СсылкиПроведен, Новый МенеджерВременныхТаблиц);
		
		// Заполнение связанных регистров
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеУправление")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПооперационноеПланирование") Тогда
			ЕстьЗадания = Ложь;
			ДанныеОчереди = Документы.ЭтапПроизводства2_2.ДанныеДляРасчетаОчередиОпераций(СсылкиПроведен);
			Для каждого Ссылка Из СсылкиПроведен Цикл
				Если ДанныеОчереди[Ссылка].ТребуетсяРассчитать Тогда
					РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
					ЕстьЗадания = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьЗадания Тогда
				РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ЗапуститьЗадание();
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(СсылкиПроведен);
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжения);
		
	КонецЕсли;
	
	// Очистка стека сообщений
	Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		Сообщения.Добавить(Сообщение);
	КонецЦикла;
	
	// Фиксация результата
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьИзделияСпецификацииПоИзделиямКЗапуску(ДанныеСпецификации, Изделия)
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТипыСтатей.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	ОТСтатьяРасходов = Новый ОписаниеТипов(ТипыСтатей);
	
	ТипыПолучателей = Новый Массив;
	ТипыПолучателей.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучателей.Добавить(Тип("СправочникСсылка.Склады"));
	ОТПолучатель = Новый ОписаниеТипов(ТипыПолучателей);
	
	Для Сч = 1 По 2 Цикл
		
		Таблица = ДанныеСпецификации[?(Сч = 1, "ВыходныеИзделия", "ВозвратныеОтходы")]; // ТаблицаЗначений
		Таблица.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		Таблица.Колонки.Добавить("Распределено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		Таблица.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("СтатьяРасходов", ОТСтатьяРасходов);
		Таблица.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		Таблица.Колонки.Добавить("АналитикаАктивовПассивов",
			Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
		
		Таблица.Колонки.Добавить("Получатель", ОТПолучатель);
		Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("Склад"), "Получатель");
		
	КонецЦикла;
	
	ИменаКолонок = СтрРазделить(
		"Характеристика,Назначение,СписатьНаРасходы,СтатьяРасходов,АналитикаРасходов,АналитикаАктивовПассивов", ",");
	
	ИндексИзделия = 0;
	Пока ИндексИзделия < Изделия.Количество() Цикл
		
		Изделие = Изделия[ИндексИзделия];
		ИндексИзделия = ИндексИзделия + 1;
		
		Для Сч = 1 По 2 Цикл
			
			Индекс = 0;
			Пока Индекс < ДанныеСпецификации[?(Сч = 1, "ВыходныеИзделия", "ВозвратныеОтходы")].Количество() Цикл
				
				Строка = ДанныеСпецификации[?(Сч = 1, "ВыходныеИзделия", "ВозвратныеОтходы")][Индекс];
				Индекс = Индекс + 1;
				
				Если Строка.Распределено = Строка.Количество
					ИЛИ Строка.Номенклатура <> Изделие.Номенклатура
					ИЛИ Строка.Характеристика <> Изделие.Характеристика
						И ЗначениеЗаполнено(Строка.Характеристика)
						И НЕ Строка.ЛюбаяХарактеристика Тогда
					Продолжить;
				КонецЕсли;
				
				Распределено = Мин(Строка.Количество-Строка.Распределено, Изделие.Количество);
				
				Если Строка.Распределено = 0
						И Изделие.Количество >= Строка.Количество
					ИЛИ СтрокиИдентичны(Строка, Изделие, ИменаКолонок)
						И (Строка.Получатель = Изделие.Получатель
							ИЛИ Строка.Распределено = 0 И Не ЗначениеЗаполнено(Строка.Получатель)) Тогда
					
					// Разделять строку не нужно
					СтрокаЗаполнить = Строка;
					
				ИначеЕсли Строка.Округлить
					И НЕ Строка.ЭтоЦеховаяКладовая
					И Окр(Строка.Количество - Распределено) <> (Строка.Количество - Распределено) Тогда
					
					// При разделении строки будут нарушены правила округления
					Если Строка.Распределено = 0 Тогда
						Строка.Округлить = Ложь;
						СтрокаЗаполнить = Строка;
					Иначе
						ВладелецСтроки = Строка.Владелец(); // ТаблицаЗначений
						НоваяСтрока = ВладелецСтроки.Вставить(Индекс-1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НоваяСтрока.Количество = Строка.Количество - Строка.Распределено;
						НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество
							* НоваяСтрока.ДанныеУпаковки.Знаменатель / НоваяСтрока.ДанныеУпаковки.Числитель;
						НоваяСтрока.Распределено = 0;
						НоваяСтрока.Округлить = Ложь;
						СтрокаЗаполнить = НоваяСтрока;
						
						Строка.Количество = Строка.Распределено;
						Строка.КоличествоУпаковок = Строка.Количество
							* Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
						Если Сч = 1 Тогда
							ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
								НоваяСтрока, Строка, ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия);
						КонецЕсли;
						
						Индекс = Индекс + 1;
					КонецЕсли;
					
				Иначе
					
					// Разделение строки
					ВладелецСтроки = Строка.Владелец(); // ТаблицаЗначений
					НоваяСтрока = ВладелецСтроки.Вставить(Индекс-1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					НоваяСтрока.Количество = Распределено;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество
						* НоваяСтрока.ДанныеУпаковки.Знаменатель / НоваяСтрока.ДанныеУпаковки.Числитель;
					НоваяСтрока.Распределено = 0;
					СтрокаЗаполнить = НоваяСтрока;
					
					Строка.Количество = Строка.Количество - Распределено;
					Строка.КоличествоУпаковок = Строка.Количество
						* Строка.ДанныеУпаковки.Знаменатель / Строка.ДанныеУпаковки.Числитель;
					Если Сч = 1 Тогда
						ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(
							НоваяСтрока, Строка, ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия);
					КонецЕсли;
					
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаЗаполнить, Изделие,
					"Характеристика,Получатель,Назначение,СписатьНаРасходы,СтатьяРасходов,АналитикаРасходов,АналитикаАктивовПассивов");
				СтрокаЗаполнить.Распределено = СтрокаЗаполнить.Распределено + Распределено;
				
				Изделие.Количество = Изделие.Количество - Распределено;
				Если Изделие.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			Если Изделие.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыЗапускаВыпуска(Спецификации, ДатаРасчета, ДетализироватьДоЭтапов = Ложь)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Этап         КАК Ссылка,
		|	Т.ДнейОтНачала КАК ЧислоДнейЗапуск,
		|	Т.ДнейОтНачала + Т.ДлительностьВДнях КАК ЧислоДнейВыпуск
		|ПОМЕСТИТЬ ВТСсылки
		|ИЗ
		|	РегистрСведений.НормативнаяДлительностьЭтаповПроизводства КАК Т
		|ГДЕ
		|	Т.Спецификация В(&Спецификации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Спецификация КАК Ссылка,
		|	0              КАК ЧислоДнейЗапуск,
		|	Т.Длительность КАК ЧислоДнейВыпуск
		|ИЗ
		|	РегистрСведений.НормативнаяДлительностьПроизводства КАК Т
		|ГДЕ
		|	Т.Спецификация В(&Спецификации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТекущаяДата.ДеньВключенВГрафик
		|			ТОГДА ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
		|		ИНАЧЕ СледующийДеньВГрафике.КоличествоДнейВГрафикеСНачалаГода
		|	КОНЕЦ КАК КоличествоДнейВГрафикеСНачалаГода
		|ПОМЕСТИТЬ ВТТекущаяДата
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК СледующийДеньВГрафике
		|	ПО СледующийДеньВГрафике.Календарь = &Календарь
		|		И СледующийДеньВГрафике.Год = &ТекущийГод
		|		И СледующийДеньВГрафике.КоличествоДнейВГрафикеСНачалаГода = ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода + 1
		|		И СледующийДеньВГрафике.ДеньВключенВГрафик
		|ГДЕ
		|	ТекущаяДата.Календарь = &Календарь
		|	И ТекущаяДата.Год = &ТекущийГод
		|	И ТекущаяДата.ДатаГрафика = &ДатаОтсчета
		|	И (ТекущаяДата.ДеньВключенВГрафик
		|		ИЛИ СледующийДеньВГрафике.КоличествоДнейВГрафикеСНачалаГода ЕСТЬ НЕ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ЗапускВТекущемГоду.ДатаГрафика, ЗапускВСледующемГоду.ДатаГрафика) КАК ДатаЗапуска,
		|	ЕСТЬNULL(ВыпускВТекущемГоду.ДатаГрафика, ВыпускВСледующемГоду.ДатаГрафика) КАК ДатаВыпуска
		|ИЗ
		|	ВТСсылки КАК Т
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТекущаяДата КАК ТекущаяДата
		|	ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
		|	ПО ПоследняяДатаГода.Календарь = &Календарь
		|		И ПоследняяДатаГода.Год = &ТекущийГод
		|		И ПоследняяДатаГода.ДатаГрафика = &ПоследнийДеньГода
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ЗапускВТекущемГоду
		|	ПО ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода ЕСТЬ НЕ NULL
		|		И ЗапускВТекущемГоду.Календарь = &Календарь
		|		И ЗапускВТекущемГоду.Год = &ТекущийГод
		|		И ЗапускВТекущемГоду.ДеньВключенВГрафик
		|		И ЗапускВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
		|		  = ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
		|		    + Т.ЧислоДнейЗапуск
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ЗапускВСледующемГоду
		|	ПО ЗапускВТекущемГоду.ДатаГрафика ЕСТЬ NULL
		|		И ЗапускВСледующемГоду.Календарь = &Календарь
		|		И ЗапускВСледующемГоду.Год = &СледующийГод
		|		И ЗапускВСледующемГоду.ДеньВключенВГрафик
		|		И ЗапускВСледующемГоду.КоличествоДнейВГрафикеСНачалаГода
		|		  = Т.ЧислоДнейЗапуск
		|			- ЕСТЬNULL(ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода, -1)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ВыпускВТекущемГоду
		|	ПО ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода ЕСТЬ НЕ NULL
		|		И ВыпускВТекущемГоду.Календарь = &Календарь
		|		И ВыпускВТекущемГоду.Год = &ТекущийГод
		|		И ВыпускВТекущемГоду.ДеньВключенВГрафик
		|		И ВыпускВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
		|		  = ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
		|			+ Т.ЧислоДнейВыпуск
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ВыпускВСледующемГоду
		|	ПО ВыпускВТекущемГоду.ДатаГрафика ЕСТЬ NULL
		|		И ВыпускВСледующемГоду.Календарь = &Календарь
		|		И ВыпускВСледующемГоду.Год = &СледующийГод
		|		И ВыпускВСледующемГоду.ДеньВключенВГрафик
		|		И ВыпускВСледующемГоду.КоличествоДнейВГрафикеСНачалаГода
		|		  = Т.ЧислоДнейВыпуск
		|			- ЕСТЬNULL(ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода, -1)
		|ГДЕ
		|	(ЗапускВТекущемГоду.ДатаГрафика ЕСТЬ НЕ NULL
		|		ИЛИ ЗапускВСледующемГоду.ДатаГрафика ЕСТЬ НЕ NULL)
		|	И (ВыпускВТекущемГоду.ДатаГрафика ЕСТЬ НЕ NULL
		|		ИЛИ ВыпускВСледующемГоду.ДатаГрафика ЕСТЬ НЕ NULL)");
	
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	Запрос.УстановитьПараметр("ДетализироватьДоЭтапов", ДетализироватьДоЭтапов);
	Запрос.УстановитьПараметр("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	Запрос.УстановитьПараметр("ДатаОтсчета", НачалоДня(ДатаРасчета));
	Запрос.УстановитьПараметр("ТекущийГод", Год(ДатаРасчета));
	Запрос.УстановитьПараметр("СледующийГод", Год(ДатаРасчета)+1);
	Запрос.УстановитьПараметр("ПоследнийДеньГода", НачалоДня(КонецГода(ДатаРасчета)));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция СтрокиИдентичны(Строка1, Строка2, ИменаКолонок)
	
	Для каждого Колонка Из ИменаКолонок Цикл
		Если Строка1[Колонка] <> Строка2[Колонка]
			И (ЗначениеЗаполнено(Строка1[Колонка])
				Или ЗначениеЗаполнено(Строка2[Колонка])) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьОшибку(Ошибки, Группа, Изделия, ТекстИсключения = "")
	
	Изделие = Изделия.Найти(Группа.НомерГруппы, "НомерГруппы");
	
	НоваяСтрока = Ошибки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Группа, "Спецификация, НаправлениеДеятельности");
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Изделие, "Номенклатура, Характеристика");
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Если Сообщения.ВГраница() = -1 И НЕ ПустаяСтрока(ТекстИсключения) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстИсключения;
		Сообщения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сообщение);
	КонецЕсли;
	НоваяСтрока.Сообщения = Сообщения;
	
КонецПроцедуры

#КонецОбласти
