
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.129";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "СборГрафиковОтпусков.ВключитьСборГрафиковОтпусков";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.29.71";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("33b1d0ea-c6d2-4421-aed2-bccec215f17e");
	Обработчик.Процедура       = "СборГрафиковОтпусков.ЗаполнитьКоличествоСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение количества сотрудников, запланировавших отпуск';
										|en = 'Filling the number of employees who scheduled vacation'");
	
КонецПроцедуры

// Устанавливает значение для константы ИспользоватьСборГрафиковОтпусков.
//	Параметры:
//		НовоеЗначение - Булево;
Процедура УстановитьЗначениеИспользоватьСборГрафиковОтпусков(НовоеЗначение) Экспорт 
	
	Если НовоеЗначение <> Константы.ИспользоватьСборГрафиковОтпусков.Получить() Тогда
		Константы.ИспользоватьСборГрафиковОтпусков.Установить(НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#Область КабинетСотрудника

// Формирует данные графиков для публикации в сервисе 1С:Кабинет сотрудника.
// 
// Параметры;
// 		МассивОтбора - Массив
//
// Возвращаемое значение:
// 		ТаблицаЗначений - содержит колонки
// 			* СборГрафиковОтпусков - ДокументСсылка.СборГрафиковОтпусков
// 			* Год - Число
// 			* Состояние - ПеречислениеСсылка.СостоянияСбораГрафиковОтпусков
//
Функция ДанныеСборовГрафиковОтпусковДляСервисаКабинетСотрудника(МассивОтбора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", МассивОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Год КАК Год,
	|	Документы.Состояние КАК Состояние,
	|	Документы.ИнициаторСбора КАК ИнициаторСбора,
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Ссылки)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает список документов по переданным идентификаторам.
//
// Параметры
// 		Идентификаторы - Массив - идентификаторы
//
// 	Возвращаемое значение
// 		Соответствите - ключ Идентификатор, значение ссылка на документ.
//
Функция ДокументыПоИдентификаторам(Идентификаторы) Экспорт

	ИдентификаторыДокументы = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК Документы
	|ГДЕ
	|	Документы.ИдентификаторДокумента В(&Идентификаторы)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторыДокументы.Вставить(Выборка.ИдентификаторДокумента, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторыДокументы;

КонецФункции

// Возвращает описание документа сбор графика отпусков для подразделения.
//	Возвращаемое значение:
//		Структура - содержит параметры необходимые для создания нового документа Сбор графиков отпусков.
Функция ОписаниеДокументаГрафикПодразделения() Экспорт

	ОписаниеДокумента = Новый Структура("
	|Дата,
	|Год,
	|Подразделение,
	|ОтветственныйЗаСбор,
	|СостояниеСбораГрафиковОтпусков,
	|КорневойСборГрафиков,
	|ИдентификаторДокумента,
	|Периоды");
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Периоды.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Периоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОписаниеДокумента.Периоды = Периоды;
		
	Возврат ОписаниеДокумента;

КонецФункции                                

// Возвращает описание документа сбор графика отпусков для предприятия  
// 	Возвращаемое значение:
//		Структура - содержит параметры необходимые для создания нового документа Сбор графиков отпусков.
Функция ОписаниеДокументаГрафикПредприятия() Экспорт
	
	ОписаниеДокумента = Новый Структура("
	|Дата,
	|Год,
	|СборЗапущен,
	|СборЗавершен,
	|СостояниеСбораГрафиковОтпусков,
	|Инициатор,
	|ИдентификаторДокумента"); 
	
	ОписаниеДокумента.СборЗапущен = Истина;
	ОписаниеДокумента.СборЗавершен = Истина;
	
	Возврат ОписаниеДокумента;
	
КонецФункции

Процедура ОбработатьНовыйГрафикПодразделения(ОписаниеДокумента, ИдентификаторыДокументы) Экспорт
	
	ДокументСсылка = ИдентификаторыДокументы[ОписаниеДокумента.ИдентификаторДокумента];
	
	Если ДокументСсылка = Неопределено Тогда
		ДокументОбъект = НовыйДокументСборГрафиковОтпусковПодразделения(ОписаниеДокумента);
		ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, ОписаниеДокумента);
	Иначе
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СборГрафиковОтпусков");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, ОписаниеДокумента);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьНовыйГрафикПредприятия(ОписаниеДокумента, ИдентификаторыДокументы) Экспорт

	ДокументСборГрафиковОтпусков = ИдентификаторыДокументы[ОписаниеДокумента.ИдентификаторДокумента];
	
	Если ДокументСборГрафиковОтпусков = Неопределено Тогда
		ДокументСборГрафиковОтпусков = Документы.СборГрафиковОтпусков.СоздатьДокумент();
		ЗаполнитьДокументСборГрафиковОтпусковПредприятия(ДокументСборГрафиковОтпусков, ОписаниеДокумента);
		ДокументСборГрафиковОтпусков.Записать();
	Иначе
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.СборГрафиковОтпусков");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСборГрафиковОтпусков);
			Блокировка.Заблокировать();
			
			ДокументОбъект = ДокументСборГрафиковОтпусков.ПолучитьОбъект();
			ЗаполнитьДокументСборГрафиковОтпусковПредприятия(ДокументОбъект, ОписаниеДокумента);
			ДокументОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "043fcad2-b99b-11ed-b3ec-2c4d54d2b2aa", Метаданные.Документы.СборГрафиковОтпусков);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СборГрафиковОтпусков, Истина);
	Списки.Вставить(Метаданные.Справочники.СборГрафиковОтпусковПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.СборГрафиковОтпусков.Чтение.ГруппыФизическихЛиц
	|Документ.СборГрафиковОтпусков.Изменение.ГруппыФизическихЛиц
	|Документ.СборГрафиковОтпусков.Чтение.Подразделения
	|Документ.СборГрафиковОтпусков.Изменение.Подразделения
	|Справочник.СборГрафиковОтпусковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СборГрафиковОтпусковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет и записывает на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		ДокументОбъект - документ объект Сбор графиков отпусков;
//		СтруктураОбъекта - Структура - параметры для заполнения и создания документа.
Процедура ЗаписатьДокументСборГрафиковОтпусков(ДокументОбъект, СтруктураОбъекта)
	
	ДокументОбъект.Подразделение = СтруктураОбъекта.Подразделение;
	ДокументОбъект.ОтветственныйЗаСбор = СтруктураОбъекта.ОтветственныйЗаСбор;
	ДокументОбъект.Состояние = СтруктураОбъекта.СостояниеСбораГрафиковОтпусков;

	ДатаАктуальности = ТекущаяДатаСеанса();
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураОбъекта.Периоды, "ФизическоеЛицо", Истина);
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Ложь, ФизическиеЛица, ДатаАктуальности);
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТЗ Из СтруктураОбъекта.Периоды Цикл
		Сотрудник = ОсновныеСотрудники[СтрокаТЗ.ФизическоеЛицо];
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Сотрудник КАК ГрафикРаботы,
	|	Таблица.ДатаНачала КАК НачалоПериода,
	|	Таблица.ДатаОкончания КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	&Таблица КАК Таблица";
	Запрос.Выполнить();
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПериодыГрафиков.ГрафикРаботы КАК Сотрудник,
	|	ПериодыГрафиков.НачалоПериода КАК ДатаНачала,
	|	ПериодыГрафиков.ОкончаниеПериода КАК ДатаОкончания,
	|	ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников КАК ДлительностьИнтервала
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыГрафиков КАК ПериодыГрафиков
	|		ПО ДанныеКалендаря.ГрафикРаботы = ПериодыГрафиков.ГрафикРаботы
	|			И ДанныеКалендаря.НачалоПериода = ПериодыГрафиков.НачалоПериода
	|			И ДанныеКалендаря.ОкончаниеПериода = ПериодыГрафиков.ОкончаниеПериода";
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	ТаблицаПериодов.Индексы.Добавить("Сотрудник,ДатаНачала,ДатаОкончания");
	Отбор = Новый Структура("Сотрудник,ДатаНачала,ДатаОкончания");
	
	ДокументОбъект.Сотрудники.Очистить();
	Для Каждого Период Из СтруктураОбъекта.Периоды Цикл
		СтрокаПериод = ДокументОбъект.Сотрудники.Добавить();
		СтрокаПериод.ФизическоеЛицо = Период.ФизическоеЛицо;
		СтрокаПериод.ДатаНачала 	= Период.ДатаНачала;
		СтрокаПериод.ДатаОкончания 	= Период.ДатаОкончания;
		Сотрудник = ОсновныеСотрудники[Период.ФизическоеЛицо];
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Период);
			Отбор.Сотрудник = Сотрудник;
			НайденныеСтроки = ТаблицаПериодов.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				СтрокаПериод.КоличествоДней = НайденныеСтроки[0].ДлительностьИнтервала;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Записать();

КонецПроцедуры

// Формирует на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		ОписаниеОбъекта - Структура - параметры для заполнения и создания документа. см. ОписаниеДокументаГрафикПодразделения()
//	Возвращаемое значение:
//		ДокументОбъект - Сбор графиков отпусков.
Функция НовыйДокументСборГрафиковОтпусковПодразделения(ОписаниеОбъекта)
	
	ДокументОбъект = Документы.СборГрафиковОтпусков.СоздатьДокумент();
	ДокументОбъект.ДополнительныеСвойства.Вставить("СсылкаНового", Документы.СборГрафиковОтпусков.ПолучитьСсылку());
	ДокументОбъект.Дата 					= ТекущаяДатаСеанса();
	ДокументОбъект.Год 						= ОписаниеОбъекта.Год;
	ДокументОбъект.Подразделение 			= ОписаниеОбъекта.Подразделение;
	ДокументОбъект.Состояние 				= ОписаниеОбъекта.СостояниеСбораГрафиковОтпусков;
	ДокументОбъект.ИдентификаторДокумента 	= ОписаниеОбъекта.ИдентификаторДокумента;
	Если Не ЗначениеЗаполнено(ОписаниеОбъекта.КорневойСборГрафиков) Тогда
		ДокументОбъект.КорневойСборГрафиков = ПолучитьКорневойСборГрафиковОтпусков(ОписаниеОбъекта.Год);
	КонецЕсли;
		
	Возврат ДокументОбъект;
	
КонецФункции

// Формирует на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры:
//		Год - Число (4,0) - год, за который происходит сбор графиков, корневого документа.
//	Возвращаемое значение:
//		ДокументСсылка - Сбор графиков отпусков.
Функция ПолучитьКорневойСборГрафиковОтпусков(Год) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСборГрафиковОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
	|ГДЕ
	|	ДокументСборГрафиковОтпусков.Год = &Год
	|	И (ДокументСборГрафиковОтпусков.КорневойСборГрафиков = ЗНАЧЕНИЕ(Документ.СборГрафиковОтпусков.ПустаяСсылка)
	|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДокументСборГрафиковОтпусков.КорневойСборГрафиков ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСборГрафиковОтпусков.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СборГрафиковОтпусков.ПустаяСсылка();	
	
КонецФункции

// Определяет находятся ли подчиненные корневому сбору графиков документы СборГрафиковОтпусков в состоянии Утверждено.
//	Параметры:
//		КорневойСборГрафиковОтпусков - документ объект Сбор графиков отпусков.
//	Возвращаемое значение:
//		Булево.
Функция СборыГрафиковОтпусковПодразделенийУтверждены(КорневойСборГрафиковОтпусков) Экспорт
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;      
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Расформировано КАК Расформировано,
		|	СтруктураПредприятия.ДатаРасформирования КАК ДатаРасформирования
		|ПОМЕСТИТЬ ВТСтруктурныеЕдиницы
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК СтруктураПредприятия";
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить(); 
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	ПодразделенияОрганизаций.Расформировано КАК Расформировано,
		|	ПодразделенияОрганизаций.ДатаРасформирования КАК ДатаРасформирования
		|ПОМЕСТИТЬ ВТСтруктурныеЕдиницы
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL";
		
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить(); 
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументСборГрафиковОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК ДокументСборГрафиковОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтруктурныеЕдиницы КАК ВТСтруктурныеЕдиницы
	|		ПО ДокументСборГрафиковОтпусков.Подразделение = ВТСтруктурныеЕдиницы.Подразделение
	|ГДЕ
	|	ДокументСборГрафиковОтпусков.КорневойСборГрафиков = &КорневойСборГрафиков
	|	И (ДокументСборГрафиковОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСбораГрафиковОтпусков.Черновик)
	|			ИЛИ ДокументСборГрафиковОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСбораГрафиковОтпусков.ВРаботе)
	|			ИЛИ ДокументСборГрафиковОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСбораГрафиковОтпусков.ПустаяСсылка))
	|	И (НЕ ВТСтруктурныеЕдиницы.Расформировано
	|			ИЛИ ВТСтруктурныеЕдиницы.ДатаРасформирования > ДокументСборГрафиковОтпусков.Дата
	|				И ГОД(ВТСтруктурныеЕдиницы.ДатаРасформирования) > ДокументСборГрафиковОтпусков.Год)";
	
	Запрос.УстановитьПараметр("КорневойСборГрафиков", КорневойСборГрафиковОтпусков);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет на основе переданных данных документ СборГрафиковОтпусков.
//	Параметры                                                             
//		ДокументОбъект - СборГрафиковОтпусковОбъект - заполняемый документ;
//		СтруктураОбъекта - структура - см. ОписаниеДокументаГрафикПредприятия();
Функция ЗаполнитьДокументСборГрафиковОтпусковПредприятия(ДокументОбъект, СтруктураОбъекта)	
	Если ЗначениеЗаполнено(СтруктураОбъекта.Дата) Тогда 
		ДокументОбъект.Дата 				= СтруктураОбъекта.Дата;
	Иначе
		ДокументОбъект.Дата	                = ТекущаяДатаСеанса();
	КонецЕсли;
	ДокументОбъект.Год 						= СтруктураОбъекта.Год;
	ДокументОбъект.СборЗапущен 				= СтруктураОбъекта.СборЗапущен;
	ДокументОбъект.СборЗавершен 			= СтруктураОбъекта.СборЗавершен;
	ДокументОбъект.Состояние				= СтруктураОбъекта.СостояниеСбораГрафиковОтпусков;
	ДокументОбъект.ИнициаторСбора			= СтруктураОбъекта.Инициатор;
	ДокументОбъект.ИдентификаторДокумента 	= СтруктураОбъекта.ИдентификаторДокумента; 
	ДокументОбъект.Внешний					= Истина;
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ВключитьСборГрафиковОтпусков() Экспорт 
	
	Если Не ИнтеграцияКабинетСотрудникаРасширенный.ДоступноИспользованиеСборГрафиковОтпусков() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗначениеИспользоватьСборГрафиковОтпусков(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоСотрудников(ПараметрыОбновления = Неопределено) Экспорт 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СборГрафиковОтпусков.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.СборГрафиковОтпусков КАК СборГрафиковОтпусков
	|ГДЕ
	|	СборГрафиковОтпусков.КоличествоСотрудников = 0
	|	И СборГрафиковОтпусков.КорневойСборГрафиков <> ЗНАЧЕНИЕ(Документ.СборГрафиковОтпусков.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборГрафиковОтпусковСотрудники.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СборГрафиковОтпусковСотрудники.ФизическоеЛицо) КАК ЗапланировалоОтпуск
	|ИЗ
	|	Документ.СборГрафиковОтпусков.Сотрудники КАК СборГрафиковОтпусковСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО СборГрафиковОтпусковСотрудники.Ссылка = ДокументыКОбработке.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СборГрафиковОтпусковСотрудники.Ссылка";
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Документы.СборГрафиковОтпусков);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Продолжить	
		КонецЕсли;
		
		ДокументСборГрафиков = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		
		ДокументСборГрафиков.КоличествоСотрудников = ВыборкаОбновляемыхДанных.ЗапланировалоОтпуск;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументСборГрафиков);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
