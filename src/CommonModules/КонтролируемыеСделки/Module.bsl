#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КонтролируемыеСделкиОрганизаций);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - Соответствие полного имени регистра тексту запроса сторнирования.
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие из КлючИЗначение - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам контролируемых сделок.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КонтролируемыеСделкиОрганизаций");
	
КонецПроцедуры

#КонецОбласти

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соответствует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсутствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсутствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта.
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивУведомлений = Новый Массив();
	Для Каждого СвойстваОбъекта Из СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
			МассивУведомлений.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУведомлений.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивУведомлений", МассивУведомлений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка,
		|	УведомлениеОКонтролируемыхСделках.Дата КАК ДатаСоздания,
		|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(УведомлениеОКонтролируемыхСделках.ОтчетныйГод, ГОД) КАК ДатаОкончания,
		|	УведомлениеОКонтролируемыхСделках.ПометкаУдаления,
		|	ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.РегистрацияВНалоговомОргане.Код, """") КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Ссылка В(&МассивУведомлений)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта Из СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Уведомление о контролируемых сделках';
													|en = 'Controlled transaction notification '");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Найти уведомление организации в отчетном году.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации.
//  ОтчетныйГод -Число.
//  ТипУведомления - Число -  0 - Уведомление, 1 - Корректировка.
//  НомерКорректировки - Число.
//  ТипПоиска - Строка.
// 
// Возвращаемое значение:
//  Неопределено - если уведомление не найдено.
Функция НайтиУведомлениеОрганизацииВОтчетномГоду(Организация, ОтчетныйГод, ТипУведомления = Неопределено, НомерКорректировки = Неопределено, ТипПоиска = "Последний") Экспорт
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ОтчетныйГод", Дата(ОтчетныйГод, 1, 1));
		Запрос.Параметры.Вставить("НомерКорректировки", ?(ТипУведомления = 0, 0, ?(НомерКорректировки = Неопределено,0,НомерКорректировки)));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.Организация,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ДатаФормированияСпискаСделок,
		|	УведомлениеОКонтролируемыхСделках.ДатаЗаполненияУведомления
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
		|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
		|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки
		|	И НЕ УведомлениеОКонтролируемыхСделках.ПометкаУдаления";
		
		Если ТипУведомления = Неопределено И ТипПоиска = "Последний" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки","");	
		КонецЕсли;
		
		Если ТипПоиска = "Последний" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
		ИначеЕсли ТипПоиска = "Следующий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки ВОЗР";
		ИначеЕсли ТипПоиска = "Предыдущий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки <= &НомерКорректировки");	
		ИначеЕсли ТипПоиска = "Указанный" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");	
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
			НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
			Возврат Результат.Уведомление;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- Форма - форма, из обработчика события которой происходит вызов процедуры;
//  Отказ					- Булево - признак отказа от создания формы;
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события;
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ИнициализироватьДопСведенияДоговоровУчастниковКонтролируемыхСделок(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма) Тогда
		
		ДобавитьРеквизитыКонтролируемыхСделокНаФорму(Форма);
		
		ДобавитьЭлементыКонтролируемыхСделокНаФорму(Форма);
		
		ОбновитьДанныеДоговоровКонтролируемыхСделок(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет дополнительные сведения договоров участников контролируемых сделок
//
// Параметры:
//	Форма                   - ФормаКлиентскогоПриложения - форма пользователя.
//	ТекущийОбъект           - ДокументОбъект - объект, который будет прочитан.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура СохранитьДопСведенияДоговоровУчастниковКонтролируемыхСделок(Форма, ТекущийОбъект, ДополнительныеПараметры) Экспорт
	
	Если НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма) И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		
		СтруктураИзмерений = РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.ИнициализироватьСтруктуруИзмерений();
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Форма.Объект);
		Договор = Форма.Объект.Ссылка;
		СтруктураИзмерений.ДоговорКонтрагента = Договор;
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			СтруктураИзмерений.Контрагент = Форма.Объект.ОрганизацияПолучатель;
		КонецЕсли;
		
		ДопСведения = РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.ИнициализироватьДопСведенияДоговоров();
		Для каждого ДопСведение Из ДопСведения Цикл
			ДопСведения.Вставить(ДопСведение.Ключ, Форма["КонтролируемыеСделки_" + ДопСведение.Ключ]);
		КонецЦикла;
		
		Если ОтноситсяККонтролируемойСделке(СтруктураИзмерений) Тогда
			РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.СохранитьДопСведенияДоговоров(СтруктураИзмерений, ДопСведения);
		КонецЕсли;
		
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			СтруктураИзмерений.Организация = Форма.Объект.ОрганизацияПолучатель;
			СтруктураИзмерений.Контрагент = Форма.Объект.Организация;
			Если ОтноситсяККонтролируемойСделке(СтруктураИзмерений) Тогда
				РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.СохранитьДопСведенияДоговоров(СтруктураИзмерений, ДопСведения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Относится к контролируемой сделке.
// 
// Параметры:
//  СтруктураИзмерений - Структура - Структура измерений:
// * Организация - СправочникСсылка.Организации - 
// * Контрагент - Неопределено - 
// * ДоговорКонтрагента - Неопределено - 
// 
// Возвращаемое значение:
//  Булево - Относится к контролируемой сделке
Функция ОтноситсяККонтролируемойСделке(СтруктураИзмерений)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", СтруктураИзмерений.Контрагент);  
	Запрос.УстановитьПараметр("Организация", БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(СтруктураИзмерений.Организация));   
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());  
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзаимозависимыеЛицаСрезПоследних.ТипВзаимозависимости КАК ТипВзаимозависимости
	               |ИЗ
	               |	РегистрСведений.ВзаимозависимыеЛица.СрезПоследних(
	               |			&Период,
	               |			Организация = &Организация
	               |				И Контрагент = &Контрагент) КАК ВзаимозависимыеЛицаСрезПоследних";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

// Утанавливает параметры описания в таблице значений объектов регламентированной отчетности.
//
// Параметры:
//  ТаблицаОписания - ТаблицаЗначений - описание объектов регламентированной отчетности.
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

// Добавляет листы в таблицу значений, хранящую структуру листов уведомления.
// Параметры:
//  Листы              - ТаблицаЗначений - таблица значений, хранящая структуру листов уведомления.
//  Раздел             - Строка - наименование раздела уведомления.
//  НомерСтрокиРаздела - Число - номер строки раздела уведомления.
//
Процедура ДобавитьЛистВУведомление(Знач Листы, Знач Раздел, Знач НомерСтрокиРаздела)
	
	Лист = Листы.Добавить();
	Лист.Раздел = Раздел;
	Лист.НомерСтрокиРаздела = НомерСтрокиРаздела;
	
КонецПроцедуры

// Добавляет колонки адреса иностранного контрагента в таблицу значений раздела.
// Параметры:
//  ТаблицаРаздела - ТаблицаЗначений - описание структуры раздела уведомления.
//
Процедура ДобавитьКолонкиАдресаИностранногоКонтрагента(ТаблицаРаздела)
	
	// Максимальная длина части адреса - 80 символов (для улицы).
	// Остальные - 40 символов. Но для заполнения нам это не очень важно, поэтому делаем их все одинаковыми.
	ТипКолонкиСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(80);
	
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_УлицаДом", ТипКолонкиСтрока);
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_Район", ТипКолонкиСтрока);
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_НаселенныйПункт", ТипКолонкиСтрока);
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_Регион", ТипКолонкиСтрока);
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_Страна", ТипКолонкиСтрока);
	ТаблицаРаздела.Колонки.Добавить("АдресИностранный_Индекс", ТипКолонкиСтрока);
	
КонецПроцедуры

// Заполняет колонки адреса иностранного контрагента в строке таблицы значений.
// Параметры:
//  СтрокаКонтрагента - СтрокаТаблицыЗначений - описание структуры строки табилцы значений раздела уведомления.
//
Процедура ЗаполнитьКолонкиАдресаИностранногоКонтрагента(СтрокаКонтрагента)
	
	Если Не ЗначениеЗаполнено(СтрокаКонтрагента.АдресИностраннойОрганизацииЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(СтрокаКонтрагента.АдресИностраннойОрганизацииЗначение);
	
	// Страна.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Страна) Тогда
		СтрокаКонтрагента.АдресИностранный_Страна = СведенияОбАдресе.Страна;
	КонецЕсли;
	
	// Регион внутри страны, район внутри региона.
	РегионРайон = Новый Массив;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Регион) Тогда
		РегионРайон.Добавить(СведенияОбАдресе.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОбАдресе.Район) Тогда
		РегионРайон.Добавить(СведенияОбАдресе.Район);
	КонецЕсли;
	СтрокаРегионРайон = СтрСоединить(РегионРайон, ", ");
	СтрокаКонтрагента.АдресИностранный_Регион = СтрокаРегионРайон;
	
	// Город и т.п.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		СтрокаКонтрагента.АдресИностранный_НаселенныйПункт = СведенияОбАдресе.Город;
	КонецЕсли;
	
	// Почтовый индекс.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Индекс) Тогда
		СтрокаКонтрагента.АдресИностранный_Индекс = СведенияОбАдресе.Индекс;
	КонецЕсли;
	
	// Район внутри населенного пункта.
	Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
		СтрокаКонтрагента.АдресИностранный_Район = СведенияОбАдресе.НаселенныйПункт;
	КонецЕсли;
	
	// Улица с домом и т.д.
	
	УлицаДом = Новый Массив;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Улица) Тогда
		УлицаДом.Добавить(СокрЛП(СведенияОбАдресе.Улица));
	КонецЕсли;
	
	ШаблонЧастиОкончанияАдреса = "%1 %2";
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание) Тогда
		УлицаДом.Добавить(СтрШаблон(ШаблонЧастиОкончанияАдреса,
										СведенияОбАдресе.Здание.ТипЗдания,
										СведенияОбАдресе.Здание.Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса) Тогда
		УлицаДом.Добавить(СтрШаблон(ШаблонЧастиОкончанияАдреса,
										СведенияОбАдресе.Корпуса.Получить(0).ТипКорпуса,
										СведенияОбАдресе.Корпуса.Получить(0).Номер));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения) Тогда
		УлицаДом.Добавить(СтрШаблон(ШаблонЧастиОкончанияАдреса,
										СведенияОбАдресе.Помещения.Получить(0).ТипПомещения,
										СведенияОбАдресе.Помещения.Получить(0).Номер));
	КонецЕсли;
	
	СтрокаУлицаДом = СтрСоединить(УлицаДом,", ");
	
	СтрокаКонтрагента.АдресИностранный_УлицаДом = СтрокаУлицаДом;
	
КонецПроцедуры

// Фукция соединяет наименование и тип адресного объекта в одну строку.
// функция взята из БСП АдресныйКлассификаторСлужебный.СоединитьНаименованиеИТипАдресногоОбъекта в следующей версии БСП
// данная функция будет доступна для использования внешнего обращения к БСП, когда выйдет новая версия нужно будет
// переписать код на обращение к яфукнции БСП.
// Параметры:
//  Наименование - Строка - наименование адресного объекта.
//  ТипАдресногоОбъекта - Строка - тип адресного объекта.
//  ЭтоРегион - Булево - Истина, если тип адресного объекта, явлется регионом.
// 
// Возвращаемое значение:
//  Строка - соединенное в одну строку наименование и тип адресного объекта.
Функция СоединитьНаименованиеИТипАдресногоОбъекта(Знач Наименование, Знач ТипАдресногоОбъекта, ЭтоРегион = Ложь) Экспорт

	Если ПустаяСтрока(ТипАдресногоОбъекта) Тогда
		Возврат Наименование;
	КонецЕсли;

	Если ЭтоРегион Тогда
		
		Если НаименованиеРегионаБезТипа(Наименование) Тогда
			Возврат Наименование;
		КонецЕсли;
		
		Возврат Наименование + " " + ТипАдресногоОбъекта;
	КонецЕсли;

	Возврат ТипАдресногоОбъекта + " " + Наименование;

КонецФункции

// Фукция возвращает наименование региона без типа.
// функция взята из БСП НаименованиеРегионаБезТипа(Наименование), 
// чтобы обеспечить работу функции СоединитьНаименованиеИТипАдресногоОбъекта в данном модуле 
// В следующей версии БСП данная функция СоединитьНаименованиеИТипАдресногоОбъекта будет доступна для использования
// внешнего обращения к БСП. Когда выйдет новая версия нужно будет переписать код на обращение к фукнции БСП.
// Параметры:
//  Наименование - Строка - наименование региона.
// 
// Возвращаемое значение:
//  Строка - наименование региона без типа.
Функция НаименованиеРегионаБезТипа(Наименование)
	// АПК: 1297-выкл Данные адресного классификатора, не локализуются
	Возврат СтрНачинаетсяС(ВРег(Наименование), ВРег("Ханты-Мансийский Автономный округ - Югра")); // @Non-NLS-1
	// АПК: 1297-вкл
КонецФункции

// Возвращает длину иерархии листов 1В
// Возвращаемое значение:
//  Число - длина иерархии листов 1В
Функция ДлинаИерархииЛистов1В()
	Возврат 3;
КонецФункции

// Возвращает таблицу значений сдвоенных листов 1Г.
//
// Параметры:
//  Листы1Г              - ТаблицаЗначений - листы 1Г.
// Возвращаемое значение:
//  ТаблицаЗначений      - сдвоенные листы 1Г.
//
Функция ПодготовитьСдвоенныеЛисты1Г(Листы1Г)
	
	Листы1ГСвдоенные = Новый ТаблицаЗначений();
	
	УникальныеКолонки1Г = Новый Массив;
	УникальныеКолонки1Г.Добавить("Сделка");
	УникальныеКолонки1Г.Добавить("НомерЛиста1А");
	УникальныеКолонки1Г.Добавить("ИдентификаторЛиста1Б");
	УникальныеКолонки1Г.Добавить("НомерЛиста1Б");
	
	Для Каждого Колонка1Г Из Листы1Г.Колонки Цикл
		Если УникальныеКолонки1Г.Найти(Колонка1Г.Имя) <> Неопределено Тогда
			Листы1ГСвдоенные.Колонки.Добавить(Колонка1Г.Имя, Колонка1Г.ТипЗначения);
		Иначе
			Листы1ГСвдоенные.Колонки.Добавить(Колонка1Г.Имя + "1", Колонка1Г.ТипЗначения);
			Листы1ГСвдоенные.Колонки.Добавить(Колонка1Г.Имя + "2", Колонка1Г.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Листы1Г.Сортировать("НомерЛиста1А,ИдентификаторЛиста1Б,НомерСтроки");
	
	ТекущаяСдвоеннаяСтрока = Неопределено;
	ТекущийНомер = 1;
	Для Каждого Строка1Г Из Листы1Г Цикл
		Если ТекущаяСдвоеннаяСтрока = Неопределено
			Или ТекущаяСдвоеннаяСтрока.ИдентификаторЛиста1Б <> Строка1Г.ИдентификаторЛиста1Б
			Или ТекущийНомер > 2 Тогда
			ТекущаяСдвоеннаяСтрока = Листы1ГСвдоенные.Добавить();
			ТекущаяСдвоеннаяСтрока.ИдентификаторЛиста1Б = Строка1Г.ИдентификаторЛиста1Б;
			ТекущаяСдвоеннаяСтрока.Сделка = Строка1Г.Сделка;
			ТекущаяСдвоеннаяСтрока.НомерЛиста1А = Строка1Г.НомерЛиста1А;
			ТекущийНомер = 1;
		КонецЕсли;
		
		Для Каждого Колонка1Г Из Листы1Г.Колонки Цикл
			Если УникальныеКолонки1Г.Найти(Колонка1Г.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяСдвоеннаяСтрока[Колонка1Г.Имя + Строка(ТекущийНомер)] = Строка1Г[Колонка1Г.Имя];
		КонецЦикла;
		
		ТекущийНомер = ТекущийНомер + 1;
		
	КонецЦикла;
	
	Листы1ГСвдоенные.Индексы.Добавить("Сделка");
	
	Возврат Листы1ГСвдоенные;
	
КонецФункции

// Возвращает код вида документа по виду документа.
//
// Параметры:
//  ДокументВид - СправочникСсылка.ВидыДокументовФизическихЛиц - вид документа.
//
// Возвращаемое значение:
//  Строка - код вида документа.
//
Функция ПолучитьКодВидаДокументаПоВидуДокумента(ДокументВид) Экспорт 
	
	Если ЗначениеЗаполнено(ДокументВид) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВид, "КодМВД");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает массив офшорных территорий за отчетный год.
//
// Параметры:
//  ОтчетныйГод - Дата - дата, определеяющая за какой отчетный год, нужно узнать список офшоров.
//
// Возвращаемое значение:
//  Массив Из СправочникСсылка.СтраныМира - массив офшорных территорий за отчетный год.
//
Функция СписокОфшоров(Знач ОтчетныйГод) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтчетныйГод) Тогда
		ОтчетныйГод = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ОфшорыОтчетногоГода = УчетОфшоров.СтраныОфшорыПоОтчетномуГоду(ОтчетныйГод);
	
	Возврат ОфшорыОтчетногоГода.ВыгрузитьКолонку("СтранаРегистрации");
	
КонецФункции

// Возвращает таблицу кодов ТНВЭД, которые принадлежат к товарам мировой биржевой торговли, на основании макета.
// (см. макет ТоварыМировойБиржевойТорговлиXML обработки ПомощникПодготовкиУведомленияОКонтролируемыхСделках).
// Возвращаемое значение:
// ТаблицаЗначений - таблица кодов ТНВЭД товаров, относящихся к товарам мировой биржевой торговли и их периодов действия:
//		* СсылкаТНВЭД - СправочникСсылка.КлассификаторТНВЭД - ссылка на классификатор кодов ТНВЭД;
//		* ДатаНачалаДействия - Дата - дата начала действия;
//		* ДатаОкончанияДействия - Дата - дата окончания действия.
//
Функция ТаблицаКодовТНВЭДМировойБиржевойТорговли() Экспорт
	
	Возврат КонтролируемыеСделкиПовтИсп.КодыТНВЭДМировойБиржевойТорговли();
	
КонецФункции

// Возвращает представление уведомления.
// Параметры:
//  Уведомление  - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление.
//  ШаблонТекста - Строка - шаблон.
// Возвращаемое значение:
//  Строка     - представление уведомления.
Функция ПредставлениеУведомления(Уведомление, ШаблонТекста) Экспорт
	
	Если Уведомление = ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		Возврат НСтр("ru = ''");
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "Организация, НомерКорректировки, ОтчетныйГод");
	
	Представление = ?(ПараметрыУведомления.НомерКорректировки > 0, 
		НСтр("ru = '%ШаблонТекста% корректировки №%НомерКорректировки% уведомления ""%Организация%"" за %Год%';
			|en = '%ШаблонТекста% of adjustment No.%НомерКорректировки% of notification ""%Организация%"" dated %Год%'"),
		НСтр("ru = '%ШаблонТекста% уведомления ""%Организация%"" за %Год%';
			|en = '%ШаблонТекста% of notification ""%Организация%"" dated  %Год%'"));
	Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПараметрыУведомления.НомерКорректировки);
	Представление = СтрЗаменить(Представление, "%Организация%", ПараметрыУведомления.Организация);
	Представление = СтрЗаменить(Представление, "%Год%", Формат(ПараметрыУведомления.ОтчетныйГод,"ДФ=yyyy"));
	Представление = СтрЗаменить(Представление, "%ШаблонТекста%", ШаблонТекста);
	
	Возврат Представление;
	
КонецФункции

// Возвращает дату начала учета спецрежимов для независимых посредников.
//
//  Возвращаемое значение:
//   Дата - дата начала учета спецрежимов для независимых посредников.
//
Функция ДатаНачалаУчетаСпецрежимовДляНевзаимозависимыхПосредников() Экспорт
	
	// В соответствии с п.2 ст.4 №227-ФЗ от 18.07.2011 до 2014 года действует переходный период.
	// В переходный период сделки с невзаимозависимыми посредниками (пп.1 п.1 ст.105.14 НК РФ)
	// не учитываются как контролируемые, если сделки совершены с участниками спец.режимов (ЕВНД и ЕСХН)
	Возврат '20140101';
	
КонецФункции

// В соответствии с редакцией федерального закона от 26.03.2022 №67-ФЗ из критериев контролируемости сделок
// убран контроль по инвестиционному вычету с января 22 г. до января 25 г.
//
//	Параметры:
//		Период - Дата - период формирования контролируемой сделки.
//	Возвращаемое значение:
//		Булево - если период формирования контролируемой сделки находится внутри интервала, в котором не контролируется
//			инвестиционный вычет, возвращается ложь, в противном случае - истина.
//
Функция УчитываютсяСделкиСИнвестиционнымНалоговымВычетом(Период) Экспорт
	
	Возврат Период < '20220101' Или Период > '20241231235959';
	
КонецФункции

// Возвращает массив организаций, исключая указанную.
//
// Параметры:
//  ИсключающаясяОрганизация               - СправочникСсылка.Организации - исключаемая из массива организация.
//  ВключатьПомеченныеНаУдаление           - Булево - Истина, если включать в массив помеченные на удаление организации.
//  ВключатьУправленческуюОрганизацию      - Булево -  Истина, если включать в массив управленческую организацию.
// Возвращаемое значение:
//  Массив из СправочникСсылка.Организации - массив организаций, исключая указанную.
//
Функция СписокОрганизацийИсключаяУказанную(ИсключающаясяОрганизация, ВключатьПомеченныеНаУдаление = Ложь, ВключатьУправленческуюОрганизацию = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.ПометкаУдаления = &ВключатьПомеченныеНаУдаление
	|	ИЛИ Не Организации.ПометкаУдаления)
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)
	|");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", ИсключающаясяОрганизация);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	ИспользоватьУпрОрганизацию = ?(ВключатьУправленческуюОрганизацию, Истина, ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ИспользоватьУпрОрганизацию);
	
	ОрганизацииДляВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ОрганизацииДляВыбора;
	
КонецФункции

#Область ФормированиеДвижений

// Формирует коллекцию движений контролируемых сделок по организациям.
//
// Параметры:
//  КонтролируемыеСделкиОрганизаций - ТаблицаЗначений - информация о контролирируемых сделках организаций.
//  Движения      - КоллекцияДвижений - движения документа.
//  КоллекцияДвижений - Булево - Истина, если произошла ошибка при формировании движений документа.
//
Процедура СформироватьДвиженияКонтролируемыхСделокОрганизаций(КонтролируемыеСделкиОрганизаций, Движения, Отказ) Экспорт
	
	Движения.КонтролируемыеСделкиОрганизаций.Загрузить(КонтролируемыеСделкиОрганизаций);
	
	Движения.КонтролируемыеСделкиОрганизаций.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область НумерацияДокументов

// Перенумировывает контролируемые сделки солгасно уведомлению.
// Параметры:
//  Уведомление -ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление.
Процедура ПеренумерацияКонтролируемыхСделокУведомления(Уведомление) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтролируемаяСделка.Ссылка КАК Документ
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|ГДЕ
	|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	|	И НЕ КонтролируемаяСделка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтролируемаяСделка.Номер";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	
	Сч = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Номер <> Сч Тогда
			КонтролируемаяСделка = Выборка.Документ.ПолучитьОбъект();
			КонтролируемаяСделка.Номер = Сч;
			КонтролируемаяСделка.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Оперделяет корректны ли номера контролируемых сделок в уведомлении.
//
// Параметры:
//  Уведомление - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление о контролируемых сделках.
// Возвращаемое значение:
//  Булево - Истина, если корректны номера контролируемых сделок в уведомлении.
//
Функция НомераКонтролируемыхСделокУведомленияКорректны(Уведомление) Экспорт
	
	НомераКорректны = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтролируемаяСделка.Ссылка) КАК Количество,
	|	ЕСТЬNULL(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК МаксимальныйНомер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтролируемаяСделка.Номер) КАК КоличествоРазличных
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|ГДЕ
	|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	РезультатПроверки = Запрос.Выполнить().Выбрать();
	
	Если РезультатПроверки.Следующий() Тогда
		
		НомераКорректны = (РезультатПроверки.МаксимальныйНомер = РезультатПроверки.Количество
			И РезультатПроверки.МаксимальныйНомер = РезультатПроверки.КоличествоРазличных);
		
	КонецЕсли;
		
	Возврат НомераКорректны;
	
КонецФункции

// Заполняет массив строк таблицы значений табличной части Листы1В документа КонтролируемаяСделка информацией о связи
// цепочек стоимости.
//
// Параметры:
//  СписокЛистов1В                   - Массив из Строка - массив строк таблицы значений табличной части Листы1В 
//                                              документа КонтролируемаяСделка.
//  ТаблицаЦепочкиЛистов1В           - ТаблицаЗначений - структура колонок:
// * ИдентификаторЛиста1В            - УникальныйИдентификатор - идентификатор текущего листа 1В.
// * ИдентификаторПредыдущегоЛиста1В - УникальныйИдентификатор - идентификатор предыдущего листа 1В.
// * НомерЛиста1Б                    - Число - номер листа 1Б
// * НомерЛиста1В_0                  - Число - номер листа 1В в 1-ого уровня в цепочке.
// * НомерЛиста1В_1                  - Число - номер листа 1В в 2-ого уровня в цепочке.
// * НомерЛиста1В_2                  - Число - номер листа 1В в 3-ого уровня в цепочке.
// * НомерЛиста1В_3                  - Число - номер листа 1В в 4-ого уровня в цепочке.
// * НомерСтроки                     - Число - номер строки в документе КонтролируемаяСделка.
Процедура ЗаполнитьСвязиЛистов1В(СписокЛистов1В, ТаблицаЦепочкиЛистов1В)
	
	ПустойИдентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	
	ТаблицаЦепочкиЛистов1В.Сортировать("НомерЛиста1Б,НомерСтроки");
	
	// Нумерация листов уникальна в пределах листа 1Б (или всего листа 1А, если связь с листами 1Б для листа 1В не установлена).
	ТекущийНомерЛиста1Б = Неопределено;
	НомерЛиста1В = 0;
	
	// Сначала заполним номера листов 1 уровня.
	Для Каждого СтрокаЦепочкиЛистов1В Из ТаблицаЦепочкиЛистов1В Цикл
		
		Если ТекущийНомерЛиста1Б = Неопределено
			Или ТекущийНомерЛиста1Б <> СтрокаЦепочкиЛистов1В.НомерЛиста1Б Тогда
			ТекущийНомерЛиста1Б = СтрокаЦепочкиЛистов1В.НомерЛиста1Б;
			НомерЛиста1В = 0;
		КонецЕсли;
		
		Если СтрокаЦепочкиЛистов1В.ИдентификаторПредыдущегоЛиста1В = ПустойИдентификатор Тогда
			НомерЛиста1В = НомерЛиста1В + 1;
			СтрокаЦепочкиЛистов1В.НомерЛиста1В_0 = НомерЛиста1В;
			ЗаполнитьНомераДочернихЛистов(СтрокаЦепочкиЛистов1В, ТаблицаЦепочкиЛистов1В, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСписка Из СписокЛистов1В Цикл
		СтрокаСледующихЛистов = ТаблицаЦепочкиЛистов1В.Найти(СтрокаСписка.ИдентификаторЛиста1В, "ИдентификаторЛиста1В");
		Если СтрокаСледующихЛистов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерИерархии = 0 По ДлинаИерархииЛистов1В() Цикл
			
			Номер1ВЧислом = СтрокаСледующихЛистов["НомерЛиста1В_" + Формат(НомерИерархии, "ЧДЦ=0; ЧН=0; ЧГ=0")];
			
			Если Номер1ВЧислом = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСписка.ИдентификаторЛиста1Б = ПустойИдентификатор Тогда
				Номер1ВСтрокой = "0." + Формат(Номер1ВЧислом, "ЧЦ=3; ЧДЦ=0; ЧГ=0");
			Иначе
				Номер1ВСтрокой = Формат(Номер1ВЧислом, "ЧЦ=5; ЧДЦ=0; ЧГ=0");
			КонецЕсли;
			
			СтрокаСписка["НомерЛиста1В_" + Формат(НомерИерархии, "ЧДЦ=0; ЧН=0; ЧГ=0")] = Номер1ВСтрокой;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// СтрокаРодительскойЦепочкиЛистов1В - СтрокаТаблицыЗначений - структура полей:
// * ИдентификаторЛиста1В            - УникальныйИдентификатор - идентификатор строки родительской цепочки листа 1В.
// * ИдентификаторПредыдущегоЛиста1В - УникальныйИдентификатор - идентификатор предыдущего листа 1В.
// * НомерЛиста1Б                    - Число - номер листа 1Б
// * НомерЛиста1В_0                  - Число - номер листа 1В в 1-ого уровня в цепочке.
// * НомерЛиста1В_1                  - Число - номер листа 1В в 2-ого уровня в цепочке.
// * НомерЛиста1В_2                  - Число - номер листа 1В в 3-ого уровня в цепочке.
// * НомерЛиста1В_3                  - Число - номер листа 1В в 4-ого уровня в цепочке.
// * НомерСтроки                     - Число - номер строки в документе КонтролируемаяСделка.
//  ТаблицаЦепочкиЛистов1В           - ТаблицаЗначений - структура колонок:
// * ИдентификаторЛиста1В            - УникальныйИдентификатор - идентификатор текущего листа 1В.
// * ИдентификаторПредыдущегоЛиста1В - УникальныйИдентификатор - идентификатор предыдущего листа 1В.
// * НомерЛиста1Б                    - Число - номер листа 1Б
// * НомерЛиста1В_0                  - Число - номер листа 1В в 1-ого уровня в цепочке.
// * НомерЛиста1В_1                  - Число - номер листа 1В в 2-ого уровня в цепочке.
// * НомерЛиста1В_2                  - Число - номер листа 1В в 3-ого уровня в цепочке.
// * НомерЛиста1В_3                  - Число - номер листа 1В в 4-ого уровня в цепочке.
// * НомерСтроки                     - Число - номер строки в документе КонтролируемаяСделка.
// НомерИерархии                     - Число - номер иерархии цепочки.
Процедура ЗаполнитьНомераДочернихЛистов(СтрокаРодительскойЦепочкиЛистов1В, ТаблицаЦепочкиЛистов1В, НомерИерархии)
	
	Если НомерИерархии > ДлинаИерархииЛистов1В() Тогда
		Возврат;
	КонецЕсли;
	
	НомерЛиста1В = 0;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("НомерЛиста1Б", СтрокаРодительскойЦепочкиЛистов1В.НомерЛиста1Б);
	ОтборСтрок.Вставить("ИдентификаторПредыдущегоЛиста1В", СтрокаРодительскойЦепочкиЛистов1В.ИдентификаторЛиста1В);
	ДочерниеСтроки = ТаблицаЦепочкиЛистов1В.НайтиСтроки(ОтборСтрок); 
	Для Каждого ДочерняяСтрокаЦепочкиЛистов1В Из ДочерниеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ДочерняяСтрокаЦепочкиЛистов1В, СтрокаРодительскойЦепочкиЛистов1В, "НомерЛиста1В_0,НомерЛиста1В_1,НомерЛиста1В_2,НомерЛиста1В_3");
		НомерЛиста1В = НомерЛиста1В + 1;
		ДочерняяСтрокаЦепочкиЛистов1В["НомерЛиста1В_" + Формат(НомерИерархии, "ЧДЦ=0; ЧН=0; ЧГ=0")] = НомерЛиста1В;
		ЗаполнитьНомераДочернихЛистов(ДочерняяСтрокаЦепочкиЛистов1В, ТаблицаЦепочкиЛистов1В, НомерИерархии + 1);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает следующий номер уведомления о контролируемых сделках.
// Параметры:
//  Уведомление - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление о контролируемых сделках.
// Возвращаемое значение:
//  Число - следующий номер контролируемой сделки.
Функция ПолучитьСледующийНомерКонтролируемойСделкиУведомления(Уведомление) Экспорт
	
	Номер = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК Номер
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|ГДЕ
	|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Номер = Результат.Номер;
		
	КонецЕсли;
	
	Возврат Номер + 1;
	
КонецФункции

// Функция возвращает структуру данных уведомления, разделенную по разделам.
//
// Параметры:
//  Уведомление - ДокументСсылка.УведомлениеОКонтролируемыхСделках -Уведомление
//  Лист1АДляПечати - ДокументСсылка.КонтролируемаяСделка - лист 1А для печати.
//
// Возвращаемое значение:
//  Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//
Функция ПолучитьЛистыУведомления(Уведомление, Лист1АДляПечати = Неопределено) Экспорт
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УведомлениеОКонтролируемойСделке", Уведомление);
	Запрос.УстановитьПараметр("ДатаАктуальностиСведений", ДатаАктуальностиСведений);
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2018();
	Иначе
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2012();
	КонецЕсли;
	
	Если Лист1АДляПечати <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ КонтролируемаяСделка.ПометкаУдаления",
			"И НЕ КонтролируемаяСделка.ПометкаУдаления И КонтролируемаяСделка.Ссылка = &Лист1АДляПечати");
		Запрос.УстановитьПараметр("Лист1АДляПечати", Лист1АДляПечати);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Листы1А.*
	|ИЗ
	|	Листы1А КАК Листы1А
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Б.*
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Б.НомерЛиста1А, Листы1Б.НомерСтроки
	|;
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1В.*
	|ИЗ
	|	Листы1В КАК Листы1В
	|УПОРЯДОЧИТЬ ПО
	|	Листы1В.НомерЛиста1А, Листы1В.НомерСтроки1Б, Листы1В.НомерСтроки
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Г.*
	|ИЗ
	|	Листы1Г КАК Листы1Г
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Г.НомерЛиста1А, Листы1Г.НомерСтроки1Б, Листы1Г.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.Контрагент КАК Контрагент,
	|	Раздел2.Строка020ТипОрганизации КАК Строка020ТипОрганизации,
	|	Раздел2.Строка030КакКодСтраныРегистрации КАК Строка030КакКодСтраныРегистрации,
	|	Раздел2.Строка040Наименование КАК Строка040Наименование,
	|	Раздел2.Строка040НаименованиеЛат КАК Строка040НаименованиеЛат,
	|	Раздел2.Строка050ИНН КАК Строка050ИНН,
	|	Раздел2.Строка060КПП КАК Строка060КПП,
	|	Раздел2.Строка070РегНомерВСтрокеРегистрации КАК Строка070РегНомерВСтрокеРегистрации,
	|	Раздел2.НалоговыйРегистрационныйНомер КАК НалоговыйРегистрационныйНомер,
	|	Раздел2.НаименованиеИдентификатораРегистрационногоНомера КАК НаименованиеИдентификатораРегистрационногоНомера,
	|	Раздел2.Строка080КодНалогВСтранеРегистрации КАК Строка080КодНалогВСтранеРегистрации,
	|	Раздел2.Строка090АдресИностраннойОрганизации КАК Строка090АдресИностраннойОрганизации,
	|	Раздел2.АдресИностраннойОрганизацииЗначение КАК АдресИностраннойОрганизацииЗначение
	|ИЗ
	|	Раздел2 КАК Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел2.Строка040Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел3.Контрагент КАК Контрагент,
	|	Раздел3.Строка020КодВидаДеятельности КАК Строка020КодВидаДеятельности,
	|	Раздел3.Строка030ИНН КАК Строка030ИНН,
	|	Раздел3.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Раздел3.ДатаРождения КАК ДатаРождения,
	|	Раздел3.МестоРождения КАК МестоРождения,
	|	Раздел3.ГражданствоФизЛицСтрана КАК ГражданствоФизЛицСтрана,
	|	Раздел3.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	Раздел3.КонтактнаяИнформацияЗначенияПолей КАК КонтактнаяИнформацияЗначенияПолей,
	|	Раздел3.КонтактнаяИнформацияЗначениеJSON КАК КонтактнаяИнформацияЗначениеJSON,
	|	Раздел3.КонтактнаяИнформацияСтрана КАК КонтактнаяИнформацияСтрана,
	|	Раздел3.КонтактнаяИнформацияПредставление КАК КонтактнаяИнформацияПредставление,
	|	Раздел3.КонтактнаяИнформацияЗаРФСтрана КАК КонтактнаяИнформацияЗаРФСтрана,
	|	Раздел3.КонтактнаяИнформацияЗаРФПредставление КАК КонтактнаяИнформацияЗаРФПредставление,
	|	Раздел3.ВидДокумента КАК ВидДокумента,
	|	Раздел3.ДокументСерия КАК ДокументСерия,
	|	Раздел3.ДокументНомер КАК ДокументНомер,
	|	Раздел3.ДокументКемВыдан КАК ДокументКемВыдан,
	|	Раздел3.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	Раздел3.Фамилия КАК Фамилия,
	|	Раздел3.Имя КАК Имя,
	|	Раздел3.Отчество КАК Отчество
	|ИЗ
	|	Раздел3 КАК Раздел3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел3.Фамилия,
	|	Раздел3.Имя,
	|	Раздел3.Отчество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Раздел4.Контрагент КАК Контрагент,
	|	Раздел4.ТипОрганизации КАК ТипОрганизации,
	|	Раздел4.КодСтраныРегистрации КАК КодСтраныРегистрации,
	|	Раздел4.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	Раздел4.РегистрационныйНомер КАК РегистрационныйНомер
	|ИЗ
	|	Раздел4 КАК Раздел4
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел4.НаименованиеКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1В.Сделка КАК Сделка,
	|	Листы1В.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1В.Контрагент КАК Контрагент
	|ИЗ
	|	Листы1В КАК Листы1В
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1В.Сделка)
	|ГДЕ
	|	Листы1В.Контрагент <> Неопределено
	|	И Листы1В.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Листы1В.Контрагент <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиЛистов1Би1В.Сделка КАК Сделка,
	|	СвязиЛистов1Би1В.НомерСтроки КАК НомерСтроки,
	|	СвязиЛистов1Би1В.ИдентификаторЛиста1Б КАК ИдентификаторЛиста1Б,
	|	СвязиЛистов1Би1В.ИдентификаторЛиста1В КАК ИдентификаторЛиста1В
	|ИЗ
	|	СвязиЛистов1Би1В КАК СвязиЛистов1Би1В";
	
	Результат = Запрос.ВыполнитьПакет();
	Листы1А = Результат[0].Выгрузить();
	Листы1Б = Результат[1].Выгрузить();
	Листы1В = Результат[2].Выгрузить();
	Листы1Г = Результат[3].Выгрузить();
	Раздел2 = Результат[4].Выгрузить();
	Раздел3 = Результат[5].Выгрузить();
	Раздел4 = Результат[6].Выгрузить();
	Листы2 = Результат[7].Выгрузить();
	Листы3 = Результат[8].Выгрузить();
	Листы4 = Результат[9].Выгрузить();
	Связь1Би1В = Результат[10].Выгрузить();

	Листы1А.Индексы.Добавить("Сделка");
	Листы1Б.Индексы.Добавить("Сделка");
	Листы1В.Индексы.Добавить("Сделка");
	Листы1Г.Индексы.Добавить("Сделка");
	Раздел2.Индексы.Добавить("Контрагент");
	Раздел3.Индексы.Добавить("Контрагент");
	Раздел4.Индексы.Добавить("Контрагент");
	Листы2.Индексы.Добавить("Сделка");
	Листы3.Индексы.Добавить("Сделка");
	Листы4.Индексы.Добавить("Сделка");
	Связь1Би1В.Индексы.Добавить("ИдентификаторЛиста1В");
	
	ОписаниеТипаНомераУчастникаСделки = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	
	Раздел2.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	Раздел3.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	Раздел4.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	
	ДобавитьКолонкиАдресаИностранногоКонтрагента(Раздел2);
	
	НомерКонтрагента = 1;
	Для Каждого Контрагент Из Раздел2 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		ЗаполнитьКолонкиАдресаИностранногоКонтрагента(Контрагент);
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел3 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел4 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	
	ТипНомераСтраницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	КоличествоЛистовРаздела = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(ДлинаНомераЛистовРаздела1, 0, ДопустимыйЗнак.Неотрицательный));
	
	Листы1А.Колонки.Добавить("Количество1Б", КоличествоЛистовРаздела);
	Листы1А.Колонки.Добавить("Количество1В", КоличествоЛистовРаздела);
	
	ТипКодТипаСделки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	Листы1А.Колонки.Добавить("КодТипаСделки1", ТипКодТипаСделки);
	Листы1А.Колонки.Добавить("КодТипаСделки2", ТипКодТипаСделки);
	Листы1А.Колонки.Добавить("КодТипаСделки3", ТипКодТипаСделки);
	
	Листы1Б.Колонки.Добавить("Строка050НомерУчастникаСделки", ОписаниеТипаНомераУчастникаСделки);
	Листы1Б.Колонки.Добавить("НомерЛиста1Б", ТипНомераСтраницы);
	Листы1В.Колонки.Добавить("НомерУчастникаСделки", ОписаниеТипаНомераУчастникаСделки);
	
	ДлинаНомераЛиста1В = 5;
	ТипНомераЛиста1В = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНомераЛиста1В);
	ТипНомераЛиста1ВЧислом = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомераЛиста1В, 0);
	
	Листы1В.Колонки.Добавить("НомерЛиста1Б", ТипНомераСтраницы);
	Листы1В.Колонки.Добавить("НомерЛиста1В_0", ТипНомераЛиста1В);
	Листы1В.Колонки.Добавить("НомерЛиста1В_1", ТипНомераЛиста1В);
	Листы1В.Колонки.Добавить("НомерЛиста1В_2", ТипНомераЛиста1В);
	Листы1В.Колонки.Добавить("НомерЛиста1В_3", ТипНомераЛиста1В);
	Листы1В.Колонки.Добавить("СправочноНомераЛистов1Б", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Листы1Г.Колонки.Добавить("НомерЛиста1Б", ТипНомераСтраницы);
	
	Листы1ГСвдоенные = ПодготовитьСдвоенныеЛисты1Г(Листы1Г);
	
	Листы = Новый ТаблицаЗначений();
	Листы.Колонки.Добавить("Раздел",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Листы.Колонки.Добавить("НомерСтрокиРаздела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	ДобавитьЛистВУведомление(Листы, "ТитульныйЛист", 0);
	//Для организации физического-лица титульные листы содержат 2 листа
	Если СведенияОбУведомлении.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И СокрЛП(СведенияОбУведомлении.ИНН) = "" Тогда
		ДобавитьЛистВУведомление(Листы, "ТитульныйЛистФизическоеЛицо", 0);
	КонецЕсли;
	
	НомераЛистов1Б = Новый Соответствие;
	
	ТаблицаСвязей1В = Новый ТаблицаЗначений;
	ТаблицаСвязей1В.Колонки.Добавить("НомерЛиста1Б", ТипНомераСтраницы);
	ТаблицаСвязей1В.Колонки.Добавить("НомерЛиста1БСтрокой", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	//нумерация листов раздела 1А и 1Б
	Для каждого Лист1А Из Листы1А Цикл
		
		НомерЛиста1Б = 0;
		
		ДобавитьЛистВУведомление(Листы, "Лист1А", Листы1А.Индекс(Лист1А));
		
		Отбор = Новый Структура("Сделка", Лист1А.Сделка);
		
		СписокЛистов1Б = Листы1Б.НайтиСтроки(Отбор);
		Лист1А.Количество1Б = СписокЛистов1Б.Количество();
		
		Для Каждого Лист1Б Из СписокЛистов1Б Цикл
			
			ДобавитьЛистВУведомление(Листы, "Лист1Б", Листы1Б.Индекс(Лист1Б));
			
			Если Лист1Б.ТипКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОКонтрагенте = Раздел3.Найти(Лист1Б.Контрагент, "Контрагент");
			Иначе
				СведенияОКонтрагенте = Раздел2.Найти(Лист1Б.Контрагент, "Контрагент");
			КонецЕсли;
			Если СведенияОКонтрагенте <> Неопределено Тогда
				Лист1Б.Строка050НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
			КонецЕсли;
			
			Если Лист1Б.УказыватьСведенияЦепочкиСозданияСтоимости Тогда
				НомерЛиста1Б = НомерЛиста1Б + 1;
				Лист1Б.НомерЛиста1Б = НомерЛиста1Б;
				НомераЛистов1Б.Вставить(Лист1Б.ИдентификаторЛиста1Б, Лист1Б.НомерЛиста1Б);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Лист1А.УказыватьСведенияЦепочкиСозданияСтоимости Тогда
			
			// Номера листов 1В составные, состоят из 4 частей.
			// Для листов 1В первого уровня заполняется только первая часть, для листов 1В второго уровня - 
			// заполняется первая часть из листа-родителя, и заполняется вторая часть. И т.д.
			// Например, у нас есть цепочка листов 1В: ID1 - ID2 - ID3.
			// В этом случае для листа ID1 будет НомерЛиста1В_0 = 1, остальные номера листов - пустые.
			// Для листа ID2 будет НомерЛиста1В_0 = 1, НомерЛиста1В_1 = 1, остальные пустые.
			// Для листа ID3 будет НомерЛиста1В_0 = 1, НомерЛиста1В_1 = 1, НомерЛиста1В_2 = 1, НомерЛиста1В_3 = 0.
			// Нумерация уникальна в пределах листа 1Б. Если листы не связаны с листами 1Б, то для них действует отдельная нумерация,
			// которая уникальна в пределах листа 1А.
			
			ТаблицаЦепочкиЛистов1В = Новый ТаблицаЗначений;
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерЛиста1Б", ТипНомераСтраницы);
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерСтроки", Листы1В.Колонки.НомерСтроки.ТипЗначения);
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("ИдентификаторЛиста1В", Новый ОписаниеТипов("УникальныйИдентификатор"));
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("ИдентификаторПредыдущегоЛиста1В", Новый ОписаниеТипов("УникальныйИдентификатор"));
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерЛиста1В_0", ТипНомераЛиста1ВЧислом);
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерЛиста1В_1", ТипНомераЛиста1ВЧислом);
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерЛиста1В_2", ТипНомераЛиста1ВЧислом);
			ТаблицаЦепочкиЛистов1В.Колонки.Добавить("НомерЛиста1В_3", ТипНомераЛиста1ВЧислом);
			ТаблицаЦепочкиЛистов1В.Индексы.Добавить("НомерЛиста1Б,ИдентификаторПредыдущегоЛиста1В");
			
			СписокЛистов1В = Листы1В.НайтиСтроки(Отбор);
			Лист1А.Количество1В = СписокЛистов1В.Количество();
			
			Для Каждого Лист1В Из СписокЛистов1В Цикл
				
				ДобавитьЛистВУведомление(Листы, "Лист1В", Листы1В.Индекс(Лист1В));
				
				СведенияОКонтрагенте = Раздел4.Найти(Лист1В.Контрагент, "Контрагент");
				Если СведенияОКонтрагенте <> Неопределено Тогда
					Лист1В.НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
				КонецЕсли;
				
				Если Лист1В.ТипЛиста = Перечисления.ТипыСделокВЦепочкеКонтролируемыхСделок.ПоследующаяРеализация Тогда
					Лист1А.КодТипаСделки1 = 1;
				ИначеЕсли Лист1В.ТипЛиста = Перечисления.ТипыСделокВЦепочкеКонтролируемыхСделок.ПредшествующаяПокупка Тогда
					Лист1А.КодТипаСделки2 = 1;
				КонецЕсли;
				
				Если Лист1В.ИдентификаторЛиста1Б <> ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
					
					Лист1В.НомерЛиста1Б = НомераЛистов1Б.Получить(Лист1В.ИдентификаторЛиста1Б);
					
					ТаблицаСвязей1В.Очистить();
					СвязиЛиста1В = Связь1Би1В.НайтиСтроки(Новый Структура("ИдентификаторЛиста1В", Лист1В.ИдентификаторЛиста1В));
					Если СвязиЛиста1В.Количество() > 1 Тогда
						Для Каждого СвязьЛиста1В Из СвязиЛиста1В Цикл
							СтрокаСвязи = ТаблицаСвязей1В.Добавить();
							СтрокаСвязи.НомерЛиста1Б = НомераЛистов1Б.Получить(СвязьЛиста1В.ИдентификаторЛиста1Б);
							СтрокаСвязи.НомерЛиста1БСтрокой = Формат(СтрокаСвязи.НомерЛиста1Б, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
						КонецЦикла;
						ТаблицаСвязей1В.Сортировать("НомерЛиста1Б");
						Связи1В = Новый Массив;
						Для Каждого СтрокаСвязи Из ТаблицаСвязей1В Цикл
							Связи1В.Добавить(СтрокаСвязи.НомерЛиста1БСтрокой);
						КонецЦикла;
						
						Лист1В.СправочноНомераЛистов1Б = СтрСоединить(Связи1В, ";");
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаЦепочкиЛистов1В = ТаблицаЦепочкиЛистов1В.Добавить();
				СтрокаЦепочкиЛистов1В.НомерСтроки = Лист1В.НомерСтроки;
				СтрокаЦепочкиЛистов1В.НомерЛиста1Б = Лист1В.НомерЛиста1Б;
				СтрокаЦепочкиЛистов1В.ИдентификаторЛиста1В = Лист1В.ИдентификаторЛиста1В;
				СтрокаЦепочкиЛистов1В.ИдентификаторПредыдущегоЛиста1В = Лист1В.ИдентификаторПредыдущегоЛиста1В;
				
			КонецЦикла;
			
			ЗаполнитьСвязиЛистов1В(СписокЛистов1В, ТаблицаЦепочкиЛистов1В);
			
			СписокЛистов1Г = Листы1ГСвдоенные.НайтиСтроки(Отбор);
			Для Каждого Лист1Г Из СписокЛистов1Г Цикл
				
				ДобавитьЛистВУведомление(Листы, "Лист1Г", Листы1ГСвдоенные.Индекс(Лист1Г));
				Лист1А.КодТипаСделки3 = 1;
				Лист1Г.НомерЛиста1Б = НомераЛистов1Б.Получить(Лист1Г.ИдентификаторЛиста1Б);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СписокЛистов2 = Листы2.НайтиСтроки(Отбор);
		Для Каждого Лист2 Из СписокЛистов2 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел2", Листы2.Индекс(Лист2));
		КонецЦикла;
		
		СписокЛистов3 = Листы3.НайтиСтроки(Отбор);
		Для Каждого Лист3 Из СписокЛистов3 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел3", Листы3.Индекс(Лист3));
		КонецЦикла;
		
	КонецЦикла;
	
	// Для печати выводятся листы 1Г сдвоенные на одном листе.
	// Но для выгрузки сдвоенность листов не нужна.
	// Поэтому мы заполняем и доп. параметры в Лист1Г.
	Для Каждого Лист1Г Из Листы1Г Цикл
		Лист1Г.НомерЛиста1Б = НомераЛистов1Б.Получить(Лист1Г.ИдентификаторЛиста1Б);
	КонецЦикла;
	
	// Листы раздела 4 выводятся без привязки к сделке (Листу 1А),
	// поэтому добавляем их после все листов разделов 1-3.
	// Из-за этого и нет деления на ЛистыРаздела4 и Листы4, т.к. они идентичны.
	Для Каждого Лист4 Из Раздел4 Цикл
		ДобавитьЛистВУведомление(Листы, "Раздел4", Раздел4.Индекс(Лист4));
	КонецЦикла;
	
	ЛистыУведомления = Новый Структура();
	ЛистыУведомления.Вставить("Листы", Листы);
	ЛистыУведомления.Вставить("ЛистыРаздела1А", Листы1А);
	ЛистыУведомления.Вставить("ЛистыРаздела1Б", Листы1Б);
	ЛистыУведомления.Вставить("ЛистыРаздела1В", Листы1В);
	ЛистыУведомления.Вставить("ЛистыРаздела1Г", Листы1Г);
	ЛистыУведомления.Вставить("ЛистыРаздела1ГСдвоенные", Листы1ГСвдоенные);
	ЛистыУведомления.Вставить("ЛистыРаздела2", Листы2);
	ЛистыУведомления.Вставить("ЛистыРаздела3", Листы3);
	ЛистыУведомления.Вставить("ЛистыРаздела4", Листы4);
	ЛистыУведомления.Вставить("ДанныеРаздела2", Раздел2);
	ЛистыУведомления.Вставить("ДанныеРаздела3", Раздел3);
	ЛистыУведомления.Вставить("ДанныеРаздела4", Раздел4);
	
	Возврат ЛистыУведомления;
	
КонецФункции

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры отчета:
//  * Уведомление   - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление о контролируемых сделках.
//   АдресХранилища - УникальныйИдентификатор, Строка - адрес временного хранилища.
//
Процедура ПолучитьЛистыУведомленияВФоне(ПараметрыОтчета, АдресХранилища) Экспорт 
	
	Уведомление = ПараметрыОтчета.Уведомление;
	Результат = ПолучитьЛистыУведомления(Уведомление);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Заполняет список головный организаций.
// Параметры:
//  СписокОрганизаций - СписокЗначений из СправочникСсылка.Организации - список орагнизаций.
Процедура ЗаполнитьСписокГоловныхОрганизаций(СписокОрганизаций) Экспорт
	
	СписокОрганизаций.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ЛОЖЬ
	|	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения контрагента в регистре.
//
// Параметры:
//  Отказ            - Булево - Истина, если есть ошибки.
//  ТаблицаЗаписей      - ТаблицаЗначений - содержит информацию о контрагентах.
//  ОписаниеКлючаЗаписи - Структура - описание проверяемых реквизитов объекта метаданных.
//
Процедура ПроверитьПравильностьЗаполненияКонтрагентаРегистра(Отказ, ТаблицаЗаписей, ОписаниеКлючаЗаписи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КлючиРегистра", ТаблицаЗаписей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КлючиРегистра
	|ИЗ
	|	&КлючиРегистра КАК КлючиРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистра КАК КлючиРегистра
	|		ПО Контрагенты.Ссылка = КлючиРегистра.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				КлючиРегистра.Контрагент
	|			ИЗ
	|				КлючиРегистра КАК КлючиРегистра)
	|	И Контрагенты.ОбособленноеПодразделение = ИСТИНА";
	
	ПоляКлюча = "";
	Для Каждого ОписаниеКлюча Из ОписаниеКлючаЗаписи Цикл
		ПоляКлюча = ПоляКлюча + ?(ПоляКлюча = "", "", ", ") + ОписаниеКлюча.Ключ + " КАК " + ОписаниеКлюча.Ключ;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КлючиРегистра.Контрагент КАК Контрагент", ПоляКлюча);
	
	Ошибка = Запрос.Выполнить().Выбрать();
	
	Пока Ошибка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Контрагент ""%1"" является обособленным подразделением. Можно выбирать только головного контрагента';
								|en = 'The ""%1"" counterparty is a branch office. You can select only the main counterparty.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ошибка.Наименование);
		
		ЗаполнитьЗначенияСвойств(ОписаниеКлючаЗаписи, Ошибка);
		КлючЗаписи = РегистрыСведений.ВзаимозависимыеЛица.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючЗаписи, "Запись.Контрагент", , Отказ);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПечатьУведомления

// Возвращает табличный документ для печати листа 1А документа КонтролируемаяСделка.
//
// Параметры:
//  МассивСделок - Массив из ДокументСсылка.КонтролируемаяСделка - массив сделок, выводимых на печать.
//  ОбъектыПечати - СписокЗначений - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ, выводимый на печать.
//
Функция ПечатьКонтролируемыхСделок(МассивСделок, ОбъектыПечати) Экспорт
	
	ТабличныйДокументЛисты1А = Новый ТабличныйДокумент;
	ТабличныйДокументЛисты1А.АвтоМасштаб         = Истина;
	ТабличныйДокументЛисты1А.ПолеСверху          = 5;
	ТабличныйДокументЛисты1А.ПолеСнизу           = 5;
	ТабличныйДокументЛисты1А.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокументЛисты1А.КлючПараметровПечати = "Документ.УведомлениеОКонтролируемыхСделках";
	
	Если НЕ ЗначениеЗаполнено(МассивСделок) Тогда
		Возврат ТабличныйДокументЛисты1А;
	КонецЕсли;
	
	Для Каждого КонтролируемаяСделка Из МассивСделок Цикл
		ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабличныйДокументЛисты1А, ОбъектыПечати);
	КонецЦикла;
	
	Возврат ТабличныйДокументЛисты1А;

КонецФункции

// Возвращает согласно номеру заполненный лист уведомления в виде табличного документа.
//
// Параметры:
//  НомерЛиста            - Число - номер листа уведомления.
//  ЛистыУведомления      - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  СведенияОбУведомлении - Структура - параметры сведений уведомления.
// Возвращаемое значение:
//  ТабличныйДокумент     - заполненный согласно номеру лист уведомления.
//
Функция ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении)
	
	Лист = ЛистыУведомления.Листы[НомерЛиста - 1];
	
	ИменаМакетов = СведенияОбУведомлении.ПараметрыВерсии.Макеты;
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет(ИменаМакетов[Лист.Раздел]);
	УстановитьНомерСтраницы(Макет, НомерЛиста, СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница);
	
	Если Лист.Раздел = "ТитульныйЛист" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста1(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста2(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "Лист1А" Тогда
		Лист1А = ЛистыУведомления.ЛистыРаздела1А[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А);
	ИначеЕсли Лист.Раздел = "Лист1Б" Тогда
		Лист1Б = ЛистыУведомления.ЛистыРаздела1Б[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б);
	ИначеЕсли Лист.Раздел = "Лист1В" Тогда
		Лист1В = ЛистыУведомления.ЛистыРаздела1В[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1В(СведенияОбУведомлении, Лист1В);
	ИначеЕсли Лист.Раздел = "Лист1Г" Тогда
		Лист1Г = ЛистыУведомления.ЛистыРаздела1ГСдвоенные[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1Г(СведенияОбУведомлении, Лист1Г);
	ИначеЕсли Лист.Раздел = "Раздел2" Тогда
		Лист2 = ЛистыУведомления.ЛистыРаздела2[Лист.НомерСтрокиРаздела];
		ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
		ДанныеЛиста = ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2);
	ИначеЕсли Лист.Раздел = "Раздел3" Тогда
		Лист3 = ЛистыУведомления.ЛистыРаздела3[Лист.НомерСтрокиРаздела];
		ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
		ДанныеЛиста = ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3);
	ИначеЕсли Лист.Раздел = "Раздел4" Тогда
		ДанныеРаздела4 = ЛистыУведомления.ДанныеРаздела4[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияРаздела4(СведенияОбУведомлении, ДанныеРаздела4);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЛиста) Тогда
		ЗаполнитьЗначенияСвойств(Макет.Параметры, ДанныеЛиста);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

// Формирует данные листов уведомления о контролируемых сделках.
//
// Параметры:
//  ЛистыУведомления      - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  СведенияОбУведомлении - Структура - параметры сведений об уведомлении.
//  ПервыйЛист            - Число - номер первого листа уведомления.
//  ПоследнийЛист         - Число - номер последнего листа уведомления.
//  ТабличныйДокумент     - ТабличныйДокумент - таблицный документ, в который выводится уведомление.
Процедура СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, ТабличныйДокумент) Экспорт
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		ЛистУведомления = ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении);
		
		ТабличныйДокумент.Вывести(ЛистУведомления);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла
	
КонецПроцедуры

// Возвращает табличный документ для печати листа 1А документа КонтролируемаяСделка.
//
// Параметры:
//  КонтролируемаяСделка - ДокументСсылка.КонтролируемаяСделка - сделка, выводимая на печать.
//  ТабДокумент          - ТабличныйДокумент - табличный документ для вывода на печать.
//  ОбъектыПечати        - СписокЗначений - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати.
//
Процедура ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабДокумент, ОбъектыПечати)
	
	Если НЕ ЗначениеЗаполнено(КонтролируемаяСделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Уведомление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтролируемаяСделка, "УведомлениеОКонтролируемойСделке");
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(Уведомление, КонтролируемаяСделка);
	Листы = ЛистыУведомления.Листы;
	
	Если Листы.Количество()>1 
		И Листы[1].Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ПервыйЛист = 3;
	Иначе
		ПервыйЛист = 2;
	КонецЕсли;
	
	СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ЛистыУведомления.Листы.Количество(), ТабДокумент);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, КонтролируемаяСделка);
	
КонецПроцедуры

// Возвращает пакет листов для печати уведомления о контролируемых сделках.
//
// Параметры:
//  ЛистыУведомления             - Структура - структура данных уведомления,
//                                             разделенная по разделам в виде таблиц значений.
//  СведенияОбУведомлении        - Структура - параметры сведений об уведомлении.
//  ПервыйЛист                   - Число - номер первого листа уведомления.
//  ПоследнийЛист                - Число - номер последнего листа уведомления.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы клиентского приложения.
// Возвращаемое значение:
//  ПакетОтображаемыхДокументов - пакет листов для печати уведомления о контролируемых сделках.
Функция ПакетЛистовУведомленияДляПечати(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, УникальныйИдентификаторФормы) Экспорт
	
	ПакетЛистов = Новый ПакетОтображаемыхДокументов;
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		ЛистУведомления = ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ЛистУведомления);
		
		УстановитьПараметрыПечатиУведомления(ТабличныйДокумент);
		
		ПакетЛистов.Состав.Добавить().Данные = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификаторФормы);
		
	КонецЦикла;
	
	Возврат ПакетЛистов
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетов

// Возвращает границы контроля уведомления о контролируемых сделках взависимости от верисии уведомления.
//
// Параметры:
//  ВерсияУведомления    - Число - код версии уведомления о контролируемых сделках.
// Возвращаемое значение:
//  Структура - структура границы контроля уведомления:
//  * КонтролироватьЗависимыхЛицРФПоОбщейСумме              - Булево - Истина, если контролировать
//                                                                     взаимозависимых лиц РФ по общей сумме.
//  * КонтролироватьЗависимыхЛицРФПоУсловиям                - Булево - Истина, если контролировать
//                                                                     взаимозависимых лиц РФ по условиям.
//  * КонтролироватьЗависимыхЛицРФНДПИ                      - Булево - Истина, если контролировать
//                                                                     взаимозависимых лиц РФ в рамках НДПИ.
//  * КонтролироватьЗависимыхЛицРФСпецРежим                 - Булево - Истина, если контролировать взаимозависимых
//                                                                     лиц РФ, находящихся на спецрежимах.
//  * КонтролироватьЗависимыхЛицРФПрибыль                   - Булево - Истина, если контролировать
//                                                                     взаимозависимых лиц РФ по размеру прибыли.
//  * КонтролироватьЗависимыхЛицРФРегистрацияОЭЗ            - Булево - Истина, если контролировать взаимозависимых
//                                                                     лиц РФ по регистрациии в офшорных зонах.
//  * КонтролироватьЗависимыхЛицРФНовоеМорскоеМесторождение - Булево - Истина, если контролировать взаимозависимых
//                                                                     лиц РФ по разработке новых морских месторождений.
//  * КонтролироватьЗависимыхЛицРФРегиональныйИнвестПроект  - Булево - Истина, если контролировать взаимозависимых
//                                                                     лиц РФ по региональных инвестиционным проектам.
//  * КонтролироватьЗависимыхЛицРФОсвобождениеНДС           - Булево - Истина, если контролировать взаимозависимых
//                                                                     лиц РФ по признаку освобождения от уплаты НДС
//                                                                     по статье 145.1 НК РФ.
//  * КонтролироватьЗависимыхЛицРФИнвестиционныйВычет       - Булево - Истина, если контролировать
//                                                                     взаимозависимых лиц РФ по инвистиционному вычету.
Функция ГраницыДляКонтроля(ВерсияУведомления) Экспорт
	
	// Функция возвращает список границ, которые контролируются отдельно и независимо.
	// Например, до 2019 года могли быть включены сделки по НДПИ и Прибыли с одним контрагентом обособленно,
	// и сумма сделок контролировалась отдельно для каждой группы.
	// В 2019 году контролируется общая сумма сделок, которые признаются контролируемыми, считать отдельно
	// суммы по видам сделок не требуется.
	
	ГраницыДляКонтроля = Новый Структура;
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФПоОбщейСумме", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФПоУсловиям", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФНДПИ", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФСпецРежим", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФПрибыль", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФРегистрацияОЭЗ", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФНовоеМорскоеМесторождение", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФРегиональныйИнвестПроект", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФОсвобождениеНДС", Ложь);
	ГраницыДляКонтроля.Вставить("КонтролироватьЗависимыхЛицРФИнвестиционныйВычет", Ложь);
	
	Если ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2019() Тогда
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФПоОбщейСумме = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФНДПИ = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФСпецРежим = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФПрибыль = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФРегистрацияОЭЗ = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФНовоеМорскоеМесторождение = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФРегиональныйИнвестПроект = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФОсвобождениеНДС = Истина;
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФИнвестиционныйВычет = Истина;
	Иначе
		ГраницыДляКонтроля.КонтролироватьЗависимыхЛицРФПоУсловиям = Истина;
	КонецЕсли;
	
	Возврат ГраницыДляКонтроля;
	
КонецФункции

// Возвращает числовые границы признаков контроля сделок взависимости от верисии уведомления и отчетного года.
//
// Параметры:
//  ОтчетныйГод       - Дата - период отчетного года, за который подается уведомление о контролиуемых сделках.
//  ВерсияУведомления - Число - код версии уведомления о контролируемых сделках.
// Возвращаемое значение:
//  Структура - структура границы контроля уведомления:
//  * ГраницаОбщейСуммыСделок                          - Число - значение границы общей суммы сделок.
//  * ГраницаСуммыСделокНДПИ                           - Число - значение границы сделок по НДПИ
//  * ГраницаСуммыСделокСпецРежим                      - Число - значение границы сделок с контрагентами, находящимися
//                                                               на спецрежимах.
//  * ГраницаСуммыСделокПрибыль                        - Число - значение границы сделок по количеству прибыли.
//  * ГраницаСуммыСделокОЭЗ                            - Число - значение границы сделок с контратентами из офшоров.
//  * ГраницаНовоеМорскоеМесторождение                 - Число - значение границы сделок по разработке
//                                                               новых морских месторождений.
//  * ГраницаРегиональныйИнвестиционныйПроект          - Число - значение границы сделок по региональным 
//                                                               инвестиционным проектам.
//  * ГраницаОсвобождениеНДС                           - Число - значение границы сделок с контратентами, которые
//                                                               освобождены от уплаты НДС по статье 145.1 НК РФ.
//  * ГраницаИнвестиционныйВычет                       - Число - значение границы сделок, связанных с размером
//                                                               инвестиционного вычета.
//  * ГраницаСуммыСделокИностранныхНезависимыхЛиц      - Число - значение границы сделок с иностранными
//                                                               независимыми лицами.
//  * ГраницаПрочиеВзаимозависимыеЛица                 - Число - значение границы сделок с 
//                                                               прочими взаимнозависимыми лицами.
//  * МинимальнаяГраницаДляВключенияСделокВУведомление - Число - значение минимальной границы размера сделки для
//                                                               включение в уведомление.
Функция ГраницыКонтролируемостиСделок(ОтчетныйГод, ВерсияУведомления) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ОтчетныйГод", ОтчетныйГод);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛица)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаОбщейСуммыСделок,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаПлательщикиНДПИ)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаСуммыСделокНДПИ,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаНаСпецрежимах)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаСуммыСделокСпецРежим,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаПлательщикиНалогаНаПрибыль)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаСуммыСделокПрибыль,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаОсобаяЭкономическаяЗона)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаСуммыСделокОЭЗ,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаДеятельностьМорскогоМесторождения)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаНовоеМорскоеМесторождение,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаУчастникиРегиональногоИнвестиционногоПроекта)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаРегиональныйИнвестиционныйПроект,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаОсвобождениеНДС)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаОсвобождениеНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаИнвестиционныйВычет)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаИнвестиционныйВычет,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.НезависимыеИностранныеЛица)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ГраницаСуммыСделокИностранныхНезависимыхЛиц,
	|	СУММА(ВЫБОР
	|			КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.МинимальнаяСуммаДляВключенияВУведомление)
	|				ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК МинимальнаяГраницаДляВключенияСделокВУведомление,
	|	СУММА(ВЫБОР
	|		КОГДА ГраницыКонтролируемостиСделокСрезПоследних.ОсобенностьОтнесенияСделкиККонтролируемой = ЗНАЧЕНИЕ(Перечисление.ОсобенностиОтнесенияСделокККонтролируемым.ВзаимозависимыеЛицаПрочие)
	|			ТОГДА ГраницыКонтролируемостиСделокСрезПоследних.ПредельнаяСумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК ГраницаПрочиеВзаимозависимыеЛица
	|ИЗ
	|	РегистрСведений.ГраницыКонтролируемостиСделок.СрезПоследних(КОНЕЦПЕРИОДА(&ОтчетныйГод, ГОД), ) КАК ГраницыКонтролируемостиСделокСрезПоследних";
	
	ГраницыКонтролируемостиСделок = Новый Структура();
	ГраницыКонтролируемостиСделок.Вставить("ГраницаОбщейСуммыСделок", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаСуммыСделокНДПИ", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаСуммыСделокСпецРежим", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаСуммыСделокПрибыль", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаСуммыСделокОЭЗ", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаНовоеМорскоеМесторождение", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаРегиональныйИнвестиционныйПроект", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаОсвобождениеНДС", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаИнвестиционныйВычет", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаСуммыСделокИностранныхНезависимыхЛиц", 0);
	ГраницыКонтролируемостиСделок.Вставить("ГраницаПрочиеВзаимозависимыеЛица", 0);
	ГраницыКонтролируемостиСделок.Вставить("МинимальнаяГраницаДляВключенияСделокВУведомление", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ГраницыКонтролируемостиСделок, Выборка);
		
		Если ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2021() Тогда
			// В этой версии убрали границу по п.7 ст.105.14 НК РФ, и теперь для всех сделок п.1 ст.105.14 НК РФ действует единая граница.
			// Поэтому заменим значения для ГраницаСуммыСделокИностранныхНезависимыхЛиц значением ГраницаПрочиеВзаимозависимыеЛица
			
			ГраницыКонтролируемостиСделок.ГраницаСуммыСделокИностранныхНезависимыхЛиц = 
				ГраницыКонтролируемостиСделок.ГраницаПрочиеВзаимозависимыеЛица;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ГраницыКонтролируемостиСделок;
	
КонецФункции

// Устанавливает в запросе параметры запоса согласно переданной структуре.
// 
// Параметры:
//  Запрос              - Запрос - запрос, в котором необходимо установить параметры.
//  СтруктураПараметров - Структура - описание параметров запроса.
//
Процедура ДобавитьВПараметрыЗапроса(Запрос, СтруктураПараметров) Экспорт
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает временные таблицы запросов для заполнения сделок по уведомлению.
//
// Параметры:
//  Уведомление - ДокументСсылка.УведомлениеОКонтролируемыхСделках - уведомление о контролируемых сделках.
//              - Структура - поля структуры:
//                * Организации - Массив Из СправочникСсылка.Организации - организации, подающая уведомление.
//                                                                         Если список пуст, то выбираются все организации.
//                * ОтчетныйГод - Дата - отчетный год, за который подается уведомление.
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц сделок для уведомления.
//  Неопределено - если для запроса не установлен менеджер временных таблиц.
//
Функция ПолучитьВременныеТаблицыДляЗаполненияСделок(Уведомление) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Если ТипЗнч(Уведомление) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
	
		ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "Организация, ОтчетныйГод");
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ПараметрыУведомления.ОтчетныйГод));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецГода(ПараметрыУведомления.ОтчетныйГод));
		Запрос.УстановитьПараметр("СписокКодовСтранОфшоров", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров(ПараметрыУведомления.ОтчетныйГод));
		Организации = Новый Массив(1);
		Организации[0] = ПараметрыУведомления.Организация;
	ИначеЕсли ТипЗнч(Уведомление) = Тип("Структура") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Уведомление.ОтчетныйГод));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецГода(Уведомление.ОтчетныйГод));
		Запрос.УстановитьПараметр("СписокКодовСтранОфшоров", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров(Уведомление.ОтчетныйГод));
		Организации = Уведомление.Организации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(Запрос.МенеджерВременныхТаблиц, Организации);
	
	Запрос.УстановитьПараметр("СписокОрганизаций", Организации);
	Запрос.УстановитьПараметр("ТаблицаКодовТНВЭДМировойБиржевойТорговли", КонтролируемыеСделки.ТаблицаКодовТНВЭДМировойБиржевойТорговли());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Страны.Ссылка КАК Страна
	|ПОМЕСТИТЬ СтраныСЛьготнымНалогообложением
	|ИЗ
	|	Справочник.СтраныМира КАК Страны
	|ГДЕ
	|	Страны.Код В(&СписокКодовСтранОфшоров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Страна
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТНВЭДМировойБиржевойТорговли.СсылкаТНВЭД КАК СсылкаТНВЭД,
	|	КодыТНВЭДМировойБиржевойТорговли.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КодыТНВЭДМировойБиржевойТорговли.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ КодТВНЭДМировойБиржевойТорговли
	|ИЗ
	|	&ТаблицаКодовТНВЭДМировойБиржевойТорговли КАК КодыТНВЭДМировойБиржевойТорговли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК ПредметСделки,
	|	КодТВНЭДМировойБиржевойТорговли.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	КодТВНЭДМировойБиржевойТорговли.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ ТоварыМировойБиржевойТорговли
	|ИЗ
	|	КодТВНЭДМировойБиржевойТорговли КАК КодТВНЭДМировойБиржевойТорговли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КодТВНЭДМировойБиржевойТорговли.СсылкаТНВЭД = Номенклатура.КодТНВЭД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСделки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&НачалоПериода,
	|	ВзаимозависимыеЛицаСрезПоследних.Организация,
	|	ВзаимозависимыеЛицаСрезПоследних.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВзаимозависимыеЛицаСрезПоследних.Контрагент КАК Контрагент,
	|	ВзаимозависимыеЛицаСрезПоследних.ТипВзаимозависимости
	|ПОМЕСТИТЬ ВзаимозависимыеЛицаГоловныеКонтрагенты
	|ИЗ
	|	РегистрСведений.ВзаимозависимыеЛица.СрезПоследних(&НачалоПериода, Организация В (&СписокОрганизаций)) КАК ВзаимозависимыеЛицаСрезПоследних
	|ГДЕ
	|	ВзаимозависимыеЛицаСрезПоследних.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаимозависимыеЛица.Период,
	|	ВзаимозависимыеЛица.Организация,
	|	ВзаимозависимыеЛица.Организация.ГоловнаяОрганизация,
	|	ВзаимозависимыеЛица.Контрагент,
	|	ВзаимозависимыеЛица.ТипВзаимозависимости
	|ИЗ
	|	РегистрСведений.ВзаимозависимыеЛица КАК ВзаимозависимыеЛица
	|ГДЕ
	|	ВзаимозависимыеЛица.Период > &НачалоПериода
	|	И ВзаимозависимыеЛица.Период <= &ОкончаниеПериода
	|	И ВзаимозависимыеЛица.Организация В(&СписокОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.НачалоПериода КАК НачалоПериода,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Организация КАК Организация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент КАК ГоловнойКонтрагент,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ТипВзаимозависимости,
	|	Контрагенты.Ссылка КАК Контрагент
	|ПОМЕСТИТЬ ВзаимозависимыеЛица
	|ИЗ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты КАК ВзаимозависимыеЛицаГоловныеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент = Контрагенты.ГоловнойКонтрагент
	|			И (Контрагенты.ОбособленноеПодразделение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.НачалоПериода,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Организация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ГоловнаяОрганизация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ТипВзаимозависимости,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент
	|ИЗ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты КАК ВзаимозависимыеЛицаГоловныеКонтрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.НачалоПериода,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Организация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ГоловнаяОрганизация,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент,
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты.ТипВзаимозависимости,
	|	Организации.Ссылка
	|ИЗ
	|	ВзаимозависимыеЛицаГоловныеКонтрагенты КАК ВзаимозависимыеЛицаГоловныеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВзаимозависимыеЛицаГоловныеКонтрагенты.Контрагент = Организации.ГоловнаяОрганизация
	|			И (Организации.ОбособленноеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимозависимыеЛица.Организация КАК Организация,
	|	ВзаимозависимыеЛица.ГоловнойКонтрагент,
	|	ВзаимозависимыеЛица.НачалоПериода,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(ЕСТЬNULL(БудущиеВзаимозависимыеЛица.НачалоПериода, &ОкончаниеПериода)), СЕКУНДА, -1), ДЕНЬ) КАК ОкончаниеПериода,
	|	ВзаимозависимыеЛица.ТипВзаимозависимости,
	|	ВЫБОР
	|		КОГДА ВзаимозависимыеЛица.ТипВзаимозависимости = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимыйПосредник)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НевзаимозависимыйПосредник,
	|	ВЫБОР
	|		КОГДА ВзаимозависимыеЛица.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВзаимозависимыеЛица,
	|	ВзаимозависимыеЛица.Контрагент
	|ПОМЕСТИТЬ ВзаимозависимыеЛицаПоПериодам
	|ИЗ
	|	ВзаимозависимыеЛица КАК ВзаимозависимыеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВзаимозависимыеЛица КАК БудущиеВзаимозависимыеЛица
	|		ПО ВзаимозависимыеЛица.Организация = БудущиеВзаимозависимыеЛица.Организация
	|			И ВзаимозависимыеЛица.НачалоПериода < БудущиеВзаимозависимыеЛица.НачалоПериода
	|			И ВзаимозависимыеЛица.Контрагент = БудущиеВзаимозависимыеЛица.Контрагент
	|ГДЕ
	|	ВзаимозависимыеЛица.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаимозависимыеЛица.Организация,
	|	ВзаимозависимыеЛица.ГоловнойКонтрагент,
	|	ВзаимозависимыеЛица.НачалоПериода,
	|	ВзаимозависимыеЛица.ТипВзаимозависимости,
	|	ВзаимозависимыеЛица.Контрагент,
	|	ВЫБОР
	|		КОГДА ВзаимозависимыеЛица.ТипВзаимозависимости = ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимыйПосредник)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВзаимозависимыеЛица.ТипВзаимозависимости <> ЗНАЧЕНИЕ(Перечисление.ТипыВзаимозависимости.НеВзаимозависимы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НачалоПериода,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ЯвляетсяПлательщикомНДПИ,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ЯвляетсяПлательщикомЕСХН,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ЯвляетсяПлательщикомЕНВД,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ЗарегистрированВОЭЗ,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ОсвобожденОтУплатыНДС,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.КодВидаДеятельностиФизическогоЛица,
	|	ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних.ФизическоеЛицо
	|ПОМЕСТИТЬ ДанныеПоГоловнымКонтрагентам
	|ИЗ
	|	РегистрСведений.ДанныеПоКонтрагентамКонтролируемыхСделок.СрезПоследних(, ) КАК ДанныеПоКонтрагентамКонтролируемыхСделокСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.Период,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.Контрагент,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ЯвляетсяПлательщикомНДПИ,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ЯвляетсяПлательщикомЕСХН,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ЯвляетсяПлательщикомЕНВД,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ЗарегистрированВОЭЗ,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ОсвобожденОтУплатыНДС,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.КодВидаДеятельностиФизическогоЛица,
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ДанныеПоКонтрагентамКонтролируемыхСделок КАК ДанныеПоКонтрагентамКонтролируемыхСделок
	|ГДЕ
	|	ДанныеПоКонтрагентамКонтролируемыхСделок.Период > &НачалоПериода
	|	И ДанныеПоКонтрагентамКонтролируемыхСделок.Период <= &ОкончаниеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоГоловнымКонтрагентам.НачалоПериода КАК НачалоПериода,
	|	ДанныеПоГоловнымКонтрагентам.Контрагент КАК ГоловнойКонтрагент,
	|	ЕСТЬNULL(Контрагенты.Ссылка, ДанныеПоГоловнымКонтрагентам.Контрагент) КАК Контрагент,
	|	ДанныеПоГоловнымКонтрагентам.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ДанныеПоГоловнымКонтрагентам.ЯвляетсяПлательщикомНДПИ,
	|	ДанныеПоГоловнымКонтрагентам.ЯвляетсяПлательщикомЕСХН,
	|	ДанныеПоГоловнымКонтрагентам.ЯвляетсяПлательщикомЕНВД,
	|	ДанныеПоГоловнымКонтрагентам.ЗарегистрированВОЭЗ,
	|	ДанныеПоГоловнымКонтрагентам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ДанныеПоГоловнымКонтрагентам.ОсвобожденОтУплатыНДС,
	|	ДанныеПоГоловнымКонтрагентам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	ДанныеПоГоловнымКонтрагентам.КодВидаДеятельностиФизическогоЛица,
	|	ДанныеПоГоловнымКонтрагентам.ФизическоеЛицо
	|ПОМЕСТИТЬ ДанныеПоКонтрагентам
	|ИЗ
	|	ДанныеПоГоловнымКонтрагентам КАК ДанныеПоГоловнымКонтрагентам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДанныеПоГоловнымКонтрагентам.Контрагент = Контрагенты.ГоловнойКонтрагент
	|			И (Контрагенты.ОбособленноеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоКонтрагентам.Контрагент КАК Контрагент,
	|	ДанныеПоКонтрагентам.ГоловнойКонтрагент,
	|	ДанныеПоКонтрагентам.НачалоПериода,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(ЕСТЬNULL(БудущиеДанныеПоКонтрагентам.НачалоПериода, &ОкончаниеПериода)), СЕКУНДА, -1), ДЕНЬ) КАК ОкончаниеПериода,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомНДПИ,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомЕСХН,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомЕНВД,
	|	ДанныеПоКонтрагентам.ЗарегистрированВОЭЗ,
	|	ДанныеПоКонтрагентам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ДанныеПоКонтрагентам.ОсвобожденОтУплатыНДС,
	|	ДанныеПоКонтрагентам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	ДанныеПоКонтрагентам.КодВидаДеятельностиФизическогоЛица,
	|	ДанныеПоКонтрагентам.ФизическоеЛицо
	|ПОМЕСТИТЬ ДанныеПоКонтрагентамПоПериодам
	|ИЗ
	|	ДанныеПоКонтрагентам КАК ДанныеПоКонтрагентам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоКонтрагентам КАК БудущиеДанныеПоКонтрагентам
	|		ПО ДанныеПоКонтрагентам.Контрагент = БудущиеДанныеПоКонтрагентам.Контрагент
	|			И ДанныеПоКонтрагентам.НачалоПериода < БудущиеДанныеПоКонтрагентам.НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоКонтрагентам.Контрагент,
	|	ДанныеПоКонтрагентам.ГоловнойКонтрагент,
	|	ДанныеПоКонтрагентам.НачалоПериода,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомНДПИ,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомЕСХН,
	|	ДанныеПоКонтрагентам.ЯвляетсяПлательщикомЕНВД,
	|	ДанныеПоКонтрагентам.ЗарегистрированВОЭЗ,
	|	ДанныеПоКонтрагентам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ДанныеПоКонтрагентам.ОсвобожденОтУплатыНДС,
	|	ДанныеПоКонтрагентам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	ДанныеПоКонтрагентам.КодВидаДеятельностиФизическогоЛица,
	|	ДанныеПоКонтрагентам.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&НачалоПериода КАК НачалоПериода,
	|	ВзаимозависимыеЛица.Организация КАК Организация,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ЯвляетсяПлательщикомНДПИ КАК ЯвляетсяПлательщикомНДПИ,
	|	ВзаимозависимыеЛица.Организация.ЗарегистрированВОЭЗ КАК ЗарегистрированВОЭЗ,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяЕНВД КАК ЯвляетсяПлательщикомЕНВД,
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикНалогаНаПрибыль КАК ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ЛОЖЬ КАК ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	НастройкиУчетаНДССрезПоследних.ПрименяетсяОсвобождениеОтУплатыНДС КАК ОсвобожденОтУплатыНДС
	|ПОМЕСТИТЬ СведенияОбОрганизацииДляКонтролируемыхСделок
	|ИЗ
	|	ВзаимозависимыеЛица КАК ВзаимозависимыеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&НачалоПериода) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|		ПО ВзаимозависимыеЛица.ГоловнаяОрганизация = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|		ИЛИ ВзаимозависимыеЛица.Контрагент = НастройкиСистемыНалогообложенияСрезПоследних.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&НачалоПериода) КАК НастройкиУчетаНДССрезПоследних
	|		ПО ВзаимозависимыеЛица.ГоловнаяОрганизация = НастройкиУчетаНДССрезПоследних.Организация
	|		ИЛИ ВзаимозависимыеЛица.Контрагент = НастройкиУчетаНДССрезПоследних.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.Период,
	|	ВзаимозависимыеЛица.Организация,
	|	НастройкиСистемыНалогообложения.ЯвляетсяПлательщикомНДПИ,
	|	ВзаимозависимыеЛица.Организация.ЗарегистрированВОЭЗ КАК ЗарегистрированВОЭЗ,
	|	НастройкиСистемыНалогообложения.ПрименяетсяЕНВД,
	|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль,
	|	ЛОЖЬ КАК ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	НастройкиУчетаНДС.ПрименяетсяОсвобождениеОтУплатыНДС
	|ИЗ
	|	ВзаимозависимыеЛица КАК ВзаимозависимыеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|		ПО ВзаимозависимыеЛица.ГоловнаяОрганизация = НастройкиСистемыНалогообложения.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС КАК НастройкиУчетаНДС
	|		ПО ВзаимозависимыеЛица.ГоловнаяОрганизация = НастройкиУчетаНДС.Организация
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Период > &НачалоПериода
	|	И НастройкиСистемыНалогообложения.Период <= &ОкончаниеПериода
	|	И НастройкиУчетаНДС.Период > &НачалоПериода
	|	И НастройкиУчетаНДС.Период <= &ОкончаниеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.НачалоПериода,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(МИНИМУМ(ЕСТЬNULL(БудущиеСведенияОбОрганизацииДляКонтролируемыхСделок.НачалоПериода, &ОкончаниеПериода)), СЕКУНДА, -1), ДЕНЬ) КАК ОкончаниеПериода,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомНДПИ,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЗарегистрированВОЭЗ,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомЕНВД,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	ЛОЖЬ КАК ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	ЛОЖЬ КАК ЯвляетсяПлательщикомЕСХН,
	|	ЛОЖЬ КАК ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ОсвобожденОтУплатыНДС КАК ОсвобожденОтУплатыНДС
	|ПОМЕСТИТЬ СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам
	|ИЗ
	|	СведенияОбОрганизацииДляКонтролируемыхСделок КАК СведенияОбОрганизацииДляКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияОбОрганизацииДляКонтролируемыхСделок КАК БудущиеСведенияОбОрганизацииДляКонтролируемыхСделок
	|		ПО СведенияОбОрганизацииДляКонтролируемыхСделок.Организация = БудущиеСведенияОбОрганизацииДляКонтролируемыхСделок.Организация
	|			И СведенияОбОрганизацииДляКонтролируемыхСделок.НачалоПериода < БудущиеСведенияОбОрганизацииДляКонтролируемыхСделок.НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.НачалоПериода,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.Организация,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомНДПИ,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЗарегистрированВОЭЗ,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомЕНВД,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	СведенияОбОрганизацииДляКонтролируемыхСделок.ОсвобожденОтУплатыНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияДляКонтролируемыхСделокПоПериодам.Контрагент КАК Контрагент,
	|	СведенияДляКонтролируемыхСделокПоПериодам.НачалоПериода,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ОкончаниеПериода,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНДПИ,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомЕСХН,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомЕНВД,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЗарегистрированВОЭЗ,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ОсвобожденОтУплатыНДС,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль
	|ПОМЕСТИТЬ ДанныеПоУчастникамКонтролируемыхСделокПоПериодам
	|ИЗ
	|	ДанныеПоКонтрагентамПоПериодам КАК СведенияДляКонтролируемыхСделокПоПериодам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияДляКонтролируемыхСделокПоПериодам.Организация,
	|	СведенияДляКонтролируемыхСделокПоПериодам.НачалоПериода,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ОкончаниеПериода,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНалогаНаПрибыль,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомНДПИ,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомЕСХН,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЯвляетсяПлательщикомЕНВД,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ЗарегистрированВОЭЗ,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ПрименяетЛьготыУчастникаРегиональногоИнвестиционногоПроекта,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ОсвобожденОтУплатыНДС,
	|	СведенияДляКонтролируемыхСделокПоПериодам.ПрименяетИнвестиционныйВычетПоНалогуНаПрибыль
	|ИЗ
	|	СведенияОбОрганизацииДляКонтролируемыхСделокПоПериодам КАК СведенияДляКонтролируемыхСделокПоПериодам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(ГоловныеКонтрагенты.Ссылка, Контрагенты.Ссылка) КАК ГоловнойКонтрагент,
	|	ВЫБОР
	|		КОГДА СтраныСЛьготнымНалогообложением.Страна ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗарегистрированВСтранеСЛьготнымНалогообложением,
	|	ИСТИНА КАК СделкаВОбластиВнешнейТорговли
	|ПОМЕСТИТЬ ИностранныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ГоловныеКонтрагенты
	|		ПО Контрагенты.ГоловнойКонтрагент = ГоловныеКонтрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтраныСЛьготнымНалогообложением КАК СтраныСЛьготнымНалогообложением
	|		ПО (СтраныСЛьготнымНалогообложением.Страна = Контрагенты.СтранаРегистрации)
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка,
	|	ГоловныеКонтрагенты.Ссылка,
	|	ВЫБОР
	|		КОГДА СтраныСЛьготнымНалогообложением.Страна ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ГоловныеКонтрагенты
	|		ПО (ГоловныеКонтрагенты.Ссылка = Контрагенты.ГоловнойКонтрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтраныСЛьготнымНалогообложением КАК СтраныСЛьготнымНалогообложением
	|		ПО (СтраныСЛьготнымНалогообложением.Страна = ГоловныеКонтрагенты.СтранаРегистрации)
	|ГДЕ
	|	Контрагенты.ГоловнойКонтрагент <> Контрагенты.Ссылка
	|	И ГоловныеКонтрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(ГоловныеОрганизации.Ссылка, Организации.Ссылка) КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА СтраныСЛьготнымНалогообложением.Страна ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗарегистрированаВСтранеСЛьготнымНалогообложением,
	|	ИСТИНА КАК СделкаВОбластиВнешнейТорговли
	|ПОМЕСТИТЬ ИностранныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтраныСЛьготнымНалогообложением КАК СтраныСЛьготнымНалогообложением
	|		ПО Организации.СтранаРегистрации = СтраныСЛьготнымНалогообложением.Страна
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО Организации.ГоловнаяОрганизация = ГоловныеОрганизации.Ссылка
	|ГДЕ
	|	Организации.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Организации.ОтделениеИностраннойОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	ГоловныеОрганизации.Ссылка,
	|	ВЫБОР
	|		КОГДА СтраныСЛьготнымНалогообложением.Страна ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО (ГоловныеОрганизации.Ссылка = Организации.ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтраныСЛьготнымНалогообложением КАК СтраныСЛьготнымНалогообложением
	|		ПО (СтраныСЛьготнымНалогообложением.Страна = ГоловныеОрганизации.СтранаРегистрации)
	|ГДЕ
	|	Организации.ГоловнаяОрганизация <> Организации.Ссылка
	|	И ГоловныеОрганизации.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Организации.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВзаимозависимыеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВзаимозависимыеЛицаПоПериодам.Контрагент КАК Контрагент,
	|	ВзаимозависимыеЛицаПоПериодам.ГоловнойКонтрагент КАК ГоловнойКонтрагент
	|ПОМЕСТИТЬ КонтролируемыеКонтрагенты
	|ИЗ
	|	ВзаимозависимыеЛицаПоПериодам КАК ВзаимозависимыеЛицаПоПериодам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИностранныеКонтрагенты.Контрагент,
	|	ИностранныеКонтрагенты.ГоловнойКонтрагент
	|ИЗ
	|	ИностранныеКонтрагенты КАК ИностранныеКонтрагенты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИностранныеОрганизации.Организация,
	|	ИностранныеОрганизации.ГоловнаяОрганизация
	|ИЗ
	|	ИностранныеОрганизации КАК ИностранныеОрганизации";
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область ДанныеЗаполнения

// Заполняет данными листа 1 для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
Функция ДанныеЗаполненияЛиста1(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "СтраницВсего_", СведенияОбУведомлении.ВсегоЛистов,
		СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница, 0);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерКорректировки_", СведенияОбУведомлении.НомерКорректировки, 3, 0);
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Налогоплательщик_", ОсновныеСведенияВыгрузки.НаименованиеДляЛиста1, 160, 40);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОтчетныйГод_", ОсновныеСведенияВыгрузки.ОтчетГод);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерКонтактногоТелефона_", ОсновныеСведенияВыгрузки.Тлф);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ЭлектроннаяПочта_", ОсновныеСведенияВыгрузки.ЭлПочта);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодНО_", ОсновныеСведенияВыгрузки.КодНО);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодМестаПредставления_", ОсновныеСведенияВыгрузки.ПоМесту);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКВЭД") Тогда
		ОКВЭД = РазложитьОКВЭДВСтроку(ОсновныеСведенияВыгрузки.ОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОКВЭД_", ОКВЭД);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКАТО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКАТО_", ОсновныеСведенияВыгрузки.ОКАТО);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКТМО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКТМО_", ОсновныеСведенияВыгрузки.ОКТМО);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ПрПодп_", ОсновныеСведенияВыгрузки.ПрПодп);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпФамилия") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантФамилия_", ОсновныеСведенияВыгрузки.ПодпФамилия);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпИмя") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантИмя_", ОсновныеСведенияВыгрузки.ПодпИмя);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпОтчество") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантОтчество_", ОсновныеСведенияВыгрузки.ПодпОтчество);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимДокПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ДокУпПред_", ОсновныеСведенияВыгрузки.НаимДокПодп);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргУп_", ОсновныеСведенияВыгрузки.НаимОргПодп);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ФормРеорг") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ФормРеорг_", ОсновныеСведенияВыгрузки.ФормРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННЮЛРеорг_", ОсновныеСведенияВыгрузки.ИННЮЛРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КППЮЛРеорг_", ОсновныеСведенияВыгрузки.КППЮЛРеорг);
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаПодписи", ТекущаяДатаСеанса());
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Заполняет данными листа 2 для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
Функция ДанныеЗаполненияЛиста2(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДатаОкончания = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОбУведомлении.Организация, "ИндивидуальныйПредприниматель");
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ОсновныеСведенияВыгрузки.НПФЛДатаРожд);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_", ОсновныеСведенияВыгрузки.НПФЛМестоРожд);
	ДанныеЗаполнения.Вставить("Гражданство", ОсновныеСведенияВыгрузки.НПФЛНалГражд);
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛОКСМ") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", ОсновныеСведенияВыгрузки.НПФЛОКСМ);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛКодВидДок") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", ОсновныеСведенияВыгрузки.НПФЛКодВидДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_", ОсновныеСведенияВыгрузки.НПФЛСерНомДок);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", ОсновныеСведенияВыгрузки.НПФЛДатаДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", ОсновныеСведенияВыгрузки.НПФЛВыдДок);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СтатусНалогоплательщика", ОсновныеСведенияВыгрузки.НПФЛСтатусНП);
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018()
		И ОсновныеСведенияВыгрузки.Свойство("НПФЛПрАдр") Тогда
		ДанныеЗаполнения.Вставить("МестоЖительства", ОсновныеСведенияВыгрузки.НПФЛПрАдр);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", ОсновныеСведенияВыгрузки.НПФЛИндекс);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", ОсновныеСведенияВыгрузки.НПФЛКодРегион);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", ОсновныеСведенияВыгрузки.НПФЛРайон);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", ОсновныеСведенияВыгрузки.НПФЛГород);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", ОсновныеСведенияВыгрузки.НПФЛНаселПункт);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", ОсновныеСведенияВыгрузки.НПФЛУлица);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", ОсновныеСведенияВыгрузки.НПФЛДом);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКорпус", ОсновныеСведенияВыгрузки.Корпус_);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКварт", ОсновныеСведенияВыгрузки.Квартира_);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("АдрИнКодСтраны") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", ОсновныеСведенияВыгрузки.АдрИнКодСтраны);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", ОсновныеСведенияВыгрузки.АдрИнТекст);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру сведений листа 1В для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
//  Лист1А                - СтрокаТаблицыЗначений - лист 1А.
// Возвращаемое значение:
//   Структура - структура сведений листа 1А для документа Контролируемаясделка.
Функция ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1А.Сделка);
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1А.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СделкаОтИмениКомиссионера", Лист1А.СделкаСовАгент);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П100", Лист1А.Строка100Взаимозависимость);
	ДанныеЗаполнения.Вставить("П121", Лист1А.Строка121СтороныВзаимозависимыПоКодексу);
	ДанныеЗаполнения.Вставить("П122", Лист1А.Строка122СделкаВОбластиВнешнейТорговли);
	ДанныеЗаполнения.Вставить("П123", Лист1А.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	ДанныеЗаполнения.Вставить("П124", Лист1А.Строка124СделкаСНезависимымПосредником);
	
	ДанныеЗаполнения.Вставить("П131", Лист1А.ОснованиеКонтролируемости131);
	ДанныеЗаполнения.Вставить("П132", Лист1А.ОснованиеКонтролируемости132);
	ДанныеЗаполнения.Вставить("П133", Лист1А.ОснованиеКонтролируемости133);
	ДанныеЗаполнения.Вставить("П134", Лист1А.ОснованиеКонтролируемости134);
	ДанныеЗаполнения.Вставить("П135", Лист1А.ОснованиеКонтролируемости135);
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("П136", Лист1А.ОснованиеКонтролируемости136);
		ДанныеЗаполнения.Вставить("П137", Лист1А.ОснованиеКонтролируемости137);
		ДанныеЗаполнения.Вставить("П138", Лист1А.ОснованиеКонтролируемости138);
		ДанныеЗаполнения.Вставить("П139", Лист1А.ОснованиеКонтролируемости139);
		ДанныеЗаполнения.Вставить("П140", Лист1А.ОснованиеКонтролируемости140);
	ИначеЕсли СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2019() Тогда
		ДанныеЗаполнения.Вставить("П136", Лист1А.ОснованиеКонтролируемости136);
		ДанныеЗаполнения.Вставить("П137", Лист1А.ОснованиеКонтролируемости137);
		ДанныеЗаполнения.Вставить("П138", Лист1А.ОснованиеКонтролируемости138);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П200", "0");
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П210_", Лист1А.Строка210КодНаименованияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П211_", Лист1А.Строка211КодСтороныСделки);
	
	ДанныеЗаполнения.Вставить("КодТипаСделки1", Строка(Лист1А.КодТипаСделки1));
	ДанныеЗаполнения.Вставить("КодТипаСделки2", Строка(Лист1А.КодТипаСделки2));
	ДанныеЗаполнения.Вставить("КодТипаСделки3", Строка(Лист1А.КодТипаСделки3));
	
	ДанныеЗаполнения.Вставить("П220", Лист1А.Строка220ПризнакОпределенияЦеныСделки);
	ДанныеЗаполнения.Вставить("П2201", Лист1А.Строка220_1Комментарий);
	ДанныеЗаполнения.Вставить("П230", Лист1А.Строка230КодОпределенияЦены);
	ДанныеЗаполнения.Вставить("П2301", Лист1А.Строка230_1Комментарий);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П240_", Лист1А.Строка240КодМетодовЦенообразования);
	ДанныеЗаполнения.Вставить("П2401", Лист1А.Строка240_1Комментарий);
	
	ДанныеЗаполнения.Вставить("П251", Лист1А.Строка251);
	ДанныеЗаполнения.Вставить("П252", Лист1А.Строка252);
	ДанныеЗаполнения.Вставить("П253", Лист1А.Строка253);
	ДанныеЗаполнения.Вставить("П254", Лист1А.Строка254);
	ДанныеЗаполнения.Вставить("П255", Лист1А.Строка255);
	ДанныеЗаполнения.Вставить("П256", Лист1А.Строка256);
	ДанныеЗаполнения.Вставить("П257", Лист1А.Строка257);
	ДанныеЗаполнения.Вставить("П258", Лист1А.Строка258);
	ДанныеЗаполнения.Вставить("П259", Лист1А.Строка259);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П260_", Лист1А.Строка260КоличествоУчастниковСделки, 3, 0);
	ДанныеЗаполнения.Вставить("П2601", Лист1А.Строка260_1Комментарий);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П300_", Лист1А.Строка300СуммаДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П301_", Лист1А.Строка301СуммаРегулируемыхДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П310_", Лист1А.Строка310СуммаРасходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П311_", Лист1А.Строка311СуммаРегулируемыхРасходов, 15, 0);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру сведений листа 1Б для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
//  Лист1Б                - СтрокаТаблицыЗначений - лист 1Б.
// Возвращаемое значение:
//   Структура - структура сведений листа 1Б для документа Контролируемаясделка.
Функция ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1Б.Сделка);
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1Б.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	Если ЗначениеЗаполнено(Лист1Б.НомерЛиста1Б) Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1Б_", Лист1Б.НомерЛиста1Б, ДлинаНомераЛистовРаздела1, 0);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П020", Лист1Б.Строка020ТипПредмета);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2024()
		И ЗначениеЗаполнено(Лист1Б.УникальныйНомерВалютногоКонтроля) Тогда
		НормализованныйУникальныйНомерВалютногоКонтроля = СтрЗаменить(Лист1Б.УникальныйНомерВалютногоКонтроля, "/", "");
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "УникальныйНомерДоговора_", НормализованныйУникальныйНомерВалютногоКонтроля);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П030_", Лист1Б.Строка030НаименованиеПредмета);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_", Лист1Б.Строка040КодПоТНВЭД);
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", Лист1Б.Строка043КодПоОКП);
	ИначеЕсли СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2017() Тогда
		КодОКПД2 = КодПоОКПИзКодаПоОКПД2(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	Иначе
		КодОКПД2 = РазложитьОКПД2ВСтроку(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	КонецЕсли;
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	Иначе
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П050_", Лист1Б.Строка050НомерУчастникаСделки, 4, 0);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П060_", Лист1Б.Строка060НомерДоговора);
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "П065_", Лист1Б.Строка065ДатаДоговора);
	
	КодСтраныПроисхождения = "";
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2024()
		Или (Лист1Б.ВнешнеторговаяСделка
				И Лист1Б.ТипСделки = Перечисления.ТипыКонтролируемыхСделок.ОсуществленРасход
				И Лист1Б.Строка020ТипПредмета <> 2) Тогда
		КодСтраныПроисхождения = Лист1Б.Строка070КодСтраныПроисхождения;
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П070_", КодСтраныПроисхождения);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_С_", Лист1Б.Строка080КодСтраныОтправки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Р_", Лист1Б.Строка080КодРегионаОтправки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Г_", Лист1Б.Строка080ГородОтправки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Н_", Лист1Б.Строка080НаселенныйПунктОтправки);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_С_", Лист1Б.Строка090КодСтраныСовершенияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Р_", Лист1Б.Строка090КодРегионаСовершенияСделки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Г_", Лист1Б.Строка090ГородСовершенияСделки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Н_", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2024() Тогда
		КодПунктаПоставкиОКТМО = "";
		Если Лист1Б.Строка020ТипПредмета = 1 И КодСтраныПроисхождения = "643" Тогда
			КодПунктаПоставкиОКТМО = Лист1Б.ОКТМОСовершенияСделки;
		КонецЕсли;
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПунктаПоставкиОКТМО_", КодПунктаПоставкиОКТМО);
		Если Не ЗначениеЗаполнено(КодПунктаПоставкиОКТМО) Тогда
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоСовершенияСделки_", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П100_", Лист1Б.Строка100КодУсловийПоставки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П110_", Лист1Б.Строка110КодЕдиницыИзмерения);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140Стоимость, 15, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 9, 5);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140КодВалюты);
		Если Лист1Б.ТипПредметаСделки = Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство Тогда
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П150_", Лист1Б.Строка150ПроцентнаяСтавка, 3, 4);
		Иначе
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "СуммаРоялти_", Лист1Б.СуммаБазыДляРасчетаРоялти, 15, 0);
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 14, 4);
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П160_", Лист1Б.Строка160Стоимость, 15, 0);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаСовершенияСделки_", Лист1Б.Строка150ДатаСовершения);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру сведений листа 1В для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
//  Лист1В                - СтрокаТаблицыЗначений - лист 1В.
// Возвращаемое значение:
//   Структура - структура сведений листа 1В для документа Контролируемаясделка.
Функция ДанныеЗаполненияЛиста1В(СведенияОбУведомлении, Лист1В)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1В.Сделка);
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1В.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1Б_", Лист1В.НомерЛиста1Б, ДлинаНомераЛистовРаздела1, 0);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СправочнноКНомеруЛиста1Б_", Лист1В.СправочноНомераЛистов1Б);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КомментарийКНомеруЛиста1Б_", Лист1В.КомментарийКЛисту1Б);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1В_", Лист1В.НомерЛиста1В_0);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1В_2_", Лист1В.НомерЛиста1В_1);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1В_3_", Лист1В.НомерЛиста1В_2);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1В_4_", Лист1В.НомерЛиста1В_3);
	
	ДанныеЗаполнения.Вставить("ВзаимозависимостьУчастников", Лист1В.УчастникиВзаимозависимы);
	
	ДанныеЗаполнения.Вставить("КодТипаСделки", Лист1В.КодТипаСделки);
	
	ДанныеЗаполнения.Вставить("КодПроисхожденияТовара",
		Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.КодДляВыгрузки(Лист1В.ИспользованиеПроисхождениеТовара));
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеПроисхожденияТовара_", Лист1В.НаименованиеИспользованияПроисхожденияТовара);
	
	Если Перечисления.ТипыИспользованияПроисхожденияТовараКонтролируемыхСделок.НужноВыгружатьСведенияОСделке(Лист1В.ИспользованиеПроисхождениеТовара) Тогда
		
		КодПризнакаУчастника = Перечисления.ТипыУчастниковЦепочкиКонтролируемыхСделок.КодДляВыгрузки(Лист1В.ПризнакУчастникаСделки);
		
		ДанныеЗаполнения.Вставить("ПризнакУчастникаСделки", КодПризнакаУчастника);
		
		Если КодПризнакаУчастника <> "3" Тогда
			
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерДругогоУчастникаСделки_", Лист1В.НомерУчастникаСделки, 4, 0);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерДоговора_", Лист1В.НомерДоговора);
			ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаДоговора_", Лист1В.ДатаДоговора);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодУсловийПоставки_", Лист1В.КодУсловийПоставки);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПунктаПоставкиОКТМО_", Лист1В.ОКТМОСовершенияСделки);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраны_", Лист1В.КодСтраныСовершенияСделки);
			
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "Цена_", Лист1В.Цена, 14, 4);
			
		КонецЕсли;
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодЕдиницыИзмерения_", Лист1В.КодЕдиницыИзмерения);
		
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "Количество_", Лист1В.Количество, 9, 5);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВалюты_", Лист1В.КодВалюты);
		
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "Стоимость_", Лист1В.Стоимость, 13, 0);
		
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаСовершенияСделки_", Лист1В.ДатаСовершенияСделки);
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру сведений листа 1Г для документа Контролируемаясделка.
//
// Параметры:
//  СведенияОбУведомлении - Структура - см. тип возвращаемого значения модуля менеджера документа 
//                                      УведомлениеОКонтролируемыхСделках функции ПолучитьСведенияОбУведомлении.
//  Лист1Г                - СтрокаТаблицыЗначений - лист 1Г.
// Возвращаемое значение:
//   Структура - структура сведений листа 1Г для документа Контролируемаясделка.
Функция ДанныеЗаполненияЛиста1Г(СведенияОбУведомлении, Лист1Г)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1Г.Сделка);
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1Г.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1Б_", Лист1Г.НомерЛиста1Б, ДлинаНомераЛистовРаздела1, 0);
	
	Для НомерПодЛиста = 1 По 2 Цикл
		НомерСтрокой = Формат(НомерПодЛиста, "ЧДЦ=0; ЧГ=0");
		
		Если Лист1Г["УчастникиВзаимозависимы" + НомерСтрокой] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеУслуги_" + НомерСтрокой + "_",
			Лист1Г["НаименованиеУслуги" + НомерСтрокой]);
		
		ДанныеЗаполнения.Вставить("ВзаимозависимостьУчастников_" + НомерСтрокой, Лист1Г["УчастникиВзаимозависимы" + НомерСтрокой]);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеКонтрагента_" + НомерСтрокой + "_",
			Лист1Г["НаименованиеКонтрагента" + НомерСтрокой]);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегистрационныйНомер_" + НомерСтрокой + "_",
			Лист1Г["РегистрационныйНомер" + НомерСтрокой]);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраны_" + НомерСтрокой + "_",
			Лист1Г["КодСтраныРегистрации" + НомерСтрокой]);
		
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "Стоимость_" + НомерСтрокой + "_",
			Лист1Г["Стоимость" + НомерСтрокой], 13, 0);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВалюты_" + НомерСтрокой + "_",
			Лист1Г["КодВалюты" + НомерСтрокой]);
		
	КонецЦикла;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Добавляет в структуру параметров значения из сдевений об уведомлении по ИНН и КПП.
// 
// Параметры:
//  СведенияОбУведомлении - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  Лист2                 - СтрокаТаблицыЗначений - описание листа раздела 3.
//  ДанныеРаздела2        - ТаблицаЗначений - описание раздела 3.
//
// Возвращаемое значение:
//  Структура - данные заполнения.
Функция ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист2.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист2.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОКонтрагенте = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
	Если СведенияОКонтрагенте = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист2.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	Если Не Лист2.СведенияОКомиссионере Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "ПорядковыйНомерУчастника_", СведенияОКонтрагенте.НомерКонтрагента, 4, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "ПорядковыйНомерУчастника_", 0, 4, 0);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ТипОрганизации", Строка(СведенияОКонтрагенте.Строка020ТипОрганизации));
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраны_", СведенияОКонтрагенте.Строка030КакКодСтраныРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеКонтрагента_", СведенияОКонтрагенте.Строка040Наименование);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеКонтрагента_Лат_", СведенияОКонтрагенте.Строка040НаименованиеЛат);
	КонецЕсли;
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИНН_Контрагента_", СведенияОКонтрагенте.Строка050ИНН);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КПП_Контрагента_", СведенияОКонтрагенте.Строка060КПП);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегистрационныйНомерКонтрагента_", СведенияОКонтрагенте.Строка070РегНомерВСтрокеРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НалоговыйРегистрационныйНомерКонтрагента_", СведенияОКонтрагенте.НалоговыйРегистрационныйНомер);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаименованиеИдентификатора_", СведенияОКонтрагенте.НаименованиеИдентификатораРегистрационногоНомера);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодНалогоплательщикаКонтрагента_", СведенияОКонтрагенте.Строка080КодНалогВСтранеРегистрации);
	
	Если СведенияОКонтрагенте.Строка020ТипОрганизации <> 1 Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностраннойОрганизации_", СведенияОКонтрагенте.Строка090АдресИностраннойОрганизации);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностранный_УлицаДом_", СведенияОКонтрагенте.АдресИностранный_УлицаДом);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностранный_Район_", СведенияОКонтрагенте.АдресИностранный_Район);
		
		ГородИндекс = Новый Массив;
		ГородИндекс.Добавить(СведенияОКонтрагенте.АдресИностранный_НаселенныйПункт);
		Если СведенияОКонтрагенте.АдресИностранный_Индекс <> "" Тогда
			ГородИндекс.Добавить(СведенияОКонтрагенте.АдресИностранный_Индекс);
		КонецЕсли;

		СтрокаГородИндекс = СтрСоединить(ГородИндекс, ", ");
	
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностранный_НаселенныйПункт_", СтрокаГородИндекс);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностранный_Регион_", СведенияОКонтрагенте.АдресИностранный_Регион);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресИностранный_Страна_", СведенияОКонтрагенте.АдресИностранный_Страна);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Добавляет в структуру параметров значения из сдевений об уведомлении по ИНН и КПП.
// 
// Параметры:
//  СведенияОбУведомлении - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  Лист3                 - СтрокаТаблицыЗначений - описание листа раздела 3.
//  ДанныеРаздела3        - ТаблицаЗначений - описание раздела 3.
//
// Возвращаемое значение:
//  Структура - данные заполнения.
Функция ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист3.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист3.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОФизическомЛице = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
	Если СведенияОФизическомЛице = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДлинаНомераЛистовРаздела1 = СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераЛистовРаздела1;
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист3.НомерЛиста1А, ДлинаНомераЛистовРаздела1, 0);
	Если Не Лист3.СведенияОКомиссионере Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "ПорядковыйНомерУчастника_", СведенияОФизическомЛице.НомерКонтрагента, 4, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "ПорядковыйНомерУчастника_", 0, 4, 0);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("КодВидаДеятельности", СведенияОФизическомЛице.Строка020КодВидаДеятельности);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННФизлица_", СведенияОФизическомЛице.Строка030ИНН);
	
	Контрагент = СведенияОФизическомЛице.Контрагент;
	ФизическоеЛицо = СведенияОФизическомЛице.ФизическоеЛицо;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Фамилия_", СведенияОФизическомЛице.Фамилия);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Имя_", СведенияОФизическомЛице.Имя);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Отчество_", СведенияОФизическомЛице.Отчество);
	
	Если НЕ ЗначениеЗаполнено(СведенияОФизическомЛице.Строка030ИНН) Тогда
		
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ФизическоеЛицо.ДатаРождения);
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_",
			ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения));
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) Тогда
				ДанныеЗаполнения.Вставить("Гражданство", "1");
				ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОФизическомЛице.ГражданствоФизЛицСтрана.Код);
			Иначе
				ДанныеЗаполнения.Вставить("Гражданство", "2");
			КонецЕсли;
		Иначе
			СведенияОГражданстве = Документы.УведомлениеОКонтролируемыхСделках.СведенияОГражданстве2018(СведенияОФизическомЛице.ГражданствоФизЛицСтрана);
			ДанныеЗаполнения.Вставить("Гражданство", СведенияОГражданстве.Гражд);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОГражданстве.ОКСМ);
		КонецЕсли;
		
		КодВидаДокумента= КонтролируемыеСделки.ПолучитьКодВидаДокументаПоВидуДокумента(СведенияОФизическомЛице.ВидДокумента);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", КодВидаДокумента);
		
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументСерия) Или ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументНомер) Тогда 
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_",
				СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер);
		КонецЕсли;
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", СведенияОФизическомЛице.ДокументКемВыдан);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", СведенияОФизическомЛице.ДокументДатаВыдачи);
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			
			Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана = Справочники.СтраныМира.Россия Тогда
				ДанныеЗаполнения.Вставить("МестоЖительства", "1");
			Иначе
				ДанныеЗаполнения.Вставить("МестоЖительства", "2");
			КонецЕсли;
			
			ЗначениеАдреса = ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияЗначениеJSON),
				СведенияОФизическомЛице.КонтактнаяИнформацияЗначениеJSON,
				СведенияОФизическомЛице.КонтактнаяИнформацияЗначенияПолей);
			
			АдресСтруктурой = КонтролируемыеСделки.СтруктураАдреса(ЗначениеАдреса);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", АдресСтруктурой.Индекс);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", АдресСтруктурой.КодРегиона);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", АдресСтруктурой.Район);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", АдресСтруктурой.Город);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", АдресСтруктурой.НаселенныйПункт);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", АдресСтруктурой.Улица);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", АдресСтруктурой.Дом);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Корпус_", АдресСтруктурой.Корпус);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Квартира_", АдресСтруктурой.Квартира);
			
		КонецЕсли;
		
		Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.СтраныМира.Россия Тогда
			НаименованиеСтраны = СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФСтрана;
			Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
				НайденнаяСтрана = Справочники.СтраныМира.НайтиПоНаименованию(НаименованиеСтраны);
				Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.СтраныМира.Россия Тогда
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", НайденнаяСтрана.Код);
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Добавляет в структуру параметров значения из сдевений об уведомлении по ИНН и КПП.
// 
// Параметры:
//  СведенияОбУведомлении - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  ДанныеРаздела4        - СтрокаТаблицыЗначений - описание раздела 4.
//
// Возвращаемое значение:
//  Структура - данные заполнения.
Функция ДанныеЗаполненияРаздела4(СведенияОбУведомлении, ДанныеРаздела4)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "ПорядковыйНомерУчастника_", ДанныеРаздела4.НомерКонтрагента, 4, 0);
	
	ДанныеЗаполнения.Вставить("ТипОрганизации", ДанныеРаздела4.ТипОрганизации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраны_", ДанныеРаздела4.КодСтраныРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ДанныеУчастника_", ДанныеРаздела4.НаименованиеКонтрагента);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегистрационныйНомер_Контрагента_", ДанныеРаздела4.РегистрационныйНомер);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Добавляет в структуру параметров значения из сдевений об уведомлении по ИНН и КПП.
// Параметры:
//  СтруктураПараметров   - Структура - структура данных уведомления, разделенная по разделам в виде таблиц значений.
//  СведенияОбУведомлении - Структура - параметры сведений уведомления.
Процедура ДобавитьДанныеЗаголовка(СтруктураПараметров, СведенияОбУведомлении)
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "ИНН", СведенияОбУведомлении.ИНН);
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "КПП", СведенияОбУведомлении.КПП);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДляЗаполненияМакетов

// Возвращает согласно номеру заполненный лист уведомления в виде табличного документа.
//
// Параметры:
//  Макет                 - ТабличныйДокумент - макет для заполнения номера страницы уведомления.
//  НомерСтраницы            - Число - номер страницы уведомлния.
//  ДлинаНомераСтраницы      - Число - длина страницы уведомлния.
//
Процедура УстановитьНомерСтраницы(Макет, НомерСтраницы, ДлинаНомераСтраницы)
	
	ЧастиНомераСтраницы = Новый Структура();
	ДобавитьЧислоВСтруктуруПараметров(ЧастиНомераСтраницы, "СчетчикСтраниц_", НомерСтраницы, ДлинаНомераСтраницы, 0, Истина);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ЧастиНомераСтраницы);
	
КонецПроцедуры

// Добавляет в структуру параметров указаное имя параметра и его значение числа в строковом виде.
//
// Параметры:
//  СтруктураПараметров    - Структура - структура параметров.
//  ИмяПараметра           - Строка - наименование параметра.
//  ЗначениеПараметра      - Строка - значение параметра.
//  ДлинаЦелойЧасти        - Число - длина целой части числа.
//  ДлинаДробнойЧасти      - Число - длина дробной чати числа.
//  ВыводитьЛидирующиеНули - Булево - Истина, если выводить лидирующие нули.
Процедура ДобавитьЧислоВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаЦелойЧасти, ДлинаДробнойЧасти, ВыводитьЛидирующиеНули = Ложь)
	
	ФорматЧисла = СтрШаблон("ЧЦ=%1; ЧДЦ=%2; ЧРД=.; ЧН=0; %3 ЧГ=0",
		Формат(ДлинаЦелойЧасти+ДлинаДробнойЧасти, ""),
		Формат(ДлинаДробнойЧасти, ""),
		?(ВыводитьЛидирующиеНули, "ЧВН=;", ""));
	
	ЧастиЧисла = СтрРазделить(Формат(ЗначениеПараметра, ФорматЧисла), ".");
	Если ЧастиЧисла.Количество() > 0 Тогда
		ЦелаяЧастьЧисла = ЧастиЧисла[0];
	Иначе
		ЦелаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦелаяЧастьЧисла, ДлинаЦелойЧасти, " ", "Справа");
	
	Если ЧастиЧисла.Количество() > 1 Тогда
		ДробнаяЧастьЧисла = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ЧастиЧисла[1], "0", "Справа");
	Иначе
		ДробнаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = ЧислоСтрокой + ДробнаяЧастьЧисла;
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЧислоСтрокой);
	
КонецПроцедуры

// Добавляет строку в структуру параметров вывода печатной формы уведомления.
//
// Параметры:
//  СтруктураПараметров - Структура - структура параметров.
//  ИмяПараметра        - Строка - наименование параметра.
//  ЗначениеПараметра   - Строка - значение параметра.
//  ДлинаСтроки         - Число - длина строки.
//  ДлинаПодстроки      - Число - длина подстроки.
Процедура ДобавитьСтрокуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаСтроки = 0, ДлинаПодстроки = 0)
	
	СтрокаДляВывода = ЗначениеПараметра;
	Если ДлинаСтроки > 0 И ДлинаПодстроки > 0 Тогда
		// Есть дополнительные ограничения по длине строки и делению ее на подстроки.
		// Выводим строку так, что бы целое слово умещалось на строке целиком.
		// Если так не получится - выводим как есть посимвольно.
		Слова = СтрРазделить(ЗначениеПараметра, " ", Ложь);
		
		СтрокаСловВыведенныхПострочно = СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки);
		Если ЗначениеЗаполнено(СтрокаСловВыведенныхПострочно) Тогда
			СтрокаДляВывода = СтрокаСловВыведенныхПострочно;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДляВывода = ВРег(СтрокаДляВывода);
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, СтрокаДляВывода);
	
КонецПроцедуры

// Возвращает построчно массив слов.
//
// Параметры:
//  Слова          - Массив из Строка - массив слов.
//  ДлинаСтроки    - Число - длина строки.
//  ДлинаПодстроки - Число - длина подстроки.
Функция СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки)
	
	СтрокаСлов = "";
	ВсеСловаВыведены = Ложь;
	
	Для Каждого Слово Из Слова Цикл
		
		Если СтрокаСлов = "" Тогда
			СтрокаСлов = Слово;
		ИначеЕсли СтрДлина(Слово) > ДлинаПодстроки Тогда
			// Слово слишком длинное - выводим его как есть.
			СтрокаСлов = СтрокаСлов + " " + Слово;
		Иначе
			СимволовВСтроке = СтрДлина(СтрокаСлов);
			ВсегоПолныхСтрок = Цел(СимволовВСтроке/ДлинаПодстроки);
			СимволовВПолныхСтроках = ВсегоПолныхСтрок * ДлинаПодстроки;
			СимволовВПоследнейПодстроке = СимволовВСтроке - СимволовВПолныхСтроках;
			Если СимволовВПоследнейПодстроке + 1 + СтрДлина(Слово) > ДлинаПодстроки Тогда
				СтрокаСлов = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаСлов, ДлинаПодстроки, " ", "Справа");
				СтрокаСлов = СтрокаСлов + Слово;
			Иначе
				СтрокаСлов = СтрокаСлов + ?(СимволовВПоследнейПодстроке = 0, "", " ") + Слово;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаСлов) > ДлинаСтроки Тогда
		// Слова, выведенные построчно занимают места больше,
		// чем можно вывести. Поэтому считаем, что вывод не
		// удался и возвращаем пустую строку.
		Возврат "";
	Иначе
		Возврат СтрокаСлов;
	КонецЕсли;
	
КонецФункции

// Добавляет в структуру параметров указаное имя параметра и его значение даты в строковом виде.
//
// Параметры:
//  СтруктураПараметров - Структура - описание параметров.
//  ИмяПараметра        - Строка - имя добавляемого параметра.
//  ЗначениеПараметра   - Дата - значение добавляемого параметра.
//
Процедура ДобавитьДатуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	ДатаСтрокой = Формат(ЗначениеПараметра, "ДФ=ddMMyyyy");
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ДатаСтрокой);
	
КонецПроцедуры

// Добавляет в структуру параметров указаное имя параметра и его значение.
//
// Параметры:
//  СтруктураПараметров - Структура - описание параметров.
//  ИмяПараметра        - Строка - имя добавляемого параметра.
//  ЗначениеПараметра   - Строка - значение добавляемого параметра.
//
Процедура ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	Для Позиция = 1 По СтрДлина(ЗначениеПараметра) Цикл
		ИмяПараметраЧастиЧисла = ИмяПараметра + Формат(Позиция, "ЧГ=0");
		СтруктураПараметров.Вставить(ИмяПараметраЧастиЧисла, Сред(ЗначениеПараметра, Позиция, 1));
	КонецЦикла;
	
КонецПроцедуры

// Для структуры листов уведомления успанавливает параметры печати.
//
// Параметры:
//  ЛистыУведомления       - Структура - описание параметров листов уведовлемения:
//  * ОриентацияСтраницы   - ОриентацияСтраницы - значение ориентации страницы.
//  * АвтоМасштаб          - Булево - Истина, если масштабировать автоматически.
//  * ПолеСверху           - Число - отступ сверху.
//  * ПолеСнизу            - Число - отступ снизу.
//  * КлючПараметровПечати - Строка - наименование документа.
//
Процедура УстановитьПараметрыПечатиУведомления(ЛистыУведомления) Экспорт
	
	ЛистыУведомления.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЛистыУведомления.АвтоМасштаб = Истина;
	ЛистыУведомления.ПолеСверху          = 5;
	ЛистыУведомления.ПолеСнизу           = 5;
	ЛистыУведомления.КлючПараметровПечати = "Документ.УведомлениеОКонтролируемыхСделках";
	
КонецПроцедуры

// Возвращает разложенный ОКПД2 в строку без точек
//
// Параметры:
//  ИсходныйКодСТочками - Строка - ОКПД2.
// Возвращаемое значение:
//  Строка              - разложенный ОКПД2 в строку без точек.
//
Функция РазложитьОКПД2ВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтрРазделить(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		
		ДлинаЧастиКода = ?(НомерКода < 3, 2, 3);
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			ДлинаЧастиКода, " ", "Справа");
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКодов, "");
	
КонецФункции

// Возвращает код по ОКПИ из кода по ОКПД2
//
// Параметры:
//  КодПоОКПД2 - Строка - код по ОКПД2.
// Возвращаемое значение:
//  Строка              - код по ОКПИ.
//
Функция КодПоОКПИзКодаПоОКПД2(КодПоОКПД2) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодПоОКПД2) Тогда
		Возврат "";
	КонецЕсли;
	
	КодПоОКП = СтрЗаменить(КодПоОКПД2, ".", "");
	КодПоОКП = Лев(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПоОКП, 6, "0", "Справа"), 6);
	Возврат КодПоОКП;
	
КонецФункции

// Возвращает разложенный ОКВЭД в строку без точек
//
// Параметры:
//  ИсходныйКодСТочками - Строка - ОКВЭД.
// Возвращаемое значение:
//  Строка              - разложенный ОКВЭД в строку без точек.
//
Функция РазложитьОКВЭДВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтрРазделить(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			2, " ", "Справа");
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКодов, "");
	
КонецФункции

#КонецОбласти

#Область ДанныеКлассификаторов

// Получить список кодов наименований сделки.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьСписокКодовНаименованийСделки() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "ТипИСтороныДоговора");
	
КонецФункции

// Получить соответствие кодов сторон сделки.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Получить список из макета. Значение имеет тип Строка.
Функция ПолучитьСоответствиеКодовСтороныСделки() Экспорт
	
	СоответствиеКодов = Новый Соответствие();
	
	Макет = Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ПолучитьМакет("КонтролируемыеСделкиСпискиКодов");
	ОбластьМакета = Макет.ПолучитьОбласть("ТипИСтороныДоговора");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		КодНаименованияСделки = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		СписокКодов = Новый СписокЗначений();
		Для к = 2 по 4 Цикл
			Код = ОбластьМакета.Область(Ном, к*2 - 1 , Ном, к*2 - 1).Текст;
			Наименование = ОбластьМакета.Область(Ном, к*2, Ном, к*2).Текст;
			Если ЗначениеЗаполнено(Код) Тогда
				СписокКодов.Добавить(Код, "" + Код + " - " + Наименование);
			КонецЕсли;
		КонецЦикла;
		СоответствиеКодов.Вставить(КодНаименованияСделки, СписокКодов);
	КонецЦикла;
	
	Возврат СоответствиеКодов;
	
КонецФункции

// Получить список кодов условий поставки.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыУсловийПоставки() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодУсловийПоставки");
	
КонецФункции

// Получить список кодов видов деятельности физических лиц.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыВидовДеятельностиФизЛиц() Экспорт
	
	СписокКодов = Новый СписокЗначений();
	
	Макет = ПолучитьОбщийМакет("КонтролируемыеСделкиСпискиКодов");
	ОбластьМакета = Макет.ПолучитьОбласть("КодВидаДеятельности");

	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном, 1, Ном, 1).Текст;
		ТекНаименование = ОбластьМакета.Область(Ном, 2, Ном, 2).Текст;
		СписокКодов.Добавить(ТекКод, "" + ТекКод + " - " + ТекНаименование);
	КонецЦикла;
	
	Возврат СписокКодов;
	
КонецФункции

// Получить список кодов определения цены сделки.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыОпределенияЦеныСделки() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "ОснованияПризнанияЦеныСделкиРыночной");
	
КонецФункции

// Получить список кодов методов ценообразования.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыМетодовЦенообразования() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "МетодыЦенообразования");
	
КонецФункции

// Получить список кодов категорий налогоплательщика.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыКатегорийНалогоплательщика() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодКатегорииНалогоплательщика");
	
КонецФункции

// Получить список кодов формы реорганизации.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьКодыФормыРеорганизации() Экспорт
	
	Возврат ПолучитьСписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодРеорганизации");
	
КонецФункции

// Получить список из макета.
// 
// Параметры:
//  ИмяМакета                - Строка - Имя макета.
//  ИмяОбласти               - Строка - Имя области.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Получить список из макета.
Функция ПолучитьСписокИзМакета(ИмяМакета, ИмяОбласти)
	
	СписокКодов = Новый СписокЗначений();
	
	Макет = Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ПолучитьМакет(ИмяМакета);
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		ТекНаименование = ОбластьМакета.Область(Ном, 2, Ном, 2).Текст;
		Если ЗначениеЗаполнено(ТекКод) Тогда
			ТекНаименование = "" + ТекКод + " - " + ТекНаименование;
		КонецЕсли;
		СписокКодов.Добавить(ТекКод, ТекНаименование);
	КонецЦикла;
	
	Возврат СписокКодов;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормамиДоговоров

// Определяет добавляются ли на форму информацию о дополнительных сведениях договоров контролируемых сделок.
//
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения  - форма пользователя.
//
// Возвращаемое значение:
//  Булево - Истина, если на форму добавляется информация о дополнительных сведениях договоров контролируемых сделок.
//
Функция НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма)
	
	// Проверяем включение соответствующей функциональной опции.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияОКонтролируемыхСделках") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем право на чтение соответствующих реквизитов.
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим наличие группы для добавления реквизитов контролируемых сделок.
	Если Форма.Элементы.Найти("ГруппаКонтролируемыеСделки") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем реквизиты только тогда, когда есть реквизит "Объект".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем реквизиты только тогда, когда есть свойство объекта "Ссылка".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем доп. реквизиты на форму только тогда, когда форма является договоров, для которого назначаются доп. сведения,
	// как участнику контролируемой сделки.
	СписокТиповДоговоров = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Измерения.ДоговорКонтрагента.Тип.Типы();
	Если СписокТиповДоговоров.Найти(ТипЗнч(Форма.Объект.Ссылка)) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обновляет реквизиты контролируемых сделок на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма пользователя.
//
Процедура ДобавитьРеквизитыКонтролируемыхСделокНаФорму(Форма)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ДопРеквизиты = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Ресурсы;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтролируемыеСделки_" + ДопРеквизит.Имя, ДопРеквизит.Тип));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

// Добавляет реквизиты контролируемых сделок на форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма пользователя.
//
Процедура ДобавитьЭлементыКонтролируемыхСделокНаФорму(Форма)
	
	ГруппаКонтролируемыхСделок = Форма.Элементы.Найти("ГруппаКонтролируемыеСделки");
	ДопРеквизиты = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Ресурсы;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		ЭлементФормы = Форма.Элементы.Добавить("КонтролируемыеСделки_" + ДопРеквизит.Имя, Тип("ПолеФормы"), ГруппаКонтролируемыхСделок);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.Заголовок = ДопРеквизит.Синоним;
		ЭлементФормы.ПутьКДанным = "КонтролируемыеСделки_" + ДопРеквизит.Имя;
		Если ДопРеквизит.Тип = Новый ОписаниеТипов("Булево") Тогда
			ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭлементФормы.Подсказка = ДопРеквизит.Подсказка;
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СписокКодовНаименованийСделок = КонтролируемыеСделкиПовтИсп.СписокКодовНаименованийСделки();
		СписокКодовПоставки = КонтролируемыеСделкиПовтИсп.КодыУсловийПоставки();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЭлементКодНаименованияСделки = Форма.Элементы["КонтролируемыеСделки_КодНаименованияСделки"];
		Для каждого Код Из СписокКодовНаименованийСделок Цикл
			НовыйКод = ЭлементКодНаименованияСделки.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКод, Код);
		КонецЦикла;
		ЭлементКодНаименованияСделки.РежимВыбораИзСписка = Истина;
		ЭлементКодНаименованияСделки.РастягиватьПоГоризонтали = Истина;
		
		ЭлементКодУсловийПоставки = Форма.Элементы["КонтролируемыеСделки_КодУсловийПоставки"];
		Для каждого Код Из СписокКодовПоставки Цикл
			НовыйКод = ЭлементКодУсловийПоставки.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКод, Код);
		КонецЦикла;
		ЭлементКодУсловийПоставки.РежимВыбораИзСписка = Истина;
		
	Иначе
		
		ГруппаКонтролируемыхСделок.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет данные договоров контролируемых сделок на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма пользователя.
//
Процедура ОбновитьДанныеДоговоровКонтролируемыхСделок(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыУчастниковКонтролируемыхСделок.КодНаименованияСделки КАК КодНаименованияСделки,
	|	ДоговорыУчастниковКонтролируемыхСделок.СпособОпределенияЦеныСделки КАК СпособОпределенияЦеныСделки,
	|	ДоговорыУчастниковКонтролируемыхСделок.КодУсловийПоставки КАК КодУсловийПоставки,
	|
	|	ДоговорыУчастниковКонтролируемыхСделок.СтороныПрименяютРазныеСтавкиПоНалогуНаПрибыль КАК
	|		СтороныПрименяютРазныеСтавкиПоНалогуНаПрибыль,
	|
	|	ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиНовогоМорскогоМесторождения КАК
	|		СделкаОтноситсяКДеятельностиНовогоМорскогоМесторождения,
	|
	|	ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиОблагаемойНалогомНаДопДоход КАК
	|		СделкаОтноситсяКДеятельностиОблагаемойНалогомНаДопДоход,
	|
	|	ДоговорыУчастниковКонтролируемыхСделок.СделкаНеЯвляетсяКонтролируемойПоП4
	|ИЗ
	|	РегистрСведений.ДоговорыУчастниковКонтролируемыхСделок КАК ДоговорыУчастниковКонтролируемыхСделок
	|ГДЕ
	|	ДоговорыУчастниковКонтролируемыхСделок.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.Параметры.Вставить("ДоговорКонтрагента", Форма.Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для каждого КолонкаРезультата Из Результат.Колонки Цикл
			Форма["КонтролируемыеСделки_" + КолонкаРезультата.Имя] = Выборка[КолонкаРезультата.Имя];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляРаботыСАдресами

// Возвращает структуру адреса.
//
// Параметры:
//   ЗначенияАдресаJSON - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO-пакету Адрес.
//                      - ОбъектXDTO - XDTO-объект, соответствующий XDTO пакету Адрес.
//                      - Неопределено - конструктор для получения пустых полей адреса.
//   ДополнительныеПараметры - Структура, Неопределено - поля, отличающиеся от значений по умолчанию:
//   * БезПредставлений - Булево - если Истина, то поле Представление будет отсутствовать. По умолчанию Ложь.
//   * КодыАдреса       - Булево - если Истина, то результат содержит поля ИдентификаторАдресногоОбъекта, ИдентификаторДома
//                                     и структура с кодами адреса(Идентификаторы, ДополнительныеКоды, КодыКЛАДР).
//                                     Подробнее см. в возвращаемом значении структуры Идентификаторы и
//                                     ДополнительныеКоды. По умолчанию, Ложь. Если в адресе отсутствуют идентификаторы
//                                     и в программу не загружены идентификаторы адресных объектов адреса, то получение
//                                     идентификаторов может инициировать http запрос к веб-сервису 1С orgaddress.
//   * КодыКЛАДР        - Булево - если Истина, то возвращается структура КодыКЛАДР. По умолчанию Ложь.
//                                     Если в адресе отсутствуют коды и в программу не загружены адресные объекты адреса,
//                                     Получение кодов может инициировать http запрос к веб-сервису 1С orgaddress.
//    * НаименованиеВключаетСокращение - Булево - если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
//    * ПроверитьАдрес   - Булево - если Истина, то адрес будет проверен на соответствие адресному классификатору. По
//                                     умолчанию Ложь. Если в программу не загружены проверяемые адресные объекты,
//                                     то проверка адреса может инициировать http запрос к веб-сервису 1С orgaddress.
//    * ПолноеНаименованиеСокращений - Булево - устаревший параметр. Следует использовать свойства свойства
//                                     возвращаемого значения с постфиксами ТипПолный и ТипКраткий. По умолчанию, Ложь.
//
// Возвращаемое значение:
//  Структура - структура адреса:
//  * АдресРФ                   - Булево - Истина, если адрес российский.
//  * КодСтраны                 - Строка
//  * Страна                    - Строка
//  * Индекс                    - Строка
//  * Регион                    - Строка
//  * РегионСокращение          - Строка
//  * КодРегиона                - Строка
//  * Район                     - Строка
//  * РайонСокращение           - Строка
//  * Город                     - Строка
//  * ГородСокращение           - Строка
//  * НаселенныйПункт           - Строка
//  * НаселенныйПунктСокращение - Строка
//  * Улица                     - Строка
//  * УлицаСокращение           - Строка
//  * Дом                       - Строка
//  * ТипДома                   - Строка
//  * Корпус                    - Строка
//  * ТипКорпуса                - Строка
//  * Квартира                  - Строка
//  * ТипКвартиры               - Строка
//  * Представление             - Строка
//  * ЗначенияПолей             - Строка
//  * ЗначениеJSON              - Строка
Функция СтруктураАдреса(ЗначенияАдресаJSON, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураАдреса = НовыйСтруктураАдреса();
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияАдресаJSON, ДополнительныеПараметры);
	НаименованиеСтраныПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.СтраныМира.Россия, "Наименование");
	
	СтруктураАдреса.Страна    = СведенияОбАдресе.Страна;
	СтруктураАдреса.КодСтраны = СведенияОбАдресе.КодСтраны;
	Если СтруктураАдреса.Свойство("Страна") 
		И СтрСравнить(СтруктураАдреса.Страна, НаименованиеСтраныПоУмолчанию) = 0 Тогда
		СтруктураАдреса.АдресРФ = Истина;
	Иначе
		СтруктураАдреса.АдресРФ = Ложь;
	КонецЕсли;
	
	СтруктураАдреса.Представление             = СведенияОбАдресе.Представление;
	СтруктураАдреса.Индекс                    = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Регион                    = СведенияОбАдресе.Регион;
	СтруктураАдреса.КодРегиона                = ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, "");
	СтруктураАдреса.РегионСокращение          = СведенияОбАдресе.РегионСокращение;
	СтруктураАдреса.Район                     = СведенияОбАдресе.Район;
	СтруктураАдреса.РайонСокращение           = СведенияОбАдресе.РайонСокращение;
	СтруктураАдреса.Город                     = СведенияОбАдресе.Город;
	СтруктураАдреса.ГородСокращение           = СведенияОбАдресе.ГородСокращение;
	СтруктураАдреса.НаселенныйПункт           = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПунктСокращение = СведенияОбАдресе.НаселенныйПунктСокращение;
	СтруктураАдреса.Улица                     = СведенияОбАдресе.Улица;
	СтруктураАдреса.УлицаСокращение           = СведенияОбАдресе.УлицаСокращение;
	СтруктураАдреса.Дом                       = СведенияОбАдресе.Здание.Номер;
	СтруктураАдреса.ТипДома                   = СведенияОбАдресе.Здание.ТипЗдания;
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпуса[0].Номер;
		СтруктураАдреса.ТипКорпуса = СведенияОбАдресе.Корпуса[0].ТипКорпуса;
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		СтруктураАдреса.Квартира    = СведенияОбАдресе.Помещения[0].Номер;
		СтруктураАдреса.ТипКвартиры = СведенияОбАдресе.Помещения[0].ТипПомещения;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Возвращает согласно номеру заполненный лист уведомления в виде табличного документа.
//
// Возвращаемое значение:
//  Структура - структура адреса:
//  * АдресРФ                   - Булево - Истина, если адрес российский.
//  * КодСтраны                 - Строка
//  * Страна                    - Строка
//  * Индекс                    - Строка
//  * Регион                    - Строка
//  * РегионСокращение          - Строка
//  * КодРегиона                - Строка
//  * Район                     - Строка
//  * РайонСокращение           - Строка
//  * Город                     - Строка
//  * ГородСокращение           - Строка
//  * НаселенныйПункт           - Строка
//  * НаселенныйПунктСокращение - Строка
//  * Улица                     - Строка
//  * УлицаСокращение           - Строка
//  * Дом                       - Строка
//  * ТипДома                   - Строка
//  * Корпус                    - Строка
//  * ТипКорпуса                - Строка
//  * Квартира                  - Строка
//  * ТипКвартиры               - Строка
//  * Представление             - Строка
//  * ЗначенияПолей             - Строка
//  * ЗначениеJSON              - Строка
Функция НовыйСтруктураАдреса()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресРФ",                   Истина);
	СтруктураАдреса.Вставить("КодСтраны",                 "");
	СтруктураАдреса.Вставить("Страна",                    "");
	СтруктураАдреса.Вставить("Индекс",                    "");
	СтруктураАдреса.Вставить("Регион",                    "");
	СтруктураАдреса.Вставить("РегионСокращение",          "");
	СтруктураАдреса.Вставить("КодРегиона",                "");
	СтруктураАдреса.Вставить("Район",                     "");
	СтруктураАдреса.Вставить("РайонСокращение",           "");
	СтруктураАдреса.Вставить("Город",                     "");
	СтруктураАдреса.Вставить("ГородСокращение",           "");
	СтруктураАдреса.Вставить("НаселенныйПункт",           "");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение", "");
	СтруктураАдреса.Вставить("Улица",                     "");
	СтруктураАдреса.Вставить("УлицаСокращение",           "");
	СтруктураАдреса.Вставить("Дом",                       "");
	СтруктураАдреса.Вставить("ТипДома",                   "");
	СтруктураАдреса.Вставить("Корпус",                    "");
	СтруктураАдреса.Вставить("ТипКорпуса",                "");
	СтруктураАдреса.Вставить("Квартира",                  "");
	СтруктураАдреса.Вставить("ТипКвартиры",               "");
	СтруктураАдреса.Вставить("Представление",             "");
	СтруктураАдреса.Вставить("ЗначенияПолей",             "");
	СтруктураАдреса.Вставить("ЗначениеJSON",              "");
	
	Возврат СтруктураАдреса;
	
КонецФункции
#КонецОбласти

#КонецОбласти //СлужебныеПроцедурыИФункции
