////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Аренда ОС".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗакрытиеМесяца

#Область НачислениеПроцентовПоАренде

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеПроцентовПоАренде(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеПроцентовПоАренде);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетАрендованныхОС.Использование_НачислениеПроцентовПоАренде");
		
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетАрендованныхОС.Выполнить_НачислениеПроцентовПоАренде");
		
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеПроцентовПоАренде.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Опредяет статус операции "НачислениеПроцентовПоАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_НачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	ИначеЕсли НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется учет внеоборотных активов версии 2.4.';
				|en = 'Non-current assets accounting version 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018(ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций, для которых в учетной политике включен учет аренды по стандарту ФСБУ 25/2018';
				|en = 'There are no companies, for which the accounting policy includes lease accounting according to the Russian GAAP (FSBU 25/2018 standard)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, "НачислениеПроцентовПоАренде");
	
КонецПроцедуры

// Выполняет операцию "НачислениеПроцентовПоАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_НачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ВнеоборотныеАктивы.ЗавершенПереходНаВНА24(ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюНачислениеПроцентовПоАренде(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеПроцентовПоДоходнойАренде

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеПроцентовПоДоходнойАренде(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеПроцентовПоДоходнойАренде);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Charge'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"УчетАрендованныхОС.Использование_НачислениеПроцентовПоДоходнойАренде");
		
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"УчетАрендованныхОС.Выполнить_НачислениеПроцентовПоДоходнойАренде");
		
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеПроцентовПоАренде.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Опредяет статус операции "НачислениеПроцентовПоДоходнойАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_НачислениеПроцентовПоДоходнойАренде(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Передача в аренду/субаренду с начислением процентного дохода отключена.';
				|en = 'Rental/sublease with interest income charge is disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	ИначеЕсли НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется учет внеоборотных активов версии 2.4.';
				|en = 'Fixed assets accounting version 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, "НачислениеПроцентовПоАренде");
	
КонецПроцедуры

// Выполняет операцию "НачислениеПроцентовПоДоходнойАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_НачислениеПроцентовПоДоходнойАренде(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ВнеоборотныеАктивы.ЗавершенПереходНаВНА24(ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюНачислениеПроцентовПоДоходнойАренде(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПоискОснованийИДокументовОплаты

// Создает структуру параметров поиска оснований оплаты и документов оплаты
// 
// Возвращаемое значение:
// 	Структура - содержит:
// 	* Организации - Неопределено, СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации -
// 	* Документы   - Массив Из ДокументСсылка - документы, по которым производится поиск платежей.
// 	* НаДату      - Дата - для среза найденных документов на дату
// 	* ОграничитьТипыДокументовОплаты - Булево - Если "Истина", платежные документы будут ограничены возможными типами
// 	                                                входящих и исходящих документов оплат.
// 	* ОграничитьТипыОснованийОплаты  - Булево - Если "Истина", основания платежа будут ограничены возможными типами
// 	                                                входящих и исходящих документов.
// 	* ПараметрыОтбораПоТаблицеДокументов - Структура - Для отбора по временной таблице с документами, где:
//  	** ИмяПоля - Строка - Имя поля, в котором содержится документ
//  	** ИмяТаблицыОтбора - Строка - имя временной таблицы, где содержится документ
//
Функция ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("Организации",  Неопределено);
	ПараметрыПоиска.Вставить("Документы",    Новый Массив);
	ПараметрыПоиска.Вставить("НаДату",       Дата(1,1,1));
	ПараметрыПоиска.Вставить("ОграничитьТипыДокументовОплаты", Ложь);
	ПараметрыПоиска.Вставить("ОграничитьТипыОснованийОплаты", Ложь);
	
	// Документы, по которым необходимо найти платежные документы
	ПараметрыОтбораПоТаблицеДокументов = Новый Структура;
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяПоля",          "");
	ПараметрыОтбораПоТаблицеДокументов.Вставить("ИмяТаблицыОтбора", "");
	
	ПараметрыПоиска.Вставить("ПараметрыОтбораПоТаблицеДокументов", ПараметрыОтбораПоТаблицеДокументов);
	
	Возврат ПараметрыПоиска;
	
КонецФункции

// Подготовить временную таблицу "РасчетыСАрендодателями_ОснованияИДокументыОплаты"
// Создает временную таблицу с колонками:
// 		Организация;
// 		ДокументОплаты - платежный документ;
// 		ОснованиеОплаты - оплачиваемый документ;
// 		АналитикаУчетаПоПартнерам;
// 		ОбъектРасчетов;
// 		Подразделение;
// 		НаправлениеДеятельности;
// 		Контрагент;
// 		Договор;
// 		СуммаОплаты;
// 		СуммаОплатыУпр;
// 		СуммаОплатыРегл.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
// 	ПараметрыПоиска         - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПодготовитьВТ_РасчетыСАрендодателями_ОснованияИДокументыОплаты(МенеджерВременныхТаблиц, ПараметрыПоиска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрДоговорыАренды.Организация                  КАК Организация,
	|	Расчеты.РасчетныйДокумент                      КАК ДокументОплаты,
	|	Расчеты.Регистратор                            КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор                                КАК ОбъектРасчетов,
	|	СпрДоговорыАренды.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	СпрДоговорыАренды.Контрагент                   КАК Контрагент,
	|	СпрДоговорыАренды.Ссылка                       КАК Договор,
	|	Расчеты.ТипСуммы                               КАК ТипПлатежа,
	|	СУММА(Расчеты.Сумма)                           КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаУпр)                        КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаРегл)                       КАК СуммаОплатыРегл
	|ПОМЕСТИТЬ РасчетыСАрендодателями_ОснованияИДокументыОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|		ПО Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыАренды КАК СпрДоговорыАренды
	|		ПО Расчеты.Договор = СпрДоговорыАренды.Ссылка
	|ГДЕ
	|	(Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс)
	|	ИЛИ Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж))
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И (НЕ &ВключитьОтборПоОрганизациям
	|		ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|	И ТИПЗНАЧЕНИЯ(Расчеты.РасчетныйДокумент) В (&мТиповДокументовОплатыИсходящие) 
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&мТиповОснованийОплатыВходящие)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор,
	|	Расчеты.ТипСуммы,
	|	СпрДоговорыАренды.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СпрДоговорыАренды.Организация                  КАК Организация,
	|	Расчеты.РасчетныйДокумент                      КАК ДокументОплаты,
	|	НЕОПРЕДЕЛЕНО                                   КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор                                КАК ОбъектРасчетов,
	|	СпрДоговорыАренды.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	СпрДоговорыАренды.Контрагент                   КАК Контрагент,
	|	СпрДоговорыАренды.Ссылка                       КАК Договор,
	|	Расчеты.ТипСуммы                               КАК ТипПлатежа,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.Сумма)                           КАК СуммаОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.СуммаУпр)                        КАК СуммаОплатыУпр,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.СуммаРегл)                       КАК СуммаОплатыРегл
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|		ПО Расчеты.РасчетныйДокумент = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыАренды КАК СпрДоговорыАренды
	|		ПО Расчеты.Договор = СпрДоговорыАренды.Ссылка
	|ГДЕ
	|	(Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс)
	|	ИЛИ Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж))
	|	И (НЕ &ВключитьОтборПоОрганизациям
	|		ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|	И ТИПЗНАЧЕНИЯ(Расчеты.РасчетныйДокумент) В (&мТиповДокументовОплатыИсходящие)
	|	И (Расчеты.Регистратор = Расчеты.РасчетныйДокумент
	|	ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&мТиповОснованийОплатыВходящие)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц) И Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор,
	|	Расчеты.ТипСуммы,
	|	СпрДоговорыАренды.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.Сумма) <> 0
	|	ИЛИ СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.СуммаУпр) <> 0
	|	ИЛИ СУММА(ВЫБОР
	|			КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ
	|				-1
	|		КОНЕЦ * Расчеты.СуммаРегл) <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СпрДоговорыАренды.Организация                  КАК Организация,
	|	Расчеты.Регистратор                            КАК ДокументОплаты,
	|	Расчеты.РасчетныйДокумент                      КАК ОснованиеОплаты,
	|	Расчеты.АналитикаУчетаПоПартнерам              КАК АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор                                КАК ОбъектРасчетов,
	|	СпрДоговорыАренды.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	СпрДоговорыАренды.Контрагент                   КАК Контрагент,
	|	СпрДоговорыАренды.Ссылка                       КАК Договор,
	|	Расчеты.ТипСуммы                               КАК ТипПлатежа,
	|	СУММА(Расчеты.Сумма)                           КАК СуммаОплаты,
	|	СУММА(Расчеты.СуммаУпр)                        КАК СуммаОплатыУпр,
	|	СУММА(Расчеты.СуммаРегл)                       КАК СуммаОплатыРегл
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбораОснованийИДокументовОплаты КАК ТаблицаОтбораОснованийИДокументовОплаты
	|		ПО Расчеты.Регистратор = ТаблицаОтбораОснованийИДокументовОплаты.ДокументОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыАренды КАК СпрДоговорыАренды
	|		ПО Расчеты.Договор = СпрДоговорыАренды.Ссылка
	|ГДЕ
	|	Расчеты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде)
	|	И Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И (НЕ &ВключитьОтборПоОрганизациям
	|		ИЛИ Расчеты.АналитикаУчетаПоПартнерам.Организация В (&Организации))
	|	И ТИПЗНАЧЕНИЯ(Расчеты.Регистратор) В (&мТиповДокументовОплатыИсходящие)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	Расчеты.Договор,
	|	Расчеты.ТипСуммы,
	|	СпрДоговорыАренды.Ссылка";
	
	ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Добавляет значения параметров для проведения документа в учете аренды.
// 
// Параметры:
// 	ЗначенияПараметровПроведения - Структура - 
Процедура ДополнитьЗначенияПараметровПроведенияДокументаАренды(ЗначенияПараметровПроведения) Экспорт
	
	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеУслугПоАренде", Перечисления.ХозяйственныеОперации.ПоступлениеУслугПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеУслугПоАренде", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеУслугПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ОбеспечительныйПлатеж", Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатеж);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОбеспечительныйПлатеж", Справочники.НастройкиХозяйственныхОпераций.ОбеспечительныйПлатеж);

	ЗначенияПараметровПроведения.Вставить("ХО_ВыкупАрендованныхОС", Перечисления.ХозяйственныеОперации.ВыкупАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ВыкупАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.ВыкупАрендованныхОС);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиУслугиПоАренде", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиУслугиПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиУслугиПоАренде", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиУслугиПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиОбеспечительногоПлатежа", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиОбеспечительногоПлатежа);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиОбеспечительногоПлатежа", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиОбеспечительногоПлатежа);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеУслугПоАрендеВРасходах", Перечисления.ХозяйственныеОперации.ОтражениеУслугПоАрендеВРасходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеУслугПоАрендеВРасходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеУслугПоАрендеВРасходах);

	ЗначенияПараметровПроведения.Вставить("ХО_ОбеспечительныйПлатежПриУчетеЗаБалансом", Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатежПриУчетеЗаБалансом);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОбеспечительныйПлатежПриУчетеЗаБалансом", Справочники.НастройкиХозяйственныхОпераций.ОбеспечительныйПлатежПриУчетеЗаБалансом);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиУслугиПоАренде", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиУслугиПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиУслугиПоАренде", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиУслугиПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиОбеспечительногоПлатежа", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиОбеспечительногоПлатежа);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиОбеспечительногоПлатежа", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиОбеспечительногоПлатежа);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.СписаниеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.СписаниеПроцентовПоАренде);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеНДСПоАренде", Перечисления.ХозяйственныеОперации.СписаниеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.СписаниеНДСПоАренде);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеНеУчитываемойСтоимостиНУ", Перечисления.ХозяйственныеОперации.СписаниеНеУчитываемойСтоимостиНУ);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеНеУчитываемойСтоимостиНУ", Справочники.НастройкиХозяйственныхОпераций.СписаниеНеУчитываемойСтоимостиНУ);
	
	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеАрендныхОбязательствВРасходах", Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВРасходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеАрендныхОбязательствВРасходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеАрендныхОбязательствВРасходах);

	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеАрендныхОбязательствВДоходах", Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВДоходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеАрендныхОбязательствВДоходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеАрендныхОбязательствВДоходах);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеСтоимостиАрендованныхОС", Перечисления.ХозяйственныеОперации.УвеличениеСтоимостиАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеСтоимостиАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиАрендованныхОС);
	
	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеСтоимостиАрендованныхОС", Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеСтоимостиАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиАрендованныхОС);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеНДСПоАренде", Перечисления.ХозяйственныеОперации.УвеличениеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.УвеличениеНДСПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеНДСПоАренде", Перечисления.ХозяйственныеОперации.УменьшениеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.УменьшениеНДСПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.УвеличениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.УвеличениеПроцентовПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.УменьшениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.УменьшениеПроцентовПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ИзлишнеНачисленныеПроцентыПоАренде", Перечисления.ХозяйственныеОперации.ИзлишнеНачисленныеПроцентыПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ИзлишнеНачисленныеПроцентыПоАренде", Справочники.НастройкиХозяйственныхОпераций.ИзлишнеНачисленныеПроцентыПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_НедоначисленныеПроцентыПоАренде", Перечисления.ХозяйственныеОперации.НедоначисленныеПроцентыПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НедоначисленныеПроцентыПоАренде", Справочники.НастройкиХозяйственныхОпераций.НедоначисленныеПроцентыПоАренде);

КонецПроцедуры

// Определяет учитывается хотя бы одно ОС на балансе арендатора
// 
// Параметры:
// 	СписокОС - Массив -
// 	Дата - Дата -
// Возвращаемое значение:
// 	Булево -
Функция ЕстьПредметыАрендыНаБалансеАрендатора(СписокОС, Дата) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Договор.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет получено ли в аренду основное средство .
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство.
//  Дата - Дата - На дату.
// 
// Возвращаемое значение:
//  Булево - Истина, если ОС получено в аренду.
Функция ОсновноеСредствоПолученоВАренду(ОсновноеСредство, Дата) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Дата, ОсновноеСредство = &ОсновноеСредство) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет используется ли учет аренды по стандарту ФСБУ 25/2018.
//
// Параметры:
//  Организация - СправочникСсылка.Организации, Массив, Неопределено - Организация, для которой проверяется порядок учета.
//  Период	 - Дата - На какую дату нужно проверить (если не указана, то проверяется на текущую дату).
//  УчестьНачалоПерехода - Булево - Истина, если нужно учесть начало перехода на новый стандарт.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется учет аренды по ФСБУ 25/2018 
//                    для указанной организации или для любой организации, если организация не указана.
//
Функция ИспользуетсяУчетАрендыПоФСБУ25_2018(Организация = Неопределено, Период = '000101010000', УчестьНачалоПерехода = Ложь) Экспорт

	ИспользуетсяУчетАрендыПоФСБУ25_2018 = УчетАрендованныхОСЛокализация.ИспользуетсяУчетАрендыПоФСБУ25_2018(Организация, Период, УчестьНачалоПерехода);
	
	ИспользуетсяУчетАрендыПоФСБУ25_2018 = 
		ИспользуетсяУчетАрендыПоФСБУ25_2018 = Неопределено
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018 = Истина;
		
	Возврат ИспользуетсяУчетАрендыПоФСБУ25_2018;
	
КонецФункции
 
// Определяет дату начала учета аренды по стандарту ФСБУ 25/2018
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации -
// Возвращаемое значение:
// 	Дата - 
Функция НачалоУчетаАрендыПоФСБУ25_2018(Организация) Экспорт

	НачалоУчета = УчетАрендованныхОСЛокализация.НачалоУчетаАрендыПоФСБУ25_2018(Организация);

	Возврат ?(НачалоУчета <> Неопределено, НачалоУчета, '000101010000');

КонецФункции

// Определяет создан ли документ для перехода на ФСБУ25 2018.
// 
// Параметры:
//  ДатаДокумента - Дата - Дата документа
//  Организация - СправочникСсылка.Организации - Организация
// 
// Возвращаемое значение:
//  Булево - Создан для перехода на ФСБУ25 2018
Функция СозданДляПереходаНаФСБУ25_2018(ДатаДокумента, Организация) Экспорт
	
	Возврат КонецДня(ДатаДокумента) + 1 = НачалоУчетаАрендыПоФСБУ25_2018(Организация);
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	УчетАрендованныхОСЛокализация.НастроитьВариантыОтчетов(Настройки);

	#Область АрендованныеОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АрендованныеОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были получены в аренду?
									 |От кого были получены?
									 |Какой срок аренды?';
									 |en = 'View leased fixed assets.
									 |Check the lessors.
									 |Track the lease terms.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АрендованныеОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были получены в аренду?
									 |От кого были получены?
									 |Какой срок аренды?';
									 |en = 'View leased fixed assets.
									 |Check the lessors.
									 |Track the lease terms.'");
	#КонецОбласти
	
	#Область ВедомостьРасчетовПоАренде
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьРасчетовПоАренде);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Состояние расчетов по договорам аренды (лизинга).';
									|en = 'State of AR/AP under rental (financial lease) contracts.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоДоговоруКонтекст");
	#КонецОбласти
	
	#Область ПланФактныйАнализОплатИНачисленийПоАренде
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализОплатИНачисленийПоАренде);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ отклонений по фактически произведенным оплатам и начислениям в рамках договоров аренды (лизинга).';
									|en = 'Analyze variances in actually made payments and accruals under rental (financial lease) contracts.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоДоговоруКонтекст");
	#КонецОбласти	

КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Справочники.ДоговорыАренды);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВзаиморасчетовПоАренде);
	Объекты.Добавить(Метаданные.Документы.ВыкупАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ЗаключениеДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ИзменениеУсловийДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ИзменениеУсловийПередачиВАренду);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеУслугПоАренде);
	Объекты.Добавить(Метаданные.Документы.ПрекращениеДоговораАренды);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовАренды);

КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме "Учет арендованных ОС" с правами на изменение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДоговоровАренды");

	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаОстатковВзаиморасчетовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаОстатковИнвестицииВАренду");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВыкуповАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаключенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийУсловийАрендыОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийУсловийПередачиВАренду");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНачисленийПроцентовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПоступленийУслугПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрекращенийДоговоровАренды");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнвестицииВАренду");

	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовАренды");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаПланФактныйАнализОплатИНачисленийПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПечатьСправкиРасчетаНачисленияПроцентов");

	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");

КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме "Учет арендованных ОС" с правами на чтение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаЧтение(ОписаниеПрофиля) Экспорт

	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоговоровАренды");

	ОписаниеПрофиля.Роли.Добавить("ЧтениеВводаОстатковВзаиморасчетовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВводаОстатковИнвестицииВАренду");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВыкуповАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаключенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийУсловийАрендыОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийУсловийПередачиВАренду");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНачисленийПроцентовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоступленийУслугПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрекращенийДоговоровАренды");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнвестицииВАренду");

	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтераПоВнеоборотнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыРазделаВнеоборотныеАктивы");

	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");

КонецПроцедуры

// Формирует записи в регистрах заданий к закрытию месяца.
// 
// Параметры:
// 	Документ - ДокументОбъект -
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц) Экспорт

	УчетАрендованныхОСЛокализация.СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц);

	СформироватьЗаданияКНачислениюПроцентовПоАренде(ДанныеТаблиц);

	СформироватьЗаданияКНачислениюПроцентовПоДоходнойАренде(Документ, ДанныеТаблиц);
	
КонецПроцедуры

#Область Отчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   
// Возвращаемое значение:
//	СтрокаТаблицыЗначений -
//	Неопределено -  
Функция ДобавитьКомандуОтчетаВедомостьРасчетовПоДоговоруАренды(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовПоАренде)
		И ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовПоАренде.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ведомость расчетов по договору';
											|en = 'Contract AR/AP'");
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоДоговоруКонтекст");
		КомандаОтчет.КлючВарианта = "ПоДоговоруКонтекст";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоискОснованийИДокументовОплаты

// Устанавливает необходимые параметры для исполнения запросов по данным взаиморасчетов
//
// Параметры:
//  Запрос           - Запрос - 
//  ПараметрыПоиска  - см. ИнициализироватьПараметрыПоискаОснованийИДокументовОплаты
Процедура ПостобработкаЗапроса_ПоискОснованийИДокументовОплаты(Запрос, ПараметрыПоиска)
	
	// Подготовка данных
	
	// - организации
	Если ЗначениеЗаполнено(ПараметрыПоиска.Организации) Тогда
		Организации                 = ПараметрыПоиска.Организации;
		ВключитьОтборПоОрганизациям = Истина;
	Иначе
		Организации                 = Неопределено;
		ВключитьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	// - инициализация таблицы документов для отбора
	мТиповДокументовОтбора = Новый Массив;
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		мТиповДокументовОтбора.Добавить(ТипЗнч(Документ));
	КонецЦикла;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОтбора", Новый ОписаниеТипов(мТиповДокументовОтбора));
	
	Для каждого Документ Из ПараметрыПоиска.Документы Цикл
		новСтрока = ТаблицаДокументов.Добавить();
		новСтрока.ДокументОтбора = Документ;
	КонецЦикла;
	
	// - типы документов оплаты
	
	мТиповДокументовОплатыИсходящие = Новый Массив;
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповДокументовОплатыИсходящие.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	// - типы оснований (объектов) оплаты
	
	мТиповОснованийОплатыВходящие = Новый Массив;
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПервичныйДокумент"));
	мТиповОснованийОплатыВходящие.Добавить(Тип("ДокументСсылка.ПоступлениеУслугПоАренде"));
	
	// Установка параметров
	
	Запрос.УстановитьПараметр("Организации",                        Организации);
	Запрос.УстановитьПараметр("ТаблицаДокументов",                  ТаблицаДокументов);
	Запрос.УстановитьПараметр("ВключитьОтборПоОрганизациям",        ВключитьОтборПоОрганизациям);
	Запрос.УстановитьПараметр("ОграничитьТипыДокументовОплаты",     ПараметрыПоиска.ОграничитьТипыДокументовОплаты);
	Запрос.УстановитьПараметр("ОграничитьТипыОснованийОплаты",      ПараметрыПоиска.ОграничитьТипыОснованийОплаты);
	Запрос.УстановитьПараметр("мТиповДокументовОплатыИсходящие",    мТиповДокументовОплатыИсходящие);
	Запрос.УстановитьПараметр("мТиповОснованийОплатыВходящие",      мТиповОснованийОплатыВходящие);
		
	// Обработка текста запроса
	
	// - Текст отбора по документам
	
	ИмяПоляОтбора    = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяПоля;
	ИмяТаблицыОтбора = ПараметрыПоиска.ПараметрыОтбораПоТаблицеДокументов.ИмяТаблицыОтбора;
	
	ЗаданОтборПоВременнойТаблице = ЗначениеЗаполнено(ИмяТаблицыОтбора) И ЗначениеЗаполнено(ИмяПоляОтбора);
	
	Если НЕ ЗаданОтборПоВременнойТаблице Тогда
		
		ИмяТаблицыОтбора = "ТаблицаОтбораОснованийИДокументовОплаты";
		ИмяПоляОтбора    = "ДокументОтбора";
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.ДокументОтбора КАК ДокументОтбора
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты_Предварительная
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументов.ДокументОтбора
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	ТаблицаОтбораОснованийИДокументовОплаты_Предварительная КАК ТаблицаДокументов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|;
		|
		|УНИЧТОЖИТЬ ТаблицаОтбораОснованийИДокументовОплаты_Предварительная
		|";
		
	Иначе
		
		ТекстЗапросаСозданияТаблицыОтбора = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИмяПоляДокумента КАК ДокументОтбора,
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ТаблицаОтбораОснованийИДокументовОплаты
		|ИЗ
		|	ИмяТаблицыОтбораОснованийИДокументовОплаты КАК ТаблицаДокументов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтбора
		|";
		
	КонецЕсли;
	
	ТекстЗапросаУничтоженияТаблицыОтбора = "УНИЧТОЖИТЬ ТаблицаОтбораОснованийИДокументовОплаты";
	
	Запрос.Текст = ТекстЗапросаСозданияТаблицыОтбора
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + Запрос.Текст
					+ ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаУничтоженияТаблицыОтбора;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОтбораОснованийИДокументовОплаты", ИмяТаблицыОтбора);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляДокумента",                           ИмяПоляОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенноеФормированиеДвиженийВНА

// 
// Параметры:
//  СписокЗапросов - Массив - Список запросов
//  ИспользуемыеВТ - Массив - Используемые временные таблицы
Процедура ДополнитьПараметрыОтложенногоФормированияДвижений(СписокЗапросов, ИспользуемыеВТ) Экспорт
	
	ИспользуемыеВТ.Добавить("ВТ_РасчетыПоФинансовымИнструментам");
	ИспользуемыеВТ.Добавить("ВТ_ИнвестицииВАренду");
	
	#Область ВТ_РасчетыПоФинансовымИнструментам
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Договор КАК Договор,
	|	АрендованныеОС.Договор.Организация КАК Организация,
	|	АрендованныеОС.Договор.Партнер КАК Партнер,
	|	АрендованныеОС.Договор.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ АрендованныеОС
	|
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(
	|		&КонецПредыдущегоМесяца,
	|		ОсновноеСредство В (ВЫБРАТЬ Т.ОбъектУчета ИЗ ВтДанныеКРасчету КАК Т)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды), 
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Договор КАК Договор,
	|	АрендованныеОС.Договор.Организация КАК Организация,
	|	АрендованныеОС.Договор.Партнер КАК Партнер,
	|	АрендованныеОС.Договор.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ИЗ
	|	РегистрСведений.АрендованныеОС КАК АрендованныеОС
	|
	|ГДЕ
	|	АрендованныеОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АрендованныеОС.Активность
	|	И АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды), 
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))
	|
	|	И АрендованныеОС.ОсновноеСредство В (ВЫБРАТЬ Т.ОбъектУчета ИЗ ВтДанныеКРасчету КАК Т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Партнер,
	|	Контрагент,
	|	НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	АрендованныеОС.Договор КАК Договор
	|
	|ПОМЕСТИТЬ ДанныеКРасчетуАренда
	|
	|ИЗ
	|	ВтДанныеКРасчету КАК ДанныеКРасчету
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АрендованныеОС КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = ДанныеКРасчету.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АрендованныеОС.Договор КАК Договор,
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|
	|ПОМЕСТИТЬ ОтборРасчетов
	|
	|ИЗ
	|	АрендованныеОС КАК АрендованныеОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = АрендованныеОС.Организация
	|			И РегистрАналитикаУчетаПоПартнерам.Партнер = АрендованныеОС.Партнер
	|			И РегистрАналитикаУчетаПоПартнерам.Контрагент = АрендованныеОС.Контрагент 
	|			И РегистрАналитикаУчетаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности = АрендованныеОС.НаправлениеДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаОстаток КАК Сумма,
	|	ДанныеРегистра.СуммаУпрОстаток КАК СуммаУпр,
	|	ДанныеРегистра.СуммаРеглОстаток КАК СуммаРегл
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментам_Остатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|			&НачалоМесяца,
	|			(АналитикаУчетаПоПартнерам, Договор) В
	|				(ВЫБРАТЬ
	|					ОтборРасчетов.КлючАналитики,
	|					ОтборРасчетов.Договор
	|				ИЗ
	|					ОтборРасчетов КАК ОтборРасчетов)) КАК ДанныеРегистра
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.Сумма
	|		ИНАЧЕ -ДанныеРегистра.Сумма
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.СуммаУпр
	|		ИНАЧЕ -ДанныеРегистра.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.СуммаРегл
	|		ИНАЧЕ -ДанныеРегистра.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл
	|
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментам_Движения
	|
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ДанныеРегистра
	|
	|ГДЕ
	|	ДанныеРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеРегистра.Активность
	|
	|	И (ДанныеРегистра.АналитикаУчетаПоПартнерам, ДанныеРегистра.Договор) В
	|				(ВЫБРАТЬ
	|					ОтборРасчетов.КлючАналитики,
	|					ОтборРасчетов.Договор
	|				ИЗ
	|					ОтборРасчетов КАК ОтборРасчетов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчетуАренда.Ссылка КАК Ссылка,
	|	ДанныеКРасчетуАренда.Дата,
	|	ДанныеКРасчетуАренда.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеКРасчетуАренда.Договор КАК Договор,
	|	ДанныеКРасчетуАренда.ТипСуммы КАК ТипСуммы,
	|	ДанныеКРасчетуАренда.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеКРасчетуАренда.Валюта КАК Валюта,
	|
	|	СУММА(ДанныеКРасчетуАренда.Сумма) КАК Сумма,
	|	СУММА(ДанныеКРасчетуАренда.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДанныеКРасчетуАренда.СуммаРегл) КАК СуммаРегл
	|
	|ПОМЕСТИТЬ ВТ_РасчетыПоФинансовымИнструментам
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчетуАренда.Ссылка КАК Ссылка,
	|		ДанныеКРасчетуАренда.Дата КАК Дата,
	|		ДанныеКРасчетуАренда.Договор КАК Договор,
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|		ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ДанныеРегистра.Валюта КАК Валюта,
	|		ЕСТЬNULL(ДанныеРегистра.Сумма, 0) КАК Сумма,
	|		ЕСТЬNULL(ДанныеРегистра.СуммаУпр, 0) КАК СуммаУпр,
	|		ЕСТЬNULL(ДанныеРегистра.СуммаРегл, 0) КАК СуммаРегл
	|	ИЗ
	|		ДанныеКРасчетуАренда КАК ДанныеКРасчетуАренда
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоФинансовымИнструментам_Остатки КАК ДанныеРегистра
	|			ПО (ДанныеРегистра.Договор = ДанныеКРасчетуАренда.Договор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчетуАренда.Ссылка,
	|		ДанныеКРасчетуАренда.Дата,
	|		ДанныеКРасчетуАренда.Договор,
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|		ДанныеРегистра.ТипСуммы,
	|		ДанныеРегистра.РасчетныйДокумент,
	|		ДанныеРегистра.Валюта,
	|		ЕСТЬNULL(ДанныеРегистра.Сумма, 0),
	|		ЕСТЬNULL(ДанныеРегистра.СуммаУпр, 0),
	|		ЕСТЬNULL(ДанныеРегистра.СуммаРегл, 0)
	|	ИЗ
	|		ДанныеКРасчетуАренда КАК ДанныеКРасчетуАренда
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоФинансовымИнструментам_Движения КАК ДанныеРегистра
	|			ПО (ДанныеРегистра.Договор = ДанныеКРасчетуАренда.Договор)
	|				И (ДанныеРегистра.Регистратор <> ДанныеКРасчетуАренда.Ссылка)
	|				И (ДанныеРегистра.Период <= ДанныеКРасчетуАренда.Дата
	|					ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.НачислениеПроцентовПоАренде)
	|
	|	) КАК ДанныеКРасчетуАренда
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчетуАренда.Ссылка,
	|	ДанныеКРасчетуАренда.Дата,
	|	ДанныеКРасчетуАренда.АналитикаУчетаПоПартнерам,
	|	ДанныеКРасчетуАренда.Договор,
	|	ДанныеКРасчетуАренда.ТипСуммы,
	|	ДанныеКРасчетуАренда.РасчетныйДокумент,
	|	ДанныеКРасчетуАренда.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор
	|";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВТ_ИнвестицииВАренду
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеРегистра.АрендныеПлатежиОстаток КАК АрендныеПлатежи,
	|	ДанныеРегистра.АрендныеПлатежиРеглОстаток КАК АрендныеПлатежиРегл,
	|	ДанныеРегистра.АрендныеПлатежиУпрОстаток КАК АрендныеПлатежиУпр,
	|	ДанныеРегистра.НГЛСРеглОстаток КАК НГЛСРегл,
	|	ДанныеРегистра.НГЛСУпрОстаток КАК НГЛСУпр,
	|	ДанныеРегистра.ПроцентныйДисконтОстаток КАК ПроцентныйДисконт,
	|	ДанныеРегистра.ПроцентныйДисконтУпрОстаток КАК ПроцентныйДисконтУпр,
	|	ДанныеРегистра.ПроцентныйДисконтРеглОстаток КАК ПроцентныйДисконтРегл
	|ПОМЕСТИТЬ ИнвестицииВАренду_Остатки
	|ИЗ
	|	РегистрНакопления.ИнвестицииВАренду.Остатки(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ВтДанныеКРасчету КАК ДанныеКРасчету)) КАК ДанныеРегистра
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.АрендныеПлатежи
	|		ИНАЧЕ -ДанныеРегистра.АрендныеПлатежи
	|	КОНЕЦ КАК АрендныеПлатежи,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.АрендныеПлатежиРегл
	|		ИНАЧЕ -ДанныеРегистра.АрендныеПлатежиРегл
	|	КОНЕЦ КАК АрендныеПлатежиРегл,
	|
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.АрендныеПлатежиУпр
	|		ИНАЧЕ -ДанныеРегистра.АрендныеПлатежиУпр
	|	КОНЕЦ КАК АрендныеПлатежиУпр,
	|
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.НГЛСРегл
	|		ИНАЧЕ -ДанныеРегистра.НГЛСРегл
	|	КОНЕЦ КАК НГЛСРегл,
	|
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.НГЛСУпр
	|		ИНАЧЕ -ДанныеРегистра.НГЛСУпр
	|	КОНЕЦ КАК НГЛСУпр,
	|
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.ПроцентныйДисконт
	|		ИНАЧЕ -ДанныеРегистра.ПроцентныйДисконт
	|	КОНЕЦ КАК ПроцентныйДисконт,
	|
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.ПроцентныйДисконтУпр
	|		ИНАЧЕ -ДанныеРегистра.ПроцентныйДисконтУпр
	|	КОНЕЦ КАК ПроцентныйДисконтУпр,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.ПроцентныйДисконтРегл
	|		ИНАЧЕ -ДанныеРегистра.ПроцентныйДисконтРегл
	|	КОНЕЦ КАК ПроцентныйДисконтРегл
	|
	|ПОМЕСТИТЬ ИнвестицииВАренду_Движения
	|ИЗ
	|	РегистрНакопления.ИнвестицииВАренду КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеРегистра.Активность
	|
	|	И (ДанныеРегистра.Организация, ДанныеРегистра.ОсновноеСредство) В
	|		(ВЫБРАТЬ
	|			ДанныеКРасчету.Организация,
	|			ДанныеКРасчету.ОбъектУчета
	|		ИЗ
	|			ВтДанныеКРасчету КАК ДанныеКРасчету)
	|
	|	И НЕ ДанныеРегистра.Регистратор В
	|		(ВЫБРАТЬ
	|			ДанныеКРасчету.Ссылка
	|		ИЗ
	|			ВтДанныеКРасчету КАК ДанныеКРасчету)
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|
	|	МАКСИМУМ(ДанныеКРасчету.Договор) КАК Договор,
	|	МАКСИМУМ(ДанныеКРасчету.Валюта) КАК Валюта,
	|	МАКСИМУМ(ДанныеКРасчету.ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчета,
	|
	|	СУММА(ДанныеКРасчету.АрендныеПлатежи) КАК АрендныеПлатежи,
	|	СУММА(ДанныеКРасчету.АрендныеПлатежиРегл) КАК АрендныеПлатежиРегл,
	|	СУММА(ДанныеКРасчету.АрендныеПлатежиУпр) КАК АрендныеПлатежиУпр,
	|	СУММА(ДанныеКРасчету.НГЛСРегл) КАК НГЛСРегл,
	|	СУММА(ДанныеКРасчету.НГЛСУпр) КАК НГЛСУпр,
	|	СУММА(ДанныеКРасчету.ПроцентныйДисконт) КАК ПроцентныйДисконт,
	|	СУММА(ДанныеКРасчету.ПроцентныйДисконтУпр) КАК ПроцентныйДисконтУпр,
	|	СУММА(ДанныеКРасчету.ПроцентныйДисконтРегл) КАК ПроцентныйДисконтРегл
	|
	|ПОМЕСТИТЬ ВТ_ИнвестицииВАренду
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ИнвестицииВАренду.Договор КАК Договор,
	|		ИнвестицииВАренду.Валюта КАК Валюта,
	|		ИнвестицииВАренду.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежи, 0) КАК АрендныеПлатежи,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежиРегл, 0) КАК АрендныеПлатежиРегл,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежиУпр, 0) КАК АрендныеПлатежиУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.НГЛСРегл, 0) КАК НГЛСРегл,
	|		ЕСТЬNULL(ИнвестицииВАренду.НГЛСУпр, 0) КАК НГЛСУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконт, 0) КАК ПроцентныйДисконт,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконтУпр, 0) КАК ПроцентныйДисконтУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконтРегл, 0) КАК ПроцентныйДисконтРегл
	|	ИЗ
	|		ВтДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ИнвестицииВАренду_Остатки КАК ИнвестицииВАренду
	|			ПО (ИнвестицииВАренду.ОсновноеСредство = ДанныеКРасчету.ОбъектУчета)
	|				И (ИнвестицииВАренду.Организация = ДанныеКРасчету.Организация)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		ИнвестицииВАренду.Договор КАК Договор,
	|		ИнвестицииВАренду.Валюта КАК Валюта,
	|		ИнвестицииВАренду.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежи, 0) КАК АрендныеПлатежи,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежиРегл, 0) КАК АрендныеПлатежиРегл,
	|		ЕСТЬNULL(ИнвестицииВАренду.АрендныеПлатежиУпр, 0) КАК АрендныеПлатежиУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.НГЛСРегл, 0) КАК НГЛСРегл,
	|		ЕСТЬNULL(ИнвестицииВАренду.НГЛСУпр, 0) КАК НГЛСУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконт, 0) КАК ПроцентныйДисконт,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконтУпр, 0) КАК ПроцентныйДисконтУпр,
	|		ЕСТЬNULL(ИнвестицииВАренду.ПроцентныйДисконтРегл, 0) КАК ПроцентныйДисконтРегл
	|	ИЗ
	|		ВтДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ИнвестицииВАренду_Движения КАК ИнвестицииВАренду
	|			ПО (ИнвестицииВАренду.ОсновноеСредство = ДанныеКРасчету.ОбъектУчета)
	|				И (ИнвестицииВАренду.Организация = ДанныеКРасчету.Организация)
	|				И (ИнвестицииВАренду.Регистратор <> ДанныеКРасчету.Ссылка)
	|				И (ТИПЗНАЧЕНИЯ(ИнвестицииВАренду.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|						ИЛИ ИнвестицииВАренду.Период <= ДанныеКРасчету.Дата)
	|
	|	) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеКРасчету.АрендныеПлатежи) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.АрендныеПлатежиРегл) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.АрендныеПлатежиУпр) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.НГЛСРегл) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.НГЛСУпр) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.ПроцентныйДисконт) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.ПроцентныйДисконтУпр) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.ПроцентныйДисконтРегл) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация,
	|	Валюта
	|";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтРасходыПриПрекращенииДоговораАренды(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втРасходыПриПрекращенииДоговораАренды";

	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ОтложенноеФормированиеДвиженийВНА.ТекстЗапросаПустыеТаблицыОтложенныхДвижений(Запрос, ТекстыЗапроса);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА СУММА(РасчетыОстатки.Сумма) > 0
	|			ТОГДА СУММА(РасчетыОстатки.Сумма)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.СуммаУпр) > 0
	|			ТОГДА СУММА(РасчетыОстатки.СуммаУпр)
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.Сумма) > 0
	|			ТОГДА СУММА(РасчетыОстатки.Сумма * &КоэффициентПересчетаВВалютуУпр)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.СуммаРегл) > 0
	|			ТОГДА СУММА(РасчетыОстатки.СуммаРегл)
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.Сумма) > 0
	|			ТОГДА СУММА(РасчетыОстатки.Сумма * &КоэффициентПересчетаВВалютуРегл)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	&ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&ХО_ОтражениеАрендныхОбязательствВРасходах КАК ХозяйственнаяОперация,
	|	&НастройкаХО_ОтражениеАрендныхОбязательствВРасходах КАК НастройкаХозяйственнойОперации
	|ПОМЕСТИТЬ втРасходыПриПрекращенииДоговораАренды
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыОстатки.Сумма КАК Сумма,
	|		РасчетыОстатки.СуммаУпр КАК СуммаУпр,
	|		РасчетыОстатки.СуммаРегл КАК СуммаРегл
	|	ИЗ
	|		ВТ_РасчетыПоФинансовымИнструментам КАК РасчетыОстатки
	|	ГДЕ
	|		РасчетыОстатки.Ссылка = &Ссылка
	|		И РасчетыОстатки.Договор = &Договор
	|		И РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втИзменениеАрендныхОбязательств.Сумма,
	|		втИзменениеАрендныхОбязательств.СуммаУпр,
	|		втИзменениеАрендныхОбязательств.СуммаРегл
	|	ИЗ
	|		втИзменениеАрендныхОбязательств КАК втИзменениеАрендныхОбязательств) КАК РасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО (АналитикаПоПартнерам.Организация = &Организация)
	|			И (АналитикаПоПартнерам.Партнер = &Партнер)
	|			И (АналитикаПоПартнерам.Контрагент = &Контрагент)
	|			И (АналитикаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И (АналитикаПоПартнерам.НаправлениеДеятельности = &НаправлениеДеятельности)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО)
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|			КОГДА СУММА(РасчетыОстатки.Сумма) > 0
	|				ТОГДА СУММА(РасчетыОстатки.Сумма)
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0
	|		ИЛИ ВЫБОР
	|			КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|					И СУММА(РасчетыОстатки.СуммаУпр) > 0
	|				ТОГДА СУММА(РасчетыОстатки.СуммаУпр)
	|			КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|					И СУММА(РасчетыОстатки.Сумма) > 0
	|				ТОГДА СУММА(РасчетыОстатки.Сумма * &КоэффициентПересчетаВВалютуУпр)
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0
	|		ИЛИ ВЫБОР
	|			КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|					И СУММА(РасчетыОстатки.СуммаРегл) > 0
	|				ТОГДА СУММА(РасчетыОстатки.СуммаРегл)
	|			КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|					И СУММА(РасчетыОстатки.Сумма) > 0
	|				ТОГДА СУММА(РасчетыОстатки.Сумма * &КоэффициентПересчетаВВалютуРегл)
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Истина);

КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтДоходыПриПрекращенииДоговораАренды(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втДоходыПриПрекращенииДоговораАренды";

	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ОтложенноеФормированиеДвиженийВНА.ТекстЗапросаПустыеТаблицыОтложенныхДвижений(Запрос, ТекстыЗапроса);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР
	|		КОГДА СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.Сумма)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.СуммаУпр) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.СуммаУпр)
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА - СУММА(РасчетыОстатки.Сумма) * &КоэффициентПересчетаВВалютуУпр
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	 
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.СуммаРегл) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.СуммаРегл)
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.Сумма) * &КоэффициентПересчетаВВалютуРегл
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	&ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&ХО_ОтражениеАрендныхОбязательствВДоходах КАК ХозяйственнаяОперация,
	|	&НастройкаХО_ОтражениеАрендныхОбязательствВДоходах КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ втДоходыПриПрекращенииДоговораАренды
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыОстатки.Сумма КАК Сумма,
	|		РасчетыОстатки.СуммаУпр КАК СуммаУпр,
	|		РасчетыОстатки.СуммаРегл КАК СуммаРегл
	|	ИЗ
	|		ВТ_РасчетыПоФинансовымИнструментам КАК РасчетыОстатки
	|	ГДЕ
	|		РасчетыОстатки.Ссылка = &Ссылка
	|		И РасчетыОстатки.Договор = &Договор
	|		И РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|		
	|	ВЫБРАТЬ
	|		втИзменениеАрендныхОбязательств.Сумма КАК Сумма,
	|		втИзменениеАрендныхОбязательств.СуммаУпр КАК СуммаУпр,
	|		втИзменениеАрендныхОбязательств.СуммаРегл КАК СуммаРегл
	|	ИЗ
	|		втИзменениеАрендныхОбязательств КАК втИзменениеАрендныхОбязательств
	|
	|	) КАК РасчетыОстатки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО АналитикаПоПартнерам.Организация = &Организация
	|			И АналитикаПоПартнерам.Партнер = &Партнер
	|			И АналитикаПоПартнерам.Контрагент = &Контрагент
	|			И АналитикаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И АналитикаПоПартнерам.НаправлениеДеятельности = &НаправлениеДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО)
	|
	|ИМЕЮЩИЕ
	|
	|	(ВЫБОР
	|		КОГДА СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.Сумма)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0
	|
	|	ИЛИ ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.СуммаУпр) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.СуммаУпр)
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|				И СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА - СУММА(РасчетыОстатки.Сумма) * &КоэффициентПересчетаВВалютуУпр
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0
	|	
	|	ИЛИ ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.СуммаРегл) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.СуммаРегл)
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И СУММА(РасчетыОстатки.Сумма) < 0
	|
	|			ТОГДА -СУММА(РасчетыОстатки.Сумма) * &КоэффициентПересчетаВВалютуРегл
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Истина);

КонецПроцедуры

#КонецОбласти

#Область НачислениеПроцентовПоАренде

// Вызывается при выполнении операции закрытия месяца "Начисление процентов по аренде".
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
Процедура ВыполнитьОперациюНачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт

	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоАренде;

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
			
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных = 0;
		
		НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		НомерЗадания = РегистрыСведений.ЗаданияКЗакрытиюМесяца.УвеличитьНомерЗадания();
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		ЕстьОшибкиВыполненияРасчета = Ложь;
		
		Попытка
			
			Если ЗначениеЗаполнено(ДоступныеОрганизации) И НЕ ЗначениеЗаполнено(ДанныеКРасчетуЗаМесяц.Организация) Тогда
				ОрганизацииКРасчету = Новый Массив;
				Для Каждого Организация Из ДоступныеОрганизации Цикл
					ОрганизацииКРасчету.Добавить(Организация);
				КонецЦикла;
				ДанныеКРасчетуЗаМесяц.Организация = ОрганизацииКРасчету;
			КонецЕсли;
			
			Документы.НачислениеПроцентовПоАренде.СоздатьДокументы(
							НачалоРасчета,
							ДанныеКРасчетуЗаМесяц.Организация,
							ХозяйственнаяОперация,
							КоличествоДанных,
							ЕстьОшибки);
		
			ЕстьОшибкиВыполненияРасчета = ЗакрытиеМесяцаСервер.ЕстьОшибкиВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДоступныеОрганизации, 
				НачалоРасчета);
											
		Исключение
			
			ЕстьОшибки = Истина;
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ЕстьОшибкиВыполненияРасчета Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика, ДанныеКРасчетуЗаМесяц);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаданияКНачислениюПроцентовПоАренде(ДанныеТаблиц)
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018() Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("УсловияДоговоровАренды");
	СписокТаблиц.Добавить("ГрафикНачисленияПроцентовПоАренде");
	СписокТаблиц.Добавить("ПрочиеАктивыПассивы");
	
	ТекстОбъединенияДанных = ВнеоборотныеАктивы.СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц);
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеПроцентовПоАренде) КАК Операция,
	|	ИзмененныеДанные.Организация КАК Организация,
	|	ИзмененныеДанные.Документ КАК Документ,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА ИзмененныеДанные.Период < &ДатаНачалаУчета24
	|					ТОГДА &ДатаНачалаУчета24
	|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатковВнеоборотныхАктивов24.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВзаиморасчетовПоАренде)
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатковВзаиморасчетовПоАренде.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ИзменениеУсловийДоговораАренды)
	|					ТОГДА НАЧАЛОПЕРИОДА(ИзменениеУсловийДоговораАренды.Дата, МЕСЯЦ)
	|				ИНАЧЕ ИзмененныеДанные.Период
	|			КОНЕЦ) КАК Месяц
	|ИЗ
	|	ТекстОбъединенияДанных_Переопределямый КАК ИзмененныеДанные
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ВводОстатковВнеоборотныхАктивов24
	|		ПО ВводОстатковВнеоборотныхАктивов24.Ссылка = ИзмененныеДанные.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВзаиморасчетовПоАренде КАК ВводОстатковВзаиморасчетовПоАренде
	|		ПО ВводОстатковВзаиморасчетовПоАренде.Ссылка = ИзмененныеДанные.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеУсловийДоговораАренды КАК ИзменениеУсловийДоговораАренды
	|		ПО ИзменениеУсловийДоговораАренды.Ссылка = ИзмененныеДанные.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединенияДанных_Переопределямый", "(" + ТекстОбъединенияДанных + ")");
	
	ИспользуемыеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеПроцентовПоДоходнойАренде

// Вызывается при выполнении операции закрытия месяца "Начисление процентов по доходной аренде".
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
Процедура ВыполнитьОперациюНачислениеПроцентовПоДоходнойАренде(ПараметрыОбработчика) Экспорт

	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоДоходнойАренде;

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
			
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных = 0;
		
		НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		НомерЗадания = РегистрыСведений.ЗаданияКЗакрытиюМесяца.УвеличитьНомерЗадания();
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		ЕстьОшибкиВыполненияРасчета = Ложь;
		
		Попытка
			
			Если ЗначениеЗаполнено(ДоступныеОрганизации) И НЕ ЗначениеЗаполнено(ДанныеКРасчетуЗаМесяц.Организация) Тогда
				ОрганизацииКРасчету = Новый Массив;
				Для Каждого Организация Из ДоступныеОрганизации Цикл
					ОрганизацииКРасчету.Добавить(Организация);
				КонецЦикла;
				ДанныеКРасчетуЗаМесяц.Организация = ОрганизацииКРасчету;
			КонецЕсли;
			
			Документы.НачислениеПроцентовПоАренде.СоздатьДокументы(
							НачалоРасчета,
							ДанныеКРасчетуЗаМесяц.Организация,
							ХозяйственнаяОперация,
							КоличествоДанных,
							ЕстьОшибки);
		
			ЕстьОшибкиВыполненияРасчета = ЗакрытиеМесяцаСервер.ЕстьОшибкиВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДоступныеОрганизации, 
				НачалоРасчета);
											
		Исключение
			
			ЕстьОшибки = Истина;
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ДоступныеОрганизации,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ЕстьОшибкиВыполненияРасчета Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика, ДанныеКРасчетуЗаМесяц);
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаданияКНачислениюПроцентовПоДоходнойАренде(Документ, ДанныеТаблиц)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25") Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетСтоимостиИнвестицииВАренду.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ГрафикНачисленияПроцентовПоДоходнойАренде");
	
	ТекстОбъединенияДанных = ВнеоборотныеАктивы.СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, "ОсновноеСредство");
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеПроцентовПоДоходнойАренде) КАК Операция,
	|	ИзмененныеДанные.Организация КАК Организация,
	|	ИзмененныеДанные.Документ КАК Документ,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА ИзмененныеДанные.Период < &ДатаНачалаУчета24
	|					ТОГДА &ДатаНачалаУчета24
	|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковИнвестицииВАренду)
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1)
	|				ИНАЧЕ ИзмененныеДанные.Период
	|			КОНЕЦ) КАК Месяц
	|ИЗ
	|	ТекстОбъединенияДанных_Переопределямый КАК ИзмененныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеПроцентовПоДоходнойАренде) КАК Операция,
	|	ИзмененныеДанные.Организация КАК Организация,
	|	ИзмененныеДанные.Документ КАК Документ,
	|	НАЧАЛОПЕРИОДА(ИнвестицииВАренду.Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	ТекстОбъединенияДанных_Переопределямый КАК ИзмененныеДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИнвестицииВАренду КАК ИнвестицииВАренду
	|	ПО ИнвестицииВАренду.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство
	|		И ИнвестицииВАренду.Период >= ИзмененныеДанные.Период
	|		
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВозвратОСИзАренды2_4)
	|	И ИнвестицииВАренду.Активность
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединенияДанных_Переопределямый", "(" + ТекстОбъединенияДанных + ")");
	
	ИспользуемыеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// 
// Параметры:
//  СписокДокументов - Массив - 
Процедура СписокДокументовПодсистемы(СписокДокументов) Экспорт
	
	СписокДокументов.Добавить("ВводОстатковВзаиморасчетовПоАренде");
	СписокДокументов.Добавить("ВводОстатковИнвестицииВАренду");
	СписокДокументов.Добавить("ВыкупАрендованныхОС");
	СписокДокументов.Добавить("ЗаключениеДоговораАренды");
	СписокДокументов.Добавить("ИзменениеУсловийДоговораАренды");
	СписокДокументов.Добавить("ИзменениеУсловийПередачиВАренду");
	СписокДокументов.Добавить("НачислениеПроцентовПоАренде");
	СписокДокументов.Добавить("ПоступлениеУслугПоАренде");
	СписокДокументов.Добавить("ПрекращениеДоговораАренды");
	
КонецПроцедуры

// Рассчитывает ставку, стоимость и график начисления процентов.
// 
// Параметры:
// 	ПараметрыРасчета - см. ПараметрыРасчетаСтавкиСтоимостиПроцентов
Процедура РассчитатьСтавкуСтоимостьПроценты(ПараметрыРасчета) Экспорт
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018(ПараметрыРасчета.Организация, ПараметрыРасчета.Дата, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.Договор)
		ИЛИ ПараметрыРасчета.ГрафикОплатУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.РеквизитыДоговора = Неопределено Тогда
		ПараметрыРасчета.РеквизитыДоговора = РеквизитыДоговораАренды(ПараметрыРасчета.Договор);
	КонецЕсли;
	
	НачалоПериода = ?(ПараметрыРасчета.ИзменениеУсловий И НЕ ПараметрыРасчета.СозданДляПерехода,
			ПараметрыРасчета.ДатаИзмененияАренды, ПараметрыРасчета.ДатаНачалаАренды);
	
	ГрафикОплатДляДисконтирования = ГрафикОплатДляДисконтирования(ПараметрыРасчета.ГрафикОплатУслуг, НачалоПериода);
	
	ГрафикПлатежей = Новый ТаблицаЗначений; 
	ГрафикПлатежей.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ГрафикПлатежей.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой));

	// НДС надо брать из графика начислений, рассчитывать по графику оплат неправильно
	СуммаНДС = УчетАрендованныхОСКлиентСервер.СуммаНДСВДокументеАренды(
					ПараметрыРасчета.ГрафикНачисленияУслуг, 
					ПараметрыРасчета.СуммаУслугПоАренде, 
					ПараметрыРасчета.СуммаОбеспечительногоПлатежа, 
					ПараметрыРасчета.СуммаНДСВыкупаПредметовАренды, 
					ПараметрыРасчета.СтавкаНДС);
	
	ВсегоПлатежей = 0;
	АвансыДоНачалаАрендыБезНДС = 0;
	ПлатежиДоИзмененияУсловий = 0;
	
	// Определим сумму зачтенного обеспечительного платежа по графику начислений 
	// для того чтобы можно было учесть его при распределении на стоимость товаров
	НачисленныйОбеспечительныйПлатежБезНДС = 0;
	Для Каждого ИсходнаяСтрокаНачислений Из ПараметрыРасчета.ГрафикНачисленияУслуг Цикл
		Если ИсходнаяСтрокаНачислений.Дата < НачалоПериода Тогда
			НачисленныйОбеспечительныйПлатежБезНДС = НачисленныйОбеспечительныйПлатежБезНДС
				+ ИсходнаяСтрокаНачислений.ОбеспечительныйПлатеж - ИсходнаяСтрокаНачислений.ОбеспечительныйПлатежНДС;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИсходнаяСтрокаГрафика Из ГрафикОплатДляДисконтирования Цикл		
		
		ВсегоПлатежей = 
			ВсегоПлатежей 
			+ ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж
			+ ИсходнаяСтрокаГрафика.УслугаПоАренде
			+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость;
		
		СуммаСтрокиБезНДС =
			ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж - ИсходнаяСтрокаГрафика.ОбеспечительныйПлатежНДС
			+ ИсходнаяСтрокаГрафика.УслугаПоАренде - ИсходнаяСтрокаГрафика.УслугаПоАрендеНДС
			+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость - ИсходнаяСтрокаГрафика.ВыкупнаяСтоимостьНДС;
			
		Если ИсходнаяСтрокаГрафика.Дата < НачалоПериода Тогда
			ПлатежиДоИзмененияУсловий = ПлатежиДоИзмененияУсловий + СуммаСтрокиБезНДС;
			Если ИсходнаяСтрокаГрафика.Дата < ПараметрыРасчета.ДатаНачалаАренды Тогда
				АвансыДоНачалаАрендыБезНДС = АвансыДоНачалаАрендыБезНДС + СуммаСтрокиБезНДС;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СтрокаГрафика = ГрафикПлатежей.Добавить();
		СтрокаГрафика.Дата = ИсходнаяСтрокаГрафика.Дата;
		СтрокаГрафика.Сумма = СуммаСтрокиБезНДС;
		
	КонецЦикла;
	
	Если ГрафикПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГрафика = ГрафикПлатежей.Вставить(0);
	СтрокаГрафика.Дата = ?(ПараметрыРасчета.ИзменениеУсловий И НЕ ПараметрыРасчета.СозданДляПерехода, НачалоПериода - 86400, НачалоПериода);
	
	#Область РасчетСтавкиИлиСтоимости
	Если ПараметрыРасчета.РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = 
			Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
		
		Если НЕ ПараметрыРасчета.ИзменениеУсловий ИЛИ ПараметрыРасчета.СозданДляПерехода Тогда
			ПараметрыРасчета.ПриведеннаяСтоимость = УчетАрендованныхОСКлиентСервер.ПриведеннаяСтоимость(
				ПараметрыРасчета.СтоимостьПредметовАренды,
				ГрафикОплатДляДисконтирования,
				НачалоПериода);
		Иначе
			КоэффициентРаспределения = УчетАрендованныхОСКлиентСервер.КоэффициентРаспределенияСтоимости(ПараметрыРасчета.ТаблицаОС, ПараметрыРасчета.РеквизитыДоговора);
			
			СтоимостьДобавленныхПредметовАренды = УчетАрендованныхОСКлиентСервер.СтоимостьДобавленныхПредметовАренды(ПараметрыРасчета.ТаблицаОС);
			
			ПараметрыРасчета.ПриведеннаяСтоимость = 
				ПараметрыРасчета.ПриведеннаяСтоимостьПоПредыдущимУсловиям
				* КоэффициентРаспределения
				+ СтоимостьДобавленныхПредметовАренды;
		КонецЕсли;
		
		Если ПараметрыРасчета.ПриведеннаяСтоимость <> 0 Тогда
			
			СтрокаГрафика = ГрафикПлатежей[0];
			СтрокаГрафика.Сумма = -ПараметрыРасчета.ПриведеннаяСтоимость;
			
			Попытка
				ПараметрыРасчета.ПроцентнаяСтавка = ПроцентнаяСтавка(ГрафикПлатежей);
			Исключение
				ПараметрыРасчета.ПроцентнаяСтавка = 0;
				ТекстСообщения = НСтр("ru = 'Не удалось рассчитать процентную ставку. Проверьте график оплат и сумму вложений лизингодателя.';
										|en = 'Cannot calculate an interest rate. Check the payment schedule and amount of the lessor''s investments.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СуммаОбеспечительногоПлатежа",,);
			КонецПопытки;
			
			
		Иначе
			ПараметрыРасчета.ПроцентнаяСтавка = 0;
		КонецЕсли;
		
	Иначе
		
		СтрокаГрафика = ГрафикПлатежей[0];
		СтрокаГрафика.Сумма = 0;
			
		ПараметрыРасчета.ПриведеннаяСтоимость = ПриведеннаяСтоимостьПоСтавкеИГрафику(ПараметрыРасчета.ПроцентнаяСтавка, ГрафикПлатежей);
		
		Если ПараметрыРасчета.ТаблицаОС <> Неопределено Тогда
			
			Коэффициенты = Новый Массив;
			Для Каждого ДанныеСтроки Из ПараметрыРасчета.ТаблицаОС Цикл
				Если ДанныеСтроки.СправедливаяСтоимость <> 0 Тогда
					// Распределение пропорционально номинальным стоимостям (хранятся в колонке справедливая стоимость).
					Если ПараметрыРасчета.ИзменениеУсловий Тогда
						Если ДанныеСтроки.ДействиеСПредметомАренды <> Перечисления.ДействияСПредметамиАренды.ПрекращениеАренды Тогда
							Коэффициенты.Добавить(ДанныеСтроки.СправедливаяСтоимость);
						Иначе
							Коэффициенты.Добавить(0);
						КонецЕсли;
					Иначе
						Коэффициенты.Добавить(ДанныеСтроки.СправедливаяСтоимость);
					КонецЕсли;
				Иначе
					Коэффициенты.Добавить(0);
				КонецЕсли;
			КонецЦикла;
			
			ОбщаяСтоимость = ПараметрыРасчета.ПриведеннаяСтоимость + АвансыДоНачалаАрендыБезНДС - НачисленныйОбеспечительныйПлатежБезНДС;
			РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОбщаяСтоимость, Коэффициенты);
			
			Если РезультатРаспределения <> Неопределено Тогда
				Для ИндексСтроки = 0 По РезультатРаспределения.ВГраница() Цикл
					ДанныеСтроки = ПараметрыРасчета.ТаблицаОС.Получить(ИндексСтроки);
					ДанныеСтроки.Стоимость = РезультатРаспределения[ИндексСтроки];
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПараметрыРасчета.СтоимостьПредметовАренды = ПараметрыРасчета.ПриведеннаяСтоимость + АвансыДоНачалаАрендыБезНДС;

		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаполнениеГрафикаНачисленияПроцентов
	Если НЕ ПараметрыРасчета.ГрафикНачисленияПроцентовВведенВручную Тогда
		
		ПараметрыРасчета.ГрафикНачисленияПроцентов.Очистить();
		ПараметрыРасчета.СуммаПроцентов = 0;
		
		ОстатокПроцентов = ВсегоПлатежей - ПлатежиДоИзмененияУсловий - ПараметрыРасчета.ПриведеннаяСтоимость - СуммаНДС;
		ОстатокЗайма = ПараметрыРасчета.ПриведеннаяСтоимость;
		ПредыдущаяДата = ПараметрыРасчета.ДатаНачалаАренды;
		
		// При изменении условий договора аренды: 
		// В режиме перехода на ФСБУ25 пересчет процентов с начала действия договора.
		// В обычном режиме до даты изменения проценты по старым условиям, после - по новым.
		Если НЕ ПараметрыРасчета.СозданДляПерехода Тогда
				
				ГрафикПроцентовПоПредыдущимУсловиям = ПараметрыРасчета.ГрафикПроцентовПоПредыдущимУсловиям;
				Для каждого СтрокаСтарыхПроцентов Из ГрафикПроцентовПоПредыдущимУсловиям Цикл
					Если СтрокаСтарыхПроцентов.Проценты > 0 Тогда
						СтрокаПроценты = ПараметрыРасчета.ГрафикНачисленияПроцентов.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПроценты, СтрокаСтарыхПроцентов);
						ПредыдущаяДата = СтрокаПроценты.Дата;
					КонецЕсли;
				КонецЦикла;
				
		КонецЕсли;
		
		Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
			
			Если СтрокаГрафика.Сумма < 0 Тогда
				Продолжить;
			КонецЕсли; 

			СуммаПроцентов = 
				ОстатокЗайма
				* (Pow(1 + ПараметрыРасчета.ПроцентнаяСтавка / 100, (СтрокаГрафика.Дата - ПредыдущаяДата) / 31536000) - 1);

			СуммаПроцентов = Окр(СуммаПроцентов, 2);
			СуммаПроцентов = Мин(СуммаПроцентов, ОстатокПроцентов);
			СуммаПроцентов = Макс(СуммаПроцентов, 0);
			Если СуммаПроцентов > 0 Тогда

				// В графике процентов не должно быть одинаковых дат.Проценты по одной дате суммируются.
				СтрокиПроцентовПоДате = ПараметрыРасчета.ГрафикНачисленияПроцентов.НайтиСтроки(Новый Структура("Дата",
				СтрокаГрафика.Дата));
				Если СтрокиПроцентовПоДате.Количество() = 0 Тогда
					СтрокаПроценты = ПараметрыРасчета.ГрафикНачисленияПроцентов.Добавить();
				Иначе
					СтрокаПроценты = СтрокиПроцентовПоДате.Получить(0);
				КонецЕсли;
				СтрокаПроценты.Дата = СтрокаГрафика.Дата;
				СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + СуммаПроцентов;
				ПараметрыРасчета.СуммаПроцентов = ПараметрыРасчета.СуммаПроцентов + СуммаПроцентов;
				ОстатокПроцентов = ОстатокПроцентов - СуммаПроцентов;
				
			КонецЕсли;
			
			ОстатокЗайма = Макс(ОстатокЗайма - СтрокаГрафика.Сумма + СуммаПроцентов, 0);
			
			// ошибку округления относим на последнее начисление
			Если ОстатокПроцентов > 0 И ОстатокЗайма = 0 И СтрокаПроценты <> Неопределено Тогда
				СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + ОстатокПроцентов;
				ПараметрыРасчета.СуммаПроцентов = ПараметрыРасчета.СуммаПроцентов + ОстатокПроцентов;
				ОстатокПроцентов = 0;
			КонецЕсли;
			
			ПредыдущаяДата = СтрокаГрафика.Дата;

		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует график оплат который можно использовать для дисконтирования.
// 
// Параметры:
//  ГрафикОплат - ТаблицаЗначений - График оплат услуг.
//  НачалоПериода - Дата - Начало периода
// 
// Возвращаемое значение:
//  ТаблицаЗначений -
Функция ГрафикОплатДляДисконтирования(ГрафикОплат, НачалоПериода) Экспорт
	
	ГрафикОплатДляДисконтирования = ГрафикОплат.Выгрузить();
	ГрафикОплатДляДисконтирования.Сортировать("Дата");
	
	// Добавление в график последнего дня месяца, если его нет.
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	ПоследнийМесяц = ГрафикОплатДляДисконтирования[ГрафикОплатДляДисконтирования.Количество() - 1].Дата;
	Пока ТекущийМесяц <= ПоследнийМесяц Цикл
		ДатаГрафика = НачалоДня(КонецМесяца(ТекущийМесяц));
		Если ГрафикОплатДляДисконтирования.Найти(ДатаГрафика, "Дата") = Неопределено Тогда
			СтрокаГрафика = ГрафикОплатДляДисконтирования.Добавить();
			СтрокаГрафика.Дата = ДатаГрафика;
		КонецЕсли;
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	ГрафикОплатДляДисконтирования.Сортировать("Дата");
	
	Возврат ГрафикОплатДляДисконтирования;
	
КонецФункции

// Параметры используемые для расчета ставки, стоимости, процентов.
// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде, ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура -
// 
// Возвращаемое значение:
//  Структура - Параметры расчета:
//		* Организация - СправочникСсылка.Организации -
//		* Договор - СправочникСсылка.ДоговорыАренды -
//		* Дата - Дата -
//		* ДатаНачалаАренды - Дата -
//		* СуммаОбеспечительногоПлатежа - Число -
//		* СуммаУслугПоАренде - Число -
//		* СуммаВыкупаПредметовАренды - Число -
//		* СуммаНДСВыкупаПредметовАренды - Число -
//		* СтоимостьПредметовАренды - Число -
//		* ГрафикОплатУслуг - ТаблицаЗначений -
//		* ГрафикНачисленияУслуг - ТаблицаЗначений -
//		* СтавкаНДС - СправочникСсылка.СтавкиНДС -
//		* ГрафикНачисленияПроцентовВведенВручную - Булево -
//		* РеквизитыДоговора - Структура -
//		* ГрафикНачисленияПроцентов - ТаблицаЗначений -
//		* ПроцентнаяСтавка - Число -
//		* СуммаПроцентов - Число -
//		* ПриведеннаяСтоимость - Число -
//
Функция ПараметрыРасчетаСтавкиСтоимостиПроцентов(Объект = Неопределено, РеквизитыДоговора = Неопределено) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация");
	ПараметрыРасчета.Вставить("Договор");
	ПараметрыРасчета.Вставить("Дата");
	ПараметрыРасчета.Вставить("ДатаНачалаАренды");
	ПараметрыРасчета.Вставить("СуммаОбеспечительногоПлатежа");
	ПараметрыРасчета.Вставить("СуммаУслугПоАренде");
	ПараметрыРасчета.Вставить("СуммаВыкупаПредметовАренды");
	ПараметрыРасчета.Вставить("СуммаНДСВыкупаПредметовАренды");
	ПараметрыРасчета.Вставить("СтоимостьПредметовАренды");
	ПараметрыРасчета.Вставить("ГрафикОплатУслуг");
	ПараметрыРасчета.Вставить("ГрафикНачисленияУслуг");
	ПараметрыРасчета.Вставить("СтавкаНДС");
	ПараметрыРасчета.Вставить("ГрафикНачисленияПроцентовВведенВручную");
	ПараметрыРасчета.Вставить("РеквизитыДоговора", Неопределено);
	ПараметрыРасчета.Вставить("ТаблицаОС", Неопределено);
	
	// Изменения условий договора
	ПараметрыРасчета.Вставить("ИзменениеУсловий", Ложь);
	ПараметрыРасчета.Вставить("ДатаИзмененияАренды", '00010101');
	ПараметрыРасчета.Вставить("СозданДляПерехода", Ложь);
	
	ГрафикПроцентовПоПредыдущимУсловиям = Новый ТаблицаЗначений();
	ГрафикПроцентовПоПредыдущимУсловиям.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ГрафикПроцентовПоПредыдущимУсловиям.Колонки.Добавить("Проценты", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ПараметрыРасчета.Вставить("ГрафикПроцентовПоПредыдущимУсловиям", ГрафикПроцентовПоПредыдущимУсловиям);
	
	// Выходные параметры
	ПараметрыРасчета.Вставить("ГрафикНачисленияПроцентов");
	ПараметрыРасчета.Вставить("ПроцентнаяСтавка", 0);
	ПараметрыРасчета.Вставить("СуммаПроцентов", 0);
	ПараметрыРасчета.Вставить("ПриведеннаяСтоимость", 0);

	Если Объект <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Объект);
		ПараметрыРасчета.ГрафикОплатУслуг = Объект.ГрафикОплатУслуг;
		ПараметрыРасчета.ГрафикНачисленияУслуг = Объект.ГрафикНачисленияУслуг;
		ПараметрыРасчета.ГрафикНачисленияПроцентов = Объект.ГрафикНачисленияПроцентов;
		ПараметрыРасчета.ИзменениеУсловий = УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект);
		ПараметрыРасчета.ДатаИзмененияАренды = НачалоДня(Объект.Дата);
	КонецЕсли;
	
	Если РеквизитыДоговора <> Неопределено Тогда
		ПараметрыРасчета.РеквизитыДоговора = РеквизитыДоговора;
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Заполняет график оплат и начисления по данным раздела "Расчеты"
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура - 
Процедура ЗаполнитьГрафикОплатИНачисленийПоРасчетам(Объект, РеквизитыДоговора) Экспорт
	
	// График заполняется вручную.
	Если (Объект.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат))
		И (Объект.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений)) Тогда
				
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней);
	
	#Область ГрафикОплатУслуг
	
	Если Объект.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
	
		Объект.ГрафикОплатУслуг.Очистить();

		// Первым оплачивается обеспечительный платеж
		СтрокаГрафикаОП = Неопределено;
		Если Объект.СуммаОбеспечительногоПлатежа <> 0
			И ЗначениеЗаполнено(Объект.ДатаПервогоОбеспечительногоПлатежа) Тогда
			
			СтрокаГрафикаОП = Объект.ГрафикОплатУслуг.Добавить();
			СтрокаГрафикаОП.Дата = Объект.ДатаПервогоОбеспечительногоПлатежа;
			СтрокаГрафикаОП.ОбеспечительныйПлатеж = Объект.СуммаОбеспечительногоПлатежа;
		
		КонецЕсли;
		
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьОплат);
		КонецЦикла;
		
		КоличествоДат = ДатыГрафика.Количество();
		
		Если КоличествоДат > 0 Тогда
		
			СуммаВыкупаПредметовАренды = Объект.СуммаВыкупаПредметовАренды;
			АвансированиеВыкупнойСтоимости = Окр(СуммаВыкупаПредметовАренды / КоличествоДат, 2);
					
			// Заполнение графика
			Для Сч = 0 По КоличествоДат - 1 Цикл
				
				ТекущаяДата = ДатыГрафика[Сч];
				
				Если ТекущаяДата = Объект.ДатаПервогоОбеспечительногоПлатежа 
					И СтрокаГрафикаОП <> Неопределено Тогда
					СтрокаГрафика = СтрокаГрафикаОП
				Иначе
					СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
				КонецЕсли;
				
				СтрокаГрафика.Дата = ТекущаяДата;
				СтрокаГрафика.УслугаПоАренде = Объект.ОплатаУслугиПоАренде;
				
				Если РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости Тогда
					
					СтрокаГрафика.ВыкупнаяСтоимость = 
						?(Сч < КоличествоДат - 1,
							Мин(АвансированиеВыкупнойСтоимости, СуммаВыкупаПредметовАренды),
							СуммаВыкупаПредметовАренды);
							
					СуммаВыкупаПредметовАренды = СуммаВыкупаПредметовАренды - СтрокаГрафика.ВыкупнаяСтоимость;
					
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
		
		Если РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И НЕ РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости
			И Объект.СуммаВыкупаПредметовАренды <> 0 Тогда
			
			СтруктураПоиска = Новый Структура("Дата", Объект.ДатаВыкупа);
			СписокСтрок = Объект.ГрафикОплатУслуг.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
				СтрокаГрафика.Дата = Объект.ДатаВыкупа;
			Иначе
				СтрокаГрафика = СписокСтрок[0];
			КонецЕсли;
			
			СтрокаГрафика.ВыкупнаяСтоимость = Объект.СуммаВыкупаПредметовАренды;
			
		КонецЕсли;
		
		Объект.ГрафикОплатУслуг.Сортировать("Дата");
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ГрафикНачисленияУслуг
	
	Если Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
	
		Объект.ГрафикНачисленияУслуг.Очистить();
			
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьНачислений);
		КонецЦикла;
		
		КоличествоДат = ДатыГрафика.Количество();
		
		Если КоличествоДат > 0 Тогда
		
			СуммаОбеспечительногоПлатежа = Объект.СуммаОбеспечительногоПлатежа;
			ЗачетОбеспечительногоПлатежа = Окр(СуммаОбеспечительногоПлатежа / КоличествоДат, 2);
					
			// Заполнение графика
			Для Сч = 0 По КоличествоДат - 1 Цикл
				
				ТекущаяДата = ДатыГрафика[Сч];
				
				СтрокаГрафика = Объект.ГрафикНачисленияУслуг.Добавить();
				СтрокаГрафика.Дата = ТекущаяДата;
				СтрокаГрафика.УслугаПоАренде = Объект.НачислениеУслугиПоАренде;
				
				СтрокаГрафика.ОбеспечительныйПлатеж = 
					?(Сч < КоличествоДат - 1,
						Мин(ЗачетОбеспечительногоПлатежа, СуммаОбеспечительногоПлатежа),
						СуммаОбеспечительногоПлатежа);
						
				СуммаОбеспечительногоПлатежа = СуммаОбеспечительногоПлатежа - СтрокаГрафика.ОбеспечительныйПлатеж;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.ГрафикОплатУслуг.Сортировать("Дата");

	КонецЕсли;

	#КонецОбласти

	ЗаполнитьСуммыНДСВГрафиках(Объект.ГрафикОплатУслуг, Объект.ГрафикНачисленияУслуг, Объект.СтавкаНДС);
	
	Если Объект.СуммаУслугПоАренде = 0 Тогда
		
		ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, РеквизитыДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет график оплат и начисления по данным раздела "Расчеты".
// Перспективный метод расчета.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура - 
Процедура ЗаполнитьГрафикОплатИНачисленийПоРасчетамИзменениеУсловий(Объект, РеквизитыДоговора) Экспорт
	
	// График заполняется вручную.
	Если (Объект.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат))
		И (Объект.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений)) Тогда
				
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней);
	
	ДатаИзмененияУсловий = НачалоДня(Объект.Дата);
						
	#Область ГрафикиПоСтарымУсловиям
	// Строки графиков до даты изменения берем из предыдущих условий.
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	УсловияДоговоровАрендыСрезПоследних.АктуальныеУсловияДоговора КАК ПредыдущиеУсловия,
	|	УсловияДоговоровАрендыСрезПоследних.СуммаОбеспечительногоПлатежа КАК СуммаОбеспечительногоПлатежа,
	|	ВЫБОР
	|		КОГДА УсловияДоговоровАрендыСрезПоследних.АктуальныеУсловияДоговора ССЫЛКА Документ.ИзменениеУсловийДоговораАренды
	|			ТОГДА НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(УсловияДоговоровАрендыСрезПоследних.АктуальныеУсловияДоговора КАК Документ.ИзменениеУсловийДоговораАренды).Дата, ДЕНЬ)
	|		ИНАЧЕ УсловияДоговоровАрендыСрезПоследних.ДатаНачалаАренды
	|	КОНЕЦ КАК ДатаИзмененияДоговора
	|ПОМЕСТИТЬ втПредыдущиеУсловия
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(
	|			&ДатаИзмененияУсловий,
	|			Регистратор <> &Ссылка
	|				И Договор = &Договор) КАК УсловияДоговоровАрендыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачисленияУслугПоАренде.Дата КАК Дата,
	|	ГрафикНачисленияУслугПоАренде.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикНачисленияУслугПоАренде.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС,
	|	ГрафикНачисленияУслугПоАренде.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ГрафикНачисленияУслугПоАренде.ОбеспечительныйПлатежНДС КАК ОбеспечительныйПлатежНДС,
	|	ГрафикНачисленияУслугПоАренде.ВыкупнаяСтоимость КАК ВыкупнаяСтоимость,
	|	ГрафикНачисленияУслугПоАренде.ВыкупнаяСтоимостьНДС КАК ВыкупнаяСтоимостьНДС
	|ПОМЕСТИТЬ втГрафикНачислений
	|ИЗ
	|	РегистрСведений.ГрафикНачисленияУслугПоАренде КАК ГрафикНачисленияУслугПоАренде
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ПО ГрафикНачисленияУслугПоАренде.АктуальныеУсловияДоговора = втПредыдущиеУсловия.ПредыдущиеУсловия
	|			И (ГрафикНачисленияУслугПоАренде.Дата < &ДатаИзмененияУсловий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втГрафикНачислений.ОбеспечительныйПлатеж) КАК ОбеспечительныйПлатеж
	|ПОМЕСТИТЬ втГрафикНачисленийОстатки
	|ИЗ
	|	втГрафикНачислений КАК втГрафикНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	втГрафикНачислений.Дата >= ЕСТЬNULL(втПредыдущиеУсловия.ДатаИзмененияДоговора, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикНачислений.ОбеспечительныйПлатеж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПредыдущиеУсловия.СуммаОбеспечительногоПлатежа, 0) - ЕСТЬNULL(втГрафикНачисленийОстатки.ОбеспечительныйПлатеж, 0) КАК ОбеспечительныйПлатеж
	|ИЗ
	|	втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ПОЛНОЕ СОЕДИНЕНИЕ втГрафикНачисленийОстатки КАК втГрафикНачисленийОстатки
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплатУслугПоАренде.Дата КАК Дата,
	|	ГрафикОплатУслугПоАренде.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикОплатУслугПоАренде.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС,
	|	ГрафикОплатУслугПоАренде.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ГрафикОплатУслугПоАренде.ОбеспечительныйПлатежНДС КАК ОбеспечительныйПлатежНДС,
	|	ГрафикОплатУслугПоАренде.ВыкупнаяСтоимость + ГрафикОплатУслугПоАренде.ВыкупнаяСтоимостьАванс КАК ВыкупнаяСтоимость,
	|	ГрафикОплатУслугПоАренде.ВыкупнаяСтоимостьНДС КАК ВыкупнаяСтоимостьНДС
	|ИЗ
	|	РегистрСведений.ГрафикОплатУслугПоАренде КАК ГрафикОплатУслугПоАренде
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ПО ГрафикОплатУслугПоАренде.АктуальныеУсловияДоговора = втПредыдущиеУсловия.ПредыдущиеУсловия
	|			И (ГрафикОплатУслугПоАренде.Дата < &ДатаИзмененияУсловий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикНачислений.Дата КАК Дата,
	|	втГрафикНачислений.УслугаПоАренде КАК УслугаПоАренде,
	|	втГрафикНачислений.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС,
	|	втГрафикНачислений.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	втГрафикНачислений.ОбеспечительныйПлатежНДС КАК ОбеспечительныйПлатежНДС,
	|	втГрафикНачислений.ВыкупнаяСтоимость КАК ВыкупнаяСтоимость,
	|	втГрафикНачислений.ВыкупнаяСтоимостьНДС КАК ВыкупнаяСтоимостьНДС
	|ИЗ
	|	втГрафикНачислений КАК втГрафикНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("Ссылка",               Объект.Ссылка);
	Запрос.УстановитьПараметр("Договор",              Объект.Договор);
	Запрос.УстановитьПараметр("ДатаИзмененияУсловий", ДатаИзмененияУсловий);
	
	СтарыеУсловия = Запрос.ВыполнитьПакет();
	
	Остатки = СтарыеУсловия[СтарыеУсловия.ВГраница()-2].Выбрать();
	СтарыеОплаты = СтарыеУсловия[СтарыеУсловия.ВГраница()-1].Выбрать();
	СтарыеНачисления = СтарыеУсловия[СтарыеУсловия.ВГраница()].Выбрать();
	
	// Обеспечительный платеж недоступен для редактирования,
	// поэтому всегда перезаполняется в соответствии со старыми графиками
	Остатки.Следующий();
	Объект.СуммаОбеспечительногоПлатежа = Остатки.ОбеспечительныйПлатеж;
	#КонецОбласти
	
	#Область ГрафикОплатУслуг
	
	// Если периодичность оплат не произвольная, то очистим весь график, 
	// иначе очистим только строки графика с датой меньше, чем дата изменения условий.
	Если Объект.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
		Объект.ГрафикОплатУслуг.Очистить();
	Иначе 
		МассивУдаляемыхСтрокОплаты = Новый Массив;
		Для Каждого СтрокаОплаты Из Объект.ГрафикОплатУслуг Цикл
			Если СтрокаОплаты.Дата < ДатаИзмененияУсловий Тогда
				МассивУдаляемыхСтрокОплаты.Добавить(СтрокаОплаты);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияУТ.УдалитьСтрокиТаблицыЗначений(Объект.ГрафикОплатУслуг, МассивУдаляемыхСтрокОплаты);
	КонецЕсли;
	
	// Заполнение строк оплат по старым условиям.
	Пока СтарыеОплаты.Следующий() Цикл
		СтрокаОплаты = Объект.ГрафикОплатУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОплаты, СтарыеОплаты);
	КонецЦикла;
	
	// Заполнение строк оплат по новым условиям.
	Если Объект.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
		
		ДатыГрафикаОплат = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			Если ТекущаяДата >= ДатаИзмененияУсловий Тогда
				ДатыГрафикаОплат.Добавить(ТекущаяДата);
			КонецЕсли;
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьОплат);
		КонецЦикла;
		
		Если РеквизитыДоговора.ЕстьВыкупПредметовАренды Тогда
			ОстатокСуммыВыкупа = Объект.СуммаВыкупаПредметовАренды;
		КонецЕсли;
		
		КоличествоДат = ДатыГрафикаОплат.Количество();
		Если КоличествоДат > 0 Тогда
			
			Если РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости Тогда
				СуммаАвансаВыкупа = Окр(ОстатокСуммыВыкупа / КоличествоДат, 2);
			КонецЕсли;
			
			Счетчик = 1;
			Для Каждого ДатаГрафикаОплаты Из ДатыГрафикаОплат Цикл
				
				СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
				СтрокаГрафика.Дата = ДатаГрафикаОплаты;
				СтрокаГрафика.УслугаПоАренде = Объект.ОплатаУслугиПоАренде;
				
				Если РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости И ОстатокСуммыВыкупа > 0 Тогда
					СтрокаГрафика.ВыкупнаяСтоимость = ?(Счетчик < КоличествоДат, СуммаАвансаВыкупа, ОстатокСуммыВыкупа);
					ОстатокСуммыВыкупа = ОстатокСуммыВыкупа - СтрокаГрафика.ВыкупнаяСтоимость;
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И Объект.ДатаВыкупа > ДатаИзмененияУсловий
			И ОстатокСуммыВыкупа > 0 Тогда
				
			СтрокиГрафика = Объект.ГрафикОплатУслуг.НайтиСтроки(Новый Структура("Дата", Объект.ДатаВыкупа));
			Если СтрокиГрафика.Количество() Тогда
				СтрокаГрафика = СтрокиГрафика[0];
			Иначе
				СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
				СтрокаГрафика.Дата = Объект.ДатаВыкупа;
			КонецЕсли;
			СтрокаГрафика.ВыкупнаяСтоимость = ОстатокСуммыВыкупа;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ГрафикОплатУслуг.Сортировать("Дата");
	
	#КонецОбласти
	
	#Область ГрафикНачисленияУслуг
	
	// Если периодичность начислений не произвольная, то очистим весь график, 
	// иначе очистим только строки графика с датой меньше, чем дата изменения условий.
	
	Если Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
		Объект.ГрафикНачисленияУслуг.Очистить();
	Иначе 
		МассивУдаляемыхСтрокУслуг = Новый Массив;
		Для Каждого СтрокаУслуги Из Объект.ГрафикНачисленияУслуг Цикл
			Если СтрокаУслуги.Дата < ДатаИзмененияУсловий Тогда
				МассивУдаляемыхСтрокУслуг.Добавить(СтрокаУслуги);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияУТ.УдалитьСтрокиТаблицыЗначений(Объект.ГрафикНачисленияУслуг, МассивУдаляемыхСтрокУслуг);
	КонецЕсли;
	
	// Заполнение строк начислений по старым условиям.
	
	Пока СтарыеНачисления.Следующий() Цикл
		СтрокаНачисления = Объект.ГрафикНачисленияУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтарыеНачисления);
	КонецЦикла;
	
	// Заполнение строк начислений по новым условиям.
	
	Если Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
		
		ДатыГрафикаНачислений = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			Если ТекущаяДата >= ДатаИзмененияУсловий Тогда
				ДатыГрафикаНачислений.Добавить(ТекущаяДата);
			КонецЕсли;
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьНачислений);
		КонецЦикла;
		ОстатокОбеспечительногоПлатежа = Объект.СуммаОбеспечительногоПлатежа;
		
		КоличествоДат = ДатыГрафикаНачислений.Количество();
		Если КоличествоДат > 0 Тогда
			
			Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж Тогда
				СуммаОбеспечительногоПлатежа = Окр(ОстатокОбеспечительногоПлатежа / КоличествоДат, 2);
			КонецЕсли;
			
			Счетчик = 1;
			Для Каждого ДатаГрафикаНачислений Из ДатыГрафикаНачислений Цикл
				СтрокаГрафика = Объект.ГрафикНачисленияУслуг.Добавить();
				СтрокаГрафика.Дата = ДатаГрафикаНачислений;
				СтрокаГрафика.УслугаПоАренде = Объект.НачислениеУслугиПоАренде;
				
				Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж И ОстатокОбеспечительногоПлатежа > 0 Тогда
					СтрокаГрафика.ОбеспечительныйПлатеж = 
						?(Счетчик < КоличествоДат, СуммаОбеспечительногоПлатежа, ОстатокОбеспечительногоПлатежа);
					ОстатокОбеспечительногоПлатежа = ОстатокОбеспечительногоПлатежа - СтрокаГрафика.ОбеспечительныйПлатеж;
				КонецЕсли;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ГрафикНачисленияУслуг.Сортировать("Дата");
	
	#КонецОбласти
	
	ЗаполнитьСуммыНДСВГрафиках(Объект.ГрафикОплатУслуг, Объект.ГрафикНачисленияУслуг, Объект.СтавкаНДС, ДатаИзмененияУсловий);
	
	Если Объект.СуммаУслугПоАренде = 0 Тогда
		
		ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, РеквизитыДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет раздел "Расчеты" по графику оплат и начислений.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура - 
Процедура ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, РеквизитыДоговора) Экспорт
	
	Если Объект.ГрафикОплатУслуг.Количество() = 0
		И Объект.ГрафикНачисленияУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГрафиков = УчетАрендованныхОСКлиентСервер.ДанныеГрафиков(Объект, РеквизитыДоговора);
	
	Объект.СуммаУслугПоАренде = 
			?(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде <> 0, 
				ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде,
				ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде);
				
	Объект.СуммаНДС = ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоСуммаНДС;
	
	Объект.ДатаПервогоПлатежа = ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа;

	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж Тогда
		
		Объект.СуммаОбеспечительногоПлатежа = 
			?(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж <> 0, 
				ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж,
				ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж);
		
		Объект.ДатаПервогоОбеспечительногоПлатежа = 
			?(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Неопределено,
				ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа,
				'000101010000');
				
	КонецЕсли;
	
	Если РеквизитыДоговора.ЕстьВыкупПредметовАренды Тогда
		
		Объект.СуммаВыкупаПредметовАренды = ДанныеГрафиков.ГрафикОплатУслуг.ИтогоВыкупнаяСтоимость;
		Объект.СуммаНДСВыкупаПредметовАренды = ДанныеГрафиков.ГрафикОплатУслуг.ИтогоСуммаНДСВыкупаПредметовАренды;
				
	КонецЕсли;

	//
	Объект.ПериодичностьОплат = 
		?(ДанныеГрафиков.ГрафикОплатУслуг.Периодичность <> Неопределено,
			ДанныеГрафиков.ГрафикОплатУслуг.Периодичность,
			Перечисления.ПериодичностьГрафика.Произвольная);
	
	Объект.ПериодичностьНачислений = 
		?(ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность <> Неопределено,
			ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность,
			Перечисления.ПериодичностьГрафика.Произвольная);

	//
	Объект.ОплатаУслугиПоАренде = 
		?(ЗначениеЗаполнено(Объект.ПериодичностьОплат) И Объект.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная,
			ДанныеГрафиков.ГрафикОплатУслуг.ОплатаУслугиПоАренде,
			0);
			
	Объект.НачислениеУслугиПоАренде = 
		?(ЗначениеЗаполнено(Объект.ПериодичностьНачислений) И Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная,
			ДанныеГрафиков.ГрафикНачисленияУслуг.НачислениеУслугиПоАренде,
			0);
			
	УчетАрендованныхОСКлиентСервер.ПересчитатьСуммуДокументаАренды(Объект);
	УчетАрендованныхОСКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);
			
КонецПроцедуры

// Заполняет суммы НДС в графиках.
// 
// Параметры:
//  ГрафикОплатУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг - График оплат услуг.
//  ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикНачисленияУслуг, ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикНачисленияУслуг - График начисления услуг
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС.
Процедура ЗаполнитьСуммыНДСВГрафиках(ГрафикОплатУслуг, ГрафикНачисленияУслуг, СтавкаНДС, ДатаНачала = '00010101') Экспорт
	
	ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	
	СуммаОплат = 0;
	СуммаНачислений = 0;
	ОбеспечительныйПлатеж = 0;
	ЗачетОбеспечительногоПлатежа = 0;

	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		ЗачетОбеспечительногоПлатежа = ЗачетОбеспечительногоПлатежа + СтрокаГрафика.ОбеспечительныйПлатеж;
		Если СтрокаГрафика.Дата < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
		СтрокаГрафика.ОбеспечительныйПлатежНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ОбеспечительныйПлатеж, ПроцентНДС, Истина);
		СуммаНачислений = СуммаНачислений + СтрокаГрафика.УслугаПоАренде;
	КонецЦикла;

	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		ОбеспечительныйПлатеж = ОбеспечительныйПлатеж + СтрокаГрафика.ОбеспечительныйПлатеж;
		Если СтрокаГрафика.Дата < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
		СтрокаГрафика.ОбеспечительныйПлатежНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ОбеспечительныйПлатеж, ПроцентНДС, Истина);
		СтрокаГрафика.ВыкупнаяСтоимостьНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ВыкупнаяСтоимость, ПроцентНДС, Истина);
		СуммаОплат = СуммаОплат + СтрокаГрафика.УслугаПоАренде;
	КонецЦикла;
	
	Если СуммаОплат = СуммаНачислений Тогда
		РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, "УслугаПоАренде", "УслугаПоАрендеНДС", ДатаНачала);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбеспечительныйПлатеж) И ОбеспечительныйПлатеж = ЗачетОбеспечительногоПлатежа Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
			РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, "ОбеспечительныйПлатеж", "ОбеспечительныйПлатежНДС", ДатаНачала);
		Иначе
			РаспределитьНДСНачисленийНаОплаты(ГрафикОплатУслуг, ГрафикНачисленияУслуг, "ОбеспечительныйПлатеж", "ОбеспечительныйПлатежНДС", ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа. 
// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде, ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	ВспомогательныеРеквизиты - Структура - 
// 	МассивНепроверяемыхРеквизитов - Массив из Строка -
//  Отказ - Булево - 
Процедура ПроверитьДокументАренды(Объект, ВспомогательныеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("ГрафикОплатУслуг");
	МассивНепроверяемыхРеквизитов.Добавить("ГрафикНачисленияУслуг");
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	ВерсияДокумента24 = 
		ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаключениеДоговораАренды")
		И Объект.ВерсияДокумента24;
			
	СозданДляПерехода = (КонецДня(Объект.Дата) + 1 = ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018);
			
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней, Истина);
						
	Если ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
		И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			ИЛИ РеквизитыДоговора.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендатор
				И НЕ ВерсияДокумента24) Тогда
		
		РезультатПроверки = УчетАрендованныхОСКлиентСервер.ПроверитьСоответствиеГрафиков(
			Объект, 
			РеквизитыДоговора,
			ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018,
			Строка(РеквизитыДоговора.ВалютаВзаиморасчетов));
		
		Если РезультатПроверки.СуммаОбеспечительногоПлатежа <> Неопределено 
			И НЕ СозданДляПерехода Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма обеспечительного платежа"":
			|%1';
			|en = 'The ""Security deposit amount"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаОбеспечительногоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаОбеспечительногоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Дата первого обеспечительного платежа"":
			|%1';
			|en = 'The ""First security deposit date"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоОбеспечительногоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаУслугПоАренде <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма услуг по аренде"":
			|%1';
			|en = 'The ""Amount of rental services"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаУслугПоАренде);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаУслугПоАренде",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.ДатаПервогоПлатежа <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Дата первого платежа"":
			|%1';
			|en = 'The ""First payment date"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.ДатаПервогоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаВыкупаПредметовАренды <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма выкупа предметов аренды"":
			|%1';
			|en = 'The ""Amount of rental objects redemption"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаВыкупаПредметовАренды);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаВыкупаПредметовАренды",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаНДС <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма НДС"":
			|%1';
			|en = 'The ""VAT amount"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаНДС);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаНДС",, Отказ);
		КонецЕсли;
		
		Если Объект.ДатаНачалаАренды = '000101010000'
			И Объект.СрокЛет = 0
			И Объект.СрокЛет = 0
			И Объект.СрокЛет = 0
			И НЕ ВерсияДокумента24 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан срок аренды';
									|en = 'Rental period is not specified'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СрокАренды",, Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ДатаПервогоОбеспечительногоПлатежа > ДатаОкончания
		И Объект.ДатаПервогоОбеспечительногоПлатежа <> '000101010000'
		И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Обеспечительный платеж должен быть не позже окончания срока аренды';
								|en = 'The security deposit must be no later than the end of the rental term'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоОбеспечительногоПлатежа",, Отказ);
	КонецЕсли;

	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды (%1)';
								|en = 'The first payment must not be earlier than the rental start date (%1)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(Объект.ДатаНачалаАренды,"ДЛФ=D;"));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоПлатежа",, Отказ);
	КонецЕсли;

	Если Объект.ДатаВыкупа <= Объект.ДатаНачалаАренды
			И Объект.ДатаВыкупа <> '000101010000'
			И Объект.ДатаНачалаАренды <> '000101010000'
		ИЛИ Объект.ДатаВыкупа > ДатаОкончания
			И Объект.ДатаВыкупа <> '000101010000'
			И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Дата выкупа должна быть в пределах срока аренды';
								|en = 'The redemption date must be within the rental period'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаВыкупа",, Отказ);
	КонецЕсли;

	Если Объект.ГрафикОплатУслуг.Количество() = 0 
		И НЕ ВерсияДокумента24
		И НЕ СозданДляПерехода
		И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен график оплат услуг';
								|en = 'Service payment schedule is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОткрытьГрафикОплат",, Отказ);
	КонецЕсли;
	
	Если Объект.ГрафикНачисленияУслуг.Количество() = 0
		И НЕ ВерсияДокумента24
		И НЕ СозданДляПерехода
		И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен график начисления услуг';
								|en = 'Service accrual schedule is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОткрытьГрафикНачислений",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор)
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
		
		Если РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговоровАренды.Аренда Тогда
			ТекстСообщения = НСтр("ru = 'Использование типа договора ""Аренда"" допускается только при учете по стандарту ФСБУ 25/2018';
									|en = 'Using the ""Rental"" contract type is only available when accounting is kept according to the Russian GAAP (FSBU 25/2018 standard)'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Договор",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
		
		Если НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
			ДатаНачалаАренды = Объект.ДатаНачалаАренды;
			СтоимостьПредметовАренды = УчетАрендованныхОСКлиентСервер.СтоимостьПредметовАренды(
				Объект, РеквизитыДоговора, ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС);
			ПриведеннаяСтоимость = УчетАрендованныхОСКлиентСервер.ПриведеннаяСтоимость(
				СтоимостьПредметовАренды,
				Объект.ГрафикОплатУслуг,
				Объект.ДатаНачалаАренды);
		Иначе
			ДатаНачалаАренды = НачалоДня(Объект.Дата);
			КоэффициентРаспределения =
				УчетАрендованныхОСКлиентСервер.КоэффициентРаспределенияСтоимости(Объект.ОС, РеквизитыДоговора);
			
			ПредыдущиеУсловия = СтоимостьПоПредыдущимУсловиям(Объект);
			
			СтоимостьДобавленныхПредметовАренды =
				УчетАрендованныхОСКлиентСервер.СтоимостьДобавленныхПредметовАренды(Объект.ОС);
			
			ПриведеннаяСтоимость = 
				ПредыдущиеУсловия.ПриведеннаяСтоимость
				* КоэффициентРаспределения
				+ СтоимостьДобавленныхПредметовАренды;
		КонецЕсли;
		
		ВсегоПлатежейБезНДС = УчетАрендованныхОСКлиентСервер.ВсегоПлатежейБезНДС(
									Объект.ГрафикОплатУслуг, ДатаНачалаАренды, Объект.СтавкаНДС);
		
		Если ПриведеннаяСтоимость > ВсегоПлатежейБезНДС И ВсегоПлатежейБезНДС > 0 Тогда
			Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг") 
				И НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
				ТекстСообщения = НСтр("ru = 'Сумма вложений лизингодателя (%1) должна быть меньше суммы платежей без НДС (%2)';
										|en = 'The amount of the lessor''s investments (%1) must be less than the amount of payments excluding VAT (%2)'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Стоимость предметов аренды (%1) должна быть меньше суммы платежей без НДС (%2)';
										|en = 'The cost of rental objects (%1) must be less than the amount of payments excluding VAT (%2)'");
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ПриведеннаяСтоимость, "ЧДЦ=2"), Формат(ВсегоПлатежейБезНДС, "ЧДЦ=2"));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПроцентнаяСтавка",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьГрафик(
		Объект.ГрафикОплатУслуг, 
		"ГрафикОплатУслуг", 
		"УслугаПоАренде,ОбеспечительныйПлатеж,ВыкупнаяСтоимость",
		Отказ);
		
	ПроверитьГрафик(
		Объект.ГрафикНачисленияУслуг, 
		"ГрафикНачисленияУслуг", 
		"УслугаПоАренде,ОбеспечительныйПлатеж,ВыкупнаяСтоимость",
		Отказ);

	ПроверитьГрафик(
		Объект.ГрафикНачисленияПроцентов, 
		"ГрафикНачисленияПроцентов", 
		"Проценты",
		Отказ);
	
КонецПроцедуры

// Возвращает процентную ставку для графика платежей.
// 
// Параметры:
// 	ГрафикПлатежей - ТаблицаЗначений из СтрокаТаблицыЗначений - Содержит колонки:
// 	    * Дата - Дата - 
// 	    * Сумма - Число -
// 	 
// Возвращаемое значение:
// 	Число - ставка доходности.
Функция ПроцентнаяСтавка(ГрафикПлатежей)
	
	Платежи = Новый Массив;
	ДатыПлатежей = Новый Массив;
	
	Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
		
		// Для произвольных графиков берем строки с ненулевыми суммами.
		Если СтрокаГрафика.Сумма <> 0 Тогда
			Платежи.Добавить(СтрокаГрафика.Сумма);
			ДатыПлатежей.Добавить(СтрокаГрафика.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Ставка = ФинансовыеИнструменты.ЧИСТВНДОХ(Платежи, ДатыПлатежей);
	
	Если Ставка = Неопределено 
		ИЛИ Ставка > 999999999
		ИЛИ Ставка < 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка расчета процентной ставки';
								|en = 'Interest rate calculation error'"));
	КонецЕсли;

	Возврат Ставка * 100;
	
КонецФункции

// Возвращает приведенную стоимость.
// 
// Параметры:
// 	Ставка - Число - ставка дисконтирования.
// 	ГрафикПлатежей - ТаблицаЗначений из СтрокаТаблицыЗначений - Содержит колонки:
// 	    * Дата - Дата - 
// 	    * Сумма - Число -
// 	    
// Возвращаемое значение:
// 	Число - Приведенная стоимость.
Функция ПриведеннаяСтоимостьПоСтавкеИГрафику(Ставка, ГрафикПлатежей) Экспорт
	
	Платежи = Новый Массив;
	ДатыПлатежей = Новый Массив;
	
	Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
		Платежи.Добавить(СтрокаГрафика.Сумма);		
		ДатыПлатежей.Добавить(СтрокаГрафика.Дата);		
	КонецЦикла;

	ПриведеннаяСтоимость = ФинансовыеИнструменты.ЧИСТНЗ(Ставка / 100, Платежи, ДатыПлатежей);
	
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

// Распределяет разницу в НДС между начислениями и оплатами.
Процедура РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, ИмяПоляСумма, ИмяПоляСуммаНДС, ДатаНачала = '00010101')
	
	Коэффициенты = Новый Массив;
	СтрокиГрафика = Новый Массив;
	НачисленияНДС = 0;
	ОплатыНДС = 0;
	НачисленияНДСОстаток = 0;
	ОплатыНДСОстаток = 0;
		
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		Если СтрокаГрафика.Дата < ДатаНачала И ИмяПоляСуммаНДС <> "ОбеспечительныйПлатежНДС" Тогда
			Если ИмяПоляСуммаНДС = "УслугаПоАрендеНДС" Тогда
				НачисленияНДСОстаток = НачисленияНДСОстаток + СтрокаГрафика[ИмяПоляСуммаНДС];
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		НачисленияНДС = НачисленияНДС + СтрокаГрафика[ИмяПоляСуммаНДС];
	КонецЦикла;

	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		Если СтрокаГрафика.Дата < ДатаНачала И ИмяПоляСуммаНДС <> "ОбеспечительныйПлатежНДС" Тогда
			Если ИмяПоляСуммаНДС = "УслугаПоАрендеНДС" Тогда
				ОплатыНДСОстаток = ОплатыНДСОстаток + СтрокаГрафика[ИмяПоляСуммаНДС];
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если СтрокаГрафика[ИмяПоляСумма] <> 0 Тогда
			Если СтрокаГрафика.Дата >= ДатаНачала Тогда
				СтрокиГрафика.Добавить(СтрокаГрафика);
				Коэффициенты.Добавить(СтрокаГрафика[ИмяПоляСумма])	
			КонецЕсли;
			ОплатыНДС = ОплатыНДС + СтрокаГрафика[ИмяПоляСуммаНДС];
		КонецЕсли;
	КонецЦикла;
	
	ОплатыНДС = ОплатыНДС + ОплатыНДСОстаток - НачисленияНДСОстаток;
	
	Если (НачисленияНДС - ОплатыНДС) <> 0 Тогда
		
		РаспределениеНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
							НачисленияНДС - ОплатыНДС, Коэффициенты);
							
		Для Индекс = 0 По СтрокиГрафика.ВГраница() Цикл
			СтрокаГрафика = СтрокиГрафика[Индекс];
			СтрокаГрафика[ИмяПоляСуммаНДС] = СтрокаГрафика[ИмяПоляСуммаНДС] + РаспределениеНДС[Индекс];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет график.
// 
// Параметры:
//  ТаблицаГрафика - ТабличнаяЧасть, ДанныеФормыКоллекция- Данные графика.
//  ИмяГрафика - Строка - Имя таблицы.
//  ПроверяемыеПоля - Строка - Проверяемые поля.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьГрафик(ТаблицаГрафика, ИмяГрафика, ПроверяемыеПоля, Отказ) Экспорт
	
	Если ТаблицаГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяГрафика) = ВРег("ГрафикОплатУслуг") Тогда
		
		ШаблонСообщенияСумма = НСтр("ru = 'В графике оплат необходимо указать сумму на дату %1';
									|en = 'Specify the amount as of %1 in the payment schedule'"); 
		ШаблонСообщенияДата = НСтр("ru = 'В графике оплат повторяется дата %1, необходимо указывать разные даты';
									|en = 'In the payment schedule, the date %1 is repeated, specify different dates'");
		 
		ПроверитьСумму = Истина;
		
	ИначеЕсли ВРег(ИмяГрафика) = ВРег("ГрафикНачисленияУслуг") Тогда
		
		ШаблонСообщенияСумма = НСтр("ru = 'В графике начислений необходимо указать сумму на дату %1';
									|en = 'Specify the amount as of %1 in the accrual schedule'");
		ШаблонСообщенияДата = НСтр("ru = 'В графике начислений повторяется дата %1, необходимо указывать разные даты';
									|en = 'In the accrual schedule, the date %1 is repeated, specify different dates'"); 
	
		ПроверитьСумму = Истина;
	
	Иначе 
		
		ШаблонСообщенияСумма = НСтр("ru = 'В графике процентов необходимо указать сумму на дату %1';
									|en = 'Specify the amount as of %1 in the interest schedule'");
		ШаблонСообщенияДата = НСтр("ru = 'В графике процентов повторяется дата %1, необходимо указывать разные даты';
									|en = 'In the interest schedule, the date %1 is repeated, specify different dates'");
		
		ПроверитьСумму = Ложь;
		 
	КонецЕсли;
	
	СписокПолей = СтрРазделить(ПроверяемыеПоля, ",");
	
	СуществующиеДаты = Новый Соответствие();
	
	НомерСтроки = 0;
	Для Каждого ДанныеСтроки Из ТаблицаГрафика Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ПроверитьСумму Тогда
			
			СуммаУказана = Ложь;
			Для Каждого ИмяПоля Из СписокПолей Цикл
				Если ЗначениеЗаполнено(ДанныеСтроки[ИмяПоля]) Тогда
					СуммаУказана = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СуммаУказана Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСумма, Формат(ДанныеСтроки.Дата, "ДЛФ=D;"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГрафика, НомерСтроки, "Дата");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Дата) Тогда
			
			Если СуществующиеДаты.Получить(ДанныеСтроки.Дата) <> Неопределено Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияДата, Формат(ДанныеСтроки.Дата, "ДЛФ=D;"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГрафика, НомерСтроки, "Дата");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
			
			СуществующиеДаты.Вставить(ДанныеСтроки.Дата, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты договора аренды.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыАренды - Договор
// 
// Возвращаемое значение:
//  Структура - Реквизиты договора аренды
Функция РеквизитыДоговораАренды(Договор) Экспорт
	
	СписокРеквизитов = "ТипДоговора,Балансодержатель,ДатаНачалаДействия,
	|ВалютаВзаиморасчетов,СпособОпределенияСтоимостиАктивов,
	|ЕстьОбеспечительныйПлатеж,ЕстьВыкупПредметовАренды,ЕстьАвансированиеВыкупнойСтоимости,
	|УчитыватьПредметыАрендыВРеглУчете,УчитыватьПредметыАрендыВУпрУчете,
	|НалогообложениеНДС,ТребуетсяОформлениеЗаявленийОВвозе,ВестиУчетАвансовПоТекущимАренднымПлатежамВРазрезеПлатежныхДокументов";
	
	РеквизитыДоговора = Новый Структура(СписокРеквизитов);
	РеквизитыДоговора.ДатаНачалаДействия = '000101010000';
	РеквизитыДоговора.ЕстьОбеспечительныйПлатеж = Ложь;
	РеквизитыДоговора.ЕстьВыкупПредметовАренды = Ложь;
	РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости = Ложь;
	РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Ложь;
	РеквизитыДоговора.УчитыватьПредметыАрендыВУпрУчете = Ложь;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СписокРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыДоговора;
	
КонецФункции

// Получает реквизиты договора контрагента.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор
// 
// Возвращаемое значение:
//  Структура - Реквизиты договора аренды:
// * ТипДоговора - ПеречислениеСсылка.ТипыДоговоров - 
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты - 
// * СтавкаНДС - СправочникСсылка.СтавкиНДС - 
// * ДоговорАренды - СправочникСсылка.ДоговорыАренды -
Функция РеквизитыДоговораКонтрагента(Договор) Экспорт
	
	СписокРеквизитов = "ТипДоговора, ВалютаВзаиморасчетов, СтавкаНДС, ДоговорАренды";
	
	РеквизитыДоговора = Новый Структура(СписокРеквизитов);
	РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговоров.ПустаяСсылка();
	РеквизитыДоговора.ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
	РеквизитыДоговора.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СписокРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыДоговора;
	
КонецФункции

// Приведенная стоимость по предыдущим условиям договора аренды.
// 
// Параметры:
//  Объект - ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  ФормироватьГрафикПроцентов - Булево -
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура -  Стоимость по предыдущим условиям:
// * ПриведеннаяСтоимость - Число - 
// * ДатаИзменения - Дата - 
// * УсловияДоговора - Неопределено, ДокументСсылка.ЗаключениеДоговораАренды, ДокументСсылка.ИзменениеУсловийДоговораАренды - 
// * ГрафикПроцентов - Неопределено, ТаблицаЗначений - Содержит колонки: 
//	 ** Дата - Дата -
//	 ** Проценты - Число -
Функция СтоимостьПоПредыдущимУсловиям(Объект, ФормироватьГрафикПроцентов = Ложь) Экспорт
	
	ПредыдущиеУсловия = Новый Структура;
	ПредыдущиеУсловия.Вставить("ПриведеннаяСтоимость", 0);
	ПредыдущиеУсловия.Вставить("ДатаИзменения", '00010101');
	ПредыдущиеУсловия.Вставить("УсловияДоговора", Неопределено);
	ПредыдущиеУсловия.Вставить("ГрафикПроцентов", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) ИЛИ НЕ ЗначениеЗаполнено(Объект.ПредыдущиеУсловияАренды) Тогда
		Возврат Новый ФиксированнаяСтруктура(ПредыдущиеУсловия);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	УсловияДоговоровАренды.ДатаНачалаАренды КАК ДатаНачалаАренды,
	|	УсловияДоговоровАренды.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	УсловияДоговоровАренды.Период КАК Период
	|ПОМЕСТИТЬ втПредыдущиеУсловия
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(
	|			&Дата,
	|			Регистратор <> &Ссылка) КАК УсловияДоговоровАренды
	|ГДЕ
	|	Договор В (&СвязанныеДоговоры)
	|	И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредыдущиеУсловия.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	СУММА(ГрафикОплатУслугПоАренде.УслугаПоАренде
	|		- ГрафикОплатУслугПоАренде.УслугаПоАрендеНДС
	|		+ ГрафикОплатУслугПоАренде.ОбеспечительныйПлатеж
	|		- ГрафикОплатУслугПоАренде.ОбеспечительныйПлатежНДС
	|		+ ГрафикОплатУслугПоАренде.ВыкупнаяСтоимость
	|		+ ГрафикОплатУслугПоАренде.ВыкупнаяСтоимостьАванс
	|		- ГрафикОплатУслугПоАренде.ВыкупнаяСтоимостьНДС) КАК Сумма
	|ПОМЕСТИТЬ втОстаткиОплат
	|ИЗ
	|	втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатУслугПоАренде КАК ГрафикОплатУслугПоАренде
	|		ПО втПредыдущиеУсловия.АктуальныеУсловияДоговора = ГрафикОплатУслугПоАренде.АктуальныеУсловияДоговора
	|			И (ГрафикОплатУслугПоАренде.Дата >= &Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	втПредыдущиеУсловия.АктуальныеУсловияДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредыдущиеУсловия.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	ГрафикНачисленияПроцентовПоАренде.Дата КАК Дата,
	|	ГрафикНачисленияПроцентовПоАренде.Проценты КАК Проценты
	|ПОМЕСТИТЬ втПредыдущийГрафикПроцентов
	|ИЗ
	|	РегистрСведений.ГрафикНачисленияПроцентовПоАренде КАК ГрафикНачисленияПроцентовПоАренде
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ПО ГрафикНачисленияПроцентовПоАренде.АктуальныеУсловияДоговора = втПредыдущиеУсловия.АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредыдущийГрафикПроцентов.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	СУММА(втПредыдущийГрафикПроцентов.Проценты) КАК Проценты
	|ПОМЕСТИТЬ втОстаткиПроцентов
	|ИЗ
	|	втПредыдущийГрафикПроцентов КАК втПредыдущийГрафикПроцентов
	|ГДЕ
	|	втПредыдущийГрафикПроцентов.Дата >= &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	втПредыдущийГрафикПроцентов.АктуальныеУсловияДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредыдущийГрафикПроцентов.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора,
	|	МАКСИМУМ(втПредыдущийГрафикПроцентов.Дата) КАК Дата
	|ПОМЕСТИТЬ втПредыдущееНачислениеПроцентов
	|ИЗ
	|	втПредыдущийГрафикПроцентов КАК втПредыдущийГрафикПроцентов
	|ГДЕ
	|	втПредыдущийГрафикПроцентов.Дата < &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	втПредыдущийГрафикПроцентов.АктуальныеУсловияДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредыдущиеУсловия.АктуальныеУсловияДоговора КАК УсловияДоговора,
	|	ЕСТЬNULL(втОстаткиОплат.Сумма, 0) - ЕСТЬNULL(втОстаткиПроцентов.Проценты, 0) КАК ПриведеннаяСтоимость,
	|	ВЫБОР
	|		КОГДА втПредыдущиеУсловия.АктуальныеУсловияДоговора ССЫЛКА Документ.ИзменениеУсловийДоговораАренды
	|				ИЛИ втПредыдущиеУсловия.АктуальныеУсловияДоговора ССЫЛКА Документ.КорректировкаРегистров
	|			ТОГДА НАЧАЛОПЕРИОДА(втПредыдущиеУсловия.Период, ДЕНЬ)
	|		ИНАЧЕ втПредыдущиеУсловия.ДатаНачалаАренды
	|	КОНЕЦ КАК ДатаИзменения,
	|	ЕСТЬNULL(втПредыдущееНачислениеПроцентов.Дата, втПредыдущиеУсловия.ДатаНачалаАренды) КАК ДатаПредыдущегоНачисления,
	|	втПредыдущиеУсловия.ПроцентнаяСтавка КАК ПроцентнаяСтавка
	|ИЗ
	|	втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиОплат КАК втОстаткиОплат
	|		ПО втПредыдущиеУсловия.АктуальныеУсловияДоговора = втОстаткиОплат.АктуальныеУсловияДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПроцентов КАК втОстаткиПроцентов
	|		ПО втПредыдущиеУсловия.АктуальныеУсловияДоговора = втОстаткиПроцентов.АктуальныеУсловияДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредыдущееНачислениеПроцентов КАК втПредыдущееНачислениеПроцентов
	|		ПО втПредыдущиеУсловия.АктуальныеУсловияДоговора = втПредыдущееНачислениеПроцентов.АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПредыдущийГрафикПроцентов.Дата, втПредыдущиеУсловия.ДатаНачалаАренды) КАК Дата,
	|	ЕСТЬNULL(втПредыдущийГрафикПроцентов.Проценты, 0) КАК Проценты
	|ИЗ
	|	втПредыдущиеУсловия КАК втПредыдущиеУсловия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредыдущийГрафикПроцентов КАК втПредыдущийГрафикПроцентов
	|		ПО втПредыдущиеУсловия.АктуальныеУсловияДоговора = втПредыдущийГрафикПроцентов.АктуальныеУсловияДоговора
	|			И (втПредыдущийГрафикПроцентов.Дата < &Дата)";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("СвязанныеДоговоры", УчетАрендованныхОС.СвязанныеДоговорыАренды(Объект.Договор));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если НЕ РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Пустой() Тогда

		Выборка = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПредыдущиеУсловия, Выборка);
		
		ГрафикПроцентовПоПредыдущимУсловиям = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить();
	
		// Если документ изменений условий не первого числа месяца, то необходимо добавить в график процентов дополнительную строку
		Если НачалоДня(Объект.Дата) <> НачалоМесяца(Объект.Дата) Тогда
			
			ДатаНачисления = НачалоДня(Объект.Дата) - 86400;
			
			СуммаПроцентов =
				Выборка.ПриведеннаяСтоимость * (Pow(1 + Выборка.ПроцентнаяСтавка / 100,
					(ДатаНачисления - Выборка.ДатаПредыдущегоНачисления) / 31536000) - 1);
			
			ПредыдущиеУсловия.ПриведеннаяСтоимость = ПредыдущиеУсловия.ПриведеннаяСтоимость + СуммаПроцентов;
			
			СтрокаГрафика = ГрафикПроцентовПоПредыдущимУсловиям.Добавить();
			СтрокаГрафика.Дата = ДатаНачисления;
			СтрокаГрафика.Проценты = СуммаПроцентов;
			
		КонецЕсли;
		
		Если ФормироватьГрафикПроцентов Тогда
			ПредыдущиеУсловия.Вставить("ГрафикПроцентов", ГрафикПроцентовПоПредыдущимУсловиям);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ПредыдущиеУсловия);
	
КонецФункции

// Договоры, которые были изменены в процессе аренды документом "Изменение условий договора аренды"
// 
// Параметры:
//  ДоговорАренды - СправочникСсылка.ДоговорыАренды - Договор аренды
//  МассивДоговоров - Неопределено, Массив Из СправочникСсылка.ДоговорыАренды - Массив договоров
// 
// Возвращаемое значение:
//  Неопределено, Массив Из СправочникСсылка.ДоговорыАренды - Связанные договоры аренды
Функция СвязанныеДоговорыАренды(ДоговорАренды, МассивДоговоров = Неопределено) Экспорт
	
	Если МассивДоговоров = Неопределено Тогда
		МассивДоговоров = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредыдущиеУсловия.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.УсловияДоговоровАренды КАК ТекущиеУсловия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды КАК ПредыдущиеУсловия
		|		ПО ТекущиеУсловия.Регистратор = ПредыдущиеУсловия.Регистратор
		|			И ТекущиеУсловия.Договор = &ДоговорАренды
		|			И ТекущиеУсловия.Договор <> ПредыдущиеУсловия.Договор
		|			И (ПредыдущиеУсловия.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДоговоровКонтрагентов.Закрыт))
		|			И (ПредыдущиеУсловия.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыАренды.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ДоговорАренды", ДоговорАренды);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МассивДоговоров = СвязанныеДоговорыАренды(Выборка.Договор, МассивДоговоров);
		
	КонецЕсли;
	
	МассивДоговоров.Добавить(ДоговорАренды);
	
	Возврат МассивДоговоров;
	
КонецФункции

// 
// Параметры:
//  СписокОбъектов - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных -
Процедура ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов(СписокОбъектов) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупАрендованныхОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПрекращениеДоговораАренды"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратОСИзАренды2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаОСВАренду2_4"));
	
	Для каждого ТипОбъекта Из СписокТипов Цикл
		СписокОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипОбъекта));
	КонецЦикла; 
	
КонецПроцедуры

// Заполняет график оплат и начисления по данным раздела "Расчеты"
// 
// Параметры:
//  ДанныеСтроки - Структура
//  ГрафикОплатУслуг - ТаблицаЗначений
//  ГрафикНачисленияУслуг - ТаблицаЗначений
//  СтавкаНДС - СправочникСсылка.СтавкиНДС
Процедура ЗаполнитьГрафикОплатИНачисленийДоходнойАренды(ДанныеСтроки, ГрафикОплатУслуг, ГрафикНачисленияУслуг, СтавкаНДС) Экспорт
	
	ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ДанныеСтроки.ДатаНачалаАренды;
	
	#Область ГрафикОплатУслуг
	
	ЕстьПериодичность = ДанныеСтроки.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная;
	
	// Удаление неактуальных строк графика
	УдаляемыеСтроки = Новый Массив;
	СтрокиГрафикаПоОС = ГрафикОплатУслуг.НайтиСтроки(Новый Структура("ОсновноеСредство", ОсновноеСредство));
	Для Каждого СтрокаГрафика Из СтрокиГрафикаПоОС Цикл
		Если ЕстьПериодичность ИЛИ СтрокаГрафика.Дата < ДатаНачала Тогда
			УдаляемыеСтроки.Добавить(СтрокаГрафика);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ГрафикОплатУслуг.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ЕстьПериодичность Тогда
		
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = ДанныеСтроки.ДатаПервойОплаты;
		Пока ТекущаяДата <= ДанныеСтроки.ДатаОкончанияАренды Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, ДанныеСтроки.ПериодичностьОплат);
		КонецЦикла;

		КоличествоДат = ДатыГрафика.Количество();

		Если КоличествоДат > 0 Тогда

			// Заполнение графика
			Для Сч = 0 По КоличествоДат - 1 Цикл

				ТекущаяДата = ДатыГрафика[Сч];

				СтрокаГрафика = ГрафикОплатУслуг.Добавить();

				СтрокаГрафика.Дата = ТекущаяДата;
				СтрокаГрафика.ОсновноеСредство = ОсновноеСредство;
				СтрокаГрафика.УслугаПоАренде = ДанныеСтроки.СуммаОплаты;

			КонецЦикла;

		КонецЕсли;

		ГрафикОплатУслуг.Сортировать("Дата");
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ГрафикНачисленияУслуг

	ЕстьПериодичность = ДанныеСтроки.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная;
	
	// Удаление неактуальных строк графика
	УдаляемыеСтроки = Новый Массив;
	СтрокиГрафикаПоОС = ГрафикНачисленияУслуг.НайтиСтроки(Новый Структура("ОсновноеСредство", ОсновноеСредство));
	Для Каждого СтрокаГрафика Из СтрокиГрафикаПоОС Цикл
		Если ЕстьПериодичность ИЛИ СтрокаГрафика.Дата < ДатаНачала Тогда
			УдаляемыеСтроки.Добавить(СтрокаГрафика);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ГрафикНачисленияУслуг.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Если ЕстьПериодичность Тогда
		
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = ДанныеСтроки.ДатаПервогоНачисления;
		Пока ТекущаяДата <= ДанныеСтроки.ДатаОкончанияАренды Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = УчетАрендованныхОСКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, ДанныеСтроки.ПериодичностьНачислений);
		КонецЦикла;

		КоличествоДат = ДатыГрафика.Количество();

		Если КоличествоДат > 0 Тогда

			// Заполнение графика
			Для Сч = 0 По КоличествоДат - 1 Цикл

				ТекущаяДата = ДатыГрафика[Сч];

				СтрокаГрафика = ГрафикНачисленияУслуг.Добавить();

				СтрокаГрафика.Дата = ТекущаяДата;
				СтрокаГрафика.ОсновноеСредство = ОсновноеСредство;
				СтрокаГрафика.УслугаПоАренде = ДанныеСтроки.СуммаНачисления;

			КонецЦикла;

		КонецЕсли;

		ГрафикНачисленияУслуг.Сортировать("Дата");
		
	КонецЕсли;

	#КонецОбласти

	ЗаполнитьСуммыНДСВГрафикахДоходнойАренды(ГрафикОплатУслуг, ГрафикНачисленияУслуг, СтавкаНДС, ДанныеСтроки.ДатаНачалаАренды);
	
КонецПроцедуры

// Заполняет суммы НДС в графиках доходной аренды.
// 
// Параметры:
//  ГрафикОплатУслуг - ДокументТабличнаяЧасть.ПередачаОСВАренду2_4.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийПередачиВАренду.ГрафикОплатУслуг - График оплат услуг.
//  ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ПередачаОСВАренду2_4.ГрафикНачисленияУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийПередачиВАренду.ГрафикНачисленияУслуг - График начисления услуг
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС.
//  ДатаНачала - Дата - Дата начала расчета
Процедура ЗаполнитьСуммыНДСВГрафикахДоходнойАренды(ГрафикОплатУслуг, ГрафикНачисленияУслуг, СтавкаНДС, ДатаНачала) Экспорт
	
	ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	
	СуммаОплат = 0;
	СуммаНачислений = 0;
	
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		СуммаОплат =СуммаОплат + СтрокаГрафика.УслугаПоАренде;
		Если СтрокаГрафика.Дата < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		СуммаНачислений =СуммаНачислений + СтрокаГрафика.УслугаПоАренде;
		Если СтрокаГрафика.Дата < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
	КонецЦикла;
	
	Если СуммаОплат = СуммаНачислений Тогда
		РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, "УслугаПоАренде", "УслугаПоАрендеНДС", ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет колонку ГрафикЗаполнен в табличной части документа.
// 
// Параметры:
// ТабличнаяЧасть - ДанныеФормыКоллекция
// ГрафикОплат - ДанныеФормыКоллекция
// ГрафикНачислений - ДанныеФормыКоллекция
//
Процедура ЗаполнитьКолонкуГрафикЗаполнен(ТабличнаяЧасть, ГрафикОплат, ГрафикНачислений) Экспорт
	
	Для Каждого СтрокаОС Из ТабличнаяЧасть Цикл
		
		ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
			
			СтрокаОС.ГрафикЗаполнен = УчетАрендованныхОСКлиентСервер.ГрафикЗаполнен(
										ОсновноеСредство,
										ГрафикОплат,
										ГрафикНачислений);
				
		Иначе
			СтрокаОС.ГрафикЗаполнен = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет колонки АрендныеПлатежи, АвансовыеПлатежи, СправедливаяСтоимостьРегл, СправедливаяСтоимостьУпр
// в табличной части документов ПередачаОСВАренду2_4, ИзменениеУсловийПередачиВАренду, ВводОстатковИнвестицииВАренду.
//
// Параметры:
// Объект - ДокументОбъект.ПередачаОСВАренду2_4, ДокументОбъект.ВводОстатковИнвестицииВАренду, ДокументОбъект.ИзменениеУсловийПередачиВАренду -
// Валюта - СправочникСсылка.Валюты - валюта договора.
Процедура ЗаполнитьСуммуАрендныхПлатежей(Объект, Валюта) Экспорт
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду") Тогда
		ТаблицаОС.Колонки.Добавить("ГрафикНачисленияПроцентовВведенВручную", Новый ОписаниеТипов("Булево"));
		Для Каждого СтрокаОС Из ТаблицаОС Цикл
			СтрокаОС.ГрафикНачисленияПроцентовВведенВручную = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ГрафикНачисленияПроцентовВведенВручную КАК ГрафикНачисленияПроцентовВведенВручную
	|ПОМЕСТИТЬ втТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплатУслуг.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикОплатУслуг.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикОплатУслуг.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
	|ПОМЕСТИТЬ втГрафикОплат
	|ИЗ
	|	&ГрафикОплатУслуг КАК ГрафикОплатУслуг
	|ГДЕ
	|	ГрафикОплатУслуг.Дата >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыОплат.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(втСуммыОплат.УслугаПоАренде - втСуммыОплат.УслугаПоАрендеНДС) КАК АрендныеПлатежи
	|ПОМЕСТИТЬ втСуммыОплат
	|ИЗ
	|	втГрафикОплат КАК втСуммыОплат
	|СГРУППИРОВАТЬ ПО
	|	втСуммыОплат.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачисленияУслуг.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикНачисленияУслуг.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикНачисленияУслуг.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
	|ПОМЕСТИТЬ втГрафикНачислений
	|ИЗ
	|	&ГрафикНачисленияУслуг КАК ГрафикНачисленияУслуг
	|ГДЕ
	|	ГрафикНачисленияУслуг.Дата >= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыНачислений.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(втСуммыНачислений.УслугаПоАренде - втСуммыНачислений.УслугаПоАрендеНДС) КАК Сумма
	|ПОМЕСТИТЬ втСуммыНачислений
	|ИЗ
	|	втГрафикНачислений КАК втСуммыНачислений
	|СГРУППИРОВАТЬ ПО
	|	втСуммыНачислений.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачисленияПроцентов.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикНачисленияПроцентов.Дата КАК Дата,
	|	ГрафикНачисленияПроцентов.Проценты КАК Проценты
	|ПОМЕСТИТЬ втГрафикПроцентов
	|ИЗ
	|	&ГрафикНачисленияПроцентов КАК ГрафикНачисленияПроцентов
	|ГДЕ
	|	ГрафикНачисленияПроцентов.Дата >= &Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикПроцентов.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(ГрафикПроцентов.Проценты) КАК Проценты
	|ПОМЕСТИТЬ втСуммыПроцентов
	|ИЗ
	|	втГрафикПроцентов КАК ГрафикПроцентов
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПроцентов.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.ГрафикНачисленияПроцентовВведенВручную КАК ГрафикНачисленияПроцентовВведенВручную,
	|	ВЫБОР КОГДА НЕ &ЭтоВводОстатков ТОГДА
	|		ЕСТЬNULL(СуммыОплат.АрендныеПлатежи, 0)
	|	ИНАЧЕ ЕСТЬNULL(СуммыНачислений.Сумма, 0) КОНЕЦ КАК АрендныеПлатежи,
	|	(ЕСТЬNULL(СуммыОплат.АрендныеПлатежи, 0) - ЕСТЬNULL(СуммыПроцентов.Проценты, 0))
	|		* &КоэффициентПересчетаВВалютуРегл КАК СправедливаяСтоимостьРегл,
	|	(ЕСТЬNULL(СуммыОплат.АрендныеПлатежи, 0) - ЕСТЬNULL(СуммыПроцентов.Проценты, 0))
	|		* &КоэффициентПересчетаВВалютуУпр КАК СправедливаяСтоимостьУпр,
	|	(ЕСТЬNULL(СуммыНачислений.Сумма, 0) - ЕСТЬNULL(СуммыОплат.АрендныеПлатежи, 0)) КАК АвансовыеПлатежи
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплат КАК СуммыОплат
	|		ПО ТаблицаОС.ОсновноеСредство = СуммыОплат.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыНачислений КАК СуммыНачислений
	|		ПО ТаблицаОС.ОсновноеСредство = СуммыНачислений.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыПроцентов КАК СуммыПроцентов
	|		ПО ТаблицаОС.ОсновноеСредство = СуммыПроцентов.ОсновноеСредство";
	
	ЭтоПередачаВАренду = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПередачаОСВАренду2_4");
	ЭтоВводОстатков = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду");
	
	Запрос.УстановитьПараметр("ГрафикОплатУслуг", Объект.ГрафикОплатУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияУслуг", Объект.ГрафикНачисленияУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияПроцентов", Объект.ГрафикНачисленияПроцентов.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.УстановитьПараметр("ЭтоВводОстатков", ЭтоВводОстатков);
	Запрос.УстановитьПараметр("Период", НачалоДня(Объект.Дата));
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Валюта, Валюта, Объект.Дата, Объект.Организация);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокиОС = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", Выборка.ОсновноеСредство));
		Для Каждого СтрокаОС Из СтрокиОС Цикл
			ЗаполнитьЗначенияСвойств(СтрокаОС, Выборка, "АрендныеПлатежи");
			Если ЭтоПередачаВАренду Тогда
				ЗаполнитьЗначенияСвойств(СтрокаОС, Выборка, "АвансовыеПлатежи");
			КонецЕсли;
			Если Выборка.ГрафикНачисленияПроцентовВведенВручную И ЭтоПередачаВАренду Тогда
				ЗаполнитьЗначенияСвойств(СтрокаОС, Выборка, "СправедливаяСтоимостьРегл, СправедливаяСтоимостьУпр");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЭтоПередачаВАренду Тогда
		Коэффициенты = Объект.ОС.Выгрузить(,"АвансовыеПлатежи").ВыгрузитьКолонку("АвансовыеПлатежи");
		РезультатРаспределения = Неопределено;
		РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
									Объект.СуммаАвансовыхПлатежейРегл,
									Коэффициенты);
		Если РезультатРаспределения <> Неопределено Тогда
			Для ИндексСтроки = 0 По РезультатРаспределения.ВГраница() Цикл
				ДанныеСтроки = Объект.ОС.Получить(ИндексСтроки);
				ДанныеСтроки.АвансовыеПлатежиРегл = РезультатРаспределения[ИндексСтроки];
			КонецЦикла;
		КонецЕсли;
		Если Объект.СуммаАвансовыхПлатежейРегл = 0 Тогда
			Для Каждого ДанныеСтроки Из Объект.ОС Цикл
				ДанныеСтроки.АвансовыеПлатежиРегл = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает ставку и график начисления процентов доходной аренды.
// 
// Параметры:
//  МенеджерВременныхТаблиц - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//  ВыводитьСообщения - Булево
//  Отказ - Булево -
Процедура РассчитатьСтавкиПроцентыДоходнойАрендыПакетно(МенеджерВременныхТаблиц, ВыводитьСообщения = Ложь, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый СписокЗначений;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.Договор.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	ДокументыАренды КАК ДанныеДокументов
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ДокументыКРасчету");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеОС.Ссылка,
	|	ДанныеОС.НомерСтроки,
	|	ДанныеОС.ОсновноеСредство,
	|	ДанныеОС.ДатаОкончанияАренды,
	|	ДанныеОС.ГрафикНачисленияПроцентовВведенВручную,
	|	ВЫБОР
	|		КОГДА втКурсы.КоэффициентПересчетаРегл = 0 ТОГДА
	|			ДанныеОС.ПриведеннаяСтоимостьРегл
	|		ИНАЧЕ
	|			ДанныеОС.ПриведеннаяСтоимостьРегл/ втКурсы.КоэффициентПересчетаРегл
	|	КОНЕЦ КАК ПриведеннаяСтоимость,
	|	ВЫБОР 
	|		КОГДА втКурсы.КоэффициентПересчетаРегл = 0 ТОГДА
	|			ДанныеОС.АрендныеПлатежи + ДанныеОС.НГЛСРегл
	|		ИНАЧЕ
	|			ДанныеОС.АрендныеПлатежи + ДанныеОС.НГЛСРегл / втКурсы.КоэффициентПересчетаРегл
	|	КОНЕЦ КАК АрендныеПлатежи,
	|	ВЫБОР 
	|		КОГДА втКурсы.КоэффициентПересчетаРегл = 0 ТОГДА
	|			ДанныеОС.НГЛСРегл
	|		ИНАЧЕ
	|			ДанныеОС.НГЛСРегл / втКурсы.КоэффициентПересчетаРегл
	|	КОНЕЦ КАК НГЛС,
	|	0 КАК СтавкаДоходности,
	|	ДанныеОС.ОсновноеСредствоПредставление КАК ОсновноеСредствоПредставление
	|
	|ИЗ
	|	ДанныеОС КАК ДанныеОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКоэффициентыПересчетаВалют КАК втКурсы
	|		ПО ДанныеОС.ВалютаВзаиморасчетов = втКурсы.ВалютаВзаиморасчетов
	|		 И ДанныеОС.Организация = втКурсы.Организация
	|		 И ДанныеОС.Дата = втКурсы.Дата
	|ГДЕ
	|	НЕ ДанныеОС.ГрафикНачисленияПроцентовВведенВручную
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ДанныеОС");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаГрафика.Ссылка           КАК Ссылка,
	|	ТаблицаГрафика.Дата             КАК Дата,
	|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаГрафика.Проценты         КАК Проценты
	|ИЗ
	|	ДанныеДокументаТаблицаГрафикНачисленияПроцентов КАК ТаблицаГрафика
	|ГДЕ
	|	ТаблицаГрафика.ГрафикНачисленияПроцентовВведенВручную
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ГрафикНачисленияПроцентов");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаГрафика.Ссылка            КАК Ссылка,
	|	ТаблицаГрафика.Дата              КАК Дата,
	|	ТаблицаГрафика.ОсновноеСредство  КАК ОсновноеСредство,
	|	ТаблицаГрафика.УслугаПоАренде    КАК УслугаПоАренде,
	|	ТаблицаГрафика.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
	|ИЗ
	|	ДанныеДокументаТаблицаГрафикОплатУслуг КАК ТаблицаГрафика
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ГрафикОплатУслуг");
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса);
	
	ГрафикНачисленияПроцентов = ТаблицыДвижений.ТаблицаГрафикНачисленияПроцентов; // - ТаблицаЗначений
	ГрафикНачисленияПроцентов.Индексы.Добавить("Ссылка");
	ГрафикНачисленияПроцентов.Индексы.Добавить("ОсновноеСредство");
	ГрафикНачисленияПроцентов.Индексы.Добавить("Дата");
	
	ГрафикОплатУслуг = ТаблицыДвижений.ТаблицаГрафикОплатУслуг; // - ТаблицаЗначений
	ГрафикОплатУслуг.Индексы.Добавить("Ссылка");
	ГрафикОплатУслуг.Индексы.Добавить("ОсновноеСредство");
	
	ГрафикПлатежей = Новый ТаблицаЗначений; 
	ГрафикПлатежей.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ГрафикПлатежей.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой));
	
	Для Каждого СтрокаДокумента Из ТаблицыДвижений.ТаблицаДокументыКРасчету Цикл
		
		СтрокиДокумента = ТаблицыДвижений.ТаблицаДанныеОС.НайтиСтроки(
			Новый Структура("Ссылка",
							СтрокаДокумента.Ссылка));
		ТаблицаОС = ТаблицыДвижений.ТаблицаДанныеОС.Скопировать(СтрокиДокумента,);
	
		Для Каждого ДанныеСтроки Из ТаблицаОС Цикл
			
			ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
			
			// Расчет ставки доходности
			СтоимостьОС = ДанныеСтроки.ПриведеннаяСтоимость;
			АрендныеПлатежи = ДанныеСтроки.АрендныеПлатежи;
			
			СтрокиОплатПоОС = ГрафикОплатУслуг.НайтиСтроки(
				Новый Структура("ОсновноеСредство,Ссылка",
								ОсновноеСредство,
								СтрокаДокумента.Ссылка));
			
			Если НЕ СтрокиОплатПоОС.Количество() Тогда
				Отказ = Истина;
				Если ВыводитьСообщения Тогда
					ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" не заполнен график оплат. Ставка доходности не будет рассчитана';
										|en = 'The payment schedule is not filled in line %1 of the ""Fixed assets"" list. The rate of return will not be calculated'");
					ТекстСообщения = СтрШаблон(ШаблонТекста, ДанныеСтроки.НомерСтроки);
					ЗарегистрироватьПроблемуВыполненияРасчета(
						Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиИнвестицииВАренду, 
						НачалоМесяца(СтрокаДокумента.Дата),
						СтрокаДокумента.Организация,
						ТекстСообщения,,
						СтрокаДокумента.Ссылка,
						Отказ);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если АрендныеПлатежи < СтоимостьОС Тогда
				ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" сумма арендных платежей без НДС (%2) меньше стоимости объекта (%3). Ставка доходности не будет рассчитана';
									|en = 'In line %1 of the ""Fixed assets"" list, the amount of rental payments excluding VAT (%2) is less than the object cost (%3). The rate of return will not be calculated'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, ДанныеСтроки.НомерСтроки, Формат(АрендныеПлатежи, "ЧДЦ=2; ЧН=0,00"), Формат(СтоимостьОС, "ЧДЦ=2; ЧН=0,00"));
				ЗарегистрироватьПроблемуВыполненияРасчета(
					Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиИнвестицииВАренду, 
					НачалоМесяца(СтрокаДокумента.Дата),
					СтрокаДокумента.Организация,
					ТекстСообщения,,
					СтрокаДокумента.Ссылка,
					Отказ);
				Продолжить;
			КонецЕсли;
			
			ГрафикПлатежей.Очистить();
				
			Для Каждого СтрокаОплаты Из СтрокиОплатПоОС Цикл
				СтрокаГрафика = ГрафикПлатежей.Добавить();
				СтрокаГрафика.Сумма = СтрокаОплаты.УслугаПоАренде - СтрокаОплаты.УслугаПоАрендеНДС;
				СтрокаГрафика.Дата = СтрокаОплаты.Дата;
			КонецЦикла;
			
			Если ДанныеСтроки.НГЛС > 0 Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияАренды) Тогда
					СтрокаГрафика = ГрафикПлатежей.Добавить();
					СтрокаГрафика.Сумма = ДанныеСтроки.НГЛС;
					СтрокаГрафика.Дата = ДанныеСтроки.ДатаОкончанияАренды;
				Иначе
					СтрокаГрафика = ГрафикПлатежей[ГрафикПлатежей.Количество()-1];
					СтрокаГрафика.Сумма = СтрокаГрафика.Сумма + ДанныеСтроки.НГЛС;
				КонецЕсли;
			КонецЕсли;
			
			ДобавитьВГрафикПоследнийДеньМесяца(ГрафикПлатежей, НачалоДня(СтрокаДокумента.Дата));
			
			СтрокаГрафика = ГрафикПлатежей.Вставить(0);
			СтрокаГрафика.Сумма = -СтоимостьОС;
			СтрокаГрафика.Дата = НачалоДня(СтрокаДокумента.Дата);
			
			ГрафикПлатежей.Сортировать("Дата");
			
			Попытка
				ДанныеСтроки.СтавкаДоходности = ПроцентнаяСтавка(ГрафикПлатежей);
			Исключение
				ДанныеСтроки.СтавкаДоходности = 0;
				ТекстШаблона = НСтр("ru = 'Не удалось рассчитать ставку доходности по основному средству %1. Проверьте график оплат и стоимость основных средств.';
									|en = 'Cannot calculate the rate of return on the %1 fixed asset. Check the payment schedule and the fixed asset cost.'");
				ТекстСообщения = СтрШаблон(ТекстШаблона, ДанныеСтроки.ОсновноеСредствоПредставление);
				ЗарегистрироватьПроблемуВыполненияРасчета(
					Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиИнвестицииВАренду, 
					НачалоМесяца(СтрокаДокумента.Дата),
					СтрокаДокумента.Организация,
					ТекстСообщения,,
					СтрокаДокумента.Ссылка,
					Отказ);
				Продолжить;
			КонецПопытки;
			
			// Расчет графика процентов
			ОстатокЗайма = СтоимостьОС;
			ОстатокПроцентов = АрендныеПлатежи - СтоимостьОС;
			ПредыдущаяДата = НачалоДня(СтрокаДокумента.Дата);
			
			СтрокаПроценты = Неопределено;
			
			Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
				
				Если СтрокаГрафика.Сумма < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаПроцентов =
					ОстатокЗайма
					* (Pow(1 + ДанныеСтроки.СтавкаДоходности / 100, (СтрокаГрафика.Дата - ПредыдущаяДата) / 31536000) - 1);
				
				СуммаПроцентов = Окр(СуммаПроцентов, 2);
				СуммаПроцентов = Мин(СуммаПроцентов, ОстатокПроцентов);
				СуммаПроцентов = Макс(СуммаПроцентов, 0);
				Если СуммаПроцентов > 0 Тогда
					
					// В графике процентов не должно быть одинаковых дат.Проценты по одной дате суммируются.
					СтрокиПроцентовПоДате = ГрафикНачисленияПроцентов.НайтиСтроки(
						Новый Структура("ОсновноеСредство, Дата, Ссылка",
										СтрокаГрафика.Дата,
										ОсновноеСредство,
										СтрокаДокумента.Ссылка));
										
					Если СтрокиПроцентовПоДате.Количество() = 0 Тогда
						СтрокаПроценты = ГрафикНачисленияПроцентов.Добавить();
						СтрокаПроценты.Проценты = 0;
					Иначе
						СтрокаПроценты = СтрокиПроцентовПоДате.Получить(0);
					КонецЕсли;
					
					СтрокаПроценты.Дата = СтрокаГрафика.Дата;
					СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + СуммаПроцентов;
					СтрокаПроценты.ОсновноеСредство = ОсновноеСредство;
					СтрокаПроценты.Ссылка = СтрокаДокумента.Ссылка;
					
					ОстатокПроцентов = ОстатокПроцентов - СуммаПроцентов;
					
				КонецЕсли;
				
				ОстатокЗайма = Макс(ОстатокЗайма - СтрокаГрафика.Сумма + СуммаПроцентов, 0);
				
				// ошибку округления относим на последнее начисление
				Если ОстатокПроцентов > 0 И ОстатокЗайма = 0 И СтрокаПроценты <> Неопределено Тогда
					СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + ОстатокПроцентов;
					ОстатокПроцентов = 0;
				КонецЕсли;
					
				ПредыдущаяДата = СтрокаГрафика.Дата;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаГрафика.Ссылка КАК Ссылка,
	|	ТаблицаГрафика.Дата КАК Дата,
	|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаГрафика.Проценты КАК Проценты
	|ПОМЕСТИТЬ ТаблицаГрафикНачисленияПроцентов_Предварительная
	|ИЗ
	|	&ГрафикПроцентов КАК ТаблицаГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Дельта.Ссылка КАК Ссылка,
	|	Дельта.ОсновноеСредство КАК ОсновноеСредство,
	|	СУММА(Дельта.Проценты) КАК Дельта,
	|	Дельта.ДатаПервогоМесяца КАК ДатаПервогоМесяца
	|ПОМЕСТИТЬ ДельтыПервогоМесяца
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаГрафика.Ссылка КАК Ссылка,
	|		ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
	|		СУММА(ТаблицаГрафика.Проценты) КАК Проценты,
	|		МАКСИМУМ(ТаблицаГрафика.Дата) КАК ДатаПервогоМесяца
	|	ИЗ
	|		ДанныеДокументаТаблицаГрафикНачисленияПроцентов КАК ТаблицаГрафика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыАренды КАК ДокументыАренды
	|			ПО ТаблицаГрафика.Ссылка = ДокументыАренды.Ссылка
	|				И (НАЧАЛОПЕРИОДА(ТаблицаГрафика.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокументыАренды.Дата, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаГрафика.Ссылка,
	|		ТаблицаГрафика.ОсновноеСредство
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаГрафика.Ссылка,
	|		ТаблицаГрафика.ОсновноеСредство,
	|		-СУММА(ТаблицаГрафика.Проценты),
	|		МАКСИМУМ(ТаблицаГрафика.Дата)
	|	ИЗ
	|		ТаблицаГрафикНачисленияПроцентов_Предварительная КАК ТаблицаГрафика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыАренды КАК ДокументыАренды
	|			ПО ТаблицаГрафика.Ссылка = ДокументыАренды.Ссылка
	|				И (НАЧАЛОПЕРИОДА(ТаблицаГрафика.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ДокументыАренды.Дата, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаГрафика.Ссылка,
	|		ТаблицаГрафика.ОсновноеСредство) КАК Дельта
	|
	|СГРУППИРОВАТЬ ПО
	|	Дельта.Ссылка,
	|	Дельта.ОсновноеСредство,
	|	Дельта.ДатаПервогоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство,
	|	ДатаПервогоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГрафика.Ссылка КАК Ссылка,
	|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
	|	МИНИМУМ(ТаблицаГрафика.Дата) КАК ДатаВторогоМесяца,
	|	МИНИМУМ(ДельтыПервогоМесяца.Дельта) КАК Дельта
	|ПОМЕСТИТЬ ДатыВторогоМесяца
	|ИЗ
	|	ТаблицаГрафикНачисленияПроцентов_Предварительная КАК ТаблицаГрафика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыАренды КАК ДокументыАренды
	|		ПО ТаблицаГрафика.Ссылка = ДокументыАренды.Ссылка
	|			И (НАЧАЛОПЕРИОДА(ТаблицаГрафика.Дата, МЕСЯЦ) > НАЧАЛОПЕРИОДА(ДокументыАренды.Дата, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДельтыПервогоМесяца КАК ДельтыПервогоМесяца
	|		ПО ТаблицаГрафика.Ссылка = ДельтыПервогоМесяца.Ссылка
	|			И ТаблицаГрафика.ОсновноеСредство = ДельтыПервогоМесяца.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаГрафика.Ссылка,
	|	ТаблицаГрафика.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство,
	|	ДатаВторогоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаГрафика.Ссылка КАК Ссылка,
	|	ТаблицаГрафика.Дата КАК Дата,
	|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаГрафика.Проценты + ЕСТЬNULL(ДельтыПервогоМесяца.Дельта, 0) - ЕСТЬNULL(ДатыВторогоМесяца.Дельта, 0) КАК Проценты,
	|	ЕСТЬNULL(ДельтыПервогоМесяца.Дельта, 0) - ЕСТЬNULL(ДатыВторогоМесяца.Дельта, 0) КАК КорректировкаПроцентов
	|ПОМЕСТИТЬ ТаблицаГрафикНачисленияПроцентов
	|ИЗ
	|	ТаблицаГрафикНачисленияПроцентов_Предварительная КАК ТаблицаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДельтыПервогоМесяца КАК ДельтыПервогоМесяца
	|		ПО ТаблицаГрафика.Ссылка = ДельтыПервогоМесяца.Ссылка
	|			И ТаблицаГрафика.ОсновноеСредство = ДельтыПервогоМесяца.ОсновноеСредство
	|			И ТаблицаГрафика.Дата = ДельтыПервогоМесяца.ДатаПервогоМесяца
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыВторогоМесяца КАК ДатыВторогоМесяца
	|		ПО ТаблицаГрафика.Ссылка = ДатыВторогоМесяца.Ссылка
	|			И ТаблицаГрафика.ОсновноеСредство = ДатыВторогоМесяца.ОсновноеСредство
	|			И ТаблицаГрафика.Дата = ДатыВторогоМесяца.ДатаВторогоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаГрафикНачисленияПроцентов_Предварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДельтыПервогоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыВторогоМесяца
	|";
	Запрос.УстановитьПараметр("ГрафикПроцентов", ГрафикНачисленияПроцентов);
	
	Запрос.Выполнить();

КонецПроцедуры

// Рассчитывает ставку и график начисления процентов доходной аренды в фоновом задании.
// 
// Параметры:
//  ПараметрыРасчета - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//
// Возвращаемое значение: 
//  Структура:
//  * ТаблицаОС - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//  * ГрафикНачисленияПроцентов - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//
Функция РассчитатьСтавкиПроцентыДоходнойАрендыВФоне(ПараметрыРасчета) Экспорт
	
	ТипОперации = ?(ПараметрыРасчета.ЭтоИзменениеУсловий, "ИзменениеУсловийАренды", "ПередачаВАренду");
	КлючеваяОперация = СтрШаблон("ОбщийМодуль.УчетАрендованныхОС.РассчитатьСтавкиПроцентыДоходнойАренды.%1", ТипОперации);
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	РассчитатьСтавкиПроцентыДоходнойАренды(ПараметрыРасчета);
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ТаблицаОС", ПараметрыРасчета.ТаблицаОС);
	РезультатВыполнения.Вставить("ГрафикНачисленияПроцентов", ПараметрыРасчета.ГрафикНачисленияПроцентов);
	КоличествоОбработано = ПараметрыРасчета.ГрафикНачисленияПроцентов.Количество() / 10000;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработано);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Рассчитывает ставку и график начисления процентов доходной аренды.
// 
// Параметры:
//  ПараметрыРасчета - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//  Отказ - Булево -
Процедура РассчитатьСтавкиПроцентыДоходнойАренды(ПараметрыРасчета, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
		|	ТаблицаОС.СправедливаяСтоимостьРегл КАК СправедливаяСтоимостьРегл,
		|	ТаблицаОС.НГЛСРегл КАК НГЛСРегл,
		|	ТаблицаОС.АрендныеПлатежи КАК АрендныеПлатежи,
		|	ТаблицаОС.АвансовыеПлатежи КАК АвансовыеПлатежи,
		|	ТаблицаОС.АвансовыеПлатежиРегл КАК АвансовыеПлатежиРегл,
		|	ТаблицаОС.ГрафикНачисленияПроцентовВведенВручную КАК ГрафикНачисленияПроцентовВведенВручную
		|ПОМЕСТИТЬ втТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ГрафикиОплатУслуг.ДатаИзменения) КАК ДатаИзменения,
		|	ГрафикиОплатУслуг.ОсновноеСредство КАК ОсновноеСредство,
		|	&ДатаДокумента КАК Дата
		|ПОМЕСТИТЬ АктуальныеУсловияДоИзмененийДоговора
		|ИЗ
		|	втТаблицаОС КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатУслугПоДоходнойАренде КАК ГрафикиОплатУслуг
		|		ПО ДанныеДокумента.ОсновноеСредство = ГрафикиОплатУслуг.ОсновноеСредство
		|ГДЕ
		|	ГрафикиОплатУслуг.ДатаИзменения < НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
		|	И ГрафикиОплатУслуг.Договор = &Договор
		|	И &ЭтоИзменениеУсловий
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиОплатУслуг.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	ДатаИзменения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(ТаблицаГрафика.УслугаПоАренде - ТаблицаГрафика.УслугаПоАрендеНДС) КАК АрендныеПлатежи
		|ПОМЕСТИТЬ АрендныеПлатежиДоИзменения
		|ИЗ
		|	РегистрСведений.ГрафикОплатУслугПоДоходнойАренде КАК ТаблицаГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеУсловияДоИзмененийДоговора КАК АктуальныеУсловия
		|		ПО (АктуальныеУсловия.ОсновноеСредство = ТаблицаГрафика.ОсновноеСредство)
		|			И (АктуальныеУсловия.ДатаИзменения = ТаблицаГрафика.ДатаИзменения)
		|ГДЕ
		|	ТаблицаГрафика.Договор = &Договор
		|	И ТаблицаГрафика.Дата >= НАЧАЛОПЕРИОДА(АктуальныеУсловия.Дата, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГрафика.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаГрафика.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(ТаблицаГрафика.Проценты) КАК ПроцентныйДисконт
		|ПОМЕСТИТЬ ПроцентыДоИзменения
		|ИЗ
		|	РегистрСведений.ГрафикНачисленияПроцентовПоДоходнойАренде КАК ТаблицаГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеУсловияДоИзмененийДоговора КАК АктуальныеУсловия
		|		ПО (АктуальныеУсловия.ОсновноеСредство = ТаблицаГрафика.ОсновноеСредство)
		|			И (АктуальныеУсловия.ДатаИзменения = ТаблицаГрафика.ДатаИзменения)
		|ГДЕ
		|	ТаблицаГрафика.Договор = &Договор
		|	И ТаблицаГрафика.Дата >= НАЧАЛОПЕРИОДА(АктуальныеУсловия.Дата, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаГрафика.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнвестицииВАренду.АрендныеПлатежиРеглОстаток + ИнвестицииВАренду.ПроцентныйДисконтРеглОстаток КАК ЧИАРегл,
		|	ИнвестицииВАренду.НГЛСРеглОстаток КАК НГЛСРегл,
		|	-ИнвестицииВАренду.ПроцентныйДисконтОстаток КАК ОстатокПроцентов,
		|	ИнвестицииВАренду.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втИнвестицииВАренду
		|ИЗ
		|	РегистрНакопления.ИнвестицииВАренду.Остатки(
		|			&ПериодГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						втТаблицаОС КАК втТаблицаОС)) КАК ИнвестицииВАренду
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ИнвестицииВАренду.ПроцентныйДисконт) КАК ПроцентыФакт,
		|	ИнвестицииВАренду.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втПроцентыФактические
		|ИЗ
		|	РегистрНакопления.ИнвестицииВАренду КАК ИнвестицииВАренду
		|ГДЕ
		|	ИнвестицииВАренду.Регистратор = &Ссылка
		|	И ИнвестицииВАренду.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвестицииВАренду.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходыОстатки.СуммаРеглОстаток КАК СуммаРеглОстаток,
		|	ПрочиеРасходыОстатки.АналитикаРасходов КАК ОсновноеСредство
		|ПОМЕСТИТЬ втРасходыПоОС
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(
		|			&ПериодГраница,
		|			Организация = &Организация
		|				И АналитикаРасходов В
		|					(ВЫБРАТЬ
		|						втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						втТаблицаОС КАК втТаблицаОС)) КАК ПрочиеРасходыОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтоимостьОСОстатки.СтоимостьРеглОстаток КАК СтоимостьРеглОстаток,
		|	СтоимостьОСОстатки.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСтоимостьОС
		|ИЗ
		|	РегистрНакопления.СтоимостьОС.Остатки(
		|			&ПериодГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						втТаблицаОС КАК втТаблицаОС)) КАК СтоимостьОСОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АмортизацияОСОстатки.ОсновноеСредство КАК ОсновноеСредство,
		|	АмортизацияОСОстатки.АмортизацияРеглОстаток КАК АмортизацияРеглОстаток
		|ПОМЕСТИТЬ втАмортизацияОС
		|ИЗ
		|	РегистрНакопления.АмортизацияОС.Остатки(
		|			&ПериодГраница,
		|			Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						втТаблицаОС КАК втТаблицаОС)) КАК АмортизацияОСОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбесценениеВНАОстатки.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
		|	ОбесценениеВНАОстатки.ОбесценениеРеглОстаток КАК ОбесценениеРеглОстаток
		|ПОМЕСТИТЬ втОбесценениеОС
		|ИЗ
		|	РегистрНакопления.ОбесценениеВНА.Остатки(
		|			&ПериодГраница,
		|			Организация = &Организация
		|				И ВнеоборотныйАктив В
		|					(ВЫБРАТЬ
		|						втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|					ИЗ
		|						втТаблицаОС КАК втТаблицаОС)) КАК ОбесценениеВНАОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВнеоборотныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	втТаблицаОС.ДатаОкончанияАренды КАК ДатаОкончанияАренды,
		|	ВЫРАЗИТЬ((ВЫБОР
		|			КОГДА &ЭтоИзменениеУсловий
		|				ТОГДА ЕСТЬNULL(АрендныеПлатежиДоИзменения.АрендныеПлатежи, 0) / &КоэффициентПересчетаИзВалютыРегл - ЕСТЬNULL(ПроцентыДоИзменения.ПроцентныйДисконт, 0) / &КоэффициентПересчетаИзВалютыРегл + ЕСТЬNULL(втИнвестицииВАренду.НГЛСРегл, 0) + ЕСТЬNULL(втРасходыПоОС.СуммаРеглОстаток, 0)
		|			КОГДА втТаблицаОС.СправедливаяСтоимостьРегл > 0
		|				ТОГДА втТаблицаОС.СправедливаяСтоимостьРегл - втТаблицаОС.АвансовыеПлатежиРегл
		|			ИНАЧЕ ЕСТЬNULL(втСтоимостьОС.СтоимостьРеглОстаток, 0) + ЕСТЬNULL(втАмортизацияОС.АмортизацияРеглОстаток, 0) + ЕСТЬNULL(втОбесценениеОС.ОбесценениеРеглОстаток, 0) + ЕСТЬNULL(втРасходыПоОС.СуммаРеглОстаток, 0) - втТаблицаОС.АвансовыеПлатежиРегл
		|		КОНЕЦ) * &КоэффициентПересчетаИзВалютыРегл КАК ЧИСЛО(31, 2)) КАК ПриведеннаяСтоимость,
		|	ВЫБОР
		|		КОГДА втПроцентыФактические.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ втТаблицаОС.АрендныеПлатежи
		|				- ЕСТЬNULL(втПроцентыФактические.ПроцентыФакт, 0)
		|				- ЕСТЬNULL(ПроцентыДоИзменения.ПроцентныйДисконт, 0)
		|				+ ВЫРАЗИТЬ(втТаблицаОС.НГЛСРегл * &КоэффициентПересчетаИзВалютыРегл КАК ЧИСЛО(31, 2))
		|	КОНЕЦ КАК ПриведеннаяСтоимостьФакт,
		|	втТаблицаОС.АрендныеПлатежи + ВЫРАЗИТЬ(втТаблицаОС.НГЛСРегл * &КоэффициентПересчетаИзВалютыРегл КАК ЧИСЛО(31, 2)) КАК АрендныеПлатежи,
		|	втТаблицаОС.АвансовыеПлатежиРегл КАК АвансовыеПлатежиРегл,
		|	0 КАК СтавкаДоходности,
		|	втТаблицаОС.СправедливаяСтоимостьРегл КАК СправедливаяСтоимость,
		|	ЕСТЬNULL(втРасходыПоОС.СуммаРеглОстаток, 0) КАК СуммаРасходов,
		|	ЕСТЬNULL(втСтоимостьОС.СтоимостьРеглОстаток, 0) КАК СтоимостьОС,
		|	ЕСТЬNULL(втАмортизацияОС.АмортизацияРеглОстаток, 0) КАК Амортизация,
		|	ЕСТЬNULL(втОбесценениеОС.ОбесценениеРеглОстаток, 0) КАК Обесценение,
		|	ЕСТЬNULL(втСтоимостьОС.СтоимостьРеглОстаток, 0) + ЕСТЬNULL(втАмортизацияОС.АмортизацияРеглОстаток, 0) + ЕСТЬNULL(втОбесценениеОС.ОбесценениеРеглОстаток, 0) КАК ИтогоСтоимостьОС,
		|	ЕСТЬNULL(втСтоимостьОС.СтоимостьРеглОстаток, 0) + ЕСТЬNULL(втАмортизацияОС.АмортизацияРеглОстаток, 0) + ЕСТЬNULL(втРасходыПоОС.СуммаРеглОстаток, 0) + ЕСТЬNULL(втОбесценениеОС.ОбесценениеРеглОстаток, 0) КАК ИтогоИнвестиция,
		|	ЕСТЬNULL(АрендныеПлатежиДоИзменения.АрендныеПлатежи, 0) / &КоэффициентПересчетаИзВалютыРегл
		|		+ ЕСТЬNULL(втИнвестицииВАренду.НГЛСРегл, 0)
		|		- ЕСТЬNULL(ПроцентыДоИзменения.ПроцентныйДисконт, 0) / &КоэффициентПересчетаИзВалютыРегл КАК ОстатокЧИА,
		|	ЕСТЬNULL(ПроцентыДоИзменения.ПроцентныйДисконт, 0) КАК ОстатокПроцентов,
		|	втТаблицаОС.НГЛСРегл КАК НГЛСРегл,
		|	ЕСТЬNULL(втИнвестицииВАренду.НГЛСРегл, 0) КАК ОстатокНГЛС,
		|	втТаблицаОС.НГЛСРегл - ЕСТЬNULL(втИнвестицииВАренду.НГЛСРегл, 0) КАК ИзменениеНГЛС,
		|	ВЫРАЗИТЬ(втТаблицаОС.НГЛСРегл * &КоэффициентПересчетаИзВалютыРегл КАК ЧИСЛО(31, 2)) КАК НГЛС,
		|	ПРЕДСТАВЛЕНИЕ(втТаблицаОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
		|	втТаблицаОС.ГрафикНачисленияПроцентовВведенВручную КАК ГрафикНачисленияПроцентовВведенВручную
		|ИЗ
		|	втТаблицаОС КАК втТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИнвестицииВАренду КАК втИнвестицииВАренду
		|		ПО втТаблицаОС.ОсновноеСредство = втИнвестицииВАренду.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасходыПоОС КАК втРасходыПоОС
		|		ПО втТаблицаОС.ОсновноеСредство = втРасходыПоОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтоимостьОС КАК втСтоимостьОС
		|		ПО втТаблицаОС.ОсновноеСредство = втСтоимостьОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизацияОС КАК втАмортизацияОС
		|		ПО втТаблицаОС.ОсновноеСредство = втАмортизацияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОбесценениеОС КАК втОбесценениеОС
		|		ПО втТаблицаОС.ОсновноеСредство = втОбесценениеОС.ВнеоборотныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ АрендныеПлатежиДоИзменения КАК АрендныеПлатежиДоИзменения
		|		ПО (АрендныеПлатежиДоИзменения.ОсновноеСредство = втТаблицаОС.ОсновноеСредство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроцентыДоИзменения КАК ПроцентыДоИзменения
		|		ПО (ПроцентыДоИзменения.ОсновноеСредство = втТаблицаОС.ОсновноеСредство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПроцентыФактические КАК втПроцентыФактические
		|		ПО (втПроцентыФактические.ОсновноеСредство = втТаблицаОС.ОсновноеСредство)";
	
	КоэффициентПересчетаИзВалютыРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ПараметрыРасчета.ВалютаРегламентированногоУчета, 
		ПараметрыРасчета.РеквизитыДоговора.ВалютаВзаиморасчетов, 
		ПараметрыРасчета.Дата);
		
	Если КоэффициентПересчетаИзВалютыРегл = 0 Тогда
		КоэффициентПересчетаИзВалютыРегл = 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыРасчета.РеквизитыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ПараметрыРасчета.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("КоэффициентПересчетаИзВалютыРегл", КоэффициентПересчетаИзВалютыРегл);
	
	ЭтоИзменениеУсловий = ТипЗнч(ПараметрыРасчета.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду");
	Запрос.УстановитьПараметр("ЭтоИзменениеУсловий", ЭтоИзменениеУсловий);
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыРасчета.Ссылка);
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.Организация);
	Запрос.УстановитьПараметр("Договор", ПараметрыРасчета.Договор);
	Запрос.УстановитьПараметр("ДатаДокумента", ПараметрыРасчета.Дата);
	Запрос.УстановитьПараметр("ПериодГраница",
		Новый Граница(Новый МоментВремени(ПараметрыРасчета.Дата, ПараметрыРасчета.Ссылка), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТаблицаОС", ПараметрыРасчета.ОС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаОС = РезультатЗапроса.Выгрузить();
	ТаблицаОС.Колонки.Добавить("РасшифровкаРасчета", Новый ОписаниеТипов("Структура"));
	Для Каждого ДанныеСтроки Из ТаблицаОС Цикл
		Расшифровка = Новый Структура;
		Расшифровка.Вставить("ДатаДокумента", ПараметрыРасчета.Дата);
		Если ЭтоИзменениеУсловий Тогда
			Расшифровка.Вставить("ОстатокЧИА", ДанныеСтроки.ОстатокЧИА);
			Расшифровка.Вставить("ИзменениеНГЛС", ДанныеСтроки.ИзменениеНГЛС);
			Расшифровка.Вставить("ОстатокНГЛС", ДанныеСтроки.ОстатокНГЛС);
			Расшифровка.Вставить("ИзменениеЧИА", ДанныеСтроки.СуммаРасходов - ДанныеСтроки.ИзменениеНГЛС);
			ИтогоЧИА = ДанныеСтроки.ОстатокЧИА + ДанныеСтроки.СуммаРасходов - ДанныеСтроки.ИзменениеНГЛС;
		Иначе
			Расшифровка.Вставить("СтоимостьОС", ДанныеСтроки.СтоимостьОС);
			Расшифровка.Вставить("Амортизация", ДанныеСтроки.Амортизация);
			Расшифровка.Вставить("Обесценение", ДанныеСтроки.Обесценение);
			Расшифровка.Вставить("ИтогоСтоимостьОС", ДанныеСтроки.ИтогоСтоимостьОС);
			Расшифровка.Вставить("СправедливаяСтоимость", ДанныеСтроки.СправедливаяСтоимость);
			Если ДанныеСтроки.СправедливаяСтоимость > ДанныеСтроки.ИтогоИнвестиция Тогда
				Расшифровка.Вставить("ПереоценкаДоходы", ДанныеСтроки.СправедливаяСтоимость - ДанныеСтроки.ИтогоИнвестиция);
			ИначеЕсли ДанныеСтроки.СправедливаяСтоимость <> 0 Тогда
				Расшифровка.Вставить("ПереоценкаРасходы", ДанныеСтроки.ИтогоИнвестиция - ДанныеСтроки.СправедливаяСтоимость);
			КонецЕсли;
			Если ДанныеСтроки.СправедливаяСтоимость > 0 Тогда
				ИтогоЧИА = ДанныеСтроки.СправедливаяСтоимость;
			Иначе
				ИтогоЧИА = ДанныеСтроки.ИтогоИнвестиция;
			КонецЕсли;
		КонецЕсли;
		Расшифровка.Вставить("СуммаРасходов", ДанныеСтроки.СуммаРасходов);
		Расшифровка.Вставить("НГЛСРегл", ДанныеСтроки.НГЛСРегл);
		Расшифровка.Вставить("ИтогоЧИА", ИтогоЧИА);
		Если ПараметрыРасчета.РеквизитыДоговора.ВалютаВзаиморасчетов <> ПараметрыРасчета.ВалютаРегламентированногоУчета Тогда
			Расшифровка.Вставить("ВалютаВзаиморасчетов", "(" + ПараметрыРасчета.РеквизитыДоговора.ВалютаВзаиморасчетов + ")");
			Расшифровка.Вставить("ВалютаРегл", "(" +ПараметрыРасчета.ВалютаРегламентированногоУчета + ")");
		Иначе
			Расшифровка.Вставить("ВалютаВзаиморасчетов", "");
			Расшифровка.Вставить("ВалютаРегл", "");
		КонецЕсли;
		ДанныеСтроки.РасшифровкаРасчета = Расшифровка;
	КонецЦикла;
	
	ГрафикПлатежей = Новый ТаблицаЗначений; 
	ГрафикПлатежей.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ГрафикПлатежей.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой));
	
	Если Отказ Тогда
		
		ПараметрыРасчета.Вставить("ТаблицаОС", ТаблицаОС);
		
		Если ПараметрыРасчета.РассчитыватьПроценты Тогда
			Для Каждого ДанныеСтроки Из ТаблицаОС Цикл
				Если ДанныеСтроки.ГрафикНачисленияПроцентовВведенВручную Тогда
					Продолжить;
				КонецЕсли;
				ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
				СтруктураОтбораОС = Новый Структура("ОсновноеСредство", ОсновноеСредство);
				СтрокиПроцентов = ПараметрыРасчета.ГрафикНачисленияПроцентов.НайтиСтроки(СтруктураОтбораОС);
				Для Каждого СтрокаПроцентов Из СтрокиПроцентов Цикл
					ПараметрыРасчета.ГрафикНачисленияПроцентов.Удалить(СтрокаПроцентов);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из ТаблицаОС Цикл
		
		ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
		СтруктураОтбораОС = Новый Структура("ОсновноеСредство", ОсновноеСредство);

		Если ПараметрыРасчета.РассчитыватьПроценты И НЕ ДанныеСтроки.ГрафикНачисленияПроцентовВведенВручную Тогда
			
			// Строки процентов за рассчитываемый период необходимо удалить.
			СуммаКорректировки = 0;
			ЭтоИзменениеУсловий = ТипЗнч(ПараметрыРасчета.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду");
			ДатаНачала = ?(НЕ ЭтоИзменениеУсловий, НачалоДня(ПараметрыРасчета.Дата), КонецМесяца(ПараметрыРасчета.Дата) + 1);
			
			СтрокиПроцентов = ПараметрыРасчета.ГрафикНачисленияПроцентов.НайтиСтроки(СтруктураОтбораОС);
			Для Каждого СтрокаПроцентов Из СтрокиПроцентов Цикл
				Если СтрокаПроцентов.Дата >= ДатаНачала Тогда
					ПараметрыРасчета.ГрафикНачисленияПроцентов.Удалить(СтрокаПроцентов);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Расчет ставки доходности
		Если ДанныеСтроки.ПриведеннаяСтоимостьФакт > 0 Тогда
			СтоимостьОС = ДанныеСтроки.ПриведеннаяСтоимостьФакт;
		Иначе
			СтоимостьОС = ДанныеСтроки.ПриведеннаяСтоимость;
		КонецЕсли;
		АрендныеПлатежи = ДанныеСтроки.АрендныеПлатежи;
		
		СтрокиОплатПоОС = ПараметрыРасчета.ГрафикОплатУслуг.НайтиСтроки(СтруктураОтбораОС);
		
		Если НЕ СтрокиОплатПоОС.Количество() Тогда
			Отказ = Истина;
			Если ПараметрыРасчета.ВыводитьСообщения Тогда
				ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" не заполнен график оплат. Ставка доходности не будет рассчитана';
									|en = 'The payment schedule is not filled in line %1 of the ""Fixed assets"" list. The rate of return will not be calculated'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, ДанныеСтроки.НомерСтроки);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", ДанныеСтроки.НомерСтроки, "ГрафикСсылка");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если АрендныеПлатежи < СтоимостьОС Тогда
			Отказ = Истина;
			Если ПараметрыРасчета.ВыводитьСообщения Тогда
				ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" сумма арендных платежей без НДС (%2) меньше стоимости объекта (%3). Ставка доходности не будет рассчитана';
									|en = 'In line %1 of the ""Fixed assets"" list, the amount of rental payments excluding VAT (%2) is less than the object cost (%3). The rate of return will not be calculated'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, ДанныеСтроки.НомерСтроки, Формат(АрендныеПлатежи, "ЧДЦ=2; ЧН=0,00"), Формат(СтоимостьОС, "ЧДЦ=2; ЧН=0,00"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", ДанныеСтроки.НомерСтроки, "ГрафикСсылка");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ГрафикПлатежей.Очистить();
			
		Для Каждого СтрокаОплаты Из СтрокиОплатПоОС Цикл
			Если СтрокаОплаты.Дата >= НачалоДня(ПараметрыРасчета.Дата) Тогда
				СтрокаГрафика = ГрафикПлатежей.Добавить();
				СтрокаГрафика.Сумма = СтрокаОплаты.УслугаПоАренде - СтрокаОплаты.УслугаПоАрендеНДС;
				СтрокаГрафика.Дата = СтрокаОплаты.Дата;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ГрафикПлатежей.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.НГЛС > 0 Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияАренды) Тогда
				СтрокаГрафика = ГрафикПлатежей.Добавить();
				СтрокаГрафика.Сумма = ДанныеСтроки.НГЛС;
				СтрокаГрафика.Дата = ДанныеСтроки.ДатаОкончанияАренды;
			Иначе
				СтрокаГрафика = ГрафикПлатежей[ГрафикПлатежей.Количество()-1];
				СтрокаГрафика.Сумма = СтрокаГрафика.Сумма + ДанныеСтроки.НГЛС;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьВГрафикПоследнийДеньМесяца(ГрафикПлатежей, НачалоДня(ПараметрыРасчета.Дата));
		
		СтрокаГрафика = ГрафикПлатежей.Вставить(0);
		СтрокаГрафика.Сумма = -СтоимостьОС;
		СтрокаГрафика.Дата = НачалоДня(ПараметрыРасчета.Дата);
		
		ГрафикПлатежей.Сортировать("Дата");
		
		Попытка
			ДанныеСтроки.СтавкаДоходности = ПроцентнаяСтавка(ГрафикПлатежей);
		Исключение
			ДанныеСтроки.СтавкаДоходности = 0;
			Если ПараметрыРасчета.ВыводитьСообщения Тогда
				Отказ = Истина;
				ТекстШаблона = НСтр("ru = 'Не удалось рассчитать ставку доходности по объекту эксплуатации %1. Проверьте график оплат и стоимость основных средств. Нажмите на ячейку для расшифровки';
									|en = 'Cannot calculate the rate of return on the %1 asset. Check the payment schedule and the fixed asset cost. Click the cell to drill down'");
				ТекстСообщения = СтрШаблон(ТекстШаблона, ДанныеСтроки.ОсновноеСредствоПредставление);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", ДанныеСтроки.НомерСтроки, "СтавкаДоходности");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле);
			КонецЕсли;
			Продолжить;
		КонецПопытки;
		
		// Расчет графика процентов
		ОстатокЗайма = СтоимостьОС;
		ОстатокПроцентов = АрендныеПлатежи - СтоимостьОС;
		ПредыдущаяДата = НачалоДня(ПараметрыРасчета.Дата);
		
		ДанныеСтроки.РасшифровкаРасчета.Вставить("ПроцентныйДоход", ОстатокПроцентов);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("АрендныеПлатежи", АрендныеПлатежи - ДанныеСтроки.НГЛС);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("ПриведеннаяСтоимость",
			ДанныеСтроки.ПриведеннаяСтоимость - ДанныеСтроки.НГЛС);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("АвансРегл", ДанныеСтроки.АвансовыеПлатежиРегл);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("ПриведеннаяСтоимостьРегл",
			ДанныеСтроки.РасшифровкаРасчета.ИтогоЧИА - ДанныеСтроки.АвансовыеПлатежиРегл - ДанныеСтроки.НГЛСРегл);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("ОстатокПроцентов", ДанныеСтроки.ОстатокПроцентов);
		ДанныеСтроки.РасшифровкаРасчета.Вставить("ИзменениеПроцентов",
			ОстатокПроцентов - ДанныеСтроки.ОстатокПроцентов);
		
		Если ПараметрыРасчета.РассчитыватьПроценты = Ложь ИЛИ ДанныеСтроки.ГрафикНачисленияПроцентовВведенВручную Тогда
			ДанныеСтроки.ПриведеннаяСтоимость = СтоимостьОС;
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
			
			Если СтрокаГрафика.Сумма < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов =
				ОстатокЗайма
				* (Pow(1 + ДанныеСтроки.СтавкаДоходности / 100, (СтрокаГрафика.Дата - ПредыдущаяДата) / 31536000) - 1);
			
			СуммаПроцентов = Окр(СуммаПроцентов, 2);
			СуммаПроцентов = Мин(СуммаПроцентов, ОстатокПроцентов);
			СуммаПроцентов = Макс(СуммаПроцентов, 0);
			
			ОстатокПроцентов = ОстатокПроцентов - СуммаПроцентов;
			
			Если СуммаПроцентов > 0 Тогда
				
				Если ЭтоИзменениеУсловий И СтрокаГрафика.Дата <= КонецМесяца(ПараметрыРасчета.Дата) Тогда
					СуммаКорректировки = СуммаКорректировки + СуммаПроцентов;
					Продолжить;
				Иначе
					
					Если СуммаКорректировки <> 0 Тогда
						СуммаПроцентов = СуммаПроцентов + СуммаКорректировки;
						СуммаКорректировки = 0;
					КонецЕсли;
					
					СтрокаПроценты = ПараметрыРасчета.ГрафикНачисленияПроцентов.Добавить();
					СтрокаПроценты.Дата = СтрокаГрафика.Дата;
					СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + СуммаПроцентов;
					СтрокаПроценты.ОсновноеСредство = ОсновноеСредство;
					
				КонецЕсли;
				
				ОстатокЗайма = Макс(ОстатокЗайма - СтрокаГрафика.Сумма + СуммаПроцентов, 0);
				
				// ошибку округления относим на последнее начисление
				Если ОстатокПроцентов > 0 И ОстатокЗайма = 0 И СтрокаПроценты <> Неопределено Тогда
					СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + ОстатокПроцентов;
					ОстатокПроцентов = 0;
				КонецЕсли;
					
				ПредыдущаяДата = СтрокаГрафика.Дата;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СуммаКорректировки <> 0 И СтрокаПроценты <> Неопределено Тогда
			СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + СуммаКорректировки;
		КонецЕсли;
		
	КонецЦикла;
			
	ПараметрыРасчета.Вставить("ТаблицаОС", ТаблицаОС);

КонецПроцедуры

// Параметры используемые для расчета ставки и процентов.
// 
// Параметры:
// 	Объект - ДокументОбъект - ДокументОбъект.ПередачаОСВАренду2_4, ДокументОбъект.ИзменениеУсловийПередачиВАренду, Неопределено
// 	РеквизитыДоговора - Структура, Неопределено - см. РеквизитыДоговораКонтрагента
// 
// Возвращаемое значение:
//  Структура:
//		* Договор - СправочникСсылка.ДоговорыКонтрагентов -
//		* Организация - СправочникСсылка.Организации -
//		* Дата - Дата -
//		* Ссылка - ДокументСсылка.ПередачаОСВАренду2_4, ДокументСсылка.ИзменениеУсловийПередачиВАренду, Неопределено -
//		* ОС - ТаблицаЗначений:
//			** ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//			** СправедливаяСтоимостьРегл - Число
//			** СправедливаяСтоимостьУпр - Число
//			** АрендныеПлатежи - Число
//			** НГЛСРегл - Число
//			** НГЛСУпр - Число
//			** АвансовыеПлатежи - Число
//			** АвансовыеПлатежиРегл - Число
//			** ЗалоговаяСтоимость - Число
//			** ГрафикНачисленияПроцентовВведенВручную - Булево
//		* ГрафикОплатУслуг - ТаблицаЗначений:
//			** ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//			** Дата - Дата
//			** УслугаПоАренде - Число
//			** УслугаПоАрендеНДС - Число
//		* РеквизитыДоговора - Структура:
//			** ТипДоговора - ПеречислениеСсылка.ТипыДоговоров - 
//			** ВалютаВзаиморасчетов - СправочникСсылка.Валюты - 
//			** СтавкаНДС - СправочникСсылка.СтавкиНДС - 
//			** ДоговорАренды - СправочникСсылка.ДоговорыАренды
//		* ВалютаРегламентированногоУчета - СправочникСсылка.Валюты -
//		* ВалютаУправленческогоУчета - СправочникСсылка.Валюты -
//		* СуммаАвансовыхПлатежейРегл - Число -
//		* ЭтоИзменениеУсловий - Булево -
//		* РассчитыватьПроценты - Булево -
//		* ВыводитьСообщения - Булево -
//		* ГрафикНачисленияПроцентов - ТаблицаЗначений:
//			** ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//			** Дата - Дата
//			** Проценты - Число
//		* ТаблицаОС - ТаблицаЗначений:
//			** ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации
//			** СправедливаяСтоимостьРегл - Число
//			** СправедливаяСтоимостьУпр - Число
//			** АрендныеПлатежи - Число
//			** НГЛСРегл - Число
//			** НГЛСУпр - Число
//			** АвансовыеПлатежи - Число
//			** АвансовыеПлатежиРегл - Число
//			** ЗалоговаяСтоимость - Число
//			** ГрафикНачисленияПроцентовВведенВручную - Булево
//
Функция ПараметрыРасчетаСтавокПроцентовДоходнойАренды(Объект = Неопределено, РеквизитыДоговора = Неопределено) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыРасчета.Вставить("Дата", '00010101');
	ПараметрыРасчета.Вставить("Ссылка", Неопределено);
	ПараметрыРасчета.Вставить("ОС", Новый ТаблицаЗначений);
	ПараметрыРасчета.Вставить("ГрафикОплатУслуг", Новый ТаблицаЗначений);
	ПараметрыРасчета.Вставить("РеквизитыДоговора", Новый Структура);
	ПараметрыРасчета.Вставить("ВалютаРегламентированногоУчета", Справочники.Валюты.ПустаяСсылка());
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Справочники.Валюты.ПустаяСсылка());
	ПараметрыРасчета.Вставить("СуммаАвансовыхПлатежейРегл", 0);
	ПараметрыРасчета.Вставить("ЭтоИзменениеУсловий", Ложь);
	ПараметрыРасчета.Вставить("РассчитыватьПроценты", Истина);
	ПараметрыРасчета.Вставить("ВыводитьСообщения", Истина);
	
	// Выходные параметры
	ПараметрыРасчета.Вставить("ГрафикНачисленияПроцентов", Новый ТаблицаЗначений);
	ПараметрыРасчета.Вставить("ТаблицаОС", Новый ТаблицаЗначений);

	Если Объект <> Неопределено Тогда
		Если РеквизитыДоговора <> Неопределено Тогда
			ПараметрыРасчета.РеквизитыДоговора = РеквизитыДоговора;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Объект);
		ПараметрыРасчета.ОС = Объект.ОС.Выгрузить();
		ПараметрыРасчета.ГрафикОплатУслуг = Объект.ГрафикОплатУслуг.Выгрузить();
		ПараметрыРасчета.ГрафикОплатУслуг.Индексы.Добавить("ОсновноеСредство");
		ПараметрыРасчета.ГрафикНачисленияПроцентов = Объект.ГрафикНачисленияПроцентов.Выгрузить();
		ПараметрыРасчета.ГрафикНачисленияПроцентов.Индексы.Добавить("ОсновноеСредство");
		ПараметрыРасчета.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.Дата) Тогда 
			ПараметрыРасчета.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПередачаОСВАренду2_4") Тогда
			ПараметрыРасчета.ОС.Колонки.Добавить("СправедливаяСтоимостьРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
			ПараметрыРасчета.ОС.Колонки.Добавить("СправедливаяСтоимостьУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
			ПараметрыРасчета.ОС.Колонки.Добавить("АвансовыеПлатежи", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
			ПараметрыРасчета.ОС.Колонки.Добавить("АвансовыеПлатежиРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
		КонецЕсли;
	КонецЕсли;
	ПараметрыРасчета.ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Формирует график оплат который можно использовать для дисконтирования.
// 
// Параметры:
//  ГрафикПлатежей - ТаблицаЗначений - График оплат услуг.
//  НачалоПериода - Дата - Начало периода
// 
Процедура ДобавитьВГрафикПоследнийДеньМесяца(ГрафикПлатежей, НачалоПериода) Экспорт
	
	ГрафикПлатежей.Сортировать("Дата");
	
	// Добавление в график последнего дня месяца, если его нет.
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	ПоследнийМесяц = ГрафикПлатежей[ГрафикПлатежей.Количество() - 1].Дата;
	Пока ТекущийМесяц <= ПоследнийМесяц Цикл
		ДатаГрафика = НачалоДня(КонецМесяца(ТекущийМесяц));
		Если ГрафикПлатежей.Найти(ДатаГрафика, "Дата") = Неопределено Тогда
			СтрокаГрафика = ГрафикПлатежей.Добавить();
			СтрокаГрафика.Дата = ДатаГрафика;
		КонецЕсли;
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	ГрафикПлатежей.Сортировать("Дата");
	
КонецПроцедуры

// Проверка заполнения графиков доходной аренды.
// 
// Параметры:
//  Объект - ДокументОбъект.ПередачаОСВАренду2_4, ДокументОбъект.ИзменениеУсловийПередачиВАренду -
//  Отказ - Булево -
//
Процедура ПроверитьГрафикиДоходнойАренды(Объект, Отказ) Экспорт
	
	ТаблицаОС = Объект.ОС.Выгрузить();
	ГрафикОплатУслуг = Объект.ГрафикОплатУслуг;
	ГрафикНачисленияУслуг = Объект.ГрафикНачисленияУслуг;
	ДатаНачалаАренды = НачалоДня(Объект.Дата);
	ЭтоПередачаВАренду = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПередачаОСВАренду2_4");
	ЭтоИзменениеУсловий = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду");
	ЭтоВводОстатков = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду");
	ЕстьАвансы = ЭтоПередачаВАренду И Объект.СуммаАвансовыхПлатежей > 0;
	
	Если НЕ ЭтоПередачаВАренду Тогда
		ТаблицаОС.Колонки.Добавить(
			"АвансовыеПлатежи", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Неотрицательный));
	КонецЕсли;
	
	Если ЭтоИзменениеУсловий Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаОС
		|ИЗ
		|	&ТаблицаОС КАК ТаблицаОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПередачаОСВАренду2_4ОС.ОсновноеСредство КАК ОсновноеСредство,
		|	СУММА(ПередачаОСВАренду2_4ОС.АвансовыеПлатежи) КАК АвансовыеПлатежи
		|ПОМЕСТИТЬ Авансы
		|ИЗ
		|	Документ.ПередачаОСВАренду2_4.ОС КАК ПередачаОСВАренду2_4ОС
		|ГДЕ
		|	ПередачаОСВАренду2_4ОС.Ссылка.Договор = &Договор
		|	И ПередачаОСВАренду2_4ОС.Ссылка.Проведен
		|	И ПередачаОСВАренду2_4ОС.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|			ИЗ
		|				ТаблицаОС КАК ТаблицаОС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПередачаОСВАренду2_4ОС.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(Авансы.АвансовыеПлатежи, 0) КАК АвансовыеПлатежи
		|ИЗ
		|	ТаблицаОС КАК ТаблицаОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Авансы КАК Авансы
		|		ПО ТаблицаОС.ОсновноеСредство = Авансы.ОсновноеСредство
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
		Запрос.УстановитьПараметр("Договор", Объект.Договор);
		
		ТаблицаОС = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		ЕстьОплаты = Ложь;
		ЕстьНачисления = Ложь;
		СуммаОплат = 0;
		СуммаНачислений = 0;
		СуммаОплатНДС = 0;
		СуммаНачисленийНДС = 0;
		СуммаОплатДоИзменения = 0;
		СуммаНачисленийДоИзменения = 0;
		СуммаОплатНДСДоИзменения = 0;
		СуммаНачисленийНДСДоИзменения = 0;
		СуммаАванса = СтрокаОС.АвансовыеПлатежи;
		
		НайденныеСтрокиОплат
			= ГрафикОплатУслуг.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство));
		
		Для Каждого СтрокаОплаты Из НайденныеСтрокиОплат Цикл
			ЕстьОплаты = Истина;
			Если СтрокаОплаты.Дата < ДатаНачалаАренды Тогда
				Если ЭтоИзменениеУсловий Тогда
					СуммаОплатДоИзменения = СуммаОплатДоИзменения + СтрокаОплаты.УслугаПоАренде;
					СуммаОплатНДСДоИзменения = СуммаОплатНДСДоИзменения + СтрокаОплаты.УслугаПоАрендеНДС;
				Иначе
					ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" в графике оплат не должно быть строк с датой меньше, чем дата начала аренды (%2)';
										|en = 'Line %1 of the ""Fixed assets"" list in the payment schedule must contain no lines with a date earlier than the rental start date (%2)'");
					ТекстСообщения = СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки, Формат(ДатаНачалаАренды, "ДЛФ=D"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
					Продолжить;
				КонецЕсли;
			Иначе
				СуммаОплат = СуммаОплат + СтрокаОплаты.УслугаПоАренде;
				СуммаОплатНДС = СуммаОплатНДС + СтрокаОплаты.УслугаПоАрендеНДС;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
			
		Если НЕ ЭтоВводОстатков И НЕ ЕстьОплаты Тогда
			ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" не заполнен график оплат';
								|en = 'The payment schedule is not filled in line %1 of the ""Fixed assets"" list'");
			ТекстСообщения = СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			Продолжить;
		КонецЕсли;
		
		НайденныеСтрокиНачислений
			= ГрафикНачисленияУслуг.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство));
		
		Для Каждого СтрокаНачисления Из НайденныеСтрокиНачислений Цикл
			ЕстьНачисления = Истина;
			Если СтрокаНачисления.Дата < ДатаНачалаАренды Тогда
				Если ЭтоИзменениеУсловий Тогда
					СуммаНачисленийДоИзменения = СуммаНачисленийДоИзменения + СтрокаНачисления.УслугаПоАренде;
					СуммаНачисленийНДСДоИзменения = СуммаНачисленийНДСДоИзменения + СтрокаНачисления.УслугаПоАрендеНДС;
				Иначе
					ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" в графике начислений не должно быть строк с датой меньше, чем дата начала аренды (%2)';
										|en = 'Line %1 of the ""Fixed assets"" list in the charge schedule must contain no lines with a date earlier than the rental start date (%2)'");
					ТекстСообщения = СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки, Формат(ДатаНачалаАренды, "ДЛФ=D"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
					Продолжить;
				КонецЕсли;
			Иначе
				СуммаНачислений = СуммаНачислений + СтрокаНачисления.УслугаПоАренде;
				СуммаНачисленийНДС = СуммаНачисленийНДС + СтрокаНачисления.УслугаПоАрендеНДС;
			КонецЕсли;
		КонецЦикла;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоВводОстатков И НЕ ЕстьНачисления Тогда
			ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" не заполнен график начислений';
								|en = 'The charge schedule is not filled in line %1 of the ""Fixed assets"" list'");
			ТекстСообщения = СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИзменениеУсловий И СуммаАванса = 0 И СуммаОплатДоИзменения <> СуммаНачисленийДоИзменения Тогда
			Остаток = СуммаОплатДоИзменения - СуммаНачисленийДоИзменения;
			СуммаНачислений = СуммаНачислений - Остаток;
		КонецЕсли;
		
		Если НЕ ЭтоВводОстатков И НЕ ЕстьАвансы И СуммаАванса = 0 И СуммаОплат <> СуммаНачислений Тогда
			ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" сумма услуг по графику оплат (%2) не равна сумме услуг по графику начислений (%3)';
								|en = 'In line %1 of the ""Fixed assets"" list, the amount of services by payment schedule (%2) is not equal to the amount of services by charge schedule (%3)'");
			ТекстСообщения =
				СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки, Формат(СуммаОплат, "ЧДЦ=2"), Формат(СуммаНачислений, "ЧДЦ=2"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИзменениеУсловий И СуммаАванса = 0 И СуммаОплатНДСДоИзменения <> СуммаНачисленийНДСДоИзменения Тогда
			Остаток = СуммаОплатНДСДоИзменения - СуммаНачисленийНДСДоИзменения;
			СуммаНачисленийНДС = СуммаНачисленийНДС - Остаток;
		КонецЕсли;
		
		Если НЕ ЭтоВводОстатков И НЕ ЕстьАвансы И СуммаАванса = 0 И СуммаОплатНДС <> СуммаНачисленийНДС Тогда
			ШаблонТекста = НСтр("ru = 'В строке %1 списка ""Основные средства"" сумма НДС по графику оплат (%2) не равна сумме НДС по графику начислений (%3)';
								|en = 'In line %1 of the ""Fixed assets"" list, the VAT amount by payment schedule (%2) is not equal to the VAT amount by charge schedule (%3)'");
			ТекстСообщения =
				СтрШаблон(ШаблонТекста, СтрокаОС.НомерСтроки, Формат(СуммаОплатНДС, "ЧДЦ=2"), Формат(СуммаНачисленийНДС, "ЧДЦ=2"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИзменениеУсловий И СуммаАванса <> 0 Тогда
			СуммаОплатОСИтогоБезНДС = СуммаОплатДоИзменения - СуммаОплатНДСДоИзменения + СуммаОплат - СуммаОплатНДС;
			СуммаНачисленийОСИтогоБезНДС = СуммаНачисленийДоИзменения - СуммаНачисленийНДСДоИзменения
				+ СуммаНачислений - СуммаНачисленийНДС;
			РазницаНачисленийИОплат = СуммаНачисленийОСИтогоБезНДС - СуммаОплатОСИтогоБезНДС;
			Если РазницаНачисленийИОплат <> СуммаАванса Тогда
				ШаблонТекста = НСтр(
					"ru = 'В строке %1 списка ""Основные средства"" разница между общей суммой начислений и оплат без НДС за весь период аренды (%2) не равна сумме аванса по ОС (%3) из документа передачи в аренду';
					|en = 'In line %1 of the ""Fixed assets"" list, the difference between the total amount of charges and payments excluding VAT for the entire rental period (%2) is not equal to the FA prepayment amount (%3) from the rental document'");
				ТекстСообщения = СтрШаблон(
					ШаблонТекста,
					СтрокаОС.НомерСтроки,
					Формат(РазницаНачисленийИОплат, "ЧДЦ=2; ЧН=0,00"),
					Формат(СуммаАванса, "ЧДЦ=2"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ОС", СтрокаОС.НомерСтроки, "ГрафикСсылка");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ И ЕстьАвансы Тогда
		
		СуммаОплатИтого = Объект.ГрафикОплатУслуг.Итог("УслугаПоАренде")
			- Объект.ГрафикОплатУслуг.Итог("УслугаПоАрендеНДС")
			+ Объект.СуммаАвансовыхПлатежей;
		СуммаНачисленийИтого = Объект.ГрафикНачисленияУслуг.Итог("УслугаПоАренде")
			- Объект.ГрафикНачисленияУслуг.Итог("УслугаПоАрендеНДС");
			
		Если СуммаОплатИтого <> СуммаНачисленийИтого Тогда
			ШаблонТекста = НСтр("ru = 'Общая сумма оплат и авансовых платежей без НДС (%1) не равна общей сумме начислений без НДС по графику (%2)';
								|en = 'The total amount of payments and prepayments excluding VAT (%1) is not equal to the total amount of charges excluding VAT as scheduled (%2)'");
			ТекстСообщения =
				СтрШаблон(ШаблонТекста, Формат(СуммаОплатИтого, "ЧДЦ=2"), Формат(СуммаНачисленийИтого, "ЧДЦ=2"));
			Поле = "Объект.СуммаАвансовыхПлатежей";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неактуальные строки графиков доходной аренды в документе.
// 
// Параметры:
//  Объект - ДокументОбъект.ПередачаОСВАренду2_4, ДокументОбъект.ИзменениеУсловийПередачиВАренду -
//
Процедура УдалитьНеактуальныеСтрокиГрафиков(Объект) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОС", Объект.ОС.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("ГрафикОплатУслуг", Объект.ГрафикОплатУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияУслуг", Объект.ГрафикНачисленияУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ГрафикНачисленияПроцентов", Объект.ГрафикНачисленияУслуг.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикОплатУслуг.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втОСГрафикаОплат
		|ИЗ
		|	&ГрафикОплатУслуг КАК ГрафикОплатУслуг
		|ГДЕ
		|	НЕ ГрафикОплатУслуг.ОсновноеСредство В (&МассивОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикНачисленияУслуг.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втОСГрафикаНачислений
		|ИЗ
		|	&ГрафикНачисленияУслуг КАК ГрафикНачисленияУслуг
		|ГДЕ
		|	НЕ ГрафикНачисленияУслуг.ОсновноеСредство В (&МассивОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикНачисленияПроцентов.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втОСГрафикаПроцентов
		|ИЗ
		|	&ГрафикНачисленияПроцентов КАК ГрафикНачисленияПроцентов
		|ГДЕ
		|	НЕ ГрафикНачисленияПроцентов.ОсновноеСредство В (&МассивОС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОСГрафикаОплат.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	втОСГрафикаОплат КАК втОСГрафикаОплат
		|СГРУППИРОВАТЬ ПО
		|	втОСГрафикаОплат.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОСГрафикаПроцентов.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	втОСГрафикаПроцентов КАК втОСГрафикаПроцентов
		|СГРУППИРОВАТЬ ПО
		|	втОСГрафикаПроцентов.ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОСГрафикаНачислений.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	втОСГрафикаНачислений КАК втОСГрафикаНачислений
		|СГРУППИРОВАТЬ ПО
		|	втОСГрафикаНачислений.ОсновноеСредство";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураОтбора = Новый Структура("ОсновноеСредство");
	
	РезультатОплаты = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-2];
	Если НЕ РезультатОплаты.Пустой() Тогда
		Выборка = РезультатОплаты.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.ОсновноеСредство = Выборка.ОсновноеСредство;
			НайденныеСтрокиГрафика = Объект.ГрафикОплатУслуг.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаГрафика Из НайденныеСтрокиГрафика Цикл
				Объект.ГрафикОплатУслуг.Удалить(СтрокаГрафика);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	РезультатНачисления = РезультатыЗапроса[РезультатыЗапроса.ВГраница()-1];
	Если НЕ РезультатНачисления.Пустой() Тогда
		Выборка = РезультатНачисления.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.ОсновноеСредство = Выборка.ОсновноеСредство;
			НайденныеСтрокиГрафика = Объект.ГрафикНачисленияУслуг.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаГрафика Из НайденныеСтрокиГрафика Цикл
				Объект.ГрафикНачисленияУслуг.Удалить(СтрокаГрафика);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	РезультатПроценты = РезультатыЗапроса[РезультатыЗапроса.ВГраница()];
	Если НЕ РезультатПроценты.Пустой() Тогда
		Выборка = РезультатПроценты.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.ОсновноеСредство = Выборка.ОсновноеСредство;
			НайденныеСтрокиГрафика = Объект.ГрафикНачисленияПроцентов.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаГрафика Из НайденныеСтрокиГрафика Цикл
				Объект.ГрафикНачисленияПроцентов.Удалить(СтрокаГрафика);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет определить есть ли в табличной части документа основные средства, переданные в субаренду.
//  При нахождении дублей формирует сообщения пользователю.
//
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  Отказ - Булево - Признак отказа от дальнейшей обработки.
//  ОтборПоДействиям - Булево
//
Процедура ПроверитьВозвратИзСубаренды(Объект, Отказ, ОтборПоДействиям = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПереданныеВАрендуОССрезПоследних.Регистратор КАК Регистратор,
	|	ПереданныеВАрендуОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереданныеВАрендуОССрезПоследних.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПереданныеВАрендуОССрезПоследних
	|ГДЕ
	|	ПереданныеВАрендуОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПереданоВАренду)
	|	И ПереданныеВАрендуОССрезПоследних.Договор.ТипДоговора В (&ТипыДоговоровПоФСБУ25)
	|";
	Запрос.УстановитьПараметр("ТипыДоговоровПоФСБУ25", УчетАрендованныхОСКлиентСервер.ТипыДоговоровДоходнойАренды());
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
	
		ПереданныеВАренду = Результат.Выгрузить();
		ПереданныеВАренду.Индексы.Добавить("ОсновноеСредство");
	
		ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" передано в субаренду по договору %2, документ передачи в аренду %3.
								|Перед прекращением аренды ОС его нужно вернуть из субаренды.';
								|en = 'The ""%1"" fixed asset is subleased under the %2 contract, the %3 rental document.
								|Before you terminate the fixed asset lease, returned it from sublease.'"); 

		Для Каждого ДанныеСтроки Из Объект.ОС Цикл
			
			Если ОтборПоДействиям 
				И ДанныеСтроки.ДействиеСПредметомАренды <> Перечисления.ДействияСПредметамиАренды.ДосрочныйВыкуп
				И ДанныеСтроки.ДействиеСПредметомАренды <> Перечисления.ДействияСПредметамиАренды.ПрекращениеАренды Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеАренды = ПереданныеВАренду.НайтиСтроки(Новый Структура("ОсновноеСредство", ДанныеСтроки.ОсновноеСредство));
			
			Если ДанныеАренды.Количество() > 0 Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					ДанныеСтроки.ОсновноеСредство,
					ДанныеАренды[0].Договор,
					ДанныеАренды[0].Регистратор);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "", Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПроблемуВыполненияРасчета(Операция, Период, Организация, ОписаниеПроблемы, ГруппаПроблем = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		Операция,
		Организация,
		НачалоМесяца(Период));
		
	Если НЕ ЗначениеЗаполнено(ГруппаПроблем) Тогда
		ГруппаПроблем = НСтр("ru = 'При выполнении операции зарегистрированы ошибки';
							|en = 'Errors are registered while executing the operation:'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПроблем,
		Перечисления.ВажностьПроблемыУчета.Ошибка,
		ОписаниеПроблемы,
		Объект);
	
КонецПроцедуры

// Дополняет график оплат и начислений по предыдущим условиям договора передачи в аренду
// 
// Параметры:
// ДанныеСтроки - Структура
// ГрафикОплатУслуг - ДокументТабличнаяЧасть.ИзменениеУсловийПередачиВАренду.ГрафикОплатУслуг
// ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ИзменениеУсловийПередачиВАренду.ГрафикНачисленияУслуг
// Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура ДополнитьГрафикОплатИНачисленийДоходнойАрендыПоПредыдущимУсловиям(ДанныеСтроки, ГрафикОплатУслуг, ГрафикНачисленияУслуг, Договор) Экспорт
	
	ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ДанныеСтроки.ДатаНачалаАренды;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("МассивОС", ОсновноеСредство);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаНачала));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикОплат.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикОплат.Дата КАК Дата,
	|	ГрафикОплат.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикОплат.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС,
	|	ГрафикОплат.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ втГрафикОплат
	|ИЗ
	|	РегистрСведений.ГрафикОплатУслугПоДоходнойАренде КАК ГрафикОплат
	|ГДЕ
	|	ГрафикОплат.Договор = &Договор
	|	И ГрафикОплат.ОсновноеСредство В (&МассивОС)
	|	И ГрафикОплат.Дата < &Дата
	|	И ГрафикОплат.ДатаИзменения < &Дата
	|	И ГрафикОплат.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикОплат.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(втГрафикОплат.ДатаИзменения) КАК ДатаИзменения
	|ПОМЕСТИТЬ втГрафикОплатПериод
	|ИЗ
	|	втГрафикОплат КАК втГрафикОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикОплат.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачисления.ОсновноеСредство КАК ОсновноеСредство,
	|	ГрафикНачисления.Дата КАК Дата,
	|	ГрафикНачисления.УслугаПоАренде КАК УслугаПоАренде,
	|	ГрафикНачисления.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС,
	|	ГрафикНачисления.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ втГрафикНачисления
	|ИЗ
	|	РегистрСведений.ГрафикНачисленияУслугПоДоходнойАренде КАК ГрафикНачисления
	|ГДЕ
	|	ГрафикНачисления.Договор = &Договор
	|	И ГрафикНачисления.ОсновноеСредство В (&МассивОС)
	|	И ГрафикНачисления.Дата < &Дата
	|	И ГрафикНачисления.ДатаИзменения < &Дата
	|	И ГрафикНачисления.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикНачисления.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(втГрафикНачисления.ДатаИзменения) КАК ДатаИзменения
	|ПОМЕСТИТЬ втГрафикНачисленияПериод
	|ИЗ
	|	втГрафикНачисления КАК втГрафикНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикНачисления.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикОплат.ОсновноеСредство КАК ОсновноеСредство,
	|	втГрафикОплат.Дата КАК Дата,
	|	втГрафикОплат.УслугаПоАренде КАК УслугаПоАренде,
	|	втГрафикОплат.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
	|ИЗ
	|	втГрафикОплат КАК втГрафикОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГрафикОплатПериод КАК втГрафикОплатПериод
	|		ПО втГрафикОплат.ОсновноеСредство = втГрафикОплатПериод.ОсновноеСредство
	|			И втГрафикОплат.ДатаИзменения = втГрафикОплатПериод.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикНачисления.ОсновноеСредство КАК ОсновноеСредство,
	|	втГрафикНачисления.Дата КАК Дата,
	|	втГрафикНачисления.УслугаПоАренде КАК УслугаПоАренде,
	|	втГрафикНачисления.УслугаПоАрендеНДС КАК УслугаПоАрендеНДС
	|ИЗ
	|	втГрафикНачисления КАК втГрафикНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГрафикНачисленияПериод КАК втГрафикНачисленияПериод
	|		ПО втГрафикНачисления.ОсновноеСредство = втГрафикНачисленияПериод.ОсновноеСредство
	|			И втГрафикНачисления.ДатаИзменения = втГрафикНачисленияПериод.ДатаИзменения";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатОплаты = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1];
	Если НЕ РезультатОплаты.Пустой() Тогда
		Выборка = РезультатОплаты.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаГрафика = ГрафикОплатУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрафика, Выборка);
		КонецЦикла;
	КонецЕсли;
	
	РезультатНачисления = РезультатыЗапроса[РезультатыЗапроса.ВГраница()];
	Если НЕ РезультатНачисления.Пустой() Тогда
		Выборка = РезультатНачисления.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаГрафика = ГрафикНачисленияУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГрафика, Выборка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает переданные в аренду ОС по договору
// 
// Параметры:
// Договор - СправочникСсылка.ДоговорыКонтрагентов -
// Дата - Дата -
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыЭксплуатации
Функция ПереданныеВАрендуОСПоДоговору(Договор, Дата) Экспорт
	
	МассивОС = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПереданныеВАрендуОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(&Дата,) КАК ПереданныеВАрендуОССрезПоследних
		|ГДЕ
		|	ПереданныеВАрендуОССрезПоследних.Договор = &Договор
		|	И ПереданныеВАрендуОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПереданоВАренду)";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Возврат МассивОС;
	
КонецФункции

// Возвращает переданные в аренду ОС по договору
// 
// Параметры:
// Договор - СправочникСсылка.ДоговорыАренды -
// Дата - Дата -
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыЭксплуатации
Функция ПолученныеВАрендуОСПоДоговору(Договор, Дата) Экспорт
	
	МассивОС = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АрендованныеОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.АрендованныеОС.СрезПоследних(&Дата, Договор = &Договор) КАК АрендованныеОССрезПоследних
		|ГДЕ
		|	АрендованныеОССрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде)";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
	
	Возврат МассивОС;
	
КонецФункции

// Возвращает периодичность графика
// 
// Параметры:
// ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации -
// График - ДокументТабличнаяЧасть.ПередачаОСВАренду2_4.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ПередачаОСВАренду2_4.ГрафикНачисленияУслуг -
//
// Возвращаемое значение:
// 	ПеречислениеСсылка.ПериодичностьГрафика
Функция ПериодичностьГрафикаДоходнойАренды(ОсновноеСредство, График) Экспорт
	
	ПредыдущаяДата = Неопределено;
	ПредыдущаяПериодичность = Неопределено;
	ПроизвольнаяПериодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
	
	СтрокиГрафикаПоОС = График.НайтиСтроки(Новый Структура("ОсновноеСредство", ОсновноеСредство));
	
	Для Каждого СтрокаГрафика Из СтрокиГрафикаПоОС Цикл
	
		Если ПредыдущаяДата <> Неопределено Тогда
			
			Периодичность = УчетАрендованныхОСКлиентСервер.ПериодичностьГрафика(ПредыдущаяДата, СтрокаГрафика.Дата);
			
			Если ПредыдущаяПериодичность = Неопределено Тогда
				ПредыдущаяПериодичность = Периодичность;
			ИначеЕсли ПредыдущаяПериодичность <> Периодичность Тогда
				ПредыдущаяПериодичность = ПроизвольнаяПериодичность;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ПредыдущаяДата = СтрокаГрафика.Дата;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПредыдущаяПериодичность) Тогда 
		ПредыдущаяПериодичность = ПроизвольнаяПериодичность;
	КонецЕсли;
	
	Возврат ПредыдущаяПериодичность;
	
КонецФункции

// Заполняет ставку доходности и график процентов по данным расчета
// 
// Параметры:
//  Форма - см. Документ.ПередачаОСВАренду2_4.Форма.ФормаДокумента
//  ПараметрыРасчета - см. ПараметрыРасчетаСтавокПроцентовДоходнойАренды
//  ПересчитатьПроценты - Булево
// 
Процедура ЗаполнитьСтавкуДоходностиГрафикПроцентов(Форма, ПараметрыРасчета, ПересчитатьПроценты) Экспорт
	
	Объект = Форма.Объект;
	РеквизитыДляЗаполнения = "СтавкаДоходности, ПриведеннаяСтоимость, РасшифровкаРасчета, НГЛС";
	
	Для Каждого СтрокаОС Из ПараметрыРасчета.ТаблицаОС Цикл
		НайденныеСтроки = Объект.ОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаОС.ОсновноеСредство));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаОС, РеквизитыДляЗаполнения);
		КонецЦикла;
	КонецЦикла;
	
	Если ПересчитатьПроценты Тогда
		Объект.ГрафикНачисленияПроцентов.Загрузить(ПараметрыРасчета.ГрафикНачисленияПроцентов);
		Форма.ОтображатьГрафикПроцентовИзРегистра = Ложь;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
