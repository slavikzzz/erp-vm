////////////////////////////////////////////////////////////////////////////////
// ОУП: Процедуры подсистемы оперативного учета производства
//
////////////////////////////////////////////////////////////////////////////////

//++ НЕ УТКА

#Область ПрограммныйИнтерфейс

//++ Устарело_Производство21

// Подготавливает данные для печати маршрутной карты на продукцию
//
// Параметры:
//  ДанныеОПродукции	- Массив - содержит массив структур в которых данные КодСтроки,Заказ.
//
// Возвращаемое значение:
//   Структура   - содержит параметры печати.
//
Функция ПодготовитьДанныеДляПечатиМаршрутнойКартыНаПродукцию(ДанныеОПродукции) Экспорт

	МассивОбъектов = Новый Массив;
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ",     Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаПродукции.Колонки.Добавить("Порядок",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Порядок = 1;
	Для каждого СтруктураДанных Из ДанныеОПродукции Цикл
		Если МассивОбъектов.Найти(СтруктураДанных.Заказ) = Неопределено Тогда
			МассивОбъектов.Добавить(СтруктураДанных.Заказ);
		КонецЕсли; 
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		НоваяСтрока.Порядок = Порядок;
		Порядок = Порядок + 1;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ТаблицаПродукции.Порядок КАК Порядок
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК Пометка,
	|	ЗаказПродукция.НомерСтроки КАК НомерСтроки,
	|	ЗаказПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказПродукция.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказПродукция.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК ДатаЗапуска,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ДатаЗавершения
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.КодСтроки = ТаблицаПродукции.КодСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки,
	|	ЗаказПродукция.НомерСтроки,
	|	ЗаказПродукция.Номенклатура,
	|	ЗаказПродукция.Характеристика,
	|	ТаблицаПродукции.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукции.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки,
	|	ИСТИНА КАК Пометка,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказВыходныеИзделия.Номенклатура,
	|	ЗаказВыходныеИзделия.Характеристика,
	|	ВЫБОР
	|		КОГДА ЗаказВыходныеИзделия.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК ДатаЗапуска,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ДатаЗавершения
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.КодСтроки = ТаблицаПродукции.КодСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказВыходныеИзделия.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|			И (ЗаказВыходныеИзделия.ПроизводитсяВПроцессе)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ТаблицаПродукции.КодСтроки,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказВыходныеИзделия.Номенклатура,
	|	ЗаказВыходныеИзделия.Характеристика,
	|	ТаблицаПродукции.Заказ";
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	Запрос.УстановитьПараметр("ПустойКлючСвязи",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПродукция = Результат[1].Выбрать();
	ТаблицаПолуфабрикаты = Результат[2].Выгрузить();
	
	СписокПродукции = Новый ДеревоЗначений;
	СписокПродукции.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СписокПродукции.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СписокПродукции.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	СписокПродукции.Колонки.Добавить("ДатаЗапуска",                Новый ОписаниеТипов("Дата"));
	СписокПродукции.Колонки.Добавить("ДатаЗавершения",             Новый ОписаниеТипов("Дата"));
	СписокПродукции.Колонки.Добавить("Пометка",                    Новый ОписаниеТипов("Булево"));
	СписокПродукции.Колонки.Добавить("Заказ",                      Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	СписокПродукции.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));

	ЕстьПолуфабрикаты = Ложь;
	ЭлементыПродукция = СписокПродукции.Строки;
	Пока ВыборкаПродукция.Следующий() Цикл
		СтрокаПродукция = ЭлементыПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, ВыборкаПродукция);
		СтруктураПоиска = Новый Структура("Заказ,КодСтроки", ВыборкаПродукция.Заказ, ВыборкаПродукция.КодСтроки);
  		СписокСтрок = ТаблицаПолуфабрикаты.НайтиСтроки(СтруктураПоиска);
		ЭлементыПолуфабрикат = СтрокаПродукция.Строки;
		Для каждого ВыборкаПолуфабрикат Из СписокСтрок Цикл
			СтрокаПолуфабрикат = ЭлементыПолуфабрикат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПолуфабрикат, ВыборкаПолуфабрикат);
			ЕстьПолуфабрикаты = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьПолуфабрикаты Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(СписокПродукции, Новый УникальныйИдентификатор);
		ДанныеДляПечати = Неопределено;
	Иначе
		АдресХранилища = "";
		ДанныеДляПечати = Новый Массив;
		Для каждого СтрокаПродукция Из СписокПродукции.Строки Цикл
			СтруктураДанных = Новый Структура("Заказ,НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаПродукция);
			СтруктураДанных.Вставить("ЭтоПолуфабрикат", Ложь);
			ДанныеДляПечати.Добавить(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДанныеДляПечати", ДанныеДляПечати);
	ПараметрыПечати.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыПечати.Вставить("ЕстьПолуфабрикаты", ЕстьПолуфабрикаты);
	ПараметрыПечати.Вставить("МассивОбъектов", МассивОбъектов);
	
	Возврат ПараметрыПечати;
	
КонецФункции

// Формирует маршрутные листы
//
// Параметры:
//  ДанныеМаршрутныхЛистов	- Массив - данные для формирования маршрутных листов.
//
// Возвращаемое значение:
//   Число   - Количество сформированных документов.
//
Функция СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов) Экспорт

	КоличествоОбработанных = 0;
	Для каждого ДанныеЗаполнения Из ДанныеМаршрутныхЛистов Цикл
		
		НовыйДокумент = Документы.МаршрутныйЛистПроизводства.СоздатьДокумент();
		НовыйДокумент.Заполнить(ДанныеЗаполнения);
		
		НовыйДокумент.Дата = ТекущаяДатаСеанса();
		НовыйДокумент.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Создан;
		
		НовыйДокумент.ДополнительныеСвойства.Вставить("ТребуетсяПроверкаГрафика", Ложь);
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;

	Возврат КоличествоОбработанных;
	
КонецФункции

//-- Устарело_Производство21

#Область РегистрацияОпераций

// Возвращает данные операции из очереди
//
// Параметры:
//  КлючОперации - РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций - ключ записи.
// 
// Возвращаемое значение:
//   - Структура - данные операции из очереди.
//
Функция ДанныеОперацииИзОчереди(КлючОперации) Экспорт
	
	ДанныеОпераций = ДанныеОперацийИзОчереди(КлючОперации);
	
	Если ДанныеОпераций.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеОпераций[0];
	
КонецФункции

// Возвращает данные операций из очереди
//
// Параметры:
//  КлючиОпераций	 - Массив, РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций - ключ записи.
// 
// Возвращаемое значение:
//  Массив - список данных операций из очереди.
//
Функция ДанныеОперацийИзОчереди(КлючиОпераций) Экспорт
	
	Идентификаторы = ОбщегоНазначенияУТКлиентСервер.Массив(КлючиОпераций);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	
	|	ИД.Подразделение         КАК Подразделение,
	|	ИД.Этап                  КАК Этап,
	|	ИД.Операция              КАК Операция,
	|	ИД.ИдентификаторОперации КАК ИдентификаторОперации
	|
	|ИЗ
	|	РегистрСведений.ОчередьПроизводственныхОпераций КАК ИД
	|ГДЕ
	|	ЛОЖЬ
	|;
	|ВЫБРАТЬ
	|
	|	ИД.Подразделение         КАК Подразделение,
	|	ИД.Этап                  КАК Этап,
	|	ИД.Операция              КАК Операция,
	|	ИД.ИдентификаторОперации КАК ИдентификаторОперации
	|
	|ПОМЕСТИТЬ ИД
	|ИЗ
	|	&ИсточникДанных КАК ИД
	|;
	|ВЫБРАТЬ
	|	Очередь.Подразделение             КАК Подразделение,
	|	Очередь.МаршрутнаяКарта           КАК МаршрутнаяКарта,
	//
	|	Очередь.Операция                  КАК Операция,
	|	Очередь.ИдентификаторОперации     КАК ИдентификаторОперации,
	//
	|	ВЫБОР
	|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА Очередь.Операция.РабочийЦентр
	|		ИНАЧЕ Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра
	|	КОНЕЦ КАК ВидРабочегоЦентра,
	|
	|	ВЫБОР
	|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ПараллельнаяЗагрузка, ЛОЖЬ)
	|		ИНАЧЕ ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра.ПараллельнаяЗагрузка, ЛОЖЬ)
	|	КОНЕЦ КАК ПараллельнаяЗагрузка,
	|	
	|	ВЫБОР
	|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
	|			ТОГДА Очередь.Операция.РабочийЦентр
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|	КОНЕЦ КАК РабочийЦентр,
	|
	|	ВЫБОР
	|		КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Очередь.Операция.РабочийЦентр КАК Справочник.РабочиеЦентры) = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяССылка)
	|						ТОГДА 1
	|					ИНАЧЕ  ВЫРАЗИТЬ(Очередь.Операция.РабочийЦентр КАК Справочник.РабочиеЦентры).КоэффициентВремениРаботы
	|				КОНЕЦ
	|			ИНАЧЕ 1
	|	КОНЕЦ КАК КоэффициентВремениРаботы,
	|	
	|	Очередь.Операция.Участок                         КАК Участок,
	|	Очередь.Операция.ЕдиницаИзмерения                КАК ЕдиницаИзмерения,
	|	Очередь.Операция.Количество                      КАК КоличествоШтучное,
	|	ЕСТЬNULL(Очередь.Операция.МожноПропустить, ЛОЖЬ) КАК МожноПропустить,
	//
	|	Очередь.Этап                   КАК Этап,
	|	Очередь.Этап.Организация       КАК Организация,
	//
	|	Очередь.Запланировано          КАК Запланировано,
	|	ВЫБОР
	|		КОГДА Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Создано
	|			ТОГДА Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано
	|		ИНАЧЕ 0
	|	КОНЕЦ                          КАК ОжиданиеСоздания,
	|	Очередь.ОжиданиеПредшествующих КАК ОжиданиеПредшествующих,
	|	Очередь.НачатыПредшествующие   КАК НачатыПредшествующие,
	|	Очередь.МожноВыполнять         КАК МожноВыполнять,
	|	Очередь.Выполняется            КАК Выполняется,
	|	Очередь.Выполнено              КАК Выполнено,
	|	Очередь.ТребуетПовторения      КАК ТребуетПовторения,
	|	Очередь.Пропущено              КАК Пропущено,
	//
	|	Очередь.ВремяШтучное           КАК ВремяШтучное,
	|	Очередь.ВремяПЗ                КАК ВремяПЗ,
	|	Очередь.ВремяЕдИзм             КАК ВремяЕдИзм,
	//
	|	Очередь.Операция.Владелец      КАК ОперацияВладелец,
	|	Очередь.ВАрхиве                КАК ВАрхиве
	|
	|ИЗ
	|	ИД КАК ИД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
	|		ПО ИД.Подразделение            = Очередь.Подразделение
	|			И ИД.Этап                  = Очередь.Этап
	|			И ИД.Операция              = Очередь.Операция
	|			И ИД.ИдентификаторОперации = Очередь.ИдентификаторОперации
	|";
	ТекстыЗапросов = СтрРазделить(ТекстЗапроса, ";", Ложь);
	
	Запрос = Новый Запрос(ТекстыЗапросов[0]);
	ИсточникДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ИсточникДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Идентификатор, "Подразделение,Этап,Операция,ИдентификаторОперации");
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстыЗапросов[1] + ";" + ТекстыЗапросов[2]);
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	Возврат Результат;
	
КонецФункции

// Возвращает данные заполнения производственных операций
//
// Параметры:
//  КлючиОпераций			 - Массив, РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций - ключ записи
//  ПараметрыНазначения		 - Структура														 - параметры назначения
//    * Участок
//    * ВидРабочегоЦентра
//    * РабочийЦентр
//    * Исполнитель
//    * Количество
//  УстанавливаемыйСтатус	 - ПеречислениеСсылка.СтатусыПроизводственныхОпераций						 - статус нового документа
//  ПроверятьПараметры		 - Булево															 - Истина, если нужно проверить соответствие параметров назначения
// 
// Возвращаемое значение:
//  Массив - данные заполнения производственных операций.
//
Функция ДанныеЗаполненияНовыхПроизводственныхОпераций(КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус = Неопределено, ПроверятьПараметры = Истина) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|
		|	ИД.Подразделение         КАК Подразделение,
		|	ИД.Этап                  КАК Этап,
		|	ИД.Операция              КАК Операция,
		|	ИД.ИдентификаторОперации КАК ИдентификаторОперации,
		|	ИД.ВидРабочегоЦентра     КАК ВидРабочегоЦентра,
		|   ИД.Участок               КАК Участок,
		|	ИД.СменноеЗадание        КАК СменноеЗадание,
		|	ИД.ВариантНаладки        КАК ВариантНаладки,
		|	ИД.РабочийЦентр          КАК РабочийЦентр,
		|	ИД.Исполнитель           КАК Исполнитель,
		|	ИД.Количество            КАК Количество
		|
		|ПОМЕСТИТЬ ИД
		|ИЗ
		|	&ИсточникДанных КАК ИД
		|;
		|ВЫБРАТЬ
		|
		|	&СпособЗаполнения КАК СпособЗаполнения,
		|	&Статус КАК Статус,
		|
		|	ИД.Подразделение         КАК Подразделение,
		|	ИД.Этап                  КАК Этап,
		|	ИД.Операция              КАК Операция,
		|	ИД.Операция.Контроль     КАК Контроль,
		|	ИД.ИдентификаторОперации КАК ИдентификаторОперации,
		|
		|	ВЫБОР
		|		КОГДА ИД.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(ИД.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
		|		КОГДА ИД.ВидРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|			ТОГДА ИД.ВидРабочегоЦентра
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Очередь.Операция.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
		|					ТОГДА Очередь.Операция.РабочийЦентр
		|				ИНАЧЕ ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра, ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидРабочегоЦентра,
		|
		|	ИД.Участок        КАК Участок,
		|	ИД.СменноеЗадание КАК СменноеЗадание,
		|	ИД.РабочийЦентр   КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА (ИД.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ИЛИ ИД.ВидРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
		|			И ИД.ВариантНаладки <> ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)
		|			ТОГДА ИД.ВариантНаладки
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Очередь.Операция.ВариантНаладки ССЫЛКА Справочник.ВариантыНаладки
		|					ТОГДА Очередь.Операция.ВариантНаладки
		|				ИНАЧЕ ЕСТЬNULL(Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра, ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка))
		|			КОНЕЦ
		|	КОНЕЦ КАК ВариантНаладки,
		|	ИД.Исполнитель    КАК Исполнитель,
		|
		|	ВЫБОР
		|		КОГДА ИД.Количество <> 0
		|			ТОГДА ИД.Количество
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана)
		|					ТОГДА
		|						ВЫБОР
		|							КОГДА Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Создано
		|								ТОГДА Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ Очередь.МожноВыполнять
		|			КОНЕЦ
		|	КОНЕЦ КАК Количество
		|
		|ИЗ
		|	ИД КАК ИД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
		|		ПО ИД.Подразделение            = Очередь.Подразделение
		|			И ИД.Этап                  = Очередь.Этап
		|			И ИД.Операция              = Очередь.Операция
		|			И ИД.ИдентификаторОперации = Очередь.ИдентификаторОперации
		|
		|ГДЕ
		|	(НЕ &ПроверятьПараметры
		|			ИЛИ &ПроверятьПараметры
		|				И ВЫБОР
		|						КОГДА Очередь.Операция.РабочийЦентр В (НЕОПРЕДЕЛЕНО,
		|																	ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка),
		|																	ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
		|								ИЛИ (ИД.ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|										И ИД.РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка))
		|							ТОГДА ИСТИНА
		|						КОГДА ИД.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|								И ВЫРАЗИТЬ(ИД.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра В (Очередь.Операция.РабочийЦентр, Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра)
		|							ТОГДА ИСТИНА
		|						КОГДА ИД.ВидРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
		|								И ИД.ВидРабочегоЦентра В (Очередь.Операция.РабочийЦентр, Очередь.Операция.РабочийЦентр.ВидРабочегоЦентра)
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА НЕ Очередь.Подразделение.ИспользоватьПроизводственныеУчастки
		|							ТОГДА ИСТИНА
		|						КОГДА Очередь.Операция.РабочийЦентр В (НЕОПРЕДЕЛЕНО,
		|																	ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка),
		|																	ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
		|								ИЛИ НЕ ТИПЗНАЧЕНИЯ(Очередь.Операция.РабочийЦентр) = ТИП(Справочник.РабочиеЦентры)
		|							ТОГДА ИСТИНА
		|						КОГДА ИД.Участок В (Очередь.Операция.РабочийЦентр.Участок, ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка))
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА Очередь.Операция.РабочийЦентр В (НЕОПРЕДЕЛЕНО,
		|																	ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка),
		|																	ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
		|								ИЛИ НЕ ТИПЗНАЧЕНИЯ(Очередь.Операция.РабочийЦентр) = ТИП(Справочник.РабочиеЦентры)
		|							ТОГДА ИСТИНА
		|						КОГДА ИД.РабочийЦентр В (Очередь.Операция.РабочийЦентр, ЗНАЧЕНИЕ(Справочник.ПроизводственныеУчастки.ПустаяСсылка))
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ
		|					И ВЫБОР
		|						КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана)
		|							ТОГДА ВЫБОР
		|									КОГДА Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Создано
		|										ТОГДА Очередь.Запланировано + Очередь.ТребуетПовторения - Очередь.Создано
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ Очередь.МожноВыполнять
		|					КОНЕЦ > 0
		|					И ВЫБОР
		|						КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Пропущена)
		|							И НЕ Очередь.Операция.МожноПропустить
		|							ТОГДА ЛОЖЬ
		|						ИНАЧЕ ИСТИНА
		|					КОНЕЦ)");
	
	ИсточникДанных = Новый ТаблицаЗначений;
	ИсточникДанных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ИсточникДанных.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	ИсточникДанных.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ИсточникДанных.Колонки.Добавить("ИдентификаторОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	ИсточникДанных.Колонки.Добавить("ВидРабочегоЦентра", Новый ОписаниеТипов("СправочникСсылка.ВидыРабочихЦентров"));
	ИсточникДанных.Колонки.Добавить("Участок", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеУчастки"));
	ИсточникДанных.Колонки.Добавить("СменноеЗадание", Новый ОписаниеТипов("ДокументСсылка.СменноеЗадание"));
	ИсточникДанных.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	ИсточникДанных.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	ИсточникДанных.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	ОписаниеТиповИсполнитель = Новый ОписаниеТипов("СправочникСсылка.Бригады,СправочникСсылка.ФизическиеЛица");
	//++ Локализация
	ОписаниеТиповИсполнитель = Новый ОписаниеТипов("СправочникСсылка.Бригады,СправочникСсылка.ФизическиеЛица,СправочникСсылка.Сотрудники");
	//-- Локализация
	ИсточникДанных.Колонки.Добавить("Исполнитель", ОписаниеТиповИсполнитель);
	
	Для каждого Идентификатор Из ОбщегоНазначенияУТКлиентСервер.Массив(КлючиОпераций) Цикл
		НоваяСтрока = ИсточникДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Идентификатор, "Подразделение,Этап,Операция,ИдентификаторОперации");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыНазначения);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СпособЗаполнения", "ЗаполнитьПоОперации");
	Запрос.УстановитьПараметр("Статус", ?(УстанавливаемыйСтатус <> Неопределено,
		УстанавливаемыйСтатус,
		Перечисления.СтатусыПроизводственныхОпераций.Создана));
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	Запрос.УстановитьПараметр("ПроверятьПараметры", ПроверятьПараметры);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

// Формирует производственные операции
//
// Параметры:
//  КлючиОпераций			 - Массив, РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций - ключ записи
//  ПараметрыНазначения		 - Структура														 - параметры назначения
//    * Участок
//    * ВидРабочегоЦентра
//    * РабочийЦентр
//    * Исполнитель
//    * Количество
//  УстанавливаемыйСтатус	 - ПеречислениеСсылка.СтатусыПроизводственныхОпераций						 - статус нового документа
// 
// Возвращаемое значение:
//  Число - Количество сформированных документов.
//
Функция СформироватьПроизводственныеОперации(КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус = Неопределено) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВнутрицеховоеУправление.ФормированиеПроизводственныхОпераций");
	
	Массив = ОбщегоНазначенияУТКлиентСервер.Массив(КлючиОпераций);
	Результат = СформироватьПроизводственныеОперацииВнутриЗамераВремени(Массив, ПараметрыНазначения, УстанавливаемыйСтатус);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Массив.Количество());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

//++ Устарело_Производство21

// Формирует маршрутные листы по заказам на производство и возвращает результат
//
// Параметры:
//  СписокРаспоряжений	- Массив - заказы на производство для которого требуется сформировать МЛ.
//
// Возвращаемое значение:
//   Структура   - содержит результат формирования документов.
//
Функция СформироватьМаршрутныеЛистыПоЗаказам(СписокРаспоряжений) Экспорт
	
	КлючеваяОперация = "ВнутрицеховоеУправление.ФормированиеМаршрутныхЛистов.ПоЗаказам";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	КоличествоВсего = 0;
	КоличествоОбработанных = 0;
	ТекстПредупреждения = ПоЗаказамМожноСформироватьМаршрутныеЛисты(СписокРаспоряжений);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, СписокРаспоряжений.Количество(), "ПоЗаказамМожноСформироватьМаршрутныеЛисты");
	
	Если ТекстПредупреждения = Неопределено  Тогда
		
		ДанныеМаршрутныхЛистов = ДанныеДляФормированияМаршрутныхЛистов(Новый Структура("СписокРаспоряжений", СписокРаспоряжений));
		КоличествоВсего = ДанныеМаршрутныхЛистов.Количество();
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоВсего, "ДанныеДляФормированияМаршрутныхЛистов");
		
		КоличествоОбработанных = СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов);
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанных, "СформироватьМаршрутныеЛисты");
		
	КонецЕсли;
	
	Результат = РезультатФормированияМаршрутныхЛистов(КоличествоВсего, КоличествоОбработанных, ТекстПредупреждения);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
	Возврат Результат;
	
КонецФункции

// Формирует маршрутные листы необходимые для формирования расписания на указанном виде РЦ.
//
// Параметры:
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение для которого требуется сформировать МЛ
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - вид рабочего центра для которого формируется расписание
//	ДатаИнтервала		- Дата - начало интервала планирования.
//
// Возвращаемое значение:
//   Структура   - содержит результат формирования документов.
//
Функция СформироватьМаршрутныеЛистыПоРасписанию(Подразделение, ВидРабочегоЦентра, ДатаИнтервала) Экспорт
	
	КлючеваяОперация = "ВнутрицеховоеУправление.ФормированиеМаршрутныхЛистов.ПоРасписанию";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	ДанныеМаршрутныхЛистов = ДанныеДляФормированияМаршрутныхЛистовПоРасписанию(
		Подразделение, ВидРабочегоЦентра, ДатаИнтервала);
	КоличествоВсего = ДанныеМаршрутныхЛистов.Количество();
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоВсего, "ДанныеДляФормированияМаршрутныхЛистовПоРасписанию");
	
	КоличествоОбработанных = СформироватьМаршрутныеЛисты(ДанныеМаршрутныхЛистов);
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанных, "СформироватьМаршрутныеЛистыПоРасписанию");
	
	ТекстПредупреждения = ?(КоличествоВсего > 0,
		Неопределено,
		НСтр("ru = 'Формировать маршрутные листы не требуется.';
			|en = 'Generation of route sheets is not required.'"));
	Результат = РезультатФормированияМаршрутныхЛистов(КоличествоВсего, КоличествоОбработанных, ТекстПредупреждения);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатФормированияМаршрутныхЛистов(КоличествоВсего, КоличествоОбработанных, ТекстПредупреждения)
	
	Результат = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("КоличествоВсего", КоличествоВсего);
		Результат.Вставить("КоличествоОбработанных", КоличествоОбработанных);
		
	Иначе
		
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные, необходимые для формирования маршрутных листов
//
// Параметры:
//	Отбор	- Структура - Содержит данные для отбора (все свойства не обязательные):
//  						* Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение для которого требуется сформировать МЛ.
//  						* СписокРаспоряжений - Массив - заказы на производство для которого требуется сформировать МЛ.
//  						* СписокЭтапов - Массив - этапы графика.
//							* УправлениеМаршрутнымиЛистами 	- ПеречислениеСсылка.УправлениеМаршрутнымиЛистами - ограничение по методике управления МЛ.
//
// Возвращаемое значение:
//   Массив   - содержит данные для формирования маршрутных листов.
//
Функция ДанныеДляФормированияМаршрутныхЛистов(Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Подразделение                = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Подразделение", Неопределено);
	СписокРаспоряжений           = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "СписокРаспоряжений", Неопределено);
	СписокЭтапов                 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "СписокЭтапов", Неопределено);
	УправлениеМаршрутнымиЛистами = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "УправлениеМаршрутнымиЛистами", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	ДанныеГрафикаПроизводства.КодСтрокиПродукция КАК КодСтроки,
	|	ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ДанныеГрафикаПроизводства.Подразделение КАК Подразделение,
	|	ДанныеГрафикаПроизводства.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ДанныеГрафикаПроизводства.Подразделение.УправлениеМаршрутнымиЛистами КАК УправлениеМаршрутнымиЛистами,
	|	ДанныеГрафикаПроизводства.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.МаксимальноеКоличествоЕдиницПартийИзделия
	|		ИНАЧЕ ДанныеГрафикаПроизводства.Этап.МаксимальноеКоличествоЕдиницПартийИзделия
	|	КОНЕЦ КАК МаксимальноеКоличествоЕдиницПартийИзделия,
	|	ЭтапыПроизводства.НачалоЭтапа КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.Период КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.НачалоПредварительногоБуфера КАК Начало,
	|	ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера КАК Окончание,
	|	ДанныеГрафикаПроизводства.Запланировано КАК Запланировать
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства КАК ДанныеГрафикаПроизводства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ДанныеГрафикаПроизводства.Распоряжение = ЭтапыПроизводства.Распоряжение
	|			И ДанныеГрафикаПроизводства.КодСтрокиПродукция = ЭтапыПроизводства.КодСтрокиПродукция
	|			И ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
	|			И ДанныеГрафикаПроизводства.Этап = ЭтапыПроизводства.Этап
	|			И ДанныеГрафикаПроизводства.Подразделение = ЭтапыПроизводства.Подразделение
	|			И (ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	(ДанныеГрафикаПроизводства.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И &УсловиеОтбораРаспоряжение
	|	И НЕ ДанныеГрафикаПроизводства.ПроизводствоНаСтороне
	|	И (&НеИспользоватьУправлениеМаршрутнымиЛистами
	|			ИЛИ ДанныеГрафикаПроизводства.Подразделение.УправлениеМаршрутнымиЛистами = &УправлениеМаршрутнымиЛистами)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоПродукция.Спецификация,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа");
	
	Если СписокРаспоряжений = Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораРаспоряжение", "ИСТИНА");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораРаспоряжение", "ДанныеГрафикаПроизводства.Распоряжение В (&ОтборРаспоряжения)");
		Запрос.УстановитьПараметр("ОтборРаспоряжения", СписокРаспоряжений);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	Запрос.УстановитьПараметр("НеИспользоватьУправлениеМаршрутнымиЛистами", НЕ ЗначениеЗаполнено(УправлениеМаршрутнымиЛистами));
	
	ДанныеГрафика = Запрос.Выполнить().Выбрать();
	
	ДанныеМаршрутныхЛистов = Новый Массив;
	
	ИспользоватьОтборПоЭтапам = (СписокЭтапов <> Неопределено И СписокЭтапов.Количество() <> 0);
	
	Пока ДанныеГрафика.Следующий() Цикл
		
		Если ИспользоватьОтборПоЭтапам Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик", ДанныеГрафика.Распоряжение, ДанныеГрафика.КодСтрокиЭтапыГрафик);
			Если СписокЭтапов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		МаксимальноеКоличество = ДанныеГрафика.МаксимальноеКоличествоЕдиницПартийИзделия;
		
		Потребность = ДанныеГрафика.Запланировать;
		Пока Потребность > 0 Цикл
		
			ДанныеЗаполнения = Новый Структура("
				|Распоряжение,
				|Подразделение,
				|ИнтервалПланирования,
				|УправлениеМаршрутнымиЛистами,
				|КодСтроки,
				|КодСтрокиЭтапыГрафик,
				|Этап,
				|Начало,
				|Окончание,
				|НачалоРаботыКлючевогоРабочегоЦентра,
				|ОкончаниеРаботыКлючевогоРабочегоЦентра,
				|Запланировано");
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеГрафика);
			
			ДанныеЗаполнения.Запланировано = ?(МаксимальноеКоличество = 0, Потребность, Мин(Потребность, МаксимальноеКоличество));
			
			Потребность = Потребность - ДанныеЗаполнения.Запланировано;
			
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
			
		КонецЦикла; 
	
	КонецЦикла;
	
	Возврат ДанныеМаршрутныхЛистов;

КонецФункции

Функция ДанныеДляФормированияМаршрутныхЛистовПоРасписанию(Подразделение, ВидРабочегоЦентра, ДатаИнтервала) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	ДанныеГрафикаПроизводства.КодСтрокиПродукция КАК КодСтроки,
	|	ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ДанныеГрафикаПроизводства.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
	|			ТОГДА ЗаказНаПроизводствоЭтапы.МаршрутнаяКарта.МаксимальноеКоличествоЕдиницПартийИзделия
	|		ИНАЧЕ ДанныеГрафикаПроизводства.Этап.МаксимальноеКоличествоЕдиницПартийИзделия
	|	КОНЕЦ КАК МаксимальноеКоличествоЕдиницПартийИзделия,
	|	ЭтапыПроизводства.НачалоЭтапа КАК НачалоРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.Период КАК ОкончаниеРаботыКлючевогоРабочегоЦентра,
	|	ЭтапыПроизводства.НачалоПредварительногоБуфера КАК Начало,
	|	ЭтапыПроизводства.ОкончаниеЗавершающегоБуфера КАК Окончание,
	|	ДанныеГрафикаПроизводства.Запланировано КАК Запланировать
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства КАК ДанныеГрафикаПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО ДанныеГрафикаПроизводства.Распоряжение = ЭтапыПроизводства.Распоряжение
	|			И ДанныеГрафикаПроизводства.КодСтрокиПродукция = ЭтапыПроизводства.КодСтрокиПродукция
	|			И ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик
	|			И ДанныеГрафикаПроизводства.Этап = ЭтапыПроизводства.Этап
	|			И ДанныеГрафикаПроизводства.Подразделение = ЭтапыПроизводства.Подразделение
	|			И (ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|				И (НЕ ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ЗаказНаПроизводствоВидыРабочихЦентров
	|		ПО (ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.КлючСвязиЭтапы = ЗаказНаПроизводствоЭтапы.КлючСвязи)
	|			И (ЗаказНаПроизводствоВидыРабочихЦентров.ВидРабочегоЦентра = &ВидРабочегоЦентра)
	|ГДЕ
	|	ДанныеГрафикаПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.НачалоЭтапа = &ДатаИнтервала
	|	И НЕ ЗаказНаПроизводствоВидыРабочихЦентров.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	ДанныеГрафикаПроизводства.Распоряжение,
	|	КодСтрокиЭтапыГрафик,
	|	ЗаказНаПроизводствоПродукция.Спецификация,
	|	ЗаказНаПроизводствоЭтапы.НомерЭтапа";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("ДатаИнтервала", ДатаИнтервала);
	
	Результат = Запрос.Выполнить();
	ДанныеГрафика = Результат.Выбрать();
	
	ДанныеМаршрутныхЛистов = ЗаполнитьДанныеМаршрутныхЛистов(ДанныеГрафика);
	
	Возврат ДанныеМаршрутныхЛистов;

КонецФункции

Функция ЗаполнитьДанныеМаршрутныхЛистов(ДанныеГрафика)

	ДанныеМаршрутныхЛистов = Новый Массив;
	Пока ДанныеГрафика.Следующий() Цикл
	
		МаксимальноеКоличество = ДанныеГрафика.МаксимальноеКоличествоЕдиницПартийИзделия;
		
		Потребность = ДанныеГрафика.Запланировать;
		Пока Потребность > 0 Цикл
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Распоряжение");
			ДанныеЗаполнения.Вставить("КодСтроки");
			ДанныеЗаполнения.Вставить("КодСтрокиЭтапыГрафик");
			ДанныеЗаполнения.Вставить("Этап");
			ДанныеЗаполнения.Вставить("Начало");
			ДанныеЗаполнения.Вставить("Окончание");
			ДанныеЗаполнения.Вставить("НачалоРаботыКлючевогоРабочегоЦентра");
			ДанныеЗаполнения.Вставить("ОкончаниеРаботыКлючевогоРабочегоЦентра");
			ДанныеЗаполнения.Вставить("Запланировано");
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеГрафика);
			
			ДанныеЗаполнения.Запланировано = ?(МаксимальноеКоличество = 0, Потребность, Мин(Потребность, МаксимальноеКоличество));
			
			Потребность = Потребность - ДанныеЗаполнения.Запланировано;
			
			ДанныеМаршрутныхЛистов.Добавить(ДанныеЗаполнения);
			
		КонецЦикла; 
	
	КонецЦикла;

	Возврат ДанныеМаршрутныхЛистов;
	
КонецФункции

Функция ПоЗаказамМожноСформироватьМаршрутныеЛисты(СписокРаспоряжений)

	РеквизитыЗаказов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокРаспоряжений, "Статус,Проведен,СтатусГрафикаПроизводства");
	Для каждого ЗначенияРеквизитов Из РеквизитыЗаказов Цикл
		ДанныеЗаказа = ЗначенияРеквизитов.Значение;
		Если ДанныеЗаказа.Статус <> Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству 
			ИЛИ НЕ ДанныеЗаказа.Проведен Тогда
			
			Если СписокРаспоряжений.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Заказ должен быть проведен со статусом ""К производству"".';
											|en = 'Order should be posted with status ""For production"".'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Заказы должны быть проведены со статусом ""К производству"".';
											|en = 'Orders should be posted in the ""For production"" status.'");
			КонецЕсли; 
			ТекстПредупреждения = НСтр("ru = 'Формирование маршрутных листов недоступно.';
										|en = 'Generation of route sheets is unavailable.'") + Символы.ПС + ТекстПредупреждения;
			
			Возврат ТекстПредупреждения;
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ЗначенияРеквизитов Из РеквизитыЗаказов Цикл
		ДанныеЗаказа = ЗначенияРеквизитов.Значение;
		Если ДанныеЗаказа.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать Тогда
			Если СписокРаспоряжений.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Требуется выполнить планирование заказа.';
											|en = 'Order planning is required.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Требуется выполнить планирование заказов.';
											|en = 'Order planning is required. '");
			КонецЕсли; 
			ТекстПредупреждения = НСтр("ru = 'Формирование маршрутных листов недоступно.';
										|en = 'Generation of route sheets is unavailable.'") + Символы.ПС + ТекстПредупреждения;
			
			Возврат ТекстПредупреждения;
		КонецЕсли; 
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводстваОбороты.Распоряжение КАК Распоряжение,
	|	СУММА(ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот) КАК ЗапланированоЗаказом,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ) <> ИСТИНА
	|				ТОГДА ЭтапыПроизводстваОбороты.ЗапланированоЗаказомОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗапланированоКПроизводству,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ) <> ИСТИНА
	|				ТОГДА ЭтапыПроизводстваОбороты.ЗапланированоПроизводствомОборот 
	|						+ ЭтапыПроизводстваОбороты.КВыполнениюОборот 
	|						+ ЭтапыПроизводстваОбороты.ВыполненоОборот 
	|						+ ЭтапыПроизводстваОбороты.БракОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗапланированоВПроизводстве
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение В (&СписокРаспоряжений)) КАК ЭтапыПроизводстваОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказНаПроизводствоЭтапыГрафик
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО (ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоЭтапыГрафик.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязи = ЗаказНаПроизводствоЭтапыГрафик.КлючСвязиЭтапы)
	|		ПО (ЗаказНаПроизводствоЭтапыГрафик.Ссылка = ЭтапыПроизводстваОбороты.Распоряжение)
	|			И (ЗаказНаПроизводствоЭтапыГрафик.КодСтроки = ЭтапыПроизводстваОбороты.КодСтрокиЭтапыГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроизводстваОбороты.Распоряжение";
	
	Запрос.УстановитьПараметр("СписокРаспоряжений", СписокРаспоряжений);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗапланированоЗаказом = Выборка.ЗапланированоЗаказом;
		ЗапланированоВПроизводстве = Выборка.ЗапланированоВПроизводстве;
		ЗапланированоКПроизводству = Выборка.ЗапланированоКПроизводству;
	Иначе
		ЗапланированоЗаказом = 0;
		ЗапланированоВПроизводстве = 0;
		ЗапланированоКПроизводству = 0;
	КонецЕсли; 
	
	Если ЗапланированоЗаказом = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Формировать маршрутные листы не требуется.
											|Не запланированы этапы производства.';
											|en = 'Generation of route sheets is not required.
											|Production stages are not planned.'");
		
		Возврат ТекстПредупреждения;
		
	ИначеЕсли ЗапланированоКПроизводству = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Формировать маршрутные листы не требуется.
											|Нет этапов собственного производства.';
											|en = 'Generation of route sheets is not required.
											|There are no own production stages.'");
		
		Возврат ТекстПредупреждения;
		
	ИначеЕсли ЗапланированоКПроизводству = ЗапланированоВПроизводстве Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Формировать маршрутные листы не требуется.
											|Все маршрутные листы уже сформированы.';
											|en = 'Generation of route sheets is not required.
											|All route sheets have already been generated.'");
		Возврат ТекстПредупреждения;
		
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

//-- Устарело_Производство21

Функция СформироватьПроизводственныеОперацииВнутриЗамераВремени(КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус)
	
	ИсточникДанных = РегистрыСведений.ОчередьПроизводственныхОпераций.СоздатьНаборЗаписей().ВыгрузитьКолонки("Подразделение,Этап,Операция,ИдентификаторОперации");
	
	Для каждого Ключ Из КлючиОпераций Цикл
		ЗаполнитьЗначенияСвойств(ИсточникДанных.Добавить(), Ключ, "Подразделение,Этап,Операция,ИдентификаторОперации");
	КонецЦикла;
	
	ИспользуютсяСменныеЗадания = ПараметрыНазначения.Свойство("СменноеЗадание") И ЗначениеЗаполнено(ПараметрыНазначения.СменноеЗадание);
	
	КоличествоВсего = ИсточникДанных.Количество();
	КоличествоОбработанных = 0;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		Если ИспользуютсяСменныеЗадания Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.СменноеЗадание");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыНазначения.СменноеЗадание);
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьПроизводственныхОпераций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Этап", "Этап");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Операция", "Операция");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторОперации", "ИдентификаторОперации");
		
		Блокировка.Заблокировать();
		
		СписокДанныхЗаполнения = ДанныеЗаполненияНовыхПроизводственныхОпераций(
			КлючиОпераций,
			ПараметрыНазначения, 
			УстанавливаемыйСтатус);
			
		Если СписокДанныхЗаполнения.Количество() > 0 Тогда
			
			Если ИспользуютсяСменныеЗадания Тогда
				СтатусСменногоЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНазначения.СменноеЗадание, "Статус");
				Если СтатусСменногоЗадания = Перечисления.СтатусыСменныхЗаданий.Формируется Тогда
					Документы.СменноеЗадание.УстановитьСтатус(ПараметрыНазначения.СменноеЗадание, Перечисления.СтатусыСменныхЗаданий.Сформировано);
				КонецЕсли;
			КонецЕсли;
			
			Для каждого ДанныеЗаполнения Из СписокДанныхЗаполнения Цикл
				
				НовыйДокумент = Документы.ПроизводственнаяОперация2_2.СоздатьДокумент();
				НовыйДокумент.Заполнить(ДанныеЗаполнения);
				
				Если НовыйДокумент.ПроверитьЗаполнение() Тогда
					
					НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
					КоличествоОбработанных = КоличествоОбработанных + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение операции';
				|en = 'Performing operation'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КоличествоОбработанных = 0;
		
	КонецПопытки;
	
	Возврат Новый ФиксированнаяСтруктура("КоличествоВсего, КоличествоОбработанных", КоличествоВсего, КоличествоОбработанных);
	
КонецФункции

//-- НЕ УТКА

// Возвращает структуру заполнения для формирования документов выработки по переданному отбору или строкам распоряжений.
// В функции выполняется анализ количества документов к формированию, если требуется сформировать один документ, то
// возвращается структура заполнения, иначе параметры отбора для группового формирования.
//
// Параметры:
//	Отбор	- Структура - Содержит данные для отбора:
//  						* Распоряжения - Массив - документы, на основании которых оформляется выработка
//  						* Подразделения - Массив - подразделения, по которым оформляется выработка
//	Идентификаторы	- Массив - идентификаторы, если следующим параметром передается коллекция аналитик к оформлению
//	Коллекция	- ДанныеФормыКоллекция - коллекция аналитик, по которым оформляется выработка.
//
// Возвращаемое значение:
//   Структура   - содержит поля для заполнения новых документов.
//
Функция ПараметрыОформленияВыработкиСотрудников(Отбор = Неопределено, Идентификаторы = Неопределено, Коллекция = Неопределено) Экспорт
	
	Если Отбор <> Неопределено Тогда
		КОформлению = Документы.ВыработкаСотрудников.ТрудозатратыКОформлению(Отбор);
		Строки = КОформлению.Выгрузить();
	Иначе
		Строки = Идентификаторы;
	КонецЕсли;
	
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подразделения = Новый Массив;
	Периоды = Новый Массив;
	Бригады = Новый Массив;
	Работники = Новый Массив;
	Сотрудники = Новый Массив;
	Организации = Новый Массив;
	Распоряжения = Новый Массив;
	ВидыНарядов = Новый Массив;
	
	// параметры проверки количества документов
	ТекущаяОрганизация = Неопределено;
	ТекущееПодразделение = Неопределено;
	ТекущийВидНаряда = Неопределено;
	ТекущаяБригада = Неопределено;
	ТекущееНачалоПериода = Неопределено;
	ТекущийКонецПериода = Неопределено;
	
	ТребуетсяОдинДокумент = Истина;
	
	Для Каждого Итератор Из Строки Цикл
		
		Если Коллекция <> Неопределено Тогда
			Строка = Коллекция.НайтиПоИдентификатору(Итератор);
		Иначе
			Строка = Итератор;
		КонецЕсли;
		
		Если ТекущаяОрганизация = Неопределено Тогда
			ТекущаяОрганизация = Строка.Организация;
		ИначеЕсли ТекущаяОрганизация <> Строка.Организация Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;
		
		Если ТекущееПодразделение = Неопределено Тогда
			ТекущееПодразделение = Строка.Подразделение;
		ИначеЕсли ТекущееПодразделение <> Строка.Подразделение Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;
		
		Если ТекущийВидНаряда = Неопределено Тогда
			ТекущийВидНаряда = Строка.ВидНаряда;
		ИначеЕсли ТекущийВидНаряда <> Строка.ВидНаряда Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;
		
		Если ТекущаяБригада = Неопределено И ЗначениеЗаполнено(Строка.Бригада) Тогда
			ТекущаяБригада = Строка.Бригада;
		ИначеЕсли ТекущаяБригада <> Строка.Бригада И ЗначениеЗаполнено(Строка.Бригада) Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;
		
		Если ТекущееНачалоПериода = Неопределено Тогда
			ТекущееНачалоПериода = Строка.НачалоПериода;
		ИначеЕсли ТекущееНачалоПериода <> Строка.НачалоПериода Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;
		
		Если ТекущийКонецПериода = Неопределено Тогда
			ТекущийКонецПериода = Строка.КонецПериода;
		ИначеЕсли ТекущийКонецПериода <> Строка.КонецПериода Тогда
			ТребуетсяОдинДокумент = Ложь;
		КонецЕсли;

		Подразделения.Добавить(Строка.Подразделение);
		Периоды.Добавить(Строка.НачалоПериода);
		Организации.Добавить(Строка.Организация);
		ВидыНарядов.Добавить(Строка.ВидНаряда);
		
		Если ЗначениеЗаполнено(Строка.Бригада) Тогда
			Бригады.Добавить(Строка.Бригада);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Работник) Тогда
			Работники.Добавить(Строка.Работник);
		КонецЕсли;
		
		//++ Локализация
		Если ЗначениеЗаполнено(Строка.Исполнитель) И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудники.Добавить(Строка.Исполнитель);
		КонецЕсли;
		//-- Локализация
		
		Если ЗначениеЗаполнено(Строка.Распоряжение) Тогда
			Распоряжения.Добавить(Строка.Распоряжение);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Подразделения",   Подразделения);
	Результат.Вставить("Периоды",         Периоды);
	Результат.Вставить("Бригады",         Бригады);
	Результат.Вставить("Работники",       Работники);
	Результат.Вставить("Сотрудники",      Сотрудники);
	Результат.Вставить("Организации",     Организации);
	Результат.Вставить("Распоряжения",    Распоряжения);
	Результат.Вставить("ВидыНарядов",     ВидыНарядов);
	
	Результат.Вставить("ВключатьВПериодВыполненияРабот", Истина);
	
	Результат.Вставить("ТребуетсяОдинДокумент", ТребуетсяОдинДокумент);
	
	Если ТребуетсяОдинДокумент Тогда
		
		Результат.Вставить("Подразделение",     ТекущееПодразделение);
		Результат.Вставить("Организация",       ТекущаяОрганизация);
		Результат.Вставить("ВидНаряда",         ТекущийВидНаряда);
		Результат.Вставить("НачалоПериода",     ТекущееНачалоПериода);
		Результат.Вставить("КонецПериода",      ТекущийКонецПериода);
		
		Если ЗначениеЗаполнено(ТекущаяБригада) Тогда
			Результат.Вставить("Бригада",       ТекущаяБригада);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//++ НЕ УТКА

Функция ПараметрыОформленияВыработкиСотрудниковПоСменномуЗаданию(СменныеЗадания) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Операции.Ссылка КАК Операция
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2 КАК Операции
	|ГДЕ
	|	Операции.СменноеЗадание В (&СменныеЗадания)
	|
	|");
	
	Запрос.УстановитьПараметр("СменныеЗадания", СменныеЗадания);
	
	Распоряжения = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Распоряжения", Распоряжения);
	
	Возврат ПараметрыОформленияВыработкиСотрудников(СтруктураОтбора);
	
КонецФункции

//-- НЕ УТКА

// Формирует документы "Выработка сотрудников" по переданному отбору.
//
// Параметры:
//	СтруктураОтбора	- Структура - Содержит данные для отбора:
//  						* Распоряжения - Массив - документы, на основании которых оформляется выработка
//  						* Подразделения - Массив -  подразделения, по которым оформляется выработка.
//
// Возвращаемое значение:
//   Структура   - содержит массивы сформированных документов и сообщений пользователю.
//
Функция СформироватьВыработкуСотрудниковПоОтбору(СтруктураОтбора) Экспорт
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено);
	Документы.ВыработкаСотрудников.СформироватьДокументы(СтруктураОтбора, АдресВХранилище);
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

#КонецОбласти
