#Область ПрограммныйИнтерфейс

// Возвращает структуру кэша реквизитов по виду бюджета.
//
// Параметры:
//  ВидОтчета  - СправочникСсылка.ВидыБюджетов - ссылка на вид отчета.
//
// Возвращаемое значение:
//   Структура - кэш реквизитов элементов вида бюджета:
//    *КэшДопРеквизитов - См. описание ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты
//    *КэшРеквизитов    - См. описание ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты
//
Функция КэшРеквизитовЭлементовБюджета(ВидОтчета) Экспорт
	
	КэшДопРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидОтчета);
	КэшРеквизитов   = КэшРеквизитовЭлементовВидаБюджета(ВидОтчета);
	КэшРеквизитовЭлементовБюджета = Новый Структура;
	КэшРеквизитовЭлементовБюджета.Вставить("КэшДопРеквизитов", КэшДопРеквизиты);
	КэшРеквизитовЭлементовБюджета.Вставить("КэшРеквизитов", КэшРеквизитов);
	
	Возврат КэшРеквизитовЭлементовБюджета;
	
КонецФункции

// Функция возвращает параметры вывода вида бюджета.
// 
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры.
//  РежимФормирования  - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - вариант формирования.
// Возвращаемое значение:
// 	Структура - Описание:
// * СтруктураКолонокТаблицыДанных - см. КолонкиТаблицыДанных
// * СтруктураОписанияСпискаВвода - Структура - содержит:
// 		** Измерения - Массив -
// 		** НастройкиКолонок - Структура -
// 		** НастройкиВвода - см. НастройкиВводаЯчейкиСписка
// * СтруктураОписанияОтчета - см. ОписаниеОтчета
// * ДеревоВывода - см. НовыйДеревоВывода
// * СКДДанных - Структура - содержит:
// 		** СКДИтоговая - СхемаКомпоновкиДанных -
// 		** СКДПлановыеДанные - СхемаКомпоновкиДанных -
// 		** СКДДанныеДокумента - СхемаКомпоновкиДанных -
// 		** СКДПредварительныйРасчет - СхемаКомпоновкиДанных -
// 		** СКДФактическиеДанныеПривилегированно - СхемаКомпоновкиДанных -
// 		** СКДПлановыеДанныеПривилегированно - СхемаКомпоновкиДанных -
// 		** Параметры - Структура -
//
Функция ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Генерируем колонки отчета.
	СтруктураКолонокТаблицыДанных = КолонкиТаблицыДанных(ВидБюджета);
	
	// Генерируем источники данных и структуру ячеек.
	СтруктураОписанияОтчета = ОписаниеОтчета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Генерируем СКД на основании источников.
	СКДДанных = ПолучитьСКДПоОписаниюИсточников(ВидБюджета,
			СтруктураОписанияОтчета,
			СтруктураКолонокТаблицыДанных,
			РежимФормирования);
	
	// Получаем дерево группировок для вывода отчета.
	ДеревоВывода = ДеревоВывода(ВидБюджета, СтруктураОписанияОтчета.СтруктураЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	
	// Результат.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	СтруктураРезультат.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	СтруктураРезультат.Вставить("СКДДанных", СКДДанных);
	СтруктураРезультат.Вставить("ДеревоВывода", ДеревоВывода);
	СтруктураРезультат.Вставить("КэшДанных", Новый Структура);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
	 ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		СтруктураОписанияСпискаВвода = ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета,
				СтруктураКолонокТаблицыДанных,
				СтруктураОписанияОтчета,
				ДеревоВывода);
		
		СтруктураРезультат.Вставить("СтруктураОписанияСпискаВвода", СтруктураОписанияСпискаВвода);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция возвращает дерево элементов вида бюджета
// 
//
// Параметры:
//  ВидБюджета - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого требуется построить дерево.
//  ВыводитьЭлементыСложнойТаблицы  - Булево - признак, что требуется выводить элементы, подчиненные элементу "Настройка Ячеек".
//
// Возвращаемое значение:
//   ДеревоЗначений - Содержит, в основном, поля справочника "ЭлементыФинансовыхОтчетов":
//   	* ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - ссылка на элемент отчета.
//   	* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - вид элемента.
//   	* АдресСтруктурыЭлемента - Строка - 
//   	* Комментарий - Строка -
//   	* ОбратныйЗнак - Булево - 
//   	* ЕстьНастройки - Булево - 
//   	* Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//   	* СтатьяПоказательТипИзмерения - Строка - 
//   	* Наименование - Строка - 
//   	* ЗначениеАналитики - Характеристика.АналитикиСтатейБюджетов -
//   	* Значение_СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - 
//   	* НаименованиеДляПечати - Строка -
//   	* ТипИзмерения - ПеречислениеСсылка.ТипыИзмеренийФинансовогоОтчета -
//   	* ВыводитьВместеСРодительским - Булево -
//   	* ПредставлениеДополнительныхПолей - Строка -
//   	* ПредставлениеТолькоДляПечати - Строка -
//   	* ПривилегированныйРежим - Булево -
//   	* ИсточникВсеЭлементы - Булево -
//
Функция ДеревоЭлементовБюджета(ВидБюджета, ВыводитьЭлементыСложнойТаблицы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыводитьЭлементыСложнойТаблицы Тогда
		ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета["ДеревоЭлементовСДопЭлементами"];
	Иначе
		ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета["ДеревоЭлементовБезДопЭлементов"];
	КонецЕсли;
	
	ЗначениеКэша = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша);
	Если ЗначениеКэша <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначениеКэша;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыБюджетов.ПолучитьМакет("ДеревоЭлементовОтчета");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидБюджета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", ФинОтчеты.КэшДополнительныеРеквизиты(ВидБюджета));
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшДополнительныхПолей", ФинОтчеты.КэшДополнительныеПоляЭлементов(ВидБюджета));
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, Результат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры данных видов бюджета
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры данных.
// 
// Возвращаемое значение:
//	Структура - параметры данных для вида бюджета, ключи:
//		* Периодичности - Массив - массив периодичностей до которых следует расшифровать таблицу данных
//		* Измерения - Массив Из Строка - массив используемых измерений
//		* ВидыАналитик - Массив Из ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов -
Функция КолонкиТаблицыДанных(ВидБюджета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета.СтруктураКолонок;
	Значение = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша);
	Если Значение <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Значение;
	КонецЕсли;
	
	ДеревоЭлементовБюджета = ДеревоЭлементовБюджета(ВидБюджета, Истина);
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Периодичности", Новый Массив);
	СтруктураРезультат.Вставить("Измерения", Новый Массив);
	СтруктураРезультат.Вставить("ВидыАналитик", Новый Массив);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение;
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	Для Каждого СтрокаИзмерения Из ОтобранныеСтроки Цикл
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			СтрокаИзмерения.ЭлементОтчета, 
			ДопРеквизиты.ТипИзмерения,
			КэшРеквизитов);
		
		Если ТипИзмерения = ТипыИзмерений.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
				СтрокаИзмерения.ЭлементОтчета, 
				ДопРеквизиты.Периодичность,
				КэшРеквизитов);
			
			Если СтруктураРезультат.Периодичности.Найти(Периодичность) = Неопределено Тогда
				СтруктураРезультат.Периодичности.Добавить(Периодичность);
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
				СтрокаИзмерения.ЭлементОтчета, 
				ДопРеквизиты.ИмяИзмерения,
				КэшРеквизитов);
			
			Если СтруктураРезультат.Измерения.Найти(ИмяИзмерения) = Неопределено Тогда
				СтруктураРезультат.Измерения.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Аналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
				СтрокаИзмерения.ЭлементОтчета, 
				ДопРеквизиты.ВидАналитики,
				КэшРеквизитов);
			
			Если СтруктураРезультат.ВидыАналитик.Найти(Аналитика) = Неопределено Тогда
				СтруктураРезультат.ВидыАналитик.Добавить(Аналитика);
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ФиксированнаяАналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
				СтрокаИзмерения.ЭлементОтчета, 
				ДопРеквизиты.ВидАналитики,
				КэшРеквизитов);
			
			Если СтруктураРезультат.ВидыАналитик.Найти(Аналитика) = Неопределено Тогда
				СтруктураРезультат.ВидыАналитик.Добавить(Аналитика);
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Сценарий Тогда
			
			Если СтруктураРезультат.Измерения.Найти("Сценарий") = Неопределено Тогда
				СтруктураРезультат.Измерения.Добавить("Сценарий");
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Организация Тогда
			
			Если СтруктураРезультат.Измерения.Найти("Организация") = Неопределено Тогда
				СтруктураРезультат.Измерения.Добавить("Организация");
			КонецЕсли;
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Подразделение Тогда
			
			Если СтруктураРезультат.Измерения.Найти("Подразделение") = Неопределено Тогда
				СтруктураРезультат.Измерения.Добавить("Подразделение");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлементыФинансовыхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|		ПО ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка
	|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &ТипПоказателей)
	|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение В (&ВыводимыеПоказатели))
	|			И (ЭлементыФинансовыхОтчетов.Владелец = &Владелец)";
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ТипПоказателей", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВыводимыеПоказатели);
	
	ВыводимыеПоказатели = Новый СписокЗначений;
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество);
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма);
	
	Запрос.УстановитьПараметр("ВыводимыеПоказатели", ВыводимыеПоказатели);
	
	ЕстьКоличество = Не Запрос.Выполнить().Пустой();
	
	// валюта всегда используется для пересчетов
	Если СтруктураРезультат.Измерения.Найти("Валюта") = Неопределено Тогда
		СтруктураРезультат.Измерения.Добавить("Валюта");
	КонецЕсли;
	
	Если ЕстьКоличество Тогда
		Если СтруктураРезультат.Измерения.Найти("ЕдиницаИзмерения") = Неопределено Тогда
			СтруктураРезультат.Измерения.Добавить("ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, СтруктураРезультат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураРезультат;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	СтруктураКолонок - см. КолонкиТаблицыДанных
// Возвращаемое значение:
// 	Структура - содержит:
// 		* ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 		* СтруктураКолонок - см. КолонкиТаблицыДанных
// 		* ДеревоЭлементовБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ДеревоЭлементовБюджета
// 		* ТаблицаНастроек - ТаблицаЗначений, Неопределено - 
// 			Таблица значений. Используется для уточнения свойств источников сложной таблицы.
// 			Неопределено. Если ПроверятьНеобходимостьФактаПоСтруктуреОтчета = Ложь, тогда значение = Неопределено.
// 		* КэшНастроекТаблицБюджета - Соответствие -
//
Функция НовыйОписаниеСтруктурыЭлементовБюджета(ВидБюджета, СтруктураКолонок)
	
	ОписаниеСтруктурыЭлементовБюджета = Новый Структура;
	ОписаниеСтруктурыЭлементовБюджета.Вставить("ВидБюджета", ВидБюджета);
	ОписаниеСтруктурыЭлементовБюджета.Вставить("СтруктураКолонок", СтруктураКолонок);
	ОписаниеСтруктурыЭлементовБюджета.Вставить("ДеревоЭлементовБюджета", ДеревоЭлементовБюджета(ВидБюджета, Истина));
	ОписаниеСтруктурыЭлементовБюджета.Вставить("ТаблицаНастроек", Неопределено);
	ОписаниеСтруктурыЭлементовБюджета.Вставить("КэшНастроекТаблицБюджета", Новый Соответствие);
	
	Возврат ОписаниеСтруктурыЭлементовБюджета
	
КонецФункции

// Возвращает описание источников вида бюджета в виде массива
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого следует получить описание источников
//  СтруктураКолонок  - см. КолонкиТаблицыДанных
//  РежимФормирования  - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - назначение источников (документ, отчет,
//  						заполнение и пр.).
//  РекурсивноеПолучениеИсточниковПоСтатьям - Булево - Если Истина, то в данные источников будут включены рекурсивно все
//  						операнды статей (только для проверки использования границы
//  						фактических данных). Значение по умолчанию - Ложь.
//
// Возвращаемое значение:
//   Массив Из см. НовыйИсточник - описание источников в виде массива.
//
Функция ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонок, РежимФормирования, РекурсивноеПолучениеИсточниковПоСтатьям = Ложь) Экспорт
	
	Источники = Новый Массив; // Массив Из см. НовыйИсточник -
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	СтруктураКэша = Новый Структура;
	СтруктураКэша.Вставить("КэшДопРеквизитов", КэшРеквизитов);
	СтруктураКэша.Вставить("КэшРеквизитов", КэшРеквизитовЭлементовВидаБюджета(ВидБюджета));
	
	ПараметрыЗаполненияИсточников = Новый Структура;
	ПараметрыЗаполненияИсточников.Вставить("РекурсивноеПолучениеИсточниковПоСтатьям", РекурсивноеПолучениеИсточниковПоСтатьям);
	ПараметрыЗаполненияИсточников.Вставить("ПроверятьНеобходимостьФактаПоСтруктуреОтчета", Ложь);
	ПараметрыЗаполненияИсточников.Вставить("РежимФормирования", РежимФормирования);
	
	ОписаниеСтруктурыЭлементовБюджета = НовыйОписаниеСтруктурыЭлементовБюджета(ВидБюджета, СтруктураКолонок);
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "ИспользоватьДляВводаПлана")
		И СтруктураКолонок.Измерения.Найти("Сценарий") <> Неопределено Тогда
		// Для режима формирования Отчет, в структуру отчета может быть выведено измерение сценарий.
		// Тогда необходимость получения фактических данных зависит от выбранных сценариев, которые выведены в настройки отчета.
		ПараметрыЗаполненияИсточников.ПроверятьНеобходимостьФактаПоСтруктуреОтчета = Истина;
		ОписаниеСтруктурыЭлементовБюджета.ТаблицаНастроек = ЭлементыНастройкиЯчеекВидаБюджета(ВидБюджета);
	КонецЕсли;
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета.ВидыЭлементовИсточниковДанных();
	Для Каждого ВидЭлемента Из ВидыЭлементов Цикл
		ЗаполнитьИсточникиПоВидуЭлемента(Источники,
			СтруктураКэша,
			ОписаниеСтруктурыЭлементовБюджета,
			ВидЭлемента,
			ПараметрыЗаполненияИсточников);
	КонецЦикла;
	
	ТаблицаПроверкиХранимыхПравил = Новый ТаблицаЗначений;
	ТаблицаПроверкиХранимыхПравил.Колонки.Добавить("СтатьяПоказатель", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаПроверкиХранимыхПравил.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Для Каждого Источник Из Источники Цикл
		
		Источник.Вставить("ПредполагаетФактическиеДанные", 
			ПоИсточникуПредположительноНужныФактическиеДанные(Источник, РежимФормирования, Справочники.Сценарии.ФактическиеДанные));
		Источник.Вставить("ПредполагаетИсполнениеБюджета", 
			ПоИсточникуПредположительноНужныФактическиеДанные(Источник, РежимФормирования, Справочники.Сценарии.ИсполнениеБюджета));
		
		Если НЕ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
			Источник.Вставить("ВлияющиеСтатьиПредполагаетФактическиеДанные", "");
			Источник.Вставить("ВлияющиеСтатьиПредполагаетИсполнениеБюджета", "");
		Иначе
			Источник.Вставить("ВлияющиеСтатьиПредполагаетФактическиеДанные",
				ПоИсточникуПредположительноНужныФактическиеДанные(Источник, РежимФормирования, Справочники.Сценарии.ФактическиеДанные, Истина));
			Источник.Вставить("ВлияющиеСтатьиПредполагаетИсполнениеБюджета", 
				ПоИсточникуПредположительноНужныФактическиеДанные(Источник, РежимФормирования, Справочники.Сценарии.ИсполнениеБюджета, Истина));
		КонецЕсли;
			
		// Данные свойства используются только для получения свойств ПредполагаетФактическиеДанные/ПредполагаетИсполнениеБюджета
		Источник.Удалить("ПолучениеПланаПоСтруктуреБюджета");
		Источник.Удалить("ПолучениеФактаПоСтруктуреБюджета");
		Источник.Удалить("ПолучениеИсполненияБюджетаПоСтруктуреБюджета");
		Источник.Удалить("ПолучениеСценарияИзШапкиОтчета");
		
		Если Источник.ТипИсточника <> Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты
			И Источник.ТипИсточника <> Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ПредполагаетФактическиеДанные = "Предполагается"
			ИЛИ Источник.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
			ИЛИ Источник.ПредполагаетИсполнениеБюджета = "Предполагается"
			ИЛИ Источник.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета" Тогда
			
			Для Каждого Объект Из Источник.Объекты Цикл
				
				НоваяСтрока = ТаблицаПроверкиХранимыхПравил.Добавить();
				НоваяСтрока.СтатьяПоказатель = Объект;
				НоваяСтрока.Идентификатор = Источник.Идентификатор;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	Таблица.СтатьяПоказатель,
		|	Таблица.Идентификатор
		|ПОМЕСТИТЬ ТаблицаПроверки
		|ИЗ
		|	&ТаблицаПроверки КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверки.Идентификатор,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ЕстьХранимыеПравила,
		|	НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ЕстьОнЛайновыеПравила
		|ПОМЕСТИТЬ ТаблицаСФлагами
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджетов КАК СтатьиБюджетов
		|		ПО ТаблицаПроверки.СтатьяПоказатель = СтатьиБюджетов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|		ПО ТаблицаПроверки.СтатьяПоказатель = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
		|ГДЕ
		|	ТаблицаПроверки.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов
		|	И НЕ СтатьиБюджетов.Ссылка ЕСТЬ NULL
		|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаПроверки.Идентификатор,
		|	ЕСТЬNULL(ПравилаПолученияФактаПоСвязаннымСтатьям.ПромежуточноеКэшированиеРезультатовРаботыПравил, ЛОЖЬ) КАК ЕстьХранимыеПравила,
		|	ИСТИНА КАК ЕстьОнЛайновыеПравила
		|ИЗ
		|	ТаблицаПроверки КАК ТаблицаПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
		|		ПО ТаблицаПроверки.СтатьяПоказатель = ПоказателиБюджетов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСвязаннымСтатьям
		|			ПО СвязиПоказателейБюджетов.СтатьяБюджетов = ПравилаПолученияФактаПоСвязаннымСтатьям.СтатьяБюджетов
		|			И НЕ ПравилаПолученияФактаПоСвязаннымСтатьям.ПометкаУдаления
		|		ПО ТаблицаПроверки.СтатьяПоказатель = СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов
		|ГДЕ
		|	ТаблицаПроверки.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов
		|	И НЕ ПоказателиБюджетов.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСФлагами.Идентификатор,
		|	МАКСИМУМ(ТаблицаСФлагами.ЕстьХранимыеПравила) КАК ЕстьХранимыеПравила,
		|	МАКСИМУМ(ТаблицаСФлагами.ЕстьОнЛайновыеПравила) КАК ЕстьОнЛайновыеПравила
		|ИЗ
		|	ТаблицаСФлагами КАК ТаблицаСФлагами
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСФлагами.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаПроверки", ТаблицаПроверкиХранимыхПравил);
	
	ФлагиХраненияПравил = Запрос.Выполнить().Выгрузить();
	Для Каждого Источник Из Источники Цикл
		Если Источник.ПредполагаетФактическиеДанные = "НеПредполагается"
			И Источник.ПредполагаетИсполнениеБюджета = "НеПредполагается" Тогда
			Источник.Вставить("ЕстьХранимыеПравила", Ложь);
			Источник.Вставить("ЕстьОнЛайновыеПравила", Ложь);
			Продолжить;
		КонецЕсли;
		СтрокаФлагов = ФлагиХраненияПравил.Найти(Источник.Идентификатор, "Идентификатор");
		Если СтрокаФлагов = Неопределено Тогда
			Источник.Вставить("ЕстьХранимыеПравила", Ложь);
			Источник.Вставить("ЕстьОнЛайновыеПравила", Истина);
		Иначе
			Источник.Вставить("ЕстьХранимыеПравила", СтрокаФлагов.ЕстьХранимыеПравила);
			Источник.Вставить("ЕстьОнЛайновыеПравила", СтрокаФлагов.ЕстьОнЛайновыеПравила);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Источники;
	
КонецФункции

// Возвращает описание источников вида бюджета в виде массива
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого следует получить описание источников
//  СтруктураКолонок  - Структура -
//  РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
//
// Возвращаемое значение:
//   Массив Из см. НовыйИсточникПериодаГруппировки - описание источников в виде массива.
//
Функция ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонок, РежимФормирования) Экспорт
	
	Источники = Новый Массив;
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДеревоЭлементовБюджета = ДеревоЭлементовБюджета(ВидБюджета, Истина);
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета.ВидыЭлементовИсточниковПериодовГруппировок();
	Для каждого ВидЭлемента Из ВидыЭлементов Цикл
		ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	КонецЦикла;
	
	Возврат Источники;
	
КонецФункции

#Область ПолучениеСтруктурыЯчеекБюджетногоОтчета


// Описание
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит:
// 		* Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
//
Функция ПолучитьТаблицыВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка,
		|	ЭлементыФинансовыхОтчетов.ВидЭлемента
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
		|	И ЭлементыФинансовыхОтчетов.ВидЭлемента В(&ВидЭлемента)";
		
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ВидЭлемента", Список);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКонечныеЭлементыДерева(Элемент, Все = Ложь, Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Все Тогда
			Результат = ДеревоКонечныхЭлементов();
		Иначе
			Результат = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Элемент.Строки Цикл
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			Продолжить;
		КонецЕсли;
		Если Все Тогда
			НоваяСтрока = ДобавитьСтрокуВДеревоКонечныхЭлементов(Результат, СтрокаДерева);
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, НоваяСтрока);
		Иначе
			Если Не СтрокаДерева.Строки.Количество() Тогда
				Результат.Добавить(СтрокаДерева);
			КонецЕсли;
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы) Экспорт
	Перем ЛокальноеОкончаниеФормулы, ЛокальноеНачалоФормулы;
	
	ЧислоВхождений = СтрЧислоВхождений(ВРег(Формула), ВРег(ИмяОперанда));
	СтрокаПоиска = Формула;
	НачалоФормулы = 0; ОкончаниеФормулы = 0;
	
	Для Сч = 1 По ЧислоВхождений Цикл
		ЧастиФормулы = ВычислитьЧастьФормулыСИтогомИОперандом(СтрокаПоиска, ИмяОперанда, ЛокальноеНачалоФормулы, ЛокальноеОкончаниеФормулы);
		НачалоФормулы = ОкончаниеФормулы + ЛокальноеНачалоФормулы;
		ОкончаниеФормулы = ОкончаниеФормулы + ЛокальноеОкончаниеФормулы;
		Если ЧастиФормулы <> Неопределено Тогда
			Возврат ЧастиФормулы
		КонецЕсли;
		СтрокаПоиска = Сред(СтрокаПоиска, ЛокальноеОкончаниеФормулы);
		ОкончаниеФормулы = ОкончаниеФормулы - 1;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОкончаниеФормулы(Формула, ОкончаниеФормулы) Экспорт
	
	Результат = "";
	Сч = ОкончаниеФормулы;
	Пока Сч < СтрДлина(Формула) Цикл
		Символ = Сред(Формула, Сч, 1);
		Если Символ = ")" Тогда
			Прервать;
		КонецЕсли;
		Результат = Результат + Символ;
		Сч = Сч + 1;
	КонецЦикла;
	
	ОкончаниеФормулы = Сч;
	
	Возврат Результат;
	
КонецФункции

Функция СтрЗаменитьБезУчетаРегистра(Знач Строка, Знач ПодстрокаПоиска, Знач ПодстрокаЗамены) Экспорт
	
	ПодстрокаПоиска = Строка(ПодстрокаПоиска);
	Если ПустаяСтрока(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если СтрДлина(Строка) < СтрДлина(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	ПодстрокаПоиска = ВРег(ПодстрокаПоиска);
	ДлинаПодстрокиПоиска = СтрДлина(ПодстрокаПоиска);
	
	Результат = "";
	ПрошлиВсюСтроку = Ложь;
	
	Пока Не ПрошлиВсюСтроку Цикл
		Если ВРег(Лев(Строка, ДлинаПодстрокиПоиска)) = ПодстрокаПоиска Тогда
			Результат = Результат + ПодстрокаЗамены;
			Строка = Сред(Строка, ДлинаПодстрокиПоиска + 1);
		Иначе
			Результат = Результат + Лев(Строка, 1);
			Строка = Сред(Строка, 2);
		КонецЕсли;
		ПрошлиВсюСтроку = Строка = "";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула) Экспорт
	
	ПеременныеПериодов = БюджетнаяОтчетностьКлиентСервер.ПеременныеПериодовБюджетирования();
	
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "РазностьДат(", "РазностьДат(ПараметрыПериодов, ");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, ПеременныеПериодов.НачалоПериодаДанных.Имя, "НачалоПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, ПеременныеПериодов.КонецПериодаДанных.Имя,  "КонецПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, ПеременныеПериодов.ГраницаФактДанных.Имя,   "ГраницаФактДанных");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, ПеременныеПериодов.ПериодГруппировки.Имя,   "ПериодГруппировки");
	
КонецПроцедуры

Функция ТипКолонкиСтруктурыЯчеек(Имя, Аналитика = Ложь) Экспорт
	
	МассивТипов = Новый Массив;
	Классификатор = Неопределено;
	
	Если Имя = "ОсновнойЭлемент"
		ИЛИ Имя = "ОбратныйЗнак"
		ИЛИ Имя = "ПризнакИспользования" Тогда
		МассивТипов.Добавить(Тип("Булево"));
	ИначеЕсли Имя = "Строка" ИЛИ Имя = "Колонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ВидЭлемента" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "СтатьяБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ИначеЕсли Имя = "НефинансовыйПоказатель" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ИначеЕсли Имя = "ПоказательБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ИначеЕсли Имя = "РедактируемоеЗначение" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(150);
	ИначеЕсли Найти(Имя, "Период") Тогда
		МассивТипов.Добавить(Тип("Дата"));
	ИначеЕсли Имя = "Флаг" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(20);
	ИначеЕсли Имя = "Организация" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ИначеЕсли Имя = "Подразделение" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ИначеЕсли Имя = "Сценарий" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Сценарии"));
	ИначеЕсли Имя = "ЕдиницаИзмерения" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ИначеЕсли Имя = "Валюта" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Валюты"));
	ИначеЕсли Найти(Имя, "Аналитика") Тогда
		МассивТипов = БюджетированиеСервер.ВсеТипыАналитик();
	ИначеЕсли Аналитика Тогда
		Возврат Имя.ТипЗначения;
	ИначеЕсли Имя = "Количество" ИЛИ Имя = "Сумма" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "НомерСтроки" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "Формула" Тогда
		МассивТипов.Добавить(Тип("Строка"));
	ИначеЕсли Имя = "ИД_Источника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(30);
	ИначеЕсли Имя = "ТипРедактируемогоЗначения" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(15);
	ИначеЕсли Имя = "ПолеИсточника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(50);
	ИначеЕсли Имя = "ИмяОперанда" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(150);
	ИначеЕсли Имя = "ВидОперанда" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "ОперандСтрока"
		ИЛИ Имя = "ОперандКолонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ОбщиеИзмерения"
		ИЛИ Имя = "СписокОперандов" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	ИначеЕсли Имя = "ИсточникиРасчета"
		ИЛИ Имя = "Примечание" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	ИначеЕсли Имя = "ИсключитьДанныеВводимогоДокументаПриРасчете" Тогда
		МассивТипов.Добавить(Тип("Булево"));
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип колонки структуры ячеек';
								|en = 'Unknown cell structure column type'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Классификатор) Тогда
		Возврат Новый ОписаниеТипов(МассивТипов,,,,Классификатор);
	Иначе
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФиксированныйЭлемент(Знач СтрокаТекущегоЭлемента) Экспорт
	
	Если ТипЗнч(СтрокаТекущегоЭлемента) = Тип("Строка") Тогда
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента;
		ВидЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента).ВидЭлемента;
	Иначе
		ВидЭлемента = СтрокаТекущегоЭлемента.ВидЭлемента;
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента.АдресСтруктурыЭлемента;
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
			АдресСтруктурыЭлемента, "ТипИзмерения");
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			ЗначениеПериода = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
				АдресСтруктурыЭлемента,
				"ЗначениеПериода");
			Если ЗначениеПериода <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти 

#Область ГенерацияСКДДляПолученияДанных

Процедура ДобавитьПараметрСхемы(СКД, Имя) Экспорт
	
	Если СКД.Параметры.Найти(Имя) = Неопределено Тогда
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.Имя = Имя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГенерацияДереваДляВыводаОтчета

// Описание
// 
// Параметры:
// 	ПараметрыТаблицы - Структура - описание:
// 		* ВыводитьЗаголовокГруппировки - Булево -
// 		* ЗаголовокГруппировки - Строка -
// 		* ОтображатьНумерациюКолонок - Булево -
// 		* ОтображатьНумерациюСтрок - Булево -
// 		* ЭлементыОформления - ТаблицаЗначений -
// 		* ОформляемыеСтроки - ТаблицаЗначений -
// 		* ОформляемыеКолонки - ТаблицаЗначений -
// 		* РасшифровкаПолейОтбораЭО - ТаблицаЗначений -
// 	КэшДопРеквизиты - ТаблицаЗначений -
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Строка - Произвольный -
// * НомерСтроки - Число -
// * Колонка - Произвольный -
// * НомерКолонки - Число -
// * Количество - Число -
// * Сумма - Число -
// * Значение - Произвольный -
// * ФлагКоличество - Булево -
// * ФлагСумма - Булево -
// * ФлагЗначение - Булево -
// * ИмяОбласти - Строка -
// * НомерТаблицы - Число  -
//
Функция ДанныеОтчетаДляОформления(ПараметрыТаблицы, КэшДопРеквизиты) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("НомерСтроки");
	Таблица.Колонки.Добавить("Колонка");
	Таблица.Колонки.Добавить("НомерКолонки");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ФлагКоличество");
	Таблица.Колонки.Добавить("ФлагСумма");
	Таблица.Колонки.Добавить("ФлагЗначение");
	Таблица.Колонки.Добавить("ИмяОбласти");
	Таблица.Колонки.Добавить("НомерТаблицы");
	
	МассивЭлементов = Новый Массив;
	Если ПараметрыТаблицы.Свойство("ОформляемыеСтроки")
		И ПараметрыТаблицы.Свойство("ОформляемыеКолонки") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеСтроки.ВыгрузитьКолонку("ЭлементОтчета"));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеКолонки.ВыгрузитьКолонку("ЭлементОтчета"));
	КонецЕсли;
	
	МассивИзмерений = Новый Массив;
	
	Для Каждого ЭлементОтчета Из МассивЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Неопределено Тогда
			// Не измерение
			Продолжить;
		КонецЕсли;
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ИмяИзмерения = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			ИмяИзмерения = "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			ИмяИзмерения = "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			ИмяИзмерения = "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			ИмяИзмерения = "Валюта";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		КонецЕсли;
		
		Если МассивИзмерений.Найти(ИмяИзмерения) = Неопределено Тогда
			МассивИзмерений.Добавить(ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из МассивИзмерений Цикл
		Таблица.Колонки.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

// Дерево в таблицу значений
// 
// Параметры:
// 	Дерево - ДеревоЗначений, СтрокаДереваЗначений -
// 	Таблица - ТаблицаЗначений, Неопределено -
// 	Уровень - Число -
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Описание
Функция ПреобразоватьДеревоВТаблицу(Дерево, Таблица = Неопределено, Уровень = 0) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Пробел = "";
		Для Сч = 1 По Уровень Цикл
			Пробел = Пробел + " - ";
		КонецЦикла;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока[0] = Пробел + Строка(НоваяСтрока[0]);
		ПреобразоватьДеревоВТаблицу(СтрокаДерева, Таблица, Уровень + 1);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти 

#Область СтруктураОписанияВидаБюджета


// Описание
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Описание
// 	СтруктураКолонокТаблицыДанных - Структура, Булево, Неопределено - Описание:
// * ВидыАналитик - Массив -
// * Измерения - Массив -
// * Периодичности - Массив -
// 	РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ИсточникиДанных - См. ПолучитьОписаниеИсточниковДанных
// * ИсточникиПериодовГруппировок - см. БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиПериодовГруппировок
// * СтруктураЯчеек - ТаблицаЗначений - таблица с колонками:
//    **ОсновнойЭлемент - Булево - Флаг основного элемента.
//    **Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
//    **Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
// * ИндексыСтруктурыЯчеек - Массив из Строка - Массив из имен полей индексов.
// * ПоляИсточников - ТаблицаЗначений - таблица опосания полей:
//    **ИмяРесурса - Строка -
//    **Вспомогательное - Булево - 
// * ПараметрыЯчеек - ТаблицаЗначений - 
// * ЗаполнениеОтсутствующихИзмеренийНФП - ТаблицаЗначений -
// * ИсточникиЗначенийИзмерений - ТаблицаЗначений -
// * ОтборИзмеренийНФП - ТаблицаЗначений -
// * ТаблицаПодчиненностиЭлементов - ТаблицаЗначений, ДеревоЗначений - содержит колонки:
//    **Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
//    **Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
//    **ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
//
Функция ОписаниеОтчета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Постфикс = ?(РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета,
						Перечисления.РежимыФормированияБюджетныхОтчетов.Документ,
						РежимФормирования);
	ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета.СтруктураОписанияВидаБюджета;
	
	Значение = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, Постфикс);
	
	Если Значение <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Значение;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Бюджетирование.РасчетКэшаПолучениеСтруктурыОписания");

	Результат = РасчетКэшаПолучениеСтруктурыОписания(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования, ВидЭлементаКэша, Постфикс);
	
	КоличествоДанных = Результат.СтруктураЯчеек.Количество();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат запроса по таблице операндов, требующиъ расчета данных ячеек
// 
// Параметры:
// 	СтруктураОписаниеОтчета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета
//
// Возвращаемое значение:
// 	РезультатЗапроса, Неопределено -
Функция ТаблицаОперандовТребующихРасчетаДанныхЯчеек(СтруктураОписаниеОтчета) Экспорт
	
	ТаблицаДляПроверки = СтруктураОписаниеОтчета.СтруктураЯчеек.Скопировать(, "ОсновнойЭлемент, Строка, Колонка, ВидЭлемента, ВидОперанда, ИД_Источника");
	ТаблицаДляПроверки.Свернуть("ОсновнойЭлемент, Строка, Колонка, ВидЭлемента, ВидОперанда, ИД_Источника");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда
	|ПОМЕСТИТЬ СтруктураЯчеек
	|ИЗ
	|	&СтруктураЯчеек КАК СтруктураЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненности.Родитель,
	|	ТаблицаПодчиненности.Ссылка
	|ПОМЕСТИТЬ ТаблицаПодчиненности
	|ИЗ
	|	&ТаблицаПодчиненности КАК ТаблицаПодчиненности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.ВидЭлемента,
	|	МАКСИМУМ(ТаблицаСтрок.Ссылка) ЕСТЬ NULL  КАК КонечныйЭлемент
	|ПОМЕСТИТЬ РасчетныеИИтоговыеЭлементы
	|ИЗ
	|	СтруктураЯчеек КАК СтруктураЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПодчиненности КАК ТаблицаСтрок
	|		ПО (СтруктураЯчеек.Строка = ТаблицаСтрок.Родитель
	|				ИЛИ СтруктураЯчеек.Колонка = ТаблицаСтрок.Родитель)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.ВидЭлемента
	|
	|ИМЕЮЩИЕ
	|	НЕ(МАКСИМУМ(ТаблицаСтрок.Ссылка) ЕСТЬ NULL 
	|			И СтруктураЯчеек.ОсновнойЭлемент
	|			И СтруктураЯчеек.ВидЭлемента В (&СписокЭлементовРедактирования))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетныеИИтоговыеЭлементы.Строка,
	|	РасчетныеИИтоговыеЭлементы.Колонка,
	|	РасчетныеИИтоговыеЭлементы.ОсновнойЭлемент,
	|	РасчетныеИИтоговыеЭлементы.ВидОперанда,
	|	РасчетныеИИтоговыеЭлементы.ВидЭлемента,
	|	РасчетныеИИтоговыеЭлементы.КонечныйЭлемент
	|ПОМЕСТИТЬ ТаблицаПроверкиСовместногоВывода
	|ИЗ
	|	РасчетныеИИтоговыеЭлементы КАК РасчетныеИИтоговыеЭлементы
	|ГДЕ
	|	НЕ(РасчетныеИИтоговыеЭлементы.ОсновнойЭлемент
	|					И РасчетныеИИтоговыеЭлементы.ВидЭлемента В (&СписокПроизвольныхИГрупп)
	|				ИЛИ НЕ РасчетныеИИтоговыеЭлементы.ОсновнойЭлемент
	|					И РасчетныеИИтоговыеЭлементы.ВидОперанда В (&СсылкаНаЯчейку)
	|				ИЛИ РасчетныеИИтоговыеЭлементы.ВидЭлемента = &НефинансовыйПоказатель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПроверкиСовместногоВывода.Строка,
	|	ТаблицаПроверкиСовместногоВывода.Колонка,
	|	ТаблицаПроверкиСовместногоВывода.ОсновнойЭлемент,
	|	ТаблицаПроверкиСовместногоВывода.ВидОперанда,
	|	ТаблицаПроверкиСовместногоВывода.ВидЭлемента,
	|	ТаблицаПроверкиСовместногоВывода.КонечныйЭлемент
	|ИЗ
	|	ТаблицаПроверкиСовместногоВывода КАК ТаблицаПроверкиСовместногоВывода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПодчиненности КАК ТаблицаПодчиненности
	|		ПО ТаблицаПроверкиСовместногоВывода.Строка = ТаблицаПодчиненности.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|		ПО (ТаблицаПодчиненности.Ссылка = ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка)
	|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &РеквизитВыводитьСРодительским)
	|ГДЕ
	|	ЕСТЬNULL(ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение, ЛОЖЬ) = ЛОЖЬ";
	
	СписокЭлементовРедактирования = Новый СписокЗначений;
	СписокЭлементовРедактирования.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	СписокЭлементовРедактирования.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение);
	
	СписокПроизвольныхИГрупп = Новый СписокЗначений;
	СписокПроизвольныхИГрупп.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	СписокПроизвольныхИГрупп.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
	СписокПроизвольныхИГрупп.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе);
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", ТаблицаДляПроверки);
	Запрос.УстановитьПараметр("ТаблицаПодчиненности", СтруктураОписаниеОтчета.ТаблицаПодчиненностиЭлементов);
	Запрос.УстановитьПараметр("СписокЭлементовРедактирования", СписокЭлементовРедактирования);
	Запрос.УстановитьПараметр("СписокПроизвольныхИГрупп", СписокПроизвольныхИГрупп);
	Запрос.УстановитьПараметр("СсылкаНаЯчейку", Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
	Запрос.УстановитьПараметр("НефинансовыйПоказатель", Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	Запрос.УстановитьПараметр("РеквизитВыводитьСРодительским", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВыводитьВместеСРодительским);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ИсточникиЗначенийИзмерения

// Конструктор таблицы элементов
//
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит колонки:
// 		* Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент отчета или адрес его хранения во временном хранилище.
// 		* Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент отчета или адрес его хранения во временном хранилище.
// 		* Строка  - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент отчета или адрес его хранения во временном хранилище.
//
Функция НовыйТаблицаЭлементов() Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений();
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Колонка");
	ТаблицаЭлементов.Колонки.Добавить("Строка");
	
	Возврат ТаблицаЭлементов;
	
КонецФункции

// Конструктор таблицы источников
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит колонки:
// 		* ВидЭлемента - Произвольный -
// 		* Элемент - Произвольный - 
// 		* Родитель - Произвольный - 
// 		* Наименование - Произвольный - 
//
Функция НовыйТаблицаИсточников() Экспорт
	
	ТаблицаИсточников = Новый ТаблицаЗначений;
	ТаблицаИсточников.Колонки.Добавить("ВидЭлемента");
	ТаблицаИсточников.Колонки.Добавить("Элемент");
	ТаблицаИсточников.Колонки.Добавить("Родитель");
	ТаблицаИсточников.Колонки.Добавить("Наименование");
	
	Возврат ТаблицаИсточников;
	
КонецФункции

// Возвращает источники значений для элементов финансовых отчетов при использовании в видах бюджетов.
// 
// Параметры:
//	Кэш - ТаблицаЗначений, Неопределено - кэш дочерних элементов для текущего элемента
//	СтрокаДерева - СтрокаДереваЗначений - строка дерева значений
//	Заполнение - Булево - признак заполнения
//	БезПроизводных - Булево - Ложь, когда требуется включить производные показатели.
//
// Возвращаемое значение:
//	ТаблицаЗначений - рассчитанные источники значений:
//	* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
//	* Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов - элемент
//	* Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов - родительский элемент
//	* Наименование - Строка - представление элемента.
// 
Функция ИсточникиЗначенийЭлемента(Кэш, СтрокаДерева, Заполнение = Ложь, БезПроизводных = Ложь) Экспорт
	
	ТаблицаИсточников = НовыйТаблицаИсточников();
	
	СложнаяТаблица = Ложь;
	ИсточникПодчиненных = Неопределено;
	
	Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
		Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	Если Таблица <> Неопределено Тогда
		СложнаяТаблица = Истина;
	КонецЕсли;
	
	ЭтоСтроки = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
		Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки) = Неопределено;
	
	ВидыЭлементовЗначений = Новый Массив;
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	Если Не Заполнение Тогда
		ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение);
	КонецЕсли;
	Если Не Заполнение И Не БезПроизводных Тогда
		ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	КонецЕсли;
	
	Если Не СложнаяТаблица Тогда
		// 1. Определяем список родительских элементов
		Родитель = СтрокаДерева;
		Пока Родитель <> Неопределено Цикл
			Если ВидыЭлементовЗначений.Найти(Родитель.ВидЭлемента) <> Неопределено Тогда
				НоваяСтрока = ТаблицаИсточников.Добавить();
				НоваяСтрока.Элемент = 
					?(ЗначениеЗаполнено(Родитель.АдресСтруктурыЭлемента), Родитель.АдресСтруктурыЭлемента, Родитель.ЭлементОтчета);
				НоваяСтрока.ВидЭлемента = Родитель.ВидЭлемента;
				НоваяСтрока.Наименование = Родитель.НаименованиеДляПечати;
			КонецЕсли;
			Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Родитель);
		КонецЦикла;
		
		// 2. Определяем список подчиненных элементов
		ПодчиненныеИсточникиЗначенийЭлементаПростойТаблицы(
			ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(СтрокаДерева),
			ТаблицаИсточников,
			ВидыЭлементовЗначений);
		
		// 3. Определяем список транспонированных элементов
		ИсточникПодчиненных = Неопределено;
		
		Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		Если Таблица = Неопределено Тогда
			Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаДерева,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		КонецЕсли;
		
		Если Таблица <> Неопределено Тогда //Измерения могут быть выбраны без таблицы
			
			Если ЭтоСтроки Тогда
				ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(
					Таблица,
					"ВидЭлемента",
					Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			Иначе
				ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(
					Таблица,
					"ВидЭлемента",
					Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
			КонецЕсли;
		
			ПодчиненныеИсточникиЗначенийЭлементаПростойТаблицы(
				ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(ИсточникПодчиненных),
				ТаблицаИсточников,
				ВидыЭлементовЗначений);
		КонецЕсли;
		
	Иначе
		
		// 1. Определяем таблицу элементов
		
		НастройкаЯчеек = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(
			Таблица,
			"ВидЭлемента",
			Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
		
		ТаблицаЭлементов = ПолучитьТаблицуЭлементов(НастройкаЯчеек, Кэш);
		
		ПоискПоАдресу = ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента);
		
		// 2. Находим связанные элементы
		
		ВсяВеткаДерева = Новый Массив;
		ВсяВеткаДерева.Добавить(СтрокаДерева);
		ПодчиненныеИсточникиЗначенийЭлементаСложнойТаблицы(СтрокаДерева.Строки, ВсяВеткаДерева);
		
		Для Каждого СтрокаОбработки Из ВсяВеткаДерева Цикл
			
			ЭлементПоиска = ?(ПоискПоАдресу, СтрокаОбработки.АдресСтруктурыЭлемента, СтрокаОбработки.ЭлементОтчета);
			СтруктураПоиска = Новый Структура(?(ЭтоСтроки, "Строка", "Колонка"), ЭлементПоиска);
			
			Если ЗначениеЗаполнено(ЭлементПоиска) Тогда
				РеквизитыОбъекта = РеквизитыОбъектаПоСсылкеИлиАдресу(ЭлементПоиска, "НаименованиеДляПечати", Кэш);
				НаименованиеЭлементаПоиска = РеквизитыОбъекта.НаименованиеДляПечати;
			Иначе
				НаименованиеЭлементаПоиска = "";
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Элемент = НайденнаяСтрока.Элемент;
				
				РеквизитыОбъекта = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, "ВидЭлемента, НаименованиеДляПечати", Кэш);
				
				Если ВидыЭлементовЗначений.Найти(РеквизитыОбъекта.ВидЭлемента) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Родитель = ?(ЭтоСтроки, НайденнаяСтрока.Колонка, НайденнаяСтрока.Строка);
				НайденнаяСтрокаСпискаЭлементов = ТаблицаИсточников.Найти(Родитель, "Элемент");
				Если НайденнаяСтрокаСпискаЭлементов = Неопределено Тогда
					НайденнаяСтрокаСпискаЭлементов = ТаблицаИсточников.Добавить();
					НайденнаяСтрокаСпискаЭлементов.Элемент = Родитель;
					РеквизитыРодитель = РеквизитыОбъектаПоСсылкеИлиАдресу(Родитель, "ВидЭлемента, НаименованиеДляПечати", Кэш);
					НайденнаяСтрокаСпискаЭлементов.ВидЭлемента = РеквизитыРодитель.ВидЭлемента;
					НайденнаяСтрокаСпискаЭлементов.Наименование = РеквизитыРодитель.НаименованиеДляПечати;
				КонецЕсли;
				НоваяСтрока = ТаблицаИсточников.Добавить();
				НоваяСтрока.ВидЭлемента = РеквизитыОбъекта.ВидЭлемента;
				НоваяСтрока.Элемент = Элемент;
				НоваяСтрока.Родитель = Родитель;
				НоваяСтрока.Наименование = РеквизитыОбъекта.НаименованиеДляПечати + " (" + НаименованиеЭлементаПоиска + ")";
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// 4. Отфильтруем НФП, которые не поддерживают выбранную аналитику
	СсылкаАдрес = ?(ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента), СтрокаДерева.АдресСтруктурыЭлемента, СтрокаДерева.ЭлементОтчета);
	ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ТипИзмерения");
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
		ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
		ВидАналитики = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ВидАналитики");
	ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
		ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ИмяИзмерения");
	КонецЕсли;
	
	КУдалению = Новый Массив;
	Для Каждого Элемент Из ТаблицаИсточников Цикл
		
		ВидЭлемента = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент.Элемент, "ВидЭлемента", Кэш).ВидЭлемента;
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НефинансовыйПоказатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Элемент.Элемент, "НефинансовыйПоказатель");
			СписокРеквизитов = "ПоСценариям, ПоОрганизациям, ПоПодразделениям";
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				СписокРеквизитов = СписокРеквизитов + ", ВидАналитики" + НомерАналитики;
			КонецЦикла;
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НефинансовыйПоказатель, СписокРеквизитов);
			
			НФПДоступен = Ложь;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
					Если Реквизиты["ВидАналитики" + Сч] = ВидАналитики Тогда
						НФПДоступен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ИмяИзмерения");
				Если ИмяИзмерения = "Сценарий" И Реквизиты.ПоСценариям Тогда
					НФПДоступен = Истина;
				ИначеЕсли ИмяИзмерения = "Подразделение" И Реквизиты.ПоПодразделениям Тогда
					НФПДоступен = Истина;
				ИначеЕсли ИмяИзмерения = "Организация" И Реквизиты.ПоОрганизациям Тогда
					НФПДоступен = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Не НФПДоступен Тогда
				КУдалению.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из КУдалению Цикл
		ТаблицаИсточников.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Результат = ТаблицаИсточников.СкопироватьКолонки(); // см. НовыйТаблицаИсточников
	ДополнитьИсточникиОперандамиРекурсивно(ТаблицаИсточников, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение);
	
	Возврат Результат;
	
КонецФункции

// Возвращает источники значений по умолчанию для элементов финансовых отчетов при использовании в видах бюджетов.
// 
// Параметры:
//	Кэш - ТаблицаЗначений, Неопределено - кэш дочерних элементов для текущего элемента
//	СтрокаДереваАдресЭлементовОтчета - СтрокаДереваЗначений, Строка - строка дерева значений или адрес во временном хранилище
//	АдресЭлементаВХранилище - Строка -
//	Заполнение - Булево - признак заполнения
//	БезПроизводных - Булево - Ложь, когда требуется включить производные показатели.
//
// Возвращаемое значение:
//	ТаблицаЗначений - рассчитанные источники значений:
//	* Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище
//	* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// 
Функция ИсточникиЗначенийПоУмолчанию(Кэш, СтрокаДереваАдресЭлементовОтчета, АдресЭлементаВХранилище = Неопределено, Заполнение = Ложь, БезПроизводных = Ложь) Экспорт
	
	Если ТипЗнч(СтрокаДереваАдресЭлементовОтчета) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаДерева = СтрокаДереваАдресЭлементовОтчета;
	Иначе
		ДеревоЭлементов = ПолучитьИзВременногоХранилища(СтрокаДереваАдресЭлементовОтчета);
		СтрокаДерева = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(ДеревоЭлементов, "АдресСтруктурыЭлемента", АдресЭлементаВХранилище);
	КонецЕсли;
	
	ТаблицаИсточников = ИсточникиЗначенийЭлемента(Кэш, СтрокаДерева, Заполнение, БезПроизводных);
	
	РассчитанныеИсточникиЗначений = СтатьиИПоказателиЗначенийЭлемента(ТаблицаИсточников, Истина);
	
	Возврат РассчитанныеИсточникиЗначений;
	
КонецФункции

#КонецОбласти 

#Область Прочее


// Выполняет поиск элементов отбора компоновки по переданному имени поля компоновки
// 
// Параметры:
// 	ИсточникОтбор - ГруппаЭлементовОтбораКомпоновкиДанных, НастройкиКомпоновкиДанных - Источник отбора.
// 	ИмяЭлемента - Строка - Имя поля компоновки.
// 	НайденныйОтбор - СписокЗначений, Массив, Неопределено - Массив, в который необходимо поместить найденные элементы отбора.
// 	СУчетомВложенных - Булево - Флаг поиска с учетом вложенных полей.
// 	ТолькоИспользуемые - Булево - Флаг поиска только используемых элементов отбора.
// Возвращаемое значение:
// 	Булево - Истина, если подходящие элементы отбора найдены.
Функция НайтиОтборПоИмени(ИсточникОтбор, ИмяЭлемента, НайденныйОтбор = Неопределено, СУчетомВложенных = Ложь, ТолькоИспользуемые = Истина) Экспорт
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Если ТипЗнч(ИсточникОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыОтбора = ИсточникОтбор.Элементы;
	Иначе
		Отбор = ИсточникОтбор.Отбор; // ОтборКомпоновкиДанных
		ЭлементыОтбора = Отбор.Элементы;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если НайтиОтборПоИмени(ЭлементОтбора, ИмяЭлемента, НайденныйОтбор, СУчетомВложенных, ТолькоИспользуемые) Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если СУчетомВложенных Тогда
				
				ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПозицияТочки = СтрНайти(ИмяПоля, ".");
				Если ПозицияТочки Тогда
					ИмяПоля = Лев(ИмяПоля, ПозицияТочки - 1);
				КонецЕсли;
				ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					
					ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
					ПозицияТочки = СтрНайти(ИмяПоля, ".");
					Если ПозицияТочки Тогда
						ИмяПоля = Лев(ИмяПоля, ПозицияТочки - 1);
					КонецЕсли;
					ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
				Иначе
					
					ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
					
				КонецЕсли;
			Иначе
				
				ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
				ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
				
			КонецЕсли;
			
			Если (ЛевоеЗначение = ПолеКомпоновки
				ИЛИ ПравоеЗначение = ПолеКомпоновки)
				И (ЭлементОтбора.Использование ИЛИ НЕ ТолькоИспользуемые) Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныйОтбор.Добавить(ЭлементОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйОтбор = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НайденныйОтбор.Количество() > 0;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыДоступностиФильтров(СтрокаОтчета = Неопределено, ПараметрыОпределения = Неопределено, СтруктураКэша = Неопределено) Экспорт
	
	Если СтруктураКэша = Неопределено Тогда
		КэшДопРеквизитов = Неопределено;
		КэшРеквизитов = Новый Соответствие;
	Иначе
		КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
		КэшРеквизитов = СтруктураКэша.КэшРеквизитов;
	КонецЕсли;
	
	ДоступностьФильтров = Новый Структура("Организация, Подразделение, Сценарий", Истина, Истина, Истина);
	Колонка = Неопределено; Строка = Неопределено;
	
	Если ПараметрыОпределения = Неопределено Тогда
		
		НастройкаЯчеек = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета,
			Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
		Если НастройкаЯчеек = Неопределено Тогда
			
			СтрокиТаблицы = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета,
				Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
			КолонкиТаблицы = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета,
				Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			Если СтрокиТаблицы = Неопределено И КолонкиТаблицы = Неопределено Тогда
				// это отчет без структуры
				Строка = СтрокаОтчета;
				Колонка = Неопределено;
			ИначеЕсли СтрокиТаблицы <> Неопределено Тогда
				Строка = СтрокаОтчета;
				Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
				Колонка = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			ИначеЕсли КолонкиТаблицы <> Неопределено Тогда
				Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Строка = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
				Колонка = СтрокаОтчета;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(КэшРеквизитов) = Тип("Соответствие") Тогда
				ТаблицаНастройки = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
					КэшРеквизитов,
					НастройкаЯчеек.ЭлементОтчета,
					"ЭлементыТаблицы"); // см. НовыйТаблицаЭлементов
			ИначеЕсли ТипЗнч(КэшРеквизитов) = Тип("ТаблицаЗначений") Тогда
				ТаблицаНастройки = ЗначениеРеквизитаЭлементаВидаБюджета(
					НастройкаЯчеек.ЭлементОтчета,
					"ЭлементыТаблицы",
					 КэшРеквизитов); // см. НовыйТаблицаЭлементов
			КонецЕсли;
			
			СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(СтрокаОтчета.ЭлементОтчета, "Элемент");
			Если СтрокаОпределенияЯчейки = Неопределено Тогда
				Родитель = СтрокаОтчета.Родитель;
				СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(Родитель.ЭлементОтчета, "Элемент");
			КонецЕсли;
			Таблица = ФинансоваяОтчетностьСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
			Строка = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Строка);
			Колонка = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Колонка);
			
		КонецЕсли;
		
	Иначе
		
		АдресТаблицыЭлементов = Неопределено; АдресЭлементовОтчета = Неопределено;
		ТаблицаЭлементов = Неопределено; ДеревоЭлементов = Неопределено;
		Если ПараметрыОпределения.Свойство("АдресТаблицыЭлементов", АдресТаблицыЭлементов) Тогда
			ТаблицаЭлементов = ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов); // см. НовыйТаблицаЭлементов
		КонецЕсли;
		Если ПараметрыОпределения.Свойство("АдресЭлементовОтчета", АдресЭлементовОтчета) Тогда
			ДеревоЭлементов = ПолучитьИзВременногоХранилища(АдресЭлементовОтчета);
		КонецЕсли;
		
		Если ТаблицаЭлементов = Неопределено Тогда
			
			ЭлементДерева = ДеревоЭлементов.Строки.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ЭлементДерева,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
			ИсточникПодчиненных = Неопределено;
			Если КорневойЭлемент <> Неопределено Тогда
				ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
					"ВидЭлемента",
					Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
				Колонка = ЭлементДерева;
				Строка = ИсточникПодчиненных;
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
				
				КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ЭлементДерева,
					Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Если КорневойЭлемент <> Неопределено Тогда
					ИсточникПодчиненных = ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент(КорневойЭлемент,
						"ВидЭлемента",
						Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
					Колонка = ИсточникПодчиненных;
					Строка = ЭлементДерева;
				КонецЕсли;
				
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
				
				Строка = ЭлементДерева;
				Колонка = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ЯчейкаМатрицы = ТаблицаЭлементов.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "Элемент");
			
			Строка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
			Колонка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из ДоступностьФильтров Цикл
		
		ИскомыйТип = КлючИЗначение.Ключ;
		
		ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
		Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		КонецЕсли;
		
		// в строках измерение не определено - проверим колонки
		Если ЕстьЯчейкиСНеопределеннымЭлементом И Колонка <> Неопределено Тогда
			
			ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
			Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, ЕстьЯчейкиСНеопределеннымЭлементом);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ДополнительныеПоля = СтрокаДерева.ДополнительныеПоля;
		Если ДополнительныеПоля.Количество() Тогда
			Возврат ДополнительныеПоля.НайтиСтроки(Новый Структура("ВОтдельнойКолонке", Истина)).Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПодчиненныеЭлементыВидаБюджета(ВидБюджета) Экспорт
	
	СКД = Справочники.ВидыБюджетов.ПолучитьМакет("ВсеПодчиненныеЭлементы");
	Компоновщик = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СКД);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Компоновщик, "ВидБюджета", ВидБюджета);
	Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Компоновщик);
	Результат.Индексы.Добавить("Родитель");
	
	Возврат Результат;
	
КонецФункции

Функция РассчитатьГлубинуУровней(СтрокиДерева, СУчетомДополнительныхПолей = Ложь, Знач Глубина = 1, ПредыдущийФлаг = Ложь) Экспорт
	
	Если Не ПредыдущийФлаг Тогда
		ФинальнаяГлубинаУровня = 1;
	Иначе
		ФинальнаяГлубинаУровня = Глубина;
	КонецЕсли;
	
	Результат = ФинальнаяГлубинаУровня;
	ПодчиненныеЭлементы = ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(СтрокиДерева);
	Для Каждого СтрокаДерева Из ПодчиненныеЭлементы Цикл
		
		Дополнение = 0;
		
		Если СтрокаДерева.ВыводитьВместеСРодительским Тогда
			Дополнение = 1;
		КонецЕсли;
		
		Если СУчетомДополнительныхПолей Тогда
			Дополнение = Дополнение + КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева);
			Если СтрокаДерева.ВыводитьВместеСРодительским И Не ПредыдущийФлаг Тогда
				// Дополнительные поля первого из объединенных элементов
				// не учтены в общем количестве колонок.
				Дополнение = Дополнение + КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева.Родитель);
			КонецЕсли;
		КонецЕсли;
		
		ГлубинаТекущегоУровня = ФинальнаяГлубинаУровня + Дополнение;
		
		Результат = Макс(Результат, ГлубинаТекущегоУровня);
		Результат = Макс(Результат, РассчитатьГлубинуУровней(СтрокаДерева, СУчетомДополнительныхПолей, ГлубинаТекущегоУровня, СтрокаДерева.ВыводитьВместеСРодительским));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает источники значений по виду бюджета
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// 		* ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		* Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		* Объект - Характеристика.РеквизитыЭлементовФинансовыхОтчетов, Строка -
// 		* ТипЗначенияРасчетногоПоказателя - Неопределено, Строка, Характеристика.РеквизитыЭлементовФинансовыхОтчетов -
// 		* ДобавляемыеЗначенияДокумента - Булево -
//
Функция ИсточникиЗначенийВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетовИсточникиЗначений.Ссылка КАК ЭлементОтчета,
		|	ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник,
		|	ВЫБОР
		|		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.СтатьяБюджетов)
		|			ТОГДА РеквизитыСтатья.Значение
		|		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.ПоказательБюджетов)
		|			ТОГДА РеквизитыПоказатель.Значение
		|		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.НефинансовыйПоказатель)
		|			ТОГДА РеквизитыНФП.Значение
		|		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.РедактируемоеЗначение)
		|			ТОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.НаименованиеДляПечати
		|	КОНЕЦ КАК Объект,
		|	ЕСТЬNULL(РеквизитыТипЗначенияРасчетногоПоказателя.Значение, НЕОПРЕДЕЛЕНО) КАК ТипЗначенияРасчетногоПоказателя,
		|	ЭлементыФинансовыхОтчетовИсточникиЗначений.ДобавляемыеЗначенияДокумента
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.ИсточникиЗначений КАК ЭлементыФинансовыхОтчетовИсточникиЗначений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыСтатья
		|		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыСтатья.Ссылка
		|			И (РеквизитыСтатья.Реквизит = &Реквизит_СтатьяБюджетов)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыПоказатель
		|		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыПоказатель.Ссылка
		|			И (РеквизитыПоказатель.Реквизит = &Реквизит_Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыНФП
		|		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыНФП.Ссылка
		|			И (РеквизитыНФП.Реквизит = &Реквизит_НФП)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыТипЗначенияРасчетногоПоказателя
		|		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыТипЗначенияРасчетногоПоказателя.Ссылка
		|			И (РеквизитыТипЗначенияРасчетногоПоказателя.Реквизит = &Реквизит_ТипЗначенияРасчетногоПоказателя)
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовИсточникиЗначений.Ссылка.Владелец = &ВидБюджета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.УстановитьПараметр("Реквизит_СтатьяБюджетов", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит_Показатель", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПоказательБюджетов);
	Запрос.УстановитьПараметр("Реквизит_НФП", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НефинансовыйПоказатель);
	Запрос.УстановитьПараметр("Реквизит_ТипЗначенияРасчетногоПоказателя", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ТипЗначенияПоказателя);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Индексы.Добавить("ЭлементОтчета");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПолучитьОписаниеИсточниковДанных

// Возвращает статус необходимости получения фактических данных / исполнения бюджета
//
// Параметры:
// 	Источник - Структура - Источник данных вида бюджета. содержит в числе:
// 		* Идентификатор - Число -
// 	РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - Режим формирования бюджетного отчета.
// 	Сценарий - СправочникСсылка.Сценарии - Сценарий (ФактическиеДанные или ИсполнениеБюджета), по которому проверяется необходимость получения данных.
// 	ДляВлияющихСтатейРасчетногоПоказателя - Булево - Если Истина, то метод вызывается для определения статуса влияющих на расчетный показатель статей.
// 				Значение по умолчанию Ложь.
//
// ВозвращаемоеЗначение:
// 	Строка - Статус необходимости получения данных:
// 				"Предполагается" - фактические данные должны быть получены по источнику.
// 				"НеПредполагается" - фактические данные должны не должны быть получены.
// 				"ОпределяетсяНастройкойОтчета" - задается отбором по сценарию в бюджетном отчете.
//
Функция ПоИсточникуПредположительноНужныФактическиеДанные(Источник, РежимФормирования, Сценарий, ДляВлияющихСтатейРасчетногоПоказателя = Ложь)
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	Если Источник.Объекты = Неопределено Тогда
		Возврат "НеПредполагается";
	КонецЕсли;
	
	Если Источник.ТипИсточника = ТипыИсточников.Остатки
	   И НЕ ДляВлияющихСтатейРасчетногоПоказателя Тогда
		Возврат "Предполагается";
	КонецЕсли;
	
	Если Источник.ТипИсточника = ТипыИсточников.Нефинансовый Тогда
		Возврат "Предполагается";
	КонецЕсли;
	
	Если Источник.ТипИсточника = ТипыИсточников.РедактируемоеЗначение Тогда
		Возврат "НеПредполагается";
	КонецЕсли;
	
	Если Источник.Идентификатор = "Документ" Тогда
		Возврат "НеПредполагается";
	КонецЕсли;
	
	ЗначенияОтбора = Новый Массив;
	
	Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, "Сценарий", ЗначенияОтбора) Тогда
		
		ЕстьОтборПоСценарию = ЗначенияОтбора.Количество() > 0;
		Если ЗначенияОтбора.Количество() = 1 Тогда
			Для Каждого ЗначениеОтбора Из ЗначенияОтбора Цикл
				
				Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					И ТипЗнч(ЗначениеОтбора.ПравоеЗначение) = Тип("Строка")
					И НРег(ЗначениеОтбора.ПравоеЗначение) = НРег("<заполнить_сценарий>")
					И РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
					
					// В виде бюджета для источника данных нет измерения с типом сценарий,
					// или есть измерение сценарий из оборотов регистра (тип измерения = ИзмерениеРегистра)
					
					Если Сценарий = Справочники.Сценарии.ФактическиеДанные Тогда
						Если Источник.ПолучениеФактаПоСтруктуреБюджета Тогда
							Возврат "Предполагается";
						КонецЕсли;
					ИначеЕсли Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
						Если Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета Тогда
							Возврат "Предполагается";
						КонецЕсли;
					КонецЕсли;
					
					Возврат "ОпределяетсяНастройкойОтчета";
					
				КонецЕсли;
				
				Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					И ТипЗнч(ЗначениеОтбора.ПравоеЗначение) = Тип("Строка")
					И НРег(ЗначениеОтбора.ПравоеЗначение) = НРег("<заполнить_сценарий>")
					И РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
					
					ЕстьОтборПоСценарию = Ложь;
					
				КонецЕсли;
				
				Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					И ЗначениеОтбора.ПравоеЗначение = Сценарий Тогда
					
					Возврат "Предполагается";
					
				КонецЕсли;
				
				Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
					И ЗначениеОтбора.ПравоеЗначение <> Сценарий Тогда
					
					Возврат "Предполагается";
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Если сложный отбор, то получим сценарий при помощи СКД.
		// Если указан отбор в группе, в группе из списка, то при смене родителя для предопределенных сценариев потребуется сброс кэша настроек.
		Если ЕстьОтборПоСценарию Тогда
			Если ТребуетсяСценарийПоУсловиюДополнительногоОтбораИсточникаДанных(Сценарий, Источник.ДополнительныйОтбор.Отбор) Тогда
				Возврат "Предполагается";
			Иначе
				Возврат "НеПредполагается";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Сценарий = Справочники.Сценарии.ФактическиеДанные Тогда
		Если Источник.ПолучениеФактаПоСтруктуреБюджета Тогда
			Возврат "Предполагается";
		ИначеЕсли Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат "ОпределяетсяНастройкойОтчета";
		КонецЕсли;
	ИначеЕсли Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
		Если Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета Тогда
			Возврат "Предполагается";
		ИначеЕсли Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат "ОпределяетсяНастройкойОтчета";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "НеПредполагается";
	
КонецФункции

Функция ВыражениеПериодаГруппировкиИсточникаДанных(ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Если СтруктураКолонок.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
		
		ТекстПоля = "ПериодПланирования";
		
		Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			
			ТекстПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ДОБАВИТЬКДАТЕ(%1, %2, %3)",
				"ПериодПланирования",
				ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(ПериодичностьСмещения),
				ПериодСмещения);
			
		КонецЕсли;
		
		Если МинимальнаяПериодичность = Перечисления.Периодичность.Неделя Тогда
			
			ТекстПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБОР
				|	КОГДА НАЧАЛОПЕРИОДА(%1, %2) < &НачалоПериода
				|		ТОГДА &НачалоПериода ИНАЧЕ НАЧАЛОПЕРИОДА(%1, %2)
				|КОНЕЦ",
				ТекстПоля,
				ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(МинимальнаяПериодичность));
			
		Иначе
			
			ТекстПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НАЧАЛОПЕРИОДА(%1, %2)",
				ТекстПоля,
				ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(МинимальнаяПериодичность));
			
		КонецЕсли;
		
	Иначе
		
		ТекстПоля = "Неопределено";
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ВыражениеГраницыПериодаИсточникаДанных(ТипИсточника, ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	ЭтоГраницаФактическихДанных = Ложь;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета,
		ДопРеквизиты.ПериодСмещения,
		КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета, 
			ДопРеквизиты.ПериодичностьСмещения,
			КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Если ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Нефинансовый Тогда
		Формула = "&" + ИмяПоля;
	Иначе
		
		Формула = ?(ИмяПоля = "НачалоПериода", "НижняяГраницаДанных", "ВерхняяГраницаДанных");
		Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты[Формула],
			КэшРеквизитов);
		
		Формула = НРег(Формула); // Подготовка формулы к поиску, чувствительному к регистру
		
		ПеременныеПериодов = БюджетнаяОтчетностьКлиентСервер.ПеременныеПериодовБюджетирования();
		ЭтоГраницаФактическихДанных = СтрНайти(Формула, НРег(ПеременныеПериодов.ГраницаФактДанных.Имя));
		
		Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.НачалоПериодаДанных.Имя), "&НачалоПериода");
		Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.КонецПериодаДанных.Имя), "&КонецПериода");
		Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.ГраницаФактДанных.Имя), "&ГраницаФактДанных");
		
		// для сопоставимости формул удалим вспомогательные пользовательские символы
		УдалитьИзФормулыЛишниеПробелы(Формула);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
		
		ЗнакСмещения = "-";
		
		Формула = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ДОБАВИТЬКДАТЕ(%1, %2, %3%4)",
			Формула,
			ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(ПериодичностьСмещения),
			ЗнакСмещения,
			ПериодСмещения);
		
	КонецЕсли;
	
	Если ИмяПоля = "КонецПериода" Тогда
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодПриведениеКОкончанию = "День";
		Иначе
			ПериодПриведениеКОкончанию = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(ПериодичностьСмещения);
		КонецЕсли;
		Если ЭтоГраницаФактическихДанных Тогда
			ПериодПриведениеКОкончанию = "День";
		КонецЕсли;
		Формула = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"КОНЕЦПЕРИОДА(%1, %2)",
			Формула,
			ПериодПриведениеКОкончанию);
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции

Процедура УдалитьИзФормулыЛишниеПробелы(Формула)
	
	// Одно и то же выражение периода в разных статьях может быть написано с различным форматированием строки формулы.
	// Чтобы при определении источников данных понимать, что это могут быть одно и то же выражение, приведем преобразования.
	
	Формула = СтрЗаменить(Формула, Символы.ПС, " ");
	Формула = СтрЗаменить(Формула, Символы.Таб, " ");
	Формула = СокрЛП(Формула);
	
	// Имена параметров заключаются в []. Внутри тегов замен не производим.
	ТегНачалаОперанда = "[";
	ТегОкончанияОперанда = "]";
	
	ОставшаясяЧастьФормулы = Формула;
	ЧастиФормулы = Новый Массив;
	
	НомерСимволаНачалаОперанда = СтрНайти(ОставшаясяЧастьФормулы, ТегНачалаОперанда);
	Пока НомерСимволаНачалаОперанда > 0 Цикл
		
		ЧастиФормулы.Добавить(Сред(ОставшаясяЧастьФормулы, 1, НомерСимволаНачалаОперанда - 1));
		
		ОставшаясяЧастьФормулы = Сред(ОставшаясяЧастьФормулы, НомерСимволаНачалаОперанда);
		НомерСимволаОкончанияОперанда = СтрНайти(ОставшаясяЧастьФормулы, ТегОкончанияОперанда);
		
		Если НомерСимволаОкончанияОперанда = 0 Тогда
			ЧастиФормулы.Добавить(ОставшаясяЧастьФормулы);
			ОставшаясяЧастьФормулы = "";
		Иначе
			ЧастиФормулы.Добавить(Сред(ОставшаясяЧастьФормулы, 1, НомерСимволаОкончанияОперанда));
			ОставшаясяЧастьФормулы = Сред(ОставшаясяЧастьФормулы, НомерСимволаОкончанияОперанда + 1);
		КонецЕсли;
		
		НомерСимволаНачалаОперанда = СтрНайти(ОставшаясяЧастьФормулы, ТегНачалаОперанда);
		
	КонецЦикла;
	Если НЕ ПустаяСтрока(ОставшаясяЧастьФормулы) Тогда
		ЧастиФормулы.Добавить(ОставшаясяЧастьФормулы);
	КонецЕсли;
	
	ЧастиФормулыПоСловам = Новый Массив;
	Для каждого ЧастьФормулы Из ЧастиФормулы Цикл
		ЧастьФормулы = СокрЛП(ЧастьФормулы);
		Если Лев(ЧастьФормулы, 1) = ТегНачалаОперанда Тогда
			ЧастиФормулыПоСловам.Добавить(ЧастьФормулы);
		Иначе
			ОператорыЧастиФормулы = СтрРазделить(ЧастьФормулы, " ", Ложь);
			Для каждого Оператор Из ОператорыЧастиФормулы Цикл
				ЧастиФормулыПоСловам.Добавить(Оператор);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Например, "ВЫБОР КОГДА(-1=1)  ТОГДА 1 ИНАЧЕ 2 КОНЕЦ/1"
	// Анализ частей формулы, собираем обратно формулу
	СимволыСлеваНеТребующиеРазделителя = Новый Массив;
	СимволыСлеваНеТребующиеРазделителя.Добавить("(");
	СимволыСлеваНеТребующиеРазделителя.Добавить(",");
	СимволыСлеваНеТребующиеРазделителя.Добавить("+");
	СимволыСлеваНеТребующиеРазделителя.Добавить("-");
	СимволыСлеваНеТребующиеРазделителя.Добавить("*");
	СимволыСлеваНеТребующиеРазделителя.Добавить("/");
	СимволыСлеваНеТребующиеРазделителя.Добавить("=");
	СимволыСлеваНеТребующиеРазделителя.Добавить("<");
	СимволыСлеваНеТребующиеРазделителя.Добавить(">");
	
	СимволыСправаНеТребующиеРазделителя = Новый Массив;
	СимволыСправаНеТребующиеРазделителя.Добавить(")");
	СимволыСправаНеТребующиеРазделителя.Добавить(",");
	СимволыСправаНеТребующиеРазделителя.Добавить("+");
	СимволыСправаНеТребующиеРазделителя.Добавить("-");
	СимволыСправаНеТребующиеРазделителя.Добавить("*");
	СимволыСправаНеТребующиеРазделителя.Добавить("/");
	СимволыСправаНеТребующиеРазделителя.Добавить("=");
	СимволыСправаНеТребующиеРазделителя.Добавить("<");
	СимволыСправаНеТребующиеРазделителя.Добавить(">");
	
	Формула = "";
	ПредыдудущаяЧастьФормулы = "";
	Для каждого ЧастьФормулы Из ЧастиФормулыПоСловам Цикл
		Если Формула = "" Тогда
			Формула = ЧастьФормулы;
		Иначе
			ТребуетсяРазделитель = Истина;
			Для Каждого СпецСимвол Из СимволыСлеваНеТребующиеРазделителя Цикл
				Если Прав(ПредыдудущаяЧастьФормулы, 1) = СпецСимвол Тогда
					ТребуетсяРазделитель = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТребуетсяРазделитель Тогда
				Для Каждого СпецСимвол Из СимволыСправаНеТребующиеРазделителя Цикл
					Если Лев(ЧастьФормулы, 1) = СпецСимвол Тогда
						ТребуетсяРазделитель = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Формула = Формула + ?(ТребуетсяРазделитель, " ", "") + ЧастьФормулы;
		КонецЕсли;
		ПредыдудущаяЧастьФормулы = ЧастьФормулы;
	КонецЦикла;
	
КонецПроцедуры

Процедура УбратьИзОтбораОпределенныеИзмерения(СтрокаОтчета, ДополнительныйОтбор, СтруктураКэша)
	
	Список = Новый СписокЗначений;
	ПараметрыОтборов = ПараметрыДоступностиФильтров(СтрокаОтчета, , СтруктураКэша);
	Для Каждого КлючИЗначение Из ПараметрыОтборов Цикл
		Если Не ПараметрыОтборов[КлючИЗначение.Ключ] Тогда
			НайтиОтборПоИмени(ДополнительныйОтбор, КлючИЗначение.Ключ, Список);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из Список Цикл
		Отбор = ДополнительныйОтбор.Отбор; // ОтборКомпоновкиДанных
		Отбор.Элементы.Удалить(ЭлементОтбора.Значение);
	КонецЦикла;
	
КонецПроцедуры

// функция-конструктор создания источника
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПривилегированныйРежим - Булево -
// * СписокЭлементов - Массив Из СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ПолучениеСценарияИзШапкиОтчета - Произвольный -
// * ПолучениеИсполненияБюджетаПоСтруктуреБюджета - Произвольный -
// * ПолучениеФактаПоСтруктуреБюджета - Произвольный -
// * ПолучениеПланаПоСтруктуреБюджета - Произвольный -
// * ЕстьЦелевыеПоказатели - Булево -
// * Идентификатор - Строка -
// * ПериодичностьСмещения - Произвольный -
// * ПериодСмещения - Произвольный -
// * ДополнительныйОтбор - НастройкиКомпоновкиДанных -
// * ВыражениеКонецПериода - Строка -
// * ВыражениеНачалоПериода - Строка -
// * ВыражениеПериодаГруппировки - Строка -
// * Объекты - Массив -
// * ТипИсточника - ПеречислениеСсылка.ТипыИсточниковДанныхБюджетирования -
Функция НовыйИсточник()
	
	СтруктураИсточника = Новый Структура;
	
	СтруктураИсточника.Вставить("ТипИсточника", Перечисления.ТипыИсточниковДанныхБюджетирования.ПустаяСсылка());
	СтруктураИсточника.Вставить("Объекты",      Новый Массив);
	СтруктураИсточника.Вставить("ВыражениеПериодаГруппировки", "");
	СтруктураИсточника.Вставить("ВыражениеНачалоПериода", "");
	СтруктураИсточника.Вставить("ВыражениеКонецПериода", "");
	СтруктураИсточника.Вставить("ДополнительныйОтбор", Новый НастройкиКомпоновкиДанных);
	СтруктураИсточника.Вставить("ПериодСмещения");
	СтруктураИсточника.Вставить("ПериодичностьСмещения");
	СтруктураИсточника.Вставить("Идентификатор", "");
	СтруктураИсточника.Вставить("ЕстьЦелевыеПоказатели", Ложь);
	СтруктураИсточника.Вставить("ПолучениеПланаПоСтруктуреБюджета");
	СтруктураИсточника.Вставить("ПолучениеФактаПоСтруктуреБюджета");
	СтруктураИсточника.Вставить("ПолучениеИсполненияБюджетаПоСтруктуреБюджета");
	СтруктураИсточника.Вставить("ПолучениеСценарияИзШапкиОтчета");
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив); // это массив из элементов отчета
	СтруктураИсточника.Вставить("ПривилегированныйРежим", Ложь);
	
	Возврат СтруктураИсточника;
	
КонецФункции


Процедура ДополнитьИсточник(СтруктураКэша, НайденныйИсточник, ОтобраннаяСтрока)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	НайденныйИсточник.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Если НайденныйИсточник.Объекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета, "ВидЭлемента");
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.СтатьяБюджетов,
			КэшДопРеквизитов);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.ПоказательБюджетов,
			КэшДопРеквизитов);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.НефинансовыйПоказатель,
			КэшДопРеквизитов);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		ОбъектУчета = ОтобраннаяСтрока.НаименованиеДляПечати;
	КонецЕсли;
	
	Если НайденныйИсточник.Объекты.Найти(ОбъектУчета) = Неопределено Тогда
		НайденныйИсточник.Объекты.Добавить(ОбъектУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ДополнительныеПараметрыИсточника)
	
	ИсточникДокумент = ДополнительныеПараметрыИсточника.ИсточникДокумент;
	ПолучениеПланаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеПланаПоСтруктуреБюджета;
	ПолучениеФактаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеФактаПоСтруктуреБюджета;
	ПолучениеИсполненияБюджетаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеИсполненияБюджетаПоСтруктуреБюджета;
	ПолучениеСценарияИзШапкиОтчета   = ДополнительныеПараметрыИсточника.ПолучениеСценарияИзШапкиОтчета;
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	
	СтруктураИсточника = НовыйИсточник();
	
	ВидЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета, "ВидЭлемента");
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.СтатьяБюджетов,
			КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.ПоказательБюджетов,
			КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета,
			ДопРеквизиты.НефинансовыйПоказатель,
			КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		ОбъектУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета, "НаименованиеДляПечати");
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	Иначе
		Массив = Неопределено;
	КонецЕсли;
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	Если ИсточникДокумент Тогда
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.РедактируемоеЗначение);
		Иначе
			СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.Факт);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.РедактируемоеЗначение);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.Обороты);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.Остатки);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		СтруктураИсточника.Вставить("ТипИсточника", ТипыИсточников.Нефинансовый);
	КонецЕсли;
	
	СтруктураИсточника.Вставить("Объекты", Массив);
	
	СтруктураИсточника.Вставить("ВыражениеПериодаГруппировки", ВыражениеПериодаГруппировкиИсточникаДанных(
		ЭлементОтчета,
		СтруктураКолонок,
		КэшДопРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериода", ВыражениеГраницыПериодаИсточникаДанных(
		СтруктураИсточника.ТипИсточника, 
		"НачалоПериода",
		ЭлементОтчета, 
		СтруктураКолонок, 
		КэшДопРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеКонецПериода", ВыражениеГраницыПериодаИсточникаДанных(
		СтруктураИсточника.ТипИсточника, 
		"КонецПериода",
		ЭлементОтчета, 
		СтруктураКолонок, 
		КэшДопРеквизитов));
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета, 
		ДопРеквизиты.ПериодСмещения,
		КэшДопРеквизитов);
	ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета, 
		ДопРеквизиты.ПериодичностьСмещения,
		КэшДопРеквизитов);
	СтруктураИсточника.Вставить("ПериодСмещения", ПериодСмещения);
	СтруктураИсточника.Вставить("ПериодичностьСмещения", ПериодичностьСмещения);
	
	ОтборЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета, "ДополнительныйОтбор").Получить();
	УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, СтруктураКэша);
	СтруктураИсточника.Вставить("ДополнительныйОтбор", ОтборЭлемента);
	
	Если ИсточникДокумент Тогда
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			СтруктураИсточника.Вставить("Идентификатор", "Документ_Значения");
		Иначе
			СтруктураИсточника.Вставить("Идентификатор", "Документ");
		КонецЕсли;
	Иначе
		СтруктураИсточника.Вставить("Идентификатор", "ИД_" + Источники.Количество());
	КонецЕсли;
	
	СтруктураИсточника.Вставить("ЕстьЦелевыеПоказатели", Ложь);
	Если СтруктураИсточника.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты Тогда
		СтатьяЭлементаОтчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
			ЭлементОтчета, 
			ДопРеквизиты.СтатьяБюджетов,
			КэшДопРеквизитов);
		Если ТипЗнч(СтатьяЭлементаОтчета) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
			СтруктураИсточника.Вставить("ЕстьЦелевыеПоказатели", Истина);
		КонецЕсли;
	КонецЕсли;
	СтруктураИсточника.Вставить("ПолучениеПланаПоСтруктуреБюджета", ПолучениеПланаПоСтруктуреБюджета);
	СтруктураИсточника.Вставить("ПолучениеФактаПоСтруктуреБюджета", ПолучениеФактаПоСтруктуреБюджета);
	СтруктураИсточника.Вставить("ПолучениеИсполненияБюджетаПоСтруктуреБюджета", ПолучениеИсполненияБюджетаПоСтруктуреБюджета);
	СтруктураИсточника.Вставить("ПолучениеСценарияИзШапкиОтчета",   ПолучениеСценарияИзШапкиОтчета);
	
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	СтруктураИсточника.Вставить("ПривилегированныйРежим", 
		?(ОтобраннаяСтрока.ПривилегированныйРежим = Неопределено, Ложь, ОтобраннаяСтрока.ПривилегированныйРежим));
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция СравнитьИсточники(СтруктураКэша, Источник, ОтобраннаяСтрока, СтруктураКолонок, ДополнительныеПараметрыИсточника)
	
	ИсточникДокумент = ДополнительныеПараметрыИсточника.ИсточникДокумент;
	ПолучениеПланаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеПланаПоСтруктуреБюджета;
	ПолучениеФактаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеФактаПоСтруктуреБюджета;
	ПолучениеИсполненияБюджетаПоСтруктуреБюджета = ДополнительныеПараметрыИсточника.ПолучениеИсполненияБюджетаПоСтруктуреБюджета;
	ПолучениеСценарияИзШапкиОтчета   = ДополнительныеПараметрыИсточника.ПолучениеСценарияИзШапкиОтчета;
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	КэшРеквизитов = СтруктураКэша.КэшРеквизитов;
	
	ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(ЭлементОтчета, "ВидЭлемента", КэшРеквизитов);
	
	Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ИсточникДокумент Тогда
			Если Источник.ТипИсточника <> ТипыИсточников.Факт Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Источник.ТипИсточника <> ТипыИсточников.Обороты Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтатьяЭлементаОтчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементОтчета,
			ДопРеквизиты.СтатьяБюджетов,
			КэшДопРеквизитов);
		
		Если ТипЗнч(СтатьяЭлементаОтчета) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
			ЕстьЦелевыеПоказатели = Истина;
		Иначе
			ЕстьЦелевыеПоказатели = Ложь;
		КонецЕсли;
		Если ЕстьЦелевыеПоказатели <> Источник.ЕстьЦелевыеПоказатели Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолучениеПланаПоСтруктуреБюджета <> Источник.ПолучениеПланаПоСтруктуреБюджета
			ИЛИ ПолучениеФактаПоСтруктуреБюджета <> Источник.ПолучениеФактаПоСтруктуреБюджета
			ИЛИ ПолучениеИсполненияБюджетаПоСтруктуреБюджета <> Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета
			ИЛИ ПолучениеСценарияИзШапкиОтчета <> Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Источник.Объекты = Неопределено Тогда
			// Не объединяем указанные статьи и все статьи, т.к. поведение различно
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		Если Источник.ТипИсточника <> ТипыИсточников.Обороты Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолучениеПланаПоСтруктуреБюджета <> Источник.ПолучениеПланаПоСтруктуреБюджета
			ИЛИ ПолучениеФактаПоСтруктуреБюджета <> Источник.ПолучениеФактаПоСтруктуреБюджета
			ИЛИ ПолучениеИсполненияБюджетаПоСтруктуреБюджета <> Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета
			ИЛИ ПолучениеСценарияИзШапкиОтчета <> Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ Источник.Объекты = Неопределено Тогда
			// Не объединяем указанные статьи и все статьи, т.к. поведение различно
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если Источник.ТипИсточника <> ТипыИсточников.Нефинансовый Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолучениеПланаПоСтруктуреБюджета <> Источник.ПолучениеПланаПоСтруктуреБюджета
			ИЛИ ПолучениеФактаПоСтруктуреБюджета <> Источник.ПолучениеФактаПоСтруктуреБюджета
			ИЛИ ПолучениеИсполненияБюджетаПоСтруктуреБюджета <> Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета
			ИЛИ ПолучениеСценарияИзШапкиОтчета <> Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		Если Источник.ТипИсточника <> ТипыИсточников.РедактируемоеЗначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		Если Источник.ТипИсточника <> ТипыИсточников.Остатки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПолучениеПланаПоСтруктуреБюджета <> Источник.ПолучениеПланаПоСтруктуреБюджета
			ИЛИ ПолучениеФактаПоСтруктуреБюджета <> Источник.ПолучениеФактаПоСтруктуреБюджета
			ИЛИ ПолучениеИсполненияБюджетаПоСтруктуреБюджета <> Источник.ПолучениеИсполненияБюджетаПоСтруктуреБюджета
			ИЛИ ПолучениеСценарияИзШапкиОтчета <> Источник.ПолучениеСценарияИзШапкиОтчета Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			Если Источник.Объекты = Неопределено Тогда
				// Не объединяем указанные показатели и все показатели, т.к. поведение различно
				Возврат Ложь;
			КонецЕсли;
		Иначе // ВсеПоказателиБюджетов
			Если НЕ Источник.Объекты = Неопределено Тогда
				// Не объединяем указанные показатели и все показатели, т.к. поведение различно
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неверный тип источника данных';
								|en = 'Incorrect data source type'");
		
	КонецЕсли;
	
	Если НЕ ИсточникДокумент Тогда
		
		ВыражениеПериодаГруппировки = ВыражениеПериодаГруппировкиИсточникаДанных(
			ЭлементОтчета,
			СтруктураКолонок,
			КэшДопРеквизитов);
		
		Если ВыражениеПериодаГруппировки <> Источник.ВыражениеПериодаГруппировки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеНачалоПериода = ВыражениеГраницыПериодаИсточникаДанных(
			Источник.ТипИсточника, 
			"НачалоПериода",
			ЭлементОтчета, 
			СтруктураКолонок, 
			КэшДопРеквизитов);
		
		Если ВыражениеНачалоПериода <> Источник.ВыражениеНачалоПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеКонецПериода = ВыражениеГраницыПериодаИсточникаДанных(
			Источник.ТипИсточника, 
			"КонецПериода",
			ЭлементОтчета, 
			СтруктураКолонок, 
			КэшДопРеквизитов);
		
		Если ВыражениеКонецПериода <> Источник.ВыражениеКонецПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ХранилищеОтбора = ЗначениеРеквизитаЭлементаВидаБюджета(
				ЭлементОтчета, "ДополнительныйОтбор", КэшРеквизитов); // ХранилищеЗначения
		ОтборЭлемента = ХранилищеОтбора.Получить(); // НастройкиКомпоновкиДанных, КоллекцияЭлементовОтбораКомпоновкиДанных - 
		УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, СтруктураКэша);
		
		Если Не СравнитьОтборы(Источник.ДополнительныйОтбор, ОтборЭлемента) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобраннаяСтрокаПривилегированныйРежим = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементОтчета,
		ДопРеквизиты.ПривилегированныйРежим,
		КэшДопРеквизитов);
	
	Если ОтобраннаяСтрокаПривилегированныйРежим = Неопределено Тогда
		ОтобраннаяСтрокаПривилегированныйРежим = Ложь;
	КонецЕсли;
	
	Если ОтобраннаяСтрокаПривилегированныйРежим <> Источник.ПривилегированныйРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ДополнительныеПараметрыИсточника)
	
	Для Каждого Источник Из Источники Цикл
		Если СравнитьИсточники(СтруктураКэша, Источник, ОтобраннаяСтрока, СтруктураКолонок, ДополнительныеПараметрыИсточника) Тогда
			Возврат Источник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ОписаниеСтруктурыЭлементовБюджета, ВидЭлемента, ПараметрыЗаполненияИсточников)
	
	СтруктураКолонок = ОписаниеСтруктурыЭлементовБюджета.СтруктураКолонок;
	ДеревоЭлементовБюджета = ОписаниеСтруктурыЭлементовБюджета.ДеревоЭлементовБюджета;
	
	РекурсивноеПолучениеИсточниковПоСтатьям = ПараметрыЗаполненияИсточников.РекурсивноеПолучениеИсточниковПоСтатьям;
	РежимФормирования = ПараметрыЗаполненияИсточников.РежимФормирования;
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	
	СценарииВСтруктуреДляЭлементов = ПризнакиЗаданияСценариевСтруктуройБюджета(ОтобранныеСтроки,
		ВидЭлемента,
		СтруктураКэша,
		ОписаниеСтруктурыЭлементовБюджета,
		ПараметрыЗаполненияИсточников);
	
	Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
					Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
					Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИсточникДокумент = Ложь;
		
		Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета)
			И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			
			Родитель = ОтобраннаяСтрока.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) 
				ИЛИ Не Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
				ИсточникДокумент = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета)
			И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			
			ИсточникДокумент = Истина;
			
		КонецЕсли;
		
		Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
			Родитель = ОтобраннаяСтрока.Родитель;
			Если ЗначениеЗаполнено(Родитель) 
				И Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
				И НЕ РекурсивноеПолучениеИсточниковПоСтатьям Тогда
				// Механизмы заполнения не должны участвовать в источниках.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметрыИсточника = Новый Структура;
		ДополнительныеПараметрыИсточника.Вставить("ИсточникДокумент", ИсточникДокумент);
		ДополнительныеПараметрыИсточника.Вставить("ПолучениеПланаПоСтруктуреБюджета", Ложь);
		ДополнительныеПараметрыИсточника.Вставить("ПолучениеФактаПоСтруктуреБюджета", Ложь);
		ДополнительныеПараметрыИсточника.Вставить("ПолучениеИсполненияБюджетаПоСтруктуреБюджета", Ложь);
		ДополнительныеПараметрыИсточника.Вставить("ПолучениеСценарияИзШапкиОтчета", Ложь);
		
		
		ЭлементИсточника = ЭлементИсточникаБюджета(ОтобраннаяСтрока, ВидЭлемента, СтруктураКэша);
		СценарииЭлемента = Неопределено;
		Если НЕ ЭлементИсточника = Неопределено Тогда
			СценарииЭлемента = СценарииВСтруктуреДляЭлементов.Получить(ЭлементИсточника);
		КонецЕсли;
		Если НЕ СценарииЭлемента = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыИсточника, СценарииЭлемента);
		КонецЕсли;
		
		НайденныйИсточник = НайтиИсточник(
			СтруктураКэша,
			Источники,
			ОтобраннаяСтрока,
			СтруктураКолонок,
			ДополнительныеПараметрыИсточника); // см. НовыйИсточник
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ДополнительныеПараметрыИсточника);
		Иначе
			ДополнитьИсточник(СтруктураКэша, НайденныйИсточник, ОтобраннаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементИсточникаБюджета(СтрокаВидаЭлемента, ВидЭлемента, СтруктураКэша)
	ЭлементИсточника = Неопределено;
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		// Ссылка справочника СтатьиБюджетов, если все статьи - пустая ссылка.
		ЭлементИсточника = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаВидаЭлемента.ЭлементОтчета,
			"СтатьяБюджетов",
			СтруктураКэша.КэшДопРеквизитов);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		// Ссылка справочника ПоказателиБюджетов, если все показатели - пустая ссылка.
		ЭлементИсточника = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаВидаЭлемента.ЭлементОтчета,
			"ПоказательБюджетов",
			СтруктураКэша.КэшДопРеквизитов);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		ЭлементИсточника = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаВидаЭлемента.ЭлементОтчета,
			"НефинансовыйПоказатель",
			СтруктураКэша.КэшДопРеквизитов);
	КонецЕсли;
	
	Возврат ЭлементИсточника;
КонецФункции

Функция ТребуетсяСценарийПоУсловиюДополнительногоОтбораИсточникаДанных(Сценарий, ОтборИсточника)
	
	СКДОтбораПоСценарию = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДОтбораПоСценарию,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "Запрос");
	НаборДанных.Запрос =
	"ВЫБРАТЬ
	|	Сценарии.Ссылка КАК Сценарий
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	Сценарии.Ссылка = &СценарийОбращенияКДаннымБД";
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанных, "Сценарий", "Сценарий", , Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	КомпоновкаДанныхСервер.ДобавитьПараметр(СКДОтбораПоСценарию, "СценарийОбращенияКДаннымБД", Новый ОписаниеТипов("СправочникСсылка.Сценарии"), Сценарий);
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДОтбораПоСценарию);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(ОтборИсточника, Настройки.Отбор, Истина,,, Истина);
	
	ГруппировкаНастроек = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаНастроек, "Сценарий");
	
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДОтбораПоСценарию, Настройки);
	ДанныеСценариевСОтбором = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных);
	
	Возврат ДанныеСценариевСОтбором.Количество() > 0;
	
КонецФункции

Функция ПризнакиЗаданияСценариевСтруктуройБюджета(СтрокиВидаЭлемента, ВидЭлемента, СтруктураКэша, ОписаниеСтруктурыЭлементовБюджета, ПараметрыЗаполненияИсточников)
	
	ПризнакиЗаданияСценариевПоИсточникам = Новый Соответствие;
	
	РекурсивноеПолучениеИсточниковПоСтатьям = ПараметрыЗаполненияИсточников.РекурсивноеПолучениеИсточниковПоСтатьям;
	ПроверятьНеобходимостьФактаПоСтруктуреОтчета = ПараметрыЗаполненияИсточников.ПроверятьНеобходимостьФактаПоСтруктуреОтчета;
	РежимФормирования = ПараметрыЗаполненияИсточников.РежимФормирования;
	
	Если НЕ ПроверятьНеобходимостьФактаПоСтруктуреОтчета Тогда
		Возврат ПризнакиЗаданияСценариевПоИсточникам;
	КонецЕсли;
	
	Если НЕ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		И НЕ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		И НЕ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		И НЕ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		И НЕ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		Возврат ПризнакиЗаданияСценариевПоИсточникам;
	КонецЕсли;
	
	Для Каждого ОтобраннаяСтрока Из СтрокиВидаЭлемента Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
					Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
					Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
			Родитель = ОтобраннаяСтрока.Родитель;
			Если ЗначениеЗаполнено(Родитель) 
				И Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
				И НЕ РекурсивноеПолучениеИсточниковПоСтатьям Тогда
				// Механизмы заполнения не должны участвовать в источниках.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементИсточника = ЭлементИсточникаБюджета(ОтобраннаяСтрока, ВидЭлемента, СтруктураКэша);
		
		ПризнакиЗаданияИсточника = ПризнакиЗаданияСценариевПоИсточникам.Получить(ЭлементИсточника);
		Если ПризнакиЗаданияИсточника = Неопределено Тогда
			ПризнакиЗаданияИсточника = Новый Структура;
			ПризнакиЗаданияИсточника.Вставить("ПолучениеПланаПоСтруктуреБюджета", Ложь); // Указан сценарий плановые данные.
			ПризнакиЗаданияИсточника.Вставить("ПолучениеФактаПоСтруктуреБюджета", Ложь); // Указан сценарий фактические данные.
			ПризнакиЗаданияИсточника.Вставить("ПолучениеИсполненияБюджетаПоСтруктуреБюджета", Ложь); // Указан сценарий исполнение бюджета.
			ПризнакиЗаданияИсточника.Вставить("ПолучениеСценарияИзШапкиОтчета", Ложь); // Указан сценарий, формируемый на основании оборотов и остатков (указывается в шапке отчета).
		КонецЕсли;
		
		ДополнитьПризнакиЗаданияСценариевСтруктуройБюджета(ПризнакиЗаданияИсточника,
			ОтобраннаяСтрока,
			ОписаниеСтруктурыЭлементовБюджета,
			СтруктураКэша);
		
		
		ПризнакиЗаданияСценариевПоИсточникам.Вставить(ЭлементИсточника, ПризнакиЗаданияИсточника);
		
	КонецЦикла;
	
	Возврат ПризнакиЗаданияСценариевПоИсточникам;
	
КонецФункции

// Дополняет структуру признаков указания сценариев для строк вида бюджета.
//
// Параметры:
// 	ПризнакиЗаданияИсточника - Структура - Структура признаков указания сценариев в бюджете:
// 	 *ПолучениеПланаПоСтруктуреБюджета - Булево - Указан сценарий плановые данные.
// 	 *ПолучениеФактаПоСтруктуреБюджета - Булево - Указан сценарий фактические данные.
// 	 *ПолучениеИсполненияБюджетаПоСтруктуреБюджета - Булево - Указан сценарий исполнение бюджета.
// 	 *ПолучениеСценарияИзШапкиОтчета - Булево - Указан сценарий, формируемый на основании оборотов и остатков (указывается в шапке отчета).
// 	ОтобраннаяСтрока - СтрокаДереваЗначений из ДеревоЗначений - 
// 	ОписаниеСтруктурыЭлементовБюджета - Структура - Структура описаний вида бюджета, по которым заполняются источники:
// 	 *СтруктураКолонок - Структура - Структура колонок вида бюджета.
// 	 *ДеревоЭлементовБюджета - Дерево - Дерево элементов вида бюджета.
// 	 *ТаблицаНастроек - Таблица значений - Используется для уточнения свойств источников сложной таблицы.
// 	                  - Неопределено. Если ПроверятьНеобходимостьФактаПоСтруктуреОтчета = Ложь, тогда значение = Неопределено.
// 	СтруктураКэша - Структура - Закэшированные данные.
//
Процедура ДополнитьПризнакиЗаданияСценариевСтруктуройБюджета(ПризнакиЗаданияИсточника, ОтобраннаяСтрока, ОписаниеСтруктурыЭлементовБюджета, СтруктураКэша)
	
	ТаблицаНастроек = ОписаниеСтруктурыЭлементовБюджета.ТаблицаНастроек; // см. НовыйТаблицаЭлементов
	КэшНастроекТаблицБюджета = ОписаниеСтруктурыЭлементовБюджета.КэшНастроекТаблицБюджета;
	
	ПараметрыЗаданияСценариев = Новый Структура;
	ПараметрыЗаданияСценариев.Вставить("ЕстьСценарийДляИсточника", Ложь);
	ПараметрыЗаданияСценариев.Вставить("ЕстьСценарийПлановыеДанные", Ложь);
	ПараметрыЗаданияСценариев.Вставить("ЕстьСценарийФактическиеДанные", Ложь);
	ПараметрыЗаданияСценариев.Вставить("ЕстьСценарийИсполнениеБюджета", Ложь);
	ПараметрыЗаданияСценариев.Вставить("ЕстьСценарийИзШапкиОтчета", Ложь);
	
	ПродолжатьАнализ = Истина;
	
	Если ПродолжатьАнализ Тогда
		КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
			Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
			
		Если КорневойЭлемент = Неопределено Тогда
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		КонецЕсли;
		
		Если КорневойЭлемент <> Неопределено Тогда
			// Сценарии могут быть заданы перпендикулярно показателям, т.е. если показатели в строках - то в колонках,
			// если показатели в колонках - то сценарии в строках.
			КолонкиПоОтношениюКПоказателю = Неопределено;
			Для каждого СтрокаДерева Из КорневойЭлемент.Строки Цикл
				Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки
					И КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
					
					КолонкиПоОтношениюКПоказателю = СтрокаДерева;
				ИначеЕсли СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки
					И КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках Тогда
					
					КолонкиПоОтношениюКПоказателю = СтрокаДерева;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
			   И НЕ КолонкиПоОтношениюКПоказателю = Неопределено Тогда
				// Получаем закэшированные флаги для колонок простой таблицы
				СохраненныеНастройкиТаблицыБюджета = КэшНастроекТаблицБюджета.Получить(КорневойЭлемент.ЭлементОтчета);
				Если НЕ СохраненныеНастройкиТаблицыБюджета = Неопределено Тогда
					СвойстваКолонокПростойТаблицы = СохраненныеНастройкиТаблицыБюджета.СвойстваКолонокПростойТаблицы;
					Для каждого КлючИЗначение Из ПараметрыЗаданияСценариев Цикл
						ФлагСценарияВКолонках = СвойстваКолонокПростойТаблицы[КлючИЗначение.Ключ];
						Если ФлагСценарияВКолонках = Истина Тогда
							ПараметрыЗаданияСценариев[КлючИЗначение.Ключ] = ФлагСценарияВКолонках;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЭлементыДереваСодержатСценарии(КолонкиПоОтношениюКПоказателю, ПараметрыЗаданияСценариев, "Вниз", СтруктураКэша);
					
					СвойстваКолонокПростойТаблицы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаданияСценариев);
					СохраненныеНастройкиТаблицыБюджета = Новый Структура;
					СохраненныеНастройкиТаблицыБюджета.Вставить("СвойстваКолонокПростойТаблицы", СвойстваКолонокПростойТаблицы);
					СохраненныеНастройкиТаблицыБюджета.Вставить("СтрокиДереваПоЭлементамСложнойТаблицы", Неопределено);
					КэшНастроекТаблицБюджета.Вставить(КорневойЭлемент.ЭлементОтчета, СохраненныеНастройкиТаблицыБюджета)
				КонецЕсли;
			КонецЕсли;
			Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника Тогда
				// Сценарии быть заданы или только в колонках или только в строках.
				// Если сценарии указаны вместе с показателем, то они могут быть или только выше, или только ниже текущего показателя.
				ЭлементыДереваСодержатСценарии(ОтобраннаяСтрока, ПараметрыЗаданияСценариев, "Вверх", СтруктураКэша);
			КонецЕсли;
			Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника Тогда
				// Сценарии быть заданы или только в колонках или только в строках.
				// Если сценарии указаны вместе с показателем, то они могут быть или только выше, или только ниже текущего показателя.
				Если ОтобраннаяСтрока.Родитель <> Неопределено
					И ОтобраннаяСтрока.Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
					СтрокаПроверки = ОтобраннаяСтрока.Родитель;
				Иначе
					СтрокаПроверки = ОтобраннаяСтрока;
				КонецЕсли;
				ЭлементыДереваСодержатСценарии(СтрокаПроверки, ПараметрыЗаданияСценариев, "Вниз", СтруктураКэша);
			КонецЕсли;
			
			ПродолжатьАнализ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжатьАнализ Тогда
		Если НЕ ТаблицаНастроек = Неопределено Тогда
			// Проверяем как сложную таблицу.
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
			
			Если НЕ КорневойЭлемент = Неопределено Тогда
				
				// Получаем закэшированные соответствие элементов таблицы строкам дерева сложной таблицы
				СохраненныеНастройкиТаблицыБюджета = КэшНастроекТаблицБюджета.Получить(КорневойЭлемент.ЭлементОтчета);
				Если СохраненныеНастройкиТаблицыБюджета = Неопределено Тогда
					СтрокиДереваПоЭлементамСложнойТаблицы = Новый ТаблицаЗначений;
					СтрокиДереваПоЭлементамСложнойТаблицы.Колонки.Добавить("ЭлементОтчета");
					СтрокиДереваПоЭлементамСложнойТаблицы.Колонки.Добавить("СтрокаДерева");
					ЗаполнитьСтрокиДереваПоЭлементамСложнойТаблицыРекурсивно(СтрокиДереваПоЭлементамСложнойТаблицы, КорневойЭлемент);
					СтрокиДереваПоЭлементамСложнойТаблицы.Индексы.Добавить("ЭлементОтчета");
					
					СохраненныеНастройкиТаблицыБюджета = Новый Структура;
					СохраненныеНастройкиТаблицыБюджета.Вставить("СвойстваКолонокПростойТаблицы", Неопределено);
					СохраненныеНастройкиТаблицыБюджета.Вставить("СтрокиДереваПоЭлементамСложнойТаблицы", СтрокиДереваПоЭлементамСложнойТаблицы);
					КэшНастроекТаблицБюджета.Вставить(КорневойЭлемент.ЭлементОтчета, СохраненныеНастройкиТаблицыБюджета)
				Иначе
					СтрокиДереваПоЭлементамСложнойТаблицы = СохраненныеНастройкиТаблицыБюджета.СтрокиДереваПоЭлементамСложнойТаблицы;
				КонецЕсли;
				
				ЯчейкаСложнойТаблицы = ТаблицаНастроек.Найти(ОтобраннаяСтрока.ЭлементОтчета, "Элемент");
				Если ЯчейкаСложнойТаблицы = Неопределено Тогда
					РодительЭлементаОтчета = ЗначениеРеквизитаЭлементаВидаБюджета(ОтобраннаяСтрока.ЭлементОтчета, "Родитель", СтруктураКэша.КэшРеквизитов);
					Если ЗначениеЗаполнено(РодительЭлементаОтчета) Тогда
						ЯчейкаСложнойТаблицы = ТаблицаНастроек.Найти(РодительЭлементаОтчета, "Элемент");
					КонецЕсли;
				КонецЕсли;
				Если ЯчейкаСложнойТаблицы = Неопределено Тогда
					КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
					ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить ячейку сложной таблицы по элементу отчета %1.';
							|en = 'Cannot get complex table cell by report item %1.'", КодЯзыка),
						ОписаниеСтруктурыЭлементовБюджета.ВидБюджета);
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Получение описания вида бюджета';
							|en = 'Receiving budget profile description'", КодЯзыка),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.ВидыБюджетов,
						ОписаниеСтруктурыЭлементовБюджета.ВидБюджета,
						ТекстИсключения);
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
				Если НЕ ЯчейкаСложнойТаблицы = Неопределено Тогда
					СтрокаДереваКолонка = Неопределено;
					СтрокаДереваСтрока  = Неопределено;
					СтрокаЭлементаОтчета = СтрокиДереваПоЭлементамСложнойТаблицы.Найти(ЯчейкаСложнойТаблицы.Колонка, "ЭлементОтчета");
					Если НЕ СтрокаЭлементаОтчета = Неопределено Тогда
						СтрокаДереваКолонка = СтрокаЭлементаОтчета.СтрокаДерева;
					КонецЕсли;
					СтрокаЭлементаОтчета = СтрокиДереваПоЭлементамСложнойТаблицы.Найти(ЯчейкаСложнойТаблицы.Строка,  "ЭлементОтчета");
					Если НЕ СтрокаЭлементаОтчета = Неопределено Тогда
						СтрокаДереваСтрока  = СтрокаЭлементаОтчета.СтрокаДерева;
					КонецЕсли;
					
					Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
						И НЕ СтрокаДереваКолонка = Неопределено Тогда
						ЭлементыДереваСодержатСценарии(СтрокаДереваКолонка, ПараметрыЗаданияСценариев, "Вверх", СтруктураКэша);
					КонецЕсли;
					Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
						И НЕ СтрокаДереваКолонка = Неопределено Тогда
						ЭлементыДереваСодержатСценарии(СтрокаДереваКолонка, ПараметрыЗаданияСценариев, "Вниз", СтруктураКэша);
					КонецЕсли;
					Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
						И НЕ СтрокаДереваСтрока = Неопределено Тогда
						ЭлементыДереваСодержатСценарии(СтрокаДереваСтрока, ПараметрыЗаданияСценариев, "Вверх", СтруктураКэша);
					КонецЕсли;
					Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
						И НЕ СтрокаДереваСтрока = Неопределено Тогда
						ЭлементыДереваСодержатСценарии(СтрокаДереваСтрока, ПараметрыЗаданияСценариев, "Вниз", СтруктураКэша);
					КонецЕсли;
					
					ПродолжатьАнализ = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПродолжатьАнализ Тогда
		// Показатель вне таблицы
		Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника Тогда
			ЭлементыДереваСодержатСценарии(ОтобраннаяСтрока, ПараметрыЗаданияСценариев, "Вверх", СтруктураКэша);
		КонецЕсли;
		
		Если НЕ ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника Тогда
			Если ОтобраннаяСтрока.Родитель <> Неопределено
				И ОтобраннаяСтрока.Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
				СтрокаПроверки = ОтобраннаяСтрока.Родитель;
			Иначе
				СтрокаПроверки = ОтобраннаяСтрока;
			КонецЕсли;
			ЭлементыДереваСодержатСценарии(СтрокаПроверки, ПараметрыЗаданияСценариев, "Вниз", СтруктураКэша);
		КонецЕсли;
	КонецЕсли;
	
	ПризнакиЗаданияИсточника.ПолучениеПланаПоСтруктуреБюджета =
		Макс(ПризнакиЗаданияИсточника.ПолучениеПланаПоСтруктуреБюджета, ПараметрыЗаданияСценариев.ЕстьСценарийПлановыеДанные);
	ПризнакиЗаданияИсточника.ПолучениеФактаПоСтруктуреБюджета =
		Макс(ПризнакиЗаданияИсточника.ПолучениеФактаПоСтруктуреБюджета, ПараметрыЗаданияСценариев.ЕстьСценарийФактическиеДанные);
	ПризнакиЗаданияИсточника.ПолучениеИсполненияБюджетаПоСтруктуреБюджета =
		Макс(ПризнакиЗаданияИсточника.ПолучениеИсполненияБюджетаПоСтруктуреБюджета, ПараметрыЗаданияСценариев.ЕстьСценарийИсполнениеБюджета);
	ПризнакиЗаданияИсточника.ПолучениеСценарияИзШапкиОтчета =
		Макс(ПризнакиЗаданияИсточника.ПолучениеСценарияИзШапкиОтчета, ПараметрыЗаданияСценариев.ЕстьСценарийИзШапкиОтчета);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДереваПоЭлементамСложнойТаблицыРекурсивно(СтрокиДереваПоЭлементамСложнойТаблицы, СтрокаДерева)
	Для каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		СтрокаНастройки = СтрокиДереваПоЭлементамСложнойТаблицы.Добавить();
		СтрокаНастройки.ЭлементОтчета = ВложеннаяСтрокаДерева.ЭлементОтчета;
		СтрокаНастройки.СтрокаДерева  = ВложеннаяСтрокаДерева;
		
		ЗаполнитьСтрокиДереваПоЭлементамСложнойТаблицыРекурсивно(СтрокиДереваПоЭлементамСложнойТаблицы, ВложеннаяСтрокаДерева);
	КонецЦикла;
КонецПроцедуры

Процедура ЭлементыДереваСодержатСценарии(Знач ЭлементДерева, ПараметрыЗаданияСценариев, Направление, СтруктураКэша)
	
	Если Направление = "Вниз" Тогда
		// Обход или колонок дерева ((или строк) - перпендикулярной структуры),
		// или сценарий может быть задан как измерение в простой таблице внутри показателя.
		Для каждого СтрокаДерева Из ЭлементДерева.Строки Цикл
			Если ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
				И ПараметрыЗаданияСценариев.ЕстьСценарийФактическиеДанные
				И ПараметрыЗаданияСценариев.ЕстьСценарийИсполнениеБюджета
				И ПараметрыЗаданияСценариев.ЕстьСценарийПлановыеДанные Тогда
				Возврат; // Завершаем рекурсивный обход, т.к. все искомые элементы найдены.
			КонецЕсли;
			Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
				И СтрокаДерева.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				
				ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника = Истина;
				Сценарий = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "Сценарий", СтруктураКэша.КэшДопРеквизитов);
				Если Сценарий = Справочники.Сценарии.ФактическиеДанные Тогда
					ПараметрыЗаданияСценариев.ЕстьСценарийФактическиеДанные = Истина;
				ИначеЕсли Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
					ПараметрыЗаданияСценариев.ЕстьСценарийИсполнениеБюджета = Истина;
				Иначе
					ПараметрыЗаданияСценариев.ЕстьСценарийПлановыеДанные = Истина;
				КонецЕсли;
				
			ИначеЕсли СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
				И СтрокаДерева.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра
				И ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаДерева.ЭлементОтчета, "ИмяИзмерения", СтруктураКэша.КэшДопРеквизитов) = "Сценарий" Тогда
				
				ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника = Истина;
				ПараметрыЗаданияСценариев.ЕстьСценарийИзШапкиОтчета = Истина;
				
			Иначе
				
				ЭлементыДереваСодержатСценарии(СтрокаДерева, ПараметрыЗаданияСценариев, Направление, СтруктураКэша);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе // "Вверх".
		
		Если ЭлементДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И ЭлементДерева.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			
			ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника = Истина;
			Сценарий = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементДерева.ЭлементОтчета, "Сценарий", СтруктураКэша.КэшДопРеквизитов);
			Если Сценарий = Справочники.Сценарии.ФактическиеДанные Тогда
				ПараметрыЗаданияСценариев.ЕстьСценарийФактическиеДанные = Истина;
			ИначеЕсли Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
				ПараметрыЗаданияСценариев.ЕстьСценарийИсполнениеБюджета = Истина;
			Иначе
				ПараметрыЗаданияСценариев.ЕстьСценарийПлановыеДанные = Истина;
			КонецЕсли;
		ИначеЕсли ЭлементДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И ЭлементДерева.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра
			И ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементДерева.ЭлементОтчета, "ИмяИзмерения", СтруктураКэша.КэшДопРеквизитов) = "Сценарий" Тогда
			
			ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника = Истина;
			ПараметрыЗаданияСценариев.ЕстьСценарийИзШапкиОтчета = Истина;
		КонецЕсли;
		
		// Сценарий может быть задан как измерение выше показателя.
		Если ПараметрыЗаданияСценариев.ЕстьСценарийДляИсточника
			И ПараметрыЗаданияСценариев.ЕстьСценарийФактическиеДанные
			И ПараметрыЗаданияСценариев.ЕстьСценарийИсполнениеБюджета
			И ПараметрыЗаданияСценариев.ЕстьСценарийПлановыеДанные Тогда
			Возврат; // Завершаем рекурсивный обход, т.к. все искомые элементы найдены.
		КонецЕсли;
		
		Родитель = ЭлементДерева.Родитель;
		Если Родитель = Неопределено
			ИЛИ Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки
			ИЛИ Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки
			ИЛИ Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
			Возврат; // Дошли до конца. Если показатель вне таблицы, то родитель может быть = Неопределено.
		КонецЕсли;
		
		ЭлементыДереваСодержатСценарии(Родитель, ПараметрыЗаданияСценариев, "Вверх", СтруктураКэша);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиПериодовГруппировок

Функция ВыражениеПравилаПериодаГруппировки(ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	Если ИмяПоля = "КонецПериода" Тогда
		Формула = "КонецПериодаГруппировки";
	Иначе
		Формула = "НачалоПериодаГруппировки";
	КонецЕсли;
	Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета,
		ДопРеквизиты[Формула],
		КэшРеквизитов);
	
	ПеременныеПериодов = БюджетнаяОтчетностьКлиентСервер.ПеременныеПериодовБюджетирования();
	ВыражениеЗаменыПериодаГруппировки = "ЛеваяТаблицаПериодов."
		+ ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период;
	
	
	// Переопределение выражения периода группировки. Начало периода данных и конец периода данных могут быть переопределены выражениями.
	// Данное переопределение должно учитываться при расчете периода группировки.
	ДопРеквизитНачалоПериода = ДопРеквизиты.НижняяГраницаДанных;
	ДопРеквизитКонецПериода = ДопРеквизиты.ВерхняяГраницаДанных;
	ВыражениеНачалаПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизитНачалоПериода,
																КэшРеквизитов);
	ВыражениеКонецПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизитКонецПериода,
																КэшРеквизитов);
	Формула = СтрЗаменить(НРег(Формула), НРег(ПеременныеПериодов.НачалоПериодаДанных.Имя), ВыражениеНачалаПериода);
	Формула = СтрЗаменить(НРег(Формула), НРег(ПеременныеПериодов.КонецПериодаДанных.Имя), ВыражениеКонецПериода);
	
	
	Формула = СтрЗаменить(НРег(Формула), НРег(ПеременныеПериодов.НачалоПериодаДанных.Имя), "&НачалоПериода");
	Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.КонецПериодаДанных.Имя), "&КонецПериода");
	Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.ГраницаФактДанных.Имя),  "&ГраницаФактДанных");
	Формула = СтрЗаменить(Формула, НРег(ПеременныеПериодов.ПериодГруппировки.Имя),  ВыражениеЗаменыПериодаГруппировки);
	
	// для сопоставимости формул удалим вспомогательные пользовательские символы
	УдалитьИзФормулыЛишниеПробелы(Формула);
	
	Возврат Формула;
	
КонецФункции

Функция СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ВыражениеНачалоПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"НачалоПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеНачалоПериодаГруппировки <> Источник.ВыражениеНачалоПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыражениеКонецПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"КонецПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеКонецПериодаГруппировки <> Источник.ВыражениеКонецПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Конструктор структуры источника периода группировки
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * СписокЭлементов - Массив -
// * Идентификатор - Строка -
// * ВыражениеКонецПериодаГруппировки - Строка -
// * ВыражениеНачалоПериодаГруппировки - Строка -
Функция НовыйИсточникПериодаГруппировки()
	
	СтруктураИсточника = Новый Структура;
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериодаГруппировки", "");
	СтруктураИсточника.Вставить("ВыражениеКонецПериодаГруппировки",  "");
	СтруктураИсточника.Вставить("Идентификатор", "");
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	
	Возврат СтруктураИсточника;
	
КонецФункции

Процедура ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	СтруктураИсточника = НовыйИсточникПериодаГруппировки();
	
	СтруктураИсточника.ВыражениеНачалоПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																		"НачалоПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов);
	
	СтруктураИсточника.ВыражениеКонецПериодаГруппировки  = ВыражениеПравилаПериодаГруппировки(
																		"КонецПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов);
																	
	СтруктураИсточника.Идентификатор = "ИД_" + Источники.Количество();
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция НайтиПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	Для Каждого Источник Из Источники Цикл
		Если СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок) Тогда
			Возврат Источник; // см. НовыйИсточник
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента)
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьСервер.КорневойЭлемент(ОтобраннаяСтрока,
				Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйИсточник = НайтиПравилоПериодаГруппировки(
			КэшРеквизитов,
			Источники,
			ОтобраннаяСтрока,
			СтруктураКолонок); // см. НовыйИсточникПериодаГруппировки
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок);
		Иначе
			НайденныйИсточник.СписокЭлементов.Добавить(ОтобраннаяСтрока.ЭлементОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСтруктурыЯчеекБюджетногоОтчета


// Возвращает таблицу источников значений
// 
// Параметры:
// 	ЯчейкаСтруктурыЯчеек - СтрокаТаблицыЗначений - Строка таблицы СтруктураЯчеек.
// 	ИмяИзмерения - Строка - Имя измерения.
// Возвращаемое значение:
// 	Массив из Структура - массив структур со свойствами:
// 	 *Источник - Строка - Идентификатор источника.
// 	 *Объект - СправочникСсылка.СтатьиБюджетов - 
// 				- СправочникСсылка.ПоказателиБюджетов - 
// 				- СправочникСсылка.НефинансовыеПоказателиБюджетов - Источник данных.
Функция ИсточникиЗначенийИзЯчейкиСтруктурыЯчеекПоИмениИзмерения(ЯчейкаСтруктурыЯчеек, ИмяИзмерения)
	ИсточникиЗначений = ЯчейкаСтруктурыЯчеек["Источник" + ИмяИзмерения];
	Возврат ИсточникиЗначений;
КонецФункции

// Возвращает структуру таблиц источников измерений НФП
// 
// Параметры:
// 	СтруктураЯчеек - ТаблицаЗначений - 
// 	МассивКолонокИзмерений - Массив -
// 	ИсточникиДанных - Массив Из см. НовыйИсточник -
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов -
// Возвращаемое значение:
// 	Структура - Описание:
// * ТаблицаЗаполненияИзмеренийНФП - Неопределено, ТаблицаЗначений -
// * ТаблицаОтбораИзмеренийНФП - Неопределено, ТаблицаЗначений -
Функция ЗаполнитьТаблицуИсточниковИзмеренийНФП(СтруктураЯчеек, МассивКолонокИзмерений, ИсточникиДанных, ВидБюджета)
	
	СписокНФП = СтруктураЯчеек.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель));
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если Не СписокНФП.Количество() Тогда
		
		Возврат Новый Структура("ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТестВидовАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТестВидовАналитик = ТестВидовАналитик + ?(ТестВидовАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НефинансовыеПоказателиБюджетов.ВидАналитики%1 КАК ВидАналитики%1",
				НомерАналитики);
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение
	|ПОМЕСТИТЬ НФП
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|ГДЕ
	|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка.Владелец = &Владелец
	|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НефинансовыеПоказателиБюджетов.Ссылка КАК Ссылка,
	|	&ТестВидовАналитик,
	|	НефинансовыеПоказателиБюджетов.ПоОрганизациям КАК ПоОрганизациям,
	|	НефинансовыеПоказателиБюджетов.ПоПодразделениям КАК ПоПодразделениям,
	|	НефинансовыеПоказателиБюджетов.ПоСценариям КАК ПоСценариям
	|ИЗ
	|	НФП КАК НФП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
	|		ПО НФП.Значение = НефинансовыеПоказателиБюджетов.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТестВидовАналитик", ТестВидовАналитик);
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НефинансовыйПоказатель);
	КэшРеквизитов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаполненияИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("ИмяИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("АдресИсточникаЗаполненияЗначений", Новый ОписаниеТипов("Строка"));
	СтрокаКолонок = "НефинансовыйПоказатель, ИмяИзмерения, АдресИсточникаЗаполненияЗначений";
	СтруктураПоискаЗаполнения = Новый Структура(СтрокаКолонок);
	ТаблицаЗаполненияИзмеренийНФП.Индексы.Добавить(СтрокаКолонок);
	
	ТаблицаОтбораИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("ИмяИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("АдресОтбораЗаполненияЗначений", Новый ОписаниеТипов("Строка"));
	СтрокаКолонок = "НефинансовыйПоказатель, ИмяИзмерения, АдресОтбораЗаполненияЗначений";
	СтруктураПоискаОтбора = Новый Структура(СтрокаКолонок);
	ТаблицаОтбораИзмеренийНФП.Индексы.Добавить(СтрокаКолонок);
	
	МассивИсточников = Новый Массив;
	Для Каждого Источник Из ИсточникиДанных Цикл
		МассивИсточников.Добавить(Источник.Идентификатор);
	КонецЦикла;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для Каждого Ячейка Из СписокНФП Цикл
		РеквизитыНФП = КэшРеквизитов.Найти(Ячейка.НефинансовыйПоказатель, "Ссылка");
		Для Каждого Измерение Из МассивКолонокИзмерений Цикл
			НужноДополнение = Истина;
			Если Измерение = "Организация" Тогда
				Если РеквизитыНФП.ПоОрганизациям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			ИначеЕсли Измерение = "Подразделение" Тогда
				Если РеквизитыНФП.ПоПодразделениям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			ИначеЕсли Измерение = "Сценарий" Тогда
				Если РеквизитыНФП.ПоСценариям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
				ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыНФП["ВидАналитики" + Сч]);
				Если ИмяПоля = Измерение Тогда
					НужноДополнение = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИсточникиЗначений = ИсточникиЗначенийИзЯчейкиСтруктурыЯчеекПоИмениИзмерения(Ячейка, Измерение);
			Если ЗначениеЗаполнено(ИсточникиЗначений) Тогда
				Если НужноДополнение Тогда
					Для Каждого ИсточникЗначения Из ИсточникиЗначений Цикл
						СтруктураПоискаЗаполнения.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
						СтруктураПоискаЗаполнения.ИмяИзмерения = Измерение;
						СтруктураПоискаЗаполнения.АдресИсточникаЗаполненияЗначений = ИсточникЗначения.Источник;
						Если Не ТаблицаЗаполненияИзмеренийНФП.НайтиСтроки(СтруктураПоискаЗаполнения).Количество() Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаЗаполненияИзмеренийНФП.Добавить(), СтруктураПоискаЗаполнения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СписокИсточников = Новый Массив;
					Для Каждого ИсточникЗначения Из ИсточникиЗначений Цикл
						СписокИсточников.Добавить(ИсточникЗначения.Источник);
					КонецЦикла;
					Если Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(МассивИсточников, СписокИсточников) Тогда
						Для Каждого ИсточникЗначения Из ИсточникиЗначений Цикл
							СтруктураПоискаОтбора.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
							СтруктураПоискаОтбора.ИмяИзмерения = Измерение;
							СтруктураПоискаОтбора.АдресОтбораЗаполненияЗначений = ИсточникЗначения.Источник;
							Если Не ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоискаОтбора).Количество() Тогда
								ЗаполнитьЗначенияСвойств(ТаблицаОтбораИзмеренийНФП.Добавить(), СтруктураПоискаОтбора);
							КонецЕсли;
						КонецЦикла;
					Иначе
						СтруктураПоискаОтбора.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
						СтруктураПоискаОтбора.ИмяИзмерения = Измерение;
						СтруктураПоискаОтбора.АдресОтбораЗаполненияЗначений = "";
						Если Не ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоискаОтбора).Количество() Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаОтбораИзмеренийНФП.Добавить(), СтруктураПоискаОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КолонкиОбработки = "ИмяИзмерения, НефинансовыйПоказатель";
	Копия = ТаблицаОтбораИзмеренийНФП.Скопировать(, КолонкиОбработки);
	Копия.Свернуть(КолонкиОбработки);
	ТаблицаОтбораИзмеренийНФП.Индексы.Добавить(КолонкиОбработки);
	СтруктураПоиска = Новый Структура(КолонкиОбработки);
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаОтбора Из Копия Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОтбора);
		НайденныеСтроки = ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.АдресОтбораЗаполненияЗначений = "" Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНаУдаление, НайденныеСтроки);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивНаУдаление Цикл
		ТаблицаОтбораИзмеренийНФП.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП", ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП);
	
КонецФункции

Функция ДеревоКонечныхЭлементов()
	
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Ссылка");
	Результат.Колонки.Добавить("ВидЭлемента");
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьСтрокуВДеревоКонечныхЭлементов(Результат, СтрокаДерева)
	
	НоваяСтрока = Результат.Строки.Добавить();
	НоваяСтрока.Ссылка = СтрокаДерева.ЭлементОтчета;
	НоваяСтрока.ВидЭлемента = СтрокаДерева.ВидЭлемента;
	
	Возврат НоваяСтрока;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ДеревоЭлементов - см. ДеревоЭлементовБюджета
// 	ЭлементРодитель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	ВыводитьСкрытыеКолонкиДерева - Булево -
// Возвращаемое значение:
// 	Структура - структура строк, которые состоят из ДеревоЭлементовБюджета и колонки "Ссылка", а также колонки, содержащие колонку "ссылка":
// * Строки - ДеревоЗначений - состоит из колонок:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// 		** Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * Колонки - ДеревоЗначений - состоит из колонок:
// 		** Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
//
Функция ПолучитьКонечныеЭлементы(ДеревоЭлементов, ЭлементРодитель, ВыводитьСкрытыеКолонкиДерева)
	
	Если ЭлементРодитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка() Тогда
		Строки = ПолучитьКонечныеЭлементыДерева(ДеревоЭлементов, Истина);
		Колонки = Новый ДеревоЗначений;
		Колонки.Колонки.Добавить("Ссылка");
		Колонки.Строки.Добавить().Ссылка = ЭлементРодитель;
	Иначе
		Шапка = ДеревоЭлементов.Строки.Найти(ЭлементРодитель, "ЭлементОтчета");
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки, "ВидЭлемента");
		Строки = ПолучитьКонечныеЭлементыДерева(Элемент, Истина);
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки, "ВидЭлемента");
		Колонки = ПолучитьКонечныеЭлементыДерева(Элемент, ВыводитьСкрытыеКолонкиДерева);
		Если Не ВыводитьСкрытыеКолонкиДерева Тогда
			ДеревоКолонок = ДеревоКонечныхЭлементов();
			Для Каждого Колонка Из Колонки Цикл
				ДобавитьСтрокуВДеревоКонечныхЭлементов(ДеревоКолонок, Колонка);
			КонецЦикла;
			Колонки = ДеревоКолонок;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Строки, Колонки", Строки, Колонки);
	
КонецФункции

Процедура ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Знач Элемент)
	
	РежимФормирования = Параметры.РежимФормирования;
	ИсточникиДанных = Параметры.ИсточникиДанных;
	КэшИсточникиЗначений = Параметры.ИсточникиЗначений;
	КэшРеквизитов = Параметры.КэшРеквизитов;
	КэшДопРеквизитов = Параметры.КэшДопРеквизитов;
	
	Пока ЗначениеЗаполнено(Элемент) Цикл
		ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
		Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НоваяСтрока.НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "НефинансовыйПоказатель", КэшДопРеквизитов);
			НоваяСтрока.ФлагНефинансовыйПоказатель = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизитов);
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Организация", КэшДопРеквизитов);
				НоваяСтрока.Организация = Значение;
				НоваяСтрока.ФлагОрганизация = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Подразделение", КэшДопРеквизитов);
				НоваяСтрока.Подразделение = Значение;
				НоваяСтрока.ФлагПодразделение = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Сценарий", КэшДопРеквизитов);
				НоваяСтрока.Сценарий = Значение;
				НоваяСтрока.ФлагСценарий = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Валюта", КэшДопРеквизитов);
				НоваяСтрока.Валюта = Значение;
				НоваяСтрока.ФлагВалюта = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				
				ЭтоАналитикаПрочее = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЭтоАналитикаПрочее", КэшДопРеквизитов);
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "РазрешитьРедактирование", КэшДопРеквизитов);
				ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				Значение = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ЗначениеАналитики", КэшРеквизитов);
				
				Если ЭтоАналитикаПрочее Тогда
					НоваяСтрока[ИмяАналитики] = Неопределено;
					Если РазрешитьРедактирование = Истина Тогда
						
						Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение
							ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
							
							Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
								НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
							Иначе
								НоваяСтрока["Флаг" + ИмяАналитики] = "документ";
							КонецЕсли;
							
							ИсточникВсеЭлементы = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Элемент, "ИсточникВсеЭлементы");
							
							Если НЕ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение 
								ИЛИ ИсточникВсеЭлементы = Неопределено ИЛИ Не ИсточникВсеЭлементы Тогда
								
								Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
									СтруктураПоиска = Новый Структура("ЭлементОтчета, ДобавляемыеЗначенияДокумента", Элемент, Ложь);
								Иначе
									СтруктураПоиска = Новый Структура("ЭлементОтчета, ДобавляемыеЗначенияДокумента", Элемент, Истина);
								КонецЕсли;
								НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточниковЭлементаОтчета(Элемент,
									Параметры, СтруктураПоиска);
							Иначе
								МассивИсточников = Новый Массив;
								СвойстваИсточника = Новый Структура;
								СвойстваИсточника.Вставить("Источник", "ВсеЭлементы");
								СвойстваИсточника.Вставить("Объект",   Неопределено);
								СвойстваИсточника.Вставить("ТипЗначенияРасчетногоПоказателя", Неопределено);
								МассивИсточников.Добавить(СвойстваИсточника);
								НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточников;
							КонецЕсли;
							
						ИначеЕсли РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
							
							НоваяСтрока["Флаг" + ИмяАналитики] = "документ";
							
						Иначе
							
							НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
							
							ИсточникВсеЭлементы = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Элемент, "ИсточникВсеЭлементы");
							
							Если ИсточникВсеЭлементы = Неопределено ИЛИ НЕ ИсточникВсеЭлементы Тогда
								СтруктураПоиска = Новый Структура("ЭлементОтчета, ДобавляемыеЗначенияДокумента", Элемент, Истина);
								НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточниковЭлементаОтчета(Элемент,
									Параметры, СтруктураПоиска);
							Иначе
								МассивИсточников = Новый Массив;
								СвойстваИсточника = Новый Структура;
								СвойстваИсточника.Вставить("Источник", "ВсеЭлементы");
								СвойстваИсточника.Вставить("Объект",   Неопределено);
								СвойстваИсточника.Вставить("ТипЗначенияРасчетногоПоказателя", Неопределено);
								МассивИсточников.Добавить(СвойстваИсточника);
								НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточников;
							КонецЕсли;
							
						КонецЕсли;
					Иначе
						
						НоваяСтрока["Флаг" + ИмяАналитики] = "прочие";
						
					КонецЕсли;
				Иначе
					НоваяСтрока[ИмяАналитики] = Значение;
					НоваяСтрока["Флаг" + ИмяАналитики] = "отобрать";
				КонецЕсли;
				НоваяСтрока["Родитель" + ИмяАналитики] = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
				
				ИсточникВсеЭлементы = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Элемент, "ИсточникВсеЭлементы");
				
				Если ИсточникВсеЭлементы = Неопределено ИЛИ Не ИсточникВсеЭлементы Тогда
					НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточниковЭлементаОтчета(Элемент, Параметры);
				Иначе
					МассивИсточников = Новый Массив;
					СвойстваИсточника = Новый Структура;
					СвойстваИсточника.Вставить("Источник", "ВсеЭлементы");
					СвойстваИсточника.Вставить("Объект",   Неопределено);
					СвойстваИсточника.Вставить("ТипЗначенияРасчетногоПоказателя", Неопределено);
					МассивИсточников.Добавить(СвойстваИсточника);
					НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточников;
				КонецЕсли;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизитов);
				НоваяСтрока["Флаг" + ИмяИзмерения] = "заполнить";
				НоваяСтрока["Источник" + ИмяИзмерения] = МассивИсточниковЭлементаОтчета(Элемент, Параметры);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				
				Период = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизитов);
				СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Период);
				НоваяСтрока[СтрокиПериода.ФлагПериод] = "заполнить";

				ЗначениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЗначениеПериода", КэшДопРеквизитов);
				Если ЗначениеПериода = Неопределено Тогда
					НоваяСтрока[СтрокиПериода.ВыражениеПериода] = -1;
				Иначе
					НоваяСтрока[СтрокиПериода.ВыражениеПериода] = ЗначениеПериода;
				КонецЕсли;
				
				УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
				НайденныйИндекс = УпорядоченныеПериодичности.Найти(Период);
				
				Для Сч = НайденныйИндекс + 1 По УпорядоченныеПериодичности.ВГраница() Цикл
					Период = УпорядоченныеПериодичности[Сч];
					СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Период);
					Если НоваяСтрока.Владелец().Колонки.Найти(СтрокиПериода.Период) <> Неопределено Тогда
						Если НоваяСтрока[СтрокиПериода.ФлагПериод] <> "заполнить" Тогда
							НоваяСтрока[СтрокиПериода.ФлагПериод] = "заполнить";
							НоваяСтрока[СтрокиПериода.ВыражениеПериода] = -1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
	КонецЦикла;
	
КонецПроцедуры

Функция МассивИсточниковЭлементаОтчета(ЭлементОтчета, Параметры, СтруктураПоиска = Неопределено)

	КэшИсточникиДанныхЭлементовОтчета = Параметры.КэшИсточникиДанныхЭлементовОтчета;
	Если КэшИсточникиДанныхЭлементовОтчета.Получить(ЭлементОтчета) <> Неопределено Тогда
		Возврат ОбщегоНазначения.СкопироватьРекурсивно(КэшИсточникиДанныхЭлементовОтчета[ЭлементОтчета]);
	КонецЕсли;

	КэшИсточникиЗначений = Параметры.ИсточникиЗначений;
	ИсточникиДанных = Параметры.ИсточникиДанных;
	
	МассивИсточников = Новый Массив;
	Если СтруктураПоиска = Неопределено Тогда
		СтруктураПоиска = Новый Структура("ЭлементОтчета", ЭлементОтчета);
	КонецЕсли;
	ИсточникиЗначений = КэшИсточникиЗначений.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ИсточникЗначения Из ИсточникиЗначений Цикл
		Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
			Если ИсточникДанных.СписокЭлементов.Найти(ИсточникЗначения.Источник) <> Неопределено Тогда
				СвойстваИсточника = Новый Структура;
				СвойстваИсточника.Вставить("Источник", ИсточникДанных.Идентификатор);
				СвойстваИсточника.Вставить("Объект",   ИсточникЗначения.Объект);
				СвойстваИсточника.Вставить("ТипЗначенияРасчетногоПоказателя", ИсточникЗначения.ТипЗначенияРасчетногоПоказателя);
				МассивИсточников.Добавить(СвойстваИсточника);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	КэшИсточникиДанныхЭлементовОтчета.Вставить(ЭлементОтчета, ОбщегоНазначения.СкопироватьРекурсивно(МассивИсточников));
	
	Возврат МассивИсточников;
	
КонецФункции

Процедура ЗаполнитьСтруктуруЯчеек(Параметры, Колонки)
	
	Для Каждого Колонка Из Колонки.Строки Цикл
		ДеревоСтрок = Параметры.ДеревоСтрок;
		ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, ДеревоСтрок, Колонка.Ссылка);
		ЗаполнитьСтруктуруЯчеек(Параметры, Колонка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектВалютногоУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыВалютногоУчета = КэшРеквизитовСтатей[ОбъектВалютногоУчета];
	Если РеквизитыВалютногоУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеВалюты, УчитыватьПоВалюте, 
								|АналитикаВалюты, ВалютаОпределяетсяАналитикой", "АналитикаВалюты.ЗаполнениеВалюты");
		
		РеквизитыВалютногоУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектВалютногоУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектВалютногоУчета, РеквизитыВалютногоУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.УчитыватьПоВалюте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.ВалютаОпределяетсяАналитикой Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыВалютногоУчета.АналитикаВалюты);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыВалютногоУчета.АналитикаЗаполнениеВалюты];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Функция ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыУчета = КэшРеквизитовСтатей[ОбъектУчета];
	Если РеквизитыУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеЕдиницы, УчитыватьПоКоличеству, 
									|АналитикаЕдиницыИзмерения, ЕдиницаИзмеренияОпределяетсяАналитикой,
									|ЕдиницаИзмерения", 
									"АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения");
		
		РеквизитыУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектУчета, РеквизитыУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыУчета.УчитыватьПоКоличеству Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыУчета.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Возврат РеквизитыУчета.ЕдиницаИзмерения;
	КонецЕсли;
	
	ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыУчета.АналитикаЕдиницыИзмерения);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыУчета.АналитикаЗаполнениеЕдиницы];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Процедура ЗаполнитьПризнакиСуммаКоличествоФормулы(ВидБюджета, СтруктураЯчеек)
	
	СКД = Справочники.ВидыБюджетов.ПолучитьМакет("ВсеПодчиненныеЭлементы");
	Компоновщик = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СКД);
	ФинансоваяОтчетностьСервер.НовыйОтбор(Компоновщик.Настройки.Отбор, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Компоновщик, "ВидБюджета", ВидБюджета);
	Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Компоновщик);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРодительПодчиненный.Родитель,
	|	ТаблицаРодительПодчиненный.Ссылка
	|ПОМЕСТИТЬ ПодчиненныеЭлементы
	|ИЗ
	|	&ПодчиненныеЭлементы КАК ТаблицаРодительПодчиненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СтруктураЯчеек.Строка КАК Справочник.ЭлементыФинансовыхОтчетов) КАК Строка,
	|	ВЫРАЗИТЬ(СтруктураЯчеек.Колонка КАК Справочник.ЭлементыФинансовыхОтчетов) КАК Колонка,
	|	СтруктураЯчеек.ВидЭлемента КАК ВидЭлемента,
	|	СтруктураЯчеек.ФлагСумма,
	|	СтруктураЯчеек.ФлагКоличество,
	|	СтруктураЯчеек.СложнаяТаблица
	|ПОМЕСТИТЬ СтруктураЯчеек
	|ИЗ
	|	&СтруктураЯчеек КАК СтруктураЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Строка,
	|	Колонка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ПодчиненныеЭлементы.Ссылка КАК ПодчиненныйЭлемент,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|ПОМЕСТИТЬ ТаблицаЭлементовСПодчиненнымиПоСтрокам
	|ИЗ
	|	СтруктураЯчеек КАК ТаблицаОсновныхЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК ПодчиненныеЭлементы
	|		ПО ТаблицаОсновныхЭлементов.Строка = ПодчиненныеЭлементы.Родитель
	|ГДЕ
	|	ТаблицаОсновныхЭлементов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ПодчиненныеЭлементы.Ссылка,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ПодчиненныеЭлементы.Ссылка КАК ПодчиненныйЭлемент,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|ПОМЕСТИТЬ ТаблицаЭлементовСПодчиненнымиПоКолонкам
	|ИЗ
	|	СтруктураЯчеек КАК ТаблицаОсновныхЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК ПодчиненныеЭлементы
	|		ПО ТаблицаОсновныхЭлементов.Колонка = ПодчиненныеЭлементы.Родитель
	|ГДЕ
	|	ТаблицаОсновныхЭлементов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ПодчиненныеЭлементы.Ссылка,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагСумма) КАК ФлагСумма,
	|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагКоличество) КАК ФлагКоличество,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|ПОМЕСТИТЬ ТаблицаОсновныхЭлементов
	|ИЗ
	|	ТаблицаЭлементовСПодчиненнымиПоСтрокам КАК ТаблицаОсновныхЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураЯчеек КАК ПодчиненныеЭлементыВТаблице
	|		ПО ТаблицаОсновныхЭлементов.Колонка = ПодчиненныеЭлементыВТаблице.Колонка
	|			И ТаблицаОсновныхЭлементов.ПодчиненныйЭлемент = ПодчиненныеЭлементыВТаблице.Строка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагСумма),
	|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагКоличество),
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|ИЗ
	|	ТаблицаЭлементовСПодчиненнымиПоКолонкам КАК ТаблицаОсновныхЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураЯчеек КАК ПодчиненныеЭлементыВТаблице
	|		ПО ТаблицаОсновныхЭлементов.Строка = ПодчиненныеЭлементыВТаблице.Строка
	|			И ТаблицаОсновныхЭлементов.ПодчиненныйЭлемент = ПодчиненныеЭлементыВТаблице.Колонка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.СложнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица
	|				ТОГДА ИСТИНА
	|			КОГДА ТаблицаОсновныхЭлементов.Строка.ВидЭлемента = ТаблицаОсновныхЭлементов.Колонка.ВидЭлемента
	|					И &ЕстьСуммы
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагСумма
	|		КОНЕЦ) КАК ФлагСумма,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица
	|				ТОГДА ЛОЖЬ
	|			КОГДА ТаблицаОсновныхЭлементов.Строка.ВидЭлемента = ТаблицаОсновныхЭлементов.Колонка.ВидЭлемента
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагКоличество
	|		КОНЕЦ) КАК ФлагКоличество
	|ПОМЕСТИТЬ ФлагиГрупп
	|ИЗ
	|	ТаблицаОсновныхЭлементов КАК ТаблицаОсновныхЭлементов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОсновныхЭлементов.Строка,
	|	ТаблицаОсновныхЭлементов.Колонка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	ЕСТЬNULL(РодителиСтроки.Родитель, ЗНАЧЕНИЕ(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка)) КАК СтрокаРодитель,
	|	ЕСТЬNULL(РодителиКолонки.Родитель, ЗНАЧЕНИЕ(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка)) КАК КолонкаРодитель
	|ПОМЕСТИТЬ ТолькоФормулы
	|ИЗ
	|	СтруктураЯчеек КАК СтруктураЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК РодителиСтроки
	|		ПО (РодителиСтроки.Ссылка = СтруктураЯчеек.Строка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК РодителиКолонки
	|		ПО (РодителиКолонки.Ссылка = СтруктураЯчеек.Колонка)
	|ГДЕ
	|	СтруктураЯчеек.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТолькоФормулы.Строка,
	|	ТолькоФормулы.Колонка,
	|	ФлагиГрупп.ФлагСумма КАК ФлагСумма,
	|	ФлагиГрупп.ФлагКоличество КАК ФлагКоличество
	|ПОМЕСТИТЬ ВсеФлаги
	|ИЗ
	|	ТолькоФормулы КАК ТолькоФормулы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
	|		ПО ТолькоФормулы.Колонка = ФлагиГрупп.Колонка
	|			И ТолькоФормулы.СтрокаРодитель = ФлагиГрупп.Строка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТолькоФормулы.Строка,
	|	ТолькоФормулы.Колонка,
	|	ФлагиГрупп.ФлагСумма,
	|	ФлагиГрупп.ФлагКоличество
	|ИЗ
	|	ТолькоФормулы КАК ТолькоФормулы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
	|		ПО ТолькоФормулы.Строка = ФлагиГрупп.Строка
	|			И ТолькоФормулы.КолонкаРодитель = ФлагиГрупп.Колонка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТолькоФормулы.Строка,
	|	ТолькоФормулы.Колонка,
	|	ФлагиГрупп.ФлагСумма,
	|	ФлагиГрупп.ФлагКоличество
	|ИЗ
	|	ТолькоФормулы КАК ТолькоФормулы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
	|		ПО ТолькоФормулы.СтрокаРодитель = ФлагиГрупп.Строка
	|			И ТолькоФормулы.КолонкаРодитель = ФлагиГрупп.Колонка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФлагиГрупп.Строка,
	|	ФлагиГрупп.Колонка,
	|	ФлагиГрупп.ФлагСумма,
	|	ФлагиГрупп.ФлагКоличество
	|ИЗ
	|	ФлагиГрупп КАК ФлагиГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеФлаги.Строка,
	|	ВсеФлаги.Колонка,
	|	МАКСИМУМ(ВсеФлаги.ФлагСумма) КАК ФлагСумма,
	|	МАКСИМУМ(ВсеФлаги.ФлагКоличество) КАК ФлагКоличество
	|ИЗ
	|	ВсеФлаги КАК ВсеФлаги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеФлаги.Строка,
	|	ВсеФлаги.Колонка";
	
	КолонкиСтруктурыЯчеек = "Строка, Колонка, ВидЭлемента, ФлагКоличество, ФлагСумма, СложнаяТаблица";
	ЧастьСтруктурыЯчеек = СтруктураЯчеек.Скопировать(Новый Структура("ОсновнойЭлемент", Истина), КолонкиСтруктурыЯчеек);
	ЕстьСуммы = ЧастьСтруктурыЯчеек.НайтиСтроки(Новый Структура("ФлагСумма", Истина)).Количество() > 0;
	Запрос.УстановитьПараметр("ЕстьСуммы", ЕстьСуммы);
	Запрос.УстановитьПараметр("СтруктураЯчеек", ЧастьСтруктурыЯчеек);
	Запрос.УстановитьПараметр("ПодчиненныеЭлементы", Результат);
	
	СтруктураЯчеек.Индексы.Добавить("Строка, Колонка");
	РезультатЗапроса = Запрос.Выполнить();
	СтрокиКРасчету = РезультатЗапроса.Выбрать();
	
	Пока СтрокиКРасчету.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Строка, Колонка", СтрокиКРасчету.Строка, СтрокиКРасчету.Колонка);
		НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокиКРасчету, "ФлагСумма, ФлагКоличество");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, ДеревоСтрок, Колонка)
	
	СтруктураЯчеек = Параметры.СтруктураЯчеек; // см. НовыйСтруктураЯчеек
	ИсточникиДанных = Параметры.ИсточникиДанных;
	ИсточникиПериодовГруппировок = Параметры.ИсточникиПериодовГруппировок;
	Родитель = Параметры.Родитель;
	ТаблицаНастроек = Параметры.ТаблицаНастроек;
	
	КэшДопРеквизитов = Параметры.КэшДопРеквизитов;
	КэшРеквизитов = Параметры.КэшРеквизитов;
	КэшРеквизитовСтатейВалюты = Параметры.КэшРеквизитовСтатейВалюты;
	КэшРеквизитовСтатейЕдИзм = Параметры.КэшРеквизитовСтатейЕдИзм;
	
	ДобавленныеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоСтрок.Строки Цикл
		
		Строка = СтрокаДерева.Ссылка;
		ПодчиненныеСтроки = ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, СтрокаДерева, Колонка);
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		// определение базового элемента ячейки
		Элемент = Неопределено;
		РассчитатьПоПодчиненным = 0;
		// 0 - не рассчитывать
		// 1 - сумма по измерению
		// 2 - обработка групп
		
		СтрокаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Строка, "ВидЭлемента", КэшРеквизитов);
		
		Если ЗначениеЗаполнено(Колонка) Тогда
			КолонкаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Колонка, "ВидЭлемента", КэшРеквизитов);
		Иначе
			КолонкаВидЭлементаСравнения = Неопределено;
		КонецЕсли;
		
		Если СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли Не ЗначениеЗаполнено(Родитель)
			ИЛИ ЗначениеРеквизитаЭлементаВидаБюджета(Родитель, "ВидЭлемента", КэшРеквизитов)
				= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			
			Элемент = Строка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
				Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель 
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
					Прервать;
				КонецЕсли;
				Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизитаЭлементаВидаБюджета(Родитель, "ВидЭлемента", КэшРеквизитов)
					= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках Тогда
			
			Элемент = Колонка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
				Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
					Прервать;
				КонецЕсли;
				Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			СтруктураПоиска = Новый Структура("Строка, Колонка, Родитель", Строка, Колонка, Родитель);
			НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				Элемент = НайденныеСтроки[0].Элемент;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Если Не РассчитатьПоПодчиненным Тогда
				Продолжить;
			КонецЕсли;
			Если Не РассчитатьПоПодчиненным = 2 Тогда
				Если Не МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ПодчиненныеСтроки.Количество() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтруктураЯчеек.Добавить();
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.Колонка = Колонка;
		
		НоваяСтрока.СложнаяТаблица = Параметры.СложнаяТаблица;
		
		Если ЗначениеЗаполнено(Элемент) Тогда
			
			НоваяСтрока.ВидЭлемента = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
			
			Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
				ИЛИ НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				
				НоваяСтрока.ФлагЗначение = Истина;
				
			Иначе
				
				НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ОбратныйЗнак", КэшРеквизитов);
				Показатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВыводимыеПоказатели", КэшДопРеквизитов);
				
				НоваяСтрока.ФлагСумма = Истина;
				Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество Тогда
					НоваяСтрока.ФлагСумма = Ложь;
					НоваяСтрока.ФлагКоличество = Истина;
				ИначеЕсли Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма Тогда
					НоваяСтрока.ФлагКоличество = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
				НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
				НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
				НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
				НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
				НоваяСтрока.НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "НефинансовыйПоказатель", КэшДопРеквизитов);
				НоваяСтрока.ФлагНефинансовыйПоказатель = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				НоваяСтрока.РедактируемоеЗначение = Элемент.НаименованиеДляПечати;
				НоваяСтрока.ФлагРедактируемоеЗначение = "отобрать";
			КонецЕсли;
			
		Иначе
			НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		КонецЕсли;
		
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Строка);
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Колонка);
		
		ВалютаВывода = ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейВалюты);
		
		Если НоваяСтрока.Владелец().Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейЕдИзм);
		КонецЕсли;
		
		Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			
			Показатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВыводимыеПоказатели", КэшДопРеквизитов);
			
			Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма
				ИЛИ Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма Тогда
				Валюта = НоваяСтрока.Валюта;
				Если ЗначениеЗаполнено(Валюта)
					И ЗначениеЗаполнено(ВалютаВывода) Тогда
					Если Валюта <> ВалютаВывода Тогда
						НоваяСтрока.ФлагСумма = Ложь;
						НоваяСтрока.ФлагКоличество = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока,
			ИсточникиДанных,
			ИсточникиПериодовГруппировок,
			Элемент,
			ПодчиненныеСтроки,
			Параметры);
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

Функция МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки)
	
	ПредыдущееПолеИсточника = Неопределено;
	Для Каждого Строка Из ПодчиненныеСтроки Цикл
		Если ПредыдущееПолеИсточника <> Неопределено
			И Строка.ПолеИсточника <> ПредыдущееПолеИсточника Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		ПредыдущееПолеИсточника = Строка.ПолеИсточника;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВычислитьЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы)
	
	НайденнаяПозиция = СтрНайти(ВРег(Формула), ВРег(ИмяОперанда));
	ОкончаниеФормулы = НайденнаяПозиция + СтрДлина(ИмяОперанда);
	
	// проверка что "ИТОГ" применяется к операнду
	ИмяФункцииИтогСоСкобкой = ВРЕГ("ИТОГ(");
	КоличествоПозицийСоСкобкой = СтрДлина(ИмяФункцииИтогСоСкобкой);
	КоличествоПозицийБезСкобки = КоличествоПозицийСоСкобкой - 1;
	
	НачалоФормулы = 0;
	Сч = НайденнаяПозиция - КоличествоПозицийСоСкобкой;
	Найдено = Ложь;
	Пока Сч > 0 Цикл
		Если ВРЕГ(Сред(Формула, Сч, КоличествоПозицийСоСкобкой)) = ИмяФункцииИтогСоСкобкой Тогда
			НачалоФормулы = Сч;
			Найдено = Истина;
			Прервать;
		КонецЕсли;
		ПозицияПроверки = Сч + КоличествоПозицийБезСкобки;
		Если СокрЛП(Сред(Формула, ПозицияПроверки, 1)) <> "" Тогда
			Возврат Неопределено; // перед операндом и функцией итог вставлен символ
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если Не Найдено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(Формула, НачалоФормулы, ОкончаниеФормулы - НачалоФормулы);
	
КонецФункции

// Метод изменяет состав строк таблице "СтруктураЯчеек" в структуре описания вида бюджета.
//
// Параметры:
//  Формула - Произвольный - Формула
//  СтруктураФлаговПериодов - Структура - Структура флагов периодов
//  СтрокаОперанда - СтрокаТаблицыЗначений - Строка операнда
//  ИменаКолонокДляФормул - Соответствие из КлючИЗначение - Имена колонок для формул
// 
// Возвращаемое значение:
//  Массив из СтрокаТаблицыЗначений
//
Функция ДобавитьВФункциюИтогТехническуюИнформацию(Формула, СтруктураФлаговПериодов, СтрокаОперанда, ИменаКолонокДляФормул)
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	СписокДобавленных = Новый Массив;
	
	ИмяОперанда = "[" + СтрокаОперанда.ИмяОперанда + "]";
	ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
	
	СоответствиеИменФункций = Новый Соответствие;
	ПодготовленныеКРасчетуЧастиФункции = Новый Соответствие;
	
	Пока ЧастьФункции <> Неопределено Цикл
		
		ВтораяЧастьФормулы = ОкончаниеФормулы(Формула, ОкончаниеФормулы);
		
		КрасивоеИмяОперанда = СтрЗаменить(ЧастьФункции + ВтораяЧастьФормулы + ")", """", "'");
		ИскомаяСтрока = "," + " " + " ";
		Пока СтрНайти(КрасивоеИмяОперанда, ИскомаяСтрока) <> 0 Цикл
			КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, ИскомаяСтрока, ", ");
		КонецЦикла;
		ИскомаяСтрока = " " + ",";
		Пока СтрНайти(КрасивоеИмяОперанда, ИскомаяСтрока) <> 0 Цикл
			КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, ИскомаяСтрока, ",");
		КонецЦикла;
		ИскомаяСтрока = "] ";
		Пока СтрНайти(КрасивоеИмяОперанда, ИскомаяСтрока) <> 0 Цикл
			КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, ИскомаяСтрока, "]");
		КонецЦикла;
		ИскомаяСтрока = " [";
		Пока СтрНайти(КрасивоеИмяОперанда, ИскомаяСтрока) <> 0 Цикл
			КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, ИскомаяСтрока, "[");
		КонецЦикла;
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "[", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "]", "'");
		
		ЧастьФормулыДобавлена = Не ПодготовленныеКРасчетуЧастиФункции.Получить(КрасивоеИмяОперанда) = Неопределено;
		
		// Повторяющиеся части формулы будем вычислять однократно
		// Им присваивается единый идентификатор итога.
		Если Не ЧастьФормулыДобавлена Тогда
			НовыйОперанд = СтрокаОперанда.Владелец().Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйОперанд, СтрокаОперанда);
			
			НовыйОперанд.ИмяОперанда = "ИТОГ_" + Новый УникальныйИдентификатор;
			
			СписокДобавленных.Добавить(НовыйОперанд);
			СоответствиеИменФункций.Вставить(НовыйОперанд.ИмяОперанда, КрасивоеИмяОперанда);
			ПодготовленныеКРасчетуЧастиФункции.Вставить(КрасивоеИмяОперанда, НовыйОперанд.ИмяОперанда);
		КонецЕсли;
		
		РеальнаяПерваяЧастьФормулы = "ИТОГ(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Префикс, Постфикс, СтрокаДанных, ЛогРасчета, КэшРеквизитовЭлементовБюджета, """ + НовыйОперанд.ИмяОперанда + """";
		
		СписокИзмерений = СокрЛП(ВтораяЧастьФормулы);
		СписокИзмерений = СокрЛП(Сред(СписокИзмерений, 2)); // отсекается запятая
		СписокИзмерений = Лев(СписокИзмерений, СтрДлина(СписокИзмерений) - 1); //отсекается последняя кавычка
		СписокИзмерений = Сред(СписокИзмерений, 2); // отсекается первая кавычка
		МассивЗаголовковИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(СписокИзмерений),,Истина, Истина);
		МассивРезультат = Новый Массив;
		Для Каждого ИмяИзмерения Из МассивЗаголовковИзмерений Цикл
			ИмяКолонки = ИменаКолонокДляФормул.Получить(ВРег(ИмяИзмерения));
			Если ИмяКолонки <> Неопределено Тогда
				Колонка = СтрокаОперанда.Владелец().Колонки[ИмяКолонки];
				
				// Для суммируемых показателей очистим флаги измерений отчета для суммирования
				// при расчете данных ячеек.
				Если СтруктураФлаговПериодов <> Неопределено И
					БюджетнаяОтчетностьКлиентСервер.ЭтоПолеПериода(Колонка.Имя) Тогда
					СтруктураФлаговПериодов.Вставить("Флаг" + Колонка.Имя, "заполнить");
				КонецЕсли;
				Если СтрокаОперанда.ВидОперанда <> Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
					НовыйОперанд["Флаг" + Колонка.Имя] = "";
				КонецЕсли;
				
				МассивРезультат.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		СписокРеальныхИзмерений = СтрСоединить(МассивРезультат, ",");
		РеальнаяВтораяЧастьФормулы = СтрЗаменить(ВтораяЧастьФормулы, СписокИзмерений, СписокРеальныхИзмерений);
		
		НоваяЧастьФункции = РеальнаяПерваяЧастьФормулы + РеальнаяВтораяЧастьФормулы;
		Формула = Лев(Формула, НачалоФормулы - 1) + НоваяЧастьФункции + Сред(Формула, ОкончаниеФормулы);
		ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
		
	КонецЦикла;
	
	// Если операнд используется и вне функции ИТОГ - оставим его
	// иначе - удалим.
	Если СтрНайти(Формула, ИмяОперанда) Тогда
		СписокДобавленных.Добавить(СтрокаОперанда);
	Иначе
		СтрокаОперанда.Владелец().Удалить(СтрокаОперанда);
	КонецЕсли;
	
	Для Каждого СтрокаОперанда Из СписокДобавленных Цикл
		ИмяФормулы = СоответствиеИменФункций.Получить(СтрокаОперанда.ИмяОперанда);
		Если ИмяФормулы <> Неопределено Тогда
			Формула = СтрЗаменить(Формула, СтрокаОперанда.ИмяОперанда, ИмяФормулы);
			СтрокаОперанда.ИмяОперанда = ИмяФормулы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДобавленных;
	
КонецФункции

Процедура ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов)
	
	Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		СтрокаОперанда.СтатьяБюджетов = Неопределено;
		СтрокаОперанда.ФлагСтатьяБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		СтрокаОперанда.ПоказательБюджетов = Неопределено;
		СтрокаОперанда.ФлагПоказательБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтатьяБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.СтатьяБюджетов = СтатьяБюджетов;
		СтрокаОперанда.ФлагСтатьяБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ПоказательБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.ПоказательБюджетов = ПоказательБюджетов;
		СтрокаОперанда.ФлагПоказательБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "НефинансовыйПоказатель", КэшДопРеквизитов);
		СтрокаОперанда.НефинансовыйПоказатель = НефинансовыйПоказатель;
		СтрокаОперанда.ФлагНефинансовыйПоказатель = "отобрать";
		СтрокаОперанда.ФлагЗначение = Истина;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		СтрокаОперанда.РедактируемоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОперанда.Операнд,
			"НаименованиеДляПечати");
		СтрокаОперанда.ФлагРедактируемоеЗначение = "отобрать";
		СтрокаОперанда.ФлагЗначение = Истина;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
		
		СтрокаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтрокаЯчейки", КэшДопРеквизитов);
		КолонкаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "КолонкаЯчейки", КэшДопРеквизитов);
		СтрокаОперанда.ОперандСтрока = СтрокаЯчейки;
		СтрокаОперанда.ОперандКолонка = КолонкаЯчейки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Операнды)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	КэшДопРеквизитов = Параметры.КэшДопРеквизитов;
	СтруктураФлаговПериодов = Новый Структура;
	ФлагиОперандов = Новый Массив;
	
	ДенежныеНФП = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка КАК Операнд
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
		|		ПО ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = НефинансовыеПоказателиБюджетов.Ссылка
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &РеквизитВидаЭлемента)
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель))
		|			И (НефинансовыеПоказателиБюджетов.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Денежный))
		|ГДЕ
		|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка В(&Операнды)";
	
	Запрос.УстановитьПараметр("РеквизитВидаЭлемента",ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НефинансовыйПоказатель);
	АналитикаОперандов = Новый Соответствие;
	
	ВидыОперандов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Операнды.ВыгрузитьКолонку("Операнд"), "ВидЭлемента");
	Для Каждого ДанныеОперанда Из Операнды Цикл
		
		СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
		
		ВидОперанда = ВидыОперандов.Получить(ДанныеОперанда.Операнд);
		Если ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка, ВидЭлемента");
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока,,"Формула, ИД_Источника, ПолеИсточника, ФлагСумма, ФлагКоличество, ФлагЗначение, ОбратныйЗнак");
		КонецЕсли;
		ЗаполнитьСведенияОбИсточникеДанных(СтрокаОперанда,
			ИсточникиДанных,
			ИсточникиПериодовГруппировок,
			ДанныеОперанда.Операнд,
			Неопределено,
			Параметры);
		
		СтрокаОперанда.ИмяОперанда = ДанныеОперанда.Идентификатор;
		СтрокаОперанда.ВидОперанда = ВидОперанда;
		СтрокаОперанда.ОсновнойЭлемент = Ложь;
		СтрокаОперанда.РасчетЗаполнение = "итог";
		
		Если ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
			И СтрокаОперанда.ФлагВалюта = "отобрать" Тогда
			Если ДенежныеНФП = Неопределено Тогда
				Запрос.УстановитьПараметр("Операнды", Операнды);
				ДенежныеНФП = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			Если ДенежныеНФП.Найти(ДанныеОперанда.Операнд,"Операнд") = Неопределено Тогда
				СтрокаОперанда.ФлагВалюта = "";
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(ВРег(НоваяСтрока.Формула), "ИТОГ(") Тогда
			ДобавленныеИтоги = ДобавитьВФункциюИтогТехническуюИнформацию(НоваяСтрока.Формула,
					СтруктураФлаговПериодов,
					СтрокаОперанда,
					Параметры.ИменаКолонокДляФормул);
			Для Каждого СтрокаОперанда Из ДобавленныеИтоги Цикл
				Если Не СтрНайти(ВРег(СтрокаОперанда.ИмяОперанда), "ИТОГ(") Тогда
					НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
				КонецЕсли;
				ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
			КонецЦикла;
			МассивСтрокОперандов = ДобавленныеИтоги;
		Иначе
			НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
			ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
			Если НоваяСтрока.ФлагСумма И НоваяСтрока.ФлагКоличество Тогда
				ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "ФлагСумма,ФлагКоличество");
			КонецЕсли;
			МассивСтрокОперандов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОперанда);
		КонецЕсли;
			
		Для Каждого СтрокаОперанда Из МассивСтрокОперандов Цикл
			Если НоваяСтрока.РасчетЗаполнение = "заполнение" Тогда
				// Если на операнде не ведется учет по аналитике
				// то при заполнении фильтр на аналитику игнорируется.
				
				Для Каждого ВидАналитики Из Параметры.ОписаниеОтчета.ВидыАналитик Цикл
					ОтбиратьПоЗначению = Ложь;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
						Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.СтатьяБюджетов,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
						Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.ПоказательБюджетов,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
						Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.НефинансовыйПоказатель,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если Не ОтбиратьПоЗначению Тогда
						СтрокаОперанда["Флаг" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики)] = "";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураОперанда = Новый Структура("ФлагСумма, ФлагКоличество");
			ЗаполнитьЗначенияСвойств(СтруктураОперанда, СтрокаОперанда);
			ФлагиОперандов.Добавить(СтруктураОперанда);
			
			АналитикиОперанда = Новый Массив;
			ВидЭлемента = ВидыОперандов.Получить(ДанныеОперанда.Операнд);
			ИмяРеквизитаИсточника = "";
			Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
				ИмяРеквизитаИсточника = "СтатьяБюджетов";
			ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
				ИмяРеквизитаИсточника = "ПоказательБюджетов";
			ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
				ИмяРеквизитаИсточника = "НефинансовыйПоказатель";
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяРеквизитаИсточника) Тогда
				ИсточникАналитики = СтрокаОперанда[ИмяРеквизитаИсточника];
				Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
					АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										ИсточникАналитики,
																										"ВидАналитики" + Сч);
					
					Если ЗначениеЗаполнено(АналитикаСтатьи) Тогда
						АналитикиОперанда.Добавить(АналитикаСтатьи);
					КонецЕсли;
				КонецЦикла;
				АналитикаОперандов.Вставить(СтрокаОперанда.ИмяОперанда, АналитикиОперанда);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураФлаговПериодов Цикл
		
		НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		
	КонецЦикла;
	
	НоваяСтрока.АналитикаОперандов = АналитикаОперандов;
	
	Возврат ФлагиОперандов;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ДеревоКолонок - ДеревоЗначений - состоит из:
// 		* Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		* Код - Число - 
// 	ТаблицаСтрокаКолонка - ТаблицаЗначений - Описание:
// * Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
// * Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
// 	ЗафиксированнаяСтрока - СправочникСсылка.ЭлементыФинансовыхОтчетов -
Процедура ОбойтиПодчиненныеКолонки(ДеревоКолонок, ТаблицаСтрокаКолонка, ЗафиксированнаяСтрока)
	
	Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа 
			И СтрокаДерева.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе, "ВидЭлемента") <> Неопределено Тогда
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаДерева.Строки.Количество() Тогда
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		ОбойтиПодчиненныеКолонки(СтрокаДерева, ТаблицаСтрокаКолонка, ЗафиксированнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры


// Заполняет в строке структуры ячеек сведения об источниках данных.
// 
// Параметры:
// 	НоваяСтрока - СтрокаТаблицыЗначений - Строка таблицы СтруктураЯчеек:
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
// 	ИсточникиДанных - Массив из Структура - Массив источников данных.
// 	ИсточникиПериодовГруппировок - Массив из Структура - Массив источников периодов.
// 	Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов - элемент отчета.
// 	ПодчиненныеСтроки - Массив из СтрокаТаблицыЗначений - массив подчиненных строк:
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
// 	Параметры - Структура - Структура параметров отчета.
Процедура ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент, ПодчиненныеСтроки, Параметры)
	
	ТребуетИсточник = Истина;
	НоваяСтрока.ОсновнойЭлемент = Истина;
	КэшДопРеквизитов = Параметры.КэшДопРеквизитов;
	КэшРеквизитов = Параметры.КэшРеквизитов;
	КэшПодчиненныхЭлементовФормул = Параметры.КэшПодчиненныхЭлементовФормул;
	
	СтрокаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Строка, "ВидЭлемента", КэшРеквизитов);
	Если ЗначениеЗаполнено(НоваяСтрока.Колонка) Тогда
		КолонкаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "ВидЭлемента", КэшРеквизитов);
	Иначе
		КолонкаВидЭлементаСравнения = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
	Иначе
		ВидЭлементаСравнения = Неопределено;
	КонецЕсли;
	
	Если СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
		
		ТребуетИсточник = Ложь;
		
		ТаблицаСтрокаКолонка = Новый ТаблицаЗначений;
		ТаблицаСтрокаКолонка.Колонки.Добавить("Строка");
		ТаблицаСтрокаКолонка.Колонки.Добавить("Колонка");
		
		Запрос = Новый Запрос;
		
		Если КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			
			ДеревоКолонок = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Колонка];
			Если ДеревоКолонок = Неопределено Тогда
			
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
				|	ЭлементыФинансовыхОтчетов.Код КАК Код,
				|	ЭлементыФинансовыхОтчетов.ВидЭлемента
				|ИЗ
				|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
				|ГДЕ
				|	ЭлементыФинансовыхОтчетов.Ссылка В ИЕРАРХИИ(&Родитель)
				|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка = &Родитель
				|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Код ИЕРАРХИЯ";
				
				Группа = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "Родитель", КэшРеквизитов);
				Запрос.УстановитьПараметр("Родитель", Группа);
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
				РезультатЗапроса = Запрос.Выполнить();
				ДеревоКолонок = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Колонка, ДеревоКолонок);
				
			КонецЕсли;
				
			ОбойтиПодчиненныеКолонки(ДеревоКолонок, ТаблицаСтрокаКолонка, НоваяСтрока.Строка);
			НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "ОбратныйЗнак", КэшРеквизитов);
			
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Колонка, "ФормулаПоГруппе", КэшДопРеквизитов);
			
		Иначе
			
			ТаблицаСтрок = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Строка];
			Если ТаблицаСтрок = Неопределено Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлементыФинансовыхОтчетов.Ссылка,
				|	ЭлементыФинансовыхОтчетов.Код КАК Код
				|ИЗ
				|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
				|ГДЕ
				|	ЭлементыФинансовыхОтчетов.Родитель В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				Фильтр.Родитель
				|			ИЗ
				|				Справочник.ЭлементыФинансовыхОтчетов КАК Фильтр
				|			ГДЕ
				|				Фильтр.Ссылка = &Ссылка)
				|	И НЕ ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Код";
				
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
				РезультатЗапроса = Запрос.Выполнить();
				ТаблицаСтрок = РезультатЗапроса.Выгрузить();
				
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Строка, ТаблицаСтрок);
				
			КонецЕсли;
			
			Для Каждого ВыборкаДетальныеЗаписи Из ТаблицаСтрок Цикл
				
				СтрокаДляРасчетаИтогов = ВыборкаДетальныеЗаписи.Ссылка;
				
				КэшПодчиненныхВыводимыхСРодителем = Параметры.КэшПодчиненныхВыводимыхСРодителем;
				НижестоящийЭлемент = КэшПодчиненныхВыводимыхСРодителем.Получить(СтрокаДляРасчетаИтогов);
				Пока НижестоящийЭлемент <> Неопределено Цикл
					СтрокаДляРасчетаИтогов = НижестоящийЭлемент;
					НижестоящийЭлемент = КэшПодчиненныхВыводимыхСРодителем.Получить(СтрокаДляРасчетаИтогов);
				КонецЦикла;
				
				СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
				СтрокаПодч.Колонка = НоваяСтрока.Колонка;
				СтрокаПодч.Строка = СтрокаДляРасчетаИтогов;
			КонецЦикла;
			
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Строка, "ФормулаПоГруппе", КэшДопРеквизитов);
			
			НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Строка, "ОбратныйЗнак", КэшРеквизитов);
			
		КонецЕсли;
		
		Если Не ТаблицаСтрокаКолонка.Количество() Тогда
			Формула = "";
		Иначе
			Для Каждого Строка Из ТаблицаСтрокаКолонка Цикл
				
				СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
				СтрокаОперанда.ПорядокРасчетаОперанда = ТаблицаСтрокаКолонка.Индекс(Строка);
				СтрокаОперанда.ИмяОперанда = ЗначениеРеквизитаЭлементаВидаБюджета(Строка.Строка, "НаименованиеДляПечати", КэшРеквизитов) + 
					?(ЗначениеЗаполнено(Строка.Колонка), "; " + ЗначениеРеквизитаЭлементаВидаБюджета(Строка.Колонка, "НаименованиеДляПечати", КэшРеквизитов), "");
				СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
				СтрокаОперанда.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
				СтрокаОперанда.ОсновнойЭлемент = Ложь;
				СтрокаОперанда.ОперандСтрока = Строка.Строка;
				СтрокаОперанда.ОперандКолонка = Строка.Колонка;
				
			КонецЦикла;
			Формула = Перечисления.ВидыФормулБюджетирования.ИмяФункции(ВидФормулы) + "(МассивЗначений)";
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
		ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		ТребуетИсточник = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Родитель = &Ссылка
		|	И ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)";
		
		СтрокаФормулы = Неопределено;
		КолонкаФормулы = Неопределено;
		
		Если КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			СсылкаНаФормулу = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Колонка];
			Если СсылкаНаФормулу = Неопределено Тогда
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СсылкаНаФормулу = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
					СсылкаНаФормулу = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
				КонецЕсли;
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Колонка, СсылкаНаФормулу);
			КонецЕсли;
			
			СтрокаФормулы = НоваяСтрока.Строка;
			КолонкаФормулы = СсылкаНаФормулу;
			
		Иначе
			
			СсылкаНаФормулу = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Строка];
			Если СсылкаНаФормулу = Неопределено Тогда
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СсылкаНаФормулу = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
					СсылкаНаФормулу = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
				КонецЕсли;
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Строка, СсылкаНаФормулу);
			КонецЕсли;
			
			СтрокаФормулы = СсылкаНаФормулу;
			КолонкаФормулы = НоваяСтрока.Колонка;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
			Формула = "";
		Иначе
			
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = НСтр("ru = 'Формула по группе';
												|en = 'Group formula'");
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = СтрокаФормулы;
			СтрокаОперанда.ОперандКолонка = КолонкаФормулы;
			Формула = "[" + СтрокаОперанда.ИмяОперанда + "]";
			
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли Не ЗначениеЗаполнено(Элемент) Тогда // расчет по подчиненным строкам
		
		ТребуетИсточник = Ложь;
		
		НоваяСтрока.ФлагКоличество = Ложь;
		НоваяСтрока.ФлагСумма = Ложь;
		
		Формула = "";
		ПорядковыйНомерСтроки = 0;
		Для Каждого Строка Из ПодчиненныеСтроки Цикл
			
			ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вложенная строка #%1';
					|en = 'Nested line %1'"),
				ПорядковыйНомерСтроки);
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = Строка.Строка;
			СтрокаОперанда.ОперандКолонка = Строка.Колонка;
			Формула = Формула + "СУММА([" + СтрокаОперанда.ИмяОперанда + "]) + ";
			
			НоваяСтрока.ФлагКоличество = НоваяСтрока.ФлагКоличество ИЛИ Строка.ФлагКоличество;
			НоваяСтрока.ФлагСумма = НоваяСтрока.ФлагСумма ИЛИ Строка.ФлагСумма;
			
		КонецЦикла;
		
		Формула = Лев(Формула, СтрДлина(Формула) - 3);
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		
		ТребуетИсточник = Ложь;
		
		Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
		Если СтрНайти(ВРег(Формула), "ИТОГ(")
			ИЛИ СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
			НоваяСтрока.ПредставлениеФормулы = Формула;
		КонецЕсли;
		НоваяСтрока.Формула = Формула;
		ФлагиОперандов = ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, 
															ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
		Если СтрНайти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
			ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
		ОперандыФлагСумма = Ложь;
		ОперандыФлагКоличество = Ложь;
		Для Каждого ПодчиненнаяСтрока Из ФлагиОперандов Цикл
			ОперандыФлагСумма = ОперандыФлагСумма ИЛИ ПодчиненнаяСтрока.ФлагСумма;
			ОперандыФлагКоличество = ОперандыФлагКоличество ИЛИ ПодчиненнаяСтрока.ФлагКоличество;
		КонецЦикла;
		
		Если ОперандыФлагКоличество И Не ОперандыФлагСумма Тогда
			ФлагСумма = Ложь;
			ФлагКоличество = Истина;
		Иначе
			ФлагСумма = Истина;
			ФлагКоличество = Ложь;
		КонецЕсли;
		
		НоваяСтрока.ФлагКоличество = ФлагКоличество;
		НоваяСтрока.ФлагСумма = ФлагСумма;
			
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		РасчетЗаполнение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СпособЗаполнения", КэшДопРеквизитов);
		
		НоваяСтрока.РасчетЗаполнение = "";
		Если ПодчиненныеСтроки <> Неопределено 
			И ПодчиненныеСтроки.Количество() Тогда
			НоваяСтрока.РасчетЗаполнение = "итог";
		ИначеЕсли РасчетЗаполнение = 1 Тогда
			НоваяСтрока.РасчетЗаполнение = "пересчет";
		ИначеЕсли РасчетЗаполнение = 2 Тогда
			НоваяСтрока.РасчетЗаполнение = "заполнение";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РасчетЗаполнение)
			И Не ЗначениеЗаполнено(НоваяСтрока.РасчетЗаполнение) Тогда
			ТекущийЭлемент = НоваяСтрока.Строка;
			ВидЭлемента = СтрокаВидЭлементаСравнения;
			Пока ВидЭлемента <> Неопределено
				И ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Цикл
				Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
					ИсточникВсеЭлементы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ТекущийЭлемент, "ИсточникВсеЭлементы", КэшДопРеквизитов);
					Если ИсточникВсеЭлементы = Истина Тогда
						НоваяСтрока.РасчетЗаполнение = "заполнение";
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ТекущийЭлемент = ЗначениеРеквизитаЭлементаВидаБюджета(ТекущийЭлемент, "Родитель", КэшРеквизитов);
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					ВидЭлемента = ЗначениеРеквизитаЭлементаВидаБюджета(ТекущийЭлемент, "ВидЭлемента", КэшРеквизитов);
				Иначе
					ВидЭлемента = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.РасчетЗаполнение)
			И ЗначениеЗаполнено(КолонкаВидЭлементаСравнения) Тогда
			ТекущийЭлемент = НоваяСтрока.Колонка;
			ВидЭлемента = КолонкаВидЭлементаСравнения;
			Пока ВидЭлемента <> Неопределено
				И ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
				Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
					ИсточникВсеЭлементы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ТекущийЭлемент, "ИсточникВсеЭлементы", КэшДопРеквизитов);
					Если ИсточникВсеЭлементы = Истина Тогда
						НоваяСтрока.РасчетЗаполнение = "заполнение";
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ТекущийЭлемент = ЗначениеРеквизитаЭлементаВидаБюджета(ТекущийЭлемент, "Родитель", КэшРеквизитов);
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					ВидЭлемента = ЗначениеРеквизитаЭлементаВидаБюджета(ТекущийЭлемент, "ВидЭлемента", КэшРеквизитов);
				Иначе
					ВидЭлемента = Неопределено;
				КонецЕсли;
			КонецЦикла;;
		КонецЕсли;
			
		
		// Для операндов формулы не предусмотрены.
		Если Параметры <> Неопределено Тогда
			
			РежимыФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов;
			
			ДобавитьФормулуРасчета = НоваяСтрока.РасчетЗаполнение = "пересчет" И 
				(Параметры.РежимФормирования = РежимыФормирования.Документ 
					ИЛИ Параметры.РежимФормирования = РежимыФормирования.ПечатьБюджета);
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "заполнение" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "пересчет" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			
			Если ДобавитьФормулуРасчета Тогда
				
				Если НоваяСтрока.РасчетЗаполнение = "заполнение" Тогда
					НоваяСтрока.ФлагСтатьяБюджетов = ""; // статья нужна только справочно, отборы по ней не нужны
				КонецЕсли;
				
				Если Параметры.РежимФормирования = РежимыФормирования.Заполнение Тогда
					НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
				КонецЕсли;
				
				Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
				Если СтрНайти(ВРег(Формула), "ИТОГ(")
					ИЛИ СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
					НоваяСтрока.ПредставлениеФормулы = Формула;
				КонецЕсли;
				НоваяСтрока.Формула = Формула;
				ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
				Если СтрНайти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
					ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		ПрочитатьЗначениеДопРеквизитаИсключитьДанныеВводимогоДокументаПриРасчете(НоваяСтрока,
			Элемент,
			КэшДопРеквизитов);
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ТипПоказателя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипЗначенияПоказателя", КэшДопРеквизитов);
		Если ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.НачальныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "НачальныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.КонечныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "КонечныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Приход Тогда
			НоваяСтрока.ПолеИсточника = "Приход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Расход Тогда
			НоваяСтрока.ПолеИсточника = "Расход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот Тогда
			НоваяСтрока.ПолеИсточника = "Оборот";
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
		ПрочитатьЗначениеДопРеквизитаИсключитьДанныеВводимогоДокументаПриРасчете(НоваяСтрока,
			Элемент,
			КэшДопРеквизитов);
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		НоваяСтрока.ПолеИсточника = "ЗначениеПоказателя";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		НоваяСтрока.РасчетЗаполнение = "";
		НоваяСтрока.ПолеИсточника = "ЗначениеПоказателя";
		НоваяСтрока.ТипРедактируемогоЗначения = 
			ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипРедактируемогоЗначения", КэшДопРеквизитов);
		НоваяСтрока.ИД_Источника = "Документ_Значения";
		ТребуетИсточник = Ложь;
		
	КонецЕсли;
	
	Если ТребуетИсточник Тогда
		
		// "Все статьи" входят в "показатель бюджетов".
		Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			НайденныйЭлемент = Неопределено;
			КорневойЭлемент = Элемент;
			Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
				Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
					Прервать;
				КонецЕсли;
				КорневойЭлемент = КорневойЭлемент.Родитель;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(КорневойЭлемент) Тогда
				КорневойЭлемент = Элемент;
				Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
					Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
						ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
						Прервать;
					КонецЕсли;
					КорневойЭлемент = КорневойЭлемент.Родитель;
				КонецЦикла;
				Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
					НайденныйЭлемент = КорневойЭлемент;
				КонецЕсли;
			Иначе
				НайденныйЭлемент = КорневойЭлемент;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементПоиска = Элемент;
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭлементПоиска = НайденныйЭлемент;
		КонецЕсли;
		
		Для Каждого Источник Из ИсточникиДанных Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_Источника = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Источник Из ИсточникиПериодовГруппировок Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_ИсточникаПериодов = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяИзмерения(КэшДопРеквизиты, Элемент)
	
	ВидЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "ВидЭлемента");
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизиты);
			СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность);
			Возврат СтрокиПериода.Период;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизиты);
			Возврат ИмяИзмерения;
			
		КонецЕсли;
	Иначе
		Ошибка = НСтр("ru = 'Неизвестное измерение: %1';
						|en = 'Unknown dimension: %1'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Элемент);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолныйСписокИзмеренийЯчейки(КэшДопРеквизиты, Знач Строка, Знач Колонка)
	
	Массив = Новый Массив;
	
	Если ЗначениеЗаполнено(Строка) Тогда
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка, "ВидЭлемента, Родитель");
	Иначе
		ДанныеСтроки = Неопределено;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(Строка)
		И Не ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Цикл
		
		Если ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					// Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Организация", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Валюта", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Сценарий", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Строка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Строка = ДанныеСтроки.Родитель;
		Если ЗначениеЗаполнено(Строка) Тогда
			ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка, "ВидЭлемента, Родитель");
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Колонка) Тогда
		ДанныеКолонки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Колонка, "ВидЭлемента, Родитель");
	Иначе
		ДанныеКолонки = Неопределено;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(Колонка)
		И Не ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					// Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Организация", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Валюта", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Сценарий", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Колонка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Колонка = ДанныеКолонки.Родитель;
		Если ЗначениеЗаполнено(Колонка) Тогда
			ДанныеКолонки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Колонка, "ВидЭлемента, Родитель");
		Иначе
			ДанныеКолонки = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПолныйСписокИзмеренийОперанда(КэшДопРеквизиты, Знач АналитикаОперанда, Знач Строка, Знач Колонка)
	
	Массив = Новый Массив;
	
	Если ЗначениеЗаполнено(Строка) Тогда
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка, "ВидЭлемента, Родитель");
	Иначе
		ДанныеСтроки = Неопределено;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(Строка)
		И Не ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Цикл
		
		Если ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ДанныеСтроки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					// Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				Иначе
					ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ВидАналитики", КэшДопРеквизиты);
					Если АналитикаОперанда.Найти(ВидАналитики) = Неопределено Тогда
						ДобавлятьИзмерение = Ложь;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ВидАналитики", КэшДопРеквизиты);
				Если АналитикаОперанда.Найти(ВидАналитики) = Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Организация", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Валюта", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Сценарий", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Строка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Строка = ДанныеСтроки.Родитель;
		Если ЗначениеЗаполнено(Строка) Тогда
			ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка, "ВидЭлемента, Родитель");
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Колонка) Тогда
		ДанныеКолонки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Колонка, "ВидЭлемента, Родитель");
	Иначе
		ДанныеКолонки = Неопределено;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(Колонка)
		И Не ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ДанныеКолонки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					// Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				Иначе
					ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ВидАналитики", КэшДопРеквизиты);
					Если АналитикаОперанда.Найти(ВидАналитики) = Неопределено Тогда
						ДобавлятьИзмерение = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Организация", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Валюта", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				ЗначениеИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "Сценарий", КэшДопРеквизиты);
				Если ЗначениеЗаполнено(ЗначениеИзмерения) Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Колонка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Колонка = ДанныеКолонки.Родитель;
		Если ЗначениеЗаполнено(Колонка) Тогда
			ДанныеКолонки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Колонка, "ВидЭлемента, Родитель");
		Иначе
			ДанныеКолонки = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка, ЯчейкиСсылки = Неопределено)
	
	СтруктураПоиска = Новый Структура("ОперандСтрока, ОперандКолонка", Ячейка.Строка, Ячейка.Колонка);
	ЯчейкиССсылками = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Если ЯчейкиСсылки = Неопределено Тогда
		ЯчейкиСсылки = Новый ТаблицаЗначений;
		ЯчейкиСсылки.Колонки.Добавить("Строка");
		ЯчейкиСсылки.Колонки.Добавить("Колонка");
		ЯчейкиСсылки.Колонки.Добавить("ОбщиеИзмерения");
		ЯчейкиСсылки.Колонки.Добавить("АналитикаОперандов");
		ЯчейкиСсылки.Индексы.Добавить("Строка, Колонка");
	КонецЕсли;
	
	Для Каждого ЯчейкаССсылкой Из ЯчейкиССсылками Цикл
		ПоискВСсылках = Новый Структура("Строка, Колонка");
		ЗаполнитьЗначенияСвойств(ПоискВСсылках, ЯчейкаССсылкой);
		Если ЯчейкиСсылки.НайтиСтроки(ПоискВСсылках).Количество() Тогда
			Продолжить;
		КонецЕсли;
		ПоискВСсылках.Вставить("ОсновнойЭлемент", Истина);
		ПоискВСсылках.Вставить("РасчетЗаполнение", "пересчет");
		НайденнаяСтрока = СтруктураЯчеек.НайтиСтроки(ПоискВСсылках);
		Если НЕ НайденнаяСтрока.Количество() Тогда
			Продолжить;
		КонецЕсли;
		НоваяЯчейка = ЯчейкиСсылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЯчейка, НайденнаяСтрока[0]);
		НоваяЯчейка.ОбщиеИзмерения = ЯчейкаССсылкой.ОбщиеИзмерения;
		НоваяЯчейка.АналитикаОперандов = ЯчейкаССсылкой.АналитикаОперандов;
		СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, НоваяЯчейка, ЯчейкиСсылки);
	КонецЦикла;
	
	Возврат ЯчейкиСсылки;
	
КонецФункции

// Функция-конструктор структуры ячеек
// 
// Параметры:
// 	ОписаниеОтчета - Структура -
// 	МассивОсновныхКолонок - Неопределено - Описание
// 	МассивКолонокТаблицыИсточников - Неопределено - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ОсновнойЭлемент - Булево - 
// * Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * РасчетЗаполнение - Строка -
// * СложнаяТаблица - Булево -
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * ОбратныйЗнак - Булево - 
// * СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
// * НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов -
// * ПоказательБюджетов - СправочникСсылка.ПоказателиБюджетов -
// * РедактируемоеЗначение - Строка -
// * ФлагСтатьяБюджетов - Строка -
// * ФлагПоказательБюджетов - Строка -
// * ФлагНефинансовыйПоказатель - Строка -
// * ФлагРедактируемоеЗначение - Строка -
// * ФлагКоличество - Булево -
// * ФлагСумма - Булево -
// * ФлагЗначение - Булево -
// * Формула - Строка -
// * ПредставлениеФормулы - Строка -
// * ИД_Источника - Строка -
// * ИД_ИсточникаПериодов - Строка -
// * ПолеИсточника - Строка -
// * ИсключитьДанныеВводимогоДокументаПриРасчете - Булево -
// * ИмяОперанда - Строка -
// * ВидОперанда - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * ОперандСтрока - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ОперандКолонка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ОбщиеИзмерения - Строка -
// * СписокОперандов - Строка -
// * ТипРедактируемогоЗначения - Строка -
// * ПорядокРасчетаОперанда - Число -
// * ИндексСтроки - Число -
// * СвязанныеЯчейки - Произвольный -
// * АналитикаОперандов - Произвольный -
Функция НовыйСтруктураЯчеек(ОписаниеОтчета, МассивОсновныхКолонок = Неопределено, МассивКолонокТаблицыИсточников = Неопределено)
	
	Если МассивОсновныхКолонок = Неопределено Тогда
		МассивОсновныхКолонок = Новый Массив;
	КонецЕсли;
	Если МассивКолонокТаблицыИсточников = Неопределено Тогда
		МассивКолонокТаблицыИсточников = Новый Массив;
	КонецЕсли;
	
	СтруктураЯчеек = Новый ТаблицаЗначений;
	
	СтруктураЯчеек.Колонки.Добавить("ОсновнойЭлемент", 		ТипКолонкиСтруктурыЯчеек("ОсновнойЭлемент"));
	СтруктураЯчеек.Колонки.Добавить("Строка", 				ТипКолонкиСтруктурыЯчеек("Строка"));
	СтруктураЯчеек.Колонки.Добавить("Колонка", 				ТипКолонкиСтруктурыЯчеек("Колонка"));
	МассивОсновныхКолонок.Добавить("ОсновнойЭлемент");
	МассивОсновныхКолонок.Добавить("Строка");
	МассивОсновныхКолонок.Добавить("Колонка");
	
	СтруктураЯчеек.Колонки.Добавить("РасчетЗаполнение", 	ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("СложнаяТаблица", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("ВидЭлемента", 			ТипКолонкиСтруктурыЯчеек("ВидЭлемента"));
	СтруктураЯчеек.Колонки.Добавить("ОбратныйЗнак", 		ТипКолонкиСтруктурыЯчеек("ОбратныйЗнак"));
	МассивОсновныхКолонок.Добавить("ВидЭлемента");
	
	СтруктураЯчеек.Колонки.Добавить("СтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	СтруктураЯчеек.Колонки.Добавить("НефинансовыйПоказатель", 	ТипКолонкиСтруктурыЯчеек("НефинансовыйПоказатель"));
	СтруктураЯчеек.Колонки.Добавить("ПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	СтруктураЯчеек.Колонки.Добавить("РедактируемоеЗначение", 	ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	МассивОсновныхКолонок.Добавить("СтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("НефинансовыйПоказатель");
	МассивОсновныхКолонок.Добавить("ПоказательБюджетов");
	МассивОсновныхКолонок.Добавить("РедактируемоеЗначение");
	
	СтруктураЯчеек.Колонки.Добавить("ФлагСтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("ФлагПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("ФлагНефинансовыйПоказатель", 	ТипКолонкиСтруктурыЯчеек("Флаг"));
	МассивОсновныхКолонок.Добавить("ФлагСтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("ФлагПоказательБюджетов");
	МассивОсновныхКолонок.Добавить("ФлагНефинансовыйПоказатель");
	СтруктураЯчеек.Колонки.Добавить("ФлагРедактируемоеЗначение", ТипКолонкиСтруктурыЯчеек("Флаг"));
	МассивОсновныхКолонок.Добавить("ФлагРедактируемоеЗначение");
	
	Для Каждого Измерение Из ОписаниеОтчета.Периодичности Цикл
		СтрокиПерида = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение);
		ИмяПериода = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Измерение);
		СтруктураЯчеек.Колонки.Добавить(СтрокиПерида.Период, ТипКолонкиСтруктурыЯчеек("Период"), ИмяПериода);
		СтруктураЯчеек.Колонки.Добавить(СтрокиПерида.ФлагПериод, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить(СтрокиПерида.ВыражениеПериода, ТипКолонкиСтруктурыЯчеек("Количество"));
		МассивОсновныхКолонок.Добавить(СтрокиПерида.ВыражениеПериода);
		МассивОсновныхКолонок.Добавить(СтрокиПерида.Период);
		МассивОсновныхКолонок.Добавить(СтрокиПерида.ФлагПериод);
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		СтруктураЯчеек.Колонки.Добавить(Измерение, ТипКолонкиСтруктурыЯчеек(Измерение), Измерение);
		СтруктураЯчеек.Колонки.Добавить("Флаг" + Измерение, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("Источник" + Измерение);
		МассивОсновныхКолонок.Добавить(Измерение);
		МассивОсновныхКолонок.Добавить("Флаг" + Измерение);
		МассивКолонокТаблицыИсточников.Добавить("Источник" + Измерение);
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТипИзмерения = БюджетированиеСервер.ВсеТипыАналитик();
		СтруктураЯчеек.Колонки.Добавить(ИмяИзмерения, ТипИзмерения, Строка(Измерение));
		СтруктураЯчеек.Колонки.Добавить("Флаг" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("Источник" + ИмяИзмерения);
		СтруктураЯчеек.Колонки.Добавить("Родитель" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Строка"));
		МассивОсновныхКолонок.Добавить(ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Флаг" + ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Родитель" + ИмяИзмерения);
		МассивКолонокТаблицыИсточников.Добавить("Источник" + ИмяИзмерения);
	КонецЦикла;
	
	СтруктураЯчеек.Колонки.Добавить("ФлагКоличество", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагСумма", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагЗначение", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("Формула", 			ТипКолонкиСтруктурыЯчеек("Формула"));
	СтруктураЯчеек.Колонки.Добавить("ПредставлениеФормулы", ТипКолонкиСтруктурыЯчеек("Формула"));
	
	СтруктураЯчеек.Колонки.Добавить("ИД_Источника", 		ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ИД_ИсточникаПериодов", ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ПолеИсточника", 		ТипКолонкиСтруктурыЯчеек("ПолеИсточника"));
	МассивОсновныхКолонок.Добавить("ИД_Источника");
	МассивОсновныхКолонок.Добавить("ИД_ИсточникаПериодов");
	
	ТипКолонки = ТипКолонкиСтруктурыЯчеек("ИсключитьДанныеВводимогоДокументаПриРасчете");
	СтруктураЯчеек.Колонки.Добавить("ИсключитьДанныеВводимогоДокументаПриРасчете", ТипКолонки);
	МассивОсновныхКолонок.Добавить("ИсключитьДанныеВводимогоДокументаПриРасчете");
	
	СтруктураЯчеек.Колонки.Добавить("ИмяОперанда", 		ТипКолонкиСтруктурыЯчеек("ИмяОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ВидОперанда", 		ТипКолонкиСтруктурыЯчеек("ВидОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ОперандСтрока", 	ТипКолонкиСтруктурыЯчеек("ОперандСтрока"));
	СтруктураЯчеек.Колонки.Добавить("ОперандКолонка", 	ТипКолонкиСтруктурыЯчеек("ОперандКолонка"));
	СтруктураЯчеек.Колонки.Добавить("ОбщиеИзмерения", 	ТипКолонкиСтруктурыЯчеек("ОбщиеИзмерения"));
	СтруктураЯчеек.Колонки.Добавить("СписокОперандов", 	ТипКолонкиСтруктурыЯчеек("СписокОперандов"));
	СтруктураЯчеек.Колонки.Добавить("ТипРедактируемогоЗначения", ТипКолонкиСтруктурыЯчеек("ТипРедактируемогоЗначения"));
	МассивОсновныхКолонок.Добавить("ВидОперанда");
	
	// для упорядочивания операндов формул типа "выполнение", "отклонение"
	СтруктураЯчеек.Колонки.Добавить("ПорядокРасчетаОперанда", 	ТипКолонкиСтруктурыЯчеек("Количество"));
	СтруктураЯчеек.Колонки.Добавить("ИндексСтроки", 			ТипКолонкиСтруктурыЯчеек("Количество"));
	МассивОсновныхКолонок.Добавить("ПорядокРасчетаОперанда");
	МассивОсновныхКолонок.Добавить("ИндексСтроки");
	
	// таблица значений ячеек которые надо пересчитывать
	СтруктураЯчеек.Колонки.Добавить("СвязанныеЯчейки");
	
	СтруктураЯчеек.Колонки.Добавить("АналитикаОперандов");
	
	Возврат СтруктураЯчеек;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Описание
// 	ИсточникиДанных - Массив из Структура - Описание
// 	ИсточникиПериодовГруппировок - Массив - Описание
// 	ОписаниеОтчета - Произвольный, Структура, Неопределено, Булево - Описание:
// * ВидыАналитик - Массив -
// * Измерения - Массив -
// * Периодичности - Массив -
// 	РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * СтруктураЯчеек - ТаблицаЗначений -
// * ПараметрыЯчеек - ТаблицаЗначений - 
// * ЗаполнениеОтсутствующихИзмеренийНФП - ТаблицаЗначений -
// * ИсточникиЗначенийИзмерений - ТаблицаЗначений -
// * ОтборИзмеренийНФП - ТаблицаЗначений -
//
Функция ОписаниеЯчеек(ВидБюджета, ИсточникиДанных, ИсточникиПериодовГруппировок, ОписаниеОтчета, РежимФормирования)
	
	ДеревоЭлементов = ДеревоЭлементовБюджета(ВидБюджета, Ложь);
	
#Область Подготовка_таблицы

	МассивОсновныхКолонок = Новый Массив;
	МассивКолонокТаблицыИсточников = Новый Массив;

	СтруктураЯчеек = НовыйСтруктураЯчеек(ОписаниеОтчета, МассивОсновныхКолонок, МассивКолонокТаблицыИсточников);
	
	// Соответствие идентификатора колонки (для вида аналитики - это идентификатор аналитики, а не имя колонки).
	// Используется в сопоставлении колонок таблицы и частей выражений, используемых в формулах (например, функция "Итог").
	ИменаКолонокДляФормул = Новый Соответствие;
	ИменаКолонокПереопределение = Новый Массив;
	Для Каждого ВидАналитики Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяКолонкиСтруктурыЯчеек = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ИдентификаторВидаАналитики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "Идентификатор");
		ИменаКолонокПереопределение.Добавить(ИмяКолонкиСтруктурыЯчеек);
		ИменаКолонокДляФормул.Вставить(ВРЕГ(ИдентификаторВидаАналитики), ИмяКолонкиСтруктурыЯчеек);
	КонецЦикла;
	Для каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Периодичность);
		СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность);
		ИмяКолонки = СтрокиПериода.Период;
		ИменаКолонокПереопределение.Добавить(ИмяКолонки);
		ИменаКолонокДляФормул.Вставить(ВРЕГ(ИмяПериода), ИмяКолонки);
	КонецЦикла;
	Для Каждого КолонкаТаблицы Из СтруктураЯчеек.Колонки Цикл
		Если НЕ ИменаКолонокПереопределение.Найти(КолонкаТаблицы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИменаКолонокДляФормул.Вставить(ВРЕГ(КолонкаТаблицы.Имя), КолонкаТаблицы.Имя);
	КонецЦикла;
	ИменаКолонокПереопределение = Неопределено;
	
#КонецОбласти
	
#Область Заполнение_таблицы
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		ВыводитьСкрытыеКолонкиДерева = Ложь;
	Иначе
		ВыводитьСкрытыеКолонкиДерева = Истина;
	КонецЕсли;

	Элементы = ПолучитьКонечныеЭлементы(ДеревоЭлементов, Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), ВыводитьСкрытыеКолонкиДерева);
	
	КэшДополнительныеРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	Параметры = Новый Структура;
	Параметры.Вставить("РежимФормирования",					РежимФормирования);
	Параметры.Вставить("СтруктураЯчеек",					СтруктураЯчеек);
	Параметры.Вставить("ТаблицаНастроек",					ЭлементыНастройкиЯчеекВидаБюджета(ВидБюджета));
	Параметры.Вставить("ИсточникиЗначений",					ИсточникиЗначенийВидаБюджета(ВидБюджета));
	Параметры.Вставить("ИсточникиДанных",					ИсточникиДанных);
	Параметры.Вставить("ИсточникиПериодовГруппировок",		ИсточникиПериодовГруппировок);
	Параметры.Вставить("КэшДопРеквизитов",					КэшДополнительныеРеквизиты);
	Параметры.Вставить("ОписаниеОтчета",					ОписаниеОтчета);
	Параметры.Вставить("ДеревоСтрок",						Элементы.Строки);
	Параметры.Вставить("Родитель",							Неопределено);
	Параметры.Вставить("СложнаяТаблица",					Ложь);
	Параметры.Вставить("КэшРеквизитов",						КэшРеквизитовЭлементовВидаБюджета(ВидБюджета));
	Параметры.Вставить("КэшАналитикСтатей",					Новый Соответствие);
	Параметры.Вставить("КэшРеквизитовСтатейВалюты",			Новый Соответствие);
	Параметры.Вставить("КэшРеквизитовСтатейЕдИзм",			Новый Соответствие);
	Параметры.Вставить("КэшПодчиненныхЭлементовФормул",		Новый Соответствие);
	Параметры.Вставить("ИменаКолонокДляФормул", 			ИменаКолонокДляФормул);
	Параметры.Вставить("КэшПодчиненныхВыводимыхСРодителем", ПолучитьКэшПодчиненныхЭлементовВыводимыхСРодителем(ВидБюджета));
	Параметры.Вставить("КэшИсточникиДанныхЭлементовОтчета", Новый Соответствие);
	
	ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	
	Таблицы = ПолучитьТаблицыВидаБюджета(ВидБюджета);
	Для Каждого Таблица Из Таблицы Цикл
		Элементы = ПолучитьКонечныеЭлементы(ДеревоЭлементов, Таблица.Ссылка, ВыводитьСкрытыеКолонкиДерева);
		Параметры.Вставить("ДеревоСтрок", Элементы.Строки);
		Параметры.Вставить("Колонки", Элементы.Колонки);
		Параметры.Вставить("Родитель", Таблица.Ссылка);
		Параметры.Вставить("СложнаяТаблица", Таблица.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	КонецЦикла;
	
	ЗаполнитьПризнакиСуммаКоличествоФормулы(ВидБюджета, СтруктураЯчеек);
	
#КонецОбласти
	
#Область Расчет_полей_по_которым_будет_поиск_данных_при_выводе_отчета

	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
	
	Для Каждого Ячейка Из СтруктураЯчеек Цикл
		
		Если Ячейка.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			
			Массив1 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.ОперандСтрока, Ячейка.ОперандКолонка);
			Массив2 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.Строка, Ячейка.Колонка);
			
			Результат = "";
			Для Каждого Элемент Из Массив1 Цикл
				Если Массив2.Найти(Элемент) <> Неопределено Тогда
					Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
				КонецЕсли;
			КонецЦикла;
			
			Ячейка.ОбщиеИзмерения = Результат;
			
		ИначеЕсли (Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа)
				И Ячейка.ОсновнойЭлемент Тогда
				
			ОбщиеЯчейки = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты, 
																Ячейка.Строка, Ячейка.Колонка);
			Результат = "";
			Для Каждого Элемент Из ОбщиеЯчейки Цикл
				Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
			КонецЦикла;
			Ячейка.ОбщиеИзмерения = Результат;
			
			Если НЕ Ячейка.АналитикаОперандов = Неопределено Тогда
				Для каждого ИмяОперандаИАналитика Из Ячейка.АналитикаОперандов Цикл
					ИмяОперанда = ИмяОперандаИАналитика.Ключ;
					ОбщиеЯчейки = ПолучитьПолныйСписокИзмеренийОперанда(КэшДополнительныеРеквизиты,
						ИмяОперандаИАналитика.Значение,
						Ячейка.Строка,
						Ячейка.Колонка);
					
					Результат = "";
					Для Каждого Элемент Из ОбщиеЯчейки Цикл
						Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
					КонецЦикла;
					
					Ячейка.АналитикаОперандов.Вставить(ИмяОперанда, Результат);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

#КонецОбласти
	
	ИндексРасчетЗаполнение = СтруктураЯчеек.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент, РасчетЗаполнение");
	ИндексОперандов = СтруктураЯчеек.Индексы.Добавить("ОперандСтрока, ОперандКолонка");
	
	Для Каждого Ячейка Из СтруктураЯчеек Цикл
		Если Ячейка.ОсновнойЭлемент Тогда
			Ячейка.СвязанныеЯчейки = СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка);
		КонецЕсли;
		Ячейка.ИндексСтроки = СтруктураЯчеек.Индекс(Ячейка);
	КонецЦикла;
	
	СтруктураЯчеек.Индексы.Удалить(ИндексРасчетЗаполнение);
	СтруктураЯчеек.Индексы.Удалить(ИндексОперандов);
	
	КолонкиТаблицыИсточников = СтрСоединить(МассивКолонокТаблицыИсточников, ",");
	КолонкиТаблицыИсточников = "Строка, Колонка" + ?(ЗначениеЗаполнено(КолонкиТаблицыИсточников), ", ", "") + КолонкиТаблицыИсточников;
	ТаблицаИсточников = СтруктураЯчеек.Скопировать(Новый Структура("ОсновнойЭлемент", Истина), КолонкиТаблицыИсточников);
	
	ТаблицаИменИсточников = СтруктураЯчеек.СкопироватьКолонки("Строка, Колонка");
	
	ТаблицаИменИсточников.Колонки.Добавить("Измерение", ТипКолонкиСтруктурыЯчеек("ИмяОперанда"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаИменИсточников.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТипов));
	ТаблицаИменИсточников.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаИменИсточников.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаИменИсточников.Колонки.Добавить("РедактируемоеЗначение", ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	ТаблицаИменИсточников.Колонки.Добавить("ИД_Источника", ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	ТаблицаИменИсточников.Колонки.Добавить("ВидИсточника", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ТаблицаИменИсточников.Колонки.Добавить("ТипПоказателяБюджетов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипПоказателяБюджетов"));
	
	МассивКолонокИзмерений = Новый Массив;
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		МассивКолонокИзмерений.Добавить(Измерение);
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		МассивКолонокИзмерений.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиБюджетов.Ссылка,
		|	ПоказателиБюджетов.ТипПоказателя
		|ИЗ
		|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшРеквизитовПоказателя = РезультатЗапроса.Выгрузить();
	КэшРеквизитовПоказателя.Индексы.Добавить("Ссылка");
	
	ЗаполнитьТаблицуИменИсточников(МассивКолонокИзмерений, ТаблицаИменИсточников, ТаблицаИсточников, КэшРеквизитовПоказателя);
	ТаблицаИменИсточников.Индексы.Добавить("ИД_Источника");
	ТаблицаИменИсточников.Индексы.Добавить("ИД_Источника, Измерение");
	ТаблицаИменИсточников.Индексы.Добавить("НефинансовыйПоказатель, Измерение");
	
	ТаблицыИсточниковНФП = ЗаполнитьТаблицуИсточниковИзмеренийНФП(СтруктураЯчеек, МассивКолонокИзмерений, ИсточникиДанных, ВидБюджета);
	
	ОставшиесяКолонки = Новый Массив;
	ОставшиесяКолонки.Добавить("ИндексСтроки");
	
	Для Каждого Колонка Из СтруктураЯчеек.Колонки Цикл
		Если МассивОсновныхКолонок.Найти(Колонка.Имя) = Неопределено
			И МассивКолонокТаблицыИсточников.Найти(Колонка.Имя) = Неопределено Тогда
			ОставшиесяКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	МассивОсновныхКолонок.Добавить("РасчетЗаполнение");
	
	МинимальнаяСтруктураЯчеек = СтруктураЯчеек.Скопировать(,СтрСоединить(МассивОсновныхКолонок, ","));
	ПараметрыЯчеек = СтруктураЯчеек.Скопировать(,СтрСоединить(ОставшиесяКолонки, ","));
	ПараметрыЯчеек.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеек = МинимальнаяСтруктураЯчеек;
	
	СтруктураЯчеек.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка");
	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
	СтруктураЯчеек.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент"); 
	
	Результат = Новый Структура();
	Результат.Вставить("СтруктураЯчеек", СтруктураЯчеек);
	Результат.Вставить("ПараметрыЯчеек", ПараметрыЯчеек);
	Результат.Вставить("ИсточникиЗначенийИзмерений", ТаблицаИменИсточников); 
	Результат.Вставить("ЗаполнениеОтсутствующихИзмеренийНФП", ТаблицыИсточниковНФП.ТаблицаЗаполненияИзмеренийНФП);
	Результат.Вставить("ОтборИзмеренийНФП", ТаблицыИсточниковНФП.ТаблицаОтбораИзмеренийНФП);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ГенерацияСКДДляПолученияДанных

Функция ПолеНабораДанных(Набор, Поле, ПутьКДанным = "", Заголовок = "", ТипДанных = Неопределено)
	ПолеНабора =  Набор.Поля.Найти(Поле);
	Если ПолеНабора = Неопределено Тогда
		ПолеНабора = ФинансоваяОтчетностьСервер.НовоеПолеНабора(Набор, Поле, ПутьКДанным, Заголовок, ТипДанных);
	КонецЕсли;
	Возврат ПолеНабора;
КонецФункции

Процедура ДобавитьПоляТаблицыДанныхПоОписанию(Набор, Описание, ПоляРесурсов)
	
	ПолеНабораДанных(Набор, "ИД_Источника", , ,Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	ПолеНабораДанных(Набор, "СтатьяБюджетов", , ,ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ПолеНабораДанных(Набор, "ПоказательБюджетов", , ,ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	ПолеНабораДанных(Набор, "НефинансовыйПоказатель", , ,ТипКолонкиСтруктурыЯчеек("НефинансовыйПоказатель"));
	ПолеНабораДанных(Набор, "ДанныеДокумента", , ,Новый ОписаниеТипов("Булево"));
	
	Если Описание.Периодичности.Количество() Тогда
		ПолеНабораДанных(Набор, "Период", , , Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	Для Каждого Измерение Из Описание.Измерения Цикл
		ПолеНабораДанных(Набор, Измерение, , ,ТипКолонкиСтруктурыЯчеек(Измерение));
	КонецЦикла;
	
	ВсеТипыАналитик = БюджетированиеСервер.ВсеТипыАналитик();
	
	Для Каждого Аналитика Из Описание.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		ЗаголовокАналитики = Строка(Аналитика);
		ПолеНабораДанных(Набор, ИмяПоля, ИмяПоля, ЗаголовокАналитики, ВсеТипыАналитик);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПоляРесурсов Цикл
		
		Если КлючИЗначение.Ключ = "Примечание" Тогда
			ПолеНабораДанных(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Примечание"));
		ИначеЕсли КлючИЗначение.Ключ = "ЗначениеПоказателя" Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			МассивТипов.Добавить(Тип("Строка"));
			МассивТипов.Добавить(Тип("Булево"));
			МассивТипов.Добавить(Тип("Дата"));
			МассивТипов.Добавить(Тип("СправочникСсылка.СтавкиНДС"));
			ПолеНабораДанных(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(35, 6), Новый КвалификаторыСтроки(150)));
		Иначе
			ПолеНабораДанных(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Сумма"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРесурсыИВычисляемыеПоля(СКД, СтруктураКолонок, ПоляИсточников, Остатки)
	
	Если СтруктураКолонок <> Неопределено Тогда
		Периодичности = Новый Массив;
		Для Каждого Периодичность Из СтруктураКолонок.Периодичности Цикл
			Периодичности.Добавить(ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период);
		КонецЦикла;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", , "МИНИМУМ(НомерПоПорядку)");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", ,     "МАКСИМУМ(Примечание)");
	
	ПоляНабора = Новый Структура;
	ПоляНабора.Вставить("СуммаНачальныйОстаток");
	ПоляНабора.Вставить("СуммаПриход");
	ПоляНабора.Вставить("СуммаРасход");
	ПоляНабора.Вставить("СуммаВалНачальныйОстаток");
	ПоляНабора.Вставить("СуммаВалПриход");
	ПоляНабора.Вставить("СуммаВалРасход");
	ПоляНабора.Вставить("КоличествоНачальныйОстаток");
	ПоляНабора.Вставить("КоличествоПриход");
	ПоляНабора.Вставить("КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляНабора, ПоляИсточников);
	
	Для Каждого КлючИЗначение Из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовыйРесурс(СКД, КлючИЗначение.Ключ, , 	"СУММА(ЕстьNULL(" + КлючИЗначение.Ключ + ", 0))");
		КонецЕсли;
		
	КонецЦикла;
	
	Если Остатки Тогда
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаВалПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаВалРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0)) +
																				 |СУММА(ЕстьNULL(КоличествоПриход, 0)) -
																				 |СУММА(ЕстьNULL(КоличествоРасход, 0))");
		КонецЕсли;
		
	Иначе
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "0");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остатки И Периодичности.Количество() Тогда
		
		Если ПоляИсточников.Найти("СуммаНачальныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ЕстьNULL(ВычислитьВыражение(""%2"",,,""Первая"",""Предыдущая""), 0) - 
				|ЕстьNULL(ВычислитьВыражение(""%3"",,,""Первая"",""Предыдущая""), 0)";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(СуммаПриход, 0))",
				"СУММА(ЕстьNULL(СуммаРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаНачальныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалНачальныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ЕстьNULL(ВычислитьВыражение(""%2"",,,""Первая"",""Предыдущая""), 0) - 
				|ЕстьNULL(ВычислитьВыражение(""%3"",,,""Первая"",""Предыдущая""), 0)";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(СуммаВалПриход, 0))",
				"СУММА(ЕстьNULL(СуммаВалРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалНачальныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ВычислитьВыражение(""%2"",,,""Первая"",""Текущая"") - 
				|ВычислитьВыражение(""%3"",,,""Первая"",""Текущая"")";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(СуммаПриход, 0))",
				"СУММА(ЕстьNULL(СуммаРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаКонечныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ВычислитьВыражение(""%2"",,,""Первая"",""Текущая"") - 
				|ВычислитьВыражение(""%3"",,,""Первая"",""Текущая"")";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(СуммаВалПриход, 0))",
				"СУММА(ЕстьNULL(СуммаВалРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалКонечныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоНачальныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ЕстьNULL(ВычислитьВыражение(""%2"",,,""Первая"",""Предыдущая""), 0) - 
				|ЕстьNULL(ВычислитьВыражение(""%3"",,,""Первая"",""Предыдущая""), 0)";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(КоличествоПриход, 0))",
				"СУММА(ЕстьNULL(КоличествоРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоНачальныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ШаблонВыраженияРесурса = 
				"ВычислитьВыражение(""%1"",,,""Первая"",""Первая"") +
				|ВычислитьВыражение(""%2"",,,""Первая"",""Текущая"") - 
				|ВычислитьВыражение(""%3"",,,""Первая"",""Текущая"")";
			ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
				"СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))",
				"СУММА(ЕстьNULL(КоличествоПриход, 0))",
				"СУММА(ЕстьNULL(КоличествоРасход, 0))");
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоКонечныйОстаток", , ВыражениеРесурса);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаОборот", "0",,
		"СУММА(ЕстьNULL(СуммаПриход, 0)) - СУММА(ЕстьNULL(СуммаРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаВалОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалОборот", "0",,
		"СУММА(ЕстьNULL(СуммаВалПриход, 0)) - СУММА(ЕстьNULL(СуммаВалРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("КоличествоОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоОборот", "0",,
		"СУММА(ЕстьNULL(КоличествоПриход, 0)) - СУММА(ЕстьNULL(КоличествоРасход, 0))");
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ПоляНабора = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
								|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
								|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
								|СуммаОборот, СуммаВалОборот, КоличествоОборот, 
								|СуммаКонечныйОстаток, СуммаВалКонечныйОстаток, КоличествоКонечныйОстаток");
								
	Для Каждого КлючИЗначение Из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРесурсыГруппировкиПоМаксимальнойПериодичности(СКД, ПоляИсточников, ПолеПериодичности, Группировка)
	
	ПоляГруппировкиРесурсов = Новый Массив;
	Для Каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			ПоляГруппировкиРесурсов.Добавить(СокрЛП(ПолеГруппировки.Поле));
		КонецЕсли;
	КонецЦикла;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Если ПоляИсточников.Найти("СуммаНачальныйОстаток") <> Неопределено Тогда
		ШаблонВыраженияРесурса = 
			"МониторингЦелевыхПоказателей.ПолучитьПоследнееЗначениеМассива(ВычислитьВыражениеСГруппировкойМассив(""%1"",""%2""), Истина)";
		ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
			"СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))",
			ПолеПериодичности);
		НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаНачальныйОстаток", , ВыражениеРесурса);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, ПоляГруппировкиРесурсов);
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаВалНачальныйОстаток") <> Неопределено Тогда
		ШаблонВыраженияРесурса = 
			"МониторингЦелевыхПоказателей.ПолучитьПоследнееЗначениеМассива(ВычислитьВыражениеСГруппировкойМассив(""%1"",""%2""), Истина)";
		ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
			"СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))",
			ПолеПериодичности);
		НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалНачальныйОстаток", , ВыражениеРесурса);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, ПоляГруппировкиРесурсов);
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
		ШаблонВыраженияРесурса = 
			"МониторингЦелевыхПоказателей.ПолучитьПоследнееЗначениеМассива(ВычислитьВыражениеСГруппировкойМассив(""%1"",""%2""), Истина) + СУММА(ЕстьNULL(СуммаПриход, 0)) - СУММА(ЕстьNULL(СуммаРасход, 0))";
		ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
			"СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))",
			ПолеПериодичности);
		НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаКонечныйОстаток", , ВыражениеРесурса);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, ПоляГруппировкиРесурсов);
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
		ШаблонВыраженияРесурса = 
			"МониторингЦелевыхПоказателей.ПолучитьПоследнееЗначениеМассива(ВычислитьВыражениеСГруппировкойМассив(""%1"",""%2""), Истина) + СУММА(ЕстьNULL(СуммаВалПриход, 0)) - СУММА(ЕстьNULL(СуммаВалРасход, 0))";
		ВыражениеРесурса = СтрШаблон(ШаблонВыраженияРесурса, 
			"СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))",
			ПолеПериодичности);
		НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалКонечныйОстаток", , ВыражениеРесурса);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, ПоляГруппировкиРесурсов);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку полей компоновки
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - Описание:
// * Выражение - Строка -
// * Представление - Строка -
// * ВыборРеквизитов - Булево -
Процедура ДобавитьСтрокуПолейКомпоновки(Таблица, Выражение, Представление, ВыборРеквизитов = Ложь)
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Выражение = Выражение;
	СтрокаТаблицы.Представление = Представление;
	СтрокаТаблицы.ВыборРеквизитов = ВыборРеквизитов;
	
КонецПроцедуры

Процедура ДобавитьПодчиненныйНаборПоБюджетномуРегистру(ПараметрыПриемника,
												ПараметрыИсточника,
												РежимФормирования,
												РежимПолученияДанных,
												ХранимыеФактическиДанные = Ложь)
	
	СКДПлановыеДанные = ПараметрыПриемника.СКДПлановыеДанные;
	БазовыйОбъединенныйНабор = ПараметрыПриемника.БазовыйОбъединенныйНабор;
	ПараметрыКУстановке = ПараметрыПриемника.ПараметрыКУстановке;
	Источник = ПараметрыИсточника.Источник; // см. НовыйИсточник
	СтруктураКолонокТаблицыДанных = ПараметрыИсточника.СтруктураКолонокТаблицыДанных;
	Аналитики = ПараметрыИсточника.Аналитики;
	
	ДляПоказателя = (Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки);
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	#Область НСИСвязанныхПоказателей
	
	ТекстЗапросаПоляВыборки = Новый Соответствие();
	
	ТаблицаПолейКомпоновки = Новый ТаблицаЗначений();
	ТаблицаПолейКомпоновки.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	ТаблицаПолейКомпоновки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаПолейКомпоновки.Колонки.Добавить("ВыборРеквизитов", Новый ОписаниеТипов("Булево"));
	
	ТекстЗапросаНСИ = "";
	Если ДляПоказателя Тогда
		ТекстЗапросаПоляВыборки.Вставить("КоличествоИспользуемыхАналитик", "НСИ.КоличествоИспользуемыхАналитик");
		
		ТекстЗапросаНСИ = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НСИ.СтатьяБюджетов КАК СтатьяБюджетов,
		|	НСИ.СвязанныйПоказательБюджетов КАК СвязанныйПоказательБюджетов,
		|	НСИ.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
		|	&ПоляВыборкиНСИ,
		|	НСИ.Расход КАК Расход,
		|	НСИ.Коэффициент КАК Коэффициент
		|ПОМЕСТИТЬ СвязиПоказателейБюджетов
		|ИЗ
		|	РегистрСведений.СвязиПоказателейБюджетов КАК НСИ
		|ГДЕ
		|	&УсловияНСИ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяБюджетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВлияющиеСтатьи.СтатьяБюджетов КАК СтатьяБюджетов
		|ПОМЕСТИТЬ ВлияющиеСтатьи
		|ИЗ
		|	СвязиПоказателейБюджетов КАК ВлияющиеСтатьи
		|
		|СГРУППИРОВАТЬ ПО
		|	ВлияющиеСтатьи.СтатьяБюджетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяБюджетов
		|;
		|";
		
		ПоляВыборкиНСИ = "";
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			ШаблонВставки = "
			|	НСИ.СвязанныйПоказательБюджетов.ВидАналитики%1 КАК ВидАналитики%1,
			|	НСИ.ТранслироватьАналитику%1 КАК ТранслироватьАналитику%1,
			|	НСИ.Аналитика%1 КАК Аналитика%1,
			|	НСИ.АдресТрансляцииАналитики%1 КАК АдресТрансляцииАналитики%1";
			
			ПоляВыборкиНСИ = ПоляВыборкиНСИ + ?(ПоляВыборкиНСИ = "", "", "," + Символы.ПС) + СтрШаблон(ШаблонВставки, Сч);
			
			ТекстЗапросаПоляВыборки.Вставить("ВидАналитики" + Сч, "НСИ.ВидАналитики" + Сч);
			
		КонецЦикла;
		
		ТекстЗапросаНСИ = СтрЗаменить(ТекстЗапросаНСИ, "&ПоляВыборкиНСИ", ПоляВыборкиНСИ);
		
		Если Источник.Объекты <> Неопределено Тогда
			
			ИмяПараметра = "ВыбранныеПоказателиБюджетов" + Источник.Идентификатор;
			УсловияНСИ = СтрШаблон("НСИ.СвязанныйПоказательБюджетов В (&%1)", ИмяПараметра);
			
 			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Источник.Объекты);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		Иначе
			УсловияНСИ = "ИСТИНА";
		КонецЕсли;
		
		ТекстЗапросаНСИ = СтрЗаменить(ТекстЗапросаНСИ, "&УсловияНСИ", УсловияНСИ);
		
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ПолучениеДанныхСТрансляциейАналитик
	
	Если ДляПоказателя Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ПоляВыборки
		|ИЗ
		|	&ИсточникДанных КАК Данные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвязиПоказателейБюджетов КАК НСИ
		|	ПО НСИ.СтатьяБюджетов = Данные.СтатьяБюджетов";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ПоляВыборки
		|ИЗ
		|		&ИсточникДанных КАК Данные";
	КонецЕсли;
	
	ТекстЗапросаПоляВыборки.Вставить("ИД_Источника", """" + Источник.Идентификатор + """");
	ТекстЗапросаПоляВыборки.Вставить("СтатьяБюджетов", "Данные.СтатьяБюджетов");
	Если ДляПоказателя Тогда
		ТекстЗапросаПоляВыборки.Вставить("ПоказательБюджетов", "НСИ.СвязанныйПоказательБюджетов");
		ТекстЗапросаПоляВыборки.Вставить("УчитыватьПоВалюте", "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоВалюте");
		ТекстЗапросаПоляВыборки.Вставить("ВалютаОпределяетсяАналитикой", "НСИ.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой");
		ТекстЗапросаПоляВыборки.Вставить("АдресАналитикиВалюта", "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиВалюта");
		ТекстЗапросаПоляВыборки.Вставить("ИсточникЗаполненияВалюты", "НСИ.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты");
	Иначе
		ТекстЗапросаПоляВыборки.Вставить("ПоказательБюджетов", "НЕОПРЕДЕЛЕНО");
		ТекстЗапросаПоляВыборки.Вставить("УчитыватьПоВалюте", "Данные.СтатьяБюджетов.УчитыватьПоВалюте");
		ТекстЗапросаПоляВыборки.Вставить("ВалютаОпределяетсяАналитикой", "Данные.СтатьяБюджетов.ВалютаОпределяетсяАналитикой");
		ТекстЗапросаПоляВыборки.Вставить("АдресАналитикиВалюта", "Данные.СтатьяБюджетов.АдресАналитикиВалюта");
		ТекстЗапросаПоляВыборки.Вставить("ИсточникЗаполненияВалюты", "Данные.СтатьяБюджетов.АналитикаВалюты.ЗаполнениеВалюты");
	КонецЕсли;
	
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ИД_Источника",
			"ИД_Источника");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ПоказательБюджетов",
			"ПоказательБюджетов",
			Истина);
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"СтатьяБюджетов",
			"СтатьяБюджетов",
			Истина);
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"УчитыватьПоВалюте",
			"УчитыватьПоВалюте");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ВалютаОпределяетсяАналитикой",
			"ВалютаОпределяетсяАналитикой");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"АдресАналитикиВалюта",
			"АдресАналитикиВалюта");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ИсточникЗаполненияВалюты",
			"ИсточникЗаполненияВалюты");
		
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		Если ДляПоказателя Тогда
			ТекстЗапросаПоляВыборки.Вставить("УчитыватьПоКоличеству", "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству");
			ТекстЗапросаПоляВыборки.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой");
			ТекстЗапросаПоляВыборки.Вставить("АдресАналитикиКоличество", "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиКоличество");
			ТекстЗапросаПоляВыборки.Вставить("ИсточникЗаполнениеЕдиницыИзмерения", "НСИ.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения");
			ТекстЗапросаПоляВыборки.Вставить("ЕдиницаИзмерения", "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмерения");
		Иначе
			ТекстЗапросаПоляВыборки.Вставить("УчитыватьПоКоличеству", "Данные.СтатьяБюджетов.УчитыватьПоКоличеству");
			ТекстЗапросаПоляВыборки.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", "Данные.СтатьяБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой");
			ТекстЗапросаПоляВыборки.Вставить("АдресАналитикиКоличество", "Данные.СтатьяБюджетов.АдресАналитикиКоличество");
			ТекстЗапросаПоляВыборки.Вставить("ИсточникЗаполнениеЕдиницыИзмерения", "Данные.СтатьяБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения");
			ТекстЗапросаПоляВыборки.Вставить("ЕдиницаИзмерения", "Данные.СтатьяБюджетов.ЕдиницаИзмерения");
		КонецЕсли;
		
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"УчитыватьПоКоличеству",
			"УчитыватьПоКоличеству");
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ЕдиницаИзмеренияОпределяетсяАналитикой",
			"ЕдиницаИзмеренияОпределяетсяАналитикой");
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"АдресАналитикиКоличество",
			"АдресАналитикиКоличество");
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ИсточникЗаполнениеЕдиницыИзмерения",
			"ИсточникЗаполнениеЕдиницыИзмерения");
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"ЕдиницаИзмерения",
			"ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ХранимыеФактическиДанные Тогда
		Если ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
			ВыражениеПоляСценарий = "ВЫБОР КОГДА Правило.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) ТОГДА ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КОНЕЦ";
		Иначе
			ВыражениеПоляСценарий = "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)";
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("Сценарий") = Неопределено Тогда
		Если ХранимыеФактическиДанные Тогда
			ТекстЗапросаПоляВыборки.Вставить("Сценарий", ВыражениеПоляСценарий);
		Иначе
			ТекстЗапросаПоляВыборки.Вставить("Сценарий", "Данные.Сценарий");
		КонецЕсли;
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
				"Сценарий",
				"Сценарий",
				Истина);
	КонецЕсли;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		Если Не СтрНайти(Измерение, "Аналитика") Тогда
			Если Измерение = "ЕдиницаИзмерения" Тогда
				// Единицы измерения формируются на уровне
				// общей компоновки.
			ИначеЕсли Измерение = "Сценарий" И ХранимыеФактическиДанные Тогда
				ТекстЗапросаПоляВыборки.Вставить("Сценарий", ВыражениеПоляСценарий);
				ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
					"Сценарий",
					"Сценарий",
					Истина);
			ИначеЕсли Измерение = "Валюта" Тогда
				Если ХранимыеФактическиДанные Тогда
					ТекстЗапросаПоляВыборки.Вставить("ВалютаХранения",
						"ВЫБОР КОГДА Данные.СуммаВВалютеОборот <> 0 ТОГДА Данные.Валюта ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ");
				Иначе
					ТекстЗапросаПоляВыборки.Вставить("ВалютаХранения", "Данные.Валюта");
				КонецЕсли;
				ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
					"ВалютаХранения",
					"ВалютаХранения");
			Иначе
				ТекстЗапросаПоляВыборки.Вставить(Измерение, "Данные." + Измерение);
				ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
					Измерение,
					Измерение,
					Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Для показателей выводим все аналитики для расчета валюты.
	ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции();
	ПараметрыВыражения.ВыражениеТранслироватьАналитикуБезИндекса = "НСИ.ТранслироватьАналитику";
	ПараметрыВыражения.ВыражениеАдресТрансляцииАналитикиБезИндекса = "НСИ.АдресТрансляцииАналитики";
	ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = "Данные.Аналитика";
	ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = "НСИ.Аналитика";
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		Если ДляПоказателя Тогда
			Выражение = БюджетированиеСервер.ТекстПоляАналитикиПоАдресамТрансляции(ПараметрыВыражения, Сч);
		Иначе
			Выражение = "Данные.Аналитика" + Сч;
		КонецЕсли;
		ТекстЗапросаПоляВыборки.Вставить("Аналитика" + Сч, Выражение);
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"Аналитика" + Сч,
			"Аналитика" + Сч,
			Истина);
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		Если ХранимыеФактическиДанные Тогда
			ВыражениеПериодичности = СтрЗаменить(Источник.ВыражениеПериодаГруппировки, "ПериодПланирования", "ПериодДень");
		Иначе
			ВыражениеПериодичности = Источник.ВыражениеПериодаГруппировки;
		КонецЕсли;
		
		ТекстЗапросаПоляВыборки.Вставить("Период", ВыражениеПериодичности);
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"Период",
			"Период");
		
	КонецЕсли;
	
	Для Каждого Аналитика Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПараметра = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		
		ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПараметра;
		ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Аналитика);
		
		ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
		Если ДляПоказателя Тогда
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "НСИ.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "НСИ.СвязанныйПоказательБюджетов.ВидАналитики";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ВыражениеЗаменаАналитики";
			ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
		Иначе
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "Данные.СтатьяБюджетов.ВидАналитики";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Данные.Аналитика";
			ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
		КонецЕсли;
			
		ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
			
		Если ДляПоказателя Тогда
			
			ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции();
			ПараметрыВыражения.ВыражениеТранслироватьАналитикуБезИндекса = "НСИ.ТранслироватьАналитику";
			ПараметрыВыражения.ВыражениеАдресТрансляцииАналитикиБезИндекса = "НСИ.АдресТрансляцииАналитики";
			ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = "Данные.Аналитика";
			ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = "НСИ.Аналитика";
				
			Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
				ТекстПоля = СтрЗаменить(ТекстПоля,
						"ВыражениеЗаменаАналитики" + Сч,
						БюджетированиеСервер.ТекстПоляАналитикиПоАдресамТрансляции(ПараметрыВыражения, Сч));
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстЗапросаПоляВыборки.Вставить(ИмяПараметра, ТекстПоля);
		ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			ИмяПараметра,
			ИмяПараметра);
			
	КонецЦикла;
	
	ТекстПоказателя = "
		|ВЫБОР
		|	КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр) ТОГДА
		|		СуммаУпрОборот
		|	КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл) ТОГДА
		|		СуммаРеглОборот
		|КОНЕЦ";
	
	Если НЕ ДляПоказателя Тогда
		
		ТекстЗапросаПоляВыборки.Вставить("СуммаПриход", ТекстПоказателя);
		ТекстЗапросаПоляВыборки.Вставить("СуммаРасход", "0");
		ТекстЗапросаПоляВыборки.Вставить("СуммаВалХраненияПриход", "СуммаВВалютеОборот");
		ТекстЗапросаПоляВыборки.Вставить("СуммаВалХраненияРасход", "0");
		ТекстЗапросаПоляВыборки.Вставить("КоличествоПриход", "КоличествоОборот");
		ТекстЗапросаПоляВыборки.Вставить("КоличествоРасход", "0");
		
	Иначе
		
		Выражение = "ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ";
		ТекстЗапросаПоляВыборки.Вставить("СуммаПриход", Выражение);
		
		Выражение = "ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ";
		ТекстЗапросаПоляВыборки.Вставить("СуммаРасход", Выражение);
		
		ТекстЗапросаПоляВыборки.Вставить("СуммаВалХраненияПриход", "ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ");
		ТекстЗапросаПоляВыборки.Вставить("СуммаВалХраненияРасход", "ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ");
		ТекстЗапросаПоляВыборки.Вставить("КоличествоПриход", "ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ");
		ТекстЗапросаПоляВыборки.Вставить("КоличествоРасход", "ВЫБОР КОГДА НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ");
		
	КонецЕсли;
	
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"СуммаПриход",
			"СуммаПриход");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"СуммаРасход",
			"СуммаРасход");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"СуммаВалХраненияПриход",
			"СуммаВалХраненияПриход");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"СуммаВалХраненияРасход",
			"СуммаВалХраненияРасход");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"КоличествоПриход",
			"КоличествоПриход");
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки,
			"КоличествоРасход",
			"КоличествоРасход");
	
	ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейКомпоновки, "ПериодКурса", "ПериодКурса");
	ТекстЗапросаПоляВыборки.Вставить("ПериодКурса", "Данные.ПериодДень");
	
	Если ХранимыеФактическиДанные Тогда
		ПериодичностьТаблицы = "АВТО";
		ТекстИсточникаДанных = "РегистрНакопления.ФактическиеДанныеБюджетирования.Обороты(
			|		{&ВыражениеНачалоПериода КАК НачалоПериода_},
			|		{&ВыражениеКонецПериода КАК КонецПериода_},
			|		&ПериодичностьТаблицы,
			|		&УсловияПоТаблицеИсточникаИПоляКомпановки)
			|";
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ВыражениеНачалоПериода", Источник.ВыражениеНачалоПериода);
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ВыражениеКонецПериода", Источник.ВыражениеКонецПериода);
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ПериодичностьТаблицы", ПериодичностьТаблицы);
	Иначе
		ПериодичностьТаблицы = "АВТО";
		ТекстИсточникаДанных = "РегистрНакопления.ОборотыБюджетов.Обороты(
			|		{&ПустаяДата}, 
			|		{&ДатаАктуальности}, &ПериодичностьТаблицы,
			|			ПериодПланирования МЕЖДУ &ВыражениеНачалоПериода И &ВыражениеКонецПериода
			|			И &УсловияПоТаблицеИсточникаИПоляКомпановки)
			|";
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ВыражениеНачалоПериода", Источник.ВыражениеНачалоПериода);
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ВыражениеКонецПериода", Источник.ВыражениеКонецПериода);
		ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&ПериодичностьТаблицы", ПериодичностьТаблицы);
	КонецЕсли;
	
	УсловияПоТаблицеИсточника = Новый Массив;
	УсловияКомпоновкиВиртуальнойТаблицы = Новый Массив;
	
	Если Источник.Объекты <> Неопределено Тогда
		
		Если ДляПоказателя Тогда
			Выражение = "СтатьяБюджетов В 
			|	(ВЫБРАТЬ
			|		ВлияющиеСтатьи.СтатьяБюджетов
			|	ИЗ
			|		ВлияющиеСтатьи)";
			УсловияПоТаблицеИсточника.Добавить(Выражение);
		Иначе
			ИмяПараметра = "ВыбранныеСтатьиБюджетов" + Источник.Идентификатор;
			Выражение = "СтатьяБюджетов В (&" + ИмяПараметра + ")";
			УсловияПоТаблицеИсточника.Добавить(Выражение);
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Источник.Объекты);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ОтборПоИзмерениям = Неопределено;
		Если Измерение = "ЕдиницаИзмерения" Тогда
			// Единицы измерения формируются на уровне
			// общей компоновки.
			Продолжить;
		КонецЕсли;
		Если ХранимыеФактическиДанные И Измерение = "Сценарий" Тогда
			Продолжить;
		КонецЕсли;
		Если Источник.Свойство(Измерение, ОтборПоИзмерениям)
			И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
			
			ИмяПараметра = "Выбранные" + Измерение + Источник.Идентификатор;
			Выражение = "" + Измерение + " " + "В (&" + ИмяПараметра + ")";
			УсловияПоТаблицеИсточника.Добавить(Выражение);
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ДляПоказателя Тогда 
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			ОтборПоИзмерениям = Неопределено;
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			Если Источник.Свойство(ИмяАналитики, ОтборПоИзмерениям)
				И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
				
				ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяАналитики;
				ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Измерение);
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "СтатьяБюджетов.КоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "СтатьяБюджетов.ВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				
				ТекстАналитики = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
				
				ИмяПараметра = "Выбранные" + ИмяАналитики + Источник.Идентификатор;
				
				Выражение = "" + ТекстАналитики + " " + "В (&" + ИмяПараметра + ")";
				УсловияПоТаблицеИсточника.Добавить(Выражение);
				
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
				ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ХранимыеФактическиДанные Тогда
		УсловияКомпоновкиВиртуальнойТаблицы.Добавить("(Статус).* КАК Статус");
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, ВалютаХранения, Подразделение");
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		СтруктураОтборов.Вставить("Аналитика" + Сч);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ,, Истина) Тогда
			Если ХранимыеФактическиДанные Тогда
				Если КлючИЗначение.Ключ = "Сценарий" Тогда
					Выражение = "(ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)).* КАК" + " " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
					УсловияКомпоновкиВиртуальнойТаблицы.Добавить(Выражение);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если КлючИЗначение.Ключ = "ВалютаХранения" Тогда
				Выражение = "(Валюта).* КАК" + " " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
				УсловияКомпоновкиВиртуальнойТаблицы.Добавить(Выражение);
				Продолжить;
			КонецЕсли;
			
			Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(%1).* КАК %1_%2",
				КлючИЗначение.Ключ,
				Источник.Идентификатор);
			УсловияКомпоновкиВиртуальнойТаблицы.Добавить(Выражение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Отбор по значению аналитики в параметрах виртуальной таблицы возможен только для оборотов.
	Если Не ДляПоказателя Тогда
		Для Каждого Аналитика Из Аналитики Цикл
			
			ИмяПараметра = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяПараметра,, Истина) Тогда
				
				ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПараметра;
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "СтатьяБюджетов.КоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "СтатьяБюджетов.ВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				
				ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
				
				Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"(%1).* КАК %2_%3",
					ТекстПоля,
					ИмяПараметра,
					Источник.Идентификатор);
				УсловияКомпоновкиВиртуальнойТаблицы.Добавить(Выражение);
				
				ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Аналитика);
				ДобавитьПараметрСхемы(СКДПлановыеДанные, ИмяПараметраВидаАналитики);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если УсловияПоТаблицеИсточника.Количество() = 0 Тогда
		УсловияПоТаблицеИсточникаИПоляКомпановки = "ИСТИНА";
	Иначе
		РазделительИ = Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + " И ";
		УсловияПоТаблицеИсточникаИПоляКомпановки = СтрСоединить(УсловияПоТаблицеИсточника, РазделительИ);
	КонецЕсли;
	Если УсловияКомпоновкиВиртуальнойТаблицы.Количество() > 0 Тогда
		Выражение = СтрСоединить(УсловияКомпоновкиВиртуальнойТаблицы, ", ");
		УсловияПоТаблицеИсточникаИПоляКомпановки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 {%2}",
			УсловияПоТаблицеИсточникаИПоляКомпановки,
			Выражение);
	КонецЕсли;
	ТекстИсточникаДанных = СтрЗаменить(ТекстИсточникаДанных, "&УсловияПоТаблицеИсточникаИПоляКомпановки", УсловияПоТаблицеИсточникаИПоляКомпановки);
	
	ПоляВыборки = "";
	Для Каждого СинонимИВыражение Из ТекстЗапросаПоляВыборки Цикл
		ПоляВыборки = ПоляВыборки + ?(ПоляВыборки = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 КАК %2",
				СинонимИВыражение.Значение,
				СинонимИВыражение.Ключ);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ТекстИсточникаДанных);
	
	Если НЕ ХранимыеФактическиДанные И 
		(РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
		ТекстЗапросаИсключения = ТекстЗапроса;
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ", АВТО ,", ", Регистратор ,");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ТекстПоказателя, "-" + ТекстПоказателя);
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "СуммаВВалютеОборот", "-СуммаВВалютеОборот");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "КоличествоОборот", "-КоличествоОборот");
		
		ТекстЗапросаИсключения = ТекстЗапросаИсключения + "
		|ГДЕ Регистратор = &Документ";
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС + ТекстЗапросаИсключения;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ДополнительныйОтборДанных
	
	ЗапросИсточник = ТекстЗапроса;
	ТекстЗапроса = ТекстЗапросаНСИ + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	* 
	|ИЗ
	|	&ЗапросИсточник КАК ПредварительныйРасчет
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗапросИсточник", "(" + ЗапросИсточник + ")");
	
	ТаблицаПолейУсловияКомпоновки = Новый ТаблицаЗначений();
	ТаблицаПолейУсловияКомпоновки.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	ТаблицаПолейУсловияКомпоновки.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ТаблицаПолейУсловияКомпоновки.Колонки.Добавить("ВыборРеквизитов", Новый ОписаниеТипов("Булево"));
	
	
	// Дополнительный отбор с учетом трансляции аналитик из статьи в показатель
	Если ДляПоказателя Тогда
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			ОтборПоИзмерениям = Неопределено;
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			Если Источник.Свойство(ИмяАналитики, ОтборПоИзмерениям)
				И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
				
				ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяАналитики;
				ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Измерение);
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "ПредварительныйРасчет.КоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ПредварительныйРасчет.ВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ПредварительныйРасчет.Аналитика";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				
				ТекстАналитики = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
				
				ИмяПараметра = "Выбранные" + ИмяАналитики + Источник.Идентификатор;
				
				Выражение = СтрШаблон("%1 В (&%2)", ТекстАналитики, ИмяПараметра);
				ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейУсловияКомпоновки, Выражение, "");
				
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
				ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Аналитика Из Аналитики Цикл
			
			ИмяПараметра = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяПараметра,, Истина) Тогда
				
				ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПараметра;
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "ПредварительныйРасчет.КоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ПредварительныйРасчет.ВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ПредварительныйРасчет.Аналитика";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				
				ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
				
				ДобавитьСтрокуПолейКомпоновки(ТаблицаПолейУсловияКомпоновки,
						ТекстПоля,
						ИмяПараметра + "_" + Источник.Идентификатор);
				
				ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Аналитика);
				ДобавитьПараметрСхемы(СКДПлановыеДанные, ИмяПараметраВидаАналитики);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные Тогда
		ТекстЗапроса = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(ТекстЗапроса, Ложь);
	КонецЕсли;
	Если ТаблицаПолейКомпоновки.Количество() > 0
		ИЛИ ТаблицаПолейУсловияКомпоновки.Количество() > 0 Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		ИндексПакета = ?(ТекстЗапросаНСИ = "", 0, 2);
		ИзменяемыйЗапрос = СхемаЗапроса.ПакетЗапросов.Получить(ИндексПакета);
		Если ТипЗнч(ИзменяемыйЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			ВызватьИсключение НСтр("ru = 'Невозможно добавить поля в запрос уничтожения таблицы.';
									|en = 'Cannot add fields to the table removal query.'"); 
		КонецЕсли;
		
		Для Каждого СтрокаКД Из ТаблицаПолейКомпоновки Цикл
			ПолеКД = ИзменяемыйЗапрос.ПоляВыбораКомпоновкиДанных.Добавить(СтрокаКД.Выражение); // ПолеВыбораКомпоновкиДанныхСхемыЗапроса -
			ПолеКД.Псевдоним = СтрокаКД.Представление;
			ПолеКД.ИспользоватьРеквизиты = СтрокаКД.ВыборРеквизитов;
		КонецЦикла;
		
		ОператорВыбрать = ИзменяемыйЗапрос.Операторы.Получить(0);
		Для Каждого СтрокаКД Из ТаблицаПолейУсловияКомпоновки Цикл
			ПолеКД = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(СтрокаКД.Выражение); // ВыражениеОтбораКомпоновкиДанныхСхемыЗапроса
			ПолеКД.Псевдоним = СтрокаКД.Представление;
			ПолеКД.ИспользоватьРеквизиты = СтрокаКД.ВыборРеквизитов;
		КонецЦикла;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	#КонецОбласти 
	
	ТипИсточника = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	Если ХранимыеФактическиДанные Тогда
		Имя = "Набор_Факт_Обороты_" + Источник.Идентификатор;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК НачалоПериода_", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК КонецПериода_", "");
	Иначе
		Имя = "Набор_План_Обороты_" + Источник.Идентификатор;
	КонецЕсли;
	НаборСКД = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(БазовыйОбъединенныйНабор, ТипИсточника, Имя);
	НаборСКД.Запрос = ТекстЗапроса;
	
КонецПроцедуры

Процедура УдалитьИзСтруктурыНеиспользуемыеКлючи(Структура, МассивДоступных)
	
	КУдалению = Новый Массив;
	Для Каждого КлючиИЗначение Из Структура Цикл
		Если МассивДоступных.Найти(КлючиИЗначение.Ключ) = Неопределено Тогда
			КУдалению.Добавить(КлючиИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из КУдалению Цикл
		Структура.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ИсточникиДанных - Массив из см. НовыйИсточник -
// 	ПоляИсточников - ТаблицаЗначений -
// 	СтруктураКолонокТаблицыДанных - Произвольный, Булево, Структура, Неопределено - Описание:
// * ВидыАналитик - Массив -
// * Измерения - Массив -
// * Периодичности - Массив -
// 	Аналитики - Массив - Описание
// 	ПараметрыКУстановке - Структура - Описание
// 	РежимыФормирования - Структура - Описание:
// * ПривилегированныйРежим - Булево -
// * РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// * РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования -
// Возвращаемое значение:
// 	СхемаКомпоновкиДанных -
Функция ПолучитьСКДПлановыеДанные(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, Аналитики, ПараметрыКУстановке, РежимыФормирования)
	
	РежимФормирования = РежимыФормирования.РежимФормирования;
	РежимПолученияДанных = РежимыФормирования.РежимПолученияДанных;
	Если РежимыФормирования.Свойство("ПривилегированныйРежим") Тогда 
		ПривилегированныйРежим = РежимыФормирования.ПривилегированныйРежим;
	Иначе
		ПривилегированныйРежим = Ложь;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДПлановыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКДПлановыеДанные,
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"),
		"Данные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	// заполнение наборов - источников данных
	Для Каждого Источник Из ИсточникиДанных Цикл
		
		Если Источник.ПривилегированныйРежим = Неопределено И ПривилегированныйРежим 
			ИЛИ (Не Источник.ПривилегированныйРежим = Неопределено И Не Источник.ПривилегированныйРежим = ПривилегированныйРежим) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты
			ИЛИ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
			
			ПараметрыПриемника = Новый Структура;
			ПараметрыПриемника.Вставить("СКДПлановыеДанные", СКДПлановыеДанные);
			ПараметрыПриемника.Вставить("БазовыйОбъединенныйНабор", БазовыйОбъединенныйНабор);
			ПараметрыПриемника.Вставить("ПараметрыКУстановке", ПараметрыКУстановке);
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("Источник", Источник);
			ПараметрыИсточника.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
			ПараметрыИсточника.Вставить("Аналитики", Аналитики);
			
			ДобавитьПодчиненныйНаборПоБюджетномуРегистру(ПараметрыПриемника,
				ПараметрыИсточника,
				РежимФормирования,
				РежимПолученияДанных);
			
			ДополнительныйОтбор = Источник.ДополнительныйОтбор;
			Если ДополнительныйОтбор <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор,
						СКДПлановыеДанные.НастройкиПоУмолчанию.Отбор,
						Истина,,
						"_" + Источник.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяПериода = "Неопределено";
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ИмяПериода = "Период";
	КонецЕсли;
	
	ВыражениеВычисляемогоПоля =
	"ВЫБОР КОГДА НЕ УчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОГДА НЕ ЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
	|			&КэшЗначенийАналитик,
	|			%1,
	|			ИсточникЗаполнениеЕдиницыИзмерения), ""Справочник.УпаковкиЕдиницыИзмерения"")
	|	КОНЕЦ";
	ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
		ВыражениеВычисляемогоПоля,
		"АдресАналитикиКоличество",
		"Аналитика",
		Неопределено,
		3);
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные,
		"ЕдиницаИзмерения",
		ВыражениеВычисляемогоПоля,,,
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ВыражениеВычисляемогоПоля =
	"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
	|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА ВалютаХранения
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
	|			&КэшЗначенийАналитик,
	|			%1, 
	|			ИсточникЗаполненияВалюты,
	|			ВалютаХранения), ""Справочник.Валюты"")
	|	КОНЕЦ";
	ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
		ВыражениеВычисляемогоПоля,
		"АдресАналитикиВалюта",
		"Аналитика",
		Неопределено,
		3);
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные,
		"Валюта",
		ВыражениеВычисляемогоПоля,,,
		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
	ФинОтчеты.НовоеВычисляемоеПоле(
		СКДПлановыеДанные, "ВалютаХранения", ВыражениеВычисляемогоПоля,,, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если ПоляРесурсов.Свойство("СуммаВалПриход") Тогда
		
		ТипДенежный = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТипРазрядность = ТипДенежный.КвалификаторыЧисла.Разрядность;
		ТипРазрядностьДробЧасти = ТипДенежный.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияПриход
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияПриход,
		|								%ИмяПериода%,
		|								ВалютаХранения,
		|								Сценарий,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								%1,
		|								ИсточникЗаполненияВалюты), ""Число(%ТипРазрядность, %ТипРазрДробЧасти)"")
		|	КОНЕЦ";
		
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля, "%ИмяПериода%", ИмяПериода);
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрядность",
				Формат(ТипРазрядность, "ЧН=0; ЧГ=0;"));
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрДробЧасти",
				Формат(ТипРазрядностьДробЧасти, "ЧН=0; ЧГ=0;"));
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиВалюта",
			"Аналитика",
			Неопределено,
			8);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные,
			"СуммаВалПриход",
			ВыражениеВычисляемогоПоля,,,
			ТипДенежный);
	КонецЕсли;
		
	Если ПоляРесурсов.Свойство("СуммаВалРасход") Тогда
		
		ТипДенежный = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТипРазрядность = ТипДенежный.КвалификаторыЧисла.Разрядность;
		ТипРазрядностьДробЧасти = ТипДенежный.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияРасход
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияРасход,
		|								%ИмяПериода%,
		|								ВалютаХранения,
		|								Сценарий,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								%1,
		|								ИсточникЗаполненияВалюты), ""Число(%ТипРазрядность, %ТипРазрДробЧасти)"")
		|	КОНЕЦ";
		
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля, "%ИмяПериода%", ИмяПериода);
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрядность",
				Формат(ТипРазрядность, "ЧН=0; ЧГ=0;"));
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрДробЧасти",
				Формат(ТипРазрядностьДробЧасти, "ЧН=0; ЧГ=0;"));
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиВалюта",
			"Аналитика",
			Неопределено,
			8);
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные,
			"СуммаВалРасход",
			ВыражениеВычисляемогоПоля,,,
			ТипДенежный);
	
	КонецЕсли;
	
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "НачалоПериода");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КонецПериода");
	
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшПлановыхКурсов");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшЗначенийАналитик");
	
	// настройка СКД
	Для Каждого КлючИЗначение Из ПоляРесурсов Цикл
		ФинОтчеты.НовыйРесурс(СКДПлановыеДанные, КлючИЗначение.Ключ, , 		"СУММА(" + КлючИЗначение.Ключ + ")");
		ФинОтчеты.НовоеПолеВыбора(СКДПлановыеДанные.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ГруппировкаПлановых = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДПлановыеДанные, СтруктураКолонокТаблицыДанных);
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "ВалютаХранения");
	ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "ПериодКурса");
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(СКДПлановыеДанные.НастройкиПоУмолчанию);
	
	Возврат СКДПлановыеДанные;
	
КонецФункции

// Получает факт. данные СКД
// 
// Параметры:
// 	ИсточникиДанных - Массив из см. НовыйИсточник -
// 	ПоляИсточников - ТаблицаЗначений - Описание
// 	СтруктураКолонокТаблицыДанных - Произвольный, Булево, Структура, Неопределено - Описание:
// * ВидыАналитик - Массив -
// * Измерения - Массив -
// * Периодичности - Массив -
// 	Аналитики - Массив - Описание
// 	ПараметрыКУстановке - Структура - Описание
// 	РежимыФормирования - Структура - Описание:
// * РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// * РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - 
// Возвращаемое значение:
// 	СхемаКомпоновкиДанных - Описание
Функция ПолучитьСКДФактическиеДанные(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, Аналитики, ПараметрыКУстановке, РежимыФормирования)
	
	РежимФормирования = РежимыФормирования.РежимФормирования;
	РежимПолученияДанных = РежимыФормирования.РежимПолученияДанных;
	Если РежимыФормирования.Свойство("ПривилегированныйРежим") Тогда 
		ПривилегированныйРежим = РежимыФормирования.ПривилегированныйРежим;
	Иначе
		ПривилегированныйРежим = Ложь;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДФактическиеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКДФактическиеДанные,
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"),
		"Данные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	// заполнение наборов - источников данных
	Для Каждого Источник Из ИсточникиДанных Цикл
		
		// Только для хранимого факта. Хранимый факт не подразумевает исполнение бюджета.
		Если Источник.ПредполагаетФактическиеДанные = "НеПредполагается" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ПривилегированныйРежим = Неопределено И ПривилегированныйРежим 
			ИЛИ Не Источник.ПривилегированныйРежим = ПривилегированныйРежим Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты
		 ИЛИ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
			
			ПараметрыПриемника = Новый Структура;
			ПараметрыПриемника.Вставить("СКДПлановыеДанные",        СКДФактическиеДанные);
			ПараметрыПриемника.Вставить("БазовыйОбъединенныйНабор", БазовыйОбъединенныйНабор);
			ПараметрыПриемника.Вставить("ПараметрыКУстановке",      ПараметрыКУстановке);
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("Источник",                      Источник);
			ПараметрыИсточника.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
			ПараметрыИсточника.Вставить("Аналитики",                     Аналитики);
			
			ДобавитьПодчиненныйНаборПоБюджетномуРегистру(ПараметрыПриемника,
			                                             ПараметрыИсточника,
			                                             РежимФормирования,
			                                             РежимПолученияДанных,
			                                             Истина);
			
			ДополнительныйОтбор = Источник.ДополнительныйОтбор;
			Если ДополнительныйОтбор <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор,
				                                            СКДФактическиеДанные.НастройкиПоУмолчанию.Отбор,
				                                            Истина,
				                                            ,
				                                            "_" + Источник.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыражениеВычисляемогоПоля =
	"ВЫБОР КОГДА НЕ УчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ЕдиницаИзмерения
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик,
		|			%1, 
		|			ИсточникЗаполнениеЕдиницыИзмерения), ""Справочник.УпаковкиЕдиницыИзмерения"")
		|	КОНЕЦ";
	ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиКоличество",
			"Аналитика",
			Неопределено,
			3);
	ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные,
	                               "ЕдиницаИзмерения",
	                               ВыражениеВычисляемогоПоля,,,
	                               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "Валюта", "ВалютаХранения");
	
	Если ПоляРесурсов.Свойство("СуммаВалПриход") Тогда
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "СуммаВалПриход", "СуммаВалХраненияПриход");
		
	КонецЕсли;
	
	Если ПоляРесурсов.Свойство("СуммаВалРасход") Тогда
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "СуммаВалРасход", "СуммаВалХраненияРасход");
		
	КонецЕсли;
	
	ДобавитьПараметрСхемы(СКДФактическиеДанные, "НачалоПериода");
	ДобавитьПараметрСхемы(СКДФактическиеДанные, "КонецПериода");
	
	ДобавитьПараметрСхемы(СКДФактическиеДанные, "КэшЗначенийАналитик");
	
	// настройка СКД
	Для Каждого КлючИЗначение Из ПоляРесурсов Цикл
		ФинОтчеты.НовыйРесурс(СКДФактическиеДанные, КлючИЗначение.Ключ, , "СУММА(" + КлючИЗначение.Ключ + ")");
		ФинОтчеты.НовоеПолеВыбора(СКДФактическиеДанные.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ГруппировкаПлановых = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДФактическиеДанные, СтруктураКолонокТаблицыДанных);
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "ВалютаХранения");
	ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "ПериодКурса");
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(СКДФактическиеДанные.НастройкиПоУмолчанию);
	
	Возврат СКДФактическиеДанные;
	
КонецФункции

Функция ДобавитьПоляИтоговойТаблицыПоОписанию(СКД, СтруктураКолонокТаблицыДанных)
	
	ИзмеренияРасчета = Новый Структура;
	ИзмеренияРасчета.Вставить("СтатьяБюджетов");
	ИзмеренияРасчета.Вставить("ПоказательБюджетов");
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ИзмеренияРасчета.Вставить(Измерение);
	КонецЦикла;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ИзмеренияРасчета.Вставить(ИмяИзмерения);
	КонецЦикла;
	
	НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	
	Для Каждого КлючИЗначение Из ИзмеренияРасчета Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКДИтоговыеДанные,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"Данные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоНачальныйОстаток");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	ПоляРесурсов.Вставить("ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); 
	ПоляРесурсов.Вставить("Примечание");
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	БазовыйОбъединенныйНабор.ИмяОбъекта = "ПредварительныйРасчет";
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ТипизироватьКолонкиАналитики(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	
	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Истина);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	МаксимальнаяПериодичность = Истина;
	
	Для Каждого СтрокаПериодичности Из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПериода     = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Измерение);
		КолонкаПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).Период;
		
		Если МаксимальнаяПериодичность Тогда
			ДобавитьРесурсыГруппировкиПоМаксимальнойПериодичности(СКДИтоговыеДанные, ПоляИсточников, КолонкаПериода, НоваяГруппировка);
			МаксимальнаяПериодичность = Ложь;
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = КолонкаПериода;

		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, &ИмяПериода) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, &ИмяПериода)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, &ИмяПериода)";
		КонецЕсли;
		НовоеВычисляемоеПоле.Выражение = СтрЗаменить(НовоеВычисляемоеПоле.Выражение, "&ИмяПериода", """" + ИмяПериода + """");
		
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, КолонкаПериода);
		ФинОтчеты.НовыйПорядок(ГруппировкаПериода, КолонкаПериода);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 По ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолонкаПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).Период;
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, КолонкаПериода);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных(ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период);
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила, ЕстьПривилегированныйРежим)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКДИтоговыеДанные,
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"),
		"Данные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоНачальныйОстаток");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	ПоляРесурсов.Вставить("ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); 
	ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ТипизироватьКолонкиАналитики(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);

	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ПлановыеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		БазовыйОбъединенныйНабор,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ПлановыеДанные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); 
	ПоляРесурсов.Вставить("Примечание");
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	// Плановые данные привилегированно
	Если ЕстьПривилегированныйРежим Тогда
		ПлановыеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			БазовыйОбъединенныйНабор,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"ПлановыеДанныеПривилегированно");
		
		ПоляРесурсов = Новый Структура;
		ПоляРесурсов.Вставить("СуммаПриход");
		ПоляРесурсов.Вставить("СуммаРасход");
		ПоляРесурсов.Вставить("СуммаВалПриход");
		ПоляРесурсов.Вставить("СуммаВалРасход");
		ПоляРесурсов.Вставить("КоличествоПриход");
		ПоляРесурсов.Вставить("КоличествоРасход");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку");
		ПоляРесурсов.Вставить("Примечание");
		ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ПлановыеДанные.ИмяОбъекта = "ПлановыеДанныеПривилегированно";
	КонецЕсли;

	Если ЕстьХранимыеПравила Тогда
		
		ХранимыеФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			БазовыйОбъединенныйНабор,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"ХранимыеФактическиеДанные");
		
		ПоляРесурсов = Новый Структура;
		ПоляРесурсов.Вставить("СуммаПриход");
		ПоляРесурсов.Вставить("СуммаРасход");
		ПоляРесурсов.Вставить("СуммаВалПриход");
		ПоляРесурсов.Вставить("СуммаВалРасход");
		ПоляРесурсов.Вставить("КоличествоПриход");
		ПоляРесурсов.Вставить("КоличествоРасход");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку");
		ПоляРесурсов.Вставить("Примечание");
		ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанные";
		
		// Хранимые фактические данные привилегированно
		Если ЕстьПривилегированныйРежим Тогда 
			ХранимыеФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
				БазовыйОбъединенныйНабор,
				Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
				"ХранимыеФактическиеДанныеПривилегированно");
			
			ПоляРесурсов = Новый Структура;
			ПоляРесурсов.Вставить("СуммаПриход");
			ПоляРесурсов.Вставить("СуммаРасход");
			ПоляРесурсов.Вставить("СуммаВалПриход");
			ПоляРесурсов.Вставить("СуммаВалРасход");
			ПоляРесурсов.Вставить("КоличествоПриход");
			ПоляРесурсов.Вставить("КоличествоРасход");
			
			УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
			ПоляРесурсов.Вставить("НомерПоПорядку");
			ПоляРесурсов.Вставить("Примечание");
			ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
			ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанныеПривилегированно";
		КонецЕсли;
		
	КонецЕсли;
	
	ФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		БазовыйОбъединенныйНабор,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ФактическиеДанные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоНачальныйОстаток");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	ПоляРесурсов.Вставить("ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	Для Каждого СтрокаПериодичности Из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПериода    = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Измерение);
		КолонкаПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).Период;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = КолонкаПериод;
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, &ИмяПериода) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, &ИмяПериода)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, &ИмяПериода)";
		КонецЕсли;
		НовоеВычисляемоеПоле.Выражение = СтрЗаменить(НовоеВычисляемоеПоле.Выражение, "&ИмяПериода", """" + ИмяПериода + """");
		
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, КолонкаПериод);
		ФинОтчеты.НовыйПорядок(ГруппировкаПериода, КолонкаПериод);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 По ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолонкаПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).Период;
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, КолонкаПериод);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила, ЕстьПривилегированныйРежим)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКДИтоговыеДанные,
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"),
		"Данные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоНачальныйОстаток");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	ПоляРесурсов.Вставить("ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку");
	ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ПлановыеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		БазовыйОбъединенныйНабор,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ПлановыеДанные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); 
	ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	// Плановые данные привилегированно
	Если ЕстьПривилегированныйРежим Тогда
		ПлановыеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			БазовыйОбъединенныйНабор,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"ПлановыеДанныеПривилегированно");
		
		ПоляРесурсов = Новый Структура;
		ПоляРесурсов.Вставить("СуммаПриход");
		ПоляРесурсов.Вставить("СуммаРасход");
		ПоляРесурсов.Вставить("СуммаВалПриход");
		ПоляРесурсов.Вставить("СуммаВалРасход");
		ПоляРесурсов.Вставить("КоличествоПриход");
		ПоляРесурсов.Вставить("КоличествоРасход");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); 
		ПоляРесурсов.Вставить("Примечание");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ПлановыеДанные.ИмяОбъекта = "ПлановыеДанныеПривилегированно";
	КонецЕсли;
	
	Если ЕстьХранимыеПравила Тогда
		
		ХранимыеФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			БазовыйОбъединенныйНабор,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"ХранимыеФактическиеДанные");
		
		ПоляРесурсов = Новый Структура;
		ПоляРесурсов.Вставить("СуммаПриход");
		ПоляРесурсов.Вставить("СуммаРасход");
		ПоляРесурсов.Вставить("СуммаВалПриход");
		ПоляРесурсов.Вставить("СуммаВалРасход");
		ПоляРесурсов.Вставить("КоличествоПриход");
		ПоляРесурсов.Вставить("КоличествоРасход");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку");
		ПоляРесурсов.Вставить("Примечание");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанные";
		
		// Хранимые фактические данные привилегированно 
		Если ЕстьПривилегированныйРежим Тогда
			ХранимыеФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
				БазовыйОбъединенныйНабор,
				Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
				"ХранимыеФактическиеДанныеПривилегированно");
				
			ПоляРесурсов = Новый Структура;
			ПоляРесурсов.Вставить("СуммаПриход");
			ПоляРесурсов.Вставить("СуммаРасход");
			ПоляРесурсов.Вставить("СуммаВалПриход");
			ПоляРесурсов.Вставить("СуммаВалРасход");
			ПоляРесурсов.Вставить("КоличествоПриход");
			ПоляРесурсов.Вставить("КоличествоРасход");
			
			УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
			ПоляРесурсов.Вставить("НомерПоПорядку");
			ПоляРесурсов.Вставить("Примечание");
			
			ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
			ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанныеПривилегированно";
		КонецЕсли;
		
	КонецЕсли;
	
	ФактическиеДанные = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		БазовыйОбъединенныйНабор,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ФактическиеДанные");
	
	ПоляРесурсов = Новый Структура;
	ПоляРесурсов.Вставить("СуммаНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаПриход");
	ПоляРесурсов.Вставить("СуммаРасход");
	ПоляРесурсов.Вставить("СуммаВалНачальныйОстаток");
	ПоляРесурсов.Вставить("СуммаВалПриход");
	ПоляРесурсов.Вставить("СуммаВалРасход");
	ПоляРесурсов.Вставить("КоличествоНачальныйОстаток");
	ПоляРесурсов.Вставить("КоличествоПриход");
	ПоляРесурсов.Вставить("КоличествоРасход");
	ПоляРесурсов.Вставить("ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); 
	ПоляРесурсов.Вставить("Примечание");
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, Неопределено, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		ИмяПериода = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(МинимальнаяПериодичность);
		
		ГруппировкаПериод = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, "Период");
		НовоеПоле = ГруппировкаПериод.ПоляГруппировки.Элементы[0];
		НовоеПоле.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[ИмяПериода];
		НовоеПоле.НачалоПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода");
		НовоеПоле.КонецПериода 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода");
		
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "КонецПериода");
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ИсточникиДанных - Массив Из см. НовыйИсточник -
// 	ПоляИсточников - ТаблицаЗначений -
// 	СтруктураКолонокТаблицыДанных - Произвольный, Булево, Структура, Неопределено - Описание:
// * ВидыАналитик - Массив -
// * Измерения - Массив -
// * Периодичности - Массив -
// 	Аналитики - Массив -
// 	АналитикиШапки - Массив -
// 	ПараметрыКУстановке - Структура -
// 	СКДИтоговыеДанные - СхемаКомпоновкиДанных -
// Возвращаемое значение:
// 	Структура - Описание
Функция ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
												Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДИтоговыеДанные)
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДДанныеДокумента = Новый Структура;
	
	// Данные документа состоят из многих СКД, результаты которой должны быть объединены в итоговой.
	Для Каждого Источник Из ИсточникиДанных Цикл
		
		Если Источник.ТипИсточника = ТипыИсточников.Нефинансовый Тогда
			// данными документа дополняются источники остатков и оборотов
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИсточника = ТипыИсточников.РедактируемоеЗначение Тогда
			СКДДокументаПоИсточнику = ПолучитьСКДЗначенийДокумента(Источник,
					СтруктураКолонокТаблицыДанных,
					Аналитики,
					АналитикиШапки,
					ПараметрыКУстановке);
		Иначе
			СКДДокументаПоИсточнику = ПолучитьСКДДанныхДокумента(Источник,
					СтруктураКолонокТаблицыДанных,
					Аналитики,
					АналитикиШапки,
					ПараметрыКУстановке);
		КонецЕсли;
		
		Имя = "ДанныеДокумента_" + Источник.Идентификатор;
		СКДДанныеДокумента.Вставить(Имя, СКДДокументаПоИсточнику);
		
		ПодчиненныйНабор = Неопределено;
		Если Имя = "ДанныеДокумента_Документ" Тогда
			// Источники статей и целевых показателей разделены на отдельные источники. Набор "ДанныеДокумента_Документ" должен быть один.
			НаборДанныхОбъединение = СКДИтоговыеДанные.НаборыДанных[0]; // НаборДанныхОбъединениеМакетаКомпоновкиДанных
			ПодчиненныйНабор = НаборДанныхОбъединение.Элементы.Найти(Имя);
		КонецЕсли;
		Если ПодчиненныйНабор = Неопределено Тогда
			ПодчиненныйНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
				СКДИтоговыеДанные.НаборыДанных[0],
				Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
				Имя);
		КонецЕсли;
		
		ПоляРесурсов = Новый Структура;
		ПоляРесурсов.Вставить("СуммаПриход");
		ПоляРесурсов.Вставить("СуммаРасход");
		ПоляРесурсов.Вставить("СуммаВалПриход");
		ПоляРесурсов.Вставить("СуммаВалРасход");
		ПоляРесурсов.Вставить("КоличествоПриход");
		ПоляРесурсов.Вставить("КоличествоРасход");
		ПоляРесурсов.Вставить("ЗначениеПоказателя");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание"); ПоляРесурсов.Вставить("ФлагВыводитьВсегда");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ПодчиненныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		Если Источник.ТипИсточника = ТипыИсточников.РедактируемоеЗначение Тогда
			ФинОтчеты.НовоеПолеНабора(ПодчиненныйНабор, "РедактируемоеЗначение");
		КонецЕсли;
		
		ПодчиненныйНабор.ИмяОбъекта = Имя;
		
	КонецЦикла;
	
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ФлагВыводитьВсегда");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ФлагВыводитьВсегда");
	
	Возврат СКДДанныеДокумента;
	
КонецФункции

Функция ПолучитьСКДДанныхДокумента(Источник, СтруктураКолонокТаблицыДанных, Аналитики, АналитикиШапки, ПараметрыКУстановке)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКД = ФинОтчеты.НоваяСхема();
	
	НаборАналитика = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКД,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ЭкземплярБюджета_Аналитика");
	НаборСуммы = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКД,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ЭкземплярБюджета_Суммы");
	
	НаборАналитика.ИмяОбъекта = "ЭкземплярБюджета_Аналитика";
	НаборСуммы.ИмяОбъекта = "ЭкземплярБюджета_Суммы";
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Суммы";
	Связь.НаборДанныхПриемник = "ЭкземплярБюджета_Аналитика";
	Связь.ВыражениеИсточник = "ИдентификаторСтроки";
	Связь.ВыражениеПриемник = "ИдентификаторСтроки";
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ЕстьВидыНоменклатуры = 
		СтруктураКолонокТаблицыДанных.ВидыАналитик.Количество()
		ИЛИ СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено;
		
	Если Не ЕстьВидыНоменклатуры Тогда
		
		Для Каждого Аналитика Из Аналитики Цикл
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики,, Истина) Тогда
				ЕстьВидыНоменклатуры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьВидыНоменклатуры Тогда
		
		НаборПараметрыСтатей = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			СКД,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"КэшПараметровСтатей");
		
		НаборПараметрыСтатей.ИмяОбъекта = "КэшПараметровСтатей";
		
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "КоличествоИспользуемыхАналитик");
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики" + НомерАналитики);
		КонецЦикла;
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмерения");
		
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		Связь.НаборДанныхПриемник = "КэшПараметровСтатей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетов";
		
	КонецЕсли;
	
	ВсеТипыАналитик = БюджетированиеСервер.ВсеТипыАналитик();
	
	Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
		
		НаборСвязи = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
			СКД,
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
			"НастройкиСвязей");
		
		НаборСвязи.ИмяОбъекта = "НастройкиСвязей";
		
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Расход");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Коэффициент");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "СтатьяБюджетов", "СтатьяБюджетовСвязи");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательКоличествоИспользуемыхАналитик");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "УчитыватьПоВалюте");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресАналитикиВалюта");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ИсточникЗаполненияВалюты");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ВалютаОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмерения");
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Аналитика" + Сч, "ПоказательАналитика" + Сч,,ВсеТипыАналитик);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ТранслироватьАналитику" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресТрансляцииАналитики" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательВидАналитики" + Сч);
			
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч, "СтатьяАналитика" + Сч,,ВсеТипыАналитик);
		КонецЦикла;
	
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Если ЕстьВидыНоменклатуры Тогда
			Связь.НаборДанныхИсточник = "КэшПараметровСтатей";
		Иначе
			Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		КонецЕсли;
		Связь.НаборДанныхПриемник = "НастройкиСвязей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетовСвязи";
		
		ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта", "ВалютаХранения");
		
	Иначе
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч,,,ВсеТипыАналитик);
		КонецЦикла;
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта");
		
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "СтатьяБюджетов", , , ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ПериодПланирования", , , Новый ОписаниеТипов("Дата"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Примечание");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Количество");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Сумма");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "СуммаВВалюте");
	
	Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "ВЫБОР КОГДА Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "ВЫБОР КОГДА Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		
		ТекстыАналитик = Новый Соответствие;
		
		ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции();
		ПараметрыВыражения.ВыражениеТранслироватьАналитикуБезИндекса = "ТранслироватьАналитику";
		ПараметрыВыражения.ВыражениеАдресТрансляцииАналитикиБезИндекса = "АдресТрансляцииАналитики";
		ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = "СтатьяАналитика";
		ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = "ПоказательАналитика";
		
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			
			ТекстАналитики = БюджетированиеСервер.ТекстПоляАналитикиПоАдресамТрансляции(ПараметрыВыражения, Сч);
			
			ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Аналитика" + Сч, ТекстАналитики);
			ТекстыАналитик.Вставить(Сч, ТекстАналитики);
			
		КонецЦикла;
		
		// Вычисляемое поле Единица измерения.
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА НЕ ПоказательУчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ПоказательЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ПоказательЕдиницаИзмерения
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик,
		|			%1,
		|			ПоказательИсточникЗаполнениеЕдиницыИзмерения), ""Справочник.УпаковкиЕдиницыИзмерения"")
		|	КОНЕЦ";
		
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"ПоказательАдресАналитикиКоличество",
			"",
			ТекстыАналитик,
			3);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД,
		                               "ЕдиницаИзмерения",
		                               ВыражениеВычисляемогоПоля,,,
		                               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		// Вычисляемое поле Валюта.
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА ВалютаХранения
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик,
		|			%1,
		|			ИсточникЗаполненияВалюты,
		|			ВалютаХранения), ""Справочник.Валюты"")
		|	КОНЕЦ";
		
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиВалюта",
			"",
			ТекстыАналитик,
			3);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД,
		                               "Валюта",
		                               ВыражениеВычисляемогоПоля,,,
		                               Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		
		ТипДенежный = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТипРазрядность = ТипДенежный.КвалификаторыЧисла.Разрядность;
		ТипРазрядностьДробЧасти = ТипДенежный.КвалификаторыЧисла.РазрядностьДробнойЧасти;
		
		// Вычисляемое поле СуммаВалПриход.
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте,
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								%1,
		|								ИсточникЗаполненияВалюты), ""Число(%ТипРазрядность, %ТипРазрДробЧасти)"")
		|	КОНЕЦ
		|КОНЕЦ";
		
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрядность",
				Формат(ТипРазрядность, "ЧН=0; ЧГ=0;"));
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрДробЧасти",
				Формат(ТипРазрядностьДробЧасти, "ЧН=0; ЧГ=0;"));
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиВалюта",
			"",
			ТекстыАналитик,
			8);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД,
		                               "СуммаВалПриход",
		                               ВыражениеВычисляемогоПоля,,,
		                               ТипДенежный);
		
		// Вычисляемое поле СуммаВалРасход.
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								%1,
		|								ИсточникЗаполненияВалюты), ""Число(%ТипРазрядность, %ТипРазрДробЧасти)"")
		|	КОНЕЦ
		|КОНЕЦ";
		
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрядность",
				Формат(ТипРазрядность, "ЧН=0; ЧГ=0;"));
		ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля,
				"%ТипРазрДробЧасти",
				Формат(ТипРазрядностьДробЧасти, "ЧН=0; ЧГ=0;"));
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"АдресАналитикиВалюта",
			"",
			ТекстыАналитик,
			8);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД,
		                               "СуммаВалРасход",
		                               ВыражениеВычисляемогоПоля,,,
		                               ТипДенежный);
		
		ДобавитьПараметрСхемы(СКД, "КэшПлановыхКурсов");
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
	Иначе
		
		ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА НЕ СтатьяУчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ СтатьяЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА СтатьяЕдиницаИзмерения
		|	ИНАЧЕ
		|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, 
		|			%1, 
		|			СтатьяИсточникЗаполнениеЕдиницыИзмерения), ""Справочник.УпаковкиЕдиницыИзмерения"")
		|	КОНЕЦ";
		
		ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(
			ВыражениеВычисляемогоПоля,
			"СтатьяАдресАналитикиКоличество",
			"Аналитика",
			Неопределено,
			3);
			
		ФинОтчеты.НовоеВычисляемоеПоле(СКД,
		                               "ЕдиницаИзмерения",
		                               ВыражениеВычисляемогоПоля,,,
		                               Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "Сумма");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалПриход", "СуммаВВалюте");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "Количество");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "0");
		
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИД_Источника";
	НовоеВычисляемоеПоле.Выражение = """" + Источник.Идентификатор + """";
	
	Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты
	 ИЛИ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = "ДанныеДокумента";
		НовоеВычисляемоеПоле.Выражение = "ИСТИНА";
	КонецЕсли;
	
	Группировка = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПоказательБюджетов");
	КонецЕсли;
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "СтатьяБюджетов");
	
	Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты
	 ИЛИ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "ДанныеДокумента");
	КонецЕсли;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		
		Если Не СтрНайти(Измерение, "Аналитика")
			И Не Измерение = "Валюта"
			И Не Измерение = "ЕдиницаИзмерения" Тогда
			
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, Измерение);
		
	КонецЦикла;
	
	Для Каждого ВидАналитики Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПоля;
		
		Если АналитикиШапки.Найти(ВидАналитики) = Неопределено Тогда
		
			ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
			Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "ПоказательКоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ПоказательВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ВыражениеЗаменаАналитики";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
			Иначе
				ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "КоличествоИспользуемыхАналитик";
				ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ВидАналитики";
				ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
				ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
			КонецЕсли;
			
			ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
			
			Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции();
				ПараметрыВыражения.ВыражениеТранслироватьАналитикуБезИндекса = "ТранслироватьАналитику";
				ПараметрыВыражения.ВыражениеАдресТрансляцииАналитикиБезИндекса = "АдресТрансляцииАналитики";
				ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = "СтатьяАналитика";
				ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = "ПоказательАналитика";
				
				Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
					ТекстПоля = СтрЗаменить(ТекстПоля,
					"ВыражениеЗаменаАналитики" + Сч,
					БюджетированиеСервер.ТекстПоляАналитикиПоАдресамТрансляции(ПараметрыВыражения, Сч));
				КонецЦикла;
					
			КонецЕсли;
		
		Иначе
			
			ТекстПоля = "&Документ_" + ИмяПоля;
			
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
		НовоеВычисляемоеПоле.Выражение = ТекстПоля;
		НовоеВычисляемоеПоле.ТипЗначения = БюджетированиеСервер.ВсеТипыАналитик();
		
		ДобавитьПараметрСхемы(СКД, ИмяПараметраВидаАналитики);
		ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, ВидАналитики);
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяПоля);
		
	КонецЦикла;
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, Подразделение");
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		СтруктураОтборов.Вставить("Аналитика" + Сч);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ, , Истина)
			И СтруктураКолонокТаблицыДанных.Измерения.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			
			Измерение = КлючИЗначение.Ключ;
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Аналитика Из Аналитики Цикл
		
		ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики, , Истина)
			И СтруктураКолонокТаблицыДанных.ВидыАналитик.Найти(Аналитика) = Неопределено Тогда
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			
			Если АналитикиШапки.Найти(Аналитика) = Неопределено Тогда
			
				ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПоля;
				
				ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
				Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
					ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "ПоказательКоличествоИспользуемыхАналитик";
					ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ПоказательВидАналитики";
					ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ВыражениеЗаменаАналитики";
					ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				Иначе
					ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "КоличествоИспользуемыхАналитик";
					ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ВидАналитики";
					ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
					ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
				КонецЕсли;
				
				ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
				
				Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
					
					ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции();
					ПараметрыВыражения.ВыражениеТранслироватьАналитикуБезИндекса = "ТранслироватьАналитику";
					ПараметрыВыражения.ВыражениеАдресТрансляцииАналитикиБезИндекса = "АдресТрансляцииАналитики";
					ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = "СтатьяАналитика";
					ПараметрыВыражения.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = "ПоказательАналитика";
					
					Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
						ТекстПоля = СтрЗаменить(ТекстПоля,
						                        "ВыражениеЗаменаАналитики" + Сч,
						                        БюджетированиеСервер.ТекстПоляАналитикиПоАдресамТрансляции(ПараметрыВыражения, Сч));
					КонецЦикла;
					
				КонецЕсли;
				
				ДобавитьПараметрСхемы(СКД, ИмяПараметраВидаАналитики);
				ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, Аналитика);
				
			Иначе
				
				ТекстПоля = "&Документ_" + ИмяПоля;
				ДобавитьПараметрСхемы(СКД, "Документ_" + ИмяПоля);
				
			КонецЕсли;
		
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
			НовоеВычисляемоеПоле.Выражение = ТекстПоля;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "Период";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "ПериодПланирования";
	Иначе
		// Если нет измерения период - тогда периодом данных считается начало периода документа.
		Если ВРЕГ(Источник.ВыражениеПериодаГруппировки) = "НЕОПРЕДЕЛЕНО" Тогда
			НовоеВычисляемоеПоле.Выражение = "&НачалоПериода";
		Иначе
			НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеПериодаГруппировки);
		КонецЕсли;
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "НачалоПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "&НачалоПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеНачалоПериода);
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "КонецПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "&КонецПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеКонецПериода);
	КонецЕсли;
	
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовыйРесурс(СКД, "СуммаПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаРасход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалРасход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоПриход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоРасход");
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", "МИНИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", "МАКСИМУМ");
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию,
	                                   "ГоризонтальноеРасположениеОбщихИтогов",
	                                   РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию,
	                                   "ВертикальноеРасположениеОбщихИтогов",
	                                   РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если Источник.Идентификатор <> "Документ" Тогда
		
		Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор,
				                          "СтатьяБюджетов",
				                          МассивВСписок(Источник.Объекты),
				                          ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		ИначеЕсли Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор,
				                          "ПоказательБюджетов",
				                          МассивВСписок(Источник.Объекты),
				                          ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		КонецЕсли;
		
		// Отбор по периоду
		ЗначениеОтбора = Новый ПолеКомпоновкиДанных("НачалоПериода");
		Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
		ЗначениеОтбора = Новый ПолеКомпоновкиДанных("КонецПериода");
		Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		
		ДобавитьПараметрСхемы(СКД, "НачалоПериода");
		ДобавитьПараметрСхемы(СКД, "КонецПериода");
		ДобавитьПараметрСхемы(СКД, "ГраницаФактДанных");
		
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(Измерение, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор,
						Измерение,
						МассивВСписок(ДополнительныйФильтр),
						ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(ИмяПоля, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор,
						ИмяПоля,
						МассивВСписок(ДополнительныйФильтр),
						ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		ДополнительныйОтбор = Источник.ДополнительныйОтбор;
		Если ДополнительныйОтбор <> Неопределено Тогда
			ФинОтчеты.СкопироватьОтбор(ДополнительныйОтбор.Отбор, СКД.НастройкиПоУмолчанию.Отбор, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "СтатьяБюджетов", , , ВидСравненияКомпоновкиДанных.Заполнено);
	
	Возврат СКД;
	
КонецФункции

Процедура ДополнитьВыражениеВычисляемогоПоляТрансляциейПоНомеруАналитики(ВыражениеВычисляемогоПоля, ВыражениеАдресАналитики, ВыражениеАдресАналитикиПодстановки = "", ТекстыАналитик = Неопределено, Отступов = 1)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ШаблонВыраженияПоказателяАдресаАналитики = Символы.ПС;
	Для Сч = 1 По Отступов + 1 Цикл
		ШаблонВыраженияПоказателяАдресаАналитики = ШаблонВыраженияПоказателяАдресаАналитики + Символы.Таб;
	КонецЦикла;
	ШаблонВыраженияПоказателяАдресаАналитики = ШаблонВыраженияПоказателяАдресаАналитики
		+ "КОГДА %1 = %2 ТОГДА %3";
	
	ВыражениеПоказателяАдресаАналитики = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Если ВыражениеАдресАналитикиПодстановки = "" Тогда
			ВыражениеПодстановки = ТекстыАналитик[НомерАналитики];
		Иначе
			ВыражениеПодстановки = ВыражениеАдресАналитикиПодстановки + НомерАналитики;
		КонецЕсли;
		ВыражениеПоказателяАдресаАналитики = ВыражениеПоказателяАдресаАналитики
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВыраженияПоказателяАдресаАналитики,
				ВыражениеАдресАналитики,
				НомерАналитики,
				ВыражениеПодстановки);
	КонецЦикла;
	
	// Выражение ВЫБОР %1 КОНЕЦ. Отступы используются для форматирования текста выражения запроса.
	ШаблонВыраженияПоказателяАдресаАналитики = "ВЫБОР %1" + Символы.ПС;
	Для Сч = 1 По Отступов Цикл
		ШаблонВыраженияПоказателяАдресаАналитики = ШаблонВыраженияПоказателяАдресаАналитики + Символы.Таб;
	КонецЦикла;
	ШаблонВыраженияПоказателяАдресаАналитики = ШаблонВыраженияПоказателяАдресаАналитики
		+ "КОНЕЦ";
	ВыражениеПоказателяАдресаАналитики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонВыраженияПоказателяАдресаАналитики,
		ВыражениеПоказателяАдресаАналитики);
	
	ВыражениеВычисляемогоПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ВыражениеВычисляемогоПоля,
		ВыражениеПоказателяАдресаАналитики);
	
КонецПроцедуры

// Ключевая операция: "Бюджетирование.РасчетКэшаПолучениеСКДИсточников"
//
Функция ПолучитьСКДПоОписаниюИсточников(ВидБюджета, СтруктураОписанияОтчета, СтруктураКолонокТаблицыДанных, РежимФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Постфикс = ?(РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета,
						Перечисления.РежимыФормированияБюджетныхОтчетов.Документ,
						РежимФормирования);
	
	ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета.СхемыКомпоновки;
	Значение = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, Постфикс);
	
	Если Значение <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Значение
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Бюджетирование.РасчетКэшаПолучениеСКДИсточников");

	Результат = РасчетКэшаПолучениеСКДИсточников(ВидБюджета, СтруктураОписанияОтчета, СтруктураКолонокТаблицыДанных, РежимФормирования, ВидЭлементаКэша, Постфикс);
	
	КоличествоДанных = СтруктураОписанияОтчета.ИсточникиДанных.Количество();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция РасчетКэшаПолучениеСКДИсточников(ВидБюджета, СтруктураОписанияОтчета, СтруктураКолонокТаблицыДанных, РежимФормирования, ВидЭлементаКэша, Постфикс)
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных; // Массив из см. НовыйИсточник
	ПоляИсточников = СтруктураОписанияОтчета.ПоляИсточников;
	РежимПолученияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "РежимПолученияДанных");
	Если Не ЗначениеЗаполнено(РежимПолученияДанных) Тогда
		РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";

	Аналитики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыБюджетовАналитикиШапки.ВидАналитики
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	АналитикиШапки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	
	ЕстьОстатки = Ложь; 
	ЕстьХранимыеПравила = Ложь; 
	ЕстьПривилегированныйРежим = Ложь;
	
	Для Каждого Источник Из ИсточникиДанных Цикл
		ЕстьОстатки = ЕстьОстатки ИЛИ Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки;
		ЕстьХранимыеПравила = ЕстьХранимыеПравила ИЛИ Источник.ЕстьХранимыеПравила;

		ЕстьПривилегированныйРежим = ЕстьПривилегированныйРежим ИЛИ 
			(Не Источник.ПривилегированныйРежим = Неопределено И Источник.ПривилегированныйРежим);
		Если ЕстьОстатки И ЕстьХранимыеПравила И ЕстьПривилегированныйРежим Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКУстановке = Новый Структура;
	
	ПараметрыКУстановке.Вставить("ФункциональнаяВалюта",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "Владелец.ФункциональнаяВалюта"));
	
	РежимыФормирования = Новый Структура("РежимФормирования, РежимПолученияДанных", РежимФормирования, РежимПолученияДанных);
	СКДПлановыеДанные = ПолучитьСКДПлановыеДанные(ИсточникиДанных,
			ПоляИсточников,
			СтруктураКолонокТаблицыДанных,
			Аналитики,
			ПараметрыКУстановке,
			РежимыФормирования);
		
	Если ЕстьПривилегированныйРежим Тогда
		
		РежимыФормирования.Вставить("ПривилегированныйРежим", Истина); 
		СКДПлановыеДанныеПривилегированно = ПолучитьСКДПлановыеДанные(ИсточникиДанных,
				ПоляИсточников,
				СтруктураКолонокТаблицыДанных,
				Аналитики,
				ПараметрыКУстановке,
				РежимыФормирования);
	КонецЕсли;
	
	Если ЕстьХранимыеПравила Тогда
		
		РежимыФормирования = Новый Структура("РежимФормирования, РежимПолученияДанных", РежимФормирования, РежимПолученияДанных);  
		СКДФактическиеДанные = ПолучитьСКДФактическиеДанные(ИсточникиДанных,
				ПоляИсточников,
				СтруктураКолонокТаблицыДанных,
				Аналитики,
				ПараметрыКУстановке,
				РежимыФормирования);
			
		Если ЕстьПривилегированныйРежим Тогда
			РежимыФормирования.Вставить("ПривилегированныйРежим", Истина); 
			СКДФактическиеДанныеПривилегированно = ПолучитьСКДФактическиеДанные(ИсточникиДанных,
					ПоляИсточников,
					СтруктураКолонокТаблицыДанных,
					Аналитики,
					ПараметрыКУстановке,
					РежимыФормирования);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОстатки Тогда
		СКДПредварительныйРасчет = ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных,
				ПоляИсточников,
				СтруктураКолонокТаблицыДанных,
				ЕстьХранимыеПравила,
				ЕстьПривилегированныйРежим);
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных,
					ПоляИсточников,
					СтруктураКолонокТаблицыДанных,
					Аналитики,
					АналитикиШапки,
					ПараметрыКУстановке,
					СКДПредварительныйРасчет);
			Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДПредварительныйРасчет.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(СКДИтоговыеДанные.НаборыДанных[0], "ФлагВыводитьВсегда");
			ФинансоваяОтчетностьСервер.НовыйРесурс(СКДИтоговыеДанные, "ФлагВыводитьВсегда");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ФлагВыводитьВсегда");
		КонецЕсли;
	Иначе
		СКДПредварительныйРасчет = Неопределено;
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных,
				ПоляИсточников,
				СтруктураКолонокТаблицыДанных, 
				ЕстьХранимыеПравила,
				ЕстьПривилегированныйРежим);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных,
					ПоляИсточников,
					СтруктураКолонокТаблицыДанных, 
					Аналитики,
					АналитикиШапки,
					ПараметрыКУстановке,
					СКДИтоговыеДанные);
			Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьОстатки Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(СКДПредварительныйРасчет.НаборыДанных[0],
		                                           "ДанныеДокумента",,,
		                                           Новый ОписаниеТипов("Булево"));
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДПредварительныйРасчет.НастройкиПоУмолчанию.Структура[0],
					"ДанныеДокумента");
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(СКДИтоговыеДанные.НаборыДанных[0],
	                                           "ДанныеДокумента",,,
	                                           Новый ОписаниеТипов("Булево"));
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0],
					"ДанныеДокумента");
	
	// Параметры компоновки.
	Для Каждого Параметр Из ПараметрыКУстановке Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
			
			ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			
			Если ЕстьПривилегированныйРежим Тогда
				ПараметрКомпоновки = СКДПлановыеДанныеПривилегированно.Параметры.Найти(Параметр.Ключ);
				Если ПараметрКомпоновки = Неопределено Тогда
					ПараметрКомпоновки = СКДПлановыеДанныеПривилегированно.Параметры.Добавить();
					ПараметрКомпоновки.Имя = Параметр.Ключ;
				КонецЕсли;
				ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			КонецЕсли;
			
			ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			
			Если ЕстьХранимыеПравила Тогда
				
				ПараметрКомпоновки = СКДФактическиеДанные.Параметры.Найти(Параметр.Ключ);
				Если ПараметрКомпоновки = Неопределено Тогда
					ПараметрКомпоновки = СКДФактическиеДанные.Параметры.Добавить();
					ПараметрКомпоновки.Имя = Параметр.Ключ;
				КонецЕсли;
				ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
				
				Если ЕстьПривилегированныйРежим Тогда
					ПараметрКомпоновки = СКДФактическиеДанныеПривилегированно.Параметры.Найти(Параметр.Ключ);
					Если ПараметрКомпоновки = Неопределено Тогда
						ПараметрКомпоновки = СКДФактическиеДанныеПривилегированно.Параметры.Добавить();
						ПараметрКомпоновки.Имя = Параметр.Ключ;
					КонецЕсли;
					ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
				КонецЕсли;

			КонецЕсли;
			
			Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ 
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
				Для Каждого КлючИЗначение Из СКДДанныеДокумента Цикл
					СКДДокумента = КлючИЗначение.Значение; // СхемаКомпоновкиДанных
					ПараметрКомпоновки = СКДДокумента.Параметры.Найти(Параметр.Ключ);
					Если ПараметрКомпоновки = Неопределено Тогда
						ПараметрКомпоновки = СКДДокумента.Параметры.Добавить();
						ПараметрКомпоновки.Имя = Параметр.Ключ;
					КонецЕсли;
					ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ВыражениеВычисляемогоПоля =
		"ВЫБОР КОГДА НефинансовыйПоказатель = НЕОПРЕДЕЛЕНО ТОГДА Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)
		|ИНАЧЕ ЕстьNULL(НефинансовыйПоказатель, Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)) КОНЕЦ";
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные,
	                                                "НефинансовыйПоказатель",
	                                                ВыражениеВычисляемогоПоля);
	
	// Необходимо очистить статью бюджета для расчетного показателя бюджетов для корректного меппинга аналитики при выводе
	// таблицы ДанныеЯчеек.
	ВыражениеВычисляемогоПоля =
	"ВЫБОР КОГДА ЗначениеЗаполнено(ПоказательБюджетов) И ПоказательБюджетов.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Расчетный) ТОГДА Неопределено
	|КОГДА НЕ ЗначениеЗаполнено(СтатьяБюджетов) ТОГДА Неопределено
	|ИНАЧЕ СтатьяБюджетов КОНЕЦ";
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные,
	                                                "СтатьяБюджетов",
	                                                ВыражениеВычисляемогоПоля);
	
	ВыражениеВычисляемогоПоля = "ВЫБОР КОГДА НЕ ЗначениеЗаполнено(РедактируемоеЗначение) ТОГДА """" ИНАЧЕ РедактируемоеЗначение КОНЕЦ";
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные,
	                                                "РедактируемоеЗначение",
	                                                ВыражениеВычисляемогоПоля);
	
	ВыражениеВычисляемогоПоля =
	"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО ТОГДА Значение(Справочник.ПоказателиБюджетов.ПустаяСсылка)
	|ИНАЧЕ ЕстьNULL(ПоказательБюджетов, Значение(Справочник.ПоказателиБюджетов.ПустаяСсылка)) КОНЕЦ";
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные,
	                                                "ПоказательБюджетов",
	                                                ВыражениеВычисляемогоПоля);
	
	Если СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0].Структура.Количество() > 0 Тогда;
		Для Каждого ЭлементСтруктуры Из СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0].Структура Цикл
			ОтборКомпоновкиДанных = ЭлементСтруктуры.Отбор; // ОтборКомпоновкиДанных 
			ГруппаИЛИ = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); // ГруппаЭлементовОтбораКомпоновкиДанных
			ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаИЛИ.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
			ЗаполнитьГруппуОтбораСКДИтоговыеДанные(ГруппаИЛИ, ПоляИсточников, РежимФормирования);
		КонецЦикла;
	Иначе
		ОтборКомпоновкиДанных = СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0].Отбор; // ОтборКомпоновкиДанных 
		ГруппаИЛИ = ОтборКомпоновкиДанных.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));  // ГруппаЭлементовОтбораКомпоновкиДанных
		ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаИЛИ.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ЗаполнитьГруппуОтбораСКДИтоговыеДанные(ГруппаИЛИ, ПоляИсточников, РежимФормирования);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("СКДИтоговая", СКДИтоговыеДанные);
	Результат.Вставить("СКДПлановыеДанные", СКДПлановыеДанные);
	Результат.Вставить("СКДДанныеДокумента",СКДДанныеДокумента); 
	Результат.Вставить("СКДПредварительныйРасчет", СКДПредварительныйРасчет);
	Результат.Вставить("Параметры", ПараметрыКУстановке);
	
	Если ЕстьХранимыеПравила Тогда
		Результат.Вставить("СКДФактическиеДанные", СКДФактическиеДанные);
		Если ЕстьПривилегированныйРежим Тогда
			Результат.Вставить("СКДФактическиеДанныеПривилегированно", СКДФактическиеДанныеПривилегированно);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПривилегированныйРежим Тогда
		Результат.Вставить("СКДПлановыеДанныеПривилегированно", СКДПлановыеДанныеПривилегированно);
	КонецЕсли;
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, Результат, Постфикс);	
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьГруппуОтбораСКДИтоговыеДанные(ГруппаОтбора, ПоляИсточников, РежимФормирования)
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагВыводитьВсегда");
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Примечание");
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЕсли;
	
	// Отсечем "пустые значения".
	Для Каждого СтрокаПоля Из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		
		НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаПоля.ИмяРесурса);
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьРедактируемоеЗначение(ИсточникиДанных)
	
	Если ИсточникиДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Источник Из ИсточникиДанных Цикл
		Если Источник.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.РедактируемоеЗначение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСКДЗначенийДокумента(Источник, СтруктураКолонокТаблицыДанных, Аналитики, АналитикиШапки, ПараметрыКУстановке)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКД = ФинОтчеты.НоваяСхема();
	
	НаборАналитика = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКД,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ЭкземплярБюджета_Значения");
	НаборСуммы = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СКД,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ЭкземплярБюджета_Суммы");
	
	НаборАналитика.ИмяОбъекта = "ЭкземплярБюджета_Значения";
	НаборСуммы.ИмяОбъекта = "ЭкземплярБюджета_Суммы";
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Суммы";
	Связь.НаборДанныхПриемник = "ЭкземплярБюджета_Значения";
	Связь.ВыражениеИсточник = "ИдентификаторСтроки";
	Связь.ВыражениеПриемник = "ИдентификаторСтроки";
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВсеТипыАналитик = БюджетированиеСервер.ВсеТипыАналитик();
	
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч,,,ВсеТипыАналитик);
	КонецЦикла;
	
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ИдентификаторСтроки");
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики" + Сч);
	КонецЦикла;
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "КоличествоИспользуемыхАналитик");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "РедактируемоеЗначение", , , ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ПериодПланирования", , , Новый ОписаниеТипов("Дата"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Примечание");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Значение", "ЗначениеПоказателя");
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИД_Источника";
	НовоеВычисляемоеПоле.Выражение = """" + Источник.Идентификатор + """";
	
	Группировка = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "РедактируемоеЗначение");
	
	Для Каждого ВидАналитики Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПоля;
		
		Если АналитикиШапки.Найти(ВидАналитики) = Неопределено Тогда
			
			ПараметрыВыражения = БюджетированиеСервер.ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = "ВидАналитики";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
			ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
			
			ТекстПоля = БюджетированиеСервер.ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
			
		Иначе
			
			ТекстПоля = "&Документ_" + ИмяПоля;
			
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
		НовоеВычисляемоеПоле.Выражение = ТекстПоля;
		
		ДобавитьПараметрСхемы(СКД, ИмяПараметраВидаАналитики);
		ПараметрыКУстановке.Вставить(ИмяПараметраВидаАналитики, ВидАналитики);
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяПоля);
		
	КонецЦикла;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "Период";
	НовоеВычисляемоеПоле.Выражение = "ПериодПланирования";
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "РедактируемоеЗначение", , , ВидСравненияКомпоновкиДанных.Заполнено);
	
	ФинОтчеты.НовыйРесурс(СКД, "ЗначениеПоказателя", "МАКСИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", "МИНИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", "МАКСИМУМ");
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию,
	                                   "ГоризонтальноеРасположениеОбщихИтогов",
	                                   РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию,
	                                   "ВертикальноеРасположениеОбщихИтогов",
	                                   РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКД;
	
КонецФункции

#КонецОбласти

#Область ГенерацияДереваДляВыводаОтчета

Функция ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, ЭлементОтчета, ВидЭлемента)
	
	Если ИмяИзмерения = "Таблица" ИЛИ ИмяИзмерения = "ТекстовыйБлок" Тогда
		
		Если ТипЗнч(МестоДобавления) <> Тип("ДеревоЗначений") Тогда
			МестоДобавления = МестоДобавления.Владелец();
		КонецЕсли;
		
	Иначе
		
		ВТаблице = Ложь;
		СтрокаПроверки = МестоДобавления;
		
		Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
			Пока ЗначениеЗаполнено(СтрокаПроверки) Цикл
				Если СтрокаПроверки.ИмяИзмерения = "Таблица" Тогда
					ВТаблице = Истина;
					Прервать;
				КонецЕсли;
				СтрокаПроверки = СтрокаПроверки.Родитель;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВТаблице Тогда
			
			Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
				МестоДобавления = МестоДобавления.Владелец();
			КонецЕсли;
			
			Таблица = МестоДобавления.Строки.Добавить();
			Таблица.ИмяИзмерения = "Таблица";
			Таблица.Строки.Добавить().ИмяИзмерения = "Колонки";
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", Ложь);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", Ложь);
			
			МестоДобавления = Таблица.Строки.Добавить();
			МестоДобавления.ИмяИзмерения = "Строки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяГруппировка = МестоДобавления.Строки.Добавить();
	НоваяГруппировка.ИмяИзмерения = ИмяИзмерения;
	НоваяГруппировка.ЭлементОтчета = ЭлементОтчета;
	НоваяГруппировка.ВидЭлемента = ВидЭлемента;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	ТабличнаяЧасть.Реквизит,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВыводитьЗаголовок
		|			ТОГДА ТабличнаяЧасть.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Заголовок,
		|	ТабличнаяЧасть.Ссылка КАК ЭлементОтчета,
		|	ТабличнаяЧасть.ВОтдельнойКолонке
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.ДополнительныеПоля КАК ТабличнаяЧасть
		|		ПО (ТабличнаяЧасть.Ссылка = Справочник.Ссылка)
		|			И (Справочник.Владелец = &ВидБюджета)
		|ИТОГИ ПО
		|	ЭлементОтчета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЭлементы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлементы.Следующий() Цикл
		СтрокаДерева = ДеревоВывода.Строки.Найти(ВыборкаЭлементы.ЭлементОтчета, "ЭлементОтчета", Истина);
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("Реквизит");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("ИмяРеквизита");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("Заголовок");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("ВОтдельнойКолонке");
		СтрокаДерева.ДополнительныеПоля.Индексы.Добавить("ВОтдельнойКолонке");
		ВыборкаДополнительныеРеквизиты = ВыборкаЭлементы.Выбрать();
		Пока ВыборкаДополнительныеРеквизиты.Следующий() Цикл
			НоваяСтрока = СтрокаДерева.ДополнительныеПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДополнительныеРеквизиты);
			Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
			Цифры = "0123456789";
			ДополнительныеСимволы = "_";
			ДопустимыеСимволы = Буквы + Цифры + ДополнительныеСимволы;
			ИмяРеквизита = "";
			ИмяПоиска = НРег(НоваяСтрока.Реквизит);
			ИмяПоиска = СтрЗаменить(ИмяПоиска, " ", "");
			Для Сч = 1 По СтрДлина(НоваяСтрока.Реквизит) Цикл
				Символ = Сред(ИмяПоиска, Сч, 1);
				Если Не СтрНайти(ДопустимыеСимволы, Символ) Тогда
					ИмяРеквизита = ИмяРеквизита + "_";
				Иначе
					ИмяРеквизита = ИмяРеквизита + Символ;
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Знач МестоДобавления, Элементы)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Для Каждого Элемент Из Элементы.Строки Цикл
		
		НоваяГруппировка = Неопределено;
		
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета 
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ТекстовыйБлок", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.НаименованиеДляПечати = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
																"Текст", КэшДопРеквизиты);
			НоваяГруппировка.ТолькоДляПечати = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
																"ТолькоДляПечати", КэшДопРеквизиты);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			ПоказательБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ПоказательБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = ПоказательБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			СтатьяБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "СтатьяБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = СтатьяБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НефинансовыйПоказатель = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "НефинансовыйПоказатель", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "НефинансовыйПоказатель", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = НефинансовыйПоказатель;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "РедактируемоеЗначение", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = Элемент.НаименованиеДляПечати;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
			ЗначениеФильтра = Неопределено; ЭтоАналитикаПрочее = Неопределено; ВидАналитики = Неопределено;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
				ИмяИзмерения = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				Организация = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Организация", КэшДопРеквизиты);
				ИмяИзмерения = "Организация";
				ЗначениеФильтра = Организация;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				Подразделение = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Подразделение", КэшДопРеквизиты);
				ИмяИзмерения = "Подразделение";
				ЗначениеФильтра = Подразделение;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				Сценарий = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Сценарий", КэшДопРеквизиты);
				ИмяИзмерения = "Сценарий";
				ЗначениеФильтра = Сценарий;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				Валюта = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Валюта", КэшДопРеквизиты);
				ИмяИзмерения = "Валюта";
				ЗначениеФильтра = Валюта;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ЭтоАналитикаПрочее = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ЭтоАналитикаПрочее", КэшДопРеквизиты);
				РазрешитьРедактирование = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "РазрешитьРедактирование", КэшДопРеквизиты);
				ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				Если ЭтоАналитикаПрочее Тогда
					НаименованиеПрочих = БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(ВидАналитики, "Прочие");
					ЗначениеФильтра = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
				Иначе
					ТипЗначенияФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения");
					ЗначениеФильтра    = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.ЭлементОтчета, "ЗначениеАналитики"), ТипЗначенияФильтра);
				КонецЕсли;
				
			КонецЕсли;
				
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = ЗначениеФильтра;
			Если ЭтоАналитикаПрочее = Истина Тогда
				НоваяГруппировка.НаименованиеДляПечати = НаименованиеПрочих;
			КонецЕсли;
			НоваяГруппировка.ВидАналитики = ВидАналитики;
			НоваяГруппировка.ЭтоАналитикаПрочее = ЭтоАналитикаПрочее;
			НоваяГруппировка.РедактируемыеЗначения = РазрешитьРедактирование = Истина;
			
			ВыводитьВместеСРодительским = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьВместеСРодительским", КэшДопРеквизиты);
			Если ВыводитьВместеСРодительским = Истина Тогда
				МестоДобавления.ВыводитьВместеСПодчиненным = Истина;
				НоваяГруппировка.ВыводитьВместеСРодительским = Истина;
			КонецЕсли;
			
			ВыводитьИерархиюЭлементов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьИерархиюЭлементов", КэшДопРеквизиты);
			Если ВыводитьИерархиюЭлементов = Истина Тогда
				НоваяГруппировка.ВыводитьИерархиюЭлементов = Истина;
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Таблица", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			Таблица.ВыводитьЗаголовокВОтчет = Элемент.ВыводитьЗаголовокЭлемента;
			Таблица.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
			ВыводитьЗаголовокГруппировки = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьЗаголовокГруппировки", КэшДопРеквизиты);
			ЗаголовокГруппировки = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ЗаголовокГруппировки", КэшДопРеквизиты);
			
			Таблица.ПараметрыТаблицы.Вставить("ВыводитьЗаголовокГруппировки", ВыводитьЗаголовокГруппировки = Истина);
			Таблица.ПараметрыТаблицы.Вставить("ЗаголовокГруппировки", 	ЗаголовокГруппировки);
			
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Строки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Колонки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			
			Выводить = Истина;
			Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если Элемент.ВыводитьЗаголовокЭлемента = Ложь Тогда
					НоваяГруппировка = МестоДобавления;
					Выводить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Выводить Тогда
				
				НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, 
					ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Элемент.ЭлементОтчета), 
					Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
				
				НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
			
			ОтображатьНумерациюКолонок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
			                                                                        "ОтображатьНумерациюКолонок",
			                                                                        КэшДопРеквизиты);
			ОтображатьНумерациюСтрок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
			                                                                      "ОтображатьНумерациюСтрок",
			                                                                      КэшДопРеквизиты);
			Таблица = ФинансоваяОтчетностьСервер.ТаблицаЭлемента(МестоДобавления);
			
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", ОтображатьНумерациюКолонок = Истина);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", 	ОтображатьНумерациюСтрок = Истина);
			
			ТаблицыЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент.ЭлементОтчета, 
				"ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
			
			Таблица.ПараметрыТаблицы.Вставить("ЭлементыОформления", 		ТаблицыЭлемента.ЭлементыОформления.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеСтроки", 			ТаблицыЭлемента.ОформляемыеСтроки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеКолонки", 		ТаблицыЭлемента.ОформляемыеКолонки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("РасшифровкаПолейОтбораЭО", 	ТаблицыЭлемента.РасшифровкаПолейОтбораЭО.Выгрузить());
			
			Таблица.ПараметрыТаблицы.Вставить("ДанныеОтчетаДляОформления", 	ДанныеОтчетаДляОформления(Таблица.ПараметрыТаблицы, КэшДопРеквизиты));
			
		КонецЕсли;
		
		Если НоваяГруппировка <> Неопределено Тогда
			
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, НоваяГруппировка, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПризнакиУчетаПоСтрокамДерева(Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение)
	
	Для Каждого Строка Из Строки Цикл
		
		НайденнаяКолонка = ПризнакиУчета.Найти(Строка.ЭлементОтчета);
		
		Если НайденнаяКолонка <> Неопределено Тогда
			ЕстьСумма = ЕстьСумма ИЛИ НайденнаяКолонка.ФлагСумма;
			ЕстьКоличество = ЕстьКоличество ИЛИ НайденнаяКолонка.ФлагКоличество;
			ЕстьЗначение = ЕстьЗначение ИЛИ НайденнаяКолонка.ФлагЗначение;
		КонецЕсли;
		
		Если ЕстьСумма И ЕстьКоличество И ЕстьЗначение Тогда
			Возврат;
		КонецЕсли;
		
		ПризнакиУчетаПоСтрокамДерева(Строка.Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, СтрокаДобавления = Неопределено)
	
	Если СтрокаДобавления = Неопределено Тогда
		СтрокаДобавления = Таблица.Строки.Найти("Колонки");
	КонецЕсли;
	
	Если Не СтрокаДобавления.Строки.Количество() Тогда
		
		ПризнакиУчета = ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
		ЕстьКоличествоВОтчете = ПараметрыУчетаПоКолонкам.ЕстьКоличество;
		ЕстьЗначениеВОтчете = ПараметрыУчетаПоКолонкам.ЕстьЗначение;
		
		Если СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			Строки = Таблица.Строки.Найти("Строки").Строки;
			ЕстьСумма = Ложь;
			ЕстьКоличество = Ложь;
			ЕстьЗначение = Ложь;
			// расчет флагов для простой таблицы
			ПризнакиУчетаПоСтрокамДерева(Строки, 
				ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаСтрок, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		ИначеЕсли СтрокаДобавления.ИмяИзмерения = "РедактируемоеЗначение" Тогда
			ЕстьСумма = Ложь;
			ЕстьКоличество = Ложь;
			ЕстьЗначение = Истина;
		Иначе
			НайденнаяКолонка = ПризнакиУчета.Найти(СтрокаДобавления.ЭлементОтчета);
			Если НайденнаяКолонка <> Неопределено Тогда
				ЕстьСумма = НайденнаяКолонка.ФлагСумма;
				ЕстьКоличество = НайденнаяКолонка.ФлагКоличество;
				ЕстьЗначение = НайденнаяКолонка.ФлагЗначение;
			Иначе
				ЕстьСумма = Ложь;
				ЕстьКоличество = Ложь;
				ЕстьЗначение = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьКоличество Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Количество";
			НоваяСтрока.НаименованиеДляПечати = НСтр("ru = 'Количество';
													|en = 'Quantity'");
		КонецЕсли;
		
		Если ЕстьЗначение Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Значение";
			НоваяСтрока.НаименованиеДляПечати = НСтр("ru = 'Значение';
													|en = 'Value'");
		КонецЕсли;
		
		ДобавитьСумму = Ложь;
		
		ЕстьДополнительныеКолонки = ЕстьКоличество ИЛИ ЕстьЗначение;
		
		Если ЕстьСумма И ЕстьДополнительныеКолонки Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И (ЕстьКоличествоВОтчете ИЛИ ЕстьЗначениеВОтчете) Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли СтрокаДобавления.ВыводитьИерархиюЭлементов
			И ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ИспользуетсяИерархияЗначенийАналитики(
			СтрокаДобавления.ВидАналитики, Истина) Тогда
			ДобавитьСумму = Истина;
		КонецЕсли;
		
		Если ДобавитьСумму Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Сумма";
			НоваяСтрока.НаименованиеДляПечати = НСтр("ru = 'Сумма';
													|en = 'Amount'");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокаДобавления.Строки Цикл
		ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
		|	СтруктураЯчеек.ИндексСтроки КАК ИндексСтроки,
		|	СтруктураЯчеек.Строка,
		|	СтруктураЯчеек.Колонка
		|ПОМЕСТИТЬ ТаблицаСтруктураЯчеек
		|ИЗ
		|	&СтруктураЯчеек КАК СтруктураЯчеек
		|ГДЕ
		|	СтруктураЯчеек.ОсновнойЭлемент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
		|	ПараметрыЯчеек.ФлагСумма,
		|	ПараметрыЯчеек.ФлагКоличество,
		|	ПараметрыЯчеек.ФлагЗначение
		|ПОМЕСТИТЬ ТаблицаПараметрыЯчеек
		|ИЗ
		|	&ПараметрыЯчеек КАК ПараметрыЯчеек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураЯчеек.Строка,
		|	СтруктураЯчеек.Колонка,
		|	ПараметрыЯчеек.ФлагСумма,
		|	ПараметрыЯчеек.ФлагКоличество,
		|	ПараметрыЯчеек.ФлагЗначение
		|ПОМЕСТИТЬ СтруктураЯчеек
		|ИЗ
		|	ТаблицаСтруктураЯчеек КАК СтруктураЯчеек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметрыЯчеек КАК ПараметрыЯчеек
		|		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураЯчеек.Колонка,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
		|ИЗ
		|	СтруктураЯчеек КАК СтруктураЯчеек
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураЯчеек.Колонка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктураЯчеек.Строка,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
		|	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
		|ИЗ
		|	СтруктураЯчеек КАК СтруктураЯчеек
		|
		|СГРУППИРОВАТЬ ПО
		|	СтруктураЯчеек.Строка";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки, ОсновнойЭлемент, Строка, Колонка"));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение"));
	
	Массив = Запрос.ВыполнитьПакет();
	ТаблицаКолонок = Массив[3].Выгрузить(); // ТаблицаЗначений
	ТаблицаКолонок.Индексы.Добавить("Колонка");
	
	ТаблицаСтрок = Массив[4].Выгрузить();  // ТаблицаЗначений
	ТаблицаСтрок.Индексы.Добавить("Строка");
	
	Возврат Новый Структура("ТаблицаКолонок, ТаблицаСтрок", ТаблицаКолонок, ТаблицаСтрок);
	
КонецФункции

// Ключевая операция: "Бюджетирование.РасчетКэшаПолучениеДереваДляВыводаОтчета"
//
Функция ДеревоВывода(ВидБюджета, СтруктураЯчеек, ПараметрыЯчеек)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета.ДеревоВывода;
	Значение = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша);
	Если Значение <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Значение;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Бюджетирование.РасчетКэшаПолучениеДереваДляВыводаОтчета");
	
	ДеревоВывода = РасчетКэшаПолучениеДереваДляВыводаОтчета(ВидБюджета, СтруктураЯчеек, ПараметрыЯчеек, ВидЭлементаКэша);
	
	КоличествоДанных = КоличествоЭлементовДереваЗначений(ДеревоВывода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	Возврат ДеревоВывода;
	
КонецФункции

// Функция-конструктор дерева вывода
// 
// Возвращаемое значение:
// 	ДеревоЗначений - Описание:
// * ИмяИзмерения - Строка -
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ВидАналитики - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов -
// * НаименованиеДляПечати - Строка -
// * ФиксированноеЗначение - Произвольный -
// * ВыводитьЗаголовокВОтчет - Булево -
// * ЭтоАналитикаПрочее - Булево -
// * РедактируемыеЗначения - Булево -
// * ВыводитьВместеСПодчиненным - Булево -
// * ВыводитьВместеСРодительским - Булево -
// * ДополнительныеПоля - ТаблицаЗначений -
// * ПараметрыТаблицы - Структура - содержит:
// 		** ВыводитьЗаголовокГруппировки - Булево -
// 		** ЗаголовокГруппировки - Строка -
// 		** ОтображатьНумерациюКолонок - Булево -
// 		** ОтображатьНумерациюСтрок - Булево -
// 		** ЭлементыОформления - ТаблицаЗначений -
// 		** ОформляемыеСтроки - ТаблицаЗначений -
// 		** ОформляемыеКолонки - ТаблицаЗначений -
// 		** РасшифровкаПолейОтбораЭО - ТаблицаЗначений -
// 		** ДанныеОтчетаДляОформления - см. ДанныеОтчетаДляОформления
// * ТолькоДляПечати - Булево -
Функция НовыйДеревоВывода() Экспорт
	
	ДеревоВывода = Новый ДеревоЗначений;
	ДеревоВывода.Колонки.Добавить("ИмяИзмерения");
	ДеревоВывода.Колонки.Добавить("ВидЭлемента");
	ДеревоВывода.Колонки.Добавить("ЭлементОтчета");
	ДеревоВывода.Колонки.Добавить("ВидАналитики");
	ДеревоВывода.Колонки.Добавить("НаименованиеДляПечати");
	ДеревоВывода.Колонки.Добавить("ФиксированноеЗначение");
	ДеревоВывода.Колонки.Добавить("ВыводитьЗаголовокВОтчет");
	ДеревоВывода.Колонки.Добавить("ЭтоАналитикаПрочее", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("РедактируемыеЗначения", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСПодчиненным", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСРодительским", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ДополнительныеПоля", 			Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоВывода.Колонки.Добавить("ПараметрыТаблицы", 				Новый ОписаниеТипов("Структура"));
	ДеревоВывода.Колонки.Добавить("ТолькоДляПечати", 				Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьИерархиюЭлементов",		Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоВывода;
	
КонецФункции

Функция РасчетКэшаПолучениеДереваДляВыводаОтчета(ВидБюджета, СтруктураЯчеек, ПараметрыЯчеек, ВидЭлементаКэша) Экспорт
	
	ДеревоВидаБюджета = ДеревоЭлементовБюджета(ВидБюджета, Ложь);
	
	ПризнакиУчетаПоКолонкам = ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек);
	ТаблицаПризнаковКолонок = ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
	
	ЕстьСумма 		= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагСумма") <> Неопределено;
	ЕстьКоличество 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагКоличество") <> Неопределено;
	ЕстьЗначение 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагЗначение") <> Неопределено;
	
	ПараметрыУчетаПоКолонкам = Новый Структура();
	ПараметрыУчетаПоКолонкам.Вставить("ПризнакиУчетаПоКолонкам", ПризнакиУчетаПоКолонкам);
	ПараметрыУчетаПоКолонкам.Вставить("ЕстьСумма", ЕстьСумма);
	ПараметрыУчетаПоКолонкам.Вставить("ЕстьКоличество", ЕстьКоличество);
	ПараметрыУчетаПоКолонкам.Вставить("ЕстьЗначение", ЕстьЗначение);
	
	ДеревоВывода = НовыйДеревоВывода();
	
	КэшДопРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	// Заполнение дерева группировками
	СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизитов, ДеревоВывода, ДеревоВидаБюджета);
	
	ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода);
	
	// Добавление дополнительных колонок и заполнение
	// вспомогательной информации.
	Для Каждого ЭлементВывода Из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			ЭлементВывода.ПараметрыТаблицы.Вставить("КоличествоДополнительныхКолонок", РассчитатьГлубинуУровней(ЭлементВывода, Истина) - 1);
			Если ЗначениеЗаполнено(ЭлементВывода.ЭлементОтчета) Тогда
				Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДобавитьКолонкиКоличестваВКолонки(ЭлементВывода, ПараметрыУчетаПоКолонкам);
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, ДеревоВывода);
	
	Возврат ДеревоВывода;
	
КонецФункции

#КонецОбласти

#Область СтруктураОписанияВидаБюджета

Функция ПроверитьИспользованиеНефиксированныхЭлементовВИзмеренияхИОперандах(ВидБюджета, СтруктураОписаниеОтчета)
	
	РезультатОперанды = ТаблицаОперандовТребующихРасчетаДанныхЯчеек(СтруктураОписаниеОтчета);
	НеТребуетРасчетаДанныхЯчеек = РезультатОперанды.Пустой();
	
	Возврат НеТребуетРасчетаДанныхЯчеек;
	
КонецФункции

Функция ПолучитьЗначенияДополнительныхФильтров(Таблица, ИмяКолонки)
	
	Копия = Таблица.Скопировать(,ИмяКолонки + ", Флаг" + ИмяКолонки);
	Копия.Свернуть(ИмяКолонки + ", Флаг" + ИмяКолонки);
	
	Результат = Новый Массив;
	
	Для Каждого Значение Из Копия Цикл
		Если Значение["Флаг" + ИмяКолонки] <> "отобрать" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Значение[ИмяКолонки]) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Добавить(Значение[ИмяКолонки]);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек)
	
	Для Каждого Источник Из ИсточникиДанных Цикл
		
		НайденныеСтроки = СтруктураЯчеек.Скопировать(Новый Структура("ИД_Источника", Источник.Идентификатор));
		
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, Измерение);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(Измерение, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, ИмяПоля);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(ИмяПоля, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПоляИсточниковОтчета(СтруктураКолонок, СтруктураЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ СтруктураЯчеек
	|ИЗ
	|	&СтруктураЯчеек КАК СтруктураЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагСумма КАК ФлагСумма,
	|	ПараметрыЯчеек.ФлагКоличество КАК ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение КАК ФлагЗначение,
	|	ПараметрыЯчеек.ПолеИсточника КАК ПолеИсточника
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагСумма КАК ФлагСумма,
	|	ПараметрыЯчеек.ФлагКоличество КАК ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение КАК ФлагЗначение,
	|	ПараметрыЯчеек.ПолеИсточника КАК ПолеИсточника
	|ПОМЕСТИТЬ ПредварительныеПоляИсточников
	|ИЗ
	|	СтруктураЯчеек КАК СтруктураЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""НачальныйОстаток"" КАК ПолеИсточника
	|ПОМЕСТИТЬ ВидыПолейИсточника
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КонечныйОстаток""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Приход""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Расход""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Оборот""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеПоляИсточников.ИндексСтроки КАК ИндексСтроки,
	|	ПредварительныеПоляИсточников.ФлагСумма КАК ФлагСумма,
	|	ПредварительныеПоляИсточников.ФлагКоличество КАК ФлагКоличество,
	|	ПредварительныеПоляИсточников.ФлагЗначение КАК ФлагЗначение,
	|	ЕСТЬNULL(ВидыПолейИсточника.ПолеИсточника, ПредварительныеПоляИсточников.ПолеИсточника) КАК ПолеИсточника,
	|	ВЫБОР
	|		КОГДА ВидыПолейИсточника.ПолеИсточника <> ПредварительныеПоляИсточников.ПолеИсточника
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Вспомогательное
	|ПОМЕСТИТЬ ТаблицаЯчеек
	|ИЗ
	|	ПредварительныеПоляИсточников КАК ПредварительныеПоляИсточников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыПолейИсточника КАК ВидыПолейИсточника
	|		ПО (ПредварительныеПоляИсточников.ПолеИсточника = ВидыПолейИсточника.ПолеИсточника
	|				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""Оборот""
	|					И ВидыПолейИсточника.ПолеИсточника В (""Приход"", ""Расход"")
	|				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""КонечныйОстаток""
	|					И ВидыПолейИсточника.ПолеИсточника В (""НачальныйОстаток"", ""Приход"", ""Расход"")
	|				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""НачальныйОстаток""
	|					И ВидыПолейИсточника.ПолеИсточника В (""Приход"", ""Расход""))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Сумма"" + СтруктураЯчеек.ПолеИсточника КАК ИмяРесурса,
	|	СтруктураЯчеек.Вспомогательное КАК Вспомогательное
	|ПОМЕСТИТЬ ИменаРесурсов
	|ИЗ
	|	ТаблицаЯчеек КАК СтруктураЯчеек
	|ГДЕ
	|	СтруктураЯчеек.ФлагСумма
	|	И СтруктураЯчеек.ПолеИсточника <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СуммаВал"" + СтруктураЯчеек.ПолеИсточника,
	|	СтруктураЯчеек.Вспомогательное
	|ИЗ
	|	ТаблицаЯчеек КАК СтруктураЯчеек
	|ГДЕ
	|	СтруктураЯчеек.ФлагСумма
	|	И СтруктураЯчеек.ПолеИсточника <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Количество"" + СтруктураЯчеек.ПолеИсточника,
	|	СтруктураЯчеек.Вспомогательное
	|ИЗ
	|	ТаблицаЯчеек КАК СтруктураЯчеек
	|ГДЕ
	|	СтруктураЯчеек.ФлагКоличество
	|	И СтруктураЯчеек.ПолеИсточника <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЗначениеПоказателя"",
	|	СтруктураЯчеек.Вспомогательное
	|ИЗ
	|	ТаблицаЯчеек КАК СтруктураЯчеек
	|ГДЕ
	|	СтруктураЯчеек.ФлагЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИменаРесурсов.ИмяРесурса КАК ИмяРесурса,
	|	МИНИМУМ(ИменаРесурсов.Вспомогательное) КАК Вспомогательное
	|ИЗ
	|	ИменаРесурсов КАК ИменаРесурсов
	|
	|СГРУППИРОВАТЬ ПО
	|	ИменаРесурсов.ИмяРесурса";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки"));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение, ПолеИсточника"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РасчетКэшаПолучениеСтруктурыОписания(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования, ВидЭлементаКэша, Постфикс)
	// Получаем источники данных.
	ИсточникиДанных = ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем источники данных группировок по периоду.
	ИсточникиПериодовГруппировок = ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем структуру ячеек.
	ОписаниеЯчеек = ОписаниеЯчеек(ВидБюджета,
			ИсточникиДанных,
			ИсточникиПериодовГруппировок,
			СтруктураКолонокТаблицыДанных,
			РежимФормирования);
	
	СтруктураЯчеек 						= ОписаниеЯчеек.СтруктураЯчеек;
	ПараметрыЯчеек 						= ОписаниеЯчеек.ПараметрыЯчеек;
	ИсточникиЗначенийИзмерений 			= ОписаниеЯчеек.ИсточникиЗначенийИзмерений;
	ЗаполнениеОтсутствующихИзмеренийНФП = ОписаниеЯчеек.ЗаполнениеОтсутствующихИзмеренийНФП;
	ОтборИзмеренийНФП 					= ОписаниеЯчеек.ОтборИзмеренийНФП;
	
	// Дополнение источников постоянными фильтрами.
	ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек);
	
	МассивИндексов = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтруктураЯчеек Цикл
		
		ОбщиеИзмерения = ПараметрыЯчеек[СтрокаТаблицы.ИндексСтроки].ОбщиеИзмерения;
		
		Если ЗначениеЗаполнено(ОбщиеИзмерения)
			И МассивИндексов.Найти(ОбщиеИзмерения) = Неопределено Тогда
			
			МассивИндексов.Добавить(ОбщиеИзмерения);
			
		КонецЕсли;
	КонецЦикла;
	
	ПоляИсточников = ПоляИсточниковОтчета(СтруктураКолонокТаблицыДанных, СтруктураЯчеек, ПараметрыЯчеек);
	ТаблицаПодчиненности = ПодчиненныеЭлементыВидаБюджета(ВидБюджета);
	
	
	Результат = Новый Структура;
	Результат.Вставить("ИсточникиДанных", 						ИсточникиДанных);
	Результат.Вставить("ИсточникиПериодовГруппировок", 			ИсточникиПериодовГруппировок);
	Результат.Вставить("СтруктураЯчеек", 						СтруктураЯчеек);
	Результат.Вставить("ПараметрыЯчеек", 						ПараметрыЯчеек);
	Результат.Вставить("ИндексыСтруктурыЯчеек", 				МассивИндексов);
	Результат.Вставить("ПоляИсточников", 						ПоляИсточников);
	Результат.Вставить("ИсточникиЗначенийИзмерений", 			ИсточникиЗначенийИзмерений);
	Результат.Вставить("ЗаполнениеОтсутствующихИзмеренийНФП", 	ЗаполнениеОтсутствующихИзмеренийНФП);
	Результат.Вставить("ОтборИзмеренийНФП", 					ОтборИзмеренийНФП);
	Результат.Вставить("ТаблицаПодчиненностиЭлементов",			ТаблицаПодчиненности);
	
	// На случай, если отчет имеет "жесткую" структуру сохраняется признак, 
	// что бы не выполнять дополнительные вычисления при выводе.
	НеТребуетРасчетаДанныхЯчеек = ПроверитьИспользованиеНефиксированныхЭлементовВИзмеренияхИОперандах(ВидБюджета, Результат);
	
	Результат.Вставить("НеТребуетРасчетаДанныхЯчеек",			НеТребуетРасчетаДанныхЯчеек);
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, Результат, Постфикс);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СтруктураОписанияСпискаВвода

Функция ТекстНесовместимыхЭлементов()
	
	Возврат НСтр("ru = 'В подчиненных строках есть несовместимые элементы';
				|en = 'There are incompatible items in the subordinate lines'");
	
КонецФункции

// Возвращает шаблон параметров для формирования заголовка на языке текущего пользователя.
// Свойство "Заголовок" структуры "НастройкаКолонок" используется в модуле менеджера
// документа ЭкземплярыБюджета в методе "РассчитатьЭлементыСпискаБюджетаКДобавлению",
// для формирования подсказки ввода пустого значения.
//
// Возвращаемое значение:
//  Структура - Структура свойств, для формирования заголовка на языке пользователя:
//   *ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета. - Единственный обязательный параметр.
//                                                                       Или СтатьяБюджетов или Измерение или ФиксированнаяАналитика.
//   *ТипИзмерения  - ПеречислениеСсылка.ТипыИзмеренийФинансовогоОтчета. -  Необязательный параметр.
//                    Неопределено.
//   *Периодичность - ПеречислениеСсылка.Периодичность - Необязательный параметр.
//                    Неопределено.
//   *ВидАналитики  - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Необязательный параметр.
//                    Неопределено.
//
Функция ШаблонПараметровФормированияСпискаВвода()
	Результат = Новый Структура;
	
	// Обязательные параметры:
	Результат.Вставить("ВидЭлемента");
	
	// Не обязательные параметры:
	Результат.Вставить("ТипИзмерения");
	Результат.Вставить("Периодичность");
	Результат.Вставить("ВидАналитики");
	
	Возврат Результат;
КонецФункции

Функция ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеКолонки) Экспорт
	
	КэшДопРеквизиты 	= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	АналитикиШапки 		= СведенияОБюджетеДляРасчета.АналитикиШапки;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		
		ПараметрыФормированияСпискаВвода = ШаблонПараметровФормированияСпискаВвода();
		ПараметрыФормированияСпискаВвода.ВидЭлемента = ЭлементОтчета.ВидЭлемента;
		
		Результат = Новый Структура("ПараметрыФормированияСпискаВвода, ТипЗначения");
		Результат.ПараметрыФормированияСпискаВвода = ПараметрыФормированияСпискаВвода;
		Результат.ТипЗначения = ТипЗначения;
		Возврат Результат;
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
														
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
				ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			
			ТипЗначения = Новый ОписаниеТипов("Дата");
			
			ПараметрыФормированияСпискаВвода = ШаблонПараметровФормированияСпискаВвода();
			ПараметрыФормированияСпискаВвода.ВидЭлемента   = ЭлементОтчета.ВидЭлемента;
			ПараметрыФормированияСпискаВвода.ТипИзмерения  = ТипИзмерения;
			ПараметрыФормированияСпискаВвода.Периодичность = Периодичность;
			
			Результат = Новый Структура("ПараметрыФормированияСпискаВвода, ТипЗначения");
			Результат.ПараметрыФормированияСпискаВвода = ПараметрыФормированияСпискаВвода;
			Результат.ТипЗначения = ТипЗначения;
			Возврат Результат;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			
			ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
			
			ПараметрыФормированияСпискаВвода = ШаблонПараметровФормированияСпискаВвода();
			ПараметрыФормированияСпискаВвода.ВидЭлемента  = ЭлементОтчета.ВидЭлемента;
			ПараметрыФормированияСпискаВвода.ТипИзмерения = ТипИзмерения;
			Результат = Новый Структура("ПараметрыФормированияСпискаВвода, ТипЗначения");
			Результат.ПараметрыФормированияСпискаВвода = ПараметрыФормированияСпискаВвода;
			Результат.ТипЗначения = ТипЗначения;
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
		
	ТипЗначения = ВидАналитики.ТипЗначения;
	
	ПараметрыФормированияСпискаВвода = ШаблонПараметровФормированияСпискаВвода();
	ПараметрыФормированияСпискаВвода.ВидЭлемента  = ЭлементОтчета.ВидЭлемента;
	ПараметрыФормированияСпискаВвода.ВидАналитики = ВидАналитики;
	
	Результат = Новый Структура("ПараметрыФормированияСпискаВвода, ТипЗначения");
	Результат.ПараметрыФормированияСпискаВвода = ПараметрыФормированияСпискаВвода;
	Результат.ТипЗначения = ТипЗначения;
	
	Если ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
		
		ПараметрыВыбора = Новый Структура("Отбор, Значение", 
					"Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ДополнительноеСвойство"));
		Результат.Вставить("ПараметрыВыбора", ПараметрыВыбора);
		
	Иначе
		
		СоответствиеСвязанныхЭлементов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
		СтруктураСвязей = Неопределено;
		
		Для Каждого Тип Из ТипЗначения.Типы() Цикл
			
			СвязанныеТипы = СоответствиеСвязанныхЭлементов[Тип];
			Если СвязанныеТипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ВышележащиеКолонки Цикл
				Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда // Пропускаем поиск связей для простых типов редактируемого значения
					Для Каждого ТипВышележащейКолонки Из КлючИЗначение.Значение.ТипЗначения.Типы() Цикл
						ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
						Если ПараметрыСвязи <> Неопределено Тогда
							СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
									"Элементы.СписокРедактированияБюджета.ТекущиеДанные." + КлючИЗначение.Ключ, ПараметрыСвязи.Реквизит);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаАналитики Из АналитикиШапки Цикл
				Если Не ТипЗнч(СтрокаАналитики) = Тип("Соответствие") Тогда // Пропускаем поиск связей для простых типов редактируемого значения
					Для Каждого ТипВышележащейКолонки Из СтрокаАналитики.ТипЗначения.Типы() Цикл
						ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
						Если ПараметрыСвязи <> Неопределено Тогда
							СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
									"Объект.Аналитика" + СтрокаАналитики.НомерСтроки, ПараметрыСвязи.Реквизит);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураСвязей <> Неопределено Тогда
			Результат.Вставить("СвязиПараметровВыбора", СтруктураСвязей);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы)
	
	СложнаяТаблица 			= СведенияОБюджетеДляРасчета.СложнаяТаблица;
	КэшДопРеквизиты 		= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	
	ЭлементыТекущегоУровня = Новый Структура();
	ЭлементыТекущегоУровня.Вставить("Периодичности", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("СтрокиОснования", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("НакопленныйОтбор", ОбщегоНазначения.СкопироватьРекурсивно(ВышележащиеЭлементы.НакопленныйОтбор));
	ЭлементыТекущегоУровня.Вставить("НастройкиКолонок", ОбщегоНазначения.СкопироватьРекурсивно(ВышележащиеЭлементы.НастройкиКолонок));
	ЭлементыТекущегоУровня.Вставить("Измерения", ВышележащиеЭлементы.Измерения);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ЭлементыТекущегоУровня.Периодичности,
		ВышележащиеЭлементы.Периодичности);
	
	ЭлементыТекущегоУровня.СтрокиОснования.Добавить(ЭлементОтчета.ЭлементОтчета);
	
	СоответствиеСтатейКолонок = Новый Соответствие;
	НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент, Строка", Истина, ЭлементОтчета.ЭлементОтчета));
	ЕстьРедактируемаяСтатья = Ложь;
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОписаниеЯчейки = Новый Структура("СтатьяБюджетов, ИмяПоказателя, РедактируемоеЗначение", 
										НайденнаяСтрока.СтатьяБюджетов, Неопределено, НайденнаяСтрока.РедактируемоеЗначение);
		// Если сложная таблица: в разных ячейках могут быть разные показатели
		// для простой таблицы: одна колонка-один показатель.
		СтрокаПараметров = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
		Если СложнаяТаблица Тогда
			Если СтрокаПараметров.ФлагЗначение Тогда
				ИмяПоказателя = "Значение";
			ИначеЕсли СтрокаПараметров.ФлагКоличество Тогда
				ИмяПоказателя = "Количество";
			Иначе
				ИмяПоказателя = "Сумма";
			КонецЕсли;
			ОписаниеЯчейки.Вставить("ИмяПоказателя", ИмяПоказателя);
		КонецЕсли;
		Если СтрокаПараметров.ФлагЗначение Тогда
			Если НайденнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				ТипыЗначенийПоказателей = Новый Соответствие;
				Если Не ЭлементыТекущегоУровня.НастройкиКолонок.Свойство("ТипыЗначенийПоказателей", ТипыЗначенийПоказателей) Тогда
					ТипыЗначенийПоказателей = Новый Соответствие;
					ЭлементыТекущегоУровня.НастройкиКолонок.Вставить("ТипыЗначенийПоказателей", ТипыЗначенийПоказателей);
				КонецЕсли;
				ТипыЗначенийПоказателей.Вставить(НайденнаяСтрока.Колонка, СтрокаПараметров.ТипРедактируемогоЗначения);
			КонецЕсли;
		КонецЕсли;
		СоответствиеСтатейКолонок.Вставить(НайденнаяСтрока.Колонка, ОписаниеЯчейки);
		Если ЗначениеЗаполнено(НайденнаяСтрока.СтатьяБюджетов) ИЛИ ЗначениеЗаполнено(НайденнаяСтрока.РедактируемоеЗначение) Тогда
			ЕстьРедактируемаяСтатья = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементОтчета.Строки.Количество() Тогда
		Если Не ЕстьРедактируемаяСтатья Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		ЭлементыТекущегоУровня.Вставить("СтатьиБюджетов", СоответствиеСтатейКолонок);
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ЭлементыТекущегоУровня.Периодичности.Добавить(Периодичность);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить(ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период,
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
			
			Возврат ЭлементыТекущегоУровня;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ЗначениеЗаполнено(ЭлементыТекущегоУровня.Измерения) Тогда
			ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ",";
		Иначе
			ЭлементыТекущегоУровня.Измерения = "";
		КонецЕсли;
		ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ЭлементОтчета.ИмяИзмерения;
		
		Если ЗначениеЗаполнено(ЭлементОтчета.ФиксированноеЗначение)
			ИЛИ ЭлементОтчета.ЭтоАналитикаПрочее Тогда
			ЗаписываемоеЗначение = ЭлементОтчета.ФиксированноеЗначение;
			Если ЗначениеЗаполнено(ЭлементОтчета.ВидАналитики) Тогда
				ЗаписываемоеЗначение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(
					ЗаписываемоеЗначение, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета.ВидАналитики, "ТипЗначения"));
			КонецЕсли;
			ЭлементыТекущегоУровня.НакопленныйОтбор.Вставить(ЭлементОтчета.ИмяИзмерения, ЗаписываемоеЗначение);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить(ЭлементОтчета.ИмяИзмерения, 
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
		КонецЕсли;
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Описание
// 
// Параметры:
// 	СведенияОБюджетеДляРасчета - см. СведенияОБюджетеДляРасчета
// 	СтрокаСпискаВвода - Произвольный -
// 	Измерения - Массив Из Строка -
// 	НакопленныйОтбор - Структура -
// Возвращаемое значение:
// 	Структура - описание значения:
// 	* Значение - СписокЗначений -
//
Функция НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, СтрокаСпискаВвода, Измерения, НакопленныйОтбор)
	
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	СтруктураКолонок 		= СведенияОБюджетеДляРасчета.СтруктураКолонокТаблицыДанных;
	СтруктураЯчеек			= СтруктураОписанияОтчета.СтруктураЯчеек; // см. НовыйСтруктураЯчеек
	
	ТаблицаИзмерений = СтруктураЯчеек.Скопировать(
							Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаСпискаВвода));
	
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
	НастройкиВвода = Новый Структура();
	
	Для Каждого Измерение Из МассивИзмерений Цикл
		
		КопияТаблицы = ТаблицаИзмерений.Скопировать();
		КопияТаблицы.Свернуть(Измерение + ", Флаг" + Измерение);
		
		СписокСтрокСУчетомИерархии = БюджетнаяОтчетностьВыводСервер.СписокПодчиненныхЭлементов(СтрокаСпискаВвода, 
															СведенияОБюджетеДляРасчета.ПодчиненныеЭлементыВидаБюджета);
		
		НеобязательныеПараметры = БюджетнаяОтчетностьВыводСервер.НеобязательныеПараметрыПолученияВыборкиЯчеек();
		НеобязательныеПараметры.Колонка       = Неопределено;
		НеобязательныеПараметры.Строка        = СписокСтрокСУчетомИерархии;
		НеобязательныеПараметры.ИндексыПоиска = Неопределено;
		НеобязательныеПараметры.ДобавлятьФлаг = Истина;
		Выборка = БюджетнаяОтчетностьВыводСервер.ПолучитьВыборкуЯчеекИерархически(СтруктураОписанияОтчета.СтруктураЯчеек, Измерение,
			НакопленныйОтбор, НеобязательныеПараметры);
		
		МассивВыбираемыхЗначений = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из Выборка Цикл
			Если СтрокаТаблицы["Флаг" + Измерение] = "отобрать" Тогда
				МассивВыбираемыхЗначений.Добавить(СтрокаТаблицы[Измерение]);
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "прочие" Тогда
				Если СтруктураКолонок.Измерения.Найти(Измерение) <> Неопределено Тогда
					МассивВыбираемыхЗначений.Добавить(
						БюджетированиеКлиентСервер.ПустоеЗначениеАналитики(),
						БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(Измерение, "Прочие"));
				Иначе
					Для Каждого ВидАналитики Из СтруктураКолонок.ВидыАналитик Цикл
						ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						Если ИмяИзмерения = Измерение Тогда
							МассивВыбираемыхЗначений.Добавить(
								БюджетированиеКлиентСервер.ПустоеЗначениеАналитики(),
								БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(ВидАналитики, "Прочие"));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "документ" Тогда
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "заполнить" Тогда //период
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиВвода.Вставить(Измерение, МассивВыбираемыхЗначений);
		
	КонецЦикла;
	
	Возврат НастройкиВвода;
	
КонецФункции

Функция СписокИзмеренийРедактированияОтличается(ЭлементСравнения1, ЭлементСравнения2, СложнаяТаблица)
	
	Если ЭлементСравнения1 = Неопределено
		ИЛИ ЭлементСравнения2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементСравнения1 = ТекстНесовместимыхЭлементов()
		ИЛИ ЭлементСравнения2 = ТекстНесовместимыхЭлементов() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭлементСравнения1.Измерения <> ЭлементСравнения2.Измерения Тогда
		Возврат Истина;
	КонецЕсли;
	
	МинимальнаяПериодичность1 = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(ЭлементСравнения1.Периодичности);
	МинимальнаяПериодичность2 = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(ЭлементСравнения2.Периодичности);
	
	Если МинимальнаяПериодичность1 <> МинимальнаяПериодичность2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		Для Каждого КлючИЗначение Из ЭлементСравнения1.СтатьиБюджетов Цикл
			НастройкиСтатей2 = ЭлементСравнения2.СтатьиБюджетов[КлючИЗначение.Ключ];
			Если НастройкиСтатей2 = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если НастройкиСтатей2.СтатьяБюджетов <> КлючИЗначение.Значение.СтатьяБюджетов
				ИЛИ НастройкиСтатей2.ИмяПоказателя <> КлючИЗначение.Значение.ИмяПоказателя
				ИЛИ НастройкиСтатей2.РедактируемоеЗначение <> КлючИЗначение.Значение.РедактируемоеЗначение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементыДерева, СоответствиеРезультат, ВышележащиеЭлементы = Неопределено)
	
	СложнаяТаблица = СведенияОБюджетеДляРасчета.СложнаяТаблица;
	
	Если ВышележащиеЭлементы = Неопределено Тогда
		
		ВышележащиеЭлементы = Новый Структура();
		ВышележащиеЭлементы.Вставить("Периодичности", Новый Массив);
		ВышележащиеЭлементы.Вставить("НакопленныйОтбор", Новый Структура);
		ВышележащиеЭлементы.Вставить("Измерения", "");
		ВышележащиеЭлементы.Вставить("НастройкиКолонок", Новый Структура());
		ВышележащиеЭлементы.Вставить("СтрокиОснования", Новый Массив); 
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	СоответствиеУровня = Новый Соответствие;
	
	Для Каждого ЭлементОтчета Из ЭлементыДерева.Строки Цикл
		
		КолонкиПредыдущегоУровня = Неопределено;
		ЭлементыТекущегоУровня = ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы);
		
		Если ЭлементОтчета.Строки.Количество() Тогда
			
			КоличествоЗаписейДоПроверки = СоответствиеРезультат.Количество();
			
			КолонкиПредыдущегоУровня = РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета,
				ЭлементОтчета,
				СоответствиеРезультат,
				?(ЭлементыТекущегоУровня = Неопределено, ВышележащиеЭлементы, ЭлементыТекущегоУровня));
			
			Если КолонкиПредыдущегоУровня = Неопределено Тогда
				Если КоличествоЗаписейДоПроверки <> СоответствиеРезультат.Количество() Тогда
					МассивЭлементов.Добавить(ТекстНесовместимыхЭлементов());
				Иначе
					МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КолонкиПредыдущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
			Если ЭлементыТекущегоУровня <> Неопределено Тогда
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ЭлементыТекущегоУровня.НакопленныйОтбор;
			Иначе
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ВышележащиеЭлементы.НакопленныйОтбор;
			КонецЕсли;
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, КолонкиПредыдущегоУровня);
		ИначеЕсли ЭлементыТекущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(ЭлементыТекущегоУровня);
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, ЭлементыТекущегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеУровня Цикл
		
		МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(КлючИЗначение.Значение.Периодичности);
		Измерения = "";
		
		Если МинимальнаяПериодичность <> Неопределено Тогда
			Измерения = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.Измерения) Тогда
			Измерения = Измерения + ?(ЗначениеЗаполнено(Измерения), ",", "") + КлючИЗначение.Значение.Измерения;
		КонецЕсли;
		
		НастройкиВвода = НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, 
													КлючИЗначение.Ключ, Измерения, 
													КлючИЗначение.Значение.НакопленныйОтбор);
		
		МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
		
		СтруктураОписанияСтроки = Новый Структура();
		СтруктураОписанияСтроки.Вставить("Измерения", МассивИзмерений);
		СтруктураОписанияСтроки.Вставить("НастройкиКолонок", КлючИЗначение.Значение.НастройкиКолонок);
		СтруктураОписанияСтроки.Вставить("НастройкиВвода", НастройкиВвода);
		СтруктураОписанияСтроки.Вставить("СтрокиОснования", КлючИЗначение.Значение.СтрокиОснования);
		
		Если СложнаяТаблица Тогда
			СтруктураОписанияСтроки.Вставить("СтатьиБюджетов", КлючИЗначение.Значение.СтатьиБюджетов);
		КонецЕсли;
		
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СтруктураОписанияСтроки);
		
	КонецЦикла;
	
	Для Сч = 1 По МассивЭлементов.ВГраница() Цикл
		Если СписокИзмеренийРедактированияОтличается(МассивЭлементов[Сч-1], МассивЭлементов[Сч], СложнаяТаблица) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивЭлементов.Количество() = 1 И МассивЭлементов[0] = ТекстНесовместимыхЭлементов() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОпределяющийЭлемент = Неопределено;
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент <> Неопределено И Элемент <> ТекстНесовместимыхЭлементов() Тогда
			ОпределяющийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОпределяющийЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиОснования = Новый Массив;
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		Если ЭлементМассива = Неопределено ИЛИ ЭлементМассива = ТекстНесовместимыхЭлементов() Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиОснования, ЭлементМассива.СтрокиОснования);
	КонецЦикла;
	
	ОпределяющийЭлемент.СтрокиОснования = СтрокиОснования;
	
	// Установим связи параметров выбора по нижестоящим элементам
	СоответствиеСвязанныхЭлементов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
	Сч = 0;
	
	Для Каждого НастройкаКолонки Из ОпределяющийЭлемент.НастройкиКолонок Цикл
		Сч = Сч + 1;
		НастройкаКолонки = НастройкаКолонки.Значение;
		Если ТипЗнч(НастройкаКолонки) <>  Тип("Структура") ИЛИ НастройкаКолонки.Свойство("СвязиПараметровВыбора") Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначения = НастройкаКолонки.ТипЗначения.Типы();
		СтруктураСвязей = Неопределено;
		
		Для Каждого Тип Из ТипЗначения Цикл
			
			СвязанныеТипы = СоответствиеСвязанныхЭлементов[Тип];
			Если СвязанныеТипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Индекс = 0;
			Для Каждого КлючИЗначение Из ОпределяющийЭлемент.НастройкиКолонок Цикл
				Индекс = Индекс + 1;
				Если Сч >= Индекс Тогда
					Продолжить;
				КонецЕсли;
				Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда // Пропускаем поиск связей для простых типов редактируемого значения
					Для Каждого ТипНижележащейКолонки Из КлючИЗначение.Значение.ТипЗначения.Типы() Цикл
						ПараметрыСвязи = СвязанныеТипы.Найти(ТипНижележащейКолонки, "Тип");
						Если ПараметрыСвязи <> Неопределено Тогда
							СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
									"Элементы.СписокРедактированияБюджета.ТекущиеДанные." + КлючИЗначение.Ключ, ПараметрыСвязи.Реквизит);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтруктураСвязей <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				НастройкаКолонки.Вставить("СвязиПараметровВыбора", СтруктураСвязей);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОпределяющийЭлемент;
	
КонецФункции

Процедура ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонок, СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыЭлементовТаблицы)
	
	СведенияОБюджетеДляРасчета = СведенияОБюджетеДляРасчета(ВидБюджета, ЭлементОтчета, СтруктураКолонок, СтруктураОписанияОтчета, КэшДопРеквизиты);
	
	Для Каждого ЭлементОтчета Из ЭлементОтчета.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Строки" Тогда
			
			РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ПараметрыЭлементовТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета, СтруктураКолонокТаблицыДанных, СтруктураОписанияОтчета, ДеревоВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидЭлементаКэша = Перечисления.ВидыКэшаБюджета.ПараметрыСпискаВвода;
	Значение = РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.ПолучитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша);
	
	Если Значение <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Значение;
	КонецЕсли;
	
	КэшДопРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ПараметрыСтрок = Новый Соответствие;
	
	Для Каждого ЭлементОтчета Из ДеревоВывода.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Таблица" Тогда
			
			ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонокТаблицыДанных, 
										СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета.УстановитьЗначениеКэша(ВидБюджета, ВидЭлементаКэша, ПараметрыСтрок);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСтрок;
	
КонецФункции

// Структура сведений о бюджете для расчета
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	ЭлементОтчета - СтрокаДереваЗначений - Описание:
// * ИмяИзмерения - Строка -
// * ВидЭлемента - Произвольный -
// * ЭлементОтчета - Произвольный -
// * ВидАналитики - Произвольный -
// * НаименованиеДляПечати - Строка -
// * ФиксированноеЗначение - Произвольный -
// * ВыводитьЗаголовокВОтчет - Булево -
// * ЭтоАналитикаПрочее - Булево -
// * РедактируемыеЗначения - Булево -
// * ВыводитьВместеСПодчиненным - Булево -
// * ВыводитьВместеСРодительским - Булево -
// * ДополнительныеПоля - ТаблицаЗначений -
// * ПараметрыТаблицы - Структура - содержит:
// 		** ВыводитьЗаголовокГруппировки - Булево -
// 		** ЗаголовокГруппировки - Строка -
// 		** ОтображатьНумерациюКолонок - Булево -
// 		** ОтображатьНумерациюСтрок - Булево -
// 		** ЭлементыОформления - ТаблицаЗначений -
// 		** ОформляемыеСтроки - ТаблицаЗначений -
// 		** ОформляемыеКолонки - ТаблицаЗначений -
// 		** РасшифровкаПолейОтбораЭО - ТаблицаЗначений -
// 		** ДанныеОтчетаДляОформления - см. ДанныеОтчетаДляОформления
// * ТолькоДляПечати - Булево -
// 	СтруктураКолонок - см. КолонкиТаблицыДанных
// 	СтруктураОписанияОтчета - Структура, Булево, Неопределено - Описание:
// * НеТребуетРасчетаДанныхЯчеек - Булево -
// * ТаблицаПодчиненностиЭлементов - ТаблицаЗначений, ДеревоЗначений - содержит колонки:
// ** Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// ** Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// ** ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
// * ПоляИсточников - ТаблицаЗначений -
// * ИндексыСтруктурыЯчеек - Массив -
// 	КэшДопРеквизиты - ТаблицаЗначений - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ПодчиненныеЭлементыВидаБюджета - ТаблицаЗначений, ДеревоЗначений -
// * СложнаяТаблица - Булево -
// * АналитикиШапки - ТаблицаЗначений - состоит из:
// 		** НомерСтроки - Число -
// 		** ТипЗначения - ОписаниеТипов - тип значения вида аналитики
// * СтруктураОписанияОтчета - Структура -
// * КэшДопРеквизиты - ТаблицаЗначений -
Функция СведенияОБюджетеДляРасчета(ВидБюджета, ЭлементОтчета, СтруктураКолонок, СтруктураОписанияОтчета, КэшДопРеквизиты)
	
	СложнаяТаблица = ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ВидАналитики.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	Справочник.ВидыБюджетов.АналитикиШапки КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ВидБюджета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	АналитикиШапки = РезультатЗапроса.Выгрузить();
	
	СведенияОБюджетеДляРасчета = Новый Структура;
	СведенияОБюджетеДляРасчета.Вставить("КэшДопРеквизиты", КэшДопРеквизиты);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонок);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	СведенияОБюджетеДляРасчета.Вставить("АналитикиШапки", АналитикиШапки);
	СведенияОБюджетеДляРасчета.Вставить("СложнаяТаблица", СложнаяТаблица);
	СведенияОБюджетеДляРасчета.Вставить("ПодчиненныеЭлементыВидаБюджета", ПодчиненныеЭлементыВидаБюджета(ВидБюджета));
	
	Возврат СведенияОБюджетеДляРасчета;
	
КонецФункции

#КонецОбласти

#Область ИсточникиЗначенийИзмерения

// Возвращает таблицу элементов
// 
// Параметры:
// 	НастройкаЯчеек - см. ФинансоваяОтчетностьСервер.ПодчиненныйЭлемент
// 	Кэш - Неопределено, ТаблицаЗначений -
// Возвращаемое значение:
// 	см. НовыйТаблицаЭлементов
//
Функция ПолучитьТаблицуЭлементов(НастройкаЯчеек, Кэш)
	
	ТаблицаЭлементов = НовыйТаблицаЭлементов();
	
	Если ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента) Тогда
		ТаблицаЭлементов =
			ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента).ЭлементыТаблицы;
	ИначеЕсли Не ЗначениеЗаполнено(НастройкаЯчеек.ЭлементОтчета) Тогда
		НастройкаЯчеек.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(
			НастройкаЯчеек,
			Новый УникальныйИдентификатор);
		ТаблицаЭлементов =
			ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента).ЭлементыТаблицы;
	Иначе
		ТаблицаЭлементов = Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(
			НастройкаЯчеек.ЭлементОтчета,
			"ЭлементыТаблицы",
			Кэш);
	КонецЕсли;
	
	Возврат ТаблицаЭлементов;
	
КонецФункции

Процедура ПодчиненныеИсточникиЗначенийЭлементаСложнойТаблицы(ПодчиненныеЭлементы, СписокЭлементов)
	
	Для Каждого СтрокаДерева Из ПодчиненныеЭлементы Цикл
		
		СписокЭлементов.Добавить(СтрокаДерева);
		
		ПодчиненныеИсточникиЗначенийЭлементаСложнойТаблицы(
			ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(СтрокаДерева), СписокЭлементов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодчиненныеИсточникиЗначенийЭлементаПростойТаблицы(ПодчиненныеЭлементы, СписокЭлементов, ВидыЭлементовЗначений)
	
	Для Каждого СтрокаДерева Из ПодчиненныеЭлементы Цикл
		
		Если ВидыЭлементовЗначений <> Неопределено
			И ВидыЭлементовЗначений.Найти(СтрокаДерева.ВидЭлемента) <> Неопределено Тогда
			
			НоваяСтрока = СписокЭлементов.Добавить();
			НоваяСтрока.Элемент = 
				?(ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента), СтрокаДерева.АдресСтруктурыЭлемента, СтрокаДерева.ЭлементОтчета);
			НоваяСтрока.ВидЭлемента = СтрокаДерева.ВидЭлемента;
			НоваяСтрока.Наименование = СтрокаДерева.НаименованиеДляПечати;
			
		КонецЕсли;
			
		ПодчиненныеИсточникиЗначенийЭлементаПростойТаблицы(
			ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(СтрокаДерева), СписокЭлементов, ВидыЭлементовЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОперандыИсточника(ЭлементСписка, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение)
	
	Элемент = ЭлементСписка.Элемент;
	
	ПоискОперандаПоАдресу = Ложь;
	СтруктураЭлемента = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, "ВидЭлемента, ОперандыФормулы", Кэш);
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ПоискОперандаПоАдресу = Истина;
	КонецЕсли;
	
	НоваяСтрока = Результат.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСписка);
	
	Если СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
		ИЛИ (СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов И Заполнение) Тогда
		
		Если Заполнение Тогда
			НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		КонецЕсли;
		
		ЕстьИсточники = Ложь;
		
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			
			Если ПоискОперандаПоАдресу И ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
				СтруктураОперанда = ПолучитьИзВременногоХранилища(СтрокаОперанда.АдресСтруктурыЭлемента);
				СсылкаНаОперанд = СтрокаОперанда.АдресСтруктурыЭлемента;
			Иначе
				СтруктураОперанда = Новый Структура;
				СтруктураОперанда.Вставить("ВидЭлемента", 
					Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(СтрокаОперанда.Операнд, "ВидЭлемента", Кэш));
				СсылкаНаОперанд = СтрокаОперанда.Операнд;
			КонецЕсли;
			
			Если ВидыЭлементовЗначений.Найти(СтруктураОперанда.ВидЭлемента) <> Неопределено Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ВидЭлемента = СтруктураОперанда.ВидЭлемента;
				НоваяСтрока.Элемент = СсылкаНаОперанд;
				НоваяСтрока.Родитель = Элемент;
				НоваяСтрока.Наименование = "[" + СтрокаОперанда.Идентификатор + "]";
				ЕстьИсточники = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьИсточники Тогда
			Результат.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИсточникиОперандамиРекурсивно(СписокЭлементов, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение)
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		ОбработатьОперандыИсточника(ЭлементСписка, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение);
	КонецЦикла;
	
КонецПроцедуры

Функция СтатьиИПоказателиЗначенийЭлемента(ТаблицаИсточников, ВключатьНефинансовые)
	
	ИсточникиЗначений = Новый ТаблицаЗначений;
	ИсточникиЗначений.Колонки.Добавить("Источник");
	ИсточникиЗначений.Колонки.Добавить("ВидЭлемента");
	
	Для Каждого СтрокаДоступныхЭлементов Из ТаблицаИсточников Цикл
		
		Если СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			
			Если ВключатьНефинансовые Тогда
				НоваяСтрока = ИсточникиЗначений.Добавить();
				НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Элемент;
				НоваяСтрока.ВидЭлемента = СтрокаДоступныхЭлементов.ВидЭлемента;
			КонецЕсли;
			
		ИначеЕсли СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			
			НоваяСтрока = ИсточникиЗначений.Добавить();
			НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Элемент;
			НоваяСтрока.ВидЭлемента = СтрокаДоступныхЭлементов.ВидЭлемента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсточникиЗначений;
	
КонецФункции


// Возвращает структуру, содержащую запрошенные значения реквизитов или табличных частей элемента финансового отчета.
// 
// Параметры:
// 	Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов - Ссылка на элемент отчета.
// 			- Строка - Адрес хранилища значений, содержащий настройки еще не записанного в базу данных элемента финансового отчета.
// 	ИменаРеквизитов - Строка - Перечисление имен реквизитов или табличных частей.
// 	Кэш - См. Справочники.ЭлементыФинансовыхОтчетов.НовыйКэшЭлементовФинансовыхОтчетов
// Возвращаемое значение:
// 	Структура - структура реквизитов или табличных частей элемента финансового отчета:
// 	 *ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента.
// 	 *НаименованиеДляПечати - Строка - Наименование элемента, отображаемое для пользователя.
// 	 *ОбратныйЗнак - Булево - Флаг обратного знака (имеет смысл для некоторых видов элементов).
// 	 *Комментарий - Строка - Комментарий.
// 	 *ДополнительныйОтбор - ХранилищеЗначения - Хранилище, содержащее настройки компоновки данных (если есть отбор).
// 	 *ЕстьНастройки - Булево - Флаг наличия настроек (отбор).
// 	 *ЗначениеАналитики - Характеристика.АналитикиСтатейБюджетов - Значение аналитики.
// 	 *СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов - Связанный элемент.
// 	 					- Строка - адрес временного хранилища, содержащего данные связанного элемента.
// 	 *РеквизитыВидаЭлемента - ТаблицаЗначений - табличная часть:
// 	   **Реквизит - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов - реквизит элемента отчета.
// 	   **Значение - Характеристика.РеквизитыЭлементовФинансовыхОтчетов - значение реквизита.
// 	 *ОперандыФормулы - ТаблицаЗначений - табличная часть:
// 	   **Идентификатор - Строка - Идентификатор операнда.
// 	   **Операнд - СправочникСсылка.ЭлементыФинансовыхОтчетов - Элемент операнда.
// 	 					- Строка - адрес временного хранилища, содержащего данные элемента операнда.
// 	 *ЭлементыТаблицы - ТаблицаЗначений - табличная часть:
// 	   **Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - Строка бюджета.
// 	   **Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - Колонка бюджета.
// 	   **Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент на пересечении.
// 	 *ДополнительныеПоля - ТаблицаЗначений - табличная часть:
// 	   **Реквизит - Строка - Имя реквизита.
// 	   **Наименование - Строка - Представление.
// 	   **ВыводитьЗаголовок - Булево - Признак вывода заголовка.
// 	   **ВОтдельнойКолонке - Булево - Признак отображения значения в отдельной колонке.
// 	 *ЭлементыОформления - ТаблицаЗначений - табличная часть:
// 	   **Оформление - ХранилищеЗначения - содержит настройки оформления.
// 	   **Условие - ХранилищеЗначения - содержит настройки компоновки.
// 	   **ТипОформляемойОбласти - ПеречислениеСсылка.ТипыОформляемыхОбластейБюджетныхОтчетов - тип области.
// 	   **КлючЭлементаОформления - УникальныйИдентификатор - Идентификатор элемента оформления.
// 	 *ОформляемыеСтроки - ТаблицаЗначений - табличная часть:
// 	   **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - оформляемый элемент.
// 	   **КлючЭлементаОформления - УникальныйИдентификатор - Идентификатор оформляемого элемента.
// 	 *ОформляемыеКолонки - ТаблицаЗначений - табличная часть:
// 	   **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - оформляемый элемент.
// 	   **КлючЭлементаОформления - УникальныйИдентификатор - Идентификатор оформляемого элемента.
// 	 *РасшифровкаПолейОтбораЭО - ТаблицаЗначений - табличная часть:
// 	   **ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент оформления.
// 	   **КлючЭлементаОформления - УникальныйИдентификатор - Идентификатор элемент оформления.
// 	   **ИмяПоляОтбора - Строка - Имя поля отбора.
// 	   **ИмяРесурса - Строка - Имя поля ресурса.
// 	 *ИсточникиЗначений - ТаблицаЗначений - табличная часть:
// 	   **Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент отчета.
// 	   **ДобавляемыеЗначенияДокумента - Булево - Флаг, указывающий, что источник значений является добавляемыми
// 	   				в экземпляре бюджета данными.
//
Функция РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, ИменаРеквизитов, Кэш)
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		РеквизитыОбъекта = ПолучитьИзВременногоХранилища(Элемент);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		РеквизитыОбъекта = Новый Структура;
		Для Каждого КлючИЗначение Из Структура Цикл
			РеквизитыОбъекта.Вставить(КлючИЗначение.Ключ,
				Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(Элемент, КлючИЗначение.Ключ, Кэш));
		КонецЦикла;
	КонецЕсли;
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

Процедура ТипизироватьКолонкиАналитики(СКД, Описание)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Для Каждого ВидАналитики Из Описание.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТипКолонки = ТипКолонкиСтруктурыЯчеек(ВидАналитики, Истина);
		ЗаголовокАналитики = Строка(ВидАналитики);
		
		ВыражениеПоля = БюджетированиеСервер.ВыражениеЗначенияАналитикиПоИсточникуИТипу(ИмяПоля, ВидАналитики);
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, ИмяПоля, ВыражениеПоля, ЗаголовокАналитики,,ТипКолонки);
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоЭлементовДереваЗначений(ДеревоЗначений, Сч=0)
	
	Для Каждого Стр Из ДеревоЗначений.Строки Цикл
		Сч = Сч + 1;
		Сч = КоличествоЭлементовДереваЗначений(Стр, Сч);
	КонецЦикла;
	
	Возврат Сч;

КонецФункции

#КонецОбласти

#Область Прочие

Функция ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	ПодчиненныеСтроки = ФинансоваяОтчетностьСервер.ПодчиненныеСтроки(СтрокаДерева);
	Если Не ПодчиненныеСтроки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВРодительскихСтрокахЕстьОпределенныйЭлемент(Знач СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	СтрокаРодитель = СтрокаДерева;
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(СтрокаРодитель, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаРодитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(СтрокаРодитель);
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает элементы отбора с признаком Использование = Истина
//
// Параметры:
//  ЭлементСравненияОтбор - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных -
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор)
	
	Для Каждого ЭлементОтбора Из ЭлементСравненияОтбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЕстьЗначимыеЭлементыОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьТаблицуИменИсточников(МассивКолонокИзмерений, ТаблицаИменИсточников, ТаблицаИсточников, КэшРеквизитовПоказателей)
	
	Для Каждого СтрокаЯчеек Из ТаблицаИсточников Цикл
		
		Для Каждого ИмяИзмерения Из МассивКолонокИзмерений Цикл
			ИсточникиЗначений = ИсточникиЗначенийИзЯчейкиСтруктурыЯчеекПоИмениИзмерения(СтрокаЯчеек, ИмяИзмерения);
			Если Не ЗначениеЗаполнено(ИсточникиЗначений) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Источник Из ИсточникиЗначений Цикл
				
				СвойстваПоУмолчанию = Новый Структура;
				СвойстваПоУмолчанию.Вставить("ВидИсточника", Перечисления.ВидыЭлементовФинансовогоОтчета.ПустаяСсылка());
				СвойстваПоУмолчанию.Вставить("ТипПоказателяБюджетов", Перечисления.ТипПоказателяБюджетов.ПустаяСсылка());
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Строка"); 
				СтруктураПоиска.Вставить("Колонка"); 
				СтруктураПоиска.Вставить("СтатьяБюджетов", Неопределено); 
				СтруктураПоиска.Вставить("ПоказательБюджетов", Справочники.ПоказателиБюджетов.ПустаяСсылка()); 
				СтруктураПоиска.Вставить("НефинансовыйПоказатель", Справочники.НефинансовыеПоказателиБюджетов.ПустаяСсылка());
				СтруктураПоиска.Вставить("РедактируемоеЗначение", "");
				СтруктураПоиска.Вставить("Измерение"); 
				СтруктураПоиска.Вставить("ИД_Источника");
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЯчеек, "Строка, Колонка");
				
				СтруктураПоиска.Измерение = ИмяИзмерения;
				СтруктураПоиска.ИД_Источника = Источник.Источник;
				Если ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
					СтруктураПоиска.СтатьяБюджетов = Источник.Объект;
					
					СвойстваПоУмолчанию.ВидИсточника = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов;
				ИначеЕсли ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
					ТипПоказателя = ЗначениеРеквизитаЭлементаВидаБюджета(Источник.Объект,
							"ТипПоказателя", КэшРеквизитовПоказателей);
					Если ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Расчетный Тогда
						СтруктураПоиска.ПоказательБюджетов = Источник.Объект;
						
						СвойстваПоУмолчанию.ВидИсточника = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
						СвойстваПоУмолчанию.ТипПоказателяБюджетов = Перечисления.ТипПоказателяБюджетов.Расчетный;
					Иначе
						// Целевой показатель в меппинге, получении плановых данных и данных по документу ведет себя как статья.
						СтруктураПоиска.СтатьяБюджетов = Источник.Объект;
						
						СвойстваПоУмолчанию.ВидИсточника = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
						СвойстваПоУмолчанию.ТипПоказателяБюджетов = Перечисления.ТипПоказателяБюджетов.Целевой;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
					СтруктураПоиска.НефинансовыйПоказатель = Источник.Объект;
					
					СвойстваПоУмолчанию.ВидИсточника = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель;
				ИначеЕсли ТипЗнч(Источник.Объект) = Тип("Строка") Тогда //редактируемое значение
					СтруктураПоиска.РедактируемоеЗначение = Источник.Объект;
					
					СвойстваПоУмолчанию.ВидИсточника = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение;
				ИначеЕсли Источник.Источник = "ВсеЭлементы" Тогда
					// Выборка из всех элементов аналитики
				Иначе
					ВызватьИсключение НСтр("ru = 'Неизвестный тип объекта источника значений';
											|en = 'Unknown value source object type'")
				КонецЕсли;
				
				НоваяСтрока = ТаблицаИменИсточников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваПоУмолчанию);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	МассивКолонокТаблицы = Новый Массив;
	Для Каждого КолонкаТаблицы Из ТаблицаИменИсточников.Колонки Цикл
		МассивКолонокТаблицы.Добавить(КолонкаТаблицы.Имя);
	КонецЦикла;
	ТаблицаИменИсточников.Свернуть(СтрСоединить(МассивКолонокТаблицы, ","));
	
КонецПроцедуры

// Возвращает закэшированное значение реквизита элемента вида бюджета.
//
// Параметры:
//	Ссылка       - СправочникСсылка.ЭлементыФинансовыхОтчетов - Элемент вида бюджета.
//	ИмяРеквизита - Строка - Имя реквизита элемента вида бюджета.
//	Кэш          - ТаблицаЗначений - таблица реквизитов элементов вида бюджета (см. функцию КэшРеквизитовЭлементовВидаБюджета).
//
// Возвращаемое значение:
//	Произвольный - Значение реквизита элемента вида бюджета.
//
Функция ЗначениеРеквизитаЭлементаВидаБюджета(Ссылка, ИмяРеквизита, Кэш) Экспорт
	
	Возврат Кэш.Найти(Ссылка, "Ссылка")[ИмяРеквизита];
	
КонецФункции


// Возвращает кэш реквизитов элементов финансовых отчетов по виду бюджета.
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Вид бюджета, для элементов которого необходимо получить кэш реквизитов.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица реквизитов элементов финансовых отчетов по виду бюджета.
//
Функция КэшРеквизитовЭлементовВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка,
		|	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати,
		|	ЭлементыФинансовыхОтчетов.ВидЭлемента,
		|	ЭлементыФинансовыхОтчетов.ОбратныйЗнак,
		|	ЭлементыФинансовыхОтчетов.Родитель,
		|	ЭлементыФинансовыхОтчетов.ЗначениеАналитики,
		|	ЭлементыФинансовыхОтчетов.ДополнительныйОтбор,
		|	ЭлементыФинансовыхОтчетов.ЭлементыТаблицы.(
		|		Ссылка,
		|		НомерСтроки,
		|		Строка,
		|		Колонка,
		|		Элемент
		|	)
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Кэш = РезультатЗапроса.Выгрузить();
	Кэш.Индексы.Добавить("Ссылка");
	
	Возврат Кэш;
	
КонецФункции

// Возвращает соответствие элементов, выводимых вместе с родителем.
// Необходим для указания корректной строки / колонки для расчета итогов по формуле
// в методе ЗаполнитьСведенияОбИсточникеДанных в случае, если аналитики сгруппированы
// (тогда в таблице ДанныеЯчеек указаны конечные строки и колонки).
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Вид бюджета, для элементов которого необходимо получить кэш реквизитов.
//
// Возвращаемое значение:
// 	Соответствие - Соответствие родительского вида аналитики или измерения и выводимого вместе с ним в той же группировке:
// 	 *Ключ - СправочникСсылка.ЭлементыФинансовыхОтчетов - Родительская строка / колонка (вид аналитики или измерение).
// 	 *Значение - СправочникСсылка.ЭлементыФинансовыхОтчетов - выводимая вместе с родительской строка / колонка (вид аналитики или измерение).
//
Функция ПолучитьКэшПодчиненныхЭлементовВыводимыхСРодителем(ВидБюджета)
	ЗначениеКэша = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.УстановитьПараметр("ВыводитьВместеСРодительским", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВыводитьВместеСРодительским);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
	|	ЭлементыФинансовыхОтчетов.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|		ПО ЭлементыФинансовыхОтчетов.Ссылка = ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка
	|			И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &ВыводитьВместеСРодительским
	|			И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение = ИСТИНА
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &ВидБюджета";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеКэша.Вставить(Выборка.Родитель, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ЗначениеКэша;
КонецФункции

Функция МассивВСписок(Массив) 
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

// Процедура возвращает отбор по имени 
// процедура не рекурсивная, т.к. вызывается из СравнитьОтборы,
// в которой уже обработан обход групп.
//
// Параметры:
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - искомый отбор
//  ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - отбор, где ищем
//  НайденныйЭлемент - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - найденный элемент отбора.
//  
// Возвращаемое значение:
//  Булево - 
//
Функция НайтиОтбор(ЭлементОтбора, ЭлементыОтбора, НайденныйЭлемент)
	
	Для Каждого ЭлементОтбораСравнения Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораСравнения) <> ТипЗнч(ЭлементОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораСравнения) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение
				И ЭлементОтбораСравнения.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение
				И ЭлементОтбораСравнения.ВидСравнения = ЭлементОтбора.ВидСравнения
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		Иначе
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ТипГруппы = ЭлементОтбора.ТипГруппы
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения; // ГруппаЭлементовОтбораКомпоновкиДанных, ЭлементОтбораКомпоновкиДанных -
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СравнитьОтборы(ИсточникОтбор, ЭлементСравненияОтбор)
	
	Если ИсточникОтбор = Неопределено
		И ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор.Отбор);
	КонецЕсли;
	
	Если ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ИсточникОтбор.Отбор);
	КонецЕсли;
	
	Если ТипЗнч(ИсточникОтбор) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыОтбораИсточник = ИсточникОтбор;
	Иначе
		ЭлементыОтбораИсточник = ИсточникОтбор.Отбор.Элементы;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСравненияОтбор) = Тип("КоллекцияЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыОтбораСравнения = ЭлементСравненияОтбор;
	Иначе
		ЭлементыОтбораСравнения = ЭлементСравненияОтбор.Отбор.Элементы;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораИсточник Цикл
		НайденныйЭлемент = Неопределено; // ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - 
		Если Не НайтиОтбор(ЭлементОтбора, ЭлементыОтбораСравнения, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент.Элементы) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбораСравнения Цикл
		НайденныйЭлемент = Неопределено; // ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных -
		Если Не НайтиОтбор(ЭлементОтбора, ЭлементыОтбораИсточник, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент.Элементы) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ТипИзмеренияСовпадаетСИскомым(СтрокаЭлемента, ТипИскомый, КэшДопРеквизитов)
	
	Если СтрокаЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ИскомоеИзмерение = Перечисления.ТипыИзмеренийФинансовогоОтчета[ТипИскомый];
		ИмяИзмерения = Неопределено;
		
		Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента)
			ИЛИ ЗначениеЗаполнено(СтрокаЭлемента.ЭлементОтчета) Тогда
			
			Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли Не ЗначениеЗаполнено(КэшДопРеквизитов) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения");
			Иначе
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИскомоеИзмерение = ИмяИзмерения Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает настройки ячеек таблиц вида бюджета.
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - Вид бюджета, для элементов которого необходимо получить настройку ячеек.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица настроек ячеек по виду бюджета:
// 	 *Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов - Элемент бюджета.
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
// 	 *Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов -  Родитель элемента бюджета.
//
Функция ЭлементыНастройкиЯчеекВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Элемент,
		|	ЭлементыФинансовыхОтчетов.Строка,
		|	ЭлементыФинансовыхОтчетов.Колонка,
		|	ЭлементыФинансовыхОтчетов.Ссылка.Родитель КАК Родитель
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.ЭлементыТаблицы КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Ссылка.Владелец = &ВидБюджета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Индексы.Добавить("Строка, Колонка, Родитель");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Процедура ПрочитатьЗначениеДопРеквизитаИсключитьДанныеВводимогоДокументаПриРасчете(МестоУстановкиЗначения,
				ЭлементФинансовогоОтчета, КэшДопРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	ДопРеквизит  = ДопРеквизиты.ИсключитьДанныеВводимогоДокументаПриРасчете;
	Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(ЭлементФинансовогоОтчета,
			ДопРеквизит,
			КэшДопРеквизитов);
	Если ТипЗнч(Значение) = Тип("Булево") Тогда
		МестоУстановкиЗначения["ИсключитьДанныеВводимогоДокументаПриРасчете"] = Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

