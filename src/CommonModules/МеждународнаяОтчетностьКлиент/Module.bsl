
////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, обеспечивающие работу генератора финансовых отчетов
//  для получения финансовой отчетности.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Раскрывает все узлы переданного дерева
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма на которой размещен элемент ДеревоЗначений.
//  ДанныеДереваЭлементов - ДанныеФормыДерево - элемент формы содержащий дерево значений.
//
Процедура РазвернутьДеревоСохраненныхЭлементов(Форма, ДанныеДереваЭлементов) Экспорт
	
	НайденныеЭлементы = ДанныеДереваЭлементов.ПолучитьЭлементы();
	Если НайденныеЭлементы.Количество() = 1 Тогда
		ИдентификаторСтроки = НайденныеЭлементы[0].ПолучитьИдентификатор();
		Форма.Элементы.ДеревоСохраненныхЭлементов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет суммы выделенных ячеек табличного документа.
//
// Параметры:
//	ПолеСумма - Число - Сумма ячеек.
//	Результат - ТабличныйДокумент - Табличный документ с ячейками.
//	КэшВыделеннойОбласти - Структура - Содержит ранее рассчитанные значения ячеек.
//	НеобходимоВычислятьНаСервере - Булево - Признак того, что необходим вызов сервера.
//
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере) Экспорт
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено.
			ИЛИ КэшВыделеннойОбласти.Свойство("T") Тогда // Выделен весь табличный документ (Ctrl+A).
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте.
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь)
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов.
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Число(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(Символ(32)+Символ(43), Ячейка.Текст, Символ(0)));
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
							// Запись в журнал регистрации не требуется.
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше.
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере.
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииРасшифровкиОтчета

// Вызывается из обработчика формы отчета ОбработкаРасшифровки из отчета СКД 
// сформированного генератором финансовой отчетности и экземпляров финансовой отчетности.
//
// Параметры:
//
//  ФормаОтчета - ФормаКлиентскогоПриложения - форма отчета вызвавшего обработку расшифровки.
//  Элемент - ПолеФормы - элемент формы содержащий результат отчета.
//  Расшифровка - Структура - стандартная расшифровка СКД.
//
Процедура ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка) Экспорт
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Расшифровка.Свойство("Отбор") Тогда
		Расшифровка.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	ПараметрыОтчета = НовыеПараметрыОтчета(); // Структура
	Если ФормаОтчета.ИмяФормы = "Отчет.МеждународныйОтчет.Форма.ФормаОтчета" Тогда
		
		ОтчетФормы = ФормаОтчета.Отчет;
		
		Если ФормаОтчета.ИспользоватьОтборПоОрганизациям Тогда
			Расшифровка.Отбор.Вставить("Организация", ФормаОтчета.Организации.ВыгрузитьЗначения());
		КонецЕсли;
		Если ФормаОтчета.ИспользоватьОтборПоПодразделениям Тогда
			Расшифровка.Отбор.Вставить("Подразделение", ФормаОтчета.Подразделения.ВыгрузитьЗначения());
		КонецЕсли;
		Если ФормаОтчета.ИспользоватьОтборПоНаправлениям Тогда
			Расшифровка.Отбор.Вставить("НаправлениеДеятельности", ФормаОтчета.Направления.ВыгрузитьЗначения());
		КонецЕсли;
		
	Иначе
		
		ОтчетФормы = ФормаОтчета.Объект;
		
		МассивОрганизаций = Новый Массив;
		Если ЗначениеЗаполнено(ОтчетФормы.Организация) Тогда
			МассивОрганизаций.Добавить(ОтчетФормы.Организация);
		КонецЕсли;
		
		МассивПодразделений = Новый Массив;
		Если ЗначениеЗаполнено(ОтчетФормы.Подразделение) Тогда
			МассивПодразделений.Добавить(ОтчетФормы.Подразделение);
		КонецЕсли;
		
		Расшифровка.Отбор.Вставить("Организация", 	МассивОрганизаций);
		Расшифровка.Отбор.Вставить("Подразделение", МассивПодразделений);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ФормаОтчета);
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ОтчетФормы);
	Если НЕ Расшифровка.Свойство("Отбор") Тогда
		Расшифровка.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	ПараметрыОтчета.Вставить("Значение", Элемент.ТекущаяОбласть.Текст);
	ПараметрыОтчета.АдресНастроек = ПоместитьВоВременноеХранилище(Неопределено, ФормаОтчета.УникальныйИдентификатор);
	ПараметрыРасшифровки = МеждународнаяОтчетностьВызовСервера.ПараметрыРасшифровкиОтчета(Расшифровка, ПараметрыОтчета);
	ПараметрыРасшифровки.КратностьСумм = ОтчетФормы.КратностьСумм;
		
	Если ПараметрыРасшифровки = Неопределено ИЛИ ПараметрыРасшифровки.Показатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатель = ПараметрыРасшифровки.Показатель; //Структура - см. ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета
	Если Показатель.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		Если ТипЗнч(Показатель.СчетПланаСчетов) = МеждународныйУчетКлиентСервер.ТипПланСчетов() Тогда
			
			ПараметрыОткрытияОтчета= ПараметрыРасшифровки.ПараметрыОткрытияБухгалтерскогоОтчетаМеждународного;
			КлючНастроек = "РасшифровкаФинансовогоОтчета";
			
			ОтчетРасшифровки = Новый Структура("ИмяОтчета, ИмяВарианта", 
					ПараметрыОткрытияОтчета.ИмяОтчета,
					ПараметрыОткрытияОтчета.ИмяВариантаОтчета);
					
			МеждународныйУчетКлиент.ОткрытьРасшифровку(
				ОтчетРасшифровки, 
				ПараметрыОткрытияОтчета.КомпоновщикНастроек, 
				КлючНастроек, 
				КлючНастроек);
			
		ИначеЕсли ТипЗнч(Показатель.СчетПланаСчетов) = РеглУчетКлиентСервер.ТипПланСчетов() Тогда
			НастройкаОтчета = ПараметрыРасшифровки.НастройкаАнализаСчетаРегл;
			РеглУчетКлиент.ОткрытьОтчетАнализСчета(ПараметрыРасшифровки.Отбор, НастройкаОтчета.АдресНастроек);
		Иначе
			ПоказатьЗначение(Неопределено, Показатель.ЭлементОтчета);
		КонецЕсли;
	ИначеЕсли Показатель.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
		ПараметрыФормы = Новый Структура("СформироватьОтчет", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ОткрытьФорму("Отчет.МеждународныйОтчет.Форма", ПараметрыФормы, ФормаОтчета, Истина);
		
	ИначеЕсли Показатель.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		ПоказатьЗначение(Неопределено, Показатель.НемонетарныйПоказатель);
		
	ИначеЕсли ПараметрыОтчета.ВидОтчета <> Показатель.Владелец
		И ЗначениеЗаполнено(Показатель.Владелец) Тогда
		ПараметрыФормы = Новый Структура("СформироватьОтчет", Истина);
		ПараметрыРасшифровки.ВидОтчета = Показатель.Владелец;
		Если Показатель.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			ПараметрыРасшифровки.Показатель = ПараметрыРасшифровки.ПустаяСсылка;
		КонецЕсли;
		ПараметрыФормы.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ОткрытьФорму("Отчет.МеждународныйОтчет.Форма.ФормаОтчета", ПараметрыФормы, ФормаОтчета, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСФормулами

// Функция добавляет новые операнды в таблицу операндов
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - Форма конструктора формул
//  НовыеОперанды  - Массив - Строки дерева операндов
//  ТаблицаОперандов - ТаблицаЗначений - Таблица выбранных в формуле операндов:
//   *СчетПоказательИзмерение - Строка, СправочникСсылка.НемонетарныеПоказатели, ПланСчетовСсылка - 
//   *ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
//   *Идентификатор - Строка - 
//   *НаименованиеДляПечати - Строка - 
//   *ЭтоСвязанный - Булево - 
//   *АдресСтруктурыЭлемента - Строка - 
//   *НестандартнаяКартинка - Число - 
//   *ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
//   *Идентификатор - Строка - 
//   *СчетПланаСчетов - ПланСчетовСсылка - 
//   *ТипИтога - ПеречислениеСсылка.ТипыИтогов - 
//   *НачальноеСальдо - Булево - 
//   *ЕстьНастройки - Булево - 
//   *Точность - Число -
//  Уникальный - Булево - признак уникальности операндов (добавлять операнды если есть).
//
// Возвращаемое значение:
//   Массив   - массив добавленных строк таблицы операндов.
//
Функция ДобавитьОперандыФормулы(Форма, НовыеОперанды, ТаблицаОперандов, Уникальный = Истина) Экспорт
	
	ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.СальдоДт");
	МассивДобавленных = Новый Массив;
	Для Каждого Операнд Из НовыеОперанды Цикл
		
		Если Операнд.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = ИмяОперанда(Операнд, ТаблицаОперандов, Уникальный);
		НайденныйОперанд = Неопределено;
		Если ЕстьПоказатель(Идентификатор, ТаблицаОперандов, НайденныйОперанд) Тогда
			МассивДобавленных.Добавить(НайденныйОперанд);
		ИначеЕсли Операнд.ЭтоСвязанный Тогда
			ДобавитьСохраненныйОперанд(Форма, ТаблицаОперандов, Операнд, МассивДобавленных);
		Иначе
			НоваяСтрока = ТаблицаОперандов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Операнд,,"ЭтоСвязанный");
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.СчетПланаСчетов = Операнд.ЭлементВидаОтчетности;
			НоваяСтрока.ТипИтога = ТипИтога;
			НоваяСтрока.СчетПоказательИзмерение = Операнд.ЭлементВидаОтчетности;
			МассивДобавленных.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если НЕ Форма.Модифицированность Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДобавленных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// Не нашли нужную область в кэше, поэтому переинициализируем кэш.
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура;
			СтруктураАдресВыделеннойОбласти.Вставить("Верх", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Низ",  0);
			СтруктураАдресВыделеннойОбласти.Вставить("Лево", 0);
			СтруктураАдресВыделеннойОбласти.Вставить("Право",0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура;
				СтруктураАдресВыделеннойОбласти.Вставить("Верх",  ВыделеннаяОбласть.Верх);
				СтруктураАдресВыделеннойОбласти.Вставить("Низ",   ВыделеннаяОбласть.Низ);
				СтруктураАдресВыделеннойОбласти.Вставить("Лево",  ВыделеннаяОбласть.Лево);
				СтруктураАдресВыделеннойОбласти.Вставить("Право", ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ЕстьПоказатель(Идентификатор, ТаблицаОперандов, НайденныйОперанд = Неопределено)
	
	Для Каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			НайденныйОперанд = СтрокаОперанда;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяОперанда(Операнд, ТаблицаОперандов, Уникальный = Истина)
	
	Если Операнд.Свойство("ЭлементВидаОтчетности")
		И (ТипЗнч(Операнд.ЭлементВидаОтчетности) = МеждународныйУчетКлиентСервер.ТипПланСчетов()
		ИЛИ ТипЗнч(Операнд.ЭлементВидаОтчетности) = РеглУчетКлиентСервер.ТипПланСчетов())
		ИЛИ Операнд.Свойство("СчетПланаСчетов") И ЗначениеЗаполнено(Операнд.СчетПланаСчетов) Тогда
		Результат = "Сч" + Операнд.Код;
		
		Результат = СтрЗаменить(Результат," ","");
		Результат = СтрЗаменить(Результат,".","_");
		Результат = СтрЗаменить(Результат,",","_");
		Результат = СтрЗаменить(Результат,"/","_");
	Иначе
		Попытка
			Результат = "П" + Формат(Число(Операнд.Код), "ЧН=0; ЧГ=0");
		Исключение
			Результат = "П" + Операнд.Код;
		КонецПопытки;
	КонецЕсли;
	
	Идентификатор = Результат;
	Если Не Уникальный Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Сч = 0;
	Пока ЕстьПоказатель(Идентификатор, ТаблицаОперандов) Цикл
		Сч = Сч + 1;
		Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Процедура ДобавитьСохраненныйОперанд(Форма, ТаблицаОперандов, Операнд, МассивДобавленных)

	ДанныеОперанда = МеждународнаяОтчетностьКлиентСервер.НовыеДанныеОперанда();
	ЗаполнитьЗначенияСвойств(ДанныеОперанда,Операнд);
	Добавлено = МеждународнаяОтчетностьВызовСервера.ДобавитьСохраненныйОперанд( 
					ДанныеОперанда, 
					Форма.ИдентификаторГлавногоХранилища);
	
	Для Каждого НовыйОперанд Из Добавлено.НовыеОперанды Цикл
		НоваяСтрока = ТаблицаОперандов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйОперанд);
		Если ПустаяСтрока(НоваяСтрока.Идентификатор) Тогда
			НоваяСтрока.Идентификатор = ИмяОперанда(НовыйОперанд, ТаблицаОперандов);
		КонецЕсли;
		МассивДобавленных.Добавить(НовыйОперанд);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Добавлено.Формула) Тогда
		Если НЕ ПустаяСтрока(Форма.Формула) Тогда
			Форма.Формула = Форма.Формула + Символы.ПС;
		КонецЕсли;
		Форма.Формула = Форма.Формула + Добавлено.Формула;
	КонецЕсли;

КонецПроцедуры

Функция НовыеПараметрыОтчета()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОтчета");
	Результат.Вставить("КомплектОтчетности");
	Результат.Вставить("НачалоПериода");
	Результат.Вставить("КонецПериода");
	Результат.Вставить("ДанныеРасшифровки");
	Результат.Вставить("АдресНастроек");
	Результат.Вставить("Организация");
	Результат.Вставить("Подразделение");
	Результат.Вставить("НаправлениеДеятельности");
	Результат.Вставить("Ресурс");
	Результат.Вставить("ДанныеПоказателя");
	Возврат Результат;
	
КонецФункции

#КонецОбласти
