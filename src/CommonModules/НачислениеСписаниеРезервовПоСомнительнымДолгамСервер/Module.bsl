#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт

	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам);
		//++ Локализация
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетРезервовПоСомнительнымДолгам);
		//-- Локализация

	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда

		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам);

	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам);
	КонецЕсли;

	Возврат Параметры;

КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт

	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие;

	МетаданныеРегистра = Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;

	Возврат ТекстыЗапросов;

КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие;
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРезервыПоСомнительнымДолгам",
		РегистрыНакопления.РезервыПоСомнительнымДолгам.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;

КонецФункции

// Процедура формирования движений по подчиненным регистрам резервов по сомнительным долгам.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РезервыПоСомнительнымДолгам");
	//++ Локализация
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетРезервовПоСомнительнымДолгам");
	//-- Локализация

КонецПроцедуры

#КонецОбласти

#Область ЗакрытиеМесяца

//++ НЕ УТ
#Область ОбработкаЭтаповЗакрытияМесяца

// Добавляет этап закрытия месяца Формирование резервов по сомнительным долгам.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - группа. в которую нужно добавить новый этап
//
Процедура ДобавитьЭтап_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаЭтапов, ТекущийРодитель) Экспорт

	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.Использование_ФормированиеРезервовПоСомнительнымДолгам");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.Выполнить_ФормированиеРезервовПоСомнительнымДолгам");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.Формы.ФормаСписка.ПолноеИмя());

КонецПроцедуры

// Проверка необходимости использования этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ФормированиеРезервовПоСомнительнымДолгам(ПараметрыОбработчика) Экспорт

	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);

	Запрос.Текст = ТекстЗапросаСостояниеФормированияРезервовПоСомнительнымДолгам();
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию(
		"НоваяАрхитектураВзаиморасчетов"));

	Запрос.Выполнить();
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);

	Если РазмерыВременныхТаблиц.вт_ОрганизацииСРезервами = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика, НСтр(
			"ru = 'Нет организаций, для которых в учетной политике используется формирование резервов';
			|en = 'There are no companies for which the loss allowance generation is used in the accounting policy'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	ИначеЕсли РазмерыВременныхТаблиц.вт_ОрганизацииСОстатками = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика, НСтр(
			"ru = 'Нет остатков по регистрам расчетов с клиентами, поставщиками, по регистрам финансовых инструментов и по резервов';
			|en = 'No balance in registers of payments to customers, vendors, in registers of financial instruments and in reserves'",
			ОбщегоНазначения.КодОсновногоЯзыка()));

	Иначе
		ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,
			"вт_ОрганизацииСРезервами");
	КонецЕсли;

	Если РазмерыВременныхТаблиц.вт_ОрганизацииБезДокумента > 0 Тогда

		ВременнаяТаблицаОрганизаций = ПараметрыОбработчика.МенеджерВременныхТаблиц.Таблицы.Найти(
			"вт_ОрганизацииБезДокумента");
		Если ВременнаяТаблицаОрганизаций <> Неопределено Тогда
			МассивОрганизаций = ВременнаяТаблицаОрганизаций.ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Организация");
			Для Каждого Организация Из МассивОрганизаций Цикл

				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для организации %1 нет документа начисления резервов по сомнительным долгам за %2';
					|en = 'The %1 company does not have a document that accrues loss allowance for %2'"),
					Организация, РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(
					ПараметрыОбработчика.ПараметрыРасчета.КонецПериода)));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	МассивОрганизаций = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;

	ВременнаяТаблицаОрганизаций = ПараметрыОбработчика.МенеджерВременныхТаблиц.Таблицы.Найти("вт_ОрганизацииКОтражению");
	Если Не ВременнаяТаблицаОрганизаций = Неопределено Тогда
		МассивОрганизаций = ВременнаяТаблицаОрганизаций.ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Организация");
	КонецЕсли;

	ЗакрытиеМесяцаСервер.УстановитьДополнительноеСвойствоОбработчика(ПараметрыОбработчика,
		"МассивОрганизацийКОтражению", МассивОрганизаций);

КонецПроцедуры

// Выполнение этапа закрытия месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Выполнить_ФормированиеРезервовПоСомнительнымДолгам(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	ДополнительныеСвойства = ПараметрыОбработчика.ДанныеЭтапа.ДополнительныеСвойства;

	НачалоПериода = ЗакрытиеМесяцаСервер.НачалоРасчета(ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыРасчета.КонецПериода, , ПараметрыРасчета.МассивОрганизаций);

	Пока НачалоПериода <= ПараметрыРасчета.КонецПериода Цикл
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоПериода, ПараметрыРасчета.МассивОрганизаций);
		НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		// Этап 1. Подготовка работы с заданиями.

		НачатьТранзакцию();

		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода,
				НомерЗаданияДоРасчета, ДоступныеОрганизации, ПараметрыОбработчика.ДанныеЭтапа.Код);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДоступныеОрганизации, НачалоПериода);
		КонецПопытки;
		
		// Этап 2. Собственно расчет по организациям и периоду.
		Попытка
			НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УдалитьСтарыеРезервыПриЗакрытииМесяца(
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
			СформироватьРезервыПриЗакрытииМесяца(ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);

			Документы.РасчетКурсовыхРазниц.ПереоценитьРезервыПоСомнительнымДолгам(
					ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		Исключение
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'Формирование резервов по сомнительным долгам за период %1 завершилось с ошибкой:
					|%2';
					|en = 'Generation of loss allowance for period %1 was completed with an error:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		КонецПопытки;
		
		// Этап 3. Завершение работы с заданиями.

		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика, ДанныеКРасчетуЗаМесяц);

		НачалоПериода = ОкончаниеПериода + 1;
	КонецЦикла;
	
	// Теперь найдем организации, у которых не было заданий и отсутствуют документы формирования резервов.
	// Сформируем дополнительно документы для этих организаций в текущем периоде.

	МассивОрганизацийКОтражению = Новый Массив;
	Если ДополнительныеСвойства.Свойство("МассивОрганизацийКОтражению") Тогда
		МассивОрганизацийКОтражению = ДополнительныеСвойства.МассивОрганизацийКОтражению;
	КонецЕсли;

	Если Не МассивОрганизацийКОтражению.Количество() = 0 Тогда
		
		// Убираем из организаций к отражению те, по которым выше выполнились задания в текущем месяце.
		Если Не ДанныеКРасчетуЗаМесяц = Неопределено Тогда
			Для Каждого Организация Из ДанныеКРасчетуЗаМесяц.Организация Цикл
				ОтраженнаяОрганизация = МассивОрганизацийКОтражению.Найти(Организация);
				Если ОтраженнаяОрганизация = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				МассивОрганизацийКОтражению.Удалить(ОтраженнаяОрганизация);
			КонецЦикла;
		КонецЕсли;
		
		// По остальным организациям формируем резервы.
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(ПараметрыРасчета.КонецПериода, МассивОрганизацийКОтражению);
		МассивОрганизацийКОтражению = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(ДоступныеОрганизации, МассивОрганизацийКОтражению);

		Если Не МассивОрганизацийКОтражению.Количество() = 0 Тогда
		
			НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.УдалитьСтарыеРезервыПриЗакрытииМесяца(
				МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);
			ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(МассивОрганизацийКОтражению, НачалоПериода);
			СформироватьРезервыПриЗакрытииМесяца(МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);

			Документы.РасчетКурсовыхРазниц.ПереоценитьРезервыПоСомнительнымДолгам(
					МассивОрганизацийКОтражению, ПараметрыРасчета.КонецПериода);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Описание проверок этапа закрытия месяца.
//
// Параметры:
//	ТаблицаПроверок - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации.
//
Процедура ОписаниеПроверок_ФормированиеРезервовПоСомнительнымДолгам(ТаблицаПроверок) Экспорт
	
	// Проверка документов, которые необходимо создать.

	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам");

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр(
		"ru = 'Не отражена операция формирования резервов по сомнительным долгам';
		|en = 'The transaction of generation of loss allowance is not recorded'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр(
		"ru = 'В каждом месяце должен быть создан документ ""Начисление и списание резервов по сомнительным долгам"".';
		|en = 'Create the ""Accrual and write-off of loss allowance"" document for each month.'",
		ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Проверка документов, которые необходимо скорректировать вручную.

	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам",
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"НачислениеСписаниеРезервовПоСомнительнымДолгамСервер.ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам");

	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки, НСтр(
		"ru = 'Изменилась дебиторская задолженность резервов по сомнительным долгам';
		|en = 'Receivables of loss allowance were changed'",
		ОбщегоНазначения.КодОсновногоЯзыка()), НСтр(
		"ru = 'Дебиторская задолженность по оперативным регистрам учета должна совпадать с документом ""Начисление и списание резервов по сомнительным долгам"".';
		|en = 'Receivables for operational accounting registers must match the ""Accrual and write-off of loss allowance"" document.'",
		ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

// Этап требуется, если в текущем месяце отсутствует документ формирования резервов по сомнительным долгам.
//
// Параметры:
//  ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНеобходимостиФормированияРезервовПоСомнительнымДолгам(ПараметрыПроверки) Экспорт

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_ОрганизацииКОтражению", НСтр(
		"ru = 'Не создан документ ""Начисление и списание резервов по сомнительным долгам"" по организации ""%1"" за период %2';
		|en = 'The ""Accrual and write-off of loss allowance"" document is not created for the ""%1"" company for period %2'",
		ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей);

	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
			ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц, "вт_ОрганизацииКОтражению");
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры, КоличествоДанных);
	КонецЕсли;

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки, ПараметрыРегистрации);

КонецПроцедуры

// Этап требуется, если дебиторская задолженность сохраненная в документе отличается от остатков дебиторской задолженности в учете.
// 
// Параметры:
//  ПараметрыПроверки - Структура - параметр процедуры-обработчика проверки, см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаИзмененияДебиторскойЗадолженностиРезервовПоСомнительнымДолгам(ПараметрыПроверки) Экспорт

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Документ", НСтр("ru = 'Документ ""Начисление и списание резервов по сомнительным долгам""';
											|en = 'The ""Accrual and write-off of loss allowance"" document'",
		ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"вт_ОрганизацииКПроверке", НСтр("ru = 'Для документа ""Начисление и списание резервов по сомнительным долгам"" по организации ""%1"" за период %2 есть изменения в дебиторской задолженности
										|Необходимо зайти в документ ""Начисление и списание резервов по сомнительным долгам"" и вручную поправить строки (поправить сумму резерва, оценку, удалить строку, ...), отмеченные флагом ""Нужна проверка"".
										|После исправления необходимо снять флаг ""Нужна проверка"" у данных строк.';
										|en = 'There are changes in receivables for the ""Accrual and write-off of loss allowance"" document for the ""%1"" company for period %2
										|Go to the ""Accrual and write-off of loss allowance"" document and correct the lines (correct reserve amount, valuation, remove the line, ...), marked by the ""Need check"" check box, manually.
										|After correction clear the ""Need check"" check box in these lines.'",
		ОбщегоНазначения.КодОсновногоЯзыка()), СписокПолей, "Документ");

	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
			ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц, "вт_ОрганизацииКПроверке");
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры, КоличествоДанных);
	КонецЕсли;

	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки, ПараметрыРегистрации);

КонецПроцедуры

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

// Выбирает задания к закрытию месяца.
// Если по учетной политике резервы не формируются, то задания не регистрируются.
// 
// Параметры:
// 	Запрос - Запрос - запрос, содержащий временную таблицу изменений расчетов с колонками:
// 	* Период - Дата -
// 	* Организация - СправочникСсылка.Организации - 
// 	* Документ - ДокументСсылка - 
// 	ИмяТаблицыИзменений - Строка - имя временной таблицы изменений расчетов.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка заданий к закрытию месяца:
//  * Месяц - Дата - период задания
//  * Организация - СправочникСсылка.Организации - организация, по которой сформируется задание
//  * Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - всегда ФормированиеРезервовПоСомнительнымДолгам
//  * Документ - Неопределено -
//
Функция ВыборкаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(Запрос, ИмяТаблицыИзменений) Экспорт

	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяТаблицыИзменений;

	Запрос.Текст = ТекстЗапросаДействующихУчетныхПолитик(ИмяТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики)
		+ ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(
		ИмяТаблицыДействующиеУчетныеПолитики) + ОбщегоНазначения.РазделительПакетаЗапросов() + "УНИЧТОЖИТЬ "
		+ ИмяТаблицыДействующиеУчетныеПолитики + "; ";

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Текст запроса заданий к закрытию месяца резервов по сомнительным долгам.
// 
// Параметры:
// 	ИмяТаблицыДействующиеУчетныеПолитики - Строка - имя временной таблицы действующих учетных политик.
//   (См. ТекстЗапросаДействующихУчетныхПолитик).
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики) Экспорт
	
	// Порядок полей в запросе важен, т.к. используется в объединении с другими запросами.
	// В частности из процедуры модуля набора записей регистра накопления
	// (См. РегистрНакопления.ВыручкаИСебестоимостьПродаж) ПриЗаписи.

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(вт_ДействующиеУчетныеПолитики.Период, МЕСЯЦ) КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам) КАК Операция,
	|	вт_ДействующиеУчетныеПолитики.Организация КАК Организация,
	|	вт_ДействующиеУчетныеПолитики.Документ КАК Документ
	|ИЗ
	|	#ДействующиеУчетныеПолитики КАК вт_ДействующиеУчетныеПолитики
	|ГДЕ
	|	(вт_ДействующиеУчетныеПолитики.ФормироватьРезервыПоСомнительнымДолгам
	|			ИЛИ вт_ДействующиеУчетныеПолитики.ФормироватьРезервыПоСомнительнымДолгамНУ)";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДействующиеУчетныеПолитики", ИмяТаблицыДействующиеУчетныеПолитики);

	Возврат ТекстЗапроса;

КонецФункции

// Текст запроса действующих учетных политики резервов по сомнительным долгам.
//
// Параметры:
// 	ИмяТаблицыИзменений - Строка - имя временной таблицы изменений расчетов.
// 	ИмяПодготовленнойТаблицы - Строка - имя временной таблицы, в которую необходимо поместить действующие учетные политики.
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаДействующихУчетныхПолитик(ИмяТаблицыИзменений, ИмяПодготовленнойТаблицы) Экспорт

	ТекстыЗапросаПакет = Новый Массив;

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ТаблицаИзменений.Период КАК Период,
	|	вт_ТаблицаИзменений.Организация КАК Организация,
	|	ЕСТЬNULL(Организации.ГоловнаяОрганизация, вт_ТаблицаИзменений.Организация) КАК ОрганизацияУчетнойПолитики,
	|	вт_ТаблицаИзменений.Документ КАК Документ
	|ПОМЕСТИТЬ вт_ОрганизацииУчетнойПолитики
	|ИЗ
	|	#ТаблицаИзменений КАК вт_ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО вт_ТаблицаИзменений.Организация = Организации.Ссылка
	|			И Организации.ОбособленноеПодразделение";

	ТекстыЗапросаПакет.Добавить(ТекстЗапроса);

	ТекстыЗапросаПакет.Добавить(ТекстЗапросаУчетныеПолитикиФинансовогоУчета());
	ТекстыЗапросаПакет.Добавить(
		НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаУчетныеПолитикиБУ());
	ТекстыЗапросаПакет.Добавить(
		НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаУчетныеПолитикиНУ());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	вт_ТаблицаИзменений.Период КАК Период,
	|	вт_ТаблицаИзменений.Организация КАК Организация,
	|	вт_ТаблицаИзменений.Документ КАК Документ,
	|	вт_УчетныеПолитикиБУ.ВидРазницПБУ18РезервовПоСомнительнымДолгам КАК ВидРазницПБУ18РезервовПоСомнительнымДолгам,
	|	вт_УчетныеПолитикиНУ.ФормироватьРезервыПоСомнительнымДолгамНУ КАК ФормироватьРезервыПоСомнительнымДолгамНУ,
	|	вт_УчетныеПолитикиНУ.ПериодичностьРезервовПоСомнительнымДолгамНУ КАК ПериодичностьРезервовПоСомнительнымДолгамНУ,
	|	вт_УчетныеПолитикиУУ.ФормироватьРезервыПоСомнительнымДолгам КАК ФормироватьРезервыПоСомнительнымДолгам,
	|	вт_УчетныеПолитикиУУ.ПериодичностьРезервовПоСомнительнымДолгам КАК ПериодичностьРезервовПоСомнительнымДолгам
	|ПОМЕСТИТЬ #ИмяПодготовленнойТаблицы
	|ИЗ
	|	вт_ОрганизацииУчетнойПолитики КАК вт_ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УчетныеПолитикиБУ КАК вт_УчетныеПолитикиБУ
	|		ПО вт_ТаблицаИзменений.ОрганизацияУчетнойПолитики = вт_УчетныеПолитикиБУ.Организация
	|			И вт_ТаблицаИзменений.Период = вт_УчетныеПолитикиБУ.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УчетныеПолитикиНУ КАК вт_УчетныеПолитикиНУ
	|		ПО вт_ТаблицаИзменений.ОрганизацияУчетнойПолитики = вт_УчетныеПолитикиНУ.Организация
	|			И вт_ТаблицаИзменений.Период = вт_УчетныеПолитикиНУ.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_УчетныеПолитикиУУ КАК вт_УчетныеПолитикиУУ
	|		ПО вт_ТаблицаИзменений.ОрганизацияУчетнойПолитики = вт_УчетныеПолитикиУУ.Организация
	|			И вт_ТаблицаИзменений.Период = вт_УчетныеПолитикиУУ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_УчетныеПолитикиБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_УчетныеПолитикиНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_УчетныеПолитикиУУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ОрганизацииУчетнойПолитики";

	ТекстыЗапросаПакет.Добавить(ТекстЗапроса);

	ТекстЗапроса = СтрСоединить(ТекстыЗапросаПакет, ОбщегоНазначения.РазделительПакетаЗапросов());

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ИмяТаблицыИзменений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПодготовленнойТаблицы", ИмяПодготовленнойТаблицы);

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

// Проверяет совпадение указанного периода и периодичности формирования резервов.
//
// Параметры:
//	Периодичность - ПеречислениеСсылка.Периодичность - периодичность резервов
//	Период - Дата - период для формирования документа по данной операции
//
// Возвращаемое значение:
//	 Булево - признак необходимости формирования документа
//
Функция ТребуетсяФормированиеРезервовВУказанномПериоде(Периодичность, Период) Экспорт

	Результат = Ложь;

	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = Истина;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = (Месяц(Период) % 3 = 0);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = (Месяц(Период) = 12);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПолучитьИнтервалыОценкиЗадолженностиПоУмолчанию() Экспорт

	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("НаименованиеИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("НижняяГраницаИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("ВерхняяГраницаИнтервала");
	ТаблицаИнтервалов.Колонки.Добавить("Оценка");

	ИнтервалыОценки = Новый Массив;
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 1, 44, 0));
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 45, 90, 50));
	ИнтервалыОценки.Добавить(Новый Структура("Нижняя,Верхняя,Оценка", 91, 9999999999, 100));

	Наименования = Новый Массив;
	Наименования.Добавить("От 1 до 44 дней");
	Наименования.Добавить("От 45 до 90 дней");
	Наименования.Добавить("Свыше 91 дней");

	КолвоИнтервалов = ИнтервалыОценки.Количество();
	Для Индекс = 0 По КолвоИнтервалов - 1 Цикл
		Интервал = ИнтервалыОценки[Индекс];

		НоваяСтрока = ТаблицаИнтервалов.Добавить();
		НоваяСтрока.НаименованиеИнтервала = Наименования[Индекс];
		НоваяСтрока.НижняяГраницаИнтервала = Интервал.Нижняя;
		НоваяСтрока.ВерхняяГраницаИнтервала = Интервал.Верхняя;
		НоваяСтрока.Оценка = Интервал.Оценка;
	КонецЦикла;

	Возврат ТаблицаИнтервалов;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормированиеЗаданийКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
// 	ОтменаПроведения - Булево -
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц,
	ИменаВременныхТаблиц, ОтменаПроведения) Экспорт

	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос, ОтменаПроведения);

	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьНазванияТаблицДляЗаданий(Запрос, ЭлементСоответствия.Ключ);
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Возвращает таблицу оценки задолженности в соответствии с учетной политикой организации.
//
// Возвращаемое значение:
// 		ТаблицаЗначений - пустая таблица оценки (См. ПустаяТаблицаОценки)
//
Функция ТаблицаОценкиУУ(Организация, Период) Экспорт
	
	ТаблицаОценки = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПустаяТаблицаОценки();
	ТаблицаОценкиУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.ПорядокОценкиЗадолженности(Организация, Период);
	Если ТаблицаОценкиУчетнойПолитики <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОценкиУчетнойПолитики, ТаблицаОценки);
	КонецЕсли;
	Возврат ТаблицаОценки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает или перезаполняет документы Начисление и списание резервов по сомнительным долгам по переданным
// организациям за указанный период. Если согласно учетной политики резервы не формируются, то документ
// либо не создается, либо отменяется проведение.
// 
// Параметры:
// 	Организации - Массив - массив организаций для формирования документов
// 	Период - Дата - период формирования документов
//
Процедура СформироватьРезервыПриЗакрытииМесяца(Организации, Период)

	Запрос = Новый Запрос;

	ТекстыЗапросаПакет = Новый Массив;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц,
		Организации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтГоловныеОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ТолькоГоловныеОрганизации
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	ТекстыЗапросаПакет.Добавить(ТекстЗапроса);

	ТекстыЗапросаПакет.Добавить(ТекстЗапросаУчетнаяПолитикаУУ());
	ТекстыЗапросаПакет.Добавить(
		НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаУчетнаяПолитикаНУ());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаНУ.ФормироватьНУ, ЛОЖЬ) КАК ФормироватьНУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаНУ.ПериодичностьНУ, ЛОЖЬ) КАК ПериодичностьНУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ФормироватьУУ, ЛОЖЬ) КАК ФормироватьУУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПериодичностьУУ, ЛОЖЬ) КАК ПериодичностьУУ
	|ПОМЕСТИТЬ ВТУчетныеПолитикиОрганизаций
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаНУ КАК ВтУчетнаяПолитикаНУ
	|		ПО ГоловныеОрганизации.Организация = ВтУчетнаяПолитикаНУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
	|		ПО ГоловныеОрганизации.Организация = ВтУчетнаяПолитикаФинансовогоУчета.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУчетныеПолитикиОрганизаций.Организация,
	|	ВТУчетныеПолитикиОрганизаций.ФормироватьНУ КАК ФормироватьНУ,
	|	ВТУчетныеПолитикиОрганизаций.ФормироватьУУ КАК ФормироватьУУ,
	|	ВТУчетныеПолитикиОрганизаций.ПериодичностьНУ КАК ПериодичностьНУ,
	|	ВТУчетныеПолитикиОрганизаций.ПериодичностьУУ КАК ПериодичностьУУ,
	|	Документы.Ссылка КАК Документ,
	|	ЕСТЬNULL(Документы.Проведен, ЛОЖЬ) КАК ДокументПроведен,
	|	ВЫБОР
	|		КОГДА Документы.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДокументСуществует
	|ИЗ
	|	ВТУчетныеПолитикиОрганизаций КАК ВТУчетныеПолитикиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Документы
	|		ПО ВТУчетныеПолитикиОрганизаций.Организация = Документы.Организация
	|		И
	|		НЕ Документы.ПометкаУдаления
	|		И Документы.Дата = &КонецМесяца";

	ТекстыЗапросаПакет.Добавить(ТекстЗапроса);

	Запрос.Текст = СтрСоединить(ТекстыЗапросаПакет, ОбщегоНазначения.РазделительПакетаЗапросов());

	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДокументСуществует Тогда
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();

		Если Выборка.ДокументПроведен И Не Выборка.ФормироватьНУ
			И Не Выборка.ФормироватьУУ Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не Выборка.ФормироватьНУ И Не Выборка.ФормироватьУУ Тогда
			Продолжить;
		Иначе
			ДокументОбъект = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.СоздатьДокумент();
			ДокументОбъект.Дата = КонецМесяца(Период);
			ДокументОбъект.Организация = Выборка.Организация;
			ДокументОбъект.ОтражатьВБухгалтерскомУчете = Выборка.ФормироватьУУ
				И ТребуетсяФормированиеРезервовВУказанномПериоде(Выборка.ПериодичностьУУ, Период);
			ДокументОбъект.ОтражатьВНалоговомУчете = Выборка.ФормироватьНУ
				И ТребуетсяФормированиеРезервовВУказанномПериоде(Выборка.ПериодичностьНУ, Период);
			ДокументОбъект.ОтражатьВУправленческомУчете = Выборка.ФормироватьУУ
				И ТребуетсяФормированиеРезервовВУказанномПериоде(Выборка.ПериодичностьУУ, Период);
			ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;

		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ДокументОбъект.Организация);
		ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
		ПараметрыЗаполнения.Вставить("ПустойДокумент", ДокументОбъект.ДебиторскаяЗадолженность.Количество() = 0);

		Результат = Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПолучитьДанныеДляЗаполненияДебиторскойЗадолженности(
			ПараметрыЗаполнения);

		ДокументОбъект.ЗаполнитьДокумент(Результат.Выгрузить());
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаУчетнаяПолитикаУУ()

	Возврат "ВЫБРАТЬ
			|	ГоловныеОрганизации.Организация КАК Организация,
			|	ТаблицаСрезПоследних.ФормироватьРезервыПоСомнительнымДолгам КАК ФормироватьУУ,
			|	ТаблицаСрезПоследних.ПериодичностьРезервовПоСомнительнымДолгам КАК ПериодичностьУУ
			|ПОМЕСТИТЬ ВтУчетнаяПолитикаФинансовогоУчета
			|ИЗ
			|	ТолькоГоловныеОрганизации КАК ГоловныеОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&НачалоПериода, Организация В
			|			(ВЫБРАТЬ
			|				ГоловныеОрганизации.Организация
			|			ИЗ
			|				ТолькоГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ТаблицаСрезПоследних
			|		ПО ГоловныеОрганизации.Организация = ТаблицаСрезПоследних.Организация
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация";

КонецФункции

Функция ТекстЗапросаУчетныеПолитикиФинансовогоУчета()

	Возврат "ВЫБРАТЬ
			|	вт_ТаблицаИзменений.Период КАК Период,
			|	вт_ТаблицаИзменений.Организация КАК Организация,
			|	МАКСИМУМ(УчетнаяПолитикаУУ.Период) КАК ПериодУчетнойПолитикиУУ
			|ПОМЕСТИТЬ вт_ПериодыУчетнойПолитикиУУ
			|ИЗ
			|	вт_ОрганизацииУчетнойПолитики КАК вт_ТаблицаИзменений
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаУУ
			|		ПО вт_ТаблицаИзменений.ОрганизацияУчетнойПолитики = УчетнаяПолитикаУУ.Организация
			|			И вт_ТаблицаИзменений.Период >= УчетнаяПолитикаУУ.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	вт_ТаблицаИзменений.Период,
			|	вт_ТаблицаИзменений.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(УчетнаяПолитикаУУ.ФормироватьРезервыПоСомнительнымДолгам, ЛОЖЬ) КАК ФормироватьРезервыПоСомнительнымДолгам,
			|	УчетнаяПолитикаУУ.ПериодичностьРезервовПоСомнительнымДолгам КАК ПериодичностьРезервовПоСомнительнымДолгам,
			|	вт_ПериодыУчетнойПолитикиУУ.Период КАК Период,
			|	вт_ПериодыУчетнойПолитикиУУ.Организация КАК Организация
			|ПОМЕСТИТЬ вт_УчетныеПолитикиУУ
			|ИЗ
			|	вт_ПериодыУчетнойПолитикиУУ КАК вт_ПериодыУчетнойПолитикиУУ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаУУ
			|		ПО вт_ПериодыУчетнойПолитикиУУ.Организация = УчетнаяПолитикаУУ.Организация
			|			И вт_ПериодыУчетнойПолитикиУУ.ПериодУчетнойПолитикиУУ = УчетнаяПолитикаУУ.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ вт_ПериодыУчетнойПолитикиУУ";

КонецФункции

// Функция получает параметры действующих на дату учетных политик бухгалтерского и налогового учетов.
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период - Дата.
// 
// Возвращаемое значение:
//  Структура - текущие параметры учета в привязке к регистру учетных политик:
// * УчетнаяПолитикаФинансовогоУчета - Неопределено, Структура - см. НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик
// * УчетнаяПолитикаБухУчета - Неопределено, Структура - см. НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик
// * НастройкиУчетаНалогаНаПрибыль - Неопределено, Структура - см. НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитик.
Функция ПолучитьДействующиеПараметрыУчетныхПолитик(Организация, Период) Экспорт
	
	ПараметрыУчетныхПолитик = Новый Структура;
	ПараметрыУчетныхПолитик.Вставить("УчетнаяПолитикаФинансовогоУчета", Неопределено);
	ПараметрыУчетныхПолитик.Вставить("УчетнаяПолитикаБухУчета", Неопределено);
	ПараметрыУчетныхПолитик.Вставить("НастройкиУчетаНалогаНаПрибыль", Неопределено);

	ПараметрыУчетныхПолитик.УчетнаяПолитикаФинансовогоУчета = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"УчетнаяПолитикаФинансовогоУчета",
		Организация,
		Период,
		Ложь);
	
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ДополнитьДействующиеПараметрыУчетныхПолитик(
		ПараметрыУчетныхПолитик,
		Организация,
		Период);
	
	Возврат ПараметрыУчетныхПолитик;
	
КонецФункции


#Область ФормированиеЗаданийКЗакрытиюМесяцаСлужебные

// Текст запроса, который преобразует переданную таблицу изменений (обязательные колонки Период, АналитикаУчетаПоПартнерам, Регистратор) в новую
// (Период, Организация, Регистратор). Организация берется из аналитики учета по партнерам.
// Результат сохраняет в новую временную таблицу переданного запроса.
// 
// Возвращаемое значение:
//   Строка - текст запроса для новой подготовленной таблицы
//
Функция ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений, ИмяПодготовленнойТаблицыИзменений,
	ИмяРеквизитаРегистратора = "Регистратор")

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Период,
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&Регистратор КАК Документ
	|ПОМЕСТИТЬ #ПодготовленнаяТаблицаИзменений
	|ИЗ
	|	#ТаблицаИзменений КАК ТаблицаИзменений
	|ГДЕ
	|	&Условие
	|;
	|";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаИзменений", ИмяТаблицыИзменений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПодготовленнаяТаблицаИзменений", ИмяПодготовленнойТаблицыИзменений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", СтрШаблон("ТаблицаИзменений.%1", ИмяРеквизитаРегистратора));
	Если ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыПоФинансовымИнструментам" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "(ТаблицаИзменений.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ДепозитВБанке)
															 |ИЛИ ТаблицаИзменений.ТипСуммы В (ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж),
															 |								  ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимостьАванс)))
															 |И (ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0
															 |		ИЛИ ТаблицаИзменений.СуммаРегл <> 0)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "Истина");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос, ОтменаПроведения)

	СоответствиеТекстовЗапросов = Новый Соответствие;
	//++ НЕ УТ
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДвиженияКонтрагентДоходыРасходы",
		ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ОтменаПроведения));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийВыручкаИСебестоимостьПродаж",
		ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам",
		ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыСКлиентамиПоСрокам",
		ТекстЗапросаРасчетыСКлиентамиПоСрокам(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам",
		ТекстЗапросаРасчетыСПоставщикамиПоСрокам(Запрос));
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		СоответствиеТекстовЗапросов.Вставить("РасчетыСКлиентамиПоДокументамИзменения",
			ТекстЗапросаРасчетыСКлиентамиПоДокументам(Запрос));
		СоответствиеТекстовЗапросов.Вставить("РасчетыСПоставщикамиПоДокументамИзменения",
			ТекстЗапросаРасчетыСПоставщикамиПоДокументам(Запрос));
	КонецЕсли;
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРезервыПоСомнительнымДолгам",
		ТекстЗапросаРезервыПоСомнительнымДолгам(Запрос, ОтменаПроведения));
	//-- НЕ УТ
	Возврат СоответствиеТекстовЗапросов;

КонецФункции

#Область ТекстыЗапросовЗаданийКЗакрытиюМесяца

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ОтменаПроведения)

	ИмяТаблицыИзменений = "ДвиженияКонтрагентДоходыРасходы";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ), МЕСЯЦ, ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Регистратор) = ТИП(Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам) И НЕ &ОтменаПроведения
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ
	|ПОМЕСТИТЬ ИмяПодготовленнойТаблицыИзменений
	|ИЗ
	|	ТаблицаИзмененийДвиженияКонтрагентДоходыРасходы КАК ТаблицаИзменений
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Регистратор) В (ТИП(Документ.ВводОстатков),
	|													ТИП(Документ.РасчетКурсовыхРазниц))
	|;";
	ТекстЗапросаВременныхТаблиц = СтрЗаменить(ТекстЗапросаВременныхТаблиц, "ИмяПодготовленнойТаблицыИзменений",
		ИмяПодготовленнойТаблицыИзменений);

	ТекстЗапросаВременныхТаблиц =  ТекстЗапросаВременныхТаблиц + ТекстЗапросаДействующихУчетныхПолитик(
		ИмяПодготовленнойТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);
	Запрос.УстановитьПараметр("ОтменаПроведения", ОтменаПроведения);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИмяТаблицыДействующиеУчетныеПолитики);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж(Запрос)

	МассивЗапросовВременныхТаблиц = Новый Массив;
	МассивИменаВременныхТаблицы = Новый Массив;

	ТекстИзменениеСуммыВыручкиРегл = "
									 |ВЫБРАТЬ
									 |	ТаблицаИзменений.Период КАК Период,
									 |	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
									 |	ТаблицаИзменений.Регистратор КАК Документ,
									 |	ТаблицаИзменений.СуммаВыручкиРегл
									 |ПОМЕСТИТЬ втИзменениеСуммыВыручкиРегл
									 |ИЗ
									 |	ТаблицаИзмененийВыручкаИСебестоимостьПродаж КАК ТаблицаИзменений
									 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
									 |		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
									 |	ПО
									 |		ТаблицаИзменений.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
									 |";
	МассивЗапросовВременныхТаблиц.Добавить(ТекстИзменениеСуммыВыручкиРегл);
	МассивИменаВременныхТаблицы.Добавить("втИзменениеСуммыВыручкиРегл");

	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики_втИзменениеСуммыВыручкиРегл";
	МассивЗапросовВременныхТаблиц.Добавить(ТекстЗапросаДействующихУчетныхПолитик("втИзменениеСуммыВыручкиРегл",
		ИмяТаблицыДействующиеУчетныеПолитики));
	МассивИменаВременныхТаблицы.Добавить(ИмяТаблицыДействующиеУчетныеПолитики);

	ТекстЗапросаВременныхТаблиц = СтрСоединить(МассивЗапросовВременныхТаблиц,
		ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ОбщегоНазначения.РазделительПакетаЗапросов();
	ИменаВременныхТаблицы = СтрСоединить(МассивИменаВременныхТаблицы, ",");

	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблицы);

	Возврат СтруктураТекстовЗапросов

КонецФункции

Функция ТекстЗапросаРасчетыПоФинансовымИнструментам(Запрос)

	ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыПоФинансовымИнструментам";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц = ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений,
		ИмяПодготовленнойТаблицыИзменений) + ТекстЗапросаДействующихУчетныхПолитик(ИмяПодготовленнойТаблицыИзменений,
		ИмяТаблицыДействующиеУчетныеПолитики) + ";";
	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;

	ТекстыЗапросовОбъединениеЗаданий = Новый Массив;
	ТекстЗапросаПоТаблицеИзменений = "ВЫБРАТЬ РАЗЛИЧНЫЕ
									 |	НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ) КАК Месяц,
									 |	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПереоценкаДенежныхСредствИФинансовыхИнструментов) КАК Операция,
									 |	Аналитика.Организация,
									 |	ТаблицаИзменений.Регистратор КАК Документ
									 |ИЗ
									 |	ТаблицаИзмененийРасчетыПоФинансовымИнструментам КАК ТаблицаИзменений
									 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
									 |		ПО ТаблицаИзменений.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
									 |ГДЕ
									 |	(ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Регистратор) = ТИП(Документ.РасчетКурсовыхРазниц)
									 |			ИЛИ ТаблицаИзменений.Договор.ВалютаВзаиморасчетов <> &ВалютаУпр
									 |			ИЛИ ТаблицаИзменений.Договор.ВалютаВзаиморасчетов <> Аналитика.Организация.ВалютаРегламентированногоУчета)
									 |	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Договор) <> ТИП(Справочник.ДоговорыАренды)
									 |	И (ТаблицаИзменений.Сумма <> 0 ИЛИ ТаблицаИзменений.СуммаУпр <> 0
									 |		ИЛИ ТаблицаИзменений.СуммаРегл <> 0)";

	ТекстыЗапросовОбъединениеЗаданий.Добавить(ТекстЗапросаПоТаблицеИзменений);

	ТекстЗапросаУчетныеПолитики = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(
		ИмяТаблицыДействующиеУчетныеПолитики);
	ТекстыЗапросовОбъединениеЗаданий.Добавить(ТекстЗапросаУчетныеПолитики);

	ТекстЗапроса = СтрСоединить(ТекстыЗапросовОбъединениеЗаданий, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(
		Истина));

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам(Запрос)
	ИмяТаблицыИзменений = "РасчетыСКлиентамиПоДокументамИзменения";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц = ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений,
		ИмяПодготовленнойТаблицыИзменений) + ТекстЗапросаДействующихУчетныхПолитик(ИмяПодготовленнойТаблицыИзменений,
		ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаРасчетыСКлиентамиПоСрокам(Запрос)
	ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыСКлиентамиПоСрокам";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц = ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений,
		ИмяПодготовленнойТаблицыИзменений, "ДокументРегистратор") + ТекстЗапросаДействующихУчетныхПолитик(
		ИмяПодготовленнойТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам(Запрос)
	ИмяТаблицыИзменений = "РасчетыСПоставщикамиПоДокументамИзменения";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц = ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений,
		ИмяПодготовленнойТаблицыИзменений) + ТекстЗапросаДействующихУчетныхПолитик(ИмяПодготовленнойТаблицыИзменений,
		ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоСрокам(Запрос)

	ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыСПоставщикамиПоСрокам";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц = ТекстЗапросаИзмененийПоАналитикеУчетаПоПартнерам(ИмяТаблицыИзменений,
		ИмяПодготовленнойТаблицыИзменений, "ДокументРегистратор") + ТекстЗапросаДействующихУчетныхПолитик(
		ИмяПодготовленнойТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

Функция ТекстЗапросаРезервыПоСомнительнымДолгам(Запрос, ОтменаПроведения)

	ИмяТаблицыИзменений = "ТаблицаИзмененийРезервыПоСомнительнымДолгам";
	ИмяПодготовленнойТаблицыИзменений = "_" + ИмяТаблицыИзменений;
	ИмяТаблицыДействующиеУчетныеПолитики = "ДействующиеУчетныеПолитики" + ИмяПодготовленнойТаблицыИзменений;

	ТекстЗапросаВременныхТаблиц =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ), МЕСЯЦ, ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Регистратор) = ТИП(Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам) И НЕ &ОтменаПроведения
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,
	|	ТаблицаИзменений.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ
	|ПОМЕСТИТЬ _ТаблицаИзмененийРезервыПоСомнительнымДолгам
	|ИЗ
	|	ТаблицаИзмененийРезервыПоСомнительнымДолгам КАК ТаблицаИзменений
	|;";

	ТекстЗапросаВременныхТаблиц =  ТекстЗапросаВременныхТаблиц + ТекстЗапросаДействующихУчетныхПолитик(
		ИмяПодготовленнойТаблицыИзменений, ИмяТаблицыДействующиеУчетныеПолитики) + ";";

	ИменаВременныхТаблиц = ИмяПодготовленнойТаблицыИзменений + ", " + ИмяТаблицыДействующиеУчетныеПолитики;
	ТекстЗапроса = ТекстЗапросаЗаданийКЗакрытиюМесяцаПриИзмененииРасчетов(ИмяТаблицыДействующиеУчетныеПолитики);
	Запрос.УстановитьПараметр("ОтменаПроведения", ОтменаПроведения);

	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса,
		ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц);
	Возврат СтруктураТекстовЗапросов;

КонецФункции

#КонецОбласти

//++ НЕ УТ

Функция ТекстЗапросаСостояниеФормированияРезервовПоСомнительнымДолгам()

	ТекстыЗапроса = Новый Массив;

#Область ОрганизацииСРезервами
	
	// Организации, по которым возможно начисление резервов по сомнительным долгам согласно учетной политике.

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК Организация,
	|	СпрОрганизации.Ссылка КАК ОбособленноеПодразделение,
	|	СпрОрганизации.ГоловнаяОрганизация <> СпрОрганизации.Ссылка КАК ЭтоОбособленноеПодразделение
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	СпрОрганизации.Ссылка В(&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтГоловныеОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ТолькоГоловныеОрганизации
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	ТекстыЗапроса.Добавить(ТекстЗапросаУчетнаяПолитикаУУ());
	ТекстыЗапроса.Добавить(НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаУчетнаяПолитикаНУ());

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Ссылка,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаНУ.ФормироватьНУ, ЛОЖЬ) КАК ФормироватьНУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаНУ.ПериодичностьНУ, ЛОЖЬ) КАК ПериодичностьНУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ФормироватьУУ, ЛОЖЬ) КАК ФормироватьУУ,
	|	ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ПериодичностьУУ, ЛОЖЬ) КАК ПериодичностьУУ
	|ПОМЕСТИТЬ вт_ОрганизацииСРезервами
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаНУ КАК ВтУчетнаяПолитикаНУ
	|		ПО ГоловныеОрганизации.Организация = ВтУчетнаяПолитикаНУ.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитикаФинансовогоУчета КАК ВтУчетнаяПолитикаФинансовогоУчета
	|		ПО ГоловныеОрганизации.Организация = ВтУчетнаяПолитикаФинансовогоУчета.Организация
	|ГДЕ
	|	ЕСТЬNULL(ВтУчетнаяПолитикаНУ.ФормироватьНУ, ЛОЖЬ) = ИСТИНА
	|	ИЛИ ЕСТЬNULL(ВтУчетнаяПолитикаФинансовогоУчета.ФормироватьУУ, ЛОЖЬ) = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ОрганизацииСОстатками
	
	// Организации, по которым есть остатки по контролируемым регистрам.
	// Если остатков нет, то в этом периоде резервы формировать не нужно.

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ вт_АналитикаУчета
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОрганизацииСРезервами КАК Организации
	|		ПО АналитикаУчетаПоПартнерам.Организация = Организации.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииСОстатками
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам.Организация
	|ИЗ
	|	РегистрНакопления.РезервыПоСомнительнымДолгам.Остатки(
	|		&ГраницаКонецПериода,
	|		АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				Т.КлючАналитики
	|			ИЗ
	|				вт_АналитикаУчета КАК Т)) КАК Остатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_АналитикаУчета";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ОрганизацииКПроверке
	
	// Организации, в расчете резервов которых есть ручные корректировки и условия задолженности изменились.
	// По таким организациям необходима ручная проверка пользователем.

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Резервы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_ОрганизацииКПроверке
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Резервы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам.ДебиторскаяЗадолженность КАК Задолженность
	|		ПО Резервы.Ссылка = Задолженность.Ссылка
	|			И (Задолженность.НужнаПроверка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_ОрганизацииСРезервами КАК Организации
	|		ПО Резервы.Организация = Организации.Ссылка
	|			И (Резервы.Дата = &КонецПериода)
	|			И (Резервы.Проведен)";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ОрганизацииОтраженные

	ТекстыОбъединение = Новый Массив;

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Резервы.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииОтраженные
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК Резервы
	|ГДЕ
	|	Резервы.Организация В (&МассивОрганизаций)
	|	И Резервы.Дата = &КонецПериода
	|	И Резервы.Проведен";

	ТекстыОбъединение.Добавить(ТекстЗапроса);
	НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ТекстЗапросаРезервыСтарые(ТекстыОбъединение);

	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина)));

#КонецОбласти

#Область ОрганизацииБезДокумента

	// Организации, по которым ещё не сформированы документы расчета резервов.
	// Для обособленных подразделений выполняется проверка на то, что учет резервов уже ведется, но документа в текущем месяце еще нет.
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Организация КАК Организация,
	|	МИНИМУМ(НачислениеСписаниеРезервовПоСомнительнымДолгам.Дата) КАК Дата
	|ПОМЕСТИТЬ вт_ДатыНачалаВеденияДокументовРезервов
	|ИЗ
	|	Документ.НачислениеСписаниеРезервовПоСомнительнымДолгам КАК НачислениеСписаниеРезервовПоСомнительнымДолгам,
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|ГДЕ
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Дата < &КонецПериода
	|	И НачислениеСписаниеРезервовПоСомнительнымДолгам.Проведен
	|	И НачислениеСписаниеРезервовПоСомнительнымДолгам.Организация В
	|			(ВЫБРАТЬ
	|				ВтГоловныеОрганизации.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|			ГДЕ
	|				ВтГоловныеОрганизации.ЭтоОбособленноеПодразделение = ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеСписаниеРезервовПоСомнительнымДолгам.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Резервы.Ссылка КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииБезДокумента
	|ИЗ
	|	вт_ОрганизацииСРезервами КАК Резервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОрганизацииОтраженные КАК ОрганизацииОтраженные
	|		ПО Резервы.Ссылка = ОрганизацииОтраженные.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДатыНачалаВеденияДокументовРезервов КАК вт_ДатыНачалаВеденияДокументовРезервов
	|		ПО Резервы.Ссылка = вт_ДатыНачалаВеденияДокументовРезервов.Организация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ПО Резервы.Ссылка = ВтГоловныеОрганизации.ОбособленноеПодразделение
	|ГДЕ
	|	Резервы.Ссылка В(&МассивОрганизаций)
	|	И ОрганизацииОтраженные.Организация ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА ВтГоловныеОрганизации.ЭтоОбособленноеПодразделение
	|				ТОГДА НЕ вт_ДатыНачалаВеденияДокументовРезервов.Дата ЕСТЬ NULL
	|						И вт_ДатыНачалаВеденияДокументовРезервов.Дата <= &КонецПериода
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";

	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ОрганизацииКОтражению
	
	// Организации, по которым ещё не сформированы документы расчета резервов, но должны.
	// По таким документам выдается отдельное предупреждение.

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация
	|ПОМЕСТИТЬ вт_ОрганизацииКОтражению
	|ИЗ
	|	вт_ОрганизацииСОстатками КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ОрганизацииОтраженные КАК ОрганизацииОтраженные
	|		ПО Организации.Организация = ОрганизацииОтраженные.Организация
	|ГДЕ
	|	ОрганизацииОтраженные.Организация ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация
	|ИЗ
	|	вт_ОрганизацииБезДокумента КАК Организации";


	ТекстыЗапроса.Добавить(ТекстЗапроса);

#КонецОбласти

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());

	Возврат ТекстЗапроса;

КонецФункции
//-- НЕ УТ

Процедура ОбновитьДвиженияСписанияЗадолженностиЗаСчетРезервов(Организации, Период)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаЗадолженности.Дата КАК Период,
	|	КорректировкаЗадолженности.Ссылка КАК Документ,
	|	КорректировкаЗадолженности.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(КорректировкаЗадолженности.Дата, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	Документ.КорректировкаЗадолженности КАК КорректировкаЗадолженности
	|ГДЕ
	|	КорректировкаЗадолженности.Организация В (&Организации)
	|	И КорректировкаЗадолженности.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КорректировкаЗадолженности.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|	И КорректировкаЗадолженности.Проведен";

	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));

	ДокументКОтражению = Запрос.Выполнить().Выгрузить();
	Регистраторы = ДокументКОтражению.ВыгрузитьКолонку("Документ");

	СоставОбновления = Новый Структура;
	СоставОбновления.Вставить("ПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	СоставОбновления.Вставить("ДвиженияКонтрагентДоходыРасходы", РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы);
	СоставОбновления.Вставить("ДвиженияКонтрагентКонтрагент", РегистрыНакопления.ДвиженияКонтрагентКонтрагент);
	СоставОбновления.Вставить("РезервыПоСомнительнымДолгам", РегистрыНакопления.РезервыПоСомнительнымДолгам);

	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;

	РеглУчетСервер.ВернутьДокументыКОтражению(ДокументКОтражению);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументКОтражению);
	//-- НЕ УТКА

	Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		Обработки.ДвиженияАктивовПассивов.ОтразитьДокументыВУправленческомБалансе(Регистраторы);
	КонецЕсли; // Необходимо формировать упр. баланс

КонецПроцедуры

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)

	Перем Таблица;

	НачатьТранзакцию();
	Попытка
		Таблицы = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, СоставОбновления);

		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата");
		Документ = ПроведениеДокументов.ЭмуляцияДокумента(Ссылка, Дата);
		МенеджерВТ = Новый МенеджерВременныхТаблиц;

		Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
			Если Таблицы.Свойство("Таблица" + ОписаниеОбновления.Ключ, Таблица) Тогда
				Набор = ОписаниеОбновления.Значение.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
				Набор.Отбор.Регистратор.Установить(Ссылка);
				Набор.Загрузить(Таблица);
				ПроведениеДокументов.УстановитьДопСвойстваРегистра(Набор, Документ, МенеджерВТ);
				Набор.Записать(Истина);
			КонецЕсли;
		КонецЦикла;

		ПроведениеДокументов.СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВТ);

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось записать движения %Обновление% по причине %Причина%';
								|en = 'Cannot record register records %Обновление%. Reason: %Причина%'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обновление%", ОписаниеОбновления.Ключ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Частичное обновление движений документа';
				|en = 'Partial update of document records'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

