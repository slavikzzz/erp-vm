
#Область ПрограммныйИнтерфейс

// Обработчик двойного щелчка мыши, нажатия клавиши Enter или гиперссылки в табличном документе формы отчета.
//
//Параметры:
// См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента
//
Процедура ОбработкаВыбораТабличногоДокумента(ФормаОтчета, Элемент, Область, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
//
//Параметры:
// 	См. ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	
	//++ НЕ УТ
	РеглУчетКлиент.ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	//-- НЕ УТ


	ОтчетыЕГАИСКлиент.ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	ОтчетыИСМПКлиент.ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);
	
	ПолноеИмяОтчета = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ФормаОтчета.КлючТекущегоВарианта;
	//++ НЕ УТ
	Если ПолноеИмяОтчета = "Отчет.ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве"
			ИЛИ КлючТекущегоВарианта = "ДвижениеМатериаловПолуфабрикатовРаботВПроизводствеКонтекст"
			ИЛИ КлючТекущегоВарианта = "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве21" Тогда
			
			// Расшифровать отчетом -> Поступление материалов в производство (расшифровка)
			#Область РасшифровкаПоступлениеМатериаловВПроизводство
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаПоступлениеМатериаловВПроизводство");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Поступление материалов в производство';
														|en = 'Material receipt to production'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасшифровкаПоступлениеМатериаловВПроизводство");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Организация");
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("Серия");
			ПоляРасшифровки.Добавить("Назначение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Подразделение");
			НеобходимыеПараметры.Вставить("Номенклатура");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			СписокПараметров.Добавить("Организация");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Расходы на производство
			#Область РасшифровкаРасходовНаПроизводство
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаРасходовНаПроизводство2КА");
			//++ НЕ УТКА
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаРасходовНаПроизводство2УП");
			//-- НЕ УТКА
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Расходы на производство';
														|en = 'Production costs'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасшифровкаРасходовНаПроизводство");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Организация");
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("Назначение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Подразделение");
			НеобходимыеПараметры.Вставить("Номенклатура");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			СписокПараметров.Добавить("Организация");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ФормаОтчета, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	//++ НЕ УТКА
	ИначеЕсли КлючТекущегоВарианта = "ОтклонениеЗаказаФактаОтКалькуляции" 
		Или КлючТекущегоВарианта = "ЗаказКонтекст" Тогда
		
		СписокПараметров = Новый Массив;
		
		СписокПараметров.Добавить("ДанныеОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("ЗаказНаПроизводство");
		ПоляРасшифровки.Добавить("КодСтрокиЗаказаНаПроизводство");
		ПоляРасшифровки.Добавить("СтатьяКалькуляции");
		
		// Поля для расшифровки К-З
		ПоляРасшифровкиКЗ = Новый Массив;
		ПоляРасшифровкиКЗ.Добавить("СуммаКалькуляция");
		ПоляРасшифровкиКЗ.Добавить("СуммаЗаказВсеЭтапы");
		ПоляРасшифровкиКЗ.Добавить("Отклонение_Сумма_Калькуляция_ЗаказВсеЭтапы");
		ПоляРасшифровкиКЗ.Добавить("Процент_Сумма_Калькуляция_ЗаказВсеЭтапы");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиКЗ);
		
		// Поля для расшифровки З-Ф
		ПоляРасшифровкиЗФ = Новый Массив;
		ПоляРасшифровкиЗФ.Добавить("СуммаЗаказВсеЭтапыДубль");
		ПоляРасшифровкиЗФ.Добавить("СуммаФактПрогнозДубль");
		ПоляРасшифровкиЗФ.Добавить("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровкиЗФ.Добавить("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиЗФ);
		
		// Поля для расшифровки К-Ф
		ПоляРасшифровкиКФ = Новый Массив;
		ПоляРасшифровкиКФ.Добавить("СуммаКалькуляцияДубль");
		ПоляРасшифровкиКФ.Добавить("СуммаФактПрогноз");
		ПоляРасшифровкиКФ.Добавить("Отклонение_Сумма_Калькуляция_ФактПрогноз");
		ПоляРасшифровкиКФ.Добавить("Процент_Сумма_Калькуляция_ФактПрогноз");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиКФ);
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
												Расшифровка,
												ФормаОтчета.ОтчетДанныеРасшифровки,
												СписокПараметров,
												ПоляРасшифровки);
		
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВариантОтчета = Неопределено;
		
		Для Каждого ПолеРасшифровки Из ПоляРасшифровкиКЗ Цикл
			Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
				ВариантОтчета = "ОтклонениеСпецификацииЗаказаОтКалькуляции";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВариантОтчета = Неопределено Тогда
			Для Каждого ПолеРасшифровки Из ПоляРасшифровкиЗФ Цикл
				Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
					ВариантОтчета = "ОтклонениеФактаОтСпецификацииЗаказа";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантОтчета = Неопределено Тогда
			Для Каждого ПолеРасшифровки Из ПоляРасшифровкиКФ Цикл
				Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
					ВариантОтчета = "ОтклонениеФактаОтКалькуляции";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ФиксированныеНастройки = ПланированиеПроизводстваВызовСервера.ПараметрыРасшифровкиОтклонениеЗаказаФактаОтКалькуляции(ДанныеРасшифровкиОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                   ВариантОтчета);
		ПараметрыФормы.Вставить("ФиксированныеНастройки",         ФиксированныеНастройки);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДанныеОтчета", ДанныеРасшифровкиОтчета.ДанныеОтчета);
		
		Если ДанныеРасшифровкиОтчета.Свойство("СтатьяКалькуляции") Тогда
			Отбор.Вставить("СтатьяКалькуляции", ДанныеРасшифровкиОтчета.СтатьяКалькуляции);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Отчет.ОтклонениеЗаказаФактаОтКалькуляции.Форма", ПараметрыФормы, ФормаОтчета, Истина);
	ИначеЕсли КлючТекущегоВарианта = "ПлановаяИФактическая"
		Или КлючТекущегоВарианта = "Отклонения" Тогда
		
		СписокПараметров = Новый Массив;
		
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ПериодОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукции");
		ПоляРасшифровки.Добавить("Калькуляция");
		ПоляРасшифровки.Добавить("СтатьяКалькуляции");
		ПоляРасшифровки.Добавить("СуммаКалькуляция");
		ПоляРасшифровки.Добавить("СуммаФакт");
		ПоляРасшифровки.Добавить("СуммаОтклонение");
		ПоляРасшифровки.Добавить("СуммаПроцентОтклонения");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
			Расшифровка,
			ФормаОтчета.ОтчетДанныеРасшифровки,
			СписокПараметров,
			ПоляРасшифровки);
		
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеРасшифровкиОтчета.Продукция)
			Или Не (ДанныеРасшифровкиОтчета.Свойство("СуммаКалькуляция")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаФакт")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаОтклонение")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаПроцентОтклонения")) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                   "ПлановаяИФактическаяРасшифровка");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДанныеОтчета", ДанныеРасшифровкиОтчета.ДанныеОтчета);
		Отбор.Вставить("ПериодОтчета", ДанныеРасшифровкиОтчета.ПериодОтчета);
		
		Если ДанныеРасшифровкиОтчета.Свойство("Продукция") Тогда
			Отбор.Вставить("Продукция", ДанныеРасшифровкиОтчета.Продукция);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("ХарактеристикаПродукции") Тогда
			Отбор.Вставить("ХарактеристикаПродукции", ДанныеРасшифровкиОтчета.ХарактеристикаПродукции);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("Калькуляция") Тогда
			Отбор.Вставить("Калькуляция", ДанныеРасшифровкиОтчета.Калькуляция);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("СтатьяКалькуляции") Тогда
			Отбор.Вставить("СтатьяКалькуляции", ДанныеРасшифровкиОтчета.СтатьяКалькуляции);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.ПлановаяИФактическаяСебестоимостьВыпущеннойПродукции.Форма", ПараметрыФормы, ФормаОтчета, Истина);
	//-- НЕ УТКА
	КонецЕсли;
	//-- НЕ УТ
	Если ПолноеИмяОтчета = "Отчет.КартаПродаж" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьРасшифровкуКартыПродажПоРегионам(ФормаОтчета, Расшифровка);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//  см. ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Обработчик команд, добавленных динамически и подключенных к обработчику "Подключаемый_Команда".
// Пример добавления команды см. ОтчетыПереопределяемый.ПриСозданииНаСервере.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//   Команда     - КомандаФормы     - Команда, которая была вызвана.
//   Результат   - Булево           - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ФормаОтчета, Команда, Результат) Экспорт
	
	//++ Локализация
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаОтчета, "ОтчетСформирован") Тогда
		ОтчетыЕГАИСКлиент.ОбработчикКоманды(ФормаОтчета, Команда, Результат);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
#Область МенюОтчеты

#Область СверкаРасчетовСПартнерами

Функция СверкаРасчетовСПартнерами(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) <> Тип("Массив") Тогда
		МассивДокументов = Новый Массив();
		МассивДокументов.Добавить(СсылкаНаОбъект);
	Иначе
		МассивДокументов = СсылкаНаОбъект;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СверкаРасчетовСПартнерамиЗавершение", ЭтотОбъект);
	
	УправлениеПечатьюКлиент.ПроверитьПроведенностьДокументов(ОписаниеОповещения, МассивДокументов);
	
КонецФункции

Процедура СверкаРасчетовСПартнерамиЗавершение(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("СверкаВзаиморасчетов", МассивДокументов));
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "СверкаВзаиморасчетов");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
	ПараметрыФормы.Вставить("КлючВарианта", "СверкаРасчетовСПартнерамиКонтекст");
		
	ОткрытьФорму("Отчет.СверкаРасчетовСПартнерами.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

// Вызывается для отчета "Карта продаж по регионам"
//
Процедура ОбработатьРасшифровкуКартыПродажПоРегионам(ЭтаФорма, Расшифровка)
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	
	ПараметрВариантАнализа = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВариантАнализа");
	Если ПараметрВариантАнализа.Значение = 0 Тогда
		КлючВарианта = "РейтингПродажДвухПериодовБизнесРегионы";
	Иначе
		КлючВарианта = "СравнениеВыручкиДвухПериодовБизнесРегионы";
	КонецЕсли;
	
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта",
		КлючВарианта, "Отчет.ПродажиСравнениеДвухПериодов");
	
	КомпоновщикНастроекВариантаОтчета =
		ОтчетыУТВызовСервераПереопределяемый.КомпоновщикНастроекВариантаОтчета(СвойстваВариантаОтчета);
		
	Если КомпоновщикНастроекВариантаОтчета <> Неопределено Тогда
		
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодОтчета", ПараметрПериодОтчета.Значение);
		ПараметрПериодСравнения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодСравнения");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ПериодСравнения", ПараметрПериодСравнения.Значение);
			
		ПараметрДанныеОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДанныеОтчета");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки,
			"ДанныеОтчета", ПараметрДанныеОтчета.Значение);
		
		ПользовательскиеНастройкиВариантаОтчета = КомпоновщикНастроекВариантаОтчета.ПользовательскиеНастройки;
		
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройкиВариантаОтчета);
	ПараметрыОтчета.Вставить("КлючВарианта", СвойстваВариантаОтчета.КлючВарианта);
	ПараметрыОтчета.Вставить("КлючНазначенияИспользования", "РасшифровкаКартыПродаж");
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ПродажиСравнениеДвухПериодов.Форма", ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти
//-- Локализация
#КонецОбласти