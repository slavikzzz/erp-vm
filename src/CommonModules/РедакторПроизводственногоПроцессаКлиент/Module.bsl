////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции редактора производственного процесса
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭтапПроизводства

Процедура УстановитьМаксимальноеКоличествоЕдиницПартийИзделия(РазбиватьМаршрутныеЛисты, МаксимальноеКоличествоЕдиницПартийИзделия) Экспорт
	
	Если НЕ РазбиватьМаршрутныеЛисты Тогда
		Если МаксимальноеКоличествоЕдиницПартийИзделия <> 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 0;
		КонецЕсли; 
	Иначе
		Если МаксимальноеКоличествоЕдиницПартийИзделия = 0 Тогда
			МаксимальноеКоличествоЕдиницПартийИзделия = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

#Область ВидыРабочихЦентров

Процедура ВидыРабочихЦентровПередНачаломДобавления(
													ТекущиеДанные,
													ВсеВидыРабочихЦентров,
													ЭлементВсеВидыРабочихЦентров,
													ПорядокРаботы,
													ЕстьСинхроннаяЗагрузка,
													Отказ,
													ИспользуетсяПроизводство22 = Истина) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		// Можно использовать стандартное добавление
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя(); // ДанныеФормыЭлементДерева
	Если ЭлементРодитель = Неопределено Тогда
		КоллекцияОсновныхВидовРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Иначе
		КоллекцияОсновныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	КонецЕсли; 
	
	НоваяСтрока = КоллекцияОсновныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	НоваяСтрока.Использовать = Истина;
	
	НастроитьПорядокРаботыВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22);
		
	ЗаполнитьПараметрыОдновременнойРаботы(
		НоваяСтрока, ВсеВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22);
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

Процедура ДобавитьАльтернативныйВидРЦ(
										ТекущиеДанные,
										ВсеВидыРабочихЦентров,
										ЭлементВсеВидыРабочихЦентров,
										ПорядокРаботы,
										ЕстьСинхроннаяЗагрузка,
										ИспользуетсяПроизводство22 = Истина) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		// Не понятно для какого вида РЦ нужно добавить альтернативный
		Возврат;
	КонецЕсли;
	
	ЭлементРодитель = ТекущиеДанные.ПолучитьРодителя(); // ДанныеФормыЭлементДерева
	Если ЭлементРодитель = Неопределено Тогда
		ЭлементРодитель = ТекущиеДанные;
	КонецЕсли;
	
	КоллекцияАльтернативныхВидовРЦ = ЭлементРодитель.ПолучитьЭлементы();
	
	НоваяСтрока = КоллекцияАльтернативныхВидовРЦ.Добавить();
	НоваяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
	НоваяСтрока.Альтернативный = Истина;
	
	ЗаполнитьПараметрыОдновременнойРаботы(
		НоваяСтрока, ВсеВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22);
	
	ЭлементВсеВидыРабочихЦентров.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ЭлементВсеВидыРабочихЦентров.ИзменитьСтроку();
	
КонецПроцедуры

Процедура ПриИзмененииСоставаВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22 = Истина) Экспорт
	
	НастроитьПорядокРаботыВидовРабочихЦентров(ВсеВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22);
	
КонецПроцедуры

Процедура НастроитьПорядокРаботыВидовРабочихЦентров(ВидыРабочихЦентров, ПорядокРаботы, ИспользуетсяПроизводство22)
	
	Если ВидыРабочихЦентров.ПолучитьЭлементы().Количество() > 1 Тогда
		
		Если ПорядокРаботы.Пустая() Тогда
			
			Если ИспользуетсяПроизводство22 Тогда
				
				ПорядокРаботы = ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно");
				
			Иначе
				
				ПорядокРаботы = ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Независимо");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПорядокРаботы.Пустая() Тогда
			
			ПорядокРаботы = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(
													ТекущиеДанные,
													ВидыРабочихЦентров,
													ПорядокРаботы,
													ЕстьСинхроннаяЗагрузка,
													ИспользуетсяПроизводство22,
													ЕстьРасчетПоФормулам) Экспорт
	
	Если (ИспользуетсяПроизводство22 = Ложь
			ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно")
			ИЛИ (ЕстьСинхроннаяЗагрузка И НЕ ТекущиеДанные.СинхроннаяЗагрузка)
		) Тогда
		Возврат;
	КонецЕсли;
	УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ТекущиеДанные, ЕстьРасчетПоФормулам);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОдновременнойРаботы(НоваяСтрока, ВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ИспользуетсяПроизводство22)
	
	Если НЕ ИспользуетсяПроизводство22
		ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно") Тогда
		
		Возврат
		
	КонецЕсли;
	
	ЗначенияЗаполнения = ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
	Если НЕ ЗначенияЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения, "ВремяРаботы, ЕдиницаИзмерения");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка)
	
	Результат = Неопределено;
	
	Для каждого Строка Из ВидыРабочихЦентров.ПолучитьЭлементы() Цикл
		
		Для Индекс = 0 По Строка.ПолучитьЭлементы().Количество() Цикл
			
			Элемент = ?(Индекс = 0, Строка, Строка.ПолучитьЭлементы()[Индекс-1]);
			
			Если ЗначениеЗаполнено(Элемент.ВремяРаботы)
				И (НЕ ЕстьСинхроннаяЗагрузка ИЛИ Элемент.СинхроннаяЗагрузка) Тогда
			
				Результат = Элемент;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(ВидыРабочихЦентров, ПорядокРаботы, ЕстьСинхроннаяЗагрузка, ЕстьРасчетПоФормулам) Экспорт
	
	Если ВидыРабочихЦентров.ПолучитьЭлементы().Количество() = 0
		ИЛИ ПорядокРаботы <> ПредопределенноеЗначение("Перечисление.ПорядокРаботыВидовРабочихЦентров.Одновременно") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ЗначенияЗаполненияПараметровОдновременнойРаботы(ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
	Если НЕ ЗначенияЗаполнения = Неопределено Тогда
		УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ЗначенияЗаполнения, ЕстьРасчетПоФормулам);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВремяРаботыПриОдновременнойЗагрузке(ВидыРабочихЦентров, ЗначенияЗаполнения, ЕстьРасчетПоФормулам)
	
	Для каждого Строка Из ВидыРабочихЦентров.ПолучитьЭлементы() Цикл
		
		Для Индекс = 0 По Строка.ПолучитьЭлементы().Количество() Цикл
			
			Элемент = ?(Индекс = 0, Строка, Строка.ПолучитьЭлементы()[Индекс-1]);
			
			Если НЕ Элемент.СинхроннаяЗагрузка Тогда
				
				СписокСвойств = "ВремяРаботы, ЕдиницаИзмерения";
			
				Если ЕстьРасчетПоФормулам Тогда
					СписокСвойств = СписокСвойств + ", РасчетПоФормуле, АлгоритмРасчетаКоличества";
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Элемент, ЗначенияЗаполнения, СписокСвойств);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// При призменении признака "Использовать" строки видов рабочих центров
// 
// Параметры:
// 	ДанныеСтроки - ДанныеФормыСтруктура - содержит данные строки
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(ДанныеСтроки) Экспорт
	
	РодительЭлемента = ДанныеСтроки.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ДанныеСтроки;
		КоллекцияАльтернатив = ДанныеСтроки.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ДанныеСтроки Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ДанныеСтроки Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак использования в таблице видов рабочих центров
// 
// Параметры:
// 	КоллекцияОсновныхВидовРЦ - ДанныеФормыКоллекцияЭлементовДерева - коллекция основных видов рц
Процедура ВидыРабочихЦентровУстановитьИспользование(КоллекцияОсновныхВидовРЦ) Экспорт
	
	// Нужно проверить что выбран вид РЦ
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очищает настройки отбора по свойствам для выделенных строк таблицы видов рабочих цвентров
// 
// Параметры:
// 	ВидыРабочихЦентров - ДанныеФормыКоллекция
// 	ОтборПоСвойствам - ДанныеФормыКоллекция
Процедура ВидыРабочихЦентровОчиститьНастройкиОтбораПоСвойствам(ВидыРабочихЦентров, ОтборПоСвойствам) Экспорт
	
	МассивКлючей = Новый Массив;
	Для каждого ИдентификаторСтроки Из ВидыРабочихЦентров.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ВидыРабочихЦентров.ДанныеСтроки(ИдентификаторСтроки);
		
		Если МассивКлючей.Найти(ДанныеСтроки.КлючСвязи) = Неопределено Тогда
			МассивКлючей.Добавить(ДанныеСтроки.КлючСвязи);
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.Альтернативный Тогда
			
			КоллекцияАльтернатив = ДанныеСтроки.ПолучитьЭлементы();
			Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
				Если МассивКлючей.Найти(СтрокаАльтернатива.КлючСвязи) = Неопределено Тогда
					МассивКлючей.Добавить(СтрокаАльтернатива.КлючСвязи);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("КлючСвязи");
	Для каждого КлючСвязи Из МассивКлючей Цикл
		Отбор.КлючСвязи = КлючСвязи;
		СписокСтрок = ОтборПоСвойствам.НайтиСтроки(Отбор);
		Для каждого НайденнаяСтрока Из СписокСтрок Цикл
			ОтборПоСвойствам.Удалить(НайденнаяСтрока);
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область ТехнологическаяОперация

Процедура ОткрытьФормуВыбораВариантаНаладки(РабочийЦентр, ВариантНаладки, ВладелецФормы) Экспорт
	
	НастройкиОтбора = Новый Структура;
	НастройкиОтбора.Вставить("Владелец", РедакторПроизводственногоПроцессаКлиентСервер.ВидРабочегоЦентра(РабочийЦентр));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", НастройкиОтбора);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ВариантНаладки);
	
	ОткрытьФорму("Справочник.ВариантыНаладки.ФормаВыбора", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

#Область ДополнительныеРеквизитыВидаОперации

// Производит установку формата редактирования дополнительных реквизитов вида операци
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	ПрефиксЭлементов - Строка
Процедура ДопРеквизитыУстановитьФорматРедактированияНормативов(Форма, ПрефиксЭлементов = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	ТекущиеДанные = Элементы[СоответствиеЭлементов.ДопРеквизиты].ТекущиеДанные;
	
	Элементы[СоответствиеЭлементов.ДопРеквизитыЗначениеМин].ФорматРедактирования = ТекущиеДанные.Формат;
	Элементы[СоответствиеЭлементов.ДопРеквизитыЗначениеМакс].ФорматРедактирования = ТекущиеДанные.Формат;
	
КонецПроцедуры

Процедура ДопРеквизитыЗначениеНормативаПриИзменении(ДанныеСтроки, Норматив) Экспорт
	
	Если ДанныеСтроки <> Неопределено
		И ДанныеСтроки.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак = ДопустимыйЗнак.Неотрицательный
		И ДанныеСтроки[Норматив] < 0 Тогда
		
		ДанныеСтроки[Норматив] = -ДанныеСтроки[Норматив];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

