#Область ПрограммныйИнтерфейс

#Область АктыОРасхождениях

// Дополняет надпись состоянием кодов маркировки в документе.
//
// Параметры:
//  ТипДокумента - Тип - Тип документа.
//  НадписьРасхождения - Произвольный - элементы формы, в котором необходимо отобразить информационную надпись.
//  НадписьОформитьДокументы - Произвольный - элементы формы, в котором необходимо отобразить информационную надпись.
//  Товары - ТабличнаяЧасть - табличная часть акта о расхождениях.
//  ШтрихкодыУпаковокРасхождения - ТабличнаяЧасть - табличная часть штрихкоды упаковок расхождения.
//
Процедура ДополнитьНадписьСпособаОтраженияРасхождений(ТипДокумента, НадписьРасхождения, НадписьОформитьДокументы,
			Товары = Неопределено, ШтрихкодыУпаковокРасхождения = Неопределено) Экспорт
	
	Если ТипДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		
		ТекстДействия = НСтр("ru = 'Требуется обработать коды маркировки.';
							|en = 'Processing marking codes is required.'");
		Если СтрЧислоВхождений(НадписьРасхождения.Заголовок, ТекстДействия) = 0 Тогда
			НадписьРасхождения.Заголовок = ТекстДействия +" " + НадписьРасхождения.Заголовок;
		КонецЕсли;
		
		Если СтрЧислоВхождений(НадписьОформитьДокументы.Заголовок, ТекстДействия) = 0 Тогда
			НадписьОформитьДокументы.Доступность = Ложь;
			НадписьОформитьДокументы.Заголовок = ТекстДействия + " " + НадписьОформитьДокументы.Заголовок;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если ТекСтрока.КоличествоУпаковокРасхождения <> 0 И СтрокаАктаСодержитДействияТребующиеОбработки(ТекСтрока, ТипДокумента) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ШтрихкодыУпаковокРасхождения.Количество() Тогда
			ТекстРасхождений = НСтр("ru = 'Оформление расхождений по пересорту кодов маркировки в акте';
									|en = 'Registration of discrepancies on the marking codes regrading in the act'");
			НадписьОформитьДокументы.Доступность = Истина;
			НадписьРасхождения.Заголовок = ТекстРасхождений;
		КонецЕсли;
		
	КонецЕсли;
		
	
КонецПроцедуры

Функция СтрокаАктаСодержитДействияТребующиеОбработки(ТекСтрока, ТипАкта)
	
	Если ТекСтрока.Действие <> ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ВернутьПерепоставленноеБезОформления")
		И ТекСтрока.Действие <> ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеПриемки.ОжидатьДопоставкуБезОформления") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  ПараметрыВыбора - Массив - параметры выбора элемента формы "Номенклатура".
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//
Процедура ЗаполнитьПараметрыВыбораНоменклатурыПоВидуПродукции(ПараметрыВыбора, ВидПродукцииИС) Экспорт
	
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")));
	
	ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
	
	Если ОсобенностьУчета <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ОсобенностьУчета", ОсобенностьУчета));
	КонецЕсли;
		
КонецПроцедуры

// Получает значение Признать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямКодовМаркировкиИСМП.Признать");

КонецФункции

// Получает значение НеПризнать определяемого типа ВариантДействийПоРасхождениямКодовМаркировкиИСМП
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП.
//
Функция ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать() Экспорт
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямКодовМаркировкиИСМП.НеПризнать");

КонецФункции

//Параметры:
//	ПолноеИмяСтрокой - Строка
//Возвращаемое значение: 
//	Строка
Функция ИмяДокументаИзПолногоИмениОбъекта(ПолноеИмяСтрокой) Экспорт
	
	МассивИмен = СтрРазделить(ПолноеИмяСтрокой, ".");
	Если МассивИмен.Количество() = 2 Тогда
		Возврат МассивИмен[1];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область Серии

//Подготовливает структуру, массив которых в дальнейшем будет передан в процедуру генерации серий.
//   Дополняется необходимыми полями, специфичными конкретному виду продукции.
//
//Параметры:
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции генерации серии
//Возвращаемое значение:
//   Структура - источник данных генерации серий с обязательными полями:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура, для которой будет генерироваться серия.
//    * Серия        - ОпределяемыйТип.СерияНоменклатуры   - В данное значение будет записана сгенерированная серия.
//    * ЕстьОшибка   - Булево - Будет установлено в Истина, если по каким то причинам серия сгенерирована не будет.
//    * ТекстОшибки  - Строка - причина, по которой серия не генерировалась.
//
Функция СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура", Неопределено);
	СтруктураДанных.Вставить("Серия",        Неопределено);
	СтруктураДанных.Вставить("ЕстьОшибка",   Ложь);
	СтруктураДанных.Вставить("ТекстОшибки",  "");
	
	ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции);
	
	Возврат СтруктураДанных;

КонецФункции

#КонецОбласти

#Область ПодключаемыеКомандыИС

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыМаркировкиТоваровИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"СборкаТоваров",                НСтр("ru = 'Сборку товаров';
																											|en = 'Goods kitting'"),               "ИспользоватьСборкуРазборку");
	
	//++ НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа';
																											|en = 'Backflush production'"),      "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПриобретениеТоваровУслуг",     НСтр("ru = 'Приобретение товаров и услуг';
																											|en = 'Vendor invoice'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"СборкаТоваров",                НСтр("ru = 'Сборку товаров';
																											|en = 'Goods kitting'"),               "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПересчетТоваров",              НСтр("ru = 'Пересчет товаров';
																											|en = 'Physical inventory count'"));
	//++ НЕ УТ
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа';
																											|en = 'Backflush production'"),      "ИспользоватьУправлениеПроизводством2_2");
	//++ Устарело_Переработка24
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПоступлениеОтПереработчика",   НСтр("ru = 'Поступление от переработчика';
																											|en = 'Goods receipt — External subcontracting'"), "ИспользоватьПроизводствоНаСтороне");
	//-- Устарело_Переработка24
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПоступлениеТоваровОтХранителя",НСтр("ru = 'Поступление от переработчика 2.5';
																											|en = 'Receipts from subcontractors 2.5'"), "ИспользоватьПроизводствоНаСтороне2_5");
	//++ НЕ УТКА
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ЭтапПроизводства2_2",          НСтр("ru = 'Этап производства';
																											|en = 'Production stage'"),            "ИспользоватьУправлениеПроизводством2_2");
	//-- НЕ УТКА

	//-- НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды,"ПрочееОприходованиеТоваров",   НСтр("ru = 'Прочее оприходование товаров';
																											|en = 'Other receipt of goods'"), "ИспользоватьПрочееОприходованиеТоваров");
	
	//++ НЕ УТ
	
	Возврат; //Ниже: Используется как документ производства только в УТ
	
	//-- НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды,"ПрочееОприходованиеТоваров",   НСтр("ru = 'Прочее оприходование товаров';
																											|en = 'Other receipt of goods'"), "ИспользоватьПрочееОприходованиеТоваров");
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыЗаказНаЭмиссиюКодовМаркировкиСУЗ(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПоставщику", НСтр("ru = 'Заказ поставщику';
										|en = 'Purchase order'"), "ИспользоватьЗаказыПоставщикам");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказНаСборку", НСтр("ru = 'Заказ на сборку';
										|en = 'Kitting order'"), "ИспользоватьЗаказыНаСборку");
	//++ НЕ УТ
	
	//++ Устарело_Переработка24
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПереработчику", НСтр("ru = 'Заказ переработчику (2.4)';
											|en = 'Subcontracting purchase order (2.4)'"), "ИспользоватьПроизводствоНаСтороне");
	//-- Устарело_Переработка24
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказПереработчику2_5", НСтр("ru = 'Заказ переработчику';
												|en = 'Subcontracting purchase order'"), "ИспользоватьЗаказыПереработчикам2_5");
	//++ НЕ УТКА
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(
		Команды, "ЗаказНаПроизводство2_2", НСтр("ru = 'Заказ на производство';
												|en = 'Production order'"), "ИспользоватьУправлениеПроизводством2_2");
	//-- НЕ УТКА

	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВыводаИзОборотаИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров';
																											|en = 'Stock shortage recognition'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СборкаТоваров",                НСтр("ru = 'Разборку товаров';
																											|en = 'Goods disassembly'"),               "ИспользоватьСборкуРазборку");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотребление",        НСтр("ru = 'Внутреннее потребление';
																											|en = 'Inventory consumption'"),         "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",       НСтр("ru = 'Реализацию товаров и услуг';
																											|en = 'Sale of goods and services'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах",      НСтр("ru = 'Отчет о розничных продажах';
																											|en = 'Retail sales report'"),     "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЧекККМ",                       НСтр("ru = 'Чек ККМ';
																											|en = 'Receipt'"),                        "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",     НСтр("ru = 'Возврат товаров поставщику';
																											|en = 'Return of goods to vendor'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",        НСтр("ru = 'Внутреннее потребление';
																											|en = 'Inventory consumption'"),         "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров';
																											|en = 'Stock shortage recognition'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",                НСтр("ru = 'Разборку товаров';
																											|en = 'Goods disassembly'"),               "ИспользоватьСборкуРазборку");
	
	//++ НЕ УТКА
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЭтапПроизводства2_2",          НСтр("ru = 'Этап производства';
																											|en = 'Production stage'"),              "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТКА
	
	//++ НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа';
																											|en = 'Backflush production'"),        "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТ
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыОтгрузкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров и услуг';
																												|en = 'Sale of goods and services'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "КорректировкаРеализации",           НСтр("ru = 'Корректировку реализации';
																												|en = 'Sale adjustment'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику';
																												|en = 'Return of goods to vendor'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																												|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																												|en = 'Goods return — Intercompany'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																												|en = 'Goods transfer'"),                  "ИспользоватьПеремещениеТоваров");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПриемкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг", НСтр("ru = 'Приобретение товаров и услуг';
																										|en = 'Vendor invoice'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВозвратТоваровОтКлиента",  НСтр("ru = 'Возврат товаров от клиента';
																										|en = 'Sales return'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																												|en = 'Vendor invoice'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента';
																												|en = 'Sales return'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																												|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																												|en = 'Goods return — Intercompany'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																												|en = 'Goods transfer'"),                  "ИспользоватьПеремещениеТоваров");
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыСписанияКодовМаркировкиИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

Процедура КомандыУточненияСведенийОКодахМаркировкиИСМП(Команды) Экспорт 
	
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыРазрешениеНаОтгрузкуИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров и услуг';
																												|en = 'Реализацию товаров и услуг'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику';
																												|en = 'Возврат товаров поставщику'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																												|en = 'Передачу товаров между организациями'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																												|en = 'Возврат товаров между организациями'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыВозвратаВОборотИСМП(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента",  НСтр("ru = 'Возврат товаров от клиента';
																										|en = 'Sales return'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "КорректировкаРеализации",  НСтр("ru = 'Корректировку реализации';
																										|en = 'Sale adjustment'"),    "ИспользоватьКорректировкиРеализаций");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхВозвратах", НСтр("ru = 'Отчет о розничных возвратах';
																										|en = 'Retail return report'"), "ИспользоватьРозничныеПродажи");
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПеремаркировкиТоваровИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента", НСтр("ru = 'Возврат товаров от клиента';
																										|en = 'Sales return'"));
	Возврат;
	
КонецПроцедуры

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
//  Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//ОбщегоНазначенияСобытияФормИСПереопределяемый
Процедура КомандыПеремещениеМеждуМОДИСМП(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров", НСтр("ru = 'Перемещение товаров';
																								|en = 'Перемещение товаров'"), "ИспользоватьПеремещениеТоваров");
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандЗаказаНаЭмиссию(Форма, Команды) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		Возврат;
	КонецЕсли;
	
	СпособВводаВОборот = Форма.Объект.СпособВводаВОборот;
	ВидПродукции = Форма.Объект.ВидПродукции;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если ИмяМетаданных = "МаркировкаТоваровИСМП" Тогда
			Элемент.Видимость = Истина;
		ИначеЕсли ИмяМетаданных = "ПеремаркировкаТоваровИСМП" Тогда
			Элемент.Видимость = ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитПеремаркировке(ВидПродукции);
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказПоставщику");
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказНаПроизводство2_2"
					//++ Устарело_Переработка24
					Или ИмяМетаданных = "ЗаказПереработчику"
					//-- Устарело_Переработка24
					Или ИмяМетаданных = "ЗаказНаСборку"
					Или ИмяМетаданных = "ЗаказПереработчику2_5");
		ИначеЕсли СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля") Тогда
			Элемент.Видимость = (ИмяМетаданных = "ЗаказПоставщику");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандМаркировкиТоваров(Форма, Команды) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		Возврат;
	КонецЕсли;
	
	Операция     = Форма.Объект.Операция;
	ВидПродукции = Форма.Объект.ВидПродукции;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.Агрегация") Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
			Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
				Элемент.Видимость = ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС";
			Иначе
				Элемент.Видимость = ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС";
			КонецЕсли;
		ИначеЕсли ИмяМетаданных = "ПроизводственнаяОперацияВЕТИС"
			Или ИмяМетаданных = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
			Элемент.Видимость = Ложь;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПриобретениеТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика") Тогда
			Если ИмяМетаданных = "СборкаТоваров" Тогда
				Элемент.Видимость = Форма.Объект.Товары.Количество() <= 1;
			Иначе
				Элемент.Видимость = (ИмяМетаданных = "ПроизводствоБезЗаказа"
					Или ИмяМетаданных = "ПрочееОприходованиеТоваров"
					//++ Устарело_Переработка24
					Или ИмяМетаданных = "ПоступлениеОтПереработчика"
					//-- Устарело_Переработка24
					Или ИмяМетаданных = "ПоступлениеТоваровОтХранителя"
					Или ИмяМетаданных = "ПроизводствоБезЗаказа"
					Или ИмяМетаданных = "ЭтапПроизводства2_2");
			КонецЕсли;
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПересчетТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ") Тогда
			Элемент.Видимость = ИмяМетаданных = "ПриобретениеТоваровУслуг";
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандВыводаВОборота(Форма, Команды) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Форма.Объект.Операция;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу") Тогда
			Элемент.Видимость = ИмяМетаданных = "ВозвратТоваровПоставщику";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача") Тогда
			Элемент.Видимость = ИмяМетаданных = "ВнутреннееПотребление";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС") Тогда
			Элемент.Видимость = ИмяМетаданных = "РеализацияТоваровУслуг";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара")
			Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара") Тогда
			Элемент.Видимость = ИмяМетаданных = "СписаниеНедостачТоваров";
		ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа") Тогда
			Элемент.Видимость = (ИмяМетаданных = "РеализацияТоваровУслуг"
				Или ИмяМетаданных = "ОтчетОРозничныхПродажах"
				Или ИмяМетаданных = "ЧекККМ");
		Иначе
			Элемент.Видимость = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандСписанияКодовМаркировки(Форма, Команды) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		Возврат;
	КонецЕсли;
	
	Операция = Форма.Объект.Операция;
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении") Тогда
			Элемент.Видимость = ИмяМетаданных = "ЗаказНаЭмиссиюКодовМаркировкиСУЗ";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Серии

Процедура ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции)

	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		СтруктураДанных.Вставить("МРЦ", 0);
	ИначеЕсли ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
		СтруктураДанных.Вставить("ГоденДо", '00010101');
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
