
#Область ПрограммныйИнтерфейс

// Возвращает настройки регламентированного учета.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//		* ДополнительноВедетсяУправленческийУчет - Булево - Истина, если совместно с регламентированным (на одном плане счетов) ведется управленческий учет.
//		* ДатаНачалаВеденияУправленческогоУчета - Дата - Дата, с которой ведется совместный управленческий и регламентированный учет. Если пустая, то с начала ведения учета.
//		* ДополнительноВедетсяУчетВВалютеФинОтчетности - Булево - Истина, если плане счетов регламентированного учета дополнительно ведется учет в валюте финансовой отчетности.
//		* ВалютаФинОтчетности - СправочникСсылка.Валюты - Валюта финансовой отчетности.
//
Функция НастройкиУчета() Экспорт
	
	НастройкиУчета = Новый Структура();
	НастройкиУчета.Вставить("ДополнительноВедетсяУправленческийУчет",       Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияУправленческогоУчета",        Дата(1,1,1));
	НастройкиУчета.Вставить("ДополнительноВедетсяУчетВВалютеФинОтчетности", Ложь);
	НастройкиУчета.Вставить("ВалютаФинОтчетности",                          Справочники.Валюты.ПустаяСсылка());
	НастройкиУчета.Вставить("ИспользоватьРеглУчет",                         Ложь);
	НастройкиУчета.Вставить("ДатаНачалаВеденияРеглУчета",                   Дата(1,1,1));
	
	//++ Локализация

	//++ НЕ УТ
	НастройкиУчета.ДополнительноВедетсяУправленческийУчет = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	НастройкиУчета.ДатаНачалаВеденияУправленческогоУчета = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	НастройкиУчета.ДополнительноВедетсяУчетВВалютеФинОтчетности = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	НастройкиУчета.ВалютаФинОтчетности = Константы.ВалютаФинОтчетности.Получить();
	НастройкиУчета.ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	НастройкиУчета.ДатаНачалаВеденияРеглУчета = Константы.ДатаНачалаВеденияРеглУчета.Получить();
	//-- НЕ УТ

	//-- Локализация
	
	Возврат НастройкиУчета;
	
КонецФункции

// Определяет ведение регл. учета на указанную дату.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую нужно проверить ведение регл. учета.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если ведется регл. учет.
Функция ВедетсяРеглУчет(Дата = '000101010000') Экспорт
	
	НастройкиУчета = НастройкиУчета();
	
	ВедетсяРеглУчет =
		НастройкиУчета.ИспользоватьРеглУчет
		И (Дата >= НастройкиУчета.ДатаНачалаВеденияРеглУчета
			ИЛИ Дата = '000101010000' 
				И ТекущаяДатаСеанса() >= НастройкиУчета.ДатаНачалаВеденияРеглУчета);
	
	Возврат ВедетсяРеглУчет;
	
КонецФункции

// Функция возвращает счет бухгалтерского учета в зависимости от выбранного типа налога. Вызов функции происходит из
// платежных документов.
//
// Параметры:
//   ТипНалога - ПеречислениеСсылка.ТипыНалогов - Типа налогов.
//
// Возвращаемое значение:
//   ПланСчетовСсылка - Счет учета по типу налога.
// 
Функция СчетУчетаПоТипуНалога(ТипНалога) Экспорт
	
	СчетУчета = Неопределено;
	//++ Локализация

	//++ НЕ УТ
	Если ТипНалога = Перечисления.ТипыНалогов.ЕНВД Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕНВД;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ЕСХН Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ЗемельныйНалог Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЗемельныйНалог;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НалогНаИмущество Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НалогНаИмущество;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_РегиональныйБюджет Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_НалоговыйАгент Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НалогНаПрибыльНалоговогоАгента;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДС_ОбратноеОбложение Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛ Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛ_ИП Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ИП;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛДивиденды Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛДивидендыСотрудникам Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.НДФЛДивидендыСПревышения Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРДополнительныйТарифЛЭ Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРДополнительныйТарифШахтеры Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРДоПредельнойВеличины Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРНакопительнаяЧасть Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_нак;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРПоСуммарномуТарифу Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРСПревышения Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ПФРСтраховаяЧасть Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_страх;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ТорговыйСбор Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ТорговыйСбор;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ТранспортныйНалог Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортныйНалог;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ТФОМС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ТФОМС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.УСН_Доходы Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.УСН_ДоходыМинусРасходы Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.УСН_МинимальныйНалог Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.АУСН Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕНПриАУСН;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ФСС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ФСС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ФССНС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ФФОМС Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ФФОМС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.СтраховыеВзносыЕдиныйТариф Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ОПСИностранныхРаботников Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ОМСИностранныхРаботников Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ФФОМС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ОССИностранныхРаботников Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ФСС;
	ИначеЕсли ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалоговыйПлатеж Тогда
		СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет;
	Иначе
		СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
	Возврат СчетУчета;
	
КонецФункции

// Функция возвращает типа налога в зависимости от выбранного счета бухгалтерского учета. Вызов функции происходит из
// обработчиков обновления.
//
// Параметры:
//   СчетУчета - ПланСчетовСсылка - Счет учета по типу налога.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыНалогов - Тип налогов по счету учета.
// 
Функция ТипНалогаПоСчетуУчета(СчетУчета) Экспорт
	
	ТипНалога = Неопределено;
	
	//++ Локализация

	//++ НЕ УТ
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ЕНВД Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ЕНВД;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_ФедеральныйБюджет;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НалогНаПрибыльНалоговогоАгента Тогда
		ТипНалога = Перечисления.ТипыНалогов.НалогНаПрибыль_НалоговыйАгент;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ЗемельныйНалог Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ЗемельныйНалог;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НалогНаИмущество Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НалогНаИмущество;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДС_ОбратноеОбложение;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.НДФЛ_ИП Тогда
	    ТипНалога = Перечисления.ТипыНалогов.НДФЛ_ИП;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПрочиеНалогиИСборы;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРДополнительныйТарифЛЭ;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_шахтеры Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРДополнительныйТарифШахтеры;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРДоПредельнойВеличины;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_нак Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРНакопительнаяЧасть;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_страх Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ПФРСтраховаяЧасть;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТорговыйСбор Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ТорговыйСбор;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТранспортныйНалог Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ТранспортныйНалог;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТФОМС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ТФОМС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ЕНприУСН Тогда
	    ТипНалога = Перечисления.ТипыНалогов.УСН_Доходы;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ЕНПриАУСН Тогда
	    ТипНалога = Перечисления.ТипыНалогов.АУСН;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ФСС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ФСС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ФССНС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ФФОМС Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ФФОМС;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф Тогда
	    ТипНалога = Перечисления.ТипыНалогов.СтраховыеВзносыЕдиныйТариф;
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет Тогда
	    ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалоговыйПлатеж;
	Иначе
		ТипНалога = Перечисления.ТипыНалогов.ПустаяСсылка();
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
	Возврат ТипНалога;
	
КонецФункции

// Возвращает доступность отражения документов в регл. учете текущему пользователю.
// 
// Возвращаемое значение:
// 	Булево - Наличие прав на отражение документов в регл. учете
//
Функция ЕстьПравоОтраженияДокументовВРеглУчете() Экспорт
	
	Результат = Ложь;
	//++ Локализация

	//++ НЕ УТ
	Результат = ПравоДоступа("Использование", Метаданные.Обработки.ОтражениеДокументовВРеглУчете);
	//-- НЕ УТ

	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Возвращает документы к отражению в регл. учете
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
// 	КоличествоОбработанных - Число - В данном параметр устанавливается количество возвращенных к отражению документов.
// 									 Параметр не является обязательным.
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению, КоличествоОбработанных = Неопределено) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументыКОтражению, КоличествоОбработанных);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в регламентированном учете.
//
// Параметры:
//	Расчеты - ТаблицаЗначений - Таблица движений по расчетам с партнерами:
//	                         * Регистратор - ДокументСсылка - Документ-регистратор движений
//	                         * Период - Дата - Период движений
//	                         * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(Расчеты) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВРеглУчете(Расчеты);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Процедура вызывается из методов регламентных операций для записи в регистр сведений "ЗаданияКЗакрытиюМесяца"
//	данных о необходимости пересчета признания расходов (если изменяются организации с объектом налогообложения "Доходы минус расходы").
// Параметры:
//	Период - Дата - период пересчета;
//	СписокОрганизаций - Массив - СправочникСсылка.Организации - массив организаций, для которых запущена процедура пересчета.
//	ТолькоРасходы - Булево - Признак выборки подходящих организаций. Значение по умолчанию - Истина.
//		Если Истина - будут выбираться организации на УСН, с объектом налогообложения "Доходы минус расходы".
//		Если Ложь - будут выбираться организации на УСН вне зависимости от объекта налогообложения. значение по умолчанию - Истина.
//	КоличествоОбработанныхЭлементов - Число - Количество данных, обработанных данной процедурой (см. общий модуль "Производительность").
//
Процедура ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Период, СписокОрганизаций, ТолькоРасходы = Истина, КоличествоОбработанныхЭлементов = 0) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	УчетУСНПСНСервер.ОбновитьЗаданияКЗакрытиюМесяцаПриВыполненииРеглОперации(Период, СписокОрганизаций, ТолькоРасходы, КоличествоОбработанныхЭлементов);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру регистров регл учета
// 
// Возвращаемое значение:
// 	Структура - Структура регистров НДС, где
// 	     Ключ - Имя регистра
// 	     Значение - Набор записей регистра.
Функция РегистрыРеглУчета() Экспорт
	
	РегистрыРегл = Новый Структура();
	//++ Локализация

	//++ НЕ УТ
	РегистрыРегл.Вставить(Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.Имя, РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей());
	//-- НЕ УТ

	//-- Локализация
	Возврат РегистрыРегл;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам регламентированного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	РеглУчетПроведениеСервер.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Возвращает свойства счета регламентированного учета
//
// Параметры:
// 	Счет - ПланСчетовСсылка - Счет регламентированного учета
// Возвращаемое значение:
// 	Структура - Свойства счета
Функция ПолучитьСвойстваСчета(Знач Счет) Экспорт
	
	ДанныеСчета = Неопределено;
	
	//++ Локализация

	//++ НЕ УТ
	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка"                         , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование"                   , "");
	ДанныеСчета.Вставить("Код"                            , "");
	ДанныеСчета.Вставить("КодБыстрогоВыбора"              , "");
	ДанныеСчета.Вставить("Родитель"                       , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид"                            , Неопределено);
	ДанныеСчета.Вставить("Забалансовый"                   , Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках", Ложь);
	ДанныеСчета.Вставить("Валютный"                       , Ложь);
	ДанныеСчета.Вставить("Количественный"                 , Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям"           , Ложь);
	ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности" , Ложь);
	ДанныеСчета.Вставить("НалоговыйУчет"                  , Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто"             , 0);
	ДанныеСчета.Вставить("ИдентификаторыСубконто"         , Новый Соответствие); // Ключ - вид субконто, Значение - строка "1", "2", "3"
	
	МаксКоличествоСубконто	= БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      Ложь);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	Хозрасчетный.Родитель,
	|	Хозрасчетный.Код,
	|	Хозрасчетный.КодБыстрогоВыбора,
	|	Хозрасчетный.Наименование,
	|	Хозрасчетный.Вид,
	|	Хозрасчетный.Забалансовый,
	|	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	Хозрасчетный.Валютный,
	|	Хозрасчетный.Количественный,
	|	Хозрасчетный.УчетПоПодразделениям,
	|	Хозрасчетный.УчетПоНаправлениямДеятельности,
	|	Хозрасчетный.НалоговыйУчет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ЕСТЬNULL(ХозрасчетныйВидыСубконто.ВидСубконто.Наименование, """") КАК Наименование,
	|	ХозрасчетныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ХозрасчетныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты,
	|	ХозрасчетныйВидыСубконто.Суммовой КАК Суммовой
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов	= Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
		
	ВыборкаВидыСубконто	= МассивРезультатов[1].Выбрать();
		
	ДанныеСчета.КоличествоСубконто	= ВыборкаВидыСубконто.Количество();
		
	ИндексСубконто	= 0;
		
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто	= ИндексСубконто + 1;
		ТипСубконто = ?(ВыборкаВидыСубконто.ТипЗначения = NULL, Новый ОписаниеТипов("Неопределено"), ВыборкаВидыСубконто.ТипЗначения);
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ТипСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Суммовой",      ВыборкаВидыСубконто.Суммовой);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
		ИдентификаторСубконто = XMLСтрока(ИндексСубконто);
		ДанныеСчета.ИдентификаторыСубконто.Вставить(ВыборкаВидыСубконто.ВидСубконто, ИдентификаторСубконто);
		
	КонецЦикла;
	
	//-- НЕ УТ

	//-- Локализация
	
	Возврат ДанныеСчета;
	
КонецФункции

// Настраивает видимость полей НУ, ПР и ВР на форме
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  Период         - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//  ВидИспользованияСумм - Строка -
//  ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль - Булево - вывести суммы разниц, если организация ведет учет ПБУ 18/02 простым балансовым методом 
//
Процедура НастроитьВидимостьПолейНалоговогоУчетаИРазниц(ПоляНалогНаПрибыль, Период, Организация = Неопределено, ВидИспользованияСумм = "",
	ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль = Ложь) Экспорт
	
	ВидимостьПоУмолчанию = Ложь;
	
	Для Каждого Поле Из ПоляНалогНаПрибыль Цикл
		Поле.Ключ.Видимость = ВидимостьПоУмолчанию;
	КонецЦикла;
	
	//++ Локализация

	//++ НЕ УТ
	БухгалтерскийУчетПереопределяемый.НастроитьВидимостьПолейНалоговогоУчетаИРазниц(
		ПоляНалогНаПрибыль,
		Период,
		Организация,
		ВидИспользованияСумм, 
		ВыводитьСуммыРазницДляПлательщикаНалогаНаПрибыль);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

// см. ВариантыОтчетовПереопределяемый.ОпределитьОбъектыСКомандамиОтчетов
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	// Бухгалтерский учет
	Объекты.Добавить(Метаданные.Документы.ОперацияБух);
	Объекты.Добавить(Метаданные.Документы.НачислениеДивидендов);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперация);
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияРасчетов);
	
	// Контролируемые сделки
	Объекты.Добавить(Метаданные.Документы.КонтролируемаяСделка);
	Объекты.Добавить(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОКонтролируемыхСделках);
	
	// УСН
	Объекты.Добавить(Метаданные.Документы.ЗаписьКУДиР);

КонецПроцедуры

// см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// Стандартные отчеты БУ
	
	#Область АнализСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ данных регламентированного учета по выбранным одному или нескольким субконто.';
									|en = 'Local accounting data analysis by the selected one or several extra dimensions.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСубконто");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ данных регламентированного учета по выбранным одному или нескольким субконто.';
									|en = 'Local accounting data analysis by the selected one or several extra dimensions.'");
	#КонецОбласти
	
	#Область АнализСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов регламентированного учета
		|между выбранным счетом и всеми остальными счетами.';
		|en = 'Local accounting turnover analysis between 
		|the selected account and all the other accounts. '");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов регламентированного учета
		|между выбранным счетом и всеми остальными счетами.';
		|en = 'Local accounting turnover analysis between 
		|the selected account and all the other accounts. '");
	#КонецОбласти
	
	#Область ОборотноСальдоваяВедомость
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.';
									|en = 'Start and closing account balance for debit and credit and turnover amount for the period. '");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.';
									|en = 'Start and closing account balance for debit and credit and turnover amount for the period. '");
	#КонецОбласти
	
	#Область ОборотноСальдоваяВедомостьПоСчету
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотноСальдоваяВедомостьПоСчету);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов и сальдо по счетам регламентированного учета.';
									|en = 'Balance and turnover analysis by local accounting accounts.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотноСальдоваяВедомостьПоСчету");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов и сальдо по счетам регламентированного учета.';
									|en = 'Balance and turnover analysis by local accounting accounts.'");
	#КонецОбласти
	
	#Область ОборотыМеждуСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыМеждуСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обороты между выбранными субконто и корреспондирующими субконто.';
									|en = 'Turnovers between the selected extra dimensions and offsetting extra dimensions.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыМеждуСубконто");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обороты между выбранными субконто и корреспондирующими субконто.';
									|en = 'Turnovers between the selected extra dimensions and offsetting extra dimensions.'");
	#КонецОбласти
	
	#Область ОтчетПоПроводкам
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОтчетПоПроводкам);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Детальный анализ корреспонденций счетов.';
									|en = 'Detailed analysis of account correspondence.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетПоПроводкам");
	ОписаниеВарианта.Описание = НСтр("ru = 'Детальный анализ корреспонденций счетов.';
									|en = 'Detailed analysis of account correspondence.'");
	#КонецОбласти
	
	#Область ОборотыСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОборотыСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обороты между выбранным счетом и всеми остальными счетами за определенный период.';
									|en = 'Turnovers between the selected account and all remaining accounts for the specified period.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОборотыСчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обороты между выбранным счетом и всеми остальными счетами за определенный период.';
									|en = 'Turnovers between the selected account and all remaining accounts for the specified period.'");
	#КонецОбласти	
	
	#Область СводныеПроводки
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СводныеПроводки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сводные корреспонденции между счетами за выбранный период.';
									|en = 'Summary correspondence between accounts for the selected period.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныеПроводки");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сводные корреспонденции между счетами за выбранный период.';
									|en = 'Summary correspondence between accounts for the selected period.'");
	#КонецОбласти
	
	#Область ШахматнаяВедомость
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ШахматнаяВедомость);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.';
		|en = 'Summary data of synthetic accounting by offsetting accounts. 
		|Expanded presentation of turnover between accounts.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ШахматнаяВедомость");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.';
		|en = 'Summary data of synthetic accounting by offsetting accounts. 
		|Expanded presentation of turnover between accounts.'");
	#КонецОбласти
		
	#Область КарточкаСубконто
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСубконто);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Корреспонденции счетов за выбранный период,
		|в которых был использован выбранный вид  или значение субконто.';
		|en = 'Account correspondence for the selected period 
		|in which the selected kind or value of extra dimension was used.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСубконто");
	ОписаниеВарианта.Описание = НСтр("ru = 'Корреспонденции счетов за выбранный период,
		|в которых был использован выбранный вид  или значение субконто.';
		|en = 'Account correspondence for the selected period 
		|in which the selected kind or value of extra dimension was used.'");
	#КонецОбласти
	
	#Область КарточкаСчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСчета);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.';
									|en = 'Account correspondences for the selected period when the selected account was used.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.';
									|en = 'Account correspondences for the selected period when the selected account was used.'");
	#КонецОбласти
	
	#Область ГлавнаяКнига
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ГлавнаяКнига);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сводная информация о сальдо и корреспондирующих оборотах по счетам бухгалтерского учета.';
									|en = 'Summary information about balance and offsetting turnovers according to bookkeeping accounts.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru = 'Счет
		|Начальное сальдо дебет
		|Начальное сальдо кредит
		|С кредита счета
		|Оборот по дебету
		|Оборот по кредиту
		|Конечное сальдо дебет
		|Конечное сальдо кредит';
		|en = 'Account
		|Start balance debit
		|Start balance credit
		|From account credit
		|Debit turnover
		|Credit turnover
		|Closing balance debit
		|Closing balance credit'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Период
		|Организация
		|Периодичность
		|По субсчетам
		|По субсчетам кор. счетов
		|Развернутое сальдо
		|Выводить единицу измерения';
		|en = 'Period
		|Company
		|Frequency
		|By subaccounts
		|By corr. account subaccounts
		|Detailed balance
		|Display unit of measure'");	
	#КонецОбласти
	
	// Контрольные отчеты БУ
	
	#Область СверкаДанныхОУиБУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СверкаДанныхОУиБУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область СправкаРасчет
	// Справки-расчеты выводятся на специальных панелях
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНормированияРасходов); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетРезервыПоСомнительнымДолгам); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизации); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизационнойПремии); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетДолиНалоговойБазы); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетЗемельногоНалогаДо2020); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаНаИмущество); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаНаПрибыль); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетОтложенногоНалога);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетРасходаПоНалогуНаПрибыль);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетЭффектаИзмененияСтавокНалогаНаПрибыль);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаУСН); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрИсключаемыхДокументовАУСН); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетНалогаАУСН); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПостоянныхИВременныхРазниц); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетПризнаниеРасходовПоАрендованнымОС); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТранспортногоНалога); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТорговогоСбора); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетТранспортныхРасходов); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетУбытковПрошлыхЛет); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	// Налоговый учет
	
	#Область АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализСостоянияНалоговогоУчетаПоНалогуНаПрибыль);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область РегистрыНалоговогоУчета
	
	// Регистры налогового учета выводятся на специальных панелях
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрыНалоговогоУчета); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета); 
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрНалоговогоУчетаФинРезультатовОтРеализацииАмортизируемогоИмущества); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РегистрИнформацииОбОбъектеОС); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти	
	
	#Область ОценкаРискаНалоговойПроверки
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОценкаРискаНалоговойПроверки);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Самостоятельная оценка налогоплательщиком риска проведения выездной налоговой проверки.';
									|en = 'Independent evaluation of field tax inspection risk by the taxpayer.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru = 'Налоговая проверка
		|Оценка риска';
		|en = 'Tax inspection
		|Risk asessment'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Организация';
																				|en = 'Company'");

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ФинансовыйАнализ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Финансовый анализ бухгалтерской отчетности.';
									|en = 'Financial analysis of accounting reporting.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru = 'Финансовый анализ';
																|en = 'Financial analysis'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Организация';
																				|en = 'Company'");
	#КонецОбласти
	
	#Область РасшифровкаСтатистики
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаСтатистики);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	
	// Контролируемые сделки
	
	#Область КонтролируемыеСделки
	// Отчеты по контролируемым сделкам необходимы только в помощнике.
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализУведомления);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВзаимозависимыеЛицаКонтролируемыхСделок);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтролируемыеСделкиДляВключенияВУведомление);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПредметыКонтролируемыхСделок);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СписокКонтролируемыхСделок);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	// 275-ФЗ
	#Область ИсполнениеКонтрактовГОЗ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИсполнениеКонтрактовГОЗ); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);	
	#КонецОбласти
	
	#Область ПодтверждениеРасходовПриКазначейскомСопровождении
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПодтверждениеРасходовПриКазначейскомСопровождении); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);	
	#КонецОбласти
	
	#Область ПодтверждениеРасходовПриКазначейскомСопровожденииРасшифровка
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РасшифровкаРасходованияДенежныхСредствПоСтатьямЦелевыхСредств); 
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);	
	#КонецОбласти
	
	#Область СведенияОКооперации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СведенияОКооперации);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область КонтрольПлатежаНаСоответствие275ФЗ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольПлатежаНаСоответствие275ФЗ);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область ПаспортКонтракта
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПаспортКонтракта);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	// УСН
	
	#Область АнализРасходовПриУСН
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасходовПриУСН);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
		
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоСебестоимостиРасшифровка");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПрочиеРасходыРасшифровка");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоАмортизацииРасшифровка");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "РасходыПоМатериаламРасшифровка");
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ расходов для целей УСН по данным налогового учета для заполнения КУДиР
		|для организаций и индивидуальных предпринимателей на УСН.';
		|en = 'STS expense analysis according to tax accounting data for filling LIE 
		|for companies and individual entrepreneurs to STS'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоСебестоимости");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ расходов по товарам для целей УСН.';
									|en = 'Analysis of expenses for goods for STS purposes.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеРасходы");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ прочих расходов для целей УСН.';
									|en = 'Analysis of other expenses for STS purposes.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоАмортизации");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ расходов по ОС и НМА для целей УСН.';
									|en = 'Analysis of expenses for FA and IA for STS purposes.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыПоМатериалам");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ расходов по материалам для целей УСН.';
									|en = 'Analysis of expenses for materials for STS purposes.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Период
		|Организация';
		|en = 'Period
		|Company'");
	#КонецОбласти
	
	#Область КнигаУчетаДоходовИРасходов
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КнигаУчетаДоходовИРасходов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Формирование книги доходов и расходов по данным налогового учета
		|для организаций и индивидуальных предпринимателей на УСН.';
		|en = 'Generation of ledger of income and expenditure according to data of tax accounting 
		|for companies and individual entrepreneurs under STS.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru = 'Налогоплательщик
		|ИНН
		|КПП
		|Объект налогообложения
		|Адрес организации
		|Номера расчетных счетов
		|Содержание операции
		|Доходы
		|Расходы
		|Наименование объекта
		|Дата оплаты объекта основных средств
		|Дата подачи документов
		|Дата ввода в эксплуатацию
		|Первоначальная стоимость
		|Срок полезного использования
		|Остаточная стоимость 
		|Количество кварталов эксплуатации
		|Доля стоимости
		|Дата выбытия
		|Сумма убытков
		|Налоговая база за истекший налоговый период
		|Страховые взносы на обязательное пенсионное страхование
		|Страховые взносы на обязательное социальное страхование
		|Страховые взносы на обязательное медицинское страхование
		|Расходы по выплате пособия по временной нетрудоспособности
		|Платежи (взносы) по договорам добровольного личного страхования';
		|en = 'Taxpayer
		|TIN
		|CRTR
		|Taxation object
		|Company address
		|Current account number
		|Transaction content
		|Income
		|Expenses
		|Object name
		|Payment date of fixed asset
		|Date of document submission
		|Commissioning date
		|Initial cost
		|Useful life
		|Residual value
		|Number of operation quarters
		|Cost percent
		|Retirement date
		|Amount of losses
		|Tax base for the past fiscal period 
		|Insurance contributions for mandatory pension insurance
		|Insurance contributions for compulsory social insurance
		|Insurance contributions for compulsory health insurance
		|Expenses for payment of temporary incapacity allowance
		|Payments (contributions) under voluntary insurance contracts'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Период
		|Организация';
		|en = 'Period
		|Company'");
	#КонецОбласти
	
	// АУСН
	
	#Область РеестрИсключаемыхДокументовАУСН
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрИсключаемыхДокументовАУСН);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru = 'Реестр документов, которые не учитываются в расчете налоговой базы налога АУСН';
									|en = 'Registry of documents that are not included in the calculation of the tax base of the ASTS tax'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru = 'Период
		|Организация';
		|en = 'Period
		|Company'");
	#КонецОбласти
	
КонецПроцедуры

// см. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	// Бухгалтерский учет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя(),
										"Период",
										"БухгалтерскийУчет",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.ПолноеИмя(),
										"ДатаОтражения",
										"БухгалтерскийУчет",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачислениеДивидендов.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачислениеДивидендов.ПолноеИмя(),
										"ДатаВыплаты",
										"РегламентныеОперации",
										"");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ИнвентаризацияРасчетов.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	
	
	// Учет УСН
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.ЗаписьКУДиР.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.КнигаУчетаДоходовИРасходов.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСН.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНМатериалы.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНОСиНМА.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.РасходыПриУСНТовары.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	
	// Учет ЕНП
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.НачислениеЕНП.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.Документы.КорректировкаРасчетовПоНалогам.ПолноеИмя(),
										"Дата",
										"РегламентныеОперации",
										"Организация");
	
КонецПроцедуры

// см. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	// Бухгалтерский учет
	Объекты.Добавить(Метаданные.Документы.ОперацияБух);
	Объекты.Добавить(Метаданные.Документы.НачислениеДивидендов);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперация);
	
	// Контролируемые сделки
	Объекты.Добавить(Метаданные.Документы.КонтролируемаяСделка);
	Объекты.Добавить(Метаданные.Документы.РегистрацияПрочихКонтролируемыхСделок);
	Объекты.Добавить(Метаданные.Документы.УведомлениеОКонтролируемыхСделках);
	
	// УСН
	Объекты.Добавить(Метаданные.Документы.ЗаписьКУДиР);
	
КонецПроцедуры

// см. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// Бухгалтерский учет
	СписокОбъектов.Добавить(Документы.ОперацияБух);
	СписокОбъектов.Добавить(ПланыСчетов.Хозрасчетный);
	СписокОбъектов.Добавить(Документы.НачислениеДивидендов);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияРасчетов);
	СписокОбъектов.Добавить(Документы.КонтролируемаяСделка);
	СписокОбъектов.Добавить(Документы.РегистрацияПрочихКонтролируемыхСделок);
	
	// УСН
	СписокОбъектов.Добавить(Документы.ЗаписьКУДиР);
	
КонецПроцедуры

#Область НаборыРолейПрофилей

Процедура ДобавитьРолиДоступаКРазделу(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("РазделРегламентированныйУчет");
	
КонецПроцедуры

Процедура ДобавитьРолиИзмененияНСИРеглУчета(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбщейБухгалтерскойНСИ");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСтавокНалогаНаПрибыль");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСтавокНалогаНаИмуществом");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПорядкаУплатыНалоговНаМестах");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПримененияЕНВД");
	
КонецПроцедуры

Процедура ДобавитьРолиЧтенияНСИРеглУчета(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбщейБухгалтерскойНСИ");

КонецПроцедуры

Процедура ДобавитьРолиЧтенияДанныхРеглУчета(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхРегламентированногоУчета");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");
	
КонецПроцедуры

Процедура ДобавитьРолиПросмотраДанныхРеглУчета(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбщейБухгалтерскойНСИ");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРегламентныхОпераций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРасчетовРезервовПодОбесценениеЗапасов");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтера");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаТоварыПереданныеНаКомиссию");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрСправокРасчетов");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрРегистровНалоговогоУчета");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтраженияДокументовВРегламентированномУчете");
	ОписаниеПрофиля.Роли.Добавить("СверкаДанныхОУиБУ");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаФинансовыйАнализ");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаОценкаРискаНалоговойПроверки");
	
КонецПроцедуры

Процедура ДобавитьРолиРегламентированнойОтчетности(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхРегламентированнойОтчетности");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности");
	ОписаниеПрофиля.Роли.Добавить("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЭлектроннойПодписиВМоделиСервиса");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекЗаполненияФормСтатистики");
	ОписаниеПрофиля.Роли.Добавить("РаботаСЗаявкамиНаЛьготныйКредит");
	ОписаниеПрофиля.Роли.Добавить("ОтправкаОтчетностиВИнтерфакс");
	
КонецПроцедуры

Процедура ДобавитьРолиЧтенияНастроекОтраженияВРеглУчете(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекОтраженияВРеглУчете");

	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПорядкаОтраженияПрочихОпераций");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПорядкаОтраженияНаСчетахУчета");
	
КонецПроцедуры

Процедура ДобавитьРолиИзмененияНастроекОтраженияВРеглУчете(ОписаниеПрофиля) Экспорт
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНастроекОтраженияДокументовВРеглУчете");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСчетовРеглУчетаТребующихНастройки");
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПорядкаОтраженияНаСчетахУчета");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПорядкаОтраженияПрочихОпераций");
	
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ОтражениеДокументовВРегламентированномУчете

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОтражениеДокументовВРегламентированномУчете(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеСводныхСправокНДС);

	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоРасчетамСПартнерамиИПереоценкаРасчетов);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоВнеоборотнымАктивам);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ЗакрытиеРасходовОтВыбытияОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиИнвестицииВАренду);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ОтражениеДокументовВРегламентированномУчете");
		
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_ОтражениеДокументовВРегламентированномУчете");
		
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.НастройкаОтраженияДокументовВРеглУчете.Формы.ФормаНастройкиОтраженияДокументовВРеглУчете.ПолноеИмя());
		
	НоваяСтрока.ВыполняетсяПриПредварительномЗакрытииМесяца = Истина;
	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = ЗакрытиеМесяцаСервер.ТекстЗапросаСостояниеОтраженияДокументов();
	
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика,
		МассивРезультатов[0].Выгрузить().Количество()
		+ МассивРезультатов[1].Выгрузить().Количество()
		+ МассивРезультатов[2].Выгрузить().Количество()
		+ МассивРезультатов[3].Выгрузить().Количество());
	
	ЕстьОтраженныеВУчете                = НЕ МассивРезультатов[0].Пустой();
	ЕстьОжидающиеОтражения              = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете              = НЕ МассивРезультатов[2].Пустой();
	ЕстьОжидающиеОтраженияНеПроверенные = НЕ МассивРезультатов[3].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в бухгалтерском и налоговом учете: %1';
					|en = 'Awaits recording in bookkeeping and tax accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не отражено в учете документов: %1';
					|en = 'Not recorded in document accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если НЕ ЕстьНеОтраженныеВУчете И НЕ ЕстьОжидающиеОтражения И НЕ ЕстьОтраженныеВУчете И НЕ ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов для отражения в учете.';
				|en = 'No documents to record in accounting.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	Если ЕстьОжидающиеОтраженияНеПроверенные Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает проверки для последующего отражения в учете документов: %1.';
					|en = 'Documents awaiting checking for recording in accounting: %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[3].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВРегламентированномУчете(ПараметрыОбработчика) Экспорт
	
	ПараметрыОтражения = РеглУчетПроведениеСервер.ПараметрыОтраженияВРеглУчете();
	ПараметрыОтражения.Организации = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	ПараметрыОтражения.ПериодРасчета = КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	ДанныеПоОтражениюВУчете = РеглУчетПроведениеСервер.ИнициализироватьДанныеПоОтражениюВУчете();
	
	Попытка
		РеглУчетПроведениеСервер.ОтразитьВсе(ПараметрыОтражения, ДанныеПоОтражениюВУчете);
	Исключение
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отражение документов в регламентированном учете за период %1 завершилось с ошибкой:
				|%2';
				|en = 'Local accounting posting for period %1 was completed with an error:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отражение документов в регламентированном учете';
										|en = 'Local accounting posting'"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецПопытки;
	
	Для Каждого ОписаниеПроблемы Из ДанныеПоОтражениюВУчете.ОписанияПроблем Цикл
		ВажностьПроблемы = ?(ДанныеПоОтражениюВУчете.ОшибкиПриОтражении > 0,
			Перечисления.ВажностьПроблемыУчета.Ошибка, Перечисления.ВажностьПроблемыУчета.Предупреждение);
		ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
			ПараметрыОбработчика,
			ОписаниеПроблемы.Значение,
			,
			,
			ВажностьПроблемы,
			ОписаниеПроблемы.Ключ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеФинансовогоРезультата

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеФинансовогоРезультата(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазниц);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ФормированиеРезервовПоСомнительнымДолгам);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_ФормированиеФинансовогоРезультата");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаЛокализация.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация(); 
	
	ТипыОпераций = Документы.РегламентнаяОперация.ТипыОперацийФинРеза();
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		НоваяСтрока.ТипыРегламентныхОпераций.Добавить(ТипОперации);
	КонецЦикла;

	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация КАК Ссылка,
	|	Таб.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Таб.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ (
	// Получим организации без обособленных подразделений и обособленные подразделения
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) КАК Организация,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
	|		ЕСТЬNULL(ОбособленныеПодразделения.ГоловнаяОрганизация, ДД.Ссылка) КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|			И ОбособленныеПодразделения.ОбособленноеПодразделение
	|			И НЕ ОбособленныеПодразделения.ПометкаУдаления
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение И НЕ ДД.ПометкаУдаления
	|		И (ДД.Ссылка В (&МассивОрганизаций)
	|			ИЛИ ЕСТЬNULL(ОбособленныеПодразделения.Ссылка, ДД.Ссылка) В (&МассивОрганизаций)
	|		) И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Добавим ссылки на сами головные организации
	|	ВЫБРАТЬ
	|		ДД.Ссылка КАК Организация,
	|		ЛОЖЬ КАК ОбособленноеПодразделение,
	|		ДД.Ссылка КАК ГоловнаяОрганизация
	|	ИЗ
	|		Справочник.Организации КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения
	|		ПО ДД.Ссылка = ОбособленныеПодразделения.ГоловнаяОрганизация
	|	ГДЕ
	|		НЕ ДД.ОбособленноеПодразделение И НЕ ДД.ПометкаУдаления
	|		И ОбособленныеПодразделения.ОбособленноеПодразделение
	|		И НЕ ОбособленныеПодразделения.ПометкаУдаления
	|		И ДД.Ссылка В (&МассивОрганизаций)
	|		И ДД.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	) КАК Таб
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ 
	|	Т.Ссылка
	|ИЗ
	|	ВТОрганизации КАК Т
	|ГДЕ
	|	НЕ Т.Ссылка В (&МассивОрганизаций)
	|	ИЛИ НЕ Т.ОбособленноеПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, РезультатЗапроса.Выгрузить().Количество());
	
	Запрос.УстановитьПараметр("ПроверятьОстатки90хСчетов", НЕ РезультатЗапроса.Пустой());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Организация КАК Ссылка,
	|	Таб.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ (
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода,
	|		 &КонецПериода,
	|		 ,
	|		 ,
	|		 ,
	|		&ПроверятьОстатки90хСчетов И НЕ &ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ ВТОрганизации КАК Т ГДЕ НЕ Т.ОбособленноеПодразделение)
	|		 ) КАК ХозрасчетныйОбороты
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация
	|	ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
	|		 КОНЕЦПЕРИОДА(&КонецПериода, ГОД),
	|		 ,
	|		 ,
	|		 ,
	|		&ЭтоКонецГода
	|			И Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ ВТОрганизации КАК Т)
	|		 ) КАК ХозрасчетныйОбороты
	|	) КАК Таб
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НеОбособленныеПодразделенияСОборотами
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииСОборотами КАК ОрганизацииСОборотами
	|		ПО Организации.Ссылка = ОрганизацииСОборотами.Ссылка
	|ГДЕ
	|	НЕ Организации.ОбособленноеПодразделение
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотами
	|ИЗ
	|	ОрганизацииСОборотами КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|				&КонецПериода, 
	|				Организация В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ГоловнаяОрганизация ИЗ ВТОрганизации КАК Т)) КАК УчетныеПолитики
	|	ПО
	|		Организации.ГоловнаяОрганизация = УчетныеПолитики.Организация
	|ГДЕ
	|	УчетныеПолитики.СистемаНалогообложения ЕСТЬ NULL
	|	ИЛИ УчетныеПолитики.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Проводки.Организация КАК Организация,
	|	Проводки.СуммаОстаток КАК Сумма90,
	|	0 КАК Сумма91
	|ПОМЕСТИТЬ ВТОстаткиПоСчетам90и91
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи)),
	|			,
	|			&ПроверятьОстатки90хСчетов И Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ВТОрганизации КАК Т)) КАК Проводки
	|ГДЕ
	|	(Проводки.СуммаОстаток <> 0
	|			ИЛИ Проводки.СуммаНУОстаток <> 0
	|			ИЛИ Проводки.СуммаПРОстаток <> 0
	|			ИЛИ Проводки.СуммаВРОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.Организация,
	|	0,
	|	Проводки.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			,
	|			&ПроверятьОстатки90хСчетов И Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ВТОрганизации КАК Т)) КАК Проводки
	|ГДЕ
	|	(Проводки.СуммаОстаток <> 0
	|			ИЛИ Проводки.СуммаНУОстаток <> 0
	|			ИЛИ Проводки.СуммаПРОстаток <> 0
	|			ИЛИ Проводки.СуммаВРОстаток <> 0)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	СУММА(ВТОстаткиПоСчетам90и91.Сумма90) КАК Сумма90,
	|	СУММА(ВТОстаткиПоСчетам90и91.Сумма91) КАК Сумма91
	|ПОМЕСТИТЬ ОрганизацииСОстатками90еСчета
	|ИЗ
	|	ВТОстаткиПоСчетам90и91 КАК ВТОстаткиПоСчетам90и91
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ВТОстаткиПоСчетам90и91.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТОстаткиПоСчетам90и91.Сумма90) <> 0
	|		ИЛИ СУММА(ВТОстаткиПоСчетам90и91.Сумма91) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииСОстаткамиПоКурсовымРазницам
	|ИЗ (
	|	ВЫБРАТЬ
	|		Остатки.Счет,
	|		Остатки.Организация,
	|		ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|		ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|		ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|		СУММА(Остатки.ВалютнаяСуммаОстаток) КАК ОстатокВалюты,
	|		СУММА(Остатки.СуммаОстаток) КАК ОстатокРегл,
	|		СУММА(Остатки.СуммаУУОстаток) КАК ОстатокУпр,
	|		СУММА(Остатки.СуммаФООстаток) КАК ОстатокФО
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			НЕ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбытки))
	|			И НЕ Счет.Забалансовый,
	|			,
	|			Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ВТОрганизации КАК Т)) КАК Остатки
	|	ГДЕ
	|		&УчетВВалютеФО И Остатки.СуммаФООстаток <> ВЫРАЗИТЬ(&КоэффициентПересчета
	|			* ВЫБОР КОГДА &СуммаУУ ТОГДА Остатки.СуммаУУОстаток ИНАЧЕ Остатки.СуммаОстаток КОНЕЦ КАК ЧИСЛО(31,2))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Остатки.Организация,
	|		Остатки.Счет,
	|		ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)),
	|		ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО),
	|		ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО)
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Остатки.СуммаФООстаток) <> СУММА(ВЫРАЗИТЬ(&КоэффициентПересчета * ВЫБОР
	|			КОГДА &СуммаУУ  ТОГДА Остатки.СуммаУУОстаток ИНАЧЕ Остатки.СуммаОстаток КОНЕЦ КАК ЧИСЛО(15, 2)))
	|	) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотамиУбыткиПрошлыхЛет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			НАЧАЛОПЕРИОДА(&КонецПериода, ГОД),
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиПрошлыхЛет)),
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ОрганизацииОСНОСОборотами КАК Т)) КАК Т
	|ГДЕ
	|	Т.СуммаНУОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотамиСписаниеКосвенныхРасходов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НормируемыеРасходы),
	|			,
	|			Организация В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ОрганизацииОСНОСОборотами КАК Т)) КАК Т
	|ГДЕ
	|	Т.СуммаНУОстаток <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Ссылка
	|ПОМЕСТИТЬ ОрганизацииОСНОСОборотамиБалансовыйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаБухУчета.СрезПоследних(
	|		&НачалоПериода,
	|		Организация В (ВЫБРАТЬ
	|							ОрганизацииОСНОСОборотами.Ссылка
	|						ИЗ
	|							ОрганизацииОСНОСОборотами КАК ОрганизацииОСНОСОборотами)
	|	) КАК Т
	|
	|ГДЕ
	|	Т.ВариантУчетаОтложенногоНалога В
	|			(ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетод),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетодПостоянныеРазницы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ НеПеренесенУбыток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД),
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ВидыАктивовИОбязательств)) = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ НеПеренесенУбытокКонецГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			,
	|			&ЭтоКонецГода И Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК Перечисление.ВидыАктивовИОбязательств)) = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	T.Организация КАК Организация
	|ПОМЕСТИТЬ УбыткиСрок10Лет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаКонецПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбыткиПрошлыхЛет),
	|			,
	|			Организация В (ВЫБРАТЬ Т.Ссылка ИЗ ОрганизацииОСНОСОборотами КАК Т)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ДатаОкончанияСписания <= НАЧАЛОПЕРИОДА(&КонецПериода,ДЕНЬ)
	|				И ВЫРАЗИТЬ(Субконто1 КАК Справочник.УбыткиПрошлыхЛет).ДатаОкончанияСписания < ДАТАВРЕМЯ(2017, 1, 1)) КАК T
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСОстатками90еСчета КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСОстаткамиПоКурсовымРазницам КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НЕ ОрганизацииОСНОСОборотами.Ссылка ЕСТЬ NULL КАК ОборотыНаОСНО,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(Задания.Месяц, ДАТАВРЕМЯ(1,1,1)), МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	ВТОрганизации КАК Организации
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК Задания
	|	ПО Организации.Ссылка = Задания.Организация
	|		И Задания.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата)
	|		И НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &НачалоПериода
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОрганизацииОСНОСОборотами КАК ОрганизацииОСНОСОборотами
	|	ПО Организации.Ссылка = ОрганизацииОСНОСОборотами.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(Задания.Месяц, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1)
	|		И НЕ (ОрганизацииОСНОСОборотами.Ссылка ЕСТЬ NULL ИЛИ Организации.ОбособленноеПодразделение)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Организации.ОбособленноеПодразделение,
	|	НЕ ОрганизацииОСНОСОборотами.Ссылка ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ОрганизацииСКорректировкойНалоговойБазыПоКурсовымРазницам
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&КонецПериода, Организация В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.ГоловнаяОрганизация
	|			ИЗ
	|				ВТОрганизации КАК Т)) КАК УчетныеПолитики
	|		ПО Организации.ГоловнаяОрганизация = УчетныеПолитики.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКЗакрытиюМесяца КАК ЗаданияКЗакрытиюМесяца
	|		ПО Организации.Ссылка = ЗаданияКЗакрытиюМесяца.Организация
	|		И ЗаданияКЗакрытиюМесяца.Операция = &ТипОперации
	|		И ЗаданияКЗакрытиюМесяца.Месяц = &НачалоПериода
	|ГДЕ
	|	ЕСТЬNULL(УчетныеПолитики.ДатаНезависимогоПризнанияДоходовРасходов, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|	И &ЭтоКонец2022Года 
	|	И НЕ ЗаданияКЗакрытиюМесяца.Организация ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Организация
	|ИЗ
	|	ОрганизацииСКорректировкойНалоговойБазыПоКурсовымРазницам КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчет.Счет
	|ИЗ
	|	РегистрСведений.РасчетОтложенногоНалога КАК Расчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОрганизацииОСНОСОборотамиБалансовыйМетод КАК Организации
	|		ПО Расчет.Организация = Организации.Ссылка
	|			И Расчет.ПериодРасчета = &НачалоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаГруппировкиАктивовОбязательств КАК Правила
	|		ПО Правила.ВидАктивовОбязательств = Расчет.ВидАктивовИОбязательств
	|			И Правила.ОсновнойСчет = Расчет.Счет
	|			И НЕ Правила.ПометкаУдаления
	|ГДЕ
	|	&РучнаяНастройкаПБУ18
	|	И Правила.Ссылка ЕСТЬ NULL
	|	И Расчет.ВидАктивовИОбязательств = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.ПрочиеРасходы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.Период) КАК Период,
	|	ИСТИНА КАК СтавкиПоВсемОрганизациям,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(&КонецМесяцаНачалаДействия176ФЗ, &ВыводитьУведомлениеОбИзмененииСтавкиНалогаНаПрибыль) КАК СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОрганизацииОСНОСОборотами)
	|
	|ИМЕЮЩИЕ
	|	КОНЕЦПЕРИОДА(МАКСИМУМ(СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.Период), МЕСЯЦ) < &КонецМесяцаНачалаДействия176ФЗ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Период),
	|	ЛОЖЬ,
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(
	|			&КонецМесяцаНачалаДействия176ФЗ,
	|			&ВыводитьУведомлениеОбИзмененииСтавкиНалогаНаПрибыль
	|				И Организация В
	|					(ВЫБРАТЬ
	|						ОрганизацииОСНОСОборотами.Ссылка
	|					ИЗ
	|						ОрганизацииОСНОСОборотами)
	|				И &ПрименяютсяРазныеСтавкиНалогаНаПрибыль) КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Организация
	|
	|ИМЕЮЩИЕ
	|	КОНЕЦПЕРИОДА(МАКСИМУМ(СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.Период), МЕСЯЦ) < &КонецМесяцаНачалаДействия176ФЗ";
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	УчетВВалютеФО = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	Запрос.УстановитьПараметр("УчетВВалютеФО", УчетВВалютеФО);
	
	РучнаяНастройкаПБУ18 = ПолучитьФункциональнуюОпцию("ИспользоватьНастраиваемуюГруппировкуАктивовОбязательств");
	Запрос.УстановитьПараметр("РучнаяНастройкаПБУ18", РучнаяНастройкаПБУ18);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Получить() = Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.УУ Тогда
		ТекущаяВалюта = Константы.ВалютаУправленческогоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Истина);
	Иначе
		ТекущаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Запрос.УстановитьПараметр("СуммаУУ", Ложь);
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	КоэффициентПересчетаВалютыФО = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		Константы.ВалютаФинОтчетности.Получить(),
		КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КоэффициентПересчета", КоэффициентПересчетаВалютыФО);
	
	ЭтоКонецГода = (Месяц(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) = 12);
	Запрос.УстановитьПараметр("ЭтоКонецГода", ЭтоКонецГода);
	
	ЭтоКонец2022Года = ПараметрыОбработчика.ПараметрыРасчета.КонецПериода = '20221231235959';
	Запрос.УстановитьПараметр("ЭтоКонец2022Года", ЭтоКонец2022Года);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("ТипОперации", Перечисления.ОперацииЗакрытияМесяца.ФормированиеФинансовогоРезультата);
	Запрос.УстановитьПараметр("КонецМесяцаНачалаДействия176ФЗ", КонецМесяца(НалоговыйУчет.ДатаНачалаДействия176ФЗ()));
	Запрос.УстановитьПараметр("ВыводитьУведомлениеОбИзмененииСтавкиНалогаНаПрибыль", 
		НалоговыйУчет.ВыводитьУведомлениеОбИзмененииСтавкиНалогаНаПрибыль(ПараметрыОбработчика.ПараметрыРасчета.КонецПериода));
	Запрос.УстановитьПараметр("ПрименяютсяРазныеСтавкиНалогаНаПрибыль", НалоговыйУчет.ПрименяютсяРазныеСтавкиНалогаНаПрибыль());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПредставлениеПериода = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);

	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0
	 И РазмерыВременныхТаблиц.ОрганизацииСОстатками90еСчета = 0
	 И РазмерыВременныхТаблиц.ОрганизацииСОстаткамиПоКурсовымРазницам = 0 
	 И РазмерыВременныхТаблиц.ОрганизацииСКорректировкойНалоговойБазыПоКурсовымРазницам = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет организаций с оборотами по регистру бухгалтерского учета за период %1';
					|en = 'No companies with turnovers for the bookkeeping register for period %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПредставлениеПериода));
			
		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика);
		
		Возврат;
		
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата,
		"НеОбособленныеПодразделенияСОборотами",
		Ложь);
		
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.СписаниеУбытковПрошлыхЛет,
		"ОрганизацииОСНОСОборотамиУбыткиПрошлыхЛет",
		Ложь);
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль,
		"ОрганизацииОСНОСОборотами",
		Ложь);
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.РасчетОтложенногоНалога,
		"ОрганизацииОСНОСОборотамиБалансовыйМетод",
		Ложь);
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
		ПараметрыОбработчика,
		Перечисления.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов,
		"ОрганизацииОСНОСОборотамиСписаниеКосвенныхРасходов",
		Ложь);
	
	Если УчетВВалютеФО Тогда
		ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ПереоценкаСуммыВВалютеФинОтчетности,
			"ОрганизацииСОстаткамиПоКурсовымРазницам",
			Ложь);
	КонецЕсли;
	
	Если ЭтоКонецГода Тогда
		ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода,
			"ОрганизацииСОборотами",
			Ложь);
	КонецЕсли;
	
	Если ЭтоКонец2022Года Тогда
		ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(
			ПараметрыОбработчика,
			Перечисления.ТипыРегламентныхОпераций.КорректировкаНалоговойБазыПоКурсовымРазницам,
			"ОрганизацииСКорректировкойНалоговойБазыПоКурсовымРазницам",
			Ложь);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Получить(12).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" на конец периода %2 есть суммовые остатки по 90м счетам.';
					|en = 'There is amount balance of 90m accounts in the ""%1"" company as of the end of the period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Организация,
				ПредставлениеПериода));
		
	КонецЦикла;
			
	Выборка = РезультатЗапроса.Получить(13).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" на конец периода %2 есть суммовые остатки по курсовым разницам.';
					|en = 'There is amount balance of exchange rate differences for the %1 company as of the end of the period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Выборка.Организация,
				ПредставлениеПериода));
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Получить(14).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Месяц) И Выборка.Месяц < ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета Тогда
			ПараметрыОбработчика.ДанныеЭтапа.ДатаНачалаРасчета = Выборка.Месяц;
		КонецЕсли;
		
		Если Не Выборка.ОбособленноеПодразделение Тогда
			Пояснение = НСтр("ru = 'В организации ""%1"" необходимо выполнить регламентную операцию формирование финансового результата начиная с периода %2.';
							|en = '""%1"" company must run a period-end transaction of financial result generation starting from %2 period.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Пояснение = НСтр("ru = 'В обособленном подразделении ""%1"" необходимо выполнить регламентную операцию формирование финансового результата начиная с периода %2.';
							|en = '""%1"" branch office must run a period-end transaction of financial result generation starting from %2 period.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, Выборка.Организация,
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Выборка.Месяц));
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Пояснение);
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Получить(17).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не установлено соответствие временных разниц на счете ""%1"" видам активов и обязательств. Отложенные налоги отнесены к виду активов ""Прочие расходы"".';
					|en = 'Mapping of temporary differences in account %1 to kinds of assets and liabilities is not set. Deferred taxes are classified as ""Other expenses"" assets.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Счет);
			
			Описание = ЗакрытиеМесяцаСервер.СтруктураОписанияДействия();
			Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
			Описание.ИмяФормы    = Метаданные.Справочники.ПравилаГруппировкиАктивовОбязательств.Формы.ФормаСписка.ПолноеИмя();
			Описание.НаКлиенте   = Истина;
	
			ЗакрытиеМесяцаСервер.ДобавитьПоясняющуюИнформациюКЭтапу(
				ПараметрыОбработчика,
				ТекстСообщения,
				"Подробнее",
				Описание,
				Перечисления.ВажностьПроблемыУчета.ПолезныйСовет);
		
	КонецЦикла;
			
	ТаблицаНеПеренесенУбыток = Запрос.МенеджерВременныхТаблиц.Таблицы["НеПеренесенУбыток"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаНеПеренесенУбыток Цикл
		
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, СтрокаОрганизации.Организация);
		Если НачалоГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) <> НачалоНалоговогоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выполнен перенос убытка прошлого года по НУ в организации ""%1"". Выполните операцию ""Закрытие года"" в %2 или перенесите убыток вручную.';
					|en = 'Loss of the previous year by TA is not transferred in the ""%1"" company. Execute the ""Year-end closing"" operation in %2 or transfer the loss manually.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаОрганизации.Организация, "декабре " + Формат(Год(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)-1,"ЧГ=0")));
	КонецЦикла;
	
	ТаблицаНеПеренесенУбытокКонецГода = Запрос.МенеджерВременныхТаблиц.Таблицы["НеПеренесенУбытокКонецГода"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаНеПеренесенУбытокКонецГода Цикл
		
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации, СтрокаОрганизации.Организация);
		Если НачалоГода(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации) <> НачалоНалоговогоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не выполнен перенос убытка текущего года по НУ на будущее в организации ""%1"". Необходимо выполнить регламентную операцию ""Закрытие года"".';
					|en = 'Loss of the current year by TA is not transferred to the future in the ""%1"" company. Execute the ""Year-end closing"" period-end operation.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаОрганизации.Организация));
	КонецЦикла;
	
	ТаблицаУбыткиСрок10Лет = Запрос.МенеджерВременныхТаблиц.Таблицы["УбыткиСрок10Лет"].ПолучитьДанные().Выгрузить();
	
	Для Каждого СтрокаОрганизации Из ТаблицаУбыткиСрок10Лет Цикл
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В организации ""%1"" обнаружены убытки прошлых лет по НУ, по которым истек срок списания - 10 лет. Для списания убытков воспользуйтесь ручной операцией.';
					|en = 'Losses of previous years by TA were detected in the ""%1""  company by which write-off period (10 years) has expired. To write off losses, use a manual operation.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СтрокаОрганизации.Организация)
				,
				,
				,Перечисления.ВажностьПроблемыУчета.Предупреждение);
	КонецЦикла;

	Выборка = РезультатЗапроса.Получить(18).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтавкиПоВсемОрганизациям Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо проверить актуальность ставок налога на прибыль для всех организаций';
									|en = 'Необходимо проверить актуальность ставок налога на прибыль для всех организаций'", ОбщегоНазначения.КодОсновногоЯзыка());	
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Необходимо проверить актуальность ставок налога на прибыль в бюджет субъектов РФ по организации ""%1""';
											|en = 'Необходимо проверить актуальность ставок налога на прибыль в бюджет субъектов РФ по организации ""%1""'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.Организация); 	
		КонецЕсли;		
		
		Описание = ЗакрытиеМесяцаСервер.СтруктураОписанияДействия();
		Описание.ВидДействия = Перечисления.ВидыДействийРасшифровкиОперацийЗакрытияМесяца.ОткрытьФорму;
		Описание.ИмяФормы    = Метаданные.РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.Формы.ФормаСписка.ПолноеИмя();
		Описание.НаКлиенте   = Истина;

		ЗакрытиеМесяцаСервер.ДобавитьПоясняющуюИнформациюКЭтапу(
			ПараметрыОбработчика,
			ТекстСообщения,
			"Подробнее",
			Описание,
			Перечисления.ВажностьПроблемыУчета.ПолезныйСовет);
	КонецЦикла;
			
	Если ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоСОшибками
		И ПараметрыОбработчика.ДанныеЭтапа.Состояние <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ЗакрытиеМесяцаСервер.УдалитьЗаданияКРасчетуЗаТекущийПериод(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ФормированиеФинансовогоРезультата(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Ложь);
	
КонецПроцедуры

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетЕНС(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетЕНС,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ОбесценениеВНА);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОбесценениеВНА);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Run'", ОбщегоНазначения.КодОсновногоЯзыка());
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_РасчетЕНС");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_РасчетЕНС");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаЛокализация.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РасчетЕНС);
		
КонецПроцедуры

// Обработчики этапа
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_РасчетЕНС(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьИспользованиеЕНП(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВведеныРегламентныеДокументы = ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика);
	
КонецПроцедуры

// Выполняет этап закрытия месяца.
//
// Параметры:
//	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки.
//
Процедура Выполнить_РасчетЕНС(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область РучныеОперации

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ПереходНаЕНС(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаЕдиныйНалоговыйСчет, Ложь, Истина, Ложь);
		
	НоваяСтрока.ВыполняетсяВручную = Истина;
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ПереходНаЕНС");
		
КонецПроцедуры 

// Обработчики этапа.

// Проверяет необходимость выполнения этапа закрытия месяца.
// 
// Параметры:
//   ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_ПереходНаЕНС(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаПримененияЕНП = ДатаНачалаОбязательногоПримененияЕНП();
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если ПараметрыРасчета.ПериодРегистрации < ДатаНачалаПримененияЕНП Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(
		МенеджерВременныхТаблиц, ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПримененияЕНП", ДатаНачалаПримененияЕНП);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтГоловныеОрганизации КАК ОтборОрганизаций
	|		ПО Организации.Ссылка = ОтборОрганизаций.Организация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНО
	|		ПО Организации.РегистрацияВНалоговомОргане = РегистрацииВНО.Ссылка
	|			И РегистрацииВНО.ДатаПостановкиНаУчет < &ДатаПримененияЕНП
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРасчетовПоНалогам КАК ВводОстатковЕНС
	|		ПО Организации.Ссылка = ВводОстатковЕНС.Организация
	|			И ВводОстатковЕНС.Дата >= &ДатаПримененияЕНП
	|			И ВводОстатковЕНС.ВводОстатковРасчетовПоЕНС
	|			И ВводОстатковЕНС.Проведен
	|ГДЕ
	|	ВводОстатковЕНС.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстПодробнее = НСтр("ru = 'Открыть';
								|en = 'Open'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстПояснения = СтрШаблон(
			НСтр("ru = 'Для организации ""%1"" не выполнен переход на единый налоговый счет.';
				|en = '%1 company did not switch to the unified tax account.'",
			ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.Организация);
		
		ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Обработки.ПомощникПереходаНаЕНС.Формы.Форма.ПолноеИмя());
		ДействиеПодробнее.ПараметрыФормы.Вставить("Организация", Выборка.Организация);
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика, ТекстПояснения, ТекстПодробнее, ДействиеПодробнее);
		
	КонецЦикла;
	
	Если Не Выборка.Количество() Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РеклассификацияДолгосрочныхАктивовОбязательств

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РеклассификацияДолгосрочныхАктивовОбязательств(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РеклассификацияДолгосрочныхАктивовОбязательств,
		Ложь, Истина, Ложь,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВРегламентированномУчете);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Execute'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_РеклассификацияДолгосрочныхАктивовОбязательств");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РеглУчетСервер.Выполнить_РеклассификацияДолгосрочныхАктивовОбязательств");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаЛокализация.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперация();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОпераций.РеклассификацияДолгосрочныхАктивовОбязательств);
		
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_РеклассификацияДолгосрочныхАктивовОбязательств(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВыделятьДолгосрочныеАктивыОбязательства") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Деление активов и обязательств на краткосрочные/долгосрочные не используется.';
				|en = 'Division of assets and liabilities into short-term or long-term ones is not used.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеДокументаРегламентнаяОперация(ПараметрыОбработчика);
	
КонецПроцедуры

Процедура Выполнить_РеклассификацияДолгосрочныхАктивовОбязательств(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаЛокализация.РасчетРегламентныхОперацийНачинаяСПервогоЗадания(ПараметрыОбработчика, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ВводСведенийСреднесписочнойЧисленности

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработка.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов - 
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ВводСведенийСреднесписочнойЧисленности(ТаблицаЭтапов, ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ВводСведенийСреднесписочнойЧисленности, Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РеглУчетСервер.Использование_ВводСведенийСреднесписочнойЧисленности");
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Ввести';
											|en = 'Enter'");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Документы.СтатистикаПерсонала.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

Процедура Использование_ВводСведенийСреднесписочнойЧисленности(ПараметрыОбработчика) Экспорт
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаПрогрессивнойШкалы", УчетУСНКлиентСервер.ДатаНачалаПрогрессивнойШкалы());
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	СпрОрганизации.Ссылка В (&МассивОрганизаций)
	|	И НЕ СпрОрганизации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГоловныеОрганизации.Организация КАК Организация,
	|	ИСТИНА КАК ЗаполнениеНеОбязательно
	|ПОМЕСТИТЬ ОрганизацииСреднесписочнаяЧисленность
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&НачалоПериода, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК НастройкиСистемыНалогообложения
	|		ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложения.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаУСН.СрезПоследних(&НачалоПериода, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК НастройкиУчетаУСН
	|		ПО ГоловныеОрганизации.Организация = НастройкиУчетаУСН.Организация
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПрименяетсяУСН И НастройкиУчетаУСН.ИспользуетсяТрудНаемныхРаботников
	|	И &КонецПериода >= &ДатаНачалаПрогрессивнойШкалы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГоловныеОрганизации.Организация КАК Организация,
	|	ЛОЖЬ КАК ЗаполнениеНеОбязательно
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&НачалоПериода, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК НастройкиСистемыНалогообложения
	|		ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложения.Организация
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПоказательОпределенияДолиПрибыли
	|		= ЗНАЧЕНИЕ(Перечисление.ПоказателиДляОпределенияДолиПрибыли.СреднесписочнаяЧисленность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииСреднесписочнаяЧисленность.Организация,
	|	ОрганизацииСреднесписочнаяЧисленность.ЗаполнениеНеОбязательно,
	|	СведенияОСреднесписочнойЧисленности.Ссылка
	|ИЗ
	|	ОрганизацииСреднесписочнаяЧисленность КАК ОрганизацииСреднесписочнаяЧисленность
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СтатистикаПерсонала КАК СведенияОСреднесписочнойЧисленности
	|		ПО ОрганизацииСреднесписочнаяЧисленность.Организация = СведенияОСреднесписочнойЧисленности.Организация
	|		И СведенияОСреднесписочнойЧисленности.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|ГДЕ
	|	СведенияОСреднесписочнойЧисленности.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСреднесписочнаяЧисленность = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций, для которых необходимо вводить сведения о среднесписочной численности для расчета налога на прибыль';
				|en = 'There are no companies which require entering information about the average number to calculate income tax'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		
		ПредставлениеПериода = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Пояснение = ?(Выборка.ЗаполнениеНеОбязательно,
				НСтр("ru = 'Для организации ""%1"" на конец периода %2 не введены сведения о среднесписочной численности, по умолчанию будет считаться в пределах 100 человек';
					|en = 'There is no information entered about the average number for company ""%1"" as of the end of the period %2, by default it will be considered within 100 people'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'Для организации ""%1"" на конец периода %2 необходимо ввести сведения о среднесписочной численности';
					|en = 'Please enter information about the average number for company ""%1"" as of the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Пояснение, Выборка.Организация,
				ПредставлениеПериода);
			Если Выборка.ЗаполнениеНеОбязательно Тогда
				ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(ПараметрыОбработчика, Пояснение,,,
					Перечисления.ВажностьПроблемыУчета.Информация);
			Иначе
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, Пояснение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТ

#Область ЕдиныйНалоговыйСчет

// Возвращает дату начала обязательного применения ЕНП
//
// Возвращаемое значение:
// 	Дата - дата начала обязательного применения ЕНП
//
Функция ДатаНачалаОбязательногоПримененияЕНП() Экспорт
	
	Возврат '20230101';
	
КонецФункции

//++ НЕ УТ
Функция ПроверитьИспользованиеЕНП(ПараметрыОбработчикаИлиПараметрыРасчета)

	ЭтоПараметрыОбработчика = ПараметрыОбработчикаИлиПараметрыРасчета.Свойство("ПараметрыРасчета");
	
	Если ЭтоПараметрыОбработчика Тогда
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета.ПараметрыРасчета;
	Иначе
		ПараметрыРасчета = ПараметрыОбработчикаИлиПараметрыРасчета;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("НачалоПериода") Тогда
		НачалоПериода = ПараметрыРасчета.НачалоПериода;
	Иначе
		НачалоПериода = НачалоМесяца(ПараметрыРасчета.ПериодРегистрации);
	КонецЕсли;
	
	Если НачалоПериода < ДатаНачалаОбязательногоПримененияЕНП() Тогда
		 ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
					ПараметрыОбработчикаИлиПараметрыРасчета,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Расчет ЕНС производится с %1';
							|en = 'UTA is calculated since %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
						РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаНачалаОбязательногоПримененияЕНП())));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
//-- НЕ УТ

#КонецОбласти

//-- Локализация

#КонецОбласти
