#Область ПрограммныйИнтерфейс

// Регистрирует значения оперативных показателей расчета зарплаты.
//
// Параметры:
//   Движения              - КоллекцияДвижений            - Движения документа.
//   Организация           - СправочникСсылка.Организации - Организация, выбранная в шапке документа.
//   ОперативныеПоказатели - ТаблицаЗначений              - Сведения о сдельном заработке сотрудников.
//     
//     Обязательные колонки:
//       * Дата       - Дата                                       - Период регистрации записи.
//       * Сотрудник  - СправочникСсылка.Сотрудники                - Сотрудник.
//       * Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты - Показатель.
//       * Значение   - Число                                      - Значение показателя.
//     
//     Необязательные колонки:
//       * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо.
//       * Сторно         - Булево                          - Истина, если данная запись является сторнирующей.
//       * СтатьяФинансирования             - СправочникСсылка.СтатьиФинансированияЗарплата      - Статья финансирования.
//       * СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете - Счет, субконто.
//       * ОтношениеКЕНВД                   - ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату  - Отношение к ЕНВД.
//       * Подразделение                    - СправочникСсылка.ПодразделенияОрганизаций          - Подразделение для
//                                                                                                 учета затрат.
//   ЗаписыватьДвижения - Булево - Если Истина, движения будут записаны.
//
Процедура ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, ОперативныеПоказатели, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ОперативныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем необходимость выявления физического лица.
	ЗаполнятьФизическоеЛицо = Ложь;
	Если ОперативныеПоказатели.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗаполнятьФизическоеЛицо = Истина;
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ОперативныеПоказатели, "Сотрудник", Истина);
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого Строка Из ОперативныеПоказатели Цикл
		Запись = Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Период = Строка.Дата;
		Запись.Организация = Организация;
		Если ЗаполнятьФизическоеЛицо Тогда
			Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		КонецЕсли;
		Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записать();
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует данные о сдельном заработке в движениях по регистру ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.
//
// Параметры:
//   Движения          - КоллекцияДвижений            - Движения документа.
//   Организация       - СправочникСсылка.Организации - Организация, выбранная в шапке документа.
//   СдельныйЗаработок - ТаблицаЗначений              - Сведения о сдельном заработке сотрудников.
//     
//     Обязательные колонки:
//       * Дата      - Дата                        - Период регистрации записи.
//       * Сотрудник - СправочникСсылка.Сотрудники - Сотрудник.
//       * Значение  - Число                       - Значение показателя.
//     
//     Необязательные колонки:
//       * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо.
//       * Сторно         - Булево                          - Истина, если данная запись является сторнирующей.
//       * СтатьяФинансирования             - СправочникСсылка.СтатьиФинансированияЗарплата      - Статья финансирования.
//       * СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете - Счет, субконто.
//       * ОтношениеКЕНВД                   - ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату  - Отношение к ЕНВД.
//       * Подразделение                    - СправочникСсылка.ПодразделенияОрганизаций          - Подразделение для
//                                                                                                 учета затрат.
//
Процедура ЗарегистрироватьСдельныйЗаработок(Движения, Организация, СдельныйЗаработок) Экспорт
	
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	СдельныйЗаработок.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	СдельныйЗаработок.ЗаполнитьЗначения(ПоказательСдельногоЗаработка, "Показатель");
	
	ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, СдельныйЗаработок);
	
КонецПроцедуры

// Добавляет новый показатель расчета зарплаты, 
// используемый для ввода оперативных данных.
//
// Параметры:
//  Идентификатор - Строка - Строковый идентификатор показателя. 
//                           Используется в формуле начислений, а также для идентификации показателя в исходном коде.
//                           Идентификатор, используемый в формуле начислений, может изменятся пользователем, 
//                           но из кода показатель всегда будет доступен при помощи метода 
//                           РасчетЗарплатыРасширенный.ОперативныйПоказательПоИдентификатору.
//  Представление        - Строка - Пользовательское представление показателя.
//  КраткоеПредставление - Строка - Пользовательское представление для заголовков колонок в документах ввода.
//                                  Необязательный, по умолчанию совпадает с Представление.
//  Валюта   - СправочникСсылка.Валюты - Валюта показателя. Необязательный, по умолчанию - валюта учета.
//  Точность - Число                   - Точность значения показателя. Необязательный, по умолчанию - целое число.
//
// Возвращаемое значение:
// - СправочникСсылка.ПоказателиРасчетаЗарплаты - ссылка на созданный показатель.
//
Функция СоздатьОперативныйПоказатель(Идентификатор, Представление, КраткоеПредставление = Неопределено, Валюта = Неопределено, Точность = Неопределено) Экспорт
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.СоздатьОперативныйПоказатель(
				Идентификатор, Представление, КраткоеПредставление, Валюта, Точность);
	
КонецФункции

// Получает оперативный показатель по служебному идентификатору.
//
// Параметры:
//	- Идентификатор - строка, служебный идентификатор показателя, 
//			например, используемый при создании показателя 
//			методом СоздатьОперативныйПоказатель.
//
// Возвращаемое значение:
// - СправочникСсылка.ПоказателиРасчетаЗарплаты - ссылка на созданный показатель.
//
Функция ОперативныйПоказательПоИдентификатору(Идентификатор) Экспорт
	Возврат ПоказательПоИдентификатору(Идентификатор);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf15-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf8a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыОтпусков);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf79-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.МестаРаботы);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf49-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПоказателиРасчетаЗарплаты);
	
КонецПроцедуры

#КонецОбласти

// Описание
// 
// Параметры:
// 	ПериодыНачислений - ТаблицЗначений - таблица периодов начислений с колонками:
// 		Регистратор - 
// 		НомерСтроки - Число -
// 		ПериодДействияНачало - Дата -
// 		ПериодДействияКонец - Дата - 
// 	ДатыРазбиения - ТаблицЗначений - таблица периодов начислений с колонками:
// 		Регистратор - 
// 		НомерСтроки - Число -
// 		Дата - Дата -
// 	
Процедура РазбитьПериодыНачислений(ПериодыНачислений, ДатыРазбиения) Экспорт
	ПериодыНачислений.Сортировать("Регистратор, НомерСтроки, ПериодДействияНачало", Новый СравнениеЗначений());
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДатыРазбиения, "Регистратор, НомерСтроки");
	СтруктураПоиска = Новый Структура("Регистратор, НомерСтроки");
	
	ПредыдущийПериод = Неопределено;
	ИндексТекущейСтроки = 0;
	Пока ИндексТекущейСтроки < ПериодыНачислений.Количество() Цикл
		ТекущийПериод = ПериодыНачислений[ИндексТекущейСтроки];
		Если ПредыдущийПериод = Неопределено
			Или ТекущийПериод.Регистратор <> ПредыдущийПериод.Регистратор
			Или ТекущийПериод.НомерСтроки <> ПредыдущийПериод.НомерСтроки Тогда
				
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущийПериод);
			ДатаРазбиенияПоКлючу = ДатыРазбиения.Скопировать(СтруктураПоиска, "Дата");
			ДатаРазбиенияПоКлючу.Сортировать("Дата");
			
			ИндексТекущейСтрокиТаблицыДат = 0;
		КонецЕсли;		
		
		Пока ИндексТекущейСтрокиТаблицыДат <= ДатаРазбиенияПоКлючу.Количество() - 1 Цикл
			ТекущаяСтрокаТаблицыДат = ДатаРазбиенияПоКлючу[ИндексТекущейСтрокиТаблицыДат];
			Если ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(ТекущаяСтрокаТаблицыДат.Дата), НачалоДня(ТекущийПериод.ПериодДействияНачало), КонецДня(ТекущийПериод.ПериодДействияКонец), Ложь) Тогда
				ИсходнаяДатаОкончания = ТекущийПериод.ПериодДействияКонец;
				ТекущийПериод.ПериодДействияКонец = НачалоДня(ТекущаяСтрокаТаблицыДат.Дата) - 1;
					
				СтрокаНовогоПериода = ОбщегоНазначенияБЗК.ВставитьСтрокуВТаблицу(
										ПериодыНачислений, 
										ИндексТекущейСтроки + 1,
										ТекущийПериод);
					
				СтрокаНовогоПериода.ПериодДействияНачало = НачалоДня(ТекущаяСтрокаТаблицыДат.Дата);
				СтрокаНовогоПериода.ПериодДействияКонец = ИсходнаяДатаОкончания;		
			ИначеЕсли ТекущаяСтрокаТаблицыДат.Дата > ТекущийПериод.ПериодДействияКонец Тогда 
				Прервать;
			КонецЕсли;	
			ИндексТекущейСтрокиТаблицыДат = ИндексТекущейСтрокиТаблицыДат + 1;		
		КонецЦикла;	
		ПредыдущийПериод = ТекущийПериод;
		ИндексТекущейСтроки  = ИндексТекущейСтроки + 1;
	КонецЦикла;	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Регистрация результатов расчета.

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			ДатаНачала - дата, начало начисления.
//			ДатаОкончания - дата, окончание начисления.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			НормаДней
//			НормаЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//			ГрафикРаботы - ссылка на график, примененный при расчете строки.
//			ГрафикРаботыНорма - ссылка на график, используемый для расчета нормы времени при неполном рабочем дне.
//			ВидУчетаВремени - ссылка на вид учета времени, примененный при расчете строки
//			ВремяВЧасах
//			ВремяВЦеломЗаПериод
//			ПериодРегистрацииВремени
//			ИдентификаторСтроки.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с начислениями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт	
	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	СтрокиЗаполнениеГрафикаРаботы = Новый Массив;
	МассивСотрудников = Новый Массив;
	МассивНачислений = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
			СотрудникиЗаполнениеФизическихЛиц.Добавить(Строка.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ГрафикРаботы) Тогда
			СтрокиЗаполнениеГрафикаРаботы.Добавить(Строка);
		КонецЕсли;
		МассивСотрудников.Добавить(Строка.Сотрудник);
		МассивНачислений.Добавить(Строка.Начисление);
	КонецЦикла;
	
	ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
	
	Если СтрокиЗаполнениеГрафикаРаботы.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(СтрокиЗаполнениеГрафикаРаботы, ПериодРегистрации);
	КонецЕсли;
	
	РегистраторНачислений = Движения.Начисления.Отбор.Регистратор.Значение;
	
	ОсновныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнойСотрудник");
	
	// Получаем реквизиты видов расчета.
	ИменаРеквизитов = 
		"ИспользованиеПериода,
		|ПериодРасчетаБазовыхНачислений,
		|КоличествоМесяцевБазовогоПериода,
		|СдвигБазовогоПериода";
	РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНачислений, ИменаРеквизитов);
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ДокументОснование) Тогда
			НоваяСтрока.ДокументОснование = РегистраторНачислений;
		КонецЕсли;
		НоваяСтрока.ГоловнойСотрудник = ОсновныеСотрудники[Строка.Сотрудник];
		Если НоваяСтрока.Результат = 0 Тогда
			НоваяСтрока.Результат = Строка.Сумма;
		КонецЕсли;
		НоваяСтрока.РезультатВТомЧислеЗаСчетФБ = 0;
		// Определяем месяц (период действия).
		Месяц = Строка.ПериодДействия;
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Месяц = НачалоМесяца(Строка.ДатаНачала);
		КонецЕсли;
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.БазовыйПериодНачало = НоваяСтрока.ПериодДействияНачало;
		НоваяСтрока.БазовыйПериодКонец = НоваяСтрока.ПериодДействияКонец;
		Если РеквизитыНачислений[Строка.Начисление].ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			Если НоваяСтрока.ПериодДействияНачало < НачалоМесяца Или НоваяСтрока.ПериодДействияНачало > КонецМесяца Тогда
				НоваяСтрока.ПериодДействияНачало = НачалоМесяца;
			КонецЕсли;
			Если НоваяСтрока.ПериодДействияКонец < НачалоМесяца Или НоваяСтрока.ПериодДействияКонец > КонецМесяца Тогда
				НоваяСтрока.ПериодДействияКонец = КонецМесяца;
			КонецЕсли;
		КонецЕсли;
		БазовыйПериодПереопределен = Ложь;
		// - Если базовый период переопределяется.
		Если ЕстьПолеВСтрокеКоллекции(Строка, "НачалоБазовогоПериода") И ЗначениеЗаполнено(Строка.НачалоБазовогоПериода) 
			И ЕстьПолеВСтрокеКоллекции(Строка, "ОкончаниеБазовогоПериода") И ЗначениеЗаполнено(Строка.ОкончаниеБазовогоПериода) Тогда
			БазовыйПериодПереопределен = Истина;
			НоваяСтрока.БазовыйПериодНачало = Строка.НачалоБазовогоПериода;
			НоваяСтрока.БазовыйПериодКонец = Строка.ОкончаниеБазовогоПериода;
		КонецЕсли;
		Если Строка.Сторно Тогда
			// Для сторно-записей не выполняем корректировку базового периода.
			Продолжить;
		КонецЕсли;
		// - если не переопределяется
		Если Не БазовыйПериодПереопределен Тогда
			РеквизитыНачисления = РеквизитыНачислений[Строка.Начисление];
			Если РеквизитыНачисления.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				БазовыйПериод = РасчетЗарплатыРасширенныйКлиентСервер.БазовыйПериодНачисления(
					Месяц, РеквизитыНачисления.ПериодРасчетаБазовыхНачислений, РеквизитыНачисления.КоличествоМесяцевБазовогоПериода, РеквизитыНачисления.СдвигБазовогоПериода);
				НоваяСтрока.БазовыйПериодНачало = БазовыйПериод.ДатаНачала;
				НоваяСтрока.БазовыйПериодКонец = БазовыйПериод.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Начисления.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		// Получим значение регистратора.
		Регистратор = Движения.ЗначенияПоказателейНачислений.Отбор.Регистратор.Значение;
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейНачислений.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейНачислений.Записать();
			Движения.ЗначенияПоказателейНачислений.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//
//		Удержания - таблица значений с колонками (необязательный)
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			ДокументОснование - (необязательный) ДокументСсылка.ИсполнительныйЛист
//			Получатель - (необязательный) СправочникСсылка.Контрагенты
//			ПлатежныйАгент - (необязательный) СправочникСсылка.Контрагенты
//			ДатаНачала
//			ДатаОкончания
//			Сумма
//			СуммаКорректировкиВыплаты.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с удержаниями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУдержаний(Движения, Отказ, Организация, ПериодРегистрации, Удержания, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = Движения.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.Организация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		НоваяСтрока.ВидРасчета = Строка.Удержание;
		НоваяСтрока.ПериодДействияНачало = НачалоМесяца(ПериодРегистрации);
		НоваяСтрока.ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
		НоваяСтрока.БазовыйПериодНачало = Строка.ДатаНачала;
		НоваяСтрока.БазовыйПериодКонец = Строка.ДатаОкончания;
	КонецЦикла;
	Движения.Удержания.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		Регистратор = Движения.ЗначенияПоказателейУдержаний.Отбор.Регистратор.Значение;
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейУдержаний.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Удержания.Записать();
		Движения.Удержания.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейУдержаний.Записать();
			Движения.ЗначенияПоказателейУдержаний.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Сохранение результатов распределения по территориям, условиям труда.
//
Процедура СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, ДокументСсылка, ТаблицаРаспределения) Экспорт
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		НоваяСтрока = Движения.РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		НоваяСтрока.РегистраторИзмерение = ДокументСсылка;
		Движения.РаспределениеПоТерриториямУсловиямТруда.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Сохранение результатов распределения начислений.
//
Процедура СформироватьДвиженияРаспределенияРезультатовНачислений(Движения, Отказ, ДокументСсылка, ТаблицаРаспределения) Экспорт
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		НоваяСтрока = Движения.РаспределениеРезультатовНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		НоваяСтрока.РегистраторИзмерение = ДокументСсылка;
		Движения.РаспределениеРезультатовНачислений.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистру подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		УдержанияДоПределаПоСотрудникам - таблица значений с колонками (необязательный).
//			ВидДвижения
//			ФизическоеЛицо
//			Удержание
//			ДокументОснование
//			Сумма
//
Процедура СформироватьДвиженияУдержанийДоПределаПоСотрудникам(Движения, Отказ, ПериодРегистрации, УдержанияДоПределаПоСотрудникам, ДанныеМежрасчетногоПериода = Истина) Экспорт 
	
	Для Каждого СтрокаУдержаний Из УдержанияДоПределаПоСотрудникам Цикл 
		Сумма = ?(ДанныеМежрасчетногоПериода, СтрокаУдержаний.СуммаМежрасчет, СтрокаУдержаний.Сумма);
		Если Сумма = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Движения.УдержанияДоПределаПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.Сумма = Сумма;
	КонецЦикла;
	
	Если Движения.УдержанияДоПределаПоСотрудникам.Количество() > 0 Тогда 
		Движения.УдержанияДоПределаПоСотрудникам.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу значений с данными для распределения удержаний физлица 
// пропорционально начислениям по всем местам работы.
//
// Параметры:
//		ФизическиеЛица   - Массив.
//  	МесяцНачисления  - Дата.
//		Организация      - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//		ТаблицаЗначений - ТаблицаЗначений - см РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию().
//
Функция БазаУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	БазаПоУмолчанию = РасчетЗарплаты.НоваяТаблицаБазаУдержанийПоУмолчанию();

	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат БазаПоУмолчанию;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 			= НачалоМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= КонецМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ТерриторияВыполненияРаботВОрганизации,ГоловнойСотрудник";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО (СотрудникиОрганизации.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|	И СотрудникиОрганизации.ФизическоеЛицо ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Результаты = Запрос.ВыполнитьПакет();
	Если Результаты[1].Пустой() Тогда
		ЗарплатаКадры.ВыгрузитьРезультатВТаблицуЗначений(Результаты[0], БазаПоУмолчанию);
		Возврат БазаПоУмолчанию;
	Иначе
		
		Выборка = Результаты[1].Выбрать();
		
		ФизическиеЛицаБезБазы = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ФизическиеЛицаБезБазы.Добавить(Выборка.ФизическоеЛицо);
		КонецЦикла;
		
		ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц = ФизическиеЛицаБезБазы;
		КадровыйУчет.СоздатьВТПоследниеРаботавшиеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, Истина,
			ФизическиеЛицаБезБазы, ПараметрыПолученияСотрудниковОрганизаций, "ВТПоследниеСотрудники");
		
		Запрос. Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
		|ИЗ
		|	ВТПоследниеСотрудники КАК КадровыеДанныеСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ГоловнойСотрудник,
		|	КадровыеДанныеСотрудников.Подразделение,
		|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
		
		ЗарплатаКадры.ВыгрузитьРезультатВТаблицуЗначений(Запрос.Выполнить(), БазаПоУмолчанию);
		Возврат БазаПоУмолчанию;
		
	КонецЕсли;
	
КонецФункции

// Формирует движения по Корректировкам выплаты
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - булево - признак отказа от заполнения движений.
//		Организация - СправочникСсылка.Организации -
//		ПериодРегистрации - реквизит регистратора.
//		ПорядокВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты - Межрасчет / Зарплата / Аванс
//		ДанныеДляПроведения - структура - структура данных, используемая при проведении документов
//				обязательные поля
//					МенеджерВременныхТаблиц с вр.таблицами ВТНачисления, ВТФизическиеЛица.
//					КорректировкиВыплаты - таблица значений с данными корректировок выплаты
//		Записывать - булево - признак того, надо ли записывать движения сразу, или они будут записаны позже.
//		РегистрироватьСуммыКорректировкиВыплаты - булево - признак того, надо ли писать движения по исчисленным налогам,
//					если не указан будет определяться по значению параметра ПорядокВыплаты: истине соответствует Межрасчет.
//
Процедура СформироватьДвиженияКорректировкиВыплатыПоВременнойТаблицеНачислений(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, ДанныеДляПроведения, Записывать = Ложь, РегистрироватьСуммыКорректировкиВыплаты = Неопределено) Экспорт 
	
	Если РегистрироватьСуммыКорректировкиВыплаты = Неопределено Тогда 
		РегистрироватьСуммыКорректировкиВыплаты = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	Если РегистрироватьСуммыКорректировкиВыплаты Тогда
		
		// Учет корректировок выплаты в "зарплате".
		ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
		ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
		ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
		ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= ПериодРегистрации;
		ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= ПорядокВыплаты;
		ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛКЗачетуВозврату(ДанныеДляПроведенияУчетЗарплаты, Отказ, ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам, ДанныеДляПроведения.НДФЛПоСотрудникам, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//
//		Удержания - таблица значений с колонками (необязательный)
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			ДокументОснование - (необязательный) ОпределяемыеТипы.ОснованиеУдержания
//			ДатаНачала
//			ДатаОкончания
//			Сумма.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУдержанийПоСотрудникамАвансом(Движения, Отказ, Организация, ПериодРегистрации, Удержания, ЗаписыватьДвижения = Ложь) Экспорт
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = Движения.УдержанияПоСотрудникамАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
	КонецЦикла;
	Движения.УдержанияПоСотрудникамАвансом.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.УдержанияПоСотрудникамАвансом.Записать();
		Движения.УдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Плановые начисления и удержания.

// Заполняет движения регистров сведений:
//		ПлановыеНачисления,
//		ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников,
//		ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.
//
// Параметры:
//
//	РегистраторОбъект	- документ объект.
//
//	Движения			- коллекция движений, в которой необходимо заполнить движения.
//
//	СтруктураДанных		- Структура, содержащая ключи:
//
//		* ДанныеОПлановыхНачислениях (необязательный) - таблица значений с полями:
//			* ДатаСобытия				- Дата
//			* ДействуетДо				- Дата, (не обязательно)
//			* Сотрудник				- СправочникСсылка.Сотрудники
//			* Начисление				- ПланВидовРасчетаСсылка.Начисления
//			* Используется			- булево
//			* ИспользуетсяПоОкончании	- булево, обязателен если в коллекции есть поле ДействуетДо.
//
//		* ЗначенияПоказателей (необязательный) - таблица значений с полями:
//			* ДатаСобытия		- Дата
//			* ДействуетДо		- Дата, (не обязательно).
//			* Организация		- СправочникСсылка.Организации
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сотрудник		- СправочникСсылка.Сотрудники
//			* Показатель		- СправочникСсылка.ПоказателиРасчетаЗарплаты
//			* Значение		- Число
//
//		* ПрименениеДополнительныхПоказателей (необязательный) - таблица значений с полями:
//			* ДатаСобытия		- Дата
//			* ДействуетДо		- Дата, (не обязательно).
//			* Организация		- СправочникСсылка.Организации
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сотрудник		- СправочникСсылка.Сотрудники
//			* Показатель		- СправочникСсылка.ПоказателиРасчетаЗарплаты
//			* Применение		- Булево
//
//	ФормироватьЗаписиТолькоДляИзменений - Булево, если Истина, то производится чтение текущих значений
//											и производится проверка необходимости формирования записей.
//
//	ЗаполнятьНаборЗаписей				- Булево, для служебного использования
//
Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.Свойство("ДанныеОПлановыхНачислениях") Тогда
		
		ПлановыеНачисленияСотрудников.УстановитьРассчитанныеДанныеФОТ(РегистраторОбъект.Ссылка, Движения, СтруктураДанных.ДанныеОПлановыхНачислениях);
		
		РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, Ложь);
		
		ДанныеОПлановыхНачислениях = СтруктураДанных.ДанныеОПлановыхНачислениях;
		
		ИспользуютсяВозвратныеСобытия = ДанныеОПлановыхНачислениях.Колонки.Найти("ДействуетДо") <> Неопределено;
		ЕстьРеквизитХарактерНачисления = ДанныеОПлановыхНачислениях.Колонки.Найти("ХарактерНачисления") <> Неопределено;
		ЕстьРеквизитДействие = ДанныеОПлановыхНачислениях.Колонки.Найти("Действие") <> Неопределено;
		
		Если ФормироватьЗаписиТолькоДляИзменений Тогда
			
			ВремяРегистрацииДокумента = Неопределено;
			Движения.ПлановыеНачисления.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
			
			Если ВремяРегистрацииДокумента = Неопределено Тогда 
				ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(РегистраторОбъект.Ссылка, ДанныеОПлановыхНачислениях);
			КонецЕсли;
			
			// Сбор сведений о начислениях размер вклада в ФОТ которых вводится руками
			ТаблицаОтборов = Новый ТаблицаЗначений;
			ТаблицаОтборов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаОтборов.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
			ТаблицаОтборов.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
			
			Для каждого СтрокаПлановыхНачислений Из ДанныеОПлановыхНачислениях Цикл
				НоваяСтрокаПрежних = ТаблицаОтборов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПрежних, СтрокаПлановыхНачислений);
				
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПлановыхНачислений.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					НоваяСтрокаПрежних.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПлановыхНачислений.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаОтборов.Количество() > 0 Тогда
				
				// Получение прежних значений размеров вклада в ФОТ начислений
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
				ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторОбъект.Ссылка);
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
					"ПлановыеНачисления",
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтборов),
					ПараметрыПостроения);
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ПлановыеНачисления.Период,
					|	ПлановыеНачисления.ПериодЗаписи,
					|	ПлановыеНачисления.Сотрудник,
					|	ПлановыеНачисления.Начисление,
					|	ПлановыеНачисления.ДокументОснование,
					|	ПлановыеНачисления.Используется,
					|	ПлановыеНачисления.Размер,
					|	ПлановыеНачисления.ПериодВозвратногоСобытия
					|ИЗ
					|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления";
				
				ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
				ПредыдущиеЗначения.Индексы.Добавить("Сотрудник,Начисление,ДокументОснование");
			КонецЕсли;
		КонецЕсли;
		
		// Восстановительные движения пишем двумя записями
		// причем нужно получать срез последних для получения значения "по окончании".
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей = Движения.ПлановыеНачисления.ВыгрузитьКолонки();
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПериодСреза", Новый ОписаниеТипов("Дата"));
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПроверкаНеобходимостиВосстановления", Новый ОписаниеТипов("Булево"));
		ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("СтрокаДвижений", Новый ОписаниеТипов());
		
		ХарактерНачисления = Неопределено;
		Действие = Неопределено;
		
		// Формирование движений
		Для Каждого СтрокаПлановыхНачислений Из ДанныеОПлановыхНачислениях Цикл
			
			Если ЕстьРеквизитХарактерНачисления Тогда
				ХарактерНачисления = СтрокаПлановыхНачислений.ХарактерНачисления;
			КонецЕсли;
			
			Если ЕстьРеквизитДействие Тогда
				Действие = СтрокаПлановыхНачислений.Действие;
			КонецЕсли;
			
			ПособиеПоУходуЗаРебенком = Ложь;
			СтрокаПредыдущихЗначений = Неопределено;
			Если ФормироватьЗаписиТолькоДляИзменений Тогда
				
				СтруктураПоиска = Новый Структура("Сотрудник,Начисление,ДокументОснование");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлановыхНачислений);
				
				СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
				Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
					
					ДобавлятьЗапись = Ложь;
					
					СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
					
					ИнфоОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаПлановыхНачислений.Начисление);
					РазмерФОТСохраняется = Не ИнфоОНачислении.ФОТНеРедактируется Или Не ИнфоОНачислении.Рассчитывается;
					
					ПособиеПоУходуЗаРебенком = ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет
						Или ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим
						Или ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет;
						
					Если ИспользуютсяВозвратныеСобытия
						И Не ПособиеПоУходуЗаРебенком
						И Не ЗначениеЗаполнено(СтрокаПлановыхНачислений.ДействуетДо)
						И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)Тогда
						
						СтрокаПлановыхНачислений.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
					КонецЕсли;
					
					Если РазмерФОТСохраняется И СтрокаПлановыхНачислений.Размер <> СтрокаПредыдущихЗначений.Размер Тогда
						ДобавлятьЗапись = Истина;
					КонецЕсли;
					
					Если Не ДобавлятьЗапись Тогда
						Если СтрокаПлановыхНачислений.Используется <> СтрокаПредыдущихЗначений.Используется Тогда
							ДобавлятьЗапись = Истина;
						ИначеЕсли ИспользуютсяВозвратныеСобытия
							И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
							И (Не ЗначениеЗаполнено(СтрокаПлановыхНачислений.ДействуетДо)
								Или СтрокаПлановыхНачислений.ДействуетДо > СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
							И (ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное 
								Или Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить) Тогда
							
							ДобавлятьЗапись = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ДобавлятьЗапись Тогда
						Если ПособиеПоУходуЗаРебенком Тогда
							Если ИспользуютсяВозвратныеСобытия
								И СтрокаПлановыхНачислений.ДействуетДо <> СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия Тогда
								ДобавлятьЗапись = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ДобавлятьЗапись Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Движения.ПлановыеНачисления.Записывать = Истина;
			
			НоваяСтрока = Движения.ПлановыеНачисления.Добавить();
			НоваяСтрока.Период = СтрокаПлановыхНачислений.ДатаСобытия;
			НоваяСтрока.Сотрудник = СтрокаПлановыхНачислений.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = СтрокаПлановыхНачислений.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = СтрокаПлановыхНачислений.ГоловнаяОрганизация;
			НоваяСтрока.Начисление = СтрокаПлановыхНачислений.Начисление;
			НоваяСтрока.ДокументОснование = СтрокаПлановыхНачислений.ДокументОснование;
			НоваяСтрока.Используется = СтрокаПлановыхНачислений.Используется;
			
			// необязательные колонки
			Если ДанныеОПлановыхНачислениях.Колонки.Найти("Размер") <> Неопределено Тогда
				НоваяСтрока.Размер = СтрокаПлановыхНачислений.Размер;
			КонецЕсли;
			
			Если ИспользуютсяВозвратныеСобытия Тогда
				НоваяСтрока.ДействуетДо = СтрокаПлановыхНачислений.ДействуетДо;
				Если ФормироватьЗаписиТолькоДляИзменений Тогда
					ДобавитьЗаписьВосстановленияСобытияПлановыхНачислений(НоваяСтрока, СтрокаПредыдущихЗначений, СтрокаПлановыхНачислений, ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, ПособиеПоУходуЗаРебенком);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СформироватьЗаписиВосстановленияСобытияПлановыхНачислений(ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, РегистраторОбъект.Ссылка);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(
			Движения, СтруктураДанных.ЗначенияПоказателей, , ФормироватьЗаписиТолькоДляИзменений);
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ПрименениеДополнительныхПоказателей") Тогда
		СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(
			Движения, СтруктураДанных.ПрименениеДополнительныхПоказателей, ФормироватьЗаписиТолькоДляИзменений);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения регистра ПрименениеПлановыхНачислений.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПримененииПлановыхНачислений - таблица значений 
//		см. функцию ПустаяТаблицаРегистрацииПримененияПлановыхНачислений.
// 		
Процедура СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеОПримененииПлановыхНачислений) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПримененииПлановыхНачислений Цикл
		НоваяСтрока = Движения.ПрименениеПлановыхНачислений.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.Применение = СтрокаДанных.Применение;
		Движения.ПрименениеПлановыхНачислений.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения плановыми удержаниями (см. процедуру
// РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхУдержаний).
//
Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных);
	
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, СтруктураДанных.ЗначенияПоказателей, Истина);
	КонецЕсли; 
	
	Если СтруктураДанных.Свойство("РабочиеМестаУдержаний") Тогда
		СформироватьДвиженияРабочихМестУдержаний(Движения, СтруктураДанных.РабочиеМестаУдержаний);
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет набор записей регистра периодических значений показателей сотрудников.
//
Процедура СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, ЗначенияПоказателей, РегистрироватьПоФизическомуЛицу = Ложь, ФормироватьЗаписиТолькоДляИзменяемыхЗначений = Ложь) Экспорт
	
	ИспользуютсяВозвратныеСобытия = ЗначенияПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	ЗаполнятьДокументОснование = ЗначенияПоказателей.Колонки.Найти("ДокументОснование") <> Неопределено;
	
	ЕстьРеквизитХарактерНачисления = ЗначенияПоказателей.Колонки.Найти("ХарактерНачисления") <> Неопределено;
	ЕстьРеквизитДействие = ЗначенияПоказателей.Колонки.Найти("Действие") <> Неопределено;
	
	Регистратор = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
	
	Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ЗначенияПоказателей);
		КонецЕсли;
		
		ИзмеренияОтборов = "Период,Показатель";
		
		ТаблицаОтборов = Новый ТаблицаЗначений;
		ТаблицаОтборов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаОтборов.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		
		Если РегистрироватьПоФизическомуЛицу Тогда
			ИзмеренияОтборов = ИзмеренияОтборов + ",ФизическоеЛицо";
			ТаблицаОтборов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Иначе
			ИзмеренияОтборов = ИзмеренияОтборов + ",Сотрудник";
			ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		КонецЕсли;
		
		Если ЗаполнятьДокументОснование Тогда
			ИзмеренияОтборов = ИзмеренияОтборов + ",ДокументОснование";
			ТаблицаОтборов.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
		КонецЕсли;
		
		Для Каждого СтрокаЗначенийПоказателей Из ЗначенияПоказателей Цикл
			НоваяСтрокаТаблицыОтборов = ТаблицаОтборов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОтборов, СтрокаЗначенийПоказателей);
			
			Если Не РегистрироватьПоФизическомуЛицу Тогда
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаЗначенийПоказателей.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					НоваяСтрокаТаблицыОтборов.Период = ВремяРегистрацииСотрудников.Получить(СтрокаЗначенийПоказателей.Сотрудник);
				КонецЕсли;
			Иначе
				НоваяСтрокаТаблицыОтборов.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтборов, ИзмеренияОтборов);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Значения.Период,
			|	Значения.ПериодЗаписи,
			|	Значения.Организация,
			|	Значения.ФизическоеЛицо,
			|	Значения.ДокументОснование,
			|	Значения.Сотрудник,
			|	Значения.Показатель,
			|	Значения.Значение,
			|	Значения.ПериодВозвратногоСобытия
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК Значения";
		
		ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПредыдущиеЗначения, ИзмеренияОтборов);
	КонецЕсли;
	
	// Восстановительные движения пишем двумя записями
	// причем нужно получать срез последних для получения значения "по окончании".
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ВыгрузитьКолонки();
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПериодСреза", Новый ОписаниеТипов("Дата"));
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("ПроверкаНеобходимостиВосстановления", Новый ОписаниеТипов("Булево"));
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Колонки.Добавить("СтрокаДвижений", Новый ОписаниеТипов());
	
	ХарактерНачисления = Неопределено;
	
	Для Каждого СтрокаЗначенийПоказателей Из ЗначенияПоказателей Цикл
		
		СтрокаПредыдущихЗначений = Неопределено;
		Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
			
			СтруктураПоиска = Новый Структура(ИзмеренияОтборов);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЗначенийПоказателей);
			
			Если Не РегистрироватьПоФизическомуЛицу Тогда
				ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаЗначенийПоказателей.ДатаСобытия);
				Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
					СтруктураПоиска.Период = ВремяРегистрацииСотрудников.Получить(СтрокаЗначенийПоказателей.Сотрудник);
				КонецЕсли;
			Иначе
				СтруктураПоиска.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
			КонецЕсли;
			
			Если ЕстьРеквизитХарактерНачисления Тогда
				ХарактерНачисления = СтрокаЗначенийПоказателей.ХарактерНачисления;
			КонецЕсли;
			
			Если ЕстьРеквизитДействие Тогда
				Действие = СтрокаЗначенийПоказателей.Действие;
			КонецЕсли;
			
			ДобавлятьЗапись = Ложь;
			
			СтрокиПредыдущихЗначений = ПредыдущиеЗначения.Скопировать(СтруктураПоиска);
			СтрокиПредыдущихЗначений.Сортировать("ПериодЗаписи УБЫВ");
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				
				СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
				Если СтрокаЗначенийПоказателей.Значение <> СтрокаПредыдущихЗначений.Значение
					Или СтрокаЗначенийПоказателей.Организация <> СтрокаПредыдущихЗначений.Организация Тогда
					
					ДобавлятьЗапись = Истина;
				ИначеЕсли ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
					И (Не ЗначениеЗаполнено(СтрокаЗначенийПоказателей.ДействуетДо)
						Или СтрокаЗначенийПоказателей.ДействуетДо > СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
					И (ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное
						Или Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить) Тогда
						
					ДобавлятьЗапись = Истина;
				КонецЕсли;
				
				Если Не ДобавлятьЗапись Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаЗначенийПоказателей.ДатаСобытия;
		НоваяСтрока.Организация = СтрокаЗначенийПоказателей.Организация;
		НоваяСтрока.ФизическоеЛицо = СтрокаЗначенийПоказателей.ФизическоеЛицо;
		
		Если Не РегистрироватьПоФизическомуЛицу Тогда
			// Не заполняем сотрудника при регистрации показателей физического лица, 
			// в том числе для поддержки для контроля уникальности.
			НоваяСтрока.Сотрудник = СтрокаЗначенийПоказателей.Сотрудник;
		КонецЕсли;
		
		НоваяСтрока.Показатель = СтрокаЗначенийПоказателей.Показатель;
		НоваяСтрока.Значение = СтрокаЗначенийПоказателей.Значение;
		
		// необязательные колонки
		Если ЗаполнятьДокументОснование Тогда
			НоваяСтрока.ДокументОснование = СтрокаЗначенийПоказателей.ДокументОснование;
		КонецЕсли;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			НоваяСтрока.ДействуетДо = СтрокаЗначенийПоказателей.ДействуетДо;
			
			Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
				ДобавитьЗаписьВосстановленияСобытияЗначенийПоказателей(НоваяСтрока, СтрокаПредыдущихЗначений, СтрокаЗначенийПоказателей, ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьЗаписиВосстановленияСобытияЗначенийПоказателей(ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, Регистратор);
	
КонецПроцедуры

// Заполняет движения регистра РабочиеМестаУдержаний.
//
// Параметры:
//   Движения - коллекция движений, в которой необходимо заполнить движения.
//   РабочиеМестаУдержаний - ТаблицаЗначений - таблица значений с колонками:
//     * ФизическоеЛицо 	- СправочникСсылка.ФизическиеЛица 
//     * ДокументОснование 	- ДокументСсылка 
//     * РабочееМесто 		- СправочникСсылка.Сотрудники.
//
Процедура СформироватьДвиженияРабочихМестУдержаний(Движения, РабочиеМестаУдержаний) Экспорт
	
	Если РабочиеМестаУдержаний.Количество() > 0 Тогда
		Движения.РабочиеМестаУдержаний.Записывать = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РабочиеМестаУдержаний Цикл
		
		НоваяСтрока = Движения.РабочиеМестаУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;	
			
КонецПроцедуры

Процедура СформироватьДвиженияПредельныхСуммУдержанийСотрудников(Движения, ПредельныеСуммыУдержанийСотрудников) Экспорт 
	
	Для Каждого СтрокаТаблицы Из ПредельныеСуммыУдержанийСотрудников Цикл
		НоваяСтрока = Движения.ПредельныеСуммыУдержанийСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Движения.ПредельныеСуммыУдержанийСотрудников.Записывать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

// Заполняет набор записей регистра применения дополнительных периодических показателей сотрудников.
//
Процедура СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(Движения, ПрименениеДополнительныхПоказателей, ФормироватьЗаписиТолькоДляИзменяемыхПрименений = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПрименениеДополнительныхПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений Тогда
		
		Регистратор = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
		
		// Дополняем таблицу полем ПрименениеПоОкончании.
		КлючевыеИзмерения = "Период,Организация,Показатель,Сотрудник";
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ПрименениеДополнительныхПоказателей);
		КонецЕсли;
		
		ОтборПоказателей = Новый ТаблицаЗначений;
		ОтборПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ОтборПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ОтборПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ОтборПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		
		Для Каждого СтрокаПримененияДополнительныхПоказателей Из ПрименениеДополнительныхПоказателей Цикл
			
			НоваяСтрокаОтбораПоказателей = ОтборПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтбораПоказателей, СтрокаПримененияДополнительныхПоказателей);
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПримененияДополнительныхПоказателей.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				НоваяСтрокаОтбораПоказателей.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПримененияДополнительныхПоказателей.Сотрудник);
			Иначе
				НоваяСтрокаОтбораПоказателей.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОтборПоказателей);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПрименениеПоказателей.Период,
			|	ПрименениеПоказателей.Организация,
			|	ПрименениеПоказателей.Сотрудник,
			|	ПрименениеПоказателей.ФизическоеЛицо,
			|	ПрименениеПоказателей.Показатель,
			|	ПрименениеПоказателей.Применение
			|ИЗ
			|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеПоказателей";
		
		ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого СтрокаПримененияДополнительныхПоказателей Из ПрименениеДополнительныхПоказателей Цикл
		СтрокаПредыдущихЗначений = Неопределено;
		Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений Тогда
			
			СтруктураПоиска = Новый Структура("Период,Организация,Сотрудник,Показатель");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПримененияДополнительныхПоказателей);
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПримененияДополнительныхПоказателей.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтруктураПоиска.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПримененияДополнительныхПоказателей.Сотрудник);
			Иначе
				СтруктураПоиска.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
			КонецЕсли;
			
			СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				
				СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
				Если СтрокаПримененияДополнительныхПоказателей.Применение = СтрокаПредыдущихЗначений.Применение Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаПримененияДополнительныхПоказателей.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаПримененияДополнительныхПоказателей.Сотрудник;
		НоваяСтрока.Организация = СтрокаПримененияДополнительныхПоказателей.Организация;
		НоваяСтрока.ФизическоеЛицо = СтрокаПримененияДополнительныхПоказателей.ФизическоеЛицо;
		НоваяСтрока.Показатель = СтрокаПримененияДополнительныхПоказателей.Показатель;
		НоваяСтрока.Применение = СтрокаПримененияДополнительныхПоказателей.Применение;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			НоваяСтрока.ДействуетДо = СтрокаПримененияДополнительныхПоказателей.ДействуетДо;
			НоваяСтрока.ПрименениеПоОкончании =
				?(СтрокаПредыдущихЗначений = Неопределено, Неопределено, СтрокаПредыдущихЗначений.Применение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания.
// Добавляет записи об их прекращении на указанную дату.
//
// Параметры:
//	Движения
//	Сотрудник - сотрудник, удержания которого прекращаются.
//	ДатаПрекращения - дата, после которой не действует ни одного удержания.
//	Организация
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеНачисленияУдержания(Движения, Сотрудник, ДатаПрекращения, Организация, ПрекращатьУдержания = Истина) Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаПрекращения;
	
	ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, ИсходныеДанные);
	
	Если ПрекращатьУдержания Тогда
		
		ИсходныеДанные.Колонки.Удалить("Сотрудник");
		
		// Добавляем и заполняем колонки для удержаний.
		ИсходныеДанные.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ИсходныеДанные[0].Период = НачалоДня(НачалоДня(ДатаПрекращения) - 1);
		ИсходныеДанные[0].ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		ИсходныеДанные[0].Организация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
		
		ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, ИсходныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату.
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//
Процедура ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеНачисления.Отбор.Регистратор.Значение;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ДействующиеНачисления = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Новый МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиПериоды),
		ПараметрыПостроения);
		
	Для Каждого СтрокаТаблицы Из ДействующиеНачисления Цикл
		
		Если СтрокаТаблицы.Используется Тогда
			СтрокаДвижений = Движения.ПлановыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
			СтрокаДвижений.Используется = Ложь;
			
			Движения.ПлановыеНачисления.Записывать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ПрекратитьДействиеОтменяемыхПоказателейПлановыхНачислений(Движения, ДействующиеНачисления);

КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату.
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//
Процедура ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	// Плановые удержания
	ДействующиеУдержания = ДействующиеПлановыеУдержания(СотрудникиПериоды, Регистратор);
	Для Каждого СтрокаТаблицы Из ДействующиеУдержания Цикл
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = 			КонецДня(СтрокаТаблицы.Период) + 1;
		СтрокаДвижений.Организация = 		СтрокаТаблицы.Организация;
		СтрокаДвижений.ФизическоеЛицо = 	СтрокаТаблицы.ФизическоеЛицо;
		СтрокаДвижений.Удержание = 			СтрокаТаблицы.Удержание;
		СтрокаДвижений.ДокументОснование = 	СтрокаТаблицы.ДокументОснование;
		СтрокаДвижений.Используется = 		Ложь;
		Движения.ПлановыеУдержания.Записывать = Истина;
	КонецЦикла;

КонецПроцедуры

// Заполняет движения плановыми выплатами (авансы).
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПлановыхВыплатах - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Аванс
// 		
Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Регистратор = Движения.ПлановыеАвансы.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДанныеОПлановыхВыплатах.Колонки.Найти("ДействуетДо") <> Неопределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПлановыеАвансы.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = СтрокаДанных.ГоловнаяОрганизация;
		НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.СпособРасчетаАванса;
		НоваяСтрока.Аванс = СтрокаДанных.Аванс;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			НоваяСтрока.ДействуетДо = НачалоМесяца(СтрокаДанных.ДействуетДо);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конструирует объект для хранения данных для проведения плановых удержаний.
//
// Структура содержит
//		ДанныеПлановыхУдержаний - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			Удержание - ПланВидовРасчетаСсылка.Удержания
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Используется - Булево
//
//		ЗначенияПоказателей - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//			Значение - Число(15,3) значение показателя.
//
Функция СоздатьДанныеДляРегистрацииПлановыхУдержаний() Экспорт
	
	ПоляСтруктуры =
	"ДанныеПлановыхУдержаний,
	|РабочиеМестаУдержаний,
	|ЗначенияПоказателей,
	|ПредельныеСуммыУдержанийСотрудников";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения плановых удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержаний(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ДокументУдержания.Ссылка = &Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК Период,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.РабочееМесто,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|	И ДокументУдержания.Ссылка.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.РабочиеМестаУдержаний = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения плановых удержаний для многосотрудникового документа.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержанийСпискаСотрудников(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Ссылка.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ЗначенияПоказателей.ИдентификаторСтрокиВидаРасчета = ДокументУдержания.ИдентификаторСтрокиВидаРасчета)
	|			И (ДокументУдержания.Ссылка = &Документ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК Период,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.РабочееМесто
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|	И ДокументУдержания.Ссылка.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаУдержанийДокумента", ИмяДокумента + ".Удержания");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.РабочиеМестаУдержаний = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

Функция НоваяТаблицаПолучателиУдержаний() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо",  Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Удержание",  Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Таблица.Колонки.Добавить("Контрагент",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Возврат Таблица;

КонецФункции 

// Добавляет запись о получателе удержания по документу основания.
//
Процедура ЗарегистрироватьПолучателяУдержания(ПолучателиУдержаний, Организация, ДокументОснование) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПолучателиУдержаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОснование);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Для каждого СтрокаТаблицы Из ПолучателиУдержаний Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) И ЗначениеЗаполнено(СтрокаТаблицы.Удержание) И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицы);
				НоваяЗапись.ДокументОснование = ДокументОснование;
				НоваяЗапись.Организация = Организация;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Регистрирует значения разовых показателей расчета зарплаты.
//
// Параметры:
//	Движения
//	Организация
//	РазовыеПоказатели - таблица значений с колонками.
//		ПериодДействия
//		Сотрудник - СправочникСсылка.Сотрудники
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//		Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//		Значение - число
//	ЗаписыватьДвижения - булево, если Истина, движения будут записаны.
//
Процедура ЗарегистрироватьЗначенияРазовыхПоказателейСотрудников(Движения, Организация, РазовыеПоказатели, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если РазовыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем необходимость выявления физического лица.
	ЗаполнятьФизическоеЛицо = Ложь;
	Если РазовыеПоказатели.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗаполнятьФизическоеЛицо = Истина;
	КонецЕсли;
	
	Если ЗаполнятьФизическоеЛицо Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(РазовыеПоказатели, "Сотрудник", Истина);
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого Строка Из РазовыеПоказатели Цикл
		Запись = Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Организация = Организация;
		Если ЗаполнятьФизическоеЛицо Тогда
			Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		КонецЕсли;
		Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
			Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записать();
			Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру с отдельными коллекциями начислений.
//
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//		Период
//		Сотрудник
// Возвращаемое значение - структура, см. ОписаниеДанныхДляЗаполненияТаблицДокумента().
//		
Функция ДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень = Ложь) Экспорт
	
	ДанныеНачислений = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	ДанныеНачислений.Начисления = ВсеДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПослеПолученияНачисленийДляЗаполненияТаблицДокумента(ДанныеНачислений);
	КонецЕсли;
	
	Возврат ДанныеНачислений;
	
КонецФункции

// Получает таблицу действующих плановых начислений.
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//		Период
//		Сотрудник
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Начисление,
//	Размер
//		
Функция ВсеДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроенияФОТ);
		
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.ФизическоеЛицо,
		|	ПлановыеНачисления.ГоловнаяОрганизация,
		|	ПлановыеНачисления.ГоловнаяОрганизация КАК Организация,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение и пересчет в расчетных документах.

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение,
		|ДокументСсылка, 
		|Сотрудники, 
		|ОкончаниеПериода, 
		|РежимНачисления, 
		|ПорядокВыплаты, 
		|ДатаВыплаты, 
		|СотрудникиПериодДействияПерерасчет, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|МногопотоковоеЗаполнение,
		|СотрудникиДополнительныйДоход,
		|АдресХранилища,
		|ОкончательныйРасчетНДФЛ,
		|ПроверятьРегистрациюПроцентаЕНВД");
		                           
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.МногопотоковоеЗаполнение = Ложь;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = Ложь;
	ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриСозданииДополнительныхПараметровДанныхДляНачисленияЗарплаты(ДополнительныеПараметры);
	КонецЕсли;

	Возврат ДополнительныеПараметры;
	
КонецФункции

// Получает данные для заполнения табличных частей документа, выполняющего начисление зарплаты.
//
Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт	
	
	ЗамерПодготовкаДанныхЗаполненияДокумента = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	Подразделение = ДополнительныеПараметры.Подразделение;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	РежимНачисления = ДополнительныеПараметры.РежимНачисления;
	ПорядокВыплаты = ДополнительныеПараметры.ПорядокВыплаты;
	ДатаВыплаты = ДополнительныеПараметры.ДатаВыплаты;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	МногопотоковоеЗаполнение = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	СотрудникиДополнительныйДоход = ДополнительныеПараметры.СотрудникиДополнительныйДоход;
	АдресХранилища = ДополнительныеПараметры.АдресХранилища;
	ОкончательныйРасчетНДФЛ = ДополнительныеПараметры.ОкончательныйРасчетНДФЛ;
	ПроверятьРегистрациюПроцентаЕНВД = ДополнительныеПараметры.ПроверятьРегистрациюПроцентаЕНВД;
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	ДоначислениеПерерасчетЗарплатыОтдельнымДокументом = НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ЗаполнятьПерерасчеты = ОписаниеДокумента.РежимДоначисления Или Не ДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	СотрудникиНеудовлетворенныеДенежнымДовольствием = Неопределено;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	РасчетПервойПоловиныМесяца = (РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца);
	
	// Флаги выполняемых действия при заполнении
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	ЕстьЛьготыПерерасчет = ОписаниеДокумента.ЛьготыПерерасчетИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы Или ЕстьЛьготыПерерасчет;
	РассчитыватьУдержания = ЕстьУдержания Или ЕстьУдержанияПерерасчет;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;
	
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;
	
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыСотрудников(ИменаВТ, МенеджерВременныхТаблиц, Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
	КонецЕсли;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Сотрудники = Неопределено Тогда
		ПараметрыСотрудников = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
		ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = ЗаполнятьНачисленияПоТрудовымДоговорам;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда = Не РасчетПервойПоловиныМесяца;
		ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
		ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
		ПараметрыСотрудников.РежимДоначисления = ОписаниеДокумента.РежимДоначисления;
		ПараметрыСотрудников.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
		ПараметрыСотрудников.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыСотрудников.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
		
		Сотрудники = СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников);
		
		ИменаВТ.Добавить("ВТВсеСотрудникиОрганизации");
		
		// Для сотрудников, уже не работающих, но, возможно, имевших доход в выбранном периоде.
		Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда
			СотрудникиДополнительныйДоход = СотрудникиДополнительныйДоход(
				Организация,
				Подразделение,
				МесяцНачисления,
				ПараметрыСотрудников,
				Сотрудники,
				РассчитыватьНДФЛ,
				РассчитыватьВзносы);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
		
		Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			СотрудникиНеудовлетворенныеДенежнымДовольствием = Модуль.СотрудникиНеудовлетворенныеДенежнымДовольствием(
				Организация,
				Подразделение,
				МесяцНачисления);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиНеудовлетворенныеДенежнымДовольствием, Истина);
		КонецЕсли;
			
		Если Сотрудники.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ВыявлениеСотрудников", ЗамерВыявленияСотрудников);
	
	МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	
	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	
	МенеджерРасчета.НастройкиНачислений.РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьПособия = ЕстьПособия Или ЕстьПособияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьЛьготы = ЕстьЛьготы Или ЕстьЛьготыПерерасчет;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца
		Или Не ЗаполнятьНачисленияПоТрудовымДоговорам;
		
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	Если РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет
		И Не ОписаниеДокумента.РежимДоначисления Тогда
		
		МенеджерРасчета.НастройкиНДФЛ.ЗасчитыватьДанныеАвансов = Истина;
	КонецЕсли;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияНачисленияЗарплаты(МенеджерРасчета, ДополнительныеПараметры);
	КонецЕсли;
	
	СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();
	
	РассчитыватьУдержанияПерерасчет = Ложь;
	СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();
	
	// Сотрудники перерасчета.
	Если ЗаполнятьПерерасчеты Тогда
		
		ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
		Если ЕстьНачисленияПерерасчет Тогда
			ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		КонецЕсли;
		Если ЕстьПособияПерерасчет Тогда
			ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
		КонецЕсли;
		ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
		ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
		
		Если ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
			КонецЕсли;
			
			ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
				ДанныеПерерасчета, 
				Организация, 
				Подразделение, 
				МесяцНачисления, 
				Сотрудники, 
				СотрудникиПериодДействияПерерасчет, 
				ДокументСсылка, 
				ОписаниеДокумента.РежимДоначисления,
				МенеджерРасчета);
		ИначеЕсли ЕстьУдержанияПерерасчет Тогда
			
			ПерерасчетЗарплаты.РегистрацияПерерасчетовПоПредварительнымДанным(,Организация);
			ПерерасчетЗарплаты.УстановитьОтборыПерерасчетовУдержаний(
				ДанныеПерерасчета,
				МенеджерРасчета,
				Организация,
				Подразделение,
				Сотрудники,
				СотрудникиПериодДействияПерерасчет,
				МесяцНачисления,
				ОписаниеДокумента.РежимДоначисления);
		КонецЕсли;
		
		Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			Модуль.ЗаполнитьБезусловноСоответствуетКадровымДанным(ДанныеПерерасчета.ТаблицаСотрудников);
		КонецЕсли;
		
		Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
			РассчитыватьУдержанияПерерасчет = Истина;
		КонецЕсли;
		
		МассивСотрудниковДляУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиДляНачислений, "Сотрудник", Истина);
		Для Каждого Сотрудник Из МассивСотрудниковДляУдержаний Цикл
			НоваяСтрока = СотрудникиДляУдержаний.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ДатаНачала = МесяцНачисления;
			НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
		КонецЦикла;
		
		ДанныеЗаполнения.СотрудникиПерерасчет = ДанныеПерерасчета.СотрудникиПерерасчет;
	КонецЕсли;
	
	// Сотрудники начислений (и удержаний, и договоров).
	Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы
		Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет
		Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда
		
		Для Каждого Сотрудник Из Сотрудники Цикл
			Если СотрудникиНеудовлетворенныеДенежнымДовольствием <> Неопределено
				И СотрудникиНеудовлетворенныеДенежнымДовольствием.Найти(Сотрудник) <> Неопределено Тогда
				
				БезусловноСоответствуетКадровымДанным = Истина;
			Иначе
				БезусловноСоответствуетКадровымДанным = Ложь;
			КонецЕсли;
			
			Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда 
				НоваяСтрока = СотрудникиДляНачислений.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
			КонецЕсли;
			
			Если ЕстьУдержания Тогда
				НоваяСтрока = СотрудникиДляУдержаний.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
				НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
	ОтборМенеджераРасчета.Подразделение = Подразделение;
	МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);
	
	Если ЗаполнятьПерерасчеты
		И (ЕстьНачисленияПерерасчет Или ЕстьПособияПерерасчет) Тогда
		
		// Добавляем в менеджер сторно строки.
		Если ЕстьНачисленияПерерасчет Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		КонецЕсли;
		Если ЕстьПособияПерерасчет Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
		КонецЕсли;
	КонецЕсли;
	
	МенеджерРасчета.РассчитатьЗарплату();
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ПодготовкаДанныхЗаполненияДокумента", ЗамерПодготовкаДанныхЗаполненияДокумента);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Определяет является ли характер выплаты межрасчетным
//
// Параметры:
//  ПорядокВыплаты	 - Перечисление.ХарактерВыплатыЗарплаты.
// 
// Возвращаемое значение:
//   Булево   
//
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) Экспорт
	
	Возврат ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет
			Или ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		
КонецФункции

// Выполняет обработку всех коллекций расчетного документа при изменении сотрудника.
//
Процедура ОбработатьИзменениеСотрудникаВедущейТаблицыФормы(Форма, ОписаниеДокумента, НовыйСотрудник, ПрежнийСотрудник) Экспорт
	
	// Очистить все коллекции документа от данных предыдущего сотрудника, 
	// если в ведущей таблице больше не осталось его представителей
	// создать строки зависимых коллекций по новому сотруднику.
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ДокументСсылка = Объект.Ссылка;
	ОкончаниеПериода = КонецМесяца(Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	Если ОписаниеДокумента.Окончание <> Неопределено Тогда
		ОкончаниеПериода = Объект[ОписаниеДокумента.Окончание];
	КонецЕсли;
	
	ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, ПрежнийСотрудник, Организация);
	
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	КонецЕсли;
	
	Если РассчитыватьУдержания Тогда
		// Среди зависимых коллекций, для которых нужно создавать строки - только удержания, 
		// т.к. для расчета НДФЛ и Взносы не требуется наличия строк.
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
			
			Отбор = РасчетЗарплатыРасширенныйФормы.СотрудникиФизическиеЛицаОтбор();
			ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйСотрудник, "ФизическоеЛицо");
			Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина);
			
			ПозицииВставки = Новый Структура;
			РасчетЗарплатыРасширенныйФормы.УдержанияИсправленияВДанныеМенеджераРасчета(
				Объект[ОписаниеДокумента.УдержанияИмя],
				МенеджерРасчета,
				Отбор,
				ПозицииВставки);
			
			ТаблицыУдержаний = РасчетЗарплатыРасширенныйФормы.ТаблицыУдержанийФормы();
			ТаблицыУдержаний.Удержания = Объект[ОписаниеДокумента.УдержанияИмя];
			Если ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено Тогда
				ТаблицыУдержаний.УдержанияПерерасчет = Объект[ОписаниеДокумента.УдержанияПерерасчетИмя];
			КонецЕсли;
			
			МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = Истина;
			МенеджерРасчета.ЗаполнитьУдержанияСотрудникаЗаПериод(НовыйСотрудник, МесяцНачисления, ОкончаниеПериода);
			РасчетЗарплатыРасширенныйФормы.РасчетЗарплатыУдержанияВДанныеФормы(
				ТаблицыУдержаний,
				МенеджерРасчета.Зарплата.Удержания,
				МесяцНачисления,
				ПозицииВставки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перезаполняет (и пересчитывает) данные формы документа-начисления 
// по переданным сотрудникам.
//
// Параметры:
//	Форма
//	ОписаниеДокумента - структура, описывающая документ-начисление 
//		(см. ОписаниеРасчетногоДокумента).
//	Сотрудники - ссылка или массив ссылок на сотрудников.
// 	СохранятьИсправления - если Истина, перезаполнены не будут строки, 
//		для которых в наборах по определенному ключу содержатся исправления.
//		Например, для таблицы Начислений состав ключа Сотрудник и Начисление, 
//		это значит, что если хотя бы одна строка с таким начислением сотрудника содержит исправления, 
//		то все строки этого начисления этому сотруднику не будут перезаполнены
// 	ИспользоватьДлительнуюОперацию.
// 	ПерезаполнятьВедущиеТаблицы - в документах есть таблицы, от наполнения которых зависит содержимое других таблиц,
//		если изменение данных производится в этих таблицах, то их перезаполнять не нужно, в этом случае нужно установить 
//		ПерезаполнятьВедущиеТаблицы = Ложь
//		Например, при изменении сотрудника в таблице Начислений, 
//		нужно перезаполнить зависимые (ведомые) таблицы удержаний, НДФЛ и др., но не перезаполнять начисления по договорам.
//		
//
Функция ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица = Неопределено, СохранятьИсправления = Истина, ИспользоватьДлительнуюОперацию = Ложь, ПерезаполнятьВедущиеТаблицы = Истина, СотрудникиПериодДействияПерерасчет = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	
	Организация = Объект.Организация;
	ДокументСсылка = Объект.Ссылка;
	Подразделение = Объект.Подразделение;
	
	ФизическиеЛица = Неопределено;
	ПозицииВставки = Неопределено;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
		Если ВедущиеОбъекты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сотрудники = ВедущиеОбъекты.Сотрудники;
		ФизическиеЛица = ВедущиеОбъекты.ФизическиеЛица;
		ПозицииВставки = Новый Структура;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда 
		ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, МесяцНачисления, КонецМесяца(МесяцНачисления));
	    МассивПодработок = КадровыйУчетРасширенный.ПодработкиСотрудников(Истина, ПараметрыПолученияПодработок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, МассивПодработок, Истина);
	КонецЕсли;
	
	// Период заполнения данных определяем по месяцу начисления, 
	// если он не определяется отдельными полями.
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеДокумента.Окончание) Тогда
		ОкончаниеПериода = КонецДня(Объект[ОписаниеДокумента.Окончание]);
	КонецЕсли;
	
	РежимНачисления = РежимНачисления(Объект, ОписаниеДокумента);
	ПорядокВыплаты = ПорядокВыплаты(Объект, ОписаниеДокумента);
	ДатаВыплаты = ДатаВыплаты(Объект, ОписаниеДокумента);
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ДокументСсылка = ДокументСсылка;
	СтруктураПараметров.Подразделение = Подразделение;
	СтруктураПараметров.МесяцНачисления = МесяцНачисления;
	СтруктураПараметров.ДатаВыплаты = ДатаВыплаты;
	СтруктураПараметров.Сотрудники = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода = ОкончаниеПериода;
	СтруктураПараметров.РежимНачисления = РежимНачисления;
	СтруктураПараметров.ПорядокВыплаты = ПорядокВыплаты;
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента = СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, ПозицииВставки, ФизическиеЛица);
	СтруктураПараметров.КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
	СтруктураПараметров.РежимПересчетаНДФЛ = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаНДФЛ;
	СтруктураПараметров.РежимПересчетаВзносов = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаВзносов;
	СтруктураПараметров.ПозицииВставки = ПозицииВставки;
	Если ОписаниеДокумента.ЭтоНачислениеЗарплаты
		И РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		
		ПараметрыВС = Новый Структура("ИспользоватьВоеннуюСлужбу,НачислениеЗарплатыВоеннослужащим",Ложь,Ложь);
		ЗаполнитьЗначенияСвойств(ПараметрыВС, Форма);
		ЗаполнитьЗначенияСвойств(ПараметрыВС, Объект);
		СтруктураПараметров.ИспользоватьВоеннуюСлужбу = ПараметрыВС.ИспользоватьВоеннуюСлужбу;
		СтруктураПараметров.НачислениеЗарплатыВоеннослужащим = ПараметрыВС.НачислениеЗарплатыВоеннослужащим;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОписаниеДокумента.НДФЛИмя) Тогда
		СтруктураПараметров.ОкончательныйРасчетНДФЛ = Форма["ОкончательныйРасчетНДФЛ"];
	КонецЕсли;
	
	ДанныеРаспределения = Новый Структура;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;
	
	Если ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата <> Неопределено Тогда 
		Для Каждого КлючИЗначение Из ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата Цикл
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И Не ДанныеРаспределения.Свойство(ПутьКДанным) Тогда
				ДанныеРаспределения.Вставить(ПутьКДанным, ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]));
			КонецЕсли;
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено Тогда
				ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.РаспределениеРезультатов = ДанныеРаспределения;
	СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Начисление зарплаты""';
								|en = 'Fill in the ""Salary accounting"" document'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

// Подготавливает данные формы документа-начисления для перезаполнения документа
// по переданным параметрам.
// Используется фоновым заданием, если БД серверная.
//
// Параметры:
//		СтруктураПараметров - структура с параметрам
//				(см. ПерезаполнитьДанныеФормы и ОписаниеРасчетногоДокумента).
//		АдресХранилища - адрес, куда будет помещен результат выполнения.
//
Процедура ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	Подразделение = СтруктураПараметров.Подразделение;
	МесяцНачисления = СтруктураПараметров.МесяцНачисления;
	ДатаВыплаты = СтруктураПараметров.ДатаВыплаты;
	Сотрудники = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода = СтруктураПараметров.ОкончаниеПериода;
	РежимНачисления = СтруктураПараметров.РежимНачисления;
	СохранятьИсправления = СтруктураПараметров.СохранятьИсправления;
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	КонтролируемыеПоля = СтруктураПараметров.КонтролируемыеПоля;
	РежимПересчетаНДФЛ = СтруктураПараметров.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = СтруктураПараметров.РежимПересчетаВзносов;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОкончательныйРасчетНДФЛ = СтруктураПараметров.ОкончательныйРасчетНДФЛ;
	ПозицииВставки = СтруктураПараметров.ПозицииВставки;
	ПроверятьРегистрациюПроцентаЕНВД = СтруктураПараметров.ПроверятьРегистрациюПроцентаЕНВД;
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	ДоначислениеПерерасчетЗарплатыОтдельнымДокументом = НастройкиРасчетаЗарплаты.ВыполнятьДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	ЗаполнятьПерерасчеты = ОписаниеДокумента.РежимДоначисления Или Не ДоначислениеПерерасчетЗарплатыОтдельнымДокументом;
	НачислениеЗарплатыВоеннослужащим = СтруктураПараметров.НачислениеЗарплатыВоеннослужащим;
	ИспользоватьВоеннуюСлужбу = СтруктураПараметров.ИспользоватьВоеннуюСлужбу;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	ЕстьНачисления = ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЕстьПособия = ОписаниеДокумента.ПособияИмя <> Неопределено;
	ЕстьУдержания = ОписаниеДокумента.УдержанияИмя <> Неопределено;
	ЕстьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	ЕстьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	ЕстьУдержанияПерерасчет = ОписаниеДокумента.УдержанияПерерасчетИмя <> Неопределено;
	ЕстьЛьготы = ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет Или ЕстьПособия Или ЕстьПособияПерерасчет Или ЕстьЛьготы;
	РассчитыватьУдержания = ЕстьУдержания Или ЕстьУдержанияПерерасчет;
	РассчитыватьНДФЛ = ОписаниеДокумента.НДФЛИмя <> Неопределено;
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	ЗаполнятьНачисленияПоТрудовымДоговорам = Не ЗаполнятьНачисленияПоДоговорамПодряда Или РассчитыватьНачисления;
	
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ВзносыИмя <> Неопределено;
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;
	
	ЗаполнениеДокумента = Сотрудники = Неопределено;
	ИмяДанныхЗаполнения = ?(ЗаполнениеДокумента, "ДанныеДляЗаполненияТаблицДокумента", "ДанныеДляПерезаполненияТаблицДокумента");
	
	РасчетПервойПоловиныМесяца = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца;
	ПолучатьДанныеУчета = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		АвансТолькоРасчетомЗаПервуюПоловинуМесяца = УчетНДФЛ.ДатаЗакона263ФЗ() > МесяцНачисления;
		Если АвансТолькоРасчетомЗаПервуюПоловинуМесяца Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыПолученияСотрудников.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
		КонецЕсли;
			
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		
		Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда
			ПараметрыСотрудников = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
			ПараметрыСотрудников.ОкончаниеПериода = ОкончаниеПериода;
			ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = ЗаполнятьНачисленияПоТрудовымДоговорам;
			ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда = Не РасчетПервойПоловиныМесяца;
			ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
			ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
			ПараметрыСотрудников.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
			СотрудникиДополнительныйДоход = СотрудникиДополнительныйДоход(
				Организация,
				Подразделение,
				МесяцНачисления,
				ПараметрыСотрудников,
				Сотрудники,
				РассчитыватьНДФЛ,
				РассчитыватьВзносы);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
		
		СтруктураПараметров.Сотрудники = Сотрудники;
	КонецЕсли;
	
	СотрудникиНеудовлетворенныеДенежнымДовольствием = Неопределено;
	Если НачислениеЗарплатыВоеннослужащим И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		СотрудникиНеудовлетворенныеДенежнымДовольствием = Модуль.СотрудникиНеудовлетворенныеДенежнымДовольствием(
			Организация,
			Подразделение,
			МесяцНачисления,
			Сотрудники);
	КонецЕсли;
		
	МенеджерРасчета = СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьДоговорыПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = РассчитыватьУдержания;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = РассчитыватьНДФЛ;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьВзносы = РассчитыватьВзносы;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьЗаймы = ЗаполнятьПогашениеЗаймов;
	
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	
	МенеджерРасчета.НастройкиРасчета.ПерваяПоловинаМесяца = РасчетПервойПоловиныМесяца;
	МенеджерРасчета.НастройкиРасчета.ОкончательныйРасчет = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	МенеджерРасчета.НастройкиРасчета.Сотрудники = Сотрудники;
	
	МенеджерРасчета.НастройкиНачислений.РассчитыватьНачисления = ЕстьНачисления Или ЕстьНачисленияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьПособия = ЕстьПособия Или ЕстьПособияПерерасчет;
	МенеджерРасчета.НастройкиНачислений.РассчитыватьЛьготы = ЕстьЛьготы;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = РасчетПервойПоловиныМесяца
		Или Не ЗаполнятьНачисленияПоТрудовымДоговорам;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = ОкончательныйРасчетНДФЛ;
	Если РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет
		И Не ОписаниеДокумента.РежимДоначисления Тогда
		
		МенеджерРасчета.НастройкиНДФЛ.ЗасчитыватьДанныеАвансов = Истина;
	КонецЕсли;
	
	МенеджерРасчета.НастройкиЗаймов.Сотрудники = Сотрудники;
	МенеджерРасчета.НастройкиЗаймов.ДатаПогашения = КонецМесяца(МесяцНачисления);
	
	МенеджерРасчета.НастройкиБухучета.ПроверятьРегистрациюПроцентаЕНВД = ПроверятьРегистрациюПроцентаЕНВД;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриИнициализацииМенеджераРасчетаДляЗаполненияДокументаРасчетаЗарплаты(МенеджерРасчета);
	КонецЕсли;
	
	Если ПолучатьДанныеУчета Тогда
		СотрудникиДляНачислений = МенеджерРасчета.ТаблицаСотрудников();
		СотрудникиДляУдержаний = МенеджерРасчета.ТаблицаСотрудников();
		РассчитыватьУдержанияПерерасчет = Ложь;
		
		// Сотрудники перерасчета.
		Если ЗаполнятьПерерасчеты
			И (ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено 
				Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено
				Или ЕстьУдержанияПерерасчет) Тогда
		
			ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаПустаяСтруктура();
			Если ЕстьНачисленияПерерасчет Тогда
				ДанныеПерерасчета.НачисленияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			КонецЕсли;
			Если ЕстьПособияПерерасчет Тогда
				ДанныеПерерасчета.ПособияПерерасчет = МенеджерРасчета.ТаблицаНачислений();
			КонецЕсли;
			ДанныеПерерасчета.ТаблицаСотрудников = СотрудникиДляНачислений;
			ДанныеПерерасчета.ТаблицаУдержаний = МенеджерРасчета.ТаблицаСотрудников();
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
				Модуль.ДополнитьПустуюСтруктуруДанныхПерерасчета(ДанныеПерерасчета, МенеджерРасчета.ТаблицаНачислений());
			КонецЕсли;
		
			ПерерасчетЗарплаты.ЗаполнитьДанныеПерерасчета(
				ДанныеПерерасчета, 
				Организация, 
				Подразделение, 
				МесяцНачисления, 
				Сотрудники, 
				СтруктураПараметров.СотрудникиПериодДействияПерерасчет, 
				ДокументСсылка, 
				ОписаниеДокумента.РежимДоначисления,
				МенеджерРасчета);
		
			Если ДанныеПерерасчета.ТаблицаУдержаний.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ТаблицаУдержаний, СотрудникиДляУдержаний);
				РассчитыватьУдержанияПерерасчет = Истина;
			КонецЕсли;
			
			МассивСотрудниковДляУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиДляНачислений, "Сотрудник", Истина);
			Для Каждого Сотрудник Из МассивСотрудниковДляУдержаний Цикл
				НоваяСтрока = СотрудникиДляУдержаний.Добавить();
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ДатаНачала = МесяцНачисления;
				НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
			КонецЦикла;
		
			ДанныеЗаполнения.СотрудникиПерерасчет = ДанныеПерерасчета.СотрудникиПерерасчет;
		КонецЕсли;
		
		Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы
			Или РассчитыватьУдержания Или РассчитыватьУдержанияПерерасчет
			Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда
			
			Для Каждого Сотрудник Из Сотрудники Цикл
				Если СотрудникиНеудовлетворенныеДенежнымДовольствием <> Неопределено
					И СотрудникиНеудовлетворенныеДенежнымДовольствием.Найти(Сотрудник) <> Неопределено Тогда
					
					БезусловноСоответствуетКадровымДанным = Истина;
				Иначе
					БезусловноСоответствуетКадровымДанным = Ложь;
				КонецЕсли;
				
				Если ЕстьНачисления Или ЕстьПособия Или ЕстьЛьготы Или ЗаполнятьНачисленияПоДоговорамПодряда Тогда
					НоваяСтрока = СотрудникиДляНачислений.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
					НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
				КонецЕсли;
				
				Если ЕстьУдержания Тогда 
					НоваяСтрока = СотрудникиДляУдержаний.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.ДатаНачала = МесяцНачисления;
					НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
					НоваяСтрока.БезусловноСоответствуетКадровымДанным = БезусловноСоответствуетКадровымДанным;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СохранятьИсправления Тогда 
			ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		КонецЕсли;
		
		ОтборМенеджераРасчета = МенеджерРасчета.СоздатьОтборы();
		ОтборМенеджераРасчета.Подразделение = Подразделение;
		МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(СотрудникиДляНачислений, ОтборМенеджераРасчета, СотрудникиДляУдержаний);
		Если ЗаполнятьПерерасчеты
			И (ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено 
				Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено) Тогда
				
			Если ЕстьНачисленияПерерасчет Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.НачисленияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
			КонецЕсли;
			Если ЕстьПособияПерерасчет Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчета.ПособияПерерасчет, МенеджерРасчета.Зарплата.Начисления);
			КонецЕсли;
		КонецЕсли;
		МенеджерРасчета.РассчитатьЗарплату();
	Иначе
		ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров);
		Если РежимПересчетаВзносов Тогда
			МенеджерРасчета.ПересчитатьВзносы();
		КонецЕсли;
		Если РежимПересчетаНДФЛ Тогда
			МенеджерРасчета.ПересчитатьНДФЛ();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Начисления = МенеджерРасчета.Зарплата.Начисления;
	ДанныеЗаполнения.НачисленияПоДоговорам = МенеджерРасчета.Зарплата.ДоговорыПодряда;
	ДанныеЗаполнения.Удержания = МенеджерРасчета.Зарплата.Удержания;
	ДанныеЗаполнения.НДФЛ = МенеджерРасчета.Зарплата.НДФЛ;
	ДанныеЗаполнения.ПогашениеЗаймов = МенеджерРасчета.Зарплата.ПогашениеЗаймов;
	ДанныеЗаполнения.Взносы = МенеджерРасчета.Зарплата.Взносы;
	ДанныеЗаполнения.КорректировкиВыплаты = МенеджерРасчета.Зарплата.КорректировкиВыплаты;
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить(ИмяДанныхЗаполнения, ДанныеЗаполнения);
	РезультатЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	//Начисления
	ЗаполнитьМенеджерРасчетаИсправленнымиСтрокамиНачислений(МенеджерРасчета, Сотрудники, СтруктураПараметров);
	
	// Удержания
	КлючевыеПоля = "ФизическоеЛицо,Удержание,ДокументОснование";
	СтруктураПоиска = Новый Структура(КлючевыеПоля);
	СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.Удержания, СтруктураПараметров.КонтролируемыеПоля["Удержания"], КлючевыеПоля);
	Если СочетанияСтрок.Количество() > 0 Тогда
		ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.УдержанияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.Удержания, "Удержание");
		КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
		Для Каждого Строка Из СодержимоеДокумента.Удержания Цикл
			Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска) Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения);
		КонецЦикла;
	КонецЕсли;
	
	СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.УдержанияПерерасчет, СтруктураПараметров.КонтролируемыеПоля["Удержания"], КлючевыеПоля);
	Если СочетанияСтрок.Количество() > 0 Тогда
		ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.УдержанияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.УдержанияПерерасчет, "Удержание");
		КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
		Для Каждого Строка Из СодержимоеДокумента.УдержанияПерерасчет Цикл
			Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска) Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// НДФЛ
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НДФЛИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	СтрокиВычетовПоИдентификаторам = СтрокиВычетовПоИдентификаторам(СодержимоеДокумента.ПримененныеВычетыНаДетейИИмущественные);
	Для Каждого Строка Из СодержимоеДокумента.НДФЛ Цикл
		Если Строка.ФиксРасчет Или Строка.ФиксСтрока Тогда
			ПримененныеВычеты = СтрокиВычетовПоИдентификаторам[Строка.ИдентификаторСтрокиНДФЛ];
			Если ПримененныеВычеты = Неопределено Тогда
				ПримененныеВычеты = Новый Массив;
			КонецЕсли;
			РасчетЗарплатыРасширенныйФормы.СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ПримененныеВычеты, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// КорректировкиВыплаты
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.КорректировкиВыплатыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.КорректировкиВыплаты Цикл
		Если Строка.ФиксРасчет 
			Или Строка.ФиксСтрока Тогда
			РасчетЗарплатыРасширенныйФормы.СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЦикла;
	
	// Погашение займов
	Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Тогда
		ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПогашениеЗаймовИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
		Для Каждого Строка Из СодержимоеДокумента.ПогашениеЗаймов Цикл
			Если Строка.ФиксРасчет 
				Или Строка.ФиксСтрока Тогда
				РасчетЗарплатыРасширенныйФормы.СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтрокамиНачислений(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	//Начисления
	Если ОписаниеДокумента.НачисленияИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник, Начисление";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.Начисления, СтруктураПараметров.КонтролируемыеПоля["Начисления"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
			Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
				Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска)
					Или Не ЗначениеЗаполнено(Строка.Начисление) Тогда
					
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо,
					"Начисления",
					ДанныеРаспределенияПоТерриториямУсловиямТруда,
					ДанныеРезультатовРаспределения);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	// НачисленияПерерасчет
	Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник, Начисление";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.НачисленияПерерасчет, СтруктураПараметров.КонтролируемыеПоля["НачисленияПерерасчет"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
			Для Каждого Строка Из СодержимоеДокумента.НачисленияПерерасчет Цикл
				Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска)
					Или Не ЗначениеЗаполнено(Строка.Начисление)
					Или Строка.ФиксСторно Тогда
					
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо,
					"НачисленияПерерасчет",
					ДанныеРаспределенияПоТерриториямУсловиямТруда,
					ДанныеРезультатовРаспределения);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;

	// Пособия
	Если ОписаниеДокумента.ПособияИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.Пособия, СтруктураПараметров.КонтролируемыеПоля["Пособия"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
			Для Каждого Строка Из СодержимоеДокумента.Пособия Цикл
				Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска) Тогда
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо,
					"Пособия",
					ДанныеРаспределенияПоТерриториямУсловиямТруда,
					ДанныеРезультатовРаспределения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// ПособияПерерасчет
	Если ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.ПособияПерерасчет, СтруктураПараметров.КонтролируемыеПоля["ПособияПерерасчет"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
			Для Каждого Строка Из СодержимоеДокумента.ПособияПерерасчет Цикл
				Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска)
					Или Строка.ФиксСторно Тогда
					
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо,
					"ПособияПерерасчет",
					ДанныеРаспределенияПоТерриториямУсловиямТруда,
					ДанныеРезультатовРаспределения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Льготы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СтруктураПараметров);
	КонецЕсли;
	
	//УправленческиеНачисления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СтруктураПараметров);
	КонецЕсли;
	
	// НачисленияПоДоговорам
	Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник, ДокументОснование";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = СочетанияИсправленныхСтрок(СодержимоеДокумента.НачисленияПоДоговорам, СтруктураПараметров.КонтролируемыеПоля["НачисленияПоДоговорам"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПоДоговорамИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
			КодыДоходаДоговорРаботыУслуги = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
			Для Каждого Строка Из СодержимоеДокумента.НачисленияПоДоговорам Цикл
				Если Не ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска) Тогда
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо,
					КодыДоходаДоговорРаботыУслуги,
					ДанныеРаспределенияПоТерриториямУсловиямТруда,
					ДанныеРезультатовРаспределения);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция СочетанияИсправленныхСтрок(ТаблицаНачислений, КонтролируемыеПоля, КлючевыеПоля) Экспорт
	
	СочетанияИсправленныхСтрок = Новый ТаблицаЗначений;
	Если КонтролируемыеПоля = Неопределено Тогда
		Возврат СочетанияИсправленныхСтрок;
	КонецЕсли;
	
	КлючевыеПоляСтруктура = Новый Структура(КлючевыеПоля);
	Для Каждого КлючИЗначение Из КлючевыеПоляСтруктура Цикл
		СочетанияИсправленныхСтрок.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		ЕстьИсправленныеЗначения = Ложь;
		Для Каждого КлючИЗначение Из КонтролируемыеПоля Цикл
			Если Строка[КлючИЗначение.Ключ] = Истина Тогда
				ЕстьИсправленныеЗначения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьИсправленныеЗначения Тогда
			ЗаполнитьЗначенияСвойств(СочетанияИсправленныхСтрок.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	СочетанияИсправленныхСтрок.Свернуть(КлючевыеПоля);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(СочетанияИсправленныхСтрок, КлючевыеПоля);
	
	Возврат СочетанияИсправленныхСтрок;
	
КонецФункции

Функция ЕстьИсправленияСтрок(Строка, СочетанияИсправленныхСтрок, СтруктураПоиска) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
	Возврат СочетанияИсправленныхСтрок.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	ОписанияТаблицФормы = ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата;
	
	// Начисления
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Начисления", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// НачисленияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПерерасчет Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "НачисленияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Пособия
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Пособия Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Пособия", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// ПособияПерерасчет
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПособияПерерасчетИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.ПособияПерерасчет Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаПособияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "ПособияПерерасчет", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Льготы
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ЛьготыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.Льготы Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, "Льготы", ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// НачисленияПоДоговорам
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НачисленияПоДоговорамИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	КодыДоходаДоговорРаботыУслуги = УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	Для Каждого Строка Из СодержимоеДокумента.НачисленияПоДоговорам Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияПоДоговорамВДанныеМенеджераРасчета(МенеджерРасчета, Строка, Организация, ФизическоеЛицо, КодыДоходаДоговорРаботыУслуги, ДанныеРаспределенияПоТерриториямУсловиямТруда, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// Удержания
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.УдержанияИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.Удержания, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	Для Каждого Строка Из СодержимоеДокумента.Удержания Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента.УдержанияПерерасчет, "Удержание");
	КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыРасчета, "КатегорияУдержания");
	Для Каждого Строка Из СодержимоеДокумента.УдержанияПерерасчет Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаУдержанияВДанныеМенеджераРасчета(МенеджерРасчета, Строка, КатегорииУдержаний, ДанныеРезультатовРаспределения, Истина);
	КонецЦикла;
	
	// НДФЛ
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.НДФЛИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	СтрокиВычетовПоИдентификаторам = СтрокиВычетовПоИдентификаторам(СодержимоеДокумента.ПримененныеВычетыНаДетейИИмущественные);
	Для Каждого Строка Из СодержимоеДокумента.НДФЛ Цикл
		ПримененныеВычеты = СтрокиВычетовПоИдентификаторам[Строка.ИдентификаторСтрокиНДФЛ];
		Если ПримененныеВычеты = Неопределено Тогда
			ПримененныеВычеты = Новый Массив;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.СтрокаНДФЛВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ПримененныеВычеты, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	//Взносы
	МенеджерРасчета.Зарплата.Взносы = СодержимоеДокумента.Взносы.Скопировать();
	
	// КорректировкиВыплаты
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.КорректировкиВыплатыИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.КорректировкиВыплаты Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаКорректировкиВыплатыВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	// ПогашениеЗаймов
	ДанныеРезультатовРаспределения = ДанныеРезультатовРаспределенияТаблицыДокумента(ОписаниеДокумента.ПогашениеЗаймовИмя, ОписанияТаблицФормы, РаспределениеРезультатов);
	Для Каждого Строка Из СодержимоеДокумента.ПогашениеЗаймов Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаПогашениеЗаймовВДанныеМенеджераРасчета(МенеджерРасчета, Строка, ДанныеРезультатовРаспределения);
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, ФизическиеЛицаСотрудников, СодержимоеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокиВычетовПоИдентификаторам(ПримененныеВычеты)
	
	СтрокиВычетовПоИдентификаторам = Новый Соответствие;
	Для Каждого Строка Из ПримененныеВычеты Цикл
		Если СтрокиВычетовПоИдентификаторам[Строка.ИдентификаторСтрокиНДФЛ] = Неопределено Тогда
			СтрокиВычетовПоИдентификаторам.Вставить(Строка.ИдентификаторСтрокиНДФЛ, Новый Массив);
		КонецЕсли;
		СтрокиВычетовПоИдентификаторам[Строка.ИдентификаторСтрокиНДФЛ].Добавить(Строка);
	КонецЦикла;
	
	Возврат СтрокиВычетовПоИдентификаторам;
	
КонецФункции

Функция УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам(УчтенныеПриРасчетеНДФЛДокументы)
	
	УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам = Новый Соответствие;
	Для Каждого Строка Из УчтенныеПриРасчетеНДФЛДокументы Цикл
		Если УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам[Строка.ФизическоеЛицо] = Неопределено Тогда
			УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, Новый Массив);
		КонецЕсли;
		УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам[Строка.ФизическоеЛицо].Добавить(Строка);
	КонецЦикла;
	
	Возврат УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам;
	
КонецФункции

Функция ДанныеРезультатовРаспределенияТаблицыДокумента(ИмяТаблицы, ОписанияТаблицФормы, РаспределениеРезультатов) Экспорт
	
	ОписаниеТаблицы = Неопределено;
	Если ЗначениеЗаполнено(ИмяТаблицы) И ЗначениеЗаполнено(ОписанияТаблицФормы) Тогда 
		ОписанияТаблицФормы.Свойство(ИмяТаблицы, ОписаниеТаблицы);
	КонецЕсли;
	ДанныеРезультатовРаспределения = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеТаблицы) Тогда
		ПутьКДаннымАдресаРаспределения = ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
		Если ЗначениеЗаполнено(ПутьКДаннымАдресаРаспределения) Тогда 
			РаспределениеРезультатов.Свойство(ПутьКДаннымАдресаРаспределения, ДанныеРезультатовРаспределения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеРезультатовРаспределения;
	
КонецФункции

// Удаляет строки, связанные с сотрудником из всех коллекций расчетного документа.
//
Процедура ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, Сотрудник, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
		МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);
	Иначе
		МассивСотрудников = Сотрудник;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	// Проверяем остались ли строки в ведущих таблицах: 
	ВедущиеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ВедущиеТаблицы();
	КоллекцииПоФизическомуЛицу = Новый Массив;
	КоллекцииПоФизическомуЛицу.Добавить("Удержания");
	КоллекцииПоФизическомуЛицу.Добавить("Взносы");
	КоллекцииПоФизическомуЛицу.Добавить("НДФЛ");
	КоллекцииПоФизическомуЛицу.Добавить("КорректировкиВыплаты");
	КоллекцииПоСотруднику = Новый Массив;
	СотрудникиКУдалению = Новый Массив;
	
	Если Объект.Свойство("ИсправленныйДокумент") И ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ВедущиеТаблицы.Добавить("НачисленияПерерасчет");
		ВедущиеТаблицы.Добавить("НачисленияПерерасчетНулевыеСторно");
		ВедущиеТаблицы.Добавить("ЗависимыеНачисления");
		ВедущиеТаблицы.Добавить("НачисленияДолейРКСН");
	Иначе
		КоллекцииПоСотруднику.Добавить("НачисленияПерерасчет");
		КоллекцииПоСотруднику.Добавить("НачисленияПерерасчетНулевыеСторно");
		КоллекцииПоСотруднику.Добавить("ЗависимыеНачисления");
		КоллекцииПоСотруднику.Добавить("НачисленияДолейРКСН");
	КонецЕсли;
	
	// Начисления, НачисленияПоДоговорам
	Для каждого СотрудникМассива Из МассивСотрудников Цикл
		СтрокиСотрудника = Новый Массив;
		Для Каждого ВедущаяТаблица Из ВедущиеТаблицы Цикл
			Если ОписаниеДокумента[ВедущаяТаблица + "Имя"] <> Неопределено Тогда
				НайденныеСтроки = Объект[ОписаниеДокумента[ВедущаяТаблица + "Имя"]].НайтиСтроки(
						Новый Структура("Сотрудник", СотрудникМассива));
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиСотрудника, НайденныеСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокиСотрудника.Количество() = 0 Тогда
			СотрудникиКУдалению.Добавить(СотрудникМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если СотрудникиКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем сотрудников и физических лиц.
	ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиКУдалению, Организация);
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	Для Каждого ИмяКоллекции Из КоллекцииПоФизическомуЛицу Цикл
		ИмяТаблицыДокумента = ОписаниеДокумента[ИмяКоллекции + "Имя"];
		Если ИмяТаблицыДокумента = Неопределено Тогда
			// Нет такой таблицы в этом документе.
			Продолжить;
		КонецЕсли;
		СтрокиКоллекции = НайтиСтрокиОтборПоМассиву(Объект[ИмяТаблицыДокумента], "ФизическоеЛицо", Физлица);
		Если ИмяКоллекции = "НДФЛ"
			И ОписаниеДокумента["ПримененныеВычетыИмя"] <> Неопределено Тогда
			
			ИмяТаблицыВычетов = ОписаниеДокумента["ПримененныеВычетыИмя"];
			ИдентификаторыСтрокНДФЛ = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиКоллекции, "ИдентификаторСтрокиНДФЛ");
			СтрокиВычетов = НайтиСтрокиОтборПоМассиву(Объект[ИмяТаблицыВычетов], "ИдентификаторСтрокиНДФЛ", ИдентификаторыСтрокНДФЛ);
			Для каждого СтрокаКоллекцииВычетов Из СтрокиВычетов Цикл
				Объект[ИмяТаблицыВычетов].Удалить(СтрокаКоллекцииВычетов);
			КонецЦикла;
		КонецЕсли;
		Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
			Объект[ИмяТаблицыДокумента].Удалить(СтрокаКоллекции);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИмяКоллекции Из КоллекцииПоСотруднику Цикл
		ИмяТаблицыДокумента = ОписаниеДокумента[ИмяКоллекции + "Имя"];
		Если ИмяТаблицыДокумента = Неопределено Тогда
			// Нет такой таблицы в этом документе.
			Продолжить;
		КонецЕсли;
		СтрокиКоллекции = НайтиСтрокиОтборПоМассиву(Объект[ИмяТаблицыДокумента], "Сотрудник", Сотрудники);
		Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
			Объект[ИмяТаблицыДокумента].Удалить(СтрокаКоллекции);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выбирает объекты, являющиеся ведущими для обновления (сотрудники или физические лица)
// и вызывает процедуру перезаполнения данных формы.
//
// Параметры:
//	Форма
//	ИмяТаблицы - имя таблицы документа, как оно указывается в описании расчетного документа, 
//		см. РасчетЗарплатыРасширенный.ОписаниеРасчетногоДокумента.
//	ВыбранныеСтроки - идентификаторы выбранных строк таблицы.
//	ВедущееПоле - имя поля, содержащего ведущее поле для обновления (Сотрудник или ФизическоеЛицо).
//	ТипВедущего - тип значения, являющегося ведущим для обновления (Сотрудник или ФизическоеЛицо).
//
Процедура ПересчитатьСотрудникаНаСервере(Форма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	Объект = Форма.Объект;
	
	// В таблицах реквизиты разного типа и с разными именами
	// если это сотрудники - нужно получить физических лиц, 
	// если физические лица - сотрудников
	// очистить строки по всем таблицам, запомнить места вставки строк по таблицам.
	
	// Составляем коллекцию выделенных пользователем строк.
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		// Получаем физических лиц по сотрудникам.
		Сотрудники = ВедущиеОбъекты;
	Иначе
		// Получаем сотрудников по физическим лицам.
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Форма.ПерезаполнитьДанныеФормыНаСервере(Сотрудники, Истина);
	
КонецПроцедуры

// Подготавливает таблицу с данными расчета займов и материальной выгоды.
//
Функция РезультатРасчетаЗаймов(Организация, ДатаОкончания, Документ, РасчетУвольнения, Сотрудники = Неопределено, Подразделение = Неопределено, РассчитыватьМатериальнуюВыгоду = Истина, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	// Получаем данные расчета займов.
	РасчетЗаймов = ЗаймыСотрудникам.РасчетЗаймовСотрудникам(
		Организация, ДатаОкончания, Документ, РасчетУвольнения, , Сотрудники, Подразделение, Истина, ИсключаемыеРегистраторы);
		
	// Дополняем таблицу данными расчета материальной выгоды.
	Если РассчитыватьМатериальнуюВыгоду Тогда
		УчетНДФЛРасширенный.РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, КонецМесяца(ДатаОкончания), РасчетЗаймов, Документ);
	КонецЕсли;
	
	РасчетЗаймов.Свернуть("ФизическоеЛицо, ДоговорЗайма, Подразделение", 
		"НачисленоПроцентов, ПогашениеПроцентов, ПогашениеЗайма, МатериальнаяВыгода, НалогНаМатериальнуюВыгоду");
		
	// Удаляем (просто не добавляем) строки с нулевыми суммами.
	ПогашениеЗаймов = ЗаймыСотрудникам.ТаблицаПогашениеЗаймов();
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		Если СтрокаРасчета.НачисленоПроцентов = 0
			И СтрокаРасчета.ПогашениеПроцентов = 0
			И СтрокаРасчета.ПогашениеЗайма = 0
			И СтрокаРасчета.МатериальнаяВыгода = 0 
			И СтрокаРасчета.НалогНаМатериальнуюВыгоду = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПогашениеЗаймов.Добавить(), СтрокаРасчета);
	КонецЦикла;
	
	Возврат ПогашениеЗаймов;
	
КонецФункции

// Возвращает структуру параметров для ПроверитьПересечениеФактическогоПериодаДействия.
//
Функция ПараметрыПроверкиПересеченияФактическогоПериодаДействия() Экспорт 
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация");
	ПараметрыПроверки.Вставить("ПериодРегистрации");
	ПараметрыПроверки.Вставить("Документ");
	ПараметрыПроверки.Вставить("Начисления");
	ПараметрыПроверки.Вставить("ИмяКолонки", "Начисление");
	ПараметрыПроверки.Вставить("Начисление");
	ПараметрыПроверки.Вставить("ИсправленныйДокумент");
	ПараметрыПроверки.Вставить("ОсновныеНачисления");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет пересечение фактического периода действия начислений с зачетом нормы времени.
//
// Параметры:
//		Организация - организация из документа.
//		ПериодРегистрации - период регистрации документа.
//		Документ - ссылка на документ.
//		Начисления - табличная часть Начисления.
//		ИмяКолонки - имя колонки таблицы, к которой будет привязано сообщение об ошибке.
//      Начисление - для документов, у которых в табличной части Начисления нет вида расчета.
//
Процедура ПроверитьПересечениеФактическогоПериодаДействия(Параметры, Отказ = Ложь) Экспорт 
	
	Организация 			= Параметры.Организация;
	ПериодРегистрации 		= Параметры.ПериодРегистрации;
	Документ 				= Параметры.Документ;
	Начисления 				= Параметры.Начисления;
	ИмяКолонки 				= Параметры.ИмяКолонки;
	Начисление 				= Параметры.Начисление;
	ИсправленныйДокумент 	= Параметры.ИсправленныйДокумент;
	ОсновныеНачисления 		= Параметры.ОсновныеНачисления;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ПериодРегистрации) Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОсновныеНачисления <> Неопределено Тогда 
		
		СведенияОбИсправлении = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(Документ);
		
		Если Не(СведенияОбИсправлении.Исправлен Или СведенияОбИсправлении.Сторнирован) Тогда 
			
			ТаблицаНачислений = ПустаяТаблицаНачисления();
			
			Для Каждого СтрокаНачисления Из Начисления Цикл
				Если Не ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление) Тогда 
					Продолжить;
				КонецЕсли;	
				НоваяСтрока = ТаблицаНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Начисление = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
			КонецЦикла;
			
			МассивНачислений = Новый Массив;
			Для Каждого ОсновноеНачисление Из ОсновныеНачисления Цикл 
				Отбор = Новый Структура("Начисление", ОсновноеНачисление);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачислений, ТаблицаНачислений.НайтиСтроки(Отбор));
			КонецЦикла;
			
			НачисленияНабор = НаборЗаписейНачисления();
			НачисленияНабор.Отбор.Регистратор.Установить(Документ);
			
			Движения = Новый Структура("Начисления", НачисленияНабор);
			
			СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, МассивНачислений, , Ложь);
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("СписокИсправленныхДокументов",
				ИсправлениеДокументовЗарплатаКадры.ПолучитьДокументыЦепочкиИсправлений(Документ));
			Запрос.УстановитьПараметр("Начисления", Движения.Начисления);
			Запрос.УстановитьПараметр("Документ", Документ);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.Организация КАК Организация,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.ВидРасчета КАК ВидРасчета,
			|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
			|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
			|	Начисления.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ВТДанныеДокументаПредварительно
			|ИЗ
			|	&Начисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеДокументаПредварительно.ПериодДействия КАК ПериодДействия,
			|	ДанныеДокументаПредварительно.Организация КАК Организация,
			|	ДанныеДокументаПредварительно.Сотрудник КАК Сотрудник,
			|	ДанныеДокументаПредварительно.ВидРасчета КАК ВидРасчета,
			|	ДанныеДокументаПредварительно.ПериодДействияНачало КАК ПериодДействияНачало,
			|	ДанныеДокументаПредварительно.ПериодДействияКонец КАК ПериодДействияКонец,
			|	ДанныеДокументаПредварительно.НомерСтроки КАК НомерСтроки,
			|	Начисления.ВидВремени КАК ВидВремени
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	ВТДанныеДокументаПредварительно КАК ДанныеДокументаПредварительно
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО ДанныеДокументаПредварительно.ВидРасчета = Начисления.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеРегистра.Регистратор КАК Регистратор,
			|	ДанныеРегистра.Организация КАК Организация,
			|	ДанныеРегистра.Сотрудник КАК Сотрудник,
			|	ДанныеРегистра.ВидРасчета КАК ВидРасчета,
			|	ДанныеРегистра.ПериодДействия КАК ПериодДействия,
			|	ДанныеРегистра.ПериодДействияНачало КАК ПериодДействияНачало,
			|	ДанныеРегистра.ПериодДействияКонец КАК ПериодДействияКонец,
			|	ДанныеРегистра.Сторно
			|		ИЛИ ДанныеРегистра.СторноТекущегоПериода <> НЕОПРЕДЕЛЕНО
			|			И ДанныеРегистра.СторноТекущегоПериода <> ДанныеРегистра.Регистратор КАК Сторно,
			|	ДанныеДокумента.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ВТКонкурирующиеЗаписи
			|ИЗ
			|	ВТДанныеДокумента КАК ДанныеДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ДанныеРегистра
			|		ПО (НЕ ДанныеРегистра.Регистратор В (&СписокИсправленныхДокументов))
			|			И (ДанныеРегистра.Регистратор <> &Документ)
			|			И ДанныеДокумента.ПериодДействия = ДанныеРегистра.ПериодДействия
			|			И ДанныеДокумента.Организация = ДанныеРегистра.Организация
			|			И ДанныеДокумента.Сотрудник = ДанныеРегистра.Сотрудник
			|			И ДанныеДокумента.ВидРасчета = ДанныеРегистра.ВидРасчета
			|			И (НЕ ДанныеДокумента.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
			|			И ДанныеДокумента.ПериодДействияНачало = ДанныеРегистра.ПериодДействияНачало
			|			И ДанныеДокумента.ПериодДействияКонец = ДанныеРегистра.ПериодДействияКонец
			|			И (НЕ(ДанныеРегистра.Регистратор ССЫЛКА Документ.Увольнение
			|					И (ДанныеРегистра.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
			|					ИЛИ ДанныеРегистра.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска))
			|					И ДанныеРегистра.СторнируемыйДокумент ССЫЛКА Документ.Отпуск
			|					И ДанныеРегистра.СторнируемыйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка)))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонкурирующиеЗаписи.Регистратор КАК Регистратор,
			|	КонкурирующиеЗаписи.Организация КАК Организация,
			|	КонкурирующиеЗаписи.Сотрудник КАК Сотрудник,
			|	КонкурирующиеЗаписи.ВидРасчета КАК ВидРасчета,
			|	КонкурирующиеЗаписи.ПериодДействия КАК ПериодДействия,
			|	КонкурирующиеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
			|	КонкурирующиеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
			|	КонкурирующиеЗаписи.Сторно КАК Сторно,
			|	КонкурирующиеЗаписи.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ВТКонкурирующиеЗаписи КАК КонкурирующиеЗаписи
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКонкурирующиеЗаписи КАК КонкурирующиеЗаписиСторно
			|		ПО КонкурирующиеЗаписи.Сотрудник = КонкурирующиеЗаписиСторно.Сотрудник
			|			И КонкурирующиеЗаписи.Организация = КонкурирующиеЗаписиСторно.Организация
			|			И КонкурирующиеЗаписи.ВидРасчета = КонкурирующиеЗаписиСторно.ВидРасчета
			|			И КонкурирующиеЗаписи.ПериодДействия = КонкурирующиеЗаписиСторно.ПериодДействия
			|			И КонкурирующиеЗаписи.ПериодДействияНачало = КонкурирующиеЗаписиСторно.ПериодДействияНачало
			|			И КонкурирующиеЗаписи.ПериодДействияКонец = КонкурирующиеЗаписиСторно.ПериодДействияКонец
			|			И (НЕ КонкурирующиеЗаписи.Сторно)
			|			И (КонкурирующиеЗаписиСторно.Сторно)
			|ГДЕ
			|	НЕ КонкурирующиеЗаписи.Сторно
			|	И КонкурирующиеЗаписиСторно.Сотрудник ЕСТЬ NULL";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 0 Тогда 
				
				ШаблонСообщения = НСтр("ru = 'Работник %1: начисление %2 на эти даты уже введено документом %3.';
										|en = 'Employee %1: accrual %2 for these dates is already entered with document %3. '");
				
				Пока Выборка.Следующий() Цикл 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.
						ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, Выборка.ВидРасчета, Выборка.Регистратор);
						
					//Отказ от ОбщегоНазначения.СообщитьПользователю из-за фонового проведения
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.КлючДанных = Документ;
					Сообщение.Поле = "Начисления" + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + "Результат";
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЦикла;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("МассивСотрудников", ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина));
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФПДНачислений.Регистратор КАК Регистратор,
	|	ФПДНачислений.Сотрудник КАК Сотрудник,
	|	ФПДНачислений.Организация КАК Организация,
	|	ФПДНачислений.ВидРасчета КАК ВидРасчета,
	|	ФПДНачислений.ПериодДействияНачало КАК ДатаНачала,
	|	ФПДНачислений.ПериодДействияКонец КАК ДатаОкончания,
	|	ФПДНачислений.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТФПДНачислений
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетНормыВремени = ИСТИНА
	|				И Сотрудник В (&МассивСотрудников)
	|				И ПериодРегистрации = &ПериодРегистрации
	|				И СторноТекущегоПериода = НЕОПРЕДЕЛЕНО
	|				И Сторно = ЛОЖЬ
	|				И ФиксСторно = ЛОЖЬ
	|				И Перерасчет = ЛОЖЬ
	|				И НЕ(Регистратор ССЫЛКА Документ.Увольнение
	|						И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|						ИЛИ ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска))
	|						И СторнируемыйДокумент ССЫЛКА Документ.Отпуск
	|						И СторнируемыйДокумент <> ЗНАЧЕНИЕ(Документ.Отпуск.ПустаяСсылка))) КАК ФПДНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияДокумента.ВидРасчета КАК ВидРасчета,
	|	ДвиженияДокумента.ДатаНачала КАК ДатаНачала,
	|	ДвиженияДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ВидРасчета КАК ВидРасчетаРегистр,
	|	ДанныеРегистра.ДатаНачала КАК ДатаНачалаРегистр,
	|	ДанныеРегистра.ДатаОкончания КАК ДатаОкончанияРегистр,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтрокиРегистр
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДанныеРегистра
	|		ПО ДвиженияДокумента.Сотрудник = ДанныеРегистра.Сотрудник
	|			И ДвиженияДокумента.Организация = ДанныеРегистра.Организация
	|			И (ДвиженияДокумента.Регистратор = &Документ)
	|			И (ДанныеРегистра.Регистратор <> &Документ)
	|			И ДвиженияДокумента.ДатаНачала <= ДанныеРегистра.ДатаОкончания
	|			И ДвиженияДокумента.ДатаОкончания >= ДанныеРегистра.ДатаНачала
	|			И (НЕ ДанныеРегистра.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (НЕ ДвиженияДокумента.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияДокумента.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДанныеРегистра.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияДокумента.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРегистратора.Сотрудник КАК Сотрудник,
	|	ДвиженияРегистратора.ВидРасчета КАК ВидРасчета,
	|	ДвиженияРегистратора.ДатаНачала КАК ДатаНачала,
	|	ДвиженияРегистратора.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистратора.НомерСтроки КАК НомерСтроки,
	|	ДвиженияРегистратораДляПроверки.ВидРасчета КАК ВидРасчетаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаНачала КАК ДатаНачалаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаОкончания КАК ДатаОкончанияДляПроверки,
	|	ДвиженияРегистратораДляПроверки.НомерСтроки КАК НомерСтрокиДляПроверки
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДвиженияРегистратораДляПроверки
	|		ПО (ДвиженияРегистратора.Регистратор = &Документ)
	|			И (ДвиженияРегистратораДляПроверки.Регистратор = &Документ)
	|			И ДвиженияРегистратора.Сотрудник = ДвиженияРегистратораДляПроверки.Сотрудник
	|			И ДвиженияРегистратора.Организация = ДвиженияРегистратораДляПроверки.Организация
	|			И ДвиженияРегистратора.НомерСтроки <> ДвиженияРегистратораДляПроверки.НомерСтроки
	|			И ДвиженияРегистратора.ДатаНачала <= ДвиженияРегистратораДляПроверки.ДатаОкончания
	|			И ДвиженияРегистратора.ДатаОкончания >= ДвиженияРегистратораДляПроверки.ДатаНачала
	|			И (ВЫБОР
	|				КОГДА ДвиженияРегистратора.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияРегистратораДляПроверки.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДвиженияРегистратора.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияРегистратораДляПроверки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ШаблонСообщения = НСтр("ru = 'Работник %1: период %2 будет оплачен как ""%3"" текущим документом и как ""%4"" документом %5';
							|en = 'Employee %1: period %2 will be paid as ""%3"" with the current document and as ""%4"" with document %5'");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаРегистр);
		ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияРегистр);
		ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.ВидРасчетаРегистр, Выборка.Регистратор);
		//Отказ от ОбщегоНазначения.СообщитьПользователю из-за фонового проведения
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.КлючДанных = Выборка.Регистратор;
		Сообщение.Поле = "Начисления" + "[" + Формат(Выборка.НомерСтрокиРегистр - 1, "ЧН=0; ЧГ=0") + "]." + "Результат";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;	
	
	ШаблонСообщения = НСтр("ru = 'Работник %1: период %2 будет оплачен как ""%3"" (строка %4) и как ""%5"" (строка %6)';
							|en = 'Employee %1: period %2 will be paid as ""%3"" (line %4) and as ""%5"" (line %6)'");
	
	НомераСтрок = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если НомераСтрок[Выборка.НомерСтрокиДляПроверки] = Неопределено Тогда 
			НомераСтрок.Вставить(Выборка.НомерСтроки, Истина);
			
			ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаДляПроверки);
			ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияДляПроверки);
			ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.НомерСтроки, Выборка.ВидРасчетаДляПроверки, Выборка.НомерСтрокиДляПроверки);
			//Отказ от ОбщегоНазначения.СообщитьПользователю из-за фонового проведения
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.КлючДанных = Документ;
			Сообщение.Поле = "Объект.Начисления" + "[" + Формат(Выборка.НомерСтрокиДляПроверки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяКолонки;
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление = Неопределено)
	
	ВидРасчета = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
	
	Если ЗначениеЗаполнено(ВидРасчета) 
		И ЗначениеЗаполнено(СтрокаНачисления.Сотрудник) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаНачала) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончания) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Аванс

// Функция возвращает таблицу значений с информацией о плановых авансах сотрудников.
//
// Параметры:
//	ТаблицаСотрудников - таблица значений с колонками.
//		- Сотрудник; 
//		- Период
//	ДокументСсылка - если указать, то зарегистрированные этим документом авансы будут игнорироваться;
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь.
//
// Возвращаемое значение - таблица значений с колонками.
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс.
//
Функция АвансыСотрудников(ТаблицаСотрудников, ДокументСсылка = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если ДокументСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	КонецЕсли;	

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
		ПараметрыПостроения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает структуру с параметрами для метода СоздатьВТАвансыСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВТСотрудники - имя временной таблицы сотрудников.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВТСотрудники
//
Функция ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТСотрудники", ИмяВТСотрудники);
	
	Возврат ОписательВременныхТаблиц
	
КонецФункции

// Процедура создает временную таблицу с информацией о плановых авансах сотрудников.
// В результате выполнения в менеджере временных таблиц создается временная таблица 
// ВТАвансыСотрудников с колонками:
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс.
//
// Параметры:
//	ОписательВременныхТаблиц - структура, см. ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников; 
//	ТолькоРазрешенные - булево признак выбора только разрешенных сотрудников;
//	ДатаАктуальности - дата, на которую определяется состояние авансов;
//	Отбор - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//		Коллекция, строки которой имеют поля.
//			ЛевоеЗначение - строка, имя поля регистра сведений.
//			ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//			ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//		По умолчанию отбор не задан.
//
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь.
//
Процедура СоздатьВТАвансыСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, ДатаАктуальности, Отбор = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериодДляПолученияАвансов
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники",		ОписательВременныхТаблиц.ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отбор;
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиИПериодДляПолученияАвансов",
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ПОМЕСТИТЬ ВТАвансыСотрудников
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиИПериодДляПолученияАвансов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Пересчет тарифных ставок

// Заполняет набор записей регистра порядка пересчета тарифных ставок сотрудников.
//
Процедура СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ПорядокПересчетаТарифнойСтавки) Экспорт 

	Если Не ЗначениеЗаполнено(ПорядокПересчетаТарифнойСтавки) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПорядокПересчетаТарифнойСтавки.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ПорядокПересчетаТарифнойСтавки);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЕстьПериодыВозвратныхСобытий = Ложь;
	Для Каждого СтрокаДвижений Из ПорядокПересчетаТарифнойСтавки Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
		Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий И ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ЕстьПериодыВозвратныхСобытий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий Тогда
		ИспользуютсяВозвратныеСобытия = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяВозвратныеСобытия Тогда 
	
		ИзмеренияДаты.Свернуть("Сотрудник, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПорядокРасчетаСтоимостиЕдиницыВремени.Период, ДЕНЬ) КАК ДатаСобытия,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ФизическоеЛицо,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета КАК ТекущееЗначение
		|ИЗ
		|	ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени";
		
		Выборка = Запрос.Выполнить().Выбрать();

		ПорядокПересчетаТарифнойСтавки.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда"));
		СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Строка = ПорядокПересчетаТарифнойСтавки.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из ПорядокПересчетаТарифнойСтавки Цикл
		
		Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ПорядокРасчета = Строка.ПорядокРасчета;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПорядокРасчетаПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц) Экспорт 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
КонецПроцедуры

Функция ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(ТаблицаФильтр) Экспорт 
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтр, "Сотрудник");
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
															"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников", 
															МенеджерВременныхТаблиц,
															Истина,
															ОписаниеФильтра,
															ПараметрыПостроения);
										
	ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Сортировать("Сотрудник, Период", Новый СравнениеЗначений);	
	
	
	ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Колонки.Период.Имя = "ДатаНачала";							
	ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаФильтр, "Сотрудник");	
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицы Из ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников Цикл
		Если ПредыдущаяСтрока <> Неопределено 
			И ПредыдущаяСтрока.Сотрудник = СтрокаТаблицы.Сотрудник Тогда
			
			ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаТаблицы.ДатаНачала) - 1;
		ИначеЕсли ПредыдущаяСтрока <> Неопределено Тогда
			СтруктураПоиска.Сотрудник = ПредыдущаяСтрока.Сотрудник;
			СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
				Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
					И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
					
					ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
					Прервать;
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;	
			
		ПредыдущаяСтрока = СтрокаТаблицы;		
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		СтруктураПоиска.Сотрудник = ПредыдущаяСтрока.Сотрудник;
		СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
			Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
				И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
				
				ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
				Прервать;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;	

	Возврат ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников;
КонецФункции	

Процедура СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц) Экспорт 

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"),,
		"ВТЗначенияСовокупныхТарифныхСтавокСотрудников");
	
КонецПроцедуры

Функция ДоляНеполногоВремени(ДанныеГрафика, КадровыеДанные) Экспорт
	Если КадровыеДанные = Неопределено
		Или Не ЗначениеЗаполнено(КадровыеДанные.КоличествоСтавок) Тогда
		
		КоличествоСтавок = 1;
	Иначе
		КоличествоСтавок = КадровыеДанные.КоличествоСтавок;
	КонецЕсли;	
	
	ДоляНеполногоВремени = 1;
	
	Если ДанныеГрафика <> Неопределено
		И  ЗначениеЗаполнено(ДанныеГрафика.ГрафикРаботы)
		И  ЗначениеЗаполнено(ДанныеГрафика.ГрафикПолногоРабочегоВремени)
		И  ДанныеГрафика.ГрафикРаботы <> ДанныеГрафика.ГрафикПолногоРабочегоВремени
		И  ДанныеГрафика.ДлительностьРабочейНедели <> 0
		И  ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени <> 0
		И  ДанныеГрафика.ДлительностьРабочейНедели <> ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени Тогда
		
		ДоляНеполногоВремени = ДанныеГрафика.ДлительностьРабочейНедели / ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени;
	Иначе 
		ДоляНеполногоВремени = КоличествоСтавок;
	КонецЕсли;	
	
	Возврат ДоляНеполногоВремени;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Регистрация движений по регистрам расчета.

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
		"МенеджерВременныхТаблиц, 
		|Начисления, 
		|НачисленияПоСотрудникам, 
		|ПоказателиНачислений,
		|ОтработанноеВремяПоСотрудникам,
		|Удержания, 
		|УдержанияПоСотрудникам, 
		|ПоказателиУдержаний,
		|УдержанияПоИсполнительнымДокументам, 
		|УдержанияДоПределаПоСотрудникам,
		|ЗадолженностьПоУдержаниям,
		|ДополнениеРасчетнойБазыУдержаний,
		|НДФЛ, 
		|НДФЛПоСотрудникам, 
		|УчтенныеПриРасчетеДокументы, 
		|КорректировкиВыплаты, 
		|КорректировкиВыплатыПоСотрудникам, 
		|ИсчисленныйНДФЛ, 
		|ИсчисленныеВзносы,
		|СтраховыеВзносы,
		|Пособия,
		|ПособияПоУходу,
		|ДанныеДляУчетаПособийПриУвольнении";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УчетСреднегоЗаработка.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	ЗаймыСотрудникам.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	СостоянияСотрудников.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриОписанииДанныхДляПроведенияДокумента(ДанныеДляПроведения);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения начислениями и 
// временной таблицей ВТНачисления.
//	
// Параметры:
//		ДанныеДляПроведения - структура с данными для проведения
//		Документ - ссылка на проводящийся документ
//		ТаблицаНачислений - имя (имена через запятую) табличной части с начислениями, не обязательно, по умолчанию -
//		                    "Начисления".
//		ПолеДатыДействия - поле запроса для получения даты действия, по умолчанию дата действия - месяц 
//				начисления первичного документа, т.е. "Ссылка.МесяцНачисления".
//		ПолеВидаНачисления - строка с именами (через запятую) полей, содержащих вид расчета в каждой из таблиц, по
//		                     умолчанию - Начисление.
//		СписокФизическихЛиц - массив ссылок на физлиц, которыми ограничиваются собираемые данные.
//							Если не задан - собираются все данные 
//		ПолеПериодРегистрации = поле запроса для получения даты действия, по умолчанию дата действия - месяц 
//							начисления документа, т.е. "Ссылка.МесяцНачисления", 
//		СторнируемыйДокументКакСторно - признак того, что записи в которых заполнен СторнируемыйДокумент 
//							нужно воспринимать как Сторно. По умолчанию - Ложь
//
Процедура ЗаполнитьНачисления(ДанныеДляПроведения, Документ, ТаблицаНачислений = "Начисления", ПолеДатыДействия = "Ссылка.МесяцНачисления", ПолеВидаНачисления = "Начисление", СписокФизическихЛиц = Неопределено, ПолеПериодРегистрации = "Ссылка.МесяцНачисления", СторнируемыйДокументКакСторно = Ложь) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Если МетаданныеДокумента.Имя = "СторнированиеНачислений" Тогда
		ДокументНачисления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СторнируемыйДокумент");
	Иначе
		ДокументНачисления = Документ;
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	
	// Поля, которые есть не во всех табличных частях, проверяем, и если нет, заменяем на NULL.
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("РанееНачислено", "0");
	НеобязательныеПоля.Вставить("СуммаВычета", "0");
	НеобязательныеПоля.Вставить("СкидкаПоВзносам", "0");
	НеобязательныеПоля.Вставить("КодВычета", "ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("Сторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксСторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксЗаполнение", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("СторнируемыйДокумент", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ДатаНачала", ПолеДатыДействия);
	НеобязательныеПоля.Вставить("ДатаОкончания", "КОНЕЦПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ПериодДействия", "НАЧАЛОПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ГрафикРаботы", "ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ГрафикРаботыНорма", "ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ВремяВЦеломЗаПериод", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ВидУчетаВремени", "ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ВремяВЧасах", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ОтработаноДней", "0");
	НеобязательныеПоля.Вставить("ОтработаноЧасов", "0");
	НеобязательныеПоля.Вставить("ОплаченоДней", "0");
	НеобязательныеПоля.Вставить("ОплаченоЧасов", "0");
	НеобязательныеПоля.Вставить("НормаДней", "0");
	НеобязательныеПоля.Вставить("НормаЧасов", "0");
	НеобязательныеПоля.Вставить("ПериодРегистрацииВремени", "ДАТАВРЕМЯ(1, 1, 1)");
	НеобязательныеПоля.Вставить("РасчетнаяБазаЗаЕдиницуНормыВремени", "0");
	НеобязательныеПоля.Вставить("ФиксСтрока", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксРасчетВремени", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ДокументОснование", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ПериодРегистрации", "НАЧАЛОПЕРИОДА(" + ПолеПериодРегистрации + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ВидЗанятости", "ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("СуммаВсегоПоУходуЗаПервымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаСверхНормПоУходуЗаПервымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаВсегоПоУходуЗаВторымРебенком", "0");
	НеобязательныеПоля.Вставить("СуммаСверхНормПоУходуЗаВторымРебенком", "0");
	НеобязательныеПоля.Вставить("ФинансированиеФедеральнымБюджетом", "ЗНАЧЕНИЕ(Перечисление.ОснованияФинансированияПособияФедеральнымБюджетом.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("СтраховойСлучай", "ЗНАЧЕНИЕ(Документ.ОтпускПоУходуЗаРебенком.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("КоличествоДетей", "0");
	НеобязательныеПоля.Вставить("КоличествоПервыхДетей", "0");
	НеобязательныеПоля.Вставить("МестоПолученияДохода", "ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)");
	НеобязательныеПоля.Вставить("РегистраторРазовогоНачисления", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ИсходныйДокумент", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("РезультатФСС", "0");
	НеобязательныеПоля.Вставить("СуммаДоходаНеОблагаемаяНДФЛ", "0");
	
	// Составляем текст запроса создания временной таблицы ВТЗаписиНачислений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		// Составляем текст объединения - части запроса.
		ТекстОбъединения = 
			"ВЫБРАТЬ
			|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
			|	Начисления.Ссылка КАК ДокументСсылка,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение КАК Подразделение,
			|	Начисления.МестоПолученияДохода КАК МестоПолученияДохода,
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.ДатаНачала КАК ДатаНачала,
			|	Начисления.ДатаОкончания КАК ДатаОкончания,
			|	Начисления.ДатаНачала КАК НачалоБазовогоПериода,
			|	Начисления.ДатаОкончания КАК ОкончаниеБазовогоПериода,
			|	Начисления.ДатаДействия КАК ДатаДействия,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ДокументОснование КАК ДокументОснование,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.РанееНачислено КАК РанееНачислено,
			|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
			|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
			|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод,
			|	Начисления.ОбщийГрафик КАК ОбщийГрафик,
			|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
			|	Начисления.ОтработаноДней КАК ОтработаноДней,
			|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
			|	Начисления.НормаДней КАК НормаДней,
			|	Начисления.НормаЧасов КАК НормаЧасов,
			|	Начисления.ВидЗанятости КАК ВидЗанятости,
			|	Начисления.СуммаВсегоПоУходуЗаПервымРебенком КАК СуммаВсегоПоУходуЗаПервымРебенком,
			|	Начисления.СуммаСверхНормПоУходуЗаПервымРебенком КАК СуммаСверхНормПоУходуЗаПервымРебенком,
			|	Начисления.СуммаВсегоПоУходуЗаВторымРебенком КАК СуммаВсегоПоУходуЗаВторымРебенком,
			|	Начисления.СуммаСверхНормПоУходуЗаВторымРебенком КАК СуммаСверхНормПоУходуЗаВторымРебенком,
			|	Начисления.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
			|	Начисления.СтраховойСлучай КАК СтраховойСлучай,
			|	Начисления.КоличествоДетей КАК КоличествоДетей,
			|	Начисления.КоличествоПервыхДетей КАК КоличествоПервыхДетей,
			|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
			|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремени,
			|	Начисления.Сторно КАК Сторно,
			|	Начисления.ФиксСторно КАК ФиксСторно,
			|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
			|	Начисления.ФиксРасчет КАК ФиксРасчет,
			|	Начисления.ФиксСтрока КАК ФиксСтрока,
			|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
			|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
			|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
			|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	Начисления.ОплаченоДней КАК ОплаченоДней,
			|	Начисления.ОплаченоЧасов КАК ОплаченоЧасов,
			|	Начисления.СуммаВычета КАК СуммаВычета,
			|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
			|	Начисления.КодВычета КАК КодВычета,
			|	ВЫБОР
			|		КОГДА Начисления.Начисление.ВидОтпуска.ОтпускЯвляетсяЕжегодным
			|			ТОГДА Начисления.Начисление.ВидОтпуска
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|	КОНЕЦ КАК ВидЕжегодногоОтпуска,
			|	Начисления.Начисление.ИспользованиеПериода КАК ИспользованиеПериода,
			|	Начисления.Начисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда КАК ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда,
			|	ЛОЖЬ КАК Перерасчет,
			|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
			|	Начисления.ИсходныйДокумент КАК ИсходныйДокумент,
			|	Начисления.РезультатФСС КАК РезультатФСС,
			|	Начисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
			|	Начисления.СуммаДоходаНеОблагаемаяНДФЛ КАК СуммаДоходаНеОблагаемаяНДФЛ
			|ПОМЕСТИТЬ ВТЗаписиНачислений
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка";
		
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли;
		
		Если Не ПерваяТаблица Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ПОМЕСТИТЬ ВТЗаписиНачислений", "");
		КонецЕсли;
		
		Если СтрНайти(ИмяТаблицыНачислений, "Перерасчет") <> 0 Тогда 
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ЛОЖЬ КАК Перерасчет", "ИСТИНА КАК Перерасчет");
		КонецЕсли;
		
		// Проверяем необязательные поля.
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений];
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поле присутствует в метаданных табличной части - не делаем замен.
				Продолжить;
			КонецЕсли;
			
			Если ИмяПоля <> "ДокументОснование" И МетаданныеДокумента.Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поля нет в табличной части, но оно  присутствует в метаданных документа - заменяем на обращение "через .".
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", "Начисления.Ссылка." + ИмяПоля + " КАК");		
			Иначе
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяТаблицыНачислений = "Сторнировано" И МетаданныеДокумента.Имя = "СторнированиеНачислений" Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления.ДокументОснование КАК",
				"ВЫБОР
				|	КОГДА Начисления.ДокументОснование = НЕОПРЕДЕЛЕНО ТОГДА ЗНАЧЕНИЕ(Документ." + ДокументНачисления.Метаданные().Имя + ".ПустаяСсылка)
				|	ИНАЧЕ Начисления.ДокументОснование
				|КОНЕЦ КАК");
		КонецЕсли;
		
		// Выполняем замену параметризуемых имен полей.
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ДатаДействия КАК ДатаДействия", ПолеДатыДействия + " КАК ДатаДействия");
		
		// Подменяем поле начисления и всего, что с ним связано, лишь в случае, если в анализируемой таблице нет поля "по
		// умолчанию".
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Начисление") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление КАК Начисление", ПолеВидаНачисления + " КАК Начисление");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления.Начисление В (&РазовыеНачисления)", ПолеВидаНачисления + " В (&РазовыеНачисления)");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ВидОтпуска", ПолеВидаНачисления + ".ВидОтпуска");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ИспользованиеПериода", ПолеВидаНачисления + ".ИспользованиеПериода");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда", ПолеВидаНачисления + ".ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", ПолеВидаНачисления + ".КатегорияНачисленияИлиНеоплаченногоВремени");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	РазовыеНачисления = ПланыВидовРасчета.Начисления.РазовыеНачисления();
	Запрос.УстановитьПараметр("РазовыеНачисления", РазовыеНачисления);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	СкорректироватьПериодВТНачислений(ДанныеДляПроведения.МенеджерВременныхТаблиц, "ВТЗаписиНачислений");
	
	// Используется для заполнения поля СтатьяРасходов строк начислений,
	// которые входят в НачисленияРегистрируемыеДокументом.
	СтатьяСпособаРасчетовДокумента 		= Неопределено;
	ПравилаУчетаНачисленийСотрудников 	= Новый Соответствие;
	
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	ОписаниеПоляСтатьяРасходов = "РаспределениеНачислений.СтатьяРасходов";
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
		ОписаниеПоляСтатьяРасходов = "
		|ВЫБОР
		|		КОГДА РаспределениеНачислений.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА &РасчетыПоОплатеТруда
		|		ИНАЧЕ РаспределениеНачислений.СтатьяРасходов
		|	КОНЕЦ";
	КонецЕсли;
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ИспользоватьСтатьиФинансирования Тогда
		
		// Дополнить данными о распределении начислений по источникам финансирования.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	РаспределениеНачислений.Территория КАК Территория,
			|	ЗаписиНачислений.МестоПолученияДохода КАК МестоПолученияДохода,
			|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	РаспределениеНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
			|	&ОписаниеПоляСтатьяРасходов КАК СтатьяРасходов,
			|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
			|	РаспределениеНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияСРаспределением
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ #РаспределениеРезультатовНачислений КАК РаспределениеНачислений
			|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
			|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовНачислений", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовНачислений");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПоляСтатьяРасходов",ОписаниеПоляСтатьяРасходов);
		
		Запрос.Выполнить();
		
	Иначе
		
		ПравилаУчетаНачисленийСотрудников = УчетНачисленнойЗарплатыПовтИсп.ПравилаУчетаНачисленийСотрудников();
		Если МетаданныеДокумента.Реквизиты.Найти("СпособРасчетовСФизическимиЛицами") <> Неопределено Тогда
			СпособРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СпособРасчетовСФизическимиЛицами");
			СтатьяСпособаРасчетовДокумента = СтатьиРасходовПоСпособамРасчетов[СпособРасчетов];
		КонецЕсли;
		
		УдалитьВТ = Новый Массив;
		УчетНачисленнойЗарплатыРасширенный.СоздатьВТСтатьиРасходовНачисленийПоСпособамРасчетов(ДанныеДляПроведения.МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить("ВТСтатьиРасходовНачисленийПоСпособамРасчетов");
		
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация) Тогда
			// Извлекаем данные из табличной части с распределением.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория,
				|	СУММА(Распределение.Результат) КАК Результат,
				|	СУММА(Распределение.СуммаВычета) КАК СуммаВычета,
				|	СУММА(Распределение.СкидкаПоВзносам) КАК СкидкаПоВзносам
				|ПОМЕСТИТЬ ВТРаспределениеПоТерриториям
				|ИЗ
				|	#ТаблицаРаспределения КАК Распределение
				|ГДЕ
				|	Распределение.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
			Запрос.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЕСТЬNULL(СтатьиРасходовНачислений.СтатьяРасходов, &РасчетыПоОплатеТруда) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
			|	ЕСТЬNULL(РаспределениеНачислений.СкидкаПоВзносам, ЗаписиНачислений.СкидкаПоВзносам) КАК СкидкаПоВзносам,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияСРаспределением
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийПоСпособамРасчетов КАК СтатьиРасходовНачислений
			|		ПО ЗаписиНачислений.Начисление = СтатьиРасходовНачислений.Ссылка";
			Запрос.Выполнить();   
			
		Иначе

			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЕСТЬNULL(СтатьиРасходовНачислений.СтатьяРасходов, &РасчетыПоОплатеТруда) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЗаписиНачислений.Сумма КАК Сумма,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗаписиНачислений.СуммаВычета КАК СуммаВычета,
			|	ЗаписиНачислений.СкидкаПоВзносам КАК СкидкаПоВзносам,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияСРаспределением
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовНачисленийПоСпособамРасчетов КАК СтатьиРасходовНачислений
			|		ПО ЗаписиНачислений.Начисление = СтатьиРасходовНачислений.Ссылка";   
			Запрос.Выполнить();
			
		КонецЕсли;
		
		ЗарплатаКадры.УничтожитьВТ(ДанныеДляПроведения.МенеджерВременныхТаблиц, УдалитьВТ);
		
	КонецЕсли;
	
	// Готовим ВТНачисления
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаписиНачислений.ИдентификаторСтроки,
			|	ЗаписиНачислений.Сотрудник,
			|	ЗаписиНачислений.ПериодРегистрации,
			|	ЗаписиНачислений.ПериодДействия,
			|	ВЫБОР
			|		КОГДА ЗаписиНачислений.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
			|			И ЗаписиНачислений.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
			|			ТОГДА ЗаписиНачислений.НачалоБазовогоПериода
			|		ИНАЧЕ ЗаписиНачислений.ДатаНачала
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА ЗаписиНачислений.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
			|			И ЗаписиНачислений.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
			|			ТОГДА ЗаписиНачислений.ОкончаниеБазовогоПериода
			|		ИНАЧЕ ЗаписиНачислений.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	ЗаписиНачислений.Начисление,
			|	ЗаписиНачислений.ДокументОснование,
			|	ЗаписиНачислений.Сумма КАК СуммаДохода,
			|	ЗаписиНачислений.СуммаВычета КАК СуммаВычетаНДФЛ,
			|	ЗаписиНачислений.СкидкаПоВзносам КАК СуммаВычетаВзносы,
			|	ЗаписиНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ЗаписиНачислений.Подразделение,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.МестоПолученияДохода КАК МестоПолученияДохода,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.СторнируемыйДокумент
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений";
		Если СторнируемыйДокументКакСторно Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				" КАК Сторно,", 
				" ИЛИ ЗаписиНачислений.СторнируемыйДокумент <> НЕОПРЕДЕЛЕНО КАК Сторно,");
		КонецЕсли;
		Запрос.Выполнить();
	Иначе
		// Извлекаем данные из табличной части с распределением.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.Результат,
			|	Распределение.СуммаВычета,
			|	Распределение.СкидкаПоВзносам
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
			|ИЗ
			|	#ТаблицаРаспределения КАК Распределение
			|ГДЕ
			|	Распределение.Ссылка = &Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
		Запрос.Выполнить();
		// Формируем ВТНачисления.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РаспределениеНачислений.ИдентификаторСтроки, ЗаписиНачислений.ИдентификаторСтроки) КАК ИдентификаторСтроки,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК Подразделение,
			|	ВЫБОР
			|		КОГДА ЗаписиНачислений.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
			|			И ЗаписиНачислений.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
			|			ТОГДА ЗаписиНачислений.НачалоБазовогоПериода
			|		ИНАЧЕ ЗаписиНачислений.ДатаНачала
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА ЗаписиНачислений.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
			|			И ЗаписиНачислений.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда = ЗНАЧЕНИЕ(Перечисление.ПорядокОпределенияМесяцаДоходаВВидеОплатыТруда.ПоПериодуДействия)
			|			ТОГДА ЗаписиНачислений.ОкончаниеБазовогоПериода
			|		ИНАЧЕ ЗаписиНачислений.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	ЕСТЬNULL(РаспределениеНачислений.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(РаспределениеНачислений.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК СуммаДохода,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
			|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычетаНДФЛ,
			|	ЕСТЬNULL(РаспределениеНачислений.СкидкаПоВзносам, ЗаписиНачислений.СкидкаПоВзносам) КАК СуммаВычетаВзносы,
			|	ЗаписиНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
		Если СторнируемыйДокументКакСторно Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				" КАК Сторно,", 
				" ИЛИ ЗаписиНачислений.СторнируемыйДокумент <> НЕОПРЕДЕЛЕНО КАК Сторно,");
		КонецЕсли;
		Запрос.Выполнить();
	КонецЕсли;
	
	// Готовим таблицу для регистрации доходов в учете НДФЛ (ВТНачисленияДляУчетаДоходовНДФЛ)
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НачисленияДокумента.МестоПолученияДохода ЕСТЬ НЕ NULL 
	|				И НачисленияДокумента.МестоПолученияДохода <> НЕОПРЕДЕЛЕНО
	|				И НачисленияДокумента.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|				И НачисленияДокумента.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА НачисленияДокумента.МестоПолученияДохода
	|		ИНАЧЕ НачисленияДокумента.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	НачисленияДокумента.*
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаДоходовНДФЛ
	|ИЗ
	|	ВТНачисления КАК НачисленияДокумента";
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. Начисления
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений";
	ДанныеДляПроведения.Начисления = Запрос.Выполнить().Выгрузить();
	
	// 2. Начисления с учетом возможного распределения по источникам финансирования.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТНачисленияСРаспределением КАК ЗаписиНачислений";
	ДанныеДляПроведения.НачисленияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	ВидДокумента = ВидДокументаНачисленияПоДокументу(ДокументНачисления);
	ВидыДокументовНачислений = ЗарплатаКадрыРасширенныйПовтИсп.ВидыДокументовНачислений();
	НачисленияРегистрируемыеДокументом = ВидыДокументовНачислений[ВидДокумента];
	ОсобыеНачисленияРегистрируемыеДокументом = ОсобыеНачисленияРегистрируемыеДокументом(ДокументНачисления);
	
	Если НачисленияРегистрируемыеДокументом = Неопределено Тогда
		НачисленияРегистрируемыеДокументом = ОсобыеНачисленияРегистрируемыеДокументом;
	ИначеЕсли ОсобыеНачисленияРегистрируемыеДокументом <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НачисленияРегистрируемыеДокументом, ОсобыеНачисленияРегистрируемыеДокументом);
	КонецЕсли;
	
	Если НачисленияРегистрируемыеДокументом <> Неопределено Тогда
		Для каждого СтрокаТЗ Из ДанныеДляПроведения.НачисленияПоСотрудникам Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДокументОснование) Тогда
				Если НачисленияРегистрируемыеДокументом.Найти(СтрокаТЗ.Начисление) <> Неопределено Тогда
					СтрокаТЗ.ДокументОснование = ДокументНачисления;
				КонецЕсли;
			КонецЕсли;
			Если Не ИспользоватьСтатьиФинансирования И ЗначениеЗаполнено(СтатьяСпособаРасчетовДокумента) И НачисленияРегистрируемыеДокументом.Найти(СтрокаТЗ.Начисление)<> Неопределено Тогда
				Правило = ПравилаУчетаНачисленийСотрудников[СтрокаТЗ.Начисление];
				Если Правило <> Неопределено И Правило.ДоступноИзменениеСпособаРасчетов Тогда
					СтрокаТЗ.СтатьяРасходов = СтатьяСпособаРасчетовДокумента;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		МодульГрантыНеоблагаемыеНДФЛ = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		МодульГрантыНеоблагаемыеНДФЛ.ВыделитьСуммуЗаСчетГрантовИзНачислений(ДанныеДляПроведения.МенеджерВременныхТаблиц, "ВТНачисленияДляУчетаДоходовНДФЛ");
	КонецЕсли;

	// 3. Отработанное время
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений
		|ГДЕ
		|	НЕ(ЗаписиНачислений.ОтработаноДней = 0
		|				И ЗаписиНачислений.ОтработаноЧасов = 0
		|				И ЗаписиНачислений.ОплаченоДней = 0
		|				И ЗаписиНачислений.ОплаченоЧасов = 0)";
	ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам = Запрос.Выполнить().Выгрузить();
	Если НачисленияРегистрируемыеДокументом <> Неопределено Тогда
		Для каждого СтрокаТЗ Из ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЗ.ДокументОснование) Тогда
				Если НачисленияРегистрируемыеДокументом.Найти(СтрокаТЗ.Начисление)<> Неопределено Тогда
					СтрокаТЗ.ДокументОснование = ДокументНачисления;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Показатели
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение,
		|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
		|ИЗ
		|	#ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиНачислений КАК Начисления
		|		ПО (Начисления.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
		|ГДЕ
		|	ТаблицаПоказателей.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеДляПроведения.ПоказателиНачислений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, ДокументСсылка, ТаблицаУдержаний = "Удержания", СписокФизическихЛиц = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	ИменаТаблицУдержаний = СтрРазделить(ТаблицаУдержаний, ",");
	
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("Задолженность", "0");
	
	ПерваяТаблица = Истина;
	Для каждого ИмяТаблицыУдержаний Из ИменаТаблицУдержаний Цикл
		
		ТекстЗапросаТаблицы =
			"ВЫБРАТЬ
			|	Удержания.Ссылка КАК ДокументСсылка,
			|	Удержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
			|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Удержания.Сотрудник КАК Сотрудник,
			|	Удержания.Удержание КАК Удержание,
			|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
			|	Удержания.Результат КАК Сумма,
			|	Удержания.Результат КАК Результат,
			|	Удержания.Задолженность КАК Задолженность,
			|	Удержания.ДокументОснование КАК ДокументОснование,
			|	Удержания.Получатель КАК Получатель,
			|	Удержания.ПлатежныйАгент КАК ПлатежныйАгент,
			|	ВЫБОР
			|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|			ТОГДА Удержания.Получатель
			|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|			ТОГДА Удержания.ПлатежныйАгент
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|	КОНЕЦ КАК Контрагент,
			|	НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	Удержания.ДатаНачала КАК ДатаНачала,
			|	Удержания.ДатаОкончания КАК ДатаОкончания,
			|	Удержания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	Удержания.ФиксСторно КАК ФиксСторно
			|ПОМЕСТИТЬ ВТЗаписиУдержаний
			|ИЗ
			|	#ТаблицаУдержаний КАК Удержания
			|ГДЕ
			|	Удержания.Ссылка = &Ссылка
			|	И Удержания.ФизическоеЛицо В(&СписокФизическихЛиц)";
			
		Если СписокФизическихЛиц = Неопределено Тогда
			ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "И Удержания.ФизическоеЛицо В(&СписокФизическихЛиц)", "");
		КонецЕсли;
		
		ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "#ТаблицаУдержаний", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыУдержаний);
		
		// Проверяем необязательные поля.
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыУдержаний];
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			Если МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поле присутствует в метаданных табличной части - не делаем замен.
				Продолжить;
			КонецЕсли;
			ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "Удержания." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
		КонецЦикла;
		
		Если Не ПерваяТаблица Тогда
			
			ТекстЗапросаТаблицы = СтрЗаменить(ТекстЗапросаТаблицы, "ПОМЕСТИТЬ ВТЗаписиУдержаний", "");
			
			Запрос.Текст = Запрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|"
				+ ТекстЗапросаТаблицы;
			
		Иначе
			
			Запрос.Текст = ТекстЗапросаТаблицы;
			ПерваяТаблица = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Выполнить();
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда

		ОписаниеПоляСтатьяРасходов = "РаспределениеУдержаний.СтатьяРасходов";
		Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
			СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
			РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
			Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
			ОписаниеПоляСтатьяРасходов = "
			|ВЫБОР
			|		КОГДА РаспределениеУдержаний.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|			ТОГДА &РасчетыПоОплатеТруда
			|		ИНАЧЕ РаспределениеУдержаний.СтатьяРасходов
			|	КОНЕЦ";
		КонецЕсли;
		
		// Дополнить данными о распределении удержаний по источникам финансирования.
		ОтражениеЗарплатыВУчетеРасширенный.СоздатьВТУдержанияПоСотрудникамКонтрагент(Запрос.МенеджерВременныхТаблиц, "ВТЗаписиУдержаний");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
			|	РаспределениеУдержаний.Подразделение КАК Подразделение,
			|	РаспределениеУдержаний.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
			|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
			|	&ОписаниеПоляСтатьяРасходов КАК СтатьяРасходов,
			|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
			|	РаспределениеУдержаний.Результат КАК Сумма,
			|	ЕСТЬNULL(УдержанияПоСотрудникамКонтрагент.Контрагент, ЗаписиУдержаний.Контрагент) КАК Контрагент,
			|	ЗаписиУдержаний.*
			|ПОМЕСТИТЬ ВТУдержанияСРаспределением
			|ИЗ
			|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
			|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияПоСотрудникамКонтрагент КАК УдержанияПоСотрудникамКонтрагент
			|		ПО (ЗаписиУдержаний.ДокументОснование = УдержанияПоСотрудникамКонтрагент.ДокументОснование)
			|			И (ЗаписиУдержаний.ФизическоеЛицо = УдержанияПоСотрудникамКонтрагент.ФизическоеЛицо)
			|			И (ЗаписиУдержаний.Удержание = УдержанияПоСотрудникамКонтрагент.Удержание)
			|			И (ЗаписиУдержаний.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТУдержанияПоСотрудникамКонтрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПоляСтатьяРасходов", ОписаниеПоляСтатьяРасходов);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
			|	ЗаписиУдержаний.Сумма КАК Сумма,
			|	ЗаписиУдержаний.*
			|ПОМЕСТИТЬ ВТУдержанияСРаспределением
			|ИЗ
			|	ВТЗаписиУдержаний КАК ЗаписиУдержаний";
	КонецЕсли;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. Удержания
	Запрос.Текст = 
		"ВЫБРАТЬ * ИЗ ВТЗаписиУдержаний";
	ДанныеДляПроведенияНачисленияЗарплаты.Удержания = Запрос.Выполнить().Выгрузить();
	
	// 2. Удержания с возможным распределением по источникам финансирования.
	Запрос.Текст = 
		"ВЫБРАТЬ * ИЗ ВТУдержанияСРаспределением";
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 3. Удержания по исполнительным документам.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспределениеУдержаний.СтатьяФинансирования,
			|	РаспределениеУдержаний.СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|				ТОГДА РаспределениеУдержаний.Результат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|				ТОГДА РаспределениеУдержаний.Результат
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
			|ИЗ
			|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
			|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
			|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
			|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
			|
			|СГРУППИРОВАТЬ ПО
			|	РаспределениеУдержаний.СтатьяФинансирования,
			|	РаспределениеУдержаний.СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|					ТОГДА РаспределениеУдержаний.Результат
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0
			|		ИЛИ СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|					ТОГДА РаспределениеУдержаний.Результат
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		РезультатЗапроса = Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|				ТОГДА ЗаписиУдержаний.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаУдержания,
			|	СУММА(ВЫБОР
			|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|				ТОГДА ЗаписиУдержаний.Сумма
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
			|ИЗ
			|	ВТЗаписиУдержаний КАК ЗаписиУдержаний
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
			|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
			|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаписиУдержаний.ДокументОснование,
			|	ЗаписиУдержаний.Получатель,
			|	ЗаписиУдержаний.ПлатежныйАгент,
			|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
			|
			|ИМЕЮЩИЕ
			|	(СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
			|					ТОГДА ЗаписиУдержаний.Сумма
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0
			|		ИЛИ СУММА(ВЫБОР
			|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
			|					ТОГДА ЗаписиУдержаний.Сумма
			|				ИНАЧЕ 0
			|			КОНЕЦ) <> 0)";
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоИсполнительнымДокументам = РезультатЗапроса.Выгрузить();
	
	// 4. Показатели
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение,
		|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
		|ИЗ
		|	#ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК Удержания
		|		ПО (Удержания.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
		|ГДЕ
		|	ТаблицаПоказателей.Ссылка = &Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	ДанныеДляПроведенияНачисленияЗарплаты.ПоказателиУдержаний = Запрос.Выполнить().Выгрузить();
	
	// 5. Удержания до предела по сотрудникам
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Организация КАК Организация,
		|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.Удержание КАК Удержание,
		|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ДокументОснование КАК ДокументОснование,
		|	ПредельныеСуммыУдержанийСотрудниковСрезПоследних.ПрекратитьПоДостижениюПредела КАК ПрекратитьПоДостижениюПредела
		|ПОМЕСТИТЬ ВТПредельныеСуммыУдержаний
		|ИЗ
		|	РегистрСведений.ПредельныеСуммыУдержанийСотрудников.СрезПоследних(
		|			,
		|			(Организация, ФизическоеЛицо, Удержание, ДокументОснование) В
		|				(ВЫБРАТЬ
		|					ЗаписиУдержаний.Организация,
		|					ЗаписиУдержаний.ФизическоеЛицо,
		|					ЗаписиУдержаний.Удержание,
		|					ЗаписиУдержаний.ДокументОснование
		|				ИЗ
		|					ВТЗаписиУдержаний КАК ЗаписиУдержаний)) КАК ПредельныеСуммыУдержанийСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиУдержаний.ПериодДействия КАК ПериодДействия,
		|	ЗаписиУдержаний.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ЗаписиУдержаний.Организация КАК Организация,
		|	ЗаписиУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗаписиУдержаний.Удержание КАК Удержание,
		|	ЗаписиУдержаний.ДокументОснование КАК ДокументОснование,
		|	ЗаписиУдержаний.Сумма - ЗаписиУдержаний.Задолженность КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаписиУдержаний.Сумма > ЗаписиУдержаний.Задолженность
		|			ТОГДА ЗаписиУдержаний.Сумма - ЗаписиУдержаний.Задолженность
		|		КОГДА ЗаписиУдержаний.Сумма < 0 Тогда
		|			ЗаписиУдержаний.Сумма + ЗаписиУдержаний.Задолженность
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаМежрасчет
		|ИЗ
		|	ВТЗаписиУдержаний КАК ЗаписиУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредельныеСуммыУдержаний КАК ПредельныеСуммыУдержаний
		|		ПО ЗаписиУдержаний.Организация = ПредельныеСуммыУдержаний.Организация
		|			И ЗаписиУдержаний.ФизическоеЛицо = ПредельныеСуммыУдержаний.ФизическоеЛицо
		|			И ЗаписиУдержаний.Удержание = ПредельныеСуммыУдержаний.Удержание
		|			И ЗаписиУдержаний.ДокументОснование = ПредельныеСуммыУдержаний.ДокументОснование
		|			И (ПредельныеСуммыУдержаний.ПрекратитьПоДостижениюПредела)";
		
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияДоПределаПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения данными НДФЛ.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено, РаспределениеУдержаний = Истина) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	УчетНДФЛ.СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ИсчисленныеНалоги", Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") И РаспределениеУдержаний Тогда
		
		ОписаниеПоляСтатьяРасходов = "РаспределениеУдержаний.СтатьяРасходов";
		Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
			СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
			РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
			Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
			ОписаниеПоляСтатьяРасходов = "
			|ВЫБОР
			|		КОГДА РаспределениеУдержаний.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
			|			ТОГДА &РасчетыПоОплатеТруда
			|		ИНАЧЕ РаспределениеУдержаний.СтатьяРасходов
			|	КОНЕЦ";
		КонецЕсли;
		
		// Дополнить данными о распределении по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Ссылка КАК Ссылка,
		|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
		|	РаспределениеУдержаний.ВидУдержания КАК ВидУдержания,
		|	РаспределениеУдержаний.Подразделение КАК Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
		|	&ОписаниеПоляСтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СУММА(РаспределениеУдержаний.Результат) КАК Сумма
		|ПОМЕСТИТЬ ВТРаспределениеУдержаний
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|ГДЕ
		|	РаспределениеУдержаний.Ссылка = &Ссылка
		|	И РаспределениеУдержаний.ВидУдержания В (&ИсчисленныеНалоги, ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛДоходыКонтрагентов), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛРасчетыСБывшимиСотрудниками))
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.ИдентификаторСтроки,
		|	РаспределениеУдержаний.ВидУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
		|	РаспределениеУдержаний.ВидУдержания КАК ВидУдержания,
		|	РаспределениеУдержаний.Подразделение КАК ПодразделениеСотрудника,
		|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.Сумма КАК Сумма,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТРаспределениеУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНДФЛ КАК НДФЛ
		|		ПО (НДФЛ.Ссылка = РаспределениеУдержаний.Ссылка)
		|			И (НДФЛ.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
		|ГДЕ
		|	(НДФЛ.НалогПоСтавке13 <> 0
		|			ИЛИ НДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 <> 0
		|			ИЛИ &УсловиеСПревышения)";
		СтрокаУсловия = "";
		Для каждого ИмяРесурса Из УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("НДФЛ.Налог", Истина) Цикл
			СтрокаУсловия = СтрокаУсловия + "ИЛИ " + ИмяРесурса + " <> 0" + Символы.ПС
		КонецЦикла;
		Для каждого ИмяРесурса Из УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("НДФЛ.ЗачтеноАвансовыхПлатежей", Истина) Цикл
			СтрокаУсловия = СтрокаУсловия + "ИЛИ " + ИмяРесурса + " <> 0" + Символы.ПС
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &УсловиеСПревышения", СтрокаУсловия);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеПоляСтатьяРасходов", ОписаниеПоляСтатьяРасходов);
	Иначе
		ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("НДФЛ.Налог", Истина);
		ИменаРесурсовЗачета = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("НДФЛ.ЗачтеноАвансовыхПлатежей", Истина);
		ВидыУдержанийПоКолонкамДанных = Перечисления.ВидыОсобыхНачисленийИУдержаний.СоответствиеКолонкамДанных("НДФЛ.Налог");
		ВсегоКолонокСПревышением = ИменаРесурсовНалога.Количество();
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) КАК ВидУдержания,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеСотрудника,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	НДФЛ.НалогПоСтавке13 - НДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 КАК Сумма,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТДанныеНДФЛ КАК НДФЛ
		|ГДЕ
		|	(НДФЛ.НалогПоСтавке13 <> 0
		|			ИЛИ НДФЛ.ЗачтеноАвансовыхПлатежейПоСтавке13 <> 0)
		|";
		ШаблонЗапроса = "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
		|	&ВидУдержанийПоКолонке,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка),
		|	&НалогСПревышения - &ЗачтеноАвансовыхПлатежейСПревышения,
		|	НДФЛ.*
		|ИЗ
		|	ВТДанныеНДФЛ КАК НДФЛ
		|ГДЕ
		|	(&НалогСПревышения <> 0
		|			ИЛИ &ЗачтеноАвансовыхПлатежейСПревышения <> 0)";
		Для Сч = 1 По ВсегоКолонокСПревышением Цикл
			ИмяПоляНалога = ИменаРесурсовНалога[Сч - 1];
			ИмяПараметра = "ВидУдержанийПоКолонке" + Сч;
			Запрос.УстановитьПараметр(ИмяПараметра, ВидыУдержанийПоКолонкамДанных[ИмяПоляНалога]);
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(СтрЗаменить(СтрЗаменить(ШаблонЗапроса, "ВидУдержанийПоКолонке", ИмяПараметра), "&НалогСПревышения", ИмяПоляНалога), "&ЗачтеноАвансовыхПлатежейСПревышения", ИменаРесурсовЗачета[Сч - 1]);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. НДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеНДФЛ";
	ДанныеДляПроведения.НДФЛ = Запрос.Выполнить().Выгрузить();
	
	// 2. НДФЛ с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТНДФЛПоСотрудникам";
	ДанныеДляПроведения.НДФЛПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 3. Учтенные при расчете документы
	ДанныеДляПроведения.УчтенныеПриРасчетеДокументы = УчетНДФЛРасширенный.УчтенныеПриРасчетеДокументы(ДокументСсылка, ФизическиеЛица);
	
КонецПроцедуры

// Заполняет данные для проведения данными КорректировкиВыплаты.
//
// Параметры:
//		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	РасчетЗарплаты.СоздатьВТДанныеКорректировкиВыплатыПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.ИдентификаторСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА РаспределениеУдержаний.ВидУдержания В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету))
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КорректировкаВыплаты
		|ПОМЕСТИТЬ ВТРаспределениеУдержаний
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|
		|ГДЕ
		|	РаспределениеУдержаний.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.КорректировкаВыплаты КАК КорректировкаВыплаты,
		|	0 КАК Сумма,
		|	КорректировкиВыплаты.*
		|ПОМЕСТИТЬ ВТКорректировкиВыплатыПоСотрудникам
		|ИЗ
		|	ВТРаспределениеУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКорректировкиВыплаты КАК КорректировкиВыплаты
		|		ПО (КорректировкиВыплаты.Ссылка = РаспределениеУдержаний.Ссылка)
		|			И (КорректировкиВыплаты.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	0 КАК Сумма,
		|	КорректировкиВыплаты.*
		|ПОМЕСТИТЬ ВТКорректировкиВыплатыПоСотрудникам
		|ИЗ
		|	ВТДанныеКорректировкиВыплаты КАК КорректировкиВыплаты";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. КорректировкиВыплаты
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеКорректировкиВыплаты";
	ДанныеДляПроведения.КорректировкиВыплаты = Запрос.Выполнить().Выгрузить();
	
	// 2. КорректировкиВыплаты с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТКорректировкиВыплатыПоСотрудникам";
	ДанныеДляПроведения.КорректировкиВыплатыПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения страховыми взносами.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	РасчетЗарплатыБазовый.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

Процедура СоздатьВТНачисленияПоДоговорамСРаспределением(ДанныеДляПроведения, РеквизитыДляПроведения, СписокФизическихЛиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
		
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли;
	
	МетаданныеДокумента = РеквизитыДляПроведения.Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	Начисления.Ссылка КАК ДокументСсылка,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.МестоПолученияДохода КАК МестоПолученияДохода,
	|	ВЫБОР
	|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	Начисления.Результат КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.ДокументОснование КАК Договор,
	|	ЕСТЬNULL(Начисления.ДокументОснование.НеОблагаетсяНДФЛ, ЕСТЬNULL(Начисления.ДокументОснование.Договор.НеОблагаетсяНДФЛ, ЛОЖЬ)) КАК НеОблагаетсяНДФЛ,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
	|ИЗ
	|	#ТаблицаНачислений КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНачислений", ИмяДокумента + ".НачисленияПоДоговорам");
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	Запрос.Выполнить(); 
	
	// Подготовка таблицы ВТНачисленияПоДоговорамДляУчетаНДФЛ.
	Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(РеквизитыДляПроведения.Организация) Тогда
		
		// Извлекаем данные из табличной части с распределением.
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТРаспределениеПоТерриториям") = Неопределено Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	СУММА(Распределение.Результат) КАК Результат,
			|	СУММА(Распределение.СуммаВычета) КАК СуммаВычета,
			|	СУММА(Распределение.СкидкаПоВзносам) КАК СкидкаПоВзносам
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториям
			|ИЗ
			|	#ТаблицаРаспределения КАК Распределение
			|ГДЕ
			|	Распределение.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", ИмяДокумента + ".РаспределениеПоТерриториямУсловиямТруда");
			Запрос.Выполнить();
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
		|	ЕСТЬNULL(РаспределениеНачислений.СуммаВычета, ЗаписиНачислений.СуммаВычета) КАК СуммаВычета,
		|	ЕСТЬNULL(РаспределениеНачислений.СкидкаПоВзносам, ЗаписиНачислений.СкидкаПоВзносам) КАК СкидкаПоВзносам,
		|	ВЫБОР
		|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
		|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
		|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|			ТОГДА РаспределениеНачислений.Территория
		|		ИНАЧЕ ЗаписиНачислений.Подразделение
		|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамДляУчетаНДФЛ
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
		|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
		|	ЛОЖЬ КАК ОблагаетсяЕНВД,
		|	ЗаписиНачислений.Сумма КАК Сумма,
		|	ЗаписиНачислений.СуммаВычета КАК СуммаВычета,
		|	ЗаписиНачислений.СкидкаПоВзносам КАК СкидкаПоВзносам,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамДляУчетаНДФЛ
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		// Дополнить данными о распределении начислений по источникам финансирования.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
		|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
		|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|			ТОГДА РаспределениеНачислений.Территория
		|		ИНАЧЕ ЗаписиНачислений.Подразделение
		|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
		|	РаспределениеНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
		|	РаспределениеНачислений.Территория КАК Территория,
		|	РаспределениеНачислений.СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеНачислений.ОблагаетсяЕНВД,
		|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаРаспределения КАК РаспределениеНачислений
		|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
		|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", ИмяДокумента + ".РаспределениеРезультатовНачислений");
		
		Запрос.Выполнить();
		
	Иначе
		
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(РеквизитыДляПроведения.Организация) Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
			|ИЗ
			|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
			Запрос.Выполнить();
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеУчетаЗатрат,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
			|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЛОЖЬ КАК ОблагаетсяЕНВД,
			|	ЗаписиНачислений.Сумма КАК Сумма,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
			|ИЗ
			|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений";
			Запрос.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в ДанныеДляПроведения таблицы значений с данными начислений по договорам,
// а также временную таблицу ВТНачисленияПоДоговорам.
//
Процедура ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведения, РеквизитыДляПроведения, СписокФизическихЛиц = Неопределено) Экспорт
	
	СоздатьВТНачисленияПоДоговорамСРаспределением(ДанныеДляПроведения, РеквизитыДляПроведения, СписокФизическихЛиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Если Не ЗарплатаКадры.ВТСуществует(ДанныеДляПроведения.МенеджерВременныхТаблиц, "ВТСоответствиеВидовДоходовДляСтудентов") Тогда
		УчетСтраховыхВзносовРасширенный.СформироватьВТСоответствиеВидовДоходовДляСтудентов(ДанныеДляПроведения.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Создание временных таблиц: ВТСтатьиРасходовДоговоров и ВТНачисленияСтраховыеВзносы.
	// ВТНачисленияСтраховыеВзносы используется при вызове УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы.
	// ВТСтатьиРасходовДоговоров используется ниже в запросах, удаляется после использования.
	ОтражениеЗарплатыВБухучетеРасширенный.ДанныеДляПроведенияСоздатьВТНачисленияСтраховыеВзносы(Запрос.МенеджерВременныхТаблиц, РеквизитыДляПроведения, "ВТНачисленияСтраховыеВзносы");
	УдалитьВТ = Новый Массив;
	УдалитьВТ.Добавить("ВТСтатьиРасходовДоговоров");
	
	// Таблица значений для регистрации в учете 
	// - договоров подряда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеОрганизации,
	|	НачисленияПоДоговорам.МестоПолученияДохода КАК МестоПолученияДохода,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	ВЫБОР
	|		КОГДА НачисленияСтраховыеВзносы.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЕСТЬNULL(СоответствиеВидовДоходовДляСтудентов.ВидДоходаДляСтудотрядов, НачисленияСтраховыеВзносы.КодДоходаСтраховыеВзносы)
	|		ИНАЧЕ НачисленияСтраховыеВзносы.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК ВидДохода,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.НеОблагаетсяНДФЛ КАК НеОблагаетсяНДФЛ,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СуммаВычетаВзносы,
	|	ЛОЖЬ КАК Сторно,
	|	ЗНАЧЕНИЕ(Документ.НачислениеЗарплаты.ПустаяСсылка) КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК УсловияТруда
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСтраховыеВзносы КАК НачисленияСтраховыеВзносы
	|		ПО (НачисленияСтраховыеВзносы.ИдентификаторСтроки = НачисленияПоДоговорам.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВидовДоходовДляСтудентов КАК СоответствиеВидовДоходовДляСтудентов
	|		ПО (НачисленияСтраховыеВзносы.КодДоходаСтраховыеВзносы = СоответствиеВидовДоходовДляСтудентов.ВидДохода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.МестоПолученияДохода КАК МестоПолученияДохода,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.НеОблагаетсяНДФЛ КАК НеОблагаетсяНДФЛ,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.ДокументОснование ССЫЛКА Документ.ДоговорРаботыУслуги
	|			ТОГДА НачисленияПоДоговорам.ДокументОснование.СпособОплаты
	|		КОГДА НачисленияПоДоговорам.ДокументОснование ССЫЛКА Документ.ДоговорАвторскогоЗаказа
	|			ТОГДА НачисленияПоДоговорам.ДокументОснование.СпособОплаты
	|		КОГДА НачисленияПоДоговорам.ДокументОснование ССЫЛКА Документ.ВыплатыПоДоговорамОпеки
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СпособОплаты
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорам", Запрос.Выполнить().Выгрузить());
	
	// - В учете начисленной зарплаты.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.МестоПолученияДохода КАК МестоПолученияДохода,
	|	НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.НеОблагаетсяНДФЛ КАК НеОблагаетсяНДФЛ,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	НачисленияПоДоговорам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НачисленияПоДоговорам.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|	НачисленияПоДоговорам.СкидкаПоВзносам КАК СкидкаПоВзносам
	|ИЗ
	|	#НачисленияПоДоговорам КАК НачисленияПоДоговорам";
	
	ОписаниеИсточникаДанныхДляЗамены = "#НачисленияПоДоговорам КАК НачисленияПоДоговорам";
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		ОписаниеИсточникаДанных ="
		|	ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиРасходовДоговоров КАК СтатьиРасходовДоговоров
		|		ПО НачисленияПоДоговорам.Договор = СтатьиРасходовДоговоров.Договор";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтатьяРасходов", "СтатьиРасходовДоговоров.СтатьяРасходов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ОписаниеИсточникаДанныхДляЗамены, ОписаниеИсточникаДанных);
		
	Иначе
		ОписаниеИсточникаДанных ="ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорам";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтатьяРасходов", "НачисленияПоДоговорам.СтатьяРасходов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ОписаниеИсточникаДанныхДляЗамены, ОписаниеИсточникаДанных);
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамСРаспределением", Запрос.Выполнить().Выгрузить());
	
	// - В учете НДФЛ.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.МестоПолученияДохода ЕСТЬ НЕ NULL 
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> НЕОПРЕДЕЛЕНО
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА НачисленияПоДоговорам.МестоПолученияДохода
	|		ИНАЧЕ НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации
	|	КОНЕЦ КАК Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК Сумма,
	|	НачисленияПоДоговорам.ДокументОснование КАК Договор,
	|	НачисленияПоДоговорам.НеОблагаетсяНДФЛ КАК НеОблагаетсяНДФЛ,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование КАК ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК СуммаДохода,
	|	НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|	СУММА(НачисленияПоДоговорам.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТНачисленияПоДоговорамДляУчетаНДФЛ КАК НачисленияПоДоговорам
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорам.КодВычета,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.КатегорияДохода,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.НеОблагаетсяНДФЛ,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Подразделение,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.МестоПолученияДохода ЕСТЬ НЕ NULL 
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> НЕОПРЕДЕЛЕНО
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
	|				И НачисленияПоДоговорам.МестоПолученияДохода <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА НачисленияПоДоговорам.МестоПолученияДохода
	|		ИНАЧЕ НачисленияПоДоговорам.ТерриторияВыполненияРаботВОрганизации
	|	КОНЕЦ,
	|	НачисленияПоДоговорам.ИдентификаторСтроки,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.ДокументОснование";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамДляУчетаНДФЛ", Запрос.Выполнить().Выгрузить());
	
	// - Расчетная база удержаний
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	НачисленияПоДоговорам.ПериодРегистрации КАК Период,
	|	НачисленияПоДоговорам.Организация КАК Организация,
	|	НачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Начисление КАК Начисление,
	|	СУММА(НачисленияПоДоговорам.Сумма) КАК Сумма
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО НачисленияПоДоговорам.Организация = Организации.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорам.Организация,
	|	НачисленияПоДоговорам.ПериодРегистрации,
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Начисление,
	|	Организации.ГоловнаяОрганизация";
	
	ДанныеДляПроведения.Вставить("ДополнениеРасчетнойБазыУдержаний", Запрос.Выполнить().Выгрузить());
	
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Заполняет коллекцию ПериодыРегистрации реквизитов для проведения документов
//
Процедура ЗаполнитьПериодыРегистрацииПоПериодамДокумента(РеквизитыДляПроведения, ВыборкаПоМесяцамНачалаУчета) Экспорт
	ПериодыРегистрации = Новый ТаблицаЗначений;
	ПериодыРегистрации.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	ПериодыРегистрации.Колонки.Добавить("Сотрудники", Новый ОписаниеТипов("Массив"));
	ПериодыРегистрации.Колонки.Добавить("ФизическиеЛица", Новый ОписаниеТипов("Массив"));
	ПериодыРегистрации.Колонки.Добавить("ЭтоПервыйПериод", Новый ОписаниеТипов("Булево"));
	
	ЭтоПервыйПериод = Истина;
	Пока ВыборкаПоМесяцамНачалаУчета.СледующийПоЗначениюПоля("МесяцНачалаРасчетов") Цикл
		
		Пока ВыборкаПоМесяцамНачалаУчета.Следующий() Цикл
			
			ПериодРегистрации = ВыборкаПоМесяцамНачалаУчета.МесяцНачалаРасчетов;
			ПоследнийПериод = Макс(ВыборкаПоМесяцамНачалаУчета.ПериодРегистрации, ВыборкаПоМесяцамНачалаУчета.ДатаОкончания);
			Пока ПериодРегистрации <= ПоследнийПериод Цикл
				
				Если ПериодРегистрации > ВыборкаПоМесяцамНачалаУчета.ПериодРегистрации Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаПериодаРегистрации = ПериодыРегистрации.Найти(ПериодРегистрации, "ПериодРегистрации");
				Если СтрокаПериодаРегистрации = Неопределено Тогда
					СтрокаПериодаРегистрации = ПериодыРегистрации.Добавить();
					СтрокаПериодаРегистрации.ПериодРегистрации = ПериодРегистрации;
					СтрокаПериодаРегистрации.ЭтоПервыйПериод = ЭтоПервыйПериод;
					ЭтоПервыйПериод = Ложь;
				КонецЕсли;
				
				СтрокаПериодаРегистрации.Сотрудники.Добавить(ВыборкаПоМесяцамНачалаУчета.Сотрудник);
				Если СтрокаПериодаРегистрации.ФизическиеЛица.Найти(ВыборкаПоМесяцамНачалаУчета.ФизическоеЛицо) = Неопределено Тогда
					СтрокаПериодаРегистрации.ФизическиеЛица.Добавить(ВыборкаПоМесяцамНачалаУчета.ФизическоеЛицо);
				КонецЕсли;
				
				ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РеквизитыДляПроведения.ПериодыРегистрации = ПериодыРегистрации;
КонецПроцедуры

Процедура ЗаполнитьПогашениеЗадолженностиПоУдержаниям(ДанныеДляПроведения, ДокументСсылка, МесяцНачисления, ИмяТаблицыУдержаний = "Удержания") Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&МесяцНачисления КАК Период,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	Удержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	               |	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	Удержания.Удержание КАК Удержание,
	               |	Удержания.ДокументОснование КАК ДокументОснование,
	               |	Удержания.Задолженность КАК Сумма,
	               |	ВЫБОР
	               |		КОГДА Удержания.Задолженность > Удержания.Результат
	               |			ТОГДА Удержания.Результат
	               |		ИНАЧЕ Удержания.Задолженность
	               |	КОНЕЦ КАК СуммаМежрасчет
	               |ИЗ
	               |	#ТаблицаУдержаний КАК Удержания
	               |ГДЕ
	               |	Удержания.Ссылка = &Ссылка
	               |	И Удержания.Задолженность <> 0";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + "." + ИмяТаблицыУдержаний);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПроведения.ЗадолженностьПоУдержаниям = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции-конструкторы используемых коллекций.

Функция ОписаниеТиповЧисло()

	ОписаниеТиповЧисло = Новый Структура;
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_3", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло10_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло12_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	
	Возврат ОписаниеТиповЧисло;

КонецФункции

// Конструирует таблицу начислений, аналогичную по структуре таблице расчетного документа.
//
// Параметры:
//	ИспользоватьДляПерерасчета - необязательный, по умолчанию Ложь, 
//		если Истина, будут добавлены колонки, используемые в таблицах НачисленияПерерасчет.
//
Функция ПустаяТаблицаНачисления(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Начисления.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	Начисления.Колонки.Добавить("ГрафикРаботыНорма", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	Начисления.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	Начисления.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ВремяВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Строка", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("РанееНачислено", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("РезультатФСС", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ОтработаноДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОтработаноЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	Начисления.Колонки.Добавить("ВычетПримененныйКДоходам", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("КоличествоДетей", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("СуммаВычета", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("ФиксСуммаВычета", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("СкидкаПоВзносам", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Начисления.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("ПредставлениеРаспределенияПоТерриториямУсловиямТруда", Новый ОписаниеТипов("Строка"));
	Начисления.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	Начисления.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	Начисления.Колонки.Добавить("ЯвляетсяЛьготой", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("СуммаВсегоПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаВсегоПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("СтраховойСлучай", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	Начисления.Колонки.Добавить("КоличествоПервыхДетей", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ФинансированиеФедеральнымБюджетом", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом")); 
	Начисления.Колонки.Добавить("МестоПолученияДохода", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	Начисления.Колонки.Добавить("ДоступноМестоПолученияДохода", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("РассчитыватьПоРазовымНачислениямДокумента", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("РегистраторРазовогоНачисления", Метаданные.ОпределяемыеТипы.РегистраторРазовогоНачисления.Тип);
	Начисления.Колонки.Добавить("ИсходныйДокумент", Метаданные.ОпределяемыеТипы.СторнируемыйДокумент.Тип);
	Начисления.Колонки.Добавить("СуммаДоходаНеОблагаемаяНДФЛ", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Если ИспользоватьДляПерерасчета Тогда
		Начисления.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Начисления.Колонки.Добавить("Показатель" + Счетчик);
		Начисления.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Начисления.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
		Начисления.Колонки.Добавить("ПредставлениеПоказателя" + Счетчик);
		Начисления.Колонки.Добавить("ТочностьПоказателя" + Счетчик);
		Начисления.Колонки.Добавить("ПредставлениеЗначенийПоТерриториямУсловиямТруда" + Счетчик);
	КонецЦикла;

	Возврат Начисления;
	
КонецФункции

Функция ПустаяТаблицаНачисленияПоДоговорам() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	НачисленияПоДоговорам = Новый ТаблицаЗначений;
	НачисленияПоДоговорам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияПоДоговорам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДоходаСтраховыеВзносы", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовПоСтраховымВзносам"));
	НачисленияПоДоговорам.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("СуммаВычета", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("СкидкаПоВзносам", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.АктПриемкиВыполненныхРаботОказанныхУслуг,ДокументСсылка.ДоговорАвторскогоЗаказа, ДокументСсылка.ДоговорРаботыУслуги, ДокументСсылка.ВыплатыПоДоговорамОпеки"));
	НачисленияПоДоговорам.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ПланируемаяДатаВыплаты", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	НачисленияПоДоговорам.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	НачисленияПоДоговорам.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	НачисленияПоДоговорам.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	НачисленияПоДоговорам.Колонки.Добавить("ПредставлениеРаспределенияПоТерриториямУсловиямТруда", Новый ОписаниеТипов("Строка"));
	НачисленияПоДоговорам.Колонки.Добавить("НеОблагаетсяНДФЛ", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("МестоПолученияДохода", Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип);
	
	Возврат НачисленияПоДоговорам;
	
КонецФункции

Функция ПустаяТаблицаПособия(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	Пособия = Новый ТаблицаЗначений;
	Пособия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Пособия.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Пособия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Пособия.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Пособия.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Пособия.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Пособия.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Пособия.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Пособия.Колонки.Добавить("ФинансированиеФедеральнымБюджетом", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияФинансированияПособияФедеральнымБюджетом"));
	Пособия.Колонки.Добавить("СтраховойСлучай", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	Пособия.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("КоличествоПервыхДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Пособия.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	
	Пособия.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	Пособия.Колонки.Добавить("ПредставлениеРаспределенияПоТерриториямУсловиямТруда", Новый ОписаниеТипов("Строка"));
	
	Если ИспользоватьДляПерерасчета Тогда
		Пособия.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;

	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Пособия.Колонки.Добавить("Показатель" + Счетчик);
		Пособия.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Пособия.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
		Пособия.Колонки.Добавить("ПредставлениеПоказателя" + Счетчик);
		Пособия.Колонки.Добавить("ТочностьПоказателя" + Счетчик);
		Пособия.Колонки.Добавить("ПредставлениеЗначенийПоТерриториямУсловиямТруда" + Счетчик);
	КонецЦикла;
	
	Пособия.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));

	Возврат Пособия;
	
КонецФункции

Функция ПустаяТаблицаУдержанияДокумента() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	УдержанияЗаПериод = Новый ТаблицаЗначений;
	УдержанияЗаПериод.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	УдержанияЗаПериод.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	УдержанияЗаПериод.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
	УдержанияЗаПериод.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	УдержанияЗаПериод.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания") Цикл
		УдержанияЗаПериод.Колонки.Добавить("Показатель" + Счетчик, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		УдержанияЗаПериод.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		УдержанияЗаПериод.Колонки.Добавить("КомандаРасшифровки" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ПредставлениеПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ТочностьПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод);
	
	УдержанияЗаПериод.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	УдержанияЗаПериод.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	УдержанияЗаПериод.Колонки.Добавить("Задолженность", ОписаниеТиповЧисло.ТипЧисло15_2);
	УдержанияЗаПериод.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	УдержанияЗаПериод.Колонки.Добавить("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"));
	// Добавляем поле Месяц для того, чтобы строки из разных месяцев не склеивались.
	УдержанияЗаПериод.Колонки.Добавить("Месяц");
	
	Возврат УдержанияЗаПериод;
	
КонецФункции

Функция ПустаяТаблицаНДФЛДокумента()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРаботВОрганизации.Тип));
	ТаблицаНДФЛ.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	Для каждого ИмяРесурса Из УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("Налог") Цикл
		ТаблицаНДФЛ.Колонки.Добавить(ИмяРесурса, ОписаниеТиповЧисло.ТипЧисло10_0);
	КонецЦикла;
	Для каждого ИмяРесурса Из УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("ЗачтеноАвансовыхПлатежей") Цикл
		ТаблицаНДФЛ.Колонки.Добавить(ИмяРесурса, ОписаниеТиповЧисло.ТипЧисло10_0);
	КонецЦикла;
	ТаблицаНДФЛ.Колонки.Добавить("КатегорияДохода", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичный", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозврату", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйКодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныйВычетЛичныйНалоговаяБаза", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииДоходовНДФЛ"));
	
	ТаблицаНДФЛ.Колонки.Добавить("ПримененныеВычеты", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПредставлениеВычетовКДоходам", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПредставлениеВычетовЛичных", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПредставлениеВычетовНаДетейИИмущественных", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаНДФЛ.Колонки.Добавить("ПредставлениеПериодаДействия", Новый ОписаниеТипов("Строка"));
	ТаблицаНДФЛ.Колонки.Добавить("УчтенныеОснования", Новый ОписаниеТипов("Массив"));
	
	ТаблицаНДФЛ.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаНДФЛ.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	ТаблицаНДФЛ.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаНДФЛ;
	
КонецФункции

Функция ПустаяТаблицаУчтенныеПриРасчетеНДФЛДокументы() Экспорт
	
	УчтенныеПриРасчетеНДФЛДокументы = Новый ТаблицаЗначений;
	УчтенныеПриРасчетеНДФЛДокументы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УчтенныеПриРасчетеНДФЛДокументы.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.РегистраторыДоходовПоНДФЛ.Тип);
	Возврат УчтенныеПриРасчетеНДФЛДокументы;
	
КонецФункции

Функция ПустаяТаблицаПримененныеВычетыНДФЛДокумента()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаВычеты = УчетНДФЛ.ТаблицаПримененныеВычетыНДФЛ();
	ТаблицаВычеты.Колонки.Добавить("ГруппаВычета", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыВычетовПоНДФЛ"));
	ТаблицаВычеты.Колонки.Добавить("КодВычетаПредыдущий", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ТаблицаВычеты.Колонки.Добавить("РазмерВычетаПредыдущий", ОписаниеТиповЧисло.ТипЧисло12_2);
	ТаблицаВычеты.Колонки.Добавить("МесяцПериодаПредоставленияВычетаСтрокой", Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаВычеты;
	
КонецФункции

Функция ПустаяТаблицаВзносыДокумента() 
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ПоляВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы());
	
	ТаблицаВзносы = Новый ТаблицаЗначений;
	ТаблицаВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносы.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	ТаблицаВзносы.Колонки.Добавить("ДатаПолученияДоходаСтрокой", Новый ОписаниеТипов("Строка"));
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ТаблицаВзносы.Колонки.Добавить(ИмяПоля, ОписаниеТиповЧисло.ТипЧисло15_2);
	КонецЦикла;
	
	Возврат ТаблицаВзносы;
	
КонецФункции

Функция ПустаяТаблицаПогашениеЗаймов()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаПогашениеЗаймов = Новый ТаблицаЗначений;
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ДоговорЗайма", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("МатериальнаяВыгода", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НалогНаМатериальнуюВыгоду", ОписаниеТиповЧисло.ТипЧисло10_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НачисленоПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеЗайма", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("СтавкаНалогообложенияМатвыгоды", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	ТаблицаПогашениеЗаймов.Колонки.Добавить("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПогашениеЗаймов;
	
КонецФункции

Функция ПустаяТаблицаПлановыхНачислений() Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	ТаблицаНачислений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииПлановыхНачислений(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ТаблицаНачислений.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	
	ЗначенияПоказателей.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗначенияПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ЗначенияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ЗначенияПоказателей.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	Возврат ЗначенияПоказателей;
	
КонецФункции

Функция ОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	ДанныеЗаполнения = Новый Структура(
		"Начисления, 
		|НачисленияПерерасчет,
		|НачисленияПоДоговорам, 
		|Пособия, 
		|ПособияПерерасчет,
		|Удержания, 
		|УдержанияПерерасчет, 
		|НДФЛ, 
		|КорректировкиВыплаты, 
		|ПримененныеВычетыНаДетейИИмущественные, 
		|ПогашениеЗаймов, 
		|Взносы,
		|СотрудникиПерерасчет");
	
	// По умолчанию это перечислимые коллекции.
	ДанныеЗаполнения.Начисления = Новый ТаблицаЗначений;
	ДанныеЗаполнения.НачисленияПерерасчет = Новый ТаблицаЗначений;
	ДанныеЗаполнения.НачисленияПоДоговорам = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Пособия = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПособияПерерасчет = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Удержания = Новый ТаблицаЗначений;
	ДанныеЗаполнения.УдержанияПерерасчет = Новый Массив;
	ДанныеЗаполнения.НДФЛ = Новый ТаблицаЗначений;
	ДанныеЗаполнения.КорректировкиВыплаты = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПримененныеВычетыНаДетейИИмущественные = Новый ТаблицаЗначений;
	ДанныеЗаполнения.ПогашениеЗаймов = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Взносы = Новый ТаблицаЗначений;
	ДанныеЗаполнения.СотрудникиПерерасчет = Новый ТаблицаЗначений;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриОписанииДанныхЗаполненияТаблицДокумента(ДанныеЗаполнения);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Создает таблицу для регистрации движений по регистру ПрименениеПлановыхНачислений.
//
Функция ПустаяТаблицаРегистрацииПримененияПлановыхНачислений() Экспорт
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРегистрации.Колонки.Добавить("Применение", Новый ОписаниеТипов("Булево"));
	ТаблицаРегистрации.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("ПрименениеПоОкончании", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаРегистрации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции служебного программного интерфейса.

// Описание - возвращает пустую таблицу для базы распределения ранее начисленных сумм 
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//   * Сотрудник - СправочникСсылка.Сотрудники -
//   * Регистратор 
//   * ДатаНачала - Дата -
//   * ДатаОкончания - Дата -
//   * ДатаНачалаПериодаНормирования - Дата -
//   * ДатаОкончанияПериодаНормирования - Дата -
//   * ПериодРегистрации - Дата -
//   * ПериодДействия - Дата -
//   * Организация - СправочникСсылка.Организации -
//   * Сторно - Булево -
//   * ФиксСторно - Булево -
//   * Начисление - ПланВидовРасчетаСсылка.Начисления -
//   * ДокументОснование - ОпределяемыйТип.ОснованиеНачисления - 
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники -
//   * ГрафикРаботыНорма - СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.Сотрудники -
//   * ОбщийГрафик - СправочникСсылка.ГрафикиРаботыСотрудников -
//   * ПериодРегистрацииВремени - Дата -
//   * ПериодРегистрацииНормыВремени - Дата -
//   * ВремяВЧасах - Булево -
//   * ВремяВЦеломЗаПериод - Булево -
//   * ИдентификаторСтроки - Число -
//   * ИдентификаторСтрокиБазы - Число -
//   * Результат - Число -
//   * Коэффициент - Число -
//
Функция НовыйБазаРаспределенияРанееНачисленныхСумм() Экспорт
	БазаРаспределенияРанееНачисленныхСумм = Новый ТаблицаЗначений;
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ДатаНачалаПериодаНормирования", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ДатаОкончанияПериодаНормирования", Новый ОписаниеТипов("Дата"));	
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);	
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ГрафикРаботыНорма", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ОбщийГрафик", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ПериодРегистрацииНормыВремени", Новый ОписаниеТипов("Дата"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ВремяВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("ИдентификаторСтрокиБазы", Новый ОписаниеТипов("Число"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	БазаРаспределенияРанееНачисленныхСумм.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	Возврат БазаРаспределенияРанееНачисленныхСумм;
КонецФункции	

// Описание
// 
// Параметры:
// 	РаспределяемыеНачисления - ТаблицаЗначений: 
//   * Сотрудник - СправочникСсылка.Сотрудники - 
//   * Организация - СправочникСсылка.Организации 
//   * Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//   * Начисление - ПланВидовРасчетаСсылка.Начисления
//   * ДатаНачала - Дата
//   * ДатаОкончания - Дата
//   * ИдентификаторСтроки - Число
//   * ПериодДействия - Дата
//   * ПериодРегистрации - Дата
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   * ДокументОснование - ОпределяемыйТип.ОснованиеНачисления
//
// Возвращаемое значение:
// 	ТаблицаЗначений - см. НовыйБазаРаспределенияРанееНачисленныхСумм
//
Функция РаспределениеРанееНачисленныхСумм(РаспределяемыеНачисления) Экспорт
	Если РаспределяемыеНачисления.Количество() = 0 Тогда
		Возврат НовыйБазаРаспределенияРанееНачисленныхСумм();
	КонецЕсли;	
	
	УстанавливаемыеНачисления = РаспределяемыеНачисления.Скопировать();
	Если  УстанавливаемыеНачисления.Колонки.Найти("РассчитыватьПоРазовымНачислениямДокумента") = Неопределено Тогда
		УстанавливаемыеНачисления.Колонки.Добавить(
			"РассчитыватьПоРазовымНачислениямДокумента",
			 Новый ОписаниеТипов("Булево"));
	 КонецЕсли;
	
	МенеджерРасчета = СоздатьМенеджерРасчета(
		РаспределяемыеНачисления[0].МесяцНачисления, 
		РаспределяемыеНачисления[0].Организация);
		
	МенеджерРасчета.УстановитьТаблицуНачисления(УстанавливаемыеНачисления);
	МенеджерРасчета.ИнициализироватьРасчетРанееНачисленныхСумм();
	
	Возврат МенеджерРасчета.КоэффициентыРанееНачисленныхСумм();	
КонецФункции	

// Предназначена для получения настроек системы в части расчета зарплаты.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиРасчетаЗарплаты() Экспорт
	
	НастройкиРасчетаЗарплатыРасширенный = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	НастройкиРасчетаЗарплатыРасширенный.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиРасчетаЗарплатыРасширенный, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	
	Если НастройкиРасчетаЗарплатыРасширенный.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	ЗначенияПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ИзмененаНастройкаРасчетаЗарплаты(ИмяНастройки, НастройкиРасчетаЗарплаты, ТекущиеНастройкиРасчетаЗарплаты) Экспорт
		
	Если ТекущиеНастройкиРасчетаЗарплаты = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат НастройкиРасчетаЗарплаты[ИмяНастройки] <> ТекущиеНастройкиРасчетаЗарплаты[ИмяНастройки];
	
КонецФункции

// Заполняет настройки расчета зарплаты, определяемые по состоянию плана видов расчета.
//
Процедура ЗаполнитьНастройкиРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаДниБолезни) КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииОтпускаВоеннослужащим) КАК ВыбиратьВидНачисленияКомпенсацииОтпускаВоеннослужащим,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпускаВоеннослужащим) КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпускаВоеннослужащим,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезни) КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПраздничныхИВыходных) КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыСверхурочных) КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОсновногоОтпуска) КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДополнительногоОтпуска) КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВознагражденияПлатежногоАгента) КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям) КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДСВ) КАК ВыбиратьВидУдержанияДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДобровольныхВзносовВНПФ) КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска) КАК ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияИсполнительногоЛиста) КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияПрофсоюзныхВзносов) КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСреднегоЗаработка) КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни) КАК ИспользоватьДоплатуЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДСВ) КАК ИспользоватьДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДобровольныеВзносыВНПФ) КАК ИспользоватьДобровольныеВзносыВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьИсполнительныеЛисты) КАК ИспользоватьИсполнительныеЛисты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных) КАК ИспользоватьОплатуПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных) КАК ИспользоватьОплатуСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработку) КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПереводыНаОплатуПоСреднемуЗаработку) КАК ИспользоватьПереводыНаОплатуПоСреднемуЗаработку,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка) КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыКомандировки) КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПростоя) КАК ВыбиратьВидНачисленияОплатыПростоя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПереводаНаОплатуПоСреднемуЗаработку) КАК ВыбиратьВидНачисленияПереводаНаОплатуПоСреднемуЗаработку,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПрочихНевыходов) КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтпускБезОплаты) КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтгул) КАК ВыбиратьВидНачисленияОтгул,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок) КАК ИспользоватьОплатуКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок) КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев) КАК ИспользоватьОплатуПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев) КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты) КАК ИспользоватьОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты) КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтгулы) КАК ИспользоватьОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы) КАК ИспользоватьВнутрисменныеОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов) КАК ИспользоватьУчетПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов) КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовуюПремиюОтдельнымДокументом) КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовыеНачисленияОтдельнымДокументом) КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияВыходногоПособия) КАК ВыбиратьВидНачисленияВыходногоПособия,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя) КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами) КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениБолезни) КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям) КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрофсоюзныеВзносы) КАК ИспользоватьПрофсоюзныеВзносы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрочиеУдержанияВПользуТретьихЛиц) КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСовмещениеПрофессийДолжностей) КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаСовмещение) КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок) КАК ИспользоватьСдельныйЗаработок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску) КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь) КАК ИспользоватьМатериальнуюПомощь,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске) КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах) КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные) КАК ИспользоватьОтпускаУчебные,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС) КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме) КАК ИспользоватьДоходыВНатуральнойФорме,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную) КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску) КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияМесячногоДенежногоСодержания) КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность) КАК ИспользоватьНадбавкуЗаВредность,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНесколькоПлановыхНачислений) КАК ИспользоватьНесколькоПлановыхНачислений,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаВремяКомандировки) КАК ИспользоватьДоплатуЗаВремяКомандировки,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьЕдиновременнуюВыплатуКОтпуску) КАК ИспользоватьЕдиновременнуюВыплатуКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииДнейЧасовПриУвольнении) КАК ВыбиратьВидНачисленияКомпенсацииДнейЧасовПриУвольнении,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыполнятьРасчетЗависимыхНачисленийПриРазовых) КАК ВыполнятьРасчетЗависимыхНачисленийПриРазовых,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУдержанияЯвляющиесяОснованиемОформленияКассовогоЧека) КАК ИспользоватьУдержанияЯвляющиесяОснованиемОформленияКассовогоЧека,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПособиеПоУходуЗаРебенкомДоТрехЛет) КАК ИспользоватьПособиеПоУходуЗаРебенкомДоТрехЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаКомандировкиПоПостановлению1099) КАК ВыбиратьВидНачисленияДоплатыЗаКомандировкиПоПостановлению1099
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияВыходногоПособия,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииОтпускаВоеннослужащим,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпускаВоеннослужащим,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|		NULL КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И (СУММА(ВЫБОР
	|									КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|											И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|										ТОГДА 1
	|									ИНАЧЕ 0
	|								КОНЕЦ) > 1
	|							ИЛИ СУММА(ВЫБОР
	|									КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки)
	|											И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|										ТОГДА 1
	|									ИНАЧЕ 0
	|								КОНЕЦ) > 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|						ИЛИ СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|		ВЫБОР
	|			КОГДА (СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ИЛИ СУММА(ВЫБОР
	|							КОГДА &ИспользоватьРасчетГосслужащих
	|									И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1)
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПростоя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОтгул,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПереводаНаОплатуПоСреднемуЗаработку,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни))
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|		NULL КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|		NULL КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|		NULL КАК ВыбиратьВидУдержанияДСВ,
	|		NULL КАК ВыбиратьВидУдержанияЗаНеотработанныеДниОтпуска,
	|		NULL КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|		NULL КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|		NULL КАК ИспользоватьДСВ,
	|		NULL КАК ИспользоватьИсполнительныеЛисты,
	|		NULL КАК ИспользоватьДобровольныеВзносыВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуСверхурочных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуЗаДниБолезни,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И (СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 0
	|						ИЛИ СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И (СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 0
	|						ИЛИ СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 0)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И ВЫБОР
	|										КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным ЕСТЬ NULL
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ НЕ ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|									КОНЕЦ
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтгулы,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтгулы,
	|		NULL КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Премия)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.РазовоеНачисление)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|		NULL КАК ИспользоватьПрофсоюзныеВзносы,
	|		NULL КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСдельныйЗаработок,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощь,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.УчетВремениВЧасах = ИСТИНА
	|									И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОтпускУчебный
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаУчебные,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидОтпуска = &ОтпускПострадавшимВАварииЧАЭС
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|									ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме))
	|									И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ДоходВНатуральнойФорме)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоходыВНатуральнойФорме,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьПереводыНаОплатуПоСреднемуЗаработку,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И (СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|						ИЛИ СУММА(ВЫБОР
	|								КОГДА &ИспользоватьРасчетГосслужащих
	|										И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьРасчетСохраняемогоДенежногоСодержания
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНадбавкуЗаВредность,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ПоддерживаетНесколькоПлановыхНачислений
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНесколькоПлановыхНачислений,
	|		NULL КАК ИспользоватьДоплатуЗаВремяКомандировки,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьЕдиновременнуюВыплатуКОтпуску,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниЧасыПриУвольнении)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияЗаНеотработанныеДниПриУвольненииГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияКомпенсацииДнейЧасовПриУвольнении,
	|		NULL КАК ИспользоватьУдержанияЯвляющиесяОснованиемОформленияКассовогоЧека,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ВыполнятьВДокументахРазовыхНачислений
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыполнятьРасчетЗависимыхНачисленийПриРазовых,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьПособиеПоУходуЗаРебенкомДоТрехЛет,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаКомандировки)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеДоплатаКомандировки)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаКомандировкиПоПостановлению1099
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПенсионныеВзносыВНПФ)
	|								ТОГДА 1
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВзносыНаДолгосрочныеСбережения)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПенсионныеВзносыВНПФ)
	|								ТОГДА 1
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВзносыНаДолгосрочныеСбережения)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.ЯвляетсяОснованиемОформленияКассовогоЧека
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Удержания КАК Удержания
	|	ГДЕ
	|		НЕ Удержания.ПометкаУдаления
	|		И НЕ Удержания.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеДовольствиеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьВоеннуюСлужбу
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеДовольствиеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьВоеннуюСлужбу
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ВидВремени,
	|		Начисления.КатегорияНачисленияИлиНеоплаченногоВремени,
	|		Начисления.ВидОтпуска
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА НачисленияВидыВремени.Ссылка.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|	ГДЕ
	|		НЕ НачисленияВидыВремени.Ссылка.ПометкаУдаления
	|		И НЕ НачисленияВидыВремени.Ссылка.ВАрхиве
	|		И НачисленияВидыВремени.ВидВремени.ОсновноеВремя = &Командировка) КАК НастройкиРасчетаЗарплаты";
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	КонецЕсли;
	
	НастройкиПриложения = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("Командировка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка"));
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Запрос.УстановитьПараметр("ОтпускУчебный", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный"));
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Запрос.УстановитьПараметр("ИспользоватьРасчетСохраняемогоДенежногоСодержания", НастройкиПриложения.ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", НастройкиПриложения.ИспользоватьВоеннуюСлужбу);
	Запрос.УстановитьПараметр("ИспользоватьРасчетГосслужащих", НастройкиПриложения.ИспользоватьГосударственнуюСлужбу Или НастройкиПриложения.ИспользоватьМуниципальнуюСлужбу Или НастройкиПриложения.ИспользоватьВоеннуюСлужбу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	// Получим значения настроек по умолчанию.
	НастройкиПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	Если Не Настройки.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПоУмолчанию);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	// Если начисление зарплаты отключено, настройки, которые не определяются по ПВР нужно «сбросить».
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		
		Настройки.ИспользоватьВыплатыБывшимСотрудникам = Ложь;
		Настройки.ИспользоватьИндексациюЗаработка = Ложь;
		Настройки.ИспользоватьПризыПодарки = Ложь;
		Настройки.ИспользоватьРегистрациюПрочихДоходов = Ложь;
		
		НастройкиРасчетаЗарплаты = РегистрыСведений.НастройкиРасчетаЗарплаты.СоздатьМенеджерЗаписи();
		НастройкиРасчетаЗарплаты.Прочитать();
		Если НастройкиРасчетаЗарплаты.Выбран() И НастройкиРасчетаЗарплаты.ИспользоватьНачисленияПоДоговорам Тогда
			НастройкиРасчетаЗарплаты.ИспользоватьНачисленияПоДоговорам = Ложь;
			НастройкиРасчетаЗарплаты.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем автоматически устанавливаемые настройки.
	УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты);
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеВнешнихХозяйственныхОпераций(ИспользоватьНачислениеЗарплаты);
	ОбменСБанкамиПоЗарплатнымПроектам.УстановитьИспользованиеЭлектронногоОбменаСБанками(ИспользоватьНачислениеЗарплаты);
	УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных(Настройки, ИспользоватьНачислениеЗарплаты);
	
	Настройки.Записать();
	
КонецПроцедуры

// Метод предназначен для установки константы использования документов ввода данных для расчета зарплаты.
//
Процедура УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// Включаем использование ввода данных для расчета зарплаты в том случае, 
	// если используется расчет зарплаты и есть хотя бы один шаблон.
	
	ИспользоватьВводДанныхДляРасчетаЗарплаты = Ложь;
	Если ИспользоватьНачислениеЗарплаты Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И ВидыДокументов.НеИспользуется = ЛОЖЬ");
		ИспользоватьВводДанныхДляРасчетаЗарплаты = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекущееИспользование = Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Получить();
	Если ТекущееИспользование <> ИспользоватьВводДанныхДляРасчетаЗарплаты Тогда
		Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Установить(ИспользоватьВводДанныхДляРасчетаЗарплаты);
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для установки способа удержания излишне начисленных отпускных.
//
Процедура УстановитьСпособУдержанияИзлишнеНачисленныхОтпускных(Настройки = Неопределено, ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	ЗаписыватьНастройки = Ложь;
	Если Настройки = Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗаписыватьНастройки = Истина;
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// По умолчанию сторнируем ранее излишне начисленные суммы отпускных
	ТекущееИспользование = Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных;
	Если Не ЗначениеЗаполнено(ТекущееИспользование) Тогда
		Настройки.СпособУдержанияИзлишнеНачисленныхОтпускных = Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм;
		Если ЗаписыватьНастройки Тогда
			Настройки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывается районный коэффициент, утвержденный федеральными органами власти.
// Определяется по подразделению, указанному в строке расчета, если оно обособленное, или по организации.
// 
// Параметры:
//	Подразделение
//
// Возвращаемое значение - число большее или равное 1.
//
Функция РайонныйКоэффициентРФ(Подразделение) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.РайонныйКоэффициентРФ(Подразделение);
КонецФункции

// Выполняет поиск показателя расчета зарплаты по идентификатору.
//
// Параметры:
//	- Идентификатор - строка, идентификатор показателя (не путать с ИдентификаторОбъекта).
//	- УчитыватьРегистр - необязательный по умолчанию Ложь, если Истина, 
//		то выполняется поиск показателя с учетом регистра, 
//		например по строке "ВремяВДнях", показатель "ВремяВДнях" найден не будет.
//
// Возвращаемое значение - найденный показатель, 
//		Неопределено - в случае, если показателя с таким идентификатором не существует.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр);
КонецФункции

// Выполняет расчет НДФЛ и Взносов по данным начислений форм документов Выплата бывшим сотрудникам,
// Регистрация прочих доходов
// Возвращает 
Функция НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(Объект, ПараметрыДляРасчета, НомерСтроки = Неопределено) Экспорт
	
	Отбор = Неопределено;
	Если НомерСтроки <> Неопределено Тогда
		Отбор = Новый Структура("НомерСтроки", НомерСтроки);
	КонецЕсли;
	Если ТипЗнч(Объект.НачисленияУдержанияВзносы) = Тип("ТаблицаЗначений") Тогда
		Начисления = Объект.НачисленияУдержанияВзносы.Скопировать(Отбор, "НомерСтроки, ФизическоеЛицо, Начислено, СуммаВычета, ФиксСуммаВычета");
	Иначе
		Начисления = Объект.НачисленияУдержанияВзносы.Выгрузить(Отбор, "НомерСтроки, ФизическоеЛицо, Начислено, СуммаВычета, ФиксСуммаВычета");
	КонецЕсли;
	
	Если Начисления.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Организация					= Объект.Организация;
	Документ					= Объект.Ссылка;
	ДатаПолученияДохода			= Объект.ПланируемаяДатаВыплаты;
	ПериодРегистрации			= НачалоМесяца(Объект.ПланируемаяДатаВыплаты);
	КатегорияДохода				= ПараметрыДляРасчета.КатегорияДохода;
	КодДоходаНДФЛ				= ПараметрыДляРасчета.КодДоходаНДФЛ;
	КодДоходаСтраховыеВзносы	= ПараметрыДляРасчета.КодДоходаСтраховыеВзносы;
	КодВычетаНДФЛ				= Объект.КодВычетаНДФЛ;
	Подразделение				= Объект.Подразделение;
	
	// Для расчета НДФЛ создаем временную ссылку на документ и коллекцию наборов записей.
	НаборыЗаписейОбъекта = ЗарплатаКадры.НаборыЗаписейРегистратора(Документ.Метаданные());
	
	Отказ = Ложь;
	
	// Сформируем временную таблицу с результатами начислений и списком физических лиц 
	// для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор",				Документ);
	Запрос.УстановитьПараметр("ДатаПолученияДохода",		ДатаПолученияДохода);
	Запрос.УстановитьПараметр("КатегорияДохода",			КатегорияДохода);
	Запрос.УстановитьПараметр("КодДоходаНДФЛ",				КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("КодДоходаСтраховыеВзносы",	КодДоходаСтраховыеВзносы);
	Запрос.УстановитьПараметр("КодВычетаНДФЛ",				КодВычетаНДФЛ);
	Запрос.УстановитьПараметр("Подразделение",				Подразделение);
	Запрос.УстановитьПараметр("Начисления",					Начисления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&КатегорияДохода КАК КатегорияДохода,
	|	&КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	&КодВычетаНДФЛ КАК КодВычета,
	|	&Подразделение КАК Подразделение,
	|	&Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Начислено КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	Начисления.ФиксСуммаВычета КАК ФиксСуммаВычета,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(Документ, Организация, ДатаПолученияДохода, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ДатаПолученияДохода,
	|	Начисления.КатегорияДохода,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА Начисления.ФиксСуммаВычета
	|			ТОГДА Начисления.СуммаВычета
	|		ИНАЧЕ ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета)
	|	КОНЕЦ КАК СуммаВычета,
	|	Начисления.КодДоходаСтраховыеВзносы КАК ВидДохода,
	|	Начисления.Сумма КАК Сумма,
	|	0 КАК НДФЛ
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыПоДоходам
	|		ПО Начисления.Регистратор = ВычетыПоДоходам.Регистратор
	|			И Начисления.НомерСтроки = ВычетыПоДоходам.НомерСтроки
	|ГДЕ
	|	Начисления.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ДатаПолученияДохода,
	|	Начисления.КодДохода,
	|	Начисления.КодВычета,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА Начисления.ФиксСуммаВычета
	|			ТОГДА Начисления.СуммаВычета
	|		ИНАЧЕ ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета)
	|	КОНЕЦ КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА Начисления.ФиксСуммаВычета
	|			ТОГДА Начисления.СуммаВычета
	|		ИНАЧЕ ЕСТЬNULL(ВычетыПоДоходам.СуммаВычета, Начисления.СуммаВычета)
	|	КОНЕЦ КАК Скидка,
	|	Начисления.КодДоходаСтраховыеВзносы КАК ВидДохода,
	|	Начисления.Сумма КАК Сумма
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыПоДоходам
	|		ПО Начисления.Регистратор = ВычетыПоДоходам.Регистратор
	|			И Начисления.НомерСтроки = ВычетыПоДоходам.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуПФР, ЛОЖЬ) КАК ВходитВБазуПФР,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуФСС, ЛОЖЬ) КАК ВходитВБазуФСС,
	|	ЕСТЬNULL(ВидыДоходовПоСтраховымВзносам.ВходитВБазуФОМС, ЛОЖЬ) КАК ВходитВБазуФОМС
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовПоСтраховымВзносам КАК ВидыДоходовПоСтраховымВзносам
	|		ПО Начисления.КодДоходаСтраховыеВзносы = ВидыДоходовПоСтраховымВзносам.Ссылка";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	НачисленияНДФЛ = МассивРезультатов[1].Выгрузить();
	// Расчет НДФЛ
	УчетНДФЛРасширенный.РассчитатьНалогДляКонкретногоДохода(ДатаПолученияДохода, НачисленияНДФЛ);
	
	НачисленияСтраховыеВзносы = МассивРезультатов[2].Выгрузить();
	ВхождениеВБазы = МассивРезультатов[3].Выгрузить();
	
	СтрокаРассчитываемыеВзносы = "";
	РассчитываемыеВзносы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы(Ложь,,Ложь));
	Для каждого ИмяКолонки Из РассчитываемыеВзносы Цикл
		
		Если СтрНайти(ИмяКолонки, "ПФР") > 0 И ВхождениеВБазы[0].ВходитВБазуПФР Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли СтрНайти(ИмяКолонки, "ФОМС") > 0 И ВхождениеВБазы[0].ВходитВБазуФОМС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		ИначеЕсли СтрНайти(ИмяКолонки, "ФСС") > 0 И ВхождениеВБазы[0].ВходитВБазуФСС Тогда
			СтрокаРассчитываемыеВзносы = СтрокаРассчитываемыеВзносы + "," + ИмяКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Результат Из Начисления Цикл
		РезультатРасчета = Новый Структура("НДФЛ,СуммаВычета" + СтрокаРассчитываемыеВзносы);
		
		Отбор.ФизическоеЛицо = Результат.ФизическоеЛицо;
		НайденныеСтроки = НачисленияНДФЛ.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() >0 Тогда
			ЗаполнитьЗначенияСвойств(РезультатРасчета, НайденныеСтроки[0], "СуммаВычета,НДФЛ");
		КонецЕсли;
		
		ВозвращаемоеЗначение.Вставить(Результат.ФизическоеЛицо, РезультатРасчета);
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаРассчитываемыеВзносы) Тогда
		
		// Расчет страховых взносов
		УстановитьПривилегированныйРежим(Истина);
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(НаборыЗаписейОбъекта, Отказ, Организация, ПериодРегистрации, НачисленияСтраховыеВзносы, Истина);
		РезультатРасчетаСтраховыхВзносов = УчетСтраховыхВзносов.РассчитатьВзносы(Документ, Организация, ПериодРегистрации, МенеджерВременныхТаблиц);
		УстановитьПривилегированныйРежим(Ложь);
		Для Каждого Результат Из РезультатРасчетаСтраховыхВзносов Цикл
			РезультатРасчета = ВозвращаемоеЗначение.Получить(Результат.ФизическоеЛицо);
			ЗаполнитьЗначенияСвойств(РезультатРасчета, Результат);
			
			ВозвращаемоеЗначение.Вставить(Результат.ФизическоеЛицо, РезультатРасчета);
		КонецЦикла;
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет наличие колонке в строке коллекции, используемой при расчете.
//
// Параметры:
//	СтрокаКоллекции - строка таблицы расчетного документа.
//	ИмяПоля - имя поля, наличие которого необходимо выяснить.
//
// Возвращаемое значение - Истина, если поле есть, Ложь - в противном случае.
//
Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля) Экспорт
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	ИначеЕсли ТипЗнч(СтрокаКоллекции) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	Иначе
		Структура = Новый Структура(ИмяПоля, Null);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаКоллекции);
		Возврат Структура[ИмяПоля] <> Null;
	КонецЕсли;
	
КонецФункции

// Создает временный набор записей регистра расчета Начисления.
//
// Параметры:
//	ВременнаяСсылка - ссылка на регистратор, 
//	ПропуститьПроверкуЗапретаИзменения - признак того, что запись будет выполняться "сквозь" проверку даты запрета
//	                                     редактирования.
//
// Возвращаемое значение - Набор записей Начисления.
//
Функция НаборЗаписейНачисления(ВременнаяСсылка = Неопределено, ПропуститьПроверкуЗапретаИзменения = Истина, ЭтоВременныйНаборЗаписей = Истина) Экспорт
	Возврат ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка, ПропуститьПроверкуЗапретаИзменения, ЭтоВременныйНаборЗаписей)["Начисления"];
КонецФункции

// Возвращает размер доплаты до среднего заработка за дни нетрудоспособности.
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//   Размер доплаты - число
//
Функция ПроцентДоплатыЗаДниНетрудоспособности(Организация) Экспорт
	
	ПроцентДоплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗарплатаКадрыРасширенная.ПроцентДоплатыЗаДниНетрудоспособности
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
	|ГДЕ
	|	НастройкиЗарплатаКадрыРасширенная.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПроцентДоплаты = Выборка.ПроцентДоплатыЗаДниНетрудоспособности;
	КонецЕсли; 
	
	Возврат ПроцентДоплаты;
КонецФункции

// Добавляет команду печати "Подробный расчет начислений", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати, ИдентификаторыПФ = Неопределено) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")  Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРасчетаНачислений";
		КомандаПечати.Идентификатор = "ПодробныйРасчетНачислений";
		КомандаПечати.Представление = НСтр("ru = 'Подробный расчет начислений';
											|en = 'Detailed accrual calculation'");
		КомандаПечати.Порядок = 100;  		
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "Сотрудник");
		
		Если ИдентификаторыПФ <> Неопределено Тогда
			ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ИмяДокумента, ДанныеДокументов, ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник КАК Сотрудник,
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Ссылка.Организация КАК Организация,
		|	Документ.Ссылка.Дата КАК ДатаДокумента,
		|	Документ.Ссылка.Номер КАК НомерДокумента,
		|	Документ.Ссылка.НомерПервичногоДокумента КАК НомерПервичногоДокумента
		|ИЗ
		|	&ИмяДокумента КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивСсылок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Сотрудник";
	
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерПервичногоДокумента", Метаданные.Документы[ИмяДокумента]) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Ссылка.НомерПервичногоДокумента", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента", "Документ." + ИмяДокумента + ?(ПустаяСтрока(ИмяТабличнойЧастиСотрудники), "", "." + ИмяТабличнойЧастиСотрудники));

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДоработатьТекстЗапросаДляПодробногоРасчетаНачислений(Запрос.Текст, ИмяДокумента);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДокумента = ДанныеДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		
		ДанныеДокумента.МассивСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ДанныеДокумента.МассивСотрудников.Добавить(Выборка.Сотрудник);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок, ИмяДокумента, ВидНачисленияВШапке = Ложь, ИменаТабличныхЧастейНачислений = "Начисления") Экспорт 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ТекстыЗапросов = Новый Массив;
	
	Для Каждого ИмяТабличнойЧасти Из СтрРазделить(ИменаТабличныхЧастейНачислений, ",") Цикл
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Начисления.Ссылка,
			|	Начисления.ИдентификаторСтрокиВидаРасчета,
			|	Начисления.Сотрудник,
			|	&Начисление,
			|	Начисления.ДатаНачала,
			|	Начисления.ДатаОкончания,
			|	Начисления.ОплаченоДней,
			|	Начисления.ОплаченоЧасов,
			|	Начисления.НормаДней,
			|	Начисления.НормаЧасов,
			|	Начисления.ОтработаноДней,
			|	Начисления.ОтработаноЧасов,
			|	Начисления.ВремяВЧасах,	
			|	Начисления.Результат,
			|	ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория
			|ИЗ
			|	&ИмяДокумента_Начисления КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
			|		ПО &Начисление = ПВРНачисления.Ссылка
			|ГДЕ
			|	Начисления.Ссылка В(&МассивСсылок)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента_Начисления", "Документ." + ИмяДокумента + "." + ИмяТабличнойЧасти);
		
		Если ВидНачисленияВШапке Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Начисление", "Начисления.Ссылка.Начисление");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Начисление", "Начисления.Начисление");
		КонецЕсли;
		
		Если ТекстыЗапросов.Количество() > 0 Тогда
			ТекстыЗапросов.Добавить("ОБЪЕДИНИТЬ ВСЕ");
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстыЗапросов.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Показатели.Ссылка,
		|	Показатели.ИдентификаторСтрокиВидаРасчета,
		|	Показатели.Показатель,
		|	Показатели.Значение
		|ИЗ
		|	&ИмяДокумента_Показатели КАК Показатели
		|ГДЕ
		|	Показатели.Ссылка В(&МассивСсылок)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента_Показатели", "Документ." + ИмяДокумента + ".Показатели");
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, Символы.ПС);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Начисления, Показатели", ПакетРезультатов[0].Выгрузить(), ПакетРезультатов[1].Выгрузить());

КонецФункции

// Удаляет из таблицы начислений те строки, в которых содержатся начисления, не входящие в ФОТ (ВключатьВФОТ = Ложь)
// 	Параметры:
//		ТаблицаНачислений - Таблица значений, обязательно содержащая колонку "Начисление" с типом ПланВидовРасчетаСсылка.Начисления.
Процедура ИсключитьНачисленияНеВключаемыеВФОТ(ТаблицаНачислений) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	ПривилегированныйРежимУжеБыл = ПривилегированныйРежим();
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	НачисленияВключаемыеВФОТ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	УдаляемыеНачисления = Новый Массив;
	
	Для каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		Если НачисленияВключаемыеВФОТ.Найти(СтрокаНачислений.Начисление) = Неопределено Тогда
			УдаляемыеНачисления.Добавить(СтрокаНачислений);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаНачислений Из УдаляемыеНачисления Цикл
		ТаблицаНачислений.Удалить(СтрокаНачислений);
	КонецЦикла; 

КонецПроцедуры

Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Результаты = Новый Соответствие;
	
	Для каждого Основание Из Основания Цикл
		Результаты.Вставить(Основание, Ложь);
	КонецЦикла;
	
	// Отсроченная уплата - у документов Отпуск и Больничный лист
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основания", Основания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументОснование.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОснование.Ссылка
	|ИЗ
	|	Документ.Отпуск КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументОснование.Ссылка
	|ИЗ
	|	Документ.ПереносДанных КАК ДокументОснование
	|ГДЕ
	|	ДокументОснование.Ссылка В(&Основания)
	|	И ДокументОснование.НалогСОтсроченнойУплатой";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результаты[Выборка.Ссылка] = Истина;
	КонецЦикла;
	
	Возврат Результаты;
	
КонецФункции 

// Создание и инициализация менеджера расчета зарплаты.
//
// Параметры
//	МесяцНачисления - тип Дата, месяц начисления зарплаты.
//	Организация - тип СправочникСсылка.Организации.
//
// Возвращаемое значение - обработка менеджера расчета.
//
Функция СоздатьМенеджерРасчета(МесяцНачисления, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерРасчета = Обработки.МенеджерРасчетаЗарплаты.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПериодРасчета = Новый СтандартныйПериод;
	ПериодРасчета.ДатаНачала = НачалоМесяца(МесяцНачисления);
	ПериодРасчета.ДатаОкончания = КонецМесяца(МесяцНачисления);
	МенеджерРасчета.Инициализировать(ПериодРасчета, Организация);
	
	Возврат МенеджерРасчета;
	
КонецФункции

// Создание и инициализация менеджера расчета зарплаты по периоду расчета.
//
// Параметры
//	ПериодРасчета - тип СтандартныйПериод, период начисления зарплаты.
//	Организация - тип СправочникСсылка.Организации
//
// Возвращаемое значение - обработка менеджера расчета.
//
Функция СоздатьМенеджерРасчетаПоПериоду(ПериодРасчета, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерРасчета = Обработки.МенеджерРасчетаЗарплаты.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерРасчета.Инициализировать(ПериодРасчета, Организация);
	
	Возврат МенеджерРасчета;
	
КонецФункции

// Формирует сторно записи отменяющие движения исправленного документа по регистрам подсистемы.
//
// Параметры:
//  Движения			 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать			 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыИсправления = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "РасчетЗарплатыРасширенный";
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	ИсправлениеВТекущемПериоде = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ИсправлениеВТекущемПериоде") И ПараметрыИсправления.ИсправлениеВТекущемПериоде;
	ОтменаДокумента = ПараметрыИсправления <> Неопределено И ПараметрыИсправления.Свойство("ОтменаДокумента") И ПараметрыИсправления.ОтменаДокумента;
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;
	
	Если ОтменаДокумента И Не ИсправлениеВТекущемПериоде Тогда
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.УдержанияДоПределаПоСотрудникам);
		ИсключаемыеРегистры.Добавить(Метаданные.РегистрыНакопления.УдержанияПоИсполнительнымДокументам);
		
		Для Каждого МетаданныеРегистра Из ИсключаемыеРегистры Цикл
			Если ДвиженияВСтруктуре Тогда
				Движения.Свойство(МетаданныеРегистра.Имя, Набор);
			Иначе
				Набор = Движения.Найти(МетаданныеРегистра.Имя);
			КонецЕсли;
			
			Если Набор <> Неопределено Тогда
				// Наборы для исключаемых регистров изолируются, но не сторнируются.
				ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		ИмяРегистра = МетаданныеРегистра.Имя;
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(ИмяРегистра, Набор);
		Иначе 
			Набор = Движения.Найти(ИмяРегистра);
		КонецЕсли;
		
		Если Набор = Неопределено Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсправлениеВТекущемПериоде И МетаданныеРегистра = Метаданные.РегистрыСведений.ИсходныеДанныеПерерасчетов Тогда
			ПерерасчетЗарплаты.СторнироватьДвиженияВРегистреИсходныеДанныеПерерасчетов(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
			ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(Набор, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеРассчитываемогоНабораНачислений() Экспорт 
	ОписаниеРассчитываемогоНабора = Новый Структура;
	ОписаниеРассчитываемогоНабора.Вставить("ИмяВТРассчитываемыеЗаписи");
	ОписаниеРассчитываемогоНабора.Вставить("ИмяТаблицыБазовыеЗаписи", "ПланВидовРасчета.Начисления.БазовыеВидыРасчета");
	ОписаниеРассчитываемогоНабора.Вставить("ОписаниеТекущегоНабораРегистраНачисления");
	ОписаниеРассчитываемогоНабора.Вставить("ИмяПоляОчередностьРасчета");
		
	Возврат ОписаниеРассчитываемогоНабора;	
КонецФункции	

Функция ОписаниеТекущегоНабораРегистраНачисления() Экспорт
	ОписаниеНабора = Новый Структура;
	ОписаниеНабора.Вставить("Регистратор");
	ОписаниеНабора.Вставить("ИмяВТРегистрРасчета", "ВТРегистрРасчета_Начисления");
	ОписаниеНабора.Вставить("ИмяВТРегистрРасчетаФПД", "ВТРегистрРасчета_Начисления_ФактическийПериодДействия");
	ОписаниеНабора.Вставить("ИсключаемыйРегистратор");
	
	Возврат ОписаниеНабора;
	
КонецФункции	

Функция ОписаниеРассчитываемогоНабораУдержаний() Экспорт 
	ОписаниеРассчитываемогоНабора = Новый Структура;
	ОписаниеРассчитываемогоНабора.Вставить("ИмяВТРассчитываемыеЗаписи");
	ОписаниеРассчитываемогоНабора.Вставить("ИмяТаблицыБазовыеЗаписи", "ПланВидовРасчета.Начисления.БазовыеВидыРасчета");
	ОписаниеРассчитываемогоНабора.Вставить("ОписаниеТекущегоНабораРегистраНачисления");
	ОписаниеРассчитываемогоНабора.Вставить("ИмяПоляОчередностьРасчета");
		
	Возврат ОписаниеРассчитываемогоНабора;		
КонецФункции

Функция ВыплатыПоДоговорамГПХМогутНеОблагатьсяНДФЛ() Экспорт
	Возврат Не ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации()
		И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
КонецФункции

Процедура ПриОпределенииПараметровФлажкаНеОблагаетсяНДФЛ(ЭлементФормы) Экспорт
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ВыплатыПоДоговорамГПХМогутНеОблагатьсяНДФЛ() Тогда
		ЭлементФормы.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок =
			НСтр("ru = 'Включите этот флажок, если в соответствии с НК РФ выплаты по договору не облагаются НДФЛ.
			|Например, если исполнитель сам уплачивает НДФЛ. См. также п. 2 ст. 226, п. 1 и 2 ст. 227 НК РФ.
			|Данный флажок не требуется включать, если выплаты производятся в рамках гранта (выбрана соответствующая статья финансирования).';
			|en = 'Select this check box if contract payments are not subject to PIT according to the Tax Code of the Russian Federation.
			|For example, if the assignee pays PIT. See also cl. 2 of art. 226, cl. 1 and 2 of art. 227 of the Tax Code of the Russian Federation.
			|Do not select this check box if payment is a grant (a respective financing item is selected).'");
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьВТПредварительныеПерерасчетыНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыИзмененийНачислений", ТипыИзмененийНачислений());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПредварительныеПерерасчеты.Период КАК Период,
		|	ВТПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ВТПредварительныеПерерасчеты.Организация КАК Организация,
		|	ВТПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ВТПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ВТПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ВТПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ВТПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование,
		|	ВТПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыНачислений
		|ИЗ
		|	ВТПредварительныеПерерасчеты КАК ВТПредварительныеПерерасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ВТПредварительныеПерерасчеты.ИзмененныеДанные = Начисления.Ссылка
		|ГДЕ
		|	ВТПредварительныеПерерасчеты.ТипИзменения В (&ТипыИзмененийНачислений)
		|	И ВЫБОР
		|			КОГДА ВТПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.ПлановыеНачисления)
		|				ТОГДА ЕСТЬNULL(Начисления.ЯвляетсяЛьготой, ЛОЖЬ) = ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПредварительныеПерерасчетыУдержаний(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипыИзмененийУдержаний", ТипыИзмененийУдержаний());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ВТПредварительныеПерерасчеты.Организация КАК Организация,
		|	ВТПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ВТПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ВТПредварительныеПерерасчеты.ТипИзменения КАК ТипИзменения,
		|	ВТПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ВТПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПредварительныеПерерасчетыУдержаний
		|ИЗ
		|	ВТПредварительныеПерерасчеты КАК ВТПредварительныеПерерасчеты
		|ГДЕ
		|	ВТПредварительныеПерерасчеты.ТипИзменения В (&ТипыИзмененийУдержаний)";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисленияСотрудниковПоПоказателямПерерасчетов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаПлановыхНачислений
		|ИЗ
		|	ВТПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПредварительныеПерерасчеты.ИзмененныеДанные = НачисленияПоказатели.Показатель
		|			И (ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель))";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляСрезаПлановыхНачислений",
			"ГоловнаяОрганизация,Сотрудник,Начисление"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Период КАК Период,
		|	СотрудникиПериоды.Организация КАК Организация,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Начисление КАК Начисление,
		|	Начисления.ЯвляетсяЛьготой КАК ЯвляетсяЛьготой,
		|	СотрудникиПериоды.ИзмененныеДанные КАК ИзмененныеДанные
		|ПОМЕСТИТЬ ВТНачисленияСотрудниковПоПоказателямПерерасчетов
		|ИЗ
		|	ВТИзмеренияДатыДляСрезаПлановыхНачислений КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО СотрудникиПериоды.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = СотрудникиПериоды.ИзмененныеДанные)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО СотрудникиПериоды.Период = ПлановыеНачисления.Период
		|			И СотрудникиПериоды.ГоловнаяОрганизация = ПлановыеНачисления.ГоловнаяОрганизация
		|			И СотрудникиПериоды.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И СотрудникиПериоды.Начисление = ПлановыеНачисления.Начисление
		|			И (НЕ ПоказателиРасчетаЗарплаты.ПериодическийПоказательСотрудника
		|				ИЛИ СотрудникиПериоды.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисления.Используется)
		|ГДЕ
		|	(НЕ ПлановыеНачисления.Период ЕСТЬ NULL
		|			ИЛИ Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете))";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДобавитьЧастьЗапросаПроверкиПерерасчетовНачисленийПоПоказателям(МенеджерВременныхТаблиц, ЧастиЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТПредварительныеПерерасчетыНачислений КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	СоздатьВТНачисленияСотрудниковПоПоказателямПерерасчетов(МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.Период КАК Период,
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.Сотрудник КАК Сотрудник,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПредварительныеПерерасчеты.НачалоУчета КАК НачалоУчета
		|ИЗ
		|	ВТПредварительныеПерерасчетыНачислений КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				ВТНачисленияСотрудниковПоПоказателямПерерасчетов КАК НачисленияСотрудниковПоПоказателям
		|			ГДЕ
		|				НачисленияСотрудниковПоПоказателям.Сотрудник = ПредварительныеПерерасчеты.Сотрудник
		|				И НачисленияСотрудниковПоПоказателям.Организация = ПредварительныеПерерасчеты.Организация
		|				И НачисленияСотрудниковПоПоказателям.Период = ПредварительныеПерерасчеты.Период
		|				И НачисленияСотрудниковПоПоказателям.ИзмененныеДанные = ПредварительныеПерерасчеты.ИзмененныеДанные
		|				И НЕ НачисленияСотрудниковПоПоказателям.ЯвляетсяЛьготой)";
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ДобавитьЧастьЗапросаПроверкиПерерасчетовУдержанийПоПоказателям(МенеджерВременныхТаблиц, ЧастиЗапроса, УдалитьВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	ВТПредварительныеПерерасчетыУдержаний КАК ПредварительныеПерерасчеты
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьВТУдержанияФизическихЛицПоПоказателямПерерасчетов(МенеджерВременныхТаблиц, УдалитьВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	УдержанияФизическихЛицПоПоказателям.Удержание КАК Удержание,
		|	УдержанияФизическихЛицПоПоказателям.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВТПредварительныеПерерасчетыУдержаний КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияФизическихЛицПоПоказателямПерерасчетов КАК УдержанияФизическихЛицПоПоказателям
		|		ПО (УдержанияФизическихЛицПоПоказателям.ФизическоеЛицо = ПредварительныеПерерасчеты.ФизическоеЛицо)
		|			И (УдержанияФизическихЛицПоПоказателям.Организация = ПредварительныеПерерасчеты.Организация)
		|			И (УдержанияФизическихЛицПоПоказателям.ПериодДействия = ПредварительныеПерерасчеты.ПериодДействия)
		|			И (УдержанияФизическихЛицПоПоказателям.ИзмененныеДанные = ПредварительныеПерерасчеты.ИзмененныеДанные)
		|			И (УдержанияФизическихЛицПоПоказателям.ДокументОснование = ПредварительныеПерерасчеты.ДокументОснование
		|				ИЛИ ПредварительныеПерерасчеты.ДокументОснование = НЕОПРЕДЕЛЕНО)
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель)";
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ДобавитьЧастьЗапросаПроверкиПерерасчетовУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ЧастиЗапроса, УдалитьВТ) Экспорт
	
	СоздатьВТУдержанияФизическихЛицПоИсполнительнымДокументам(МенеджерВременныхТаблиц, УдалитьВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК Сотрудник,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	УдержанияФизическихЛицПоИсполнительнымДокументам.Удержание КАК Удержание,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВТПредварительныеПерерасчетыУдержаний КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияФизическихЛицПоИсполнительнымДокументам КАК УдержанияФизическихЛицПоИсполнительнымДокументам
		|		ПО (УдержанияФизическихЛицПоИсполнительнымДокументам.ФизическоеЛицо = ПредварительныеПерерасчеты.ФизическоеЛицо)
		|			И (УдержанияФизическихЛицПоИсполнительнымДокументам.Организация = ПредварительныеПерерасчеты.Организация)
		|			И (УдержанияФизическихЛицПоИсполнительнымДокументам.ПериодДействия = ПредварительныеПерерасчеты.ПериодДействия)
		|			И (УдержанияФизическихЛицПоИсполнительнымДокументам.ДокументОснование = ПредварительныеПерерасчеты.ИзмененныеДанные)
		|			И (УдержанияФизическихЛицПоИсполнительнымДокументам.РегистраторПерерасчета = ПредварительныеПерерасчеты.РегистраторПерерасчета)
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.УсловияИсполнительногоЛиста)";
	ЧастиЗапроса.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Осуществляет поиск строк в КоллекцияСтрок, 
// в которых значение поля ИмяПоля входит в массив МассивЗначений.
//
Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	// Имя может быть передано как составное, например "Сотрудник.ФизическоеЛицо".
	// Это значит, что прежде нужно определить значения через ".", 
	// от значений в искомых полях, и искать затем уже именно по ним.
	ЧастиИмениПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если ЧастиИмениПоля.Количество() > 1 Тогда
		ЗначенияПервыйУровень = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ЧастиИмениПоля[0], Истина);
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияПервыйУровень, ЧастиИмениПоля[1]);
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетУсловиям = Истина;
		Если МассивЗначений <> Неопределено Тогда
			Если ЧастиИмениПоля.Количество() > 1 Тогда
				// Соответствие по имени поля через ".".
				СоответствуетУсловиям = МассивЗначений.Найти(СоответствиеЗначений[СтрокаКоллекции[ЧастиИмениПоля[0]]]) <> Неопределено;
			Иначе	
				// Соответствие по простому имени поля.
				СоответствуетУсловиям = МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция НовыйФильтрКоэффициентИндексацииЗаработка() Экспорт
	Фильтр = Новый ТаблицаЗначений();
	Фильтр.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Фильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Фильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат Фильтр;
КонецФункции	

Функция КоэффициентИндексацииЗаработка(Фильтр) Экспорт
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		Фильтр,
		"Сотрудник");
		
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("КоэффициентИндексацииЗаработка");		
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	КоэффициентыИндексации.Сотрудник КАК Сотрудник,
	|	КоэффициентыИндексации.Период КАК Период,
	|	КоэффициентыИндексации.Коэффициент КАК Коэффициент,
	|	&ШаблонФильтрДатаНачала КАК ДатаНачала,
	|	&ШаблонФильтрДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТФильтр КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	|		ПО &ШаблонУсловиеПоИзмерениям
	|		И КоэффициентыИндексации.Период МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра(
		"ИзмеренияДаты",
		"КоэффициентыИндексации");
		
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра, 
		ОписаниеРегистра, 
		"ДатаНачала, ДатаОкончания", 
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ВыражениеПоляДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ВыражениеПоляДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакета, 
		ОписаниеФильтра, 
		ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции	

Процедура СформироватьДополнениеРасчетнойБазыУдержаний(Движения, ДополнениеРасчетнойБазыУдержаний) Экспорт 
	
	Регистратор = Движения.ДополнениеРасчетнойБазыУдержаний.Отбор.Регистратор.Значение;
	Для Каждого СтрокаТаблицы Из ДополнениеРасчетнойБазыУдержаний Цикл
		НоваяСтрока = Движения.ДополнениеРасчетнойБазыУдержаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.Регистратор = Регистратор;
		Движения.ДополнениеРасчетнойБазыУдержаний.Записывать = Истина;
	КонецЦикла;	
	
КонецПроцедуры

Функция ТипыДокументовНачисленияАванса(ТипРезультата) Экспорт

	Если ТипРезультата = "Соответствие" Тогда
		ПереченьДокументовНачисленияАванса = Новый Соответствие;
		ПереченьДокументовНачисленияАванса.Вставить(Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца"), Истина);
	ИначеЕсли ТипРезультата = "Массив" Тогда
		ПереченьДокументовНачисленияАванса = Новый Массив;
		ПереченьДокументовНачисленияАванса.Добавить(Тип("ДокументСсылка.НачислениеЗаПервуюПоловинуМесяца"));
	Иначе	
		ПереченьДокументовНачисленияАванса = Неопределено;
	КонецЕсли;
	
	Возврат	ПереченьДокументовНачисленияАванса

КонецФункции

Функция ТипыОснованийПлановыхНачислений() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Тип("ДокументСсылка.НазначениеПлановогоНачисления"));
	Возврат Результат;
	
КонецФункции	

Процедура УточнитьРасходПоРегиструУдержанияДоПределаПоСотрудникам(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдержанияДоПределаПоСотрудникам.Организация КАК Организация,
	               |	УдержанияДоПределаПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдержанияДоПределаПоСотрудникам.ДокументОснование КАК ДокументОснование
	               |ПОМЕСТИТЬ ВТУдержанияДоПределаПриход
	               |ИЗ
	               |	РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |ГДЕ
	               |	УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияПоИсполнительнымДокументам.Период КАК Период,
	               |	УдержанияПоИсполнительнымДокументам.Регистратор КАК Регистратор,
	               |	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдержанияПоИсполнительнымДокументам.Организация КАК Организация,
	               |	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент.Удержание КАК Удержание,
	               |	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент КАК ДокументОснование,
	               |	СУММА(УдержанияПоИсполнительнымДокументам.СуммаУдержания) КАК Сумма
	               |ПОМЕСТИТЬ ВТУдержанияПоИсполнительнымДокументам
	               |ИЗ
	               |	РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияПоИсполнительнымДокументам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияДоПределаПриход КАК УдержанияДоПределаПриход
	               |		ПО УдержанияПоИсполнительнымДокументам.ФизическоеЛицо = УдержанияДоПределаПриход.ФизическоеЛицо
	               |			И УдержанияПоИсполнительнымДокументам.Организация = УдержанияДоПределаПриход.Организация
	               |			И УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент = УдержанияДоПределаПриход.ДокументОснование
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УдержанияПоИсполнительнымДокументам.Период,
	               |	УдержанияПоИсполнительнымДокументам.Регистратор,
	               |	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо,
	               |	УдержанияПоИсполнительнымДокументам.Организация,
	               |	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент,
	               |	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент.Удержание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УдержанияПоИсполнительнымДокументам.Период КАК Период,
	               |	УдержанияПоИсполнительнымДокументам.Регистратор КАК Регистратор,
	               |	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	УдержанияПоИсполнительнымДокументам.Организация КАК Организация,
	               |	УдержанияПоИсполнительнымДокументам.Удержание КАК Удержание,
	               |	УдержанияПоИсполнительнымДокументам.ДокументОснование КАК ДокументОснование,
	               |	УдержанияПоИсполнительнымДокументам.Сумма КАК Сумма
	               |ИЗ
	               |	ВТУдержанияПоИсполнительнымДокументам КАК УдержанияПоИсполнительнымДокументам
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдержанияДоПределаПоСотрудникам КАК УдержанияДоПределаПоСотрудникам
	               |		ПО УдержанияПоИсполнительнымДокументам.Период = УдержанияДоПределаПоСотрудникам.Период
	               |			И УдержанияПоИсполнительнымДокументам.Регистратор = УдержанияДоПределаПоСотрудникам.Регистратор
	               |			И УдержанияПоИсполнительнымДокументам.Организация = УдержанияДоПределаПоСотрудникам.Организация
	               |			И УдержанияПоИсполнительнымДокументам.ФизическоеЛицо = УдержанияДоПределаПоСотрудникам.ФизическоеЛицо
	               |			И УдержанияПоИсполнительнымДокументам.Удержание = УдержанияДоПределаПоСотрудникам.Удержание
	               |			И УдержанияПоИсполнительнымДокументам.ДокументОснование = УдержанияДоПределаПоСотрудникам.ДокументОснование
	               |			И (УдержанияДоПределаПоСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	               |ГДЕ
	               |	УдержанияДоПределаПоСотрудникам.Регистратор ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.УдержанияДоПределаПоСотрудникам.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.УдержанияДоПределаПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл 
			ЗаполнитьЗначенияСвойств(НаборЗаписей.ДобавитьРасход(), Выборка);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь, , Истина);
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПереносДанных") Тогда 
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Если ДокументОбъект.ТаблицаРегистров.Найти("УдержанияДоПределаПоСотрудникам", "Имя") = Неопределено Тогда 
				ДокументОбъект.ТаблицаРегистров.Добавить().Имя = "УдержанияДоПределаПоСотрудникам";
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыНачисленийОплачивающихВидыВремени(СотрудникиНачисленияПериоды) Экспорт
	 ПериодыПолученияДанных = ПериодыПолученияДанныхУчетаВремениПоРегиструРасчета(СотрудникиНачисленияПериоды);	
	 
	 МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанных(
	 	Новый МенеджерВременныхТаблиц,
		НачалоМесяца(ТекущаяДатаСеанса()));
		
	Возврат ДатыНачисленийОплачивающихВидыВремениСлужебный(ПериодыПолученияДанных, МенеджерДанныхУчетаВремени);	 
КонецФункции	

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный;
	
	// Метаданные.РегистрыСведений.ПлановыеАвансы
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПлановыеАвансы;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыеАвансыИнтервальный;
	
	// Метаданные.РегистрыСведений.ПлановыеНачисления
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПлановыеНачисления;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыеНачисленияИнтервальный;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПлановыеНачисления;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТ;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТ;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТ;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТ
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТ;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТИтоги
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПлановыеНачисления;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТИтоги;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТИтоги
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТИтоги;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТИтоги
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТИтоги;
	
	// Метаданные.РегистрыСведений.ПлановыйФОТИтоги
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПлановыйФОТИтоги;
	
КонецПроцедуры

#КонецОбласти

// Определяет объект источник районного коэффициента по кадровым данным.
//
Функция ИсточникРайонногоКоэффициентаРФ(КадровыеДанные) Экспорт
	
	Если ЗначениеЗаполнено(КадровыеДанные.Территория) Тогда
		ОбъектРК = КадровыеДанные.Территория;
	ИначеЕсли ЗначениеЗаполнено(КадровыеДанные.Подразделение) Тогда
		ОбъектРК = КадровыеДанные.Подразделение;
	Иначе
		ОбъектРК = КадровыеДанные.Организация;
	КонецЕсли;
	
	Возврат ОбъектРК;
	
КонецФункции

Функция КоэффициентыОплаченногоРабочегоВремениНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Коэффициенты = Новый ТаблицаЗначений;
	Коэффициенты.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	Коэффициенты.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыделятьНерабочиеДниОтдельнымВидомВремени", УчетРабочегоВремениРасширенный.ВыделятьНерабочиеДниОтдельнымВидомВремени());
	Запрос.УстановитьПараметр("ОплачиваемыеНерабочиеДни", 
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни"));
		
	Запрос.УстановитьПараметр("РабочееВремя",
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
		
	Запрос.УстановитьПараметр("Явка",
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияФактическийПериодДействия.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияФактическийПериодДействия.ПериодДействия КАК Месяц,
		|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец,
		|	НачисленияФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
		|	НачисленияФактическийПериодДействия.ОбщийГрафик КАК ОбщийГрафик,
		|	НачисленияФактическийПериодДействия.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	НачисленияФактическийПериодДействия.ВремяВЧасах КАК ВремяВЧасах,
		|	НачисленияФактическийПериодДействия.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, ИдентификаторСтроки) В
		|				(ВЫБРАТЬ
		|					Начисления.ДокументСсылка,
		|					Начисления.ИдентификаторСтроки
		|				ИЗ
		|					ВТНачисления КАК Начисления)) КАК НачисленияФактическийПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачисленияСотрудников.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТНачисленияСотрудников.ВидРасчета.УчитыватьВесьЗаработок КАК УчитыватьВесьЗаработок,
		|	ВТНачисленияСотрудников.ВремяВЧасах КАК ВремяВЧасах,
		|	ВТНачисленияСотрудников.Месяц КАК Месяц,
		|	ВТНачисленияСотрудников.ВидРасчета КАК ВидРасчета,
		|	ВТНачисленияСотрудников.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ВТНачисленияСотрудников.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ВТНачисленияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	СУММА(ВЫБОР
		|			КОГДА ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя
		|				ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноДней,
		|	СУММА(ВЫБОР
		|			КОГДА ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя
		|				ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноЧасов,
		|	СУММА(ВЫБОР
		|			КОГДА &ВыделятьНерабочиеДниОтдельнымВидомВремени
		|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни
		|					И НЕ ПериодыНерабочихДнейКалендаря.НомерПериода ЕСТЬ NULL
		|				ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Дней,
		|	СУММА(ВЫБОР
		|			КОГДА &ВыделятьНерабочиеДниОтдельнымВидомВремени
		|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни
		|					И НЕ ПериодыНерабочихДнейКалендаря.НомерПериода ЕСТЬ NULL
		|				ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Часов
		|ИЗ
		|	ВТНачисленияСотрудников КАК ВТНачисленияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ВТНачисленияСотрудников.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И ВТНачисленияСотрудников.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
		|			И ВТНачисленияСотрудников.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|			И (1 В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1
		|					ИЗ
		|						ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
		|					ГДЕ
		|						ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя
		|						И НачисленияВидыВремени.ВидВремени.ОсновноеВремя В (&РабочееВремя, &Явка)
		|						И НачисленияВидыВремени.Ссылка = ВТНачисленияСотрудников.ВидРасчета)
		|				ИЛИ ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ОплачиваемыеНерабочиеДни)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ВТНачисленияСотрудников.ПериодДействияНачало И ВТНачисленияСотрудников.ПериодДействияКонец)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыНерабочихДнейКалендаря КАК ПериодыНерабочихДнейКалендаря
		|		ПО ВТНачисленияСотрудников.ОбщийГрафик.ПроизводственныйКалендарь = ПериодыНерабочихДнейКалендаря.ПроизводственныйКалендарь
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ПериодыНерабочихДнейКалендаря.ДатаНачала И ПериодыНерабочихДнейКалендаря.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНачисленияСотрудников.ИдентификаторСтроки,
		|	ВТНачисленияСотрудников.ВидРасчета.УчитыватьВесьЗаработок,
		|	ВТНачисленияСотрудников.ВремяВЧасах,
		|	ВТНачисленияСотрудников.Месяц,
		|	ВТНачисленияСотрудников.ВидРасчета,
		|	ВТНачисленияСотрудников.ПериодДействияНачало,
		|	ВТНачисленияСотрудников.ПериодДействияКонец,
		|	ВТНачисленияСотрудников.ГрафикРаботы
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтроки";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Коэффициенты;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		НоваяСтрока = Коэффициенты.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		
		ОбщееВремя = 0;
		ОплачиваемоеНерабочееВремя = 0;
			
		Пока Выборка.Следующий() Цикл
			ОбщееВремя = ОбщееВремя + 
				?(Выборка.ВремяВЧасах, Выборка.ОтработаноЧасов, Выборка.ОтработаноДней);
					
			ОплачиваемоеНерабочееВремя = ОплачиваемоеНерабочееВремя + 
				?(Выборка.ВремяВЧасах, Выборка.Часов, Выборка.Дней);
		КонецЦикла;
		
		НоваяСтрока.Коэффициент = ?(ОбщееВремя = 0, 1, (ОбщееВремя-ОплачиваемоеНерабочееВремя)/ОбщееВремя);
		Если Выборка.УчитыватьВесьЗаработок 
			И НоваяСтрока.Коэффициент > 0 Тогда
			
			НоваяСтрока.Коэффициент = 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Коэффициенты;
	
КонецФункции

Процедура ЗаполнитьИсходныйДокументПриКопировании(ДокументОбъект, ЗаменяемоеЗначение) Экспорт
	
	ЗаполнитьИсходныйДокументВТабличныхЧастях(ДокументОбъект, Неопределено, ЗаменяемоеЗначение);
	
КонецПроцедуры

Процедура ЗаполнитьИсходныйДокумент(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.Ссылка.Пустая() Тогда
		Регистратор = ДокументОбъект.ПолучитьСсылкуНового();
		Если Регистратор.Пустая() Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
			Регистратор = МенеджерОбъекта.ПолучитьСсылку();
			ДокументОбъект.УстановитьСсылкуНового(Регистратор);
		КонецЕсли;			
	Иначе
		Регистратор = ДокументОбъект.Ссылка;	
	КонецЕсли;	
	
	ЗаполнитьИсходныйДокументВТабличныхЧастях(ДокументОбъект, Регистратор);
	
КонецПроцедуры

#КонецОбласти


#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ОтменаСовмещения.Макеты.ПФ_MXL_ПриказОбОтменеСовмещения,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.Совмещение.Макеты.ПФ_MXL_ДополнительноеСоглашение,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.Совмещение.Макеты.ПФ_MXL_ПриказНаСовмещение,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ПриказОВыходеНаНеполноеРабочееВремя,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ПриказОВыходеНаРаботуИзОтпускаПоУходуЗаРебенком,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ПриказОПрекращенииОтпускаПоУходуЗаРебенком,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Отчеты.ПечатнаяФормаТ11.Макеты.ПФ_MXL_Т11,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ПриказОВыплатеМатериальнойПомощи,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_ПриказОбОплатеПоСреднемуЗаработку,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ПростойСотрудников.Макеты.ПФ_MXL_ПриказОбОтстраненииОтРаботы,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ПростойСотрудников.Макеты.ПФ_MXL_ПриказОВременнойПриостановкеРабот,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие расчет зарплаты.

Функция ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ОкончаниеПериода, 
		|ЗаполнятьНачисленияПоДоговорамПодряда, 
		|ЗаполнятьНачисленияПоТрудовымДоговорам,
		|РежимДоначисления, 
		|СотрудникиПериодДействияПерерасчет, 
		|МенеджерВременныхТаблиц, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|РасчетПервойПоловиныМесяца");
		
	ДополнительныеПараметры.ЗаполнятьНачисленияПоТрудовымДоговорам = Истина;
	ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = Истина;
	ДополнительныеПараметры.РежимДоначисления = Ложь;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = Ложь;
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

Функция СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
	КонецЕсли;
	
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	ЗаполнятьНачисленияПоТрудовымДоговорам = ДополнительныеПараметры.ЗаполнятьНачисленияПоТрудовымДоговорам;
	ЗаполнятьНачисленияПоДоговорамПодряда = ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда;
	РежимДоначисления = ДополнительныеПараметры.РежимДоначисления;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	
	Если ЗаполнятьНачисленияПоТрудовымДоговорам Тогда 
		
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда
			ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		КонецЕсли;
		
		Если МенеджерВременныхТаблиц = Неопределено Тогда 
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		
		КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
		
		Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
			
			АвансТолькоРасчетомЗаПервуюПоловинуМесяца = УчетНДФЛ.ДатаЗакона263ФЗ() > МесяцНачисления;
			Если АвансТолькоРасчетомЗаПервуюПоловинуМесяца Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					ПараметрыПолученияСотрудников.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
			КонецЕсли;
				
			КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТВсеСотрудникиОрганизации");
			
		Иначе
			ПерерасчетЗарплаты.СоздатьВТСотрудникиОрганизацииКРасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, РежимДоначисления, "ВТВсеСотрудникиОрганизации");
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодЗаписи,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ГДЕ
		|	ЛОЖЬ";
		
		Запрос.Выполнить();		
		
	КонецЕсли;
	
	Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", ДополнительныеПараметры.РасчетПервойПоловиныМесяца);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизации.Период КАК Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДляПодбораСотрудников.Сотрудник КАК Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(ДанныеДляПодбораСотрудников.Окончание, ДЕНЬ) >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииБезДоговорников
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УсловияДоговораГПХСрезПоследних.Организация КАК Организация,
		|	УсловияДоговораГПХСрезПоследних.Сотрудник КАК Сотрудник,
		|	УсловияДоговораГПХСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УсловияДоговораГПХСрезПоследних.Договор КАК Договор,
		|	УсловияДоговораГПХСрезПоследних.Сумма КАК Сумма,
		|	УсловияДоговораГПХСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	УсловияДоговораГПХСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа КАК РазмерЕжемесячногоАвансовогоПлатежа
		|ПОМЕСТИТЬ ВТДоговорникиСАвансовымиПлатежами
		|ИЗ
		|	РегистрСведений.УсловияДоговораГПХ.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ),
		|			Организация = &Организация
		|				И Подразделение В ИЕРАРХИИ (&Подразделение)) КАК УсловияДоговораГПХСрезПоследних
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
		|	СУММА(НачисленияПоДоговорамГПХОбороты.Сумма) КАК СуммаОборот
		|ПОМЕСТИТЬ ВТОборотыПоДоговорам
		|ИЗ
		|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХОбороты
		|ГДЕ
		|	НачисленияПоДоговорамГПХОбороты.Период < &МесяцНачисления
		|	И (НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо, НачисленияПоДоговорамГПХОбороты.Договор) В
		|			(ВЫБРАТЬ
		|				ВТДоговорникиСАвансовымиПлатежами.Договор,
		|				ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|			ИЗ
		|				ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
		|	СУММА(НачисленияПоДоговорамГПХОбороты.Сумма) КАК СуммаОборот
		|ПОМЕСТИТЬ ВТОборотыПоДоговорамЗаМесяц
		|ИЗ
		|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХОбороты
		|ГДЕ
		|	НачисленияПоДоговорамГПХОбороты.Период МЕЖДУ НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И (НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо, НачисленияПоДоговорамГПХОбороты.Договор) В
		|			(ВЫБРАТЬ
		|				ВТДоговорникиСАвансовымиПлатежами.Договор,
		|				ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|			ИЗ
		|				ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияДоговораОпеки.Организация КАК Организация,
		|	УсловияДоговораОпеки.Сотрудник КАК Сотрудник,
		|	УсловияДоговораОпеки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УсловияДоговораОпеки.Договор КАК Договор,
		|	МАКСИМУМ(УсловияДоговораОпеки.Период) КАК Период
		|ПОМЕСТИТЬ ВТУсловияДоговораОпекиМаксимальныйПериод
		|ИЗ
		|	РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
		|ГДЕ
		|	УсловияДоговораОпеки.Период <= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияДоговораОпеки.Организация,
		|	УсловияДоговораОпеки.Сотрудник,
		|	УсловияДоговораОпеки.ФизическоеЛицо,
		|	УсловияДоговораОпеки.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияДоговораОпеки.Организация КАК Организация,
		|	УсловияДоговораОпеки.Сотрудник КАК Сотрудник,
		|	УсловияДоговораОпеки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УсловияДоговораОпеки.Договор КАК Договор,
		|	УсловияДоговораОпеки.Подразделение КАК Подразделение,
		|	УсловияДоговораОпеки.ДатаНачала КАК ДатаНачала,
		|	УсловияДоговораОпеки.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТУсловияДоговораОпекиСрезПоследних
		|ИЗ
		|	ВТУсловияДоговораОпекиМаксимальныйПериод КАК УсловияДоговораОпекиМаксимальныйПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораОпеки КАК УсловияДоговораОпеки
		|		ПО УсловияДоговораОпекиМаксимальныйПериод.Период = УсловияДоговораОпеки.Период
		|			И УсловияДоговораОпекиМаксимальныйПериод.Организация = УсловияДоговораОпеки.Организация
		|			И УсловияДоговораОпекиМаксимальныйПериод.Сотрудник = УсловияДоговораОпеки.Сотрудник
		|			И УсловияДоговораОпекиМаксимальныйПериод.ФизическоеЛицо = УсловияДоговораОпеки.ФизическоеЛицо
		|			И УсловияДоговораОпекиМаксимальныйПериод.Договор = УсловияДоговораОпеки.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияВыплатПоДоговоруОпеки.Договор КАК Договор,
		|	УсловияВыплатПоДоговоруОпеки.ИдентификаторВыплаты КАК ИдентификаторВыплаты,
		|	МАКСИМУМ(УсловияВыплатПоДоговоруОпеки.Период) КАК Период
		|ПОМЕСТИТЬ ВТУсловияВыплатПоДоговоруОпекиМаксимальныйПериод
		|ИЗ
		|	РегистрСведений.УсловияВыплатПоДоговоруОпеки КАК УсловияВыплатПоДоговоруОпеки
		|ГДЕ
		|	УсловияВыплатПоДоговоруОпеки.Период <= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	УсловияВыплатПоДоговоруОпеки.Договор,
		|	УсловияВыплатПоДоговоруОпеки.ИдентификаторВыплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияВыплатПоДоговоруОпеки.Договор КАК Договор,
		|	УсловияВыплатПоДоговоруОпеки.ДатаНачала КАК ДатаНачала,
		|	УсловияВыплатПоДоговоруОпеки.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТУсловияВыплатПоДоговоруОпекиСрезПоследних
		|ИЗ
		|	ВТУсловияВыплатПоДоговоруОпекиМаксимальныйПериод КАК УсловияВыплатПоДоговоруОпекиМаксимальныйПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияВыплатПоДоговоруОпеки КАК УсловияВыплатПоДоговоруОпеки
		|		ПО УсловияВыплатПоДоговоруОпекиМаксимальныйПериод.Период = УсловияВыплатПоДоговоруОпеки.Период
		|			И УсловияВыплатПоДоговоруОпекиМаксимальныйПериод.Договор = УсловияВыплатПоДоговоруОпеки.Договор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК Период,
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК ПериодЗаписи,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияПоДоговорам.ФизическоеЛицо КАК ФизическоеЛиц,
		|	ПлановыеНачисленияПоДоговорам.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТДоговорникиБезОтбора
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|ГДЕ
		|	ПлановыеНачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
		|	И ПлановыеНачисленияПоДоговорам.Организация = &Организация
		|	И ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&МесяцНачисления,
		|	&МесяцНачисления,
		|	ВТДоговорникиСАвансовымиПлатежами.Сотрудник,
		|	ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо,
		|	0
		|ИЗ
		|	ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорам КАК ВТОборотыПоДоговорам
		|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорам.Договор
		|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорам.Организация
		|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорам.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорамЗаМесяц КАК ВТОборотыПоДоговорамЗаМесяц
		|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорамЗаМесяц.Договор
		|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорамЗаМесяц.Организация
		|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорамЗаМесяц.ФизическоеЛицо
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТДоговорникиСАвансовымиПлатежами.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|				ТОГДА ВЫБОР
		|						КОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0) > 0
		|							ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа > ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|						ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|					ИНАЧЕ ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(ВТОборотыПоДоговорамЗаМесяц.СуммаОборот, 0)
		|				КОНЕЦ
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&МесяцНачисления,
		|	&МесяцНачисления,
		|	УсловияДоговора.Сотрудник,
		|	УсловияДоговора.ФизическоеЛицо,
		|	0
		|ИЗ
		|	ВТУсловияДоговораОпекиСрезПоследних КАК УсловияДоговора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияВыплатПоДоговоруОпекиСрезПоследних КАК УсловияВыплат
		|		ПО УсловияДоговора.Договор = УсловияВыплат.Договор
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УсловияДоговора.ДатаНачала, МЕСЯЦ) <= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И КОНЕЦПЕРИОДА(УсловияДоговора.ДатаОкончания, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И НАЧАЛОПЕРИОДА(УсловияВыплат.ДатаНачала, МЕСЯЦ) <= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И КОНЕЦПЕРИОДА(УсловияВыплат.ДатаОкончания, МЕСЯЦ) >= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И УсловияДоговора.Организация = &Организация
		|	И УсловияДоговора.Подразделение В ИЕРАРХИИ(&Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияДоговораОпекиМаксимальныйПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияДоговораОпекиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияВыплатПоДоговоруОпекиМаксимальныйПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУсловияВыплатПоДоговоруОпекиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДоговорникиБезОтбора.Период КАК Период,
		|	ВТДоговорникиБезОтбора.ПериодЗаписи КАК ПериодЗаписи,
		|	ВТДоговорникиБезОтбора.Сотрудник КАК Сотрудник,
		|	ВТДоговорникиБезОтбора.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДоговорники
		|ИЗ
		|	ВТДоговорникиБезОтбора КАК ВТДоговорникиБезОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВТДоговорникиБезОтбора.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТСотрудникиОрганизацииБезДоговорников.Период КАК Период,
		|	ВТСотрудникиОрганизацииБезДоговорников.ПериодЗаписи КАК ПериодЗаписи,
		|	ВТСотрудникиОрганизацииБезДоговорников.Сотрудник КАК Сотрудник,
		|	ВТСотрудникиОрганизацииБезДоговорников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора КАК ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизацииБезДоговорников КАК ВТСотрудникиОрганизацииБезДоговорников
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|					ИЛИ &РасчетПервойПоловиныМесяца
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСотрудникиОрганизацииДоговорники.Период,
		|	ВТСотрудникиОрганизацииДоговорники.ПериодЗаписи,
		|	ВТСотрудникиОрганизацииДоговорники.Сотрудник,
		|	ВТСотрудникиОрганизацииДоговорники.ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииДоговорники.ВидДоговора
		|ИЗ
		|	ВТСотрудникиОрганизацииДоговорники КАК ВТСотрудникиОрганизацииДоговорники
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|					ИЛИ &РасчетПервойПоловиныМесяца
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисленияПоДоговорам.Подразделение В ИЕРАРХИИ(&Подразделение)", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УсловияДоговора.Подразделение В ИЕРАРХИИ(&Подразделение)", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В ИЕРАРХИИ (&Подразделение)", "ИСТИНА");
		КонецЕсли;
				
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", ДополнительныеПараметры.РасчетПервойПоловиныМесяца);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
				
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВсеСотрудникиОрганизации.Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КОНЕЦПЕРИОДА(ДанныеДляПодбораСотрудников.Окончание, ДЕНЬ) >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу ИЛИ &РасчетПервойПоловиныМесяца
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
		Запрос.Выполнить();	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК Сотрудники";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Процедура СформироватьЗадолженностьПоУдержаниямФизическихЛиц(Движения, ЗадолженностьПоУдержаниям, ЗаписыватьДвижения = Ложь, ДанныеМежрасчетногоПериода = Истина) Экспорт 
	
	Для Каждого СтрокаУдержаний Из ЗадолженностьПоУдержаниям Цикл
		НоваяСтрока = Движения.ЗадолженностьПоУдержаниямФизическихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
		Если ДанныеМежрасчетногоПериода Тогда 
			НоваяСтрока.Сумма = СтрокаУдержаний.СуммаМежрасчет;
			НоваяСтрока.Межрасчет = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Движения.ЗадолженностьПоУдержаниямФизическихЛиц.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		Движения.ЗадолженностьПоУдержаниямФизическихЛиц.Записать();
		Движения.ЗадолженностьПоУдержаниямФизическихЛиц.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции.

Функция ТипыИзмененийУдержаний()
	
	ТипыИзменений = Новый Массив; 
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.УсловияИсполнительногоЛиста);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ПлановыеУдержания);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.Показатель);
	Возврат ТипыИзменений;
	
КонецФункции

Функция ТипыИзмененийНачислений()
	
	ТипыИзменений = Новый Массив;
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ВыполненныеРаботы);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.КадровыеДанные);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.УсловияОплатыОтпускаПоУходу);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ПлановыеНачисления);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ПрименениеПлановыхНачислений);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.ОбщийГрафик);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.УчетВремени);
	ТипыИзменений.Добавить(Перечисления.ТипИзмененийПерерасчетов.Показатель);
	Возврат ТипыИзменений;
	
КонецФункции

Процедура СоздатьВТУдержанияФизическихЛицПоПоказателямПерерасчетов(МенеджерВременныхТаблиц, УдалитьВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПредварительныеПерерасчеты.ПериодДействия КАК Период,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УдержанияПоказатели.Ссылка КАК Удержание,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПредварительныеПерерасчеты.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаПлановыхУдержаний
		|ИЗ
		|	ВТПредварительныеПерерасчеты КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		|		ПО ПредварительныеПерерасчеты.ИзмененныеДанные = УдержанияПоказатели.Показатель
		|			И (ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.Показатель))";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляСрезаПлановыхУдержаний",
			"Организация,ФизическоеЛицо,Удержание"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаПериоды.Период КАК ПериодДействия,
		|	ФизическиеЛицаПериоды.Организация КАК Организация,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаПериоды.Удержание КАК Удержание,
		|	ФизическиеЛицаПериоды.ИзмененныеДанные КАК ИзмененныеДанные,
		|	ПлановыеУдержания.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТУдержанияФизическихЛицПоПоказателямПерерасчетов
		|ИЗ
		|	ВТИзмеренияДатыДляСрезаПлановыхУдержаний КАК ФизическиеЛицаПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО ФизическиеЛицаПериоды.Удержание = Удержания.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = ФизическиеЛицаПериоды.ИзмененныеДанные)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
		|		ПО ФизическиеЛицаПериоды.Период = ПлановыеУдержания.Период
		|			И ФизическиеЛицаПериоды.Организация = ПлановыеУдержания.Организация
		|			И ФизическиеЛицаПериоды.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо
		|			И ФизическиеЛицаПериоды.Удержание = ПлановыеУдержания.Удержание
		|			И (НЕ ПоказателиРасчетаЗарплаты.ПериодическийПоказательСотрудника
		|				ИЛИ ФизическиеЛицаПериоды.ДокументОснование = ПлановыеУдержания.ДокументОснование)
		|			И (ПлановыеУдержания.Используется)
		|ГДЕ
		|	(НЕ ПлановыеУдержания.Период ЕСТЬ NULL
		|			ИЛИ Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыДляСрезаПлановыхУдержаний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановыеУдержанияСрезПоследних";
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТУдержанияФизическихЛицПоПоказателямПерерасчетов");
	
КонецПроцедуры

Процедура СоздатьВТУдержанияФизическихЛицПоИсполнительнымДокументам(МенеджерВременныхТаблиц, УдалитьВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредварительныеПерерасчеты.ПериодДействия КАК ПериодДействия,
		|	ПредварительныеПерерасчеты.Организация КАК Организация,
		|	ПредварительныеПерерасчеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПредварительныеПерерасчеты.РегистраторПерерасчета КАК РегистраторПерерасчета,
		|	ПлановыеУдержания.Удержание КАК Удержание,
		|	ПредварительныеПерерасчеты.ИзмененныеДанные КАК ДокументОснование
		|ПОМЕСТИТЬ ВТУдержанияФизическихЛицПоИсполнительнымДокументам
		|ИЗ
		|	ВТПредварительныеПерерасчетыУдержаний КАК ПредварительныеПерерасчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
		|		ПО ПредварительныеПерерасчеты.РегистраторПерерасчета = ПлановыеУдержания.Регистратор
		|			И ПредварительныеПерерасчеты.Организация = ПлановыеУдержания.Организация
		|			И ПредварительныеПерерасчеты.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо
		|			И ПредварительныеПерерасчеты.ИзмененныеДанные = ПлановыеУдержания.ДокументОснование
		|ГДЕ
		|	ПредварительныеПерерасчеты.ТипИзменения = ЗНАЧЕНИЕ(Перечисление.ТипИзмененийПерерасчетов.УсловияИсполнительногоЛиста)
		|	И НЕ ПлановыеУдержания.Регистратор ЕСТЬ NULL";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТУдержанияФизическихЛицПоИсполнительнымДокументам");
	
КонецПроцедуры

Процедура СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа = "ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ВидСтажа КАК ВидСтажа,
		|	ИсходныеДанные.ДатаНачала КАК Дата,
		|	ИсходныеДанные.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТИсходныеДанныеДляПолученияДанныхОСтаже
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидСтажа,
		|	Дата,
		|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, Ложь, "ВТИсходныеДанныеДляПолученияДанныхОСтаже");
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.Дата КАК ДатаНачала,
		|	ИсходныеДанные.Показатель КАК Показатель,
		|	СтажСотрудников.РазмерМесяцев КАК РазмерМесяцев,
		|	МАКСИМУМ(ШкалаОценкиСтажа.ЗначениеПоказателя) КАК МаксимальноеЗначениеПоказателя
		|ПОМЕСТИТЬ ВТСтажСотрудниковДляРасчетаПоказателей
		|ИЗ
		|	ВТИсходныеДанныеДляПолученияДанныхОСтаже КАК ИсходныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажСотрудников
		|		ПО ИсходныеДанные.Сотрудник = СтажСотрудников.Сотрудник
		|			И ИсходныеДанные.ВидСтажа = СтажСотрудников.ВидСтажа
		|			И ИсходныеДанные.Дата = СтажСотрудников.Дата
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|		ПО ИсходныеДанные.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Дата,
		|	ИсходныеДанные.Показатель,
		|	СтажСотрудников.РазмерМесяцев
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраница,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя,
		|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа, 0)) КАК НижняяГраница
		|ПОМЕСТИТЬ ВТИнтервалыСтажаПоказателя
		|ИЗ
		|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажаНижняяГраница
		|			ПО ШкалаОценкиСтажа.Ссылка = ШкалаОценкиСтажаНижняяГраница.Ссылка
		|				И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа > ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа
		|					ИЛИ ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0)
		|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ШкалаОценкиСтажа.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ШкалаОценкиСтажа.ЗначениеПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтажСотрудниковДляРасчетаПоказателей.Сотрудник,
		|	СтажСотрудниковДляРасчетаПоказателей.ДатаНачала,
		|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя,
		|	ИнтервалыСтажаПоказателя.ВерхняяГраница,
		|	ИнтервалыСтажаПоказателя.НижняяГраница,
		|	СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0) > 0
		|				И ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) >= ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|ИЗ
		|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажаПоказателя КАК ИнтервалыСтажаПоказателя
		|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ИнтервалыСтажаПоказателя.Показатель
		|			И СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев >= ИнтервалыСтажаПоказателя.НижняяГраница
		|			И (ИнтервалыСтажаПоказателя.ВерхняяГраница = 0
		|				ИЛИ СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев < ИнтервалыСтажаПоказателя.ВерхняяГраница)
		|ГДЕ
		|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) <> 0";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТИсходныеДанныеДляПолученияДанныхОСтаже");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТСтажиСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТСтажСотрудниковДляРасчетаПоказателей");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТИнтервалыСтажаПоказателя");
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ДатаНачала КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчетРасширенный.ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки",
		ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	КадровыйУчетРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательТаблиц);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиПериодыДляПолученияПроцентаСевернойНадбавки";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные,);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Сотрудник КАК Сотрудник,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДатаНачала КАК ДатаНачала,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Показатель КАК Показатель,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ЗначениеПоказателя,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ВерхняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.НижняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.РазмерМесяцев,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Показатель,
		|	ДатаНачала";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаЗначенийПоказателяПроцентСевернойНадбавки(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК ДатаНачала,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников";
	
	Запрос.Текст  = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СведенияОбУдержаниях(Форма) Экспорт
	
	ДанныеОбУдержаниях = Новый Структура;
	ДанныеОбУдержаниях.Вставить("Удержания", Форма.Объект.Удержания.Выгрузить());
	
	Если Форма.Объект.Свойство("ПогашениеЗаймов") Тогда
		ДанныеОбУдержаниях.Вставить("ПогашениеЗаймов", Форма.Объект.ПогашениеЗаймов.Выгрузить());
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбУдержаниях, Форма.УникальныйИдентификатор);
	
КонецФункции

Функция ДополнительныеПараметрыРасчетаНачислений() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцНачисления,
		|ДокументСсылка,
		|НаборыЗаписей,
		|ИдентификаторСтроки,
		|ДанныеФормыОбъект,
		|КоличествоПоказателей,
		|ИзвестныеЗначенияПоказателей,
		|ИзвестныеЗначенияПоказателейПоОснованиям,
		|ДанныеРаспределенияПоТерриториямУсловиямТруда,
		|ОбщиеЗначения,
		|ВызыватьИсключение,
		|МенеджерВременныхТаблиц");
		
	ДополнительныеПараметры.НаборыЗаписей =	ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	ДополнительныеПараметры.ВызыватьИсключение = Истина;
	ДополнительныеПараметры.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ИзмеренияРасчетаПлановыхНачислений() Экспорт
	
	Возврат "Сотрудник, Начисление, ДокументОснование, ГоловнаяОрганизация";	
	
КонецФункции

Процедура ДополнитьВТЗаписиУдержанийСотрудником(МенеджерВременныхТаблиц, ИмяТаблицы = "ВТЗаписиУдержаний", ИмяПоляПериод = "ДатаНачала") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяТаблицы, "ФизическоеЛицо, ДокументОснование");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ИмяПоляПериод);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РабочиеМестаУдержаний",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РабочиеМестаУдержаний.Период КАК Период,
	|	РабочиеМестаУдержаний.ФизическоеЛицо,
	|	РабочиеМестаУдержаний.ДокументОснование,
	|	РабочиеМестаУдержаний.РабочееМесто КАК Сотрудник
	|ПОМЕСТИТЬ ВТРабочиеМестаУдержаний
	|ИЗ
	|	ВТРабочиеМестаУдержанийСрезПоследних КАК РабочиеМестаУдержаний
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДокументОснование,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеМестаУдержанийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РабочиеМестаУдержаний.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник,
	|	ЗаписиУдержаний.*
	|ПОМЕСТИТЬ ВТЗаписиУдержанийДополненная
	|ИЗ
	|	#ВТЗаписиУдержаний КАК ЗаписиУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаУдержаний КАК РабочиеМестаУдержаний
	|		ПО (РабочиеМестаУдержаний.ФизическоеЛицо = ЗаписиУдержаний.ФизическоеЛицо)
	|			И (РабочиеМестаУдержаний.ДокументОснование = ЗаписиУдержаний.ДокументОснование)
	|			И (РабочиеМестаУдержаний.Период = ЗаписиУдержаний.#ИмяПоляПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТЗаписиУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеМестаУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиУдержаний.*
	|ПОМЕСТИТЬ #ВТЗаписиУдержаний
	|ИЗ
	|	ВТЗаписиУдержанийДополненная КАК ЗаписиУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗаписиУдержанийДополненная";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТЗаписиУдержаний", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПоляПериод", ИмяПоляПериод);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();

КонецПроцедуры

Функция МетаданныеРегистровПодсистемы()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников);
	Регистры.Добавить(Метаданные.РегистрыНакопления.УдержанияДоПределаПоСотрудникам);
	Регистры.Добавить(Метаданные.РегистрыНакопления.УдержанияПоИсполнительнымДокументам);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ФактическиеОтпуска);
	Регистры.Добавить(Метаданные.РегистрыСведений.ИсходныеДанныеПерерасчетов);
	
	Возврат Регистры;
КонецФункции

// Создает ВТРасчетнаяБаза для записей регистра расчета Начисления.
//
// Параметры:
//	- МенеджерВременныхТаблиц, в котором 
//		* есть таблица ВТОтборНачислений с полями, соответствующими регистру расчета Начисления
//			- Регистратор
//			- НомерСтроки
//		* будет создана ВТРасчетнаяБаза, состав полей см. метод СоздатьВТРасчетнаяБаза
//	- ИсключаемыйРегистратор - ссылка на документ, движения которого нужно исключить из рассмотрения.
//
Процедура СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено, МенеджерКадровогоУчета = Неопределено) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления.ФактическийПериодДействия");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	СоздатьВТРеальнаяТаблицаРегистраРасчета(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТОтборОсновныхЗаписей
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОтборОсновныхЗаписей");
	
	СоздатьВТРеальнаяТаблицаФактическийПериодДействия(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК НачисленияФПД
		|ГДЕ
		|	(НачисленияФПД.Регистратор, НачисленияФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				Отбор.Регистратор,
		|				Отбор.НомерСтроки
		|			ИЗ
		|				ВТОтборОсновныхЗаписей КАК Отбор
		|			ГДЕ
		|				Отбор.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало,
		|	НачисленияФПД.ПериодДействияКонец
		|ИЗ
		|	ВТФактическийПериодДействияБД КАК НачисленияФПД
		|ГДЕ
		|	(НачисленияФПД.Регистратор, НачисленияФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				Отбор.Регистратор,
		|				Отбор.НомерСтроки
		|			ИЗ
		|				ВТОтборОсновныхЗаписей КАК Отбор
		|			ГДЕ
		|				Отбор.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОсновныеЗаписи");
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Начисления.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей, МенеджерКадровогоУчета);
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры	

Процедура СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблицеКаскадно(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено, МенеджерКадровогоУчета = Неопределено, МенеджерДанныхУчетаВремени = Неопределено) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	ДанныеТекущегоНабора = ДанныеТекущегоНабораНачисленияИзВТВСтруктуру(МенеджерВременныхТаблиц); 
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления.ФактическийПериодДействия");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрРасчета_Начисления.Регистратор КАК Регистратор
	|ИЗ
	|	ВТРегистрРасчета_Начисления КАК РегистрРасчета_Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВременныйРегистратор = Выборка.Регистратор;
	Иначе
		ВременныйРегистратор = Неопределено;
	КонецЕсли;	
	
	СоздатьВТРеальнаяТаблицаРегистраРасчета(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор КАК Регистратор,
		|	ОтборНачислений.НомерСтроки КАК НомерСтроки,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Регистратор КАК Регистратор1,
		|	Начисления.НомерСтроки КАК НомерСтроки1,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	Начисления.Сторно КАК Сторно,
		|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТОтборОсновныхЗаписей
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый,
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОтборОсновныхЗаписей");
	
	СоздатьВТРеальнаяТаблицаФактическийПериодДействия(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборОсновныхЗаписей.ПериодРегистрации КАК ПериодРегистрации,
		|	ОтборОсновныхЗаписей.Регистратор КАК Регистратор,
		|	ОтборОсновныхЗаписей.НомерСтроки КАК НомерСтроки,
		|	ОтборОсновныхЗаписей.Сотрудник КАК Сотрудник,
		|	ОтборОсновныхЗаписей.ВидРасчета КАК ВидРасчета,
		|	ОтборОсновныхЗаписей.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	ОтборОсновныхЗаписей.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец,
		|	ОтборОсновныхЗаписей.Сторно КАК Сторно,
		|	ОтборОсновныхЗаписей.СторнируемыйДокумент КАК СторнируемыйДокумент
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК НачисленияФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК ОтборОсновныхЗаписей
		|		ПО НачисленияФПД.Регистратор = ОтборОсновныхЗаписей.Регистратор
		|			И НачисленияФПД.НомерСтроки = ОтборОсновныхЗаписей.НомерСтроки
		|			И (ОтборОсновныхЗаписей.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтборОсновныхЗаписей.ПериодРегистрации,
		|	ОтборОсновныхЗаписей.Регистратор,
		|	ОтборОсновныхЗаписей.НомерСтроки,
		|	ОтборОсновныхЗаписей.Сотрудник,
		|	ОтборОсновныхЗаписей.ВидРасчета,
		|	ОтборОсновныхЗаписей.РассчитыватьПоРазовымНачислениямДокумента,
		|	ОтборОсновныхЗаписей.РегистраторРазовогоНачисления,
		|	НачисленияФПД.ПериодДействияНачало,
		|	НачисленияФПД.ПериодДействияКонец,
		|	ОтборОсновныхЗаписей.Сторно,
		|	ОтборОсновныхЗаписей.СторнируемыйДокумент
		|ИЗ
		|	ВТФактическийПериодДействияБД КАК НачисленияФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК ОтборОсновныхЗаписей
		|		ПО НачисленияФПД.Регистратор = ОтборОсновныхЗаписей.Регистратор
		|			И НачисленияФПД.НомерСтроки = ОтборОсновныхЗаписей.НомерСтроки
		|			И (ОтборОсновныхЗаписей.ПериодДействияБазовый = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент
		|ИЗ
		|	ВТРегистрРасчета_НачисленияБД КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)";
	Запрос.Выполнить();	
	УдалитьВТ.Добавить("ВТОсновныеЗаписи");
	
	ОписаниеРассчитываемогоНабора = Обработки.РасчетБазыНачисленийУдержаний.НовыйОписаниеРассчитываемогоНабораВременнаяТаблица();
	ОписаниеРассчитываемогоНабора.ИмяВТРассчитываемыеЗаписи = "ВТОсновныеЗаписи";
	ОписаниеРассчитываемогоНабора.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МенеджерРасчетаЗП = СоздатьМенеджерРасчета(КонецМесяца(ТекущаяДатаСеанса()), Справочники.Организации.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетБазыНачислений = Обработки.РасчетБазыНачисленийУдержаний.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	НастройкиРасчетаБазы = Обработки.РасчетБазыНачисленийУдержаний.НовыйНастройкиРасчетаБазыНачислений();
	НастройкиРасчетаБазы.ИсключаемыйРегистратор = ИсключаемыйРегистратор;
	НастройкиРасчетаБазы.ПолучатьПодробнуюРасшифровку = Истина;	
	
	РасчетБазыНачислений.ИнициализироватьРасчетБазыНачислений(ОписаниеРассчитываемогоНабора, МенеджерРасчетаЗП, НастройкиРасчетаБазы, ДанныеТекущегоНабора);	
	
	РасчетнаяБаза = РасчетБазыНачислений.РасчетнаяБазаНачислений();
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, РасчетнаяБаза, "ВТРасчетнаяБаза");
	
	РасчетБазыНачислений.ЗавершитьРасчетБазы();
		
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
КонецПроцедуры	

Функция ДанныеТекущегоНабораНачисленияИзВТВСтруктуру(МенеджерВременныхТаблиц)
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрРасчета_Начисления") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТекущегоНабораНачислений = Новый Структура("ТаблицаНабора, ФПД");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТРегистрРасчета_Начисления КАК Начисления";
	
	ДанныеТекущегоНабораНачислений.ТаблицаНабора = Запрос.Выполнить().Выгрузить();
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрРасчета_Начисления_ФактическийПериодДействия") Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления";
		
		ДанныеТекущегоНабораНачислений.ФПД = Запрос.Выполнить().Выгрузить();		
	Иначе
		ДанныеТекущегоНабораНачислений.ФПД = Новый ТаблицаЗначений;	
		ДанныеТекущегоНабораНачислений.ФПД.Колонки.Добавить("Регистратор", РегистрыРасчета.Начисления.ОписаниеТиповПоляРегистратор());
		ДанныеТекущегоНабораНачислений.ФПД.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	КонецЕсли;		
	
	Возврат ДанныеТекущегоНабораНачислений;
КонецФункции	

Функция ИменаИзмеренийРасчетнойБазыНачислений() Экспорт
	
	ИменаИзмерений = Новый Структура(
		"Сотрудник, 
		|ФизическоеЛицо, 
		|ГоловнаяОрганизация");
		
	Возврат ИменаИзмерений;
	
КонецФункции

Функция ЭлементОтбораБазовыхЗаписей(ЛевоеЗначение, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Новый Структура(
		"ЛевоеЗначение, 
		|ВидСравнения, 
		|ПравоеЗначение");
		
	ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	Если ВидСравнения = Неопределено Тогда
		ЭлементОтбора.ВидСравнения = "=";
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Процедура ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления")
	
	// Определяем необходимость заполнения периода действия.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия))
		|			И (Начисления.ПериодДействия = ДАТАВРЕМЯ(1, 1, 1))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Пересоздаем исходную ВТ с заполненным периодом действия.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления") Экспорт
	
	ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления);
	
	// Определяем необходимость корректировки периода.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК Период,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	// Получаем даты корректировки.
	СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	// Пересоздаем исходную ВТ с откорректированными датами.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА КОНЕЦПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА Начисления.ДатаНачала
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК НачалоБазовогоПериода,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА Начисления.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ОкончаниеБазовогоПериода,
		|	Начисления.Начисление,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаНачала,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(ДатыОкончания.ДатаОкончания, Начисления.ДатаОкончания), ДЕНЬ) КАК ДатаОкончания,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, ИмяВТСотрудники = "ВТСотрудникиКорректировкиПериода", МенеджерКадровогоУчета = Неопределено) Экспорт 
	
	// Для начислений фиксированной суммой, корректируем период, по которому будет происходить пропорциональное уменьшение
	// датами приема/увольнения.
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТДатыПриемаУвольненияСотрудников";
	Если МенеджерКадровогоУчета = Неопределено Тогда
		МенеджерКадровогоУчета = КадровыйУчет;
	КонецЕсли;
	МенеджерКадровогоУчета.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ДатаПриема, ДатаЗавершенияРаботы");

	ЗарплатаКадрыРасширенный.СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыИзменений.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ДатыИзменений.ДатаНачала) КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ДатыИзменений.ДатаОкончания) = ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ МИНИМУМ(ДатыИзменений.ДатаОкончания)
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыПриемаУвольнения.Сотрудник КАК Сотрудник,
		|		ДатыПриемаУвольнения.ДатаПриема КАК ДатаНачала,
		|		ВЫБОР
		|			КОГДА ДатыПриемаУвольнения.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИНАЧЕ ДатыПриемаУвольнения.ДатаЗавершенияРаботы
		|		КОНЕЦ КАК ДатаОкончания
		|	ИЗ
		|		ВТДатыПриемаУвольненияСотрудников КАК ДатыПриемаУвольнения
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ДатыПримененияПлановыхНачислений.Сотрудник,
		|		ДатыПримененияПлановыхНачислений.ДатаНачала,
		|		ВЫБОР
		|			КОГДА ДатыПримененияПлановыхНачислений.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
		|			ИНАЧЕ ДатыПримененияПлановыхНачислений.ДатаОкончания
		|		КОНЕЦ
		|	ИЗ
		|		ВТДатыИзмененияПримененияПлановыхНачислений КАК ДатыПримененияПлановыхНачислений) КАК ДатыИзменений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменений.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыПриемаУвольненияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыИзмененияПримененияПлановыхНачислений";
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует расчетную базу начислений или удержаний.
// Будет создана ВТРасчетнаяБаза с полями
//		- РезультатБаза - сумма результата базовых начислений
//		- Регистратор
//		- НомерСтроки
//		- РегистраторРазрез
//		- НомерСтрокиРазрез
//		- ПериодРегистрацииРазрез
//		- ВидРасчетаРазрез.
//
// Параметры:
//	- МенеджерВременныхТаблиц, содержащий 
//		* ВТОсновныеЗаписи с полями
//			- ПериодРегистрации,
//			- Регистратор,
//			- НомерСтроки,
//			- Сотрудник (или другие поля для измерения, имена полей перечисляются в отдельном параметре ИменаИзмерений),
//			- ВидРасчета,
//			- БазовыйПериодНачало,
//			- БазовыйПериодКонец,
//	- ИменаИзмерений - структура с полями Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация (измерениями базового регистра), 
//		для измерений, которые используются, заполняется соответствующее имя поля из таблицы ВТОсновныеЗаписи. 
//		Если не заполнено, измерение не используется.
//		Для создания см. метод ИменаИзмеренийРасчетнойБазыНачислений.
//	- ИмяТаблицыБазовыхВР - полное имя таблицы, 
//		записи которой будут использоваться для определения базовых видов расчета.
//		Таблица должна иметь структуру, соответствующую служебной таблице базовых видов расчета (поля Ссылка и ВидРасчета).
//  
Процедура СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей = Неопределено, МенеджерКадровогоУчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УдалитьВТ = Новый Массив;
	
	// Условие связи основных и базовых записей.
	УсловиеСвязи = "";
	Для Каждого КлючИЗначение Из ИменаИзмерений Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		ПолеОсновнойЗаписи = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ПолеОсновнойЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПустаяСтрока(УсловиеСвязи) Тогда
			УсловиеСвязи = УсловиеСвязи + " И ";
		КонецЕсли;
		УсловиеСвязи = УсловиеСвязи + СтрШаблон("ОсновныеЗаписи.%1 = БазовыеЗаписи.%2", ПолеОсновнойЗаписи, ИмяИзмерения);
	КонецЦикла;
	
	// Отбор базовых записей.
	УсловиеОтбора = "";
	Для Каждого ЭлементОтбора Из ОтборБазовыхЗаписей Цикл
		Если Не ПустаяСтрока(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
		ИмяПараметра = ЛевоеЗначение + ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 В(&%2)", ЛевоеЗначение, ИмяПараметра);
		Иначе
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 %2 &%3", ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ИмяПараметра);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметра, ПравоеЗначение);
	КонецЦикла;
	Если ПустаяСтрока(УсловиеОтбора) Тогда
		УсловиеОтбора = "ИСТИНА";
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления.ФактическийПериодДействия");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрРасчета.Начисления");
	
	// Получаем регистратор из временной таблицы, чтобы из реальной таблицы не прочитать данные того же набора (если они
	// там будут).
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаписиВТ.Регистратор
		|ИЗ
		|	ВТРегистрРасчета_Начисления КАК ЗаписиВТ";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор КАК Регистратор,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ПериодДействияНачало,
		|	БазовыеЗаписи.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|					И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|				ИЛИ БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодКонец
		|					И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписи
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
		|		ПО (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
		|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.Активность = ИСТИНА)
		|			И (&ОтборБазовыхЗаписей)
		|			И (БазовыеЗаписи.Регистратор <> &Регистратор)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ПериодДействияНачало,
		|	БазовыеЗаписи.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|					И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|				ИЛИ БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодКонец
		|					И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК БазовыеЗаписи
		|		ПО (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
		|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.Активность = ИСТИНА)
		|			И (&ОтборБазовыхЗаписей)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ПериодДействия КАК Период,
		|	БазовыеЗаписи.ПериодДействияНачало КАК ДатаНачала,
		|	БазовыеЗаписи.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|ГДЕ
		|	БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБазовыхЗаписей", УсловиеОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		// Для начислений фиксированной суммой, корректируем период, 
		// по которому будет происходить пропорциональное уменьшение датами приема/увольнения, начала окончания отпуска по
		// уходу за ребенком.
		СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц", МенеджерКадровогоУчета);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
	КонецЕсли;
	
	УдалитьВТ.Добавить("ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	УдалитьВТ.Добавить("ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ФПД.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсточникФПДВременнаяТаблица
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИсточникФПД
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
		|		ПО (ФПД.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ФПД.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИнтервалыФПД
		|ИЗ
		|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК БазовыеЗаписиФПД
		|ГДЕ
		|	(БазовыеЗаписиФПД.Регистратор, БазовыеЗаписиФПД.НомерСтроки) В
		|			(ВЫБРАТЬ
		|				БазовыеЗаписи.Регистратор,
		|				БазовыеЗаписи.НомерСтроки
		|			ИЗ
		|				ВТБазовыеЗаписиИсточникФПД КАК БазовыеЗаписи
		|			ГДЕ
		|				БазовыеЗаписи.ИсточникФПДВременнаяТаблица = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					БазовыеЗаписи.Регистратор,
		|					БазовыеЗаписи.НомерСтроки
		|				ИЗ
		|					ВТБазовыеЗаписиИсточникФПД КАК БазовыеЗаписи
		|				ГДЕ
		|					БазовыеЗаписи.ИсточникФПДВременнаяТаблица = ЛОЖЬ)) КАК БазовыеЗаписиФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ГоловнойСотрудник,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, ПериодыДействияБазовыхЗаписей.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ДатыОкончания.ДатаОкончания, ПериодыДействияБазовыхЗаписей.ПериодДействияКонец) КАК ПериодДействияКонец,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиФПД
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиИнтервалыФПД КАК ПериодыДействияБазовыхЗаписей
		|		ПО (ПериодыДействияБазовыхЗаписей.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ПериодыДействияБазовыхЗаписей.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.ГоловнойСотрудник,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписиВремя.ВремяВЧасах
		|			ТОГДА ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяЧасы) КАК ЧИСЛО(17, 8))
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяДни) КАК ЧИСЛО(17, 8))
		|	КОНЕЦ КАК Время
		|ПОМЕСТИТЬ ВТБазовыеЗаписиВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор КАК Регистратор,
		|		БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|		БазовыеЗаписи.Сотрудник КАК Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат КАК Результат,
		|		БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени,
		|		МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) КАК ВремяДни,
		|		СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) КАК ВремяЧасы
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО БазовыеЗаписи.ВидРасчета = ВидыВремени.Ссылка
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ГрафикиРаботыПоВидамВремени.Дата
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.ГоловнойСотрудник,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0),
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.ГоловнойСотрудник,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор КАК Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.Время) КАК ЧИСЛО(23, 8)) КАК Время,
		|	МИНИМУМ(БазовыеЗаписиВремя.ПериодДействияНачало) КАК МинимальнаяДатаНачалаБазовойЗаписи
		|ПОМЕСТИТЬ ВТБазовыеЗаписиМинимальнаяДата
		|ИЗ
		|	ВТБазовыеЗаписиВремя КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписи.Результат) КАК ЧИСЛО(27, 8)) КАК РезультатБаза,
		|	ОсновныеЗаписи.Регистратор КАК Регистратор,
		|	ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.Регистратор КАК РегистраторРазрез,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтрокиРазрез,
		|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
		|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрацииРазрез,
		|	МинимальныеПериодыБазовыхНачислений.Время КАК Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	БазовыеЗаписи.ВидРасчета КАК ВидРасчетаРазрез,
		|	БазовыеЗаписи.Сотрудник КАК СотрудникРазрез,
		|	БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизацияРазрез,
		|	БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиДанные
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиВремя КАК БазовыеЗаписи
		|		ПО (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (БазовыеЗаписи.ПериодДействияНачало <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.ПериодДействияКонец >= ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (ВЫБОР
		|				КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|							И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|						ИЛИ БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец
		|							И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ = БазовыеЗаписи.НеобходимРасчетСуммы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиМинимальнаяДата КАК МинимальныеПериодыБазовыхНачислений
		|		ПО (МинимальныеПериодыБазовыхНачислений.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (МинимальныеПериодыБазовыхНачислений.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписи.Регистратор,
		|	ОсновныеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	МинимальныеПериодыБазовыхНачислений.Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(ОсновныеЗаписиБаза.РезультатБаза) КАК ЧИСЛО(31, 8)) КАК РезультатБаза,
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез,
		|	ОсновныеЗаписиБаза.СотрудникРазрез,
		|	ОсновныеЗаписиБаза.ГоловнаяОрганизацияРазрез
		|ПОМЕСТИТЬ ВТРасчетнаяБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписиДанныеПоДатам.Регистратор КАК Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия <> 0
		|					И БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы
		|				ТОГДА (ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.РезультатБаза КАК ЧИСЛО(20, 2))) * (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.ВремяБазовыйПериод КАК ЧИСЛО(5, 2)), 0)) КАК ЧИСЛО(17, 8)) КАК ЧИСЛО(17, 8))) / БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия КАК ЧИСЛО(19, 8)))
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи = БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало
		|						ТОГДА БазовыеЗаписиДанныеПоДатам.РезультатБаза
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатБаза,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез КАК РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
		|		БазовыеЗаписиДанныеПоДатам.СотрудникРазрез КАК СотрудникРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ГоловнаяОрганизацияРазрез КАК ГоловнаяОрганизацияРазрез
		|	ИЗ
		|		(ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0))
		|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0))
		|			КОНЕЦ КАК ВремяБазовыйПериод,
		|			БазовыеЗаписиДанные.Время КАК ВремяПериодДействия,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи КАК МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза КАК РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор КАК Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки КАК НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез КАК РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез КАК СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез КАК ГоловнаяОрганизацияРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|				ПО БазовыеЗаписиДанные.ВидРасчетаРазрез = ВидыВремени.Ссылка
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			БазовыеЗаписиДанные.БазовыйПериодКонец,
		|			БазовыеЗаписиДанные.ВремяВЧасах,
		|			ГрафикиРаботыПоВидамВремени.Дата,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|				ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
		|			КОНЕЦ,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез,
		|			БазовыеЗаписиДанные.СотрудникРазрез,
		|			БазовыеЗаписиДанные.ГоловнаяОрганизацияРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиДанныеПоДатам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписиДанныеПоДатам.Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки,
		|		БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия,
		|		БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало,
		|		БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы,
		|		БазовыеЗаписиДанныеПоДатам.РезультатБаза,
		|		БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез,
		|		БазовыеЗаписиДанныеПоДатам.СотрудникРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ГоловнаяОрганизацияРазрез) КАК ОсновныеЗаписиБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез,
		|	ОсновныеЗаписиБаза.СотрудникРазрез,
		|	ОсновныеЗаписиБаза.ГоловнаяОрганизацияРазрез";
		
	// Адаптируем текст запроса.
	// Устанавливаем имя таблицы базовых видов расчета по виду ПВР.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	
	// Заполняем условие связи основных и базовых записей.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	
	Запрос.Выполнить();	
	
	УдалитьВТ.Добавить("ВТБазовыеЗаписиИсточникФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиИнтервалыФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписи");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиФПД");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиВремя");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиМинимальнаяДата");
	УдалитьВТ.Добавить("ВТБазовыеЗаписиДанные");

	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры	

Функция СотрудникиФизическиеЛица(Знач СотрудникиФизическиеЛица, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(СотрудникиФизическиеЛица) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СотрудникиФизическиеЛица) <> Тип("Массив") Тогда
		СотрудникиФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиФизическиеЛица);
	КонецЕсли;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если ТипЗнч(СотрудникиФизическиеЛица[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Физлица = КадровыйУчет.ФизическиеЛицаСотрудников(СотрудникиФизическиеЛица);
		Сотрудники = СотрудникиФизическиеЛица;
	Иначе
		Физлица = СотрудникиФизическиеЛица;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Организация, , Истина);
	КонецЕсли;
	
	Возврат Новый Структура("Сотрудники, ФизическиеЛица", Сотрудники, Физлица);
	
КонецФункции

Функция ПорядокВыплаты(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		Возврат Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	Возврат ОписаниеДокумента.ПорядокВыплаты;
	
КонецФункции

Функция ДатаВыплаты(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		Возврат Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.МесяцНачисленияИмя) Тогда
		
		МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
		
		Если ОписаниеДокумента.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца Тогда
			Возврат РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыАванса(Объект.Организация, МесяцНачисления);
		Иначе
			Возврат РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, МесяцНачисления);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РежимНачисления(Объект, ОписаниеДокумента)
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.РежимНачисления) Тогда
		Возврат ОписаниеДокумента.РежимНачисления;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует таблицу значений с начислениями по договорам подряда и авторским договорам.
//
// Параметры:
//		Организация
//		МесяцНачисления
//		ДокументСсылка - ссылка на документ, в котором рассчитываются договоры.
//		Подразделение, СправочникСсылка.ПодразделенияОрганизаций
//		Сотрудники, массив или СправочникСсылка.Сотрудники.
//		ДатаВыплаты - Дата - дата выплаты по-умолчанию. 
//
Функция РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ДокументСсылка, Подразделение = Неопределено, Знач Сотрудники = Неопределено, ДатаВыплаты = Неопределено) Экспорт

	НачисленияПоДоговорам = Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачисленияПоДоговорам();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		// Договоры гражданско-правового характера не используются.
		Возврат НачисленияПоДоговорам;
	КонецЕсли;
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.НачисленияПоДоговорамГПХ");
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрСведений.ОплаченныеДоговоры");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	МАКСИМУМ(УсловияДоговораГПХ.Период) КАК Период
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|ГДЕ
	|	УсловияДоговораГПХ.Период <= &ДатаСреза
	|	И УсловияДоговораГПХ.Организация = &Организация
	|	И (УсловияДоговораГПХ.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления КАК МесяцНачисления,
	|	УсловияДоговораГПХ.Период КАК Период,
	|	УсловияДоговораГПХ.Регистратор КАК Регистратор,
	|	УсловияДоговораГПХ.НомерСтроки КАК НомерСтроки,
	|	УсловияДоговораГПХ.Организация КАК Организация,
	|	УсловияДоговораГПХ.Сотрудник КАК Сотрудник,
	|	УсловияДоговораГПХ.Договор КАК Договор,
	|	УсловияДоговораГПХ.КодДохода КАК КодДохода,
	|	УсловияДоговораГПХ.КатегорияДохода КАК КатегорияДохода,
	|	УсловияДоговораГПХ.КодВычета КАК КодВычета,
	|	УсловияДоговораГПХ.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	УсловияДоговораГПХ.Подразделение КАК Подразделение,
	|	УсловияДоговораГПХ.Территория КАК Территория,
	|	УсловияДоговораГПХ.Сумма КАК Сумма,
	|	УсловияДоговораГПХ.РазмерЕжемесячногоАвансовогоПлатежа КАК РазмерЕжемесячногоАвансовогоПлатежа,
	|	УсловияДоговораГПХ.СуммаВычета КАК СуммаВычета,
	|	УсловияДоговораГПХ.ДатаНачала КАК ДатаНачала,
	|	УсловияДоговораГПХ.ДатаОкончания КАК ДатаОкончания,
	|	УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХ
	|ИЗ
	|	ВТУсловияДоговораГПХМаксимальныеПериоды КАК УсловияДоговораГПХМаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО УсловияДоговораГПХМаксимальныеПериоды.Организация = УсловияДоговораГПХ.Организация
	|			И УсловияДоговораГПХМаксимальныеПериоды.Сотрудник = УсловияДоговораГПХ.Сотрудник
	|			И УсловияДоговораГПХМаксимальныеПериоды.Договор = УсловияДоговораГПХ.Договор
	|			И УсловияДоговораГПХМаксимальныеПериоды.Период = УсловияДоговораГПХ.Период
	|ГДЕ
	|	&УсловиеПодразделение
	|	И НАЧАЛОПЕРИОДА(УсловияДоговораГПХ.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХ.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	ТекстУсловияПодразделение = "ИСТИНА";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "УсловияДоговораГПХ.Подразделение В ИЕРАРХИИ (&Подразделение)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
			
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыплатыПоДоговорамОпеки.ДобавитьДанныеВыплатПоДоговорамОпеки(Запрос, Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХОбороты.Сумма) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХ
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХОбороты
	|ГДЕ
	|	НачисленияПоДоговорамГПХОбороты.Период < &МесяцНачисления
	|	И НачисленияПоДоговорамГПХОбороты.Организация = &Организация
	|	И НачисленияПоДоговорамГПХОбороты.Договор В
	|			(ВЫБРАТЬ
	|				УсловияДоговораГПХ.Договор
	|			ИЗ
	|				ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХОбороты.Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор,
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХ.Сумма
	|ИЗ
	|	ВТРегистрНакопления_НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|ГДЕ
	|	НачисленияПоДоговорамГПХ.Период < &МесяцНачисления
	|	И НачисленияПоДоговорамГПХ.Организация = &Организация
	|	И НачисленияПоДоговорамГПХ.Договор В
	|			(ВЫБРАТЬ
	|				УсловияДоговораГПХ.Договор
	|			ИЗ
	|				ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)
	|	И НачисленияПоДоговорамГПХ.Регистратор <> &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХ.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХ.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХОбороты
	|ИЗ
	|	НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХ.Организация КАК Организация,
	|	НачисленияПоДоговорамГПХ.Договор КАК Договор,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(НачисленияПоДоговорамГПХ.Сумма) КАК СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХЗаМесяц
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХ
	|ГДЕ
	|	НачисленияПоДоговорамГПХ.Период >= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Период <= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И НачисленияПоДоговорамГПХ.Организация = &Организация
	|	И НачисленияПоДоговорамГПХ.Договор В
	|			(ВЫБРАТЬ
	|				УсловияДоговораГПХ.Договор
	|			ИЗ
	|				ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)
	|	И НачисленияПоДоговорамГПХ.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияПоДоговорамГПХ.Организация,
	|	НачисленияПоДоговорамГПХ.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХ.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплаченныеДоговоры.ДоговорАкт КАК ДоговорАкт
	|ПОМЕСТИТЬ ОплаченныеДоговоры
	|ИЗ
	|	РегистрСведений.ОплаченныеДоговоры КАК ОплаченныеДоговоры
	|ГДЕ
	|	ОплаченныеДоговоры.Регистратор <> &Ссылка
	|	И ОплаченныеДоговоры.МесяцНачисления = &МесяцНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОплаченныеДоговоры.ДоговорАкт
	|ИЗ
	|	ВТРегистрСведений_ОплаченныеДоговоры КАК ОплаченныеДоговоры
	|ГДЕ
	|	ОплаченныеДоговоры.Регистратор <> &Ссылка
	|	И ОплаченныеДоговоры.МесяцНачисления = &МесяцНачисления";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТСоответствиеВидовДоходовДляСтудентов") Тогда
		УчетСтраховыхВзносовРасширенный.СформироватьВТСоответствиеВидовДоходовДляСтудентов(МенеджерВременныхТаблиц);
	КонецЕсли; 
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", УчетНДФЛ.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
	Запрос.УстановитьПараметр("ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских", УчетНДФЛ.ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Период КАК Период,
	|	Начисления.МесяцНачисления КАК МесяцНачисления,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Договор КАК Договор,
	|	Начисления.ДоговорАкт КАК ДоговорАкт,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	ВЫБОР
	|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	ВЫБОР
	|		КОГДА Начисления.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЕСТЬNULL(СоответствиеВидовДоходовДляСтудентов.ВидДоходаДляСтудотрядов, Начисления.КодДоходаСтраховыеВзносы)
	|		ИНАЧЕ Начисления.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
	|	ВЫБОР
	|		КОГДА Начисления.ЗаключенСоСтудентомРаботающимВСтудотряде
	|			ТОГДА ЕСТЬNULL(СоответствиеВидовДоходовДляСтудентов.ВидДоходаДляСтудотрядов, Начисления.КодДоходаСтраховыеВзносы)
	|		ИНАЧЕ Начисления.КодДоходаСтраховыеВзносы
	|	КОНЕЦ КАК ВидДохода,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.СуммаВычета КАК СуммаВычета,
	|	ВЫБОР
	|		КОГДА Начисления.КодВычета В (&ВычетВСуммеРасходовПоДоговорамГПХКромеАвторских)
	|			ТОГДА 0
	|		ИНАЧЕ Начисления.СкидкаПоВзносам
	|	КОНЕЦ КАК СкидкаПоВзносам,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.КоличествоДетей КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачисленияПоДоговорам.МесяцНачисления КАК Период,
	|		НачисленияПоДоговорам.МесяцНачисления КАК МесяцНачисления,
	|		НачисленияПоДоговорам.Организация КАК Организация,
	|		НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|		НачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|		НачисленияПоДоговорам.Договор КАК Договор,
	|		НачисленияПоДоговорам.ДоговорАкт КАК ДоговорАкт,
	|		НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|		НачисленияПоДоговорам.КатегорияДохода КАК КатегорияДохода,
	|		НачисленияПоДоговорам.КодВычета КАК КодВычета,
	|		НачисленияПоДоговорам.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|		НачисленияПоДоговорам.ЗаключенСоСтудентомРаботающимВСтудотряде КАК ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|		НачисленияПоДоговорам.Территория КАК Территория,
	|		НачисленияПоДоговорам.Сумма КАК Сумма,
	|		НачисленияПоДоговорам.СуммаВычета КАК СуммаВычета,
	|		НачисленияПоДоговорам.СуммаВычета КАК СкидкаПоВзносам,
	|		НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|		НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|		ВЫБОР
	|			КОГДА НачисленияПоДоговорам.Регистратор ССЫЛКА Документ.АктПриемкиВыполненныхРаботОказанныхУслуг
	|				ТОГДА НачисленияПоДоговорам.ПланируемаяДатаВыплаты
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ КАК ПланируемаяДатаВыплаты,
	|		НачисленияПоДоговорам.Регистратор КАК Регистратор,
	|		НачисленияПоДоговорам.НомерСтроки КАК НомерСтроки,
	|		0 КАК КоличествоДетей
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОплаченныеДоговоры КАК СуществующиеНачисления
	|			ПО НачисленияПоДоговорам.ДоговорАкт = СуществующиеНачисления.ДоговорАкт
	|	ГДЕ
	|		НачисленияПоДоговорам.Организация = &Организация
	|		И НачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
	|		И СуществующиеНачисления.ДоговорАкт ЕСТЬ NULL
	|		И &УсловиеПодразделение
	|		И (НачисленияПоДоговорам.Сотрудник В (&Сотрудники)
	|				ИЛИ &БезОтбораПоСотрудникам)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&МесяцНачисления,
	|		&МесяцНачисления,
	|		УсловияДоговораГПХСрезПоследних.Организация,
	|		УсловияДоговораГПХСрезПоследних.Сотрудник,
	|		УсловияДоговораГПХСрезПоследних.ФизическоеЛицо,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.Договор,
	|		УсловияДоговораГПХСрезПоследних.КодДохода,
	|		УсловияДоговораГПХСрезПоследних.КатегорияДохода,
	|		УсловияДоговораГПХСрезПоследних.КодВычета,
	|		УсловияДоговораГПХСрезПоследних.КодДоходаСтраховыеВзносы,
	|		УсловияДоговораГПХСрезПоследних.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|		УсловияДоговораГПХСрезПоследних.Подразделение,
	|		УсловияДоговораГПХСрезПоследних.Территория,
	|		ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|					ИЛИ УсловияДоговораГПХСрезПоследних.Договор ССЫЛКА Документ.ВыплатыПоДоговорамОпеки
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|						ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|				КОНЕЦ
	|		КОНЕЦ,
	|		УсловияДоговораГПХСрезПоследних.СуммаВычета,
	|		УсловияДоговораГПХСрезПоследних.СуммаВычета,
	|		УсловияДоговораГПХСрезПоследних.ДатаНачала,
	|		УсловияДоговораГПХСрезПоследних.ДатаОкончания,
	|		УсловияДоговораГПХСрезПоследних.ПланируемаяДатаВыплаты,
	|		УсловияДоговораГПХСрезПоследних.Регистратор,
	|		УсловияДоговораГПХСрезПоследних.НомерСтроки,
	|		0
	|	ИЗ
	|		ВТУсловияДоговораГПХ КАК УсловияДоговораГПХСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХОбороты КАК НачисленияПоДоговорамГПХОбороты
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХОбороты.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХОбороты.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХЗаМесяц КАК НачисленияПоДоговорамГПХЗаМесяц
	|			ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХЗаМесяц.Договор
	|				И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХЗаМесяц.Организация
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|						ИЛИ УсловияДоговораГПХСрезПоследних.Договор ССЫЛКА Документ.ВыплатыПоДоговорамОпеки
	|					ТОГДА ВЫБОР
	|							КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0) > 0
	|								ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|						ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа - ЕСТЬNULL(НачисленияПоДоговорамГПХЗаМесяц.СуммаОборот, 0)
	|					КОНЕЦ
	|			КОНЕЦ > 0) КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВидовДоходовДляСтудентов КАК СоответствиеВидовДоходовДляСтудентов
	|		ПО Начисления.КодДоходаСтраховыеВзносы = СоответствиеВидовДоходовДляСтудентов.ВидДохода";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "НачисленияПоДоговорам.Подразделение В ИЕРАРХИИ (&Подразделение)";
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
	
	Запрос.Выполнить();
	
	// Рассчитаем вычеты в пределах нормативов затрат.
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц,,"ВТПредоставленныеВычеты");
	
	УчетСтраховыхВзносов.СоздатьВТСкидкиКДоходамФизическихЛиц(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ДокументСсылка,, "ВТПредоставленныеСкидки");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.МесяцНачисления КАК МесяцНачисления,
	|	Начисления.Организация КАК Организация,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДоговорАкт КАК ДокументОснование,
	|	ЕСТЬNULL(ДоговорРаботыУслуги.НеОблагаетсяНДФЛ, ЕСТЬNULL(ДоговорАвторскогоЗаказа.НеОблагаетсяНДФЛ, ЛОЖЬ)) КАК НеОблагаетсяНДФЛ,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.КатегорияДохода КАК КатегорияДохода,
	|	Начисления.КодВычета КАК КодВычета,
	|	Начисления.КодДоходаСтраховыеВзносы КАК КодДоходаСтраховыеВзносы,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Территория КАК Территория,
	|	Начисления.Сумма КАК Результат,
	|	ЕСТЬNULL(ВычетыВПределахНормативовЗатрат.СуммаВычета, Начисления.СуммаВычета) КАК СуммаВычета,
	|	ЕСТЬNULL(СкидкиКДоходамФизическихЛиц.СуммаСкидки, Начисления.СкидкаПоВзносам) КАК СкидкаПоВзносам,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Начисления.ПланируемаяДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПланируемаяДатаВыплаты
	|		ИНАЧЕ Начисления.ПланируемаяДатаВыплаты
	|	КОНЕЦ КАК ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамФизическихЛиц КАК ВычетыВПределахНормативовЗатрат
	|		ПО Начисления.Регистратор = ВычетыВПределахНормативовЗатрат.Регистратор
	|			И Начисления.НомерСтроки = ВычетыВПределахНормативовЗатрат.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСкидкиКДоходамФизическихЛиц КАК СкидкиКДоходамФизическихЛиц
	|		ПО Начисления.Регистратор = СкидкиКДоходамФизическихЛиц.Регистратор
	|			И Начисления.НомерСтроки = СкидкиКДоходамФизическихЛиц.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|		ПО Начисления.Договор = ДоговорРаботыУслуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
	|		ПО Начисления.Договор = ДоговорАвторскогоЗаказа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОплаченныеДоговоры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХЗаМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачисленияПоДоговорамГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУсловияДоговораГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредоставленныеВычеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПредоставленныеСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыКДоходамФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоответствиеВидовДоходовДляСтудентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСкидкиКДоходамФизическихЛиц";
	
	ВыплатыПоДоговорамОпеки.ДобавитьУничтожениеВТ(Запрос);
	
	ПланируемаяДатаВыплатыЗарплаты = ДатаВыплаты;
	
	Если Не ЗначениеЗаполнено(ДатаВыплаты) Тогда
		ПланируемаяДатаВыплатыЗарплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ПланируемаяДатаВыплатыЗарплаты);
	
	ИспользуютсяТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНачисления = НачисленияПоДоговорам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисления, Выборка);
		
		ТерриторииУсловияТруда = Обработки.МенеджерРасчетаЗарплаты.ТаблицаТерриторийУсловийТруда();
		Если ИспользуютсяТерритории Тогда
			СтрокаТерритории = ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТерритории, Выборка);
			СтрокаТерритории.Показатели = Обработки.МенеджерРасчетаЗарплаты.ТаблицаПоказателей();
		КонецЕсли;
		СтрокаНачисления.ТерриторииУсловияТруда = ТерриторииУсловияТруда;
	КонецЦикла;
	
	Возврат НачисленияПоДоговорам;

КонецФункции

Функция КонтролируемыеПоляКорректировкиВыплатыДляФиксацииРезультатов() Экспорт
	
	КорректировкиВыплатыФиксРасчет = Новый Массив;
	КорректировкиВыплатыФиксРасчет.Добавить("КорректировкаВыплаты");
	
	КорректировкиВыплатыФиксСтрока = Новый Массив;
	КорректировкиВыплатыФиксСтрока.Добавить("ФизическоеЛицо");
	
	Возврат Новый Структура("ФиксРасчет, ФиксСтрока", КорректировкиВыплатыФиксРасчет, КорректировкиВыплатыФиксСтрока)
	
КонецФункции

Процедура ЗаменитьСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ, НДФЛ, ОбновляемаяКоллекцияВычеты, ПримененныеВычеты, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок = Неопределено, СохранятьИсправления = Истина, КлючевыеКолонки = "ФизическоеЛицо") Экспорт
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ);
	
	// Заполняем строки идентификатором увеличенным на единицу, относительно максимального.
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		МаксимальныйИдентификаторСтрокиНДФЛ + 1, НДФЛ, ПримененныеВычеты);
	
	УсловияЗаменыСтрок = Неопределено;
	
	// Сохранение идентификаторов заменяемых строк НДФЛ.
	ИдентификаторыСтрокНДФЛ = Новый Массив;
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСтрокНДФЛ, 
		ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ"));
		
	// Обновление строк таблицы НДФЛ.
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НДФЛИмя);
	КонецЕсли;
	
	// Таблица ПримененныеВычеты, является расширением строк таблицы НДФЛ,
	// поэтому замена строк в таблицы ПримененныеВычеты, должна выполняться на тех же условиях, что
	// и замена строк таблицы НДФЛ.
	
	// Сбор информации об идентификаторах строка НДФЛ принимающих участие в замене.
	ИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекцияНДФЛ, НДФЛ, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборСтрок);
	
	Если ОписаниеДокумента.ПримененныеВычетыИмя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление из коллекции ИдентификаторыСтрокНДФЛУчаствующихВЗамене, идентификаторов
	// строк, не подвергшихся замене, добавление в коллекцию идентификаторов 
	// новых строк НДФД.
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	Для каждого ИдентификаторСтрокиНДФЛ Из ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене Цикл
		
		ИндексЭлемента = ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Найти(ИдентификаторСтрокиНДФЛ);
		Если ИндексЭлемента = Неопределено Тогда
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Добавить(ИдентификаторСтрокиНДФЛ);
		Иначе
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
		
	// Обновление строк таблицы ПримененныеВычеты.
	ЗаменитьСтрокиНаНовыеДанные(
		ОбновляемаяКоллекцияВычеты, 
		ПримененныеВычеты, 
		"ИдентификаторСтрокиНДФЛ", , 
		Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторыСтрокНДФЛУчаствующихВЗамене));
	
КонецПроцедуры

Функция ЗначениеПоказателяПоСсылке(Показатели, Показатель) Экспорт
	
	Строка = СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель);
	
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строка.Значение;

КонецФункции

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Если Показатель = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует показатель расчета зарплаты с идентификатором %1';
										|en = 'The payroll calculation indicator with the %1 ID is missing'"), Идентификатор);
	КонецЕсли;
	Возврат ЗначениеПоказателяПоСсылке(Показатели, Показатель);
	
КонецФункции

Функция СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель) Экспорт
	
	Если Показатели.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура("Показатель");
	Отбор.Показатель = Показатель;
	НайденныеСтроки = Показатели.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0];

КонецФункции

Функция СтрокаЗначенияПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Показатель = ЗарплатаКадрыРасширенный.ПоказательПоИдентификатору(Идентификатор);
	Возврат СтрокаЗначенияПоказателяПоСсылке(Показатели, Показатель);

КонецФункции

// Получает таблицу действующих плановых удержаний.
//
// Параметры:
//		ИсходныеДанные - таблица значений с полями.
//			Период
//			ФизическоеЛицо
//			Организация
//
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Удержание
//		
Функция ДействующиеПлановыеУдержания(ИсходныеДанные, Регистратор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если Регистратор <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИсходныеДанные),
		ПараметрыПостроения);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.ФизическоеЛицо,
	|	ПлановыеУдержания.Организация,
	|	ПлановыеУдержания.ДокументОснование,
	|	ПлановыеУдержания.ПериодВозвратногоСобытия КАК ДатаОкончания,
	|	ПлановыеУдержания.Удержание
	|ИЗ
	|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Используется";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод)
	
	УдержанияЗаПериод.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ТарифПлатежногоАгента", Новый ОписаниеТипов("СправочникСсылка.ТарифыПлатежныхАгентов"));
	УдержанияЗаПериод.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("ВидБазы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБазыУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Числитель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Знаменатель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("ПрожиточныйМинимум", Новый ОписаниеТипов("СправочникСсылка.ПрожиточныеМинимумы"));
	УдержанияЗаПериод.Колонки.Добавить("Предел", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("УчитыватьБольничныеЛисты", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Заменяет строки таблицы ЗаменяемыеДанные строками таблица ЗаменяющиеДанные.
// Сопоставление строк выполняется по колонке КлючеваяКолонка для массива значений Значения.
// Если требуется - вставляет новые строки.
// Если требуется - удаляет неиспользованные старые строки.
//
// Параметры:
//	Значения
//	КлючеваяКолонка - имена колонок через запятую, по которым выполняется сопоставление заменяемой коллекции.
//	ЗаменяемыеДанные - коллекция строк, в которой необходимо выполнить замену.
//	ЗаменяющиеДанные - коллекция строк, которые нужно использовать для замены строк в коллекции ЗаменяемыеДанные.
//	УсловиеЗамены - структура, если указано, замена производится только в случае, 
//		если значения полей структуры по всем заменяемых строкам соблюдается.
//	ОтборСтрок - структура, если указано, в коллекциях обрабатываются только строки, удовлетворяющие отбору, 
//		в качестве значения может быть указан массив значений.
//
Функция ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, УсловияЗамены = Неопределено, ОтборСтрок = Неопределено) Экспорт
	
	// Возвращаемым значением является массив идентификаторов замененных строк.
	ЗамененныеСтроки = Новый Массив;
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		СоответствуетУсловиям = Истина;
		Если УсловияЗамены <> Неопределено Тогда
			// Если коллекция старых строк, имеет хотя бы одну строку, 
			// не соответствующую условиям замены - не обновляем.
			Для Каждого СтараяСтрока Из СтарыеСтроки Цикл
				Для Каждого КлючИЗначение Из УсловияЗамены Цикл
					Если СтараяСтрока[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						СоответствуетУсловиям = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		НовыеСтроки = НайтиСтроки(ЗаменяющиеДанные, КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Если СтарыеСтроки.Количество() = 0 И МассивКлючевыхКолонок.Количество() > 0 Тогда
			// Предполагается, что первой колонкой передан сотрудник или физическое лицо.
			ИмяПоляРаботник = МассивКлючевыхКолонок[0];
			СтрокиРаботника = ЗаменяемыеДанные.НайтиСтроки(Новый Структура(ИмяПоляРаботник, СочетаниеКлючевых[ИмяПоляРаботник]));
			КоличествоСтрокРаботника = СтрокиРаботника.Количество();
			Если КоличествоСтрокРаботника > 0 Тогда 
				ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокиРаботника[КоличествоСтрокРаботника - 1]) + 1;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
			Если ЕстьПолеВСтрокеКоллекции(Строка, "ИдентификаторСтрокиВидаРасчета") Тогда
				ЗамененныеСтроки.Добавить(Строка.ИдентификаторСтрокиВидаРасчета);
			КонецЕсли;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

Функция НовыйСодержимоеДокументаРасчетаЗарплаты() Экспорт
	
	СодержимоеДокумента = Новый Структура;
	СодержимоеДокумента.Вставить("Начисления", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("НачисленияПерерасчет", ПустаяТаблицаНачисления(Истина));
	СодержимоеДокумента.Вставить("Пособия", ПустаяТаблицаПособия());
	СодержимоеДокумента.Вставить("ПособияПерерасчет", ПустаяТаблицаПособия(Истина));
	СодержимоеДокумента.Вставить("Льготы", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("ЛьготыПерерасчет", ПустаяТаблицаНачисления(Истина));
	СодержимоеДокумента.Вставить("НачисленияПоДоговорам", ПустаяТаблицаНачисленияПоДоговорам());
	СодержимоеДокумента.Вставить("Удержания", ПустаяТаблицаУдержанияДокумента());
	СодержимоеДокумента.Вставить("УдержанияПерерасчет", ПустаяТаблицаУдержанияДокумента());
	СодержимоеДокумента.Вставить("НДФЛ", ПустаяТаблицаНДФЛДокумента());
	СодержимоеДокумента.Вставить("УчтенныеПриРасчетеНДФЛДокументы", ПустаяТаблицаУчтенныеПриРасчетеНДФЛДокументы());
	СодержимоеДокумента.Вставить("КорректировкиВыплаты", РасчетЗарплаты.ТаблицаКорректировкиВыплатыДокумента());
	СодержимоеДокумента.Вставить("ПримененныеВычетыНаДетейИИмущественные", ПустаяТаблицаПримененныеВычетыНДФЛДокумента());
	СодержимоеДокумента.Вставить("Взносы", ПустаяТаблицаВзносыДокумента());
	СодержимоеДокумента.Вставить("ПогашениеЗаймов", ПустаяТаблицаПогашениеЗаймов());
	СодержимоеДокумента.Вставить("СотрудникиПерерасчет", ПерерасчетЗарплаты.ПустаяТаблицаСотрудникиПериодДействияПерерасчет());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриФормированииСтруктурыСодержимоеДокументаРасчетаЗарплаты(СодержимоеДокумента);
	КонецЕсли;
	
	Возврат СодержимоеДокумента;
	
КонецФункции

Функция СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, ПозицииВставки, ФизическиеЛица = Неопределено) Экспорт 
	
	СодержимоеДокумента 	= НовыйСодержимоеДокументаРасчетаЗарплаты();
	СтрокиПримененныеВычеты = Новый Массив;
	ДокументыКУдалению 		= Новый Массив;
	ПроверятьФизическоеЛицо = ФизическиеЛица <> Неопределено;
	СтрокиВычетовПоИдентификаторам = Новый Соответствие;
	УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПримененныеВычетыИмя) Тогда
		СтрокиВычетовПоИдентификаторам = СтрокиВычетовПоИдентификаторам(Объект[ОписаниеДокумента.ПримененныеВычетыИмя]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.УчтенныеПриРасчетеНДФЛДокументыИмя) Тогда
		УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам = УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам(Объект[ОписаниеДокумента.УчтенныеПриРасчетеНДФЛДокументыИмя]);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СодержимоеДокумента Цикл
		Если КлючИЗначение.Ключ = "ПримененныеВычетыНаДетейИИмущественные"
			Или КлючИЗначение.Ключ = "УчтенныеПриРасчетеНДФЛДокументы" Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = КлючИЗначение.Ключ + "Имя";
		
		Если Не ОписаниеДокумента.Свойство(ИмяТаблицы)
			Или ОписаниеДокумента[ИмяТаблицы] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
			
		ТаблицаДокумента = Объект[ОписаниеДокумента[ИмяТаблицы]];
		Если ТаблицаДокумента.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяПоляСотрудник 				= "";
		ФизическиеЛицаСотрудников 		= Новый Соответствие;
		Если ПроверятьФизическоеЛицо Тогда
			ИдентификаторыСтрокСотрудников 	= Новый Соответствие;
			ПозицииВставки.Вставить(ОписаниеДокумента[ИмяТаблицы], ИдентификаторыСтрокСотрудников);
		КонецЕсли;
		
		Если ОписаниеДокумента.ОписанияТаблиц.Свойство(КлючИЗначение.Ключ)
			И ОписаниеДокумента.ОписанияТаблиц[КлючИЗначение.Ключ].СодержитПолеСотрудник Тогда
			
			ИмяПоляСотрудник = ОписаниеДокумента.ОписанияТаблиц[КлючИЗначение.Ключ].ИмяРеквизитаСотрудник;
		ИначеЕсли ТаблицаДокумента[0].Свойство("Сотрудник") Тогда
			ИмяПоляСотрудник = "Сотрудник";
		ИначеЕсли ТаблицаДокумента[0].Свойство("ФизическоеЛицо") Тогда
			ИмяПоляСотрудник = "ФизическоеЛицо";
		Иначе
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ТаблицаДокумента[0][ИмяПоляСотрудник]) = Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, ИмяПоляСотрудник);
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если ПроверятьФизическоеЛицо Тогда
				ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
				Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
					ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаТаблицы[ИмяПоляСотрудник]];
				КонецЕсли;
				
				Если ФизическиеЛица.Найти(ФизическоеЛицо) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаТаблицы[ИмяПоляСотрудник], СтрокаТаблицы.ПолучитьИдентификатор());
			КонецЕсли;
			
			НоваяСтрока = КлючИЗначение.Значение.Добавить();
			Если КлючИЗначение.Ключ = "НДФЛ" Тогда
				НайденныеВычеты = СтрокиВычетовПоИдентификаторам[СтрокаТаблицы.ИдентификаторСтрокиНДФЛ];
				Если НайденныеВычеты <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденныеВычеты, СодержимоеДокумента["ПримененныеВычетыНаДетейИИмущественные"]);
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиПримененныеВычеты, НайденныеВычеты);
				КонецЕсли;
				
				НайденныеДокументы = УчтенныеПриРасчетеНДФЛДокументыПоФизическимЛицам[СтрокаТаблицы.ФизическоеЛицо];
				Если НайденныеДокументы <> Неопределено Тогда
					НоваяСтрока.УчтенныеОснования = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеДокументы, "ДокументОснование");
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКУдалению, НайденныеДокументы, Истина);
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Если ПроверятьФизическоеЛицо Тогда
		Если ЗначениеЗаполнено(ОписаниеДокумента.ПримененныеВычетыИмя) Тогда
			Для Каждого СтрокаПримененныеВычеты Из СтрокиПримененныеВычеты Цикл 
				Объект[ОписаниеДокумента.ПримененныеВычетыИмя].Удалить(СтрокаПримененныеВычеты);
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеДокумента.УчтенныеПриРасчетеНДФЛДокументыИмя) Тогда
			Для Каждого ДокументКУдалению Из ДокументыКУдалению Цикл 
				Объект[ОписаниеДокумента.УчтенныеПриРасчетеНДФЛДокументыИмя].Удалить(ДокументКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя, Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПорядокВыплатыИмя, Объект[ОписаниеДокумента.ПорядокВыплатыИмя]);
	КонецЕсли;
	
	Возврат СодержимоеДокумента;
	
КонецФункции

// Заполняет поле ФизическоеЛицо в коллекции строк, опираясь на поле Сотрудник.
// Может использовать заранее выявленную коллекцию сотрудников.
//
// Параметры:
//	КоллекцияСтрок - любая коллекция элементов, доступная для обхода циклом Для каждого Из, 
//		элементы должны иметь обязательные поля ФизическоеЛицо и Сотрудник.
//	Сотрудники - необязательный, массив сотрудников.
//
Процедура ЗаполнитьФизическихЛицПоСотрудникам(КоллекцияСтрок, Сотрудники = Неопределено) Экспорт
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, "Сотрудник", Истина);
	КонецЕсли;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СтрокаКоллекции.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаКоллекции.Сотрудник];
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет поиск строк в КоллекцияСтрок по заданному отбору.
//
Функция НайтиСтроки(КоллекцияСтрок, Отбор)
	
	НайденныеСтроки = Новый Массив;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетОтбору = Истина;
		Для Каждого КлючИЗначение Из Отбор Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если СтрокаКоллекции[ИмяОтбора] <> ЗначениеОтбора Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция СтрокиТаблицыДокументаПоПериодуРегистрации(ТаблицаДанных, ПериодРегистрацииДокумента, ПериодРегистрации, ЭтоПервыйПериод, Сотрудники, ИдентификаторКолонкиПериодРегистрации = "ПериодДействия", ИдентификаторКолонкиСотрудник = "Сотрудник") Экспорт
	
	Если ТаблицаДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтобранныеСтроки = ТаблицаДанных.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицыДанных[ИдентификаторКолонкиПериодРегистрации] <= ПериодРегистрацииДокумента
			Или ПериодРегистрации <= ПериодРегистрацииДокумента Тогда
			
			НачалоПериодаРегистрации = НачалоМесяца(ПериодРегистрации);
			КонецПериодаРегистрации = КонецМесяца(ПериодРегистрации);
			Если СтрокаТаблицыДанных[ИдентификаторКолонкиПериодРегистрации] > КонецПериодаРегистрации 
				Или СтрокаТаблицыДанных[ИдентификаторКолонкиПериодРегистрации] < НачалоПериодаРегистрации 
				И Не ЭтоПервыйПериод Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Сотрудники.Найти(СтрокаТаблицыДанных[ИдентификаторКолонкиСотрудник]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОтобраннаяСтрока = ОтобранныеСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(ОтобраннаяСтрока, СтрокаТаблицыДанных);
		
	КонецЦикла;
	
	Возврат ОтобранныеСтроки;
	
КонецФункции

Функция СтрокиПоказателейНачисленийУдержаний(ПоказателиНачисленийУдержаний, НачисленияУдержания) Экспорт
	
	ОтобранныеСтроки = ПоказателиНачисленийУдержаний.СкопироватьКолонки();
	
	Для Каждого СтрокаНачисленияУдержания Из НачисленияУдержания Цикл
		
		СтрокиПоказателей = ПоказателиНачисленийУдержаний.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаНачисленияУдержания.ИдентификаторСтроки));
		Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
			
			ЗаполнитьЗначенияСвойств(ОтобранныеСтроки.Добавить(), СтрокаПоказателей);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтобранныеСтроки;
	
КонецФункции

Процедура ДобавитьЗаписьВосстановленияСобытияПлановыхНачислений(НоваяСтрока, СтрокаПредыдущихЗначений, СтрокаПлановыхНачислений, ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, ПособиеПоУходуЗаРебенком)
	
	Если СтрокаПредыдущихЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Восстановление предыдущего состояния
	Если Не ЗначениеЗаполнено(СтрокаПлановыхНачислений.ДействуетДо) Тогда
		Возврат;
	КонецЕсли;
			
	// Запоминание строки для восстановления движений
	Если Не ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПособиеПоУходуЗаРебенком И НоваяСтрока.Используется Тогда
		
		СтрокаВосстановленияВозвратногоСобытия = Движения.ПлановыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
		
		СтрокаВосстановленияВозвратногоСобытия.Используется = Ложь;
		СтрокаВосстановленияВозвратногоСобытия.Размер = СтрокаПредыдущихЗначений.Размер;
		СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.Период;
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ПлановыеНачисления.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		Если ВремяРегистрацииДокумента <> Неопределено Тогда 
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаПлановыхНачислений.ДатаСобытия);
			Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
				СтрокаВосстановленияВозвратногоСобытия.Период = ВремяРегистрацииСотрудников.Получить(СтрокаПлановыхНачислений.Сотрудник) - 1;
			КонецЕсли;
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ПлановыеНачисления, СтрокаВосстановленияВозвратногоСобытия);
	КонецЕсли;
		
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПособиеПоУходуЗаРебенком Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВосстановленияВозвратногоСобытия = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
	
	СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 1;
	СтрокаВосстановленияВозвратногоСобытия.Используется = СтрокаПредыдущихЗначений.Используется;
	СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
	СтрокаВосстановленияВозвратногоСобытия.ПериодСреза = СтрокаПредыдущихЗначений.ПериодЗаписи - 1;
	
	Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия < НоваяСтрока.ДействуетДо + 1 Тогда
		СтрокаВосстановленияВозвратногоСобытия.ПроверкаНеобходимостиВосстановления = Истина;
		СтрокаВосстановленияВозвратногоСобытия.СтрокаДвижений = НоваяСтрока;
	КонецЕсли;
	
	Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > НоваяСтрока.ДействуетДо + 2 Тогда
		
		СтрокаВосстановленияВозвратногоСобытия = Движения.ПлановыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
		
		СтрокаВосстановленияВозвратногоСобытия.Используется = СтрокаПредыдущихЗначений.Используется;
		СтрокаВосстановленияВозвратногоСобытия.Размер = СтрокаПредыдущихЗначений.Размер;
		СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
		СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 2;
		
		ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ПлановыеНачисления, СтрокаВосстановленияВозвратногоСобытия);
	КонецЕсли;
				
КонецПроцедуры

Процедура СформироватьЗаписиВосстановленияСобытияПлановыхНачислений(ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, Регистратор)
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Индексы.Добавить("Сотрудник,Начисление,ДокументОснование,ПериодСреза");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДвиженийНаНачалоВосстановительныхЗаписей", ТаблицаДвиженийНаНачалоВосстановительныхЗаписей);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ПериодСреза КАК Период
		|ПОМЕСТИТЬ ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей
		|ИЗ
		|	&ТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей", "Сотрудник,Начисление,ДокументОснование");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период КАК ПериодСреза,
		|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Используется, ЛОЖЬ) КАК Используется,
		|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ПО ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Начисление = ПлановыеНачисленияСрезПоследних.Начисление
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование = ПлановыеНачисленияСрезПоследних.ДокументОснование
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период = ПлановыеНачисленияСрезПоследних.Период";
	
	СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ДокументОснование, ПериодСреза");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИнфоОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Выборка.Начисление);
		РазмерФОТСохраняется = Не ИнфоОНачислении.ФОТНеРедактируется Или Не ИнфоОНачислении.Рассчитывается;
		ПособиеПоУходуЗаРебенком = ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет
			Или ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим
			Или ИнфоОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет;
			
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		СтрокиТаблицы = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			
			Если Не СтрокаТаблицы.ПроверкаНеобходимостиВосстановления
				Или РазмерФОТСохраняется И СтрокаТаблицы.СтрокаДвижений.Размер <> Выборка.Размер
				Или СтрокаТаблицы.СтрокаДвижений.Используется <> Выборка.Используется Тогда
				
				СтрокаДвижений = Движения.ПлановыеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы, "Период,Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
				СтрокаДвижений.Используется = Выборка.Используется;
				СтрокаДвижений.Размер = Выборка.Размер;
				
				ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ПлановыеНачисления, СтрокаДвижений);
			Иначе
				Если СтрокаТаблицы.СтрокаДвижений.Используется = Выборка.Используется Тогда
					СтрокаТаблицы.СтрокаДвижений.ДействуетДо = '00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьЗаписьВосстановленияСобытияЗначенийПоказателей(НоваяСтрока, СтрокаПредыдущихЗначений, СтрокаЗначенийПоказателей, ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения)
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаПредыдущихЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Восстановление предыдущего состояния
	Если Не ЗначениеЗаполнено(СтрокаЗначенийПоказателей.ДействуетДо) Тогда
		Возврат;
	КонецЕсли;
			
	// Запоминание строки для восстановления движений
	Если Не ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия) Тогда
		Возврат;
	КонецЕсли;
				
	СтрокаВосстановленияВозвратногоСобытия = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
	
	СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 1;
	СтрокаВосстановленияВозвратногоСобытия.Значение = СтрокаПредыдущихЗначений.Значение;
	СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
	СтрокаВосстановленияВозвратногоСобытия.ПериодСреза = СтрокаПредыдущихЗначений.ПериодЗаписи - 1;
	
	Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия < НоваяСтрока.ДействуетДо + 1 Тогда
		СтрокаВосстановленияВозвратногоСобытия.ПроверкаНеобходимостиВосстановления = Истина;
		СтрокаВосстановленияВозвратногоСобытия.СтрокаДвижений = НоваяСтрока;
	КонецЕсли;
	
	Если СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > НоваяСтрока.ДействуетДо + 2 Тогда
		
		СтрокаВосстановленияВозвратногоСобытия = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
		
		СтрокаВосстановленияВозвратногоСобытия.Значение = СтрокаПредыдущихЗначений.Значение;
		СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
		СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо + 2;
		
		ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, СтрокаВосстановленияВозвратногоСобытия);
	КонецЕсли;
				
КонецПроцедуры

Процедура СформироватьЗаписиВосстановленияСобытияЗначенийПоказателей(ТаблицаДвиженийНаНачалоВосстановительныхЗаписей, Движения, Регистратор)
	
	Если ИнтервальныеРегистрыБЗК.ПоддерживатьНесколькоВложенныхПериодическихСобытий() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Индексы.Добавить("Сотрудник,Организация,Показатель,ДокументОснование,ПериодСреза");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДвиженийНаНачалоВосстановительныхЗаписей", ТаблицаДвиженийНаНачалоВосстановительныхЗаписей);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ПериодСреза КАК Период
		|ПОМЕСТИТЬ ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей
		|ИЗ
		|	&ТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей", "Сотрудник,Организация,Показатель,ДокументОснование");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование,
		|	ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период КАК ПериодСреза,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение
		|ИЗ
		|	ВТТаблицаДвиженийНаНачалоВосстановительныхЗаписей КАК ТаблицаДвиженийНаНачалоВосстановительныхЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Организация = ЗначенияПериодическихПоказателей.Организация
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Показатель = ЗначенияПериодическихПоказателей.Показатель
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
		|			И ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.Период = ЗначенияПериодическихПоказателей.Период";
	
	СтруктураПоиска = Новый Структура("Сотрудник,Организация,Показатель,ДокументОснование,ПериодСреза");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		СтрокиТаблицы = ТаблицаДвиженийНаНачалоВосстановительныхЗаписей.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			Если Не СтрокаТаблицы.ПроверкаНеобходимостиВосстановления Тогда
				СтрокаДвижений = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы, "Период,Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
				СтрокаДвижений.Значение = Выборка.Значение;
				
				ЗарплатаКадрыРасширенный.ЗафиксироватьПериодВСтрокеНабора(Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, СтрокаДвижений);
			Иначе
				Если СтрокаТаблицы.СтрокаДвижений.Значение = Выборка.Значение Тогда
					СтрокаТаблицы.СтрокаДвижений.ДействуетДо = '00010101';
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область РасчетСуммированногоУчетаВремени

// Рассчитывает значения показателей суммированного учета для массива сотрудников за заданный период.
// Значение исходных данных для расчета показателей берутся ил регистра расчета,
// за исключением последнего месяца, который "собирается" по данным УчетаРабочегоВремени.
// 
Функция ПоказателиСуммированногоУчетаСотрудниковЗаПериод(МассивСотрудников, ПериодСуммированногоУчетаНачало, ПериодСуммированногоУчетаОкончание) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачалоРасчетногоПериода = НачалоМесяца(ПериодСуммированногоУчетаНачало);
	КонецРасчетногоПериода = КонецМесяца(ДобавитьМесяц(ПериодСуммированногоУчетаОкончание, -1));
	ПоследнийМесяцНачало = НачалоМесяца(ПериодСуммированногоУчетаОкончание);
	ПоследнийМесяцОкончание = КонецДня(ПериодСуммированногоУчетаОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода", НачалоРасчетногоПериода);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода", КонецРасчетногоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНачало", ПоследнийМесяцНачало);
	Запрос.УстановитьПараметр("ПоследнийМесяцОкончание", ПоследнийМесяцОкончание);
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("ВыходныеДни", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	Запрос.УстановитьПараметр("ОтработанноеВремя", УчетРабочегоВремениРасширенный.ВидыВремениОтработанноеВремяДляСуммированногоУчета());
	Запрос.УстановитьПараметр("ВидыВремениВЗачетНормы", УчетРабочегоВремениРасширенный.ВидыВремениВЗачетНормыСуммированногоУчета());
	
	// Читаем сотрудников.
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТРассчитываемыеСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)";
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		Запрос.МенеджерВременныхТаблиц, 
		НачалоМесяца(НачалоРасчетногоПериода), 
		КонецМесяца(ПоследнийМесяцОкончание),
		"МЕСЯЦ",
		"МЕСЯЦ",
		"ВТМесяцы");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &НачалоРасчетногоПериода > Месяцы.Месяц
	|			ТОГДА &НачалоРасчетногоПериода
	|		ИНАЧЕ Месяцы.Месяц
	|	КОНЕЦ КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) КАК ДатаОкончания,
	|	&ПоследнийМесяцОкончание КАК ДатаАктуальности,
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Месяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТРассчитываемыеСотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМесяцы КАК Месяцы
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМесяцы";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхУчетаВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанныхУчетаВремени.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	УчетРабочегоВремениРасширенный.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанныхУчетаВремени);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ПлановоеВремя.Дата КАК Дата,
		|	СУММА(ПлановоеВремя.ЧасыПлан) КАК НормаЧасов
		|ПОМЕСТИТЬ ВТНормаВремениСотрудников
		|ИЗ
		|	ВТПлановоеВремя КАК ПлановоеВремя
		|ГДЕ
		|	ПлановоеВремя.ВидУчетаВремени <> &ВыходныеДни
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановоеВремя.Сотрудник,
		|	ПлановоеВремя.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановоеВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиМесяцы";
	Запрос.Выполнить();
	
	// Расчет по регистру расчета всех месяцев, за исключением последнего.
	ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос);
	// Для последнего месяца собираем данные по данным УчетаРабочегоВремени.
	ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос);
	
	// Объединяем 2 источника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НормоВремяПоРегистру.Сотрудник КАК Сотрудник,
	|	НормоВремяПоРегистру.НормаЧасов КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСотрудниковНаСуммированномУчете
	|ИЗ
	|	ВТНормоВремяПоРегистру КАК НормоВремяПоРегистру
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормоВремяПоУчетуВремени.Сотрудник,
	|	НормоВремяПоУчетуВремени.НормаЧасов
	|ИЗ
	|	ВТНормоВремяПоУчетуВремени КАК НормоВремяПоУчетуВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговоеНормоВремя.Сотрудник,
	|	СУММА(ИтоговоеНормоВремя.НормаЧасов) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСводно
	|ИЗ
	|	ВТНормоВремяСотрудниковНаСуммированномУчете КАК ИтоговоеНормоВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговоеНормоВремя.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовРегистр.Сотрудник,
	|	ВТОтработаноЧасовРегистр.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасы
	|ИЗ
	|	ВТОтработаноЧасовРегистр КАК ВТОтработаноЧасовРегистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовУчетВремени.Сотрудник,
	|	ВТОтработаноЧасовУчетВремени.ОтработаноЧасов
	|ИЗ
	|	ВТОтработаноЧасовУчетВремени КАК ВТОтработаноЧасовУчетВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанныеЧасы.Сотрудник,
	|	СУММА(ОтработанныеЧасы.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасыСводно
	|ИЗ
	|	ВТОтработанныеЧасы КАК ОтработанныеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанныеЧасы.Сотрудник";
	
	// Собираем окончательный итог.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) КАК НормаЧасов,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК ОтработаноЧасовВПраздники,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) - ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) - ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК Переработки
	|ИЗ
	|	ВТРассчитываемыеСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормоВремяСводно КАК НормоВремяСотрудников
	|		ПО Сотрудники.Сотрудник = НормоВремяСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанныеЧасыСводно КАК ОтработанныеЧасы
	|		ПО Сотрудники.Сотрудник = ОтработанныеЧасы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздничные КАК ОтработаноВПраздники
	|		ПО Сотрудники.Сотрудник = ОтработаноВПраздники.Сотрудник";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос)

	// Считаем отработанные часы.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Период,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыНачислений
	|		ПО Начисления.ВидРасчета = ВидыНачислений.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРассчитываемыеСотрудники КАК РассчитываемыеСотрудники
	|		ПО Начисления.Сотрудник = РассчитываемыеСотрудники.Сотрудник
	|ГДЕ
	|	(Начисления.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ Начисления.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)
	|	И ВидыНачислений.ЗачетНормыВремени
	|	И ВидыНачислений.ЗачетОтработанногоВремени";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВидыВремени.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТНачисленияВнутрисменныхОтклонений
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|ГДЕ
	|	НЕ НачисленияВидыВремени.ВидВремени.ОсновноеВремя В (&ВидыВремениВЗачетНормы)
	|	И НачисленияВидыВремени.Ссылка.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|	И НачисленияВидыВремени.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА Начисления.Сторно
	|				ТОГДА -Начисления.ОтработаноЧасов
	|			ИНАЧЕ Начисления.ОтработаноЧасов
	|		КОНЕЦ) КАК Часы,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТВнутрисменныеОтклоненияЧасы
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРассчитываемыеСотрудники КАК РассчитываемыеСотрудники
	|		ПО Начисления.Сотрудник = РассчитываемыеСотрудники.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияВнутрисменныхОтклонений КАК ВТНачисленияВнутрисменныхОтклонений
	|		ПО Начисления.ВидРасчета = ВТНачисленияВнутрисменныхОтклонений.Ссылка
	|ГДЕ
	|	(Начисления.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ Начисления.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ПериодДействияНачало";
	
	ВидыВремениВЗачетНормы = УчетРабочегоВремениРасширенный.ВидыВремениВЗачетНормыСуммированногоУчета();
	ВидыВремениВЗачетНормы.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("ВидыВремениВЗачетНормы", ВидыВремениВЗачетНормы);
	
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисления");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Считаем отработанное на сумм.учете.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисленияСуммУчета
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО Начисления.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Начисления.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	СУММА(НачисленияСотрудников.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовРегистр
	|ИЗ
	|	ВТНачисленияСуммУчета КАК НачисленияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Собираем фактические периоды действия.
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК Период,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
	|	НачисленияФактическийПериодДействия.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
	|	НачисленияФактическийПериодДействия.Сторно КАК Сторно,
	|	НачисленияФактическийПериодДействия.ФиксСторно КАК ФиксСторно
	|ПОМЕСТИТЬ ВТНачисленияФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета В (&НачисленияВЗачетНормы)
	|				И СторноТекущегоПериода = НЕОПРЕДЕЛЕНО
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТРассчитываемыеСотрудники.Сотрудник
	|					ИЗ
	|						ВТРассчитываемыеСотрудники)) КАК НачисленияФактическийПериодДействия
	|ГДЕ
	|	(НачисленияФактическийПериодДействия.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ НачисленияФактическийПериодДействия.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	Запрос.УстановитьПараметр("НачисленияВЗачетНормы", ПланыВидовРасчета.Начисления.НачисленияВЗачетНормы());
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисленияФПД");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Соединяемся с информацией по графику.
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
	|	НачисленияФактическийПериодДействия.ПериодРегистрации КАК ПериодРегистрации,
	|	НачисленияФактическийПериодДействия.ДатаНачала КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияФактическийПериодДействия.Сторно ИЛИ НачисленияФактическийПериодДействия.ФиксСторно КАК Сторно,
	|	ВТКадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета КАК СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете КАК ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействия
	|ИЗ
	|	ВТНачисленияФПД КАК НачисленияФактическийПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО НачисленияФактическийПериодДействия.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И НачисленияФактическийПериодДействия.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Высчитываем нормовремя.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СотрудникиГрафики.ДатаНачала КАК ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания КАК ДатаОкончания,
	|	СотрудникиГрафики.Сторно КАК Сторно,
	|	СотрудникиГрафики.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СотрудникиГрафики.ДатаНачала КАК ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания КАК ДатаОкончания,
	|	СотрудникиГрафики.Сторно КАК Сторно,
	|	ВЫБОР
	|		КОГДА СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА СотрудникиГрафики.ГрафикРаботы
	|		ИНАЧЕ СотрудникиГрафики.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы,
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета КАК СпособОпределенияНормыСуммированногоУчета
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	(СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СотрудникиГрафики.Сторно КАК Сторно,
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ * ВЫБОР
	|			КОГДА НЕ ВТДни.Сторно
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК НормаЧасов,
	|	ВТДни.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряПредварительно
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник,
	|	ВТДни.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА (ВТДанныеПроизводственногоКалендаряПредварительно.НормаЧасов + 99999) < (ЕСТЬNULL(ВТВнутрисменныеОтклоненияЧасы.Часы, 0) + 99999)
	|				ТОГДА 0
	|			ИНАЧЕ ВТДанныеПроизводственногоКалендаряПредварительно.НормаЧасов - ЕСТЬNULL(ВТВнутрисменныеОтклоненияЧасы.Часы, 0)
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаряПредварительно КАК ВТДанныеПроизводственногоКалендаряПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеОтклоненияЧасы КАК ВТВнутрисменныеОтклоненияЧасы
	|		ПО ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник = ВТВнутрисменныеОтклоненияЧасы.Сотрудник
	|			И (ВТДанныеПроизводственногоКалендаряПредварительно.Дата МЕЖДУ ВТВнутрисменныеОтклоненияЧасы.ПериодДействияНачало И ВТВнутрисменныеОтклоненияЧасы.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА СотрудникиГрафики.Сторно
	|				ТОГДА ЕСТЬNULL(-ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
	|			ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
	|		КОНЕЦ) КАК НормаЧасов,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДанныеГрафикаНесгруппированные
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя)
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник,
	|	ГрафикиРаботыПоВидамВремени.Дата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА СотрудникиГрафики.Сторно
	|				ТОГДА ЕСТЬNULL(-ВТНормаВремениСотрудников.НормаЧасов, 0)
	|			ИНАЧЕ ЕСТЬNULL(ВТНормаВремениСотрудников.НормаЧасов, 0)
	|		КОНЕЦ),
	|	ВТНормаВремениСотрудников.Дата
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениСотрудников КАК ВТНормаВремениСотрудников
	|		ПО СотрудникиГрафики.Сотрудник = ВТНормаВремениСотрудников.Сотрудник
	|			И (ВТНормаВремениСотрудников.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник,
	|	ВТНормаВремениСотрудников.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеГрафикаНесгруппированные.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА (ВТДанныеГрафикаНесгруппированные.НормаЧасов + 99999) < (ЕСТЬNULL(ВТВнутрисменныеОтклоненияЧасы.Часы, 0) + 99999)
	|				ТОГДА 0
	|			ИНАЧЕ ВТДанныеГрафикаНесгруппированные.НормаЧасов - ЕСТЬNULL(ВТВнутрисменныеОтклоненияЧасы.Часы, 0)
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТДанныеГрафикаНесгруппированные КАК ВТДанныеГрафикаНесгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеОтклоненияЧасы КАК ВТВнутрисменныеОтклоненияЧасы
	|		ПО ВТДанныеГрафикаНесгруппированные.Сотрудник = ВТВнутрисменныеОтклоненияЧасы.Сотрудник
	|			И (ВТДанныеГрафикаНесгруппированные.Дата МЕЖДУ ВТВнутрисменныеОтклоненияЧасы.ПериодДействияНачало И ВТВнутрисменныеОтклоненияЧасы.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеГрафикаНесгруппированные.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоРегистру
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаряПредварительно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафикаНесгруппированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РассчитываемыеСотрудники.Сотрудник,
	|	&НачалоРасчетногоПериода КАК ДатаНачала,
	|	&ПоследнийМесяцОкончание КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТРассчитываемыеСотрудники КАК РассчитываемыеСотрудники";
	Запрос.Выполнить();
	
	// Периоды работы на графике с суммированным учетом строим по данным УчетаВремени.
	// Используем в дальнейшем:
	// 	- для расчета праздничных - за весь период.
	// 	- для расчета отработанных часов и нормы - за последний месяц.
	СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТСотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РассчитываемыеСотрудники.Сотрудник,
	|	РассчитываемыеСотрудники.ДатаНачала,
	|	РассчитываемыеСотрудники.ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК РассчитываемыеСотрудники";
	Запрос.Выполнить();
	
    ПараметрыЗаполнения = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
    ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
    ПараметрыЗаполнения.ИмяВТРезультат = "ВТУчетРабочегоВремениПолный";
    ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
    ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(Запрос.Параметры.ПоследнийМесяцОкончание);
    ПараметрыЗаполнения.ДатаНачала = Запрос.Параметры.НачалоРасчетногоПериода;
    ПараметрыЗаполнения.ДатаОкончания = Запрос.Параметры.ПоследнийМесяцОкончание;
    ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(Запрос.Параметры.НачалоРасчетногоПериода);
    ПараметрыЗаполнения.МесяцДатаОкончания = НачалоМесяца(Запрос.Параметры.ПоследнийМесяцОкончание);
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, Запрос.Параметры.ПоследнийМесяцНачало, Запрос.Параметры.ПоследнийМесяцОкончание, "ДЕНЬ", "Дата", "ВТПериодыДни");  
	
	// Собираем рабочие часы за последний месяц.
	// Тут же собираем праздничные за весь период.
	Запрос.УстановитьПараметр("Праздники", ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник"));
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсточникиПолученияДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|	ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала КАК ДатаНачалаСводногоВремени,
	|	ВТИсточникиПолученияДанныхУчетаВремени.ДатаОкончания КАК ДатаОкончанияСводногоВремени,
	|	ЕСТЬNULL(ВТУчетРабочегоВремениПолный.Часы, 0) КАК ЧасыСводно
	|ПОМЕСТИТЬ ВТСводныеДанныеУчетаВремени
	|ИЗ
	|	ВТИсточникиПолученияДанныхУчетаВремени КАК ВТИсточникиПолученияДанныхУчетаВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетРабочегоВремениПолный КАК ВТУчетРабочегоВремениПолный
	|		ПО ВТИсточникиПолученияДанныхУчетаВремени.Сотрудник = ВТУчетРабочегоВремениПолный.Сотрудник
	|			И (ВТУчетРабочегоВремениПолный.Дата = ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала)
	|ГДЕ
	|	ВТИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|	И ВТУчетРабочегоВремениПолный.ВидУчетаВремени.ОсновноеВремя В(&ОтработанноеВремя)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочееВремя.Сотрудник КАК Сотрудник,
	|	РабочееВремя.Дата КАК Дата,
	|	РабочееВремя.Часы КАК Часы,
	|	РабочееВремя.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ЛОЖЬ КАК СводныеДанные
	|ПОМЕСТИТЬ ВТРабочееВремя
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК РабочееВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеДанныеУчетаВремени КАК ВТСводныеДанныеУчетаВремени
	|		ПО (РабочееВремя.Дата МЕЖДУ ВТСводныеДанныеУчетаВремени.ДатаНачалаСводногоВремени И ВТСводныеДанныеУчетаВремени.ДатаОкончанияСводногоВремени)
	|			И РабочееВремя.Сотрудник = ВТСводныеДанныеУчетаВремени.Сотрудник
	|ГДЕ
	|	РабочееВремя.ВидУчетаВремени.ОсновноеВремя В(&ОтработанноеВремя)
	|	И РабочееВремя.Часы > 0
	|	И ВТСводныеДанныеУчетаВремени.Сотрудник ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСводныеДанныеУчетаВремени.Сотрудник,
	|	ВТСводныеДанныеУчетаВремени.ДатаНачалаСводногоВремени,
	|	ВТСводныеДанныеУчетаВремени.ЧасыСводно,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТСводныеДанныеУчетаВремени КАК ВТСводныеДанныеУчетаВремени
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРабочееВремя.Сотрудник КАК Сотрудник,
	|	ВТРабочееВремя.Дата КАК Дата,
	|	СУММА(ВТРабочееВремя.Часы) КАК Часы,
	|	ВТРабочееВремя.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ВТРабочееВремя.СводныеДанные КАК СводныеДанные
	|ПОМЕСТИТЬ ВТДниРаботыСотрудников
	|ИЗ
	|	ВТРабочееВремя КАК ВТРабочееВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРабочееВремя.Сотрудник,
	|	ВТРабочееВремя.Дата,
	|	ВТРабочееВремя.ПереходящаяЧастьТекущейСмены,
	|	ВТРабочееВремя.СводныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник КАК Сотрудник,
	|	ДниРаботы.Дата КАК Дата,
	|	ПериодыРаботы.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ДниРаботы.Часы КАК Часы,
	|	ДниРаботы.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДниРаботы.СводныеДанные КАК СводныеДанные
	|ПОМЕСТИТЬ ВТДниРаботыРасширенный
	|ИЗ
	|	ВТДниРаботыСотрудников КАК ДниРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ПериодыРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО ДниРаботы.Сотрудник = ПериодыРаботы.Сотрудник
	|			И (ДниРаботы.Дата МЕЖДУ ПериодыРаботы.ДатаНачала И ПериодыРаботы.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДниРаботыРасширенный.Сотрудник КАК Сотрудник,
	|	ВТДниРаботыРасширенный.Дата КАК Дата,
	|	ВТДниРаботыРасширенный.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТДниРаботыРасширенный.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ВТДниРаботыРасширенный.Часы КАК Часы,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = &Праздники
	|			ТОГДА ВТДниРаботыРасширенный.Часы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТДниРаботыРасширенныйСПраздниками
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ВТДниРаботыРасширенный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ВТДниРаботыРасширенный.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ВЫБОР
	|				КОГДА ВТДниРаботыРасширенный.ПереходящаяЧастьТекущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ВТДниРаботыРасширенный.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ВТДниРаботыРасширенный.Дата
	|			КОНЕЦ = ДанныеПроизводственногоКалендаря.Дата)
	|ГДЕ
	|	НЕ ВТДниРаботыРасширенный.СводныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник КАК Сотрудник,
	|	ДниРаботы.Часы КАК Часы
	|ПОМЕСТИТЬ ВТРабочиеЧасыУчетВремени
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ДниРаботы
	|ГДЕ
	|	ДниРаботы.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеЧасы.Сотрудник КАК Сотрудник,
	|	СУММА(РабочиеЧасы.Часы) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовУчетВремени
	|ИЗ
	|	ВТРабочиеЧасыУчетВремени КАК РабочиеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеЧасы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботыСПраздниками.Сотрудник КАК Сотрудник,
	|	СУММА(ДниРаботыСПраздниками.ЧасовВПраздники) КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТПраздничные
	|ИЗ
	|	ВТДниРаботыРасширенныйСПраздниками КАК ДниРаботыСПраздниками
	|
	|СГРУППИРОВАТЬ ПО
	|	ДниРаботыСПраздниками.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочееВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенныйСПраздниками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеЧасыУчетВремени";
	
	// Получаем нормовремя за последний месяц.	
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТИсточникиПолученияДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаНачала >= ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|			ТОГДА ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаНачала
	|		ИНАЧЕ ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаСводногоВремениГрафика,
	|	ВЫБОР
	|		КОГДА ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаОкончания <= ВТИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|			ТОГДА ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаОкончания
	|		ИНАЧЕ ВТИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияСводногоВремениГрафика,
	|	ВТПериодыРаботыСотрудниковНаСуммированномУчете.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТСводныеДанныеУчетаНормоВремени
	|ИЗ
	|	ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ВТПериодыРаботыСотрудниковНаСуммированномУчете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсточникиПолученияДанныхУчетаВремени КАК ВТИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетРабочегоВремениПолный КАК ВТУчетРабочегоВремениПолный
	|			ПО ВТИсточникиПолученияДанныхУчетаВремени.Сотрудник = ВТУчетРабочегоВремениПолный.Сотрудник
	|				И (ВТУчетРабочегоВремениПолный.Дата = ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала)
	|		ПО (ВТИсточникиПолученияДанныхУчетаВремени.Сотрудник = ВТПериодыРаботыСотрудниковНаСуммированномУчете.Сотрудник)
	|			И (ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаНачала МЕЖДУ ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ВТИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|				ИЛИ ВТПериодыРаботыСотрудниковНаСуммированномУчете.ДатаОкончания МЕЖДУ ВТИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ВТИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|ГДЕ
	|	ВТИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|	И ВТУчетРабочегоВремениПолный.ВидУчетаВремени.ОсновноеВремя В(&ВидыВремениВЗачетНормы)
	|	И ВТУчетРабочегоВремениПолный.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериодыДни.Дата КАК Дата,
	|	ВТСводныеДанныеУчетаНормоВремени.Сотрудник КАК Сотрудник,
	|	ВТСводныеДанныеУчетаНормоВремени.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТДниСводныхДанных
	|ИЗ
	|	ВТПериодыДни КАК ВТПериодыДни
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеДанныеУчетаНормоВремени КАК ВТСводныеДанныеУчетаНормоВремени
	|		ПО (ВТПериодыДни.Дата МЕЖДУ ВТСводныеДанныеУчетаНормоВремени.ДатаНачалаСводногоВремениГрафика И ВТСводныеДанныеУчетаНормоВремени.ДатаОкончанияСводногоВремениГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТУчетРабочегоВремениПолныйОтклонения.Сотрудник КАК Сотрудник,
	|	ВТУчетРабочегоВремениПолныйРабочие.Дата КАК Дата,
	|	ВТУчетРабочегоВремениПолныйОтклонения.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВТУчетРабочегоВремениПолныйОтклонения.Часы КАК Часы
	|ПОМЕСТИТЬ ВТВнутрисменныеОтсутствияНормаВремени
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК ВТУчетРабочегоВремениПолныйРабочие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетРабочегоВремениПолный КАК ВТУчетРабочегоВремениПолныйОтклонения
	|		ПО ВТУчетРабочегоВремениПолныйРабочие.Сотрудник = ВТУчетРабочегоВремениПолныйОтклонения.Сотрудник
	|			И ВТУчетРабочегоВремениПолныйРабочие.Дата = ВТУчетРабочегоВремениПолныйОтклонения.Дата
	|			И (НЕ ВТУчетРабочегоВремениПолныйОтклонения.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя)
	|			И (НЕ ВТУчетРабочегоВремениПолныйОтклонения.ВидУчетаВремени.ОсновноеВремя В (&ВидыВремениВЗачетНормы))
	|ГДЕ
	|	ВТУчетРабочегоВремениПолныйРабочие.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетРабочегоВремениПолный.Сотрудник КАК Сотрудник,
	|	УчетРабочегоВремениПолный.Дата КАК Дата,
	|	ПериодыРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТУчетРабочегоВремениСГрафиками
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК УчетРабочегоВремениПолный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботыСотрудников
	|		ПО УчетРабочегоВремениПолный.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
	|			И (УчетРабочегоВремениПолный.Дата МЕЖДУ ПериодыРаботыСотрудников.ДатаНачала И ПериодыРаботыСотрудников.ДатаОкончания)
	|ГДЕ
	|	УчетРабочегоВремениПолный.ВидУчетаВремени.ОсновноеВремя В(&ВидыВремениВЗачетНормы)
	|	И УчетРабочегоВремениПолный.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|	И НЕ (УчетРабочегоВремениПолный.Сотрудник, УчетРабочегоВремениПолный.Дата) В
	|				(ВЫБРАТЬ
	|					ВТДниСводныхДанных.Сотрудник,
	|					ВТДниСводныхДанных.Дата
	|				ИЗ
	|					ВТДниСводныхДанных КАК ВТДниСводныхДанных)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДниСводныхДанных.Сотрудник,
	|	ВТДниСводныхДанных.Дата,
	|	ВТДниСводныхДанных.ГрафикРаботы
	|ИЗ
	|	ВТДниСводныхДанных КАК ВТДниСводныхДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремяПоДням.Сотрудник КАК Сотрудник,
	|	ВремяПоДням.Дата КАК Дата,
	|	ВремяПоДням.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета КАК СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете КАК ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТДатыДляНормы
	|ИЗ
	|	ВТУчетРабочегоВремениСГрафиками КАК ВремяПоДням
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ВремяПоДням.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник КАК Сотрудник,
	|	ДатыДляНормы.Дата КАК Дата,
	|	ДатыДляНормы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник КАК Сотрудник,
	|	ДатыДляНормы.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА ДатыДляНормы.ГрафикРаботы
	|		ИНАЧЕ ДатыДляНормы.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы,
	|	ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета КАК СпособОпределенияНормыСуммированногоУчета
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	(ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата = СотрудникиГрафики.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов,
	|	ВТДни.Дата КАК Дата
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряПредварительно
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник,
	|	ВТДни.Дата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДанныеПроизводственногоКалендаряПредварительно.НормаЧасов + 99999 < ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0) + 99999
	|				ТОГДА 0
	|			ИНАЧЕ ВТДанныеПроизводственногоКалендаряПредварительно.НормаЧасов - ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0)
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаряПредварительно КАК ВТДанныеПроизводственногоКалендаряПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеОтсутствияНормаВремени КАК ВТВнутрисменныеОтсутствияНормаВремени
	|		ПО ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник = ВТВнутрисменныеОтсутствияНормаВремени.Сотрудник
	|			И ВТДанныеПроизводственногоКалендаряПредварительно.Дата = ВТВнутрисменныеОтсутствияНормаВремени.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеПроизводственногоКалендаряПредварительно.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) + 99999 < ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0) + 99999
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) - ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0)
	|	КОНЕЦ КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафикаНесгруппированные
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата = СотрудникиГрафики.Дата)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя = &РабочееВремя)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеОтсутствияНормаВремени КАК ВТВнутрисменныеОтсутствияНормаВремени
	|		ПО СотрудникиГрафики.Сотрудник = ВТВнутрисменныеОтсутствияНормаВремени.Сотрудник
	|			И СотрудникиГрафики.Дата = ВТВнутрисменныеОтсутствияНормаВремени.Дата
	|			И (ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение <> 0)
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТНормаВремениСотрудников.НормаЧасов, 0) + 99999 < ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0) + 99999
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТНормаВремениСотрудников.НормаЧасов, 0) - ЕСТЬNULL(ВТВнутрисменныеОтсутствияНормаВремени.Часы, 0)
	|	КОНЕЦ
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениСотрудников КАК ВТНормаВремениСотрудников
	|		ПО СотрудникиГрафики.Сотрудник = ВТНормаВремениСотрудников.Сотрудник
	|			И (ВТНормаВремениСотрудников.Дата = СотрудникиГрафики.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВнутрисменныеОтсутствияНормаВремени КАК ВТВнутрисменныеОтсутствияНормаВремени
	|		ПО СотрудникиГрафики.Сотрудник = ВТВнутрисменныеОтсутствияНормаВремени.Сотрудник
	|			И СотрудникиГрафики.Дата = ВТВнутрисменныеОтсутствияНормаВремени.Дата
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеГрафикаНесгруппированные.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ВТДанныеГрафикаНесгруппированные.НормаЧасов, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТДанныеГрафикаНесгруппированные КАК ВТДанныеГрафикаНесгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеГрафикаНесгруппированные.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоУчетуВремени
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУчетРабочегоВремениСГрафиками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыДляНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаряПредварительно
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафикаНесгруппированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
		
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяРезультирующейВТ = "ВТПериодыРаботыСотрудниковНаСуммированномУчете") Экспорт

	// Получаем историю изменения графиков.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ИмяВТСотрудникиПериоды,
			"Сотрудник"),
		ПараметрыПостроения,
		"ВТГрафикиРаботыСотрудниковСрезИДвижения");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.ГрафикРаботы,
		|	СотрудникиГрафики.Период КАК ДатаНачала,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СотрудникиГрафикиСледующие.Период ЕСТЬ NULL 
		|				ТОГДА СотрудникиПериоды.ДатаОкончания
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СотрудникиГрафикиСледующие.Период, ДЕНЬ, -1), ДЕНЬ)
		|		КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыГрафиков
		|ИЗ
		|	ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафикиСледующие
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиГрафикиСледующие.Сотрудник
		|			И СотрудникиГрафики.Период < СотрудникиГрафикиСледующие.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ВТСотрудникиПериоды% КАК СотрудникиПериоды
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиПериоды.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.Период,
		|	СотрудникиГрафики.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботы.Сотрудник,
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.ДатаНачала,
		|	ГрафикиРаботы.ДатаОкончания
		|ПОМЕСТИТЬ %ВТПериодыРаботыСотрудниковНаСуммированномУчете%
		|ИЗ
		|	ВТПериодыГрафиков КАК ГрафикиРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|ГДЕ
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыГрафиков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТГрафикиРаботыСотрудниковСрезИДвижения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТПериодыРаботыСотрудниковНаСуммированномУчете%", ИмяРезультирующейВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТСотрудникиПериоды%", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Проверка множественности оплаты времени.

// Проверяет наличие у сотрудников двух или более действующих плановых начислений с зачетом нормы времени.
// Метод проверяет или конкретный документ, или текущее состояние базы (если ТаблицаНачислений = Неопределено).
//
// Параметры:
//		ТаблицаНачислений - таблица, сформированная методом РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений().
//		Документ - ссылка на документ.
//
Процедура ПроверитьМножественностьОплатыВремени(ТаблицаНачислений = Неопределено, Документ = Неопределено, Отказ = Ложь, ДатаСобытия = '00010101', ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаНачислений <> Неопределено Тогда 
		
		Если ТаблицаНачислений.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаНачислений.Период КАК Период,
		               |	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		               |	ТаблицаНачислений.Начисление КАК Начисление,
		               |	ТаблицаНачислений.Действие КАК Действие,
		               |	ТаблицаНачислений.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТНачисления
		               |ИЗ
		               |	&ТаблицаНачислений КАК ТаблицаНачислений
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Начисления.Период КАК Период,
		               |	Начисления.Сотрудник КАК Сотрудник,
		               |	Начисления.Начисление КАК Начисление,
		               |	Начисления.Действие КАК Действие,
		               |	Начисления.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТДанныеДокумента
		               |ИЗ
		               |	ВТНачисления КАК Начисления
		               |ГДЕ
		               |	Начисления.Начисление.ЗачетНормыВремени = ИСТИНА";
					   
	Иначе				   
		
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ДатаСобытия);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	&ТекущаяДатаСеанса КАК Период
		               |ПОМЕСТИТЬ ВТДанныеДокумента";
					   
	КонецЕсли;				   
					   
	Запрос.Выполнить();			   
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДанныеДокумента", ?(ТаблицаНачислений = Неопределено, Новый Массив, "Сотрудник"));
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.ЗачетНормыВремени", "=", Истина);
	Если ТаблицаНачислений <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсправленныйДокумент);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
	               |	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	               |	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление
	               |ПОМЕСТИТЬ ВТДействующиеНачисления
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	               |ГДЕ
	               |	ПлановыеНачисленияСрезПоследних.Используется = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДействующиеНачисления.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСуществующиеОшибки
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ВТДействующиеНачисления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДействующиеНачисления.Сотрудник
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДействующиеНачисления.Начисление) > 1";
				   
	Запрос.Выполнить();			   
	
	Если ТаблицаНачислений = Неопределено Тогда 
		ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц);
	Иначе 
		ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц, Документ, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействующиеНачисления.Регистратор КАК Регистратор,
	               |	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	               |	ДействующиеНачисления.Начисление КАК Начисление
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ДействующиеНачисления
	               |ГДЕ
	               |	ДействующиеНачисления.Сотрудник В
	               |			(ВЫБРАТЬ
	               |				СуществующиеОшибки.Сотрудник
	               |			ИЗ
	               |				ВТСуществующиеОшибки КАК СуществующиеОшибки)
	               |ИТОГИ ПО
	               |	Сотрудник";
		
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСотрудникам.Следующий() Цикл 
		
		ТекстСообщения = НСтр("ru = 'Работнику %1 назначены начисления:';
								|en = 'Accruals are assigned to employee %1:'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоСотрудникам.Сотрудник);
		
		Выборка = ВыборкаПоСотрудникам.Выбрать();
		ПерваяСтрока = Истина;
		Пока Выборка.Следующий() Цикл 
			ТекстСообщения = ТекстСообщения + ?(ПерваяСтрока, " ", ", ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" (документ %2)';
																																		|en = '""%1"" (document %2)'"), Выборка.Начисление, Выборка.Регистратор);
			ПерваяСтрока = Ложь;
		КонецЦикла;	
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(МенеджерВременныхТаблиц, Документ, Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТОтмененныеНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ ВТНовыеНачисления
	|ИЗ
	|	ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтмененныеНачисления КАК ОтмененныеНачисления
	|		ПО ДействующиеНачисления.Сотрудник = ОтмененныеНачисления.Сотрудник
	|			И ДействующиеНачисления.Начисление = ОтмененныеНачисления.Начисление
	|ГДЕ
	|	ОтмененныеНачисления.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТНовыеОшибки
	|ИЗ
	|	ВТНовыеНачисления КАК НовыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНачисления КАК НовыеНачисленияДополнительно
	|		ПО НовыеНачисления.Сотрудник = НовыеНачисленияДополнительно.Сотрудник
	|			И НовыеНачисления.Начисление <> НовыеНачисленияДополнительно.Начисление
	|			И НовыеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = НовыеНачисленияДополнительно.ОбозначениеВТабелеУчетаРабочегоВремени
	|ГДЕ
	|	НЕ НовыеНачисления.Сотрудник В
	|				(ВЫБРАТЬ
	|					СуществующиеОшибки.Сотрудник
	|				ИЗ
	|					ВТСуществующиеОшибки КАК СуществующиеОшибки)
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеНачисления.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НовыеНачисления.Начисление) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеОшибки.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК НачислениеВДокументе,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Регистратор КАК Регистратор
	|ИЗ
	|	ВТНовыеОшибки КАК НовыеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО НовыеОшибки.Сотрудник = ДанныеДокумента.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ПО НовыеОшибки.Сотрудник = ДействующиеНачисления.Сотрудник
	|ГДЕ
	|	ДанныеДокумента.Начисление <> ДействующиеНачисления.Начисление";
					   
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Работнику %1 не может быть назначено начисление ""%2"", поскольку документом %3 ему уже назначено начисление ""%4""';
								|en = 'The ""%2"" accrual cannot be assigned to employee %1 as the ""%4"" accrual is already assigned to them with document %3'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Сотрудник, Выборка.НачислениеВДокументе, Выборка.Регистратор, Выборка.Начисление);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ, "Объект.Начисления[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Начисление", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// При проверке документа с сотрудником в шапке проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениРаботникВШапке(Период, Сотрудник, Начисления, Документ, Отказ = Ложь, Действие = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(Действие), Действие, ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить));
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

// При проверке документа отпуска по уходу за ребенком проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениУходЗаРебенком(Период, Начисления, Документ, Отказ = Ложь, ТаблицаПособийПоУходу = Неопределено, ИмяКолонкиСотрудник = "РабочееМесто", ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = ТекСтрока[ИмяКолонкиСотрудник];
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	Если ТаблицаПособийПоУходу <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПособийПоУходу, ТаблицаНачислений);
	КонецЕсли;
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

Процедура ПрекратитьДействиеОтменяемыхПоказателейПлановыхНачислений(Движения, ОтменяемыеНачисления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтменяемыеНачисления", ОтменяемыеНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтменяемыеНачисления.Период КАК Период,
	|	ОтменяемыеНачисления.Сотрудник КАК Сотрудник,
	|	ОтменяемыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтменяемыеНачисления.ГоловнаяОрганизация КАК Организация,
	|	ОтменяемыеНачисления.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТОтменяемыеНачисления
	|ИЗ
	|	&ОтменяемыеНачисления КАК ОтменяемыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиНачислений.Показатель КАК Показатель,
	|	0 КАК Значение,
	|	ОтменяемыеНачисления.Период КАК Период,
	|	ОтменяемыеНачисления.Сотрудник КАК Сотрудник,
	|	ОтменяемыеНачисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтменяемыеНачисления.Организация КАК Организация
	|ИЗ
	|	ВТОтменяемыеНачисления КАК ОтменяемыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Ссылка = ОтменяемыеНачисления.Начисление)
	|			И (ПоказателиНачислений.ОтменяемыйПоказатель)
	|ГДЕ
	|	ПоказателиНачислений.Показатель ЕСТЬ НЕ NULL ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить(), Выборка);
	КонецЦикла;
	
	Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с показателями расчета зарплаты.

// Функция определяет наличие предопределенных показателей 
// в табличной части вида расчета.
//
// Параметры:
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- ИмяПредопределенныхДанных - строковое имя предопределенного показателя.
//
Функция ЕстьПоказательВКоллекции(Коллекция, ИмяПредопределенныхДанных) Экспорт
	
	Возврат ЕстьПоказателиВКоллекции(Коллекция, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПредопределенныхДанных)));
	
КонецФункции

// Функция проверяет наличие показателей в коллекции.
//
// Параметры:
//	- Коллекция - коллекция строк с колонкой Показатель.
//	- Показатели - массив искомых показателей.
//
// Возвращаемое значение 
//	Истина - в коллекции есть хотя бы один из показателей, 
//	Ложь - в противном случае.
//
Функция ЕстьПоказателиВКоллекции(Коллекция, Показатели) Экспорт
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		Если Показатели.Найти(СтрокаКоллекции["Показатель"]) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура проверяет выполнимость формулы вида расчета.
// Формула должна быть заполнена.
// Важно. Существование показателей проверяется функцией ПоказателиПоИдентификаторам.
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь) Экспорт
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для Каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1));
	КонецЦикла;
	
	ФормулаДляПроверки = СтрЗаменить(ФормулаДляВыполнения, "ИсходныеДанные.", "Параметры.");
	
	Попытка 
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ФормулаДляПроверки, ИсходныеДанные);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.';
								|en = 'An error occurred while checking calculation using the formula.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

// Функция преобразует формулу введенную пользователем в формулу для выполнения при расчете зарплаты.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей) Экспорт
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	Возврат ФормулаДляВыполнения
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
 	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;               
КонецПроцедуры

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти показатель по идентификатору %1';
				|en = 'Cannot find indicator by ID %1'"), Идентификатор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		Показатели.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции 

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена';
								|en = 'Formula is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых показателей.
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	// Проверим существование показателей.
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Внесем изменения, связанные с базовыми показателями.
	ДополнитьФормулуБазовымиПоказателями(Формула, ПоказателиФормулы, ИдентификаторыПоказателейФормулы);
	
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	
КонецФункции

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ) Экспорт
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Использование показателя %1 в этой формуле расчета недопустимо.';
					|en = 'You cannot use value %1 in this calculation formula.'"), 
				ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ПоказательФормулы));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразует формулу с учетом шкалы зависимости от базовых показателей.
//
Процедура ДополнитьФормулуБазовымиПоказателями(Формула, Показатели, ИдентификаторыПоказателей) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
	               |	ПоказателиРасчетаЗарплаты.Идентификатор КАК ПоказательИдентификатор,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель КАК БазовыйПоказатель,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель.Идентификатор КАК БазовыйПоказательИдентификатор
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)
	               |	И ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя)
	               |	И ПоказателиРасчетаЗарплаты.БазовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстЗамены = ТекстЗаменыИдентификатораПоказателяОцениваемогоПоШкале(Выборка.Показатель, Выборка.БазовыйПоказательИдентификатор);
		Формула = СтрЗаменить(Формула, Выборка.ПоказательИдентификатор, ТекстЗамены);
		Если Показатели.Найти(Выборка.БазовыйПоказатель) = Неопределено Тогда 
			Показатели.Добавить(Выборка.БазовыйПоказатель);
		КонецЕсли;
		Если ИдентификаторыПоказателей.Найти(Выборка.БазовыйПоказательИдентификатор) = Неопределено Тогда 
			ИдентификаторыПоказателей.Добавить(Выборка.БазовыйПоказательИдентификатор);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Для показателя, оцениваемого по шкале, возвращает текст для замены идентификатора в формуле расчета.
//
Функция ТекстЗаменыИдентификатораПоказателяОцениваемогоПоШкале(Показатель, БазовыйПоказательИдентификатор) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраницаИнтервалаСтажа,
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	ВЫБОР
	               |		КОГДА ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка = &Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ВерхняяГраницаИнтервалаСтажа";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстЗамены = "";
	ПредыдущееЗначение = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЗначениеПоказателя = СтрЗаменить(Выборка.ЗначениеПоказателя, ",", ".");
		ВерхняяГраницаИнтервалаСтажа = СтрЗаменить(Выборка.ВерхняяГраницаИнтервалаСтажа, ",", ".");
		Если ВерхняяГраницаИнтервалаСтажа = "0" Тогда 
			ТекстЗамены = ТекстЗамены + СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "");
			// Если шкала состоит из одной строки с верхней границей 0, то указанное в строке значение применяется 
			// вне зависимости от значения базового показателя.
			Если ПредыдущееЗначение = Неопределено Тогда 
				Прервать;
			КонецЕсли;
		Иначе 
			ТекстЗамены = ТекстЗамены + "?(" + БазовыйПоказательИдентификатор + " < " 
			+ СтрЗаменить(ВерхняяГраницаИнтервалаСтажа, Символы.НПП, "") + ", " 
			+ СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "") + ", ";
		КонецЕсли;
		ПредыдущееЗначение = Выборка.ЗначениеПоказателя;	
	КонецЦикла;
	Если Прав(ТекстЗамены, 2) = ", " Тогда 
		ТекстЗамены = ТекстЗамены + 0 + ")";
	КонецЕсли;
	Если Лев(ТекстЗамены, 1) = "?" Тогда 
		Для Сч = 1 По Выборка.Количество() - 1 Цикл 
			ТекстЗамены = ТекстЗамены + ")";
		КонецЦикла;
	КонецЕсли;
	Если ТекстЗамены = "" Тогда 
		ТекстЗамены = ТекстЗамены + 0;
	КонецЕсли;	
	
	Возврат ТекстЗамены;
	
КонецФункции	

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний.
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиПредопределенногоСпособаРасчета(СпособРасчета) Экспорт
	
	ТаблицаПоказателей = ТаблицаПоказателейПредопределенныхСпособовРасчета();
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(
		ТаблицаПоказателей.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета)), "Показатель");
	
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Возвращаемое значение - таблица значений с колонками: 
//	- СпособРасчета, 
//	- Показатель.
//
Функция ТаблицаПоказателейПредопределенныхСпособовРасчета() Экспорт
		
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаНачислений,ПеречислениеСсылка.СпособыРасчетаУдержаний"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	
	// Показатели предопределенных способов расчета.
	ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);

	Возврат ТаблицаПоказателей;
	
КонецФункции

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей) Экспорт
	
	// Показатели предопределенных способов расчета подсистемы «Расчет зарплаты».
	
	// Доплата до среднего заработка.
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");
	
	// Доплата за дни болезни (до среднего заработка ФСС).
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	
	// Доплата до сохраняемого денежного содержания за дни болезни
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания");
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьПоказателиРасчетаПособий(ТаблицаПоказателей);
	
	ИсполнительныеЛисты.ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей);
	
	ПростоиСотрудников.ЗаполнитьПоказателиРасчетаПростоевСотрудников(ТаблицаПоказателей);

	// Собираем показатели предопределенных способов расчета по подсистемам.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);
	
	// Не все псевдопредопределенные показатели существуют безусловно, 
	// не найденные показатели нужно удалить.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателей.Показатель) Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоказателей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаменитьЗначениеИдентификатораВФормулеРасчета(Идентификатор, ПрежнийИдентификатор, ПрежняяФормула) Экспорт
	
	Формула = "";
	ИдентификаторыПоказателей = ИдентификаторыПоказателейФормулы(ПрежняяФормула);
	
	РазмерТекста = СтрДлина(ПрежняяФормула);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(ПрежняяФормула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
				Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
			КонецЕсли;
			Формула = Формула + Сред(ПрежняяФормула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
		Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Работа с видами расчетов

// Расчет вторичных данных о показателях.
// Выполняется перед записью вида расчета.
//
// Параметры:
// - ВидРасчетаОбъект - записываемый вид расчета.
//
Процедура ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	// Промежуточную структуру используем из-за неодинаковой структуры разных планов видов расчета.
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("КоличествоПостоянныхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("КоличествоПоказателейИспользуемыхПриРасчете", 0);
	ЗначенияРеквизитов.Вставить("КоличествоОтображаемыхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазы", Ложь);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазыИсполнительногоЛиста", Ложь);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазыСтраховыхВзносов", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСдельныйЗаработок", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСреднийЗаработокОбщий", Ложь);
	ЗначенияРеквизитов.Вставить("ЕстьНакапливаемыеПоказатели", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетБухучетПоказателей", Ложь);
	
	// Определяем основной показатель - единственный показатель, не рассчитываемый автоматически.
	МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ВидРасчетаОбъект.Показатели, "Показатель");
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателей);
	
	СтрокиПоказателей = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		// Для начала все строки не основные.
		СтрокаПоказателя.ОсновнойПоказатель = Ложь;
		// Получаем сведения о показателе.
		СведенияОПоказателе = СведенияОПоказателях[СтрокаПоказателя.Показатель];
		Если СведенияОПоказателе <> Неопределено Тогда
			// Собираем не автоматически рассчитываемые показатели.
			Если Не СведенияОПоказателе.ЗначениеРассчитываетсяАвтоматически 
				И СведенияОПоказателе.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника Тогда
				СтрокиПоказателей.Добавить(СтрокаПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиПоказателей.Количество() > 0 Тогда
		// Если не рассчитываемый показатель единственный, то он и будет основным.
		Если СтрокиПоказателей.Количество() = 1 Тогда
			СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
		Иначе
			// ..Если нет, выберем первый, который запрашивается при вводе.
			ОсновнойПоказатель = Неопределено;
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				Если СтрокаПоказателя.ЗапрашиватьПриВводе
					ИЛИ СтрокаПоказателя.Показатель.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа Тогда
					СтрокаПоказателя.ОсновнойПоказатель = Истина;
					ОсновнойПоказатель = СтрокаПоказателя.Показатель;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Если ни один не запрашивается, то назначаем основным просто первый по порядку.
			Если ОсновнойПоказатель = Неопределено Тогда
				СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Упорядочивание в запросе важно потому что оно фактически предъявляется 
	// пользователю в виде последовательности колонок с показателями в документах редактирования начислений.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ЗадаетБухучет КАК ЗадаетБухучет,
	|	Показатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
	|	Показатели.ЗадаетБухучет КАК ЗадаетБухучет,
	|	ЕСТЬNULL(ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления, ЛОЖЬ) КАК ОтображатьВДокументахНачисления,
	|	ПоказателиРасчетаЗарплаты.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям) КАК Накапливаемый,
	|	ВЫБОР
	|		КОГДА ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|				И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
	|				И ПоказателиРасчетаЗарплаты.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПостоянныйПоказатель
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = Показатели.Показатель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления УБЫВ,
	|	ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически,
	|	ПоказателиРасчетаЗарплаты.СпособПримененияЗначений.Порядок,
	|	ПоказателиРасчетаЗарплаты.Наименование");
	
	// Промежуточную таблицу используем из-за неодинаковой структуры таблицы Показатели разных планов видов расчета.
	ПоказателиВидаРасчета = ВидРасчетаОбъект.Показатели.Выгрузить();
	Если ПоказателиВидаРасчета.Колонки.Найти("ЗадаетБухучет") = Неопределено Тогда
		ПоказателиВидаРасчета.Колонки.Добавить("ЗадаетБухучет",Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Запрос.УстановитьПараметр("Показатели", ПоказателиВидаРасчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомераПоказателей = Новый Соответствие();
	НомерСтроки = 0;
	
	ПоказателиОбщегоСреднегоЗаработка = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОбщегоСреднегоЗаработка();
	
	Пока Выборка.Следующий() Цикл
		// Подсчет показателей разных видов.
		Если Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете = ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете + 1;
		КонецЕсли;
		Если Выборка.ПостоянныйПоказатель = Истина Тогда
			ЗначенияРеквизитов.КоличествоПостоянныхПоказателей = ЗначенияРеквизитов.КоличествоПостоянныхПоказателей + 1;
		КонецЕсли;
		Если Выборка.ОтображатьВДокументахНачисления = Истина И Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей = ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей + 1;
		КонецЕсли;
		// Если встречаются показатели:
		// - Задает бухучет
		Если Выборка.ЗадаетБухучет Тогда 
			ЗначенияРеквизитов.ИспользуетБухучетПоказателей = Истина;
		КонецЕсли;
		// - Сдельный заработок
		Если Выборка.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда 
			ЗначенияРеквизитов.ИспользуетСдельныйЗаработок = Истина;
		КонецЕсли;
		// - Средний заработок общий
		Если ПоказателиОбщегоСреднегоЗаработка.Найти(Выборка.Показатель) <> Неопределено Тогда 
			ЗначенияРеквизитов.ИспользуетСреднийЗаработокОбщий = Истина;
		КонецЕсли;
		// - Расчет базы
		Если Выборка.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
		Если Выборка.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазыИсполнительногоЛиста = Истина;
			ЗначенияРеквизитов.ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
		Если Выборка.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазыСтраховыхВзносов = Истина;
		КонецЕсли;
		Если Выборка.Накапливаемый Тогда
			ЗначенияРеквизитов.ЕстьНакапливаемыеПоказатели = Истина;
		КонецЕсли;
		НомераПоказателей[Выборка.Показатель] = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Сортировать таблицу с показателями.
	Для Позиция = 1 По ВидРасчетаОбъект.Показатели.Количество() - 1 Цикл
		ПозицияВнутр = Позиция;
		Пока ПозицияВнутр > 0 Цикл
			Если НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр].Показатель] < НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр - 1].Показатель] Тогда
				// Меняем местами.
				ВидРасчетаОбъект.Показатели.Сдвинуть(ПозицияВнутр, -1);
			КонецЕсли;
			ПозицияВнутр = ПозицияВнутр - 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, ЗначенияРеквизитов);
	
	// Эти значения могут сохранятся среди повторно используемых значений.
	ОбновитьПовторноИспользуемыеЗначения();
		
КонецПроцедуры

// Расчет вторичных данных о начислении на основании написанной формулы 
// или выбранного способа расчета.
// Нужно выполнять перед записью начисления.
Процедура ЗаполнитьИнформациюОбУчетеВремени(ВидРасчетаОбъект) Экспорт
	
	ТребуетсяРасчетВремени = Ложь;
	ТребуетсяРасчетНормыВремени = Ложь;
	ТребуетсяРасчетКалендарныхДней = Ложь;
	ТребуетсяРасчетКалендарныхДнейБезПраздников = Ложь;
	ТребуетсяРасчетСверхурочных = Ложь;
	ТребуетсяРасчетОтработаноДнейВсего = Ложь;
	ТребуетсяРасчетОтработаноЧасовВсего = Ложь;
	УчетВремениВЧасах = Ложь;
	УчетВремениВДняхЧасах = Ложь;
	ТребуетсяРасчетБазы = Ложь;
	
	Для Каждого СтрокаПоказателей Из ВидРасчетаОбъект.Показатели Цикл
		Показатель = СтрокаПоказателей.Показатель;
		Если Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноДнейВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноЧасовВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно") 
			Или Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов") Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетСверхурочных = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов") Тогда
			УчетВремениВДняхЧасах = Истина;
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни") Тогда
			ТребуетсяРасчетКалендарныхДней = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников") Тогда
			ТребуетсяРасчетКалендарныхДнейБезПраздников = Истина;
		ИначеЕсли Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда
			ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УчетВремениВЧасах = НачислениеРассчитываетсяПоЧасам(ВидРасчетаОбъект);
	
	// Использование периода заполняем по следующим правилам.
	// 1. БазовыйПериод - применяется только в том случае, если начисление использует расчет базы, 
	// но при этом его базовый период НЕ совпадает с периодом действия.
	// 2. НеИспользовать - применяется, если начисление выполняется в целом за месяц, 
	// т.е. не использует ни расчетную базу за текущий месяц, ни показатели учета времени.
	// 3. ПериодДействия - во всех прочих случаях.
	
	Если ТребуетсяРасчетБазы И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод;
	Иначе
		Если НачислениеВыполняетсяВЦеломЗаМесяц(ВидРасчетаОбъект) Тогда
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
		Иначе
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет времени для неявки нужен, чтобы посчитать время целодневной неявки,
	// а также для того, чтобы это время можно было правильно отобразить в табеле учета рабочего времени.
	КатегорииТребуетсяРасчетВремени = Новый Массив;
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоБолезни);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	Если Не ТребуетсяРасчетВремени 
		И КатегорииТребуетсяРасчетВремени.Найти(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ТребуетсяРасчетВремени = Истина;
	КонецЕсли;
	
	ЗаполнитьПризнакОпределяющийВидВремени(ВидРасчетаОбъект);
	
	ВидРасчетаОбъект.ТребуетсяРасчетВремени = ТребуетсяРасчетВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетНормыВремени = ТребуетсяРасчетНормыВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДней = ТребуетсяРасчетКалендарныхДней;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДнейБезПраздников = ТребуетсяРасчетКалендарныхДнейБезПраздников;
	ВидРасчетаОбъект.ТребуетсяРасчетСверхурочных = ТребуетсяРасчетСверхурочных;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноДнейВсего = ТребуетсяРасчетОтработаноДнейВсего;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноЧасовВсего = ТребуетсяРасчетОтработаноЧасовВсего;
	ВидРасчетаОбъект.УчетВремениВЧасах = УчетВремениВЧасах;
	ВидРасчетаОбъект.УчетВремениВДняхЧасах = УчетВремениВДняхЧасах;
	ВидРасчетаОбъект.ИспользованиеПериода = ИспользованиеПериода;
	Если Не ТребуетсяРасчетБазы Тогда
		ВидРасчетаОбъект.ПериодДействияБазовый = Ложь;
	КонецЕсли;
	
	// Заполняются реквизиты ЗачетОтработанногоВремени и ЗачетНормыВремени.
	ВидВремени = ВидРасчетаОбъект.ВидВремени;	
	
	ВидРасчетаОбъект.ЗачетНормыВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетНормыВремениНачисления(ВидРасчетаОбъект);
	ВидРасчетаОбъект.ЗачетОтработанногоВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ВидВремени);
	
	ЗаполнитьПризнакУчитыватьИзмененияВремяВЧасах(ВидРасчетаОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОпределяющийВидВремени(ВидРасчетаОбъект)
	
	Для Каждого Строка Из ВидРасчетаОбъект.ВидыВремени Цикл
		Строка.ОпределяющийВидВремени = Ложь;
		Строка.ОпределяющийЗаПраздничныеДни = Ложь;
		Если Не ЗначениеЗаполнено(ВидРасчетаОбъект.ОбозначениеВТабелеУчетаРабочегоВремени) Тогда
			Продолжить;
		КонецЕсли;
		Если ВидРасчетаОбъект.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете Тогда
			Строка.ОпределяющийВидВремени = Истина;
		КонецЕсли;
		Если ВидРасчетаОбъект.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете Тогда
			Строка.ОпределяющийВидВремени = Истина;
			Строка.ОпределяющийЗаПраздничныеДни = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУчитыватьИзмененияВремяВЧасах(ВидРасчетаОбъект)
	
	ВидРасчетаОбъект.УчитыватьИзмененияВремяВЧасах = Ложь;
	
	Если ВидРасчетаОбъект.СпособВыполненияНачисления <> Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете Тогда
		Возврат;
	КонецЕсли;

	Если Не ВидРасчетаОбъект.УчетВремениВДняхЧасах Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыВремени", ВидРасчетаОбъект.ВидыВремени.ВыгрузитьКолонку("ВидВремени"));
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
		|ГДЕ
		|	ВидыИспользованияРабочегоВремени.Ссылка В(&ВидыВремени)
		|	И ВидыИспользованияРабочегоВремени.ОсновноеВремя = &Праздники";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВидРасчетаОбъект.УчитыватьИзмененияВремяВЧасах = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение реквизита формы, содержащего список зависимых видов расчета.
//
// Параметры: 
//		Ссылка
//		СписокВидовРасчета - таблица значений с колонкой ВидРасчета.
//
Процедура ЗаполнитьСписокЗависимыхВидовРасчета(Ссылка, СписокВидовРасчета, ИмяТабличнойЧасти, ЗапросПоУдержаниям = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Зависимые.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК Зависимые
	|ГДЕ
	|	Зависимые.ВидРасчета = &ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зависимые.Ссылка.Наименование";
	
	// замена для удержаний
	Если ЗапросПоУдержаниям Или ТипЗнч(Ссылка) = Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.Начисления", "ПланВидовРасчета.Удержания");
	КонецЕсли;
	// замена для вытесняющих
	Если ИмяТабличнойЧасти = "ВытесняющиеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "ВытесняющиеВидыРасчета");
	КонецЕсли;
	// замена для базовых
	Если ИмяТабличнойЧасти = "БазовыеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "БазовыеВидыРасчета");
		Если Не ЗапросПоУдержаниям Тогда 
			ТекстДоплатаДоСреднего = "Зависимые.Ссылка КАК ВидРасчета,
									|	ВЫБОР
									|		КОГДА Зависимые.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
									|			ТОГДА ИСТИНА
									|		ИНАЧЕ ЛОЖЬ
									|	КОНЕЦ КАК ДоплатаДоСреднего";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Зависимые.Ссылка КАК ВидРасчета", ТекстДоплатаДоСреднего);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидРасчета", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВидовРасчета.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Вторичные данные об учете среднего заработка.
//
Процедура ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(ВидРасчетаОбъект) Экспорт
	
	// Анализируем для общего среднего заработка.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокОбщий Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетОбщегоСреднегоЗаработка = ВходитВУчетСреднего;
	
	// Анализируем для среднего заработка ФСС.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокФСС Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеФСС.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетСреднегоЗаработкаФСС = ВходитВУчетСреднего;
	
КонецПроцедуры

Функция РазрешенВводНесколькихПлановыхНачислений(КатегорияНачисления, СпособВыполнения) Экспорт 
	
	Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки
		Или КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда 
		Возврат Истина;
	КонецЕсли;
	
	КатегорииНачислений = КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений();
	Если КатегорииНачислений.Найти(КатегорияНачисления) <> Неопределено  
		И (СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете
		Или СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете) Тогда 
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Функция КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений() Экспорт 
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоказателейВидаРасчета(ВидРасчетаОбъект, КоллекторВидовРасчета) Экспорт
	
	// Настройка табличной части показателей.
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета) Тогда
		ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(ВидРасчетаОбъект.ФормулаРасчета);
	Иначе
		ПоказателиФормулы = ПоказателиПредопределенногоСпособаРасчета(ВидРасчетаОбъект.СпособРасчета);
	КонецЕсли;
	
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ПоказателиФормулы);
	ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
    ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(ВидРасчетаОбъект.Ссылка, ПоказателиФормулы, КоллекторВидовРасчета);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, ВидРасчетаОбъект.Показатели);
	
КонецПроцедуры

Функция СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы() Экспорт

	СсылкиНачисленийУдержаний = Новый Структура; 
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыполнениеПлана", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыручкуОтРеализации", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКрови", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКровиВнутрисменная", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазовоеНачисление", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("СдельныйЗаработок", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоДням", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("УдержаниеВСчетВозмещенияУщерба", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВредность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛет", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаТрудаВНатуральнойФорме", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиноеДенежноеВознаграждение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаКОкладуЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяКвалификационнаяНадбавка", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетГосслужащим", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбыГосслужащих", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячноеДенежноеПоощрение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаВыполнениеОсобоВажныхИСложныхЗаданий", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпускуГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпуску", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("МатериальнаяПомощьКОтпускуГосслужащего", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскойДолжности", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскомуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетНаВоеннойСлужбе", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКласснуюКвалификацию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияВоеннойСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладСотрудникаДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоСпециальномуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСтажСлужбы", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКвалификационноеЗвание", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретностьДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыполнениеЗадачСвязанныхСРиском", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОпдатаДнейПоУходуЗаДетьмиИнвалидамиДД", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностейСотрудникам", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОплатаПреподавателейПоОкладу", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаКлассноеРуководство", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаПроверкуТетрадей", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКвалификационнуюКатегориюПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаУченуюСтепеньПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаПочетноеЗваниеПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаЕзду", Неопределено);

	СсылкиНачисленийУдержаний.Вставить("ДоплатаПоРезультатамОценкиЭффективности", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОКПДТ", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("СОПДТ", Неопределено);
	
	Возврат СсылкиНачисленийУдержаний;

КонецФункции 

Функция ОписаниеПараметровПланаВидовРасчета() Экспорт

	// ПараметрыПоказателей
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ОкладТарифТочность", 0);
	ПараметрыПоказателей.Вставить("ОкладТарифЧасовойТочность", 3);
	
	// ГодоваяПремия
	ПараметрыГодовойПремии = Новый Структура; 
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыГодовойПремии.Вставить("НомерМесяцаНачисленияГодовойПремии", 0);
	ПараметрыГодовойПремии.Вставить("КодДохода", "");
	
	ПараметрыКвартальнойПремии = Новый Структура; 
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НомераМесяцевНачисленияКвартальнойПремии", Новый Массив);
	ПараметрыКвартальнойПремии.Вставить("КодДохода", "");
	
	ПараметрыЕжемесячнойПремии = Новый Структура; 
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("БазовыйПериодПрошлыйМесяц",   Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("КодДохода", "");

	ПараметрыРазовойПремии = Новый Структура;
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыРазовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыРазовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыРазовойПремии.Вставить("ЧислоМесяцевПериодаРазовойПремии",   0);
	ПараметрыРазовойПремии.Вставить("КодДохода", "");
	
	ПараметрыНадбавок = Новый Структура; 
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВредность", Ложь);
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВыслугуЛет", Ложь);
	ПараметрыНадбавок.Вставить("НадбавкиПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("НадбавкиСуммой", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокСуммой", Новый Массив);
	
	ПараметрыНатуральныхДоходов = Новый Структура; 
	ПараметрыНатуральныхДоходов.Вставить("ОплатаТрудаВНатуральнойФорме", Ложь);
	ПараметрыНатуральныхДоходов.Вставить("НатуральныеДоходы", Новый Массив);
	
	ПараметрыДополнительныеОтпуска = Новый Структура; 
	ПараметрыДополнительныеОтпуска.Вставить("ИспользоватьДополнительныеОтпуска", Ложь);
	ПараметрыДополнительныеОтпуска.Вставить("ДополнительныеОтпуска", Новый ТаблицаЗначений);
	
	ПараметрыКомпенсационныеВыплаты = Новый ТаблицаЗначений;
	
	СсылкиНачисленийУдержаний = СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы();
	СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплатыНачальнойНастройкиПрограммы();
	СсылкиПоказателиРасчетаЗарплаты = Справочники.ПоказателиРасчетаЗарплаты.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальнаяНастройкаПрограммы", Ложь);
	Параметры.Вставить("ПараметрыПоказателей", ПараметрыПоказателей);
	Параметры.Вставить("ГодоваяПремия", ПараметрыГодовойПремии);
	Параметры.Вставить("КвартальнаяПремия", ПараметрыКвартальнойПремии);
	Параметры.Вставить("ЕжемесячнаяПремия", ПараметрыЕжемесячнойПремии);
	Параметры.Вставить("РазоваяПремия", ПараметрыРазовойПремии);
	Параметры.Вставить("Надбавки", ПараметрыНадбавок);
	Параметры.Вставить("КомпенсационныеВыплаты", ПараметрыКомпенсационныеВыплаты);
	Параметры.Вставить("НатуральныеДоходы", ПараметрыНатуральныхДоходов);
	Параметры.Вставить("ДополнительныеОтпуска", ПараметрыДополнительныеОтпуска);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыполнениеПлана", Ложь);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыручкуОтРеализации", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКрови", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКровиВнутрисменных", Ложь);
	Параметры.Вставить("ИспользоватьРазовоеНачисление", Ложь);
	Параметры.Вставить("ИспользоватьПодневнуюОплатуТруда", Ложь);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощи", 1);
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпуску", 2);  
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпускуГосслужащего", 2);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощиГосслужащего", 2);
	Параметры.Вставить("СсылкиНачисленийУдержаний", СсылкиНачисленийУдержаний);
	Параметры.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
	Параметры.Вставить("СсылкиПоказателиРасчетаЗарплаты", СсылкиПоказателиРасчетаЗарплаты);
	Параметры.Вставить("ИспользоватьУдержаниеВСчетВозмещенияУщерба", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕдиноеДенежноеВознаграждение", Ложь);
	Параметры.Вставить("РегистрироватьСдельнуюОплатуВБухучете", Ложь);
	
	Возврат Параметры;

КонецФункции 

Процедура ПроверитьНаличиеБазовыхВидовРасчета(ВидРасчетаОбъект, Отказ) Экспорт
	
	// Проверяем, что если в формуле присутствует показатель Расчетная база, список базовых начислений не пуст.
	
	РасчетнаяБаза = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	Если ВидРасчетаОбъект.Показатели.Найти(РасчетнаяБаза, "Показатель") <> Неопределено
		И ВидРасчетаОбъект.БазовыеВидыРасчета.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен список базовых начислений.';
				|en = 'Basic accrual list is not filled in.'"), , "БазовыеВидыРасчета", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Дозаполняет ведущие и вытесняющие начисления и расставляет очередность расчета 
// для переданных начислений.
// Вносит изменения в виды начислений, которые зависят от переданных.
// Параметры:
//	ПакетВидовРасчета - соответствие объектов типа ПланВидовРасчетаОбъект.Начисления, 
//		которые необходимо записать, ключом является ссылка
//   ВНИМАНИЕ.
//  Все объекты ПакетВидовРасчета должны иметь ссылки, т.е. должны быть 
//  либо уже записаны, либо им должна быть установлена ссылка нового объекта.
//
Процедура ДозаполнитьВидыРасчета(ПакетВидовРасчета) Экспорт
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриДозаполненииПакетаВидовРасчета(ПакетВидовРасчета);
	КонецЕсли;
	
	// Корректируем список ведущих по базовым и вытесняющим начислениям.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		ВедущиеНачисления = Новый Массив;
		
		// Собираем уже имеющиеся ведущие начисления.
		Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
			ВедущиеНачисления.Добавить(Строка.ВидРасчета);
		КонецЦикла;
		
		// Если расчетная база определяется за текущий период, 
		// то базовые виды расчета являются также ведущими.
		Если ЕстьПоказательВКоллекции(ВидРасчета.Показатели, "РасчетнаяБаза") Тогда
			Для Каждого Строка Из ВидРасчета.БазовыеВидыРасчета Цикл
				ВедущиеНачисления.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		
		// Если есть показатель "Стоимость дня(часа) с учетом разовых начислений",
		// то начисления для расчета тарифной ставки являются ведущими.
		Если ЕстьПоказательВКоллекции(ВидРасчета.Показатели, "СтоимостьДняЧасаСУчетомРазовыхНачислений") Тогда
			Для Каждого Строка Из ВидРасчета.ВидыРасчетаТарифнойСтавки Цикл
				ВедущиеНачисления.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		
		// Ведущие начисления
		СвойстваНачисления = СвойстваНачислений[ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени];
		ОтборВедущих = СвойстваНачисления.ОтборВедущих;
		Если ОтборВедущих <> Неопределено
			И НачислениеРассчитываетсяПоЧасам(ВидРасчета) 
			И ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ВидРасчета.ВидВремени) Тогда
			
			// Начисления по условию из коллектора.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВедущиеНачисления, ПланыВидовРасчета.Начисления.ВидыРасчетаКоллектораПоОтбору(ПакетВидовРасчета, ОтборВедущих));
				
			// ..Дополняются по условию из базы данных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВедущиеНачисления, ПланыВидовРасчета.Начисления.НачисленияПоОтбору(ОтборВедущих), Истина);
		КонецЕсли;
		
		// Заполняем табличную часть полученными вытесняющими начислениями.
		Для Каждого ВедущееНачисление Из ВедущиеНачисления Цикл
			Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено 
				И КлючИЗначение.Ключ <> ВедущееНачисление Тогда
				
				ВидРасчета.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Наименование КАК Наименование,
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	ВидыРасчетов.ОчередностьРасчета КАК ОчередностьПрежняя,
	|	СписокВедущих.ВидРасчета КАК ВедущийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК СписокВедущих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВедущих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВедущих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыРасчетов = Новый Соответствие;
	// Информация обо всех начислениях.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ОписаниеВидаРасчета = НеОпределено Тогда
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = Выборка.ОчередностьПрежняя;
			ОписаниеВидаРасчета.Наименование = Выборка.Наименование;
			ВидыРасчетов[Выборка.ВидРасчета] = ОписаниеВидаРасчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВедущийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВедущиеПрежние.Добавить(Выборка.ВедущийВидРасчета);
			ОписаниеВидаРасчета.Ведущие.Добавить(Выборка.ВедущийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	СписокВытесняющих.ВидРасчета КАК ВытесняющийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК СписокВытесняющих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВытесняющих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВытесняющих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим информацию о вытесняющих видах расчетов.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ЗначениеЗаполнено(Выборка.ВытесняющийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВытесняющиеПрежние.Добавить(Выборка.ВытесняющийВидРасчета);
			ОписаниеВидаРасчета.Вытесняющие.Добавить(Выборка.ВытесняющийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	ЗаказанныеВидыРасчетаСсылки = Новый Массив;
	// Добавим информацию о "заказанных" видах расчета.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		Если ВидРасчета.Ссылка.Пустая() Тогда
			Ссылка = ВидРасчета.ПолучитьСсылкуНового();
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = ВидРасчета.ОчередностьРасчета;
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			ВидыРасчетов[Ссылка] = ОписаниеВидаРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		Иначе
			Ссылка = ВидРасчета.Ссылка;
			ОписаниеВидаРасчета = ВидыРасчетов[Ссылка];
			ОписаниеВидаРасчета.Ведущие.Очистить();
			ОписаниеВидаРасчета.Вытесняющие.Очистить();
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				Если ВидРасчета.Ссылка <> Строка.ВидРасчета Тогда 
					ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаказанныеВидыРасчетаСсылки.Добавить(Ссылка);
	КонецЦикла;
	
	Для Каждого ВидРасчетаСсылка Из ЗаказанныеВидыРасчетаСсылки Цикл
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Ведущие");
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Вытесняющие");
	КонецЦикла;
	
	ОчереднаяОчередность = 1;
	Пока Истина Цикл
		Обработано = Ложь;
		НачисленияОчереднойОчередности = Новый Массив;
		Для Каждого Элемент Из ВидыРасчетов Цикл
			ОписаниеВидаРасчета = Элемент.Значение;
			Если ОписаниеВидаРасчета.Очередность <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьВедущие = Ложь;
			Для Каждого ВедущийВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				ОписаниеВедущего = ВидыРасчетов[ВедущийВидРасчета];
				Если ОписаниеВедущего <> НеОпределено И ОписаниеВедущего.Очередность = 0 Тогда
					ЕстьВедущие = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьВедущие Тогда
				Продолжить;
			КонецЕсли;
			НачисленияОчереднойОчередности.Добавить(ОписаниеВидаРасчета);
			Обработано = Истина;
		КонецЦикла;
		Для Каждого ОписаниеВидаРасчета Из НачисленияОчереднойОчередности Цикл
			ОписаниеВидаРасчета.Очередность = ОчереднаяОчередность;
		КонецЦикла;
		// следующая...
		ОчереднаяОчередность = ОчереднаяОчередность + 1;
		Если Не Обработано Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим все ли виды расчета обработаны.
	Для Каждого ОписаниеВидаРасчета Из ВидыРасчетов Цикл
		Если ОписаниеВидаРасчета.Значение.Очередность = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Начисления не могут быть записаны при заданных настройках последовательности расчета.';
									|en = 'Accruals cannot be written with the specified settings of calculation sequence.'");
		КонецЕсли;
	КонецЦикла;
	
	// Зафиксируем все объекты для которых изменилась очередность, состав вытесняющих или состав ведущих.
	Для Каждого Элемент Из ВидыРасчетов Цикл
		ОписаниеВидаРасчета = Элемент.Значение;
		Если ОписаниеВидаРасчета.Очередность <> ОписаниеВидаРасчета.ОчередностьПрежняя 
			Или ОписаниеВидаРасчета.Ведущие.Количество() <> ОписаниеВидаРасчета.ВедущиеПрежние.Количество() 
			Или ОписаниеВидаРасчета.Вытесняющие.Количество() <> ОписаниеВидаРасчета.ВытесняющиеПрежние.Количество()
			Или ОписаниеВидаРасчета.Заказанный Тогда
			Если ОписаниеВидаРасчета.Заказанный Тогда
				ИзменяемыйВидРасчета = ОписаниеВидаРасчета.Объект;
			Иначе
				ИзменяемыйВидРасчета = ПакетВидовРасчета[Элемент.Ключ];
				Если ИзменяемыйВидРасчета = НеОпределено Тогда
					ИзменяемыйВидРасчета = Элемент.Ключ.ПолучитьОбъект();
					ПакетВидовРасчета[Элемент.Ключ] = ИзменяемыйВидРасчета;
				КонецЕсли;
			КонецЕсли;
			ИзменяемыйВидРасчета.ОчередностьРасчета = ОписаниеВидаРасчета.Очередность;
			ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
			ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Вытесняющие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает объекты-виды расчета.
// Предназначена для записи видов расчета, модифицированных в связи с изменениями 
// в том или ином начислении и зависящих от этих изменений.
// Параметры: 
//		ВидыРасчета - массив или соответствие, значения которого - объекты видов расчета.
//
Процедура ЗаписатьПакетВидовРасчета(ВидыРасчета, ОбновлятьНастройки = Истина) Экспорт
	
	Если ВидыРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидыРасчета) = Тип("Соответствие") Тогда
		ВидыРасчетовМассив = Новый Массив;
		Для Каждого Элемент Из ВидыРасчета Цикл
			ВидыРасчетовМассив.Добавить(Элемент.Значение);
		КонецЦикла;
	Иначе
		ВидыРасчетовМассив = ВидыРасчета;
	КонецЕсли;
	
	Для Каждого ВидРасчета Из ВидыРасчетовМассив Цикл
		Попытка
			ВидРасчета.Заблокировать();
		Исключение
			ПредставлениеВидаРасчета = ?(ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаОбъект.Начисления"), НСтр("ru = 'начисление';
																											|en = 'accrual'"), НСтр("ru = 'удержание';
																																		|en = 'deduction'"));
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется внести изменение в %2 «%1». 
				|В данный момент изменение невозможно, так как %2 редактируется другим пользователем или в другой форме программы';
				|en = 'It is required to make changes to %2 ""%1"". 
				|At this moment the change is impossible, as %2 is being edited by another user or in another application form'"),
				ВидРасчета.Наименование, ПредставлениеВидаРасчета);
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		ВидРасчета.ОбменДанными.Загрузка = Истина;
		ВидРасчета.ДополнительныеСвойства.Вставить("ЗаписьПакета", Истина);
		ВидРасчета.Записать();
		ВидРасчета.Разблокировать();
	КонецЦикла;
	
	Если ОбновлятьНастройки Тогда
		ЗаполнитьНастройкиРасчетаЗарплаты();
		УчетСреднегоЗаработка.ЗаполнитьНастройкиУчетаСреднегоЗаработка();
		ЗарплатаКадрыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок();
	КонецЕсли;
	
	ПланыВидовРасчета.Начисления.ОбновитьЗависимостиНачислений();
	
КонецПроцедуры

Процедура ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка)
	Если ОбработанныеВидыРасчета[ВидРасчетаСсылка] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	// Значение соответствия ОбработанныеВидыРасчета - список видов расчета уже использованных для дополнения списка.
	ОбработанныеВидыРасчета[ВидРасчетаСсылка] = Новый Соответствие; 
	
	ОписаниеВидаРасчета = ВидыРасчетов[ВидРасчетаСсылка];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	ДополняемыйСписок = Новый Соответствие;
	СтекВидовРасчета = Новый Соответствие;
	ДополнитьСписокРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ОбработанныеВидыРасчета[ВидРасчетаСсылка]);
	Если ОписаниеВидаРасчета[ИмяДополняемогоСписка].Количество() < ДополняемыйСписок.Количество() Тогда
		// Если количество ведущих увеличилось - обновим их список...
		ОписаниеВидаРасчета[ИмяДополняемогоСписка].Очистить();
		Для Каждого Элемент Из ДополняемыйСписок Цикл
			Если Элемент.Ключ = ВидРасчетаСсылка Тогда
				Продолжить;
			КонецЕсли;
			ОписаниеВидаРасчета[ИмяДополняемогоСписка].Добавить(Элемент.Ключ);
		КонецЦикла;
		// ...И обработаем виды расчетов, которые зависят от ВидРасчетаСсылка.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОписаниеВидаРасчета.Заказанный Тогда
		// В любом случае обработаем виды расчетов, которые зависят от заказанного вида расчета.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокРекурсивно(ЗаказанныйВидРасчета, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения)
	Если ИспользованныеДляДополнения[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	ИспользованныеДляДополнения[ЗаказанныйВидРасчета] = 0;
	
	ОписаниеВидаРасчета = ВидыРасчетов[ЗаказанныйВидРасчета];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	Если СтекВидовРасчета[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		// рекурсия
		Если ИмяДополняемогоСписка = "Ведущие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задана противоречивая последовательность расчета для начисления %1. Запись начислений в таком состоянии невозможна';
					|en = 'Conflicting calculation sequence for accrual %1 is specified. Cannot save accruals in such state'"),
				ОписаниеВидаРасчета.Наименование);
		ИначеЕсли ИмяДополняемогоСписка = "Вытесняющие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заданы противоречивые приоритеты расчета для начисления %1. Запись начислений в таком состоянии невозможна';
					|en = 'Conflicting settlement priorities for accrual %1 are specified. Cannot save accruals in such state'"),
				ОписаниеВидаРасчета.Наименование);
		КонецЕсли;
		ВызватьИсключение ТекстИсключенияЗаписи;
	КонецЕсли;
	СтекВидовРасчета[ЗаказанныйВидРасчета] = 0;
		
	Для Каждого ВедущийВР Из ОписаниеВидаРасчета[ИмяДополняемогоСписка] Цикл
		ДополняемыйСписок[ВедущийВР] = 0;
		Если ЗначениеЗаполнено(ВедущийВР) Тогда
			ДополнитьСписокРекурсивно(ВедущийВР, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения);
		КонецЕсли;
	КонецЦикла;
	СтекВидовРасчета.Удалить(ЗаказанныйВидРасчета);
		
КонецПроцедуры

Функция ОписаниеВидаРасчета()
	ОписаниеВидаРасчета = Новый Структура("ВедущиеПрежние,Ведущие,ОчередностьПрежняя,Очередность,ВытесняющиеПрежние,Вытесняющие,Заказанный,Наименование,Объект");
	ОписаниеВидаРасчета.ВедущиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Ведущие = Новый Массив;
	ОписаниеВидаРасчета.Очередность = 0;
	ОписаниеВидаРасчета.ВытесняющиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Вытесняющие = Новый Массив;
	ОписаниеВидаРасчета.Заказанный = Ложь;
	ОписаниеВидаРасчета.Наименование = "";
	ОписаниеВидаРасчета.Объект = НеОпределено;
	Возврат ОписаниеВидаРасчета;
	
КонецФункции

// Дополняет коллектор начислений в соответствии с правилом заполнения «техногенного» списка 
// базовых начислений доплаты до среднего заработка.
//
// Параметры:
//	КоллекторНачислений - соответствие начислений, предлагаемых к записи.
//	СпособРасчетаДоплатыДоСреднего - способ расчета «Доплата до среднего» или «Доплата до среднего ФСС».
//
Процедура ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(КоллекторНачислений, СпособРасчетаДоплатыДоСреднего)
	
	// Принимаем коллектор начислений и дополняем его при необходимости.
	// Причины, по которым может понадобиться что-то дозаписать:
	// - среди предложенных видов расчета, есть те, которые нужно ВКЛЮЧИТЬ в базу одной или нескольких доплат до среднего
	// - среди предложенных есть те, которые нужно ИСКЛЮЧИТЬ из базы одной или нескольких доплат до среднего.
	// Отдельно выполняем заполнение базовых начислений доплаты (доплат) до среднего, если они также встречаются среди
	// предложенных.
	
	// 1. Отбираем начисления коллектора, которые 
	// - учитываются при доплате до среднего заработка
	// - не учитываются при доплате
	// - являются доплатой до среднего заработка.
	УчитываютсяПриДоплатеДоСреднего = Новый Массив;
	НеУчитываютсяПриДоплатеДоСреднего = Новый Массив;
	ДоплатыДоСреднего = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		Если НачислениеОбъект.СпособРасчета = СпособРасчетаДоплатыДоСреднего Тогда
			ДоплатыДоСреднего.Добавить(НачислениеСсылка);
		Иначе
			Если НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего) Тогда
				УчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			Иначе
				НеУчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем из полученных ссылок таблицу значений и помещаем ее во временную таблицу
	// ВТУчитываютсяПриДоплатеИзКоллектора.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление
	|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеИзКоллектора
	|ИЗ
	|	&УчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора";
	
	УчитываютсяПриДоплатеТаблица = Новый ТаблицаЗначений;
	УчитываютсяПриДоплатеТаблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(УчитываютсяПриДоплатеТаблица, УчитываютсяПриДоплатеДоСреднего, "Начисление");
	
	Запрос.УстановитьПараметр("УчитываютсяПриДоплатеИзКоллектора", УчитываютсяПриДоплатеТаблица);
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
	// 2. Если в коллекторе есть доплаты до среднего, дополняем начисления общего заработка начислениями из ИБ.
	Если ДоплатыДоСреднего.Количество() > 0 Тогда
		
		СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчитываютсяПриДоплатеДоСреднего.Ссылка
		|ИЗ
		|	ВТУчитываютсяПриДоплатеДоСреднего КАК УчитываютсяПриДоплатеДоСреднего
		|ГДЕ
		|	НЕ УчитываютсяПриДоплатеДоСреднего.Ссылка В
		|				(ВЫБРАТЬ
		|					УчитываютсяПриДоплатеИзКоллектора.Начисление
		|				ИЗ
		|					ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УчитываютсяПриДоплатеДоСреднего.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		// 3. В коллекторе у имеющихся доплат до среднего корректируем списки базовых начислений.
		Для Каждого ДоплатаДоСреднего Из ДоплатыДоСреднего Цикл
			ДоплатаОбъект = КоллекторНачислений[ДоплатаДоСреднего];
			// Проверим 
			// - нет ли в составе базовых этой доплаты таких начислений, которые нужно изъять.
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаТаблицы Из ДоплатаОбъект.БазовыеВидыРасчета Цикл
				Если УчитываютсяПриДоплатеДоСреднего.Найти(СтрокаТаблицы.ВидРасчета) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			// - Все ли нужные начисления есть в составе ее базовых начислений.
			Для Каждого БазовоеНачисление Из УчитываютсяПриДоплатеДоСреднего Цикл
				Если ДоплатаОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
					ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Выявляем доплаты до среднего заработка в ИБ, 
	// в которые нужно внести изменения в связи с изменениями в начислениях коллектора.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.Ссылка КАК ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.ВидРасчета КАК БазовоеНачисление
	|ПОМЕСТИТЬ ВТБазаДоплатыДоСреднего
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.Ссылка.СпособРасчета = &СпособРасчетаДоплатыДоСреднего
	|	И НЕ БазаДоплатыДоСреднего.Ссылка В (&ДоплатыДоСреднегоКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ПОМЕСТИТЬ ВТСовпадающиеНачисления
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В
	|			(ВЫБРАТЬ
	|				УчитываютсяПриДоплатеИзКоллектора.Начисление
	|			ИЗ
	|				ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего КАК ДоплатаДоСреднего,
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление КАК БазовоеНачисление
	|ИЗ
	|	ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадающиеНачисления КАК СовпадающиеНачисления
	|		ПО (СовпадающиеНачисления.ДоплатаДоСреднего = БазаДоплатыДоСреднего.ДоплатаДоСреднего)
	|			И (СовпадающиеНачисления.БазовоеНачисление = УчитываютсяПриДоплатеИзКоллектора.Начисление)
	|ГДЕ
	|	СовпадающиеНачисления.БазовоеНачисление ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В(&НеУчитываютсяПриДоплатеИзКоллектора)"; 
	
	Запрос.УстановитьПараметр("НеУчитываютсяПриДоплатеИзКоллектора", НеУчитываютсяПриДоплатеДоСреднего);
	Запрос.УстановитьПараметр("ДоплатыДоСреднегоКоллектора", ДоплатыДоСреднего);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавляем недостающие начисления.
	ВыборкаДобавить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока ВыборкаДобавить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаДобавить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			// Помещаем начисление в коллектор.
			ДоплатаОбъект = ВыборкаДобавить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаДобавить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаДобавить.Следующий() Цикл
			ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = ВыборкаДобавить.БазовоеНачисление;
		КонецЦикла;
	КонецЦикла;
	
	// Удаляем избыточные начисления.
	ВыборкаУдалить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока ВыборкаУдалить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаУдалить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			ДоплатаОбъект = ВыборкаУдалить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаУдалить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаУдалить.Следующий() Цикл
			УдаляемыеСтроки = ДоплатаОбъект.БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", ВыборкаУдалить.БазовоеНачисление));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет нужно ли включать указанное начисление в базу доплаты до среднего заработка.
//
Функция НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Для Каждого СтрокаСреднегоЗаработка Из НачислениеОбъект.СреднийЗаработокОбщий Цикл
			Если СтрокаСреднегоЗаработка.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или  СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу с начислениями, учитываемыми при расчете доплаты до среднего заработка 
// в зависимости от установленного способа расчета доплаты.
//
Процедура СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать)
		|	И НачисленияСреднийЗаработокОбщий.Ссылка.СпособРасчета <> &СпособРасчетаДоплатыДоСреднего";
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаБольничного)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет значение перечисления ВидыДокументовНачисления по документу.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоДокументу(Документ) Экспорт
	Возврат ВидДокументаНачисленияПоМетаданнымДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Документ)));
КонецФункции

// Определяет значение перечисления ВидыДокументовНачисления по метаданным документа.
//
// Параметры:
//	МетаданныеДокумента 
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоМетаданнымДокумента(МетаданныеДокумента)
	
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыДокументовНачисления.ЗначенияПеречисления Цикл
		Если ЗначенияПеречисления.Имя = МетаданныеДокумента.Имя 
			Или ЗначенияПеречисления.Имя + "Списком" = МетаданныеДокумента.Имя Тогда
			Возврат Перечисления.ВидыДокументовНачисления[ЗначенияПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция ОсобыеНачисленияРегистрируемыеДокументом(Документ)
	
	НачисленияДокументов = Новый Соответствие;
	
	Начисления = Новый Массив;
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	НачисленияДокументов.Вставить(Метаданные.Документы.ПризПодарок, Начисления);
	
	Возврат НачисленияДокументов[Метаданные.НайтиПоТипу(ТипЗнч(Документ))];
	
КонецФункции

// Определяет признак "разовости" начисления за месяц.
//
Функция НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект) Экспорт
	
	ЕстьПоказателиУчетаВремени = ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
		
	ЕстьПоказателиРасчетнаяБаза = ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект, ЕстьПоказателиУчетаВремени, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели);
	
КонецФункции

// Определяет признак "разовости" удержания за месяц.
//
Функция УдержаниеВыполняетсяВЦеломЗаМесяц(УдержаниеОбъект) Экспорт
	
	ЕстьПоказателиРасчетнаяБаза = ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = ЕстьПоказателиВКоллекции(
		УдержаниеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
		
	ЕстьПоказательРасчетнаяБазаСтраховыеВзносы = ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБазаСтраховыеВзносы");
	
	ЕстьПоказательРасчетнаяБазаИсполнительногоЛиста = ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБазаИсполнительногоЛиста");
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.УдержаниеВыполняетсяВЦеломЗаМесяц(УдержаниеОбъект, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели, ЕстьПоказательРасчетнаяБазаСтраховыеВзносы, ЕстьПоказательРасчетнаяБазаИсполнительногоЛиста);
	
КонецФункции

// Определяется признак того, что расчет времени для этого начисления выполняется по часам.
//
Функция НачислениеРассчитываетсяПоЧасам(НачислениеОбъект) Экспорт
	
	Если Перечисления.ВидыРабочегоВремениСотрудников.НецелодневныеВидыРабочегоВремени().Найти(НачислениеОбъект.ВидВремени) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаПростоя Тогда
		// Если начисление рассчитывается не является нецелодневным (т.е. является внутрисменным), 
		// то простой исключение, для него всегда устанавливаем время в днях (из-за необходимости использовать показатель
		// НормаЧасов.
		Возврат Ложь;
	КонецЕсли;
	
	// Во всех остальных случаях действуем в зависимости от наличия почасовых показателей.
	Если ЕстьПоказателиВКоллекции(
			НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремениВЧасах()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяется признак того, что базовый период начисления определяется как период действия.
//
Функция БазовыйПериодНачисленияКакПериодДействия(НачислениеОбъект) Экспорт
	
	ПериодДействияБазовый = Ложь;
	
	Если НачислениеОбъект.ТребуетсяРасчетБазы И НачислениеОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ПериодДействияБазовый = Истина;
		Если ПланыВидовРасчета.Начисления.КатегорииНадбавокПоБазе().Найти(НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			// Такие надбавки должны вытесняться отклонениями для корректного включения в базу удержаний, 
			// но при этом включать в базу все начисления, выполненные даже в период отклонений.
			// Например, оплату праздничных в период командировки.
			ПериодДействияБазовый = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПериодДействияБазовый;
	
КонецФункции

// Возвращает дополнительные виды расчета(для оплаты по среднему).
//
// Параметры:
//	ОсновныеВидыРасчета - Массив из ПланВидовРасчетаСсылка.Начисления.Ссылка. Виды расчета, указываемые в виде расчета в реквизите ОсновнойВидРасчета
Функция ДополнительныеНачисленияОсновныхВидовРасчета(ОсновныеВидыРасчета) Экспорт
	
	Если ТипЗнч(ОсновныеВидыРасчета) <> Тип("Массив") Тогда
		МассивВидовРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеВидыРасчета);
	Иначе
		МассивВидовРасчета = ОсновныеВидыРасчета;
	КонецЕсли;
	
	СоответствиеНачислений = Новый Соответствие;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Ссылка,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	Начисления.ОсновнойВидРасчета КАК ОсновнойВидРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОсновнойВидРасчета В(&ОсновныеВидыРасчета)
		|	И НЕ Начисления.ОсновнойВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
		|ИТОГИ ПО
		|	ОсновнойВидРасчета";
	
	Запрос.УстановитьПараметр("ОсновныеВидыРасчета", МассивВидовРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаОсновнойВидРасчета = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОсновнойВидРасчета.Следующий() Цикл
		
		ДополнительныеНачисления = Новый Структура;
		ДополнительныеНачисления.Вставить("ВидРасчетаДолиРК");
		ДополнительныеНачисления.Вставить("ВидРасчетаДолиСН");
		
		Выборка = ВыборкаОсновнойВидРасчета.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиРК", Выборка.Ссылка);
			ИначеЕсли Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДС Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиРК", Выборка.Ссылка);
			ИначеЕсли Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДД Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиРК", Выборка.Ссылка);
			ИначеЕсли Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиСН", Выборка.Ссылка);
			ИначеЕсли Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДС Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиСН", Выборка.Ссылка);
			ИначеЕсли Выборка.КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДД Тогда
				ДополнительныеНачисления.Вставить("ВидРасчетаДолиСН", Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		СоответствиеНачислений.Вставить(ВыборкаОсновнойВидРасчета.ОсновнойВидРасчета, ДополнительныеНачисления);
				
	КонецЦикла;
	
	Возврат СоответствиеНачислений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиРКСН(СтрокаНачислений, МенеджерРасчета, ЗначенияПоказателей) Экспорт
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
	ЗначениеПоказателя = 0;
	Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ЗначенияПоказателей.Свойство(ОписаниеПоказателя.Идентификатор,ЗначениеПоказателя) Тогда
			МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(СтрокаНачислений, ОписаниеПоказателя.Показатель, ЗначениеПоказателя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ЗаполнятьНачислениеДолиРКСН(КоллекцияПоказателей, Начисление) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КоллекцияПоказателей) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторыПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ЗначенияИдентификаторовПоказателейСреднегоЗаработкаИДС();
	ЗначенияПоказателей = Новый Структура;
	Для Каждого КлючИЗначение Из КоллекцияПоказателей Цикл
		//Пропускаем показатели общего среднего
		Если ИдентификаторыПоказателей.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		Иначе
			ЗначенияПоказателей.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
		
	ЗначениеПоказателя = 0;
	Если ЗначениеЗаполнено(Начисление) Тогда
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если ЗначенияПоказателей.Свойство(ОписаниеПоказателя.Идентификатор,ЗначениеПоказателя) Тогда
				Если ЗначениеПоказателя <> 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ЗначениеПоказателя);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные функции и процедуры.

// Создает набор записей для регистратора по переданным метаданным.
Функция СоздатьНаборЗаписейРегистратора(Метаданные, Документ) Экспорт
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.ПолноеИмя());
	НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	Возврат НаборЗаписей;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ИмяТаблицы) Экспорт
	
	Если Не КонтролируемыеПоля.Свойство(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УсловияЗамены = Новый Структура;
	Для Каждого КлючИЗначение Из КонтролируемыеПоля[ИмяТаблицы] Цикл
		УсловияЗамены.Вставить(КлючИЗначение.Ключ, Ложь);
	КонецЦикла;
	
	Возврат УсловияЗамены;
	
КонецФункции

Функция НастройкиРасчетаЗарплатыПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени", Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению);
	Если Не ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса") И Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ЗначенияПоУмолчанию.Вставить("ВыполнятьРасчетЗарплатыПоПодразделениям", Истина);
	КонецЕсли;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьИсполнительныеЛисты", Истина);
	ЗначенияПоУмолчанию.Вставить("ОплачиватьДлительныеКомандировкиПомесячно", Истина);
	ЗначенияПоУмолчанию.Вставить("СпособУдержанияИзлишнеНачисленныхОтпускных", Перечисления.СпособыУдержанияИзлишнеНачисленныхОтпускных.СторнированиеРанееНачисленныхСумм);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ в кадровых документах и штатном расписании.

Процедура ДобавитьВКоллекциюОписаниеОбъектаДляЗаполненияСовокупныхТарифныхСтавок(КоллекцияОбъектов, СсылкаНаОбъект, КоллекцияОбъекта) Экспорт
	
	Если КоллекцияОбъектов = Неопределено Тогда
		КоллекцияОбъектов = Новый Соответствие;
	КонецЕсли;
	
	КоллекцияОбъектов.Вставить(СсылкаНаОбъект, КоллекцияОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавкиСотрудниковКоллекции(КоллекцияОписанийОбъектов, СовокупныеТарифныеСтавки, ИмяРеквизитаСотрудник = "Сотрудник") Экспорт
	
	Для каждого ОписаниеОбъекта Из КоллекцияОписанийОбъектов Цикл
		
		СсылкаНаОбъект = ОписаниеОбъекта.Ключ;
		КоллекцияОбъекта = ОписаниеОбъекта.Значение;
		
		ДанныеОбъекта = СовокупныеТарифныеСтавки[СсылкаНаОбъект];
		Для каждого ОбъектКоллекции Из КоллекцияОбъекта Цикл
			
			Если ДанныеОбъекта <> Неопределено Тогда
				
				Сотрудник = ОбъектКоллекции[ИмяРеквизитаСотрудник];
				
				ОписаниеСтавки = ДанныеОбъекта.Получить(Сотрудник);
				Если ОписаниеСтавки <> Неопределено Тогда
					
					ОбъектКоллекции.СовокупнаяТарифнаяСтавка = ОписаниеСтавки.СовокупнаяТарифнаяСтавка;
					ОбъектКоллекции.ВидТарифнойСтавки = ОписаниеСтавки.ВидТарифнойСтавки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДвиженияНачислений, ТабличнаяЧастьНачисления, ИмяРеквизитаСотрудник = "") Экспорт
	
	Для каждого СтрокаДвиженияНачислений Из ДвиженияНачислений Цикл
		
		Если НЕ СтрокаДвиженияНачислений.Используется Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Начисление", СтрокаДвиженияНачислений.Начисление);
		Если НЕ ПустаяСтрока(ИмяРеквизитаСотрудник) Тогда
			СтруктураПоиска.Вставить(ИмяРеквизитаСотрудник, СтрокаДвиженияНачислений.Сотрудник);
		КонецЕсли; 
		
		СтрокиДокумента = ТабличнаяЧастьНачисления.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокаДвиженияНачислений.Размер = СтрокиДокумента[0].Размер;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавкиВДвиженияхЗагружаемогоДокумента(ДокументОбъект, ТабличнаяЧастьССовокупнымиТарифнымиСтавками, ИмяРеквизитаСотрудник = "Сотрудник") Экспорт
	
	ВозвратныеДвижения = Новый Массив;
	
	ДвиженияЗначенияСовокупныхТарифныхСтавок = ДокументОбъект.Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников;
	
	Для каждого СтрокаДвижений Из ДвиженияЗначенияСовокупныхТарифныхСтавок Цикл
		
		Если ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ВозвратныеДвижения.Добавить(СтрокаДвижений);
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(ИмяРеквизитаСотрудник, СтрокаДвижений.Сотрудник);
		СтрокиДокумента = ТабличнаяЧастьССовокупнымиТарифнымиСтавками.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДокумента.Количество() > 0 Тогда
			
			СтрокаДокумента = СтрокиДокумента[0];
			
			СтрокаДвижений.Значение = СтрокаДокумента.СовокупнаяТарифнаяСтавка;
			СтрокаДвижений.ВидТарифнойСтавки = СтрокаДокумента.ВидТарифнойСтавки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьВозвратныеДвиженияСовокупныхТарифныхСтавок(ВозвратныеДвижения, ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьВозвратныеДвиженияСовокупныхТарифныхСтавок(ВозвратныеДвижения, ДокументОбъект)
	
	Если ВозвратныеДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для каждого СтрокаСВозвратнымДвижением Из ВозвратныеДвижения Цикл
		ЗаполнитьЗначенияСвойств(ИзмеренияДаты.Добавить(), СтрокаСВозвратнымДвижением);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументОбъект.Ссылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Период,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки
		|ИЗ
		|	ВТПлановыйФОТИтогиСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавокСотрудников";
	
	ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСВозвратнымДвижением Из ВозвратныеДвижения Цикл
		
		СтруктураПоиска = Новый Структура("Период,Сотрудник");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСВозвратнымДвижением);
		
		СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
			
			СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
			
			СтрокаСВозвратнымДвижением.ЗначениеПоОкончании = СтрокаПредыдущихЗначений.Значение;
			СтрокаСВозвратнымДвижением.ВидТарифнойСтавкиПоОкончании = СтрокаПредыдущихЗначений.ВидТарифнойСтавки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает рассчитывается ФОТ начисления автоматически или нет
//
// Параметры:
//		НачислениеОбъект - ПланВидовРасчета.Начисления - начисление (объект).
//
// Возвращаемое значение:
//		Булево - ИСТИНА, если ФОТ начисления рассчитывается автоматически, иначе ЛОЖЬ
//				ФОТ начисления рассчитывается автоматически если
//				- начисление постоянное,
//				- расчет базы за текущий период,
//				- в его формуле нет ни одного показателя, значение которого не подставляется при расчете ФОТ, 
//				то есть разовые показатели, не являющиеся показателями времени и расчетной базой.
//
Функция ФОТРассчитываетсяАвтоматически(НачислениеОбъект) Экспорт
	
	ПостоянноеВыполнение = Новый Массив;
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете);
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете);
	
	Если Не НачислениеОбъект.ВключатьВФОТ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПостоянноеВыполнение.Найти(НачислениеОбъект.СпособВыполненияНачисления) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НачислениеОбъект.ТребуетсяРасчетБазы И НачислениеОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(НачислениеОбъект.Показатели, "Показатель", Истина);
	СпособыПрименения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Показатели, "СпособПримененияЗначений");
	
	ПоказателиЗаполняемыеПриРасчетеФОТ = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоказателиЗаполняемыеПриРасчетеФОТ, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	ЕстьПостоянныеПоказатели = Ложь;
	ЕстьРазовыеПоказатели = Ложь;
	
	Для Каждого Показатель Из Показатели Цикл
		Если СпособыПрименения[Показатель] = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
			Если ПоказателиЗаполняемыеПриРасчетеФОТ.Найти(Показатель) = Неопределено Тогда
				ЕстьРазовыеПоказатели = Истина;
			КонецЕсли;
		Иначе
			ЕстьПостоянныеПоказатели = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРазовыеПоказатели И ЕстьПостоянныеПоказатели Тогда
		Возврат Неопределено;
	ИначеЕсли ЕстьРазовыеПоказатели Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

// Возвращает массив ссылок на план видов расчета Начисления, которые
// участвуют в формировании ФОТ.
//
Функция НачисленияВходящиеВСоставФОТ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КатегорииСдельнойОплатыТруда() Экспорт
	
	КатегорииНачислений = РасчетЗарплатыБазовый.КатегорииСдельнойОплатыТруда();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Функция КатегорииНачисленийКомпенсационныхВыплат() Экспорт
	
	КатегорииНачислений = РасчетЗарплатыБазовый.КатегорииНачисленийКомпенсационныхВыплат();
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Функция НачисленияСЧасовойИлиДневнойТарифнойСтавкой() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель
		|ПОМЕСТИТЬ ВТПоказателиЧасовыхИДневныхТарифныхСтавок
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЧасовыхИДневныхТарифныхСтавок КАК ПоказателиЧасовыхИДневныхТарифныхСтавок
		|		ПО НачисленияПоказатели.Показатель = ПоказателиЧасовыхИДневныхТарифныхСтавок.Показатель
		|ГДЕ
		|	НачисленияПоказатели.Ссылка.ФОТНеРедактируется
		|	И НачисленияПоказатели.Ссылка.ВключатьВФОТ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция НачисленияТарифнойСтавки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияСПоказателямиТарифныхСтавок(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСПоказателямиТарифныхСтавок.Начисление
		|ИЗ
		|	ВТНачисленияСПоказателямиТарифныхСтавок КАК НачисленияСПоказателямиТарифныхСтавок";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Начисление");
	
КонецФункции

Процедура СоздатьВТНачисленияСПоказателямиТарифныхСтавок(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = ЗапросВТНачисленияСПоказателямиТарифныхСтавок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТНачисленияСПоказателямиТарифныхСтавок() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСоВсемиТарифнымиСтавками
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Ссылка.ЗачетНормыВремени
		|	И НачисленияПоказатели.Ссылка.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|	И НачисленияПоказатели.ЗапрашиватьПриВводе
		|	И НачисленияПоказатели.Показатель.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(НачисленияСТарифнымиСтавками.Показатель.РеквизитДопУпорядочивания) КАК ПоказательРеквизитДопУпорядочивания,
		|	НачисленияСТарифнымиСтавками.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияСПорядкомПоказателей
		|ИЗ
		|	ВТНачисленияСоВсемиТарифнымиСтавками КАК НачисленияСТарифнымиСтавками
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСТарифнымиСтавками.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияСТарифнымиСтавками.Начисление КАК Начисление,
		|	МАКСИМУМ(НачисленияСТарифнымиСтавками.Показатель) КАК Показатель
		|ПОМЕСТИТЬ ВТНачисленияСПоказателямиТарифныхСтавок
		|ИЗ
		|	ВТНачисленияСоВсемиТарифнымиСтавками КАК НачисленияСТарифнымиСтавками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСПорядкомПоказателей КАК НачисленияСПорядкомПоказателей
		|		ПО НачисленияСТарифнымиСтавками.Начисление = НачисленияСПорядкомПоказателей.Начисление
		|			И НачисленияСТарифнымиСтавками.Показатель.РеквизитДопУпорядочивания = НачисленияСПорядкомПоказателей.ПоказательРеквизитДопУпорядочивания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСТарифнымиСтавками.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияСоВсемиТарифнымиСтавками
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияСПорядкомПоказателей";
	
	Возврат Запрос;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ начислений, зависящих от стажа.

Процедура СоздатьВТНачисленияЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТНачисленияЗависящиеОтСтажа") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияЗависящиеОтСтажа
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисление";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(МенеджерВременныхТаблиц, ИмяВТОтборНачислений = "ВТОтборНачислений", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтборНачислений", ИмяВТОтборНачислений);
	ОписательТаблиц.Вставить("ИмяВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Возврат ОписательТаблиц;
	
КонецФункции

Процедура СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (ПериодыИзмененияСтажа.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Северный))
		|ГДЕ
		|	ВЫРАЗИТЬ(ОтборНачислений.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
	
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных);
	
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("ПоказательСевернаяНадбавка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	МАКСИМУМ(ПроцентСевернойНадбавкиПредыдущий.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.Период > ПроцентСевернойНадбавкиПредыдущий.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиПредыдущий.ПроцентСевернойНадбавки КАК ЗначениеПоказателяПредыдущее
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.ПериодПредыдущий = ПроцентСевернойНадбавкиПредыдущий.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	&НачислениеСевернаяНадбавка КАК Начисление,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	&ПоказательСевернаяНадбавка КАК Показатель,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя / ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя1,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее КАК ЗначениеПоказателяПредыдущее
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими КАК ПроцентСевернойНадбавкиСотрудников
		|ГДЕ
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя <> ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудников";
		
	// merge	
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ОтборНачислений.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (НачисленияПоказатели.Показатель.ВидСтажа = ПериодыИзмененияСтажа.ВидСтажа)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
	
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	МАКСИМУМ(ЗначенияПоказателейПредыдущие.ДатаНачала) КАК ДатаНачалаПредыдущая
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущимиДатами
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачала > ЗначенияПоказателейПредыдущие.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателейПредыдущие.ЗначениеПоказателя КАК ЗначениеПоказателяПредыдущее,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущими
		|ИЗ
		|	ВТЗначенияПоказателейСПредыдущимиДатами КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачалаПредыдущая = ЗначенияПоказателейПредыдущие.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополняемыеНачисления.Сотрудник КАК Сотрудник,
		|	ДополняемыеНачисления.Начисление КАК Начисление,
		|	ЗначенияПоказателей.ДатаНачала КАК Период,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ЗначенияПоказателей.ЗначениеПоказателя / ЗначенияПоказателей.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийСтажевыхПоказателей
		|ИЗ
		|	ВТОтборНачислений КАК ДополняемыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ДополняемыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСПредыдущими КАК ЗначенияПоказателей
		|		ПО ДополняемыеНачисления.Сотрудник = ЗначенияПоказателей.Сотрудник
		|			И (НачисленияПоказатели.Показатель = ЗначенияПоказателей.Показатель)
		|ГДЕ
		|	ЗначенияПоказателей.ЗначениеПоказателя <> ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейСПредыдущимиДатами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияПоказателейСПредыдущими";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	
	Запрос.Выполнить();
	
КонецПроцедуры


#Область ОбслуживаниеРасчетаПлановогоФОТ

Процедура ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюПлановогоФОТ");
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьМестаПолученияДохода(НачисленияДляЗаполнения, Организация, МесяцНачисления, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Если НачисленияДляЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НачисленияДляЗаполнения[0], "МестоПолученияДохода") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтраМПД = Новый ТаблицаЗначений;
	ТаблицаФильтраМПД.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаФильтраМПД.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	КонецМесяцаНачисления = КонецМесяца(МесяцНачисления);
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыНачислений Из НачисленияДляЗаполнения Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или СтрокаТаблицыНачислений.Сотрудник <> ПредыдущаяСтрока.Сотрудник
			Или СтрокаТаблицыНачислений.ПериодРегистрации <> ПредыдущаяСтрока.ПериодРегистрации Тогда
			СтрокаФильтраМПД = ТаблицаФильтраМПД.Добавить();
			СтрокаФильтраМПД.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.ПериодРегистрации) Тогда
				СтрокаФильтраМПД.Период = КонецМесяца(СтрокаТаблицыНачислений.ПериодРегистрации);
			Иначе
				СтрокаФильтраМПД.Период = КонецМесяцаНачисления
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаТаблицыНачислений;
	КонецЦикла;
	ТаблицаФильтраМПД.Свернуть("Сотрудник,Период");
	
	МенеджерТаблицМВТ = Новый МенеджерВременныхТаблиц;
	ОписаниеФильтраСрезаПоследних = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтраМПД, "Сотрудник", , МенеджерТаблицМВТ, "ВТФильтрМПД");
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ПодразделенияКакМПД = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		МенеджерТаблицМВТ,
		Истина,
		ОписаниеФильтраСрезаПоследних,
		ПараметрыПостроения);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПодразделенияКакМПД, "Сотрудник,Период");
	
	ТерриторииКакМДП = Неопределено;
	ИспользуютсяТерритории = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Организация);
	Если ИспользуютсяТерритории Тогда
		ТерриторииКакМДП = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистраСрезПоследних(
			"ТерриторииСотрудников",
			МенеджерТаблицМВТ,
			Истина,
			ОписаниеФильтраСрезаПоследних,
			ПараметрыПостроения);
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТерриторииКакМДП, "Сотрудник,Период");
	КонецЕсли;
	
	ПредыдущаяСтрока = Неопределено;
	Отбор = Новый Структура("Сотрудник, Период");
	Для Каждого СтрокаТаблицыНачислений Из НачисленияДляЗаполнения Цикл
		Если ПредыдущаяСтрока = Неопределено
			Или СтрокаТаблицыНачислений.Сотрудник <> ПредыдущаяСтрока.Сотрудник
			Или СтрокаТаблицыНачислений.ПериодРегистрации <> ПредыдущаяСтрока.ПериодРегистрации Тогда
			
			Отбор.Сотрудник = СтрокаТаблицыНачислений.Сотрудник;
			Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.ПериодРегистрации) Тогда 
				Отбор.Период = КонецМесяца(СтрокаТаблицыНачислений.ПериодРегистрации);
			Иначе
				Отбор.Период = КонецМесяцаНачисления;
			КонецЕсли;
			
			ПодразделениеНаКонецПериода = Неопределено;
			НайденныеСтроки = ПодразделенияКакМПД.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() Тогда
				ПодразделениеНаКонецПериода = НайденныеСтроки[0].Подразделение
			КонецЕсли;
			
			ТерриторияНаКонецПериода = Неопределено;
			Если ТерриторииКакМДП <> Неопределено Тогда
				НайденныеСтроки = ТерриторииКакМДП.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() Тогда
					ТерриторияНаКонецПериода = НайденныеСтроки[0].Территория
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТерриторияНаКонецПериода) Тогда
			СтрокаТаблицыНачислений.МестоПолученияДохода = ТерриторияНаКонецПериода;
		ИначеЕсли ЗначениеЗаполнено(ПодразделениеНаКонецПериода) Тогда
			СтрокаТаблицыНачислений.МестоПолученияДохода = ПодразделениеНаКонецПериода;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка периода действия в коллекциях начислений и удержаний.

// Создает структуру используемую для проверки правильности заполнения периода действия.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ПараметрыПроверкиПериодаДействия() Экспорт
	
	ПараметрыПроверки = Новый Структура(
		"ПутьКОбъекту, 
		|Ссылка");
	
	ПараметрыПроверки.ПутьКОбъекту = "Объект";
	ПараметрыПроверки.Ссылка = Неопределено;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Создает структуру используемую для проверки правильности заполнения периода действия.
//						
//       ИмяРедактируемойТаблицы - Имя табличного поля формы, редактируемого в данный момент, используется при
//                                 подстановке значений из механизма контролируемых полей.
//
//       ИмяРеквизитаВидРасчета     - Строка. Имя свойства проверяемого объекта хранящего проверяемое начисление.
//
//       ИмяРеквизитаДатаНачала     - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату начала.
//
//       ИмяРеквизитаДатаОкончания  - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату окончания.
// 
//		 ОтменаРедактирования		- Признак того, что пользователь отказался от редактирования.
//
//		 Ссылка						- Ссылка на редактируемый объект.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ОписаниеКоллекцииДляПроверкиПериодаДействия(ИмяКоллекции, ПредставлениеКоллекции, ИмяРеквизитаВидРасчета = "Начисление", 
													ИмяРеквизитаДатаНачала = "ДатаНачала", ИмяРеквизитаДатаОкончания = "ДатаОкончания",
													ИмяРеквизитаНомерСтроки = "НомерСтроки") Экспорт
	ОписаниеКоллекции = Новый Структура;
	ОписаниеКоллекции.Вставить("ИмяКоллекции", 				ИмяКоллекции);
	ОписаниеКоллекции.Вставить("ПредставлениеКоллекции", 	ПредставлениеКоллекции);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаВидРасчета", 	ИмяРеквизитаВидРасчета);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаНачала", 	ИмяРеквизитаДатаНачала);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаОкончания",	ИмяРеквизитаДатаОкончания);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаНомерСтроки",	ИмяРеквизитаНомерСтроки);
	Возврат ОписаниеКоллекции
КонецФункции

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ) Экспорт
	
	ПериодДействияЗаполненПравильно = Истина;
	ПроверяемаяКоллекция = Объект[ОписаниеКоллекции.ИмяКоллекции];	
	ИнфоОВидахРасчета = ИнформацияОНесколькихВидахРасчета(ПроверяемаяКоллекция.ВыгрузитьКолонку(ОписаниеКоллекции.ИмяРеквизитаВидРасчета));
	
	Для Каждого Строка Из ПроверяемаяКоллекция Цикл
		// Получим значения для проверки.
		ВидРасчета = Строка[ОписаниеКоллекции.ИмяРеквизитаВидРасчета];
		ДатаНачала = Строка[ОписаниеКоллекции.ИмяРеквизитаДатаНачала];
		ДатаОкончания = Строка[ОписаниеКоллекции.ИмяРеквизитаДатаОкончания];
		
		Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1.%2[%3].",
			ПараметрыПроверки.ПутьКОбъекту, 
			ОписаниеКоллекции.ИмяКоллекции,
			Строка[ОписаниеКоллекции.ИмяРеквизитаНомерСтроки] - 1);

		// Проверяем заполненность периода.
		ОписаниеНачисления = ИнфоОВидахРасчета.Получить(ВидРасчета);
		// Для начислений без интервала - проверяем заполненность месяца.
		Если ОписаниеНачисления.Свойство("ИспользованиеПериода") И ОписаниеНачисления.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать Тогда
			Если Не ЗначениеЗаполнено(Строка.ПериодДействия) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Месяц не заполнен в строке %1 таблицы ""%2"".';
						|en = 'Month is not filled in the line %1 of the ""%2"" table.'"), 
					Строка.НомерСтроки, 
					ОписаниеКоллекции.ПредставлениеКоллекции);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ПериодДействияСтрокой", , Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		// Для начислений с интервалом проверяем обе даты
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата начала не заполнена в строке %1 таблицы ""%2"".';
					|en = 'Start date is required in line %1 of the ""%2"" table.'"), 
				Строка.НомерСтроки, 
				ОписаниеКоллекции.ПредставлениеКоллекции);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ДатаНачала", , Отказ);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата окончания не заполнена в строке %1 таблицы ""%2"".';
					|en = 'End date is not filled in line %1 of the ""%2"" table.'"), 
				Строка.НомерСтроки, 
				ОписаниеКоллекции.ПредставлениеКоллекции);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + "ДатаОкончания", , Отказ);
			Продолжить;
		КонецЕсли;
		
		ОписаниеВидаРасчета = ИнфоОВидахРасчета.Получить(ВидРасчета);
		РезультатПроверки = РасчетЗарплатыРасширенныйКлиентСервер.ПериодНачисленияЗаполненПравильно(ОписаниеВидаРасчета, ДатаНачала, ДатаОкончания);
		Если РезультатПроверки.ПериодНачисленияЗаполненПравильно Тогда
			Продолжить;
		КонецЕсли;
			
		Если РезультатПроверки.ПериодБольшеМесяца Тогда
			ТекстСообщения = НСтр("ru = 'Период в строке %1 таблицы ""%2"" должен быть в пределах одного месяца';
									|en = 'Period in row %1 of the ""%2"" table should be within one month'");	
		Иначе
			ТекстСообщения = НСтр("ru = 'Окончание периода в строке %1 таблицы ""%2"" должно быть позже его начала';
									|en = 'Period end in row %1 of the ""%2"" table should be later than its start'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, 
			Строка.НомерСтроки, 
			ОписаниеКоллекции.ПредставлениеКоллекции);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыПроверки.Ссылка, ПутьПоля + ОписаниеКоллекции.ИмяРеквизитаДатаОкончания, , Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодДействияВКоллекцияхНачислений(Объект, ПараметрыПроверки, ПроверяемыеКоллекции, Отказ) Экспорт
	
	Для Каждого ОписаниеКоллекции Из ПроверяемыеКоллекции Цикл
		ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ)
	КонецЦикла;
	
КонецПроцедуры

// Получает информацию о каждом виде расчета из массива.
Функция ИнформацияОНесколькихВидахРасчета(МассивВидовРасчета) Экспорт
	СоответствиеВидовРасчетаИОписания = Новый Соответствие;
	Для каждого ВидРасчета Из МассивВидовРасчета Цикл
		  СоответствиеВидовРасчетаИОписания.Вставить(ВидРасчета, ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета));
	КонецЦикла;
	Возврат СоответствиеВидовРасчетаИОписания
КонецФункции	

Процедура ПроверитьРаспределениеПоТерриториямУсловиямТрудаДокумента(Объект, ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, Отказ) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториям(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаспределения = Объект.РаспределениеПоТерриториямУсловиямТруда.Выгрузить();
	ДанныеРаспределения.Индексы.Добавить("ИдентификаторСтроки");
	
	МетаданныеДокумента = Объект.Метаданные();
	
	ИменаТаблицРаспределения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблицРаспределенияПоТерриториямУсловиямТруда, ",", Истина, Истина);
	Для каждого ИмяТабличнойЧасти Из ИменаТаблицРаспределения Цикл
		
		ПредставлениеТабличнойЧасти = "";
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			
			СтрокиРаспределения = ДанныеРаспределения.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтрокиВидаРасчета));
			Если СтрокиРаспределения.Количество() > 0 Тогда
				
				РезультатРаспределения = 0;
				РанееНачислено = 0;
				Для каждого ЭлементКоллекции Из СтрокиРаспределения Цикл
					РезультатРаспределения = РезультатРаспределения + ЭлементКоллекции.Результат;
					РанееНачислено = РанееНачислено + ЭлементКоллекции.РанееНачислено;
				КонецЦикла;
				
				Если РезультатРаспределения <> СтрокаТабличнойЧасти.Результат 
					Или РанееНачислено <> СтрокаТабличнойЧасти.РанееНачислено Тогда
					
					Если ПустаяСтрока(ПредставлениеТабличнойЧасти) Тогда
						ПредставлениеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти).Синоним;
					КонецЕсли;
					
					ТекстСообщения = НСтр("ru = 'В строке %1 таблицы ""%2"" обнаружены незаполненные поля распределения по территориям или результат строки отличается от распределения';
											|en = 'В строке %1 таблицы ""%2"" обнаружены незаполненные поля распределения по территориям или результат строки отличается от распределения'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстСообщения,
						СтрокаТабличнойЧасти.НомерСтроки,
						ПредставлениеТабличнойЧасти);
					
					ИмяПоля = "Объект." + ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧГ=") + "].ПредставлениеРаспределенияПоТерриториямУсловиямТруда";
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ИмяПоля, , Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	ПланыВидовРасчета.Начисления.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	ПланыВидовРасчета.Удержания.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаОсновнойОтпуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОписатьПрочиеДоходыИВыплатыБывшимСотрудникам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаСеверныйОтпуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыВыплатБывшимСотрудникам.СоздатьВидыВыплатБывшимСотрудникам";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка";
	Обработчик.НачальноеЗаполнение = Истина;
	
	РегистрыСведений.СтавкаРефинансированияЦБ.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("86866faf-28b9-458e-b8aa-50d240371c7f");
	Обработчик.Процедура = "Документы.Командировка.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Командировка"".';
									|en = 'Fills in closing dates of editing the ""Business trip"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e2d196d6-2b7a-471b-b168-390031196d95");
	Обработчик.Процедура = "Документы.КомандировкиСотрудников.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Командировка группы"".';
									|en = 'Fills in closing dates of editing the ""Business trip of group"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("696d3c3c-8c27-4209-86cd-438c51d74b36");
	Обработчик.Процедура = "Документы.Премия.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Премия"".';
									|en = 'Fills in closing dates of editing the Bonus""documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("47009a4c-eb65-47e4-b3fa-dca6a43d73d5");
	Обработчик.Процедура = "Документы.ВозвратИзОтпускаПоУходуЗаРебенком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Возврат из отпуска по уходу"".';
									|en = 'Fills in closing dates of editing the ""Return from care leave"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ff8a4578-e94b-45f0-a363-c9ef490cb10c");
	Обработчик.Процедура = "Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"".';
									|en = 'Fills in closing dates of editing the ""ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9191db30-42d4-4d4e-872f-850eab1a97a2");
	Обработчик.Процедура = "Документы.ОтменаДоплатыДоСреднегоЗаработка.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Отмена доплаты до среднего заработка"".';
									|en = 'Fills in closing dates of editing the ""Cancellation of supplement to average earnings"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bd384ba6-fe9b-4a9e-b7d4-8f9b9622701f");
	Обработчик.Процедура = "Документы.ОтпускПоУходуЗаРебенком.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Отпуск по уходу за ребенком"".';
									|en = 'Fills in closing dates of editing the ""Child care leave"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6629e794-bab4-46d9-bf31-6a00935d123e");
	Обработчик.Процедура = "Документы.ПриказНаДоплатуДоСреднегоЗаработка.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Приказ на доплату до среднего заработка"".';
									|en = 'Fills in closing dates of editing the ""Order for supplement to average earnings"" documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.55";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ЗаполнитьРегистрРаспределенияРезультатовНачислений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("35efc8f0-ed1d-406c-93b3-00cc03cf2133");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра распределения результатов начислений.';
									|en = 'Fill in the accrual result allocation register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.29";
	Обработчик.Процедура = "РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.ПеренестиВыполненныеРаботыСотрудников";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8943730b-9ffd-4ab7-b5f7-209d2b02a629");
	Обработчик.Комментарий = НСтр("ru = 'Перенос выполненных работ в регистр оперативных показателей сотрудников.';
									|en = 'Transfer of completed works to the register of employees'' operative indicators.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.23";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("93253acb-9f8a-4c10-bc8e-85fcd09c9d32");
	Обработчик.Процедура = "РегистрыНакопления.ДополнениеРасчетнойБазыУдержаний.ЗаполнитьДополнениеРасчетнойБазыУдержаний";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Дополнение расчетной базы удержаний"".';
									|en = 'Filling of the register ""Addition of withholdings accounting base"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.24";
	Обработчик.Процедура = "ПланыВидовРасчета.Удержания.ЗаполнитьПрочиеБазовыеДоходы";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4840f5ee-9658-4810-8552-d8709dd63a49");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение таблицы Прочие базовые доходы в Удержаниях.';
									|en = 'Filling of the table Other basic income in Withholdings.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.30";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаДополнительныйОтпускПострадавшимВАварииЧАЭСОплачиваемый";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("07ac4e60-70d4-47c7-a88e-a3e396de695a");
	Обработчик.Комментарий = НСтр("ru = 'Создание вида отпуска ""Дополнительный оплачиваемый отпуск пострадавшим на ЧАЭС""';
									|en = 'Creation of the vacation type ""Additional paid leave for the victims of the explosion on Chernobyl Nuclear Power Station""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.30";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ИзменитьПредставлениеОтпускПострадавшимВАварииЧАЭС";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c2af62d6-7b1c-43e4-9eea-bf1faba13c91");
	Обработчик.Комментарий = НСтр("ru = 'Изменение вида отпуска ""Дополнительный отпуск пострадавшим на ЧАЭС""';
									|en = 'Modification of the vacation type ""Additional paid leave for the victims of the explosion on Chernobyl Nuclear Power Station""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.36";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательУчитыватьМРОТ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("019ce5de-d067-44bd-a123-1c7c3078e5e2");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатель Учитывать МРОТ.';
									|en = 'Create the indicator Account the MMW.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.37";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательКалендарныеДниМесяцаБезПраздников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4d0c6625-02c1-4a09-a610-fd59a9e04199");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатель Календарные дни месяца без праздников.';
									|en = 'Create the indicator Calendar days of the month without public holidays.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.38";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательНормаДнейЧасов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c9992025-d72c-4c5b-a57f-d835aee2dfa1");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатель Норма дней (или часов).';
									|en = 'Create the indicator Day (or hour) norm.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.10.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5d7c22d9-0cd4-4f85-aa92-e1bfde7bbfc7");
	Обработчик.Процедура       = "ПланыВидовРасчета.Удержания.ЗаполнитьРегистрОперативныеПоказателиДляВыявленияУдержаний";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение регистра ОперативныеПоказателиДляВыявленияУдержаний';
										|en = 'Filling of the register ОперативныеПоказателиДляВыявленияУдержаний'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.94";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.УстановитьТочностьПоказателейРасчетнаяБаза";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("06e7b943-9027-42b3-b693-032fd9e41f21");
	Обработчик.Комментарий = НСтр("ru = 'Установить точность показателей расчетной базы.';
									|en = 'Set the accuracy of the calculation base indicators.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.96";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьОтображениеВДокументахНачисленияПоказателяУчитыватьМРОТ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6bbf72f1-3719-49e1-bb7a-0c1f79c51c33");
	Обработчик.Комментарий = НСтр("ru = 'Изменить показатель Учитывать МРОТ и содержащие показатель начисления.';
									|en = 'Change Consider minimum wage ratee and indicator-containing accruals indicator.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.1";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ПереносНастройкиИспользоватьНачисленияПоДоговорам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("239085b2-4527-45a4-a3d0-d5818f17b611");
	Обработчик.Комментарий = НСтр("ru = 'Перенос настройки использования начислений по договорам.';
									|en = 'Transfer settings for using accruals under contracts.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.6";
	Обработчик.Процедура = "УчетНачисленнойЗарплатыРасширенный.ЗаполнитьИдентификаторыСтрокОтработанноеВремяПоСотрудникамКорректировка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("63004672-e905-479d-b036-3cd0d043ecd0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификаторов строк регистра ОтработанноеВремяПоСотрудникамКорректировка.';
									|en = 'Populating IDs of ОтработанноеВремяПоСотрудникамКорректировка register lines.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.7";
	Обработчик.Процедура = "УчетНачисленнойЗарплатыРасширенный.ЗаполнитьВремяВЧасахОтработанноеВремяПоСотрудникамКорректировка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("02a4fc1a-440c-47de-a097-0b6431dce264");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака ВремяВЧасах регистра ОтработанноеВремяПоСотрудникамКорректировка.';
									|en = 'Populating ВремяВЧасах flag of ОтработанноеВремяПоСотрудникамКорректировка register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.25";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РегистрыСведений.НачисленияНеУчитываемыеПриРасчетеДоплатыЗаСовмещение.ЗаполнитьПервоначальныеНастройкиПоДокументам";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("91427107-5401-4ed3-879a-aa8cda873e27");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение списка начислений неучитываемых при расчете доплаты за совмещение';
									|en = 'Filling in the list of accruals not recorded when calculating the extra pay for secondary employment'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.5";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДобавитьРольГрупповоеЗаполнениеПоказателей";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.20.63";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ДобавитьРольПросмотрПодбораВидовРасчета";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.21.31";
	Обработчик.Процедура = "ПланыВидовРасчета.Удержания.УдалитьДоходВНатуральнойФормеИзРасчетнойБазыИЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("295b4fa1-5c88-4763-a87f-7718244e8522");
	Обработчик.Комментарий = НСтр("ru = 'Удаление дохода в натуральной форме из расчетной базы исполнительного листа';
									|en = 'Deletion of income in kind from the garnishment order calculation base'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.22.10";
	Обработчик.Процедура = "Документы.МатериальнаяПомощь.ЗаполнитьДатыНачалаОкончания";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ec021882-25f4-4402-9a69-4b8690b7df29");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение даты начала и окончания в документах ""Материальная помощь""';
									|en = 'Filling in the start and end dates in the ""Support payment"" documents'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.408";
	Обработчик.Процедура = "Документы.ОплатаДнейУходаЗаДетьмиИнвалидами.ПеренестиВидВремени";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b80c308d-e8df-4ebe-9925-a200db0ea460");
	Обработчик.Комментарий = НСтр("ru = 'Перенос данных реквизита ВидВремени в документах ""Оплата дней ухода за детьми-инвалидами""';
									|en = 'Transfer data of the ВидВремени attribute in the ""Payment for disabled child care days"" documents'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.25.138";
	Обработчик.Процедура = "Документы.ВыплатыПоДоговорамОпеки.ВписатьНовыйВидДоходаПоНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("63ef274b-d97e-41df-8266-747b20bcfa04");
	Обработчик.Комментарий = НСтр("ru = 'Обновление кода дохода по НДФЛ для выплат по договорам опеки';
									|en = 'Update the personal income tax code for payments under guardianship contracts'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.53";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиИндексируемогоНеиндексируемогоСреднегоЗаработка";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8151cc7-ef4d-4012-9bb8-d5c581e21bbb");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатели индексируемого и неиндексируемого среднего заработка.';
									|en = 'Create indicators of indexed and non-indexed average earnings.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.75";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательСреднемесячноеКоличествоЧасов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("95fcfbad-67d9-474e-ae12-243c84a6bdbe");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатель ""Среднемесячное количество часов""';
									|en = 'Создать показатель ""Среднемесячное количество часов""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.76";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательСтоимостьДняЧасаСУчетомРазовыхНачислений";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("27c0f5c5-eb45-42dd-91a5-243a830b5ea4");
	Обработчик.Комментарий = НСтр("ru = 'Добавление показателя ""Стоимость дня(часа) с учетом разовых начислений""';
									|en = 'Добавление показателя ""Стоимость дня(часа) с учетом разовых начислений""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.102";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиСреднегоЗаработкаРКиСН";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("185d7293-2298-41bb-8b76-a46a813474bc");
	Обработчик.Комментарий = НСтр("ru = 'Добавление показателей среднего заработка РК и СН';
									|en = 'Добавление показателей среднего заработка РК и СН'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.123";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательКоличествоДнейЧасовКомпенсацииОтгулов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f60a5d6f-138e-47ad-8408-d67e9fd7360d");
	Обработчик.Комментарий = НСтр("ru = 'Создать показатель компенсации отгулов.';
									|en = 'Создать показатель компенсации отгулов.'");
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	ИмяПроцедуры = "Справочники.ВидыВыплатБывшимСотрудникам.СоздатьВидыВыплатБывшимСотрудникам";
	ОбщиеДанные  = Ложь;
	ОбновлениеБЗК.ДобавитьОбработчикПерехода(Обработчики, ИмяПроцедуры, ОбщиеДанные, Истина, Ложь);
	
КонецПроцедуры

// Параметр ПараметрыПланаВидовРасчета - см метод  ОписаниеПараметровПланаВидовРасчета.
//
Процедура СформироватьПланВидовРасчетаПоНастройкам(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь, ТекущиеНастройки = Неопределено) Экспорт
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам(ПараметрыПланаВидовРасчета, НачальноеЗаполнение, ТекущиеНастройки);
КонецПроцедуры

Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры

Процедура ОписатьПрочиеДоходыИВыплатыБывшимСотрудникам() Экспорт

	ПрочиеДоходы = Новый Структура;
	ПрочиеДоходы.Вставить("АрендаТранспорта", НСтр("ru = 'Аренда транспорта';
													|en = 'Vehicle rental'"));
	ПрочиеДоходы.Вставить("ПризыВЦеляхРекламы", НСтр("ru = 'Выдача призов, в целях рекламы товаров, работ и услуг';
													|en = 'Issue gifts to advertise goods, works and services'"));
	ПрочиеДоходы.Вставить("Подарки", НСтр("ru = 'Выдача подарков';
											|en = 'Gift issue'"));
	ПрочиеДоходы.Вставить("ЛицензионныйДоговор", НСтр("ru = 'Доходы по лицензионным договорам';
														|en = 'License agreement income'"));
	ПрочиеДоходы.Вставить("ОтчуждениеАвторскихПрав", НСтр("ru = 'Доходы, полученные от отчуждения авторских или иных смежных прав';
															|en = 'Income received from the alienation of copyright or other related rights'"));
	ПрочиеДоходы.Вставить("ВознагражденияНаследникам", НСтр("ru = 'Вознаграждение, выплачиваемое наследникам (правопреемникам) авторов';
															|en = 'Remuneration paid to legal successors of the authors'"));
	
	ПрочиеДоходыНДФЛ = УчетНДФЛРасширенный.ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы);
	ПрочиеДоходыСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.ВидыДоходовСтраховыеВзносыПрочихДоходовИВыплатБывшимСотрудникам(ПрочиеДоходы);

	СпрДоход = Справочники.ВидыПрочихДоходовФизическихЛиц;
	Для каждого ПрочийДоход Из ПрочиеДоходы Цикл
		
		ВидДоходаНДФЛ = ПрочиеДоходыНДФЛ[ПрочийДоход.Ключ];
		ВидДоходаСтраховыеВзносы = ПрочиеДоходыСтраховыеВзносы[ПрочийДоход.Ключ];
		Наименование = ПрочийДоход.Значение;
		Если Не ЗначениеЗаполнено(СпрДоход.НайтиПоРеквизиту("КодДоходаНДФЛ", ВидДоходаНДФЛ)) Тогда
			СпрОбъект = СпрДоход.СоздатьЭлемент();
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.КодДоходаНДФЛ = ВидДоходаНДФЛ;
			СпрОбъект.КодДоходаСтраховыеВзносы = ВидДоходаСтраховыеВзносы;
			СпрОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;
	
	ДоходыБывшихСотрудников = Новый Структура;
	ДоходыБывшихСотрудников.Вставить("МатериальнаяПомощьБывшимСотрудникам", НСтр("ru = 'Материальная помощь бывшим сотрудникам';
																				|en = 'Support payments to former employees'"));
	ДоходыБывшихСотрудников.Вставить("ВозмещениеСтоимостиМедикаментов", НСтр("ru = 'Возмещение бывшим сотрудникам-пенсионерам, а также инвалидам стоимости медикаментов';
																			|en = 'Medicine cost compensation to former employees-pensioners and also to disabled persons'"));
	
	ПрочиеДоходыНДФЛ = УчетНДФЛРасширенный.ВидыДоходовНДФЛПрочихДоходовИВыплатБывшимСотрудникам(ДоходыБывшихСотрудников);
	ПрочиеДоходыСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.ВидыДоходовСтраховыеВзносыПрочихДоходовИВыплатБывшимСотрудникам(ДоходыБывшихСотрудников);
	
	СпрДоход = Справочники.ВидыВыплатБывшимСотрудникам;
	Для каждого ДоходБывшихСотрудников Из ДоходыБывшихСотрудников Цикл
		
		ВидДоходаНДФЛ = ПрочиеДоходыНДФЛ[ДоходБывшихСотрудников.Ключ];
		ВидДоходаСтраховыеВзносы = ПрочиеДоходыСтраховыеВзносы[ДоходБывшихСотрудников.Ключ];
		Наименование = ДоходБывшихСотрудников.Значение;
		Если Не ЗначениеЗаполнено(СпрДоход.НайтиПоРеквизиту("КодДоходаНДФЛ", ВидДоходаНДФЛ)) Тогда
			СпрОбъект = СпрДоход.СоздатьЭлемент();
			СпрОбъект.Наименование = Наименование;
			СпрОбъект.КодДоходаНДФЛ = ВидДоходаНДФЛ;
			СпрОбъект.КодДоходаСтраховыеВзносы = ВидДоходаСтраховыеВзносы;
			СпрОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка() Экспорт

	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.ПереноситьДанныеВДругойУчетСреднегоЗаработка = Истина;
	Настройки.Записать();

КонецПроцедуры

Процедура ЗаполнитьРегистрРаспределенияРезультатовНачислений(ПараметрыОбновления = Неопределено) Экспорт
	
	ТипыДокументовФизическихЛиц = Метаданные.РегистрыСведений.РаспределениеРезультатовНачислений.Измерения.РегистраторИзмерение.Тип.Типы();
	
	Пока Истина Цикл
		
		КоличествоКОбработке = 1000;
		Запрос = Новый Запрос;
		ЧастиЗапроса = Новый Массив;
		МассивДокументов = Новый Массив;
		
		Для Каждого ТипДокумента Из ТипыДокументовФизическихЛиц Цикл
			
			Если КоличествоКОбработке <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Документ = Метаданные.НайтиПоТипу(ТипДокумента);
			// Проверяем наличие табличной части.
			Если Документ.ТабличныеЧасти.Найти("РаспределениеРезультатовНачислений") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицыРаспределения = "Документ." + Документ.Имя + ".РаспределениеРезультатовНачислений";
			Запрос = Новый Запрос;
			Запрос.Текст = ЗапросДокументовКОбработкеРезультатовРаспределения(Документ.Имя, ИмяТаблицыРаспределения, КоличествоКОбработке);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументыКОбработке = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов, ДокументыКОбработке);
			КоличествоКОбработке = КоличествоКОбработке - ДокументыКОбработке.Количество();
			ЧастиЗапроса.Добавить(ТекстЗапросаПоТаблицеРаспределенияДокумента(ИмяТаблицыРаспределения));
			
		КонецЦикла;
		
		Если МассивДокументов.Количество() = 0 Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
			Возврат;
		Иначе
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		КонецЕсли;
		
		Разделитель = "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		Запрос = Новый Запрос;
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Разделитель);
		Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			НаборЗаписей = РегистрыСведений.РаспределениеРезультатовНачислений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;
		
		Если ПараметрыОбновления <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросДокументовКОбработкеРезультатовРаспределения(ИмяДокумента, ИмяТаблицыРаспределения, КоличествоКОбработке)
	
	ТекстЗапросаДокументов = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ДокументКОбработке.Ссылка КАК Ссылка
		|ИЗ
		|	#ТаблицаДокумента КАК ДокументКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеРезультатовНачислений КАК РегистрРаспределениеРезультатовНачислений
		|		ПО ДокументКОбработке.Ссылка = РегистрРаспределениеРезультатовНачислений.Регистратор
		|ГДЕ
		|	ДокументКОбработке.Проведен
		|	И РегистрРаспределениеРезультатовНачислений.Регистратор ЕСТЬ NULL
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				#ТаблицаРаспределения КАК ТаблицаРаспределения
		|			ГДЕ
		|				ТаблицаРаспределения.Ссылка = ДокументКОбработке.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументКОбработке.Дата УБЫВ";
	
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "ПЕРВЫЕ 1000", "ПЕРВЫЕ " + Формат(КоличествоКОбработке, "ЧГ=0"));
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "#ТаблицаРаспределения", ИмяТаблицыРаспределения);
	ТекстЗапросаДокументов = СтрЗаменить(ТекстЗапросаДокументов, "#ТаблицаДокумента", "Документ." + ИмяДокумента);
	
	Возврат ТекстЗапросаДокументов;
	
КонецФункции

Функция ТекстЗапросаПоТаблицеРаспределенияДокумента(ИмяТаблицыРаспределения)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРаспределения.Ссылка КАК Регистратор,
		|	ТаблицаРаспределения.Ссылка КАК РегистраторИзмерение,
		|	ТаблицаРаспределения.Территория КАК Территория,
		|	ТаблицаРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаРаспределения.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ТаблицаРаспределения.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаРаспределения.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаРаспределения.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
		|	СУММА(ТаблицаРаспределения.Результат) КАК Результат,
		|	ТаблицаРаспределения.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат
		|ИЗ
		|	#ТаблицаДокумент КАК ТаблицаРаспределения
		|ГДЕ
		|	ТаблицаРаспределения.Ссылка В(&МассивДокументов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРаспределения.ПодразделениеУчетаЗатрат,
		|	ТаблицаРаспределения.СпособОтраженияЗарплатыВБухучете,
		|	ТаблицаРаспределения.СтатьяРасходов,
		|	ТаблицаРаспределения.ОблагаетсяЕНВД,
		|	ТаблицаРаспределения.СтатьяФинансирования,
		|	ТаблицаРаспределения.Территория,
		|	ТаблицаРаспределения.ИдентификаторСтроки,
		|	ТаблицаРаспределения.Ссылка,
		|	ТаблицаРаспределения.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумент", ИмяТаблицыРаспределения);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТИсправляемыеРегистраторы
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеРегистраторы.Регистратор
		|ИЗ
		|	ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтработанноеВремяПоСотрудникам.Период,
			|	ВЫБОР
			|		КОГДА ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Начисления.ПериодДействияНачало
			|		ИНАЧЕ ОтработанноеВремяПоСотрудникам.ДатаНачала
			|	КОНЕЦ КАК ДатаНачала,
			|	ОтработанноеВремяПоСотрудникам.*
			|ИЗ
			|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = ИсправляемыеРегистраторы.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = Начисления.Регистратор
			|			И ОтработанноеВремяПоСотрудникам.ПериодДействия = Начисления.ПериодДействия
			|			И ОтработанноеВремяПоСотрудникам.Сотрудник = Начисления.Сотрудник
			|			И ОтработанноеВремяПоСотрудникам.Организация = Начисления.Организация
			|			И ОтработанноеВремяПоСотрудникам.Начисление = Начисления.ВидРасчета
			|			И ОтработанноеВремяПоСотрудникам.ВремяВЧасах = Начисления.ВремяВЧасах
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноДней = Начисления.ОтработаноДней
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноЧасов = Начисления.ОтработаноЧасов
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтработанноеВремяПоСотрудникам.Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			ПериодРегистрации = Неопределено;
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				Если ПериодРегистрации = Неопределено Тогда
					ПериодРегистрации = Выборка.Период;
				КонецЕсли;
				
			КонецЦикла;
			
			УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(
				НаборЗаписей, ПериодРегистрации, "Начисление");
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Движения = ДокументОбъект.Движения;
			
			ТаблицаПредыдущихДвижений = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Выгрузить();
			
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьКорректировкиОтработанногоВремени(Движения);
			
			НаборЗаписей = Движения.ОтработанноеВремяПоСотрудникамКорректировка;
			
			Если Не ОбщегоНазначения.КоллекцииИдентичны(ТаблицаПредыдущихДвижений, НаборЗаписей.Выгрузить()) Тогда
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокВРегистрахНакопления(ПараметрыОбновления) Экспорт
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
			|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|			И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|			И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
			|			И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|			И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|			И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
		Если ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
			
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
		|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
		|			И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
		|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
		|			И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
		|			И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
		|			И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
		|			И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
		|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		// НачисленияУдержанияПоСотрудникам
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор КАК Регистратор,
			|	ТаблицаНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
			|	НачисленияУдержанияПоСотрудникам.Подразделение КАК Подразделение,
			|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК НачислениеУдержание,
			|	НачисленияУдержанияПоСотрудникам.ПериодДействия КАК ПериодДействия,
			|	НачисленияУдержанияПоСотрудникам.ДатаНачала КАК ДатаНачала,
			|	НачисленияУдержанияПоСотрудникам.ДатаОкончания КАК ДатаОкончания
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|			ПО НачисленияУдержанияПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ТаблицаНачислений.ВидРасчета
			|				И НачисленияУдержанияПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|				И НачисленияУдержанияПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|				И НачисленияУдержанияПоСотрудникам.ДатаОкончания <= ТаблицаНачислений.ПериодДействияКонец
			|				И НачисленияУдержанияПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|				И НачисленияУдержанияПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|				И НачисленияУдержанияПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|		ПО Регистраторы.Регистратор = НачисленияУдержанияПоСотрудникам.Регистратор
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НачисленияУдержанияПоСотрудникам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				
				НаборЗаписей.Прочитать();
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Пока Выборка.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Сотрудник,Подразделение,НачислениеУдержание,ПериодДействия,ДатаНачала,ДатаОкончания");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					СтруктураПоиска.Вставить("ИдентификаторСтроки", 0);
					
					Записи = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
					Для каждого Запись Из Записи Цикл
						Записи[0].ИдентификаторСтроки = Выборка.ИдентификаторСтроки
					КонецЦикла;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				// Сохранение объекта
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить идентификаторы строк в движениях %1 по причине: %3';
												|en = 'Cannot update line IDs in records %1 due to: %3'"),
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		// ОтработанноеВремяПоСотрудникам
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор КАК Регистратор,
			|	ТаблицаНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ОтработанноеВремяПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ОтработанноеВремяПоСотрудникам.Подразделение КАК Подразделение,
			|	ОтработанноеВремяПоСотрудникам.Начисление КАК Начисление,
			|	ОтработанноеВремяПоСотрудникам.ПериодДействия КАК ПериодДействия,
			|	ОтработанноеВремяПоСотрудникам.ОтработаноДней КАК ОтработаноДней
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ТаблицаНачислений
			|			ПО ОтработанноеВремяПоСотрудникам.Регистратор = ТаблицаНачислений.Регистратор
			|				И ОтработанноеВремяПоСотрудникам.Начисление = ТаблицаНачислений.ВидРасчета
			|				И ОтработанноеВремяПоСотрудникам.Сотрудник = ТаблицаНачислений.Сотрудник
			|				И ОтработанноеВремяПоСотрудникам.ДатаНачала >= ТаблицаНачислений.ПериодДействияНачало
			|				И ОтработанноеВремяПоСотрудникам.Период = ТаблицаНачислений.ПериодРегистрации
			|				И ОтработанноеВремяПоСотрудникам.ПериодДействия = ТаблицаНачислений.ПериодДействия
			|				И ОтработанноеВремяПоСотрудникам.ДатаНачала = ТаблицаНачислений.БазовыйПериодНачало
			|				И ОтработанноеВремяПоСотрудникам.ОтработаноДней = ТаблицаНачислений.ОтработаноДней
			|		ПО Регистраторы.Регистратор = ОтработанноеВремяПоСотрудникам.Регистратор
			|ГДЕ
			|	ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки = 0
			|	И ТаблицаНачислений.ИдентификаторСтроки <> 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОтработанноеВремяПоСотрудникам.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
				
				Блокировка.Заблокировать();
				
				НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				
				НаборЗаписей.Прочитать();
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Пока Выборка.Следующий() Цикл
					
					СтруктураПоиска = Новый Структура("Сотрудник,Подразделение,Начисление,ПериодДействия,ОтработаноДней");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					СтруктураПоиска.Вставить("ИдентификаторСтроки", 0);
					
					Записи = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
					Для каждого Запись Из Записи Цикл
						Записи[0].ИдентификаторСтроки = Выборка.ИдентификаторСтроки
					КонецЦикла;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				// Сохранение объекта
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обновить идентификаторы строк в движениях %1 по причине: %3';
												|en = 'Cannot update line IDs in records %1 due to: %3'"),
					Выборка.Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Выборка.Регистратор.Метаданные(),
					Выборка.Регистратор,
					ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
		ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов = ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов + 1000;
		
		Если ПараметрыОбновления.ПрогрессВыполнения.ОбработаноОбъектов > ПараметрыОбновления.ПрогрессВыполнения.ВсегоОбъектов Тогда
			ПараметрыОбновления.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
	Иначе
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГоловныеОрганизацииПлановыхАвансов(ПараметрыОбновления = НеОпределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторыПредварительно
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ПлановыеАвансы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеАвансы.РегистраторИзмерение
		|ИЗ
		|	РегистрСведений.ПлановыеАвансыИспр КАК ПлановыеАвансы
		|ГДЕ
		|	ПлановыеАвансы.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ПлановыеАвансы.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистраторыПредварительно.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТРегистраторыПредварительно КАК РегистраторыПредварительно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеАвансы.Регистратор КАК Регистратор,
			|	ПлановыеАвансы.Период,
			|	ПлановыеАвансы.Сотрудник,
			|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеАвансы.Регистратор = Регистраторы.Регистратор
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеАвансы.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПлановыеАвансы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура("Период,Сотрудник");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				ЗаписиСотрудника = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Для каждого Запись Из ЗаписиСотрудника Цикл
					Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНабора);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеАвансы.РегистраторИзмерение КАК РегистраторИзмерение,
			|	ПлановыеАвансы.ПериодИзмерение,
			|	ПлановыеАвансы.Сотрудник,
			|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.ПлановыеАвансыИспр КАК ПлановыеАвансы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО ПлановыеАвансы.РегистраторИзмерение = Регистраторы.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистраторИзмерение";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("РегистраторИзмерение") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ПлановыеАвансыИспр", "РегистраторИзмерение", Выборка.РегистраторИзмерение) Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ПлановыеАвансыИспр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.РегистраторИзмерение.Установить(Выборка.РегистраторИзмерение);
			
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			
			Пока Выборка.Следующий() Цикл
				
				СтруктураПоиска = Новый Структура("ПериодИзмерение,Сотрудник");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				ЗаписиСотрудника = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Для каждого Запись Из ЗаписиСотрудника Цикл
					Запись.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация;
				КонецЦикла;
				
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНабора);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Истина, Ложь, Ложь);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				
		КонецЦикла;
		
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеВДокументахНачисленияПоказателяУчитыватьМРОТ(ПараметрыОбновления = Неопределено) Экспорт
	
	ПоказательСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.УчитыватьМРОТ");
	
	Если Не ЗначениеЗаполнено(ПоказательСсылка) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ПоказателиРасчетаЗарплаты", "Ссылка", ПоказательСсылка) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Возврат;
	КонецЕсли;
	
	ПоказательОбъект = ПоказательСсылка.ПолучитьОбъект();
	ПоказательОбъект.ОтображатьВДокументахНачисления = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПоказательОбъект);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УчитыватьМРОТ", ПоказательСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПоказатели.Ссылка КАК Ссылка,
	               |	НачисленияПоказатели.Ссылка.КоличествоОтображаемыхПоказателей КАК КоличествоОтображаемыхПоказателей
	               |ИЗ
	               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |ГДЕ
	               |	НачисленияПоказатели.Показатель = &УчитыватьМРОТ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;	
	
	ОбработкаЗавершена = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "ПланВидовРасчета.Начисления", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		Если НачислениеОбъект.КоличествоОтображаемыхПоказателей = Выборка.КоличествоОтображаемыхПоказателей Тогда
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			Продолжить;
		КонецЕсли;
		
		ОбработкаЗавершена = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НачислениеОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ДобавитьРольГрупповоеЗаполнениеПоказателей() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеНачисленнойЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ЧтениеНачисленнойЗарплатыРасширенная", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеОтпусков.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтпусков", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеОтпусков.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ЧтениеОтпусков", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ГрупповоеЗаполнениеПоказателей.Имя);
	ЗаменяемыеРоли.Вставить("ЧтениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	

	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

Процедура ДобавитьРольПросмотрПодбораВидовРасчета() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ПросмотрПодбораВидовРасчета.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.НастройкаНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ПросмотрПодбораВидовРасчета.Имя);
	ЗаменяемыеРоли.Вставить("НастройкаНачисленияЗарплатыРасширенная", НовыеРоли);	

	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ПросмотрПодбораВидовРасчета.Имя);
	ЗаменяемыеРоли.Вставить("ЧтениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

Процедура ДобавитьРолиПВРНачисления(ЗаменяемыеРоли) Экспорт
	
	РасчетЗарплатыБазовый.ДобавитьРолиПВРНачисления(ЗаменяемыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПВРНачисления.Имя);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ПросмотрПодбораВидовРасчета.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеПВРНачисления.Имя);
	ЗаменяемыеРоли.Вставить("ПросмотрПодбораВидовРасчета", НовыеРоли);	

	НовыеРоли = Новый Массив;
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеДанныхДляНачисленияЗарплатыРасширенная.Имя);
	НовыеРоли.Добавить(Метаданные.Роли.ЧтениеПВРНачисления.Имя);
	ЗаменяемыеРоли.Вставить("ЧтениеДанныхДляНачисленияЗарплатыРасширенная", НовыеРоли);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетнаяБаза

Процедура СоздатьВТРеальнаяТаблицаРегистраРасчета(МенеджерВременныхТаблиц, УдалитьВТ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	ВЫБОР
		|		КОГДА Начисления.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВТ
		|ПОМЕСТИТЬ ВТИсточникДанныхНачислений
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = ОтборНачислений.Регистратор)
		|			И (Начисления.НомерСтроки = ОтборНачислений.НомерСтроки)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсточникДанныхНачислений");
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТИсточникДанныхНачислений КАК Источники
		|ГДЕ
		|	Источники.ЕстьВТ = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	Начисления.*
			|ПОМЕСТИТЬ ВТРегистрРасчета_НачисленияБД
			|ИЗ
			|	ВТРегистрРасчета_Начисления КАК Начисления
			|ГДЕ
			|	ЛОЖЬ";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	Начисления.*
			|ПОМЕСТИТЬ ВТРегистрРасчета_НачисленияБД
			|ИЗ
			|	РегистрРасчета.Начисления КАК Начисления
			|ГДЕ
			|	(Начисления.Регистратор, Начисления.НомерСтроки) В
			|			(ВЫБРАТЬ
			|				Отбор.Регистратор,
			|				Отбор.НомерСтроки
			|			ИЗ
			|				ВТИсточникДанныхНачислений КАК Отбор
			|			ГДЕ
			|				Отбор.ЕстьВТ = ЛОЖЬ)";
		Запрос.Выполнить();
	КонецЕсли;
	УдалитьВТ.Добавить("ВТРегистрРасчета_НачисленияБД");
	
КонецПроцедуры

Процедура СоздатьВТРеальнаяТаблицаФактическийПериодДействия(МенеджерВременныхТаблиц, УдалитьВТ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	ОтборНачислений.ПериодДействияБазовый,
		|	ВЫБОР
		|		КОГДА Начисления.НомерСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьВТ
		|ПОМЕСТИТЬ ВТИсточникДанныхФПД
		|ИЗ
		|	ВТОтборОсновныхЗаписей КАК ОтборНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК Начисления
		|		ПО (Начисления.Регистратор = ОтборНачислений.Регистратор)
		|			И (Начисления.НомерСтроки = ОтборНачислений.НомерСтроки)
		|			И (ОтборНачислений.ПериодДействияБазовый)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсточникДанныхФПД");
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТИсточникДанныхФПД КАК Источники
		|ГДЕ
		|	Источники.ЕстьВТ = ЛОЖЬ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ФПД.*
			|ПОМЕСТИТЬ ВТФактическийПериодДействияБД
			|ИЗ
			|	ВТРегистрРасчета_Начисления_ФактическийПериодДействия КАК ФПД
			|ГДЕ
			|	ЛОЖЬ";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ФПД.*
			|ПОМЕСТИТЬ ВТФактическийПериодДействияБД
			|ИЗ
			|	РегистрРасчета.Начисления.ФактическийПериодДействия(
			|			(Регистратор, НомерСтроки) В
			|				(ВЫБРАТЬ
			|					Отбор.Регистратор,
			|					Отбор.НомерСтроки
			|				ИЗ
			|					ВТИсточникДанныхФПД КАК Отбор
			|				ГДЕ
			|					Отбор.ПериодДействияБазовый = ИСТИНА
			|					И Отбор.ЕстьВТ = ЛОЖЬ)) КАК ФПД";
		Запрос.Выполнить();
	КонецЕсли;
	
	УдалитьВТ.Добавить("ВТФактическийПериодДействияБД");
	
КонецПроцедуры

#КонецОбласти

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваНачислений с полями
//		Начисление - ПланВидовРасчетаСсылка.Начисления,
//		ЯвляетсяДенежнымСодержанием - Булево,
//		ЯвляетсяДенежнымДовольствием - Булево.
//		ЯвляетсяДоходомВНатуральнойФорме - Булево.
//		НачисляетсяВЦеломЗаМесяц - Булево.
//
//  Используется при расчете НДФЛ и Страховых взносов
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланВидовРасчетаНачисления.Ссылка КАК Начисление,
	|	ПланВидовРасчетаНачисления.ЯвляетсяДоходомВНатуральнойФорме КАК ЯвляетсяДоходомВНатуральнойФорме,
	|	ПланВидовРасчетаНачисления.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
	|	ПланВидовРасчетаНачисления.ВидПособияСоциальногоСтрахования КАК ВидПособияСоциальногоСтрахования,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымДовольствием,
	|	ЛОЖЬ КАК ЯвляетсяПремиейДИДОНаНачалоМесяца	
	|ПОМЕСТИТЬ ВТДополнительныеСвойстваНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		НовыйТекстЗапроса = Модуль.УточнитьТекстЗапросаСпискаНачислений(Запрос.Текст,,Истина);
		Если Не ПустаяСтрока(НовыйТекстЗапроса) Тогда
			Запрос.Текст = НовыйТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
		
	Запрос.Выполнить();  
		
КонецПроцедуры

Функция СотрудникиДополнительныйДоход(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников, Сотрудники, ДополнятьСведениямиНДФЛ = Ложь, ДополнятьСведениямиВзносов = Ложь) Экспорт
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение");
	ФизическиеЛицаДополнительныйДоход = Новый Массив;
	ОкончаниеПериода = ПараметрыСотрудников.ОкончаниеПериода;
	
	Если ДополнятьСведениямиНДФЛ Тогда
		ФизическиеЛицаДополнительныйДоходНДФЛ = УчетНДФЛРасширенный.ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ФизическиеЛица, МесяцНачисления, ОкончаниеПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаДополнительныйДоход, ФизическиеЛицаДополнительныйДоходНДФЛ);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, ФизическиеЛицаДополнительныйДоходНДФЛ);
	КонецЕсли;
	
	Если ДополнятьСведениямиВзносов Тогда
		ФизическиеЛицаДополнительныйДоходВзносы = УчетСтраховыхВзносовРасширенный.ФизическиеЛицаИмеющиеДополнительныйДоход(Организация, Подразделение, ФизическиеЛица, МесяцНачисления, ОкончаниеПериода);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаДополнительныйДоход, ФизическиеЛицаДополнительныйДоходВзносы);
	КонецЕсли;
	
	Если ФизическиеЛицаДополнительныйДоход.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.Организация = Организация;
	Параметры.Подразделение = Подразделение;
	Параметры.СписокФизическихЛиц = ФизическиеЛицаДополнительныйДоход;
	
	Если Не ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам Тогда
		Параметры.РаботникиПоТрудовымДоговорам = Ложь;
		Параметры.РаботникиПоДоговорамГПХ = ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда;
	КонецЕсли;
	
	Если ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу Тогда
		ВидыДоговоров = Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы();
		Если ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ВидДоговора", "В", ВидыДоговоров);
		Иначе	
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ВидДоговора", "НЕ В", ВидыДоговоров);
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСотрудников.РасчетПервойПоловиныМесяца Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			Параметры.Отборы, "СпособРасчетаАванса", "=", Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция ПериодыПолученияДанныхУчетаВремениПоРегиструРасчета(СотрудникиНачисленияПериоды)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиНачисленияПериоды", СотрудникиНачисленияПериоды);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиНачисленияПериоды.Сотрудник КАК Сотрудник,
	|	СотрудникиНачисленияПериоды.ПериодДействия КАК ПериодДействия,
	|	СотрудникиНачисленияПериоды.ПериодРегистрации КАК ПериодРегистрации,
	|	СотрудникиНачисленияПериоды.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТФильтр
	|ИЗ
	|	&СотрудникиНачисленияПериоды КАК СотрудникиНачисленияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.ПериодДействия КАК Месяц,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
	|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
	|	НачисленияФактическийПериодДействия.ВидРасчета КАК КлючНабораВидовВремени,
	|	НачисленияФактическийПериодДействия.ГрафикРаботы КАК ИсточникДанныхФактическогоВремени,
	|	НачисленияФактическийПериодДействия.ПериодРегистрацииВремени КАК ПериодРегистрацииФактическогоВремени,
	|	НачисленияФактическийПериодДействия.ОбщийГрафик КАК ОбщийГрафик
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			(Сотрудник, ПериодРегистрации, ПериодДействия, ВидРасчета) В
	|				(ВЫБРАТЬ
	|					ВТФильтр.Сотрудник КАК Сотрудник,
	|					ВТФильтр.ПериодРегистрации КАК ПериодРегистрации,
	|					ВТФильтр.ПериодДействия КАК ПериодДействия,
	|					ВТФильтр.Начисление КАК Начисление
	|				ИЗ
	|					ВТФильтр КАК ВТФильтр)) КАК НачисленияФактическийПериодДействия";
	
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ДатыНачисленийОплачивающихВидыВремениСлужебный(ПериодыПолученияДанных, МенеджерДанныхУчетаВремени) Экспорт	
	ОписаниеТаблицыНаборовВидовВремени = МенеджерДанныхУчетаВремени.ОписаниеТаблицыНаборовВидовВремени();
	ОписаниеТаблицыНаборовВидовВремени.ИмяТаблицы = "ПланВидовРасчета.Начисления.ВидыВремени";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляКлюч = "Ссылка";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляВидВремени = "ВидВремени";
	ОписаниеТаблицыНаборовВидовВремени.ИмяПоляУчитыватьТолькоПраздники = "ОпределяющийЗаПраздничныеДни";
	
	ОписаниеПолучаемыхДанных = МенеджерДанныхУчетаВремени.НовыйОписаниеПолучаемыхДанныхДатыРегистрацииНаборовВидовВремени();
	ОписаниеПолучаемыхДанных.ПолучатьЗарегистрированныеЧасы = Истина;
	ОписаниеПолучаемыхДанных.ПолучатьВидВремени = Истина;
	ОписаниеПолучаемыхДанных.ДополнительныеПоляФильтра.Добавить("Сотрудник");
	
	ДатыНачислений = МенеджерДанныхУчетаВремени.ДатыРегистрацииНаборовВидовВремени(
		ПериодыПолученияДанных, 
		ОписаниеТаблицыНаборовВидовВремени, 
		ОписаниеПолучаемыхДанных);
	
	ДатыНачислений.Колонки.Месяц.Имя = "ПериодДействия";
	ДатыНачислений.Колонки.КлючНабораВидовВремени.Имя = "Начисление";
	
	ДатыНачислений.Свернуть("Сотрудник, ПериодДействия, Дата, Начисление, ВидУчетаВремени, Дата");
	
	Возврат ДатыНачислений;
КонецФункции	

Процедура ПереносНастройкиИспользоватьНачисленияПоДоговорам(ПараметрыОбновления = Неопределено) Экспорт

	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Если Не Настройки.Выбран() Или Не Настройки.УдалитьИспользоватьНачисленияПоДоговорам Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиРасчетаЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьНабора = НаборЗаписей.Добавить();
	Иначе
		ЗаписьНабора = НаборЗаписей[0];
	КонецЕсли;
	
	Если ЗаписьНабора.ИспользоватьНачисленияПоДоговорам Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиРасчетаЗарплаты", Неопределено, Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНабора.ИспользоватьНачисленияПоДоговорам = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьИсходныйДокументВТабличныхЧастях(ДокументОбъект, НовоеЗначение, ЗаменяемоеЗначение = Неопределено)
	
	МетаданныеТаблиц = ДокументОбъект.Метаданные().ТабличныеЧасти;
	
	Для Каждого ОписаниеТаблицы Из МетаданныеТаблиц Цикл
		Если ОписаниеТаблицы.Реквизиты.Найти("ИсходныйДокумент") <> Неопределено Тогда
			ЗаполнитьИсходныйДокументВТабличнойЧасти(ДокументОбъект, НовоеЗначение, ОписаниеТаблицы, ЗаменяемоеЗначение);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьИсходныйДокументВТабличнойЧасти(Объект, НовоеЗначение, ОписаниеТаблицы, ЗаменяемоеЗначение = Неопределено)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ОписаниеТаблицы.Имя] Цикл
		Если СтрокаТабличнойЧасти.ИсходныйДокумент = ЗаменяемоеЗначение Тогда
			СтрокаТабличнойЧасти.ИсходныйДокумент = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Расчет зарплаты';
															|en = 'Payroll'");
	ГруппаПроверок.Идентификатор				= "КонтрольРасчетаЗарплаты";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Наличие компенсаций и удержаний у уволенного сотрудника';
													|en = 'Availability of compensations and deductions for a dismissed employee'");
	Проверка.Причины						= НСтр("ru = 'Сотрудник уволен без компенсаций и удержаний';
													|en = 'Employee is dismissed without compensation and deductions'");
	Проверка.Рекомендация					= НСтр("ru = 'Пересмотреть компенсации и удержания';
													|en = 'Review compensations and deductions'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаУвольненияБезКомпенсацийИУдержаний";
	Проверка.ОбработчикПроверки				= "РасчетЗарплатыПроверкиРасширенный.ПроверкаУвольненияБезКомпенсацийИУдержаний";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ПланируемаяДатаВыплатыЗарплаты

// Процедура устанавливает планируемую дату выплаты зарплаты в зависимости от выбранного пользователем порядка выплаты.
//
// Параметры:
//  Форма - Форма документа, в котором устанавливается ПланируемаяДатаВыплаты.
//  ОписаниеДокумента - результат функции ОписаниеДокумента().
//
Процедура УстановитьПланируемуюДатуВыплаты(Форма, ОписаниеДокумента) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты = ПараметрыПолученияПланируемойДатыВыплатыЗарплаты();
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.МесяцНачисления 	= Форма.Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.Настройки			= Форма.НастройкиДатВыплаты;
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.ПорядокВыплаты		= Форма.Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.ХарактерыВыплаты	= Новый Структура("Аванс,Зарплата", Форма.ХарактерВыплатыАванс, Форма.ХарактерВыплатыЗарплата);
	ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.Организация		= Форма.Объект.Организация;
	Если Форма.Объект.Свойство("Сотрудник") Тогда
		ПараметрыПолученияПланируемойДатыВыплатыЗарплаты.Сотрудник = Форма.Объект.Сотрудник
	КонецЕсли;
	
	Форма.Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя] = ПланируемаяДатаВыплатыЗарплатыПоНастройкамПоПорядкуВыплаты(
		ПараметрыПолученияПланируемойДатыВыплатыЗарплаты);
		
КонецПроцедуры

Функция ПланируемаяДатаВыплатыЗарплатыПоНастройкамПоПорядкуВыплаты(Параметры) Экспорт
	
	ДлинаСуток = 86400;
	
	Если Параметры.ПорядокВыплаты = Параметры.ХарактерыВыплаты.Зарплата Тогда
		ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Параметры.МесяцНачисления, Параметры.Настройки);
	ИначеЕсли Параметры.ПорядокВыплаты = Параметры.ХарактерыВыплаты.Аванс Тогда
		ПланируемаяДатаВыплаты = НачалоМесяца(Параметры.МесяцНачисления) + (Параметры.Настройки.ДатаВыплатыАвансаНеПозжеЧем - 1) * ДлинаСуток;
	Иначе
		ПланируемаяДатаВыплаты = НачалоМесяца(Параметры.МесяцНачисления) + (Параметры.Настройки.ДатаВыплатыМежрасчетаНеПозжеЧем - 1) * ДлинаСуток;
	КонецЕсли; 
	
	ПланируемаяДатаВыплаты = ДатаСобытияСУчетомНерабочихДней(ПланируемаяДатаВыплаты, Параметры.Организация, Параметры.Сотрудник);
	
	Возврат ПланируемаяДатаВыплаты;
	
КонецФункции 

Функция ПараметрыПолученияПланируемойДатыВыплатыЗарплаты() Экспорт

	Параметры = Новый Структура();
	Параметры.Вставить("МесяцНачисления");
	Параметры.Вставить("Настройки");
	Параметры.Вставить("ПорядокВыплаты");
	Параметры.Вставить("ХарактерыВыплаты");
	Параметры.Вставить("Сотрудник", Неопределено);
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ДатаНакануне", Истина);
	
	Возврат Параметры;

КонецФункции

// Функция - возвращает дату события, скорректированную с учетом нерабочих дней
//			 по графику работы организации, производственному календарю сотрудника,
//			 либо по основному производственному календарю, в зависимости от переданных параметров
//			 и заполненности реквизитов.
//
// Параметры:
//  ДатаСобытия  - Дата
//  Организация  - СправочникСсылка.Организации - по-умолчанию Неопределено,
//												  если задана, то для получения нерабочих дней будет
//												  использоваться график работы сотрудников организации, если заполнен.
//  Сотрудник    - СправочникСсылка.Сотрудники  - по-умолчанию Неопределено,
//											      если задан, то будет использоваться производственный календарь сотрудника,
//											      если задан график работы сотрудника и не передана организация, либо
//												  у переданной организации не заполнен график работы сотрудников.
//  ДатаНакануне - Булево - по-умолчанию Истина, если Ложь, то берется рабочий день после даты события
// 
// Возвращаемое значение:
// Дата  - первый рабочий день до или после даты события.
//
Функция ДатаСобытияСУчетомНерабочихДней(ДатаСобытия, Организация = Неопределено, Сотрудник = Неопределено, ДатаНакануне = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда
		Возврат ДатаСобытия;
	КонецЕсли;
	
	ГрафикРаботыСотрудниковОрганизации = Неопределено;
	ПроизводственныйКалендарьСотрудника = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	ДатаСобытияСУчетомНерабочихДней = ДатаСобытия;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ГрафикРаботыСотрудниковОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГрафикРаботыСотрудников");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГрафикРаботыСотрудниковОрганизации) И ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ГрафикРаботы", ДатаСобытия);
		Если КадровыеДанныеСотрудника.Количество() > 0
			И ЗначениеЗаполнено(КадровыеДанныеСотрудника[0].ГрафикРаботы) Тогда
			ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				КадровыеДанныеСотрудника[0].ГрафикРаботы, "ПроизводственныйКалендарь");
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ГрафикРаботыСотрудниковОрганизации) Тогда 
		ДатаСобытияСУчетомНерабочихДней = УчетРабочегоВремениРасширенный.БлижайшийРабочийДеньПоГрафику(
			ГрафикРаботыСотрудниковОрганизации, ДатаСобытия, ДатаНакануне);
	Иначе
		ПараметрыПолученияБлижайшихРабочихДат = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
		ПараметрыПолученияБлижайшихРабочихДат.ПолучатьПредшествующие = ДатаНакануне;
		ДатыРабочихДней = КалендарныеГрафики.БлижайшиеРабочиеДаты(ПроизводственныйКалендарьСотрудника, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаСобытия), ПараметрыПолученияБлижайшихРабочихДат);
		Если ДатыРабочихДней <> Неопределено Тогда
			ДатаСобытияСУчетомНерабочихДней = ДатыРабочихДней.Получить(ДатаСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаСобытияСУчетомНерабочихДней;
	
КонецФункции

#КонецОбласти
