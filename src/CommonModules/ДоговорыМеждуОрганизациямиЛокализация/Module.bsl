
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды
// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	//++ Локализация

	//++ НЕ УТ
	Команда = Отчеты.ПаспортКонтракта.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипДоговора", 
									Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложение1(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипДоговора", 
									Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Команда = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложения2и3(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ТипДоговора", 
									Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийМодуляОбъекта

// Обработчик события ОбработкаПроверкиЗаполнения объекта справочника ДоговорыМеждуОрганизациями.
// См. описание платформенного метода ОбработкаПроверкиЗаполнения.
// 
// Параметры:
//   Отказ - Булево
//   ПроверяемыеРеквизиты - Массив из Строка
//   МассивНепроверяемыхРеквизитов - Массив из Строка
//   СправочникОбъект - СправочникОбъект.ДоговорыМеждуОрганизациями
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, СправочникОбъект) Экспорт
	//++ Локализация

	Перем Ошибки;
	
	//++ НЕ УТ
	Если Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
	//-- НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ГосударственныйКонтракт");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Не СправочникОбъект.ПлатежиПо275ФЗ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
	КонецЕсли;
	
	Если СправочникОбъект.ПлатежиПо275ФЗ Тогда
		ДенежныеСредстваСерверЛокализация.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(СправочникОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(СправочникОбъект, Отказ);
		
		ШаблонСообщения = НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
								|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'");
		
		Если СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
			Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчет) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
				И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчет, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонСообщения, СправочникОбъект, "БанковскийСчет", , Отказ);
			КонецЕсли;
			Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчетПолучателя) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
				И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчетПолучателя, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонСообщения, СправочникОбъект, "БанковскийСчетПолучателя", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы элемента справочника Договоры
//  см. описание платформенного метода ПередЗаписью
//
// Параметры:
// Отказ - Булево
// СправочникОбъект - СправочникОбъект
//
Процедура ПередЗаписью(Отказ, СправочникОбъект) Экспорт
	//++ Локализация

	//++ НЕ УТ
	Если Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
		СправочникОбъект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	Если Не СправочникОбъект.ПлатежиПо275ФЗ Тогда
		СправочникОбъект.ТипПлатежаФЗ275 = Неопределено;
		СправочникОбъект.ПодтверждающиеДокументы.Очистить();
	КонецЕсли;
	
	Если Не СправочникОбъект.ПлатежиПо275ФЗ Или Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
		СправочникОбъект.ДоговорыСЗаказчиками.Очистить();
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника ДоговорыКонтрагентов.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация

	//++ НЕ УТ
	Если Форма.Объект.ПлатежиПо275ФЗ Тогда
		Если Форма.Объект.ТипДоговора = Перечисления.ТипыДоговоровМеждуОрганизациями.КупляПродажа
			И Форма.ВариантПлатежаГОЗ = 1 И Не ЗначениеЗаполнено(Форма.КонтрактСЗаказчиком) Тогда
			
			Текст = НСтр("ru = 'Поле ""Договор с заказчиком"" не заполнено.';
						|en = 'Contract with customer is not filled in.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,,
				"КонтрактСЗаказчиком",,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
	Возврат
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация

	//++ НЕ УТ
	Форма.ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаБанковскогоИКазначейскогоСопровожденияГосконтрактов");
	
	Если Форма.Объект.ДоговорыСЗаказчиками.Количество() Тогда
		Форма.КонтрактСЗаказчиком = Форма.Объект.ДоговорыСЗаказчиками[0].ДоговорСЗаказчиком;
	КонецЕсли;

	ДоговорыМеждуОрганизациямиЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	
	Форма.ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Форма.АдресПодтверждающихДокументовВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Форма.Объект.ПодтверждающиеДокументы.Выгрузить(),
		Форма.УникальныйИдентификатор);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере формы элемента справочника ДоговорыКонтрагентов
//
// Параметры:
//  Отказ           - Булево
//  ТекущийОбъект   - СправочникОбъект - объект, который будет записан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
		
	//++ НЕ УТ
	Если ТекущийОбъект.ПлатежиПо275ФЗ Тогда
		Если Форма.ВариантПлатежаГОЗ = 1 Тогда
			ТекущийОбъект.ДоговорыСЗаказчиками.Очистить();
			НоваяСтрока = ТекущийОбъект.ДоговорыСЗаказчиками.Добавить();
			НоваяСтрока.ДоговорСЗаказчиком = Форма.КонтрактСЗаказчиком;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация

	//++ НЕ УТ
	Если ИмяЭлемента = "БанковскийСчет" Тогда
		БанковскийСчетПриИзменении(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "ГосударственныйКонтракт" Тогда
		ГосударственныйКонтрактПриИзменении(Форма);
	КонецЕсли;
	//-- НЕ УТ
	Если ИмяЭлемента = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#Область ОбработчикиКомандФормы

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	
	//++ НЕ УТ
	Если ИмяКоманды = "ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ" Тогда
		ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(ПараметрыОбработки, Форма)
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление формы
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеМетоды

//++ Локализация


Функция ПолучитьКонтрактСЗаказчиком(ГосударственныйКонтракт, ОрганизацияПолучатель) Экспорт
	
	КонтрактСЗаказчиком = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК ДоговорСсылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов
	|ГДЕ
	|	ГосударственныйКонтракт = &Госконтракт
	|	И ДоговорСУчастникомГОЗ
	|	И ПлатежиПо275ФЗ
	|	И ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|	И Организация = &ОрганизацияПолучатель
	|	И НЕ ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Госконтракт", ГосударственныйКонтракт);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", ОрганизацияПолучатель);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		КонтрактСЗаказчиком = Результат[0].ДоговорСсылка;
	КонецЕсли;
	
	Возврат КонтрактСЗаказчиком
КонецФункции

//++ НЕ УТ

Процедура ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(Результат, Форма) Экспорт
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
	ПодтверждающиеДокументы = ПолучитьИзВременногоХранилища(Результат.АдресПодтверждающихДокументовВоВременномХранилище);
	ПодтверждающиеДокументыОбъекта = Форма.Объект.ПодтверждающиеДокументы;
	ПодтверждающиеДокументыОбъекта.Очистить();
	Для каждого ТекСтрока Из ПодтверждающиеДокументы Цикл
		НоваяСтрока = ПодтверждающиеДокументыОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Форма.Модифицированность = Истина;
	ДоговорыМеждуОрганизациямиЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект)
КонецПроцедуры

//-- НЕ УТ

//-- Локализация
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные
//++ Локализация

//++ НЕ УТ

Процедура БанковскийСчетПриИзменении(Форма)

	Госконтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.БанковскийСчет, "ГосударственныйКонтракт");
	Если ЗначениеЗаполнено(Госконтракт) Тогда
		Форма.Объект.ПлатежиПо275ФЗ = Истина;
		Форма.Объект.ДоговорСУчастникомГОЗ = Истина;
		Форма.Объект.ГосударственныйКонтракт = Госконтракт;
		Форма.ВариантПлатежаГОЗ = 1;
		Форма.Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет;
		ПриОкончанииИзмененияРеквизита("ГосударственныйКонтракт", Форма, Неопределено);
		ДоговорыМеждуОрганизациямиЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГосударственныйКонтрактПриИзменении(Форма)
	
	Форма.КонтрактСЗаказчиком = ПолучитьКонтрактСЗаказчиком(Форма.Объект.ГосударственныйКонтракт, Форма.Объект.ОрганизацияПолучатель);
	
КонецПроцедуры
//-- НЕ УТ

Процедура ТипДоговораПриИзменении(Форма)
	//++ НЕ УТ
	ДоговорыМеждуОрганизациямиЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	//-- НЕ УТ
КонецПроцедуры
//-- Локализация
#КонецОбласти

#КонецОбласти