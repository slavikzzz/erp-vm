
#Область ПрограммныйИнтерфейс

// Возвращает таблицу классификатора из макета с предопределенными элементами. Применяется для классификаторов (ОКВЭД,
// ОКОПФ и т.д.) Макеты хранятся в макетах данного справочника (см. общую форму "ФормаВыбораКода").
//	Параметры:
//		НазваниеМакета - Строка - имя макета, хранящего данные с предопределенными элементами классификатора.
//		ТекущийПериод - Дата - в данном методе не используется, однако может быть обязательной в случае обращения к другим классификаторам из общей формы.
//	Возвращаемое значение:
//		Структура - структура параметров со следующими свойствами:
//			* СписокКодов - ТаблицаЗначений - таблица классификатора с колонками:
//				** Код - Строка - строковое представление кода элемента классификатора.
//				** Наименование - Строка - наименование элемента классификатора.
//
Функция ПолучитьПараметрыФормыВыбораДляКода(НазваниеМакета, ТекущийПериод) Экспорт
	Классификатор = Новый ТаблицаЗначений;
	
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Индексы.Добавить("Код");
	//++ Локализация
	Макет =Справочники.Организации.ПолучитьМакет(НазваниеМакета);
	
	ТекущаяОбласть = Макет.Области.Найти("Классификатор");
	
	Если НЕ ТекущаяОбласть = Неопределено Тогда
		
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя	= СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название		= СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Код				= КодПоказателя;
				НоваяСтрока.Наименование	= Название;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	Параметры = Новый Структура;
	Параметры.Вставить("СписокКодов",	Классификатор);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает соответствие кодов к наименованию, указанное в макете. Применяется для классификаторов (ОКВЭД, ОКОПФ и т.д.).
//
//	Параметры:
//		ИмяМакета - Строка - Имя макета, как оно задано в конфигураторе. Если он не будет обнаружен - будет возвращено пустое соответствие.
//		ИмяОбласти - Строка - Имя анализируемой области макета.
//
//	Возвращаемое значение:
//		ФиксированноеСоответствие - Состоит из:
//			* Ключ - Строка -  код, указанный в первой колонке макета;
//			* Значение - Строка - наименование, указанное во второй колонке макета.
//
Функция СоответствиеКодовКНаименованиюИзМакета(ИмяМакета, ИмяОбласти = "Классификатор") Экспорт
	
	СоответствиеКодов = Новый Соответствие;
	
	Макет = Справочники.Организации.ПолучитьМакет(ИмяМакета);
	Если Макет = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(СоответствиеКодов);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		
		ТекКод = СокрЛП(ОбластьМакета.Область(Ном,1).Текст);
		ТекНаименование = СокрЛП(ОбластьМакета.Область(Ном, 2).Текст);
		
		Если ТекКод = "###" Тогда
			Прервать;
		ИначеЕсли ПустаяСтрока(ТекКод) Тогда
			Продолжить;
		Иначе
			СоответствиеКодов.Вставить(ТекКод, ТекНаименование);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеКодов);
	
КонецФункции

Процедура ДополнитьСписокРеквизитовОрганизации(Реквизиты) Экспорт
	//++ Локализация
	Реквизиты.Вставить("КПП", "");
	Реквизиты.Вставить("ОГРН", "");
	Реквизиты.Вставить("КодПоОКПО", "");
	Реквизиты.Вставить("КодОКВЭД", "");
	Реквизиты.Вставить("СвидетельствоДатаВыдачи", "");
	Реквизиты.Вставить("СвидетельствоСерияНомер", "");
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьРеквизитыОрганизации(Организация, СтруктураРеквизитов, ВыборкаПоОрганизации) Экспорт
	//++ Локализация
	Регистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация);
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, "КодПоОКТМО, КодПоОКАТО");
	
	СтруктураРеквизитов.Вставить("КодПоОКАТО", "");
	СтруктураРеквизитов.Вставить("КодПоОКТМО", "");
	
	Если ВыборкаПоОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		СтруктураРеквизитов.Свидетельство = НСтр("ru = 'Свидетельство';
												|en = 'Certificate '")
			+ " "
			+ ВыборкаПоОрганизации.СвидетельствоСерияНомер
			+ " "
			+ НСтр("ru = 'от';
					|en = 'dated'")
			+ " "
			+ Формат(ВыборкаПоОрганизации.СвидетельствоДатаВыдачи, "ДЛФ=D");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов,РеквизитыРегистрации);
	//-- Локализация
КонецПроцедуры

// Определяет наличие у организации обособленных подразделений (выделенных на отдельный баланс).
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево - Истина, если в информационной базе ведется учет
//           обособленных подразделений организации, выделенных на отдельный баланс
//
Функция ЕстьОбособленныеПодразделения(Организация) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Возврат ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация).Количество() > 1;
	//-- НЕ УТ

	//-- Локализация
	
	Возврат Ложь;
	
КонецФункции

// Возвращает КПП организации на указанную дату.
//
// Параметры:
//     Организация - СправочникСсылка.Организации - Организация.
//     ДатаСведений - Дата - Дата, на которую нужно получить КПП организации.
//     Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение.
// Возвращаемое значение:
//     Строка - КПП.
//
Функция КППНаДату(Организация, ДатаСведений, Подразделение = Неопределено) Экспорт
	
	//++ Локализация
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Если Подразделение = Неопределено Тогда
		Запрос.Параметры.Вставить("ПодразделениеОсновнойРегистрации", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Иначе
		Запрос.Параметры.Вставить("ПодразделениеОсновнойРегистрации", Подразделение);
	КонецЕсли;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
	|	ИсторияРегистраций.Организация КАК Организация
	|ПОМЕСТИТЬ ДатаРегистрации
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.Организация = &Организация
	|	И ИсторияРегистраций.Подразделение = &ПодразделениеОсновнойРегистрации
	|	И ИсторияРегистраций.Период <= &ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистраций.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП, """") КАК КПП
	|ИЗ
	|	ДатаРегистрации КАК ДатаРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК ИсторияРегистраций
	|		ПО ДатаРегистрации.Организация = ИсторияРегистраций.Организация
	|			И ИсторияРегистраций.Подразделение = &ПодразделениеОсновнойРегистрации
	|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
КонецФункции

//++ Локализация

// Возвращает таблицу соответствия числового кода (первых 2 цифр - класса) и буквенного кода раздела ОКВЭД2 
//
// Возвращаемое значение:
//   ТаблицаЗначений - Содержит колонки:
//    * Код - Строка - Первые 2 цифры числового кода из классификатора ОКВЭД2 (класс)
//    * Раздел - Строка - Буквенное обозначение раздела, в который входит указанный класс
//
Функция БуквенныеКодыРазделовОКВЭД2() Экспорт 

	Макет = Справочники.Организации.ПолучитьМакет("ОКВЭД2БуквенныеКодыРазделов");
	Возврат ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;

КонецФункции

Процедура ОбновитьНаименованияОКВЭД2() Экспорт
	
	ТаблицаИзменений = ОбщегоНазначения.ПрочитатьXMLВТаблицу(
		Справочники.Организации.ПолучитьМакет("ОКВЭД2ИзмененияНаименований").ПолучитьТекст()).Данные;
	
	ИзмененныеКоды = ТаблицаИзменений.ВыгрузитьКолонку("Код");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИзмененныеКоды", ИзмененныеКоды);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КодОКВЭД2 КАК КодОКВЭД2,
	|	Организации.НаименованиеОКВЭД2 КАК НаименованиеОКВЭД2
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодОКВЭД2 В (&ИзмененныеКоды)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеОКВЭД2 = СокрЛП(Выборка.НаименованиеОКВЭД2);
		
		СтруктураОтбора = Новый Структура("Код", СокрЛП(Выборка.КодОКВЭД2));
		Изменения = ТаблицаИзменений.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Изменение Из Изменения Цикл
			Если НаименованиеОКВЭД2 = Изменение.СтароеНаименование Тогда
				НаименованиеОКВЭД2 = Изменение.НовоеНаименование;
			КонецЕсли;
		КонецЦикла;
		
		Если НаименованиеОКВЭД2 <> СокрЛП(Выборка.НаименованиеОКВЭД2) Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.НаименованиеОКВЭД2 = НаименованиеОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет поиск организации по ИНН и КПП (если указан).
//
// Параметры:
//   ИНН - Строка - ИНН организации или индивидуального предпринимателя.
//   КПП - Строка - КПП организации.
//   БезОбособленныхПодразделений - Булево - исключает из поиска обособленные подразделения.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - ссылка на найденную организацию или ПустаяСсылка.
//
Функция НайтиОрганизацию(ИНН, КПП = Неопределено, БезОбособленныхПодразделений = Истина) Экспорт
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ОператорыЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	ОператорыЗапроса.Отбор.Добавить("Организации.ИНН = &ИНН");
	
	Если КПП <> Неопределено И Не ПустаяСтрока(КПП) Тогда
		ОператорыЗапроса.Отбор.Добавить("Организации.КПП = &КПП");
	КонецЕсли;
	
	Если БезОбособленныхПодразделений Тогда
		ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ОбособленноеПодразделение");
	КонецЕсли;
	
	ОператорыЗапроса.Отбор.Добавить("НЕ Организации.ПометкаУдаления");
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//-- Локализация

#Область ПодключаемыеКоманды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	
	Отчеты.УчетныеПолитикиОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника Организации.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Объект = Форма.Объект;
	
	Форма.РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	
	ЗаполнитьОписанияПараметров(Форма);
	УправлениеФормойНаСервере(Форма);
	//++ НЕ УТ
	ОрганизацииКлиентСерверЛокализация.УправлениеДокументооборотом(Форма);
	
	Форма.Элементы.ЗаявлениеНаПодключениеОткрытьМастер.Заголовок =
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(Форма, Объект.Ссылка, Отказ, СтандартнаяОбработка);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере форм элемента справочника Организации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  ТекущийОбъект - СправочникОбъект.Организации -
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ Локализация
	ПрочитатьРегистрацииВНалоговомОргане(ТекущийОбъект, Форма);
	//-- Локализация
	
КонецПроцедуры

// Обработчик события ОбработкаЗаполнения
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	ДанныеЗаполнения - Произвольный - данные заполнения
// 	СтандартнаяОбработка - Булево - признак стандартной обработки
//
Процедура ОбработкаЗаполненияОрганизации(ОбъектЗаписи, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И Не ДанныеЗаполнения.Свойство("ВалютаРегламентированногоУчета") Тогда
		ОбъектЗаписи.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриСозданииЧтенииНаСервере(Форма) Экспорт
	//++ Локализация
	
	Форма.НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагентыЛокализация.НастройкиПодключенияКСервисуИППЗаданы();
	Форма.ПравоИзмененияОбъекта = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
	
	ОрганизацииКлиентСерверЛокализация.УправлениеДоступностью(Форма);
	
	//-- Локализация
	
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере
// 
// Параметры:
// 	Отказ - Булево -
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	Если Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		Если Не ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане) Тогда
			ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку(Новый УникальныйИдентификатор);
		Иначе
			ТекущийОбъект.РегистрацияВНалоговомОргане = Форма.РегистрацияВНалоговомОргане;
		КонецЕсли;
		Если Не ЭтоАдресВременногоХранилища(Форма.ИсторияКПП) Тогда
			КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.РегистрацияВНалоговомОргане, "КПП");
			Если ЗначениеЗаполнено(КПП)
				И ТекущийОбъект.КПП <> КПП Тогда
				ТекущийОбъект.КПП = КПП;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВалютаРегламентированногоУчета) Тогда
		ТекущийОбъект.ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗаписиНаСервере
// 
// Параметры:
// 	Отказ - Булево -
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	Если Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		ЗаписатьРегистрациюВНалоговомОргане(Форма, ТекущийОбъект);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПроверкиВозможностиПримененияПСН(Объект, Отказ);
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("СтранаРегистрации");
	Если ПроверяемыйЭлемент = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("СтранаРегистрации");
	КонецЕсли;
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
		
	//++ НЕ УТ
	Если Объект.КрупнейшийНалогоплательщик 
		И (СтрДлина(Объект.КодНалоговогоОрганаПолучателя) <> 4 
		ИЛИ Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Объект.КодНалоговогоОрганаПолучателя)) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Код ИФНС должен содержать четыре цифры.';
					|en = 'IFTS code must contain 4 digits.'"), ,
				"Объект.КодНалоговогоОрганаПолучателя");
			Отказ = Истина;
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере
// 
// Параметры:
// 	ТекущийОбъект - СправочникОбъект.Организации -
// 	ПараметрыЗаписи - Структура -
// 	Форма - ФормаКлиентскогоПриложения -
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Управление формой на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма справочника Организации
Процедура УправлениеФормойНаСервере(Форма) Экспорт
	//++ Локализация
	ВидОрганизации =  Форма.ВидОрганизации;
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	Если Форма.ВидОрганизации <> "ОбособленноеПодразделение" Тогда
		Элементы.ГруппаОбщиеНастройкиОтступ.Видимость = Ложь;
	Иначе
		Элементы.ВалютаРегламентированногоУчета.Видимость = Ложь;
	КонецЕсли;
	
	УправлениеПредприятием = НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ГруппаОтступКрупнейшийНалогоплательщик",
				"Видимость", 
				УправлениеПредприятием И ВидОрганизации = "ЮридическоеЛицо");
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"КодНалоговогоОрганаПолучателя",
				"Доступность", 
				Объект.КрупнейшийНалогоплательщик);
		
	Если ВидОрганизации = "ОбособленноеПодразделение" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыОбособленногоПодразделения);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГоловнаяОрганизация",
																		"ТолькоПросмотр", ЗначениеЗаполнено(Объект.ГоловнаяОрганизация));
	ИначеЕсли ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыИндивидуальногоПредпринимателя);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницОсновныхКодов",
																		"ТекущаяСтраница", Элементы.ОсновныеКодыЮрЛица);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаСвидетельствоИП, СвидетельствоСерияНомер, СвидетельствоДатаВыдачи, ДекорацияРегНомерИП, ДекорацияДействуетСИП",
																	"Видимость", (ВидОрганизации = "ИндивидуальныйПредприниматель"));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию",
																	"Видимость", (ВидОрганизации = "ОбособленноеПодразделение"));
	
	Если ВидОрганизации = "ЮридическоеЛицо" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИНН",
																		"Маска", "9999999999");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОГРН",
																		"Маска", "9999999999999");
	КонецЕсли;
	
	Если НЕ УправлениеПредприятием Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
				Элементы, 
				"ПоказатьИсториюИзмененийРегистрацииВНалоговомОргане, ЛокализацияГруппаРегистрационныеДанные, ГруппаТерриториальныеУсловияГрафикРаботыОтступ, ГруппаКадровыйУчетИРасчетЗарплатыОтступ, ГруппаБухучетИВыплатаЗарплатыОтступ, ГруппаВоинскийУчетОтступ, ГруппаРезервыОтпусковОтступ",
				"Видимость", 
				Ложь);
	КонецЕсли;
	
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ПравоДоступа("Изменение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	//++ НЕ УТ
	ДоступностьКнопкиРегистрацииВНалоговомОргане = ДоступностьКнопкиРегистрацииВНалоговомОргане
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане); 
	//-- НЕ УТ
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГиперссылкаРегистрацияВНалоговыхОрганах",
																	"Доступность", ДоступностьКнопкиРегистрацииВНалоговомОргане);
	ДоступностьИзмененияУчетнойПолитикиИНалогов = 
								ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения)
	//++ НЕ УТ
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество)
	//-- НЕ УТ
								ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ГруппаУчетнаяПолитикаИДругиеНастройки",
																	"Доступность", ДоступностьИзмененияУчетнойПолитикиИНалогов, Истина);
																	
	
	//++ НЕ УТ
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
					"ГруппаОсновныеСредства",
					"Видимость",
					ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПараметрыНачисленияНалогаНаИмущество),
					Истина);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
					"ГруппаОсновныеСредства",
					"Доступность",
					ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПараметрыНачисленияНалогаНаИмущество),
					Истина);
	ОбновитьДанныеПоОсновнымСредствам(Форма);
	//-- НЕ УТ
	
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	
	//++ НЕ УТ
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВоинскийУчет") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаВоинскийУчетОтступ",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЛокализацияГруппаЗарплатаИКадры",
				"Видимость",
				Ложь);
	КонецЕсли;
	
	ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
			
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьКадровыйУчетИРасчетЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьКадровыйУчетИРасчетЗарплаты);
																	
	ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций)
			ИЛИ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьБухучетИВыплатуЗарплаты",
																	"Доступность", ДоступностьКнопкиОткрытьБухучетИВыплатуЗарплаты);
	
	ДоступностьКнопкиОткрытьВоинскийУчет = 
			ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВоинскийУчет);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьВоинскийУчет",
																	"Доступность", ДоступностьКнопкиОткрытьВоинскийУчет);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ЕстьДоступКЭлектронномуДокументообороту = КонтекстЭДОСервер <> Неопределено;

	ЕстьДоступКРегиструНастройкиОбменаФСС	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС);
	ЕстьДоступКРегиструНастройкиОбменаФСРАР	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСРАР);
	ЕстьДоступКРегиструНастройкиОбменаРПН	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаРПН);
	ЕстьДоступКРегиструНастройкиОбменаФТС	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФТС);
	
	Элементы.ВидОбменаСКонтролирующимиОрганамиПредставление.Доступность = 
		НЕ ТолькоПросмотр 
		И ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
		
	Элементы.ОбменФСС.Доступность = 
		НЕ ТолькоПросмотр 
		И ЕстьДоступКРегиструНастройкиОбменаФСС
		И ЕстьДоступКЭлектронномуДокументообороту;
		
	Элементы.ОбменРАР.Доступность = 
		НЕ ТолькоПросмотр 
		И ЕстьДоступКРегиструНастройкиОбменаФСРАР
		И ЕстьДоступКЭлектронномуДокументообороту;
		
	Элементы.ОбменРПН.Доступность =
		НЕ ТолькоПросмотр
		И ЕстьДоступКРегиструНастройкиОбменаРПН
		И ЕстьДоступКЭлектронномуДокументообороту;
	
	Элементы.ОбменФТС.Доступность =
		НЕ ТолькоПросмотр
		И ЕстьДоступКРегиструНастройкиОбменаФТС
		И ЕстьДоступКЭлектронномуДокументообороту;
	
	Элементы.ЗаявлениеНаПодключениеОткрытьМастер.Доступность = ЕстьДоступКЭлектронномуДокументообороту;
	Элементы.ЗаявлениеНаПодключениеОткрытьСписок.Доступность = ЕстьДоступКЭлектронномуДокументообороту;
	//-- НЕ УТ
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"ГруппаПроверки",
			"Доступность", 
			ПравоДоступа("Изменение", Метаданные.Справочники.Организации));
			
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ЛокализацияГруппаРегистрацияВНалоговыхОрганах",
				"Видимость",
				Ложь);
	КонецЕсли;

	НастроитьТаблицуПримененияЕНВД(Форма);
	НастроитьТаблицуПримененияПСН(Форма);
	
	НеУправленческаяОрганизация = Объект.Ссылка <> Справочники.Организации.УправленческаяОрганизация;
	Элементы.ВидОрганизации.Видимость                          = НеУправленческаяОрганизация;
	Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.Видимость = НеУправленческаяОрганизация;
	Элементы.ИНН.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.ЗаполнитьПоИНН.Видимость                          = НеУправленческаяОрганизация;
	Элементы.КПП.Видимость                                     = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД.Видимость                                = НеУправленческаяОрганизация;
	Элементы.КодОКВЭД2.Видимость                               = НеУправленческаяОрганизация;
	Элементы.КодПоОКПО.Видимость                               = НеУправленческаяОрганизация;
	Элементы.ОГРН.Видимость                                    = НеУправленческаяОрганизация;
	Элементы.ДатаРегистрации.Видимость                         = НеУправленческаяОрганизация;
	Элементы.ОтступКрупнейшийНалогоплательщик.Видимость        = НеУправленческаяОрганизация;
	Элементы.КрупнейшийНалогоплательщик.Видимость              = НеУправленческаяОрганизация;
	Элементы.КодНалоговогоОрганаПолучателя.Видимость           = НеУправленческаяОрганизация;
	Элементы.ИсторияКППЮрЛица.Видимость                        = НеУправленческаяОрганизация;
	Элементы.ИсторияКППОбособленногоПодразделения.Видимость    = НеУправленческаяОрганизация;
	Элементы.ФормаРеквизиты.Видимость                          = НеУправленческаяОрганизация;
	ВидимостьКомандПомощникаКопированияНастроек = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") 
												И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета);
												
	Элементы.ЛокализацияГруппаКопированиеНастроек.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаИз.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	Элементы.СкопироватьНастройкиУчетаВсе.Видимость = ВидимостьКомандПомощникаКопированияНастроек;
	
	НастроитьПредставлениеИсторииКПП(Форма);
	//-- Локализация
	
КонецПроцедуры

Процедура УчетнаяПолитикаПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	НастроитьТаблицуПримененияЕНВД(Форма);
	НастроитьТаблицуПримененияПСН(Форма);
	УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	//-- Локализация
КонецПроцедуры

// При окончании изменения реквизита.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента
//  Форма - ФормаКлиентскогоПриложения - Форма справочника Организации
//  ПараметрыОбработки - Структура - Параметры обработки
Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	Если ИмяЭлемента = "ВидОрганизации" Тогда
		ИзменитьВидОрганизацииНаСервере(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "ГоловнаяОрганизация" Тогда
		ЗаполнитьОписаниеДействующихПараметровУчетныхПолитикПриИзмененииГоловнойОрганизации(Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Выполнить команду локализации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ИмяКоманды - Произвольный - Имя команды
//  ПараметрыОбработки - Структура - Параметры обработки
Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация	
	Если ИмяКоманды = "ЗаполнитьОписаниеРегистрацииВНалоговомОргане"
		//++ НЕ УТ
		ИЛИ ИмяКоманды = "ПроверитьОбменФСС"
		ИЛИ ИмяКоманды = "ПроверитьОбменСЭДОФСС"
		ИЛИ ИмяКоманды = "ПроверитьОбменРПН"
		ИЛИ ИмяКоманды = "ПроверитьОбменФТС"
		ИЛИ ИмяКоманды = "ПроверитьОбменРПН"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеСФР"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеПФР"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеФСС"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеТФОМС"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеКлассификаторов"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеПараметровРасчетаЗарплаты"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеИностраннойОрганизации"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеКодовДО"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеБухучетаИВыплатыЗарплат"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты"
		ИЛИ ИмяКоманды = "ЗаполнитьОписаниеВоинскогоУчета"
		ИЛИ ИмяКоманды = "ЗаполнитьНастройкиРасчетаРезервовОтпусков"
		//-- НЕ УТ
	Тогда
		ЗаполнитьОписанияПараметров(Форма, ИмяКоманды);
	КонецЕсли;
	Если ИмяКоманды = "ЗаполнитьОписанияПараметров" Тогда
		ЗаполнитьОписанияПараметров(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ВосстановитьДанныеРегистрацийВНалоговыхОрганах" Тогда
		ВосстановитьДанныеРегистрацийВНалоговыхОрганах(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ВосстановитьДанныеРегистрацийВПФР" Тогда
		ВосстановитьДанныеРегистрацийВПФР(Форма);
	КонецЕсли;
	//++ НЕ УТ
	Если ИмяКоманды = "ОбновитьДанныеПоОсновнымСредствам" Тогда
		ОбновитьДанныеПоОсновнымСредствам(Форма);
	КонецЕсли;
	//-- НЕ УТ
	Если ИмяКоманды = "УстановитьСвойстваУчетнойПолитикиИНалогов" Тогда
		УстановитьСвойстваУчетнойПолитикиИНалогов(Форма);
	КонецЕсли;
	Если ИмяКоманды = "НастроитьТаблицуПримененияЕНВД" Тогда
		НастроитьТаблицуПримененияЕНВД(Форма);
	КонецЕсли;
	Если ИмяКоманды = "НастроитьТаблицуПримененияПСН" Тогда
		НастроитьТаблицуПримененияПСН(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ЗаписатьРегистрациюВНалоговомОргане" Тогда
		ЗаписатьРегистрациюВНалоговомОргане(Форма);
	КонецЕсли;
	Если ИмяКоманды = "ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования" Тогда
		ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования(ПараметрыОбработки, Форма);
	КонецЕсли;
	Если ИмяКоманды = "ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане" Тогда
		ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане(ПараметрыОбработки, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиМодуляОбъекта


// Обработчик ПередЗаписью
//
// Параметры:
// 	Объект - СправочникОбъект.Организации - 
// 	Отказ - Булево - 
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Объект.ЕстьОбособленныеПодразделения = Истина;
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Обработчик события ПриЗаписи
// 
// Параметры:
// 	ОбъектЗаписи - СправочникОбъект.Организации - записываемый справочник
// 	Отказ - Булево - Признак отказа
//
Процедура ПриЗаписиОрганизации(ОбъектЗаписи, Отказ) Экспорт 
	//++ Локализация
	
	//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(ОбъектЗаписи, Отказ);
	//-- НЕ УТ
	
	Если ЗначениеЗаполнено(ОбъектЗаписи.РегистрацияВНалоговомОргане)
		И ОбъектЗаписи.КПП <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЗаписи.РегистрацияВНалоговомОргане, "КПП") Тогда
		РегистрацияВНалоговомОрганеОбъект = ОбъектЗаписи.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		Если РегистрацияВНалоговомОрганеОбъект <> Неопределено Тогда 
			РегистрацияВНалоговомОрганеОбъект.КПП = ОбъектЗаписи.КПП;
			РегистрацияВНалоговомОрганеОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СинхронизироватьНастройкиОбособленныхПодразделений(ОбъектЗаписи, Отказ);
	//-- Локализация
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ОрганизацияОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	Перем ТекстСообщения;
	
	Если ЗначениеЗаполнено(ОрганизацияОбъект.ОГРН)
	 И Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОрганизацияОбъект.ОГРН,
		ПартнерыИКонтрагенты.ЭтоЮрЛицо(ОрганизацияОбъект.ЮрФизЛицо),
		ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОрганизацияОбъект, "ОГРН",, Отказ);
		
	КонецЕсли;
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("ВалютаРегламентированногоУчета");
	Если ПроверяемыйЭлемент <> Неопределено Тогда
		 ПроверяемыеРеквизиты.Удалить(ПроверяемыйЭлемент);
	КонецЕсли;
	
	ПроверяемыйЭлемент = ПроверяемыеРеквизиты.Найти("СтранаРегистрации");
	Если ПроверяемыйЭлемент = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("СтранаРегистрации");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаБанковскогоИКазначейскогоСопровожденияГосконтрактов") Тогда
		
		Если Не ПустаяСтрока(ОрганизацияОбъект.КодУБП)
			И СтрДлина(ОрганизацияОбъект.КодУБП) <> 8 Тогда
		
			ТекстСообщения = НСтр("ru = 'Код участника/неучастника бюджетного процесса должен состоять из 8 символов.';
									|en = 'Code of a participant (non-participant) of the budget process must consist of 8 characters.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОрганизацияОбъект, , "Объект.КодУБП", Отказ);
		
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОрганизацияОбъект.КодУБП)
			И Не СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ОрганизацияОбъект.КодУБП, Ложь, "0123456789") Тогда
			
			ТекстСообщения = НСтр("ru = 'В поле ""Код УБП (НУБП)"" вводятся символы 36-ричной системы счисления.';
									|en = 'Enter characters of the hexatrigesimal numeral system in the ""Code of budget process participant (non-participant)"" field.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ОрганизацияОбъект, , "Объект.КодУБП", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеМетоды

Процедура УстановитьПараметрыЗапросаПриОбработкеПолученияДанныхВыбора(Параметры, Запрос) Экспорт

	//++ Локализация
	
	//++ НЕ УТ
	Если НЕ ЗначениеЗаполнено(Запрос.Параметры.РежимВыбораВзаимосвязанныхОрганизаций)
		И НЕ Параметры.Свойство("РежимВыбораВзаимосвязанныхОрганизаций") 
		И Параметры.Свойство("ХозяйственнаяОперация")
		И (Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперацииРеглУчет.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
			ИЛИ Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
			ИЛИ Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс) Тогда
			
		Запрос.УстановитьПараметр("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные");
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьСоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик(СоответствиеЭлементов) Экспорт
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложенияОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ГруппаНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОписаниеНастройкиСистемыНалогообложения");
	МассивЭлементов.Добавить("ОткрытьНастройкиСистемыНалогообложения");

	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиСистемыНалогообложения");
		
	СоответствиеЭлементов.Вставить("НастройкиСистемыНалогообложения", СтруктураЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчетаОтступ");
	МассивЭлементов.Добавить("ОтступУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ГруппаУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОписаниеУчетнаяПолитикаБухУчета");
	МассивЭлементов.Добавить("ОткрытьУчетнаяПолитикаБухУчета");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеУчетнаяПолитикаБухУчета");
	
	СоответствиеЭлементов.Вставить("УчетнаяПолитикаБухУчета", СтруктураЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыльОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаНалогаНаПрибыль");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаНалогаНаПрибыль");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиУчетаНалогаНаПрибыль");
		
	СоответствиеЭлементов.Вставить("НастройкиУчетаНалогаНаПрибыль", СтруктураЭлементов);

	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаУСНОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаУСН");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаУСН");

	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиУчетаУСН");
		
	СоответствиеЭлементов.Вставить("НастройкиУчетаУСН", СтруктураЭлементов);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаИмущественныеНалогиОтступ");
	МассивЭлементов.Добавить("ОтступИмущественныеНалоги");
	МассивЭлементов.Добавить("ГруппаИмущественныеНалоги");
	МассивЭлементов.Добавить("ОписаниеСтавкиНалогаНаИмущество");
	МассивЭлементов.Добавить("ОткрытьСтавкаНалогаНаИмущество");
	МассивЭлементов.Добавить("ГруппаОсновныеСредства");
	МассивЭлементов.Добавить("ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства");
	МассивЭлементов.Добавить("УстановитьПорядокУплатыНалоговНаМестах");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеСтавкиНалогаНаИмущество");
	
	СоответствиеЭлементов.Вставить("СтавкиНалогаНаИмущество", СтруктураЭлементов); 
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНДСПриУСН");
	МассивЭлементов.Добавить("ОписаниеНастройкиУчетаНДСПриУСН");
	МассивЭлементов.Добавить("ОткрытьНастройкиУчетаНДСПриУСН");
	МассивЭлементов.Добавить("ГруппаНастройкиУчетаНДСПриУСНОтступ");
	МассивЭлементов.Добавить("ОтступНастройкиУчетаНДСПриУСН");
	
	СтруктураЭлементов = Новый Структура();
	СтруктураЭлементов.Вставить("МассивЭлементов", МассивЭлементов);
	СтруктураЭлементов.Вставить("ЭлементОписание", "ОписаниеНастройкиУчетаНДСПриУСН");
	
	СоответствиеЭлементов.Вставить("НастройкиУчетаНДСПриУСН", СтруктураЭлементов);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеДействующихПараметровУчетныхПолитикПриИзмененииГоловнойОрганизации(Форма, ИмяРегистра = "") Экспорт
	СоответствиеЭлементов = Справочники.Организации.СоответствиеЭлементовФормыПараметрамНалоговУчетныхПолитик();
	НастройкиНалоговУчетныхПолитик.УправлениеВидимостьюЭлементовУчетныхПолитик(Форма, СоответствиеЭлементов, Форма.Объект.ГоловнаяОрганизация);
	НастройкиНалоговУчетныхПолитик.ЗаполнитьОписаниеДействующихПараметров(Форма, Форма.Объект.ГоловнаяОрганизация, ИмяРегистра);
	ОрганизацииЛокализация.УчетнаяПолитикаПриИзмененииСервер(Форма);
КонецПроцедуры

//++ Локализация

Функция ИзменитьИНН(СсылкаНаОбъект) Экспорт
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИНН");
	Возврат ИНН
КонецФункции

Функция РегистрацииВНалоговыхОрганахВХранилище(ОбъектСсылка, УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Подразделение,
	|	РегистрацииВНалоговомОргане.Организация,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
	|		, Организация = &Организация) КАК РегистрацииВНалоговомОргане
	|;
	//++ НЕ УТ
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.Период,
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница.Владелец = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.Период,
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	//-- НЕ УТ
	|";
	
	Запрос.УстановитьПараметр("Организация", ОбъектСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Регистрации = Новый Структура();
	
	Регистрации.Вставить("РегистрацииВНалоговомОргане",                     Результат[0].Выгрузить());
	
	//++ НЕ УТ
	Регистрации.Вставить("ИсторияРегистрацийВНалоговомОрганеПодразделения", Результат[1].Выгрузить());
	Регистрации.Вставить("ИсторияРегистрацийВНалоговомОрганеОрганизации",   Результат[2].Выгрузить());
	Регистрации.Вставить("ПодразделенияОрганизацийИсходная",                Результат[3].Выгрузить());
	//-- НЕ УТ
	
	РегистрацииСохраненныеЗначения = ПоместитьВоВременноеХранилище(Регистрации, УникальныйИдентификатор);
	Возврат РегистрацииСохраненныеЗначения
	
КонецФункции
//-- Локализация

Функция ВозможнаРегистрацияДляОбособленныхПодразделений() Экспорт
	//++ Локализация
	Возврат Справочники.РегистрацииВНалоговомОргане.ВозможнаРегистрацияДляОбособленныхПодразделений();
	//-- Локализация
	Возврат Ложь
КонецФункции

//++ НЕ УТ

Функция РегистрацииПФРВХранилище(ОбъектСсылка, УникальныйИдентификатор) Экспорт
	ПФРСохраненныеЗначения = Неопределено;
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсторияРегистрацийВОрганеПФР.Период,
	|	ИсторияРегистрацийВОрганеПФР.Организация,
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР,
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерСФР
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	|ГДЕ
	|	ИсторияРегистрацийВОрганеПФР.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", ОбъектСсылка);
	
	ПФРСохраненныеЗначения = ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), УникальныйИдентификатор);
	//-- Локализация
	Возврат ПФРСохраненныеЗначения
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные

Процедура ИзменитьВидОрганизацииНаСервере(Форма)
	Объект = Форма.Объект;
	Если Форма.ВидОрганизации = "ЮридическоеЛицо" Тогда
		Объект.СвидетельствоДатаВыдачи = Неопределено;
		Объект.СвидетельствоСерияНомер = "";
	ИначеЕсли Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Объект.ИНН = "";
		Объект.КПП = "";
	ИначеЕсли Форма.ВидОрганизации = "ОбособленноеПодразделение" Тогда
		Объект.СвидетельствоДатаВыдачи = Неопределено;
		Объект.СвидетельствоСерияНомер = "";
	Иначе
		ВызватьИсключение Нстр("ru = 'Произошла ошибка при изменении типа организации. Обратитесь к администратору.';
								|en = 'An error occurred when changing the company type. Please contact the administrator.'");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура НастроитьТаблицуПримененияЕНВД(Форма)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРозничныеПродажи")
		И Форма.ВидОрганизации <> "ОбособленноеПодразделение" Тогда
	
		Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Форма.Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
		ИначеЕсли НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД) Тогда
			Форма.Элементы.ГруппаОтступПрименениеЕНВД.Доступность = Ложь;
			ОбновитьСсылкуПримененияЕНВД(Форма);
		Иначе
			ОбновитьСсылкуПримененияЕНВД(Форма);
		КонецЕсли;

	Иначе
		Форма.Элементы.ГруппаОтступПрименениеЕНВД.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСсылкуПримененияЕНВД(Форма)
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПримененияЕНВД);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Склады.Ссылка), 0) КАК КоличествоСкладов,
	|	СУММА(ВЫБОР
	|		КОГДА ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД = ИСТИНА ТОГДА
	|			1
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ) КАК КоличествоСкладовЕНВД
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПримененияЕНВД.СрезПоследних(&ТекущаяДата, Организация = &ГоловнаяОрганизация) КАК ПримененияЕНВД
	|		ПО Склады.Ссылка = ПримененияЕНВД.Склад
	|ГДЕ
	|	Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)");
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Форма.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЕстьПравоНаИзменение Тогда
			ТекстоваяСтрока = НСтр("ru = 'Настроить применение ЕНВД (%КоличествоСкладовЕНВД% из %КоличествоСкладов%)';
									|en = 'Set up UTII application (%КоличествоСкладовЕНВД% out of %КоличествоСкладов%)'");
		Иначе
			ТекстоваяСтрока = НСтр("ru = 'Просмотреть применение ЕНВД (%КоличествоСкладов%)';
									|en = 'View UTII application (%КоличествоСкладов%)'");
		КонецЕсли;
		ТекстоваяСтрока = СтрЗаменить(ТекстоваяСтрока, "%КоличествоСкладов%", Выборка.КоличествоСкладов);
		ТекстоваяСтрока = СтрЗаменить(ТекстоваяСтрока, "%КоличествоСкладовЕНВД%", Выборка.КоличествоСкладовЕНВД);
		Форма.СтрокаЕНВД = Новый ФорматированнаяСтрока(ТекстоваяСтрока, , , , "НастроитьТаблицуПримененияЕНВД");
	Иначе
		Форма.СтрокаЕНВД = Новый ФорматированнаяСтрока(НСтр("ru = 'Нет информации о применении ЕНВД.';
															|en = 'No data of UTII application.'"));
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьТаблицуПримененияПСН(Форма)
	
	Организация = Форма.Объект.Ссылка;
		
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель"
		И НастройкиНалоговУчетныхПолитикЛокализация.ОрганизацияПрименяетПатенты(Организация) Тогда
		
		СписокПатентовОрганизации = Справочники.Патенты.ПолучитьПатентыПоОрганизации(Организация, Неопределено);
		СписокДействующихПатентовОрганизации = Справочники.Патенты.ПолучитьДействующиеПатентыНаДату(Организация, Неопределено);
		СтрокаПСН = СтрШаблон(НСтр("ru = 'Патенты (%1 из %2)';
									|en = 'Patents (%1 of %2)'"), СписокДействующихПатентовОрганизации.Количество(), СписокПатентовОрганизации.Количество());
		Форма.СтрокаПСН = Новый ФорматированнаяСтрока(СтрокаПСН, , , , "НастроитьТаблицуПримененияПСН");
		
	Иначе
		Форма.СтрокаПСН = Новый ФорматированнаяСтрока(НСтр("ru = 'Нет информации о применении ПСН.';
															|en = 'No data of PTS application.'"));
	КонецЕсли;
	
КонецПроцедуры


Процедура СинхронизироватьНастройкиОбособленныхПодразделений(ОбъектЗаписи, Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", ОбъектЗаписи.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось заблокировать %Элемент%. %ОписаниеОшибки%';
								|en = 'Cannot lock %Элемент%.%ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки;
			
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ИНН = ОбъектЗаписи.ИНН;
		Объект.ЮрФизЛицо = ОбъектЗаписи.ЮрФизЛицо;
		Объект.КрупнейшийНалогоплательщик = ОбъектЗаписи.КрупнейшийНалогоплательщик;
		Объект.КодНалоговогоОрганаПолучателя = ОбъектЗаписи.КодНалоговогоОрганаПолучателя;
		
		Попытка
			
			Объект.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось записать %Элемент%. %ОписаниеОшибки%';
								|en = 'Cannot save %Элемент%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
		КонецПопытки
		
	КонецЦикла;
	
	Если ОбъектЗаписи.ОбособленноеПодразделение Тогда
		
		// Синхронизация настроек ЕНВД
		
		НастройкиГоловнойОрганизации = РегистрыСведений.ПримененияЕНВД.СоздатьНаборЗаписей();
		НастройкиГоловнойОрганизации.Отбор.Организация.Установить(ОбъектЗаписи.ГоловнаяОрганизация);
		НастройкиГоловнойОрганизации.Прочитать();
		
		НастройкиОбособленногоПодразделения = НастройкиГоловнойОрганизации;
		НастройкиОбособленногоПодразделения.Отбор.Организация.Установить(ОбъектЗаписи.Ссылка);
		Для Каждого НастройкаОбособленногоПодразделения Из НастройкиОбособленногоПодразделения Цикл
			НастройкаОбособленногоПодразделения.Организация = ОбъектЗаписи.Ссылка;
		КонецЦикла;
		
		Попытка
			
			НастройкиОбособленногоПодразделения.ДополнительныеСвойства.Вставить("СинхронизацияНастроек", Истина);
			НастройкиОбособленногоПодразделения.Записать();
			
		Исключение
			
			ТекстОшибки = НСтр("ru = 'Не удалось изменить настройки применения ЕНВД. %ОписаниеОшибки%';
								|en = 'Cannot change settings of UTII application. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьДанныеРегистрацийВНалоговыхОрганах(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.РегистрацииСохраненныеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	Регистрации = ПолучитьИзВременногоХранилища(Форма.РегистрацииСохраненныеЗначения);
	
	//++ НЕ УТ

	// восстановление регистрации подразделений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТИсходная
	|ИЗ
	|	&ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТКонечная
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходная.Подразделение,
	|	ВТИсходная.ОбособленноеПодразделение,
	|	ВТИсходная.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТИсходная КАК ВТИсходная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКонечная КАК ВТКонечная
	|		ПО ВТИсходная.Подразделение = ВТКонечная.Подразделение
	|ГДЕ
	|	(ВТИсходная.ОбособленноеПодразделение <> ВТКонечная.ОбособленноеПодразделение
	|			ИЛИ ВТИсходная.РегистрацияВНалоговомОргане <> ВТКонечная.РегистрацияВНалоговомОргане)");
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	Запрос.УстановитьПараметр("ПодразделенияОрганизаций", Регистрации.ПодразделенияОрганизацийИсходная);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПодразделениеОбъект = Выборка.Подразделение.ПолучитьОбъект();
		ПодразделениеОбъект.ОбособленноеПодразделение = Выборка.ОбособленноеПодразделение;
		ПодразделениеОбъект.РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
		
		ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
		ПодразделениеОбъект.Записать();
		
	КонецЦикла;
	
	Если Регистрации.ИсторияРегистрацийВНалоговомОрганеПодразделения.Количество() = 0 Тогда
		
		ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(Форма.Объект.Ссылка);
		
		Если ПодчиненныеСтруктурныеЕдиницы.Получить(Форма.Объект.Ссылка) <> Неопределено Тогда
			
			МассивПодчиненныхСтруктурныхЕдиниц = ПодчиненныеСтруктурныеЕдиницы.Получить(Форма.Объект.Ссылка);
			
			Для Каждого Строка Из МассивПодчиненныхСтруктурныхЕдиниц Цикл
				НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Строка);
				НаборЗаписей.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Строка Из Регистрации.ИсторияРегистрацийВНалоговомОрганеПодразделения Цикл
			
			НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Строка.СтруктурнаяЕдиница);
			НаборЗаписей.Очистить();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Форма.Объект.Ссылка);
	НаборЗаписей.Загрузить(Регистрации.ИсторияРегистрацийВНалоговомОрганеОрганизации);
	НаборЗаписей.Записать();
		
	//-- НЕ УТ
	Форма.Объект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Форма.Объект.Ссылка);
	Форма.РегистрацияВНалоговомОргане = Форма.Объект.РегистрацияВНалоговомОргане;
	ЗаполнитьОписанияПараметров(Форма, "ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
КонецПроцедуры

Процедура ВосстановитьДанныеРегистрацийВПФР(Форма)
	
	//++ НЕ УТ
	Регистрации = ПолучитьИзВременногоХранилища(Форма.ПФРСохраненныеЗначения);
	
	НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Форма.Объект.Ссылка);
	
	Для Каждого Строка Из Регистрации Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	//-- НЕ УТ
	
	Возврат; // в УТ11 не используется
	
КонецПроцедуры

//++ НЕ УТ

Процедура ОбновитьДанныеПоОсновнымСредствам(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Организации.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ПараметрыНачисленияНалогаНаИмущество
	|		ПО Организации.Ссылка = ПараметрыНачисленияНалогаНаИмущество.Организация
	|			И ПараметрыНачисленияНалогаНаИмущество.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	Организации.Ссылка = &Организация");
	
	ПериодСтавкаНалогаНаИмущество = ?(ЗначениеЗаполнено(Форма.Объект.ДатаРегистрации),
									  НачалоДня(Форма.Объект.ДатаРегистрации),
									  НачалоДня(ТекущаяДатаСеанса())); 
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодСтавкаНалогаНаИмущество", ПериодСтавкаНалогаНаИмущество);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтавкаНалогаНаИмуществоОсновныеСредства = НСтр("ru = '%Количество% с особым порядком налогообложения';
														|en = '%Количество% with special taxation procedure '");
		СтрокаСКоличеством = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
				Результат.Количество, 
				НСтр("ru = 'объект,объекта,объектов';
					|en = 'object,object,objects'"));
		СтавкаНалогаНаИмуществоОсновныеСредства = СтрЗаменить(СтавкаНалогаНаИмуществоОсновныеСредства, "%Количество%", СтрокаСКоличеством);
		Форма.Элементы.ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства.Заголовок = СтавкаНалогаНаИмуществоОсновныеСредства;
		
	КонецЦикла;
	
КонецПроцедуры

//-- НЕ УТ

Процедура УстановитьСвойстваУчетнойПолитикиИНалогов(Форма)
	Элементы = Форма.Элементы;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.ГруппаИмущественныеНалогиОтступ.Видимость = Ложь;
		Элементы.ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства.Видимость = Ложь;
		Элементы.УстановитьПорядокУплатыНалоговНаМестах.Видимость = Ложь;
	КонецЕсли;
	
	ДействующиеНалоги = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиСистемыНалогообложения",
		Форма.Объект.Ссылка);
	ПрименяетсяЕНВД = Ложь;
	ПрименяетсяПСН = Ложь;
	Если ЗначениеЗаполнено(ДействующиеНалоги) Тогда
		ПрименяетсяЕНВД = ДействующиеНалоги.ПрименяетсяЕНВД;
		ПрименяетсяПСН = ДействующиеНалоги.ПрименяетсяПСН;
	КонецЕсли;
	Элементы.ГруппаПеременнойДоступности.Доступность  		  = (Форма.ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ЛокализацияГруппаКопированиеНастроек.Доступность = (Форма.ВидОрганизации <> "ОбособленноеПодразделение");
	Элементы.ДекорацияПредупреждениеЕНВД.Видимость 	  		  = (Форма.ВидОрганизации = "ОбособленноеПодразделение") И ПрименяетсяЕНВД;
	Элементы.ДекорацияПредупреждениеУчетнаяПолитика.Видимость = (Форма.ВидОрганизации = "ОбособленноеПодразделение");
	Элементы.ГруппаОтступПрименениеЕНВД.Видимость 	  		  = ПрименяетсяЕНВД;
	Элементы.ГруппаОтступПрименениеПСН.Видимость              = (Форма.ВидОрганизации = "ИндивидуальныйПредприниматель") И ПрименяетсяПСН;
	
//++ НЕ УТ
	Если Элементы.ГруппаИмущественныеНалогиОтступ.Видимость
		И Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество) Тогда
		Элементы.ГруппаИмущественныеНалогиОтступ.Видимость = Ложь;
	КонецЕсли;
	Элементы.ГруппаИмущественныеНалогиОтступ.Доступность = ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.СтавкиНалогаНаИмущество);

//-- НЕ УТ

КонецПроцедуры

#Область ЗаполнениеОписаний

Процедура ЗаполнитьОписанияПараметров(Форма, ИмяОписания = "")
	
	//++ НЕ УТ
	ЗаполнитьОписаниеСФР(Форма);
	ЗаполнитьОписаниеПФР(Форма);
	ЗаполнитьОписаниеФСС(Форма);
	ЗаполнитьОписаниеТФОМС(Форма);
	ЗаполнитьОписаниеКлассификаторов(Форма);
	ЗаполнитьОписаниеПараметровРасчетаЗарплаты(Форма);
	ЗаполнитьОписаниеИностраннойОрганизации(Форма);
	ЗаполнитьОписаниеКодовДО(Форма);
	ПроверитьОбменФСС(Форма);
	ПроверитьОбменСЭДОФСС(Форма);
	ПроверитьОбменРАР(Форма);
	ПроверитьОбменРПН(Форма);
	ПроверитьОбменФТС(Форма);
	ЗаполнитьОписаниеБухучетаИВыплатыЗарплат(Форма);
	ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты(Форма);
	ЗаполнитьОписаниеВоинскогоУчета(Форма);
	ЗаполнитьНастройкиРасчетаРезервовОтпусков(Форма);
	//-- НЕ УТ
	ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма);
	
КонецПроцедуры

//++ НЕ УТ

Процедура ЗаполнитьОписаниеСФР(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеСФР" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОписания = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерСФР%.';
							|en = 'Registration number: %РегистрационныйНомерСФР%.'");
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РегистрационныйНомерСФР%",
		?(ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерСФР),
			Форма.Объект.РегистрационныйНомерСФР,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	
	Форма.Элементы.ДекорацияОписаниеРеквизитовСФР.Заголовок = СтрокаОписания;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПФР(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеПФР" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		СтрокаОписания = НСтр("ru = 'Регистрационный номер (за сотрудников): %РегистрационныйНомерПФР%. Код территориального органа: %КодОрганаПФР%. Территориальный орган: %ТерриториальныйОрганПФР%.
									|Регистрационный номер (за себя): %ИПРегистрационныйНомерПФР%.';
									|en = 'Registration number (for employees): %РегистрационныйНомерПФР%. Local authority code: %КодОрганаПФР%. Local authority: %ТерриториальныйОрганПФР%.
									|Registration number (for yourself): %ИПРегистрационныйНомерПФР%.'");
	Иначе
		СтрокаОписания = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерПФР%. Код территориального органа: %КодОрганаПФР%. Территориальный орган: %ТерриториальныйОрганПФР%.';
								|en = 'Registration number: %РегистрационныйНомерПФР%. Local authority code: %КодОрганаПФР%. Local authority: %ТерриториальныйОрганПФР%.'");
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РегистрационныйНомерПФР%",
		?(ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерПФР),
			Форма.Объект.РегистрационныйНомерПФР,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%КодОрганаПФР%",
		?(ЗначениеЗаполнено(Форма.Объект.КодОрганаПФР),
			Форма.Объект.КодОрганаПФР,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныйОрганПФР%",
		?(ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаПФР),
			Форма.Объект.НаименованиеТерриториальногоОрганаПФР,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИПРегистрационныйНомерПФР%",
		?(ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерПФР),
			Форма.Объект.ИПРегистрационныйНомерПФР,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	
	Форма.Элементы.ДекорацияОписаниеРеквизитовПФР.Заголовок = СтрокаОписания;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеФСС(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеФСС" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		СтрокаОписания = НСтр("ru = 'Регистрационный номер (за сотрудников): %РегистрационныйНомерФСС%. Код подчиненности: %КодПодчиненностиФСС%. Территориальный орган: %ТерриториальныйОрганФСС%.
									|Регистрационный номер (за себя): %ИПРегистрационныйНомерФСС%. Код подчиненности: %ИПКодПодчиненностиФСС%.';
									|en = 'Registration number (for employees): %РегистрационныйНомерФСС%. Subordination code: %КодПодчиненностиФСС%. Local authority: %ТерриториальныйОрганФСС%.
									|Registration number (for yourself): %ИПРегистрационныйНомерФСС%. Subordination code: %ИПКодПодчиненностиФСС%.'");
	ИначеЕсли Форма.ВидОрганизации = "ОбособленноеПодразделение" Тогда
		СтрокаОписания = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерФСС%. Код подчиненности: %КодПодчиненностиФСС%. Территориальный орган: %ТерриториальныйОрганФСС%.
									|Дополнительный код: %ДополнительныйКодФСС%.';
									|en = 'Registration number: %РегистрационныйНомерФСС%. Subordination code: %КодПодчиненностиФСС%. Local authority: %ТерриториальныйОрганФСС%.
									|Additional code: %ДополнительныйКодФСС%.'");
	Иначе
		СтрокаОписания = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерФСС%. Код подчиненности: %КодПодчиненностиФСС%. Территориальный орган: %ТерриториальныйОрганФСС%.';
								|en = 'Registration number: %РегистрационныйНомерФСС%. Subordination code: %КодПодчиненностиФСС%. Local authority: %ТерриториальныйОрганФСС%.'");
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РегистрационныйНомерФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерФСС),
			Форма.Объект.РегистрационныйНомерФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%КодПодчиненностиФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.КодПодчиненностиФСС),
			Форма.Объект.КодПодчиненностиФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныйОрганФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаФСС),
			Форма.Объект.НаименованиеТерриториальногоОрганаФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДополнительныйКодФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.ДополнительныйКодФСС),
			Форма.Объект.ДополнительныйКодФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИПРегистрационныйНомерФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерФСС),
			Форма.Объект.ИПРегистрационныйНомерФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИПКодПодчиненностиФСС%",
		?(ЗначениеЗаполнено(Форма.Объект.ИПКодПодчиненностиФСС),
			Форма.Объект.ИПКодПодчиненностиФСС,
			НСтр("ru = 'не указано';
				|en = 'not specified'")));
	
	Форма.Элементы.ДекорацияОписаниеРеквизитовФСС.Заголовок = СтрокаОписания;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеТФОМС(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеТФОМС" Тогда
		
		Возврат
		
	КонецЕсли;
	СтрокаОписанияРеквизитовТФОМС = НСтр("ru = 'Регистрационный номер: %РегистрационныйНомерТФОМС%.%ИПРегистрационныйНомерТФОМС%';
										|en = 'Registration number: %РегистрационныйНомерТФОМС%.%ИПРегистрационныйНомерТФОМС%'");
		
	СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%РегистрационныйНомерТФОМС%",   
												?(ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерТФОМС), 
																						Форма.Объект.РегистрационныйНомерТФОМС, НСтр("ru = 'не указано';
																																	|en = 'not specified'")));
	
																						
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%ИПРегистрационныйНомерТФОМС%",   
												Символы.ПС + НСтр("ru = 'Регистрационный номер ИП: %ИПРегистрационныйНомерТФОМС%.';
																	|en = 'IE registration number: %ИПРегистрационныйНомерТФОМС%.'"));
												
	    СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
												"%ИПРегистрационныйНомерТФОМС%",   
												?(ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерТФОМС), 
																						Форма.Объект.ИПРегистрационныйНомерТФОМС, НСтр("ru = 'не указано';
																																		|en = 'not specified'")));
	Иначе
		 СтрокаОписанияРеквизитовТФОМС = СтрЗаменить(СтрокаОписанияРеквизитовТФОМС, 
													"%ИПРегистрационныйНомерТФОМС%", "");																					
	КонецЕсли;	
		
	Форма.Элементы.ДекорацияОписаниеРеквизитовТФОМС.Заголовок = СтрокаОписанияРеквизитовТФОМС;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКлассификаторов(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеКлассификаторов" Тогда
		
		Возврат
		
	КонецЕсли;

	Объект = Форма.Объект;
	
	СтрокаОписанияКлассификаторов = НСтр("ru = 'ОКОПФ: %КодОКОПФ%. Организационно-правовая форма: %НаименованиеОКОПФ%. ОКФС: %КодОКФС%. Форма собственности: %НаименованиеОКФС%. ОКВЭД: %КодОКВЭД% (вид деятельности: %НаименованиеОКВЭД%). ОКВЭД2: %КодОКВЭД2% (вид деятельности: %НаименованиеОКВЭД2%). ОКОНХ: %КодОКОНХ%.';
										|en = 'RNCFI: %КодОКОПФ%. Legal form: %НаименованиеОКОПФ%. RNCO: %КодОКФС%. Ownership form: %НаименованиеОКФС%. RNCEA: %КодОКВЭД% (activity category: %НаименованиеОКВЭД%). RNCEA2: %КодОКВЭД2% (activity category: %НаименованиеОКВЭД2%). RNCEB: %КодОКОНХ%. '");
										   													
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКОНХ%",    
												?(ЗначениеЗаполнено(Объект.КодОКОНХ), Объект.КодОКОНХ, НСтр("ru = 'не указано';
																											|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов,
												"%КодОКОПФ%",    
												?(ЗначениеЗаполнено(Объект.КодОКОПФ), Объект.КодОКОПФ, НСтр("ru = 'не указано';
																											|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКОПФ%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКОПФ), Объект.НаименованиеОКОПФ, НСтр("ru = 'не указано';
																																|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов,
												"%КодОКФС%",    
												?(ЗначениеЗаполнено(Объект.КодОКФС), Объект.КодОКФС, НСтр("ru = 'не указано';
																											|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКФС%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКФС), Объект.НаименованиеОКФС, НСтр("ru = 'не указано';
																															|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКВЭД%",    
												?(ЗначениеЗаполнено(Объект.КодОКВЭД), Объект.КодОКВЭД, НСтр("ru = 'не указано';
																											|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКВЭД%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКВЭД), Объект.НаименованиеОКВЭД, НСтр("ru = 'не указано';
																																|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%КодОКВЭД2%",    
												?(ЗначениеЗаполнено(Объект.КодОКВЭД2), Объект.КодОКВЭД2, НСтр("ru = 'не указано';
																												|en = 'not specified'")));
	СтрокаОписанияКлассификаторов = СтрЗаменить(СтрокаОписанияКлассификаторов, 
												"%НаименованиеОКВЭД2%",    
												?(ЗначениеЗаполнено(Объект.НаименованиеОКВЭД2), Объект.НаименованиеОКВЭД2, НСтр("ru = 'не указано';
																																|en = 'not specified'")));
																						
	Форма.Элементы.ДекорацияОписаниеКлассификаторов.Заголовок = СтрокаОписанияКлассификаторов;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеПараметровРасчетаЗарплаты(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеПараметровРасчетаЗарплаты" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПравоЧтенияТеррУсловийПФР = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР);
	
	Если ПравоЧтенияТеррУсловийПФР Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР, ЗНАЧЕНИЕ(СПравочник.ТерриториальныеУсловияПФР.ПустаяСсылка)) КАК ТерриториальныеУсловияПФР
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТерриториальныеУсловияПФР.СрезПоследних КАК ТерриториальныеУсловияПФРСрезПоследних
		|		ПО Организации.Ссылка = ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница
		|ГДЕ
		|	Организации.Ссылка = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Результат = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
		
	СтрокаОписания = НСтр("ru = '%ПрименятьРайонныйКоэффициент%. %РайонныйКоэффициент%%РайонныйКоэффициентРФ%%ПрименятьСевернуюНадбавку%. Территориальные условия ПФР: %ТерриториальныеУсловияПФР%. График работы сотрудников: %ГрафикРаботыСотрудников%.';
							|en = '%ПрименятьРайонныйКоэффициент%. %РайонныйКоэффициент%%РайонныйКоэффициентРФ%%ПрименятьСевернуюНадбавку%. PF site conditions: %ТерриториальныеУсловияПФР%. Employee schedule: %ГрафикРаботыСотрудников%.'");
	
	ТерриториальныеУсловияПФР = Неопределено;
	
	Если ПравоЧтенияТеррУсловийПФР Тогда
		Пока Результат.Следующий() Цикл
			ТерриториальныеУсловияПФР = Результат.ТерриториальныеУсловияПФР;				
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТерриториальныеУсловияПФР) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", ТерриториальныеУсловияПФР);	
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", НСтр("ru = 'не указано';
																							|en = 'not specified'"));
		КонецЕсли;
	Иначе
		    СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныеУсловияПФР%", НСтр("ru = 'недостаточно прав на чтение информации';
																							|en = 'insufficient rights to read the information'"));
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПрименятьРайонныйКоэффициент%",    
												?(Форма.Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент применяется';
																|en = 'Regional factor applied'"),
															НСтр("ru = 'Районный коэффициент не применяется';
																|en = 'Regional factor not applied'")));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициент%",    
												?(Форма.Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент: %РайонныйКоэффициент%.';
																|en = 'Regional factor: %РайонныйКоэффициент%.'"), 
															""));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициент%", Форма.Объект.РайонныйКоэффициент);
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициентРФ%",
												?(Форма.Объект.ПрименятьРайонныйКоэффициент, 
															НСтр("ru = 'Районный коэффициент (федеральный): %РайонныйКоэффициентРФ%.';
																|en = 'Regional factor (federal) : %РайонныйКоэффициентРФ%.'") + " ", 
															""));
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%РайонныйКоэффициентРФ%", Форма.Объект.РайонныйКоэффициентРФ);
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПрименятьСевернуюНадбавку%",    
												?(Форма.Объект.ПрименятьСевернуюНадбавку, 
															НСтр("ru = 'Северная надбавка применяется';
																|en = 'Northern allowance is applied'"),
															НСтр("ru = 'Северная надбавка не применяется';
																|en = 'Northern allowance is not applied'")));
    СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ТерриториальныйОрганПФР%", НСтр("ru = 'не указано';
																					|en = 'not specified'"));
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ГрафикиРаботыСотрудников) Тогда 
		Если ЗначениеЗаполнено(Форма.Объект.ГрафикРаботыСотрудников) Тогда 
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", Форма.Объект.ГрафикРаботыСотрудников);		
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru = 'не указано';
																							|en = 'not specified'"));
		КонецЕсли;	
	Иначе
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ГрафикРаботыСотрудников%", НСтр("ru = 'недостаточно прав на чтение информации';
																						|en = 'insufficient rights to read the information'"));	
	КонецЕсли;
	
	Форма.Элементы.ОписаниеПараметровРасчетаЗарплаты.Заголовок = СтрокаОписания;	
КонецПроцедуры

Процедура ЗаполнитьОписаниеИностраннойОрганизации(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеИностраннойОрганизации" Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если НЕ Форма.Объект.ОтделениеИностраннойОрганизации Тогда
		СтрокаОписанияИностраннойОрганизации = НСтр("ru = 'Не является иностранной организацией.';
													|en = 'Not a foreign company.'");
	Иначе
		СтрокаОписанияИностраннойОрганизации = НСтр("ru = 'Является иностранной организацией. Полное наименование: %НаименованиеИнострОрганизации%. Страна регистрации: %СтранаРегистрации%. Код в стране регистрации: %КодВСтранеРегистрации%. Страна постоянного местонахождения: %СтранаПостоянногоМестонахождения%.';
													|en = 'This is a foreign company. Full name: %НаименованиеИнострОрганизации%. Registration country: %СтранаРегистрации%. Code in registration country: %КодВСтранеРегистрации%. Country of residence: %СтранаПостоянногоМестонахождения%.'");
		
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%НаименованиеИнострОрганизации%",    
												?(ЗначениеЗаполнено(Форма.Объект.НаименованиеИнострОрганизации), Форма.Объект.НаименованиеИнострОрганизации, НСтр("ru = 'не указано';
																																									|en = 'not specified'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%СтранаРегистрации%",    
												?(ЗначениеЗаполнено(Форма.Объект.СтранаРегистрацииИностраннойОрганизации), Форма.Объект.СтранаРегистрацииИностраннойОрганизации, НСтр("ru = 'не указано';
																																														|en = 'not specified'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации,
												"%КодВСтранеРегистрации%",    
												?(ЗначениеЗаполнено(Форма.Объект.КодВСтранеРегистрации), Форма.Объект.КодВСтранеРегистрации, НСтр("ru = 'не указано';
																																					|en = 'not specified'")));
		СтрокаОписанияИностраннойОрганизации = СтрЗаменить(СтрокаОписанияИностраннойОрганизации, 
												"%СтранаПостоянногоМестонахождения%",    
												?(ЗначениеЗаполнено(Форма.Объект.СтранаПостоянногоМестонахождения), Форма.Объект.СтранаПостоянногоМестонахождения, НСтр("ru = 'не указано';
																																										|en = 'not specified'")));
	КонецЕсли;
	
	РегистрацияВОЭЗ = ?(Форма.Объект.ЗарегистрированВОЭЗ, НСтр("ru = 'Зарегистрирована';
																|en = 'Registered'"), НСтр("ru = 'Не зарегистрирована';
																								|en = 'Not registered'"));
	СтрокаОписанияИностраннойОрганизации = СтрокаОписанияИностраннойОрганизации
		+ " " + РегистрацияВОЭЗ + " " + НСтр("ru = 'в особой экономической зоне.';
											|en = 'in the special economic zone.'");
	
	Форма.Элементы.ДекорацияОписаниеМестаРегистрации.Заголовок = СтрокаОписанияИностраннойОрганизации;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКодовДО(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеКодовДО" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ОписаниеКодовДО = НСтр( "ru = 'Код налогового органа-получателя отчетности: %КодНалоговогоОрганаПолучателя%. Код органа Федеральной службы гос. статистики: %КодОрганаФСГС%.';
							|en = 'Code of tax authority that receives reporting: %КодНалоговогоОрганаПолучателя%. Code of Federal State Statistics Service: %КодОрганаФСГС%.'");
	
	Если ЗначениеЗаполнено(Форма.Объект.КодНалоговогоОрганаПолучателя) Тогда
		КодНалоговогоОрганаПолучателя = Форма.Объект.КодНалоговогоОрганаПолучателя;
	Иначе 
		КодНалоговогоОрганаПолучателя = НСтр( "ru = 'не указано';
												|en = 'not specified'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.КодОрганаФСГС) И Не (Форма.Объект.КодОрганаФСГС = " - ") Тогда
		КодОрганаФСГС = Форма.Объект.КодОрганаФСГС;
	Иначе 
		КодОрганаФСГС = НСтр( "ru = 'не указано';
								|en = 'not specified'");
	КонецЕсли;
	
	ОписаниеКодовДО = СтрЗаменить(ОписаниеКодовДО, "%КодНалоговогоОрганаПолучателя%", КодНалоговогоОрганаПолучателя);
	ОписаниеКодовДО = СтрЗаменить(ОписаниеКодовДО, "%КодОрганаФСГС%", КодОрганаФСГС);
	Форма.Элементы.ОписаниеКодовДО.Заголовок = ОписаниеКодовДО;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПравоЧтенияУчетСтраховыхВзносов 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов);
	
	ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев 
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	ПравоЧтенияУчетПособийСоциальногоСтрахования  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования);
	ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов  
											= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПрименяемыеТарифыСтраховыхВзносов);
	ПравоЧтенияУчетнаяПолитикаПоНДФЛ 		= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОрганизация.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		КОГДА Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Организации.ГоловнаяОрганизация
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ТаблицаГоловнаяОрганизация
	|ИЗ
	|	ТаблицаОрганизация КАК ТаблицаОрганизация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ТаблицаОрганизация.Ссылка = Организации.Ссылка
	|;";
	
	НомерТекущейТаблицыЗапроса = 1;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудФармацевтов, ЛОЖЬ) КАК ИспользуетсяТрудФармацевтов,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЛетныхЭкипажей, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудЧленовЭкипажейМорскихСудов, ЛОЖЬ) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуетсяТрудШахтеров, ЛОЖЬ) КАК ИспользуетсяТрудШахтеров,
		|	ЕСТЬNULL(НастройкиУчетаСтраховыхВзносов.ИспользуютсяРаботыСДосрочнойПенсией, ЛОЖЬ) КАК ИспользуютсяРаботыСДосрочнойПенсией
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК НастройкиУчетаСтраховыхВзносов
		|		ПО Организации.Ссылка = НастройкиУчетаСтраховыхВзносов.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних.Ставка
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних КАК СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних
		|		ПО Организации.Ссылка = СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПередачиФССВыплатыПособий,
		|	ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.ПособияВыплачиваютсяСтрахователем, ЛОЖЬ) КАК ПособияВыплачиваютсяСтрахователем
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО Организации.Ссылка = НастройкиУчетаПособийСоциальногоСтрахования.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетПособийСоциальногоСтрахования = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
		|		ПО ТаблицаГоловнаяОрганизация.Организация = ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ГоловнаяОрганизация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыПрименяемыеТарифыСтраховыхВзносов = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ
		|ИЗ
		|	ТаблицаГоловнаяОрганизация КАК ТаблицаГоловнаяОрганизация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
		|		ПО ТаблицаГоловнаяОрганизация.Организация = УчетнаяПолитикаПоНДФЛ.ГоловнаяОрганизация";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыУчетнаяПолитикаПоНДФЛ = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Вид тарифа: %ВидТарифа%. 
					|%ПродолжениеСтроки%';
					|en = 'Tariff kind: %ВидТарифа%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = '%ИспользуетсяТрудФармацевтов% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуетсяТрудШахтеров% %ИспользуютсяРаботыСДосрочнойПенсией% %ИспользуетсяТрудЧленовЭкипажейМорскихСудов%
					|%ПродолжениеСтроки%';
					|en = '%ИспользуетсяТрудФармацевтов% %ИспользуетсяТрудЧленовЛетныхЭкипажей% %ИспользуетсяТрудШахтеров% %ИспользуютсяРаботыСДосрочнойПенсией% %ИспользуетсяТрудЧленовЭкипажейМорскихСудов%
					|%ПродолжениеСтроки%'"));
				
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Ставка взносов в ФСС НС и ПЗ: %Ставка%. 
					|%ПродолжениеСтроки%';
					|en = 'Contributions for compulsory insurance against industrial accidents and occupational diseases: %Ставка%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;			
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = 'Учет пособий в ФСС: %ДатаПередачиФССВыплатыПособий%.
					|%ПродолжениеСтроки%';
					|en = 'Allowance accounting in SSF: %ДатаПередачиФССВыплатыПособий%.
					|%ПродолжениеСтроки% '"));				
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты Тогда  
		СтрокаОписания = СтрЗаменить(
				СтрокаОписания, 
				"%ПродолжениеСтроки%",
				НСтр("ru = '%ОсобенностиИсчисленияНДФЛ%. 
					|%ПродолжениеСтроки%';
					|en = '%ОсобенностиИсчисленияНДФЛ%. 
					|%ПродолжениеСтроки%'"));
		
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияПрименяемыеТарифыСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыПрименяемыеТарифыСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ВидТарифа) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", Результат.ВидТарифа);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", НСтр("ru = 'не указано';
																			|en = 'not specified'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ВидТарифа%", НСтр("ru = 'недостаточно прав на чтение информации';
																		|en = 'insufficient rights to read the information'"));	
		
	КонецЕсли;
	
	Если ПравоЧтенияУчетСтраховыхВзносов Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетСтраховыхВзносов].Выбрать();
		Результат.Следующий();
		
		Если Результат.ИспользуетсяТрудФармацевтов Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", 
			НСтр("ru = 'Используется труд фармацевтов.';
				|en = 'Pharmaceutists are employed.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудЧленовЛетныхЭкипажей Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%",
			НСтр("ru = 'Используется труд летных экипажей.';
				|en = 'Flight crew labor is used.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудШахтеров Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", 
			НСтр("ru = 'Используется труд шахтеров.';
				|en = 'Miners are employed.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		КонецЕсли;
		
		Если Результат.ИспользуютсяРаботыСДосрочнойПенсией Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%",
			НСтр("ru = 'Используются работы с досрочной пенсией.';
				|en = 'Works with early old-age pension are used.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%", "");
		КонецЕсли;
		
		Если Результат.ИспользуетсяТрудЧленовЭкипажейМорскихСудов Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%",
			НСтр("ru = 'Применяются льготные тарифы для отдельных территорий.';
				|en = 'Reduced tariffs are applied for separate areas.'"));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%", "");
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудФармацевтов%", 
													НСтр("ru = 'Недостаточно прав на чтение информации об учете страховых взносов.';
														|en = 'Insufficient rights to read the information on insurance contribution accounting.'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЛетныхЭкипажей%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудЧленовЭкипажейМорскихСудов%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуетсяТрудШахтеров%", "");
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ИспользуютсяРаботыСДосрочнойПенсией%", "");
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Ставка) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%",
			Результат.Ставка);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%",
			НСтр("ru = 'не указано';
				|en = 'not specified'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%Ставка%", НСтр("ru = 'недостаточно прав на чтение информации';
																		|en = 'insufficient rights to read the information'"));		
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияУчетнаяПолитикаПоНДФЛ Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетнаяПолитикаПоНДФЛ].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ОсобенностиИсчисленияНДФЛ) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%",
			Результат.ОсобенностиИсчисленияНДФЛ);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%",
			НСтр("ru = 'Стандартные вычеты не применяются';
				|en = 'Standard deductions are not applied'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОсобенностиИсчисленияНДФЛ%", НСтр("ru = 'Недостаточно прав на чтение информации о стандартных вычетах';
																						|en = 'Insufficient rights to read the information on standard deductions'"));		
			
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияУчетПособийСоциальногоСтрахования Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыУчетПособийСоциальногоСтрахования].Выбрать();
		Результат.Следующий();
		
		Если Не Результат.ПособияВыплачиваютсяСтрахователем И ЗначениеЗаполнено(Результат.ДатаПередачиФССВыплатыПособий) Тогда
			СтрокаОписания = СтрЗаменить(
				СтрокаОписания,
				"%ДатаПередачиФССВыплатыПособий%",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'с %1';
						|en = 'from %1'"),
					Формат(Результат.ДатаПередачиФССВыплатыПособий, "ДЛФ=D")));
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%",
				НСтр("ru = 'выполняется страхователем (организацией)';
					|en = 'performed by insurant (company)'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаПередачиФССВыплатыПособий%", НСтр("ru = 'недостаточно прав на чтение информации';
																							|en = 'insufficient rights to read the information'"));
		
	КонецЕсли;
	
	Пока Найти(СтрокаОписания, "  ") > 0 Цикл
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "  ", " ");
	КонецЦикла;
	
	Форма.Элементы.ОписаниеКадровыйУчетИРасчетЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеБухучетаИВыплатыЗарплат(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеБухучетаИВыплатыЗарплат" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьРасчетЗарплатыРасширенная = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ИспользоватьНачислениеЗарплаты		  = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ПравоЧтенияБухучетЗарплатыОрганизаций 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций);
	ПравоЧтенияМестаВыплатыЗарплатыОрганизаций = 
											  ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыОрганизаций);
	ПравоЧтенияЗарплатаКадрыРасширенная 	= ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиЗарплатаКадрыРасширенная);
	
	Запрос = Новый Запрос;	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ &Организация
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;";
	
	НомерТекущейТаблицыЗапроса = 0;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	МестаВыплатыЗарплатыОрганизаций.Вид,
		|	МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
		|		ПО Организации.Ссылка = МестаВыплатыЗарплатыОрганизаций.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыМестаВыплатыЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	БухучетЗарплатыОрганизацийСрезПоследних.СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыОрганизацийСрезПоследних.ОтношениеКЕНВД,
		|	БухучетЗарплатыОрганизацийСрезПоследних.СтатьяФинансирования
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БухучетЗарплатыОрганизаций.СрезПоследних КАК БухучетЗарплатыОрганизацийСрезПоследних
		|		ПО Организации.Ссылка = БухучетЗарплатыОрганизацийСрезПоследних.Организация
		|;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыБухучетЗарплатыОрганизаций = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;

	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыАвансаНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ДатаВыплатыЗарплатыНеПозжеЧем,
		|	НастройкиЗарплатаКадрыРасширенная.ВыплачиватьЗарплатуВПоследнийДеньМесяца
		|ИЗ
		|	ТаблицаОрганизация КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
		|		ПО Организации.Ссылка = НастройкиЗарплатаКадрыРасширенная.Организация;";
		
		НомерТекущейТаблицыЗапроса = НомерТекущейТаблицыЗапроса + 1;
		НомерТаблицыЗарплатаКадрыРасширенная = НомерТекущейТаблицыЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
			
	СтрокаОписания = "%ПродолжениеСтроки%";
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru = 'Статья финансирования: %СтатьяФинансирования%. Способ отражения зарплаты в бухучете: %СпособОтраженияЗарплатыВБухучете%. Отношение к ЕНВД: %ОтношениеКЕНВД%.
				|%ПродолжениеСтроки%';
				|en = 'Financing item: %СтатьяФинансирования%. Payroll record method in accounting: %СпособОтраженияЗарплатыВБухучете%. Relation to UTII: %ОтношениеКЕНВД%.
				|%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная Тогда
		СтрокаОписания = СтрЗаменить(
			СтрокаОписания, 
			"%ПродолжениеСтроки%", 
			НСтр("ru = '%МестоВыплатыЗарплаты%
				|%ПродолжениеСтроки%';
				|en = '%МестоВыплатыЗарплаты%
				|%ПродолжениеСтроки%'"));	
	КонецЕсли;
	
	СтрокаОписания = СтрЗаменить(
		СтрокаОписания,
		"%ПродолжениеСтроки%",
		НСтр("ru = 'Крайний срок выплаты аванса: %ДатаВыплатыАвансаНеПозжеЧем%.
			|Крайний срок выплаты зарплаты: %ДатаВыплатыЗарплатыНеПозжеЧем%.';
			|en = 'Advance payment deadline: %ДатаВыплатыАвансаНеПозжеЧем%.
			|Salary payment deadline: %ДатаВыплатыЗарплатыНеПозжеЧем%.'"));
			
	СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ПродолжениеСтроки%", "");
	
	Если ИспользоватьНачислениеЗарплаты И ПравоЧтенияБухучетЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыБухучетЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.СтатьяФинансирования) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				Результат.СтатьяФинансирования);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%",
				НСтр("ru = 'не указано';
					|en = 'not specified'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.СпособОтраженияЗарплатыВБухучете) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			Результат.СпособОтраженияЗарплатыВБухучете);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%",
			НСтр("ru = 'не указано';
				|en = 'not specified'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ОтношениеКЕНВД) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%",
			Результат.ОтношениеКЕНВД);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%",
			НСтр("ru = 'не указано.';
				|en = 'not specified.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьНачислениеЗарплаты Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СтатьяФинансирования%", НСтр("ru = 'недостаточно прав на чтение информации';
																					|en = 'insufficient rights to read the information'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%СпособОтраженияЗарплатыВБухучете%", НСтр("ru = 'недостаточно прав на чтение информации';
																								|en = 'insufficient rights to read the information'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ОтношениеКЕНВД%", НСтр("ru = 'недостаточно прав на чтение информации';
																				|en = 'insufficient rights to read the information'"));
		
	КонецЕсли;
	
	Если ИспользоватьРасчетЗарплатыРасширенная И ПравоЧтенияМестаВыплатыЗарплатыОрганизаций Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыМестаВыплатыЗарплатыОрганизаций].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.Вид) Тогда
			Если Результат.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Зарплата выдается через кассу: %МестоВыплаты%.';
																							|en = 'Salary is paid via cash desk: %МестоВыплаты%.'"));
			Иначе
				СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Зарплата выдается посредством зачисления на карточку: %МестоВыплаты%.';
																							|en = 'Salary is transferred to card: %МестоВыплаты%.'"));
			КонецЕсли;
			МестоВыплаты = ?(ЗначениеЗаполнено(Результат.МестоВыплаты), Результат.МестоВыплаты, НСтр("ru = 'не указано';
																									|en = 'not specified'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплаты%", МестоВыплаты);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%",
			НСтр("ru = 'Место/способ выплаты зарплаты не указан.';
				|en = 'Location/method of salary payment is not specified.'"));
		КонецЕсли;
		
	ИначеЕсли ИспользоватьРасчетЗарплатыРасширенная Тогда 
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%МестоВыплатыЗарплаты%", НСтр("ru = 'Недостаточно прав на чтение информации о местах выплаты зарплаты.';
																					|en = 'Insufficient rights to read the information on salary payment locations.'"));		
		
	КонецЕсли;
	
	Если ПравоЧтенияЗарплатаКадрыРасширенная Тогда
		
		Результат = МассивРезультатовЗапроса[НомерТаблицыЗарплатаКадрыРасширенная].Выбрать();
		Результат.Следующий();
		
		Если ЗначениеЗаполнено(Результат.ДатаВыплатыАвансаНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = '%ДатаВыплатыАвансаНеПозжеЧем% число месяца';
				|en = '%ДатаВыплатыАвансаНеПозжеЧем% date'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			Результат.ДатаВыплатыАвансаНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = 'не указано';
				|en = 'not specified'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.ВыплачиватьЗарплатуВПоследнийДеньМесяца)
			И Результат.ВыплачиватьЗарплатуВПоследнийДеньМесяца Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = 'последний день месяца';
				|en = 'last day of the month'"));
		ИначеЕсли ЗначениеЗаполнено(Результат.ДатаВыплатыЗарплатыНеПозжеЧем) Тогда
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = '%ДатаВыплатыЗарплатыНеПозжеЧем% число месяца';
				|en = '%ДатаВыплатыЗарплатыНеПозжеЧем% date'"));
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			Результат.ДатаВыплатыЗарплатыНеПозжеЧем);
		Иначе
			СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = 'не указано';
				|en = 'not specified'"));
		КонецЕсли;
		
	Иначе
		
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыАвансаНеПозжеЧем%",
			НСтр("ru = 'недостаточно прав на чтение информации';
				|en = 'insufficient rights to read the information'"));
		СтрокаОписания = СтрЗаменить(СтрокаОписания, "%ДатаВыплатыЗарплатыНеПозжеЧем%",
			НСтр("ru = 'недостаточно прав на чтение информации';
				|en = 'insufficient rights to read the information'"));
	КонецЕсли;
	
	Форма.Элементы.ОписаниеБухучетИВыплатаЗарплаты.Заголовок = СокрЛП(СтрокаОписания);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеВоинскогоУчета(Форма, ИмяОписания = "")
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеВоинскогоУчета" Тогда
		
		Возврат
		
	КонецЕсли;	
	Форма.Элементы.ОписаниеВоинскийУчет.Заголовок = НСтр("ru = 'Воинский учет';
														|en = 'Military registration'");
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиРасчетаРезервовОтпусков(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьНастройкиРасчетаРезервовОтпусков" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	ПравоЧтенияНастройкиРасчетаРезервовОтпусков = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков);
	
	СтрокаШаблон = "%1: %2." + Символы.ПС;
	СтрокаШаблонБулево = "%1." + Символы.ПС;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Период,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Организация,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ФормироватьРезервОтпусковБУ,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ФормироватьРезервОтпусковНУ,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.МетодНачисленияРезерваОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.НормативОтчисленийВРезервОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ПредельнаяВеличинаОтчисленийВРезервОтпусков,
		|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ОпределятьИзлишкиЕжемесячно
		|ИЗ
		|	РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних(&Период, Организация = &Организация) КАК
		|		НастройкиРасчетаРезервовОтпусковСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Если ИспользоватьНачислениеЗарплаты 
		И ПравоЧтенияНастройкиРасчетаРезервовОтпусков Тогда
		
		Выборка = Запрос.Выполнить().Выбрать();
		ДействующиеНастройки= Неопределено;
		Если Выборка.Следующий() Тогда
			ДействующиеНастройки = Выборка;
		КонецЕсли;
		СтрокаОписанияНастроек = "";
		Если ЗначениеЗаполнено(ДействующиеНастройки) Тогда
			Если ДействующиеНастройки.ФормироватьРезервОтпусковБУ Тогда
				СтрокаОписанияНастроек = СтрШаблон(СтрокаШаблонБулево, 
						НСтр("ru = 'Формируются оценочные обязательства (резервы) в бухучете';
							|en = 'Estimated liabilities (reserves) in bookkeeping are generated'"));
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru = 'Метод начисления отпусков';
							|en = 'Method of leave accrual'"),
						ДействующиеНастройки.МетодНачисленияРезерваОтпусков);
			КонецЕсли;
			
			Если ДействующиеНастройки.ОпределятьИзлишкиЕжемесячно Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблонБулево,
						НСтр("ru = 'Переоценивать излишки ежемесячно';
							|en = 'Revaluate surplus monthly'"));
			КонецЕсли;
			
			Если ДействующиеНастройки.ФормироватьРезервОтпусковБУ Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек + СтрШаблон(СтрокаШаблонБулево, 
						НСтр("ru = 'Формируются оценочные обязательства (резервы) в налоговом учете';
							|en = 'Estimated liabilities (reserves) in tax accounting are generated'"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru = 'Ежемесячный процент отчислений от ФОТ';
							|en = 'Monthly deduction percent of salary budget amount'"),
						Строка(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) + "%");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДействующиеНастройки.НормативОтчисленийВРезервОтпусков) Тогда
				СтрокаОписанияНастроек = СтрокаОписанияНастроек
					+ СтрШаблон(СтрокаШаблон,
						НСтр("ru = 'Предельная сумма отчислений в год';
							|en = 'Annual contribution amount limit'"),
						ДействующиеНастройки.ПредельнаяВеличинаОтчисленийВРезервОтпусков);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаОписанияНастроек = НСтр("ru = 'недостаточно прав на чтение информации';
										|en = 'insufficient rights to read the information'");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаОписанияНастроек) Тогда
		СтрокаОписанияНастроек = НСтр("ru = 'Не заданы параметры.';
										|en = 'Parameters are not specified.'");
	КонецЕсли;
	Форма.Элементы.ОписаниеРезервыОтпусков.Заголовок = СокрЛП(СтрокаОписанияНастроек);
	
КонецПроцедуры

Процедура ПроверитьОбменРПН(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ПроверитьОбменРПН" Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаРПН) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбменаРПН.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаРПН КАК НастройкиОбменаРПН
		|		ПО (НастройкиОбменаРПН.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаРПН.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Форма.ОбменРПН = НСтр("ru = 'Не используется';
								|en = 'Not used'");
		Пока РезультатЗапроса.Следующий() Цикл
			Форма.ОбменРПН = НСтр("ru = 'Используется';
									|en = 'Used'");
		КонецЦикла;
		
	Иначе
		
		Форма.ОбменРПН = НСтр("ru = 'Недостаточно прав на чтение информации.';
								|en = 'Insufficient rights to read the information.'");
		Форма.Элементы.ОбменРПН.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбменФТС(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ПроверитьОбменФТС" Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФТС) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФТС.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФТС КАК НастройкиОбменаФТС
		|		ПО (НастройкиОбменаФТС.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФТС.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Форма.ОбменФТС = НСтр("ru = 'Не используется';
								|en = 'Not used'");
		Пока РезультатЗапроса.Следующий() Цикл
			Форма.ОбменФТС = НСтр("ru = 'Используется';
									|en = 'Used'");
		КонецЦикла;
		
	Иначе
		
		Форма.ОбменФТС = НСтр("ru = 'Недостаточно прав на чтение информации.';
								|en = 'Insufficient rights to read the information.'");
		Форма.Элементы.ОбменФТС.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбменФСС(Форма, ИмяОписания = "")
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ПроверитьОбменФСС" Тогда
		
		Возврат
		
	КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФСС.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|		ПО (НастройкиОбменаФСС.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Форма.ОбменФСС = НСтр("ru = 'Не используется';
								|en = 'Not used'");
		Пока РезультатЗапроса.Следующий() Цикл
			Форма.ОбменФСС = НСтр("ru = 'Используется';
									|en = 'Used'");
		КонецЦикла;
		
	Иначе
		
		Форма.ОбменФСС = НСтр("ru = 'Недостаточно прав на чтение информации.';
								|en = 'Insufficient rights to read the information.'");
		Форма.Элементы.ОбменФСС.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбменСЭДОФСС(Форма, ИмяОписания = "")
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ПроверитьОбменСЭДОФСС" Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияУведомленийОбЭЛН.ПолучатьУведомленияОбЭЛН,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияУведомленийОбЭЛН КАК НастройкиПолученияУведомленийОбЭЛН
		|		ПО (НастройкиПолученияУведомленийОбЭЛН.Страхователь = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиПолученияУведомленийОбЭЛН.ПолучатьУведомленияОбЭЛН = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Форма.ОбменСЭДОФСС = НСтр("ru = 'Не используется';
										|en = 'Not used'");
		Иначе
			Форма.ОбменСЭДОФСС = НСтр("ru = 'Используется';
										|en = 'Used'");
		КонецЕсли;
		
	Иначе
		
		Форма.ОбменСЭДОФСС = НСтр("ru = 'Недостаточно прав на чтение информации.';
									|en = 'Insufficient rights to read the information.'");
		Форма.Элементы.ОбменСЭДОФСС.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОбменРАР(Форма, ИмяОписания = "")
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ИмяОписания" Тогда
		
		Возврат
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСРАР) Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОбменаФСРАР.ИспользоватьОбмен,
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСРАР КАК НастройкиОбменаФСРАР
		|		ПО (НастройкиОбменаФСРАР.Организация = Организации.Ссылка)
		|ГДЕ
		|	Организации.Ссылка = &Организация
		|	И НастройкиОбменаФСРАР.ИспользоватьОбмен = ИСТИНА";
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Форма.ОбменРАР = НСтр("ru = 'Не используется';
								|en = 'Not used'");
		Пока РезультатЗапроса.Следующий() Цикл
			Форма.ОбменРАР = НСтр("ru = 'Используется';
									|en = 'Used'");
		КонецЦикла;
		
	Иначе
		
		Форма.ОбменРАР = НСтр("ru = 'Недостаточно прав на чтение информации.';
								|en = 'Insufficient rights to read the information.'");
		Форма.Элементы.ОбменРАР.Гиперссылка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

//
//	Параметры:
//		ОбъектЗаписи - СправочникОбъект.Организации
//		Отказ - Булево
Процедура ПроверкиВозможностиПримененияПСН(ОбъектЗаписи, Отказ)
	
	Если Не ОбъектЗаписи.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель")
		И УчетнаяПолитика.ПрименяетсяПСН(ОбъектЗаписи.Ссылка, ТекущаяДатаСеанса()) Тогда
			ТекстОшибки = НСтр("ru = 'В учетной политике установлено использование ПСН. Применение патента доступно только для индивидуальных предпринимателей.';
								|en = 'The use of PTS is set in the accounting policy. Only individual entrepreneurs can apply the patent.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			
			Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРегистрацииВНалоговомОргане(Форма, ИмяОписания = "", ЗаполнятьДанныеРегистрацииНО = Ложь)
	
	Если ЗначениеЗаполнено(ИмяОписания)
		И ИмяОписания <> "ЗаполнитьОписаниеРегистрацииВНалоговомОргане" Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПравоЧтения = ПравоДоступа("Чтение", Метаданные.Справочники.РегистрацииВНалоговомОргане);
	//++ НЕ УТ
	ПравоЧтения = ПравоЧтения И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане);
	ПравоЧтения = ПравоЧтения И ПравоДоступа("Чтение", Метаданные.Справочники.ПодразделенияОрганизаций);
	//-- НЕ УТ
	
	КоличествоНалоговыхОрганов = 0;
	
	Если ПравоЧтения Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистрация.РегистрацияВНалоговомОргане) КАК КоличествоНалоговыхОрганов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
		|			, Организация.ОбособленноеПодразделение И Организация = &Организация) КАК ОбособленныеПодразделения
		|	ГДЕ
		|		ОбособленныеПодразделения.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
		|			, Организация.ОбособленноеПодразделение И Организация.ГоловнаяОрганизация = &Организация) КАК РегистрацииВНалоговомОргане
		|	ГДЕ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		|
		//++ НЕ УТ
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане
		|	ИЗ
		|		РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО
		|			РегистрацииВНалоговомОргане.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			Справочник.Организации КАК Организации
		|		ПО
		|			ПодразделенияОрганизаций.Владелец = Организации.Ссылка
		|	ГДЕ
		|		(Организации.Ссылка = &Организация
		|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)
		|		И РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане <> &РегистрацияВНалоговомОргане
		//-- НЕ УТ
		|	) КАК Регистрация");
		
		Запрос.УстановитьПараметр("Организация", Форма.Объект.Ссылка);
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Форма.РегистрацияВНалоговомОргане);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			КоличествоНалоговыхОрганов = Выборка.КоличествоНалоговыхОрганов;
		Иначе
			КоличествоНалоговыхОрганов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане) Тогда
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация состоит на учете в налоговом органе:';
													|en = 'Company is registered with the tax authorities:'")
			+ " %РегистрацияВНалоговомОргане%.";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%РегистрацияВНалоговомОргане%",
			Форма.РегистрацияВНалоговомОргане);
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			РеквизитыНО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.РегистрацияВНалоговомОргане, "Код, НаименованиеИФНС");
			Форма.Объект.КодНалоговогоОргана 			= РеквизитыНО.Код;
			Форма.Объект.НаименованиеНалоговогоОргана = РеквизитыНО.НаименованиеИФНС;
		КонецЕсли;
		
	Иначе
		
		ОписаниеРегистрацииВНалоговыхОрганах = НСтр("ru = 'Организация не состоит на учете в налоговом органе.';
													|en = 'Company is not registered with tax authority.'");
		
		Если ЗаполнятьДанныеРегистрацииНО Тогда
			Форма.Объект.КодНалоговогоОргана 			= "";
			Форма.Объект.НаименованиеНалоговогоОргана = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоНалоговыхОрганов > 0 Тогда
		ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах
			+ " " + НСтр("ru = 'Обособленные подразделения состоят на учете в';
						|en = 'Branch offices are registered in'") + " %КоличествоНалоговыхОрганов% ";
		ОписаниеРегистрацииВНалоговыхОрганах = СтрЗаменить(
			ОписаниеРегистрацииВНалоговыхОрганах,
			"%КоличествоНалоговыхОрганов%",
			Формат(КоличествоНалоговыхОрганов,"ЧГ=0"));
		Если КоличествоНалоговыхОрганов <> 11 И Прав(Строка(КоличествоНалоговыхОрганов), 1) = "1" Тогда
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговом органе.';
																								|en = 'tax authority.'");
		Иначе
			ОписаниеРегистрацииВНалоговыхОрганах = ОписаниеРегистрацииВНалоговыхОрганах + НСтр("ru = 'налоговых органах.';
																								|en = 'tax authorities.'");
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ГиперссылкаРегистрацияВНалоговыхОрганах.РасширеннаяПодсказка.Заголовок = ОписаниеРегистрацииВНалоговыхОрганах;
	
КонецПроцедуры


#КонецОбласти

#Область РегистрацииВНалоговомОргане

Процедура НастроитьПредставлениеИсторииКПП(Форма)
	
	ПредставлениеИстории = Новый Структура();
	ПредставлениеИстории.Вставить("Заголовок", НСтр("ru = 'История';
													|en = 'History'"));
	ПредставлениеИстории.Вставить("Доступность", Истина);
	
	КоличествоЗаписейИстории = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПредставлениеИстории.Доступность = Ложь;
	ИначеЕсли Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество() > 0 Тогда
		АктуальнаяЗапись = Форма.РегистрацииВНалоговомОрганеНаборЗаписей[КоличествоЗаписейИстории - 1];
		ПредставлениеИстории.Заголовок = СтрШаблон(НСтр("ru = 'Действует с %1';
														|en = 'Valid from %1'"), Формат(АктуальнаяЗапись.Период, "ДЛФ=D;"));
		ПредставлениеИстории.Доступность = Истина;
	КонецЕсли;
	
	Форма.Элементы.ИсторияКППЮрЛица.Заголовок = ПредставлениеИстории.Заголовок;
	Форма.Элементы.ИсторияКППЮрЛица.Доступность = ПредставлениеИстории.Доступность;
	Форма.Элементы.ИсторияКППОбособленногоПодразделения.Заголовок = ПредставлениеИстории.Заголовок;
	Форма.Элементы.ИсторияКППОбособленногоПодразделения.Доступность = ПредставлениеИстории.Доступность;
	
КонецПроцедуры

Процедура ЗаписатьРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ, Форма)
	
	РегистрацииВФорме = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрацииВФорме", РегистрацииВФорме);
	Запрос.УстановитьПараметр("Организация", ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Организация					КАК Организация,
	|	РегистрацииВНалоговомОргане.Подразделение				КАК Подразделение,
	|	РегистрацииВНалоговомОргане.Период						КАК Период,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ РегистрацииВФорме
	|ИЗ
	|	&РегистрацииВФорме КАК РегистрацииВНалоговомОргане
	|;
	|///////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РегистрацииВФорме.Период						КАК Период,
	|	РегистрацииВФорме.Организация					КАК Организация,
	|	РегистрацииВФорме.Подразделение					КАК Подразделение,
	|	РегистрацииВФорме.РегистрацияВНалоговомОргане	КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрацииВФорме КАК РегистрацииВФорме
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО РегистрацииВФорме.Период = РегистрацииВНалоговомОргане.Период
	|			И РегистрацииВФорме.Организация = РегистрацииВНалоговомОргане.Организация
	|			И РегистрацииВФорме.Подразделение = РегистрацииВНалоговомОргане.Подразделение
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Период Есть NULL
	|;
	|///////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Период						КАК Период,
	|	РегистрацииВНалоговомОргане.Организация					КАК Организация,
	|	РегистрацииВНалоговомОргане.Подразделение				КАК Подразделение,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане	КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрацииВФорме КАК РегистрацииВФорме
	|		ПО РегистрацииВНалоговомОргане.Период = РегистрацииВФорме.Период
	|			И РегистрацииВНалоговомОргане.Организация = РегистрацииВФорме.Организация
	|			И РегистрацииВНалоговомОргане.Подразделение = РегистрацииВФорме.Подразделение
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Организация = &Организация
	|	И РегистрацииВНалоговомОргане.Подразделение = &Подразделение
	|	И РегистрацииВФорме.Период Есть NULL";
	
	//++ НЕ УТ
	Запрос.Текст = Запрос.Текст + 
	ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период,
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО ИсторияРегистрацийВНалоговомОргане.Период = РегистрацииВНалоговомОргане.Период
	|			И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = РегистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Период ЕСТЬ NULL
	|	И ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация";
	//-- НЕ УТ
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[1].Пустой() Тогда
		Отбор = МассивРезультатов[1].Выбрать();
		Пока Отбор.Следующий() Цикл
			Запись = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Отбор);
			Запись.Записать();
		КонецЦикла;
	КонецЕсли;
	Если Не МассивРезультатов[2].Пустой() Тогда
		Отбор = МассивРезультатов[2].Выбрать();
		Пока Отбор.Следующий() Цикл
			Запись = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Отбор);
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;
	//++ НЕ УТ
	Если Не МассивРезультатов[3].Пустой() Тогда 
		Отбор = МассивРезультатов[3].Выбрать();
		Пока Отбор.Следующий() Цикл
			Запись = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Отбор);
			Запись.Удалить();
		КонецЦикла;
	КонецЕсли;
	
	ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(ТекущийОбъект.Ссылка);
	РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ОбновитьПодчиненныеСтруктурныеЕдиницы(ПодчиненныеСтруктурныеЕдиницы);
	//-- НЕ УТ

КонецПроцедуры

Процедура ПрочитатьРегистрацииВНалоговомОргане(ТекущийОбъект, Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрацииВНалоговомОргане = РегистрыСведений.РегистрацииВНалоговомОргане.СоздатьНаборЗаписей();
	РегистрацииВНалоговомОргане.Отбор.Организация.Установить(ТекущийОбъект.Ссылка);
	РегистрацииВНалоговомОргане.Отбор.Подразделение.Установить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	РегистрацииВНалоговомОргане.Прочитать();
	
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Загрузить(РегистрацииВНалоговомОргане.Выгрузить());
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Сортировать("Период");
	
	НастроитьПредставлениеИсторииКПП(Форма);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования(РезультатРедактирования, Форма)
	
	Форма.Модифицированность = Истина;
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Загрузить(РезультатРедактирования.ИсторияРегистрацииВНалоговомОргане.Выгрузить());
	Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Сортировать("Период");
	
	КоличествоЗаписейИстории = Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Количество();
	
	Если КоличествоЗаписейИстории > 0 Тогда
		АктуальнаяЗапись = Форма.РегистрацииВНалоговомОрганеНаборЗаписей[КоличествоЗаписейИстории - 1];
		Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
		Форма.РегистрацияВНалоговомОргане = АктуальнаяЗапись.РегистрацияВНалоговомОргане;
		Форма.Объект.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальнаяЗапись.РегистрацияВНалоговомОргане, "КПП");
		Форма.Объект.КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальнаяЗапись.РегистрацияВНалоговомОргане, "Код");
		Форма.ДатаРегистрацииВНалоговомОргане = АктуальнаяЗапись.Период;
	КонецЕсли;
	
	НастроитьПредставлениеИсторииКПП(Форма);
	
КонецПроцедуры

Процедура ЗаписатьРегистрациюВНалоговомОргане(Форма, Объект = Неопределено) Экспорт
	
	Если Объект = Неопределено Тогда 
	    Объект = Форма.Объект;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.ДатаРегистрацииВНалоговомОргане) Тогда 
		ДатаПостановкиНаУчет  = Форма.ДатаРегистрацииВНалоговомОргане;
	Иначе
		ДатаПостановкиНаУчет  = Объект.ДатаРегистрации;
	КонецЕсли;
	Если Объект.ОбособленноеПодразделение Тогда
		Владелец		= Объект.ГоловнаяОрганизация;
	Иначе
		Владелец	    = Объект.Ссылка;
	КонецЕсли;
	РегистрацииВНО = Новый Массив;
	Если ЭтоАдресВременногоХранилища(Форма.ИсторияКПП) Тогда
		ИсторияКПП = ПолучитьИзВременногоХранилища(Форма.ИсторияКПП);
		Индекс = 1;
		Для Каждого Элемент Из ИсторияКПП Цикл   
			ПараметрыСоздания = Новый Структура;
			ПараметрыСоздания.Вставить("ДатаПостановкиНаУчет", Элемент.Дата);
			Если Индекс = ИсторияКПП.Количество() 
				И ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП") = Неопределено Тогда 
				ПараметрыСоздания.Вставить("Ссылка", Объект.РегистрацияВНалоговомОргане);
			КонецЕсли;
			КодНалоговогоОргана = Лев(СокрЛП(Элемент.Значение), 4);
			СуществующаяЗапись = Справочники.РегистрацииВНалоговомОргане.ПроверитьСоздатьРегистрациюВНалоговомОрганеПоКодуНО(
				Владелец, Элемент.Значение, КодНалоговогоОргана, ПараметрыСоздания);
			РегистрацииВНО.Добавить(СуществующаяЗапись);
			Индекс = Индекс + 1;
		КонецЦикла;
		Форма.ИсторияКПП = "";
	Иначе
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("ДатаПостановкиНаУчет", ДатаПостановкиНаУчет);
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП") = Неопределено Тогда 
			ПараметрыСоздания.Вставить("Ссылка", Объект.РегистрацияВНалоговомОргане);
		КонецЕсли;		
		СуществующаяЗапись = Справочники.РегистрацииВНалоговомОргане.ПроверитьСоздатьРегистрациюВНалоговомОрганеПоКодуНО(
			Владелец, Объект.КПП, Объект.КодНалоговогоОргана, ПараметрыСоздания);
		РегистрацииВНО.Добавить(СуществующаяЗапись);
	КонецЕсли;
	Форма.РегистрацияВНалоговомОргане = СуществующаяЗапись; 
	РегистрацииВНалоговомОргане = Форма.РегистрацииВНалоговомОрганеНаборЗаписей;
	Если Не РегистрацииВНалоговомОргане.Количество() Тогда 
		Для Каждого Регистрация Из РегистрацииВНО Цикл
			Запись = РегистрацииВНалоговомОргане.Добавить();
			Запись.Организация = Объект.Ссылка;
			Запись.Период = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистрация, "ДатаПостановкиНаУчет");
			Запись.РегистрацияВНалоговомОргане = Регистрация; 
		КонецЦикла;
	КонецЕсли;
	Отказ = Ложь;
	ЗаписатьРегистрацииВНалоговомОргане(Объект, Отказ, Форма);
КонецПроцедуры

Процедура ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане(РезультатРедактирования, Форма)
	Объект = Форма.Объект;
	НовыйКПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатРедактирования.Ссылка, "КПП");
	Если Объект.РегистрацияВНалоговомОргане = РезультатРедактирования.Ссылка
		И Не Объект.КПП = НовыйКПП Тогда
		Форма.Модифицированность = Истина;
		Объект.КПП = НовыйКПП;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ДобавитьОбработчикЗаполненияРеквизитаКлючОрганизацииНСПК_2_5_17(Обработчики);
	
КонецПроцедуры

Процедура ДобавитьОбработчикЗаполненияРеквизитаКлючОрганизацииНСПК_2_5_17(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОрганизацииЛокализация.ОбработатьЗаполнениеРеквизитаКлючОрганизацииНСПК_2_5_17";
	Обработчик.Версия = "2.5.17.171";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("62a1f964-d862-d43a-a6a2-1cf423349e95");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОрганизацииЛокализация.ЗарегистрироватьДанныеКОбработкеЗаполненияРеквизитаКлючОрганизацииНСПК_2_5_17";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	ШаблонКомментария = НСтр("ru = 'При обновлении на 2.5.17 переносит данные из безопасного хранилища по ключу %1 в одноименный реквизит справочника ""%2""';
							|en = 'При обновлении на 2.5.17 переносит данные из безопасного хранилища по ключу %1 в одноименный реквизит справочника ""%2""'");
	Обработчик.Комментарий = СтрШаблон(ШаблонКомментария, "КлючОрганизацииНСПК", Метаданные.Справочники.Организации.Синоним);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Читаемые.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбластейДанных.ПолноеИмя());
	Иначе
		Читаемые.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанных.ПолноеИмя());
	КонецЕсли;
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Изменяемые.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанныхОбластейДанных.ПолноеИмя());
	Иначе
		Изменяемые.Добавить(Метаданные.РегистрыСведений.БезопасноеХранилищеДанных.ПолноеИмя());
	КонецЕсли;
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.Организации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеЗаполненияРеквизитаКлючОрганизацииНСПК_2_5_17(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = Метаданные.Справочники.Организации.ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.КлючОрганизацииНСПКОбработан";
	
	ЭлементыКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ЭлементыКОбработке);
	
КонецПроцедуры

Процедура ОбработатьЗаполнениеРеквизитаКлючОрганизацииНСПК_2_5_17(Параметры) Экспорт
	
	ПолноеИмяОбъекта = Метаданные.Справочники.Организации.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Для Каждого ТекущаяОрганизация Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущаяОрганизация.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			КлючОрганизацииНСПК = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТекущаяОрганизация.Ссылка, "КлючОрганизацииНСПК");

			ОрганизацияОбъект = ТекущаяОрганизация.Ссылка.ПолучитьОбъект();
			Если ЗначениеЗаполнено(КлючОрганизацииНСПК) И Не ПустаяСтрока(КлючОрганизацииНСПК) Тогда
				ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ТекущаяОрганизация.Ссылка, "КлючОрганизацииНСПК");
				ОрганизацияОбъект.КлючОрганизацииНСПК = КлючОрганизацииНСПК;
			КонецЕсли;
			ОрганизацияОбъект.КлючОрганизацииНСПКОбработан = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущаяОрганизация.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация
