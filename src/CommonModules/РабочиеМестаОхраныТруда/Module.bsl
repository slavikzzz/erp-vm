////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рабочие места охраны труда"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "8178f1be-da85-47e0-9ee0-0dda89fc9fc2", Метаданные.Справочники.РабочиеМестаОхраныТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "cc4ef09c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НазначениеРабочихМестСотрудникам);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.РабочиеМестаСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РабочиеМестаСотрудниковИнтервальный, Истина);
	Списки.Вставить(Метаданные.Документы.НазначениеРабочихМестСотрудникам, Истина);
	Списки.Вставить(Метаданные.Справочники.НазначениеРабочихМестСотрудникамПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.РабочиеМестаОхраныТруда, Истина);
	
КонецПроцедуры

#КонецОбласти

Функция РабочиеМестаОхраныТрудаИспользуются(Организация = Неопределено) Экспорт
	
	ЕстьОхранаТруда = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	Если ЕстьОхранаТруда И ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Возврат МодульОхранаТруда.ОхранаТрудаИспользуется(Организация, Ложь);
	КонецЕсли;
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРабочиеМестаОхраныТруда");
	
КонецФункции

Процедура УстановитьЗначениеКонстантыИспользоватьРабочиеМестаОхраныТруда(Использовать) Экспорт
	Константы.ИспользоватьРабочиеМестаОхраныТруда.Установить(Использовать);
КонецПроцедуры

Функция ЗначенияВзносовВредностиПФР(ОбъектДанных, ДополнительныеРеквизиты = "", ЭтоОбновление = Ложь) Экспорт
	
	ИменаРеквизитов = "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
					  |ОснованиеДосрочногоНазначенияПенсии,
					  |ОсобыеУсловияТрудаПФР,
					  |ПроцентНадбавкиЗаВредность,
					  |ВыплачиваетсяНадбавкаЗаВредность,
					  |КодПозицииСпискаПФР";
	
	Если Не ПустаяСтрока(ДополнительныеРеквизиты) Тогда
		ИменаРеквизитов = ИменаРеквизитов + "," + ДополнительныеРеквизиты;
	КонецЕсли;
	
	Если Не ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		ИменаРеквизитов = ИменаРеквизитов + ",КоличествоДнейДополнительногоОтпускаВГод";
	КонецЕсли;
	
	Если Не ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.УсловияТруда") И Не ЭтоОбновление Тогда
		ИменаРеквизитов = ИменаРеквизитов + ",ХарактерВыполняемыхРаботПФР,ПервичныеДокументыПФР";
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДанных) = Тип("ДанныеФормыСтруктура") Тогда
		СведенияОбъектаДанных = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(СведенияОбъектаДанных, ОбъектДанных);
	Иначе
		СведенияОбъектаДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектДанных, ИменаРеквизитов);
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДанных) = Тип("СправочникСсылка.ШтатноеРасписание") И СведенияОбъектаДанных.ВыплачиваетсяНадбавкаЗаВредность Тогда
		ОтпускЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
		Если Не ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
			Возврат СведенияОбъектаДанных;
		КонецЕсли;
		
		РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЗаВредность, "ПометкаУдаления,Недействителен");
		Если РеквизитыОтпуска.ПометкаУдаления ИЛИ РеквизитыОтпуска.Недействителен Тогда
			Возврат СведенияОбъектаДанных;
		КонецЕсли;
		ЕжегодныеОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДанных, "ЕжегодныеОтпуска").Выгрузить();
		СтрокиВредногоОтпуска = ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", ОтпускЗаВредность));
		Если СтрокиВредногоОтпуска.Количество() > 0 Тогда
			СведенияОбъектаДанных.Вставить("КоличествоДнейДополнительногоОтпускаВГод", СтрокиВредногоОтпуска[0].КоличествоДнейВГод);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОбъектаДанных;
	
КонецФункции

Функция ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапросаКомпоновки, ТолькоРазрешенные) Экспорт
	
	Запрос = Неопределено;
	
	Если Не РабочиеМестаОхраныТрудаИспользуются() Тогда
		Возврат Запрос;
	КонецЕсли;
	
	Если ВРег(ИмяПредставления) = ВРег("РабочиеМестаОхраныТруда") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			Запрос = МодульОхранаТруда.ЗапросПоПредставлению(ИмяПредставления, ПараметрыЗапросаКомпоновки, ТолькоРазрешенные);
		КонецЕсли;
		
		Если Запрос = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМесто,
			|	РабочиеМестаОхраныТруда.Номер,
			|	РабочиеМестаОхраныТруда.Владелец КАК Организация,
			|	РабочиеМестаОхраныТруда.Подразделение,
			|	РабочиеМестаОхраныТруда.Должность,
			|	РабочиеМестаОхраныТруда.ВАрхиве,
			|	РабочиеМестаОхраныТруда.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,
			|	РабочиеМестаОхраныТруда.ОснованиеДосрочногоНазначенияПенсии,
			|	РабочиеМестаОхраныТруда.ОсобыеУсловияТрудаПФР,
			|	РабочиеМестаОхраныТруда.КодПозицииСпискаПФР,
			|	РабочиеМестаОхраныТруда.ВыплачиваетсяНадбавкаЗаВредность,
			|	РабочиеМестаОхраныТруда.ПроцентНадбавкиЗаВредность,
			|	РабочиеМестаОхраныТруда.КоличествоДнейДополнительногоОтпускаВГод
			|ПОМЕСТИТЬ Представления_РабочиеМестаОхраныТруда
			|ИЗ
			|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
			|ГДЕ
			|	НЕ РабочиеМестаОхраныТруда.ЭтоГруппа
			|	И НЕ РабочиеМестаОхраныТруда.ПометкаУдаления
			|	И НЕ РабочиеМестаОхраныТруда.ВАрхиве";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗапросаКомпоновки, "ДатаАктуальности")) Тогда
			Если ТипЗнч(ПараметрыЗапросаКомпоновки.ДатаАктуальности) = Тип("Строка") Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаАктуальности", ПараметрыЗапросаКомпоновки.ДатаАктуальности);
			Иначе
				Запрос.УстановитьПараметр("ДатаАктуальности", ПараметрыЗапросаКомпоновки.ДатаАктуальности);
			КонецЕсли;
		КонецЕсли;
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#Область КадровыеДанныеСотрудников

Функция ДобавитьПолеСведенийОРабочихМестахСотрудников(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	НеобходимыСведенияОРабочихМестахСотрудников = НеобходимыСведенияОРабочихМестахСотрудников(ИмяПоля);
	
	Если НеобходимыСведенияОРабочихМестахСотрудников
	 Или НеобходимИсточникДанныхОРабочихМестахСотрудников(ИмяПоля) Тогда
	
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "СведенияОРабочихМестахСотрудников");
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			МодульОхранаТруда.ДобавитьВКоллекциюИменаКадровыхДанных(ИсточникиДанных);
		КонецЕсли;
		
		Если НеобходимыСведенияОРабочихМестахСотрудников Тогда
			ДобавленоПолеСведений = Истина;
			
			Если Не ОхранаТрудаДоступна() Тогда
				ПутьКДанным = ПутьКДаннымСведенийОРабочихМестахСотрудников(ИмяПоля);
				ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОРабочихМестахСотрудников(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	Если НеобходимыСведенияОРабочихМестахСотрудников(УсловиеПоиска.ЛевоеЗначение) Тогда
		
		ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
		Если ИмяПоля = ВРег("РабочееМестоОхраныТрудаПериодРегистрации") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Период";
		ИначеЕсли ИмяПоля = ВРег("РабочееМестоОхраныТрудаРегистратор") Тогда
			УсловиеПоиска.ЛевоеЗначение = "Регистратор";
		ИначеЕсли ИмяПоля = ВРег("РабочееМестоОхраныТруда") Тогда
			УсловиеПоиска.ЛевоеЗначение = "РабочееМесто";
		КонецЕсли;
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.РабочиеМестаСотрудников", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ИсключаемыеПоля) Экспорт
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РабочееМестоОхраныТруда";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РабочееМестоОхраныТруда";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "РабочееМестоОхраныТрудаПериодРегистрации";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".РабочееМестоОхраныТрудаДатаРегистрации";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТСведенийОРабочихМестахСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов,
	ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОРабочихМестахСотрудников") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВТСведенияОРабочихМестахСотрудников = ИмяИсточникаДанныхРабочихМестСотрудников();
	
	Если СтрНайти(Запрос.Текст, СтрШаблон("ПОМЕСТИТЬ %1", ИмяВТСведенияОРабочихМестахСотрудников)) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросВТ = ЗапросВТСведенияОРабочихМестахСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов,
		ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОРабочихМестахСотрудников);

	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ДобавитьСоединениеВТСведенияОРабочихМестахСотрудников(ЧастиЗапроса, ОписательВременнойТаблицыОтборов);
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", ИмяВТСведенияОРабочихМестахСотрудников);
	
КонецПроцедуры

Процедура ПриПолученииЗапросаВТСведенияОКлассахУсловийТруда(Запрос, ТолькоРазрешенные, ИмяСоздаваемойТаблицы) Экспорт

	Если Не УсловияТрудаРабочихМестОхраныТрудаПрименяются() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяИсточникаДанныхРабочихМестСотрудников(), "Должность");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Должность", "РабочееМесто");
	
	ЗапросКлассыУсловийТруда = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"КлассыУсловийТрудаПоДолжностям",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		Истина);

	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(Запрос.Текст);
	ТекстыЗапросов.Добавить(ЗапросКлассыУсловийТруда.Текст);
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ПОМЕСТИТЬ ВТВременнаяТаблица
	|ИЗ
	|	&ИмяСоздаваемойТаблицы КАК КлассыУсловийТруда
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТКлассыУсловийТрудаПоДолжностямСрезПоследних КАК КлассыУсловийТруда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ &ИмяСоздаваемойТаблицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКлассыУсловийТрудаПоДолжностямСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ &ИмяСоздаваемойТаблицы
	|ИЗ
	|	ВТВременнаяТаблица КАК ВременнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВременнаяТаблица";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСоздаваемойТаблицы", ИмяСоздаваемойТаблицы);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());

КонецПроцедуры

Процедура ДобавитьСоединениеСКадровымиДанными(ОписательВременнойТаблицыОтборов, ЧастиЗапроса) Экспорт
	
	Если Не УсловияТрудаРабочихМестОхраныТрудаПрименяются() Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьСоединениеВТСведенияОРабочихМестахСотрудников(ЧастиЗапроса, ОписательВременнойТаблицыОтборов);
	
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОКлассахУсловийТруда КАК КлассыУсловийТрудаПоРабочимМестам
		|		ПО СведенияОРабочихМестахСотрудников.РабочееМесто = КлассыУсловийТрудаПоРабочимМестам.Должность
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КлассыУсловийТрудаПоРабочимМестам.Период}");
	
КонецПроцедуры

Процедура ДополнитьИменаКадровыхДанных(КадровыеДанные) Экспорт
	КадровыеДанные = ?(ПустаяСтрока(КадровыеДанные), "", КадровыеДанные + ",") + "РабочееМестоОхраныТруда";
КонецПроцедуры

Функция НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(Знач ИмяПоля) Экспорт
	
	Возврат НеобходимыСведенияОРабочихМестахСотрудников(ИмяПоля);
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	Если НеобходимыСведенияОРабочихМестахСотрудников(ИмяПоля) И ОхранаТрудаДоступна() Тогда
		МодульОхранаТрудаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаКлиентСервер");
		Возврат МодульОхранаТрудаКлиентСервер.ИмяФункциональнойОпцииИспользоватьРабочиеМестаОхраныТруда();
	КонецЕсли;
		
	Возврат "";
	
КонецФункции

Процедура СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, ТаблицаФильтра, ИмяВТ = "ВТРабочиеМестаСотрудников") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтра, "Сотрудник");
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Истина;
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"РабочиеМестаСотрудников", 
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		ИмяВТ);
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоРабочимМестамСотрудников

Процедура СформироватьДвиженияПоРабочимМестам(Движения, ДанныеДляПроведения) Экспорт
	
	Если Не ДанныеДляПроведения.Свойство("РабочиеМестаСотрудников")
		Или Не ЗначениеЗаполнено(ДанныеДляПроведения.РабочиеМестаСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДанныхДляПроведения Из ДанныеДляПроведения.РабочиеМестаСотрудников Цикл
		СтрокаДвижений = Движения.РабочиеМестаСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаДанныхДляПроведения);
	КонецЦикла;
	
	Если Движения.РабочиеМестаСотрудников.Количество() > 0 Тогда
		Движения.РабочиеМестаСотрудников.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриемНаРаботуСведенияОРабочихМестахСотрудников(ДанныеДляПроведения, Запрос, ИмяПериода = "") Экспорт
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	Если Не ПустаяСтрока(ИмяПериода) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатаПриема", ИмяПериода);
	КонецЕсли;
	
	// Набор сведений для проведения по рабочим местам сотрудников
	СведенияОРабочихМестахСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РабочиеМестаСотрудников", СведенияОРабочихМестахСотрудников);
	
КонецПроцедуры

Процедура КадровыйПереводСведенияОРабочихМестахСотрудников(ДанныеДляПроведения, Запрос) Экспорт
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.РабочееМесто КАК РабочееМесто,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьРабочееМесто";		
	
	// Набор сведений для проведения по рабочим местам сотрудников
	СведенияОРабочихМестахСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РабочиеМестаСотрудников", СведенияОРабочихМестахСотрудников);
	
КонецПроцедуры

Процедура ПеремещениеВДругоеПодразделениеСведенияОРабочихМестахСотрудников(ДанныеДляПроведения, Запрос) Экспорт
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК Период,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = &Ссылка
		|	И ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	// Набор сведений для проведения по рабочим местам сотрудников
	СведенияОРабочихМестахСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РабочиеМестаСотрудников", СведенияОРабочихМестахСотрудников);
	
КонецПроцедуры

Процедура НазначениеПодработкиСведенияОРабочихМестахСотрудников(ДанныеДляПроведения, Запрос) Экспорт
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеПодработки.ДатаНачала КАК Период,
		|	ВЫБОР
		|		КОГДА НазначениеПодработки.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(НазначениеПодработки.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ НазначениеПодработки.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	НазначениеПодработки.СовмещающийСотрудник КАК Сотрудник,
		|	НазначениеПодработки.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НазначениеПодработки.СовмещающийСотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НазначениеПодработки.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	Документ.НазначениеПодработки КАК НазначениеПодработки
		|ГДЕ
		|	НазначениеПодработки.Ссылка = &Ссылка
		|	И НазначениеПодработки.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	// Набор сведений для проведения по рабочим местам сотрудников
	СведенияОРабочихМестахСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РабочиеМестаСотрудников", СведенияОРабочихМестахСотрудников);
	
КонецПроцедуры

Процедура ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы) Экспорт 
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.НазначениеРабочихМестСотрудникам"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеглотчетности

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета.
Процедура ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетЕФС1ОСС" Тогда
		ОписаниеПоказателей_ЕФС1ОСС_2023Кв1(ПоказателиОтчета, ПараметрыОтчета.Организация);
	КонецЕсли;
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет.
Процедура ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДОтчета = "РегламентированныйОтчетЕФС1ОСС" Тогда
		ЗначенияПоказателей_ЕФС1ОСС_2023Кв1(ПараметрыОтчета, Контейнер);
		ПоместитьВоВременноеХранилище(Новый Структура("Контейнер", Контейнер), ПараметрыОтчета.АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.47";
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.СоздатьРабочиеМестаНаОснованииПозицийШтатногоРасписания";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0133fa69-3084-11eb-a40e-4cedfb9508b6");
	Обработчик.Комментарий = НСтр("ru = 'Создание рабочих мест на основании позиций штатного расписания';
									|en = 'Create workplaces based on headcount positions'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.49";
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.ЗаполнитьРабочиеМестаСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0133fa6c-3084-11eb-a40e-4cedfb9508b6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение рабочих мест сотрудников';
									|en = 'Fill employee workplaces'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.121";
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.ОбновитьДанныеДляПодбораСотрудников";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4bd9c83-7755-11eb-82a8-aa7cbd1e9766");
	Обработчик.Комментарий = НСтр("ru = 'Обновление данных для подбора сотрудников';
									|en = 'Update data to select employees'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.27.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("44a1e402-f3ef-11ed-85db-ffb3d2027bf4");
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.УстановитьИспользованиеРабочихМестОхраныТруда";
	Обработчик.Комментарий = НСтр("ru = 'Установка константы Использовать рабочие места охраны труда.';
									|en = 'Set the ""Use occupational safety and health workplaces"" constant.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.48";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("44a1e403-f3ef-11ed-85db-ffb3d2027bf4");
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.УдалитьРазрядыИзНомеровРабочихМест";
	Обработчик.Комментарий = НСтр("ru = 'Удаление разрядов (непечатных символов) из номеров рабочих мест охраны труда.';
									|en = 'Delete digits (non-printable characters) from numbers of occupational safety and health workplaces.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.54";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4758a189-f34c-11ee-8712-8d38adf321d2");
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.ВосстановитьИсправленныеРабочиеМестаСотрудников";
	Обработчик.Комментарий = НСтр("ru = 'Восстановление исправленных рабочих мест сотрудников.';
									|en = 'Restoring corrected employee workplaces.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.54";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4758a18a-f34c-11ee-8712-8d38adf321d2");
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.ЗаполнитьРабочиеМестаСотрудниковВИсправительномРегистре";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение рабочих мест сотрудников в исправительном регистре.';
									|en = 'Filling employee workplaces in the corrective register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.57";
	Обработчик.Процедура = "РабочиеМестаОхраныТруда.УстановитьИспользованиеОсобыхУсловийТруда";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0133fa6b-3084-11eb-a40e-4cedfb9508b6");
	Обработчик.Комментарий = НСтр("ru = 'Установка использования особых условий труда';
									|en = 'Set using special working conditions'");
	
КонецПроцедуры

Процедура СоздатьРабочиеМестаНаОснованииПозицийШтатногоРасписания(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Если Не ОхранаТрудаДоступна() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПозицииТребующиеОбработки();
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	СоответствиеПозицийПоВредности = ОдинаковыеНаборыВзносовВредностиПФРПоПозициям(ОбновляемыеДанные);
	
	ОхранаТрудаСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	Если ОхранаТрудаСуществует Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеПозицийПоВредности Цикл
		УсловияТруда = УсловияТрудаПоНаборуВзносовВредностиПФР(КлючИЗначение.Значение);
		Для Каждого Позиция Из КлючИЗначение.Ключ Цикл
			ОбъектРабочееМесто = Справочники.РабочиеМестаОхраныТруда.СоздатьЭлемент();
			ОбъектРабочееМесто.Заполнить(Позиция);
			ОбъектРабочееМесто.УдалитьДолжностьПоШтатномуРасписанию = Позиция;//для определения уникальной связи при обновлении
			ОбъектРабочееМесто.УсловияТруда = УсловияТруда;
			ОбъектРабочееМесто.СоответствуетУсловиямТруда = Истина;
			ОбъектРабочееМесто.ВредныеФакторыСопоставлены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Позиция, "ВредныеФакторыСопоставлены");
			
			Если ОхранаТрудаСуществует Тогда
				МодульОхранаТруда.ЗаполнитьНомерРабочегоМестаНаОснованииПозиции(Позиция, ОбъектРабочееМесто);
			КонецЕсли;
			
			Если ОбъектРабочееМесто.ПорядковыйНомер = 0 Тогда
				ОбъектРабочееМесто.НомерВручную = Истина;
				ОбъектРабочееМесто.ПорядковыйНомер = 1 + Справочники.РабочиеМестаОхраныТруда.МаксимальныйНомерРабочегоМеста(
					ОбъектРабочееМесто.Владелец,
					ОбъектРабочееМесто.Подразделение);
			КонецЕсли;
			
			Если ПустаяСтрока(ОбъектРабочееМесто.Номер) Тогда
				ОбъектРабочееМесто.НомерВручную = Ложь;
				ОбъектРабочееМесто.Номер = СтрЗаменить(Строка(ОбъектРабочееМесто.ПорядковыйНомер), Символы.НПП, "");
			КонецЕсли;
			
			ОбъектРабочееМесто.Наименование = НаименованиеРабочегоМеста(
				ОбъектРабочееМесто.Подразделение,
				ОбъектРабочееМесто.Должность, 
				ОбъектРабочееМесто.Номер);
			ОбъектРабочееМесто.СоздатьГруппуРабочегоМеста();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектРабочееМесто);
		КонецЦикла;
	КонецЦикла;
	
	// Обновляется структура рабочих мест
	Справочники.РабочиеМестаОхраныТруда.ОбновитьСтруктуруРабочихМест();
	
КонецПроцедуры

Процедура УстановитьИспользованиеОсобыхУсловийТруда(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТрудаВОрганизации") Тогда
		ЗаписатьИспользованиеОсобыхУсловийТруда(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Если МодульОхранаТруда.ОхранаТрудаИспользуется() Тогда
			ЗаписатьИспользованиеОсобыхУсловийТруда(ПараметрыОбновления);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаполнитьРабочиеМестаСотрудников(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Если Не ОхранаТрудаДоступна() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидДоговора", "В", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровКромеВоеннойСлужбы());
	
	ВидыСобытий = Новый Массив;
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.Перемещение);
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.НачальныеДанные);
	ВидыСобытий.Добавить(Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "В", ВидыСобытий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя,
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "ФизическоеЛицо"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		Метаданные.РегистрыСведений.РабочиеМестаСотрудников.Имя,
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "ФизическоеЛицо"));
	
	Запрос.Текст = ПредварительныйТекстЗапросаРабочиеМестаСотрудниковТребующиеОбработки();
		
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления, "ВТСвязиРабочихМестСПозициями", Неопределено);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос.Текст = ОсновнойТекстЗапросаРабочиеМестаСотрудниковТребующиеОбработки();
	
	РезультатыЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ВыборкаКлассыУсловийТруда = РезультатыЗапроса[РезультатыЗапроса.Количество() - 9].Выбрать();
	ВыборкаРабочиеМестаСотрудников = РезультатыЗапроса[РезультатыЗапроса.Количество() - 8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Регистры
	НаборЗаписейКлассыУсловийТруда = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
	Пока ВыборкаКлассыУсловийТруда.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписейКлассыУсловийТруда.Добавить(), ВыборкаКлассыУсловийТруда);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Если НаборЗаписейКлассыУсловийТруда.Количество() > 0 Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейКлассыУсловийТруда, Ложь);
		КонецЕсли;
		
		ЗарегистрироватьРабочиеМестаСотрудников(ВыборкаРабочиеМестаСотрудников);
		РегистрыСведений.РабочиеМестаСотрудников.ЗаполнитьИнтервальныйРегистр(ПараметрыОбновления);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Ошибка заполнения рабочих мест сотрудников';
				|en = 'Updating the infobase.Error filling employee workplaces.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников();
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Если Не ОхранаТрудаДоступна() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.РабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|ГДЕ
		|	НЕ РабочиеМестаСотрудников.Сотрудник В (&Обработанные)";
	
	Обработанные = Новый Массив;
	Если ПараметрыОбновления <> Неопределено Тогда
		Если Не ПараметрыОбновления.Свойство("Обработанные") Тогда
			ПараметрыОбновления.Вставить("Обработанные");
		Иначе
			Обработанные = ПараметрыОбновления.Обработанные;
		КонецЕсли;
	КонецЕсли;
	Запрос.УстановитьПараметр("Обработанные", Обработанные);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Сотрудники = ОбновляемыеДанные.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников(Сотрудники, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Обработанные, Сотрудники);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "Обработанные", Обработанные);
	
КонецПроцедуры

Процедура УстановитьИспользованиеРабочихМестОхраныТруда(ПараметрыОбновления = Неопределено) Экспорт
	
	Если РабочиеМестаОхраныТрудаИспользуются() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ЕстьОхранаТруда = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		ЕстьОхранаТруда = МодульОхранаТруда.ОхранаТрудаИспользоваласьДоОбновления();
	КонецЕсли;
	
	Если Не (ЕстьОхранаТруда Или ПолучитьФункциональнуюОпцию("ПрименятьРезультатыСпециальнойОценкиУсловийТрудаРасширенная")) Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбработкаВыполнена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
		ПараметрыОбновления, "Константа.ИспользоватьРабочиеМестаОхраныТруда", "", "") Тогда
		
		ОбработкаВыполнена = Ложь;
	Иначе
		МенеджерКонстанты = Константы.ИспользоватьРабочиеМестаОхраныТруда.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);
	
КонецПроцедуры

Процедура УдалитьРазрядыИзНомеровРабочихМест(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РабочиеМестаОхраныТруда.Ссылка КАК Ссылка,
		|	РабочиеМестаОхраныТруда.Номер КАК Номер
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	РабочиеМестаОхраныТруда.Номер ПОДОБНО ""% %""
		|	И НЕ РабочиеМестаОхраныТруда.НомерВручную";
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Выборка = ОбновляемыеДанные.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектРабочееМесто = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектРабочееМесто.Номер = СтрЗаменить(Выборка.Номер, Символы.НПП, "");
		ОбъектРабочееМесто.Наименование = СтрЗаменить(ОбъектРабочееМесто.Наименование, Символы.НПП, "");
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектРабочееМесто);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьИсправленныеРабочиеМестаСотрудников(ПараметрыОбновления) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	РабочиеМестаСотрудников.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.РабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|ГДЕ
		|	НЕ РабочиеМестаСотрудников.Регистратор В (&МассивОбновленных)
		|	И РабочиеМестаСотрудников.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РегистраторыКОбновлению = Запрос.Выполнить().Выгрузить();
	Если РегистраторыКОбновлению.Количество() = 0 Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", РегистраторыКОбновлению.ВыгрузитьКолонку("Регистратор"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеРабочихМест.Ссылка КАК Регистратор,
		|	НазначениеРабочихМестСотрудники.Сотрудник КАК Сотрудник,
		|	НазначениеРабочихМест.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НазначениеРабочихМестСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НазначениеРабочихМестРабочиеМеста.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	Документ.НазначениеРабочихМестСотрудникам КАК НазначениеРабочихМест
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК НазначениеРабочихМестСотрудники
		|		ПО (НазначениеРабочихМест.Ссылка В (&Регистраторы))
		|			И НазначениеРабочихМест.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.РабочиеМеста КАК НазначениеРабочихМестРабочиеМеста
		|		ПО (НазначениеРабочихМестРабочиеМеста.Ссылка = НазначениеРабочихМестСотрудники.Ссылка)
		|			И (НазначениеРабочихМестРабочиеМеста.ИдентификаторСтрокиРабочегоМеста = НазначениеРабочихМестСотрудники.ИдентификаторСтрокиРабочегоМеста)
		|			И (НазначениеРабочихМестРабочиеМеста.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка,
		|	ВосстановлениеВДолжности.Сотрудник,
		|	ВосстановлениеВДолжности.Сотрудник.ГоловнаяОрганизация,
		|	ВосстановлениеВДолжности.ФизическоеЛицо,
		|	ВосстановлениеВДолжности.РабочееМесто
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка В(&Регистраторы)
		|	И ВосстановлениеВДолжности.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Сотрудник.ГоловнаяОрганизация,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.РабочееМесто
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&Регистраторы)
		|	И КадровыйПеревод.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Сотрудник.ГоловнаяОрганизация,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.РабочееМесто
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&Регистраторы)
		|	И КадровыйПеревод.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НазначениеПодработки.Ссылка,
		|	НазначениеПодработки.СовмещающийСотрудник,
		|	НазначениеПодработки.Организация.ГоловнаяОрганизация,
		|	НазначениеПодработки.СовмещающийСотрудник.ФизическоеЛицо,
		|	НазначениеПодработки.РабочееМесто
		|ИЗ
		|	Документ.НазначениеПодработки КАК НазначениеПодработки
		|ГДЕ
		|	НазначениеПодработки.Ссылка В(&Регистраторы)
		|	И НазначениеПодработки.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ГоловнаяОрганизация,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&Регистраторы)
		|	И ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.РабочееМесто
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&Регистраторы)
		|	И ПриемНаРаботу.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.РабочееМесто
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&Регистраторы)
		|	И ПриемНаРаботу.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор,
		|	ВТРегистраторы.Сотрудник КАК Сотрудник,
		|	ВТРегистраторы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВТРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТРегистраторы.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО ВТРегистраторы.Регистратор = РабочиеМестаСотрудников.Регистратор
		|			И ВТРегистраторы.Сотрудник = РабочиеМестаСотрудников.Сотрудник
		|			И ВТРегистраторы.ГоловнаяОрганизация = РабочиеМестаСотрудников.ГоловнаяОрганизация
		|			И ВТРегистраторы.ФизическоеЛицо = РабочиеМестаСотрудников.ФизическоеЛицо
		|			И (РабочиеМестаСотрудников.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка))";
	
	РабочиеМестаСотрудников = Запрос.Выполнить().Выгрузить();
	
	СписокРегистраторовДляОбновленияИнтервальногоРегистра = Новый Массив;
	Для Каждого СтрокаРегистратор Из РегистраторыКОбновлению Цикл
		ЗаписиКВосстановлению = РабочиеМестаСотрудников.НайтиСтроки(Новый Структура("Регистратор", СтрокаРегистратор.Регистратор));
		Если ЗаписиКВосстановлению.Количество() = 0 Тогда
			МассивОбновленных.Добавить(СтрокаРегистратор.Регистратор);
			Продолжить;
		КонецЕсли;
		
		Если Не ОбновлениеИБ.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РабочиеМестаСотрудников.НаборЗаписей", "Регистратор", СтрокаРегистратор.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РабочиеМестаСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаРегистратор.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьКВосстановлению Из ЗаписиКВосстановлению Цикл
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.Сотрудник = ЗаписьКВосстановлению.Сотрудник
					И Запись.ГоловнаяОрганизация = ЗаписьКВосстановлению.ГоловнаяОрганизация
					И Запись.ФизическоеЛицо = ЗаписьКВосстановлению.ФизическоеЛицо Тогда
					
					Запись.РабочееМесто = ЗаписьКВосстановлению.РабочееМесто;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		МассивОбновленных.Добавить(СтрокаРегистратор.Регистратор);
		
		СписокРегистраторовДляОбновленияИнтервальногоРегистра.Добавить(СтрокаРегистратор.Регистратор);
	КонецЦикла;
	
	Если СписокРегистраторовДляОбновленияИнтервальногоРегистра.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СписокОбновленныхРегистраторов", СписокРегистраторовДляОбновленияИнтервальногоРегистра);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТОтборДляПереформирования
			|ИЗ
			|	РегистрСведений.РабочиеМестаСотрудников КАК РабочиеМестаСотрудников
			|ГДЕ
			|	РабочиеМестаСотрудников.Регистратор В(&СписокОбновленныхРегистраторов)";
		
		Запрос.Выполнить();
		РегистрыСведений.РабочиеМестаСотрудников.ОбновитьДвиженияИнтервальногоРегистра(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРабочиеМестаСотрудниковВИсправительномРегистре(ПараметрыОбновления) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	РабочиеМестаСотрудниковИспр.РегистраторИзмерение КАК Регистратор,
		|	РабочиеМестаСотрудниковИспр.РегистраторИзмерение.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ИЗ
		|	РегистрСведений.РабочиеМестаСотрудниковИспр КАК РабочиеМестаСотрудниковИспр
		|ГДЕ
		|	НЕ РабочиеМестаСотрудниковИспр.РегистраторИзмерение В (&МассивОбновленных)
		|	И РабочиеМестаСотрудниковИспр.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РегистраторыКОбновлению = Запрос.Выполнить().Выгрузить();
	Если РегистраторыКОбновлению.Количество() = 0 Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", РегистраторыКОбновлению.ВыгрузитьКолонку("ИсправленныйДокумент"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НазначениеРабочихМест.Ссылка КАК Регистратор,
		|	НазначениеРабочихМестСотрудники.Сотрудник КАК Сотрудник,
		|	НазначениеРабочихМест.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НазначениеРабочихМестСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НазначениеРабочихМестРабочиеМеста.РабочееМесто КАК РабочееМесто
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	Документ.НазначениеРабочихМестСотрудникам КАК НазначениеРабочихМест
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.Сотрудники КАК НазначениеРабочихМестСотрудники
		|		ПО (НазначениеРабочихМест.Ссылка В (&Регистраторы))
		|			И НазначениеРабочихМест.Ссылка = НазначениеРабочихМестСотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НазначениеРабочихМестСотрудникам.РабочиеМеста КАК НазначениеРабочихМестРабочиеМеста
		|		ПО (НазначениеРабочихМестРабочиеМеста.Ссылка = НазначениеРабочихМестСотрудники.Ссылка)
		|			И (НазначениеРабочихМестРабочиеМеста.ИдентификаторСтрокиРабочегоМеста = НазначениеРабочихМестСотрудники.ИдентификаторСтрокиРабочегоМеста)
		|			И (НазначениеРабочихМестРабочиеМеста.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВосстановлениеВДолжности.Ссылка,
		|	ВосстановлениеВДолжности.Сотрудник,
		|	ВосстановлениеВДолжности.Сотрудник.ГоловнаяОрганизация,
		|	ВосстановлениеВДолжности.ФизическоеЛицо,
		|	ВосстановлениеВДолжности.РабочееМесто
		|ИЗ
		|	Документ.ВосстановлениеВДолжности КАК ВосстановлениеВДолжности
		|ГДЕ
		|	ВосстановлениеВДолжности.Ссылка В(&Регистраторы)
		|	И ВосстановлениеВДолжности.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Сотрудник.ГоловнаяОрганизация,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.РабочееМесто
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&Регистраторы)
		|	И КадровыйПеревод.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.Сотрудник.ГоловнаяОрганизация,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.РабочееМесто
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&Регистраторы)
		|	И КадровыйПеревод.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НазначениеПодработки.Ссылка,
		|	НазначениеПодработки.СовмещающийСотрудник,
		|	НазначениеПодработки.Организация.ГоловнаяОрганизация,
		|	НазначениеПодработки.СовмещающийСотрудник.ФизическоеЛицо,
		|	НазначениеПодработки.РабочееМесто
		|ИЗ
		|	Документ.НазначениеПодработки КАК НазначениеПодработки
		|ГДЕ
		|	НазначениеПодработки.Ссылка В(&Регистраторы)
		|	И НазначениеПодработки.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ГоловнаяОрганизация,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&Регистраторы)
		|	И ПеремещениеВДругоеПодразделениеСотрудники.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.РабочееМесто
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&Регистраторы)
		|	И ПриемНаРаботу.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.РабочееМесто
		|ИЗ
		|	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&Регистраторы)
		|	И ПриемНаРаботу.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор,
		|	ВТРегистраторы.Сотрудник КАК Сотрудник,
		|	ВТРегистраторы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВТРегистраторы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТРегистраторы.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы";
	
	РабочиеМестаСотрудников = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРегистратор Из РегистраторыКОбновлению Цикл
		ЗаписиКВосстановлению = РабочиеМестаСотрудников.НайтиСтроки(Новый Структура("Регистратор", СтрокаРегистратор.ИсправленныйДокумент));
		Если ЗаписиКВосстановлению.Количество() = 0 Тогда
			МассивОбновленных.Добавить(СтрокаРегистратор.Регистратор);
			Продолжить;
		КонецЕсли;
		
		Если Не ОбновлениеИБ.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.РабочиеМестаСотрудниковИспр", "РегистраторИзмерение", СтрокаРегистратор.Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РабочиеМестаСотрудниковИспр.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РегистраторИзмерение.Установить(СтрокаРегистратор.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьКВосстановлению Из ЗаписиКВосстановлению Цикл
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.Сотрудник = ЗаписьКВосстановлению.Сотрудник
					И Запись.ГоловнаяОрганизация = ЗаписьКВосстановлению.ГоловнаяОрганизация
					И Запись.ФизическоеЛицо = ЗаписьКВосстановлению.ФизическоеЛицо Тогда
					
					Запись.РабочееМесто = ЗаписьКВосстановлению.РабочееМесто;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
		МассивОбновленных.Добавить(СтрокаРегистратор.Регистратор);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НазначениеРабочихМестСотрудникам",	"НачалоПериода",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РабочиеМестаСотрудников",		"Период",			"КадровыйУчет", "ГоловнаяОрганизация");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РабочиеМестаОхраныТрудаСотрудников);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.РабочиеМестаОхраныТрудаСотрудников, "РабочиеМестаОхраныТрудаСотрудников");
	Вариант.ФункциональныеОпции.Добавить(ИмяФункциональнойОпцииИспользоватьРабочиеМестаОхраныТруда());
	
КонецПроцедуры

#КонецОбласти

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НазначениеРабочихМестСотрудникам);
	
КонецПроцедуры

Процедура СоздатьВТКадроваяИсторияРабочиеМеста(Запрос, ИмяПериода = "Период") Экспорт
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыКадровойИстории.Период КАК Период,
		|	ПериодыКадровойИстории.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыОбъединенные
		|ИЗ
		|	ВТПериодыКадровойИстории КАК ПериодыКадровойИстории
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(РабочиеМестаСотрудников.Период) КАК ПериодРабочиеМеста,
		|	МАКСИМУМ(ПериодыКадровойИстории.Период) КАК ПериодКадроваяИстория
		|ПОМЕСТИТЬ ВТПериодыИстории
		|ИЗ
		|	ВТПериодыОбъединенные КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыКадровойИстории КАК ПериодыКадровойИстории
		|		ПО Периоды.Сотрудник = ПериодыКадровойИстории.Сотрудник
		|			И Периоды.Период >= ПериодыКадровойИстории.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО Периоды.Сотрудник = РабочиеМестаСотрудников.Сотрудник
		|			И Периоды.Период >= РабочиеМестаСотрудников.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыИстории.Период КАК Период,
		|	ПериодыИстории.Сотрудник КАК Сотрудник,
		|	ПериодыИстории.ПериодКадроваяИстория КАК ПериодКадроваяИстория,
		|	РабочиеМестаСотрудников.РабочееМесто КАК РабочееМесто,
		|	ВЫБОР
		|		КОГДА ПериодыИстории.Период = РабочиеМестаСотрудников.Период
		|			ТОГДА РабочиеМестаСотрудников.Регистратор
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РегистраторРабочиеМеста
		|ПОМЕСТИТЬ ВТКадроваяИсторияРабочиеМеста
		|ИЗ
		|	ВТПериодыИстории КАК ПериодыИстории
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО ПериодыИстории.Сотрудник = РабочиеМестаСотрудников.Сотрудник
		|			И ПериодыИстории.ПериодРабочиеМеста = РабочиеМестаСотрудников.Период
		|ГДЕ
		|	НЕ ПериодыИстории.ПериодКадроваяИстория ЕСТЬ NULL";
	
	// АПК:96 -вкл
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РабочиеМестаСотрудников.Период", "РабочиеМестаСотрудников." + ИмяПериода);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьКадровуюИсториюРабочимиМестами(Запрос) Экспорт
	
	Если Не РабочиеМестаОхраныТрудаИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросРабочихМест = Новый Запрос;
	ЗапросРабочихМест.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросРабочихМест.Текст =
		"ВЫБРАТЬ
		|	ПериодыКадровойИстории.Период КАК Период,
		|	ПериодыКадровойИстории.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыКадровойИстории
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковДляДанныхДляПодбораСотрудников КАК ПериодыКадровойИстории";
	ЗапросРабочихМест.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"РабочиеМестаСотрудников",
		ЗапросРабочихМест.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
		
	СоздатьВТКадроваяИсторияРабочиеМеста(ЗапросРабочихМест);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.Период КАК Период", "КадроваяИсторияРабочиеМеста.Период КАК Период");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕОПРЕДЕЛЕНО КАК РабочееМесто",
		"ЕСТЬNULL(КадроваяИсторияРабочиеМеста.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)) КАК РабочееМесто");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадроваяИсторияСотрудниковДляДанныхДляПодбораСотрудников КАК РегистрСведений",
		"ВТКадроваяИсторияСотрудниковДляДанныхДляПодбораСотрудников КАК РегистрСведений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияРабочиеМеста КАК КадроваяИсторияРабочиеМеста
		|		ПО РегистрСведений.Сотрудник = КадроваяИсторияРабочиеМеста.Сотрудник
		|			И РегистрСведений.Период = КадроваяИсторияРабочиеМеста.ПериодКадроваяИстория");
	
КонецПроцедуры

Процедура ДополнитьТаблицуКадровойИсторииРабочимиМестами(Организация, КадроваяИстория, МенеджерВременныхТаблиц, ОписаниеФильтра, ПараметрыПостроения) Экспорт
	
	Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьКолонкиТаблицыРабочимМестом(Организация, КадроваяИстория, , Ложь);
	РабочиеМестаИнтервалы = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
		"РабочиеМестаСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыПостроения);
	Если РабочиеМестаИнтервалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	РабочиеМестаИнтервалы.Индексы.Добавить("Сотрудник, Период");
	
	КоличествоСтрок = КадроваяИстория.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаКадроваяИстория = КадроваяИстория[Сч - 1];
		СтруктураПоиска = Новый Структура("Сотрудник, Период", СтрокаКадроваяИстория.Сотрудник, СтрокаКадроваяИстория.Период);
		НайденныеСтроки = РабочиеМестаИнтервалы.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Период = СтрокаКадроваяИстория.Период Тогда
				СтрокаКадроваяИстория.РабочееМесто = НайденнаяСтрока.РабочееМесто;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РабочиеМестаИнтервалы.Индексы.Очистить();
	РабочиеМестаИнтервалы.Индексы.Добавить("Сотрудник, Месяц");
	Для Сч = 1 По КоличествоСтрок Цикл
		СтрокаКадроваяИстория = КадроваяИстория[Сч - 1];
		СтруктураПоиска = Новый Структура("Сотрудник, Месяц", СтрокаКадроваяИстория.Сотрудник, СтрокаКадроваяИстория.Месяц);
		НайденныеСтроки = РабочиеМестаИнтервалы.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.Период = СтрокаКадроваяИстория.Период Тогда
				Продолжить;
			ИначеЕсли НайденнаяСтрока.РабочееМесто <> СтрокаКадроваяИстория.РабочееМесто
				И НайденнаяСтрока.ПериодЗаписи > СтрокаКадроваяИстория.ПериодЗаписи
				И НайденнаяСтрока.ПериодЗаписи < НачалоДня(СтрокаКадроваяИстория.ДатаОкончания + 1) Тогда
				
				НоваяСтрока = КадроваяИстория.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКадроваяИстория);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				СтрокаКадроваяИстория.ДатаОкончания = НачалоДня(НоваяСтрока.ДатаНачала) - 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеРегистрируемогоРабочегоМеста(РегистрируемыйПериод, ДанныеСотрудника, ЭтоПеревод = Ложь) Экспорт
	
	Если ЭтоПеревод И Не ДанныеСотрудника["ИзменитьРабочееМесто"] Тогда
		Возврат;
	КонецЕсли;
	
	УчетСтажаПФР.УстановитьЗначениеРегистрируемогоРесурса(РегистрируемыйПериод, "РабочееМесто", ДанныеСотрудника.РабочееМесто);
	
КонецПроцедуры

Процедура ДополнитьПоляРабочимМестом(Организация, Поля, ТолькоКОРП = Ложь) Экспорт
	
	Если ТолькоКОРП Тогда
		Если Не УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяПоля = "РабочееМесто";
	Если ТипЗнч(Поля) = Тип("Массив") Тогда
		Поля.Добавить(ИмяПоля);
	Иначе
		Поля.Вставить(ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКолонкиТаблицыРабочимМестом(Организация, ТаблицаИзменений, ТаблицаФильтра = Неопределено, ТолькоКОРП = Истина) Экспорт
	
	Если ТолькоКОРП Тогда
		Если Не УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаИзменений.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда"));
	
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Организация);
	КонецЕсли;
	
	Если ТаблицаФильтра = Неопределено Или СОУТИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтра.Колонки.Добавить("ВременноеРабочееМесто",
		Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда,СправочникСсылка.ШтатноеРасписание"));
	
	Для Каждого СтрокаФильтра Из ТаблицаФильтра Цикл
		Если ЗначениеЗаполнено(СтрокаФильтра.РабочееМесто) Тогда
			СтрокаФильтра.ВременноеРабочееМесто = СтрокаФильтра.РабочееМесто;
		Иначе
			СтрокаФильтра.ВременноеРабочееМесто = СтрокаФильтра.ДолжностьПоШтатномуРасписанию;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаФильтра.Колонки.Удалить("РабочееМесто");
	ТаблицаФильтра.Колонки.ВременноеРабочееМесто.Имя = "РабочееМесто";
	
КонецПроцедуры

Процедура ДополнитьОписаниеПолейРабочимМестом(Организация, ОписаниеПолей, ПоляОписания) Экспорт
	
	Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолей.Вставить("РабочееМесто", Новый Структура(ПоляОписания, Истина, Истина, "ДанныеДляПодбора"));
	
КонецПроцедуры

Процедура ДополнитьТекстДополнительныхПолейЗапросаВТДанныеУчетаСтажаПФР(ТекстыПолейЗапроса, Организация, ОтчетныйПериод) Экспорт
	
	Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	УсловияТрудаРабочихМестОхраныТрудаПрименяются = УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация);
	Если УсловияТрудаРабочихМестОхраныТрудаПрименяются Тогда
		ТекстПоля = "ВЫБОР
		|		КОГДА ПериодыСтажаПФР.ЗарегистрированоЗначениеОснованиеВыслугиЛет
		|			ТОГДА ПериодыСтажаПФР.ОснованиеВыслугиЛет
		|		КОГДА ПериодыСтажаПФР.УсловияТруда <> ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.УсловияТруда.ОснованиеДосрочногоНазначенияПенсии
		|		КОГДА ПериодыСтажаПФР.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.РабочееМесто.ОснованиеДосрочногоНазначенияПенсии
		|		КОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию.ОснованиеДосрочногоНазначенияПенсии
		|		ИНАЧЕ ПериодыСтажаПФР.Должность.ОснованиеДосрочногоНазначенияПенсии
		|	КОНЕЦ";
		ТекстыПолейЗапроса.Вставить("ОснованиеДосрочногоНазначенияПенсии", ТекстПоля);
		
		ТекстПоля = "ВЫБОР
		|		КОГДА ПериодыСтажаПФР.УсловияТруда <> ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.УсловияТруда.КодПозицииСпискаПФР
		|		КОГДА ПериодыСтажаПФР.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.РабочееМесто.КодПозицииСпискаПФР
		|		КОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|			ТОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию.КодПозицииСпискаПФР
		|		ИНАЧЕ ПериодыСтажаПФР.Должность.КодПозицииСпискаПФР
		|	КОНЕЦ";
		ТекстыПолейЗапроса.Вставить("КодПозицииСписка", ТекстПоля);
		
		ТекстПоля = "ВЫБОР
		|				КОГДА ПериодыСтажаПФР.ЗарегистрированоЗначениеОсобыеУсловияТруда
		|					ТОГДА ПериодыСтажаПФР.ОсобыеУсловияТруда
		|				КОГДА ПериодыСтажаПФР.УсловияТруда <> ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)
		|					ТОГДА ПериодыСтажаПФР.УсловияТруда.ОсобыеУсловияТрудаПФР
		|				КОГДА ПериодыСтажаПФР.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
		|					ТОГДА ПериодыСтажаПФР.РабочееМесто.ОсобыеУсловияТрудаПФР
		|				КОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию <> ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
		|					ТОГДА ПериодыСтажаПФР.ДолжностьПоШтатномуРасписанию.ОсобыеУсловияТрудаПФР
		|				ИНАЧЕ ПериодыСтажаПФР.Должность.ОсобыеУсловияТрудаПФР
		|			КОНЕЦ";
		ТекстыПолейЗапроса.Вставить("ОсобыеУсловияТруда", ТекстПоля);
	КонецЕсли;
	
	Если Не ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год(ОтчетныйПериод)) Тогда
		Возврат;
	КонецЕсли;
	
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Организация);
	КонецЕсли;
	
	Если Не (СОУТИспользуется Или ПрименятьРезультатыСпециальнойОценкиУсловийТрудаДляОрганизаций(Организация)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПоля = "ВЫБОР
	|				КОГДА ПериодыСтажаПФР.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка)
	|					ТОГДА ПериодыСтажаПФР.РабочееМесто.Номер
	|				ИНАЧЕ """"
	|			КОНЕЦ";
	ТекстыПолейЗапроса.Вставить("НомерРабочегоМеста", ТекстПоля);
	
	Если УсловияТрудаРабочихМестОхраныТрудаПрименяются Тогда
		ТекстПоля = "ЕСТЬNULL(ПериодическиеПараметрыСтажаИнтервалы.КлассУсловийТруда, ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка))";
		ТекстыПолейЗапроса.Вставить("КлассУсловийТруда", ТекстПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеРабочегоМеста(Подразделение, Должность, Номер, НомерОсновногоРабочегоМеста = "") Экспорт
	
	НомерРабочегоМеста = ?(ЗначениеЗаполнено(Номер), Номер, "") + ?(ЗначениеЗаполнено(НомерОсновногоРабочегоМеста), "А (" + НомерОсновногоРабочегоМеста + ")", "");
	
	НомерРабочегоМеста = ?(ЗначениеЗаполнено(НомерРабочегоМеста), "№ " + НомерРабочегоМеста + " ", "");
	
	НаименованиеРабочегоМеста = ?(ЗначениеЗаполнено(НомерРабочегоМеста), НомерРабочегоМеста, "");
		
	НаименованиеРабочегоМеста = НаименованиеРабочегоМеста + СокрЛП(Строка(Должность)) + ?(ЗначениеЗаполнено(Подразделение), " /" + СокрЛП(Строка(Подразделение)) + "/", "");
		
	Возврат НаименованиеРабочегоМеста;
	
КонецФункции

// Возвращает список рабочих мест по подразделению и должности.
// 
// Параметры:
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - ссылка на подразделение.
//  Должность - СправочникСсылка.Должности - ссылка на должность.
//  Владелец - СправочникСсылка.Организации - ссылка на организацию.
// 
// Возвращаемое значение:
//  СписокЗначений - Рабочие места по подразделению и должности
Функция РабочиеМестаПоПодразделениюИДолжности(Подразделение, Должность, Владелец = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", Подразделение);
	Отбор.Вставить("Должность", Должность);
	Отбор.Вставить("ВАрхиве", Ложь);
	
	Если Владелец <> Неопределено Тогда
		Отбор.Вставить("Владелец", Владелец);
	КонецЕсли;
	
	РабочиеМеста = Справочники.РабочиеМестаОхраныТруда.ПолучитьДанныеВыбора(Новый Структура("Отбор", Отбор));
	
	Возврат РабочиеМеста;
	
КонецФункции

Процедура ДобавитьПодменюПоНазначениюРабочихМестСотрудникам(ОписаниеМеню, ПараметрыПостроения) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.НазначениеРабочихМестСотрудникам) Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Неопределено;
	Сотрудник = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПостроения, "Сотрудник");
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		УстановитьПривилегированныйРежим(Истина);
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
			Ложь, Сотрудник, "ТекущаяОрганизация", ОбщегоНазначения.ТекущаяДатаПользователя());
		УстановитьПривилегированныйРежим(Ложь);
		Если КадровыеДанные.Количество() > 0 Тогда
			Организация = КадровыеДанные[0].ТекущаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.НазначениеРабочихМестСотрудникам");
	
	ОписаниеМеню.Пункты.Добавить(
	СотрудникиФормы.РазделМеню(НСтр("ru = 'Охрана труда';
									|en = 'Occupational safety and health'"), ПунктыМеню));
	
КонецПроцедуры

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.РабочиеМестаСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.РабочиеМестаСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.РабочиеМестаСотрудниковИнтервальный;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла(ПараметрыОбновления) Экспорт
	
	РегистрыСведений.РабочиеМестаСотрудников.ЗаполнитьИнтервальныйРегистр(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область ПереносДанныхИзПрежнихПрограмм

Процедура НазначениеРабочихМестСотрудникамПослеЗагрузки(Объект, Отказ) Экспорт

	МассивСотрудников = Объект.Сотрудники.ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников,
		"Должность, Подразделение, РабочееМестоОхраныТруда", Объект.НачалоПериода);

	Для Каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
		
		НайденнаяСтрока = КадровыеДанныеСотрудников.Найти(СтрокаСотрудники.Сотрудник, "Сотрудник");
		
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РабочееМесто = Неопределено;
		Если ЗначениеЗаполнено(НайденнаяСтрока.РабочееМестоОхраныТруда) Тогда
			РабочееМесто = НайденнаяСтрока.РабочееМестоОхраныТруда;
		ИначеЕсли ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(НайденнаяСтрока.Подразделение)
			И ЗначениеЗаполнено(НайденнаяСтрока.Должность) Тогда
			РабочееМесто = ПолучитьСоздатьРабочееМестоОхраныТруда(Объект.Организация, НайденнаяСтрока.Подразделение,
				НайденнаяСтрока.Должность);
		КонецЕсли;
		
		Если РабочееМесто <> Неопределено Тогда
			НоваяСтрока = Объект.РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			НоваяСтрока.ИдентификаторСтрокиРабочегоМеста = СтрокаСотрудники.ИдентификаторСтрокиРабочегоМеста;
			НоваяСтрока.РабочееМесто = РабочееМесто;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТДолжности(Запрос) Экспорт
	
	Организация = Запрос.Параметры.Организация;
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Организация);
	КонецЕсли;
	
	Если Не (СОУТИспользуется Или ПрименятьРезультатыСпециальнойОценкиУсловийТрудаДляОрганизаций(Организация)) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ВТИсходныеДанныеУчетаСтажа.Должность КАК Должность,
		|	&НачалоПериода КАК ДатаНачала,
		|	&ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДолжности
		|ИЗ
		|	ВТИсходныеДанныеУчетаСтажа КАК ВТИсходныеДанныеУчетаСтажа";
		
		Запрос.Выполнить();

		Возврат;
	КонецЕсли;
	
	Если Не ПерсонифицированныйУчетКлиентСервер.ЭтоФормаЕФС1(Год(Запрос.Параметры.НачалоПериода)) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если СОУТИспользуется Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТИсходныеДанныеУчетаСтажа.РабочееМесто КАК Должность,
			|	&НачалоПериода КАК ДатаНачала,
			|	&ОкончаниеПериода КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДолжности
			|ИЗ
			|	ВТИсходныеДанныеУчетаСтажа КАК ВТИсходныеДанныеУчетаСтажа";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТИсходныеДанныеУчетаСтажа.Должность КАК Должность,
			|	&НачалоПериода КАК ДатаНачала,
			|	&ОкончаниеПериода КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДолжности
			|ИЗ
			|	ВТИсходныеДанныеУчетаСтажа КАК ВТИсходныеДанныеУчетаСтажа
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТИсходныеДанныеУчетаСтажа.РабочееМесто,
			|	&НачалоПериода,
			|	&ОкончаниеПериода
			|ИЗ
			|	ВТИсходныеДанныеУчетаСтажа КАК ВТИсходныеДанныеУчетаСтажа";
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

Функция УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация = Неопределено) Экспорт
	
	УсловияТрудаРабочихМестОхраныТрудаПрименяются = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		УсловияТрудаРабочихМестОхраныТрудаПрименяются = МодульОхранаТруда.УсловияТрудаРабочихМестОхраныТрудаПрименяются(Организация);
	КонецЕсли;
	
	Возврат УсловияТрудаРабочихМестОхраныТрудаПрименяются;
	
КонецФункции

Функция ДанныеРабочихМестОхраныТрудаИнтеграцияУправлениеПерсоналом(РабочиеМеста = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочиеМеста", РабочиеМеста);
	Запрос.УстановитьПараметр("ВсеРабочиеМеста", Не ЗначениеЗаполнено(РабочиеМеста));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМестоОхраныТруда,
		|	РабочиеМестаОхраныТруда.Владелец КАК Организация,
		|	РабочиеМестаОхраныТруда.Должность КАК Должность,
		|	РабочиеМестаОхраныТруда.Наименование КАК Наименование,
		|	РабочиеМестаОхраныТруда.Номер КАК Номер,
		|	РабочиеМестаОхраныТруда.ВАрхиве КАК ВАрхиве,
		|	РабочиеМестаОхраныТруда.ПометкаУдаления КАК ПометкаУдаления,
		|	РабочиеМестаОхраныТруда.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	(&ВсеРабочиеМеста
		|			ИЛИ РабочиеМестаОхраныТруда.Ссылка В (&РабочиеМеста))";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийМодуляМенеджера

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ОхранаТрудаДоступна() Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ОбработкаПолученияФормыРабочихМестОхраныТруда(
			ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ОхранаТрудаДоступна()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	
КонецФункции

Функция ПолучитьСоздатьРабочееМестоОхраныТруда(Организация, Подразделение, Должность)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РабочиеМестаОхраныТруда.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|ГДЕ
		|	РабочиеМестаОхраныТруда.Владелец = &Владелец
		|	И РабочиеМестаОхраныТруда.Подразделение = &Подразделение
		|	И РабочиеМестаОхраныТруда.Должность = &Должность
		|	И НЕ РабочиеМестаОхраныТруда.ВАрхиве
		|	И НЕ РабочиеМестаОхраныТруда.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		РабочееМестоОбъект = Справочники.РабочиеМестаОхраныТруда.СоздатьЭлемент();
		РабочееМестоОбъект.Владелец = Организация;
		РабочееМестоОбъект.Подразделение = Подразделение;
		РабочееМестоОбъект.Должность = Должность;
		РабочееМестоОбъект.ПорядковыйНомер =
			Справочники.РабочиеМестаОхраныТруда.МаксимальныйНомерРабочегоМеста(Организация, Подразделение) + 1;
		РабочееМестоОбъект.Номер = СтрЗаменить(Строка(РабочееМестоОбъект.ПорядковыйНомер), Символы.НПП, "");
		РабочееМестоОбъект.Наименование = НаименованиеРабочегоМеста(
			РабочееМестоОбъект.Подразделение,
			РабочееМестоОбъект.Должность, 
			РабочееМестоОбъект.Номер);
		РеквизитыПФР = 
			"ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР";
		ЗаполнитьЗначенияСвойств(РабочееМестоОбъект, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, РеквизитыПФР),
			РеквизитыПФР);
		РабочееМестоОбъект.Записать();
		Результат = РабочееМестоОбъект.Ссылка;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Результат = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНеобходимостьОбновленияСтруктурыРабочихМест(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеСтруктурыРабочихМест") Тогда
		Возврат;
	КонецЕсли;
	
	// Не обрабатываются группы-подразделения рабочих мест
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.РабочиеМестаОхраныТруда")
		И Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Не обрабатываются новые подразделения
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций")
		И Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.РабочиеМестаОхраныТруда") Тогда
		ИменаКонтролируемыхПолей =
			"Подразделение,
			|ВАрхиве,
			|ПометкаУдаления";
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.ПодразделенияОрганизаций") Тогда
		ИменаКонтролируемыхПолей =
			"Наименование,
			|Родитель";
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		// Для новых р формируется структура с пустыми значениями ключей
		ПрежниеДанныеОбъекта = Новый Структура(ИменаКонтролируемыхПолей);
	Иначе
		ПрежниеДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, ИменаКонтролируемыхПолей);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПрежниеДанныеОбъекта", ПрежниеДанныеОбъекта);
	
КонецПроцедуры

// Обработчик события ПриЗаписи, инициирует обновление структуры списка справочника РабочиеМестаОхраныТруда.
//
Процедура ОбновитьСтруктуруРабочихМестПриЗаписи(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОтключитьОбновлениеСтруктурыРабочихМест") Тогда
		Возврат;
	КонецЕсли;
	
	ПрежниеДанныеОбъекта = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПрежниеДанныеОбъекта", ПрежниеДанныеОбъекта);
	Если ПрежниеДанныеОбъекта <> Неопределено Тогда
		ОбновитьСтруктуруРабочихМест = Ложь;
		Для Каждого КлючиЗначение Из ПрежниеДанныеОбъекта Цикл
			Если КлючиЗначение.Значение <> Источник[КлючиЗначение.Ключ] Тогда
				ОбновитьСтруктуруРабочихМест = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбновитьСтруктуруРабочихМест Тогда
			ПодразделенияРабочихМест = Новый Массив;
			ОбновитьСтруктуруПоДаннымПодразделений = Ложь;
			ОбновитьСтруктуруПоДаннымРабочихМест = Ложь;
			
			Если ТипЗнч(Источник) = Тип("СправочникОбъект.РабочиеМестаОхраныТруда") Тогда
				Если ЗначениеЗаполнено(ПрежниеДанныеОбъекта.Подразделение) Тогда
					ПодразделенияРабочихМест.Добавить(ПрежниеДанныеОбъекта.Подразделение);
				КонецЕсли;
				
				Если ПрежниеДанныеОбъекта.Подразделение <> Источник.Подразделение Тогда
					ПодразделенияРабочихМест.Добавить(Источник.Подразделение);
					ОбновитьСтруктуруПоДаннымПодразделений = Истина;
				КонецЕсли;
				
				ОбновитьСтруктуруПоДаннымРабочихМест = Истина;
			Иначе
				Если ЗначениеЗаполнено(ПрежниеДанныеОбъекта.Родитель) И ПрежниеДанныеОбъекта.Родитель <> Источник.Родитель Тогда
					ПодразделенияРабочихМест.Добавить(ПрежниеДанныеОбъекта.Родитель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Источник.Родитель) Тогда
					ПодразделенияРабочихМест.Добавить(Источник.Родитель);
				КонецЕсли;
				
				ПодразделенияРабочихМест.Добавить(Источник.Ссылка);
				ОбновитьСтруктуруПоДаннымПодразделений = Истина;
			КонецЕсли;
			
			Если ОбновитьСтруктуруПоДаннымПодразделений Тогда
				Справочники.РабочиеМестаОхраныТруда.ОбновитьСтруктуруРабочихМестПоДаннымПодразделений(Источник.Владелец, ПодразделенияРабочихМест);
			КонецЕсли;
			
			Если ОбновитьСтруктуруПоДаннымРабочихМест Тогда
				Справочники.РабочиеМестаОхраныТруда.ОбновитьСтруктуруРабочихМестПоДаннымРабочихМест(Источник.Владелец, ПодразделенияРабочихМест, Источник.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДляПодбораСотрудниковПриИзмененииРабочихМест(НаборЗаписейРабочихМест, Отказ, Замещение) Экспорт
	
	ИзменившиесяДанныеРабочихМест = НаборЗаписейРабочихМест.ТаблицаИзменившихсяДанныхНабора();
	
	Если ИзменившиесяДанныеРабочихМест = Неопределено
		Или ИзменившиесяДанныеРабочихМест.Количество() = 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	Сотрудники = ИзменившиесяДанныеРабочихМест.ВыгрузитьКолонку("Сотрудник");
	Если Сотрудники.Количество() > 0 Тогда
		РегистрыСведений.ДанныеДляПодбораСотрудников.ОбновитьДанныеДляПодбораСотрудников(Сотрудники);
	КонецЕсли;
		
КонецПроцедуры

#Область КадровыеДанныеСотрудников

Функция НеобходимыСведенияОРабочихМестахСотрудников(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("РабочееМестоОхраныТрудаПериодРегистрации")
		Или ИмяПоля = ВРег("РабочееМестоОхраныТрудаРегистратор")
		Или ИмяПоля = ВРег("РабочееМестоОхраныТруда");
		
КонецФункции

Функция НеобходимИсточникДанныхОРабочихМестахСотрудников(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		Или ИмяПоля = ВРег("КлассУсловийТруда");
		
КонецФункции

Функция ПутьКДаннымСведенийОРабочихМестахСотрудников(Знач ИмяПоля) Экспорт
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		ПутьКДанным = МодульОхранаТруда.ПутьКДаннымСведенийОРабочихМестахСотрудников(ПутьКДанным);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		Возврат ПутьКДанным;
	КонецЕсли;
	
	Если ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоОхраныТрудаПериодРегистрации") Тогда
		ПутьКДанным = "	СведенияОРабочихМестахСотрудников.ПериодЗаписи";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоОхраныТрудаРегистратор") Тогда
		ПутьКДанным = "	СведенияОРабочихМестахСотрудников.Регистратор";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("РабочееМестоОхраныТруда") Тогда
		ПутьКДанным = "	СведенияОРабочихМестахСотрудников.РабочееМесто";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция ЗапросВТСведенияОРабочихМестахСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов,
		ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИмяВТСведенияОРабочихМестахСотрудников)

	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("РабочиеМестаСотрудников", ПоляОтбора);
	КонецЕсли;

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников, "Сотрудник");

	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник",
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);

	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;

	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез("РабочиеМестаСотрудников",
		ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, ИмяВТСведенияОРабочихМестахСотрудников);
		
	Возврат ЗапросВТИмяРегистраСрез;

КонецФункции

Процедура ДобавитьСоединениеВТСведенияОРабочихМестахСотрудников(ЧастиЗапроса, ОписательВременнойТаблицыОтборов)
	
	ТекстЗапроса = ЧастиЗапроса.Получить(ЧастиЗапроса.ВГраница());
	
	Если СтрНайти(ТекстЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОРабочихМестахСотрудников КАК") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса.Добавить(
		"		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОРабочихМестахСотрудников КАК СведенияОРабочихМестахСотрудников
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОРабочихМестахСотрудников.Сотрудник
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОРабочихМестахСотрудников.Период");
	
КонецПроцедуры

Функция ИмяИсточникаДанныхРабочихМестСотрудников()
	Возврат "ВТСведенияОРабочихМестахСотрудников";
КонецФункции

Функция ИмяФункциональнойОпцииИспользоватьРабочиеМестаОхраныТруда()
	
	Если ОхранаТрудаДоступна() Тогда
		МодульОхранаТрудаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаКлиентСервер");
		Возврат МодульОхранаТрудаКлиентСервер.ИмяФункциональнойОпцииИспользоватьРабочиеМестаОхраныТруда();
	КонецЕсли;
		
	Возврат "ИспользоватьРабочиеМестаОхраныТруда";
	
КонецФункции

#КонецОбласти

Функция ПрименятьРезультатыСпециальнойОценкиУсловийТрудаДляОрганизаций(Знач Организации)
	
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	КонецЕсли;
	
	Для Каждого Организация Из Организации Цикл
		Если ПолучитьФункциональнуюОпцию("ПрименятьРезультатыСпециальнойОценкиУсловийТруда",
			ПараметрыФункциональныхОпций(Организация)) Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ЗаполнениеРеглотчетности

// Процедура заполняет структуру показателей.
// Ключ структуры - идентификатор показателя.
// Значение структуры - массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - Структура - структура показателей отчета,
// 	Организация - СправочникСсылка.Организации
//
Процедура ОписаниеПоказателей_ЕФС1ОСС_2023Кв1(ПоказателиОтчета, Организация)
	
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Организация);
	КонецЕсли;
	
	Если СОУТИспользуется Или ПрименятьРезультатыСпециальнойОценкиУсловийТрудаДляОрганизаций(Организация) Тогда 
		ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "П000020000400", Истина, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗначенияПоказателей_ЕФС1ОСС_2023Кв1(ПараметрыОтчета, Контейнер)
	
	Организация = ПараметрыОтчета.Организация;
	
	СОУТИспользуется = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		СОУТИспользуется = МодульОхранаТруда.СпециальнаяОценкаУсловийТрудаИспользуется(Организация);
	КонецЕсли;
	ПрименятьРезультатыСпецОценки = ПрименятьРезультатыСпециальнойОценкиУсловийТрудаДляОрганизаций(Организация);
	
	ОписаниеТаблиц = Новый Структура;
	Если (СОУТИспользуется Или ПрименятьРезультатыСпецОценки) И Контейнер.Свойство("Раздел2") Тогда 
		ОписаниеТаблиц.Вставить("Раздел2", НовыйРаздел2ЕФС1());
	КонецЕсли;
	
	РасчетПоказателей_ЕФС1ОСС_2023Кв1(ПараметрыОтчета.ДатаКонцаПериодаОтчета, Организация, ОписаниеТаблиц);
	
	Если ОписаниеТаблиц.Свойство("Раздел2") Тогда
		ЗаполнитьЗначенияСвойств(Контейнер.Раздел2.Строки[0].Данные, ОписаниеТаблиц.Раздел2);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетПоказателей_ЕФС1ОСС_2023Кв1(ДатаОтчета, Организация, ОписаниеТаблиц, ПодробныеДанные = Ложь)
	
	Если ОписаниеТаблиц.Свойство("Раздел2") Тогда 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТКадровыеДанныеДляЕФС1(Запрос.МенеджерВременныхТаблиц, ДатаОтчета, Организация);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА КадровыеДанныеСотрудников.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
			|				ТОГДА 1
			|			КОГДА КадровыеДанныеСотрудников.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
			|				ТОГДА 1
			|			КОГДА КадровыеДанныеСотрудников.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
			|				ТОГДА 1
			|			КОГДА КадровыеДанныеСотрудников.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
			|				ТОГДА 1
			|			КОГДА КадровыеДанныеСотрудников.КлассУсловийТруда = ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК П000020000400
			|ИЗ
			|	ВТКадровыеДанныеДляЕФС1 КАК КадровыеДанныеСотрудников";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ОписаниеТаблиц.Раздел2 = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТКадровыеДанныеДляЕФС1(МенеджерВТ, ДатаАктуальности, Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода = ДатаАктуальности;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияСотрудниковОрганизаций.Отборы,
		"ВидЗанятости", "=", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВТ, "ВТСотрудникиОрганизации");
	КадровыеДанные = "ДатаУвольнения,КлассУсловийТруда";
	
	ЕстьПодсистемаГосударственнаяСлужба = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		КадровыеДанные = КадровыеДанные + ",ВидДолжностиГосударственнойСлужбы";
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.КлассУсловийТруда КАК КлассУсловийТруда
		|ПОМЕСТИТЬ ВТКадровыеДанныеДляЕФС1
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	(КадровыеДанныеСотрудников.ДатаУвольнения >= &ДатаАктуальности
		|			ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|	И (КадровыеДанныеСотрудников.ВидДолжностиГосударственнойСлужбы ЕСТЬ NULL
		|			ИЛИ НЕ КадровыеДанныеСотрудников.ВидДолжностиГосударственнойСлужбы В (&ИсключаемыеВидыДолжностей))";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Если ЕстьПодсистемаГосударственнаяСлужба Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Запрос.УстановитьПараметр("ИсключаемыеВидыДолжностей", МодульГосударственнаяСлужба.ИсключаемыеВидыДолжностей());
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"КадровыеДанныеСотрудников.ВидДолжностиГосударственнойСлужбы ЕСТЬ NULL", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"КадровыеДанныеСотрудников.ВидДолжностиГосударственнойСлужбы В (&ИсключаемыеВидыДолжностей)", "ЛОЖЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НовыйРаздел2ЕФС1()
	
	Раздел2 = Новый Структура;
	Раздел2.Вставить("П000020000400", 0);
	
	Возврат Раздел2;
	
КонецФункции

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Функция ТекстЗапросаПозицииТребующиеОбработки()
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	
	Возврат "ВЫБРАТЬ
	|	ПериодичностьПозиций.Позиция КАК Позиция
	|ПОМЕСТИТЬ ВТПозиции
	|ИЗ
	|	РегистрСведений.УдалитьПериодичностьМедицинскихОсмотровПозицииШтатногоРасписания КАК ПериодичностьПозиций
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МедицинскиеОсмотры.Позиция
	|ИЗ
	|	РегистрСведений.УдалитьМедицинскиеОсмотры КАК МедицинскиеОсмотры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодическиеМедицинскиеОсмотры.Позиция
	|ИЗ
	|	РегистрСведений.УдалитьПериодическиеМедицинскиеОсмотры КАК ПериодическиеМедицинскиеОсмотры
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВыданныеНаправленияНаМедицинскийОсмотр.Позиция
	|ИЗ
	|	РегистрСведений.УдалитьВыданныеНаправленияНаМедицинскийОсмотр КАК ВыданныеНаправленияНаМедицинскийОсмотр
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания.Позиция
	|ИЗ
	|	РегистрСведений.УдалитьВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания КАК
	|		ВидыРаботМедицинскихОсмотровПозицииШтатногоРасписания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВредныеФакторыПозицииШтатногоРасписания.Позиция
	|ИЗ
	|	РегистрСведений.УдалитьВредныеФакторыПозицииШтатногоРасписания КАК ВредныеФакторыПозицииШтатногоРасписания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВредныеФакторыИВидыРаботПозицииШтатногоРасписания.РабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьВредныеФакторыИВидыРаботПозицииШтатногоРасписания КАК ВредныеФакторыИВидыРаботПозицииШтатногоРасписания
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НаправлениеНаМедицинскийОсмотр.УдалитьПозиция
	|ИЗ
	|	Документ.НаправлениеНаМедицинскийОсмотр КАК НаправлениеНаМедицинскийОсмотр
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаключениеМедицинскогоОсмотра.УдалитьПозиция
	|ИЗ
	|	Документ.ЗаключениеМедицинскогоОсмотра КАК ЗаключениеМедицинскогоОсмотра
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НомераРабочихМестСпециальнойОценкиУсловийТруда.РабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьНомераРабочихМестСпециальнойОценкиУсловийТруда КАК НомераРабочихМестСпециальнойОценкиУсловийТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеДатыСпециальнойОценкиУсловийТруда.РабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьПлановыеДатыСпециальнойОценкиУсловийТруда КАК ПлановыеДатыСпециальнойОценкиУсловийТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатыСпециальнойОценкиУсловийТруда.РабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьРезультатыСпециальнойОценкиУсловийТруда КАК РезультатыСпециальнойОценкиУсловийТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КлассыУсловийТрудаПоДолжностям.Должность
	|ИЗ
	|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
	|ГДЕ
	|	КлассыУсловийТрудаПоДолжностям.Должность ССЫЛКА Справочник.ШтатноеРасписание
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.РабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьАналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда КАК
	|		АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.АналогичноеРабочееМесто
	|ИЗ
	|	РегистрСведений.УдалитьАналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда КАК
	|		АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста.УдалитьРабочееМесто
	|ИЗ
	|	Документ.ПодготовкаСпецоценкиУсловийТруда.РабочиеМеста КАК ПодготовкаСпецоценкиУсловийТрудаРабочиеМеста
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста.УдалитьАналогичноеМесто
	|ИЗ
	|	Документ.ПодготовкаСпецоценкиУсловийТруда.АналогичныеМеста КАК ПодготовкаСпецоценкиУсловийТрудаАналогичныеМеста
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатыСпецоценкиУсловийТрудаРабочиеМеста.УдалитьРабочееМесто
	|ИЗ
	|	Документ.РезультатыСпецоценкиУсловийТруда.РабочиеМеста КАК РезультатыСпецоценкиУсловийТрудаРабочиеМеста
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатыСпецоценкиУсловийТрудаАналогичныеМеста.УдалитьАналогичноеМесто
	|ИЗ
	|	Документ.РезультатыСпецоценкиУсловийТруда.АналогичныеМеста КАК РезультатыСпецоценкиУсловийТрудаАналогичныеМеста
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДекларацияСоответствияУсловийТрудаРабочиеМеста.УдалитьРабочееМесто
	|ИЗ
	|	Документ.ДекларацияСоответствияУсловийТруда.РабочиеМеста КАК ДекларацияСоответствияУсловийТрудаРабочиеМеста
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НесчастныйСлучайНаПроизводствеПострадавшие.УдалитьДолжностьПоШтатномуРасписанию
	|ИЗ
	|	Документ.НесчастныйСлучайНаПроизводстве.Пострадавшие КАК НесчастныйСлучайНаПроизводствеПострадавшие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	НЕ ШтатноеРасписание.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией = ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	НЕ ШтатноеРасписание.ОснованиеДосрочногоНазначенияПенсии = ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	НЕ ШтатноеРасписание.ОсобыеУсловияТрудаПФР = ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	НЕ ШтатноеРасписание.КодПозицииСпискаПФР = ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.ВыплачиваетсяНадбавкаЗаВредность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМестаОхраныТруда.УдалитьДолжностьПоШтатномуРасписанию КАК Позиция
	|ПОМЕСТИТЬ ВТОбработанныеПозицииВРабочихМестах
	|ИЗ
	|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
	|ГДЕ
	|	НЕ РабочиеМестаОхраныТруда.УдалитьДолжностьПоШтатномуРасписанию = ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Позиции.Позиция КАК Позиция
	|ПОМЕСТИТЬ ВТПодходящиеПозиции
	|ИЗ
	|	ВТПозиции КАК Позиции
	|ГДЕ
	|	НЕ Позиции.Позиция В
	|		(ВЫБРАТЬ
	|			ОбработанныеПозиции.Позиция
	|		ИЗ
	|			ВТОбработанныеПозицииВРабочихМестах КАК ОбработанныеПозиции)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК Позиция
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодходящиеПозиции КАК ПодходящиеПозиции
	|		ПО ШтатноеРасписание.Ссылка = ПодходящиеПозиции.Позиция
	|		И НЕ ШтатноеРасписание.ГруппаПозицийПодразделения";
	
	// АПК:96 -вкл
	
КонецФункции

Функция ОдинаковыеНаборыВзносовВредностиПФРПоПозициям(ОбновляемыеДанные)
	
	НаборыВзносовВредностиПФРПоПозициям = Новый Соответствие();
	
	ВыборкаПозиция = ОбновляемыеДанные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйПроход = Истина;
	
	Пока ВыборкаПозиция.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПозиция.Позиция) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияВзносовВредностиПФРПозиции = ЗначенияВзносовВредностиПФР(ВыборкаПозиция.Позиция,, Истина);
		
		Если ПервыйПроход Тогда
			НаборыВзносовВредностиПФРПоПозициям.Вставить(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаПозиция.Позиция), ЗначенияВзносовВредностиПФРПозиции);
			ПервыйПроход = Ложь;
			Продолжить;
		КонецЕсли;
		
		СоответствиеНайдено = Ложь;
		
		Для Каждого КлючИЗначение Из НаборыВзносовВредностиПФРПоПозициям Цикл
			Если ОбщегоНазначения.ДанныеСовпадают(КлючИЗначение.Значение, ЗначенияВзносовВредностиПФРПозиции) Тогда
				КлючИЗначение.Ключ.Добавить(ВыборкаПозиция.Позиция);
				СоответствиеНайдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СоответствиеНайдено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборыВзносовВредностиПФРПоПозициям.Вставить(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаПозиция.Позиция), ЗначенияВзносовВредностиПФРПозиции);
		
	КонецЦикла;
	
	Возврат НаборыВзносовВредностиПФРПоПозициям;
	
КонецФункции

Функция УсловияТрудаПоНаборуВзносовВредностиПФР(НаборДанных)
	
	НовоеНаименованиеУсловийТруда = ЗаголовокНаОснованииНабораДанных(НаборДанных);
	
	Если ПустаяСтрока(НовоеНаименованиеУсловийТруда) Тогда
		Возврат Справочники.УсловияТруда.НормальныеУсловия;
	КонецЕсли;
	
	НайденныеУсловияТруда = Справочники.УсловияТруда.НайтиПоНаименованию(НовоеНаименованиеУсловийТруда, Истина);
	
	Если ЗначениеЗаполнено(НайденныеУсловияТруда) Тогда
		Возврат НайденныеУсловияТруда;
	КонецЕсли;
	
	ОбъектУсловияТруда = Справочники.УсловияТруда.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектУсловияТруда, НаборДанных);
	ОбъектУсловияТруда.Наименование = НовоеНаименованиеУсловийТруда;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектУсловияТруда);	
	
	Возврат ОбъектУсловияТруда.Ссылка;

КонецФункции

Функция ЗаголовокНаОснованииНабораДанных(НаборДанных) Экспорт
	
	ЧастиСтроки = Новый Массив();
	
	ВидРаботСДосрочнойПенсией = НаборДанных.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией;
	
	Если ЗначениеЗаполнено(ВидРаботСДосрочнойПенсией) Тогда
		Если ВидРаботСДосрочнойПенсией = Перечисления.ВидыРаботСДосрочнойПенсией.ПодземныеИВредныеРаботы Тогда
			ЧастиСтроки.Добавить(НСтр("ru = 'Подпункт 1';
										|en = 'Subclause 1'"));
		ИначеЕсли ВидРаботСДосрочнойПенсией = Перечисления.ВидыРаботСДосрочнойПенсией.ТяжелыеИПрочиеРаботы Тогда
			ЧастиСтроки.Добавить(НСтр("ru = 'Подпункты 2 - 18';
										|en = 'Subclauses 2 - 18'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаборДанных.ОснованиеДосрочногоНазначенияПенсии) Тогда
		Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборДанных.ОснованиеДосрочногоНазначенияПенсии, "Код");
		ЧастиСтроки.Добавить(СокрЛП(Код));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаборДанных.ОсобыеУсловияТрудаПФР) Тогда
		Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборДанных.ОсобыеУсловияТрудаПФР, "Код");
		ЧастиСтроки.Добавить(СокрЛП(Код));
	КонецЕсли;

	Если НаборДанных.ВыплачиваетсяНадбавкаЗаВредность Тогда
		Если ЗначениеЗаполнено(НаборДанных.ПроцентНадбавкиЗаВредность) Тогда
			ЧастиСтроки.Добавить(СтрШаблон(НСтр("ru = 'Надбавка %1';
												|en = 'Allowance %1'"), НаборДанных.ПроцентНадбавкиЗаВредность) + "%");
		КонецЕсли;
		Если НаборДанных.Свойство("КоличествоДнейДополнительногоОтпускаВГод")
		 И ЗначениеЗаполнено(НаборДанных.КоличествоДнейДополнительногоОтпускаВГод) Тогда
			ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 день отпуска;;%1 дня отпуска;%1 дней отпуска;';
					|en = '; %1 leave day;;;%1 leave days;'"),
				НаборДанных.КоличествоДнейДополнительногоОтпускаВГод));
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(НаборДанных.КодПозицииСпискаПФР) Тогда
		Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборДанных.КодПозицииСпискаПФР, "Код");
		ЧастиСтроки.Добавить(СокрЛП(Код));
	КонецЕсли;
	
	Если ЧастиСтроки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиСтроки, "," + Символы.НПП);
	
КонецФункции

Функция ПредварительныйТекстЗапросаРабочиеМестаСотрудниковТребующиеОбработки()
	
	// АПК:96 -выкл результат должен содержать уникальные значения
	
	Возврат
		"ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период,
		|	КлассыУсловийТрудаПоДолжностям.Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	КлассыУсловийТрудаПоДолжностям.Основание
		|ПОМЕСТИТЬ ВТКлассыУсловийТрудаПоДолжностям
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Должность ССЫЛКА Справочник.ШтатноеРасписание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлассыУсловийТрудаПоДолжностям.Должность КАК РабочееМесто
		|ПОМЕСТИТЬ ВТОбработанныеКлассыУсловийТруда
		|ИЗ
		|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|ГДЕ
		|	КлассыУсловийТрудаПоДолжностям.Должность ССЫЛКА Справочник.РабочиеМестаОхраныТруда
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаОхраныТруда.Ссылка КАК РабочееМесто,
		|	ШтатноеРасписание.Ссылка КАК Позиция
		|ПОМЕСТИТЬ ВТСвязиРабочихМестСПозициямиНеОтобранные
		|ИЗ
		|	Справочник.РабочиеМестаОхраныТруда КАК РабочиеМестаОхраныТруда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО РабочиеМестаОхраныТруда.УдалитьДолжностьПоШтатномуРасписанию = ШтатноеРасписание.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиРабочихМестСПозициямиНеОтобранные.РабочееМесто КАК РабочееМесто,
		|	СвязиРабочихМестСПозициямиНеОтобранные.Позиция КАК Позиция
		|ПОМЕСТИТЬ ВТСвязиРабочихМестСПозициями
		|ИЗ
		|	ВТСвязиРабочихМестСПозициямиНеОтобранные КАК СвязиРабочихМестСПозициямиНеОтобранные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО СвязиРабочихМестСПозициямиНеОтобранные.Позиция = КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО СвязиРабочихМестСПозициямиНеОтобранные.РабочееМесто = РабочиеМестаСотрудников.РабочееМесто
		|ГДЕ
		|	РабочиеМестаСотрудников.РабочееМесто ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиРабочихМестСПозициямиНеОтобранные.РабочееМесто,
		|	СвязиРабочихМестСПозициямиНеОтобранные.Позиция
		|ИЗ
		|	ВТСвязиРабочихМестСПозициямиНеОтобранные КАК СвязиРабочихМестСПозициямиНеОтобранные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ПО СвязиРабочихМестСПозициямиНеОтобранные.Позиция = КлассыУсловийТрудаПоДолжностям.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеКлассыУсловийТруда КАК ОбработанныеКлассыУсловийТруда
		|		ПО СвязиРабочихМестСПозициямиНеОтобранные.РабочееМесто = ОбработанныеКлассыУсловийТруда.РабочееМесто
		|ГДЕ
		|	ОбработанныеКлассыУсловийТруда.РабочееМесто ЕСТЬ NULL";
	
	// АПК:96 -вкл
	
КонецФункции

Функция ОсновнойТекстЗапросаРабочиеМестаСотрудниковТребующиеОбработки()
	
	Возврат
		"ВЫБРАТЬ
		|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
		|	СвязиРабочихМестСПозициями.РабочееМесто КАК Должность,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК ДатаРегистрацииИзменений,
		|	КлассыУсловийТрудаПоДолжностям.Основание КАК Основание
		|ИЗ
		|	ВТКлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязиРабочихМестСПозициями КАК СвязиРабочихМестСПозициями
		|		ПО КлассыУсловийТрудаПоДолжностям.Должность = СвязиРабочихМестСПозициями.Позиция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбработанныеКлассыУсловийТруда КАК ОбработанныеКлассыУсловийТруда
		|		ПО (СвязиРабочихМестСПозициями.РабочееМесто = ОбработанныеКлассыУсловийТруда.РабочееМесто)
		|ГДЕ
		|	ОбработанныеКлассыУсловийТруда.РабочееМесто ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	КлассыУсловийТрудаПоДолжностям.Период,
		|	СвязиРабочихМестСПозициями.РабочееМесто,
		|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда,
		|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений,
		|	КлассыУсловийТрудаПоДолжностям.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.РегистраторЗаписи КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЕСТЬNULL(СвязиРабочихМестСПозициями.РабочееМесто, ЗНАЧЕНИЕ(Справочник.РабочиеМестаОхраныТруда.ПустаяСсылка))) КАК РабочееМесто,
		|	КадроваяИсторияСотрудников.ПериодВозвратногоСобытия КАК ДействуетДо
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиРабочихМестСПозициями КАК СвязиРабочихМестСПозициями
		|		ПО КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = СвязиРабочихМестСПозициями.Позиция
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО (СвязиРабочихМестСПозициями.РабочееМесто = РабочиеМестаСотрудников.РабочееМесто)
		|ГДЕ
		|	РабочиеМестаСотрудников.РабочееМесто ЕСТЬ NULL
		|	И НЕ КадроваяИсторияСотрудников.РегистраторЗаписи ССЫЛКА Документ.Увольнение
		|	И НЕ КадроваяИсторияСотрудников.РегистраторЗаписи ССЫЛКА Документ.УвольнениеСписком
		|	И НЕ КадроваяИсторияСотрудников.РегистраторЗаписи ССЫЛКА Документ.ПрекращениеПодработки
		|	И ВЫБОР
		|			КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|				ТОГДА НЕ СвязиРабочихМестСПозициями.РабочееМесто ЕСТЬ NULL
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.ПериодВозвратногоСобытия,
		|	КадроваяИсторияСотрудников.РегистраторЗаписи,
		|	КадроваяИсторияСотрудников.ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКадроваяИсторияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКлассыУсловийТрудаПоДолжностям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОбработанныеКлассыУсловийТруда
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвязиРабочихМестСПозициямиНеОтобранные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвязиРабочихМестСПозициями";
	
КонецФункции

Процедура ЗарегистрироватьРабочиеМестаСотрудников(ВыборкаРегистратор)
	
	Пока ВыборкаРегистратор.Следующий() Цикл
		ДокументСсылка = ВыборкаРегистратор.Регистратор;
		ТипДокумента = ТипЗнч(ДокументСсылка);
		ИмяДокумента = Метаданные.НайтиПоТипу(ТипДокумента).Имя;
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.РабочиеМестаСотрудников");
		ЭлементБлокировки = Блокировка.Добавить(ДокументСсылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.РабочиеМестаСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
		
		СтруктураПоиска = Новый Структура("Сотрудник");
		ЗаписатьДокумент = Ложь;
		
		ВыборкаРабочихМест = ВыборкаРегистратор.Выбрать();
		Пока ВыборкаРабочихМест.Следующий() Цикл
			НовоеРабочееМестоСотрудника = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеРабочееМестоСотрудника, ВыборкаРабочихМест);
			Если ТипДокумента = Тип("ДокументСсылка.ВосстановлениеВДолжности")
			 Или ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботу")
			 Или ТипДокумента = Тип("ДокументСсылка.НазначениеПодработки") Тогда
				ДокументОбъект.РабочееМесто = ВыборкаРабочихМест.РабочееМесто;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КадровыйПеревод") Тогда
				ДокументОбъект.РабочееМесто = ВыборкаРабочихМест.РабочееМесто;
				ДокументОбъект.ИзменитьРабочееМесто = Истина;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка")
			 Или ТипДокумента = Тип("ДокументСсылка.ПеремещениеВДругоеПодразделение")
			 Или ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботуСписком")
			 Или ТипДокумента = Тип("ДокументСсылка.КадровыйПереводСписком") Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРабочихМест);
				СтрокиТЧ = ДокументОбъект.Сотрудники.НайтиСтроки(СтруктураПоиска);
				Если СтрокиТЧ.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТЧ = СтрокиТЧ[0];
				СтрокаТЧ.РабочееМесто = ВыборкаРабочихМест.РабочееМесто;
				Если ТипДокумента = Тип("ДокументСсылка.КадровыйПереводСписком") Тогда
					СтрокаТЧ.ИзменитьРабочееМесто = Истина;
				КонецЕсли;
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПереносДанных") Тогда
				НовыйРегистр = ДокументОбъект.ТаблицаРегистров.Добавить();
				НовыйРегистр.Имя = "РабочиеМестаСотрудников";
			Иначе
				Продолжить;
			КонецЕсли;
			ЗаписатьДокумент = Истина;			
		КонецЦикла;
		
		Если НаборЗаписей.Количество() > 0 И ЗначениеЗаполнено(НаборЗаписей[0].Регистратор) Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли; 
		
		Если Не ЗаписатьДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		Если ТипДокумента = Тип("ДокументСсылка.КадровыйПереводСписком") Тогда			
			ДанныеДляРегистрацииВУчете = Документы.КадровыйПеревод.ДанныеДляРегистрацииВУчетаСтажаПФР(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка), Истина);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботу")
			Или ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботуСписком")
			Или ТипДокумента = Тип("ДокументСсылка.КадровыйПеревод")
			Или ТипДокумента = Тип("ДокументСсылка.ВосстановлениеВДолжности")
			Или ТипДокумента = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") 
			Или ТипДокумента = Тип("ДокументСсылка.ПеремещениеВДругоеПодразделение") Тогда
				
			ДанныеДляРегистрацииВУчете = Документы[ИмяДокумента].ДанныеДляРегистрацииВУчетаСтажаПФР(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка));
		Иначе
			Продолжить;
		КонецЕсли;
		
		УчетСтажаПФР.ЗарегистрироватьПериодыВУчетеСтажаПФР(ДокументОбъект.Движения, ДанныеДляРегистрацииВУчете.Получить(ДокументСсылка));
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ДокументОбъект.Движения.ПараметрыПериодовСтажаПФР);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИспользованиеОсобыхУсловийТруда(ПараметрыОбновления)
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Константа.ИспользоватьОсобыеУсловияТруда");
		Блокировка.Заблокировать();
	
		МенеджерКонстанты = Константы.ИспользоватьОсобыеУсловияТруда.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление информационной базы.Не удалось установить использование особых условий труда';
				|en = 'Infobase update. Cannot set special working conditions'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыФункциональныхОпций(Организация)
	
	ПараметрыФО = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФО.Вставить("Организация", Организация);
	КонецЕсли;
	
	Возврат ПараметрыФО;
	
КонецФункции

#КонецОбласти