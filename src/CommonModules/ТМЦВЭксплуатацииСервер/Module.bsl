////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы ТМЦ в эксплуатации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//++ НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СтоимостьТМЦВЭксплуатации);
		//-- НЕ УТ
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		//++ НЕ УТ
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации);
		//-- НЕ УТ
		
	КонецЕсли;
	
	ТМЦВЭксплуатацииЛокализация.ДополнитьПараметрыДляПроведенияДокумента(Параметры, Документ, Свойства);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	ТекстыЗапросов = Новый Соответствие();
	//++ НЕ УТ
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТМЦВЭксплуатации;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	//-- НЕ УТ
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТМЦВЭксплуатации");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СтоимостьТМЦВЭксплуатации");

	ТМЦВЭксплуатацииЛокализация.ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ);
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	//++ НЕ УТ
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОборотов.Организация  КАК Организация,
			|	ТаблицаОборотов.Подразделение КАК Подразделение,
			|	ТаблицаОборотов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаОборотов.Номенклатура КАК Номенклатура,
			|	ТаблицаОборотов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОборотов.Характеристика КАК Характеристика,
			|	ТаблицаОборотов.Серия КАК Серия,
			|	ТаблицаОборотов.Партия КАК Партия,
			|	ТаблицаОборотов.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ТаблицаОборотов.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ТаблицаОборотов.НомерГТД КАК НомерГТД,
			|	ТаблицаОборотов.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ТМЦВЭксплуатации.Остатки(,
			|			(Организация, Подразделение, ФизическоеЛицо, Номенклатура, Характеристика, Серия, Партия, НаправлениеДеятельности, ИнвентарныйНомер, НомерГТД) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.ФизическоеЛицо,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.Партия,
			|					Таблица.НаправлениеДеятельности,
			|					Таблица.ИнвентарныйНомер,
			|					Таблица.НомерГТД
			|				ИЗ
			|					ДвиженияТМЦВЭксплуатацииИзменение КАК Таблица)
			|	) КАК ТаблицаОборотов
			|ГДЕ
			|	ТаблицаОборотов.КоличествоОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиТМЦВЭксплуатации");
		
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышен оперативный остаток в подразделении %1, на %2 %3';
								|en = 'Operational stock balance in business unit %1 is exceeded by %2 %3'");
		ШаблонСообщенияФизЛицо = НСтр("ru = 'Превышен оперативный остаток в подразделении %1 (физ. лицо %2), на %3 %4';
										|en = 'Operational stock balance in business unit %1 (person %2) is exceeded by %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТМЦВЭксплуатации Цикл
			
			Строки = Новый Массив;
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика,,
				СтрокаОшибки.Серия);
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Номенклатура: %1';
											|en = 'Items: %1'"), ПредставлениеНоменклатуры));

			Если ЗначениеЗаполнено(СтрокаОшибки.ИнвентарныйНомер) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Инв.№: %1';
													|en = 'Inv. No. %1'"), СокрЛП(СтрокаОшибки.ИнвентарныйНомер)));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.НаправлениеДеятельности) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Направление деятельности: %1';
													|en = 'Line of business: %1'"), СтрокаОшибки.НаправлениеДеятельности));
			КонецЕсли;

			Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Партия: %1';
												|en = 'Lot: %1'"), СтрокаОшибки.Партия));
				
			ТекстСообщения = СтрСоединить(Строки, НСтр("ru = ';';
														|en = ';'"));
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ФизическоеЛицо) Тогда
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщенияФизЛицо, СтрокаОшибки.Подразделение, СтрокаОшибки.ФизическоеЛицо, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			Иначе	
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщения, СтрокаОшибки.Подразделение, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотребление - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//  РежимЗаписи - РежимЗаписиДокумента - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
Процедура ВнутреннееПотребление_ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТ
	
	РеквизитыКатегорий = РеквизитыКатегорийЭксплуатации(Объект.Товары);
	
	ЗаполнитьРеквизитыПоКатегорииЭксплуатации(Объект.Товары);
	
	//-- НЕ УТ
	
	Справочники.ПартииТМЦВЭксплуатации.ЗаполнитьПартии(Объект, РежимЗаписи);
	
	//++ НЕ УТ

	СписокПартий = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Партия)
			И СписокПартий.Найти(СтрокаТЧ.Партия) = Неопределено Тогда
			СписокПартий.Добавить(СтрокаТЧ.Партия);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыПартий = Неопределено;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
			Продолжить;
		КонецЕсли;
				
		СвойстваКатегории = РеквизитыКатегорий.Получить(СтрокаТЧ.КатегорияЭксплуатации);
		
		Если СвойстваКатегории.УчитыватьВВидеГрупповогоОС Тогда
			
			Если РеквизитыПартий = Неопределено Тогда
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокПартий, "ОсновноеСредство");
			КонецЕсли;
			
			СвойстваПартии = РеквизитыПартий.Получить(СтрокаТЧ.Партия);
			СтрокаТЧ.АналитикаРасходов = СвойстваПартии.ОсновноеСредство;
			
		КонецЕсли;
			
	КонецЦикла;
	
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

// Проверяет заполнение инвентарного номера и количества.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  НепроверяемыеРеквизиты - Массив - Непроверяемые реквизиты.
//  Отказ - Булево - Истина, если проверка не пройдена.
//  ПараметрыПроверки - см. ПараметрыПроверкиИнвентарногоУчета
//
Процедура ПроверитьИнвентарныйУчет(Объект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт

	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиИнвентарногоУчета();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть
	
	НепроверяемыеРеквизиты.Добавить(ПараметрыПроверки.ИмяТЧ + ".ИнвентарныйНомер");
	
	СписокПартий = Новый Массив;
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Партия)
			И (НЕ ЗначениеЗаполнено(ДанныеСтроки.ИнвентарныйНомер)
				ИЛИ ДанныеСтроки.Количество > 1) Тогда
			
			СписокПартий.Добавить(ДанныеСтроки.Партия);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)
	|	И ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.ИнвентарныйУчет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПартииСИнвентарнымУчетом = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПартииСИнвентарнымУчетом.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	ШаблонСообщенияИнвентарныйНомер = НСтр("ru = 'Не заполнена колонка ""Инв. №"" в строке %1 списка ""%2""';
											|en = 'Column ""Inv. #"" in line %1 of list ""%2"" is not filled in'");
	
	ШаблонСообщенияКоличество = НСтр("ru = 'По партии ведется инвентарный учет, количество в единицах хранения должно быть установлено равным 1 в строке %1 списка ""%2""';
									|en = 'An inventory accounting is kept for the batch, the quantity in storage units must be set equal to 1 in the line %1 of the ""%2"" list'");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)
			ИЛИ ПартииСИнвентарнымУчетом.Получить(ДанныеСтроки.Партия) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИнвентарныйНомер) Тогда
			
			ТекстСообщения = 
				СтрШаблон(ШаблонСообщенияИнвентарныйНомер, 
					Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
					ПараметрыПроверки.ПредставлениеТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			
		КонецЕсли;

		Если ДанныеСтроки.Количество > 1 Тогда
			
			ТекстСообщения = 
				СтрШаблон(ШаблонСообщенияКоличество, 
					Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
					ПараметрыПроверки.ПредставлениеТЧ);
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, ПараметрыПроверки.ИмяРеквизитаКоличество);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры проверки инвентарного учета.
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ПредставлениеТЧ - Строка - значение по умолчанию "ТМЦ в эксплуатации".
//			* ИмяРеквизитаКоличество - Строка - значение по умолчанию "Количество".
//
Функция ПараметрыПроверкиИнвентарногоУчета() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ", "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ", НСтр("ru = 'ТМЦ в эксплуатации';
														|en = 'Inventory in operation'"));
	ПараметрыПроверки.Вставить("ИмяРеквизитаКоличество", "Количество");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет заполнение физ. лица.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  НепроверяемыеРеквизиты - Массив - Непроверяемые реквизиты.
//  Отказ - Булево - Истина, если проверка не пройдена.
//  ПараметрыПроверки - см. ПараметрыПроверкиУчетаПоФизЛицам
//
Процедура ПроверитьУчетПоФизЛицам(Объект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиУчетаПоФизЛицам();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть

	Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
		НепроверяемыеРеквизиты.Добавить(ПараметрыПроверки.ИмяТЧ + "." + ПараметрыРеквизита.Значение);
	КонецЦикла;

	СписокПартий = Новый Массив;
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПараметрыРеквизита.Значение]) Тогда
				СписокПартий.Добавить(ДанныеСтроки.Партия);
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	
	Если СписокПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)
	|	И ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчетПоФизЛицам";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПартииСУчетомПоФизЛицам = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПартииСУчетомПоФизЛицам.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""';
							|en = 'Column ""%1"" in line %2 of list ""%3"" is required'");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)
			ИЛИ ПартииСУчетомПоФизЛицам.Получить(ДанныеСтроки.Партия) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПараметрыРеквизита.Значение]) Тогда
				
				ТекстСообщения = 
					СтрШаблон(ШаблонСообщения, 
						ПараметрыРеквизита.Представление,
						Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
						ПараметрыПроверки.ПредставлениеТЧ);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, ПараметрыРеквизита.Значение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры проверки учета по физ. лицам.
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ПредставлениеТЧ - Строка - значение по умолчанию "ТМЦ в эксплуатации".
//			* РеквизитыФизическоеЛицо - СписокЗначений - значение по умолчанию "ФизическоеЛицо".
//
Функция ПараметрыПроверкиУчетаПоФизЛицам() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ", "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ", "ТМЦ в эксплуатации");
	
	СписокРеквизитов = Новый СписокЗначений();
	СписокРеквизитов.Добавить("ФизическоеЛицо", НСтр("ru = 'Физическое лицо';
													|en = 'Person'"));
	ПараметрыПроверки.Вставить("РеквизитыФизическоеЛицо", СписокРеквизитов);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Заполняет реквизиты документа по категории эксплуатации.
// 
// Параметры:
//  ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть.
//  РеквизитыКатегорий - Соответствие - Реквизиты категорий.
Процедура ЗаполнитьРеквизитыПоКатегорииЭксплуатации(ТабличнаяЧасть, РеквизитыКатегорий = Неопределено) Экспорт
	
	Если РеквизитыКатегорий = Неопределено Тогда
		РеквизитыКатегорий = РеквизитыКатегорийЭксплуатации(ТабличнаяЧасть);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации) Тогда
			Продолжить
		КонецЕсли;
				
		СвойстваКатегории = РеквизитыКатегорий.Получить(СтрокаТЧ.КатегорияЭксплуатации);
		
		НовыеЗначения = Новый Структура;
		
		Если НЕ СвойстваКатегории.ИнвентарныйУчет Тогда
			НовыеЗначения.Вставить("ИнвентарныйНомер", "");
		КонецЕсли;
		
		Если НЕ СвойстваКатегории.УчетПоФизЛицам Тогда
			НовыеЗначения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЕсли;
		
		Если НЕ СвойстваКатегории.УчитыватьВВидеГрупповогоОС Тогда
			НовыеЗначения.Вставить("ОсновноеСредство", Справочники.ОбъектыЭксплуатации.ПустаяСсылка());
		КонецЕсли;
		
		Если НовыеЗначения.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, НовыеЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты категорий эксплуатации документа.
// 
// Параметры:
//  Товары - ТабличнаяЧасть - Товары
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Реквизиты категорий эксплуатации:
//		* Ключ - СправочникСсылка.КатегорииЭксплуатации - Категория
//		* Значение - Структура из КлючИЗначение - Реквизиты
Функция РеквизитыКатегорийЭксплуатации(Товары) Экспорт
	
	СписокКатегорий = Новый Массив;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации)
			И СписокКатегорий.Найти(СтрокаТЧ.КатегорияЭксплуатации) = Неопределено Тогда
			СписокКатегорий.Добавить(СтрокаТЧ.КатегорияЭксплуатации);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыКатегорий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			СписокКатегорий, "УчетПоФизЛицам,УчитыватьВВидеГрупповогоОС,ИнвентарныйУчет");

	Возврат РеквизитыКатегорий;
		
КонецФункции

//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ

#Область ШтрихкодыИТорговоеОборудование

// Находит ТМЦ по штрихкодам.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - см. ПараметрыПодбораПоШтрихкодам
// 	
// Возвращаемое значение:
// 	Структура - содержит:
//    * ТаблицаОбъектов - ТаблицаЗначений - найденные объекты.
//    * НеНайдены - Массив из Строка - штрихкоды, по которым не удалось найти объекты.
//    * НеПодходят - Массив из СправочникСсылка.ОбъектыЭксплуатации - Объекты, которые не подходят по параметрам подбора.
Функция НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаОбъектов", Новый ТаблицаЗначений);
	Результат.Вставить("НеПодходят", Новый Массив);
	Результат.Вставить("НеНайдены", Новый Массив);

	МассивШтрихкодов = МассивШтрихкодов(ДанныеШтрихкодов);
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТМЦВЭксплуатации.Организация КАК Организация,
	|	ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.Партия КАК Партия,
	|	ТМЦВЭксплуатации.Партия.Наименование КАК ПартияПредставление,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ИнвентарныйУчет КАК ИнвентарныйУчет,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.УчетПоФизЛицам КАК УчетПоФизЛицам,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ КАК СпособПогашенияСтоимостиБУ,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ОбъемНаработки КАК ОбъемНаработки,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|
	|	СУММА(ТМЦВЭксплуатации.КоличествоОстаток) КАК Количество
	|
	|ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|			&Дата,
	|			(Организация = &Организация
	|					ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|				И (Подразделение = &Подразделение
	|					ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|				И (ФизическоеЛицо = &ФизическоеЛицо
	|					ИЛИ &ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|				И (ИнвентарныйНомер В (&МассивШтрихкодов))
	|
	|			) КАК ТМЦВЭксплуатации
	|ГДЕ
	|	ТМЦВЭксплуатации.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМЦВЭксплуатации.Организация,
	|	ТМЦВЭксплуатации.Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика,
	|	ТМЦВЭксплуатации.Серия,
	|	ТМЦВЭксплуатации.Партия,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТМЦВЭксплуатации.ФизическоеЛицо.Представление,
	|	ТМЦВЭксплуатации.Номенклатура.Представление,
	|	ТМЦВЭксплуатации.Характеристика.Представление,
	|	ТМЦВЭксплуатации.Серия.Представление,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);

	Если ПараметрыПодбора = Неопределено Тогда
		ПараметрыПодбора = ПараметрыПодбораПоШтрихкодам();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ПараметрыПодбора.Дата);
	Запрос.УстановитьПараметр("Организация", ПараметрыПодбора.Организация);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыПодбора.Подразделение);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыПодбора.ФизическоеЛицо);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	НеНайдены = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		Если ТаблицаОбъектов.Найти(Штрихкод, "ИнвентарныйНомер") = Неопределено Тогда
			НеНайдены.Добавить(Штрихкод);
		КонецЕсли; 
	КонецЦикла; 
	
	НеПодходят = Новый Массив;
	
	Результат.ТаблицаОбъектов = ТаблицаОбъектов;
	Результат.НеПодходят = НеПодходят;
	Результат.НеНайдены = НеНайдены;
	
	Возврат Результат;

КонецФункции

// Сообщает о результатах поиска по штрихкоду.
// 
// Параметры:
// 	РезультатПоиска - см. НайтиОбъектыПоШтрихкодам
Процедура СообщитьОРезультатахПоискаПоШтрихкоду(РезультатПоиска) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'ТМЦ в эксплуатации с инвентарным номером %1 не найдено';
							|en = 'Inventory in operation with inventory number %1 is not found'");
	Для каждого Штрихкод Из РезультатПоиска.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'ТМЦ в эксплуатации ""%1"" не может быть добавлено в документ, т.к. оно не удовлетворяет условиям выбора';
							|en = 'The ""%1"" inventory in operation cannot be added to the document. It does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из РезультатПоиска.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
КонецПроцедуры

// Получает список штрихкодов из результата ввода.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  
// Возвращаемое значение:
// 	Массив - 
Функция МассивШтрихкодов(ДанныеШтрихкодов) Экспорт
	
	МассивШтрихкодов = Новый Массив;
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		Для каждого СтрокаШтрихкод Из ДанныеШтрихкодов Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
				МассивШтрихкодов.Добавить(СтрокаШтрихкод.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкодов.Штрихкод) Тогда
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов.Штрихкод);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивШтрихкодов);
	
	Возврат МассивШтрихкодов;
	
КонецФункции

// Параметры подбора по штрихкодам.
// 
// Возвращаемое значение:
//  Структура - Параметры подбора по штрихкодам:
// 		* Дата - Дата -
// 		* Организация - СправочникСсылка.Организации -
// 		* Подразделение - СправочникСсылка.СтруктураПредприятия -
// 		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица -
Функция ПараметрыПодбораПоШтрихкодам() Экспорт
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Дата", '000101010000');
	ПараметрыПодбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыПодбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыПодбора.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	Возврат ПараметрыПодбора;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#Область ОбработкаСтрокТабличнойЧасти

// Дополняет методы к выполнению.
// 
// Параметры:
//  МетодыКВыполнению - СписокЗначений из Строка -
Процедура ДополнитьМетодыКВыполнению(МетодыКВыполнению) Экспорт
	
	МетодыКВыполнению.Добавить("ЗаполнитьПризнакиКатегорииЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПризнакиКатегорииЭксплуатации");
	
	//++ НЕ УТ
	МетодыКВыполнению.Добавить("ЗаполнитьПартиюТМЦВЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПартиюТМЦВЭксплуатации");
	//-- НЕ УТ
	
КонецПроцедуры

// Дополняет методы к выполнению.
// 
// Параметры:
//  МетодыКВыполнению - СписокЗначений из Строка -
Процедура ДополнитьМетодыКВыполнениюПакетно(МетодыКВыполнению) Экспорт
	
	МетодыКВыполнению.Добавить("ЗаполнитьПризнакиКатегорииЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПризнакиКатегорииЭксплуатацииПакетно");
	
	//++ НЕ УТ
	МетодыКВыполнению.Добавить("ЗаполнитьПартиюТМЦВЭксплуатации", "ТМЦВЭксплуатацииСервер.ЗаполнитьПартиюТМЦВЭксплуатацииПакетно");
	//-- НЕ УТ
	
КонецПроцедуры

// Добавляет запросы в пакет запросов для получения данных, необходимых для обработки строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьОписаниеЗапросаПакетнойОбработкиТЧ(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	ДополнитьОписаниеЗапросаОбработкиТЧ_ПризнакиКатегорииЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения);
	
	//++ НЕ УТ
	ДополнитьОписаниеЗапросаОбработкиТЧ_ЗаполнитьПартиюТМЦВЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ТМЦВЭксплуатацииЛокализация.НастроитьВариантыОтчетов(Настройки);

	//++ НЕ УТ
	
	#Область ВедомостьТМЦВЭксплуатации
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьТМЦВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ количественного движения ТМЦ в эксплуатации и стоимостная оценка остатков.';
									|en = 'Analyze the quantitative movement of inventory in operation and evaluate available inventory.'");
	
	#КонецОбласти
	
	#Область ОстаткиТМЦВЭксплуатации
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТМЦВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ остатков ТМЦ в эксплуатации.';
									|en = 'Analysis of balance of inventory in operation.'");
	
	#КонецОбласти

	//-- НЕ УТ
	
КонецПроцедуры

//  См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа 
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	//++ НЕ УТ
	Списки.Вставить(Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации, Истина);
	Списки.Вставить(Метаданные.Документы.ОприходованиеТМЦВЭксплуатации, Истина);
	Списки.Вставить(Метаданные.Документы.ПеремещениеВЭксплуатации, Истина);
	Списки.Вставить(Метаданные.Документы.СписаниеИзЭксплуатации, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтоимостьТМЦВЭксплуатации, Истина);
	//-- НЕ УТ
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	СписокОбъектов.Добавить(Документы.ВводОстатковТМЦВЭксплуатации);

	//++ НЕ УТ
	СписокОбъектов.Добавить(Документы.ИнвентаризацияТМЦВЭксплуатации);
	СписокОбъектов.Добавить(Документы.ОприходованиеТМЦВЭксплуатации);
	СписокОбъектов.Добавить(Документы.ПеремещениеВЭксплуатации);
	СписокОбъектов.Добавить(Документы.СписаниеИзЭксплуатации);
	//-- НЕ УТ
	
КонецПроцедуры

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных (ОбъектМетаданных) с командами создания на основании.
//
// Пример:
//	Объекты.Добавить(Метаданные.Справочники.Организации);
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	//++ НЕ УТ
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации);
	//-- НЕ УТ

КонецПроцедуры

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт

	//++ НЕ УТ
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ИнвентаризацияТМЦВЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("4c03551b-5501-4b3a-8c04-129358da86fc");

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ОприходованиеТМЦВЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("9c244308-aad4-4466-9894-7c53492e4683");
	
	//-- НЕ УТ
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ВводОстатковТМЦВЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("7a5b4a72-72d0-4dd0-bb39-59f13c226572");
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	//++ НЕ УТ
	Если ТипВладелецФайла = Тип("ДокументСсылка.ИнвентаризацияТМЦВЭксплуатации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ОприходованиеТМЦВЭксплуатации") Тогда
		ИменаСправочников.Вставить("ДокументыВНАПрисоединенныеФайлы", Истина);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Определяет возможен ли учет серий в эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть учетная политика с включенным учетом серий в эксплуатации
Функция ВозможенУчетСерийВЭксплуатации() Экспорт
	
	Результат = Ложь;
	
	//++ НЕ УТ
	
	ИспользоватьСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	Если НЕ ИспользоватьСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	Результат = НЕ Результат.Пустой();
	
	//-- НЕ УТ
	
	Возврат Результат;
	
КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
	Объекты.Добавить(Метаданные.Документы.ВводОстатковТМЦВЭксплуатации);

	//++ НЕ УТ
	Объекты.Добавить(Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации);
	Объекты.Добавить(Метаданные.Документы.ОприходованиеТМЦВЭксплуатации);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеВЭксплуатации);
	Объекты.Добавить(Метаданные.Документы.СписаниеИзЭксплуатации);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовПоТМЦВЭксплуатации);
	//-- НЕ УТ
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ВводОстатковТМЦВЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВводОстатков",
		"Организация");
										
	//++ НЕ УТ
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.РегистрыНакопления.ТМЦВЭксплуатации.ПолноеИмя(),
		"Период",
		"ВнутреннееТовародвижение",
		"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ПеремещениеВЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВнутреннееТовародвижение",
		"Организация");
										
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СписаниеИзЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВнутреннееТовародвижение",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОприходованиеТМЦВЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВнутреннееТовародвижение",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ИнвентаризацияТМЦВЭксплуатации.ПолноеИмя(),
		"Дата",
		"ВнутреннееТовародвижение",
		"Организация");
	
	//-- НЕ УТ
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на изменение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеНаИзменение(ОписаниеПрофиля) Экспорт
	
	ТМЦВЭксплуатацииЛокализация.ДобавитьРолиДляДоступаКПодсистемеНаИзменение(ОписаниеПрофиля);
	
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКатегорийЭксплуатации");

	//++ НЕ УТ
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийИзЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийВЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОприходованийТМЦВЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИнвентаризацийТМЦВЭксплуатации");

	ОписаниеПрофиля.Роли.Добавить("ЧтениеТМЦВЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовПоТМЦВЭксплуатации");
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

// Устанавливает условное оформление инвентарного номера.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой устанавливается условное оформление.
//  ИмяПоляИнвентарныйНомер - Строка - Имя поля "ИнвентарныйНомер" на форме.
//  ПутьКПолюИнвентарныйУчет - Строка - Путь к полю "ИнвентарныйНомер".
//  ПутьКПолюПартия - Строка - Путь к полю "Партия".
Процедура УстановитьУсловноеОформлениеИнвентарногоНомера(Форма, ИмяПоляИнвентарныйНомер = "", ПутьКПолюИнвентарныйУчет = "", ПутьКПолюПартия = "") Экспорт
	
	Если ИмяПоляИнвентарныйНомер = "" Тогда
		ИмяПоляИнвентарныйНомер = "ТоварыИнвентарныйНомер";
	КонецЕсли;
	
	Если ПутьКПолюИнвентарныйУчет = "" Тогда
		ПутьКПолюИнвентарныйУчет = "Объект.Товары.ИнвентарныйУчет";
	КонецЕсли;
	
	Если ПутьКПолюПартия = "" Тогда
		ПутьКПолюПартия = "Объект.Товары.Партия";
	КонецЕсли;

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляИнвентарныйНомер]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюИнвентарныйУчет);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Если ПутьКПолюПартия <> Неопределено Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПартия);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																					|en = '<not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление физ. лица.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой устанавливается условное оформление.
//  ИмяПоляФизЛицо - Строка - Имя поля "ФизическоеЛицо" на форме.
//  ПутьКПолюУчетПоФизЛицам - Строка - Путь к полю "УчетПоФизЛицам".
//  ПутьКПолюПартия - Строка - Путь к полю "Партия".
Процедура УстановитьУсловноеОформлениеФизЛица(Форма, ИмяПоляФизЛицо = "", ПутьКПолюУчетПоФизЛицам = "", ПутьКПолюПартия = "") Экспорт
	
	Если ИмяПоляФизЛицо = "" Тогда
		ИмяПоляФизЛицо = "ТоварыФизическоеЛицо";
	КонецЕсли;
	
	Если ПутьКПолюУчетПоФизЛицам = "" Тогда
		ПутьКПолюУчетПоФизЛицам = "Объект.Товары.УчетПоФизЛицам";
	КонецЕсли;
	
	Если ПутьКПолюПартия = "" Тогда
		ПутьКПолюПартия = "Объект.Товары.Партия";
	КонецЕсли;

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляФизЛицо]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюУчетПоФизЛицам);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Если ПутьКПолюПартия <> Неопределено Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПартия);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	КонецЕсли;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																					|en = '<not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Заполнить служебные реквизиты по партии ТМЦ.
// 
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть.
Процедура ЗаполнитьСлужебныеРеквизитыПоПартииТМЦ(ТабличнаяЧасть) Экспорт

	СписокПартий = Новый Массив;
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		СписокПартий.Добавить(ДанныеСтроки.Партия); 
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка КАК Ссылка,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.ИнвентарныйУчет КАК ИнвентарныйУчет,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчетПоФизЛицам КАК УчетПоФизЛицам,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС КАК УчитыватьВВидеГрупповогоОС
	|ИЗ 
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПараметрыПартий = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПараметрыПартии = Новый Структура;
		ПараметрыПартии.Вставить("ИнвентарныйУчет", Выборка.ИнвентарныйУчет);
		ПараметрыПартии.Вставить("УчетПоФизЛицам", Выборка.УчетПоФизЛицам);
		ПараметрыПартии.Вставить("УчитыватьВВидеГрупповогоОС", Выборка.УчитыватьВВидеГрупповогоОС);
		ПараметрыПартий.Вставить(Выборка.Ссылка, ПараметрыПартии);
	КонецЦикла;
	
	ЗначенияЗаполнения = Новый Структура("ИнвентарныйУчет,УчетПоФизЛицам,УчитыватьВВидеГрупповогоОС");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		ПараметрыПартии = ПараметрыПартий.Получить(ДанныеСтроки.Партия);
		
		Если ПараметрыПартии <> Неопределено Тогда
			ЗначенияЗаполнения.ИнвентарныйУчет = ПараметрыПартии.ИнвентарныйУчет;
			ЗначенияЗаполнения.УчетПоФизЛицам = ПараметрыПартии.УчетПоФизЛицам;
			ЗначенияЗаполнения.УчитыватьВВидеГрупповогоОС = ПараметрыПартии.УчитыватьВВидеГрупповогоОС;
		Иначе
			ЗначенияЗаполнения.ИнвентарныйУчет = Ложь;
			ЗначенияЗаполнения.УчетПоФизЛицам = Ложь;
			ЗначенияЗаполнения.УчитыватьВВидеГрупповогоОС = Ложь;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЗначенияЗаполнения);
	
	КонецЦикла;
	
КонецПроцедуры

// Генерирует новый инвентарный номер.
// 
// Параметры:
//  УчестьИнвентарныеНомера - Массив - Учесть инвентарные номера.
//  ИсключитьДокумент - ДокументСсылка - Исключить движения документа.
// 
// Возвращаемое значение:
//	Строка - Новый инвентарный номер.
Функция НовыйИнвентарныйНомер(УчестьИнвентарныеНомера = Неопределено, ИсключитьДокумент = Неопределено) Экспорт

	ДлинаНомера = Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип.КвалификаторыСтроки.Длина;
	
	ШаблонПоиска = "";
	Для индекс = 1 По ДлинаНомера Цикл
		ШаблонПоиска = ШаблонПоиска + "[0123456789]";
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПОДСТРОКА(ТМЦВЭксплуатации.ИнвентарныйНомер, 1, &ДлинаНомера) КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|ГДЕ
	|	ТМЦВЭксплуатации.ИнвентарныйНомер ПОДОБНО ""&ШаблонПоиска""
	|	И ТМЦВЭксплуатации.ИнвентарныйНомер <> """"
	|	И ТМЦВЭксплуатации.Регистратор <> &ИсключитьДокумент
	|	И ТМЦВЭксплуатации.Активность
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТМЦВЭксплуатации.ИнвентарныйНомер УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонПоиска", ШаблонПоиска);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаНомера", ДлинаНомера);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсключитьДокумент", ИсключитьДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.ИнвентарныйНомер) + 1;
	Иначе	
		ИнвентарныйНомерЧислом = 1;
	КонецЕсли;
	
	Если УчестьИнвентарныеНомера <> Неопределено Тогда
		
		ВсеИнвентарныеНомера = Новый СписокЗначений();
		ВсеИнвентарныеНомера.Добавить(ИнвентарныйНомерЧислом);
		
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		Для Каждого ИнвентарныйНомер Из УчестьИнвентарныеНомера Цикл
			ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(ИнвентарныйНомер);
			Если ИнвентарныйНомерЧислом <> 0 Тогда
				ВсеИнвентарныеНомера.Добавить(ИнвентарныйНомерЧислом + 1);
			КонецЕсли;
		КонецЦикла;
		
		ВсеИнвентарныеНомера.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИнвентарныйНомерЧислом = ВсеИнвентарныеНомера.Получить(0).Значение;
		
	КонецЕсли;
	
	Возврат Формат(ИнвентарныйНомерЧислом, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=;", Строка(ДлинаНомера)));
	
КонецФункции

// Генерирует новые инвентарные номера.
// 
// Параметры:
//	Количество - Число - Количество номеров.
//  УчестьИнвентарныеНомера - Массив - Учесть инвентарные номера.
//  ИсключитьДокумент - ДокументСсылка - Исключить движения документа.
// 
// Возвращаемое значение:
//	Массив из Строка - Новые инвентарные номера.
Функция НовыеИнвентарныеНомера(Количество, УчестьИнвентарныеНомера = Неопределено, ИсключитьДокумент = Неопределено) Экспорт
	
	НовыйИнвентарныйНомер = НовыйИнвентарныйНомер(УчестьИнвентарныеНомера, ИсключитьДокумент);
	
	НовыеИнвентарныеНомера = Новый Массив;
	НовыеИнвентарныеНомера.Добавить(НовыйИнвентарныйНомер);

	Если Количество > 1 Тогда
		
		ДлинаНомера = Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип.КвалификаторыСтроки.Длина;
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		
		ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(НовыйИнвентарныйНомер) + 1;
		Для Индекс = 2 По Количество Цикл
			НовыеИнвентарныеНомера.Добавить(Формат(ИнвентарныйНомерЧислом, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=;", Строка(ДлинаНомера))));
			ИнвентарныйНомерЧислом = ИнвентарныйНомерЧислом + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеИнвентарныеНомера;
	
КонецФункции

// Проверяет документ передачи ТМЦ в эксплуатацию.
//
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковТМЦВЭксплуатации, ДокументОбъект.ВнутреннееПотребление, ДокументОбъект.ОприходованиеТМЦВЭксплуатации - Обрабатываемый объект
//  НепроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет отключена проверка заполнения.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьПередачуВЭксплуатацию(Объект, НепроверяемыеРеквизиты, Отказ) Экспорт
	
	ТипДокумента = ТипЗнч(Объект);
	
	Если ТипДокумента = Тип("ДокументОбъект.ВводОстатковТМЦВЭксплуатации") Тогда
		ИмяТЧ = "ТМЦВЭксплуатации";
	Иначе
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить(ИмяТЧ + "." + "ИнвентарныйНомер");
	НепроверяемыеРеквизиты.Добавить(ИмяТЧ + "." + "ФизическоеЛицо");
	
	Если ТипДокумента = Тип("ДокументОбъект.ВнутреннееПотребление")
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОприходованиеТМЦВЭксплуатации = (ТипДокумента = Тип("ДокументОбъект.ОприходованиеТМЦВЭксплуатации"));
	
	Если ТипДокумента = Тип("ДокументОбъект.ВнутреннееПотребление") Тогда
		ПредставлениеТЧ = НСтр("ru = 'Товары';
								|en = 'Goods'");
	Иначе
		ПредставлениеТЧ = НСтр("ru = 'ТМЦ в эксплуатации';
								|en = 'Inventory in operation'");
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить("Товары.СтатьяРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаАктивовПассивов");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство,
	|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаДокумента.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|
	|ПОМЕСТИТЬ ДублиИнвентраныхНомеров
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДублей
	|		ПО ТаблицаДублей.ИнвентарныйНомер = ТаблицаДокумента.ИнвентарныйНомер
	|			И ТаблицаДублей.НомерСтроки <> ТаблицаДокумента.НомерСтроки
	|ГДЕ
	|	ТаблицаДокумента.ИнвентарныйНомер <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТаблицаДублей.НомерСтроки) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПроверки.НомерСтроки КАК НомерСтроки,
	|	РезультатПроверки.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	РезультатПроверки.СтатьяРасходов КАК СтатьяРасходов,
	|	РезультатПроверки.АналитикаРасходов КАК АналитикаРасходов,
	|	РезультатПроверки.ОсновноеСредство КАК ОсновноеСредство,
	|	РезультатПроверки.КатегорияЭксплуатации.Представление КАК КатегорияЭксплуатацииПредставление,
	|	РезультатПроверки.НеЗаполненИнвентарныйНомер КАК НеЗаполненИнвентарныйНомер,
	|	РезультатПроверки.НеЗаполненоФизическоеЛицо КАК НеЗаполненоФизическоеЛицо,
	|	РезультатПроверки.ОшибкаЗаполненияКоличества КАК ОшибкаЗаполненияКоличества,
	|	РезультатПроверки.ОшибкаДубль КАК ОшибкаДубль,
	|	РезультатПроверки.СтатьяНеФормированиеСтоимости КАК СтатьяНеФормированиеСтоимости,
	|	РезультатПроверки.ВыбраноНеГрупповоеОС КАК ВыбраноНеГрупповоеОС,
	|	РезультатПроверки.НеЗаполненаСтатьяРасходов КАК НеЗаполненаСтатьяРасходов,
	|	РезультатПроверки.ПроверитьАналитику КАК ПроверитьАналитику,
	|	РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС КАК НеПоддерживаетсяУчетВВидеГрупповогоОС,
	|	РезультатПроверки.НеУказанСпособПогашенияСтоимости КАК НеУказанСпособПогашенияСтоимости
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|		ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|		ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|		ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|		ТаблицаДокумента.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
	|	
	|		ТаблицаДокумента.ИнвентарныйНомер = """" 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК НеЗаполненИнвентарныйНомер,
	|
	|		ТаблицаДокумента.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчетПоФизЛицам, ЛОЖЬ) КАК НеЗаполненоФизическоеЛицо,
	|
	|		ТаблицаДокумента.Количество > 1 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК ОшибкаЗаполненияКоличества,
	|
	|		НЕ ДублиИнвентраныхНомеров.НомерСтроки ЕСТЬ NULL КАК ОшибкаДубль,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &ПоддерживаетсяУчетВВидеГрупповогоОС
	|			И &ЕстьСтатьяРасходов
	|			И НЕ (ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ТипРасходов, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|					И ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.РасходыНаОбъектыЭксплуатации, ЛОЖЬ)
	|					И (ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовУпр, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|						ИЛИ ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))) КАК СтатьяНеФормированиеСтоимости,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &ПоддерживаетсяУчетВВидеГрупповогоОС
	|			И ТаблицаДокумента.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			И ЕСТЬNULL(ТаблицаДокумента.ОсновноеСредство.ТипОС, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС) КАК ВыбраноНеГрупповоеОС,
	|
	|		&ЕстьСтатьяРасходов
	|		И ТаблицаДокумента.СтатьяРасходов В (
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка),
	|				НЕОПРЕДЕЛЕНО) КАК НеЗаполненаСтатьяРасходов,
	|
	|		&ЕстьСтатьяРасходов
	|		И НЕ ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И ТаблицаДокумента.СтатьяРасходов В (&СтатьиСОбязательнымЗаполнениемАналитики) КАК ПроверитьАналитику,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &ПоддерживаетсяУчетВВидеГрупповогоОС
	|			И &ПоддерживаетсяУчетДоПримененияФСБУ5
	|			И &Дата < &НачалоПримененияФСБУ5 КАК НеПоддерживаетсяУчетВВидеГрупповогоОС,
	|
	|		&Дата < &НачалоПримененияФСБУ5
	|			И &ПоддерживаетсяУчетДоПримененияФСБУ5
	|			И ТаблицаДокумента.КатегорияЭксплуатации <> ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)
	|			И ТаблицаДокумента.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПустаяСсылка) КАК НеУказанСпособПогашенияСтоимости
	|	ИЗ
	|		ТаблицаДокумента КАК ТаблицаДокумента
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДублиИнвентраныхНомеров КАК ДублиИнвентраныхНомеров
	|			ПО ДублиИнвентраныхНомеров.НомерСтроки = ТаблицаДокумента.НомерСтроки
	|
	|	) КАК РезультатПроверки
	|
	|ГДЕ
	|	(РезультатПроверки.НеЗаполненИнвентарныйНомер
	|		ИЛИ РезультатПроверки.НеЗаполненоФизическоеЛицо
	|		ИЛИ РезультатПроверки.ОшибкаЗаполненияКоличества
	|		ИЛИ РезультатПроверки.ОшибкаДубль
	|		ИЛИ РезультатПроверки.СтатьяНеФормированиеСтоимости
	|		ИЛИ РезультатПроверки.ВыбраноНеГрупповоеОС
	|		ИЛИ РезультатПроверки.НеЗаполненаСтатьяРасходов
	|		ИЛИ РезультатПроверки.ПроверитьАналитику
	|		ИЛИ РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС
	|		ИЛИ РезультатПроверки.НеУказанСпособПогашенияСтоимости)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокСтатей = Новый Массив;
	
	СписокКолонок = "НомерСтроки,КатегорияЭксплуатации,ФизическоеЛицо,ИнвентарныйНомер,Количество";
	Если ТипДокумента = Тип("ДокументОбъект.ВнутреннееПотребление") Тогда
		СписокКолонок = СписокКолонок + ",СтатьяРасходов,АналитикаРасходов,ОсновноеСредство";
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВводОстатковТМЦВЭксплуатации") Тогда
		СписокКолонок = СписокКолонок + ",ОсновноеСредство";
	КонецЕсли;
	
	ТаблицаДокумента = Объект[ИмяТЧ].Выгрузить(, СписокКолонок); // ТаблицаЗначений
	
	Если ЭтоОприходованиеТМЦВЭксплуатации Тогда
		
		ТаблицаДокумента.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		ТаблицаДокумента.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		ТаблицаДокумента.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации"));
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВводОстатковТМЦВЭксплуатации") Тогда
		
		ТаблицаДокумента.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
		ТаблицаДокумента.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		СтрокаТЧ.ИнвентарныйНомер = СокрЛП(СтрокаТЧ.ИнвентарныйНомер);
		Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
			СписокСтатей.Добавить(СтрокаТЧ.СтатьяРасходов);
		КонецЕсли;
	КонецЦикла;
	
	НачалоПримененияФСБУ5 = РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("НачалоПримененияФСБУ5", НачалоПримененияФСБУ5);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("СтатьиСОбязательнымЗаполнениемАналитики", ПланыВидовХарактеристик.СтатьиРасходов.СтатьиСОбязательнымЗаполнениемАналитики(СписокСтатей));
	Запрос.УстановитьПараметр("ПоддерживаетсяУчетВВидеГрупповогоОС", НЕ ЭтоОприходованиеТМЦВЭксплуатации);
	Запрос.УстановитьПараметр("ПоддерживаетсяУчетДоПримененияФСБУ5", НЕ ЭтоОприходованиеТМЦВЭксплуатации);
	
	Запрос.УстановитьПараметр(
		"ЕстьСтатьяРасходов", 
		НЕ ЭтоОприходованиеТМЦВЭксплуатации 
			И ТипДокумента <> Тип("ДокументОбъект.ВводОстатковТМЦВЭксплуатации"));
	
	Результат = Запрос.Выполнить();
		
	ШаблонНеЗаполненоПоле = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""';
								|en = 'Column ""%1"" in line #%2, list ""%3"" cannot be empty.'");
	
	ШаблонОшибкаЗаполненияКоличества = 
		НСтр("ru = 'По категории эксплуатации ведется инвентарный учет, количество в единицах хранения должно быть установлено равным 1 в строке %1 списка ""%2""';
			|en = 'Inventory accounting is kept for the operation category, the quantity in stock UOM must be equal to 1 in line %1 of the ""%2"" list'");
			
	ШаблонОшибкаДубль = НСтр("ru = 'Инвентарный номер ""%1"" в строке %2 списка ""%3"" повторяется в других строках документа';
							|en = 'The ""%1"" inventory number in line %2 of the ""%3"" list is repeated in other lines of the document'");
		
	ШаблонСтатьяНеФормированиеСтоимости = НСтр("ru = 'В строке %1 списка ""%2"" необходимо выбрать статью, расходы по которой относятся на стоимость основного средства';
												|en = 'In line %1 of the ""%2"" list, select an item whose expenses are allocated to the fixed asset cost'");

	ШаблонВыбраноНеГрупповоеОС = НСтр("ru = 'В строке %1 списка ""%2"" необходимо выбрать групповое основное средство или оставить его пустым';
										|en = 'In line %1 of the ""%2"" list, select a group fixed asset or leave it blank'");

	ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС = НСтр("ru = 'В строке %1 списка ""%2"" выбрана категория эксплуатации с учетом в виде группового ОС. Учет в виде группового ОС поддерживается с %3.';
														|en = 'Operation category with accounting as group fixed assets is selected in line %1 of the ""%2"" list. Accounting as group fixed assets is supported with %3.'");
	
	ШаблонСпособПогашенияСтоимости = НСтр("ru = 'Необходимо заполнить порядок погашения стоимости в категории эксплуатации ""%1"" в строке %2 списка ""%3""';
											|en = 'Fill the repayment procedure in the ""%1"" operation category in line %2 of the ""%3"" list'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненИнвентарныйНомер Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Инвентарный номер';
																	|en = 'Inventory number'"), Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненоФизическоеЛицо Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Физическое лицо';
																	|en = 'Person'"), Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ФизическоеЛицо");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ОшибкаЗаполненияКоличества Тогда
			ТекстСообщения = СтрШаблон(ШаблонОшибкаЗаполненияКоличества, Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ОшибкаДубль Тогда
			ТекстСообщения = СтрШаблон(ШаблонОшибкаДубль, Выборка.ИнвентарныйНомер, Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если Выборка.СтатьяНеФормированиеСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСтатьяНеФормированиеСтоимости, Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ВыбраноНеГрупповоеОС
			И ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
			ТекстСообщения = СтрШаблон(ШаблонВыбраноНеГрупповоеОС, Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненаСтатьяРасходов Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"), Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ПроверитьАналитику
			И НЕ ЗначениеЗаполнено(Выборка.АналитикаРасходов)
			И ЗначениеЗаполнено(Выборка.СтатьяРасходов) Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"), Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "АналитикаРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеПоддерживаетсяУчетВВидеГрупповогоОС Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС, Выборка.НомерСтроки, ПредставлениеТЧ, Формат(НачалоПримененияФСБУ5, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеУказанСпособПогашенияСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСпособПогашенияСтоимости, Выборка.КатегорияЭксплуатацииПредставление, Выборка.НомерСтроки, ПредставлениеТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заказ на передачу ТМЦ в эксплуатацию.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаВнутреннееПотребление - Обрабатываемый объект
//  НепроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет отключена проверка заполнения.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьЗаказНаПередачуВЭксплуатацию(Объект, НепроверяемыеРеквизиты, Отказ) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить("Товары.СтатьяРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаАктивовПассивов");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПроверки.НомерСтроки КАК НомерСтроки,
	|	РезультатПроверки.СтатьяРасходов КАК СтатьяРасходов,
	|	РезультатПроверки.АналитикаРасходов КАК АналитикаРасходов,
	|	РезультатПроверки.СтатьяНеФормированиеСтоимости КАК СтатьяНеФормированиеСтоимости,
	|	РезультатПроверки.НеЗаполненаСтатьяРасходов КАК НеЗаполненаСтатьяРасходов,
	|	РезультатПроверки.ПроверитьАналитику КАК ПроверитьАналитику,
	|	РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС КАК НеПоддерживаетсяУчетВВидеГрупповогоОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|		ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|		ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И НЕ (ТаблицаДокумента.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ТаблицаДокумента.СтатьяРасходов.РасходыНаОбъектыЭксплуатации
	|				И (ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					ИЛИ ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))) КАК СтатьяНеФормированиеСтоимости,
	|
	|		ТаблицаДокумента.СтатьяРасходов В (
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка),
	|				НЕОПРЕДЕЛЕНО) КАК НеЗаполненаСтатьяРасходов,
	|
	|		НЕ ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И ТаблицаДокумента.СтатьяРасходов В (&СтатьиСОбязательнымЗаполнениемАналитики) КАК ПроверитьАналитику,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &Дата < &НачалоПримененияФСБУ5 КАК НеПоддерживаетсяУчетВВидеГрупповогоОС
	|	ИЗ
	|		ТаблицаДокумента КАК ТаблицаДокумента
	|
	|	) КАК РезультатПроверки
	|
	|ГДЕ
	|	(РезультатПроверки.СтатьяНеФормированиеСтоимости
	|		ИЛИ РезультатПроверки.НеЗаполненаСтатьяРасходов
	|		ИЛИ РезультатПроверки.ПроверитьАналитику
	|		ИЛИ РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокСтатей = Новый Массив;
	ТаблицаДокумента = Объект.Товары.Выгрузить(, "НомерСтроки,КатегорияЭксплуатации,СтатьяРасходов,АналитикаРасходов,");
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
			СписокСтатей.Добавить(СтрокаТЧ.СтатьяРасходов);
		КонецЕсли;
	КонецЦикла;
	
	НачалоПримененияФСБУ5 = РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("НачалоПримененияФСБУ5", НачалоПримененияФСБУ5);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("СтатьиСОбязательнымЗаполнениемАналитики", ПланыВидовХарактеристик.СтатьиРасходов.СтатьиСОбязательнымЗаполнениемАналитики(СписокСтатей));
	
	Результат = Запрос.Выполнить();
		
	ШаблонНеЗаполненоПоле = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Товары""';
								|en = 'Column ""%1"" in line %2 of the ""Goods"" list is not filled in'");
	
	ШаблонСтатьяНеФормированиеСтоимости = НСтр("ru = 'В строке %1 списка ""Товары"" необходимо выбрать статью, расходы по которой относятся на стоимость основного средства';
												|en = 'In the %1line of the ""Goods"" list, select an item whose expenses are allocated to the fixed asset cost'");

	ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС = НСтр("ru = 'В строке %1 списка ""Товары"" выбрана категория эксплуатации с учетом в виде группового ОС. Учет в виде группового ОС поддерживается с %2.';
														|en = 'Operation category with accounting as group fixed assets is selected in the %1 line of the ""Goods"" list. Accounting as group fixed assets is supported with %2.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатьяНеФормированиеСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСтатьяНеФормированиеСтоимости, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненаСтатьяРасходов Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ПроверитьАналитику
			И НЕ ЗначениеЗаполнено(Выборка.АналитикаРасходов)
			И ЗначениеЗаполнено(Выборка.СтатьяРасходов) Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АналитикаРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеПоддерживаетсяУчетВВидеГрупповогоОС Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС, Выборка.НомерСтроки, Формат(НачалоПримененияФСБУ5, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается перед записью заказа на передачу в эксплуатацию.
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаВнутреннееПотребление - Обрабатываемый объект.
//  Отказ - Булево - Истина, если есть ошибки.
Процедура ПередЗаписьюЗаказаНаПередачуВЭксплуатацию(Объект, Отказ) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.АналитикаРасходов) = ТИП(Справочник.ОбъектыЭксплуатации)
	|	И ТаблицаДокумента.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)";
	
	ТаблицаДокумента = Объект.Товары.Выгрузить(, "НомерСтроки,КатегорияЭксплуатации,АналитикаРасходов,");

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = Объект.Товары[Выборка.НомерСтроки - 1];
		ДанныеСтроки.АналитикаРасходов= Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// См. ПланыВидовХарактеристик.СтатьиРасходов.ОбработкаПараметровВыбора
Процедура ОбработкаПараметровВыбораСтатьиРасходов(Параметры) Экспорт
	
	Если Параметры.Свойство("УчитыватьВВидеГрупповогоОС")
		И Параметры.УчитыватьВВидеГрупповогоОС Тогда
		Параметры.Отбор.Вставить("РасходыНаОбъектыЭксплуатации", Истина);
		Параметры.Отбор.Вставить("ТипРасходов", Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА);
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСтрокТабличнойЧасти

// Заполняет признаки категории эксплуатации в строке.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыСтруктура - Текущая строка.
//  СтруктураДействий - Структура - Структура действий.
//	КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
Процедура ЗаполнитьПризнакиКатегорииЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПризнаков = КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Получить(
		ТекущаяСтрока.КатегорияЭксплуатации);
		
	Если СтруктураПризнаков = Неопределено Тогда
		
		ПараметрыЗаполнения = СтруктураДействий.ЗаполнитьПризнакиКатегорииЭксплуатации;
		Если ПараметрыЗаполнения = Неопределено Тогда
			ПараметрыЗаполнения = ТМЦВЭксплуатацииКлиентСервер.ПараметрыЗаполненияПризнаковКатегорииЭксплуатации();
		КонецЕсли;
		
		Признаки = "ИнвентарныйУчет,УчетПоФизЛицам,
			|УчитыватьВВидеГрупповогоОС,СтатьяКапитализацииСтоимостиОС,
			|СпособПогашенияСтоимостиБУ";
			
		Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходов Тогда
			Признаки = Признаки + ",СтатьяРасходов";
		КонецЕсли;
			
		Если ПараметрыЗаполнения.ЗаполнитьСрокЭксплуатации Тогда
			Признаки = Признаки + ",СрокЭксплуатации";
		КонецЕсли;
			
		СтруктураПризнаков = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяСтрока.КатегорияЭксплуатации, Признаки);
		
		Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходовДляГрупповогоОС
			И СтруктураПризнаков.УчитыватьВВидеГрупповогоОС Тогда
			СтруктураПризнаков.Вставить("СтатьяРасходов", СтруктураПризнаков.СтатьяКапитализацииСтоимостиОС);
		КонецЕсли;
		
		КэшированныеЗначения.ПризнакиКатегорииЭксплуатации.Вставить(
			ТекущаяСтрока.КатегорияЭксплуатации,
			СтруктураПризнаков);
			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПризнаков);
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения данных по категории эксплуатации
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьОписаниеЗапросаОбработкиТЧ_ПризнакиКатегорииЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если НЕ ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьПризнакиКатегорииЭксплуатации",
			СтруктураДействий,
			КэшированныеЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = СтруктураДействий.ЗаполнитьПризнакиКатегорииЭксплуатации;
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ТМЦВЭксплуатацииКлиентСервер.ПараметрыЗаполненияПризнаковКатегорииЭксплуатации();
	КонецЕсли;

	Признаки = "ИнвентарныйУчет,УчетПоФизЛицам,
		|УчитыватьВВидеГрупповогоОС,СтатьяКапитализацииСтоимостиОС,
		|СпособПогашенияСтоимостиБУ";
		
	Если ПараметрыЗаполнения.ЗаполнитьСтатьюРасходов Тогда
		Признаки = Признаки + ",СтатьяРасходов";
	КонецЕсли;
		
	Если ПараметрыЗаполнения.ЗаполнитьСрокЭксплуатации Тогда
		Признаки = Признаки + ",СрокЭксплуатации";
	КонецЕсли;
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	&Признаки,
		|	ВЫБОР 
		|		КОГДА &ЗаполнитьСтатьюРасходовДляГрупповогоОС
		|				И СпрКатегорииЭксплуатации.УчитыватьВВидеГрупповогоОС
		|		ТОГДА
		|			СпрКатегорииЭксплуатации.СтатьяКапитализацииСтоимостиОС
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК СтатьяРасходов
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииЭксплуатации КАК СпрКатегорииЭксплуатации
		|		ПО СпрКатегорииЭксплуатации.Ссылка = ИсточникДанных.КатегорияЭксплуатации";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Признаки", Признаки); 
			
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПризнакиКатегорииЭксплуатации");
	
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить(
		"ЗаполнитьСтатьюРасходовДляГрупповогоОС", 
		ПараметрыЗаполнения.ЗаполнитьСтатьюРасходовДляГрупповогоОС);
		
КонецПроцедуры

// Заполняет признаки категории эксплуатации в строке табличной части используя данные полученные сразу для всех строк.
// 
// Параметры:
//  ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьПризнакиКатегорииЭксплуатацииПакетно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки(
												"ПризнакиКатегорииЭксплуатации", КэшированныеЗначения)[0]);
	
КонецПроцедуры

//++ НЕ УТ

// Заполняет партию ТМЦ в эксплуатации в строке.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыСтруктура - Текущая строка.
//  СтруктураДействий - Структура - Структура действий.
//	КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
Процедура ЗаполнитьПартиюТМЦВЭксплуатации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПартиюТМЦВЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий.ЗаполнитьПартиюТМЦВЭксплуатации = Неопределено Тогда
		ПараметрыВыбора = ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации();
	Иначе
		ПараметрыВыбора = СтруктураДействий.ЗаполнитьПартиюТМЦВЭксплуатации; // ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыВыбора, ТекущаяСтрока);

	ОписаниеЗапроса = ТМЦВЭксплуатацииКлиентСервер.ОписаниеЗапросаДляВыбораПартииТМЦ(ПараметрыВыбора);
	
	Запрос = Новый Запрос(ОписаниеЗапроса.ТекстЗапроса);
	Для Каждого ОписаниеПараметра Из ОписаниеЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла;
	
	НовыеЗначения = Новый Структура("Партия,ИнвентарныйУчет,УчетПоФизЛицам", Справочники.ПартииТМЦВЭксплуатации.ПустаяСсылка(), Ложь, Ложь);

	Результат = Запрос.Выполнить();	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Партия)
			ИЛИ Выборка.Партия = ТекущаяСтрока.Партия Тогда
			
			НовыеЗначения.Партия = Выборка.Партия;
			НовыеЗначения.ИнвентарныйУчет = Выборка.ИнвентарныйУчет;
			НовыеЗначения.УчетПоФизЛицам = Выборка.УчетПоФизЛицам;
			
			Прервать;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НовыеЗначения);
	
КонецПроцедуры

// Заполняет партию ТМЦ в эксплуатации в строке, используя данные полученные сразу для всех строк.
// 
// Параметры:
//  ТекущаяСтрока - ДанныеФормыСтруктура - Текущая строка.
//  СтруктураДействий - Структура - Структура действий.
//	КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
Процедура ЗаполнитьПартиюТМЦВЭксплуатацииПакетно(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	НовыеЗначения = Новый Структура;
	НовыеЗначения.Вставить("Партия", Справочники.ПартииТМЦВЭксплуатации.ПустаяСсылка());
	НовыеЗначения.Вставить("ИнвентарныйУчет", Ложь);
	НовыеЗначения.Вставить("УчетПоФизЛицам", Ложь);

	ДанныеЗаполнения = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки("ПартииТМЦВЭксплуатации", КэшированныеЗначения);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Партия)
			ИЛИ ДанныеЗаполнения[0].Партия = ТекущаяСтрока.Партия Тогда
			
			НовыеЗначения.Партия = ДанныеЗаполнения[0].Партия;
			НовыеЗначения.ИнвентарныйУчет = ДанныеЗаполнения[0].ИнвентарныйУчет;
			НовыеЗначения.УчетПоФизЛицам = ДанныеЗаполнения[0].УчетПоФизЛицам;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НовыеЗначения);
	
КонецПроцедуры

Процедура ДополнитьОписаниеЗапросаОбработкиТЧ_ЗаполнитьПартиюТМЦВЭксплуатации(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения)
	
	Если НЕ ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьПартиюТМЦВЭксплуатации",
		СтруктураДействий,
		КэшированныеЗначения) Тогда
			Возврат;
	КонецЕсли;
	
	Если СтруктураДействий.ЗаполнитьПартиюТМЦВЭксплуатации = Неопределено Тогда
		ПараметрыВыбора = ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации();
	Иначе
		ПараметрыВыбора = СтруктураДействий.ЗаполнитьПартиюТМЦВЭксплуатации; // ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТМЦВЭксплуатации.Партия КАК Партия,
	|	ЕСТЬNULL(ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК ИнвентарныйУчет,
	|	ЕСТЬNULL(ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.УчетПоФизЛицам, ЛОЖЬ) КАК УчетПоФизЛицам,
	|	ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТМЦВЭксплуатации.НомерГТД КАК НомерГТД
	|
	|ПОМЕСТИТЬ ТМЦВЭксплуатации
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТМЦВЭксплуатации.Организация КАК Организация,
	|		ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|		ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|		ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|		ТМЦВЭксплуатации.Серия КАК Серия,
	|		ТМЦВЭксплуатации.Партия КАК Партия,
	|		ТМЦВЭксплуатации.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТМЦВЭксплуатации.НомерГТД КАК НомерГТД,
	|		ТМЦВЭксплуатации.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|			&ТМЦВЭксплуатации_ОтборДата,
	|			(Организация = &ТМЦВЭксплуатации_ОтборОрганизация
	|					ИЛИ &ТМЦВЭксплуатации_ОтборОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|				И (Подразделение = &ТМЦВЭксплуатации_ОтборПодразделение
	|					ИЛИ &ТМЦВЭксплуатации_ОтборПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|				И (Номенклатура,Характеристика,ФизическоеЛицо,ИнвентарныйНомер) В (
	|						ВЫБРАТЬ
	|							ВтИсточникДанных.Номенклатура,
	|							ВтИсточникДанных.Характеристика,
	|							ВтИсточникДанных.ФизическоеЛицо,
	|							ВтИсточникДанных.ИнвентарныйНомер
	|						ИЗ
	|							ВтИсточникДанных КАК ВтИсточникДанных)) КАК ТМЦВЭксплуатации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТМЦВЭксплуатации.Организация КАК Организация,
	|		ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|		ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|		ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|		ТМЦВЭксплуатации.Серия КАК Серия,
	|		ТМЦВЭксплуатации.Партия КАК Партия,
	|		ТМЦВЭксплуатации.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТМЦВЭксплуатации.НомерГТД КАК НомерГТД,
	|		ВЫБОР
	|			КОГДА ТМЦВЭксплуатации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТМЦВЭксплуатации.Количество
	|			ИНАЧЕ ТМЦВЭксплуатации.Количество
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|
	|	ГДЕ
	|		ТМЦВЭксплуатации.Регистратор = &ТекущийРегистратор
	|		И ТМЦВЭксплуатации.Активность
	|
	|		И (ТМЦВЭксплуатации.Период < &ТМЦВЭксплуатации_ОтборДата
	|			ИЛИ &ТМЦВЭксплуатации_ОтборДата = ДАТАВРЕМЯ(1,1,1))
	|
	|		И (ТМЦВЭксплуатации.Организация = &ТМЦВЭксплуатации_ОтборОрганизация
	|				ИЛИ &ТМЦВЭксплуатации_ОтборОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И (ТМЦВЭксплуатации.Подразделение = &ТМЦВЭксплуатации_ОтборПодразделение
	|				ИЛИ &ТМЦВЭксплуатации_ОтборПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		И (Номенклатура,Характеристика,ФизическоеЛицо,ИнвентарныйНомер) В (
	|				ВЫБРАТЬ
	|					ВтИсточникДанных.Номенклатура,
	|					ВтИсточникДанных.Характеристика,
	|					ВтИсточникДанных.ФизическоеЛицо,
	|					ВтИсточникДанных.ИнвентарныйНомер
	|				ИЗ
	|					ВтИсточникДанных КАК ВтИсточникДанных)
	|
	|	) КАК ТМЦВЭксплуатации
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМЦВЭксплуатации.Организация,
	|	ТМЦВЭксплуатации.Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика,
	|	ТМЦВЭксплуатации.Серия,
	|	ТМЦВЭксплуатации.Партия,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер,
	|	ТМЦВЭксплуатации.НомерГТД
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТМЦВЭксплуатации.Количество) > 0
	|";
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ТМЦВЭксплуатации");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТМЦВЭксплуатации.Партия КАК Партия,
	|	ТМЦВЭксплуатации.ИнвентарныйУчет КАК ИнвентарныйУчет,
	|	ТМЦВЭксплуатации.УчетПоФизЛицам КАК УчетПоФизЛицам
	|
	|ИЗ
	|	ВтИсточникДанных КАК ИсточникДанных
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|		ПО ТМЦВЭксплуатации.Номенклатура = ИсточникДанных.Номенклатура
	|			И ТМЦВЭксплуатации.Характеристика = ИсточникДанных.Характеристика
	|			И ТМЦВЭксплуатации.ФизическоеЛицо = ИсточникДанных.ФизическоеЛицо
	|			И ТМЦВЭксплуатации.ИнвентарныйНомер = ИсточникДанных.ИнвентарныйНомер
	|			И &ТекстОтбораСерия
	|";
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных("СтатусУказанияСерийОтправитель", КэшированныеЗначения) Тогда
		
		ТекстОтбораСерия =
		"(ТМЦВЭксплуатации.Серия = ИсточникДанных.Серия
		|	ИЛИ ИсточникДанных.СтатусУказанияСерийОтправитель <> 19
		|		И ИсточникДанных.СтатусУказанияСерийОтправитель <> 20)";
		
	Иначе
		
		ТекстОтбораСерия =
		"(ТМЦВЭксплуатации.Серия = ИсточникДанных.Серия
		|	ИЛИ ИсточникДанных.СтатусУказанияСерий <> 19
		|		И ИсточникДанных.СтатусУказанияСерий <> 20)";
		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОтбораСерия", ТекстОтбораСерия);

	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПартииТМЦВЭксплуатации");
	
	ОтборДата = ?(
		ПараметрыВыбора.Дата <> Неопределено И ПараметрыВыбора.Дата <> '000101010000', 
		КонецДня(ПараметрыВыбора.Дата) + 1, 
		'000101010000');
	
	ОтборОрганизация = ?(
		ПараметрыВыбора.Организация <> Неопределено, 
		ПараметрыВыбора.Организация, 
		ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));

	ОтборПодразделение = ?(
		ПараметрыВыбора.Подразделение <> Неопределено, 
		ПараметрыВыбора.Подразделение, 
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));

	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ТМЦВЭксплуатации_ОтборДата", ОтборДата);
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ТМЦВЭксплуатации_ОтборОрганизация", ОтборОрганизация);
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ТМЦВЭксплуатации_ОтборПодразделение", ОтборПодразделение);
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ТМЦВЭксплуатации_ТекущийРегистратор", ПараметрыВыбора.ТекущийРегистратор);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти
