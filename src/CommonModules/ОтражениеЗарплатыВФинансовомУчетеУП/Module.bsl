
////////////////////////////////////////////////////////////////////////////////
// Модуль "ОтражениеЗарплатыВФинансовомУчетеУП" содержит процедуры и функции для 
// обслуживания механизмов отражения зарплаты в финансовом учете.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция РаспределитьНачисленияПоЭтапамПроизводства(Параметры) Экспорт
	
	ЗапросВыработка = Новый Запрос;
	ЗапросВыработка.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросВыработка.Текст = 
		БазаРаспределенияТрудозатрат() +
		Справочники.СпособыОтраженияЗарплатыВБухУчете.ТекстЗапросаДанныхСпособов();
	
	ЗапросВыработка.УстановитьПараметр("Ссылка",                          Параметры.Ссылка);
	ЗапросВыработка.УстановитьПараметр("Период",                          Параметры.Период);
	ЗапросВыработка.УстановитьПараметр("Организация",                     Параметры.Организация);
	ЗапросВыработка.УстановитьПараметр("ДатаНачала",                      Параметры.ДатаНачала);
	ЗапросВыработка.УстановитьПараметр("ДатаОкончания",                   Параметры.ДатаОкончания);
	ЗапросВыработка.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Параметры.КоэффициентПересчетаВВалютуУПР);
	ЗапросВыработка.УстановитьПараметр("Сводно",                          Параметры.Сводно);
	ЗапросВыработка.УстановитьПараметр("ПроводкиПоРаботникам",            Параметры.ПроводкиПоРаботникам);
	ЗапросВыработка.УстановитьПараметр("ВалютаРегл",                      Параметры.ВалютаРегл);
	
	КоэффициентПересчетаВВалютуУПР = Параметры.КоэффициентПересчетаВВалютуУПР;
	
	МассивРезультатов = ЗапросВыработка.ВыполнитьПакет();
	
	ТаблицаВыработкаСотрудников   = НоваяТаблицаВыработкаСотрудников();
	ВидыРаспределяемыхНачислений  = ВидыРаспределяемыхНачислений(Параметры.Ссылка);
	БазаРаспределения             = МассивРезультатов[3].Выгрузить();
	СтрокиКРаспределению          = МассивРезультатов[4].Выгрузить();
	ПараметрыСпособовОтражения    = МассивРезультатов[5].Выбрать();
	
	ТаблицаВыработкаСотрудников.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	БазаРаспределения.Индексы.Добавить("Сотрудник, Организация, Подразделение, ОблагаетсяЕНВД, СпособОтражения");
	
	СтруктураОтбора = Новый Структура("Сотрудник, Организация, Подразделение, ОблагаетсяЕНВД, СпособОтражения");
	
	Для Каждого Строка Из СтрокиКРаспределению Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		СтрокиБазы = БазаРаспределения.НайтиСтроки(СтруктураОтбора);
		
		МассивКоэффициентов = Новый Массив;
		Для Каждого СтрокаБазы Из СтрокиБазы Цикл
			МассивКоэффициентов.Добавить(СтрокаБазы.Коэффициент);
		КонецЦикла;
		
		Для Каждого ВидНачисления Из ВидыРаспределяемыхНачислений Цикл
			
			РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка[ВидНачисления.Представление], МассивКоэффициентов);
			Если Строка.РаспределятьНУ Тогда
				РезультатРаспределенияНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Строка[ВидНачисления.Представление + "НУ"], МассивКоэффициентов);
			Иначе
				РезультатРаспределенияНУ = РезультатРаспределения;
			КонецЕсли;
			
			Если РезультатРаспределения = Неопределено И РезультатРаспределенияНУ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Индекс = 0 По СтрокиБазы.Количество()-1 Цикл
				
				СтрокаБазы = СтрокиБазы[Индекс];
				
				ПараметрыСтроки = ПараметрыРаспределенияСтроки(ВидНачисления, СтрокаБазы, ПараметрыСпособовОтражения);
				
				НоваяСтрока = ТаблицаВыработкаСотрудников.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБазы); // производственная аналитика
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки); // аналитика расходов в соответствии со способами отражения
				
				НоваяСтрока.ВидНачисленияОплатыТруда = Строка.ВидНачисленияОплатыТруда;
				НоваяСтрока.ВидОперацииПоЗарплате = Строка.ВидОперации;
				НоваяСтрока.СпособРасчетов = Строка.СпособРасчетов;
				Если ВидНачисления.Представление = "Сумма" Тогда
					НоваяСтрока.НеОблагаетсяНДФЛ = Строка.НеОблагаетсяНДФЛ;
				КонецЕсли;
				
				НоваяСтрока.Сумма = 0;
				НоваяСтрока.СуммаРегл = 0;
				НоваяСтрока.ВременнаяРазница = 0;
				НоваяСтрока.ПостояннаяРазница = 0;
				
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				
				Если Строка.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства
					ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства
					ИЛИ Строка.РезервБУ Тогда
					// Отражаем суммы только в НУ
				ИначеЕсли РезультатРаспределения <> Неопределено Тогда
					НоваяСтрока.Сумма = Окр(РезультатРаспределения[Индекс]*КоэффициентПересчетаВВалютуУПР, 2);
					НоваяСтрока.СуммаРегл = РезультатРаспределения[Индекс];
				КонецЕсли;
				
				Если РезультатРаспределенияНУ = Неопределено Тогда
					РазницаНУ = РезультатРаспределения[Индекс];
				ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства
					ИЛИ Строка.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства
					ИЛИ Строка.РезервБУ Тогда
					РазницаНУ = НоваяСтрока.СуммаРегл - РезультатРаспределения[Индекс];
				ИначеЕсли Строка.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы ИЛИ Строка.РезервНУ Тогда
					РазницаНУ = РезультатРаспределенияНУ[Индекс];
				Иначе
					РазницаНУ = НоваяСтрока.СуммаРегл - РезультатРаспределенияНУ[Индекс];
				КонецЕсли;
				
				Если СтрокаБазы.ПринятиеКНалоговомуУчетуПоСдельнымРаботам Тогда
					НоваяСтрока.ВременнаяРазница = РазницаНУ;
				Иначе
					НоваяСтрока.ПостояннаяРазница = РазницаНУ;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "Сумма, СуммаРегл, ПостояннаяРазница, ВременнаяРазница";
	
	Для Каждого Колонка Из ТаблицаВыработкаСотрудников.Колонки Цикл
		Если СтрНайти(КолонкиСуммирования, Колонка.Имя) = 0 Тогда
			КолонкиГруппировок = КолонкиГруппировок + Колонка.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	КолонкиГруппировок = Лев(КолонкиГруппировок, СтрДлина(КолонкиГруппировок) - 1);
	ТаблицаВыработкаСотрудников.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат ТаблицаВыработкаСотрудников;
	
КонецФункции

// Формирует документ начисления оценочных обязательств по отпускам за период по указанной организации. Вызывается
// при автоматическом выполнении операций закрытия месяца.
// 
// Параметры:
//   Организации - СправочникСсылка.Организации - Организация, по которой формируется документ
//   Период - Дата - Период, за который формируется документ.
//
Процедура НачислениеООПриЗакрытииМесяца(Организации, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеОО.Ссылка КАК Ссылка,
	|	НачислениеОО.Организация КАК Организация,
	|	НачислениеОО.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОО
	|ГДЕ
	|	(НачислениеОО.Организация В (&Организации)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ НачислениеОО.ПометкаУдаления
	|	И НАЧАЛОПЕРИОДА(НачислениеОО.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Проведен УБЫВ");
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	
	СуществующиеДокументы = Запрос.Выполнить().Выбрать();
	
	Для Каждого Организация Из Организации Цикл
		
		ДокументыПоОрганизацииОбработаны = Ложь;
		
		ДокументОбъект = Неопределено;
		
		СуществующиеДокументы.Сбросить();
		
		Пока СуществующиеДокументы.НайтиСледующий(Новый Структура("Организация, Проведен", Организация, Истина)) Цикл
			
			ДокументОбъект = СуществующиеДокументы.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			ДокументыПоОрганизацииОбработаны = Истина;
			
		КонецЦикла;
		
		Если ДокументыПоОрганизацииОбработаны Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиРезервовОтпусков = РезервОтпусков.НастройкиРезервовОтпусков(Организация, Период);
		
		Если Не НастройкиРезервовОтпусков.ФормироватьРезервБУ Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующиеДокументы.Сбросить();
		
		Если СуществующиеДокументы.НайтиСледующий(Новый Структура("Организация, Проведен", Организация, Ложь)) Тогда
			ДокументОбъект = СуществующиеДокументы.Ссылка.ПолучитьОбъект();
			ДокументОбъект.РасчетРезерваОтпусков.Очистить();
			ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Очистить();
			ДокументОбъект.ОценочныеОбязательства.Очистить();
			ДокументОбъект.ФизическиеЛица.Очистить();
		КонецЕсли;
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура("Организация, ПериодРегистрации", Организация, Период);
		ДокументОбъект.Заполнить(СтруктураЗаполнения);
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(Период);
		ДокументОбъект.Дата = КонецМесяца(Период);

		ОписаниеДокумента = Новый Структура("Ссылка,
		|Организация, Дата, ПериодРегистрации,
		|КорректировкаОбязательств, ДоляРасходов");
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ДокументОбъект);
		
		ОписаниеДокумента.Вставить("РасчетРезерваОтпусков",               ДокументОбъект.РасчетРезерваОтпусков.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ОценочныеОбязательства",              ДокументОбъект.ОценочныеОбязательства.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ФизическиеЛица",                      ДокументОбъект.ФизическиеЛица.ВыгрузитьКолонки());
		ОписаниеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.ВыгрузитьКолонки());
		
		РезервОтпусков.ЗаполнитьДокументНачислениеОценочныхОбязательствПоОтпускам(ОписаниеДокумента);
		
		ДокументОбъект.РасчетРезерваОтпусков.Загрузить(ОписаниеДокумента.РасчетРезерваОтпусков);
		ДокументОбъект.ОценочныеОбязательства.Загрузить(ОписаниеДокумента.ОценочныеОбязательства);
		ДокументОбъект.ФизическиеЛица.Загрузить(ОписаниеДокумента.ФизическиеЛица);
		ДокументОбъект.ОценочныеОбязательстваПоСотрудникам.Загрузить(ОписаниеДокумента.ОценочныеОбязательстваПоСотрудникам);
		ДокументОбъект.ДоляРасходов = ОписаниеДокумента.ДоляРасходов;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет проверку заполнения расшифровки платежа в документах выдачи займа сотруднику.
// 
// Параметры:
//   ДокументОбъект - ДокументОбъект.РасходныйКассовыйОрдер,
//                    ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств,
//                    ДокументОбъект.СписаниеБезналичныхДенежныхСредств - проверяемый документ
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеДокументаВыдачиЗайма(ДокументОбъект, Отказ) Экспорт
	
	Организация       = ДокументОбъект.Организация;
	Дата              = ДокументОбъект.Дата;
	ФизическоеЛицо    = ДокументОбъект.ПодотчетноеЛицо;
	Ссылка            = ДокументОбъект.Ссылка;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= Дата;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= Дата;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихФизическихЛиц(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "ФизическоеЛицо", "Объект"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.ДоговорЗаймаСотруднику КАК ДоговорЗайма,
	|	Договора.Сумма
	|ПОМЕСТИТЬ ВТДоговора
	|ИЗ
	|	&Договора КАК Договора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоговора.ДоговорЗайма КАК ДоговорЗайма,
	|	ВТДоговора.ДоговорЗайма.ДатаПредоставления КАК ДатаПредоставления,
	|	СУММА(ВТДоговора.Сумма) КАК Сумма
	|ИЗ
	|	ВТДоговора КАК ВТДоговора
	|ГДЕ
	|	ВТДоговора.ДоговорЗайма <> ЗНАЧЕНИЕ(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДоговора.ДоговорЗайма";
	Запрос.УстановитьПараметр("Договора", ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"ДоговорЗаймаСотруднику, Сумма"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаймыСотрудникам.ПроверитьДатуВыдачиЗайма(Дата, Выборка.ДатаПредоставления, "Объект.Дата", Отказ);
		НевыданныйОстаток = ЗаймыСотрудникам.ОстатокНевыданныхСумм(Выборка.ДоговорЗайма, Дата, Ссылка);
		
		Если НевыданныйОстаток < Выборка.Сумма Тогда 
			ТекстСообщения = НСтр("ru = 'На %1 по договору займа не выдано %2 руб. Сумма выдачи не может превышать невыданный остаток.';
									|en = '%2 rub. is not issued under the loan agreement on %1. The amount cannot exceed the remaining amount.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(Дата, "ДЛФ=Д"), НевыданныйОстаток);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сумма", "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Устанавливает условное оформление операций по зарплате.
//
// Параметры:
//    УсловноеОформление - ЭлементУсловногоОформления - Коллекция элементов условного оформления формы;
//    ПутьКДанным        - Строка - Полное название объекта требующего условного оформления;
//    ЭлементФормы       - ЭлементФормы - элемент формы, в котором отображаются данные.
//
Процедура УсловноеОформлениеОперацийПоЗарплате(УсловноеОформление, ПутьКДанным, ЭлементФормы) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отпуск за счет обязательств';
																|en = 'Leave at the expense of liabilities'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отпуск за счет резервов';
																|en = 'Leave at the expense of reserves'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отпуск за счет обязательств и резервов';
																|en = 'Leave at the expense of liabilities and reserves'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Компенсация отпуска';
																|en = 'Leave compensation'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Компенсация отпуска за счет обязательств';
																|en = 'Leave compensation at the expense of liabilities'"));
	
КонецПроцедуры

#Область ДополнительныеПроцедурыРасчетаРезервовОтпусков

// Добавляет в таблицу резервов отпусков колонку "Подразделение" и заполняет ее по
// кадровым данным сотрудников.
//
// Параметры:
//   ТаблицаРезервов   - ТаблицаЗначений - Таблица значений резервов отпусков;
//   ПериодРегистрации - Дата - Дата, на которую необходимо получить подразделение сотрудника.
//
Процедура ЗаполнитьПодразделениеПредприятиеПоМестамСотрудников(ТаблицаРезервов, ПериодРегистрации) Экспорт
	
	ТаблицаРезервов.Колонки.Добавить("ПодразделениеПредприятия",   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	// заполнение подразделений по кадровым данным сотрудников
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ТаблицаРезервов.ВыгрузитьКолонку("Сотрудник"),
		"МестоВСтруктуреПредприятия",
		КонецМесяца(ПериодРегистрации));
	
	ПодразделенияСотрудников = Новый Соответствие;
	Для Каждого Строка Из КадровыеДанные Цикл
		ПодразделенияСотрудников.Вставить(Строка.Сотрудник, Строка.МестоВСтруктуреПредприятия);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаРезервов Цикл
		Строка.ПодразделениеПредприятия = ПодразделенияСотрудников[Строка.Сотрудник];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Отключает учет по статьям финансирования, если используется.
// В ERP учет по статьям финансирования не предусмотрен.
Процедура НастроитьУчетПоСтатьямФинансирования() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Константы.ИспользоватьСтатьиФинансированияЗарплата.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция РаспределитьРасходыНаОплатуТрудаПоВыработке(ПараметрыЗапроса, ТекстыЗапроса) Экспорт
	
	ДобавитьТекстЗапросаВТТрудозатратыНЗП(ТекстыЗапроса);
	
	ТекстыЗапроса.Добавить(ТекстЗапросаБазаРаспределения());
	ТекстыЗапроса.Добавить("ВЫБРАТЬ * ИЗ ВТРасходыРаспределяемые");
	ТекстыЗапроса.Добавить(ТекстЗапросаРезультатРаспределения());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса.ВыгрузитьЗначения(), ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ИндексРезультата = РезультатыЗапроса.ВГраница();
	
	ИсточникДанных       = РезультатыЗапроса[ИндексРезультата - 2].Выгрузить();
	РаспределяемыеСтроки = РезультатыЗапроса[ИндексРезультата - 1].Выгрузить();
	ТаблицаРезультат     = РезультатыЗапроса[ИндексРезультата].Выгрузить();
	
	КолонкиПоиска = "Организация, Подразделение, БазаРаспределения, ФизическоеЛицо";
	ИсточникДанных.Индексы.Добавить(КолонкиПоиска);
	СтруктураОтбора = Новый Структура(КолонкиПоиска);
	
	Для Каждого СтрокаНачисления Из РаспределяемыеСтроки Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаНачисления);
		БазаРаспределения = ИсточникДанных.НайтиСтроки(СтруктураОтбора);
		
		Коэффициенты = Новый Массив;
		ПустоеРаспределение = Новый Массив;
		Для Каждого СтрокаБазы Из БазаРаспределения Цикл
			Коэффициенты.Добавить(СтрокаБазы.Коэффициент);
			ПустоеРаспределение.Добавить(0);
		КонецЦикла;
		
		РезультатРаспределенияУпр = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНачисления.СуммаУпр, Коэффициенты);
		Если РезультатРаспределенияУпр = Неопределено Тогда
			РезультатРаспределенияУпр = ПустоеРаспределение;
		КонецЕсли;
		
		РезультатРаспределенияРегл = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНачисления.СуммаРегл, Коэффициенты);
		Если РезультатРаспределенияРегл = Неопределено Тогда
			РезультатРаспределенияРегл = ПустоеРаспределение;
		КонецЕсли;
		
		РезультатРаспределенияНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаНачисления.СуммаНУ, Коэффициенты);
		Если РезультатРаспределенияНУ = Неопределено Тогда
			РезультатРаспределенияНУ = ПустоеРаспределение;
		КонецЕсли;
		
		Для Индекс = 0 По БазаРаспределения.ВГраница() Цикл
			СтрокаБазы = БазаРаспределения[Индекс];
			
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления,, "СтатьяКалькуляции");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаБазы); // производственная аналитика
			
			Если СтрокаБазы.ДоступноПереопределениеСтатьиКалькуляции И СтрокаНачисления.ОтдельнаяСтатьяКалькуляции Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, "СтатьяКалькуляции");
			КонецЕсли;
			
			НоваяСтрока.ОтражениеПрочихРабот = ЗначениеЗаполнено(СтрокаБазы.СпособОтраженияПрочихРабот);
			
			НоваяСтрока.РезультатУпр  = РезультатРаспределенияУпр[Индекс];
			НоваяСтрока.РезультатРегл = РезультатРаспределенияРегл[Индекс];
			НоваяСтрока.РезультатНУ   = РезультатРаспределенияНУ[Индекс];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Заполняет табличные части документа "Резервы отпусков" ОценочныеОбязательства и ОценочныеОбязательстваПоСотрудникам
// по рассчитанным данным, предварительно осуществляется распределение начислений со сдельным способом отражения
// на подразделения выполнения работ
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, по которой формируется документ.
//   ПериодРегистрации - Дата - Период, за который формируется документ.
//   ТаблицаОбязательств - ТаблицаЗначений - таблица с результатами начисления
//   ОценочныеОбязательства - ТаблицаЗначений - табличная часть документа НачислениеОценочныхОбязательствПоОтпускам
//   ОценочныеОбязательстваПоСотрудникам - ТаблицаЗначений - табличная часть документа НачислениеОценочныхОбязательствПоОтпускам
//
Процедура ЗаполнитьТаблицыОценочныхОбязательств(Организация, ПериодРегистрации, ТаблицаОбязательств, ОценочныеОбязательства, ОценочныеОбязательстваПоСотрудникам) Экспорт
	
	ТаблицаРезервов = ТаблицаОбязательств.Скопировать();
	ТаблицаРезервов.Сортировать("Порядок");
	
	КолонкиГруппировок  = "МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования, ОблагаетсяЕНВД, КорректировкаОбязательств";
	КолонкиСуммирования = "СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ";
	
	ТаблицаРезервов.Свернуть("Сотрудник, " + КолонкиГруппировок, КолонкиСуммирования);
	
	РаспределитьПоПодразделениямВыработки(Организация, ПериодРегистрации, ТаблицаРезервов);
	
	// Заполняем табличную часть по сотрудникам
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		ДобавитьСтрокуТаблицыОценочныхОбязательств(СтрокаТаблицы, ОценочныеОбязательстваПоСотрудникам);
	КонецЦикла;
	
	ТаблицаРезервов.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	// Заполняем табличную часть сводно
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		Если СтрокаТаблицы.КорректировкаОбязательств Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСтрокуТаблицыОценочныхОбязательств(СтрокаТаблицы, ОценочныеОбязательства);
	КонецЦикла;
	
	ОценочныеОбязательства.Сортировать("МестоВСтруктуреПредприятия, Подразделение, СпособОтраженияЗарплатыВБухучете, СтатьяФинансирования, ОблагаетсяЕНВД");
	
КонецПроцедуры

Процедура ДополнитьТаблицуНачислений(ТаблицаНачислений) Экспорт
	
	Если ТаблицаНачислений.Колонки.Найти("НеОблагаетсяНДФЛ") = Неопределено Тогда
		ТаблицаНачислений.Колонки.Добавить("НеОблагаетсяНДФЛ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаНачислений.Колонки.Найти("Начисление") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачисленияНеОблагаемыеНДФЛ = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
		
		Если НачисленияНеОблагаемыеНДФЛ[СтрокаТаблицы.Начисление] = Неопределено Тогда
			НачисленияНеОблагаемыеНДФЛ.Вставить(СтрокаТаблицы.Начисление, НачислениеНеОблагаетсяНДФЛ(СтрокаТаблицы.Начисление));
		КонецЕсли;
		
		СтрокаТаблицы.НеОблагаетсяНДФЛ = НачисленияНеОблагаемыеНДФЛ[СтрокаТаблицы.Начисление];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТТрудозатратыНЗП(ТекстыЗапроса) Экспорт
	
	ДобавитьТекстЗапросаВТРасходыРаспределяемые(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыРаспределяемые.Организация,
	|	РасходыРаспределяемые.Подразделение,
	|	ВЫБОР КОГДА &Сводно
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|		ИНАЧЕ РасходыРаспределяемые.ФизическоеЛицо
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	РасходыРаспределяемые.БазаРаспределения
	|ПОМЕСТИТЬ ВТПоказателиРаспределения
	|ИЗ
	|	ВТРасходыРаспределяемые КАК РасходыРаспределяемые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходыРаспределяемые.Организация КАК Организация,
	|	РасходыРаспределяемые.Подразделение КАК Подразделение,
	|	ВЫБОР КОГДА &Сводно
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|		ИНАЧЕ РасходыРаспределяемые.ФизическоеЛицо
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	РасходыРаспределяемые.БазаРаспределения КАК БазаРаспределения,
	|
	|	ТрудозатратыНЗП.ПартияПроизводства КАК ПартияПроизводства,
	|	ТрудозатратыНЗП.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|			ПродукцияЗаказа.Назначение.НаправлениеДеятельности
	//-- НЕ УТКА
	|		КОГДА ИСТИНА ТОГДА
	|			ЕСТЬNULL(СпрПартииПроизводства.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТрудозатратыНЗП.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТрудозатратыНЗП.Этап КАК Этап,
	|	ТрудозатратыНЗП.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ТрудозатратыНЗП.ВидРабот КАК ВидРабот,
	|	ТрудозатратыНЗП.ГруппаПродукции КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|	СУММА(ТрудозатратыНЗП.НормативнаяСтоимость) КАК НормативнаяСтоимость,
	|	СУММА(ВЫБОР
	|		КОГДА ЕСТЬNULL(ВидыРабот.КратностьТрудоемкости, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ(ТрудозатратыНЗП.Количество * ВидыРабот.Трудоемкость / ВидыРабот.КратностьТрудоемкости КАК ЧИСЛО(15,3))
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК Длительность,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектЭксплуатации,
	|	ВЫБОР
	|		КОГДА НЕ ТрудозатратыНЗП.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	//-- НЕ УТКА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноПереопределениеСтатьиКалькуляции
	|
	|ПОМЕСТИТЬ ВТТрудозатраты
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ТрудозатратыНЗП
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиРаспределения КАК РасходыРаспределяемые
	|		ПО ТрудозатратыНЗП.Организация = РасходыРаспределяемые.Организация
	|			И ТрудозатратыНЗП.Подразделение = РасходыРаспределяемые.Подразделение
	|			И (&Сводно ИЛИ ТрудозатратыНЗП.Сотрудник = РасходыРаспределяемые.ФизическоеЛицо)
	//++ НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ПродукцияЗаказа
	|		ПО ТрудозатратыНЗП.ЗаказНаПроизводство = ПродукцияЗаказа.Ссылка
	|			И ТрудозатратыНЗП.КодСтрокиПродукция = ПродукцияЗаказа.КодСтроки
	//-- НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Ссылка = ТрудозатратыНЗП.ПартияПроизводства
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|		ПО ТрудозатратыНЗП.ВидРабот = ВидыРабот.Ссылка
	|
	|ГДЕ
	|	ТрудозатратыНЗП.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТрудозатратыНЗП.Регистратор ССЫЛКА Документ.ВыработкаСотрудников
	|	И ТрудозатратыНЗП.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТрудозатратыНЗП.НормативнаяСтоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыРаспределяемые.Организация,
	|	РасходыРаспределяемые.Подразделение,
	|	ВЫБОР КОГДА &Сводно
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|		ИНАЧЕ РасходыРаспределяемые.ФизическоеЛицо
	|	КОНЕЦ,
	|	РасходыРаспределяемые.БазаРаспределения,
	|	ТрудозатратыНЗП.ПартияПроизводства,
	|	ТрудозатратыНЗП.ЗаказНаПроизводство,
	|	ТрудозатратыНЗП.Этап,
	|	ТрудозатратыНЗП.СтатьяКалькуляции,
	|	ТрудозатратыНЗП.ВидРабот,
	|	ТрудозатратыНЗП.ГруппаПродукции,
	|	ТрудозатратыНЗП.КодСтрокиПродукция,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|			ПродукцияЗаказа.Назначение.НаправлениеДеятельности
	//-- НЕ УТКА
	|		КОГДА ИСТИНА ТОГДА
	|			ЕСТЬNULL(СпрПартииПроизводства.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТрудозатратыНЗП.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	//-- НЕ УТКА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	ФизическоеЛицо";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТТрудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РаспределитьПоПодразделениямВыработки(Организация, ПериодРегистрации, ТаблицаРезервов)
	
	СпособыОтражения = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРезервов, "СпособОтраженияЗарплатыВБухучете", Истина);
	КоличествоЭлементов = СпособыОтражения.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		Индекс = КоличествоЭлементов - ОбратныйИндекс;
		Если НЕ ЗначениеЗаполнено(СпособыОтражения[Индекс]) Тогда
			СпособыОтражения.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ОплатаСдельныхРабот = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СпособыОтражения, "ОплатаСдельныхРабот");
	
	СписокСотрудников = Новый Массив;
	СтрокиКРаспределению = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезервов Цикл
		
		Если ОплатаСдельныхРабот[СтрокаТаблицы.СпособОтраженияЗарплатыВБухучете] = Истина Тогда
			СписокСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
			СтрокиКРаспределению.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиКРаспределению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ Справочник.Сотрудники КАК Сотрудники
	|ГДЕ Ссылка В (&СписокСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрудозатратыНЗП.Сотрудник КАК ФизическоеЛицо,
	|	ТрудозатратыНЗП.Подразделение КАК Подразделение,
	|	СУММА(ТрудозатратыНЗП.НормативнаяСтоимость) КАК Коэффициент
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ТрудозатратыНЗП
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизическихЛиц КАК СписокФизическихЛиц
	|		ПО ТрудозатратыНЗП.Сотрудник = СписокФизическихЛиц.ФизическоеЛицо
	|
	|ГДЕ
	|	ТрудозатратыНЗП.Регистратор ССЫЛКА Документ.ВыработкаСотрудников
	|	И ТрудозатратыНЗП.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТрудозатратыНЗП.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыНЗП.Подразделение,
	|	ТрудозатратыНЗП.Сотрудник
	|ИТОГИ ПО
	|	ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВыработки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РаспределяемыеКолонки = "СуммаРезерва,СуммаРезерваСтраховыхВзносов,СуммаРезерваФССНесчастныеСлучаи,
							|СуммаРезерваНУ,СуммаРезерваСтраховыхВзносовНУ,СуммаРезерваФССНесчастныеСлучаиНУ";
	
	ЗначенияРаспределения = Новый Структура(РаспределяемыеКолонки);
	РезультатыРаспределения = Новый Структура(РаспределяемыеКолонки);
	
	ФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо");
	
	Для Каждого СтрокаТаблицы Из СтрокиКРаспределению Цикл
		
		ДанныеВыработки.Сбросить();
		Если НЕ ДанныеВыработки.НайтиСледующий(ФизическиеЛица[СтрокаТаблицы.Сотрудник], "ФизическоеЛицо") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПодразделений = Новый Массив;
		МассивКоэффициентов = Новый Массив;
		
		ПодразделенияВыработки = ДанныеВыработки.Выбрать();
		Пока ПодразделенияВыработки.Следующий() Цикл
			МассивПодразделений.Добавить(ПодразделенияВыработки.Подразделение);
			МассивКоэффициентов.Добавить(ПодразделенияВыработки.Коэффициент);
		КонецЦикла;
		
		Если МассивПодразделений.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивПодразделений.Количество() = 1 Тогда
			СтрокаТаблицы.МестоВСтруктуреПредприятия = МассивПодразделений[0];
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗначенияРаспределения, СтрокаТаблицы);
		Для Каждого Колонка Из ЗначенияРаспределения Цикл
			РезультатыРаспределения[Колонка.Ключ] = 
				ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Колонка.Значение, МассивКоэффициентов);
		КонецЦикла;
		
		ИндексСтроки = ТаблицаРезервов.Индекс(СтрокаТаблицы);
		Для Индекс = 0 По МассивПодразделений.ВГраница() Цикл
			
			НоваяСтрока = ТаблицаРезервов.Вставить(ИндексСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.МестоВСтруктуреПредприятия = МассивПодразделений[Индекс];
			
			Для Каждого Колонка Из РезультатыРаспределения Цикл
				Если ЗначениеЗаполнено(ЗначенияРаспределения[Колонка.Ключ]) Тогда
					НоваяСтрока[Колонка.Ключ] = Колонка.Значение[Индекс];
				Иначе
					НоваяСтрока[Колонка.Ключ] = 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаРезервов.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуТаблицыОценочныхОбязательств(СтрокаТаблицы, ТаблицаДокумента)
	
	Если СтрокаТаблицы.СуммаРезерва = 0
		И СтрокаТаблицы.СуммаРезерваНУ = 0
		И (СтрокаТаблицы.СуммаРезерва - СтрокаТаблицы.СуммаРезерваНУ) = 0
		И СтрокаТаблицы.СуммаРезерваСтраховыхВзносов = 0
		И СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ = 0
		И (СтрокаТаблицы.СуммаРезерваСтраховыхВзносов - СтрокаТаблицы.СуммаРезерваСтраховыхВзносовНУ) = 0 
		И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи = 0
		И СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ = 0
		И (СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаи - СтрокаТаблицы.СуммаРезерваФССНесчастныеСлучаиНУ) = 0
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТаблицаДокумента.Добавить(), СтрокаТаблицы);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТРасходыРаспределяемые(ТекстыЗапроса)
	
	ИмяТаблицы = "ВТРасходыРаспределяемые";
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка) КАК БазаРаспределения
	|ПОМЕСТИТЬ ВТРасходыРаспределяемые
	|ГДЕ ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Функция ТекстЗапросаБазаРаспределения()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Трудозатраты.Организация КАК Организация,
	|	Трудозатраты.Подразделение КАК Подразделение,
	|	Трудозатраты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Трудозатраты.БазаРаспределения КАК БазаРаспределения,
	|
	|	НЕОПРЕДЕЛЕНО КАК СпособОтраженияПрочихРабот,
	|	Трудозатраты.ПартияПроизводства КАК ПартияПроизводства,
	|	Трудозатраты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Трудозатраты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Трудозатраты.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	Трудозатраты.Этап КАК Этап,
	|	Трудозатраты.ВидРабот КАК ВидРабот,
	|	Трудозатраты.ГруппаПродукции,
	|	Трудозатраты.АналитикаУчетаПродукции КАК АналитикаУчетаПродукции,
	|	Трудозатраты.ОбъектЭксплуатации,
	|
	|	Трудозатраты.ДоступноПереопределениеСтатьиКалькуляции,
	|	Трудозатраты.СтатьяКалькуляции,
	|
	|	ВЫБОР Трудозатраты.БазаРаспределения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|			ТОГДА Трудозатраты.НормативнаяСтоимость
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот)
	|			ТОГДА Трудозатраты.Длительность
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Коэффициент
	|
	|ИЗ
	|	ВТТрудозатраты КАК Трудозатраты
	|
	|ГДЕ
	|	ВЫБОР Трудозатраты.БазаРаспределения
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|			ТОГДА Трудозатраты.НормативнаяСтоимость
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.ДлительностьВыполненияРабот)
	|			ТОГДА Трудозатраты.Длительность
	|		ИНАЧЕ 0
	|	КОНЕЦ > 0";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРезультатРаспределения()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ЛОЖЬ КАК ОтражениеПрочихРабот,
	|	РаспределяемыеРасходы.СпособОтражения КАК СпособОтраженияПрочихРабот,
	|
	|	РегистрОтражениеЗП.ВидПлатежаВГосБюджет,
	|	РегистрОтражениеЗП.НаправлениеДеятельности,
	|	РегистрОтражениеЗП.ТипНалога,
	|
	|	РегистрТрудозатратыНЗП.ВидФондаВзносов,
	|	РегистрТрудозатратыНЗП.СтатьяКалькуляции,
	|	РегистрТрудозатратыНЗП.ПартияПроизводства,
	|	РегистрТрудозатратыНЗП.ЗаказНаПроизводство,
	|	РегистрТрудозатратыНЗП.КодСтрокиПродукция,
	|	РегистрТрудозатратыНЗП.ГруппаПродукции,
	|	РегистрТрудозатратыНЗП.ВидРабот,
	|	РегистрТрудозатратыНЗП.Этап,
	|
	|	РегистрТрудозатратыНЗП.Стоимость     КАК РезультатУпр,
	|	РегистрТрудозатратыНЗП.СтоимостьРегл КАК РезультатРегл,
	|	РегистрТрудозатратыНЗП.СтоимостьРегл КАК РезультатНУ,
	|
	|	РаспределяемыеРасходы.*
	|
	|ИЗ
	|	ВТРасходыРаспределяемые КАК РаспределяемыеРасходы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК РегистрТрудозатратыНЗП
	|		ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете КАК РегистрОтражениеЗП
	|		ПО ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция БазаРаспределенияТрудозатрат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.ПодразделениеПредприятия         КАК Подразделение,
	|	ДД.СпособОтраженияЗарплатыВБухучете КАК СпособОтражения,
	|	ДД.ФизическоеЛицо                   КАК Сотрудник,
	|	&Организация                        КАК Организация,
	|	ДД.ОблагаетсяЕНВД                   КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТСотрудникиСдельная
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносыПоФизлицам КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Ссылка
	|	И ДД.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И НЕ &Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.ПодразделениеПредприятия,
	|	ДД.СпособОтраженияЗарплатыВБухучете,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	&Организация,
	|	ДД.ОблагаетсяЕНВД
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Ссылка
	|	И ДД.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И &Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.МестоВСтруктуреПредприятия,
	|	ДД.СпособОтраженияЗарплатыВБухучете,
	|	ДД.Сотрудник.ФизическоеЛицо,
	|	&Организация,
	|	ДД.ОблагаетсяЕНВД
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательстваПоСотрудникам КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Ссылка
	|	И НЕ &Сводно
	|	И ДД.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.МестоВСтруктуреПредприятия,
	|	ДД.СпособОтраженияЗарплатыВБухучете,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	&Организация,
	|	ДД.ОблагаетсяЕНВД
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Ссылка
	|	И &Сводно
	|	И ДД.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	СпособОтражения,
	|	Сотрудник,
	|	ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаСотрудников.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ВыработкаСотрудниковСотрудники.Работник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка) КАК ПартияПроизводства,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПроизводство,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	0 КАК КодСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО КАК Этап,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(Справочник.ВидыРаботСотрудников.ПустаяСсылка) КАК ВидРабот,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
	|	ВТСотрудникиСдельная.СпособОтражения КАК СпособОтражения,
	|	ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты КАК СпособОтраженияПрочихРабот,
	|	СУММА(ВыработкаСотрудниковСотрудники.Сумма * ВыработкаСотрудниковВидыРабот.Сумма / ВыработкаСотрудников.СуммаДокумента
	|		* &КоэффициентПересчетаВВалютуУПР) КАК НормативнаяСтоимость,
	|	&Организация КАК Организация,
	|	""ПрочиеРасходыАктивыПассивы"" КАК ИдентификаторНабора,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|	0 КАК Количество,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР ИСТИНА
	//++ НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗаказНаРемонт.Ссылка.ОбъектЭксплуатации
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбъектЭксплуатации,
	|	ЛОЖЬ КАК ДоступноПереопределениеСтатьиКалькуляции
	|ПОМЕСТИТЬ ВТТрудозатраты
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|			ПО ВыработкаСотрудников.Ссылка = ВыработкаСотрудниковВидыРабот.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.Работники КАК ВыработкаСотрудниковСотрудники
	|			ПО ВыработкаСотрудниковВидыРабот.Ссылка = ВыработкаСотрудниковСотрудники.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСдельная КАК ВТСотрудникиСдельная
	|			ПО (&Сводно ИЛИ ВыработкаСотрудниковСотрудники.Работник = ВТСотрудникиСдельная.Сотрудник)
	|			И ВыработкаСотрудников.Подразделение = ВТСотрудникиСдельная.Подразделение
	|			И ВыработкаСотрудников.Организация = ВТСотрудникиСдельная.Организация
	//++ НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Трудозатраты КАК ЗаказНаРемонт
	|		ПО (ВыработкаСотрудниковВидыРабот.Распоряжение = ЗаказНаРемонт.Ссылка)
	|			И (ВыработкаСотрудниковВидыРабот.КодСтрокиРаспоряжения = ЗаказНаРемонт.КодСтроки)
	//-- НЕ УТКА
	|ГДЕ
	|	ВыработкаСотрудников.ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт))
	|	И ВыработкаСотрудников.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВыработкаСотрудников.Проведен
	|	И ВыработкаСотрудников.Организация = &Организация
	|	И ВыработкаСотрудников.Автораспределение
	|	И НЕ ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты.ОплатаСдельныхРабот
	|
	|СГРУППИРОВАТЬ ПО
	//++ НЕ УТКА
	|	ЗаказНаРемонт.Ссылка.ОбъектЭксплуатации,
	//-- НЕ УТКА
	|	ВТСотрудникиСдельная.СпособОтражения,
	|	ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ВыработкаСотрудниковСотрудники.Работник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВыработкаСотрудников.Ссылка,
	|	ВыработкаСотрудников.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыработкаСотрудников.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ВыработкаСотрудниковВидыРабот.Работник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка) КАК ПартияПроизводства,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПроизводство,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	0 КАК КодСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО КАК Этап,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(Справочник.ВидыРаботСотрудников.ПустаяСсылка) КАК ВидРабот,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции,
	|	ВТСотрудникиСдельная.СпособОтражения КАК СпособОтражения,
	|	ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты КАК СпособОтраженияПрочихРабот,
	|	СУММА(ВыработкаСотрудниковВидыРабот.Сумма
	|		* &КоэффициентПересчетаВВалютуУПР) КАК НормативнаяСтоимость,
	|	&Организация КАК Организация,
	|	""ПрочиеРасходыАктивыПассивы"" КАК ИдентификаторНабора,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|	0 КАК Количество,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР ИСТИНА
	//++ НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗаказНаРемонт.Ссылка.ОбъектЭксплуатации
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбъектЭксплуатации,
	|	ЛОЖЬ КАК ДоступноПереопределениеСтатьиКалькуляции
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|			ПО ВыработкаСотрудников.Ссылка = ВыработкаСотрудниковВидыРабот.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСдельная КАК ВТСотрудникиСдельная
	|		ПО (&Сводно ИЛИ ВыработкаСотрудниковВидыРабот.Работник = ВТСотрудникиСдельная.Сотрудник)
	|			И ВыработкаСотрудников.Подразделение = ВТСотрудникиСдельная.Подразделение
	|			И ВыработкаСотрудников.Организация = ВТСотрудникиСдельная.Организация
	//++ НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Трудозатраты КАК ЗаказНаРемонт
	|		ПО (ВыработкаСотрудниковВидыРабот.Распоряжение = ЗаказНаРемонт.Ссылка)
	|			И (ВыработкаСотрудниковВидыРабот.КодСтрокиРаспоряжения = ЗаказНаРемонт.КодСтроки)
	//-- НЕ УТКА
	|ГДЕ
	|	ВыработкаСотрудников.ВидНаряда В (ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт))
	|	И ВыработкаСотрудников.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВыработкаСотрудников.Проведен
	|	И ВыработкаСотрудников.Организация = &Организация
	|	И НЕ ВыработкаСотрудников.Автораспределение
	|	И НЕ ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты.ОплатаСдельныхРабот
	|
	|СГРУППИРОВАТЬ ПО
	//++ НЕ УТКА
	|	ЗаказНаРемонт.Ссылка.ОбъектЭксплуатации,
	//-- НЕ УТКА
	|	ВТСотрудникиСдельная.СпособОтражения,
	|	ВыработкаСотрудниковВидыРабот.СпособОтраженияЗарплаты,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ВыработкаСотрудниковВидыРабот.Работник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВыработкаСотрудников.Ссылка,
	|	ВыработкаСотрудников.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТрудозатратыНЗП.Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ТрудозатратыНЗП.Сотрудник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТрудозатратыНЗП.ПартияПроизводства,
	|	ТрудозатратыНЗП.ЗаказНаПроизводство,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|			ПродукцияЗаказа.Назначение.НаправлениеДеятельности
	//-- НЕ УТКА
	|		КОГДА ИСТИНА ТОГДА
	|			ЕСТЬNULL(СпрПартииПроизводства.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ТрудозатратыНЗП.КодСтрокиПродукция,
	|	ТрудозатратыНЗП.Этап,
	|	ТрудозатратыНЗП.СтатьяКалькуляции,
	|	ТрудозатратыНЗП.ВидРабот,
	|	ТрудозатратыНЗП.ГруппаПродукции,
	|	ВТСотрудникиСдельная.СпособОтражения,
	|	ВТСотрудникиСдельная.СпособОтражения,
	|	СУММА(ТрудозатратыНЗП.НормативнаяСтоимость),
	|	ТрудозатратыНЗП.Организация,
	|	""ТрудозатратыНезавершенногоПроизводства"",
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка),
	|	ТрудозатратыНЗП.Количество,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА НЕ ТрудозатратыНЗП.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	//-- НЕ УТКА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноПереопределениеСтатьиКалькуляции
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК ТрудозатратыНЗП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСдельная КАК ВТСотрудникиСдельная
	|		ПО (&Сводно ИЛИ ТрудозатратыНЗП.Сотрудник = ВТСотрудникиСдельная.Сотрудник)
	|			И ТрудозатратыНЗП.Организация = ВТСотрудникиСдельная.Организация
	|			И ТрудозатратыНЗП.Подразделение = ВТСотрудникиСдельная.Подразделение
	//++ НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ПродукцияЗаказа
	|		ПО ТрудозатратыНЗП.ЗаказНаПроизводство = ПродукцияЗаказа.Ссылка
	|			И ТрудозатратыНЗП.КодСтрокиПродукция = ПродукцияЗаказа.КодСтроки
	//-- НЕ УТКА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Ссылка = ТрудозатратыНЗП.ПартияПроизводства
	|
	|ГДЕ
	|	ТрудозатратыНЗП.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ТрудозатратыНЗП.Организация В
	|			(ВЫБРАТЬ
	|				Т.Организация
	|			ИЗ
	|				ВТСотрудникиСдельная КАК Т)
	|	И ТрудозатратыНЗП.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТрудозатратыНЗП.НормативнаяСтоимость > 0
	|	И ТрудозатратыНЗП.Регистратор Ссылка Документ.ВыработкаСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТрудозатратыНЗП.Организация,
	|	ТрудозатратыНЗП.Подразделение,
	|	ВТСотрудникиСдельная.СпособОтражения,
	|	ВТСотрудникиСдельная.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА НЕ &Сводно
	|			ТОГДА ТрудозатратыНЗП.Сотрудник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТрудозатратыНЗП.ПартияПроизводства,
	|	ТрудозатратыНЗП.ЗаказНаПроизводство,
	|	ТрудозатратыНЗП.Этап,
	|	ТрудозатратыНЗП.СтатьяКалькуляции,
	|	ТрудозатратыНЗП.ВидРабот,
	|	ТрудозатратыНЗП.ГруппаПродукции,
	|	ТрудозатратыНЗП.КодСтрокиПродукция,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL ТОГДА
	|			ПродукцияЗаказа.Назначение.НаправлениеДеятельности
	//-- НЕ УТКА
	|		КОГДА ИСТИНА ТОГДА
	|			ЕСТЬNULL(СпрПартииПроизводства.НаправлениеДеятельности,
	|				ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ,
	|	ТрудозатратыНЗП.Количество,
	|	ВЫБОР
	|		КОГДА НЕ ТрудозатратыНЗП.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	//++ НЕ УТКА
	|		КОГДА НЕ ПродукцияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	//-- НЕ УТКА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТрудозатраты.СпособОтражения КАК СпособОтражения
	|ПОМЕСТИТЬ ВтСписокСпособовОтражения
	|ИЗ
	|	ВТТрудозатраты КАК ВТТрудозатраты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТТрудозатраты.СпособОтраженияПрочихРабот КАК СпособОтражения
	|ИЗ
	|	ВТТрудозатраты КАК ВТТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Реквизиты.БазаРаспределенияПоСдельнымРаботам = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|			ТОГДА ВТТрудозатраты.НормативнаяСтоимость
	|		КОГДА ВидыРабот.КратностьТрудоемкости > 0
	|			ТОГДА ВЫРАЗИТЬ(ВТТрудозатраты.Количество * ВидыРабот.Трудоемкость / ВидыРабот.КратностьТрудоемкости КАК ЧИСЛО(15,3))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК Коэффициент,
	|	ВТТрудозатраты.Подразделение КАК Подразделение,
	|	ВТТрудозатраты.Сотрудник КАК Сотрудник,
	|	ВТТрудозатраты.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВТТрудозатраты.ПартияПроизводства КАК ПартияПроизводства,
	|	ВТТрудозатраты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВТТрудозатраты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВТТрудозатраты.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ВТТрудозатраты.Этап КАК Этап,
	|	ВТТрудозатраты.ВидРабот КАК ВидРабот,
	|	ВТТрудозатраты.ГруппаПродукции,
	|	ВТТрудозатраты.Организация КАК Организация,
	|	ВТТрудозатраты.АналитикаУчетаПродукции КАК АналитикаУчетаПродукции,
	|	ВТТрудозатраты.ИдентификаторНабора КАК ИдентификаторНабора,
	|	ВТТрудозатраты.Количество,
	|	ВТТрудозатраты.СпособОтражения,
	|	ВТТрудозатраты.СпособОтраженияПрочихРабот,
	|	Реквизиты.ПринятиеКНалоговомуУчетуПоСдельнымРаботам КАК ПринятиеКНалоговомуУчетуПоСдельнымРаботам,
	|	ВТТрудозатраты.ОбъектЭксплуатации,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтдельнаяСтатьяКалькуляции И ВТТрудозатраты.ДоступноПереопределениеСтатьиКалькуляции
	|			ТОГДА Реквизиты.СтатьяКалькуляции
	|		ИНАЧЕ ВТТрудозатраты.СтатьяКалькуляции
	|	КОНЕЦ КАК СтатьяКалькуляции,
	|	ВЫБОР
	|		КОГДА Реквизиты.ОтдельнаяСтатьяКалькуляцииВзносов И ВТТрудозатраты.ДоступноПереопределениеСтатьиКалькуляции
	|			ТОГДА Реквизиты.СтатьяКалькуляцииВзносов
	|		ИНАЧЕ ВТТрудозатраты.СтатьяКалькуляции
	|	КОНЕЦ КАК СтатьяКалькуляцииВзносов
	|ИЗ
	|	ВТТрудозатраты КАК ВТТрудозатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК Реквизиты
	|			ПО ВТТрудозатраты.СпособОтражения = Реквизиты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРаботСотрудников КАК ВидыРабот
	|			ПО ВТТрудозатраты.ВидРабот = ВидыРабот.Ссылка
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Реквизиты.БазаРаспределенияПоСдельнымРаботам = ЗНАЧЕНИЕ(Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда)
	|			ТОГДА ВТТрудозатраты.НормативнаяСтоимость
	|		КОГДА ВидыРабот.КратностьТрудоемкости > 0
	|			ТОГДА ВЫРАЗИТЬ(ВТТрудозатраты.Количество * ВидыРабот.Трудоемкость / ВидыРабот.КратностьТрудоемкости КАК ЧИСЛО(15,3))
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начислено.НомерСтроки КАК НомерСтроки,
	|	Начислено.ФизическоеЛицо КАК Сотрудник,
	|	Начислено.ПодразделениеПредприятия КАК Подразделение,
	|	Начислено.СпособОтраженияЗарплатыВБухучете КАК СпособОтражения,
	|	Начислено.СпособРасчетов КАК СпособРасчетов,
	|	Начислено.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	Начислено.НеОблагаетсяНДФЛ КАК НеОблагаетсяНДФЛ,
	|	Начислено.ВидНачисленияОплатыТрудаДляНУ КАК ВидНачисленияОплатыТруда,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Начислено.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НатуральныйДоход)
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Начислено.ВзносыПоЕдиномуТарифу,
	|	Начислено.ПФРСтраховая,
	|	Начислено.ПФРНакопительная,
	|	Начислено.ПФРПоСуммарномуТарифу,
	|	Начислено.ПФРДоПредельнойВеличины,
	|	Начислено.ПФРСПревышения,
	|	Начислено.ПФРНаДоплатуЛетчикам,
	|	Начислено.ПФРНаДоплатуШахтерам,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	Начислено.ФСС,
	|	Начислено.ФФОМС,
	|	Начислено.ТФОМС,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.ФССНесчастныеСлучаи
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
	|	0 КАК Взносы,
	|	0 КАК СуммаНУ,
	|	0 КАК ВзносыНУ,
	|	0 КАК ФССНесчастныеСлучаиНУ,
	|	ЛОЖЬ КАК РаспределятьНУ,
	|	Начислено.ВидОперации,
	|	Начислено.РезервБУ,
	|	Начислено.РезервНУ
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносыПоФизлицам КАК Начислено
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК Реквизиты
	|			ПО Начислено.СпособОтраженияЗарплатыВБухучете = Реквизиты.Ссылка
	|ГДЕ
	|	Начислено.Ссылка = &Ссылка
	|	И Начислено.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И НЕ (Начислено.РезервБУ И Начислено.РезервНУ)
	|	И НЕ &Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начислено.НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	Начислено.ПодразделениеПредприятия,
	|	Начислено.СпособОтраженияЗарплатыВБухучете,
	|	Начислено.СпособРасчетов,
	|	Начислено.ОблагаетсяЕНВД,
	|	Начислено.НеОблагаетсяНДФЛ,
	|	Начислено.ВидНачисленияОплатыТрудаДляНУ,
	|	&Организация,
	|	ВЫБОР
	|		КОГДА Начислено.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НатуральныйДоход)
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.Сумма
	|	КОНЕЦ КАК Сумма,
	|	Начислено.ВзносыПоЕдиномуТарифу,
	|	Начислено.ПФРСтраховая,
	|	Начислено.ПФРНакопительная,
	|	Начислено.ПФРПоСуммарномуТарифу,
	|	Начислено.ПФРДоПредельнойВеличины,
	|	Начислено.ПФРСПревышения,
	|	Начислено.ПФРНаДоплатуЛетчикам,
	|	Начислено.ПФРНаДоплатуШахтерам,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	Начислено.ФСС,
	|	Начислено.ФФОМС,
	|	Начислено.ТФОМС,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.ФССНесчастныеСлучаи
	|	КОНЕЦ КАК ФССНесчастныеСлучаи,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	|	Начислено.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	|	Начислено.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	Начислено.ВидОперации,
	|	Начислено.РезервБУ,
	|	Начислено.РезервНУ
	|ИЗ
	|	Документ.ОтражениеЗарплатыВФинансовомУчете.НачисленнаяЗарплатаИВзносы КАК Начислено
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК Реквизиты
	|			ПО Начислено.СпособОтраженияЗарплатыВБухучете = Реквизиты.Ссылка
	|ГДЕ
	|	Начислено.Ссылка = &Ссылка
	|	И Начислено.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И НЕ (Начислено.РезервБУ И Начислено.РезервНУ)
	|	И &Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начислено.НомерСтроки,
	|	Начислено.Сотрудник.ФизическоеЛицо,
	|	Начислено.МестоВСтруктуреПредприятия,
	|	Начислено.СпособОтраженияЗарплатыВБухучете,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка),
	|	Начислено.ОблагаетсяЕНВД,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка),
	|	&Организация,
	|	Начислено.СуммаРезерва,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.СуммаРезерваФССНесчастныеСлучаи
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начислено.СуммаРезерваСтраховыхВзносов,
	|	Начислено.СуммаРезерваНУ,
	|	Начислено.СуммаРезерваСтраховыхВзносовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.СуммаРезерваФССНесчастныеСлучаиНУ
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательстваПоСотрудникам КАК Начислено
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК Реквизиты
	|			ПО Начислено.СпособОтраженияЗарплатыВБухучете = Реквизиты.Ссылка
	|ГДЕ
	|	Начислено.Ссылка = &Ссылка
	|	И Начислено.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И НЕ &Сводно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начислено.НомерСтроки,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка),
	|	Начислено.МестоВСтруктуреПредприятия,
	|	Начислено.СпособОтраженияЗарплатыВБухучете,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка),
	|	Начислено.ОблагаетсяЕНВД,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка),
	|	&Организация,
	|	Начислено.СуммаРезерва,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.СуммаРезерваФССНесчастныеСлучаи
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	Начислено.СуммаРезерваСтраховыхВзносов,
	|	Начислено.СуммаРезерваНУ,
	|	Начислено.СуммаРезерваСтраховыхВзносовНУ,
	|	ВЫБОР
	|		КОГДА Реквизиты.РежимУчетаВзносовНаТравматизм = 1
	|			ТОГДА 0
	|		ИНАЧЕ Начислено.СуммаРезерваФССНесчастныеСлучаиНУ
	|	КОНЕЦ,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК Начислено
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК Реквизиты
	|			ПО Начислено.СпособОтраженияЗарплатыВБухучете = Реквизиты.Ссылка
	|ГДЕ
	|	Начислено.Ссылка = &Ссылка
	|	И Начислено.СпособОтраженияЗарплатыВБухучете.ОплатаСдельныхРабот
	|	И &Сводно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НоваяТаблицаВыработкаСотрудников()
	
	Таблица = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ОтражениеЗарплатыВФинансовомУчете.Период,
		|	ОтражениеЗарплатыВФинансовомУчете.Регистратор,
		|	ОтражениеЗарплатыВФинансовомУчете.НомерСтроки,
		|	ОтражениеЗарплатыВФинансовомУчете.Активность,
		|	ОтражениеЗарплатыВФинансовомУчете.Организация,
		|	ОтражениеЗарплатыВФинансовомУчете.Подразделение,
		|	ОтражениеЗарплатыВФинансовомУчете.НаправлениеДеятельности,
		|	ОтражениеЗарплатыВФинансовомУчете.ВидНачисленияОплатыТруда,
		|	ОтражениеЗарплатыВФинансовомУчете.ВидОперацииПоЗарплате,
		|	ОтражениеЗарплатыВФинансовомУчете.СтатьяРасходов,
		|	ОтражениеЗарплатыВФинансовомУчете.АналитикаРасходов,
		|	ОтражениеЗарплатыВФинансовомУчете.ВидРабот,
		|	ОтражениеЗарплатыВФинансовомУчете.ФизическоеЛицо КАК Сотрудник,
		|	ОтражениеЗарплатыВФинансовомУчете.ГруппаПродукции,
		|	ОтражениеЗарплатыВФинансовомУчете.ТипНалога,
		|	ОтражениеЗарплатыВФинансовомУчете.АналитикаАктивовПассивов,
		|	ОтражениеЗарплатыВФинансовомУчете.СчетУчета,
		|	ОтражениеЗарплатыВФинансовомУчете.Субконто1,
		|	ОтражениеЗарплатыВФинансовомУчете.Субконто2,
		|	ОтражениеЗарплатыВФинансовомУчете.Субконто3,
		|	ОтражениеЗарплатыВФинансовомУчете.СуммаРегл,
		|	ОтражениеЗарплатыВФинансовомУчете.ПостояннаяРазница,
		|	ОтражениеЗарплатыВФинансовомУчете.ВременнаяРазница,
		|	0 КАК Сумма,
		|	НЗП.ЗаказНаПроизводство                               КАК ЗаказНаПроизводство,
		|	0                                                     КАК КодСтрокиПродукция,
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)   КАК Этап,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)   КАК СтатьяКалькуляции,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыФондовВзносов.ПустаяСсылка) КАК ВидФондаВзносов,
		|	НЗП.ПартияПроизводства                                КАК ПартияПроизводства,
		|	ЛОЖЬ КАК ПринятиеКНалоговомуУчетуПоСдельнымРаботам,
		|	ОтражениеЗарплатыВФинансовомУчете.ВидПлатежаВГосБюджет КАК ВидПлатежаВГосБюджет,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка) КАК СпособРасчетов,
		|	ЛОЖЬ КАК НеОблагаетсяНДФЛ
		|ИЗ
		|	РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете КАК ОтражениеЗарплатыВФинансовомУчете
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТрудозатратыНезавершенногоПроизводства КАК НЗП
		|		ПО ИСТИНА
		|";
	
	Результат = Запрос.Выполнить();
	
	Таблица = Результат.Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ПараметрыРаспределенияСтроки(ВидСуммы, СтрокаБазы, ДанныеСпособа)
	
	Параметры = Новый Структура("ИдентификаторНабора, ТипНалога, ВидФондаВзносов, ВидПлатежаВГосБюджет");
	
	Параметры.ТипНалога            = ВидСуммы.ТипНалога;
	Параметры.ВидФондаВзносов      = ВидСуммы.ВидФондаВзносов;
	Параметры.ВидПлатежаВГосБюджет = ВидСуммы.ВидПлатежаВГосБюджет;
	
	Если СтрокаБазы.ИдентификаторНабора = "ПрочиеРасходыАктивыПассивы" Тогда
		
		СтруктураОтбора = Новый Структура("СпособОтражения, ОблагаетсяЕНВД", СтрокаБазы.СпособОтраженияПрочихРабот, СтрокаБазы.ОблагаетсяЕНВД);
		ДанныеСпособа.НайтиСледующий(СтруктураОтбора);
		
		Параметры.Вставить("СтатьяРасходов", ДанныеСпособа["СтатьяРасходов" + ВидСуммы.Постфикс]);
		Параметры.Вставить("НаправлениеДеятельности", ДанныеСпособа["НаправлениеДеятельности"]);
		
		Если ТипЗнч(Параметры.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			Параметры.ИдентификаторНабора = "ПрочиеРасходы";
			Параметры.Вставить("АналитикаРасходов",         ДанныеСпособа["АналитикаРасходов" + ВидСуммы.Постфикс]);
			
			ИмяАналитики = "АналитикаРасходов";
			
		Иначе
			Параметры.ИдентификаторНабора = "ПрочиеАктивыПассивы";
			Параметры.Вставить("АналитикаАктивовПассивов",  ДанныеСпособа["АналитикаАктивовПассивов" + ВидСуммы.Постфикс]);
			Параметры.Вставить("СчетУчета",                 ДанныеСпособа["СчетУчета" + ВидСуммы.Постфикс]);
			Параметры.Вставить("Субконто1",                 ДанныеСпособа["Субконто1" + ВидСуммы.Постфикс]);
			Параметры.Вставить("Субконто2",                 ДанныеСпособа["Субконто2" + ВидСуммы.Постфикс]);
			Параметры.Вставить("Субконто3",                 ДанныеСпособа["Субконто3" + ВидСуммы.Постфикс]);
			
			ИмяАналитики = "АналитикаАктивовПассивов";
			
			// автоматический подбор Субконто
			Для НомерСубконто = 1 По 3 Цикл
				
				ИмяСубконто = "Субконто" + Строка(НомерСубконто);
				
				Если Не ЗначениеЗаполнено(Параметры[ИмяСубконто]) Тогда
					Если ТипЗнч(Параметры[ИмяСубконто]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
						Параметры[ИмяСубконто] = СтрокаБазы.Сотрудник;
					ИначеЕсли ТипЗнч(Параметры[ИмяСубконто]) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
						Параметры[ИмяСубконто] = СтрокаБазы.ОбъектЭксплуатации;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// автоматический подбор аналитики
		Если Не ЗначениеЗаполнено(Параметры[ИмяАналитики]) Тогда
			
			Если ТипЗнч(Параметры[ИмяАналитики]) = Тип("СправочникСсылка.Организации") Тогда
				Параметры[ИмяАналитики] = СтрокаБазы.Организация;
			ИначеЕсли ТипЗнч(Параметры[ИмяАналитики]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Параметры[ИмяАналитики] = СтрокаБазы.Сотрудник;
			ИначеЕсли ТипЗнч(Параметры[ИмяАналитики]) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Параметры[ИмяАналитики] = СтрокаБазы.Подразделение;
			ИначеЕсли ТипЗнч(Параметры[ИмяАналитики]) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
				Параметры[ИмяАналитики] = СтрокаБазы.ОбъектЭксплуатации;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСпособа.Сбросить();
		
	Иначе
		
		Если ЗначениеЗаполнено(ВидСуммы.ВидФондаВзносов) Тогда
			Параметры.Вставить("СтатьяКалькуляции", СтрокаБазы.СтатьяКалькуляцииВзносов);
		Иначе
			Параметры.Вставить("СтатьяКалькуляции", СтрокаБазы.СтатьяКалькуляции);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ВидыРаспределяемыхНачислений(Ссылка)
	
	ВидыНачислений = Новый Массив;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВФинансовомУчете") Тогда
		
		// Начисление.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПустаяСсылка(),
			Перечисления.ТипыНалогов.ПустаяСсылка(),
			"Сумма",
			Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка(),
			"");
		ВидыНачислений.Добавить(ВидНачисления);
		
		// Страховые взносы по единому тарифу.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.СФР,
			Перечисления.ТипыНалогов.СтраховыеВзносыЕдиныйТариф,
			"ВзносыПоЕдиномуТарифу",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - страховые взносы.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРСтраховаяЧасть,
			"ПФРСтраховая",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - накопительная часть (до 2014 г.).
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРНакопительнаяЧасть,
			"ПФРНакопительная",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - по суммарному тарифу с 1 января 2014 года.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРПоСуммарномуТарифу,
			"ПФРПоСуммарномуТарифу",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - с базы сверх предельной величины, с 1 января 2016 года.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРСПревышения,
			"ПФРСПревышения",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - с базы до предельной величины.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРДоПредельнойВеличины,
			"ПФРДоПредельнойВеличины",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - Взносы на выплату доплат к пенсии членам летных экипажей.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРДополнительныйТарифЛЭ,
			"ПФРНаДоплатуЛетчикам",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - дополнительный тариф шахтеров.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРДополнительныйТарифШахтеры,
			"ПФРНаДоплатуШахтерам",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - дополнительный тариф за занятых на работах с вредными условиями труда.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
			"ПФРЗаЗанятыхНаПодземныхИВредныхРаботах",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР - дополнительный тариф за занятых на работах с тяжелыми условиями труда.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
			"ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ФСС - страховые взносы.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФСС,
			Перечисления.ТипыНалогов.ФСС,
			"ФСС",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ФСС - страховые взносы от несчастных случаев.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФСС,
			Перечисления.ТипыНалогов.ФССНС,
			"ФССНесчастныеСлучаи",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ФОМС - страховые взносы в ФФОМС.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФОМС,
			Перечисления.ТипыНалогов.ФФОМС,
			"ФФОМС",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ФОМС - страховые взносы в ТФОМС.
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФОМС,
			Перечисления.ТипыНалогов.ТФОМС,
			"ТФОМС",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР (вредные работы, без спец. оценки).
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
			"ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки",
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР (вредные работы, спец. оценка).
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
			"ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР (тяжелые работы, без спец. оценки).
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
			"ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки",
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
		ВидыНачислений.Добавить(ВидНачисления);
		
		// ПФР (тяжелые работы, спец. оценка).
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПФР,
			Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
			"ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка",
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		ВидыНачислений.Добавить(ВидНачисления);
		
	Иначе
		
		// Для документа Начисление оценочных обязательств
		
		// начисление
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ПустаяСсылка(),
			Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВознаграждениям,
			"Сумма",
			Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка(),
			"");
		ВидыНачислений.Добавить(ВидНачисления);
		
		// взносы
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФСС,
			Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоСтраховымВзносам,
			"Взносы",
			Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка(),
			"");
		ВидыНачислений.Добавить(ВидНачисления);
		
		// взносы ФСС НС
		ВидНачисления = СтруктураВидаНачисления(
			Перечисления.ВидыФондовВзносов.ФСС,
			Перечисления.ТипыОценочныхОбязательств.ОценочныеОбязательстваПоВзносамФССНСиПЗ,
			"ФССНесчастныеСлучаи",
			Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка(),
			"");
		ВидыНачислений.Добавить(ВидНачисления);
		
	КонецЕсли;
	
	Возврат ВидыНачислений;
	
КонецФункции

Функция СтруктураВидаНачисления(ВидФондаВзносов, ТипНалога, Представление, ВидПлатежаВГосБюджет, Постфикс = "Взносов")
	
	ВидСуммыВзносов = Новый Структура();
	ВидСуммыВзносов.Вставить("ВидФондаВзносов",      ВидФондаВзносов);
	ВидСуммыВзносов.Вставить("ТипНалога",            ТипНалога);
	ВидСуммыВзносов.Вставить("Представление",        Представление);
	ВидСуммыВзносов.Вставить("Постфикс",             Постфикс);
	ВидСуммыВзносов.Вставить("ВидПлатежаВГосБюджет", ВидПлатежаВГосБюджет);
	
	Возврат ВидСуммыВзносов;
	
КонецФункции

Функция НачислениеНеОблагаетсяНДФЛ(Начисление)
	
	Если ТипЗнч(Начисление) = Тип("ПланВидовРасчетаСсылка.Начисления")
		ИЛИ ТипЗнч(Начисление) = Тип("СправочникСсылка.ВидыВыплатБывшимСотрудникам")
		ИЛИ ТипЗнч(Начисление) = Тип("СправочникСсылка.ВидыПрочихДоходовФизическихЛиц") Тогда
		КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Начисление, "КодДоходаНДФЛ");
		Возврат НЕ ЗначениеЗаполнено(КодДоходаНДФЛ);
	ИначеЕсли ТипЗнч(Начисление) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
		Возврат Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение
			ИЛИ Начисление = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИспользоватьДокументОтражениеЗарплатыДляСписанияРезервовОтпусков(ПериодРегистрации) Экспорт
	Возврат ПериодРегистрации > Константы.ДатаНачалаСписанияРезервовОтпусковДокументомОтражениеЗарплаты.Получить();
КонецФункции

#КонецОбласти