////////////////////////////////////////////////////////////////////////////////
// ОУП: Процедуры подсистемы оперативного учета производства
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ Устарело_Производство21

//++ НЕ УТКА

// Формирует системные оповещения о записи маршрутных листов
//
// Параметры:
//  Источник						- УникальныйИдентификатор - идентификатор формы в которой выполнена запись
//									- Строка - идентификатор функции в которой выполнена запись
//  ВызватьОповеститьОбИзменении	- Булево - Истина, если нужно вызвать ОповеститьОбИзменении
//  ИзмененныеДокументы				- Массив, ДокументСсылка.МаршрутныйЛистПроизводства  - список измененных маршрутных листов.
//
Процедура ОповеститьОЗаписиМаршрутныхЛистов(Источник = Неопределено, ВызватьОповеститьОбИзменении = Истина, ИзмененныеДокументы = Неопределено) Экспорт

	Оповестить("Запись_МаршрутныйЛистПроизводства", ИзмененныеДокументы, Источник);
	
	Если ВызватьОповеститьОбИзменении Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.МаршрутныйЛистПроизводства"));
	КонецЕсли; 
	
КонецПроцедуры

// Формирует системное оповещение об изменении расписания рабочих центров
//
// Параметры:
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - вид рабочего центра для которого изменилось расписание
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение для которого изменилось расписание
//  ДатаИнтервала		- Дата - дата интервала планирования в котором изменилось расписание
//  Форма				- Форма - форма в которой было изменено расписание.
//
Процедура ОповеститьОбИзмененииРасписанияВидаРабочегоЦентра(ВидРабочегоЦентра, Подразделение, ДатаИнтервала, Форма) Экспорт

	ПараметрыСобытия = Новый Структура("ВидРабочегоЦентра,Подразделение,ДатаИнтервала", 
								ВидРабочегоЦентра, Подразделение, ДатаИнтервала);
								
	Оповестить("РасписаниеРабочихЦентров_Изменение", ПараметрыСобытия, Форма);
	
КонецПроцедуры

// Формирует системное оповещение об изменении ключевого вида рабочего центра
//
Процедура ОповеститьОбИзмененииКлючевогоВидаРабочегоЦентра() Экспорт

	Оповестить("КлючевыеВидыРабочихЦентров_Изменение");
	
КонецПроцедуры

// Определяет, что указанное событие - это событие об изменении расписания
//
// Параметры:
//  ИмяСобытия	- Строка - имя события.
//
// Возвращаемое значение:
//  Булево   - Истина, если расписание изменилось.
//
Функция СобытиеРасписаниеВидаРабочегоЦентраИзменилось(ИмяСобытия) Экспорт

	Возврат (ИмяСобытия = "РасписаниеРабочихЦентров_Изменение");

КонецФункции

// Определяет, что указанное событие - это событие об изменении расписания операций
//
// Параметры:
//  ИмяСобытия	- Строка - имя события.
//
// Возвращаемое значение:
//  Булево   - Истина, если расписание изменилось.
//
Функция СобытиеРасписаниеОперацийИзменилось(ИмяСобытия) Экспорт

	Возврат (ИмяСобытия = "РасписаниеОперацийРабочихЦентров_Изменение");

КонецФункции

// Определяет, что указанное событие - это событие об изменении ключевого вида рабочего центра.
//
// Параметры:
//  ИмяСобытия	- Строка - имя события.
//
// Возвращаемое значение:
//  Булево   - Истина, если ключевой вид рабочего центра изменился.
//
Функция СобытиеКлючевойВидРабочегоЦентраИзменился(ИмяСобытия) Экспорт

	Возврат (ИмяСобытия = "КлючевыеВидыРабочихЦентров_Изменение");

КонецФункции

// Увеличивает или уменьшает количество согласно кратности
//
// Параметры:
//  Количество				- Число - количество которое нужно изменить
//  Кратность				- Число - какому значению должно быть кратно количество
//  Направление 			- Число - "1" если нужно увеличить, "-1" если нужно уменьшить
//  МинимальноеЗначение		- Число - Минимальное значение
//  МаксимальноеЗначение	- Число - Максимальное значение.
//
// Возвращаемое значение:
//   Число   - полученное количество.
//
Функция РегулированиеКоличества(Количество, Кратность, Направление, МинимальноеЗначение = Неопределено, МаксимальноеЗначение = Неопределено) Экспорт
	
 	НовоеКоличество = Цел(Количество / Кратность) * Кратность + Кратность * Направление;
	
	Если НовоеКоличество < МинимальноеЗначение 
		ИЛИ НовоеКоличество > МаксимальноеЗначение Тогда
		НовоеКоличество = Количество + Направление;
	КонецЕсли;
	
	Если МинимальноеЗначение <> Неопределено И НовоеКоличество < МинимальноеЗначение 
		ИЛИ МаксимальноеЗначение <> Неопределено И НовоеКоличество > МаксимальноеЗначение Тогда
		
		Возврат Количество;
	КонецЕсли;
	
	Возврат НовоеКоличество;

КонецФункции

// Формирует маршрутные листы по заказам на производство
//
// Параметры:
//  СписокРаспоряжений	- Массив - заказы на производство для которого требуется сформировать МЛ
//  Источник			- УникальныйИдентификатор - идентификатор формы в которой выполняется формирование МЛ
//						- Строка - идентификатор функции в которой выполняется формирование МЛ.
//
Процедура СформироватьМаршрутныеЛистыПоЗаказам(СписокРаспоряжений, Источник = Неопределено) Экспорт
	
	Результат = ОперативныйУчетПроизводстваВызовСервера.СформироватьМаршрутныеЛистыПоЗаказам(СписокРаспоряжений);
	Если Результат.Выполнено Тогда
		ОповеститьПользователяОФормированииМаршрутныхЛистов(
				Результат.КоличествоОбработанных, 
				Результат.КоличествоВсего,
				Источник);
	Иначе
		ПоказатьПредупреждение(,Результат.ТекстПредупреждения); 
	КонецЕсли; 
	
КонецПроцедуры

// Формирует маршрутные листы необходимые для формирования расписания на указанном виде РЦ.
//
// Параметры:
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение для которого требуется сформировать МЛ
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - вид рабочего центра для которого формируется расписание
//	ДатаИнтервала		- Дата - начало интервала планирования
//  Источник			- УникальныйИдентификатор - идентификатор формы в которой выполняется формирование МЛ
//						- Строка - идентификатор функции в которой выполняется формирование МЛ.
//
Процедура СформироватьМаршрутныеЛистыПоРасписанию(Подразделение, ВидРабочегоЦентра, ДатаИнтервала, Источник = Неопределено) Экспорт
	
	Результат = ОперативныйУчетПроизводстваВызовСервера.СформироватьМаршрутныеЛистыПоРасписанию(
		Подразделение, ВидРабочегоЦентра, ДатаИнтервала);
	Если Результат.Выполнено Тогда
		ОповеститьПользователяОФормированииМаршрутныхЛистов(
				Результат.КоличествоОбработанных, 
				Результат.КоличествоВсего,
				Источник);
	Иначе
		ПоказатьПредупреждение(,Результат.ТекстПредупреждения); 
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

//-- Устарело_Производство21

// Оформляет документ выработки сотрудников на основании распоряжений
//
// Параметры:
//  СписокРаспоряжений	- Массив - список распоряжений.
//
Процедура ОформитьВыработкуСотрудниковПоРаспоряжениям(СписокРаспоряжений) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Распоряжения", СписокРаспоряжений);
	
	ПараметрыОформления = ОперативныйУчетПроизводстваВызовСервера.ПараметрыОформленияВыработкиСотрудников(СтруктураОтбора);
	
	Если ПараметрыОформления = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'По выбранным распоряжениям выработка сотрудников уже оформлена, оформление не требуется или не доступна.';
				|en = 'Timesheets charge for the selected references is already registered. Registration is not required or unavailable.'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОформления.ТребуетсяОдинДокумент Тогда
		
		ПараметрыОформления.Вставить("ЗаполнитьПоОтбору", Истина);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыОформления);
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		Результат = ОперативныйУчетПроизводстваВызовСервера.СформироватьВыработкуСотрудниковПоОтбору(ПараметрыОформления);
		
		Если Результат.КоличествоДокументов > 0 Тогда
			ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСпискаНовыхДокументов",
				Результат,,,,,);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не удалось оформить выработку по выбранным распоряжениям. Требуется перейти в форму ""К оформлению"" и создать документы вручную.';
					|en = 'Cannot register output by selected references. Go to the ""For registration"" form and create documents manually.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

// Оформляет документ выработки сотрудников на основании сменных заданий
//
// Параметры:
//  СписокСменныхЗаданий	- Массив - список сменных заданий.
//
Процедура ОформитьВыработкуСотрудниковПоСменномуЗаданию(СписокСменныхЗаданий) Экспорт
	
	ПараметрыОформления = ОперативныйУчетПроизводстваВызовСервера.ПараметрыОформленияВыработкиСотрудниковПоСменномуЗаданию(
		СписокСменныхЗаданий);
	
	Если ПараметрыОформления = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'По выбранным распоряжениям выработка сотрудников уже оформлена или оформление не требуется.';
				|en = 'Timesheets charge for the selected references has already been registered or registration is not required.'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОформления.ТребуетсяОдинДокумент Тогда
		
		ПараметрыОформления.Вставить("ЗаполнитьПоОтбору", Истина);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ПараметрыОформления);
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаОбъекта", ПараметрыФормы);
		
	Иначе
		
		Результат = ОперативныйУчетПроизводстваВызовСервера.СформироватьВыработкуСотрудниковПоОтбору(ПараметрыОформления);
		
		Если Результат.КоличествоДокументов > 0 Тогда
			ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаСпискаНовыхДокументов",
				Результат,,,,,);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не удалось оформить выработку по выбранным распоряжениям. Требуется перейти в форму ""К оформлению"" и создать документы вручную.';
					|en = 'Cannot register output by selected references. Go to the ""For registration"" form and create documents manually.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//-- НЕ УТКА

//++ НЕ УТКА

#Область РегистрацияОпераций

// Формирует системные оповещения о записи производственных операций
//
// Параметры:
//  Подразделение				 - СправочникСсылка.СтруктураПредприятия	 - Производственное подразделение
//  ВызватьОповеститьОбИзменении - Булево									 - Истина, если нужно вызвать ОповеститьОбИзменении
//  ИзмененныеДокументы			 - Массив, ДокументСсылка.ПроизводственнаяОперация2_2	 - список измененных производственных операций.
//
Процедура ОповеститьОЗаписиПроизводственныхОпераций(Подразделение, ВызватьОповеститьОбИзменении = Истина, ИзмененныеДокументы = Неопределено) Экспорт
	
	ПараметрыОповещения = Новый Структура("Подразделение, ИзмененныеДокументы", Подразделение, ИзмененныеДокументы);
	
	Оповестить("Запись_ПроизводственнаяОперация2_2", ПараметрыОповещения);
	
	Если ВызватьОповеститьОбИзменении Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПроизводственнаяОперация2_2"));
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций"));
	КонецЕсли; 
	
КонецПроцедуры

// Оповещает пользователя о завершении процесса формирования производственных операций
//
// Параметры:
//  КоличествоОбработанных	 - Число - количество созданных документов.
//  КоличествоВсего			 - Число - количество документов, которые могут быть созданы.
//  Источник				 - УникальныйИдентификатор - идентификатор формы, инициировавшей создание документов.
//
Процедура ОповеститьПользователяОФормированииПроизводственныхОпераций(КоличествоОбработанных, КоличествоВсего, Источник = Неопределено) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Сформировано %КоличествоОбработанных% из %КоличествоВсего% документов';
								|en = 'Generated %КоличествоОбработанных% from %КоличествоВсего% documents'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстЗаголовка = НСтр("ru = 'Производственные операции сформированы';
								|en = 'Routing operations are generated'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не сформирован ни один документ';
								|en = 'No document is generated'");
		ТекстЗаголовка = НСтр("ru = 'Производственные операции не сформированы';
								|en = 'Routing operations are not generated'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует производственные операции
//
// Параметры:
//  Подразделение			 - СправочникСсылка.СтруктураПредприятия							 - производственное подразделение
//  КлючиОпераций			 - Массив, РегистрСведенийКлючЗаписи.ОчередьПроизводственныхОпераций - ключ записи
//  ПараметрыНазначения		 - Структура														 - параметры назначения
//    * Участок
//    * ВидРабочегоЦентра
//    * РабочийЦентр
//    * Исполнитель
//    * Количество
//  УстанавливаемыйСтатус	- ПеречислениеСсылка.СтатусыПроизводственныхОпераций				 - статус нового документа
//
Процедура СформироватьПроизводственныеОперации(Подразделение, КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус = Неопределено) Экспорт
	
	Результат = ОперативныйУчетПроизводстваВызовСервера.СформироватьПроизводственныеОперации(КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус);
	
	Если Не (Результат.КоличествоВсего = Результат.КоличествоОбработанных) И Результат.КоличествоВсего = 1 Тогда
		
		СписокДанныхЗаполнения = ОперативныйУчетПроизводстваВызовСервера.ДанныеЗаполненияНовыхПроизводственныхОпераций(
			КлючиОпераций, ПараметрыНазначения, УстанавливаемыйСтатус, Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", СписокДанныхЗаполнения[0]);
		ПараметрыФормы.Вставить("ПроверитьПриОткрытии", Истина);
		
		ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.Независимый);
			
	Иначе
		
		ОповеститьПользователяОФормированииПроизводственныхОпераций(
				Результат.КоличествоОбработанных,
				Результат.КоличествоВсего);
		
		ОповеститьОЗаписиПроизводственныхОпераций(Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает статус для списка операций
//
// Параметры:
//  Ссылки			 - Массив								 - список документов.
//  Статус			 - Строка								 - новый статус.
//  Подразделение	 - СправочникСсылка.СтруктураПредприятия - производственное подразделение.
//
Процедура УстановитьСтатусПроизводственнойОперации(Ссылки, Статус, Подразделение) Экспорт
	
	ОчиститьСообщения();
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.ПроизводственнаяОперация2_2.УстановитьСтатус");
	
	СтатусПредставление = "" + Статус;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Ссылки, Статус);
	
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		Неопределено,
		КоличествоОбработанных,
		Ссылки.Количество(),
		СтатусПредставление);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Подразделение", Подразделение);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(Ссылки,ПараметрОповещения);
	
КонецПроцедуры

// Устанавливает пометку удаления для списка операций
//
// Параметры:
//  Ссылки			 - Массив								 - список документов.
//  Подразделение	 - СправочникСсылка.СтруктураПредприятия - производственное подразделение.
//
Процедура ОтменитьНазначениеПроизводственнойОпераций(Ссылки, Подразделение) Экспорт
	ОчиститьСообщения();
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Документ.ПроизводственнаяОперация2_2.ПометитьНаУдаление");
	
	ОбщегоНазначенияУТВызовСервера.УстановитьПометкуУдаленияЗавершениеСервер(Ссылки, Истина);
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Подразделение", Подразделение);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(Ссылки,ПараметрОповещения);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

//++ Устарело_Производство21

//++ НЕ УТКА

#Область ПооперационноеПланирование

// Определяет имя события, которое используется для оповещения об изменении статуса выполнения операций расписания.
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияИзменениеСтатусаОпераций() Экспорт
	
	Возврат "ИзменениеСтатусаОперацийРасписанияПроизводства";
	
КонецФункции

// Открывает форму для формирования сменно-суточных заданий.
//
// Параметры:
//  Владелец		 - ФормаКлиентскогоПриложения	 - владелец открываемой формы.
//  ПараметрыФормы	 - Структура		 - параметры открытия формы.
//
Процедура ОткрытьФормуДляПечатиСменноСуточныхЗаданий(Знач Владелец, Знач ПараметрыФормы) Экспорт
	
	ОткрытьФорму("Обработка.ДиспетчированиеПроизводстваПооперационное.Форма.ПечатьСменноСуточныхЗаданий", 
						ПараметрыФормы, Владелец,,,,,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выполняет обработку расшифровки интервала диаграммы Ганта, содержащего данные о параллельной
//  загрузке рабочего центра.
//
// Параметры:
//  Владелец			 - ФормаКлиентскогоПриложения	 - форма, в которой выполнена расшифровка.
//  ПараметрыФормы		 - Структура		 - параметры выбранного интервала.
//  СтандартнаяОбработка - Булево			 - флаг стандартной обработки расшифровки.
//
Процедура ОбработкаРасшифровкиИнтервалаСПараллельнойЗагрузкой(Знач Владелец, Знач ПараметрыФормы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму(
		"Отчет.ДиаграммаПооперационногоРасписания.Форма.РасшифровкаПараллельнойЗагрузки",
		ПараметрыФормы,
		Владелец,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Открывает форму для диспетчирования маршрутных листов, принадлежащих подразделениям с
//	методиками управления "Пооперационное планирование" и "Регистрация операций".
//
// Параметры:
//  МетодикаУправления - ПеречислениеСсылка.УправлениеМаршрутнымиЛистами - методика, в соответствии с которой
//		должна быть настроена форма диспетчирования.
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, по которому необходимо установить отбор.
//	СписокЭтапов - Массив - содержит данные этапов производства для установки отбора.
//		Элементами являются структуры со свойствами:
//		* Распоряжение - ДокументСсылка.ЗаказНаПроизводство;
//		* КодСтрокиЭтапыГрафик - Число.
//
Процедура ОткрытьФормуДиспетчированиеПооперационное(МетодикаУправления, Подразделение = Неопределено, СписокЭтапов = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УправлениеМаршрутнымиЛистами", МетодикаУправления);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ПараметрыФормы.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(СписокЭтапов) Тогда
		ПараметрыФормы.Вставить("СписокЭтапов", СписокЭтапов);
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ДиспетчированиеПроизводстваПооперационное.Форма",
		ПараметрыФормы,,
		МетодикаУправления);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

//-- Устарело_Производство21

#КонецОбласти

//++ НЕ УТКА

#Область СлужебныеПроцедурыИФункции

//++ Устарело_Производство21

// Оповещает пользователя о завершении процесса создания маршрутных листов.
//
// Параметры:
//  КоличествоОбработанных	 - Число - количество созданных документов.
//  КоличествоВсего			 - Число - количество документов, которые могут быть созданы.
//  Источник				 - УникальныйИдентификатор - идентификатор формы, инициировавшей создание документов.
//
Процедура ОповеститьПользователяОФормированииМаршрутныхЛистов(КоличествоОбработанных, КоличествоВсего, Источник = Неопределено) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Сформировано %КоличествоОбработанных% из %КоличествоВсего% документов';
								|en = 'Generated %КоличествоОбработанных% from %КоличествоВсего% documents'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстЗаголовка = НСтр("ru = 'Маршрутные листы сформированы';
								|en = 'Route sheets are generated'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		ОперативныйУчетПроизводстваКлиент.ОповеститьОЗаписиМаршрутныхЛистов(Источник);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не сформирован ни один документ';
								|en = 'No document is generated'");
		ТекстЗаголовка = НСтр("ru = 'Маршрутные листы не сформированы';
								|en = 'Route sheets are not generated'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

//-- Устарело_Производство21

// Определяет необходимость подтверждения пользователем при интерактивном изменении статуса операции.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура
//  Статус - ПеречислениеСсылка.СтатусыПроизводственныхОпераций
// 
// Возвращаемое значение:
//  Булево
Функция ПодтвердитьПриУстановкеСтатусаОперации(Объект, Статус) Экспорт
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыПроизводственныхОпераций.Пропущена")
		И Объект.МожноПропустить
		И (Объект.КоличествоНаКонтроле > 0
			ИЛИ Объект.КоличествоНаДоработке > 0
			ИЛИ Объект.КоличествоБрак > 0
			ИЛИ Объект.КоличествоФакт > 0) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Текст вопроса при изменении статуса на Пропущена.
// 
// Параметры:
//  Список - Булево - Необходимость сформировать вопрос во множественном числе
// 
// Возвращаемое значение:
//  Строка - Текст вопроса
Функция ТекстВопросаПриУстановкеСтатусаПропущена(Список = Ложь) Экспорт
	
	Если Список Тогда
		Возврат НСтр("ru = 'При установке статуса ""Пропущена"" все накопленные показатели выполнения операций будут аннулированы. Продолжить?';
					|en = 'If you set the ""Skipped"" status, all accumulated performance indicators will be canceled. Continue?'");
	Иначе
		Возврат НСтр("ru = 'При установке статуса ""Пропущена"" все накопленные показатели выполнения операции будут аннулированы. Продолжить?';
					|en = 'If you set the ""Skipped"" status, all accumulated performance indicators will be canceled. Continue?'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА