#Область ПрограммныйИнтерфейс

#Область РазрешительныйРежим

// Инициализация конфигурации Локального модуля Честный знак. Выполняется для первичной установки и настройки
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  ИдентификаторФискальногоНакопителя - Строка - идентификатор фискального накопителя
// 
// Возвращаемое значение:
//  Структура - результат иницициализации:
// * ТребуетсяОбновлениеКлючаСессииРозница - Булево - признак необходимости обновления ключа сессии
// * ОтказАвторизации - Булево - Истина, если переданы некорректные данные администратора ЛМ ЧЗ
// * РезультатОтправкиЗапроса - Неопределено,
// 		см. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
// * ТекстОшибки - Строка - текст ошибки, полученной от ЛМ ЧЗ
Функция ИнициализацияКонфигурацииЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, ИдентификаторФискальногоНакопителя = "") Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПВызовСервера.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессииИСМПРозница(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ПараметрыУстановки.Логин, ПараметрыУстановки.Пароль));
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
	
	Если ЗначениеЗаполнено(ИдентификаторФискальногоНакопителя) Тогда
		ЗаголовокHTTP.Вставить("X-ClientId",     ИдентификаторФискальногоНакопителя);
	КонецЕсли;
	
	URLЗапроса = "api/v1/init";
	
	ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки);
	
	ПараметрыЗапроса = Новый Структура("token", КлючСессии);
	ТелоЗапросаJSON  = ОбщегоНазначенияИСКлиентСервер.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапросаJSON,
		,
		"POST",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
	
	ОбработатьОтветИнициализацияКонфигурацииЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запрос статуса системы Локального модуля Честный знак. Выполняется для проверки актуального состояния
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
// 
// Возвращаемое значение:
//  Структура - результат иницициализации:
// * ОтказАвторизации - Булево - Истина, если переданы некорректные данные администратора ЛМ ЧЗ
// * РезультатОтправкиЗапроса - (См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). 
// * ТекстОшибки - Строка - текст ошибки, полученной от ЛМ ЧЗ
// * ВерсияСборки - Строка - номер версии сборки ЛМ ЧЗ
// * Статус - Строка - статус текущего состояния системы - готова к работе, в процессе инициализации, ошибка синхронизации
// * ДатаПоследнейСинхронизации - Дата - дата последней синхронизации системы
// * ТребуетсяЗагрузка - Булево - Истина, если требуется обновление токена
Функция ЗапроситьСтатусЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",           Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ВерсияСборки",               "");
	ВозвращаемоеЗначение.Вставить("Статус",                     "");
	ВозвращаемоеЗначение.Вставить("ДатаПоследнейСинхронизации", Дата(1, 1, 1));
	ВозвращаемоеЗначение.Вставить("ТребуетсяЗагрузка",          Ложь);
	
	ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ПараметрыУстановки.Логин, ПараметрыУстановки.Пароль));
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
	
	URLЗапроса = "api/v1/status";
	
	ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		,,
		"GET",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
	
	ОбработатьОтветЗапроситьСтатусЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Изменение пароля администратора системы Локального модуля Честный знак. Выполняется по желанию
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  НовыйПароль - Строка - согласно API ЛМ ЧЗ должна отвечать следующим требованиям:
//		Пароль не может содержать пустую строку
//		Длина пароля должна быть не менее 8 символов. 
//		Пароль должен содержать буквы и цифры
// 
// Возвращаемое значение:
//  Структура - результат иницициализации:
// * ОтказАвторизации - Булево - Истина, если переданы некорректные данные администратора ЛМ ЧЗ
// * РезультатОтправкиЗапроса - (См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON). 
// * ТекстОшибки - Строка - текст ошибки, полученной от ЛМ ЧЗ
// * ОшибкаПроверкиНовогоПароля - Булево - если передан пароль, не соответствующий заявленным параметрам
Функция ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, НовыйПароль) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",           Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ОшибкаПроверкиНовогоПароля", Ложь);
	
	ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ПараметрыУстановки.Логин, ПараметрыУстановки.Пароль));
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
	
	URLЗапроса = "api/v1/changePassword";
	
	ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки);
	
	ПараметрыЗапроса = Новый Структура("newPassword", НовыйПароль);
	ТелоЗапросаJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапросаJSON,
		,
		"PUT",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
	
	ОбработатьОтветИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Настройка товарных групп Локального модуля Честный знак. Выполняется для ограничения объемов выгрузки блэк-листов
// до используемых товарных групп
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  ПараметрыНастройкиТоварныхГрупп - Соответствие из КлючИЗначение:
//  	Ключ - ПеречислениеСсылка.ВидыПродукцииИС - товарная группа для настройки
//  	Значение - Число - количество дней для выгрузки карточек КИ
//  ИдентификаторФискальногоНакопителя - Строка - идентификатор фискального накопителя
// 
// Возвращаемое значение:
//  Структура - результат иницициализации:
// * ТребуетсяОбновлениеКлючаСессииРозница - Булево - признак необходимости обновления ключа сессии
// * ОтказАвторизации - Булево - Истина, если переданы некорректные данные администратора ЛМ ЧЗ
// * РезультатОтправкиЗапроса - Неопределено,
// 		см. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
// * ТекстОшибки - Строка - текст ошибки, полученной от ЛМ ЧЗ
Функция НастройкаТоварныхГруппЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, ПараметрыНастройкиТоварныхГрупп, ИдентификаторФискальногоНакопителя = "") Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПВызовСервера.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессииИСМПРозница(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ПараметрыУстановки.Логин, ПараметрыУстановки.Пароль));
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
	
	Если ЗначениеЗаполнено(ИдентификаторФискальногоНакопителя) Тогда
		ЗаголовокHTTP.Вставить("X-ClientId",     ИдентификаторФискальногоНакопителя);
	КонецЕсли;
	
	URLЗапроса = "api/v1/groups";
	
	ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки);
	
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("token", КлючСессии);
	
	Если ПараметрыНастройкиТоварныхГрупп.Количество() Тогда
		ПараметрыЗапроса.Вставить("productsGroupSettings", ПараметрыНастройкиТоварныхГрупп);
	КонецЕсли;
	
	ТелоЗапросаJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапросаJSON,
		,
		"POST",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
	
	ОбработатьОтветНастройкаТоварныхГруппЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запрос конфигурации системы Локального модуля Честный знак. Выполняется для проверки актуальной конфигурации
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
// 
// Возвращаемое значение:
//  Структура - результат иницициализации:
// * ОтказАвторизации - Булево - Истина, если переданы некорректные данные администратора ЛМ ЧЗ
// * РезультатОтправкиЗапроса - (См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
// * ТекстОшибки - Строка - текст ошибки, полученной от ЛМ ЧЗ
// * АдресСервернойЧасти - Строка - адрес серверной части ЛМ ЧЗ
// * НастройкаТоварныхГрупп - Неопределено, Соответствие из КлючИЗначение - настройка загруженных карточек ТГ
Функция ЗапроситьКонфигурациюЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",         Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	ВозвращаемоеЗначение.Вставить("АдресСервернойЧасти",      "");
	ВозвращаемоеЗначение.Вставить("НастройкаТоварныхГрупп",   Неопределено);
	
	ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ПараметрыУстановки.Логин, ПараметрыУстановки.Пароль));
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
	
	URLЗапроса = "api/v1/config";
	
	ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		,,
		"GET",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	ОбработатьОтветЗапросКонфигурацииЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные по кодам идентификации из Локального модуля Честный знак.
// 
// Параметры:
//  ДанныеПроверки - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  Организация - ОпределяемыйТип.Организация - Организация
//  ИдентификаторФискальногоНакопителя - Строка - идентификатор фискального накопителя
//  РабочееМесто - ОпределяемыйТип.РабочиеМестаИС - рабочее место кассира
//  ДанныеУстановленныхЛокальныхМодулей - Структура:
//  * СерверныеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//	* КлиентскиеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//  ЭтоОперацияПробития - Булево - флаг устанавливается, если процедура вызывается длительной операцией при пробитии
//  ОбменНаСервере - Булево - Истина, если идет запрос к Локальным модулям, установленным на сервере 1С:Предприятия
// Возвращаемое значение:
//  Структура - Получить информацию по КМ от ККТ:
//  * АварийныйРежим - Булево - Истина, если действует аварийный режим или в ходе проверки он был объявлен
//  * ОтсутствуютУстановленныеЛМ - Булево - Истина, если не найдено ни одного установленного ЛМ, подходящего по отбору
//  	по организации и рабочему месту
//  * РезультатыОтправкиЗапросов - Массив из см. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
//  * ТекстОшибки - Строка - текст ошибки, полученной от ГИС МТ
// 		Общий текст ошибки, ошибки запросов по всем кодам
// * СтатусыКодовМаркировкиГИСМТ - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - см. ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля
// * КодыМаркировкиДляОбработкиНаЛМНаКлиенте - Соответствие Из КлючИЗначение - если нет доступных серверных ЛМ или по ним не получен ответ, и нужно
//  	вернуться на клиент для получения ответа с клиентских ЛМ по данным штрихкодам:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - Булево - Истина, если требуется обработка на локальных ЛМ
// * ДанныеУстановленныхЛокальныхМодулей - Структура из КлючИЗначение:
//  ** СерверныеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//	** КлиентскиеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак - список
//		локальных модулей для возврата на клиент. Если нет установленных ЛМ на клиенте, то возвращаться на клиент не требуется
// * ВидыПродукцииБезНастроенныхЛокальныхМодулей - Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, не установленные в качестве
//		учитываемых в локальных модулях
// * НекорректныеДанныеАвторизации - Булево - Истина, если указаны некорректные логин/пароль подключения
// * НезавершеннаяНастройкаЛМ - Булево - Истина, если настройка подключения к ЛМ ЧЗ не завершена, возвращается код статуса не готовый к работе
// * ОтсутствиеСинхронизацииЛМ - Булево - Истина, если ЛМ возвращает статус отсутствия синхронизации более 72 часов
// * ПараметрыНастройкиЛМЧЗ - Неопределено, Структура из КлючИЗначение - структура для поиска настройки ЛМ ЧЗ.
Функция ДанныеЛокальногоМодуляЧЗПоКИПриРозничнойПродаже(ДанныеПроверки, Организация, ИдентификаторФискальногоНакопителя, РабочееМесто = Неопределено, ДанныеУстановленныхЛокальныхМодулей = Неопределено, ЭтоОперацияПробития = Ложь, ОбменНаСервере = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АварийныйРежим",                              Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствуютУстановленныеЛМ",                  Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                                 "");
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировкиГИСМТ",                 Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("КодыМаркировкиДляОбработкиНаЛМНаКлиенте",     Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("ДанныеУстановленныхЛокальныхМодулей",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидыПродукцииБезНастроенныхЛокальныхМодулей", Новый Массив);
	ВозвращаемоеЗначение.Вставить("НекорректныеДанныеАвторизации",               Ложь);
	ВозвращаемоеЗначение.Вставить("НезавершеннаяНастройкаЛМ",                    Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствиеСинхронизацииЛМ",                   Ложь);
	ВозвращаемоеЗначение.Вставить("ПараметрыНастройкиЛМЧЗ",                      Неопределено);
	
	ВозвращаемоеЗначение.АварийныйРежим = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	
	Если ВозвращаемоеЗначение.АварийныйРежим Тогда
		
		// на срок действия аварийного режима разрешена продажа без разрешительного режима
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	ЛогироватьУспешныеПроверки = (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПередПробитиемЧека)
		И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ХранитьУспешныеОперацииПриПроверкеКМ()
		И Не ЭтоОперацияПробития;
	
	Если ДанныеУстановленныхЛокальныхМодулей = Неопределено Тогда
		
		ДанныеУстановленныхЛокальныхМодулей = 
			ОбщегоНазначенияИСМПВызовСервера.СортированнаяТаблицаЛокальныхМодулейЧестныйЗнак(Организация, РабочееМесто);
			
	КонецЕсли;
	
	Если ДанныеУстановленныхЛокальныхМодулей.КлиентскиеМодули.Количество() = 0
		И ДанныеУстановленныхЛокальныхМодулей.СерверныеМодули.Количество() = 0 Тогда
		
		// если локальных модулей не установлено, то не отправлять запрос
		ВозвращаемоеЗначение.ОтсутствуютУстановленныеЛМ = Истина;
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураДополнительныхПараметров.Вставить("Организация",                Организация);
	СтруктураДополнительныхПараметров.Вставить("ИННОрганизации",             "");
	СтруктураДополнительныхПараметров.Вставить("НомерФН",                    ИдентификаторФискальногоНакопителя);
	СтруктураДополнительныхПараметров.Вставить("ЛогироватьУспешныеПроверки", ЛогироватьУспешныеПроверки);
	
	СтруктураДополнительныхПараметров.ИННОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
	
	РезультатНастройкиЛМ = Новый Структура();
	РезультатНастройкиЛМ.Вставить("НекорректныеДанныеАвторизации", Ложь);
	РезультатНастройкиЛМ.Вставить("НезавершеннаяНастройкаЛМ",      Ложь);
	РезультатНастройкиЛМ.Вставить("ОтсутствиеСинхронизацииЛМ",     Ложь);
	
	ТекстВыполненияЗапроса = НСтр("ru = 'Выполняется разрешительный запрос ГИС МТ на Локальном модуле ""Честный знак""';
									|en = 'Выполняется разрешительный запрос ГИС МТ на Локальном модуле ""Честный знак""'");
	Индекс                 = 0;
	
	Для Каждого ДанныеШтрихкода Из ДанныеПроверки Цикл
		
		СписокСерверныхМодулей    = ДанныеУстановленныхЛокальныхМодулей.СерверныеМодули.Получить(ДанныеШтрихкода.ВидПродукции);
		СписокКлиентскихМодулей   = ДанныеУстановленныхЛокальныхМодулей.КлиентскиеМодули.Получить(ДанныеШтрихкода.ВидПродукции);
		СписокМодулейДляОбработки = ?(ОбменНаСервере, СписокСерверныхМодулей, СписокКлиентскихМодулей);
		
		Если СписокСерверныхМодулей = Неопределено
			И СписокКлиентскихМодулей = Неопределено Тогда
			
			// нет ни локальных модулей, ни серверных, настроенных по виду продукции
			ВозвращаемоеЗначение.ВидыПродукцииБезНастроенныхЛокальныхМодулей.Добавить(ДанныеШтрихкода.ВидПродукции);
			Продолжить;
			
		КонецЕсли;
		
		Если ОбменНаСервере И СписокСерверныхМодулей = Неопределено И Не СписокКлиентскихМодулей = Неопределено Тогда 
			
			// обмен на сервере, нет настроенных серверных, но есть настроенные клиентские модули 
			// вернуть флаг необходимости возврата на клиент для запроса на клиентских ЛМ
			ВозвращаемоеЗначение.КодыМаркировкиДляОбработкиНаЛМНаКлиенте.Вставить(ДанныеШтрихкода, Истина);
			ВозвращаемоеЗначение.ДанныеУстановленныхЛокальныхМодулей = ДанныеУстановленныхЛокальныхМодулей;
			
		Иначе
			
			РезультатОбработкиКИ = ОбработатьКодМаркировкиНаЛокальномМодулеЧестногоЗнака(ДанныеШтрихкода,
				СписокМодулейДляОбработки,
				СтруктураДополнительныхПараметров,
				РезультатНастройкиЛМ);
			
			ВозвращаемоеЗначение.НезавершеннаяНастройкаЛМ      = РезультатНастройкиЛМ.НезавершеннаяНастройкаЛМ;
			ВозвращаемоеЗначение.НекорректныеДанныеАвторизации = РезультатНастройкиЛМ.НекорректныеДанныеАвторизации;
			ВозвращаемоеЗначение.ОтсутствиеСинхронизацииЛМ     = РезультатНастройкиЛМ.ОтсутствиеСинхронизацииЛМ;
			ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ        = РезультатОбработкиКИ.ПараметрыНастройкиЛМЧЗ;
			
			Для Каждого РезультатОтправкиЗапросаНаПлощадку Из РезультатОбработкиКИ.РезультатыОтправкиЗапросов Цикл
				ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиЗапросаНаПлощадку);
			КонецЦикла;
			
			Если ОбменНаСервере И СписокКлиентскихМодулей = Неопределено
					Или Не ОбменНаСервере Тогда
			
				// нет клиентских модулей для обработки, необходимо вернуть ошибки, полученные от серверных модулей
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
					+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
					+ РезультатОбработкиКИ.ТекстОшибки;
					
			КонецЕсли;
				
			Если Не РезультатОбработкиКИ.ПараметрыКодаМаркировки = Неопределено Тогда
			
				// по КМ был получен ответ из ГИС МТ
				ВозвращаемоеЗначение.СтатусыКодовМаркировкиГИСМТ.Вставить(ДанныеШтрихкода, РезультатОбработкиКИ.ПараметрыКодаМаркировки);
				
			ИначеЕсли ОбменНаСервере И Не СписокКлиентскихМодулей = Неопределено Тогда
				
				// обмен на сервере, нет настроенных серверных, но есть настроенные клиентские модули 
				// вернуть флаг необходимости возврата на клиент для запроса на клиентских ЛМ
				ВозвращаемоеЗначение.КодыМаркировкиДляОбработкиНаЛМНаКлиенте.Вставить(ДанныеШтрихкода, Истина);
				ВозвращаемоеЗначение.ДанныеУстановленныхЛокальныхМодулей = ДанныеУстановленныхЛокальныхМодулей;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Индекс = Индекс + 1;
		
		#Если Клиент Тогда
			Состояние(ТекстВыполненияЗапроса, Индекс / ДанныеПроверки.Количество() * 100,, БиблиотекаКартинок.ДлительнаяОперация16);
		#КонецЕсли
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	(См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ПараметрыЗапросаКлючаСессии(Организация = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии();
	ПараметрыЗапроса.Организация = Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса                = ИмяДанныхКлючаСессии(ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМП"));
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации = "api/v3/true-api/auth/key";
	ПараметрыЗапроса.АдресЗапросаКлючаСессии           = "api/v3/true-api/auth/simpleSignIn";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии СУЗ.
// 
// Параметры:
// 	ПараметрыСУЗ - Структура -
// Возвращаемое значение:
// 	(См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ПараметрыЗапросаКлючаСессииСУЗ(ПараметрыСУЗ) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии();
	ПараметрыЗапроса.Организация = ПараметрыСУЗ.Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = НСтр("ru = 'ГИС МТ (СУЗ)';
															|en = 'ГИС МТ (СУЗ)'");
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	ПараметрыЗапроса.ИмяПараметраСеанса               = ИмяДанныхКлючаСессии(ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.СУЗ"));
	ПараметрыЗапроса.ПроизводственныйОбъект           = ПараметрыСУЗ.ПроизводственныйОбъект;
	ПараметрыЗапроса.ВремяЖизни                       = 60 * 60 * 9; // 9 часов
	
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации = "api/v3/true-api/auth/key";
	
	ПараметрыЗапроса.АдресЗапросаКлючаСессии = СтрШаблон(
		"api/v3/true-api/auth/simpleSignIn/%1",
		ПараметрыСУЗ.ИдентификаторСоединения);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Инициализировать структуру параметров запроса в ГИС МТ для получения ключа сессии
// розничной продажи.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	(См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ПараметрыЗапросаКлючаСессииИСМПРозница(Организация = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов(Неопределено, Истина);
	
	ПараметрыЗапроса = ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии();
	ПараметрыЗапроса.Организация = Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса                  = ИмяДанныхКлючаСессии(ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМПРозница"));
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации   = "api/v3/true-api/auth/key";
	ПараметрыЗапроса.АдресЗапросаКлючаСессии             = "api/v3/true-api/auth/permissive-access";
	ПараметрыЗапроса.РазрешенаПодписьДоверенногоЛицаСМЧД = Ложь;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает имя параметра сеанса, в котором хранится информация о токене авторизации.
// 
// Параметры:
// 	ТипТокенаАвторизации - ПеречислениеСсылка.ТипыТокеновАвторизации - Тип токена авторизации.
// Возвращаемое значение:
// 	Строка - имя параметра сеанса.
Функция ИмяДанныхКлючаСессии(ТипТокенаАвторизации) Экспорт
	
	Если ТипТокенаАвторизации = ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМП") Тогда
		Возврат "ДанныеКлючаСессииИСМП";
	ИначеЕсли ТипТокенаАвторизации = ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.СУЗ") Тогда
		Возврат "ДанныеКлючаСессииСУЗ";
	ИначеЕсли ТипТокенаАвторизации = ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМПРозница") Тогда
		Возврат "ДанныеКлючаСессииИСМПРозница";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Фиксированный срок действия токена ИС МП (розница).
// Данный тип токена может добавляться вручную, поэтому не получает срок истечения действия из ГИС,
// а устанавливает фиксированную дату.
//
// Возвращаемое значение:
//  Дата - дата окончания действия токена ИС МП (розница)
Функция ДатаДействияТокенаИСМПРозница() Экспорт
	Возврат Дата(2026, 03, 01);
КонецФункции

// Возвращает тип токена по имени параметра сеанса, в котором хранится информация о данном типе токена.
//
// Параметры:
// 	ИмяДанныхКлючаСессии - Строка - имя параметра сеанса.
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыТокеновАвторизации
Функция ТипТокенаАвторизацииПоИмениДанныхКлючаСессии(ИмяДанныхКлючаСессии) Экспорт

	Если ИмяДанныхКлючаСессии = "ДанныеКлючаСессииИСМП" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМП");
	ИначеЕсли ИмяДанныхКлючаСессии = "ДанныеКлючаСессииСУЗ" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.СУЗ");
	ИначеЕсли ИмяДанныхКлючаСессии = "ДанныеКлючаСессииИСМПРозница" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ИСМПРозница");
	КонецЕсли;

	Возврат ПредопределенноеЗначение("Перечисление.ТипыТокеновАвторизации.ПустаяСсылка");

КонецФункции

// Возвращает адрес сервера ИС МП.
//
// Параметры:
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции (В тестовом контуре адреса серверов
//                                                       могут отличаться для различных видов продукции).
//   ИспользоватьTrueAPI - Булево - Использовать true-api
//   РазрешительныйРежим - Булево - Истина, если обращение к выделенному серверу для загрузки CDN-площадок и токена
//
// Возвращаемое значение:
//  Строка - адрес сервера ИС МП.
//
Функция АдресСервера(ВидПродукции = Неопределено, ИспользоватьTrueAPI = Ложь, РазрешительныйРежим = Ложь) Экспорт
	
	РежимРаботыСТестовымКонтуромИСМП = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.РежимРаботыСТестовымКонтуромИСМП();
	
	Если РежимРаботыСТестовымКонтуромИСМП Тогда
		Если ИспользоватьTrueAPI Или РазрешительныйРежим Тогда
			Возврат "markirovka.sandbox.crptech.ru";
		Иначе
			Возврат "sandbox.crptech.ru";
		КонецЕсли;
	Иначе
		Если РазрешительныйРежим Тогда
			Возврат "cdn.crpt.ru";
		ИначеЕсли ИспользоватьTrueAPI Тогда
			Возврат "markirovka.crpt.ru";
		Иначе
			Возврат "ismp.crpt.ru";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов ИС МП.
//
// Параметры:
//   ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции (В тестовом контуре адреса серверов
//                                                       могут отличаться для различных видов продукции).
//   ИспользоватьTrueAPI - Булево - Использовать true-api.
//   РазрешительныйРежим - Булево - Истина, если обращение к выделенному серверу для загрузки CDN-площадок и токена
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
//   * Таймаут - Число - Таймаут соединения.
//   * Порт - Число - Порт соединения.
//   * Сервер - Строка - Адрес сервера.
//   * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросов(ВидПродукции = Неопределено, ИспользоватьTrueAPI = Ложь, РазрешительныйРежим = Ложь) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             НСтр("ru = 'ГИС МТ';
																					|en = 'ГИС МТ'"));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           АдресСервера(ВидПродукции, ИспользоватьTrueAPI, РазрешительныйРежим));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

// Возвращает параметры для отправки HTTP запросов Локальному модулю ЧЗ
// по переданным настройкам подключения
//
// Параметры:
//   ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//
// Возвращаемое значение:
//  Структура - Описание:
//   * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
//   * Таймаут - Число - Таймаут соединения.
//   * Порт - Число - Порт соединения.
//   * Сервер - Строка - Адрес сервера.
//   * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ПараметрыУстановки) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             НСтр("ru = 'ЛМ ЧЗ';
																					|en = 'ЛМ ЧЗ'"));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           ПараметрыУстановки.Сервер);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             ПараметрыУстановки.Порт);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", ПараметрыУстановки.ЗащищенноеСоединение);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

// Функция преобразовывает список переданных сокращенных наименований гос. органов, устанавливающих
//  блокировку на реализацию конкретных кодов маркировки по данным ГИС МТ, в читаемое представление
// 
// Параметры:
//  МассивИдентификаторов - Массив из Строка - список сокращенных наименований организаций
// 
// Возвращаемое значение:
//  Массив из Строка - список полных наименований организаций
Функция ОрганыВластиУстанавливающиеБлокировкуНаКМПоДаннымГИСМТ(МассивИдентификаторов) Экспорт
	
	МассивПредставлений = Новый Массив;
	
	Если Не ТипЗнч(МассивИдентификаторов) = Тип("Массив") Тогда
		Возврат МассивПредставлений;
	КонецЕсли;
	
	СоответствиеПредставлений = Новый Соответствие();
	СоответствиеПредставлений.Вставить("RAR",  НСтр("ru = 'Росалкогольрегулирование';
													|en = 'Росалкогольрегулирование'"));
	СоответствиеПредставлений.Вставить("FTS",  НСтр("ru = 'ФТС России';
													|en = 'ФТС России'"));
	СоответствиеПредставлений.Вставить("FNS",  НСтр("ru = 'ФНС России';
													|en = 'ФНС России'"));
	СоответствиеПредставлений.Вставить("RSHN", НСтр("ru = 'Россельхознадзор (РСХН)';
													|en = 'Россельхознадзор (РСХН)'"));
	СоответствиеПредставлений.Вставить("RPN",  НСтр("ru = 'Роспотребнадзор (РПН)';
													|en = 'Роспотребнадзор (РПН)'"));
	СоответствиеПредставлений.Вставить("MVD",  НСтр("ru = 'МВД России';
													|en = 'МВД России'"));
	СоответствиеПредставлений.Вставить("RZN",  НСтр("ru = 'Росздравнадзор';
													|en = 'Росздравнадзор'"));
	
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		
		ЗначениеПредставления = СоответствиеПредставлений.Получить(Идентификатор);
		
		Если ЗначениеПредставления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПредставлений.Добавить(ЗначениеПредставления);
		
	КонецЦикла;
	
	Возврат МассивПредставлений;
	
КонецФункции

// Преобразовывает текстовое представление товарной группы в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыПродукцииИС, Строка - значение для перекодировки
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, Строка - Товарная группа.
Функция ТоварнаяГруппаЧислом(Знач ЗначениеПоиска, ВидПродукции = Неопределено) Экспорт
	
	Если ЗначениеПоиска = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	КонецЕсли;
	
	ИсходноеЗначениеПоиска = ЗначениеПоиска;
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		ЗначениеПоиска = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеПоиска);
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Число") Тогда
		Если ЗначениеПоиска = 1 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 2 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
		ИначеЕсли ЗначениеПоиска = 3 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
		ИначеЕсли ЗначениеПоиска = 4 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи");
		ИначеЕсли ЗначениеПоиска = 5 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
		ИначеЕсли ЗначениеПоиска = 6 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты");
		ИначеЕсли ЗначениеПоиска = 8 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 9 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды");
		ИначеЕсли ЗначениеПоиска = 10 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации");
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 12 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
		ИначеЕсли ЗначениеПоиска = 13 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
		ИначеЕсли ЗначениеПоиска = 14 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
		ИначеЕсли ЗначениеПоиска = 15 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 16 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
		ИначеЕсли ЗначениеПоиска = 17 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 19 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 21 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС");
		ИначеЕсли ЗначениеПоиска = 22 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво");
		ИначеЕсли ЗначениеПоиска = 23 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 20 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС");
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС");
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 25 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС");
		ИначеЕсли ЗначениеПоиска = 26 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты");
		ИначеЕсли ЗначениеПоиска = 27 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей");
		ИначеЕсли ЗначениеПоиска = 28 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки");
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатныеПлаты");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 31 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
		ИначеЕсли ЗначениеПоиска = 32 Тогда
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС");
			Иначе
				Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС");
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = 33 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла");
		ИначеЕсли ЗначениеПоиска = 34 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция");
		ИначеЕсли ЗначениеПоиска = 35 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия");
		ИначеЕсли ЗначениеПоиска = ПечатнаяПродукцияКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция");
		ИначеЕсли ЗначениеПоиска = СтроительныеМатериалыКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы");
		ИначеЕсли ЗначениеПоиска = ОтопительныеПриборыКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы");
		ИначеЕсли ЗначениеПоиска = БакалеяКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея");
		ИначеЕсли ЗначениеПоиска = АлкогольнаяПродукцияДо9ПроцентовКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов");
		ИначеЕсли ЗначениеПоиска = ПиротехническиеИзделияИСредстваПожарнойБезопасностиКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности");
		ИначеЕсли ЗначениеПоиска = КабельнаяПродукцияКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция");
		ИначеЕсли ЗначениеПоиска = МоторныеМаслаКодТоварнойГруппы() Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла");
		ИначеЕсли ЗначениеПоиска = 44 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы");
		ИначеЕсли ЗначениеПоиска = 45 Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПоиска) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Если ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность2025") Тогда
			Возврат 1;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь") Тогда
			Возврат 2;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			Возврат 3;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи") Тогда
			Возврат 4;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины") Тогда
			Возврат 5;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
			Возврат 6;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
				Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС") Тогда
			Возврат 8;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Велосипеды") Тогда
			Возврат 9;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
				Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
				Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия")
				Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия20") Тогда
			Возврат 10;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
			Возврат 12;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
			Возврат 13;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
			Возврат 14;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
				Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках") Тогда
			Возврат 15;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
			Возврат 16;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы2025") Тогда
			Возврат 17;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ДезинфицирующиеСредства") Тогда
			Возврат 19;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС") Тогда
			Возврат 21;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво") Тогда
			Возврат 22;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки") Тогда
			Возврат 23;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС") Тогда
			Возврат 20;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС") Тогда
			Возврат 25;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты") Тогда
			Возврат 26;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей") Тогда
			Возврат 27;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
			Возврат 28;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция") Тогда
			Возврат 31;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС")
			Или ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС") Тогда
			Возврат 32;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.РастительныеМасла") Тогда
			Возврат 33;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция") Тогда
			Возврат 34;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия") Тогда
			Возврат 35;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПечатнаяПродукция") Тогда
			Возврат ПечатнаяПродукцияКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СтроительныеМатериалы") Тогда
			Возврат СтроительныеМатериалыКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ОтопительныеПриборы") Тогда
			Возврат ОтопительныеПриборыКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Бакалея") Тогда
			Возврат БакалеяКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов") Тогда
			Возврат АлкогольнаяПродукцияДо9ПроцентовКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности") Тогда
			Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КабельнаяПродукция") Тогда
			Возврат КабельнаяПродукцияКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МоторныеМасла") Тогда
			Возврат МоторныеМаслаКодТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПолимерныеТрубы") Тогда
			Возврат 44;
		ИначеЕсли ЗначениеПоиска = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СладостиИКондитерскиеИзделия") Тогда
			Возврат 45;
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестная товарная группа: %1';
				|en = 'Неизвестная товарная группа: %1'"),
			ИсходноеЗначениеПоиска);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработатьОтветИнициализацияКонфигурацииЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса) Экспорт
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если Не РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбщегоНазначенияИСКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				// некорректный логин/пароль администратора
				ВозвращаемоеЗначение.ОтказАвторизации = Истина;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
				
				Если ДанныеОбработки.Получить("errorCode") = 4015 Тогда
					
					// некорректный токен
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
					
				ИначеЕсли ДанныеОбработки.Получить("errorCode") = 6010 Тогда
					
					// не передан токен
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
					
				Иначе
					
					ТекстОшибки = ДанныеОбработки.Получить("reason");
					
					Если ТекстОшибки <> Неопределено Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// не получен ответ при инициализации, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветЗапроситьСтатусЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса) Экспорт
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки.Получить("version") <> Неопределено Тогда
				ВозвращаемоеЗначение.ВерсияСборки = ДанныеОбработки.Получить("version");
			КонецЕсли;
			
			Если ДанныеОбработки.Получить("status") <> Неопределено Тогда
				ВозвращаемоеЗначение.Статус = ДанныеОбработки.Получить("status");
			КонецЕсли;
			
			Если ДанныеОбработки.Получить("requiresDownload") <> Неопределено Тогда
				ВозвращаемоеЗначение.ТребуетсяЗагрузка = ДанныеОбработки.Получить("requiresDownload");
			КонецЕсли;
			
			Если ДанныеОбработки.Получить("lastSync") <> Неопределено Тогда
				
				ДатаПоследнейСинхронизации = ДанныеОбработки.Получить("lastSync");
				
				Если ЗначениеЗаполнено(ДатаПоследнейСинхронизации) Тогда
					ВозвращаемоеЗначение.ДатаПоследнейСинхронизации = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ДатаПоследнейСинхронизации);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				// некорректный логин/пароль администратора
				ВозвращаемоеЗначение.ОтказАвторизации = Истина;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// не получен ответ при инициализации, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса) Экспорт
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если Не РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				// некорректный логин/пароль администратора
				ВозвращаемоеЗначение.ОтказАвторизации = Истина;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
				
				Если ДанныеОбработки.Получить("errorCode") = 6020 Тогда
					
					ВозвращаемоеЗначение.ОшибкаПроверкиНовогоПароля = Истина;
					
				Иначе
					
					ТекстОшибки = ДанныеОбработки.Получить("reason");
					
					Если ТекстОшибки <> Неопределено Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// не получен ответ при инициализации, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветНастройкаТоварныхГруппЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса) Экспорт
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если Не РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				// некорректный логин/пароль администратора
				ВозвращаемоеЗначение.ОтказАвторизации = Истина;
				
			ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
				
				Если ДанныеОбработки.Получить("errorCode") = 4010 Тогда
					
					// некорректный токен
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
					
				ИначеЕсли ДанныеОбработки.Получить("errorCode") = 6010 Тогда
					
					// не передан токен
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
					
				Иначе
					
					ТекстОшибки = ДанныеОбработки.Получить("reason");
					
					Если ТекстОшибки <> Неопределено Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// не получен ответ при инициализации, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветЗапросКонфигурацииЛокальногоМодуляЧЗ(РезультатОтправкиЗапроса, ВозвращаемоеЗначение, URLЗапроса) Экспорт
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			АдресаСервернойЧасти = ДанныеОбработки.Получить("urlLoadDb");
			
			Если АдресаСервернойЧасти <> Неопределено Тогда
				
				Если ТипЗнч(АдресаСервернойЧасти) = Тип("Массив") И АдресаСервернойЧасти.Количество() Тогда
					ВозвращаемоеЗначение.АдресСервернойЧасти = АдресаСервернойЧасти[0];
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДанныеОбработки.Получить("productsGroupSettings") <> Неопределено Тогда
				ВозвращаемоеЗначение.НастройкаТоварныхГрупп = ДанныеОбработки.Получить("productsGroupSettings");
			КонецЕсли;
			
		Иначе
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				// некорректный логин/пароль администратора
				ВозвращаемоеЗначение.ОтказАвторизации = Истина;
				
			Иначе
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// не получен ответ при инициализации, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДоступныеМетодыИнтерфейса() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕмкостьУпаковкиПоGTIN",                          "ЕмкостьУпаковкиПоGTIN");
	ВозвращаемоеЗначение.Вставить("ВыполнитьАвторизацию",                           "ВыполнитьАвторизацию");
	ВозвращаемоеЗначение.Вставить("МестаОсуществленияДеятельности",                 "МестаОсуществленияДеятельности");
	ВозвращаемоеЗначение.Вставить("АктуализацияCDNПлощадок",                        "АктуализацияCDNПлощадок");
	ВозвращаемоеЗначение.Вставить("ПолучениеРозничногоТокена",                      "ПолучениеРозничногоТокена");
	ВозвращаемоеЗначение.Вставить("СписокМестОсуществленияДеятельности",            "СписокМестОсуществленияДеятельности");
	ВозвращаемоеЗначение.Вставить("ИнициализацияКонфигурацииЛокальногоМодуляЧЗ",    "ИнициализацияКонфигурацииЛокальногоМодуляЧЗ");
	ВозвращаемоеЗначение.Вставить("ОбновлениеСтатусаЛокальногоМодуляЧЗ",            "ОбновлениеСтатусаЛокальногоМодуляЧЗ");
	ВозвращаемоеЗначение.Вставить("СменаПароляАдминистрированияЛокальногоМодуляЧЗ", "СменаПароляАдминистрированияЛокальногоМодуляЧЗ");
	ВозвращаемоеЗначение.Вставить("НастройкаСпискаТоварныхГрупп",                   "НастройкаСпискаТоварныхГрупп");
	ВозвращаемоеЗначение.Вставить("ПолучениеКонфигурацииЛокальногоМодуляЧЗ",        "ПолучениеКонфигурацииЛокальногоМодуляЧЗ");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбработатьКодМаркировкиНаЛокальномМодулеЧестногоЗнака(ДанныеШтрихкода, ДанныеУстановленныхЛокальныхМодулей, СтруктураДополнительныхПараметров, РезультатНастройкиЛМ)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("ПараметрыНастройкиЛМЧЗ",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                            "");
	
	ПараметрыНормализацииМОТП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииМОТП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииМОТП.ВключатьМРЦ              = Ложь;
	ПараметрыНормализацииМОТП.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыНормализацииИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииИСМП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииИСМП.НачинаетсяСоСкобки = Ложь;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеШтрихкода, ДанныеШтрихкода.ВидПродукции, ПараметрыНормализацииМОТП);
		
	Иначе
		
		Если ДанныеШтрихкода.ДанныеРазбора = Неопределено Тогда
			НормализованныйКодМаркировки = ДанныеШтрихкода.Штрихкод;
		Иначе
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеШтрихкода, ДанныеШтрихкода.ВидПродукции, ПараметрыНормализацииИСМП);
		КонецЕсли;
		
	КонецЕсли;
	
	URLЗапроса            = СтрШаблон("api/v1/cis/check?cis=%1", НормализованныйКодМаркировки);
	
	Для Каждого ДанныеЛокальногоМодуля Из ДанныеУстановленныхЛокальныхМодулей Цикл
		
		ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ДанныеЛокальногоМодуля.Логин, ДанныеЛокальногоМодуля.Пароль));
	
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Accept",         "application/json");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
		ЗаголовокHTTP.Вставить("X-ClientId",     СтруктураДополнительныхПараметров.НомерФН);
		
		ПараметрыЗапросов = ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ДанныеЛокальногоМодуля);
		ПараметрыЗапросов.Таймаут = ДанныеЛокальногоМодуля.Таймаут;
		
		РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
			URLЗапроса,
			,,
			"GET",
			ПараметрыЗапросов,
			ЗаголовокHTTP);
	
		РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
		
		ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиЗапроса);
		
		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
				
				ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если ДанныеОбработки = Неопределено Тогда
					
					ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
					ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
						+ ДополнениеТекстаОшибки;
					
				Иначе
					
					КодОтветаОшибки = ДанныеОбработки.Получить("code");
					
					Если ЗначениеЗаполнено(КодОтветаОшибки) Тогда
						
						ШаблонСообщения = НСтр("ru = 'Локальный модуль ""Честный знак"" вернул ошибку.
							|Код ошибки %1, описание ошибки:
							|%2.';
							|en = 'Локальный модуль ""Честный знак"" вернул ошибку.
							|Код ошибки %1, описание ошибки:
							|%2.'");
						ТекстОшибки = СтрШаблон(ШаблонСообщения,
							КодОтветаОшибки,
							ДанныеОбработки.Получить("description"));
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					Иначе
						
						ДанныеКодовОтветаЛокальногоМодуля = ДанныеОбработки.Получить("codes");
						
						Если ДанныеКодовОтветаЛокальногоМодуля <> Неопределено Тогда
							
							// формат обмена Локального модуля "Честный знак" 1.0.6 и выше
							Если ТипЗнч(ДанныеКодовОтветаЛокальногоМодуля) = Тип("Массив") И ДанныеКодовОтветаЛокальногоМодуля.Количество() Тогда
								ПараметрыКодаМаркировки = ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля(ДанныеКодовОтветаЛокальногоМодуля[0]);
							Иначе
								ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля();
							КонецЕсли;
							
							РазрешительныйРежимДатаЗапросаГИСМТ                                  = ДанныеОбработки.Получить("reqTimestamp");
							ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеОбработки.Получить("reqId");
							
						ИначеЕсли ДанныеОбработки.Получить("_id") <> Неопределено Тогда
							
							// формат обмена Локального модуля "Честный знак" до 1.0.6
							ПараметрыКодаМаркировки = ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля(ДанныеОбработки);
							
							РазрешительныйРежимДатаЗапросаГИСМТ                                  = ДанныеОбработки.Получить("ts");
							ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеОбработки.Получить("_id");
							
						Иначе
							Продолжить;
						КонецЕсли;
						
						ПараметрыКодаМаркировки.РазрешительныйРежимДатаЗапросаГИСМТ = Формат(РазрешительныйРежимДатаЗапросаГИСМТ, "ЧГ=;");
						ПараметрыКодаМаркировки.РазрешительныйРежимАдресСервера     = ДанныеЛокальногоМодуля.АдресПодключения;
						ПараметрыКодаМаркировки.РазрешительныйРежимТелоЗапросаJSON  = URLЗапроса;
						ПараметрыКодаМаркировки.РазрешительныйРежимТелоОтветаJSON   = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
						ПараметрыКодаМаркировки.РазрешительныйРежимКодОтвета        = Формат(РезультатЗапроса.HTTPОтвет.КодСостояния, "ЧГ=0;");
						
						ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ПараметрыКодаМаркировки;
						
						Если ПараметрыКодаМаркировки.Заблокирован Тогда
							
							ТекстОшибки = НСтр("ru = 'Товар запрещен к продаже по решению ОГВ.';
												|en = 'Товар запрещен к продаже по решению ОГВ.'");
							
							ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
							ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
							
						КонецЕсли;
						
						Если ПараметрыКодаМаркировки.GTINЗапрещенКПродаже Тогда
						
							ТекстОшибки = НСтр("ru = 'GTIN запрещен к продаже.';
												|en = 'GTIN запрещен к продаже.'");
							
							ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
							ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
							
						КонецЕсли;
						
						Если ПараметрыКодаМаркировки.КИЗапрещенКПродаже Тогда
							
							ТекстОшибки = НСтр("ru = 'КИ запрещен к продаже.';
												|en = 'КИ запрещен к продаже.'");
							
							ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
							ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
							
						КонецЕсли;
						
						Если ПараметрыКодаМаркировки.Продан Тогда
							
							Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
								ДанныеШтрихкода.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВыведенИзОборота");
							Иначе
								ДанныеШтрихкода.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа");
							КонецЕсли;
							
						КонецЕсли;
						
						Если ПараметрыКодаМаркировки.СерияМедицинскогоПрепаратаЗапрещенаКПродаже Тогда
							
							ТекстОшибки = НСтр("ru = 'Серия медицинского препарата запрещена к продаже.';
												|en = 'Серия медицинского препарата запрещена к продаже.'");
							
							ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
							ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
							
						КонецЕсли;
						
						// достаточно одного ответа от одного ЛМ
						Прервать;
						
					КонецЕсли;
				
				КонецЕсли;
				
			Иначе
				
				ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
					
					// некорректный логин/пароль администратора
					ШаблонПодсказки             = НСтр("ru = 'Указаны некорректные логин/пароль подключения к Локальному модулю ""Честный знак"" %1.';
														|en = 'Указаны некорректные логин/пароль подключения к Локальному модулю ""Честный знак"" %1.'");
					ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
					
					РезультатНастройкиЛМ.НекорректныеДанныеАвторизации = Истина;
					
					ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ = Новый Структура("РабочееМесто, Приоритет");
					ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ, ДанныеЛокальногоМодуля);
					
				ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
					
					// код ошибки 4045 - не инициализировано, или в статусе инициализации
					// код ошибки 4050 - ошибка синхронизации
					
					// в обоих случаях переходим к следующей площадке
					
					КодРасшифровкиОшибки = ДанныеОбработки.Получить("errorCode");
					Если КодРасшифровкиОшибки <> Неопределено Тогда
						
						Если КодРасшифровкиОшибки = 4045 Тогда
							
							ШаблонПодсказки             = НСтр("ru = 'Не завершена настройка подключения к Локальному модулю ""Честный знак"" %1.';
																|en = 'Не завершена настройка подключения к Локальному модулю ""Честный знак"" %1.'");
							ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
							
							РезультатНастройкиЛМ.НезавершеннаяНастройкаЛМ = Истина;
							
						ИначеЕсли КодРасшифровкиОшибки = 4050 Тогда
							
							ШаблонПодсказки             = НСтр("ru = 'Статус Локального модуля ""Честный знак"" %1 - ошибка синхронизации.';
																|en = 'Статус Локального модуля ""Честный знак"" %1 - ошибка синхронизации.'");
							ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
							
							РезультатНастройкиЛМ.ОтсутствиеСинхронизацииЛМ = Истина;
							
						Иначе
							
							ТекстОшибкиИзСервиса = ДанныеОбработки.Получить("reason");
							
							Если ТекстОшибкиИзСервиса <> Неопределено Тогда
								
								ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
									+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
									+ ТекстОшибкиИзСервиса;
								
							Иначе
								
								ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
									URLЗапроса,
									РезультатОтправкиЗапроса);
								
								ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
									+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
									+ ДополнениеТекстаОшибки;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ = Новый Структура("РабочееМесто, Приоритет");
					ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ, ДанныеЛокальногоМодуля);
					
				Иначе
					
					ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
					ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
						+ ДополнениеТекстаОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// не получен ответ при инициализации, таймаут или иные проблемы
			ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
				+ ДополнениеТекстаОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Конструктор для передачи данных по коду маркировки из Локального модуля "Честный знак"
// 
// Возвращаемое значение:
//  Структура:
//  * Найден - Булево - Признак проверки наличия КИ в БД «Карточки КИ» (до версии ЛМ 1.0.6)
//  * Продан - Булево - Признак проверки факта продажи КИ в БД «Проданные товары» (до версии ЛМ 1.0.6)
//  * КИЗапрещенКПродаже - Булево - Признак проверки наличия КИ в БД «Запрещённые к продаже КИ» (до версии ЛМ 1.0.6)
//  * GTINЗапрещенКПродаже - Булево - Признак проверки наличия КИ (GTIN в составе КИ) в БД «Запрещённые к продаже GTIN» (до версии ЛМ 1.0.6)
//  * СерияМедицинскогоПрепаратаЗапрещенаКПродаже - Булево - Признак проверки наличия КИ в БД «Запрещённых к продаже серии медицинских препаратов» (до версии ЛМ 1.0.6)
//  * Заблокирован - Булево - Признак блокировки КИ по решению ОГВ (начиная с версии ЛМ 1.0.6)
//  * РазрешительныйРежимИдентификаторЗапросаГИСМТ - Строка - Уникальный идентификатор квитанции
//  * РазрешительныйРежимДатаЗапросаГИСМТ - Строка - Время формирования квитанции в формате timestamp
//  * РазрешительныйРежимАдресСервера - Строка - адрес ЛМ ЧЗ
//  * РазрешительныйРежимТелоЗапросаJSON - Строка - текст запроса в ЛМ ЧЗ
//  * РазрешительныйРежимТелоОтветаJSON - Строка - текст ответа из ЛМ ЧЗ
//  * РазрешительныйРежимКодОтвета - Строка - код ответа HTTP
Функция ИнициализироватьПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля() Экспорт
	
	ПараметрыКодаМаркировки = Новый Структура;
	
	ПараметрыКодаМаркировки.Вставить("Найден",                                       Ложь);
	ПараметрыКодаМаркировки.Вставить("Продан",                                       Ложь);
	ПараметрыКодаМаркировки.Вставить("КИЗапрещенКПродаже",                           Ложь);
	ПараметрыКодаМаркировки.Вставить("GTINЗапрещенКПродаже",                         Ложь);
	ПараметрыКодаМаркировки.Вставить("СерияМедицинскогоПрепаратаЗапрещенаКПродаже",  Ложь);
	ПараметрыКодаМаркировки.Вставить("Заблокирован",                                 Ложь);
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ", "");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ",          "");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимАдресСервера",              "");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоЗапросаJSON",           "");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоОтветаJSON",            "");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимКодОтвета",                 "");
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

// Возвращает структуру данных кода маркировки из Локального модуля "Честный знак"
// Параметры:
// 	ЭлементДанных - Соответствие из КлючИЗначение, Неопределено - Данные ЛМ ЧЗ
//
// Возвращаемое значение:
//  см. ИнициализироватьПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля
Функция ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля(ЭлементДанных) Экспорт
	
	ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля();
	
	Значение = ЭлементДанных["е"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.Найден = Значение;
	КонецЕсли;
	
	Значение = ЭлементДанных["sc"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.Продан = Значение;
	КонецЕсли;
	
	Значение = ЭлементДанных["bc"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.КИЗапрещенКПродаже = Значение;
	КонецЕсли;
	
	Значение = ЭлементДанных["be"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.GTINЗапрещенКПродаже = Значение;
	КонецЕсли;
	
	Значение = ЭлементДанных["bs"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.СерияМедицинскогоПрепаратаЗапрещенаКПродаже = Значение;
	КонецЕсли;
	
	Значение = ЭлементДанных["isBlocked"];
	Если Не Значение = Неопределено Тогда
		ПараметрыКодаМаркировки.Заблокирован = Значение;
	КонецЕсли;
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

#Область КодТоварнойГруппы

Функция ПечатнаяПродукцияКодТоварнойГруппы()
	Возврат 36;
КонецФункции

Функция СтроительныеМатериалыКодТоварнойГруппы()
	Возврат 39;
КонецФункции

Функция ОтопительныеПриборыКодТоварнойГруппы()
	Возврат 41;
КонецФункции

Функция БакалеяКодТоварнойГруппы()
	Возврат 37
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовКодТоварнойГруппы()
	Возврат 0;
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиКодТоварнойГруппы()
	Возврат 40;
КонецФункции

Функция КабельнаяПродукцияКодТоварнойГруппы()
	Возврат 42;
КонецФункции

Функция МоторныеМаслаКодТоварнойГруппы()
	Возврат 43;
КонецФункции

#КонецОбласти

#КонецОбласти
