
#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4fa-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеКвалификационногоРазряда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfa2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УтверждениеТарифнойСетки);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb0-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ТарифныеСетки);
	
КонецПроцедуры

#КонецОбласти

// Заполняет наборы записей регистра ЗначенияТарифов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		ДанныеРазрядовТарифнойСетки - таблица значений с колонками
//			ДатаСобытия
//			ТарифнаяСетка
//			РазрядКатегория
//			РазрядныйКоэффициент.
//			Тариф
//
Процедура СформироватьДвиженияЗначенийРазрядовТарифнойСетки(Движения, ДанныеРазрядовТарифнойСетки) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДанныеРазрядовТарифнойСетки) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ЗначенияТарифов.Записывать = Истина;
	
	Для Каждого ТекСтрока Из ДанныеРазрядовТарифнойСетки Цикл
		
		НоваяСтрока = Движения.ЗначенияТарифов.Добавить();
		НоваяСтрока.Период = ТекСтрока.ДатаСобытия;
		НоваяСтрока.ТарифнаяСетка = ТекСтрока.ТарифнаяСетка;
		НоваяСтрока.РазрядКатегория = ТекСтрока.РазрядКатегория;
		НоваяСтрока.РазрядныйКоэффициент = ТекСтрока.РазрядныйКоэффициент;
		НоваяСтрока.Тариф = ТекСтрока.Тариф;
		НоваяСтрока.Используется = ТекСтрока.Используется;
		
	КонецЦикла;
	
	Движения.ЗначенияБазовыхТарифов.Записывать = Истина;

	НоваяСтрока = Движения.ЗначенияБазовыхТарифов.Добавить();
	НоваяСтрока.Период = ТекСтрока.ДатаСобытия;
	НоваяСтрока.ТарифнаяСетка = ТекСтрока.ТарифнаяСетка;
	НоваяСтрока.Тариф = ТекСтрока.БазовыйТарифГруппы;

КонецПроцедуры

// Заполняет наборы записей регистра РазрядыКатегорииСотрудников.
// Параметры:
//		Движения - коллекция движений регистратора.
//		РазрядыКатегорииСотрудников - таблица значений с колонками
//			ДатаСобытия.
//			Сотрудник
//			РазрядКатегория
//			ДействуетДо
//
Процедура СформироватьДвиженияРазрядовКатегорийСотрудников(Движения, РазрядыКатегорииСотрудников) Экспорт

	Если Не ЗначениеЗаполнено(РазрядыКатегорииСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = РазрядыКатегорииСотрудников.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.РазрядыКатегорииСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.РазрядыКатегорииСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, РазрядыКатегорииСотрудников);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЕстьПериодыВозвратныхСобытий = Ложь;
	Для Каждого СтрокаДвижений Из РазрядыКатегорииСотрудников Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
		Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий И ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ЕстьПериодыВозвратныхСобытий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий Тогда
		ИспользуютсяВозвратныеСобытия = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяВозвратныеСобытия Тогда 
		
		ИзмеренияДаты.Свернуть("Сотрудник, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"РазрядыКатегорииСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РазрядыКатегорииСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
		|	РазрядыКатегорииСотрудников.Сотрудник,
		|	РазрядыКатегорииСотрудников.РазрядКатегория КАК ТекущееЗначение
		|ИЗ
		|	ВТРазрядыКатегорииСотрудниковСрезПоследних КАК РазрядыКатегорииСотрудников";
		
		Выборка = Запрос.Выполнить().Выбрать();

		РазрядыКатегорииСотрудников.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
		СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Строка = РазрядыКатегорииСотрудников.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из РазрядыКатегорииСотрудников Цикл
		
		Движения.РазрядыКатегорииСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.РазрядыКатегорииСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.РазрядКатегория = Строка.РазрядКатегория;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.РазрядКатегорияПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет наборы записей регистра ПКУСотрудников.
// Параметры:
//		Движения - коллекция движений регистратора.
//		ПКУСотрудников - таблица значений с колонками
//			ДатаСобытия.
//			Сотрудник
//			ПКУ
//			ДействуетДо
//
Процедура СформироватьДвиженияПКУСотрудников(Движения, ПКУСотрудников) Экспорт

	Если Не ЗначениеЗаполнено(ПКУСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПКУСотрудников.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПКУСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПКУСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, ПКУСотрудников);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ЕстьПериодыВозвратныхСобытий = Ложь;
	Для Каждого СтрокаДвижений Из ПКУСотрудников Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		Если ВремяРегистрацииСотрудников <> Неопределено Тогда 
			НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(СтрокаДвижений.Сотрудник);
		КонецЕсли;
		Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий И ЗначениеЗаполнено(СтрокаДвижений.ДействуетДо) Тогда
			ЕстьПериодыВозвратныхСобытий = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуютсяВозвратныеСобытия И Не ЕстьПериодыВозвратныхСобытий Тогда
		ИспользуютсяВозвратныеСобытия = Ложь;
	КонецЕсли;
	
	Если ИспользуютсяВозвратныеСобытия Тогда 
	
		ИзмеренияДаты.Свернуть("Сотрудник, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПКУСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПКУСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
		|	ПКУСотрудников.Сотрудник,
		|	ПКУСотрудников.ПКУ КАК ТекущееЗначение
		|ИЗ
		|	ВТПКУСотрудниковСрезПоследних КАК ПКУСотрудников";
		
		Выборка = Запрос.Выполнить().Выбрать();

		ПКУСотрудников.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
		СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			Строка = ПКУСотрудников.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Строка Из ПКУСотрудников Цикл
		
		Движения.ПКУСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПКУСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ПКУ = Строка.ПКУ;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПКУПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ИзменениеКвалификационногоРазряда.Макеты.ПФ_MXL_ПриказОПрисвоенииРазряда,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значения действующих тарифов и дату последнего изменения тарифной сетки.
//
Функция ДанныеТарифнойСетки(ТарифнаяСетка, ДатаСобытия = '00010101', Регистратор = Неопределено) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ДатаСобытия;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	ПараметрыПостроения.ВключаяГраницу = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	ПараметрыПостроения.Отборы.Очистить();	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
			
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияТарифов.РазрядКатегория КАК РазрядКатегория,
		|	ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).Наименование КАК РазрядНаименование,
		|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).НаименованиеПолное КАК СТРОКА(1024)) КАК РазрядНаименованиеПолное,
		|	ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(ЗначенияТарифов.РазрядныйКоэффициент, 0) КАК РазрядныйКоэффициент,
		|	ЕСТЬNULL(ЗначенияТарифов.Тариф, 0) КАК Тариф
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|ГДЕ
		|	ЕСТЬNULL(ЗначенияТарифов.Используется, ЛОЖЬ) = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияТарифов.ПериодЗаписи) КАК Период,
		|	МАКСИМУМ(ЗначенияБазовыхТарифов.Тариф) КАК БазовыйТарифГруппы
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО (ИСТИНА)";
				   
	РезультатыЗапросов = Запрос.ВыполнитьПакет();			   
				   
	ЗначенияТарифов = РезультатыЗапросов[0].Выгрузить();			   
	
	Выборка = РезультатыЗапросов[1].Выбрать();
	
	ДатаИзменения = '00010101';
	Если Выборка.Следующий() Тогда 
		ДатаИзменения = Выборка.Период;
		БазовыйТарифГруппы = Выборка.БазовыйТарифГруппы;
	КонецЕсли;
	
	СтруктураДанныхТарифнойСетки = Новый Структура("ЗначенияТарифов,ДатаИзменения,БазовыйТарифГруппы", ЗначенияТарифов, ДатаИзменения, БазовыйТарифГруппы);
	
	Возврат СтруктураДанныхТарифнойСетки;
	
КонецФункции

// Возвращает описание параметров создания временной таблицы ВТЗначенияПоказателейТарифныхСеток.
//
// Параметры:
//		ИмяВТЗаданныеТарифныеСетки
//		ИмяПоляПериод
//		ИмяПоляТарифнаяСетка
//		ИмяПоляРазрядКатегория.
//		УчитыватьРазрядКатегорию - Булево, если Ложь срез, формируется без учета значений поля РазрядКатегория,
//						используется для построения таблиц со сводными значениями.
//
Функция ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток(ИмяВТЗаданныеТарифныеСетки, ИмяПоляПериод = "Период", ИмяПоляТарифнаяСетка = "ТарифнаяСетка", ИмяПоляРазрядКатегория = "РазрядКатегория") Экспорт
	
	ПараметрыПостроения = Новый Структура;
	
	ПараметрыПостроения.Вставить("ИмяВТЗаданныеТарифныеСетки", ИмяВТЗаданныеТарифныеСетки);
	ПараметрыПостроения.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	ПараметрыПостроения.Вставить("ИмяПоляТарифнаяСетка", ИмяПоляТарифнаяСетка);
	ПараметрыПостроения.Вставить("ИмяПоляРазрядКатегория", ИмяПоляРазрядКатегория);
	ПараметрыПостроения.Вставить("УчитыватьРазрядКатегорию", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает запрос, создающий временную таблицу ВТЗначенияПоказателейТарифныхСеток.
//
// Параметры:
//		ТолькоРазрешенные
//		ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//		                      см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений
//		ИмяВТЗначенияПоказателейТарифныхСеток.
//
// ВозвращаемоеЗначение
//		Запрос
//
Функция ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено, ИмяВТЗначенияПоказателейТарифныхСеток = "ВТЗначенияПоказателейТарифныхСеток") Экспорт
	
	МассивИзмерений = Новый Массив;
	МассивИзмерений.Добавить("ТарифнаяСетка");
	Если ПараметрыПостроения.УчитыватьРазрядКатегорию Тогда
		МассивИзмерений.Добавить("РазрядКатегория");
	КонецЕсли; 
	
	Если ТипЗнч(ПоляОтбора) = Тип("Соответствие") Тогда
		Отбор = ПоляОтбора.Получить("ЗначенияТарифов");
	Иначе
		Отбор = ПоляОтбора;
	КонецЕсли; 
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ПараметрыПостроения.ИмяВТЗаданныеТарифныеСетки, МассивИзмерений);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПараметрыПостроения.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ТарифнаяСетка", ПараметрыПостроения.ИмяПоляТарифнаяСетка);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("РазрядКатегория", ПараметрыПостроения.ИмяПоляРазрядКатегория);
	
	ПараметрыПостроенияСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияСреза.Отборы = Отбор;
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияТарифов",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроенияСреза,
		Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаданныеТарифныеСетки.Период,
		|	ЗаданныеТарифныеСетки.ТарифнаяСетка,
		|	ЗаданныеТарифныеСетки.РазрядКатегория,
		|	ЕСТЬNULL(ЗначенияТарифовСрезПоследних.Тариф, 0) КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТЗначенияПоказателейТарифныхСеток
		|{ВЫБРАТЬ
		|	Период,
		|	ТарифнаяСетка,
		|	РазрядКатегория,
		|	ЗначениеПоказателя}
		|ИЗ
		|	ВТЗаданныеТарифныеСетки КАК ЗаданныеТарифныеСетки
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовСрезПоследних
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияТарифовСрезПоследних.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияТарифовСрезПоследних.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.РазрядКатегория = ЗначенияТарифовСрезПоследних.РазрядКатегория
		|				ИЛИ ЗаданныеТарифныеСетки.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка))}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияТарифовСрезПоследних";
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаданныеТарифныеСетки", ПараметрыПостроения.ИмяВТЗаданныеТарифныеСетки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.Период", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.ТарифнаяСетка", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляТарифнаяСетка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.РазрядКатегория", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляРазрядКатегория);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗначенияПоказателейТарифныхСеток", ИмяВТЗначенияПоказателейТарифныхСеток);
	
	Запрос.Текст =
		Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Создает временную таблицу со значениями показателей, соответствующими разрядам тарифной сетки.
// Параметры:
//
//		МенеджерВременныхТаблиц
//      ТолькоРазрешенные - если истина, выбираются только разрешенные записи.
//      ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//                            см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений.
//
Процедура СоздатьВТЗначенияПоказателейТарифныхСеток(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено) Экспорт
	
	Запрос = ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТТарифы(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	Запрос.УстановитьПараметр("ДатаПрежнихЗначений", ДатаВступленияВСилу - 1);
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Период,
		|	&ТарифнаяСетка КАК ТарифнаяСетка
		|ПОМЕСТИТЬ ВТТарифнаяСеткаПериод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ДатаПрежнихЗначений,
		|	&ТарифнаяСетка";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТарифнаяСеткаПериод", "ТарифнаяСетка"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияТарифов.РазрядКатегория,
		|	ЗначенияТарифов.Тариф
		|ПОМЕСТИТЬ ВТТарифы
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовПрежние
		|		ПО ЗначенияТарифов.ТарифнаяСетка = ЗначенияТарифовПрежние.ТарифнаяСетка
		|			И ЗначенияТарифов.РазрядКатегория = ЗначенияТарифовПрежние.РазрядКатегория
		|			И (ЗначенияТарифовПрежние.Период = &ДатаПрежнихЗначений)
		|ГДЕ
		|	ЗначенияТарифов.Период = &ДатаВступленияВСилу
		|	И ЗначенияТарифов.Используется = ИСТИНА
		|	И ЗначенияТарифов.Тариф <> ЕСТЬNULL(ЗначенияТарифовПрежние.Тариф, 0)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, создающий временную таблицу ЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке.
//
// Параметры:
//		ТолькоРазрешенные
//		ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//		                      см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений
//		ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке.
//		ИмяВТЗначенияПоказателейТарифныхСеток - параметр задает имя временной таблицы, которая создается в ходе создания
//		                                        ВТСводныеЗначенияПоказателейПоТарифнойСетке в параметр можно передать
//		                                        ожидаемое имя этой таблицы, если параметр не задан, в него сохраняется имя
//		                                        временной таблицы, используемое при создании
//		                                        ВТСводныеЗначенияПоказателейПоТарифнойСетке.
//
// ВозвращаемоеЗначение
//		Запрос
//
Функция ЗапросВТСводныеЗначенияПоказателейПоТарифнымСеткам(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено, ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке = "ВТСводныеЗначенияПоказателейПоТарифнойСетке", ИмяВТЗначенияПоказателейТарифныхСеток = "") Экспорт
	
	ПараметрыПостроения.УчитыватьРазрядКатегорию = Ложь;
	
	Если ПустаяСтрока(ИмяВТЗначенияПоказателейТарифныхСеток) Тогда
		УничтожатьВТЗначенияПоказателейТарифныхСеток = Истина;
		ИмяВТЗначенияПоказателейТарифныхСеток = "ВТЗначенияПоказателейТарифныхСеток";
	Иначе
		УничтожатьВТЗначенияПоказателейТарифныхСеток = Ложь;
	КонецЕсли;
	
	Запрос = ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, , ИмяВТЗначенияПоказателейТарифныхСеток);
	
	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке =
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТарифныхСеток.Период КАК Период,
		|	ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка,
		|	МИНИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК Значение,
		|	МИНИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК ЗначениеМин,
		|	МАКСИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТСводныеЗначенияПоказателейПоТарифнойСетке
		|ИЗ
		|	ВТЗначенияПоказателейТарифныхСеток КАК ЗначенияПоказателейТарифныхСеток
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателейТарифныхСеток.Период,
		|	ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка";
	
	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке = СтрЗаменить(ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке,
		"ВТЗначенияПоказателейТарифныхСеток", ИмяВТЗначенияПоказателейТарифныхСеток);
	
	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке = СтрЗаменить(ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке,
		"ВТСводныеЗначенияПоказателейПоТарифнойСетке", ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке);
	
	Запрос.Текст =
		Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке;
	
	Если УничтожатьВТЗначенияПоказателейТарифныхСеток Тогда
		
		Запрос.Текст =
			Запрос.Текст
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "УНИЧТОЖИТЬ " + ИмяВТЗначенияПоказателейТарифныхСеток;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает описание значений показателей тарифной сетки, с учетом разряда.
//
// Параметры:
//		ТарифнаяСетка
//		РазрядКатегория
//		ДатаСведений - Дата, если не указать возвращены будут самые последние значения.
//
// ВозвращаемоеЗначение:
//		Структура:
//			* Период
//			* ТарифнаяСетка
//			* РазрядКатегория
//			* Значение
//			* ЗначениеМин
//			* ЗначениеМакс
//
Функция ЗначениеПоказателейТарифнойСетки(ТарифнаяСетка, РазрядКатегория, ДатаСведений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ?(ДатаСведений = Неопределено, '00010101', ДатаСведений));
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	Запрос.УстановитьПараметр("РазрядКатегория", РазрядКатегория);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&ТарифнаяСетка КАК ТарифнаяСетка,
		|	&РазрядКатегория КАК РазрядКатегория
		|ПОМЕСТИТЬ ВТЗаданныеТарифныеСетки";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток("ВТЗаданныеТарифныеСетки");
	
	ЗапросЗначений = ЗапросВТСводныеЗначенияПоказателейПоТарифнымСеткам(Истина, ПараметрыПостроения, , "ВТСводныеЗначенияПоказателейПоТарифнойСетке", "ВТЗначенияПоказателейТарифныхСеток");
	ЗапросЗначений.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросЗначений.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТЗаданныеТарифныеСетки"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаданныеТарифныеСетки.Период,
		|	ЗаданныеТарифныеСетки.ТарифнаяСетка,
		|	ЗаданныеТарифныеСетки.РазрядКатегория,
		|	ВЫБОР
		|		КОГДА &РазрядКатегория <> ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|				И НЕ ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя ЕСТЬ NULL 
		|			ТОГДА ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя
		|		КОГДА &РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|				И НЕ СводныеЗначенияПоказателейПоТарифнойСетке.Значение ЕСТЬ NULL 
		|			ТОГДА СводныеЗначенияПоказателейПоТарифнойСетке.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение,
		|	ЕСТЬNULL(СводныеЗначенияПоказателейПоТарифнойСетке.ЗначениеМин, 0) КАК ЗначениеМин,
		|	ЕСТЬNULL(СводныеЗначенияПоказателейПоТарифнойСетке.ЗначениеМакс, 0) КАК ЗначениеМакс
		|ИЗ
		|	ВТЗаданныеТарифныеСетки КАК ЗаданныеТарифныеСетки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТарифныхСеток КАК ЗначенияПоказателейТарифныхСеток
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияПоказателейТарифныхСеток.Период
		|			И ЗаданныеТарифныеСетки.РазрядКатегория = ЗначенияПоказателейТарифныхСеток.РазрядКатегория
		|			И (ЗаданныеТарифныеСетки.РазрядКатегория <> ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка))
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеЗначенияПоказателейПоТарифнойСетке КАК СводныеЗначенияПоказателейПоТарифнойСетке
		|		ПО ЗаданныеТарифныеСетки.Период = СводныеЗначенияПоказателейПоТарифнойСетке.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = СводныеЗначенияПоказателейПоТарифнойСетке.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияБазовыхТарифов.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))";
		
	ЗначенияПоказателей = Новый Структура("Период,ТарифнаяСетка,РазрядКатегория,Значение,ЗначениеМин,ЗначениеМакс",
		ДатаСведений, ТарифнаяСетка, РазрядКатегория, , 0, 0, 0);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей, Выборка);
		
	КонецЕсли; 
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

Процедура СоздатьВТДатыИзмененияБазовогоТарифа(МенеджерВременныхТаблиц, ИмяВТДатыИзмененияБазовогоТарифа = "ВТДатыИзмененияБазовогоТарифа") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки,
		|	ЗначенияБазовыхТарифов.Период КАК Дата
		|ПОМЕСТИТЬ ВТДатыИзмененияБазовогоТарифа
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияБазовыхТарифов КАК ЗначенияБазовыхТарифов
		|		ПО (Начисления.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка)
		|			И (ЗначенияБазовыхТарифов.Период > Начисления.ДатаНачала)
		|			И (ЗначенияБазовыхТарифов.Период < Начисления.ДатаОкончания)
		|			И (ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВТПоказателиРасчета КАК ПоказателиРасчета
		|				ГДЕ
		|					ПоказателиРасчета.ВидРасчета = Начисления.Начисление
		|					И ПоказателиРасчета.ПоказательБазовыйТарифГруппы = ИСТИНА))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДатыИзмененияБазовогоТарифа", ИмяВТДатыИзмененияБазовогоТарифа);
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры

Функция ЗначенияБазовыхТарифовПоСотрудникам(ПозицииШтатногоРасписанияСотрудниковПериоды) Экспорт
	ОтборПозиций = ПозицииШтатногоРасписанияСотрудниковПериоды.ВыгрузитьКолонку("ДолжностьПоШтатномуРасписанию");
	ОтборПозиций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПозиций);
	
	УстановитьПривилегированныйРежим(Истина);
	ТарифныеСеткиПозиций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОтборПозиций, "ТарифнаяСетка");
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаФильтр = Новый ТаблицаЗначений;
	ТаблицаФильтр.Колонки.Добавить("ТарифнаяСетка", Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
	ТаблицаФильтр.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтр.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаТаблицыПозиций Из ПозицииШтатногоРасписанияСотрудниковПериоды Цикл
		Если ЗначениеЗаполнено(ТарифныеСеткиПозиций[СтрокаТаблицыПозиций.ДолжностьПоШтатномуРасписанию]) Тогда
			СтрокаТаблицыФильтра = ТаблицаФильтр.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФильтра, СтрокаТаблицыПозиций);
			СтрокаТаблицыФильтра.ТарифнаяСетка = ТарифныеСеткиПозиций[СтрокаТаблицыПозиций.ДолжностьПоШтатномуРасписанию];
		КонецЕсли;
	КонецЦикла;	
	
	ТаблицаФильтр.Свернуть("ТарифнаяСетка, ДатаНачала, ДатаОкончания");
	
	ЗначенияБазовыхТарифовПоСеткам = ЗначенияБазовыхТарифов(ТаблицаФильтр);
	
	ЗначенияБазовыхТарифовПоСеткам.Индексы.Добавить("ТарифнаяСетка");
	СтруктураПоиска = Новый Структура("ТарифнаяСетка");
	
	Результат = ПозицииШтатногоРасписанияСотрудниковПериоды.СкопироватьКолонки();
	Результат.Колонки.Добавить("Тариф");
	
	Для Каждого СтрокаТаблицыПозиций Из ПозицииШтатногоРасписанияСотрудниковПериоды Цикл
		ТарифнаяСетка = ТарифныеСеткиПозиций[СтрокаТаблицыПозиций.ДолжностьПоШтатномуРасписанию];	
		Если Не ЗначениеЗаполнено(ТарифнаяСетка) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураПоиска.ТарифнаяСетка = ТарифнаяСетка;
		СтрокиТаблицыТарифов = ЗначенияБазовыхТарифовПоСеткам.НайтиСтроки(СтруктураПоиска); 
		
		Для Каждого ТекущаяСтрокаТаблицыТарифов Из СтрокиТаблицыТарифов Цикл
			ДатаНачалаДействия = Макс(СтрокаТаблицыПозиций.ДатаНачала, ТекущаяСтрокаТаблицыТарифов.ДатаНачала);
			ДатаОкончанияДействия = КонецДня(Мин(СтрокаТаблицыПозиций.ДатаОкончания, ТекущаяСтрокаТаблицыТарифов.ДатаОкончания));	
			
			Если ДатаОкончанияДействия > ДатаНачалаДействия Тогда
				СтрокаРезультат = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаТаблицыПозиций);
				СтрокаРезультат.ДатаНачала = ДатаНачалаДействия;
				СтрокаРезультат.ДатаОкончания = ДатаОкончанияДействия;
				СтрокаРезультат.Тариф = ТекущаяСтрокаТаблицыТарифов.Тариф;
			КонецЕсли;					
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат Результат;	
КонецФункции	

Функция ЗначенияБазовыхТарифов(ТаблицаФильтр)
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ТаблицаФильтр, "ТарифнаяСетка");
	ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗначенияБазовыхТарифовПоСеткам = ЗарплатаКадрыПериодическиеРегистры.ТаблицаВТИмяРегистра(
										"ЗначенияБазовыхТарифов", 
										МенеджерВременныхТаблиц,
										Истина,
										ОписаниеФильтра,
										ПараметрыПостроения);
										
	ЗначенияБазовыхТарифовПоСеткам.Сортировать("ТарифнаяСетка, Период", Новый СравнениеЗначений);	
	
	
	ЗначенияБазовыхТарифовПоСеткам.Колонки.Период.Имя = "ДатаНачала";							
	ЗначенияБазовыхТарифовПоСеткам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаФильтр, "ТарифнаяСетка");	
	СтруктураПоиска = Новый Структура("ТарифнаяСетка");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаТаблицы Из ЗначенияБазовыхТарифовПоСеткам Цикл
		Если ПредыдущаяСтрока <> Неопределено 
			И ПредыдущаяСтрока.ТарифнаяСетка = СтрокаТаблицы.ТарифнаяСетка Тогда
			
			ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаТаблицы.ДатаНачала) - 1;
		ИначеЕсли ПредыдущаяСтрока <> Неопределено Тогда
			СтруктураПоиска.ТарифнаяСетка = ПредыдущаяСтрока.ТарифнаяСетка;
			СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
				Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
					И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
					
					ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
					Прервать;
				КонецЕсли;	
			КонецЦикла;				
		КонецЕсли;	
			
		ПредыдущаяСтрока = СтрокаТаблицы;		
	КонецЦикла;	
	
	Если ПредыдущаяСтрока <> Неопределено Тогда
		СтруктураПоиска.ТарифнаяСетка = ПредыдущаяСтрока.ТарифнаяСетка;
		СтрокиФильтра = ТаблицаФильтр.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицыФильтра Из СтрокиФильтра Цикл
			Если ПредыдущаяСтрока.ДатаНачала >= СтрокаТаблицыФильтра.ДатаНачала
				И ПредыдущаяСтрока.ДатаНачала <= СтрокаТаблицыФильтра.ДатаОкончания Тогда
				
				ПредыдущаяСтрока.ДатаОкончания = КонецДня(СтрокаТаблицыФильтра.ДатаОкончания);
				Прервать;
			КонецЕсли;	
		КонецЦикла;				
	КонецЕсли;	

	Возврат ЗначенияБазовыхТарифовПоСеткам;
КонецФункции	

Функция ИнициализироватьЗаголовокФормыИРеквизитов(Объект, ВидТарифнойСетки = Неопределено, ЭтоНовый = Ложь) Экспорт
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	Объект = Объект + ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф, "Тариф", "");
	Объект = Объект + ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка, "Надбавка", "");
	
	СоответствиеЭлементаИЗаголовка = Новый Соответствие;
	
	Если РаботаВБюджетномУчреждении Тогда 
		
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписок", 			НСтр("ru = 'Профессиональные квалификационные группы и надбавки';
																						|en = 'Professional qualification groups and standard bonuses'"));	
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементТариф", 	НСтр("ru = 'Профессиональная квалификационная группа';
																						|en = 'Professional qualification group'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокТариф", 	НСтр("ru = 'Профессиональные квалификационные группы';
																					|en = 'Professional qualification groups'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементНадбавка",	НСтр("ru = 'Квалификационная надбавка';
																						|en = 'Qualification pay'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокНадбавка", 	НСтр("ru = 'Квалификационные надбавки';
																						|en = 'Qualification pays'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписок", 		   НСтр("ru = 'Утверждения ПКГ/ПКУ и квалификационных надбавок';
																									|en = 'Confirmations of PQG/PQL and qualification pays'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементТариф",	   НСтр("ru = 'Утверждение ПКГ/ПКУ';
																									|en = 'PQG/PQL confirmation'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокТариф",	   НСтр("ru = 'Утверждения ПКГ/ПКУ';
																									|en = 'PQG/PQL confirmations'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементНадбавка", НСтр("ru = 'Утверждение квалификационных надбавок';
																								|en = 'Confirmation of qualifying allowances'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокНадбавка",  НСтр("ru = 'Утверждения квалификационных надбавок';
																								|en = 'Confirmation of qualification pays'"));	
		
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаСписок", 	НСтр("ru = 'Изменения квалификационных категорий сотрудников';
																					|en = 'Changes of qualification categories of employees'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаЭлемент", 	НСтр("ru = 'Изменение квалификационной категории сотрудника';
																					|en = 'Change in qualification category of employee'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписок", 		НСтр("ru = 'Квалификационные категории (уровни)';
																						|en = 'Qualification categories (levels)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписокТариф", 	НСтр("ru = 'Профессиональные квалификационные уровни';
																							|en = 'Professional qualification levels'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовЭлемент", 		НСтр("ru = 'Квалификационная категория (уровни)';
																							|en = 'Qualification category (levels)'"));
					
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаТариф",			НСтр("ru = 'ПКГ';
																								|en = 'PQG'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияТариф", 		НСтр("ru = 'ПКУ';
																							|en = 'PQL'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаНадбавка",		НСтр("ru = 'Вид надбавки';
																							|en = 'Standard bonus kind'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияНадбавка", 		НСтр("ru = 'Квалиф. категория';
																								|en = 'Qualif. category'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСетки",			НСтр("ru = 'Все изменения тарифной группы';
																							|en = 'All tariff group changes'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиТариф",		НСтр("ru = 'Все изменения ПКГ';
																								|en = 'All PQG changes'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиНадбавка",	НСтр("ru = 'Все изменения надбавки';
																							|en = 'All standard bonus changes'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияВКадровыхДокументах",	  НСтр("ru = 'Квалиф. категория';
																										|en = 'Qualif. category'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифВКадровыхДокументах",	  НСтр("ru = 'Квалиф. надбавка';
																								|en = 'Qualif. pay'"));
		
	Иначе
		
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписок", 			НСтр("ru = 'Тарифные группы';
																						|en = 'Tariff groups'"));	
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементТариф",	НСтр("ru = 'Тарифная группа';
																					|en = 'Tariff group'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокТариф", 	НСтр("ru = 'Тарифные группы';
																					|en = 'Tariff groups'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементНадбавка",	НСтр("ru = 'Тарифная группа надбавки';
																						|en = 'Tariff group standard bonuses'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокНадбавка", 	НСтр("ru = 'Тарифные группы надбавок';
																						|en = 'Allowances tariff groups'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписок", 		НСтр("ru = 'Утверждения тарифных групп';
																								|en = 'Tariff group confirmations'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементТариф", НСтр("ru = 'Утверждение тарифной группы';
																							|en = 'Tariff group confirmation'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокТариф",  НСтр("ru = 'Утверждения тарифных групп';
																							|en = 'Tariff group confirmations'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементНадбавка", НСтр("ru = 'Утверждение тарифной группы надбавок';
																								|en = 'Allowances tariff group confirmation'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокНадбавка",  НСтр("ru = 'Утверждения тарифных групп надбавок';
																								|en = 'Allowances tariff groups confirmations'"));	
		
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаСписок", 	НСтр("ru = 'Изменения квалификационных разрядов (категорий) сотрудников';
																					|en = 'Changes of qualification categories of employees'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаЭлемент",  НСтр("ru = 'Изменение квалификационного разряда (категории) сотрудника';
																				|en = 'Change in qualification category of employee'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписок", 		НСтр("ru = 'Квалификационные разряды (категории)';
																						|en = 'Labor grades'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписокТариф", 	НСтр("ru = 'Квалификационные разряды (категории)';
																							|en = 'Labor grades'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовЭлемент", 		НСтр("ru = 'Квалификационный разряд (категория)';
																							|en = 'Labor grade'"));
					
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаТариф", 		НСтр("ru = 'Тарифная группа';
																							|en = 'Tariff group'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияТариф", 	НСтр("ru = 'Разряд (категория)';
																						|en = 'Category'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаНадбавка",	НСтр("ru = 'Тарифная группа надбавки';
																						|en = 'Tariff group standard bonuses'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияНадбавка",  НСтр("ru = 'Разряд (категория) надбавки';
																						|en = 'Standard bonus category'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСетки",		НСтр("ru = 'Все изменения тарифной группы';
																						|en = 'All tariff group changes'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиТариф",	НСтр("ru = 'Все изменения тарифной группы';
																							|en = 'All tariff group changes'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиНадбавка",	НСтр("ru = 'Все изменения тарифной группы надбавки';
																							|en = 'All changes of tariff group standard bonuses'"));

		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияВКадровыхДокументах", НСтр("ru = 'Разряд (категория)';
																									|en = 'Category'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифВКадровыхДокументах",	  НСтр("ru = 'Оклад (тариф)';
																								|en = 'Base salary (tariff)'"));
		
	КонецЕсли;
	
	Заголовок = Строка(СоответствиеЭлементаИЗаголовка.Получить(Объект)) + ?(ЭтоНовый, НСтр("ru = ' (Создание)';
																							|en = ' (Creation)'"),"");
	
	Возврат Заголовок;
	
КонецФункции

Функция ПоказателиТарифнойСетки(ТарифнаяСетка, СчитатьПоказателиПоДолжности = Ложь, СчитатьПоказателиПоКвалификации = Истина) Экспорт    
	
	Список = Новый Массив;
	
	Если ТарифнаяСетка <> Неопределено И ТарифнаяСетка <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ТарифныеСетки.ПустаяСсылка") Тогда
		
		ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка,"ВидТарифнойСетки");
		
		Если СчитатьПоказателиПоДолжности Тогда
			
			Если ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Тариф") Тогда		
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоДолжности"));
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДневнойТарифПоДолжности"));
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ЧасовойТарифПоДолжности"));
			ИначеЕсли ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Надбавка") Тогда
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДолжностнаяНадбавка"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если СчитатьПоказателиПоКвалификации Тогда
			
			Если ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Тариф") Тогда		
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.Оклад"));
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная"));
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая"));
			ИначеЕсли ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Надбавка") Тогда
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КвалификационнаяНадбавка"));
				Список.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаКатегорию"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Список
	
КонецФункции

// Одновременно по сотруднику может быть установлен только один из основных показателей.
Функция ПоказательТарифнойСеткиСотрудника(ТарифнаяСетка = Неопределено, ТарифнаяСеткаНадбавки = Неопределено, НачисленияСотрудника) Экспорт
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	СписокПоказателейТарифнойСетки = ПоказателиТарифнойСетки(ТарифнаяСетка, Ложь);
	СписокПоказателейТарифнойСеткиНадбавки = ПоказателиТарифнойСетки(ТарифнаяСеткаНадбавки, Ложь);

	Для каждого СтрокаНачислений Из НачисленияСотрудника Цикл
				
		ОписаниеНачисления = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
			Если ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				Если СписокПоказателейТарифнойСетки.Найти(ОписаниеПоказателя.Показатель) <> Неопределено Тогда
					Возврат ОписаниеПоказателя.Показатель;
				ИначеЕсли СписокПоказателейТарифнойСеткиНадбавки.Найти(ОписаниеПоказателя.Показатель) <> Неопределено Тогда
					Возврат ОписаниеПоказателя.Показатель;	
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьПКУСотрудникаПоУмолчанию(Форма, ПутьКРеквизиту, ДатаСобытия, ДолжностьПоШтатномуРасписанию) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("РазрешеноИзменениеПКУВКадровыхДокументах") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, ДанныеПозиции.РазрядКатегория);
	
КонецПроцедуры

Процедура ЗаполнитьРазрядКатегориюСотрудникаПоУмолчанию(Форма, Знач ПутьКРеквизитуРазрядКатегория, Знач ТарифнаяСетка, Знач Должность, Знач ДолжностьПоШтатномуРасписанию, Знач Сотрудник, Знач ДатаСобытия) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) И Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		
		РазрядКатегория = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуРазрядКатегория);
		
		РазрядПоУмолчанию = Неопределено;
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьСпециальностиФизическихЛиц") Тогда
			РазрядПоУмолчанию = РазрядСотрудникаПоУмолчанию(ТарифнаяСетка, Должность, ДолжностьПоШтатномуРасписанию, Сотрудник, ДатаСобытия);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РазрядПоУмолчанию) Тогда 
			
			ДанныеДолжности = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ДанныеДолжности");
			Если ДанныеДолжности <> Неопределено Тогда
				
				Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") И ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
					СвойстваДолжности = ДанныеДолжности.Получить(ДолжностьПоШтатномуРасписанию);
				ИначеЕсли ЗначениеЗаполнено(Должность) Тогда
					СвойстваДолжности = ДанныеДолжности.Получить(Должность);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СвойстваДолжности) Тогда
					Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКвалификационнуюНадбавку") Тогда
						РазрядПоУмолчанию = СвойстваДолжности.РазрядКатегорияНадбавки;
					Иначе
						РазрядПоУмолчанию = СвойстваДолжности.РазрядКатегория;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РазрядПоУмолчанию) И ЗначениеЗаполнено(Сотрудник) И ЗначениеЗаполнено(СвойстваДолжности) Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКвалификационнуюНадбавку") Тогда
				ТарифнаяСетка = СвойстваДолжности.ТарифнаяСеткаНадбавки;
			Иначе
				ТарифнаяСетка = СвойстваДолжности.ТарифнаяСетка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТарифнаяСетка) Тогда
				
				ИзмеренияДаты = Новый ТаблицаЗначений;
				ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
				ИзмеренияДаты.Колонки.Добавить("ТарифнаяСетка", Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
				
				СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
				СтрокаИзмеренияДаты.Период = ДатаСобытия;
				СтрокаИзмеренияДаты.ТарифнаяСетка = ТарифнаяСетка;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("РазрядКатегория", РазрядКатегория);
				
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудник, "РазрядКатегория", ДатаСобытия);
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
					"ЗначенияТарифов",
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ЗначенияТарифов.ТарифнаяСетка,
					|	МИНИМУМ(ЗначенияТарифов.РазрядКатегория.РеквизитДопУпорядочивания) КАК РазрядКатегорияРеквизитДопУпорядочивания
					|ПОМЕСТИТЬ ВТМинимальныйПорядокРазрядов
					|ИЗ
					|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
					|		ПО ЗначенияТарифов.РазрядКатегория = КадровыеДанныеСотрудников.РазрядКатегория
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗначенияТарифов.ТарифнаяСетка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗначенияТарифов.ТарифнаяСетка,
					|	ЗначенияТарифов.РазрядКатегория,
					|	ВЫБОР
					|		КОГДА ЗначенияТарифовРазрядаКатегории.РазрядКатегория ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ТекущийРазрядКатегорияИспользуется
					|ИЗ
					|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовРазрядаКатегории
					|		ПО ЗначенияТарифов.ТарифнаяСетка = ЗначенияТарифовРазрядаКатегории.ТарифнаяСетка
					|			И (ЗначенияТарифовРазрядаКатегории.РазрядКатегория = &РазрядКатегория)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныйПорядокРазрядов КАК МинимальныйПорядокРазрядов
					|		ПО ЗначенияТарифов.ТарифнаяСетка = МинимальныйПорядокРазрядов.ТарифнаяСетка
					|			И ЗначенияТарифов.РазрядКатегория.РеквизитДопУпорядочивания = МинимальныйПорядокРазрядов.РазрядКатегорияРеквизитДопУпорядочивания";
					
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
					Если НЕ Выборка.ТекущийРазрядКатегорияИспользуется Тогда
						РазрядПоУмолчанию = Выборка.РазрядКатегория;
					КонецЕсли; 
					
				КонецЕсли; 
				
			Иначе
				РазрядКатегория = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			РазрядКатегория = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РазрядПоУмолчанию) Тогда
			РазрядКатегория = РазрядПоУмолчанию;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуРазрядКатегория, РазрядКатегория);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазрядСотрудникаПоУмолчанию(ТарифнаяСетка, Должность, ДолжностьПоШтатномуРасписанию, Сотрудник, ДатаСобытия)
	
	РазрядПоУмолчанию = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСпециальностиФизическихЛиц") 
		ИЛИ Сотрудник = Неопределено ИЛИ  НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		Возврат РазрядПоУмолчанию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ДатаСобытия;
	
	Специальности = Новый Массив;
	Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда	
		
		ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
		МассивСтруктурСпециальности = ДанныеПозиции.Специальности; 
		Для Каждого СтруктураСпециальности Из МассивСтруктурСпециальности Цикл
			Специальности.Добавить(СтруктураСпециальности.Специальность);		
		КонецЦикла;
		ТарифнаяСетка = ДанныеПозиции.ТарифнаяСетка;
		ТарифнаяСеткаНадбавки  = ДанныеПозиции.ТарифнаяСеткаНадбавки;
		
	ИначеЕсли ЗначениеЗаполнено(Должность) Тогда	

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Должность", Должность);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДолжностиСпециальности.Специальность КАК Специальность
			|ИЗ
			|	Справочник.Должности.Специальности КАК ДолжностиСпециальности
			|ГДЕ
			|	ДолжностиСпециальности.Ссылка = &Должность";
		СпециальностиДолжности = Запрос.Выполнить().Выгрузить();
		Если СпециальностиДолжности.Количество() > 0 Тогда 
			Специальности = СпециальностиДолжности.ВыгрузитьКолонку("Специальность");	
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ЗначенияТарифов",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
	ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ФизическоеЛицо", "=", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо"));	
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"СпециальностиФизическихЛиц",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
	ПараметрыПостроения);
	
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("Специальности", Специальности);
	Запрос.УстановитьПараметр("ТарифныеСетки", МассивСеток(ТарифнаяСетка, ТарифнаяСеткаНадбавки));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпециальностиФизическихЛицСрезПоследних.РазрядКатегория
		|ПОМЕСТИТЬ ВТСпециальностиФизическогоЛица
		|ИЗ
		|	ВТСпециальностиФизическихЛицСрезПоследних КАК СпециальностиФизическихЛицСрезПоследних
		|ГДЕ
		|	СпециальностиФизическихЛицСрезПоследних.Специальность В(&Специальности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗначенияТарифовСрезПоследних.РазрядКатегория,
		|	ЗначенияТарифовСрезПоследних.Тариф КАК Тариф
		|ИЗ
		|	ВТСпециальностиФизическогоЛица КАК СпециальностиФизическогоЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовСрезПоследних
		|		ПО СпециальностиФизическогоЛица.РазрядКатегория = ЗначенияТарифовСрезПоследних.РазрядКатегория
		|			И (ЗначенияТарифовСрезПоследних.ТарифнаяСетка В (&ТарифныеСетки))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тариф УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РазрядПоУмолчанию = Выборка.РазрядКатегория;
	КонецЕсли; 

	Возврат РазрядПоУмолчанию;
	
КонецФункции

Функция МассивСеток(ТарифнаяСетка, ТарифнаяСеткаНадбавки) Экспорт
	
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(ТарифнаяСеткаНадбавки) Тогда
		Массив.Добавить(ТарифнаяСеткаНадбавки)
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку") Или Массив.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ТарифнаяСетка) Тогда
			Массив.Добавить(ТарифнаяСетка)
		КонецЕсли;
	КонецЕсли;
		
	Возврат Массив;
	
КонецФункции

Функция ЗаполнениеВидаТарифнойСетки(Параметры, ВидТарифнойСетки) Экспорт
	
	Если Параметры.Свойство("ВидТарифнойСетки") Тогда
		Возврат Параметры.ВидТарифнойСетки;
	ИначеЕсли Не Параметры.Ключ.Пустая() Тогда
		Возврат ВидТарифнойСетки;
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ВидТарифнойСетки") Тогда 
		Возврат Параметры.ЗначенияЗаполнения.ВидТарифнойСетки;	
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		Возврат Параметры.ЗначениеКопирования.ВидТарифнойСетки;
	КонецЕсли;
		
КонецФункции

Процедура ПрочитатьДанныеТарифныхСетокДолжностиВФорму(Форма, Должность, ДолжностьПоШтатномуРасписанию, ДатаСведений) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТарифнаяСетка = Справочники.ТарифныеСетки.ПустаяСсылка();
		РазрядКатегория = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
		ТарифнаяСеткаНадбавки = Справочники.ТарифныеСетки.ПустаяСсылка();
		
		ДанныеТарифныхСеток = Неопределено;
		ДанныеДолжности = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ДанныеДолжности");
		Если ДанныеДолжности <> Неопределено Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") 
				И ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
				ДанныеТарифныхСеток = ДанныеДолжности.Получить(ДолжностьПоШтатномуРасписанию);
			ИначеЕсли ЗначениеЗаполнено(Должность) Тогда
				ДанныеТарифныхСеток = ДанныеДолжности.Получить(Должность);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеТарифныхСеток <> Неопределено Тогда
			ТарифнаяСетка = ДанныеТарифныхСеток.ТарифнаяСетка;
			РазрядКатегория = ДанныеТарифныхСеток.РазрядКатегория;
			ТарифнаяСеткаНадбавки = ДанныеТарифныхСеток.ТарифнаяСеткаНадбавки;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ТарифнаяСетка", ТарифнаяСетка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "РазрядКатегория", РазрядКатегория);
			
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ТарифнаяСеткаНадбавки", ТарифнаяСеткаНадбавки);
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТарифыПоДаннымФормы(Тарифы, ВидТарифнойСетки, ТарифнаяСетка, Отказ, ПутьКДанным) Экспорт
	
	Если Тарифы.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		
		Тарифы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		НомерСтроки = 1;
		Для каждого СтрокаТарифы Из Тарифы Цикл
			СтрокаТарифы.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Тарифы.Колонки.Найти("Отменить") = Неопределено Тогда
		Тарифы.Колонки.Добавить("Отменить", Новый ОписаниеТипов("Булево"));
		Тарифы.ЗаполнитьЗначения(Ложь, "Отменить");
	КонецЕсли;
	
	// Обновление или создание категорий
	Если ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф
		И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тарифы", Тарифы);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	Тарифы.РазрядНаименование,
			|	Тарифы.РазрядНаименованиеПолное,
			|	Тарифы.РазрядныйКоэффициент,
			|	Тарифы.Тариф,
			|	Тарифы.Отменить
			|ПОМЕСТИТЬ ВТТарифы
			|ИЗ
			|	&Тарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Тарифы.НомерСтроки КАК НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	Тарифы.РазрядНаименование,
			|	Тарифы.РазрядНаименованиеПолное,
			|	Тарифы.РазрядныйКоэффициент,
			|	Тарифы.Тариф,
			|	Тарифы.Отменить,
			|	ВЫБОР
			|		КОГДА Тарифы.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		КОГДА Тарифы.РазрядНаименование <> ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).Наименование
			|			ТОГДА ИСТИНА
			|		КОГДА (ВЫРАЗИТЬ(Тарифы.РазрядНаименованиеПолное КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).НаименованиеПолное КАК СТРОКА(1024)))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ НЕ Тарифы.Отменить
			|	КОНЕЦ КАК ОбновитьРазрядКатегорию
			|ИЗ
			|	ВТТарифы КАК Тарифы
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ПутьКОбъекту = "";
		ПутьКТабличнойЧасти = "";
		
		ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
		Если ЧастиПути.Количество() > 1 Тогда
			ПутьКОбъекту = ЧастиПути[0];
		КонецЕсли; 
		Для НомерЧасти = ?(ЧастиПути.Количество() > 1, 1, 0) По ЧастиПути.Количество() - 1 Цикл
			ПутьКТабличнойЧасти = ?(ПустаяСтрока(ПутьКТабличнойЧасти), "", ПутьКТабличнойЧасти + ".") + ЧастиПути[НомерЧасти];
		КонецЦикла;
			
		ТаблицаТарифов = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТаблицыТарифов Из ТаблицаТарифов Цикл
			
			Если ПустаяСтрока(СтрокаТаблицыТарифов.РазрядНаименование) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не заполнено наименование';
						|en = 'Description is required'"),
					,
					ПутьКТабличнойЧасти + "[" + (СтрокаТаблицыТарифов.НомерСтроки - 1) + "].РазрядНаименование",
					ПутьКОбъекту,
					Отказ
				);
				Продолжить;
				
			ИначеЕсли ПустаяСтрока(СтрокаТаблицыТарифов.РазрядНаименованиеПолное) Тогда
				СтрокаТаблицыТарифов.РазрядНаименованиеПолное = СтрокаТаблицыТарифов.РазрядНаименование;
			КонецЕсли; 
			
			Если СтрокаТаблицыТарифов.ОбновитьРазрядКатегорию Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицыТарифов.РазрядКатегория) Тогда
					РазрядКатегорияОбъект = Справочники.РазрядыКатегорииДолжностей.СоздатьЭлемент();
				Иначе
					РазрядКатегорияОбъект = СтрокаТаблицыТарифов.РазрядКатегория.ПолучитьОбъект();
				КонецЕсли;
				
				РазрядКатегорияОбъект.ТарифнаяСетка = ТарифнаяСетка;
				РазрядКатегорияОбъект.Наименование = СтрокаТаблицыТарифов.РазрядНаименование;
				РазрядКатегорияОбъект.НаименованиеПолное = СтрокаТаблицыТарифов.РазрядНаименованиеПолное;
				
				РазрядКатегорияОбъект.Записать();
				
				СтрокаТаблицыТарифов.РазрядКатегория = РазрядКатегорияОбъект.Ссылка;

			КонецЕсли; 
			
		КонецЦикла;
		
		Тарифы = ТаблицаТарифов.Скопировать();
		
		// Обновление порядка категорий
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тарифы", Тарифы.Скопировать());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория
			|ПОМЕСТИТЬ ВТТарифы
			|ИЗ
			|	&Тарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
			|ПОМЕСТИТЬ ВТТарифыСПорядком
			|ИЗ
			|	ВТТарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыСПорядкомПредыдущие.РеквизитДопУпорядочивания) КАК НомерСтрокиПоПорядку
			|ПОМЕСТИТЬ ВТТарифыСНовымиНомерамиСтрок
			|ИЗ
			|	ВТТарифыСПорядком КАК ТарифыСПорядком
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифыСПорядком КАК ТарифыСПорядкомПредыдущие
			|		ПО ТарифыСПорядком.РеквизитДопУпорядочивания >= ТарифыСПорядкомПредыдущие.РеквизитДопУпорядочивания
			|
			|СГРУППИРОВАТЬ ПО
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РазрядКатегория,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания,
			|	ТарифыСНовымиНомерамиСтрок.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияНовый
			|ИЗ
			|	ВТТарифыСПорядком КАК ТарифыСПорядком
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифыСНовымиНомерамиСтрок КАК ТарифыСНовымиНомерамиСтрок
			|		ПО ТарифыСПорядком.НомерСтроки = ТарифыСНовымиНомерамиСтрок.НомерСтрокиПоПорядку
			|			И ТарифыСПорядком.РеквизитДопУпорядочивания <> ТарифыСНовымиНомерамиСтрок.РеквизитДопУпорядочивания";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РазрядКатегорияОбъект = Выборка.РазрядКатегория.ПолучитьОбъект();
			РазрядКатегорияОбъект.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочиванияНовый;
			РазрядКатегорияОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбораРазрядаКадровогоПриказа(Форма, ИмяПоляРазряд = "РазрядКатегория") Экспорт 
	
	ПутьКДанным = ?(ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку"), "ТарифнаяСеткаНадбавки", "ТарифнаяСетка");
	Связь = Новый СвязьПараметраВыбора("ТарифнаяСетка", ПутьКДанным);
	СвязиПараметровВыбора = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Связь));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоляРазряд, "СвязиПараметровВыбора", СвязиПараметровВыбора);
	
КонецПроцедуры

Функция СписокПоказателейДоплатыЗаКвалификацию() Экспорт 
	
	СписокПоказателей = Новый Массив;
	
	РазмерДоплатыЗаКвалификацию = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаКвалификацию");
	Если РазмерДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерДоплатыЗаКвалификацию);
	КонецЕсли;
	
	РазмерДневнойДоплатыЗаКвалификацию = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДневнойДоплатыЗаКвалификацию");
	Если РазмерДневнойДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерДневнойДоплатыЗаКвалификацию);
	КонецЕсли;
	
	РазмерЧасовойДоплатыЗаКвалификацию = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерЧасовойДоплатыЗаКвалификацию");
	Если РазмерЧасовойДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерЧасовойДоплатыЗаКвалификацию);
	КонецЕсли;
	
	Возврат СписокПоказателей;
	
КонецФункции	

#КонецОбласти
