#Область ПрограммныйИнтерфейс

//см. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоРасширеннаяВерсияГосИС("ИСМП") Тогда
		МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
		МодульИнтеграцияИСМПКлиент.ПодключитьНапоминанияОтветственномуЗаАктуализациюТокеновАвторизации();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЗЕРНО") Тогда
		МодульИнтеграцияЗЕРНОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЗЕРНОКлиент");
		МодульИнтеграцияЗЕРНОКлиент.ПослеНачалаРаботыСистемы();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		МодульОбщегоНазначенияЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбщегоНазначенияЕГАИСКлиент");
		МодульОбщегоНазначенияЕГАИСКлиент.ПослеНачалаРаботыСистемы();
	КонецЕсли;
	
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноИС"]       = Ложь;
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"] = Новый Соответствие();
	
КонецПроцедуры

// Обработка внешнего события.
// 
// Параметры:
//  Источник - Произвольный
//  Событие - Произвольный
//  Данные - Произвольный
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	Если ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"][Данные] <> Неопределено Тогда
		ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноДанныеИС"].Удалить(Данные);
		Возврат;
	КонецЕсли;
	
	ПараметрыПриложения["ПодключаемоеОборудованиеСобытиеОбработаноИС"] = Ложь;
	
КонецПроцедуры

#Область РаботаСИнтерфейсом

// Заполняет массив документов по которым должен быть установлен архивный статус и отдает для архивирования
//
// Параметры:
//   Форма                    - ФормаКлиентскогоПриложения - источник данных команды
//   СсылкаДинамическийСписок - ТаблицаФормы     - динамический список формы (при вызове из формы списка)
//                            - ДокументСсылка   - ссылка на архивируемый документ (при вызове из формы документа)
//   МодульОбработки          - ОбщийМодуль      - обработчик архивирования
//  ОповещениеПриЗавершении   - ОписаниеОповещения, Неопределено - оповещение о завершении
Процедура АрхивироватьДокументы(Форма, СсылкаДинамическийСписок, МодульОбработки, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если ТипЗнч(СсылкаДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		
		Если Не ВыборСтрокиСпискаКорректен(СсылкаДинамическийСписок) Тогда
			Возврат;
		КонецЕсли; 
	
		ДокументыКАрхивированию = ВыделенныеЭлементыСпискаБезГрупп(СсылкаДинамическийСписок);
		ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются';
							|en = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются'");
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СсылкаДинамическийСписок) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(СсылкаДинамическийСписок) = Тип("Массив") Тогда
			ДокументыКАрхивированию = СсылкаДинамическийСписок;
		Иначе
			ДокументыКАрхивированию = Новый Массив;
			ДокументыКАрхивированию.Добавить(СсылкаДинамическийСписок);
		КонецЕсли;
		
		Если ДокументыКАрхивированию.Количество() > 1 Тогда
			ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются';
								|en = 'Подтвердите операцию: по выделенным документам дальнейшие действия не требуются'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Подтвердите операцию: по текущему документу дальнейшие действия не требуются';
								|en = 'Подтвердите операцию: по текущему документу дальнейшие действия не требуются'");
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументыКАрхивированию", ДокументыКАрхивированию);
	// Используется в механизме оповещений
	ДополнительныеПараметры.Вставить("Контекст",                СсылкаДинамическийСписок);
	ДополнительныеПараметры.Вставить("ДальнейшееДействие",      НСтр("ru = 'Архивирование документов';
																	|en = 'Архивирование документов'"));
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДополнительныеПараметры.Вставить("ИдентификаторВладельца",  Форма.УникальныйИдентификатор);
	
	//@skip-warning одноименные обработчики архивирования ГосИС
	ПоказатьВопрос(
		Новый ОписаниеОповещения("АрхивироватьДокументы", МодульОбработки, ДополнительныеПараметры),
		ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

// Функция проверяет что
//  * в динамическом списке формы из которого производится выбор есть строки
//  * пользователь не выбрал строки группировок.
// Параметры:
//  Список                     - ТаблицаФормы - список формы
//  ПоТекущейСтроке            - Булево       - переключатель единичного и множественного выбора
//  СообщатьОшибкуПользователю - Булево       - необходимость вывести "сообщение по умолчанию",
//                                              если Ложь то взаимодействие с пользователем оставляется для вызывающей функции.
//
// Возвращаемое значение:
//  Булево - признак корректности выбора
Функция ВыборСтрокиСпискаКорректен(Список, ПоТекущейСтроке = Ложь, СообщатьОшибкуПользователю = Истина) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Результат = Ложь;
	
	Если ПоТекущейСтроке Тогда
		
		Если Список.ТекущиеДанные <> Неопределено И ТипЗнч(Список.ТекущаяСтрока) <> ТипГруппировка Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Если Список.ВыделенныеСтроки.Количество() Тогда
			Результат = Истина;
			Для Каждого Элемент Из Список.ВыделенныеСтроки Цикл
				Результат = Результат И (ТипЗнч(Элемент) <> ТипГруппировка);
			КонецЦикла;
			
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СообщатьОшибкуПользователю Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для выбранного объекта';
				|en = 'Операция недоступна для выбранного объекта'"),,
			Список.Имя);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает данные выделенных строк (или колонки из них) исключая строки группировки
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - имя элемента формы связанного с динамическим списком для выбора
//  Колонка            - Строка       - вернуть результат в виде ДанныеСтроки[ИмяКолонки]
//                     - Неопределено - вернуть результат в виде массива выделенных строк
//
// Возвращаемое значение:
//  Массив - данные выделенных строк списка
Функция ВыделенныеЭлементыСпискаБезГрупп(ДинамическийСписок, Колонка = Неопределено) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Результат = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ДинамическийСписок.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) <> ТипГруппировка Тогда
			Если Колонка = Неопределено Тогда
				Результат.Добавить(ВыделеннаяСтрока);
			Иначе
				Результат.Добавить(ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока)[Колонка]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Разворачивает на форме дерево или его группу со всеми вложенными группами
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - разворачиваемая корневая группа
//  ЭлементФормы - ТаблицаФормы - связанный с деревом элемент управляемой формы
//
Процедура РазвернутьДеревоРекурсивно(СтрокаДерева, ЭлементФормы) Экспорт
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоРекурсивно(Элемент, ЭлементФормы);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры открытия формы списка потребительских упаковок.
// 
// Возвращаемое значение:
// Структура - Параметры открытия формы списка потребительских упаковок:
// * ПараметрыФормы - Неопределено, Структура - параметры формы
// * ВладелецФормы - Неопределено, ФормаКлиентскогоПриложения - владелец формы
// * ОповещениеОЗакрытии - Неопределено, ОписаниеОповещения - оповещение о закрытии
// * РежимОткрытияОкна - Неопределено, РежимОткрытияОкнаФормы - режим открытия окна
// * Организациия - Неопределено, ОпределяемыйТип.Организация - огранизация
Функция ПараметрыОткрытияФормыСпискаПотребительскихУпаковок() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ПараметрыФормы",      Неопределено);
	Параметры.Вставить("ВладелецФормы",       Неопределено);
	Параметры.Вставить("ОповещениеОЗакрытии", Неопределено);
	Параметры.Вставить("РежимОткрытияОкна",   Неопределено);
	Параметры.Вставить("Организациия",        Неопределено);
	
	Возврат Параметры
	
КонецФункции

#КонецОбласти

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
// Параметры:
//  ИдентификаторНазначения    - УникальныйИдентификатор, Неопределено - уникальный идентификатор формы для показа сообщения.
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - выходной параметр, всегда устанавливается в значение Истина.
//
// Пример:
// 	см ОбщегоНазначенияКлиентСервер.СообщитьПользователю.
//
Процедура СообщитьПользователюВФорму(
		Знач ИдентификаторНазначения = Неопределено,
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Сообщение.КлючДанных = КлючДанных;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Открывает форму сообщения обмена с государственной информационной системой
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - источник события
//  ИмяПодсистемы   - Строка - краткое имя библиотеки
//  ВыбраннаяСтрока - Произвольный - выбранная строка таблицы
//  ПоказатьГруппу  - Булево - показать документ-источник сообщения
//
Процедура ПоказатьСообщенияОперации(Форма, ИмяПодсистемы, ВыбраннаяСтрока, ПоказатьГруппу = Истина) Экспорт
	
	ДанныеСтроки = Форма.Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда
		
		ИмяФормы = СтрШаблон("Справочник.%1ПрисоединенныеФайлы.Форма.ФормаЗапросОтвет", ИмяПодсистемы);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1';
															|en = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			ИмяФормы,
			ПараметрыФормы,
			Форма,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПоказатьГруппу И ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		
		ПоказатьЗначение(,ДанныеСтроки.Документ);
		
	Иначе
		
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПараметрыОткрытияФормыВскрытияПотребительскойУпаковки() Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Организация");
	ПараметрыОткрытия.Вставить("ИмяПодсистемы");
	ПараметрыОткрытия.Вставить("КодМаркировки");
	ПараметрыОткрытия.Вставить("ОповещениеОЗакрытии");
	ПараметрыОткрытия.Вставить("СохранитьПолныйКод", Ложь);
	ПараметрыОткрытия.Вставить("Склад");
	ПараметрыОткрытия.Вставить("Номенклатура");
	ПараметрыОткрытия.Вставить("Характеристика");
	ПараметрыОткрытия.Вставить("Серия");
	ПараметрыОткрытия.Вставить("ПолныйКодМаркировки");
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ОткрытьФормуВскрытияПотребительскойУпаковки(ПараметрыОткрытия, ВладелецФормы) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Организация",         ПараметрыОткрытия.Организация);
	ПараметрыОткрытияФормы.Вставить("ИмяПодсистемы",       ПараметрыОткрытия.ИмяПодсистемы);
	ПараметрыОткрытияФормы.Вставить("СохранитьПолныйКод",  ПараметрыОткрытия.СохранитьПолныйКод);
	ПараметрыОткрытияФормы.Вставить("Склад",               ПараметрыОткрытия.Склад);
	ПараметрыОткрытияФормы.Вставить("Номенклатура",        ПараметрыОткрытия.Номенклатура);
	ПараметрыОткрытияФормы.Вставить("Характеристика",      ПараметрыОткрытия.Характеристика);
	ПараметрыОткрытияФормы.Вставить("Серия",               ПараметрыОткрытия.Серия);
	ПараметрыОткрытияФормы.Вставить("ПолныйКодМаркировки", ПараметрыОткрытия.ПолныйКодМаркировки);
	
	Если ПараметрыОткрытия.КодМаркировки <> Неопределено Тогда
		ПараметрыОткрытияФормы.Вставить("КодМаркировки", ПараметрыОткрытия.КодМаркировки);
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС.Форма.ФормаЗаписи",
		ПараметрыОткрытияФормы,
		ВладелецФормы,,,,
		ПараметрыОткрытия.ОповещениеОЗакрытии);
		
КонецПроцедуры

Процедура СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.';
								|en = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.УспешнаяПроверкаНаличияГосИС);
	Исключение
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

Процедура Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	ИменаПараметров        = ОбщегоНазначенияИСКлиентСерверПовтИсп.ИменаПараметровРаботыКлиентаВыборТипаПодписиБСП();
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПараметрыРаботыКлиента[ИменаПараметров.ИмяПараметраПриложения] = ИменаПараметров.ЗначениеПараметраВыборТипаПодписиЗадаетсяПеречислением Тогда
		
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES");
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение, ТипПодписи);
		
	ИначеЕсли ПараметрыРаботыКлиента[ИменаПараметров.ИмяПараметраПриложения] = ИменаПараметров.ЗначениеПараметраВыборТипаПодписиИспользуетКонструктор Тогда
		
		//@skip-check unknown-method-property
		ТипПодписи = МодульЭлектроннаяПодписьКлиент.НовыйТипПодписи(
			ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.БазоваяCAdESBES"));
		
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение, ТипПодписи);
		
	Иначе
		
		МодульЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ВладелецФормы, ПодписатьЗавершение);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет был ли пароль сертификата установлен на время сеанса,
// либо с помощью процедуры УстановитьПарольСертификата,
// либо после успешной операции со включенным флажком Сохранить пароль.
//
// Параметры:
//  СертификатСсылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат,
//                        для которого проверяется наличие пароля.
//
// Возвращаемое значение:
//  Булево - если Ложь, пароль не установлен, иначе установлен.
//
Функция ПарольСертификатаУстановлен(СертификатСсылка) Экспорт
	
	Возврат ЭлектроннаяПодписьКлиент.ПарольСертификатаУстановлен(СертификатСсылка);
	
КонецФункции

Функция ЭтоРасширеннаяВерсияГосИС(Подсистема = Неопределено) Экспорт
	
	Если Подсистема = Неопределено Тогда
		Подсистема = "БазоваяФункциональность";
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(СтрШаблон("ГосИС.%1.Расширенная", Подсистема));
	
КонецФункции

#Область ПрисоединенныеФайлы

// Проверить возможность пользовательского действия по текущей строке
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма в которой происходит проверка
//  Действие           - Строка - дальнейшее действие (группа)
//  ДальнейшееДействие - Произвольный - фактическое дальнейшее действие (исходящий)
// Возвращаемое значение:
//  Булево - Истина если передача данных сообщения допустима
//
Функция ПроверитьВозможностьДействия(Форма, Действие, ДальнейшееДействие) Экспорт
	
	ТекущиеДанные = Форма.Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат Ложь;
	КонецЕсли;
	
	ДальнейшееДействие = Неопределено;
	Для Каждого ЭлементСписка Из ТекущиеДанные.ДальнейшиеДействия Цикл
		Если Форма.Действия[Действие].Найти(ЭлементСписка.Значение) <> Неопределено Тогда
			ДальнейшееДействие = ЭлементСписка.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьПредупреждение(,ОбщегоНазначенияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти