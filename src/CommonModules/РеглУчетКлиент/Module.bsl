
#Область ПрограммныйИнтерфейс

// Открывает в качестве отчета расшифровки анализ счета регламентированного учета.
// 
// Параметры:
// 	Отбор - Структура - Отбор отчета.
// 	АдресНастроекРасшифровки - Строка - Адрес временного хранилища, в котором хранятся данные расшифровки.
//
Процедура ОткрытьОтчетАнализСчета(Отбор, АдресНастроекРасшифровки) Экспорт
	
	//++ Локализация
	ЗаполняемыеНастройки = Новый Структура;
	ЗаполняемыеНастройки.Вставить("Показатели",      Ложь);
	ЗаполняемыеНастройки.Вставить("Группировка",     Истина);
	ЗаполняемыеНастройки.Вставить("Отбор",           Ложь);
	ЗаполняемыеНастройки.Вставить("ВыводимыеДанные", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки",           1);
	ПараметрыФормы.Вставить("АдресНастроек",            АдресНастроекРасшифровки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",  Истина);
	ПараметрыФормы.Вставить("ИДРасшифровки",            "АнализСчета");
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",     ЗаполняемыеНастройки);
	
	ОткрытьФорму("Отчет.АнализСчета.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Дополнительный обработчик для документов, в печатных формах которых используются проводки.
// Проверяет, сформированы ли проводки по документам и предлагает отразить документы в регл. учете, если это не так.
// Вызывает обработчик печати.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Булево - Всегда возвращает Истина
//
Функция ПечатьСПроверкойОтраженияВРеглУчете(ОписаниеКоманды) Экспорт

	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыПечати.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ДокументыДляПроверки = ПараметрыПечати.ОбъектыПечати;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПечать", ЭтотОбъект, ПараметрыПечати);
	
	ДокументыБезПроводок = РеглУчетВызовСервера.ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(ДокументыДляПроверки);
	ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Если ДокументыБезПроводок.Количество() > 0 Тогда
		ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Дополнительный обработчик для документов, в печатных формах которых используются проводки.
// Проверяет, сформированы ли проводки по документам и предлагает отразить документы в регл. учете, если это не так.
// Затем документы выводятся на печать.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Истина
//
Функция ПечатьСРасширеннойПроверкойОтраженияВРеглУчете(ОписаниеКоманды) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыПечати.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ДокументыДляПроверки = ПараметрыПечати.ОбъектыПечати;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПечать", ЭтотОбъект, ПараметрыПечати);
	
	ДокументыБезПроводок = РеглУчетВызовСервера.ПроверитьПраваДоступаОтражениеДокументовВРеглУчетеРасширенный(ДокументыДляПроверки);
	ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Если ДокументыБезПроводок.Количество() > 0 Тогда
		ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработчик расшифровки табличного документа формы отчета.
//
// См. ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	Если ПолноеИмяОтчета = "Отчет.СверкаДанныхОУиБУ" Тогда

		ПараметрыРасшифровки = РеглУчетВызовСервера.ПолучитьПараметрыРасшифровки(ЭтаФорма.ОтчетДанныеРасшифровки, Расшифровка);
		
		ПоляРасшифровки = ПараметрыРасшифровки.ПоляРасшифровки;
		АналитикаСтроки = ПараметрыРасшифровки.АналитикаСтроки;
		
		ИдентификаторПараметраПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
			ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")));
		НастройкаПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
		АналитикаСтроки.Вставить("ПериодОтчета", НастройкаПериод.Значение);
		Для каждого ЭлементОтбора Из ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				АналитикаСтроки.Вставить("ПоказатьТолькоОтклонения", ЭлементОтбора.Использование);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
			
			Если ПолеРасшифровки = "НачальноеСальдо"	ИЛИ ПолеРасшифровки = "КонечноеСальдо"	ИЛИ
				 ПолеРасшифровки = "ОборотДт"			ИЛИ ПолеРасшифровки = "ОборотКт"		ИЛИ
				 ПолеРасшифровки = "НачальныйОстаток"	ИЛИ ПолеРасшифровки = "Приход"			ИЛИ
				 ПолеРасшифровки = "Расход"				ИЛИ ПолеРасшифровки = "КонечныйОстаток"	ИЛИ
				 ПолеРасшифровки = "НачОткл"			ИЛИ ПолеРасшифровки = "КонОткл"			ИЛИ
				 ПолеРасшифровки = "ПриходОткл"			ИЛИ ПолеРасшифровки = "РасходОткл"		Тогда
				 
				СтандартнаяОбработка = Ложь;
				
				Если ЭтаФорма.КлючТекущегоВарианта = "СверкаПоРегистраторам" Тогда
					Возврат;
				КонецЕсли;

				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("КлючВарианта",                     "СверкаПоРегистраторам");
				ПараметрыФормы.Вставить("СформироватьПриОткрытии",          Истина);
				ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",  Ложь);
				ПараметрыФормы.Вставить("РежимРасшифровки",                 Истина);
				
				ПользовательскиеНастройки = РеглУчетВызовСервера.ПараметрыРасшифровки(АналитикаСтроки);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				ОткрытьФорму("Отчет.СверкаДанныхОУиБУ.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализРасходовПриУСН" Тогда
		ПараметрыРасшифровки = РеглУчетВызовСервера.ПараметрыРасшифровкиАнализаРасходовПриУСН(
			Расшифровка, 
			ЭтаФорма.ОтчетДанныеРасшифровки, 
			ЭтаФорма.Отчет.КомпоновщикНастроек,
			КлючТекущегоВарианта);
		
		Если ПараметрыРасшифровки <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Отчет.АнализРасходовПриУСН.ФормаОбъекта", ПараметрыРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ПечатьСПроверкойОтраженияВРеглУчете

Процедура ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеПроцедурыЗавершения)
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если ПараметрыПечати.ДокументыБезПроводок.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Для заполнения в печатной форме счетов учета необходимо, чтобы документ был отражен в регл. учете.
		|Отразить документ в регл. учете перед продолжением печати?';
		|en = 'To fill in GL accounts in the print form, the document should be recorded in compl. accounting.
		|Record the document in compl. accounting before printing?    '");
	Иначе
		ТекстВопроса = НСтр("ru = 'Для заполнения в печатной форме счетов учета необходимо, чтобы документы были отражены в регл. учете.
		|Отразить документы в регл. учете перед продолжением печати?';
		|en = 'To fill in GL accounts in the print form, the documents should be recorded in compl. accounting.
		|Record the documents in local accounting before printing?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаОтраженияВРеглУчетеФормированиеПроводок", ЭтотОбъект, ОписаниеПроцедурыЗавершения);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

Процедура ПроверкаОтраженияВРеглУчетеФормированиеПроводок(РезультатВопроса, ОписаниеПроцедурыЗавершения) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДокументыБезПроводок = РеглУчетВызовСервера.ОтразитьДокументыВРеглУчете(ПараметрыПечати.ДокументыБезПроводок, Истина);
		ОчиститьСообщения();
		Если ДокументыБезПроводок.Количество() = 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось отразить документ в регл. учете.';
															|en = 'Cannot record the document in compl. accounting.'"));
		ИначеЕсли ДокументыБезПроводок.Количество() > 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось отразить часть документов в регл. учете.';
															|en = 'Cannot record some documents in local accounting.'"));
		КонецЕсли;
		ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Иначе
		ПараметрыПечати.Вставить("ДокументыБезПроводок", Новый Массив);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеПроцедурыЗавершения);
	
КонецПроцедуры

Процедура ПродолжитьПечать(Результат, ПараметрыПечати) Экспорт
	
	ОписаниеКоманды = ПараметрыПечати.ОписаниеКоманды;
	ОбъектыПечати = ПараметрыПечати.ОбъектыПечати;
	
	ПередаваемыеПараметрыПечати = Новый Структура;
	ПередаваемыеПараметрыПечати.Вставить("ДокументыБезПроводок", ПараметрыПечати.ДокументыБезПроводок);
	
	Если ОписаниеКоманды.Идентификатор = "КомплектДокументов" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов(ОписаниеКоманды);
	ИначеЕсли ОписаниеКоманды.Идентификатор = "КомплектДокументовСНастройкой" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой(ОписаниеКоманды);
	Иначе
		Если ОписаниеКоманды.СразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ПередаваемыеПараметрыПечати);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ОписаниеКоманды.Форма, ПередаваемыеПараметрыПечати);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- Локализация