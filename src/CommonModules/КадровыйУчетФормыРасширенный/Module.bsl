////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетФормыРасширенный: методы, обслуживающие работу форм кадровых документов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет дополнительные действия при подборе похожих физических лиц.
// 
// Параметры:
//  СтруктураВозврат - Структура
Процедура ПриПодбореСпискаФизЛиц(СтруктураВозврат) Экспорт
	
	СтруктураВозврат.ДоступнаРольСохранениеДанныхЗадвоенныхФизическихЛиц =
		Пользователи.РолиДоступны("СохранениеДанныхЗадвоенныхФизическихЛиц", , Ложь);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗапуститьОтложеннуюОбработкуДанных(ДокументОбъект, РеквизитСотрудник) Экспорт
	
	СотрудникиМассив = Новый Массив;
	Если ДокументОбъект.Метаданные().Реквизиты.Содержит(РеквизитСотрудник) Тогда
		// Реквизит объекта (не табличной части).
		СотрудникиМассив.Добавить(ДокументОбъект[РеквизитСотрудник.Имя]);
	Иначе
		// Реквизит табличной части.
		СотрудникиМассив = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект[РеквизитСотрудник.Родитель().Имя], РеквизитСотрудник.Имя);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ОбновитьСтажиСотрудников(СотрудникиМассив);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		МодульОхранаТрудаФормы.ПослеЗаписиФормыКадровогоДокументаНаСервере(ДокументОбъект, СотрудникиМассив);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаСБронированиемПозиций(УправляемаяФорма, ИмяТаблицы = "Список") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций") Тогда
		Возврат;
	КонецЕсли;
	
	ЖирныйШрифт = Метаданные.ЭлементыСтиля.ВажнаяНадписьШрифт.Значение;
	
	ЭлементУсловногоОформления = УправляемаяФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".БронированиеПозиции");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Проведен");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".БронированиеПозиции");
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ФормаКадровогоДокументаПриСозданииНаСервере(Форма) Экспорт
	
	КадровыйУчетФормыБазовый.ФормаКадровогоДокументаПриСозданииНаСервере(Форма);
	
	Если Не Форма.Параметры.Свойство("Ключ") Или Форма.Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ФиксированныеЗначения = Новый Массив;
		
		МетаданныеДокумента = Форма.Объект.Ссылка.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено И ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
			ФиксированныеЗначения.Добавить("Организация");
		КонецЕсли; 
		
		Если МетаданныеДокумента.Реквизиты.Найти("ПодразделениеПрежнее") <> Неопределено Тогда
			
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.ПодразделениеПрежнее");
			Если ЗначениеЗаполнено(Форма.Объект.ПодразделениеПрежнее) Тогда
				ФиксированныеЗначения.Добавить("Подразделение");
			КонецЕсли; 
			
		КонецЕсли; 
		
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Форма, ЗначенияДляЗаполнения, ФиксированныеЗначения);
		
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = 
			Новый РеквизитФормы("ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", Новый ОписаниеТипов("Булево"));
			
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания();
		
		Форма.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически = НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически 
			И НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание;
																	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеКнопкиРедактироватьФОТ(Форма) Экспорт
	
	КомандаРедактироватьФОТ = Форма.Команды.Найти("РедактироватьФОТ");
	Если КомандаРедактироватьФОТ <> Неопределено Тогда
		Если Форма.ТолькоПросмотр Тогда
			КомандаРедактироватьФОТ.Заголовок = НСтр("ru = 'Показать';
													|en = 'Show'");
			КомандаРедактироватьФОТ.Картинка = БиблиотекаКартинок.ПоказатьДанные;
		Иначе
			КомандаРедактироватьФОТ.Заголовок = НСтр("ru = 'Редактировать';
													|en = 'Edit'");
			КомандаРедактироватьФОТ.Картинка = БиблиотекаКартинок.Изменить;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РазместитьКомандуПроверкиШтатномуРасписанию(Форма) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") Тогда
		
		НастройкиШтатногоРасписания = УправлениеШтатнымРасписанием.НастройкиШтатногоРасписания();
		Если НастройкиШтатногоРасписания.ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически Тогда
			
			КомандаПроверкиСоответствияШтатномуРасписаниюВоВсехДействиях = Истина;
			ЗаголовокКомандыКомандаПроверкиСоответствияШтатномуРасписанию = НСтр("ru = 'Проверить на соответствие штатному расписанию';
																				|en = 'Check for compliance with the headcount '");
			
		Иначе
			
			КомандаПроверкиСоответствияШтатномуРасписаниюВоВсехДействиях = Ложь;
			ЗаголовокКомандыКомандаПроверкиСоответствияШтатномуРасписанию = НСтр("ru = 'Проверить';
																				|en = 'Check'");
			
		КонецЕсли;
		
		КомандаПроверкиСоответствияШтатномуРасписанию = Форма.Команды.Найти("ПроверитьНаСоответствиеШтатномуРасписанию");
		Если КомандаПроверкиСоответствияШтатномуРасписанию <> Неопределено Тогда
			КомандаПроверкиСоответствияШтатномуРасписанию.Заголовок = ЗаголовокКомандыКомандаПроверкиСоответствияШтатномуРасписанию;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаПроверитьНаСоответствиеШтатномуРасписанию",
			"ТолькоВоВсехДействиях",
			КомандаПроверкиСоответствияШтатномуРасписаниюВоВсехДействиях);
		
	КонецЕсли;
	
КонецПроцедуры

Функция КадровыеДанныеСотрудникаДляЗаполненияКадровогоПеревода() Экспорт
	
	Возврат
		"Подразделение,
		|Территория,
		|Должность,
		|ДолжностьПоШтатномуРасписанию,
		|КоличествоСтавок,
		|ГрафикРаботы,
		|Организация,
		|ГоловнаяОрганизация,
		|ВидЗанятости,
		|СпособОтраженияЗарплатыВБухучете,
		|ОтношениеКЕНВД,
		|СтатьяФинансирования,
		|ПКУ,
		|РазрядКатегория,
		|ВидДоговора,
		|ВидСобытия,
		|РабочееМестоПериодРегистрации,
		|ТрудоваяФункция";
	
КонецФункции

Функция ДанныеДляКадровогоПеревода(Сотрудники, ВремяРегистрацииСотрудников, ИсключаемыйРегистратор, ШаблонДляЗаполнения, ПолноеИмяОбъектаМетаданных="Документ.КадровыйПеревод") Экспорт
	
	ДанныеПеревода = Новый Соответствие;
	
	Если ТипЗнч(Сотрудники) = Тип("Массив") Тогда
		СписокСотрудников = Сотрудники;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Отбор = Новый Массив;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "Регистратор", "<>", ИсключаемыйРегистратор);
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	ПоляОтбораПериодическихДанных.Вставить("КадроваяИсторияСотрудников", 	Отбор);
	ПоляОтбораПериодическихДанных.Вставить("ГрафикРаботыСотрудников", 		Отбор);
	ПоляОтбораПериодическихДанных.Вставить("РазрядыКатегорииСотрудников", 	Отбор);
	
	КадровыеДанные = КадровыеДанныеСотрудникаДляЗаполненияКадровогоПеревода();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда 
		МодульДистанционнаяРаботаФормы = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРаботаФормы");
		МодульДистанционнаяРаботаФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(КадровыеДанные, Ложь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
		МодульРабочиеМестаОхраныТрудаФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(КадровыеДанные);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда 
		МодульТрудоустройствоПоКвотамФормы = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотамФормы");
		МодульТрудоустройствоПоКвотамФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(КадровыеДанные);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииСотрудников.Получить(Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Период,
		|	СотрудникиДаты.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.*
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	ОписательВременныхТаблиц = КонтрактыДоговорыСотрудников.ОписательВременныхТаблицДляСоздатьВТСведенияОКонтрактахДоговорахСотрудников(Запрос.МенеджерВременныхТаблиц);
	КонтрактыДоговорыСотрудников.СоздатьВТСведенияОКонтрактахДоговорахСотрудников(Истина, ОписательВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОКонтрактахДоговорахСотрудников.*
		|ИЗ
		|	ВТСведенияОКонтрактахДоговорахСотрудников КАК СведенияОКонтрактахДоговорахСотрудников";
	
	ДанныеКонтрактов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаДанныхСотрудника Из ДанныеСотрудников Цикл
		
		СтруктураДанных = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным(ПолноеИмяОбъектаМетаданных);
		Если СтруктураДанных.Свойство("ДатаНачала") Тогда 
			СтруктураДанных.ДатаНачала = ВремяРегистрацииСотрудников.Получить(СтрокаДанныхСотрудника.Сотрудник);
		ИначеЕсли СтруктураДанных.Свойство("ДатаПеревода") Тогда
			СтруктураДанных.ДатаПеревода = ВремяРегистрацииСотрудников.Получить(СтрокаДанныхСотрудника.Сотрудник);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаДанныхСотрудника);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
			МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
			МодульРабочиеМестаОхраныТрудаФормы.УстановитьТекущееРабочееМесто(СтруктураДанных, СтрокаДанныхСотрудника, "РабочееМесто");
		КонецЕсли;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
			МодульТрудоустройствоПоКвотамФормы = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотамФормы");
			МодульТрудоустройствоПоКвотамФормы.УстановитьТекущиеЗначенияРеквизитовФормыКадровогоПеревода(СтруктураДанных, СтрокаДанныхСотрудника);
		КонецЕсли;
			
		СтрокиКонтракта = ДанныеКонтрактов.НайтиСтроки(Новый Структура("Сотрудник,Период", СтрокаДанныхСотрудника.Сотрудник, СтрокаДанныхСотрудника.Период));
		Если СтрокиКонтракта.Количество() > 0 Тогда
			
			ИсключаемыеИзЗаполнения = "";
			Если СтруктураДанных.Свойство("ДатаНачала") Тогда
				ИсключаемыеИзЗаполнения = "ДатаНачала";
			КонецЕсли;
			
			Если СтруктураДанных.Свойство("ДатаОкончания") Тогда
				ИсключаемыеИзЗаполнения = ИсключаемыеИзЗаполнения + ",ДатаОкончания";
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокиКонтракта[0], , ИсключаемыеИзЗаполнения);
			
			Если СтруктураДанных.Свойство("ДатаОкончания")
				И СтруктураДанных.Свойство("ДатаЗавершенияТрудовогоДоговора") Тогда
				СтруктураДанных.ДатаЗавершенияТрудовогоДоговора = СтрокиКонтракта[0].ДатаОкончания;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДанных.Организация = СтрокаДанныхСотрудника.ГоловнаяОрганизация;
		СтруктураДанных.ОбособленноеПодразделение = СтрокаДанныхСотрудника.Организация;
		
		Если ШаблонДляЗаполнения <> Неопределено И СтруктураДанных.Свойство("ДатаОкончания") Тогда
			СтруктураДанных.ДатаОкончания = ШаблонДляЗаполнения.ДатаОкончания;
		КонецЕсли;
		
		ДанныеПеревода.Вставить(СтрокаДанныхСотрудника.Сотрудник, СтруктураДанных);
		
		СтрокаТаблицы = ТаблицаСотрудников.Добавить();
		СтрокаТаблицы.Сотрудник = СтрокаДанныхСотрудника.Сотрудник;
		СтрокаТаблицы.Организация = СтрокаДанныхСотрудника.Организация;
		
		Если СтруктураДанных.Свойство("ДатаНачала") Тогда 
			СтрокаТаблицы.Период = СтруктураДанных.ДатаНачала;
		ИначеЕсли СтруктураДанных.Свойство("ДатаПеревода") Тогда
			СтрокаТаблицы.Период = СтруктураДанных.ДатаПеревода;
		КонецЕсли;
		
		// Ежегодные отпуска
		Если СтруктураДанных.ТабличныеЧасти.Свойство("ЕжегодныеОтпуска") Тогда
			
			ИменаРеквизитовЕжегодныеОтпуска = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["ЕжегодныеОтпуска"];
			
			ДополнятьДанныеПозицииРабочимМестом = Ложь;
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
				МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
				МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
				ДополнятьДанныеПозицииРабочимМестом = МодульРабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются();
			КонецЕсли;
			
			ЕжегодныеОтпуска = Новый ТаблицаЗначений;
			ЕжегодныеОтпуска.Колонки.Добавить("ВидЕжегодногоОтпуска");
			ЕжегодныеОтпуска.Колонки.Добавить("ПриоритетВидаОтпуска");
			ЕжегодныеОтпуска.Колонки.Добавить("КоличествоДнейВГод");
			ЕжегодныеОтпуска.Колонки.Добавить("ДействующийОтпуск");
			ЕжегодныеОтпуска.Колонки.Добавить("Действие");
			ЕжегодныеОтпуска.Колонки.Добавить("ТекущееКоличествоДнейВГод");
			ЕжегодныеОтпуска.Колонки.Добавить("Комментарий");
			
			ДанныеДокумента = ОстаткиОтпусков.ОписаниеПараметровДанныхКадровогоДокумента();
			ДанныеДокумента.Регистратор = ИсключаемыйРегистратор;
			ДанныеДокумента.Сотрудник = СтрокаДанныхСотрудника.Сотрудник;
			ДанныеДокумента.ДатаСобытия = СтрокаДанныхСотрудника.Период;
			ДанныеДокумента.Вставить("ПериодПредыдущихЗначений", СтрокаДанныхСотрудника.РабочееМестоПериодРегистрации);
			
			ДанныеНовойПозиции = ОстаткиОтпусков.ОписаниеПараметровДанныхПозиции();
			ДанныеНовойПозиции.ДолжностьПоШтатномуРасписанию = СтрокаДанныхСотрудника.ДолжностьПоШтатномуРасписанию;
			ДанныеНовойПозиции.Подразделение = СтрокаДанныхСотрудника.Подразделение;
			ДанныеНовойПозиции.Должность = СтрокаДанныхСотрудника.Должность;
			ДанныеНовойПозиции.Территория = СтрокаДанныхСотрудника.Территория;
			
			Если ДополнятьДанныеПозицииРабочимМестом Тогда
				
				Объект = Новый Структура;
				Объект.Вставить("Организация", СтрокаДанныхСотрудника.Организация);
				Объект.Вставить("РабочееМесто", СтрокаДанныхСотрудника.РабочееМестоОхраныТруда);
				
				ОбъектВместоФормы = Новый Структура;
				ОбъектВместоФормы.Вставить("Объект", Объект);
				
				МодульОхранаТрудаФормы.ДополнитьДанныеПозицииРабочимМестом(ОбъектВместоФормы, ДанныеНовойПозиции);
			КонецЕсли;
			
			ОстаткиОтпусков.ЗаполнитьПоложеннымиПравамиСотрудника(ЕжегодныеОтпуска, ДанныеДокумента, ДанныеНовойПозиции);
			Для каждого ДанныеОтпуска Из ЕжегодныеОтпуска Цикл
				СтруктураСтрокиОтпуска = Новый Структура(ИменаРеквизитовЕжегодныеОтпуска);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиОтпуска, ДанныеОтпуска);
				СтруктураДанных.ТабличныеЧасти.ЕжегодныеОтпуска.Добавить(СтруктураСтрокиОтпуска);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОбАвансах = РасчетЗарплатыРасширенный.АвансыСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор);
	Для каждого ДанныеОбАвансе Из ДанныеОбАвансах Цикл
		
		СтруктураДанных = ДанныеПеревода.Получить(ДанныеОбАвансе.Сотрудник);
		
		Если СтруктураДанных.Свойство("Аванс") Тогда
			СтруктураДанных.Аванс				= ДанныеОбАвансе.Аванс;
			СтруктураДанных.СпособРасчетаАванса	= ДанныеОбАвансе.СпособРасчетаАванса
		КонецЕсли;
	КонецЦикла;
	
	// Плановые начисления
	ДанныеНачислений = ЗарплатаКадрыРасширенный.ДействующиеНачисленияСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор, , , Истина);
	Для каждого ДанныеНачисленийСотрудника Из ДанныеНачислений Цикл
		
		ИдентификаторСтрокиВидаРасчета = 1;
		
		СтруктураДанных = ДанныеПеревода.Получить(ДанныеНачисленийСотрудника.Ключ);
		ИменаРеквизитовНачислений = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["Начисления"];
		ИменаРеквизитовПоказателей = СтруктураДанных.ТабличныеЧасти.ОписаниеТабличныхЧастей["Показатели"];
		
		Если ДанныеНачисленийСотрудника.Значение.Свойство("Начисления") Тогда
			
			Для каждого ОписаниеНачисления Из ДанныеНачисленийСотрудника.Значение.Начисления Цикл
				
				СтруктураСтроки = Новый Структура(ИменаРеквизитовНачислений);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, ОписаниеНачисления);
				СтруктураСтроки.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
				СтруктураДанных.ТабличныеЧасти.Начисления.Добавить(СтруктураСтроки);
				
				Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
					
					СтруктураСтрокиПоказателя = Новый Структура(ИменаРеквизитовПоказателей);
					ЗаполнитьЗначенияСвойств(СтруктураСтрокиПоказателя, ОписаниеПоказателя);
					СтруктураСтрокиПоказателя.ИдентификаторСтрокиВидаРасчета = СтруктураСтроки.ИдентификаторСтрокиВидаРасчета;
					
					СтруктураДанных.ТабличныеЧасти.Показатели.Добавить(СтруктураСтрокиПоказателя);
					
				КонецЦикла;
				
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДанныеНачисленийСотрудника.Значение.Свойство("ДополнительныеПоказатели") Тогда
			
			Для каждого ОписаниеПоказателя Из ДанныеНачисленийСотрудника.Значение.ДополнительныеПоказатели Цикл
				
				СтруктураСтрокиПоказателя = Новый Структура(ИменаРеквизитовПоказателей);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиПоказателя, ОписаниеПоказателя);
				СтруктураСтрокиПоказателя.ИдентификаторСтрокиВидаРасчета = 0;
				
				СтруктураДанных.ТабличныеЧасти.Показатели.Добавить(СтруктураСтрокиПоказателя);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ЗаполнитьДействующиеЛьготыСотрудников(ТаблицаСотрудников, ДанныеПеревода, ИсключаемыйРегистратор);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплатаФормы = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		МодульУправленческаяЗарплатаФормы.ДанныеНачисленийДляКадровогоПеревода(ДанныеПеревода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеПеревода;
	
КонецФункции

Процедура ЗаполнитьОтсутствияПоДругимМестамРаботы(Форма, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Форма.ОтсутствияПоДругимМестамРаботы.Очистить();
	
	Если Форма.ДругиеСотрудникиФизическогоЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДругиеСотрудники = Новый Массив;
	Для каждого СотрудникФизическогоЛица Из Форма.ДругиеСотрудникиФизическогоЛица  Цикл
		ДругиеСотрудники.Добавить(СотрудникФизическогоЛица.Сотрудник);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчетРасширенный.СоздатьВТОтсутствияСотрудниковВПериоде(Запрос.МенеджерВременныхТаблиц, ДругиеСотрудники, НачалоПериода, ОкончаниеПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтсутствияСотрудниковВПериоде.Ссылка,
		|	ОтсутствияСотрудниковВПериоде.Организация,
		|	ОтсутствияСотрудниковВПериоде.Сотрудник,
		|	ОтсутствияСотрудниковВПериоде.Должность,
		|	ОтсутствияСотрудниковВПериоде.ДатаНачала,
		|	ОтсутствияСотрудниковВПериоде.ДатаОкончания
		|ИЗ
		|	ВТОтсутствияСотрудниковВПериоде КАК ОтсутствияСотрудниковВПериоде";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Форма.ОтсутствияПоДругимМестамРаботы.Загрузить(Результат.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеДолжностиВФорме(Форма, ДатаАктуальности, Должность, ДолжностьПоШтатномуРасписанию, ТекущаяДолжностьПоШтатномуРасписанию = Неопределено) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") Тогда
		
		СписокДолжностей = Новый Массив;
		Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
			СписокДолжностей.Добавить(ДолжностьПоШтатномуРасписанию);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяДолжностьПоШтатномуРасписанию) Тогда
			СписокДолжностей.Добавить(ТекущаяДолжностьПоШтатномуРасписанию);
		КонецЕсли;
		
		ДатаСведений = ДатаАктуальности;
		
		ДатыУтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокДолжностей, "ДатаУтверждения");
		Для Каждого ДанныеДаты Из ДатыУтверждения Цикл
			
			ДатаУтверждения = ДанныеДаты.Значение;
			Если ДатаСведений < ДатаУтверждения Тогда
				ДатаСведений = ДатаУтверждения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокДолжностей.Количество() > 0 Тогда
			ДанныеДолжности = УправлениеШтатнымРасписанием.ДанныеПозицийШтатногоРасписания(Истина, СписокДолжностей, ДатаСведений);
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Должность) Тогда
			
			СписокДолжностей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Должность);
			ДанныеДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокДолжностей,
				"ВыплачиваетсяНадбавкаЗаВредность,ПроцентНадбавкиЗаВредность,ТарифнаяСетка,РазрядКатегория,ТарифнаяСеткаНадбавки,РазрядКатегорияНадбавки,ТрудоваяФункция");
			
		КонецЕсли;
		
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		МодульОхранаТрудаФормы.ПереопределитьДанныеДолжностиВФорме(Форма, ДанныеДолжности, ТекущаяДолжностьПоШтатномуРасписанию);
	КонецЕсли;
	
	Если ДанныеДолжности = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ДанныеДолжности", Неопределено);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ДанныеДолжности", Новый ФиксированноеСоответствие(ДанныеДолжности));
	КонецЕсли;
	
КонецПроцедуры

Функция ДругиеСотрудникиФизическогоЛица(Знач ФизическоеЛицо, Знач Организация, Знач Сотрудник, Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	ДанныеДругихСотрудниковФизическогоЛица = Новый Массив;
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И ЗначениеЗаполнено(Организация) Тогда
		
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			
			ДатаНачала = ТекущаяДатаСеанса();
			ДатаОкончания = ДатаНачала;
			
		КонецЕсли;
		
		ДругиеСотрудникиФизическогоЛица = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, Организация, Сотрудник, ДатаНачала, ДатаОкончания);
		
		Если ДругиеСотрудникиФизическогоЛица.Количество() > 0  Тогда
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДругиеСотрудникиФизическогоЛица, "Организация");
			
			Для каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
				ДанныеДругогоСотрудникаФизическогоЛица = Новый Структура("Сотрудник, Организация", КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.Организация);
				ДанныеДругихСотрудниковФизическогоЛица.Добавить(Новый ФиксированнаяСтруктура(ДанныеДругогоСотрудникаФизическогоЛица));
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ДанныеДругихСотрудниковФизическогоЛица);
	
КонецФункции

#КонецОбласти

