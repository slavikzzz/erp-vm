#Область СлужебныеПроцедурыИФункции

#Область ДанныеЭЛН

Функция ДанныеЭЛНСКэшем(СтрокаXMLИлиСтруктураDOM, Кэш) Экспорт
	ДанныеЭЛН = Кэш["ДанныеЭЛН"];
	Если ДанныеЭЛН = Неопределено Тогда
		ДанныеЭЛН = ДанныеЭЛНИзXML(СтрокаXMLИлиСтруктураDOM);
		Кэш.Вставить("ДанныеЭЛН", ДанныеЭЛН);
	КонецЕсли;
	Возврат ДанныеЭЛН;
КонецФункции

Функция ДанныеЭЛНИзXML(ДанныеXML) Экспорт
	ДанныеЭЛН = ПустыеДанныеЭЛН();
	Если ТипЗнч(ДанныеXML) = Тип("Строка") Или ТипЗнч(ДанныеXML) = Тип("ДвоичныеДанные") Тогда
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ДанныеXML);
	Иначе
		СтруктураDOM = ДанныеXML;
	КонецЕсли;
	
	ДанныеЭЛН.ТекстОшибки = ТекстСообщенияФСС(СтруктураDOM);
	
	УзелОтвета = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "fileOperationsLnUserGetPrivateLNDataOut");
	УзелКодаОтвета = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "*[local-name() = 'status']", УзелОтвета);
	Если УзелКодаОтвета = Неопределено Тогда
		УзелКодаОтвета = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "*[local-name() = 'STATUS']", УзелОтвета);
	КонецЕсли;
	КодОтвета = ?(УзелКодаОтвета = Неопределено, "", СокрЛП(УзелКодаОтвета.ТекстовоеСодержимое));
	Если КодОтвета <> "1" И ЗначениеЗаполнено(ДанныеЭЛН.ТекстОшибки) Тогда
		ДанныеЭЛН.Успех = Ложь;
		Возврат ДанныеЭЛН;
	КонецЕсли;
	
	Если ПрочитатьДанныеЭЛНИзXML_2022(ДанныеЭЛН, СтруктураDOM, "changeElnNotice")
		Или ПрочитатьДанныеЭЛНИзXML_2022(ДанныеЭЛН, СтруктураDOM, "responseRow") Тогда
		ДанныеЭЛН.АктуальныйФормат = Истина;
	ИначеЕсли ПрочитатьДанныеЭЛНИзXML_2019(ДанныеЭЛН, СтруктураDOM, "ROW") Тогда
		ДанныеЭЛН.АктуальныйФормат = Ложь; // Отключается проверка заполнения даты рождения родственника.
	Иначе
		ДобавитьСтрокуВНачало(ДанныеЭЛН.ТекстОшибки, НСтр("ru = 'В xml ЭЛН не найден узел ""responseRow"" или ""changeElnNotice"".';
															|en = 'In the ESLR xml, the ""responseRow"" or ""changeElnNotice"" node is not found.'"));
		ДанныеЭЛН.Успех = Ложь;
		Возврат ДанныеЭЛН;
	КонецЕсли;
	
	Возврат ДанныеЭЛН;
КонецФункции

Функция ПустыеДанныеЭЛН() Экспорт
	ИменаПолейРезультата =
	"Успех,
	|ТекстОшибки,
	|АктуальныйФормат,
	|НомерЛН,
	|СНИЛС,
	|Фамилия,
	|Имя,
	|Отчество,
	|ДатаРождения,
	|СтатусЭЛНВФСС,
	|ДатаНачала,
	|ДатаОкончания,
	|ЯвляетсяПродолжениемБолезни,
	|НомерПервичногоЛН,
	|ПредоставленДубликатЛН,
	|НомерЗаменяемогоЛН,
	|ДатаВыдачи,
	|Хеш,
	|НаименованиеМедицинскойОрганизации,
	|АдресМедицинскойОрганизации,
	|ОГРНМедицинскойОрганизации,
	|КодПричиныНетрудоспособности,
	|ДополнительныйКодПричиныНетрудоспособности,
	|ВторойКодПричиныНетрудоспособности,
	|ДатаИзмененияКодаПричиныНетрудоспособности,
	|ДатаОкончанияПутевки,
	|НомерПутевки,
	|ОГРНСанатория,
	|ПериодНахожденияВСтационареСРебенкомС,
	|ПериодНахожденияВСтационареСРебенкомПо,
	|ДатаНаправленияВБюроМСЭ,
	|ДатаРегистрацииДокументовМСЭ,
	|ДатаОсвидетельствованияМСЭ,
	|ПериодыНетрудоспособности,
	|ПериодыЛеченияРодственников,
	|НовыйСтатусНетрудоспособного,
	|ДатаНовыйСтатусНетрудоспособного,
	|ПриступитьКРаботеС,
	|НомерЛисткаПродолжения,
	|ГруппаИнвалидности,
	|УтратаТрудоспобности,
	|ПоставленаНаУчетВРанниеСрокиБеременности,
	|ДатаНарушенияРежима,
	|КодНарушенияРежима,
	|ПрерывистыйМетод";
	ДанныеЭЛН = Новый Структура(ИменаПолейРезультата);
	ДанныеЭЛН.Успех = Истина;
	ДанныеЭЛН.ПериодыЛеченияРодственников = ПустаяТаблицаПериодовЛеченияРодственников();
	ДанныеЭЛН.ПериодыНетрудоспособности = ПустаяТаблицаПериодовНетрудоспособности();
	Возврат ДанныеЭЛН;
КонецФункции

Функция ПустаяТаблицаПериодовНетрудоспособности() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаНачала",              Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаОкончания",           Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ВрачФИО",                 Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВрачДолжность",           Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПредседательВКФИО",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПредседательВКДолжность", Новый ОписаниеТипов("Строка"));
	Возврат Результат;
КонецФункции

Функция ПустаяТаблицаПериодовЛеченияРодственников() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ФИО",            Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Фамилия",        Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Имя",            Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отчество",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСвязи",       Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаРождения",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ВозрастЛет",     ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("ВозрастМесяцев", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	Результат.Колонки.Добавить("СНИЛС",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодПричины",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипЛечения",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("РежимЛечения",   Новый ОписаниеТипов("ПеречислениеСсылка.РежимыЛечения"));
	Результат.Колонки.Добавить("СлучайУхода",    Новый ОписаниеТипов("ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми"));
	Результат.Колонки.Добавить("ДатаНачала",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ДатаОкончания",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("РодственникСсылка");
	Возврат Результат;
КонецФункции

Функция ДатаНачалаСобытия(ДанныеЭЛН, ПредполагаемаяГоловнаяОрганизация = Неопределено) Экспорт
	Если ДанныеЭЛН.Свойство("ДатаНачалаСобытия") Тогда
		Возврат ДанныеЭЛН.ДатаНачалаСобытия;
	КонецЕсли;
	ДатаНачалаСобытия = '00010101';
	Если ДанныеЭЛН.ЯвляетсяПродолжениемБолезни
		И ЗначениеЗаполнено(ДанныеЭЛН.НомерПервичногоЛН) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОбЭЛН.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	СведенияОбЭЛН.ДатаНачалаСобытия КАК ДатаНачалаСобытия
		|ИЗ
		|	РегистрСведений.СведенияОбЭЛН КАК СведенияОбЭЛН
		|ГДЕ
		|	СведенияОбЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН";
		Запрос.УстановитьПараметр("НомерЛН", ДанныеЭЛН.НомерПервичногоЛН);
		УстановитьПривилегированныйРежим(Истина);
		Таблица = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		// Предпочтение отдается дате начала события по предполагаемой головной организации.
		Если ЗначениеЗаполнено(ПредполагаемаяГоловнаяОрганизация) Тогда
			СтрокаТаблицы = Таблица.Найти(ПредполагаемаяГоловнаяОрганизация, "ГоловнаяОрганизация");
			Если СтрокаТаблицы <> Неопределено Тогда
				ДатаНачалаСобытия = СтрокаТаблицы.ДатаНачалаСобытия;
			КонецЕсли;
		КонецЕсли;
		// По всем местам работы дата начала события должна совпадать.
		Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаСобытия) Тогда
					ДатаНачалаСобытия = СтрокаТаблицы.ДатаНачалаСобытия;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Поиск среди бумажных больничных.
		Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) И ЗначениеЗаполнено(ПредполагаемаяГоловнаяОрганизация) Тогда
			ФизическоеЛицо = ФизическоеЛицо(ДанныеЭЛН);
			Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
				ИменаПолей = "ДатаНачалаСобытия";
				Отбор = Новый Структура;
				Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо(ДанныеЭЛН));
				Отбор.Вставить("Проведен",       Истина);
				ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
					ДанныеЭЛН.НомерПервичногоЛН,
					ПредполагаемаяГоловнаяОрганизация,
					Отбор,
					ИменаПолей);
				Если ЗначенияРеквизитов = Неопределено Тогда
					Отбор.Удалить("Проведен");
					ЗначенияРеквизитов = Документы.БольничныйЛист.ПоследнийДокументВЦепочкеИсправлений(
						ДанныеЭЛН.НомерПервичногоЛН,
						ПредполагаемаяГоловнаяОрганизация,
						Отбор,
						ИменаПолей);
				КонецЕсли;
				Если ЗначенияРеквизитов <> Неопределено Тогда
					ДатаНачалаСобытия = ЗначенияРеквизитов.ДатаНачалаСобытия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Или ДатаНачалаСобытия > ДанныеЭЛН.ДатаНачала Тогда
		ДатаНачалаСобытия = ДанныеЭЛН.ДатаНачала;
	КонецЕсли;
	ДанныеЭЛН.Вставить("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Возврат ДатаНачалаСобытия;
КонецФункции

Функция ФизическоеЛицо(ДанныеЭЛН) Экспорт
	Если ДанныеЭЛН.Свойство("ФизическоеЛицо") Тогда
		Возврат ДанныеЭЛН.ФизическоеЛицо;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеЭЛН.СНИЛС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(
		ДанныеЭЛН.СНИЛС,
		ДанныеЭЛН.Фамилия,
		ДанныеЭЛН.Имя,
		ДанныеЭЛН.Отчество);
	ДанныеЭЛН.Вставить("ФизическоеЛицо", РезультатПоиска.ФизическоеЛицо);
	Возврат ДанныеЭЛН.ФизическоеЛицо;
КонецФункции

Функция КадровыеДанныеСотрудника(ДанныеЭЛН, ГоловнаяОрганизация, ПредполагаемаяОрганизация = Неопределено) Экспорт
	Если ДанныеЭЛН.Свойство("КадровыеДанныеСотрудника") Тогда
		Возврат ДанныеЭЛН.КадровыеДанныеСотрудника;
	КонецЕсли;
	ФизическоеЛицо = ФизическоеЛицо(ДанныеЭЛН);
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ДатаНачалаСобытия = ДатаНачалаСобытия(ДанныеЭЛН, ГоловнаяОрганизация);
	Иначе
		ДатаНачалаСобытия = Неопределено;
	КонецЕсли;
	Результат = КадровыеДанныеСотрудникаБезКэша(ФизическоеЛицо, ДатаНачалаСобытия, ГоловнаяОрганизация, ПредполагаемаяОрганизация);
	ДанныеЭЛН.Вставить("КадровыеДанныеСотрудника", Результат);
	Возврат Результат;
КонецФункции

Функция КадровыеДанныеСотрудникаБезКэша(ФизическоеЛицо, ДатаНачалаСобытия, ГоловнаяОрганизация, ПредполагаемаяОрганизация = Неопределено) Экспорт
	КадровыеПоля = "Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация, Организация, ДатаУвольнения, ВидЗанятости";
	
	// Результат содержит все поля кадровых данных, плюс флажок "Успех" и строку "ТекстОшибки".
	Результат = Новый Структура(КадровыеПоля);
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ЕстьПравоПросмотраОрганизации", Истина);
	Результат.Вставить("ТекстОшибки", "");
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить физическое лицо ЭЛН';
									|en = 'Cannot get an ESLR person'");
		Возврат Результат;
	КонецЕсли;
	Результат.ФизическоеЛицо      = ФизическоеЛицо;
	Результат.ГоловнаяОрганизация = ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить дату начала события ЭЛН';
									|en = 'Cannot get a start date of the ESLR event'");
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// 255-ФЗ, Глава 2, Статья 5, абзац 2.
	// Работодатель обязан оплатить больничный лист бывшему работнику, если соблюдены 2 условия:
	// - Период временной нетрудоспособности наступил в течение 30 дней после увольнения;
	// - Бывший работник предоставил больничный лист работодателю в течение полугода после увольнения.
	НачалоПериода = ДобавитьМесяц(ДатаНачалаСобытия, -6);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолученияСотрудников.НачалоПериода       = НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода    = ДатаНачалаСобытия;
	ПараметрыПолученияСотрудников.КадровыеДанные      = КадровыеПоля;
	ПараметрыПолученияСотрудников.Организация         = ГоловнаяОрганизация;
	ПараметрыПолученияСотрудников.ОтбиратьПоГоловнойОрганизации = Истина;
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияСотрудников);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|				ТОГДА &МаксимальнаяДата
	|			ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|		КОНЕЦ) КАК ДатаУвольненияФакт,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ ВТДатыУвольненияИзОрганизаций
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	(СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|			ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &НачалоПериода)
	|	И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ИЛИ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизации.ГоловнаяОрганизация,
	|	СотрудникиОрганизации.Организация,
	|	СотрудникиОрганизации.ВидЗанятости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыУвольненияИзОрганизаций.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДатыУвольненияИзОрганизаций.Организация КАК Организация,
	|	ДатыУвольненияИзОрганизаций.ВидЗанятости КАК ВидЗанятости,
	|	ВЫБОР
	|		КОГДА ДатыУвольненияИзОрганизаций.Организация В (&ДоступныеФилиалы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПравоПросмотраОрганизации,
	|	ВЫБОР
	|		КОГДА ДатыУвольненияИзОрганизаций.ДатаУвольненияФакт >= &ДатаНачалаСобытия
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Работает,
	|	ДатыУвольненияИзОрганизаций.ДатаУвольненияФакт КАК ДатаУвольненияФакт,
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник
	|ИЗ
	|	ВТДатыУвольненияИзОрганизаций КАК ДатыУвольненияИзОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО ДатыУвольненияИзОрганизаций.Организация = СотрудникиОрганизации.Организация
	|			И ДатыУвольненияИзОрганизаций.ВидЗанятости = СотрудникиОрганизации.ВидЗанятости
	|			И (ВЫБОР
	|				КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|			КОНЕЦ = ДатыУвольненияИзОрганизаций.ДатаУвольненияФакт)";
	
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("ПустаяДата",        '00010101');
	Запрос.УстановитьПараметр("МаксимальнаяДата",  '39991231235959');
	
	ДоступныеФилиалы = ЗарплатаКадры.ДоступныеОрганизации().Филиалы;
	Если ДоступныеФилиалы = Неопределено Тогда
		// Полные права.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатыУвольненияИзОрганизаций.Организация В (&ДоступныеФилиалы)", "ИСТИНА");
	Иначе
		// Не полные права.
		Запрос.УстановитьПараметр("ДоступныеФилиалы", ДоступныеФилиалы);
	КонецЕсли;
	
	ВсеОрганизации = Запрос.Выполнить().Выгрузить();
	Если ВсеОрганизации.Найти(Истина, "Работает") <> Неопределено
		И ВсеОрганизации.Найти(Ложь, "Работает") <> Неопределено Тогда
		ПодходящиеОрганизации = ВсеОрганизации.Скопировать(Новый Структура("Работает", Истина));
	Иначе
		ПодходящиеОрганизации = ВсеОрганизации;
	КонецЕсли;
	
	ОкончаниеПериодаГПХ = КонецДня(ДатаНачалаСобытия);
	НачалоПериодаГПХ = НачалоДня(ДобавитьМесяц(ДатаНачалаСобытия, -1));
	
	КоличествоПодходящих = ПодходящиеОрганизации.Количество();
	Если КоличествоПодходящих = 0 Тогда
		КадровыеДанныеГПХ = КадровыеДанныеГПХ(
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			НачалоПериодаГПХ,
			ОкончаниеПериодаГПХ,
			ПредполагаемаяОрганизация);
		Если ЗначениеЗаполнено(КадровыеДанныеГПХ.Сотрудник) Тогда
			ЗаполнитьКадровыеДанныеПоГПХ(Результат, КадровыеДанныеГПХ, ДоступныеФилиалы);
		Иначе
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сотрудник ""%1"" на %2 не принят на работу.';
					|en = 'Employee ""%1"" is not hired as of ""%2"".'"),
				ФизическоеЛицо,
				Формат(ДатаНачалаСобытия, "ДЛФ=D"));
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Если КоличествоПодходящих = 1 Тогда
		КадровыеДанныеСотрудника = ПодходящиеОрганизации[0];
	Иначе
		Если ЗначениеЗаполнено(ПредполагаемаяОрганизация) Тогда
			КадровыеДанныеСотрудника = ПодходящиеОрганизации.Найти(ПредполагаемаяОрганизация, "Организация");
		Иначе
			КадровыеДанныеСотрудника = Неопределено;
		КонецЕсли;
		Если КадровыеДанныеСотрудника = Неопределено Тогда
			ПодходящиеОрганизации.Сортировать("ДатаУвольненияФакт Убыв");
			КадровыеДанныеСотрудника = ПодходящиеОрганизации[0];
			
			ПредставлениеОрганизаций = ПодходящиеОрганизации.ВыгрузитьКолонку("Организация");
			Если ДоступныеФилиалы <> Неопределено Тогда
				// Не полные права.
				ВГраница = ПредставлениеОрганизаций.ВГраница();
				Для Индекс = 0 По ВГраница Цикл
					Если ДоступныеФилиалы.Найти(ПредставлениеОрганизаций[Индекс]) = Неопределено Тогда
						ПредставлениеОрганизаций[Индекс] = НСтр("ru = '<Недостаточно прав>';
																|en = '<Insufficient rights>'");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Требуется выбрать организацию, т.к. сотрудник ""%1"" на %2 работает в нескольких организациях: %3.';
					|en = 'Select a company as employee ""%1"" works for several companies (%3) as of ""%2"".'"),
				ФизическоеЛицо,
				Формат(ДатаНачалаСобытия, "ДЛФ=D"),
				СтрСоединить(ПредставлениеОрганизаций, ", "));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, КадровыеДанныеСотрудника);
	Результат.ДатаУвольнения = КадровыеДанныеСотрудника.ДатаУвольненияФакт;
	
	Если Результат.ДатаУвольнения < НачалоПериодаГПХ Тогда
		КадровыеДанныеГПХ = КадровыеДанныеГПХ(
			ГоловнаяОрганизация,
			ФизическоеЛицо,
			НачалоПериодаГПХ,
			ОкончаниеПериодаГПХ,
			ПредполагаемаяОрганизация);
		Если ЗначениеЗаполнено(КадровыеДанныеГПХ.Сотрудник)
			И КадровыеДанныеГПХ.ДатаОкончания > Результат.ДатаУвольнения Тогда
			ЗаполнитьКадровыеДанныеПоГПХ(Результат, КадровыеДанныеГПХ, ДоступныеФилиалы);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат.ЕстьПравоПросмотраОрганизации Тогда
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав для загрузки ЭЛН сотрудника ""%1"" организации ""%2"".';
				|en = 'Insufficient rights to import ESLR of employee ""%1"" in company ""%2"".'"),
			ФизическоеЛицо,
			Результат.Организация);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Возврат Результат;
КонецФункции

Функция КадровыеДанныеГПХ(ГоловнаяОрганизация, ФизическоеЛицо, НачалоПериода, ОкончаниеПериода, ПредполагаемаяОрганизация = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыГПХ.Регистратор КАК Регистратор,
	|	ДоговорыГПХ.НомерСтроки КАК НомерСтроки,
	|	ДоговорыГПХ.Активность КАК Активность,
	|	ДоговорыГПХ.Организация КАК Организация,
	|	ЕСТЬNULL(Страхователи.ОтчитывающаясяОрганизация, ДоговорыГПХ.Организация) КАК Страхователь,
	|	ДоговорыГПХ.Сотрудник КАК Сотрудник,
	|	ДоговорыГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДоговорыГПХ.ДокументОснование КАК ДокументОснование,
	|	ДоговорыГПХ.ДатаНачала КАК ДатаНачала,
	|	ДоговорыГПХ.ДатаОкончания КАК ДатаОкончания,
	|	ДоговорыГПХ.Подразделение КАК Подразделение,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ДоговорыГПХ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДоговорыГПХ.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетСтрахователей
	|		ПО (ВестиУчетСтрахователей.Значение = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК Страхователи
	|		ПО ДоговорыГПХ.Организация = Страхователи.Организация
	|			И (ВестиУчетСтрахователей.Значение = ИСТИНА)
	|ГДЕ
	|	ДоговорыГПХ.ФизическоеЛицо = &ФизическоеЛицо
	|	И ДоговорыГПХ.ДатаОкончания >= &НачалоПериода
	|	И ДоговорыГПХ.ДатаНачала <= &ОкончаниеПериода
	|	И Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыГПХ.Организация = &ПредполагаемаяОрганизация УБЫВ,
	|	ДатаОкончания УБЫВ";
	НачалоСтрахованияГПХ = '20230101';
	Запрос.УстановитьПараметр("НачалоПериода", Макс(НачалоСтрахованияГПХ, НачалоПериода));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Если ЗначениеЗаполнено(ПредполагаемаяОрганизация) Тогда
		Запрос.УстановитьПараметр("ПредполагаемаяОрганизация", ПредполагаемаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоговорыГПХ.Организация <> &ПредполагаемаяОрганизация,", "");
	КонецЕсли;
	
	ИменаПолей = "Сотрудник, Организация, Подразделение, Страхователь, ДатаНачала, ДатаОкончания";
	Результат = Новый Структура(ИменаПолей);
	Результат.Вставить("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Результат.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ИменаПолей);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьКадровыеДанныеПоГПХ(Результат, КадровыеДанныеГПХ, ДоступныеФилиалы)
	ЗаполнитьЗначенияСвойств(Результат, КадровыеДанныеГПХ, "Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация, Организация");
	Результат.ДатаУвольнения = КадровыеДанныеГПХ.ДатаОкончания;
	Результат.ВидЗанятости   = Перечисления.ВидыЗанятости.ПустаяСсылка();
	Результат.ЕстьПравоПросмотраОрганизации = ?(ДоступныеФилиалы = Неопределено,
		Истина,
		ДоступныеФилиалы.Найти(Результат.Организация) <> Неопределено);
КонецПроцедуры

// Возвращает причину нетрудоспособности на основании кода причины и возраста родственника.
//
// Параметры:
//   ДанныеЭЛН - Структура - См. ЭЛНФСС.ПустыеДанныеЭЛН.
//   ГоловнаяОрганизация - СправочникСсылка.Организации
//
Функция ПричинаНетрудоспособности(ДанныеЭЛН, ГоловнаяОрганизация) Экспорт
	Если ДанныеЭЛН.Свойство("ПричинаНетрудоспособности") Тогда
		Возврат ДанныеЭЛН.ПричинаНетрудоспособности;
	КонецЕсли;
	
	ДатаНачалаСобытия = ДатаНачалаСобытия(ДанныеЭЛН, ГоловнаяОрганизация);
	КодПричины        = ДанныеЭЛН.КодПричиныНетрудоспособности;
	
	Если КодПричины = "09"
		Или (Не ЗначениеЗаполнено(КодПричины) И ДанныеЭЛН.ПериодыЛеченияРодственников.Количество() > 0) Тогда
		ВозрастРодственника = НаименьшийВозрастПоУходу(ДанныеЭЛН, ГоловнаяОрганизация);
	Иначе
		ВозрастРодственника = Неопределено;
	КонецЕсли;
	
	Причина = УчетПособийСоциальногоСтрахования.ПричинаНетрудоспособности(
		КодПричины,
		ВозрастРодственника,
		ДатаНачалаСобытия,
		ДанныеЭЛН.НомерЛН,
		ГоловнаяОрганизация);
	
	ДанныеЭЛН.Вставить("ПричинаНетрудоспособности", Причина);
	Возврат Причина;
КонецФункции

#КонецОбласти

#Область АктуальныйФормат

Функция ПрочитатьДанныеЭЛНИзXML_2022(ДанныеЭЛН, СтруктураDOM, ИмяУзла)
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, ИмяУзла);
	Если ЭлементDOM = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Пример:
	//<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
	//<ns4:changeElnNotice xmlns="http://www.fss.ru/integration/types/eln/ins/v01"
	//                     xmlns:ns2="http://www.fss.ru/integration/types/eln/v01"
	//                     xmlns:ns4="http://www.fss.ru/integration/types/eln/ins/notice/v01"
	//                     xmlns:ns3="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
	//	<snils>12345678901</snils>
	//	<surname>ВУС</surname>
	//	<name>АЛЕКСАНДР</name>
	//	<patronymic>ВИКТОРОВИЧ</patronymic>
	//	<lnCode>900000123456</lnCode>
	//	<primaryFlag>true</primaryFlag>
	//	<duplicateFlag>false</duplicateFlag>
	//	<lnDate>2022-02-15</lnDate>
	//	<lpuName>ГБУЗ ДГП 129</lpuName>
	//	<lpuAddress>МОСКВА, ЧЕРТАНОВСКАЯ 28А</lpuAddress>
	//	<lpuOgrn>1012345678901</lpuOgrn>
	//	<birthday>1989-01-11</birthday>
	//	<gender>0</gender>
	//	<servData>
	//		<servFullData>
	//			<ns2:servRelationCode>39</ns2:servRelationCode>
	//			<ns2:servDt1>2022-02-15</ns2:servDt1>
	//			<ns2:servDt2>2022-02-22</ns2:servDt2>
	//			<ns2:treatmentType>1</ns2:treatmentType>
	//			<ns2:surname>ВУС</ns2:surname>
	//			<ns2:name>АННА</ns2:name>
	//			<ns2:patronymic>ВУСОВНА</ns2:patronymic>
	//			<ns2:birthday>2018-05-05</ns2:birthday>
	//			<ns2:reason1>09</ns2:reason1>
	//			<servAge>3</servAge>
	//			<servMm>9</servMm>
	//		</servFullData>
	//	</servData>
	//	<treatPeriods>
	//		<treatFullPeriod>
	//			<ns2:treatPeriod>
	//				<ns2:treatDt1>2022-02-15</ns2:treatDt1>
	//				<ns2:treatDt2>2022-02-22</ns2:treatDt2>
	//				<ns2:treatDoctorRole>ТЕРАП</ns2:treatDoctorRole>
	//				<ns2:treatDoctor>ПОТАПОВА НС</ns2:treatDoctor>
	//			</ns2:treatPeriod>
	//		</treatFullPeriod>
	//	</treatPeriods>
	//	<lnResult>
	//		<ns2:returnDateLpu>2022-02-23</ns2:returnDateLpu>
	//	</lnResult>
	//	<lnState>030</lnState>
	//	<intermittentMethodFlag>false</intermittentMethodFlag>
	//</ns4:changeElnNotice>
	
	УзлыDOM = УзлыDOMЭЛН_2022(ЭлементDOM);
	
	ПрочитатьШапкуЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM);
	
	ПрочитатьПериодыНетрудоспособностиЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM);
	
	ПрочитатьПериодыЛеченияРодственниковЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM);
	
	ПроверитьПолнотуДанныхЭЛНПоСпецификацииXML_2022(ДанныеЭЛН);
	
	Возврат Истина;
КонецФункции

Функция УзлыDOMЭЛН_2022(ЭлементDOMЭЛН)
	// Чтение реквизитов узла.
	ИменаУзлов =
	"approve1,
	|approve2,
	|baseAvgDailySal,
	|baseAvgSal,
	|birthday,
	|calcCondition1,
	|calcCondition2,
	|calcCondition3,
	|calcCondition4,
	|date1,
	|date2,
	|dt1Ln,
	|dt2Ln,
	|duplicateFlag,
	|emplFlag,
	|emplParentNo,
	|emplPayment,
	|emplRegNo,
	|emplRegNo2,
	|employer,
	|form1Dt,
	|fssPayment,
	|gender,
	|hospitalBreach,
	|hospitalDt1,
	|hospitalDt2,
	|innPerson,
	|insurMm,
	|insurYy,
	|lnCode,
	|lnDate,
	|lnHash,
	|lnResult,
	|lnState,
	|lpuAddress,
	|lpuName,
	|lpuOgrn,
	|mseDt1,
	|mseDt2,
	|mseDt3,
	|mseInvalidGroup,
	|mseInvalidLoss,
	|name,
	|notInsurMm,
	|notInsurYy,
	|patronymic,
	|payment,
	|pregn12wFlag,
	|prevLnCode,
	|primaryFlag,
	|reason1,
	|reason2,
	|reason3,
	|returnDateEmpl,
	|snils,
	|surname,
	|voucherNo,
	|voucherOgrn,
	|previouslyIssuedCode,
	|intermittentMethodFlag,
	|treatPeriods,
	|servData";
	Возврат СериализацияБЗК.УзлыЭлементаDOM(ЭлементDOMЭЛН, ИменаУзлов);
КонецФункции

Процедура ПрочитатьШапкуЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM)
	ДанныеЭЛН.НомерЛН = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lnCode);
	СНИЛСВФорматеФСС = СериализацияБЗК.СтрокаИзXML(УзлыDOM.snils);
	ДанныеЭЛН.СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСВФорматеФСС);
	
	ДанныеЭЛН.ДатаВыдачи   = СериализацияБЗК.ДатаИзXML(УзлыDOM.lnDate);
	ДанныеЭЛН.Хеш          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lnHash);
	ДанныеЭЛН.Фамилия      = СериализацияБЗК.СтрокаИзXML(УзлыDOM.surname);
	ДанныеЭЛН.Имя          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.name);
	ДанныеЭЛН.Отчество     = СериализацияБЗК.СтрокаИзXML(УзлыDOM.patronymic);
	ДанныеЭЛН.ДатаРождения = СериализацияБЗК.ДатаИзXML(УзлыDOM.birthday);
	
	ДанныеЭЛН.ЯвляетсяПродолжениемБолезни = Не СериализацияБЗК.БулевоИзXML(УзлыDOM.primaryFlag);
	ДанныеЭЛН.НомерПервичногоЛН           = СериализацияБЗК.СтрокаИзXML(УзлыDOM.prevLnCode);
	ДанныеЭЛН.ПредоставленДубликатЛН      = СериализацияБЗК.БулевоИзXML(УзлыDOM.duplicateFlag);
	ДанныеЭЛН.НомерЗаменяемогоЛН          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.previouslyIssuedCode);
	ДанныеЭЛН.ПрерывистыйМетод            = СериализацияБЗК.БулевоИзXML(УзлыDOM.intermittentMethodFlag);
	
	ДанныеЭЛН.НаименованиеМедицинскойОрганизации = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lpuName);
	ДанныеЭЛН.АдресМедицинскойОрганизации        = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lpuAddress);
	ДанныеЭЛН.ОГРНМедицинскойОрганизации         = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lpuOgrn);
	
	ДанныеЭЛН.КодПричиныНетрудоспособности               = СериализацияБЗК.СтрокаИзXML(УзлыDOM.reason1);
	ДанныеЭЛН.ДополнительныйКодПричиныНетрудоспособности = СериализацияБЗК.СтрокаИзXML(УзлыDOM.reason2);
	ДанныеЭЛН.ВторойКодПричиныНетрудоспособности         = СериализацияБЗК.СтрокаИзXML(УзлыDOM.reason3);
	
	ДанныеЭЛН.ДатаИзмененияКодаПричиныНетрудоспособности = СериализацияБЗК.ДатаИзXML(УзлыDOM.date1);
	ДанныеЭЛН.ДатаОкончанияПутевки                       = СериализацияБЗК.ДатаИзXML(УзлыDOM.date2);
	ДанныеЭЛН.НомерПутевки                               = СериализацияБЗК.СтрокаИзXML(УзлыDOM.voucherNo);
	ДанныеЭЛН.ОГРНСанатория                              = СериализацияБЗК.СтрокаИзXML(УзлыDOM.voucherOgrn);
	
	ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомС  = СериализацияБЗК.ДатаИзXML(УзлыDOM.hospitalDt1);
	ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомПо = СериализацияБЗК.ДатаИзXML(УзлыDOM.hospitalDt2);
	
	ДанныеЭЛН.ДатаНаправленияВБюроМСЭ       = СериализацияБЗК.ДатаИзXML(УзлыDOM.mseDt1);
	ДанныеЭЛН.ДатаРегистрацииДокументовМСЭ  = СериализацияБЗК.ДатаИзXML(УзлыDOM.mseDt2);
	ДанныеЭЛН.ДатаОсвидетельствованияМСЭ    = СериализацияБЗК.ДатаИзXML(УзлыDOM.mseDt3);
	ДанныеЭЛН.ГруппаИнвалидности            = СериализацияБЗК.СтрокаИзXML(УзлыDOM.mseInvalidGroup);
	ДанныеЭЛН.УтратаТрудоспобности          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.mseInvalidLoss);
	
	КодСтатуса = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lnState);
	ДанныеЭЛН.СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(КодСтатуса);
	Если Не ЗначениеЗаполнено(ДанныеЭЛН.СтатусЭЛНВФСС) Тогда
		ДанныеЭЛН.Успех = Ложь;
		ТекстОшибки = НСтр("ru = 'ЭЛН не соответствует спецификации: В поле ""%1"" недокументированное значение: ""%2"".';
							|en = 'ESLR does not match the specification: Field ""%1"" contains undocumented value : ""%2"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, "lnState", КодСтатуса);
		ДобавитьСтрокуВНачало(ДанныеЭЛН.ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
	Если УзлыDOM.lnResult <> Неопределено Тогда
		ИменаУзлов = "mseResult, otherStateDt, returnDateLpu, nextLnCode";
		УзлыРезультатаDOM = СериализацияБЗК.УзлыЭлементаDOM(УзлыDOM.lnResult, ИменаУзлов);
		ДанныеЭЛН.НовыйСтатусНетрудоспособного     = СериализацияБЗК.СтрокаИзXML(УзлыРезультатаDOM.mseResult);
		ДанныеЭЛН.ДатаНовыйСтатусНетрудоспособного = СериализацияБЗК.ДатаИзXML(УзлыРезультатаDOM.otherStateDt);
		ДанныеЭЛН.ПриступитьКРаботеС               = СериализацияБЗК.ДатаИзXML(УзлыРезультатаDOM.returnDateLpu);
		ДанныеЭЛН.НомерЛисткаПродолжения           = СериализацияБЗК.СтрокаИзXML(УзлыРезультатаDOM.nextLnCode);
	КонецЕсли;
	
	Если УзлыDOM.hospitalBreach <> Неопределено Тогда
		ИменаУзлов = "hospitalBreachCode, hospitalBreachDt";
		УзлыНарушенияРежимаDOM = СериализацияБЗК.УзлыЭлементаDOM(УзлыDOM.hospitalBreach, ИменаУзлов);
		ДанныеЭЛН.КодНарушенияРежима  = СериализацияБЗК.СтрокаИзXML(УзлыНарушенияРежимаDOM.hospitalBreachCode);
		ДанныеЭЛН.ДатаНарушенияРежима = СериализацияБЗК.ДатаИзXML(УзлыНарушенияРежимаDOM.hospitalBreachDt);
	КонецЕсли;
	
	ФлагПостановки = СериализацияБЗК.БулевоИзXML(УзлыDOM.pregn12wFlag);
	Если ФлагПостановки = Истина Тогда
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
	ИначеЕсли ФлагПостановки = Ложь Тогда
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
	Иначе
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПериодыНетрудоспособностиЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM)
	ДанныеЭЛН.ДатаНачала    = '00010101';
	ДанныеЭЛН.ДатаОкончания = '00010101';
	Если УзлыDOM.treatPeriods <> Неопределено Тогда
		ИменаУзлов1 = "treatChairman, treatChairmanRole, treatPeriod";
		ИменаУзлов2 = "treatDt1, treatDt2, treatDoctorRole, treatDoctor";
		Для Каждого ПериодDOM Из УзлыDOM.treatPeriods.ДочерниеУзлы Цикл
			Если ПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			УзлыПериодаDOM1 = СериализацияБЗК.УзлыЭлементаDOM(ПериодDOM, ИменаУзлов1);
			Если УзлыПериодаDOM1.treatPeriod = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УзлыПериодаDOM2 = СериализацияБЗК.УзлыЭлементаDOM(УзлыПериодаDOM1.treatPeriod, ИменаУзлов2);
			Период = ДанныеЭЛН.ПериодыНетрудоспособности.Добавить();
			Период.ДатаНачала              = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM2.treatDt1);
			Период.ДатаОкончания           = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM2.treatDt2);
			Период.ВрачФИО                 = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM2.treatDoctor);
			Период.ВрачДолжность           = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM2.treatDoctorRole);
			Период.ПредседательВКФИО       = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM1.treatChairman);
			Период.ПредседательВКДолжность = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM1.treatChairmanRole);
			Если Не ЗначениеЗаполнено(ДанныеЭЛН.ДатаНачала)
				Или (ЗначениеЗаполнено(Период.ДатаНачала) И Период.ДатаНачала < ДанныеЭЛН.ДатаНачала) Тогда
				ДанныеЭЛН.ДатаНачала = Период.ДатаНачала;
			КонецЕсли;
			ДанныеЭЛН.ДатаОкончания = Макс(Период.ДатаОкончания, ДанныеЭЛН.ДатаНачала, ДанныеЭЛН.ДатаОкончания);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьПериодыЛеченияРодственниковЭЛНИзXML_2022(ДанныеЭЛН, УзлыDOM)
	Если УзлыDOM.servData <> Неопределено Тогда
		ИменаУзлов1 = "servAge, servMm, servRelationCode, servDt1, servDt2,
		|treatmentType, surname, name, patronymic, birthday, reason1, snils";
		Для Каждого ПериодDOM Из УзлыDOM.servData.ДочерниеУзлы Цикл
			Если ПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			УзлыПериодаDOM = СериализацияБЗК.УзлыЭлементаDOM(ПериодDOM, ИменаУзлов1);
			Период = ДанныеЭЛН.ПериодыЛеченияРодственников.Добавить();
			Период.ДатаНачала     = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM.servDt1);
			Период.ДатаОкончания  = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM.servDt2);
			Период.ДатаРождения   = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM.birthday);
			Период.ВозрастЛет     = СериализацияБЗК.ЧислоИзXML(УзлыПериодаDOM.servAge);
			Период.ВозрастМесяцев = СериализацияБЗК.ЧислоИзXML(УзлыПериодаDOM.servMm);
			Период.КодПричины     = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.reason1);
			Период.ТипЛечения     = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.treatmentType);
			Период.КодСвязи       = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.servRelationCode);
			Период.СНИЛС          = СЭДОФСС.СНИЛСИзXML(УзлыПериодаDOM.snils);
			Период.Фамилия        = ТРег(СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.surname));
			Период.Имя            = ТРег(СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.name));
			Период.Отчество       = ТРег(СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM.patronymic));
			Период.ФИО            = СокрП(Период.Фамилия + " " + Период.Имя + " " + Период.Отчество);
			Период.РежимЛечения   = Перечисления.РежимыЛечения.НайтиПоКоду(Период.ТипЛечения);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьПолнотуДанныхЭЛНПоСпецификацииXML_2022(ДанныеЭЛН)
	// Базовые проверки спецификации.
	Если Не ЗначениеЗаполнено(ДанныеЭЛН.НомерЛН) Тогда
		ДанныеЭЛН.Успех = Ложь;
		ДанныеЭЛН.ТекстОшибки = НСтр("ru = 'ЭЛН не соответствует спецификации: Не заполнено поле ""lnCode"".';
									|en = 'Electronic sick leave record does not match the specification: The ""InCode"" field is blank.'");
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеЭЛН.СНИЛС) Тогда
		ДанныеЭЛН.Успех = Ложь;
		ДанныеЭЛН.ТекстОшибки = НСтр("ru = 'ЭЛН не соответствует спецификации: Не заполнено поле ""snils"".';
									|en = 'Electronic sick leave record does not match the specification: The ""snils"" field is blank.'");
	КонецЕсли;
КонецПроцедуры

Функция ТекстСообщенияФСС(СтруктураDOM)
	УзелСообщения = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "mess");
	Если УзелСообщения <> Неопределено Тогда
		ТекстовоеСодержимое = СокрЛП(Строка(УзелСообщения.ТекстовоеСодержимое));
		Если ТекстовоеСодержимое <> "" Тогда
			Возврат НСтр("ru = 'При обмене с ФСС возникли ошибки. Ответ ФСС:';
						|en = 'Errors occurred when exchanging with SSF. SSF response:'") + Символы.ПС + ТекстовоеСодержимое;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#Область СтарыйФормат

Функция ПрочитатьДанныеЭЛНИзXML_2019(ДанныеЭЛН, СтруктураDOM, ИмяУзла)
	ЭлементDOM = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, ИмяУзла);
	Если ЭлементDOM = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Пример:
	//<S:Envelope>
	//	<SOAP-ENV:Header/>
	//	<S:Body wsu:Id="OGRN_1027739443236">
	//		<ns1:getPrivateLNDataResponse xmlns:ns1="http://ru/ibs/fss/ln/ws/FileOperationsLn.wsdl" xmlns:ns2="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
	//			<ns1:FileOperationsLnUserGetPrivateLNDataOut>
	//				<ns1:REQUEST_ID>GETLNINS_3100002121_2020_05_25_00002</ns1:REQUEST_ID>
	//				<ns1:STATUS>1</ns1:STATUS>
	//				<ns1:DATA>
	//					<ns1:OUT_ROWSET>
	//						<ns1:ROW>
	//							<ns1:SNILS>00000060015</ns1:SNILS>
	//							<ns1:SURNAME>Тест</ns1:SURNAME>
	//							<ns1:NAME>Тест</ns1:NAME>
	//							<ns1:BOZ_FLAG>0</ns1:BOZ_FLAG>
	//							<ns1:LPU_EMPLOYER>ООО КРАТКОЕ НАИМЕНОВАНИЕ</ns1:LPU_EMPLOYER>
	//							<ns1:LPU_EMPL_FLAG>1</ns1:LPU_EMPL_FLAG>
	//							<ns1:LN_CODE>900000434972</ns1:LN_CODE>
	//							<ns1:PRIMARY_FLAG>1</ns1:PRIMARY_FLAG>
	//							<ns1:DUPLICATE_FLAG>0</ns1:DUPLICATE_FLAG>
	//							<ns1:LN_DATE>2020-03-20</ns1:LN_DATE>
	//							<ns1:LPU_NAME>МБУЗ «ГКБ № 1»</ns1:LPU_NAME>
	//							<ns1:LPU_ADDRESS>г. Белгород, просп. Белгородский, д. 99</ns1:LPU_ADDRESS>
	//							<ns1:LPU_OGRN>1023101681745</ns1:LPU_OGRN>
	//							<ns1:BIRTHDAY>1990-01-01</ns1:BIRTHDAY>
	//							<ns1:GENDER>0</ns1:GENDER>
	//							<ns1:REASON1>03</ns1:REASON1>
	//							<ns1:DATE1 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:DATE2 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:SERV1_AGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:SERV1_MM xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:SERV2_AGE xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:SERV2_MM xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:PREGN12W_FLAG xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:HOSPITAL_DT1 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:HOSPITAL_DT2 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:MSE_DT1 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:MSE_DT2 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:MSE_DT3 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:MSE_INVALID_GROUP xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:TREAT_PERIODS>
	//								<ns1:TREAT_FULL_PERIOD>
	//									<ns1:TREAT_PERIOD>
	//										<ns1:TREAT_DT1>2020-03-20</ns1:TREAT_DT1>
	//										<ns1:TREAT_DT2>2020-03-30</ns1:TREAT_DT2>
	//										<ns1:TREAT_DOCTOR_ROLE>ТЕРАПЕВТ</ns1:TREAT_DOCTOR_ROLE>
	//										<ns1:TREAT_DOCTOR>ПЛАКСИН Р Б</ns1:TREAT_DOCTOR>
	//									</ns1:TREAT_PERIOD>
	//								</ns1:TREAT_FULL_PERIOD>
	//							</ns1:TREAT_PERIODS>
	//							<ns1:LN_RESULT>
	//								<ns1:RETURN_DATE_LPU>2020-03-31</ns1:RETURN_DATE_LPU>
	//								<ns1:OTHER_STATE_DT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							</ns1:LN_RESULT>
	//							<ns1:LN_STATE>030</ns1:LN_STATE>
	//							<ns1:EMPL_FLAG xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:INSUR_YY xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:INSUR_MM xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:NOT_INSUR_YY xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:NOT_INSUR_MM xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:FORM1_DT xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:RETURN_DATE_EMPL xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:DT1_LN xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:DT2_LN xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
	//							<ns1:LN_HASH>CE2CCA8FDD9BDEAB16A25E87BCCD3824</ns1:LN_HASH>
	//						</ns1:ROW>
	//					</ns1:OUT_ROWSET>
	//				</ns1:DATA>
	//			</ns1:FileOperationsLnUserGetPrivateLNDataOut>
	//		</ns1:getPrivateLNDataResponse>
	//	</S:Body>
	//</S:Envelope>
	
	УзлыDOM = УзлыDOMЭЛН_2019(ЭлементDOM);
	
	ПрочитатьШапкуЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM);
	
	ПрочитатьПериодыНетрудоспособностиЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM);
	
	ПрочитатьПериодыЛеченияРодственниковЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM);
	
	ПроверитьПолнотуДанныхЭЛНПоСпецификацииXML_2022(ДанныеЭЛН);
	
	Возврат Истина;
КонецФункции

Функция УзлыDOMЭЛН_2019(ЭлементDOMЭЛН)
	// Чтение реквизитов узла.
	ИменаУзлов =
	"APPROVE1,
	|APPROVE2,
	|BASE_AVG_DAILY_SAL,
	|BASE_AVG_SAL,
	|BIRTHDAY,
	|CALC_CONDITION1,
	|CALC_CONDITION2,
	|CALC_CONDITION3,
	|CALC_CONDITION4,
	|DATE1,
	|DATE2,
	|DT1_LN,
	|DT2_LN,
	|DUPLICATE_FLAG,
	|EMPL_FLAG,
	|EMPL_PARENT_NO,
	|EMPL_PAYMENT,
	|EMPL_REG_NO,
	|EMPL_REG_NO2,
	|EMPLOYER,
	|FORM1_DT,
	|FSS_PAYMENT,
	|GENDER,
	|HOSPITAL_BREACH,
	|HOSPITAL_DT1,
	|HOSPITAL_DT2,
	|INN_PERSON,
	|INSUR_MM,
	|INSUR_YY,
	|LN_CODE,
	|LN_DATE,
	|LN_HASH,
	|LN_RESULT,
	|LN_STATE,
	|LPU_ADDRESS,
	|LPU_NAME,
	|LPU_OGRN,
	|MSE_DT1,
	|MSE_DT2,
	|MSE_DT3,
	|MSE_INVALID_GROUP,
	|NAME,
	|NOT_INSUR_MM,
	|NOT_INSUR_YY,
	|PATRONIMIC,
	|PAYMENT,
	|PREGN12W_FLAG,
	|PREV_LN_CODE,
	|PRIMARY_FLAG,
	|REASON1,
	|REASON2,
	|REASON3,
	|RETURN_DATE_EMPL,
	|SNILS,
	|SURNAME,
	|VOUCHER_NO,
	|VOUCHER_OGRN,
	|TREAT_PERIODS,
	|SERV1_AGE,
	|SERV1_FIO,
	|SERV1_MM,
	|SERV1_RELATION_CODE,
	|SERV2_AGE,
	|SERV2_FIO,
	|SERV2_MM,
	|SERV2_RELATION_CODE";
	Возврат СериализацияБЗК.УзлыЭлементаDOM(ЭлементDOMЭЛН, ИменаУзлов);
КонецФункции

Процедура ПрочитатьШапкуЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM)
	ДанныеЭЛН.НомерЛН = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LN_CODE);
	СНИЛСВФорматеФСС = СериализацияБЗК.СтрокаИзXML(УзлыDOM.SNILS);
	ДанныеЭЛН.СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСВФорматеФСС);
	
	ДанныеЭЛН.ДатаВыдачи   = СериализацияБЗК.ДатаИзXML(УзлыDOM.LN_DATE);
	ДанныеЭЛН.Хеш          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LN_HASH);
	ДанныеЭЛН.Фамилия      = СериализацияБЗК.СтрокаИзXML(УзлыDOM.SURNAME);
	ДанныеЭЛН.Имя          = СериализацияБЗК.СтрокаИзXML(УзлыDOM.NAME);
	ДанныеЭЛН.Отчество     = СериализацияБЗК.СтрокаИзXML(УзлыDOM.PATRONIMIC);
	ДанныеЭЛН.ДатаРождения = СериализацияБЗК.ДатаИзXML(УзлыDOM.BIRTHDAY);
	
	ДанныеЭЛН.ЯвляетсяПродолжениемБолезни = Не СериализацияБЗК.БулевоИзXML(УзлыDOM.PRIMARY_FLAG);
	ДанныеЭЛН.НомерПервичногоЛН           = СериализацияБЗК.СтрокаИзXML(УзлыDOM.PREV_LN_CODE);
	ДанныеЭЛН.ПредоставленДубликатЛН      = СериализацияБЗК.БулевоИзXML(УзлыDOM.DUPLICATE_FLAG);
	
	ДанныеЭЛН.НаименованиеМедицинскойОрганизации = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LPU_NAME);
	ДанныеЭЛН.АдресМедицинскойОрганизации        = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LPU_ADDRESS);
	ДанныеЭЛН.ОГРНМедицинскойОрганизации         = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LPU_OGRN);
	
	ДанныеЭЛН.КодПричиныНетрудоспособности               = СериализацияБЗК.СтрокаИзXML(УзлыDOM.REASON1);
	ДанныеЭЛН.ДополнительныйКодПричиныНетрудоспособности = СериализацияБЗК.СтрокаИзXML(УзлыDOM.REASON2);
	ДанныеЭЛН.ВторойКодПричиныНетрудоспособности         = СериализацияБЗК.СтрокаИзXML(УзлыDOM.REASON3);
	
	ДанныеЭЛН.ДатаИзмененияКодаПричиныНетрудоспособности = СериализацияБЗК.ДатаИзXML(УзлыDOM.DATE1);
	ДанныеЭЛН.ДатаОкончанияПутевки                       = СериализацияБЗК.ДатаИзXML(УзлыDOM.DATE2);
	ДанныеЭЛН.НомерПутевки                               = СериализацияБЗК.СтрокаИзXML(УзлыDOM.VOUCHER_NO);
	ДанныеЭЛН.ОГРНСанатория                              = СериализацияБЗК.СтрокаИзXML(УзлыDOM.VOUCHER_OGRN);
	
	ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомС  = СериализацияБЗК.ДатаИзXML(УзлыDOM.HOSPITAL_DT1);
	ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомПо = СериализацияБЗК.ДатаИзXML(УзлыDOM.HOSPITAL_DT2);
	
	ДанныеЭЛН.ДатаНаправленияВБюроМСЭ       = СериализацияБЗК.ДатаИзXML(УзлыDOM.MSE_DT1);
	ДанныеЭЛН.ДатаРегистрацииДокументовМСЭ  = СериализацияБЗК.ДатаИзXML(УзлыDOM.MSE_DT2);
	ДанныеЭЛН.ДатаОсвидетельствованияМСЭ    = СериализацияБЗК.ДатаИзXML(УзлыDOM.MSE_DT3);
	ДанныеЭЛН.ГруппаИнвалидности            = СериализацияБЗК.СтрокаИзXML(УзлыDOM.MSE_INVALID_GROUP);
	
	КодСтатуса = СериализацияБЗК.СтрокаИзXML(УзлыDOM.LN_STATE);
	ДанныеЭЛН.СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(КодСтатуса);
	Если Не ЗначениеЗаполнено(ДанныеЭЛН.СтатусЭЛНВФСС) Тогда
		ДанныеЭЛН.Успех = Ложь;
		ТекстОшибки = НСтр("ru = 'ЭЛН не соответствует спецификации: В поле ""%1"" недокументированное значение: ""%2"".';
							|en = 'ESLR does not match the specification: Field ""%1"" contains undocumented value : ""%2"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, "lnState", КодСтатуса);
		ДобавитьСтрокуВНачало(ДанныеЭЛН.ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
	Если УзлыDOM.LN_RESULT <> Неопределено Тогда
		ИменаУзлов = "MSE_RESULT, OTHER_STATE_DT, RETURN_DATE_LPU, NEXT_LN_CODE";
		УзлыРезультатаDOM = СериализацияБЗК.УзлыЭлементаDOM(УзлыDOM.LN_RESULT, ИменаУзлов);
		ДанныеЭЛН.НовыйСтатусНетрудоспособного     = СериализацияБЗК.СтрокаИзXML(УзлыРезультатаDOM.MSE_RESULT);
		ДанныеЭЛН.ДатаНовыйСтатусНетрудоспособного = СериализацияБЗК.ДатаИзXML(УзлыРезультатаDOM.OTHER_STATE_DT);
		ДанныеЭЛН.ПриступитьКРаботеС               = СериализацияБЗК.ДатаИзXML(УзлыРезультатаDOM.RETURN_DATE_LPU);
		ДанныеЭЛН.НомерЛисткаПродолжения           = СериализацияБЗК.СтрокаИзXML(УзлыРезультатаDOM.NEXT_LN_CODE);
	КонецЕсли;
	
	Если УзлыDOM.HOSPITAL_BREACH <> Неопределено Тогда
		ИменаУзлов = "HOSPITAL_BREACH_CODE, HOSPITAL_BREACH_DT";
		УзлыНарушенияРежимаDOM = СериализацияБЗК.УзлыЭлементаDOM(УзлыDOM.HOSPITAL_BREACH, ИменаУзлов);
		ДанныеЭЛН.КодНарушенияРежима  = СериализацияБЗК.СтрокаИзXML(УзлыНарушенияРежимаDOM.HOSPITAL_BREACH_CODE);
		ДанныеЭЛН.ДатаНарушенияРежима = СериализацияБЗК.ДатаИзXML(УзлыНарушенияРежимаDOM.HOSPITAL_BREACH_DT);
	КонецЕсли;
	
	ПризнакПостановки = СериализацияБЗК.СтрокаИзXML(УзлыDOM.PREGN12W_FLAG);
	Если ПризнакПостановки = "1" Тогда
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.Поставлена;
	ИначеЕсли ПризнакПостановки = "0" Тогда
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеПоставлена;
	Иначе
		ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПериодыНетрудоспособностиЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM)
	ДанныеЭЛН.ДатаНачала    = '39991231235959';
	ДанныеЭЛН.ДатаОкончания = '00010101';
	Если УзлыDOM.TREAT_PERIODS <> Неопределено Тогда
		ИменаУзлов1 = "TREAT_CHAIRMAN, TREAT_CHAIRMAN_ROLE, TREAT_PERIOD";
		ИменаУзлов2 = "TREAT_DT1, TREAT_DT2, TREAT_DOCTOR_ROLE, TREAT_DOCTOR";
		
		Для Каждого ПериодDOM Из УзлыDOM.TREAT_PERIODS.ДочерниеУзлы Цикл
			Если ПериодDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
				Продолжить;
			КонецЕсли;
			УзлыПериодаDOM1 = СериализацияБЗК.УзлыЭлементаDOM(ПериодDOM, ИменаУзлов1);
			Если УзлыПериодаDOM1.TREAT_PERIOD = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			УзлыПериодаDOM2 = СериализацияБЗК.УзлыЭлементаDOM(УзлыПериодаDOM1.TREAT_PERIOD, ИменаУзлов2);
			Период = ДанныеЭЛН.ПериодыНетрудоспособности.Добавить();
			Период.ДатаНачала              = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM2.TREAT_DT1);
			Период.ДатаОкончания           = СериализацияБЗК.ДатаИзXML(УзлыПериодаDOM2.TREAT_DT2);
			Период.ВрачФИО                 = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM2.TREAT_DOCTOR);
			Период.ВрачДолжность           = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM2.TREAT_DOCTOR_ROLE);
			Период.ПредседательВКФИО       = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM1.TREAT_CHAIRMAN);
			Период.ПредседательВКДолжность = СериализацияБЗК.СтрокаИзXML(УзлыПериодаDOM1.TREAT_CHAIRMAN_ROLE);
			Если ЗначениеЗаполнено(Период.ДатаНачала) И Период.ДатаНачала < ДанныеЭЛН.ДатаНачала Тогда
				ДанныеЭЛН.ДатаНачала = Период.ДатаНачала;
			КонецЕсли;
			Если ЗначениеЗаполнено(Период.ДатаОкончания) И Период.ДатаОкончания > ДанныеЭЛН.ДатаОкончания Тогда
				ДанныеЭЛН.ДатаОкончания = Период.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЭЛН.ДатаОкончания < ДанныеЭЛН.ДатаНачала Тогда
		ДанныеЭЛН.ДатаНачала = ДанныеЭЛН.ДатаОкончания;
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьПериодыЛеченияРодственниковЭЛНИзXML_2019(ДанныеЭЛН, УзлыDOM)
	Для НомерРодственника = 1 По 2 Цикл
		Префикс = "SERV" + НомерРодственника + "_";
		
		ФИО            = ТРег(СериализацияБЗК.СтрокаИзXML(УзлыDOM[Префикс + "FIO"]));
		ВозрастЛет     = СериализацияБЗК.ЧислоИзXML(УзлыDOM[Префикс + "AGE"]);
		ВозрастМесяцев = СериализацияБЗК.ЧислоИзXML(УзлыDOM[Префикс + "MM"]);
		Если ЗначениеЗаполнено(ФИО)
			Или (ТипЗнч(ВозрастЛет) = Тип("Число")     И ВозрастЛет > 0)
			Или (ТипЗнч(ВозрастМесяцев) = Тип("Число") И ВозрастМесяцев > 0) Тогда
			
			Если ЗначениеЗаполнено(ФИО) Тогда
				ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
			Иначе
				ЧастиИмени = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
			КонецЕсли;
			
			Период = ДанныеЭЛН.ПериодыЛеченияРодственников.Добавить();
			Период.ДатаНачала     = ДанныеЭЛН.ДатаНачала;
			Период.ДатаОкончания  = ДанныеЭЛН.ДатаОкончания;
			Период.ДатаРождения   = Неопределено;
			Период.ВозрастЛет     = ВозрастЛет;
			Период.ВозрастМесяцев = ВозрастМесяцев;
			Период.КодПричины     = Неопределено;
			Период.ТипЛечения     = Неопределено;
			Период.КодСвязи       = СериализацияБЗК.СтрокаИзXML(УзлыDOM[Префикс + "RELATION_CODE"]);
			Период.СНИЛС          = "";
			Период.Фамилия        = ТРег(ЧастиИмени.Фамилия);
			Период.Имя            = ТРег(ЧастиИмени.Имя);
			Период.Отчество       = ТРег(ЧастиИмени.Отчество);
			Период.ФИО            = ФИО;
			Период.РежимЛечения   = Перечисления.РежимыЛечения.ПустаяСсылка();
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Проверки

Функция РазрешенаЗагрузкаЭЛН(СтатусЭЛНВФСС, НомерЛН) Экспорт
	// Не оформленные и аннулированные ЭЛН опасно загружать.
	Если Не ЗначениеЗаполнено(СтатусЭЛНВФСС)
		Или СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.Аннулирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Карантинные ЭЛН 65+ разрешено загружать почти в любых состояниях (для авансовых выплат за счет ФСС).
	Если СтрНачинаетсяС(НомерЛН, "9990") Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ЭЛН разрешено загружать только когда они закрыты медицинской организацией.
	Если СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.Закрыт
		Или СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НаправленНаМСЭ
		Или СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.ДополненДаннымиМСЭ Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ЭЛН 2.0 действует сразу для всех мест работы - и по основному месту работы и по совместительству.
	Если СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.ПринятРеестрЭЛН
		Или СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.ПринятРеестрПВСО
		Или СтатусЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.ВыплаченФСС Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Открытые ЭЛН загружать не следует.
	Возврат Ложь;
КонецФункции

Процедура ПроверитьВозможностьЗагрузкиЭЛН(Документ, ДанныеЭЛН, Отказ) Экспорт
	
	// Проверка статуса.
	Если Не РазрешенаЗагрузкаЭЛН(ДанныеЭЛН.СтатусЭЛНВФСС, ДанныеЭЛН.НомерЛН) Тогда
		ТекстОшибки = НСтр("ru = 'ЭЛН не может быть загружен, его статус: ""%1"".';
							|en = 'Cannot import an electronic sick leave record, its status: ""%1"".'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭЛН.СтатусЭЛНВФСС);
		СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки);
	КонецЕсли;
	
	// Проверка соответствия номера ЛН в больничном с номером ЭЛН.
	Если ЗначениеЗаполнено(Документ.НомерЛисткаНетрудоспособности) Тогда
		Если СтрСравнить(Документ.НомерЛисткаНетрудоспособности, ДанныеЭЛН.НомерЛН) <> 0 Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Номер листка нетрудоспособности в больничном (%1) не совпадает с номером ЭЛН (%2).';
					|en = 'Sick leave record number in the sick leave (%1) does not match the ESLR number (%2).'"),
				Документ.НомерЛисткаНетрудоспособности,
				ДанныеЭЛН.НомерЛН);
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки, "НомерЛисткаНетрудоспособности");
		КонецЕсли;
	КонецЕсли;
	
	// Если в документе заполнен сотрудник, то необходимо только проверить соответствие СНИЛСов.
	Если ЗначениеЗаполнено(Документ.Сотрудник) Тогда
		Документ.ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Сотрудник, "ФизическоеЛицо");
		СНИЛСВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ФизическоеЛицо, "СтраховойНомерПФР");
		Если ЗначениеЗаполнено(СНИЛСВДокументе) Тогда
			Если СтрСравнить(ДанныеЭЛН.СНИЛС, СНИЛСВДокументе) <> 0 Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'СНИЛС сотрудника ""%1"" в больничном (%2) не соответствует СНИЛСу в ЭЛН (%3).';
						|en = 'Employee ""%1"" SNILS in the sick leave (%2) does not match the SNILS in ESLR (%3).'"),
					Строка(Документ.Сотрудник),
					СНИЛСВДокументе,
					ДанныеЭЛН.СНИЛС);
				СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки, "Сотрудник");
			КонецЕсли;
		Иначе
			РезультатПоиска = ФизическиеЛицаЗарплатаКадры.ФизическоеЛицоПоСНИЛСИлиФИО(ДанныеЭЛН.СНИЛС, "", "", "");
			ФизическоеЛицо  = РезультатПоиска.ФизическоеЛицо;
			Если ЗначениеЗаполнено(ФизическоеЛицо) И Документ.ФизическоеЛицо <> ФизическоеЛицо Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В документе выбран сотрудник ""%1"" с пустым СНИЛС, а по СНИЛСу в ЭЛН (%2) найден сотрудник ""%3"".';
						|en = 'The document contains the employee ""%1"" with a blank SNILS, and the employee ""%3"" is found by SNILS in ESLR (%2).'"),
					Документ.ФизическоеЛицо,
					ДанныеЭЛН.СНИЛС,
					ФизическоеЛицо);
				СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки, "Сотрудник");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Строки

Процедура ДобавитьСтрокуВНачало(ИзменяемыйРеквизит, ДобавляемаяСтрока)
	Если ЗначениеЗаполнено(ИзменяемыйРеквизит) Тогда
		ИзменяемыйРеквизит = ДобавляемаяСтрока + Символы.ПС + ИзменяемыйРеквизит;
	Иначе
		ИзменяемыйРеквизит = ДобавляемаяСтрока;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УходЗаРодственниками

Функция НаименьшийВозрастПоУходу(ДанныеЭЛН, ГоловнаяОрганизация)
	Если ДанныеЭЛН.Свойство("НаименьшийВозрастПоУходу") Тогда
		Возврат ДанныеЭЛН.НаименьшийВозрастПоУходу;
	КонецЕсли;
	НаименьшийВозраст = Неопределено;
	Если ДанныеЭЛН.ПериодыЛеченияРодственников.Количество() > 0 Тогда
		ОбменЛисткамиНетрудоспособностиФСС.ЗаполнитьДатыУходаЗаРодственниками(
			ДанныеЭЛН,
			ГоловнаяОрганизация,
			ФизическоеЛицо(ДанныеЭЛН));
		Для Каждого Родственник Из ДанныеЭЛН.Родственники Цикл
			Возраст = Родственник.ВозрастЛет + Окр(Родственник.ВозрастМесяцев / 12, 1);
			Если НаименьшийВозраст = Неопределено Или НаименьшийВозраст > Возраст Тогда
				НаименьшийВозраст = Возраст;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеЭЛН.Вставить("НаименьшийВозрастПоУходу", НаименьшийВозраст);
	Возврат НаименьшийВозраст;
КонецФункции

#КонецОбласти

#КонецОбласти
