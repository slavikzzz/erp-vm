#Область СлужебныйПрограммныйИнтерфейс

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ОбразованиеФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗнаниеЯзыковФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПрофессииФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СпециальностиФизическихЛиц, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.ОбразованиеФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|Справочник.ОбразованиеФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ЗнаниеЯзыковФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ЗнаниеЯзыковФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПрофессииФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПрофессииФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СпециальностиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СпециальностиФизическихЛиц.Изменение.ГруппыФизическихЛиц";

КонецПроцедуры

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыДокументовОбОбразовании);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4dc-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыОбразованияФизическихЛиц);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfad-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.КлассификаторСпециальностейПоОбразованию);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbefc-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ОбразованиеФизическихЛиц);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4ee-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.УчебныеЗаведения);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbeec-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ПрофессииРабочих);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		// Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц
		НоваяСтрока = ЗависимыеДанные.Добавить();
		НоваяСтрока.ВедущиеМетаданные = Метаданные.Справочники.ОбразованиеФизическихЛиц;
		НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц;
		
		// Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц
		НоваяСтрока = ЗависимыеДанные.Добавить();
		НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ЗнаниеЯзыковФизическихЛиц;
		НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц;
		
		// Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц
		НоваяСтрока = ЗависимыеДанные.Добавить();
		НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.СпециальностиФизическихЛиц;
		НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.СтроковыеСведенияФизическихЛиц;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт
	
	МетаданныеОбъекта = Метаданные.Справочники.ОбразованиеФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.СтандартныеРеквизиты.Владелец.Имя;
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Серия.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Номер.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.ДатаВыдачи.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Квалификация.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Начало.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Окончание.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.НаименованиеКурса.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Основание.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "Образование";
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СпециальностиФизическихЛиц;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Измерения.ФизическоеЛицо.ПолноеИмя();
	Поля = Новый Массив; // Массив из Строка
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Основание.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Серия.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.Номер.ПолноеИмя());
	Поля.Добавить(МетаданныеОбъекта.Реквизиты.КемВыдан.ПолноеИмя());
	НовыеСведения.Поля = Поля;
	НовыеСведения.КатегорияДанных = "Профессия";
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаписатьДанныеОбОбразовании(ОбъектФизическоеЛицо, Образование) Экспорт
	
	Если Не ЗначениеЗаполнено(Образование)
		Или Образование.Количество() = 0 Тогда 
		
		Возврат;
	КонецЕсли;
	
	КлассификаторСпециальностей = Новый ТаблицаЗначений;
	
	Для Каждого СтрокаОбразование Из Образование Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведениеСсылка)
			И ЗначениеЗаполнено(СтрокаОбразование.УчебноеЗаведение) Тогда
			
			СтрокаОбразование.УчебноеЗаведениеСсылка = НайтиСоздатьУчебноеЗаведение(СтрокаОбразование.УчебноеЗаведение);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаОбразование.СпециальностьСсылка)
			И ЗначениеЗаполнено(СтрокаОбразование.Специальность) Тогда
			
			СтрокаОбразование.СпециальностьСсылка = НайтиСоздатьСпециальность(СтрокаОбразование.Специальность,
				КлассификаторСпециальностей);
			
		КонецЕсли;
		
		ПараметрыЗаполненияОбразования = ПараметрыЗаполненияОбразования(
			ОбъектФизическоеЛицо.Ссылка, СтрокаОбразование.УчебноеЗаведениеСсылка, СтрокаОбразование.СпециальностьСсылка);
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияОбразования, СтрокаОбразование,
			"ВидОбразования, НаименованиеКурса, Квалификация, Окончание, ВидПослевузовскогоОбразования, ВидДополнительногоОбучения");
		ЗаписатьОбразованиеФизическогоЛица(ПараметрыЗаполненияОбразования);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеОЗнанииЯзыков(ОбъектФизическоеЛицо, ЗнаниеЯзыков) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗнаниеЯзыков) Или ЗнаниеЯзыков.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Языки = Новый Массив;
	КлассификаторЯзыков = Новый ТаблицаЗначений;
	
	НаборЗаписей = РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(ОбъектФизическоеЛицо.Ссылка);
	Для Каждого СтрокаЗнаниеЯзыков Из ЗнаниеЯзыков Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.Язык)
			И ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.ЯзыкСтрока) Тогда
			
			СтрокаЗнаниеЯзыков.Язык = ЯзыкПоНаименованию(СтрокаЗнаниеЯзыков.ЯзыкСтрока);
			Если Не ЗначениеЗаполнено(СтрокаЗнаниеЯзыков.Язык) Тогда
				СтрокаЗнаниеЯзыков.Язык = НовыйЯзык(СтрокаЗнаниеЯзыков.ЯзыкСтрока, КлассификаторЯзыков);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Языки.Найти(СтрокаЗнаниеЯзыков.Язык) = Неопределено Тогда
			Языки.Добавить(СтрокаЗнаниеЯзыков.Язык);
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаЗнаниеЯзыков);
		НоваяЗапись.ФизическоеЛицо = ОбъектФизическоеЛицо.Ссылка;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает Язык, найденный по наименованию.
// Если не найдено, то возвращает СправочникСсылка.ЯзыкиНародовМира.ПустаяСсылка().
// Параметры:
//		НаименованиеЯзыка	- Строка.
//
// Возвращаемое значение:
//		Язык - СправочникСсылка.ЯзыкиНародовМира.
//
Функция ЯзыкПоНаименованию(НаименованиеЯзыка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯзыкиНародовМира.Ссылка
	|ИЗ
	|	Справочник.ЯзыкиНародовМира КАК ЯзыкиНародовМира
	|ГДЕ
	|	ЯзыкиНародовМира.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЯзыка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ЯзыкиНародовМира.ПустаяСсылка();
	КонецЕсли; 
					
КонецФункции

Функция НовыйЯзык(НаименованиеЯзыка, КлассификаторЯзыков) Экспорт
	
	Если КлассификаторЯзыков.Количество() = 0 Тогда
		ЗагрузитьКлассификатор(КлассификаторЯзыков, Справочники.ЯзыкиНародовМира.ПолучитьМакет("КлассификаторЯзыковНародовМира"));
	КонецЕсли;
	
	ЯзыкСтроки = КлассификаторЯзыков.НайтиСтроки(Новый Структура("NameEdit", ВРег(СокрЛП(НаименованиеЯзыка)))); 
	Если ЯзыкСтроки.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		Язык = Справочники.ЯзыкиНародовМира.СоздатьЭлемент();
		Язык.Наименование = ЯзыкСтроки[0].Name;
		Язык.Код = ЯзыкСтроки[0].Code;
		Язык.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
		Язык.ОбменДанными.Загрузка = Истина;
		Язык.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат Язык.Ссылка;
	Иначе
		Возврат Справочники.ЯзыкиНародовМира.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ВидыОбразованийПоВажности() Экспорт

	
	ВидыОбразованийПоВажности = Новый Массив;
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование);
	
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование);
	
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразование);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура);
	
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации);
	ВидыОбразованийПоВажности.Добавить(Справочники.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование);
	
	Возврат ВидыОбразованийПоВажности;
	
КонецФункции

#Область КадровыеДанныеФизическихЛиц

Функция СоздатьВТОбразованияФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФизическихЛиц = "ВТОбразованияФизическихЛиц") Экспорт
	
	Запрос = ЗапросВТОбразованияФизическихЛиц(Истина, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФизическихЛиц);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТОбразованияФизическихЛиц = "ВТОбразованияФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛицаОбразование.Владелец КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.Ссылка,
		|	ФизическиеЛицаОбразование.ВидОбразования,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.ЗаПределамиРФ,
		|	ФизическиеЛицаОбразование.Основание
		|ПОМЕСТИТЬ ВТОбразованияФизическихЛиц
		|ИЗ
		|	Справочник.ОбразованиеФизическихЛиц КАК ФизическиеЛицаОбразование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ПО ФизическиеЛицаОбразование.Владелец = ТаблицаОтборов.ФизическоеЛицо
		|ГДЕ
		|	НЕ ФизическиеЛицаОбразование.ПометкаУдаления
		|{ГДЕ
		|	ФизическиеЛицаОбразование.Владелец.* КАК ФизическоеЛицо,
		|	ФизическиеЛицаОбразование.ВидОбразования.*,
		|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования.*,
		|	ФизическиеЛицаОбразование.ВидДополнительногоОбучения.*,
		|	ФизическиеЛицаОбразование.УчебноеЗаведение.*,
		|	ФизическиеЛицаОбразование.Начало,
		|	ФизическиеЛицаОбразование.Окончание,
		|	ФизическиеЛицаОбразование.Специальность.*,
		|	ФизическиеЛицаОбразование.Квалификация,
		|	ФизическиеЛицаОбразование.НаименованиеКурса,
		|	ФизическиеЛицаОбразование.КоличествоЧасов,
		|	ФизическиеЛицаОбразование.ВидДокумента.*,
		|	ФизическиеЛицаОбразование.Серия,
		|	ФизическиеЛицаОбразование.Номер,
		|	ФизическиеЛицаОбразование.ДатаВыдачи,
		|	ФизическиеЛицаОбразование.ЗаПределамиРФ,
		|	ФизическиеЛицаОбразование.Основание}";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОбразованияФизическихЛиц", ИмяВТОбразованияФизическихЛиц);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

// Параметры:
//  НаименованиеУчебногоЗаведения - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.УчебныеЗаведения
Функция НайтиСоздатьУчебноеЗаведение(НаименованиеУчебногоЗаведения) Экспорт
	
	УчебноеЗаведение = УчебноеЗаведениеПоНаименованию(НаименованиеУчебногоЗаведения);
	Если Не ЗначениеЗаполнено(УчебноеЗаведение) Тогда
		УчебноеЗаведение = НовоеУчебноеЗаведение(НаименованиеУчебногоЗаведения);
	КонецЕсли;
	
	Возврат УчебноеЗаведение;
	
КонецФункции	

// Параметры:
//  НаименованиеСпециальности - Строка -
//  КлассификаторСпециальностей - Неопределено, ТаблицаЗначений -
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторСпециальностейПоОбразованию
Функция НайтиСоздатьСпециальность(НаименованиеСпециальности, КлассификаторСпециальностей = Неопределено) Экспорт
	
	Если КлассификаторСпециальностей = Неопределено Тогда
		КлассификаторСпециальностей = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Специальность = СпециальностьПоНаименованию(НаименованиеСпециальности);
	Если Не ЗначениеЗаполнено(Специальность) Тогда
		Специальность = НоваяСпециальность(НаименованиеСпециальности, КлассификаторСпециальностей);
	КонецЕсли;
	
	Возврат Специальность;
	
КонецФункции	

Функция ПараметрыЗаполненияОбразования(ФизическоеЛицо, УчебноеЗаведение, Специальность)
	
	ПараметрыЗаполнения = Новый Структура(
		"Владелец,
		|УчебноеЗаведение,
		|Специальность,
		|ВидОбразования,
		|НаименованиеКурса,
		|Квалификация,
		|Окончание,
		|ВидПослевузовскогоОбразования,
		|ВидДополнительногоОбучения");
	ПараметрыЗаполнения.Владелец = ФизическоеЛицо;
	ПараметрыЗаполнения.УчебноеЗаведение = УчебноеЗаведение;
	ПараметрыЗаполнения.Специальность = Специальность;
	
	Возврат ПараметрыЗаполнения;
КонецФункции

Функция НовоеУчебноеЗаведение(НаименованиеУчебногоЗаведения)
	
	УстановитьПривилегированныйРежим(Истина);

	УчебноеЗаведение = Справочники.УчебныеЗаведения.СоздатьЭлемент();
	УчебноеЗаведение.Наименование = НаименованиеУчебногоЗаведения;
	УчебноеЗаведение.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат УчебноеЗаведение.Ссылка;
	
КонецФункции

Процедура ЗаписатьОбразованиеФизическогоЛица(ПараметрыЗаполненияОбразования)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбразованиеФизическихЛиц.Ссылка
	|ИЗ
	|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
	|ГДЕ
	|	ОбразованиеФизическихЛиц.Владелец = &Владелец
	|	И ОбразованиеФизическихЛиц.УчебноеЗаведение = &УчебноеЗаведение
	|	И ОбразованиеФизическихЛиц.Специальность = &Специальность";
	
	Запрос.УстановитьПараметр("Владелец", ПараметрыЗаполненияОбразования.Владелец);
	Запрос.УстановитьПараметр("УчебноеЗаведение", ПараметрыЗаполненияОбразования.УчебноеЗаведение);
	Запрос.УстановитьПараметр("Специальность", ПараметрыЗаполненияОбразования.Специальность);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбъектОбразование = Справочники.ОбразованиеФизическихЛиц.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектОбразование, ПараметрыЗаполненияОбразования);
		ОбъектОбразование.Записать();
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОбъектОбразование = Выборка.Ссылка.ПолучитьОбъект();
	Если Не ОбъектОбразование.Окончание = ПараметрыЗаполненияОбразования.Окончание Тогда
		ЗаполнитьЗначенияСвойств(ОбъектОбразование, ПараметрыЗаполненияОбразования);
		ОбъектОбразование.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных, ИсключаемыеПоля = Неопределено) Экспорт
	
	// Знания языков
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВладеемыйЯзык1";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.Первый";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВладеемыйЯзык1СтепеньЗнания";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.Первый.СтепеньЗнания";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВладеемыйЯзык2";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.Второй";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВладеемыйЯзык2СтепеньЗнания";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.Второй.СтепеньЗнания";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Специальности
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Специальность1";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Специальность.Первая";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Специальность2";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Специальность.Вторая";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Образование
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбразованиеПервое";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Первое";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбразованиеВторое";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Второе";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбразованиеВысшее";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Высшее";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ОбразованиеПослевузовское";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ОбразованиеФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Послевузовское";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Строковые сведения
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ПолученныеОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = """""";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".СводныеСведения.ПолученныеОбразования";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидОбразования";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидПослевузовскогоОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидПослевузовскогоОбразования";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидДополнительногоОбучения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидДополнительногоОбучения";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УчебноеЗаведение";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.УчебноеЗаведение";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Начало";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Начало";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Окончание";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Окончание";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СпециальностьПоОбразованию";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Специальность";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Специальность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Специальность.Специальность";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Профессии
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Профессия1";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Профессии.Первая";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Профессия2";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Профессии.Вторая";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	// Поля поиска
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Язык";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.Язык";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СтепеньЗнания";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".ВладениеЯзыками.СтепеньЗнания";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидОбразования";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидПослевузовскогоОбразования";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидПослевузовскогоОбразования";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ВидДополнительногоОбучения";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.ВидДополнительногоОбучения";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "УчебноеЗаведение";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.УчебноеЗаведение";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Начало";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Начало";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Окончание";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ДАТАВРЕМЯ(1, 1, 1)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Окончание";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "СпециальностьПоОбразованию";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Образование.Специальность";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Специальность";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Специальность.Специальность";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "Профессия";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямЛичныхДанных + ".Профессии.Профессия";
	ОписаниеПоля.ДляПоиска = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

// Сведения о знании языков

Функция ДобавитьПолеСведенийОЗнанияхЯзыковФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЗнанияхЯзыковФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЗнанияхЯзыковФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОЗнанияхЯзыковФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык КАК Язык,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка КАК СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТЗнаниеЯзыков
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ФизическиеЛицаЗнаниеЯзыков
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык КАК Язык,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка КАК СтепеньЗнания
		|ПОМЕСТИТЬ ВТЗнаниеЯзыковДляОтборов
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ФизическиеЛицаЗнаниеЯзыков
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо
		|{ГДЕ
		|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо.*,
		|	ФизическиеЛицаЗнаниеЯзыков.Язык.*,
		|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык
		|ПОМЕСТИТЬ ВТЗнаниеЯзыка
		|ИЗ
		|	ВТЗнаниеЯзыковДляОтборов КАК ЗнаниеЯзыков
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнания) КАК СтепеньЗнания
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка
		|ИЗ
		|	ВТЗнаниеЯзыковДляОтборов КАК ЗнаниеЯзыков
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка КАК СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка1
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка1 КАК КодСтепениЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка1.СтепеньЗнанияЯзыкаКод
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
		|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка КАК СтепеньЗнанияЯзыка
		|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка2
		|ИЗ
		|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка2 КАК КодСтепениЗнанияЯзыка2
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка2.ФизическоеЛицо
		|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка2.СтепеньЗнанияЯзыкаКод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
		|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
		|ГДЕ
		|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗнаниеЯзыков.ФизическоеЛицо,
		|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗнаниеЯзыков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСтепениЗнанияЯзыка1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСтепениЗнанияЯзыка2";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка1.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка2 КАК СтепеньЗнанияЯзыка2
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепеньЗнанияЯзыка2.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗнаниеЯзыка КАК ВладенияЯзыком
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВладенияЯзыком.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка КАК СтепениВладенияЯзыком
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СтепениВладенияЯзыком.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТЗнаниеЯзыковДляОтборов");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТЗнаниеЯзыка");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтепеньЗнанияЯзыка");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтепеньЗнанияЯзыка1");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСтепеньЗнанияЯзыка2");
	
КонецПроцедуры

Функция НеобходимыСведенияОЗнанияхЯзыковФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ВладеемыйЯзык1")
		Или ИмяПоля = ВРег("ВладеемыйЯзык1СтепеньЗнания")
		Или ИмяПоля = ВРег("ВладеемыйЯзык2")
		Или ИмяПоля = ВРег("ВладеемыйЯзык2СтепеньЗнания")
		Или ИмяПоля = ВРег("Язык")
		Или ИмяПоля = ВРег("СтепеньЗнания");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОЗнанииЯзыковФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("ВладеемыйЯзык") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Язык";
	ИначеЕсли ИмяПоля = ВРег("СтепеньЗнанияЯзыка") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "СтепеньЗнанияЯзыка";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ЗнаниеЯзыковФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОЗнанииЯзыковФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык1СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.Язык";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВладеемыйЯзык2СтепеньЗнания") Тогда
		ПутьКДанным = "	СтепеньЗнанияЯзыка2.СтепеньЗнанияЯзыка";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Язык") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ВладенияЯзыком.Язык, ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СтепеньЗнания") Тогда
		ПутьКДанным = "	ЕСТЬNULL(СтепениВладенияЯзыком.СтепеньЗнания, ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка))";
	КонецЕсли;
		
	Возврат ПутьКДанным;
		
КонецФункции

// Сведения об образовании

Функция ДобавитьПолеСведенийОбОбразованииФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	ВидОбразования = Неопределено;
	
	Если НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОбОбразовании";
		
	ИначеЕсли НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОВысшемОбразовании";
		
	ИначеЕсли НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ВидОбразования = "СведенияОПослевузовскомОбразовании";
		
	КонецЕсли;
	
	Если ДобавленоПолеСведений Тогда
		
		СведенияОбОбразованииФизическихЛиц = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
		Если СведенияОбОбразованииФизическихЛиц = Неопределено Тогда
			СведенияОбОбразованииФизическихЛиц = Новый Соответствие;
		КонецЕсли; 
		
		СведенияОбОбразованииФизическихЛиц.Вставить(ВидОбразования, Истина);
		ИсточникиДанных.Вставить("СведенияОбОбразованииФизическихЛиц", СведенияОбОбразованииФизическихЛиц);
		
		ПутьКДанным = ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли; 
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОбОбразованииФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	ВидыОбразований = ИсточникиДанных.Получить("СведенияОбОбразованииФизическихЛиц");
	Если ВидыОбразований = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ИндексЗапросаОбразований = 0;
	
	ВТКУничтожению = Новый Массив;
	ВТКУничтожению.Добавить("ВТОбразованияФизическихЛиц");
	
	ЗапросВТ = ЗапросВТОбразованияФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, "ВТОбразованияФизическихЛиц");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗапросВТ.Текст);
	ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
	
	ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
	
	Если ВидыОбразований.Получить("СведенияОбОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТОбразованияФизическихЛицПервые");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетВидаОбразования");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетГОдаОкончания");
		ВТКУничтожению.Добавить("ВТОбразование1ПриоритетНомераСтроки");
		
		ВТКУничтожению.Добавить("ВТОбразованияФизическихЛицВторые");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетВидаОбразования");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетГОдаОкончания");
		ВТКУничтожению.Добавить("ВТОбразование2ПриоритетНомераСтроки");
		
		ЗапросВажностиОбразований = Новый Массив;
		
		ПервыйЗапрос = Истина;
		ВидыОбразованийПоВажности = ВидыОбразованийПоВажности();
		Для Индекс = 0 По ВидыОбразованийПоВажности.Количество() - 1 Цикл
			
			Если Не ПервыйЗапрос Тогда
				ЗапросВажностиОбразований.Добавить("ОБЪЕДИНИТЬ");
			КонецЕсли;
			
			ЗапросВажностиОбразований.Добавить("ВЫБРАТЬ
				|	" + Индекс + " КАК Важность,
				|	&ПараметрВТОбразованияФизическихЛиц" + Индекс + " КАК ВидОбразования");
			
			Запрос.УстановитьПараметр("ПараметрВТОбразованияФизическихЛиц" + Индекс, ВидыОбразованийПоВажности[Индекс]);
			
			Если ПервыйЗапрос Тогда
				ЗапросВажностиОбразований.Добавить("ПОМЕСТИТЬ ВТВидыОбразованийПоВажности");
			КонецЕсли;
			
			ПервыйЗапрос = Ложь;
			
		КонецЦикла;
		
		ВТКУничтожению.Добавить("ВТВидыОбразованийПоВажности");
		
		ТекстЗапросаСведений =
			СтрСоединить(ЗапросВажностиОбразований, Символы.ПС)
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ "ВЫБРАТЬ
			  |	ОбразованияФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	ОбразованияФЛ.ВидОбразования КАК ВидОбразования,
			  |	ОбразованияФЛ.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
			  |	ОбразованияФЛ.ВидДополнительногоОбучения КАК ВидДополнительногоОбучения,
			  |	ОбразованияФЛ.УчебноеЗаведение КАК УчебноеЗаведение,
			  |	ОбразованияФЛ.Начало КАК Начало,
			  |	ОбразованияФЛ.Окончание КАК Окончание,
			  |	ОбразованияФЛ.Специальность КАК СпециальностьПоОбразованию
			  |ПОМЕСТИТЬ ВТОбразованияДляОтборов
			  |ИЗ
			  |	ВТОбразованияФизическихЛиц КАК ОбразованияФЛ
			  |{ГДЕ
			  |	ОбразованияФЛ.ВидОбразования,
			  |	ОбразованияФЛ.ВидПослевузовскогоОбразования,
			  |	ОбразованияФЛ.ВидДополнительногоОбучения,
			  |	ОбразованияФЛ.УчебноеЗаведение,
			  |	ОбразованияФЛ.Начало,
			  |	ОбразованияФЛ.Окончание,
			  |	ОбразованияФЛ.Специальность}
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ОбразованияФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	МАКСИМУМ(ОбразованияФЛ.ВидОбразования) КАК ВидОбразования,
			  |	МАКСИМУМ(ОбразованияФЛ.ВидПослевузовскогоОбразования) КАК ВидПослевузовскогоОбразования,
			  |	МАКСИМУМ(ОбразованияФЛ.ВидДополнительногоОбучения) КАК ВидДополнительногоОбучения,
			  |	МАКСИМУМ(ОбразованияФЛ.УчебноеЗаведение) КАК УчебноеЗаведение,
			  |	МАКСИМУМ(ОбразованияФЛ.Начало) КАК Начало,
			  |	МАКСИМУМ(ОбразованияФЛ.Окончание) КАК Окончание,
			  |	МАКСИМУМ(ОбразованияФЛ.СпециальностьПоОбразованию) КАК СпециальностьПоОбразованию
			  |ПОМЕСТИТЬ ВТОбразования
			  |ИЗ
			  |	ВТОбразованияДляОтборов КАК ОбразованияФЛ
			  |{ГДЕ
			  |	ОбразованияФЛ.ВидОбразования,
			  |	ОбразованияФЛ.ВидПослевузовскогоОбразования,
			  |	ОбразованияФЛ.ВидДополнительногоОбучения,
			  |	ОбразованияФЛ.УчебноеЗаведение,
			  |	ОбразованияФЛ.Начало,
			  |	ОбразованияФЛ.Окончание,
			  |	ОбразованияФЛ.СпециальностьПоОбразованию}
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	ОбразованияФЛ.ФизическоеЛицо
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ОбразованияФЛ.Ссылка КАК Ссылка,
			  |	ОбразованияФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	ВЫРАЗИТЬ(ОбразованияФЛ.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			  |	ОбразованияФЛ.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
			  |	ОбразованияФЛ.ВидДополнительногоОбучения КАК ВидДополнительногоОбучения,
			  |	ОбразованияФЛ.УчебноеЗаведение КАК УчебноеЗаведение,
			  |	ОбразованияФЛ.Начало КАК Начало,
			  |	ОбразованияФЛ.Окончание КАК Окончание,
			  |	ОбразованияФЛ.Специальность КАК Специальность,
			  |	ОбразованияФЛ.Квалификация КАК Квалификация,
			  |	ОбразованияФЛ.НаименованиеКурса КАК НаименованиеКурса,
			  |	ОбразованияФЛ.КоличествоЧасов КАК КоличествоЧасов,
			  |	ОбразованияФЛ.ВидДокумента КАК ВидДокумента,
			  |	ОбразованияФЛ.Серия КАК Серия,
			  |	ОбразованияФЛ.Номер КАК Номер,
			  |	ОбразованияФЛ.ДатаВыдачи КАК ДатаВыдачи,
			  |	ЕСТЬNULL(ВидыОбразованийПоВажности.Важность, 0) КАК Важность
			  |ПОМЕСТИТЬ ВТОбразованияФизическихЛицПервые
			  |ИЗ
			  |	ВТОбразованияФизическихЛиц КАК ОбразованияФЛ
			  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыОбразованийПоВажности КАК ВидыОбразованийПоВажности
			  |		ПО ОбразованияФЛ.ВидОбразования = ВидыОбразованийПоВажности.ВидОбразования
			  |ГДЕ
			  |	ОбразованияФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееОбщееОбразование))
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	МАКСИМУМ(Образования.Важность) КАК Важность
			  |ПОМЕСТИТЬ ВТОбразование1ПриоритетКодаВидаОбразования
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			  |	Образования.Важность КАК Важность
			  |ПОМЕСТИТЬ ВТОбразование1ПриоритетВидаОбразования
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетКодаВидаОбразования КАК Образование1ПриоритетКодаВидаОбразования
			  |		ПО Образования.ФизическоеЛицо = Образование1ПриоритетКодаВидаОбразования.ФизическоеЛицо
			  |			И Образования.Важность = Образование1ПриоритетКодаВидаОбразования.Важность
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.Важность
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	Образования.ВидОбразования КАК ВидОбразования,
			  |	МАКСИМУМ(Образования.Окончание) КАК Окончание
			  |ПОМЕСТИТЬ ВТОбразование1ПриоритетГОдаОкончания
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетВидаОбразования КАК Образование1ПриоритетВидаОбразования
			  |		ПО Образования.ФизическоеЛицо = Образование1ПриоритетВидаОбразования.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование1ПриоритетВидаОбразования.ВидОбразования
			  |			И Образования.Важность = Образование1ПриоритетВидаОбразования.Важность
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.ВидОбразования
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	Образования.ВидОбразования КАК ВидОбразования,
			  |	Образования.Окончание КАК Окончание,
			  |	МИНИМУМ(Образования.Ссылка) КАК Ссылка
			  |ПОМЕСТИТЬ ВТОбразование1ПриоритетНомераСтроки
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетГОдаОкончания КАК Образование1ПриоритетГОдаОкончания
			  |		ПО Образования.ФизическоеЛицо = Образование1ПриоритетГОдаОкончания.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование1ПриоритетГОдаОкончания.ВидОбразования
			  |			И Образования.Окончание = Образование1ПриоритетГОдаОкончания.Окончание
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.ВидОбразования,
			  |	Образования.Окончание
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.Ссылка КАК ОбразованиеПервое,
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование1ВидОбразования,
			  |	Образования.ВидПослевузовскогоОбразования КАК Образование1ВидПослевузовскогоОбразования,
			  |	Образования.ВидДополнительногоОбучения КАК Образование1ВидДополнительногоОбучения,
			  |	Образования.УчебноеЗаведение КАК Образование1УчебноеЗаведение,
			  |	Образования.Начало КАК Образование1Начало,
			  |	Образования.Окончание КАК Образование1Окончание,
			  |	Образования.Специальность КАК Образование1Специальность,
			  |	Образования.Квалификация КАК Образование1Квалификация,
			  |	Образования.НаименованиеКурса КАК Образование1НаименованиеКурса,
			  |	Образования.КоличествоЧасов КАК Образование1КоличествоЧасов,
			  |	Образования.ВидДокумента КАК Образование1ВидДокумента,
			  |	Образования.Серия КАК Образование1Серия,
			  |	Образования.Номер КАК Образование1Номер,
			  |	Образования.ДатаВыдачи КАК Образование1ДатаВыдачи
			  |ПОМЕСТИТЬ ВТОбразованиеПервое
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			  |		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование1ПриоритетНомераСтроки.ВидОбразования
			  |			И Образования.Окончание = Образование1ПриоритетНомераСтроки.Окончание
			  |			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	Образования.Ссылка КАК Ссылка,
			  |	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
			  |	Образования.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
			  |	Образования.ВидДополнительногоОбучения КАК ВидДополнительногоОбучения,
			  |	Образования.УчебноеЗаведение КАК УчебноеЗаведение,
			  |	Образования.Начало КАК Начало,
			  |	Образования.Окончание КАК Окончание,
			  |	Образования.Специальность КАК Специальность,
			  |	Образования.Квалификация КАК Квалификация,
			  |	Образования.НаименованиеКурса КАК НаименованиеКурса,
			  |	Образования.КоличествоЧасов КАК КоличествоЧасов,
			  |	Образования.ВидДокумента КАК ВидДокумента,
			  |	Образования.Серия КАК Серия,
			  |	Образования.Номер КАК Номер,
			  |	Образования.ДатаВыдачи КАК ДатаВыдачи,
			  |	Образования.Важность КАК Важность
			  |ПОМЕСТИТЬ ВТОбразованияФизическихЛицВторые
			  |ИЗ
			  |	ВТОбразованияФизическихЛицПервые КАК Образования
			  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
			  |		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
			  |			И Образования.Ссылка = Образование1ПриоритетНомераСтроки.Ссылка
			  |ГДЕ
			  |	Образование1ПриоритетНомераСтроки.Ссылка ЕСТЬ NULL
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	МАКСИМУМ(Образования.Важность) КАК Важность
			  |ПОМЕСТИТЬ ВТОбразование2ПриоритетКодаВидаОбразования
			  |ИЗ
			  |	ВТОбразованияФизическихЛицВторые КАК Образования
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	МАКСИМУМ(Образования.ВидОбразования) КАК ВидОбразования,
			  |	Образования.Важность КАК Важность
			  |ПОМЕСТИТЬ ВТОбразование2ПриоритетВидаОбразования
			  |ИЗ
			  |	ВТОбразованияФизическихЛицВторые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетКодаВидаОбразования КАК Образование2ПриоритетКодаВидаОбразования
			  |		ПО Образования.ФизическоеЛицо = Образование2ПриоритетКодаВидаОбразования.ФизическоеЛицо
			  |			И Образования.Важность = Образование2ПриоритетКодаВидаОбразования.Важность
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.Важность
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	Образования.ВидОбразования КАК ВидОбразования,
			  |	МАКСИМУМ(Образования.Окончание) КАК Окончание
			  |ПОМЕСТИТЬ ВТОбразование2ПриоритетГОдаОкончания
			  |ИЗ
			  |	ВТОбразованияФизическихЛицВторые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетВидаОбразования КАК Образование2ПриоритетВидаОбразования
			  |		ПО Образования.ФизическоеЛицо = Образование2ПриоритетВидаОбразования.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование2ПриоритетВидаОбразования.ВидОбразования
			  |			И Образования.Важность = Образование2ПриоритетВидаОбразования.Важность
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.ВидОбразования
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	Образования.ВидОбразования КАК ВидОбразования,
			  |	Образования.Окончание КАК Окончание,
			  |	МИНИМУМ(Образования.Ссылка) КАК Ссылка
			  |ПОМЕСТИТЬ ВТОбразование2ПриоритетНомераСтроки
			  |ИЗ
			  |	ВТОбразованияФизическихЛицВторые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетГОдаОкончания КАК Образование2ПриоритетГОдаОкончания
			  |		ПО Образования.ФизическоеЛицо = Образование2ПриоритетГОдаОкончания.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование2ПриоритетГОдаОкончания.ВидОбразования
			  |			И Образования.Окончание = Образование2ПриоритетГОдаОкончания.Окончание
			  |
			  |СГРУППИРОВАТЬ ПО
			  |	Образования.ФизическоеЛицо,
			  |	Образования.ВидОбразования,
			  |	Образования.Окончание
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	Образования.Ссылка КАК ОбразованиеВторое,
			  |	Образования.ФизическоеЛицо КАК ФизическоеЛицо,
			  |	ВЫРАЗИТЬ(Образования.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК Образование2ВидОбразования,
			  |	Образования.ВидПослевузовскогоОбразования КАК Образование2ВидПослевузовскогоОбразования,
			  |	Образования.ВидДополнительногоОбучения КАК Образование2ВидДополнительногоОбучения,
			  |	Образования.УчебноеЗаведение КАК Образование2УчебноеЗаведение,
			  |	Образования.Начало КАК Образование2Начало,
			  |	Образования.Окончание КАК Образование2Окончание,
			  |	Образования.Специальность КАК Образование2Специальность,
			  |	Образования.Квалификация КАК Образование2Квалификация,
			  |	Образования.НаименованиеКурса КАК Образование2НаименованиеКурса,
			  |	Образования.КоличествоЧасов КАК Образование2КоличествоЧасов,
			  |	Образования.ВидДокумента КАК Образование2ВидДокумента,
			  |	Образования.Серия КАК Образование2Серия,
			  |	Образования.Номер КАК Образование2Номер,
			  |	Образования.ДатаВыдачи КАК Образование2ДатаВыдачи
			  |ПОМЕСТИТЬ ВТОбразованиеВторое
			  |ИЗ
			  |	ВТОбразованияФизическихЛицВторые КАК Образования
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетНомераСтроки КАК Образование2ПриоритетНомераСтроки
			  |		ПО Образования.ФизическоеЛицо = Образование2ПриоритетНомераСтроки.ФизическоеЛицо
			  |			И Образования.ВидОбразования = Образование2ПриоритетНомераСтроки.ВидОбразования
			  |			И Образования.Окончание = Образование2ПриоритетНомераСтроки.Окончание
			  |			И Образования.Ссылка = Образование2ПриоритетНомераСтроки.Ссылка";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеПервое КАК Образование1
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование1.ФизическоеЛицо}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеВторое КАК Образование2
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образование2.ФизическоеЛицо}
			|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразования КАК Образования
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Образования.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразованияДляОтборов");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразования");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразованиеПервое");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТОбразованиеВторое");
	
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОВысшемОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТВысшиеОбразованияФизическихЛиц");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.Ссылка КАК Ссылка,
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение КАК УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность КАК Специальность,
			|	ОбразованиеФЛ.Начало КАК Начало,
			|	ОбразованиеФЛ.Окончание КАК Окончание,
			|	ОбразованиеФЛ.ВидДокумента КАК ВидДокумента,
			|	ОбразованиеФЛ.Серия КАК Серия,
			|	ОбразованиеФЛ.Номер КАК Номер,
			|	ОбразованиеФЛ.ДатаВыдачи КАК ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация КАК Квалификация,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбразованиеФЛПредыдущие.Окончание) КАК ПорядокПолучения,
			|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТВысшиеОбразованияФизическихЛиц
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованияФизическихЛиц КАК ОбразованиеФЛПредыдущие
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ОбразованиеФЛПредыдущие.ФизическоеЛицо
			|			И (ОбразованиеФЛПредыдущие.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура)))
			|			И (ОбразованиеФЛ.Окончание > ОбразованиеФЛПредыдущие.Окончание
			|				ИЛИ ОбразованиеФЛ.Окончание = ОбразованиеФЛПредыдущие.Окончание
			|					И ОбразованиеФЛ.УчебноеЗаведение < ОбразованиеФЛПредыдущие.УчебноеЗаведение)
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеБакалавриат), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеСпециалитетМагистратура))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.Ссылка,
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.УчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность,
			|	ОбразованиеФЛ.Начало,
			|	ОбразованиеФЛ.Окончание,
			|	ОбразованиеФЛ.ВидДокумента,
			|	ОбразованиеФЛ.Серия,
			|	ОбразованиеФЛ.Номер,
			|	ОбразованиеФЛ.ДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВысшиеОбразованияФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(ВысшиеОбразованияФЛ.НомерЗаписи) КАК НомерЗаписи
			|ПОМЕСТИТЬ ВТНомераЗаписейВысшегоОбразования
			|ИЗ
			|	ВТВысшиеОбразованияФизическихЛиц КАК ВысшиеОбразованияФЛ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВысшиеОбразованияФЛ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВысшиеОбразованияФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВысшиеОбразованияФЛ.Ссылка КАК ОбразованиеВысшее,
			|	ВысшиеОбразованияФЛ.УчебноеЗаведение КАК ВысшееОбразованиеУчебноеЗаведение,
			|	ВысшиеОбразованияФЛ.Специальность КАК ВысшееОбразованиеСпециальность,
			|	ВысшиеОбразованияФЛ.Начало КАК ВысшееОбразованиеНачало,
			|	ВысшиеОбразованияФЛ.Окончание КАК ВысшееОбразованиеОкончание,
			|	ВысшиеОбразованияФЛ.ВидДокумента КАК ВысшееОбразованиеВидДокумента,
			|	ВысшиеОбразованияФЛ.Серия КАК ВысшееОбразованиеСерия,
			|	ВысшиеОбразованияФЛ.Номер КАК ВысшееОбразованиеНомер,
			|	ВысшиеОбразованияФЛ.ДатаВыдачи КАК ВысшееОбразованиеДатаВыдачи,
			|	ВысшиеОбразованияФЛ.Квалификация КАК ВысшееОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТВысшееОбразование
			|ИЗ
			|	ВТВысшиеОбразованияФизическихЛиц КАК ВысшиеОбразованияФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераЗаписейВысшегоОбразования КАК ВТНомераЗаписейВысшегоОбразования
			|		ПО ВысшиеОбразованияФЛ.ФизическоеЛицо = ВТНомераЗаписейВысшегоОбразования.ФизическоеЛицо
			|			И ВысшиеОбразованияФЛ.НомерЗаписи = ВТНомераЗаписейВысшегоОбразования.НомерЗаписи
			|ГДЕ
			|	ВысшиеОбразованияФЛ.ПорядокПолучения = 0";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТВысшееОбразование КАК ВысшееОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ВысшееОбразование.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТВысшееОбразование");
		
	КонецЕсли;
	
	Если ВидыОбразований.Получить("СведенияОПослевузовскомОбразовании") <> Неопределено Тогда
		
		ВТКУничтожению.Добавить("ВТПериодыПослевузовскогоОбразования");
		ВТКУничтожению.Добавить("ВТНомераСтрокПослевузовскогоОбразования");
		
		ТекстЗапросаСведений = 
			"ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(ОбразованиеФЛ.Окончание) КАК Окончание
			|ПОМЕСТИТЬ ВТПериодыПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|ГДЕ
			|	ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание КАК Окончание,
			|	МАКСИМУМ(ОбразованиеФЛ.Ссылка) КАК Ссылка
			|ПОМЕСТИТЬ ВТНомераСтрокПослевузовскогоОбразования
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПослевузовскогоОбразования КАК ПериодыПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = ПериодыПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = ПериодыПослевузовскогоОбразования.Окончание
			|			И (ОбразованиеФЛ.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразованиеПодготовкаКадровВысшейКвалификации), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ОбразованиеФЛ.ФизическоеЛицо,
			|	ОбразованиеФЛ.Окончание
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОбразованиеФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОбразованиеФЛ.Ссылка КАК ОбразованиеПослевузовское,
			|	ОбразованиеФЛ.ВидОбразования КАК ПослевузовскоеОбразованиеВидОбразования,
			|	ОбразованиеФЛ.ВидПослевузовскогоОбразования КАК ПослевузовскоеОбразованиеВидПослевузовскогоОбразования,
			|	ОбразованиеФЛ.УчебноеЗаведение КАК ПослевузовскоеОбразованиеУчебноеЗаведение,
			|	ОбразованиеФЛ.Специальность КАК ПослевузовскоеОбразованиеСпециальность,
			|	ОбразованиеФЛ.ВидДокумента КАК ПослевузовскоеОбразованиеВидДокумента,
			|	ОбразованиеФЛ.Начало КАК ПослевузовскоеОбразованиеНачало,
			|	ОбразованиеФЛ.Окончание КАК ПослевузовскоеОбразованиеОкончание,
			|	ОбразованиеФЛ.Серия КАК ПослевузовскоеОбразованиеСерия,
			|	ОбразованиеФЛ.Номер КАК ПослевузовскоеОбразованиеНомер,
			|	ОбразованиеФЛ.ДатаВыдачи КАК ПослевузовскоеОбразованиеДатаВыдачи,
			|	ОбразованиеФЛ.Квалификация КАК ПослевузовскоеОбразованиеКвалификация
			|ПОМЕСТИТЬ ВТПослевузовскоеОбразование
			|ИЗ
			|	ВТОбразованияФизическихЛиц КАК ОбразованиеФЛ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокПослевузовскогоОбразования КАК НомераСтрокПослевузовскогоОбразования
			|		ПО ОбразованиеФЛ.ФизическоеЛицо = НомераСтрокПослевузовскогоОбразования.ФизическоеЛицо
			|			И ОбразованиеФЛ.Окончание = НомераСтрокПослевузовскогоОбразования.Окончание
			|			И ОбразованиеФЛ.Ссылка = НомераСтрокПослевузовскогоОбразования.Ссылка";
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ТекстЗапросаСведений);
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Вставить(ИндексЗапросаОбразований, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		ИндексЗапросаОбразований = ИндексЗапросаОбразований + 1;
		
		ЧастиЗапроса.Добавить(
			"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПослевузовскоеОбразование КАК ПослевузовскоеОбразование
			|		ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПослевузовскоеОбразование.ФизическоеЛицо}");
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПослевузовскоеОбразование");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ЗапросВТ.Текст, ВТКУничтожению);
	
КонецПроцедуры

Функция НеобходимыСведенияОбОбразованияхФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат НеобходимыСведенияОбОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОВысшемОбразованииФизическихЛиц(ИмяПоля)
		Или НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(ИмяПоля);
		
КонецФункции

Функция НеобходимыСведенияОбОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбразованиеПервое")
		Или ИмяПоля = ВРег("Образование1УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование1ВидОбразования")
		Или ИмяПоля = ВРег("Образование1Специальность")
		Или ИмяПоля = ВРег("Образование1Начало")
		Или ИмяПоля = ВРег("Образование1Окончание")
		Или ИмяПоля = ВРег("Образование1ВидДокумента")
		Или ИмяПоля = ВРег("Образование1Серия")
		Или ИмяПоля = ВРег("Образование1Номер")
		Или ИмяПоля = ВРег("Образование1ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование1Квалификация")
		Или ИмяПоля = ВРег("ОбразованиеВторое")
		Или ИмяПоля = ВРег("Образование2УчебноеЗаведение")
		Или ИмяПоля = ВРег("Образование2ВидОбразования")
		Или ИмяПоля = ВРег("Образование2Специальность")
		Или ИмяПоля = ВРег("Образование2Начало")
		Или ИмяПоля = ВРег("Образование2Окончание")
		Или ИмяПоля = ВРег("Образование2ВидДокумента")
		Или ИмяПоля = ВРег("Образование2Серия")
		Или ИмяПоля = ВРег("Образование2Номер")
		Или ИмяПоля = ВРег("Образование2ДатаВыдачи")
		Или ИмяПоля = ВРег("Образование2Квалификация")
		Или ИмяПоля = ВРег("УчебноеЗаведение")
		Или ИмяПоля = ВРег("ВидОбразования")
		Или ИмяПоля = ВРег("ВидПослевузовскогоОбразования")
		Или ИмяПоля = ВРег("ВидДополнительногоОбучения")
		Или ИмяПоля = ВРег("Начало")
		Или ИмяПоля = ВРег("Окончание")
		Или ИмяПоля = ВРег("СпециальностьПоОбразованию");
		
КонецФункции

Функция НеобходимыСведенияОВысшемОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбразованиеВысшее")
		Или ИмяПоля = ВРег("ВысшееОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНачало")
		Или ИмяПоля = ВРег("ВысшееОбразованиеОкончание")
		Или ИмяПоля = ВРег("ВысшееОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ВысшееОбразованиеСерия")
		Или ИмяПоля = ВРег("ВысшееОбразованиеНомер")
		Или ИмяПоля = ВРег("ВысшееОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ВысшееОбразованиеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОПослевузовскомОбразованииФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ОбразованиеПослевузовское")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеУчебноеЗаведение")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидПослевузовскогоОбразования")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСпециальность")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНачало")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеОкончание")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеВидДокумента")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеСерия")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеНомер")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеДатаВыдачи")
		Или ИмяПоля = ВРег("ПослевузовскоеОбразованиеКвалификация");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОбОбразованииФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	
	НеобходимыСведенияОбОбразовании = ИмяПоля = ВРег("ВидОбразования")
		Или ИмяПоля = ВРег("ВидПослевузовскогоОбразования")
		Или ИмяПоля = ВРег("УчебноеЗаведение")
		Или ИмяПоля = ВРег("Специальность")
		Или ИмяПоля = ВРег("ВидДокумента")
		Или ИмяПоля = ВРег("Серия")
		Или ИмяПоля = ВРег("Номер")
		Или ИмяПоля = ВРег("ДатаВыдачи")
		Или ИмяПоля = ВРег("Квалификация")
		Или ИмяПоля = ВРег("Начало")
		Или ИмяПоля = ВРег("Окончание")
		Или ИмяПоля = ВРег("НаименованиеКурса")
		Или ИмяПоля = ВРег("КоличествоЧасов")
		Или ИмяПоля = ВРег("ВидДополнительногоОбучения")
		Или ИмяПоля = ВРег("ДокументОснование");
		
	Если НеобходимыСведенияОбОбразовании Тогда
		
		Если УсловиеПоиска.ОтносительныйПуть
			И ИмяПоля = ВРег("ВидОбразования")
			И ТипЗнч(УсловиеПоиска.ПравоеЗначение) = Тип("СправочникСсылка.ВидыОбразованияФизическихЛиц") Тогда
			
			УсловиеВидаСравнения = СокрЛП(УсловиеПоиска.ВидСравнения);
			Если УсловиеВидаСравнения = "<"
				Или УсловиеВидаСравнения = "<="
				Или УсловиеВидаСравнения = ">"
				Или УсловиеВидаСравнения = ">=" Тогда
				
				ВидыОбразованийПоВажности = ВидыОбразованийПоВажности();
				
				ИндексТекущегоВида = ВидыОбразованийПоВажности.Найти(УсловиеПоиска.ПравоеЗначение);
				Если ИндексТекущегоВида <> Неопределено Тогда
					
					Если ИндексТекущегоВида = 0 И УсловиеВидаСравнения = ">=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = 0 И УсловиеВидаСравнения = "<" Тогда
						ПравоеЗначение = Новый Массив;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = "<=" Тогда
						ПравоеЗначение = ВидыОбразованийПоВажности;
					ИначеЕсли ИндексТекущегоВида = ВидыОбразованийПоВажности.Количество() - 1 И УсловиеВидаСравнения = ">" Тогда
						ПравоеЗначение = Новый Массив;
					Иначе
						
						ПравоеЗначение = Новый Массив;
						
						Если УсловиеВидаСравнения = ">" Тогда
							НачальноеЗначение = ИндексТекущегоВида + 1;
						ИначеЕсли УсловиеВидаСравнения = ">=" Тогда
							НачальноеЗначение = ИндексТекущегоВида;
						Иначе
							НачальноеЗначение = 0;
						КонецЕсли; 
						
						Если УсловиеВидаСравнения = "<" Тогда
							КонечноеЗначение = ИндексТекущегоВида - 1;
						ИначеЕсли УсловиеВидаСравнения = "<=" Тогда
							КонечноеЗначение = ИндексТекущегоВида;
						Иначе
							КонечноеЗначение = ВидыОбразованийПоВажности.Количество() - 1;
						КонецЕсли;
						
						Для ИндексЭлемента = НачальноеЗначение По КонечноеЗначение Цикл
							ПравоеЗначение.Добавить(ВидыОбразованийПоВажности.Получить(ИндексЭлемента));
						КонецЦикла;
						
					КонецЕсли;
					
					УсловиеПоиска.ПравоеЗначение = ПравоеЗначение;
					УсловиеПоиска.ВидСравнения = "В";
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "Справочник.ОбразованиеФизическихЛиц", УсловиеПоиска);
		КритерийДобавлен = Истина;
		
	КонецЕсли; 
	
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ОбразованиеПервое") Тогда
		ПутьКДанным = "Образование1.ОбразованиеПервое"
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОбразованиеВторое") Тогда
		ПутьКДанным = "Образование2.ОбразованиеВторое";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОбразованиеВысшее") Тогда
		ПутьКДанным = "ВысшееОбразование.ОбразованиеВысшее";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ОбразованиеПослевузовское") Тогда
		ПутьКДанным = "ПослевузовскоеОбразование.ОбразованиеПослевузовское";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("УчебноеЗаведение") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.УчебноеЗаведение, ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидОбразования") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.ВидОбразования, ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидПослевузовскогоОбразования") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.ВидПослевузовскогоОбразования, ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ВидДополнительногоОбучения") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.ВидДополнительногоОбучения, ЗНАЧЕНИЕ(Перечисление.ВидыПрофессиональнойПодготовки.ПустаяСсылка))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Начало") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.Начало, ДАТАВРЕМЯ(1, 1, 1))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Окончание") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.Окончание, ДАТАВРЕМЯ(1, 1, 1))";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("СпециальностьПоОбразованию") Тогда
		ПутьКДанным = "ЕСТЬNULL(Образования.СпециальностьПоОбразованию, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка))";
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование1")) > 0 Тогда
		ПутьКДанным = "Образование1." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("Образование2")) > 0 Тогда
		ПутьКДанным = "Образование2." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ВысшееОбразование")) > 0 Тогда
		ПутьКДанным = "ВысшееОбразование." + ИмяПоля;
	ИначеЕсли СтрНайти(ИмяПоляВВерхнемРегистре, ВРег("ПослевузовскоеОбразование")) > 0 Тогда
		ПутьКДанным = "ПослевузовскоеОбразование." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о специальностях

Функция ДобавитьПолеСведенийОСпециальностяхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОСпециальностяхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОСпециальностяхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОСпециальностяхФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОСпециальностяхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОСпециальностяхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	СпециальностиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СпециальностиФизическихЛиц.Специальность КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальности
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпециальностиФизическихЛиц КАК СпециальностиФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = СпециальностиФизическихЛиц.ФизическоеЛицо
		|			И (ТаблицаОтборов.Период МЕЖДУ СпециальностиФизическихЛиц.Период И ВЫБОР
		|				КОГДА СпециальностиФизическихЛиц.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|				ИНАЧЕ СпециальностиФизическихЛиц.ДействуетПо
		|			КОНЕЦ)
		|{ГДЕ
		|	СпециальностиФизическихЛиц.ФизическоеЛицо.*,
		|	СпециальностиФизическихЛиц.Специальность.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Специальности.Период КАК Период,
		|	Специальности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Специальности.Специальность) КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальностьФизическихЛиц
		|ИЗ
		|	ВТСпециальности КАК Специальности
		|
		|СГРУППИРОВАТЬ ПО
		|	Специальности.Период,
		|	Специальности.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Специальности.Период КАК Период,
		|	Специальности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Специальности.Специальность.Код) КАК Специальность1Код
		|ПОМЕСТИТЬ ВТКодСпециальности1
		|ИЗ
		|	ВТСпециальности КАК Специальности
		|
		|СГРУППИРОВАТЬ ПО
		|	Специальности.Период,
		|	Специальности.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Специальности.Период КАК Период,
		|	Специальности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Специальности.Специальность) КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальность1
		|ИЗ
		|	ВТСпециальности КАК Специальности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСпециальности1 КАК КодСпециальности1
		|		ПО Специальности.ФизическоеЛицо = КодСпециальности1.ФизическоеЛицо
		|			И Специальности.Период = КодСпециальности1.Период
		|			И Специальности.Специальность.Код = КодСпециальности1.Специальность1Код
		|
		|СГРУППИРОВАТЬ ПО
		|	Специальности.Период,
		|	Специальности.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Специальности.Период КАК Период,
		|	Специальности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Специальности.Специальность.Код) КАК Специальность2Код
		|ПОМЕСТИТЬ ВТКодСпециальности2
		|ИЗ
		|	ВТСпециальности КАК Специальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальность1 КАК Специальность1
		|		ПО Специальности.ФизическоеЛицо = Специальность1.ФизическоеЛицо
		|			И Специальности.Период = Специальность1.Период
		|			И Специальности.Специальность = Специальность1.Специальность
		|ГДЕ
		|	Специальность1.Специальность ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Специальности.Период,
		|	Специальности.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Специальности.Период КАК Период,
		|	Специальности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Специальности.Специальность) КАК Специальность
		|ПОМЕСТИТЬ ВТСпециальность2
		|ИЗ
		|	ВТСпециальности КАК Специальности
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпециальность1 КАК Специальность1
		|		ПО Специальности.ФизическоеЛицо = Специальность1.ФизическоеЛицо
		|			И Специальности.Период = Специальность1.Период
		|			И Специальности.Специальность = Специальность1.Специальность
		|ГДЕ
		|	Специальность1.Специальность ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Специальности.Период,
		|	Специальности.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСпециальности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСпециальности1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодСпециальности2";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальность1 КАК Специальность1
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Специальность1.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = Специальность1.Период}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальность2 КАК Специальность2
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Специальность2.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = Специальность2.Период}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальностьФизическихЛиц КАК СпециальностьФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = СпециальностьФизическихЛиц.ФизическоеЛицо
		|		И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СпециальностьФизическихЛиц.Период}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСпециальностьФизическихЛиц");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСпециальность1");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСпециальность2");
	
КонецПроцедуры

Функция НеобходимыСведенияОСпециальностяхФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Специальность1")
		Или ИмяПоля = ВРег("Специальность2")
		Или ИмяПоля = ВРег("Специальность");
		
КонецФункции

Функция ПутьКДаннымСведенийОСпециальностяхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Специальность1") Тогда
		ПутьКДанным = "	Специальность1.Специальность";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Специальность2") Тогда
		ПутьКДанным = "	Специальность2.Специальность";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Специальность") Тогда
		ПутьКДанным = "	ЕСТЬNULL(СпециальностьФизическихЛиц.Специальность, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка))";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Сведения о профессиях

Функция ДобавитьПолеСведенийОПрофессияхФизическихЛиц(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОПрофессияхФизическихЛиц(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОПрофессияхФизическихЛиц", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОПрофессияхФизическихЛиц(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОПрофессияхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОПрофессияхФизическихЛиц") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаСведений =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрофессииФизическихЛиц.Профессия КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессии
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрофессииФизическихЛиц КАК ПрофессииФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ПрофессииФизическихЛиц.ФизическоеЛицо
		|{ГДЕ
		|	ПрофессииФизическихЛиц.ФизическоеЛицо.*,
		|	ПрофессииФизическихЛиц.Профессия.*}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия) КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессияФизическихЛиц
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия1Код
		|ПОМЕСТИТЬ ВТКодПрофессии1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия) КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессия1
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии1 КАК КодПрофессии1
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии1.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии1.Профессия1Код
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия2Код
		|ПОМЕСТИТЬ ВТКодПрофессии2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Профессии.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Профессии.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Профессии.Профессия КАК Профессия
		|ПОМЕСТИТЬ ВТПрофессия2
		|ИЗ
		|	ВТПрофессии КАК Профессии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии2 КАК КодПрофессии2
		|		ПО Профессии.ФизическоеЛицо = КодПрофессии2.ФизическоеЛицо
		|			И Профессии.Профессия.Код = КодПрофессии2.Профессия2Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
		|			И Профессии.Профессия = Профессия1.Профессия
		|ГДЕ
		|	Профессия1.Профессия ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрофессии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодПрофессии1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКодПрофессии2";
		
	ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапросаСведений, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаСведений, ТолькоРазрешенные);
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаСведений);
	ЧастиЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	ЧастиЗапроса.Добавить(
		"	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия1.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия2 КАК Профессия2
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = Профессия2.ФизическоеЛицо}
		|	{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессияФизическихЛиц КАК ПрофессияФизическихЛиц
		|	ПО " + КадровыйУчет.ПутьКПолюФизическоеЛицо("ТаблицаОтборов", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо) + " = ПрофессияФизическихЛиц.ФизическоеЛицо}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПрофессияФизическихЛиц");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПрофессия1");
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТПрофессия2");
	
КонецПроцедуры

Функция НеобходимыСведенияОПрофессияхФизическихЛиц(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Профессия1")
		Или ИмяПоля = ВРег("Профессия2")
		Или ИмяПоля = ВРег("Профессия");
		
КонецФункции

Функция ДобавитьКритерийПоискаПоСведениямОПрофессияхФизическихЛиц(КритерииПоиска, УсловиеПоиска) Экспорт
	
	КритерийДобавлен = Ложь;
	
	ИмяПоля = ВРег(УсловиеПоиска.ЛевоеЗначение);
	Если ИмяПоля = ВРег("Профессия") Тогда
		КритерийДобавлен = Истина;
		УсловиеПоиска.ЛевоеЗначение = "Профессия";
	КонецЕсли;
	
	Если КритерийДобавлен Тогда
		КадровыйУчет.ДобавитьКритерийПоискаСотрудников(КритерииПоиска, "РегистрСведений.ПрофессииФизическихЛиц", УсловиеПоиска);
	КонецЕсли; 
		
	Возврат КритерийДобавлен;
	
КонецФункции

Функция ПутьКДаннымСведенийОПрофессияхФизическихЛиц(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("Профессия1") Тогда
		ПутьКДанным = "	Профессия1.Профессия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Профессия2") Тогда
		ПутьКДанным = "	Профессия2.Профессия";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("Профессия") Тогда
		ПутьКДанным = "	ЕСТЬNULL(ПрофессияФизическихЛиц.Профессия, ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка))";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает Учебное заведение, найденное по наименованию.
// Если не найдено, то возвращает СправочникСсылка.УчебныеЗаведения.ПустаяСсылка().
// Параметры:
//	НаименованиеУчебногоЗаведения - Строка.
//
// Возвращаемое значение:
//	СправочникСсылка.УчебныеЗаведения.
Функция УчебноеЗаведениеПоНаименованию(НаименованиеУчебногоЗаведения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчебныеЗаведения.Ссылка
	|ИЗ
	|	Справочник.УчебныеЗаведения КАК УчебныеЗаведения
	|ГДЕ
	|	УчебныеЗаведения.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеУчебногоЗаведения);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.УчебныеЗаведения.ПустаяСсылка();
	КонецЕсли; 
					
КонецФункции

Функция НоваяСпециальность(НаименованиеСпециальности, КлассификаторСпециальностей)
	
	Если КлассификаторСпециальностей.Количество() = 0 Тогда
		ЗагрузитьКлассификатор(КлассификаторСпециальностей, Справочники.КлассификаторСпециальностейПоОбразованию.ПолучитьМакет("КлассификаторСпециальностейПоОбразованию"), "Level");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СпециальностьСтроки = КлассификаторСпециальностей.НайтиСтроки(Новый Структура("NameEdit, Level", ВРег(СокрЛП(НаименованиеСпециальности)), "2")); 
	Если СпециальностьСтроки.Количество() > 0 Тогда
		Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.СоздатьЭлемент();
		Специальность.Наименование = СпециальностьСтроки[0].Name;
		Специальность.Код = СпециальностьСтроки[0].Code;
		Специальность.Записать();
	Иначе
		Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.СоздатьЭлемент();
		Специальность.Наименование = НаименованиеСпециальности;
		Специальность.УстановитьНовыйКод();
		Специальность.Записать();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Специальность.Ссылка;
	
КонецФункции

// Возвращает Специальность, найденную по наименованию.
// Если не найдено, то возвращает СправочникСсылка.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка().
// Параметры:
//	НаименованиеСпециальности - Строка.
//
// Возвращаемое значение:
//	СправочникСсылка.КлассификаторСпециальностейПоОбразованию.
Функция СпециальностьПоНаименованию(НаименованиеСпециальности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторСпециальностейПоОбразованию.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСпециальностейПоОбразованию КАК КлассификаторСпециальностейПоОбразованию
	|ГДЕ
	|	КлассификаторСпециальностейПоОбразованию.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеСпециальности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ЗапросВТСпециальностиФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальностиФизическихЛиц = "ВТСпециальностиФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СпециальностиФизическихЛиц", 
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСпециальностиФизическихЛиц);
	
	КадровыйУчет.УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Процедура ЗагрузитьКлассификатор(Классификатор, Макет, ДопИндекс = "")
	
	Классификатор = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	Классификатор.Колонки.Добавить("NameEdit");	
	Для Каждого СтрокаКлассификатора Из Классификатор Цикл
		СтрокаКлассификатора.NameEdit = ВРег(СокрЛП(СтрокаКлассификатора.Name));
	КонецЦикла;
	
	Классификатор.Индексы.Добавить("NameEdit");
	Если ЗначениеЗаполнено(ДопИндекс) Тогда
		Классификатор.Индексы.Добавить(ДопИндекс);
	КонецЕсли;
		
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.СтепениЗнанияЯзыка) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.СтепениЗнанияЯзыка.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ЯзыкиНародовМира) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ЗаполнитьСправочникПоКлассификатору";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбразованияФизическихЛиц) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ВидыОбразованияФизическихЛиц.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область СводныеДанныеФизическихЛиц

Процедура ОбновитьСтроковыеСведенияФизическогоЛица(СтроковыеСведения, ПричинаОбновления) Экспорт
	
	ОбновлятьВсеСведения = ПричинаОбновления = Неопределено;
	
	Если ПричинаОбновления = "ЗнаниеЯзыков" 
		Или ОбновлятьВсеСведения Тогда
		ОбновитьЗнаниеЯзыков(СтроковыеСведения);
	КонецЕсли;
	
	Если ПричинаОбновления = "Образование"
		Или ОбновлятьВсеСведения  Тогда
		ОбновитьОбучение(СтроковыеСведения);
	КонецЕсли;
	
	Если ПричинаОбновления = "Специальности"
		Или ОбновлятьВсеСведения Тогда
		ОбновитьСпециальности(СтроковыеСведения);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗнаниеЯзыков

Функция ОбновитьЗнаниеЯзыков(СтроковыеСведения)
	СтроковыеСведения.ЗнаниеЯзыков = СтрокаЗнаниеЯзыков(СтроковыеСведения.ФизическоеЛицо);
КонецФункции

Функция СтрокаЗнаниеЯзыков(ФизическоеЛицо)
	СтрокаЗнаниеЯзыков = РегистрыСведений.ЗнаниеЯзыковФизическихЛиц.ПредставлениеВладениеЯзыкамиФизическогоЛица(ФизическоеЛицо);	
	Возврат СтрокаЗнаниеЯзыков;
КонецФункции 

#КонецОбласти 

#Область Обучение

Функция ОбновитьОбучение(СтроковыеСведения)
	
	ДанныеОбОбучении = ДанныеОбОбучении(СтроковыеСведения.ФизическоеЛицо);
	
	Если ДанныеОбОбученииЗаполнены(ДанныеОбОбучении) Тогда
		СтроковыеСведения.Образование 			= СтрокаОбразование(ДанныеОбОбучении);
		СтроковыеСведения.ПовышениеКвалификации = СтрокаПовышениеКвалификации(ДанныеОбОбучении);
		СтроковыеСведения.Переподготовка 		= СтрокаПереподготовка(ДанныеОбОбучении);
	КонецЕсли;
	
КонецФункции

Функция ДанныеОбОбучении(ФизическоеЛицо)
	
	ДанныеОбОбразовании = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбразованиеФизическихЛиц.ВидОбразования КАК ВидОбразования,
	|	ОбразованиеФизическихЛиц.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
	|	ОбразованиеФизическихЛиц.УчебноеЗаведение КАК УчебноеЗаведение,
	|	ОбразованиеФизическихЛиц.Специальность КАК Специальность,
	|	ОбразованиеФизическихЛиц.ВидДокумента КАК ВидДокумента,
	|	ОбразованиеФизическихЛиц.Серия КАК Серия,
	|	ОбразованиеФизическихЛиц.Номер КАК Номер,
	|	ОбразованиеФизическихЛиц.ДатаВыдачи КАК ДатаВыдачи,
	|	ОбразованиеФизическихЛиц.Квалификация КАК Квалификация,
	|	ОбразованиеФизическихЛиц.Начало КАК Начало,
	|	ОбразованиеФизическихЛиц.Окончание КАК Окончание,
	|	ОбразованиеФизическихЛиц.НаименованиеКурса КАК НаименованиеКурса,
	|	ОбразованиеФизическихЛиц.КоличествоЧасов КАК КоличествоЧасов,
	|	ОбразованиеФизическихЛиц.ВидДополнительногоОбучения КАК ВидДополнительногоОбучения
	|ИЗ
	|	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
	|ГДЕ
	|	ОбразованиеФизическихЛиц.Владелец = &ФизическоеЛицо
	|	И НЕ ОбразованиеФизическихЛиц.ПометкаУдаления";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ДанныеОбОбразовании = Результат.Выбрать();
	КонецЕсли;
	
	Возврат ДанныеОбОбразовании;
	
КонецФункции	

Функция ДанныеОбОбученииЗаполнены(ДанныеОбОбразовании)
	
	Возврат ДанныеОбОбразовании <> Неопределено;	
	
КонецФункции

Функция ПредставлениеПериодаОбучения(Результат, УчебноеЗаведение, ДатаНачала, ДатаОкончания)

	ПредставлениеПериодаОбучения = "";
	
	ПараметрыПодстановки = Новый Массив;
	ПараметрыПодстановки.Добавить(Результат);
	ПараметрыПодстановки.Добавить(УчебноеЗаведение);
	ПараметрыПодстановки.Добавить(Формат(ДатаНачала, "ДЛФ=D"));
	ПараметрыПодстановки.Добавить(Формат(ДатаОкончания, "ДЛФ=D"));
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + "%1";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчебноеЗаведение) Тогда
		Если НЕ ПустаяСтрока(ПредставлениеПериодаОбучения) Тогда
			ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + ", ";
		КонецЕсли;
		ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + "%2";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала)
		И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + " (%3 - %4)";
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + НСтр("ru = ' (с %3)';
																			|en = ' (from %3)'");
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПредставлениеПериодаОбучения = ПредставлениеПериодаОбучения + НСтр("ru = ' (по %4)';
																			|en = ' (to %4)'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеПериодаОбучения) Тогда
		ПредставлениеПериодаОбучения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ПредставлениеПериодаОбучения, ПараметрыПодстановки); 
	КонецЕсли;
	
	Возврат ПредставлениеПериодаОбучения;
	
КонецФункции

#Область Образование

Функция СтрокаОбразование(ДанныеОбОбучении)
	
	СтрокаОбразование = "";
	
	ДанныеОбОбучении.Сбросить();
	
	Пока ДанныеОбОбучении.Следующий() Цикл
		Если ЭтоДанныеОбОбразовании(ДанныеОбОбучении) Тогда
			СтрокаОбразование = СтрокаОбразование + ПредставлениеОбразования(ДанныеОбОбучении) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;	
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаОбразование);
	
	Возврат СтрокаОбразование;
	
КонецФункции

Функция ПредставлениеОбразования(Образование)
	Возврат ПредставлениеПериодаОбучения(Образование.Специальность, Образование.УчебноеЗаведение, Образование.Начало, Образование.Окончание);
КонецФункции	

Функция ЭтоДанныеОбОбразовании(ДанныеОбОбучении)
	Возврат ДанныеОбОбучении.ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПустаяСсылка()
		Или ДанныеОбОбучении.ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.Подготовка;
КонецФункции 

#КонецОбласти

#Область ПовышениеКвалификации

Функция СтрокаПовышениеКвалификации(ДанныеОбОбучении)
	
	СтрокаПовышениеКвалификации = "";
	
	ДанныеОбОбучении.Сбросить();
	
	Пока ДанныеОбОбучении.Следующий() Цикл
		Если ЭтоДанныеОПовышенииКвалификации(ДанныеОбОбучении) Тогда
			СтрокаПовышениеКвалификации = СтрокаПовышениеКвалификации + ПредставлениеПовышенияКвалификации(ДанныеОбОбучении) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;	
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаПовышениеКвалификации);
	
	Возврат СтрокаПовышениеКвалификации;
	
КонецФункции

Функция ПредставлениеПовышенияКвалификации(ПовышениеКвалификации)
	Возврат ПредставлениеПериодаОбучения(ПовышениеКвалификации.Квалификация, ПовышениеКвалификации.УчебноеЗаведение, ПовышениеКвалификации.Начало, ПовышениеКвалификации.Окончание);
КонецФункции

Функция ЭтоДанныеОПовышенииКвалификации(ДанныеОбОбучении)
	Возврат ДанныеОбОбучении.ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.ПовышениеКвалификации;
КонецФункции 

#КонецОбласти 

#Область Переподготовка

Функция СтрокаПереподготовка(ДанныеОбОбучении)
	
	СтрокаПереподготовка = "";
	
	ДанныеОбОбучении.Сбросить();
	
	Пока ДанныеОбОбучении.Следующий() Цикл
		Если ЭтоДанныеОПереподготовке(ДанныеОбОбучении) Тогда
			СтрокаПереподготовка = СтрокаПереподготовка + ПредставлениеПереподготовки(ДанныеОбОбучении) + Символы.ПС;
		КонецЕсли;
	КонецЦикла;	
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаПереподготовка);
	
	Возврат СтрокаПереподготовка;
	
КонецФункции

Функция ЭтоДанныеОПереподготовке(ДанныеОбОбучении)
	Возврат ДанныеОбОбучении.ВидДополнительногоОбучения = Перечисления.ВидыПрофессиональнойПодготовки.Переподготовка;
КонецФункции 

Функция ПредставлениеПереподготовки(Переподготовка)
	Возврат ПредставлениеПериодаОбучения(Переподготовка.Специальность, Переподготовка.УчебноеЗаведение, Переподготовка.Начало, Переподготовка.Окончание);
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область Специальности

Функция ОбновитьСпециальности(СтроковыеСведения)
	СтроковыеСведения.Специальности = СтрокаСпециальности(СтроковыеСведения.ФизическоеЛицо);
КонецФункции

Функция СтрокаСпециальности(ФизическоеЛицо)
	СтрокаСпециальности = РегистрыСведений.СпециальностиФизическихЛиц.ПредставлениеСпециальностейФизическогоЛица(ФизическоеЛицо);
	Возврат СтрокаСпециальности;
КонецФункции 

#КонецОбласти 

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	Типы.Добавить(Метаданные.Справочники.ВидыОбразованияФизическихЛиц);
	Типы.Добавить(Метаданные.Справочники.СтепениЗнанияЯзыка);
	Типы.Добавить(Метаданные.Справочники.ЯзыкиНародовМира);
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОбразованияСотрудников);
	
КонецПроцедуры

#Область ОбъединениеДублей

// Параметры:
//  ОписанияСправочников - Массив из Структура
Процедура ДополнитьОписанияСправочниковПриОбъединенииДублей(ОписанияСправочников) Экспорт
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	ОписанияСправочников.Добавить(МодульОбработки.НовоеОписаниеСправочника(
		Метаданные.Справочники.ОбразованиеФизическихЛиц.Имя));
		
КонецПроцедуры

// Параметры:
//  ОписанияРегистров - Массив из Структура
Процедура ДополнитьОписанияРегистровСведенийПриОбъединенииДублей(ОписанияРегистров) Экспорт
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЗнаниеЯзыковФизическихЛиц;
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(МетаданныеРегистра.Имя,
		МетаданныеРегистра.Измерения.Язык.Имя));
		
	МетаданныеРегистра = Метаданные.РегистрыСведений.ПрофессииФизическихЛиц;
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(МетаданныеРегистра.Имя,
		МетаданныеРегистра.Измерения.Профессия.Имя));
		
КонецПроцедуры

#КонецОбласти

Процедура ИнициализироватьОтчетТ2(ОтчетОбъект) Экспорт
	
	Для Каждого НаборДанных Из ОтчетОбъект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление",
				"ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка) КАК ВладеемыйЯзык1,
				|	ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка) КАК ВладеемыйЯзык1СтепеньЗнания,
				|	ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка) КАК ВладеемыйЯзык2,
				|	ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка) КАК ВладеемыйЯзык2СтепеньЗнания,
				|	ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка) КАК Профессия1,
				|	ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка) КАК Профессия2,
				|	ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка) КАК ПослеВузовскоеОбразованиеУчебноеЗаведение,
				|	ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка) КАК ПослеВузовскоеОбразованиеВидОбразования,
				|	ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка) КАК ПослеВузовскоеОбразованиеВидПослевузовскогоОбразования,
				|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовОбОбразовании.ПустаяСсылка) КАК ПослеВузовскоеОбразованиеВидДокумента,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ПослеВузовскоеОбразованиеНачало,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ПослеВузовскоеОбразованиеОкончание,
				|	"""" КАК ПослеВузовскоеОбразованиеСерия,
				|	"""" КАК ПослеВузовскоеОбразованиеНомер,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ПослеВузовскоеОбразованиеДатаВыдачи,
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка) КАК ПослеВузовскоеОбразованиеСпециальность,
				|	"""" КАК ПослеВузовскоеОбразованиеКвалификация,
				|	ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка) КАК Образование1УчебноеЗаведение,
				|	ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка) КАК Образование1ВидОбразования,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование1Начало,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование1Окончание,
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка) КАК Образование1Специальность,
				|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовОбОбразовании.ПустаяСсылка) КАК Образование1ВидДокумента,
				|	"""" КАК Образование1Серия,
				|	"""" КАК Образование1Номер,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование1ДатаВыдачи,
				|	"""" КАК Образование1Квалификация,
				|	ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка) КАК Образование2УчебноеЗаведение,
				|	ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка) КАК Образование2ВидОбразования,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование2Начало,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование2Окончание,
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка) КАК Образование2Специальность,
				|	ЗНАЧЕНИЕ(Справочник.ВидыДокументовОбОбразовании.ПустаяСсылка) КАК Образование2ВидДокумента,
				|	"""" КАК Образование2Серия,
				|	"""" КАК Образование2Номер,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Образование2ДатаВыдачи,
				|	"""" КАК Образование2Квалификация,
				|	ВЫРАЗИТЬ("""" КАК СТРОКА) КАК EMailПредставление");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык1,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык1 КАК ВладеемыйЯзык1,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык1Код,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык1.Код КАК ВладеемыйЯзык1Код,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык1СтепеньЗнания,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык1СтепеньЗнания КАК ВладеемыйЯзык1СтепеньЗнания,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык1СтепеньЗнанияКод,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык1СтепеньЗнания.Код КАК ВладеемыйЯзык1СтепеньЗнанияКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык2,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык2 КАК ВладеемыйЯзык2,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык2Код,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык2.Код КАК ВладеемыйЯзык2Код,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык2СтепеньЗнания,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык2СтепеньЗнания КАК ВладеемыйЯзык2СтепеньЗнания,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ВладеемыйЯзык2СтепеньЗнанияКод,",
				"КадровыеДанныеСотрудников.ВладеемыйЯзык2СтепеньЗнания.Код КАК ВладеемыйЯзык2СтепеньЗнанияКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Профессия1,",
				"КадровыеДанныеСотрудников.Профессия1 КАК Профессия1,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Профессия1Код,",
				"КадровыеДанныеСотрудников.Профессия1.Код КАК Профессия1Код,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Профессия2,",
				"КадровыеДанныеСотрудников.Профессия2 КАК Профессия2,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Профессия2Код,",
				"КадровыеДанныеСотрудников.Профессия2.Код КАК Профессия2Код,");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеУчебноеЗаведение,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеУчебноеЗаведение КАК ПослеВузовскоеОбразованиеУчебноеЗаведение,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеВидОбразования,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеВидОбразования КАК ПослеВузовскоеОбразованиеВидОбразования,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеВидОбразованияКод,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеВидОбразования.Код КАК ПослеВузовскоеОбразованиеВидОбразованияКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеВидПослевузовскогоОбразования,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеВидПослевузовскогоОбразования КАК ПослеВузовскоеОбразованиеВидПослевузовскогоОбразования,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеВидПослевузовскогоОбразованияКод,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеВидПослевузовскогоОбразования.Код КАК ПослеВузовскоеОбразованиеВидПослевузовскогоОбразованияКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеВидДокумента,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеВидДокумента КАК ПослеВузовскоеОбразованиеВидДокумента,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеНачало,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеНачало КАК ПослеВузовскоеОбразованиеНачало,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеОкончание,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеОкончание КАК ПослеВузовскоеОбразованиеОкончание,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеСерия,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеСерия КАК ПослеВузовскоеОбразованиеСерия,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеНомер,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеНомер КАК ПослеВузовскоеОбразованиеНомер,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеДатаВыдачи,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеДатаВыдачи КАК ПослеВузовскоеОбразованиеДатаВыдачи,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеСпециальность,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеСпециальность КАК ПослеВузовскоеОбразованиеСпециальность,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеСпециальностьКод,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеСпециальность.Код КАК ПослеВузовскоеОбразованиеСпециальностьКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ПослеВузовскоеОбразованиеКвалификация,",
				"КадровыеДанныеСотрудников.ПослеВузовскоеОбразованиеКвалификация КАК ПослеВузовскоеОбразованиеКвалификация,");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование,",
				"КадровыеДанныеСотрудников.Образование1ВидОбразования КАК Образование,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК ОбразованиеКод,",
				"КадровыеДанныеСотрудников.Образование1ВидОбразования.Код КАК ОбразованиеКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1УчебноеЗаведение,",
				"КадровыеДанныеСотрудников.Образование1УчебноеЗаведение КАК Образование1УчебноеЗаведение,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1ВидОбразования,",
				"КадровыеДанныеСотрудников.Образование1ВидОбразования КАК Образование1ВидОбразования,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Начало,",
				"КадровыеДанныеСотрудников.Образование1Начало КАК Образование1Начало,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Окончание,",
				"КадровыеДанныеСотрудников.Образование1Окончание КАК Образование1Окончание,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Специальность,",
				"КадровыеДанныеСотрудников.Образование1Специальность КАК Образование1Специальность,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1СпециальностьКод,",
				"КадровыеДанныеСотрудников.Образование1Специальность.Код КАК Образование1СпециальностьКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1ВидДокумента,",
				"КадровыеДанныеСотрудников.Образование1ВидДокумента КАК Образование1ВидДокумента,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Серия,",
				"КадровыеДанныеСотрудников.Образование1Серия КАК Образование1Серия,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Номер,",
				"КадровыеДанныеСотрудников.Образование1Номер КАК Образование1Номер,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1ДатаВыдачи,",
				"КадровыеДанныеСотрудников.Образование1ДатаВыдачи КАК Образование1ДатаВыдачи,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование1Квалификация,",
				"КадровыеДанныеСотрудников.Образование1Квалификация КАК Образование1Квалификация,");
			
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2УчебноеЗаведение,",
				"КадровыеДанныеСотрудников.Образование2УчебноеЗаведение КАК Образование2УчебноеЗаведение,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2ВидОбразования,",
				"КадровыеДанныеСотрудников.Образование2ВидОбразования КАК Образование2ВидОбразования,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Начало,",
				"КадровыеДанныеСотрудников.Образование2Начало КАК Образование2Начало,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Окончание,",
				"КадровыеДанныеСотрудников.Образование2Окончание КАК Образование2Окончание,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Специальность,",
				"КадровыеДанныеСотрудников.Образование2Специальность КАК Образование2Специальность,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2СпециальностьКод,",
				"КадровыеДанныеСотрудников.Образование2Специальность.Код КАК Образование2СпециальностьКод,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2ВидДокумента,",
				"КадровыеДанныеСотрудников.Образование2ВидДокумента КАК Образование2ВидДокумента,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Серия,",
				"КадровыеДанныеСотрудников.Образование2Серия КАК Образование2Серия,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Номер,",
				"КадровыеДанныеСотрудников.Образование2Номер КАК Образование2Номер,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2ДатаВыдачи,",
				"КадровыеДанныеСотрудников.Образование2ДатаВыдачи КАК Образование2ДатаВыдачи,");
			НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос,
				"НЕОПРЕДЕЛЕНО КАК Образование2Квалификация,",
				"КадровыеДанныеСотрудников.Образование2Квалификация КАК Образование2Квалификация,");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
