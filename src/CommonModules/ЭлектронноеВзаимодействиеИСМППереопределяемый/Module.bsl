#Область ПрограммныйИнтерфейс

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировке(Приемник, Источник, ДанныеШтрихкодовУпаковок, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_5_02)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировке_5_02(Приемник, Источник, ДанныеШтрихкодовУпаковок, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок, 
	ПолеКоличество, ОтборПоТипуРасхождений, ТипРасхождения, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеУКД)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировкеУКД(Приемник, Источник, ДанныеШтрихкодовУпаковокДо, ДанныеШтрихкодовУпаковокПосле, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// (См. ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировкеУКД2020)
// Переопределяет заполнение сведений о маркировке. Установить СтандартнаяОбработка=Ложь для переопределенных вызовов.
Процедура ЗаполнитьСведенияОМаркировкеУКД2020(Приемник, Источник, ДанныеШтрихкодовУпаковокДо, ДанныеШтрихкодовУпаковокПосле, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяет заполнение кодов маркировки из сведений о товаре документа ЭДО в переданные таблицы штрихкодов упаковок (факт и расхождения).
// 
// Параметры:
//  ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов для заполнения кодов из раздела Факт (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  ШтрихкодыУпаковокРасхождения - ТаблицаЗначений - Таблица штрихкодов для заполнения кодов из по расхождениям (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, ШтрихкодыУпаковокРасхождения,
		СведенияОТоваре) Экспорт
	
	Возврат;
	
КонецПроцедуры

//При записи документа ЭДО может измениться статус оформления документа, по которому происходит электронный документооборот:
//   * Для прямого обмена с ИС МП (документ "Отгрузка товаров") указание кодов маркировки требуется или в ЭДО, или в отгрузке.
//   * Подразумевается, что документ ЭДО не может изменить свой документ-основание (API ЭДО v1).
//
// Параметры:
//  ЭлектронныйДокументИсходящийОбъект - ДокументОбъект.ЭлектронныйДокументИсходящий - записываемый документ.
//  ДокументыТребующиеПересчета - Массив Из см. РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов - 
//   документы, связанные с записываемым электронным, для которых требуется пересчитать статус оформления.
//
Процедура ТребуетсяПересчетСтатусовОформления(ЭлектронныйДокументИсходящийОбъект, ДокументыТребующиеПересчета) Экспорт
	
	//++ НЕ ГОСИС
	Основания = ЭлектронныйДокументИсходящийОбъект.УдалитьДокументыОснования;
	ДокументыПоТипам = Новый Соответствие;
	Для Каждого Строка Из Основания Цикл
		ТипОснования = ТипЗнч(Строка.ДокументОснование);
		Элемент = ДокументыПоТипам.Получить(ТипОснования);
		Если Элемент = Неопределено Тогда
			Элемент = Новый Массив;
		КонецЕсли;
		Элемент.Добавить(Строка.ДокументОснование);
		ДокументыПоТипам.Вставить(ТипОснования, Элемент);
	КонецЦикла;
	
	СчетаФактуры = ДокументыПоТипам.Получить(Тип("ДокументСсылка.СчетФактураВыданный"));
	Если СчетаФактуры<>Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", СчетаФактуры);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|ГДЕ
		|	СчетФактураВыданныйДокументыОснования.Ссылка В(&Ссылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТипОснования = ТипЗнч(Выборка.ДокументОснование);
			Элемент = ДокументыПоТипам.Получить(ТипОснования);
			Если Элемент = Неопределено Тогда
				Элемент = Новый Массив;
			КонецЕсли;
			Элемент.Добавить(Выборка.ДокументОснование);
			ДокументыПоТипам.Вставить(ТипОснования, Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ОснованиеОтгрузкаТоваровИСМП.Тип.Типы() Цикл
		ДокументыТипа = ДокументыПоТипам.Получить(Тип);
		Если ДокументыТипа<>Неопределено Тогда
			ДокументыТребующиеПересчета.Добавить(ДокументыТипа);
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

//Предназачена для модификации текста запроса по расчету неоформленных документов ЭДО.
//   Сценарий использования: заменить текст запроса на требуемый (требующие оформления
//   с помощью ЭДО документы продажи с маркируемой продукцией).
//
//Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//
Процедура ПриПолученииТекстаЗапросаНеоформленныхДокументовЭДО(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	Если ЭлектронноеВзаимодействиеИСМП.ВерсияАПИ() = 1 Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СостоянияЭД.СсылкаНаОбъект КАК Ссылка
		|ИЗ
		|	РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭД
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
		|		ПО СостоянияЭД.СсылкаНаОбъект = ШтрихкодыРеализации.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ШтрихкодыВозврата
		|		ПО СостоянияЭД.СсылкаНаОбъект = ШтрихкодыВозврата.Ссылка
		|ГДЕ
		|	СостоянияЭД.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован)
		|	И НЕ(ШтрихкодыРеализации.Ссылка ЕСТЬ NULL И ШтрихкодыВозврата.Ссылка ЕСТЬ NULL)
		|	И (&БезОтбораПоОрганизации
		|	ИЛИ СостоянияЭД.Организация В (&Организации))";
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК ШтрихкодыРеализации
		|		ПО ДокументыТребующиеОформления.Ссылка = ШтрихкодыРеализации.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.ШтрихкодыУпаковок КАК ШтрихкодыВозврата
		|		ПО ДокументыТребующиеОформления.Ссылка = ШтрихкодыВозврата.Ссылка
		|ГДЕ
		|	НЕ(ШтрихкодыРеализации.Ссылка ЕСТЬ NULL И ШтрихкодыВозврата.Ссылка ЕСТЬ NULL)";
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Переопределяет параметры открытия панели электронного документооборота.
//
// Параметры:
//  ПараметрыОткрытияОбработкиЭДО - Структура - Параметры открытия формы
//
Процедура ДополнитьПараметрыОткрытияПанелиЭДОИзИСМП(ПараметрыОткрытияОбработкиЭДО) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Дополнить сведения об адресах участников обмена 5_02.
// 
// Параметры:
//  СтруктураДанных  - Структура - возвращается методом ПолучитьДанныеДляЭД учетного документа.
//  Источник                     - ДокументСсылка - ссылка на прикладной документ
//  СтруктураАдресов - см. ЭлектронноеВзаимодействиеИСМП.СтруктураАдресовУчастниковОбмена
//  Отказ                        - Булево - Истина, если в процессе заполнения были обнаружены ошибки
//  ВыводитьСообщение            - Булево - Истина, если нужно выводить сообщение пользователю.
//
Процедура ЗаполнитьСведенияОбАдресахУчастниковОбмена_5_02(СтруктураДанных, Источник, СтруктураАдресов, Отказ, ВыводитьСообщение = Истина) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ОбъектПокупатель = Неопределено;
			ОбъектПродавец   = Неопределено;
			ВидКИПокупателя  = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
				
				ОбъектПокупатель                                              = ВыборкаШапки.Грузополучатель;
				СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПокупатель;
				ВидКИПокупателя                                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				
			Иначе
				ОбъектПокупатель = ВыборкаШапки.Контрагент;
				ВидКИПокупателя  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) И ВыборкаШапки.Грузоотправитель <> ВыборкаШапки.Организация Тогда
				
				ОбъектПродавец                                              = ВыборкаШапки.Грузоотправитель;
				СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПродавец;
				
			Иначе
				ОбъектПродавец = ВыборкаШапки.Организация;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПродавец, Источник, Отказ, ВыводитьСообщение);
			
			СтруктураАдресов.Продавец.УчастникОбмена   = ВыборкаШапки.Организация;
			СтруктураАдресов.Покупатель.УчастникОбмена = ВыборкаШапки.Контрагент;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.АдресДоставкиЗначение) Тогда
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение = Ложь;
				СтруктураАдресов.Покупатель.АдресСтрокой             = ВыборкаШапки.АдресДоставки;
				СтруктураАдресов.Покупатель.АдресЗначенияПолей       = ВыборкаШапки.АдресДоставкиЗначение;
				
			Иначе
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение     = Истина;
				СтруктураАдресов.Покупатель.ВладелецКонтактнойИнформации = ОбъектПокупатель;
				СтруктураАдресов.Покупатель.ВидКонтактнойИнформации      = ВидКИПокупателя;
				
			КонецЕсли;
			
			СтруктураАдресов.Продавец.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Продавец.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Продавец.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ОбъектПокупатель = Неопределено;
			ОбъектПродавец   = Неопределено;
			ВидКИПокупателя  = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
				
				ОбъектПокупатель                                              = ВыборкаШапки.Грузополучатель;
				СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПокупатель;
				ВидКИПокупателя                                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				
			Иначе
				ОбъектПокупатель = ВыборкаШапки.Контрагент;
				ВидКИПокупателя  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) И ВыборкаШапки.Грузоотправитель <> ВыборкаШапки.Организация Тогда
				
				ОбъектПродавец                                              = ВыборкаШапки.Грузоотправитель;
				СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПродавец;
				
			Иначе
				ОбъектПродавец = ВыборкаШапки.Организация;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПродавец, Источник, Отказ, ВыводитьСообщение);
			
			СтруктураАдресов.Продавец.УчастникОбмена   = ВыборкаШапки.Организация;
			СтруктураАдресов.Покупатель.УчастникОбмена = ВыборкаШапки.Контрагент;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.АдресДоставкиЗначение) Тогда
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение = Ложь;
				СтруктураАдресов.Покупатель.АдресСтрокой             = ВыборкаШапки.АдресДоставки;
				СтруктураАдресов.Покупатель.АдресЗначенияПолей       = ВыборкаШапки.АдресДоставкиЗначение;
				
			Иначе
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение     = Истина;
				СтруктураАдресов.Покупатель.ВладелецКонтактнойИнформации = ОбъектПокупатель;
				СтруктураАдресов.Покупатель.ВидКонтактнойИнформации      = ВидКИПокупателя;
				
			КонецЕсли;
			
			СтруктураАдресов.Продавец.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Продавец.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Продавец.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ОбъектПокупатель = Неопределено;
			ОбъектПродавец   = Неопределено;
			ВидКИПокупателя  = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
				
				ОбъектПокупатель                                              = ВыборкаШапки.Грузополучатель;
				СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПокупатель;
				ВидКИПокупателя                                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				
			Иначе
				ОбъектПокупатель = ВыборкаШапки.Контрагент;
				ВидКИПокупателя  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) И ВыборкаШапки.Грузоотправитель <> ВыборкаШапки.Организация Тогда
				
				ОбъектПродавец                                              = ВыборкаШапки.Грузоотправитель;
				СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПродавец;
				
			Иначе
				ОбъектПродавец = ВыборкаШапки.Организация;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПродавец, Источник, Отказ, ВыводитьСообщение);
			
			СтруктураАдресов.Продавец.УчастникОбмена   = ВыборкаШапки.Организация;
			СтруктураАдресов.Покупатель.УчастникОбмена = ВыборкаШапки.Контрагент;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.АдресДоставкиЗначение) Тогда
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение = Ложь;
				СтруктураАдресов.Покупатель.АдресСтрокой             = ВыборкаШапки.АдресДоставкиСтрокой;
				СтруктураАдресов.Покупатель.АдресЗначенияПолей       = ВыборкаШапки.АдресДоставкиЗначение;
				
			Иначе
				
				СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение     = Истина;
				СтруктураАдресов.Покупатель.ВладелецКонтактнойИнформации = ОбъектПокупатель;
				СтруктураАдресов.Покупатель.ВидКонтактнойИнформации      = ВидКИПокупателя;
				
			КонецЕсли;
			
			СтруктураАдресов.Продавец.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Продавец.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Продавец.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ОбъектПокупатель = Неопределено;
			ОбъектПродавец   = Неопределено;
			ВидКИПокупателя  = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
				
				ОбъектПокупатель                                              = ВыборкаШапки.Грузополучатель;
				СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПокупатель;
				ВидКИПокупателя                                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				
			Иначе
				ОбъектПокупатель = ВыборкаШапки.Контрагент;
				ВидКИПокупателя  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПокупатель, Источник, Отказ, ВыводитьСообщение);
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) И ВыборкаШапки.Грузоотправитель <> ВыборкаШапки.Организация Тогда
				
				ОбъектПродавец                                              = ВыборкаШапки.Грузоотправитель;
				СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПродавец;
				
			Иначе
				ОбъектПродавец = ВыборкаШапки.Организация;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПродавец, Источник, Отказ, ВыводитьСообщение);
			
			СтруктураАдресов.Продавец.УчастникОбмена   = ВыборкаШапки.Организация;
			СтруктураАдресов.Покупатель.УчастникОбмена = ВыборкаШапки.Контрагент;
			
			СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Покупатель.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Покупатель.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
			СтруктураАдресов.Продавец.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Продавец.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Продавец.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ОбъектПокупатель = Неопределено;
			ОбъектПродавец   = Неопределено;
			ВидКИПокупателя  = Неопределено;
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузополучатель) Тогда
				
				ОбъектПокупатель                                              = ВыборкаШапки.Грузополучатель;
				СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПокупатель;
				ВидКИПокупателя                                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				
			Иначе
				ОбъектПокупатель = ВыборкаШапки.Контрагент;
				ВидКИПокупателя  = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПокупатель, Источник, Отказ, ВыводитьСообщение);
			
			Если ЗначениеЗаполнено(ВыборкаШапки.Грузоотправитель) И ВыборкаШапки.Грузоотправитель <> ВыборкаШапки.Организация Тогда
				
				ОбъектПродавец                                              = ВыборкаШапки.Грузоотправитель;
				СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ОбъектПродавец;
				
			Иначе
				ОбъектПродавец = ВыборкаШапки.Организация;
			КонецЕсли;

			ИнтеграцияИСМПУТ.ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(ВыборкаШапки.Склад, ОбъектПродавец, Источник, Отказ, ВыводитьСообщение);
			
			СтруктураАдресов.Продавец.УчастникОбмена   = ВыборкаШапки.Организация;
			СтруктураАдресов.Покупатель.УчастникОбмена = ВыборкаШапки.Контрагент;
			
			СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Покупатель.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Покупатель.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
			СтруктураАдресов.Продавец.АвтоматическоеЗаполнение     = Истина;
			СтруктураАдресов.Продавец.ВладелецКонтактнойИнформации = ВыборкаШапки.Склад;
			СтруктураАдресов.Продавец.ВидКонтактнойИнформации      = Справочники.ВидыКонтактнойИнформации.АдресСклада;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Добавить сведения о перевозочных документах в формате УПД 5_02.
// 
// Параметры:
//  СтруктураДанных              - Структура - возвращается методом ПолучитьДанныеДляЭД учетного документа.
//  Источник                     - ДокументСсылка - ссылка на прикладной документ
//  ДанныеПеревозочныхДокументов - см. ЭлектронноеВзаимодействиеИСМП.СтруктураДанныхПоПеревозочнымДокументам
Процедура ДобавитьСведенияОПеревозочныхДокументах_5_02(СтруктураДанных, Источник, ДанныеПеревозочныхДокументов) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(Источник) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		Или ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ТранспортныеНакладные = Документы.ТранспортнаяНакладная.ТранспортныеНакладныеДокументовОснований(Источник);
			ТранспортнаяНакладная = Неопределено;
			
			Если ТранспортныеНакладные.Количество() = 1 Тогда
				
				ДанныеПеревозочныхДокументов.НомерТранспортногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТранспортныеНакладные[0].Номер);
				ДанныеПеревозочныхДокументов.ДатаТранспортногоДокумента  = ТранспортныеНакладные[0].Дата;
				
				ТранспортнаяНакладная                   = ТранспортныеНакладные[0].ТранспортнаяНакладная;
				ДанныеПеревозки = ИнтеграцияИСУТ.ДанныеПеревозки(Источник, ТранспортнаяНакладная);
				
				ДанныеПеревозочныхДокументов.РегНомерТС = ДанныеПеревозки.АвтомобильГосударственныйНомер;
				
			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = Обработки.ЭлектронныеПеревозочныеДокументы.ЗапросПоДокументуОснования();
				
				Обработки.ЭлектронныеПеревозочныеДокументы.ЗаполнитьОбязательныеПараметрыЗапроса(Запрос.Параметры);
				
				Запрос.УстановитьПараметр("ДокументОснование", Источник);
				Запрос.УстановитьПараметр("НачалоПериода",     Дата(1, 1, 1));
				Запрос.УстановитьПараметр("КонецПериода",      Дата(1, 1, 1));
				
				УстановитьПривилегированныйРежим(Истина);
				ВыборкаЭПД = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				
				Если ВыборкаЭПД.Следующий() Тогда
					
					ДанныеПеревозочныхДокументов.ИдентификаторЭПД = ВыборкаЭПД.НомерЭПД;
					
					ДанныеФормирования                      = ОбменСГИСЭПД.ДанныеРеквизитовЭПД(ВыборкаЭПД.Ссылка);
					ДанныеПеревозочныхДокументов.РегНомерТС = ДанныеФормирования.ТитулГрузоотправителяТранспортноеСредствоРегистрационныйНомер;
					
					РеквизитыДокументаЭПД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаЭПД.Ссылка, "УИДМинтранс, ТитулГрузоотправителяИдентификаторФайла");
					
					Если ЗначениеЗаполнено(РеквизитыДокументаЭПД.УИДМинтранс) Тогда
						ИдентификаторДокумента = РеквизитыДокументаЭПД.УИДМинтранс;
					Иначе
						ИдентификаторДокумента = РеквизитыДокументаЭПД.ТитулГрузоотправителяИдентификаторФайла;
					КонецЕсли;
					
					ДанныеПеревозочныхДокументов.ИдентификаторЭПД = ИдентификаторДокумента;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ВыборкаШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
		
		Если ВыборкаШапки.Следующий() Тогда
			
			ДанныеПеревозки = ИнтеграцияИСУТ.ДанныеПеревозки(Источник, Неопределено);
			
			ДанныеПеревозочныхДокументов.РегНомерТС                  = ДанныеПеревозки.АвтомобильГосударственныйНомер;
			ДанныеПеревозочныхДокументов.НомерТранспортногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапки.Номер);
			ДанныеПеревозочныхДокументов.ДатаТранспортногоДокумента  = ВыборкаШапки.Дата;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполнить данные по отправителю и получателю при перемещении между МОД в формате УПД 5_02.
// 
// Параметры:
//  СтруктураДанных - см. Документы.ПеремещениеМеждуМОДИСМП.СтруктураДанныхЮрФизЛица
//  Источник - ОпределяемыйТип.УчастникПеремещенияМеждуМОД
//  ДатаСведений - Дата - дата получения данных
//  ДополнительныеПараметры - Структура - произвольные данные для уточнения данных по отправителю/получателю.
Процедура ЗаполнитьДанныеУчастниковПеремещенияМеждуМОД_5_02(СтруктураДанных, Источник, ДатаСведений = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеУчастникаПеремещения = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Источник,, ДатаСведений);
		ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеУчастникаПеремещения);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Склады") Тогда
		
		Организация = Неопределено;
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("Организация", Организация);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РегистрацииВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
			|ИЗ
			|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(&ДатаСведений, Подразделение = &Подразделение
			|	И Организация = &Организация) КАК РегистрацииВНалоговомОрганеСрезПоследних";
		
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.УстановитьПараметр("Подразделение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Подразделение"));
		Запрос.УстановитьПараметр("ДатаСведений",  ДатаСведений);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			// если склад относится к обособленному подразделению, данные берутся из него
			
			РегистрацияВНалоговомОргане = ВыборкаДетальныеЗаписи.РегистрацияВНалоговомОргане;
			
			ДанныеУчастникаПеремещения = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(РегистрацияВНалоговомОргане, ДатаСведений);
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеУчастникаПеремещения);
			
			РеквизитыОрганизации      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеУчастникаПеремещения.Организация, "ЮрФизЛицо, Наименование, НаименованиеПолное, НаименованиеСокращенное");
			СтруктураДанных.ЮрФизЛицо = РеквизитыОрганизации.ЮрФизЛицо;
			
			Если Не ЗначениеЗаполнено(СтруктураДанных.Наименование) Тогда
				
				СтруктураДанных.Наименование            = РеквизитыОрганизации.Наименование;
				СтруктураДанных.ПолноеНаименование      = РеквизитыОрганизации.НаименованиеПолное;
				СтруктураДанных.СокращенноеНаименование = РеквизитыОрганизации.НаименованиеСокращенное;
				
			КонецЕсли;
			
		ИначеЕсли Организация <> Неопределено Тогда
			// если склад не относится к обособленному подразделению, берутся данные организации
			
			ДанныеУчастникаПеремещения = ЭлектронноеВзаимодействиеУТ.ПолучитьДанныеЮрФизЛица(Организация,, ДатаСведений);
			ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеУчастникаПеремещения);
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура осуществляет заполнение переопределяемых данных для формирования электронного документа
//  по документу Перемещение между МОД ИСМП. Осуществляется запись СтруктураДанных данными из номенклатуры.
//
// Параметры:
//  СтруктураДанных - Соответствие из КлючИЗначение:
//  	* Ключ - Число - идентификатор строки из таблицы ТаблицаДляПолученияДанных. Является уникальным идентификатором для
//  		определения полученных данных
//  	* Значение - см. ЭлектронноеВзаимодействиеИСМП.СтруктураДанныхПоНоменклатуреДляФормированияЭД
//  ТаблицаДляПолученияДанных - см. ЭлектронноеВзаимодействиеИСМП.ТаблицаДляПолученияДанныхДляФормированияЭлектронногоДокумента
//  Документ                  - ДокументСсылка.ПеремещениеМеждуМОДИСМП - ссылка на документ.
Процедура ПриПолученииДанныхПоНоменклатуреДляФормированияЭлектронногоДокументаПоПеремещениюМеждуМОДИСМП(СтруктураДанных, ТаблицаДляПолученияДанных, Документ) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаДанных.Номенклатура        КАК Номенклатура,
		|	ТаблицаДанных.Характеристика      КАК Характеристика,
		|	ТаблицаДанных.Упаковка            КАК Упаковка,
		|	ТаблицаДанных.Количество          КАК Количество,
		|	ТаблицаДанных.КоличествоУпаковок  КАК КоличествоУпаковок
		|ПОМЕСТИТЬ ВТ_ТаблицаДляПолученияДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаДляПолученияДанных.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВТ_ТаблицаДляПолученияДанных.Номенклатура        КАК Номенклатура,
		|	ВТ_ТаблицаДляПолученияДанных.Характеристика      КАК Характеристика,
		|	ВТ_ТаблицаДляПолученияДанных.Упаковка            КАК Упаковка,
		|	СписокНоменклатура.ЕдиницаИзмерения              КАК ЕдиницаИзмеренияНоменклатуры,
		|	СписокНоменклатура.НаименованиеПолное            КАК НоменклатураНаименованиеПолное,
		|	СписокНоменклатура.Код                           КАК НоменклатураКод,
		|	ВЫБОР
		|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
		|			ТОГДА ВТ_ТаблицаДляПолученияДанных.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ &ТекстЗапросаЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
		|			ТОГДА ВТ_ТаблицаДляПолученияДанных.Номенклатура.ЕдиницаИзмерения.Представление
		|		ИНАЧЕ &ТекстЗапросаНаименованиеЕдиницыИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
		|	ВЫБОР
		|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
		|			ТОГДА ВТ_ТаблицаДляПолученияДанных.Номенклатура.ЕдиницаИзмерения.Код
		|		ИНАЧЕ &ТекстЗапросаКодЕдиницыИзмерения
		|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
		|	ВЫБОР
		|		КОГДА &ВыводитьБазовыеЕдиницыИзмерения
		|			ТОГДА ВТ_ТаблицаДляПолученияДанных.Количество
		|		ИНАЧЕ ВТ_ТаблицаДляПолученияДанных.КоличествоУпаковок
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_ТаблицаДляПолученияДанных КАК ВТ_ТаблицаДляПолученияДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СписокНоменклатура
		|		ПО СписокНоменклатура.Ссылка = ВТ_ТаблицаДляПолученияДанных.Номенклатура";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка",
			"ВТ_ТаблицаДляПолученияДанных.Упаковка",
			"ВТ_ТаблицаДляПолученияДанных.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ВТ_ТаблицаДляПолученияДанных.Упаковка",
			"ВТ_ТаблицаДляПолученияДанных.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код",
			"ВТ_ТаблицаДляПолученияДанных.Упаковка",
			"ВТ_ТаблицаДляПолученияДанных.Номенклатура"));
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДляПолученияДанных);
	Запрос.УстановитьПараметр("ВыводитьБазовыеЕдиницыИзмерения", Константы.ВыводитьБазовыеЕдиницыИзмерения.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СтруктураДанныхПоНоменклатуре = ЭлектронноеВзаимодействиеИСМП.СтруктураДанныхПоНоменклатуреДляФормированияЭД();
		
		СтруктураДанныхПоНоменклатуре.НалоговаяСтавка                = Справочники.СтавкиНДС.БезНДС;
		СтруктураДанныхПоНоменклатуре.НоменклатураКод                = ВыборкаДетальныеЗаписи.НоменклатураКод;
		СтруктураДанныхПоНоменклатуре.НоменклатураНаименованиеПолное = ВыборкаДетальныеЗаписи.НоменклатураНаименованиеПолное;
		
		СтруктураДанныхПоНоменклатуре.ЕдиницаИзмерения               = ВыборкаДетальныеЗаписи.ЕдиницаИзмерения;
		СтруктураДанныхПоНоменклатуре.ЕдиницаИзмеренияКод            = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияКод;
		СтруктураДанныхПоНоменклатуре.ЕдиницаИзмеренияНаименование   = ВыборкаДетальныеЗаписи.ЕдиницаИзмеренияНаименование;
		
		СтруктураДанныхПоНоменклатуре.Количество                     = ВыборкаДетальныеЗаписи.Количество;
		
		СтруктураДанных.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторСтроки, СтруктураДанныхПоНоменклатуре);
		
	КонецЦикла;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура осуществляет проверку на заполнение акцизных марок при формировании ЭД.
// 
// Параметры:
//  Источник                  - ДокументСсылка - ссылка на документ
//  Отказ                     - Булево - Истина, если проверка на заполнение акцизных марок не пройдена
//  ВыдаватьСообщенияОбОшибке - Булево - Выдавать сообщения об ошибке
//  СтандартнаяОбработка      - Булево - признак стандартной обработки.
Процедура ПроверитьЗаполнениеЭлектронногоДокументаНаАкцизныеМарки(Источник, Отказ, ВыдаватьСообщенияОбОшибке = Истина, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. При необходимости перед формированием документа ЭДО выполняет проверку соответствия маркируемой продукции и
// товарной части документа.
//
// Параметры:
//  Ссылка - ДокументСсылка - проверяемый документ
//  Отказ  - Булево - флаг отказа от дальнейших действий
Процедура ПроверитьМаркируемуюПродукциюДокумента(Ссылка, Отказ) Экспорт
	
	//++ НЕ ГОСИС
	ТипДокумента = ТипЗнч(Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Отказ = Отказ Или Не ЭлектронноеВзаимодействиеИСМП.ДанныеДокументаСоответствуютДаннымУпаковок(Ссылка, Истина);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Процедуры и функции для работы с другими версиями БЭД
//
#Область СлужебныйПрограммныйИнтерфейс

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//  ЗначениеРеквизита    - Произвольный   - найденное значения.
//  ДеревоДанных         - ДеревоЗначений - объект поиска.
//  ПолныйПуть           - Строка         - значение поиска.
//  СтандартнаяОбработка - Булево         - признак стандартной обработки (установить Ложь для переопределенных)
// 
Процедура ПриОпределенииЗначенияРеквизитаВДереве(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для получения данных элемента дерева, находящегося по указанному пути.
// (См. ЭлектронноеВзаимодействие.ДанныеЭлементаДереваЭлектронногоДокумента)
//
// Параметры:
//  ЗначениеРеквизита    - Произвольный   - найденное значения.
//  ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - полный путь к реквизиту. Составляющие пути разделяются точками.
//  СтандартнаяОбработка - Булево         - признак стандартной обработки (установить Ложь для переопределенных)
// 
Процедура ПриОпределенииДанныхЭлементаДереваЭлектронногоДокумента(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для вывода ошибки заполнения ЭД пользователю
//   (См. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю)
//
// Параметры:
//   СтрокиТаблицы - Массив,ТаблицаЗначений - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.СтрокиТаблицы.
//   ПолеТаблицы   - Строка                 - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПолеТаблицы.
//   КлючДанных    - Строка, ЛюбаяСсылка    - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.КлючДанных.
//   ПутьКДанным   - Строка                 - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПутьКДанным.
//   ТекстОшибки   - Строка                 - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ТекстОшибки
//   СтандартнаяОбработка - Булево - признак стандартной обработки (установить Ложь для переопределенных)
//
Процедура ПриВыводеОшибкиЗаполненияПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным, ТекстОшибки, СтандартнаяОбработка) Экспорт

	Возврат;

КонецПроцедуры

// Записывает данные из структуры в группу дерева значений.
// (См. ЭлектронноеВзаимодействие.ПриЗагрузкеСтруктурыВГруппуДерева)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  СтруктураДанных - Структура - данные, которые должны быть загружены в группу
//  Путь - Строка - название группы в дереве.
//   СтандартнаяОбработка - Булево - признак стандартной обработки (установить Ложь для переопределенных)
//
Процедура ПриЗагрузкеСтруктурыВГруппуДерева(Дерево, СтруктураДанных, Путь, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена переопределения имени обработки обмена с контрагентами.
//
//Параметры:
//   Имя - Строка - имя обработки в метаданных.
//
Процедура ПриОпределенииИмениОбработкиОбменаПоЭДО(Имя) Экспорт

	Возврат;

КонецПроцедуры

// Предназначена для переопределения получения установки значения в дереве по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные.
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные. Таблица может предварительно дополняться данными
//                                    для обработки ошибок:
//                                    см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы.
//  
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриЗагрузкеТаблицыВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Преназначена для переопределения установки значения реквизита в дереве
// (См. ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве)
//
// Параметры:
//  Дерево - ДеревоЗначений, СтрокаДереваЗначений - дерево, содержащее данные электронного документа
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриЗаполненииЗначенияРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает строку дерева значений для заполнения в прикладном решении
// (См. ЭлектронноеВзаимодействие.СтрокаДерева)
// Параметры:
//  ЗначениеСтроки - Произвольный   - найденное значение.
//  Дерево - ДеревоЗначений - дерево с данными
//  НазваниеПоля - Строка - название поля в дереве, содержащее полный путь к реквизиту
//  НайтиРекурсивно - Булево - если требуется рекурсивный поиск.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриПолученииСтрокиДерева(ЗначениеСтроки, Дерево, НазваниеПоля, НайтиРекурсивно, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для добавления записей в таблицу дерева.
// (См. ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева)
//
// Параметры:
//  Дерево - ДеревоЗначений, СтрокаДереваЗначений - дерево, содержащее данные электронного документа
//  НоваяСтрока - Структура, СтрокаТаблицыЗначений - коллекция для сохранения в дереве
//  НазваниеТаблицы - Строка - название таблицы в дереве
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
// 
Процедура ПриДобавленииЗаписиВТаблицуДерева(Дерево, НоваяСтрока, НазваниеТаблицы, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения текста запроса для получения учетной записи ЭДО по установленному отбору.
// 
// Параметры:
// 	Запрос - Запрос - запрос на получение учетной записи по отбору
// 	ТекстыЗапросов - СписокЗначений из Строка - список значений с текстами запроса
// 	ИмяВременнойТаблицы - Строка - имя временной таблицы для выборки учетных записей
// 	Отбор - Структура:
// 		* УчетныеЗаписи - Строка - параметр или выражение для отбора по идентификаторам учетных записей
// 		* Организация - Строка - параметр или выражение для отбора по организации
// 		* СпособОбмена - Строка - параметр или выражение для отбора по способу обмена
// 		* Оператор - Строка - параметр или выражение для отбора по оператору
// 		* ЭтоОблачныйЭДО - Неопределено, Булево - параметр или выражение для отбора по использованию обмена через облачный ЭДО.
// 	СтандартнаяОбработка - Булево - признак стандартной обработки.
// 	
Процедура ПриПолученииУчетныхЗаписейЭДОСОтбором(Запрос, ТекстыЗапросов, ИмяВременнойТаблицы, Отбор, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения проверки поддержки выбранного формата по пространству имен.
// 
// Параметры:
//  ФорматУПД - Строка - пространство имен формата.
//  ЭтоПоддерживаемыйФормат - Булево - Истина, если поддерживается выбранный формат.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриОпределенииПоддержкиФорматаЭДО(ФорматУПД, ЭтоПоддерживаемыйФормат, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения получения дерева данных для заполнения или чтения прикладным решением.
// (См. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента)
//
// Параметры:
//   ПутьКМакетуДанныхЭД - Строка - путь к макету в формате "ИмяОбработки.ИмяМакета", например,
//                         "ОбменСКонтрагентами.Акт501_Исполнитель" (см. Обработка.ОбменСКонтрагентами.Макеты).
// 
//   ДеревоДанных - ДеревоЗначений - Дерево электронного документа.
//   СтандартнаяОбработка - Булево - признак стандартной обработки.
//
Процедура ПриПолученииДереваЭлектронногоДокумента(ПутьКМакетуДанныхЭД, ДеревоДанных, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения формирования сообщения отправителя.
// 
// Параметры:
//  ДанныеСообщения - Структура из КлючИЗначение:
//  	* Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
//  	* ТекстОшибки            - Строка - общий текст ошибки
//  	* МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
//  	* ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
//  	* ИмяФайла               - Строка - имя файла ЭД. - Титул продавца в формате 5_02.
//  ДеревоДанных - ДеревоЗначений - данные сформированного дерева ЭД
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* Функция - Строка - функция ЭД
//  	* ФорматУПД - Строка - пространство имен УПД
//  	* ОбъектУчета - ДокументСсылка - ссылка на документ
//  	* Организация - ОпределяемыйТип.Организация - организация
//  ИдентификаторОтправителя - Строка - идентификатор настройки ЭДО отправителя
//  ИдентификаторПолучателя - Строка - идентификатор настройки ЭДО получателя
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриФормированииДанныхСообщенияОтправителя(ДанныеСообщения, ДеревоДанных, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения формирования сообщения получателя.
// 
// Параметры:
//  ДанныеСообщения - Структура из КлючИЗначение:
//  	* Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
//  	* ТекстОшибки            - Строка - общий текст ошибки
//  	* МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
//  	* ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
//  	* ИмяФайла               - Строка - имя файла ЭД. - Титул покупателя в формате 5_02.
//  ДанныеОтветногоТитула - Структура из КлючИЗначение:
//  	* ДеревоДанных - ДеревоЗначений - данные сформированного дерева ЭД
//  	* Формат - Строка
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* ОбъектУчета - ДокументСсылка - ссылка на документ
//  	* ДвоичныеДанныеФайла - ДвоичныеДанные - двоичные данные титула продавца
//  	* ИмяФайлаБезРасширения - Строка - имя файла титула продавца
//  ИдентификаторОтправителя - Строка - идентификатор настройки ЭДО отправителя
//  ИдентификаторПолучателя - Строка - идентификатор настройки ЭДО получателя
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриФормированииДанныхСообщенияПолучателя(ДанныеСообщения, ДанныеОтветногоТитула, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения процедуры формирования дерева ответного титула покупателя.
// 
// Параметры:
//  СтруктураДанных - Структура из КлючИЗначение:
//		* ДеревоДанных - ДеревоЗначений
//		* Формат - Строка - формат ответного титула.
//  ОбъектУчета - ДокументСсылка - ссылка на документ
//  ИмяФайла - Строка - имя файла титула продавца
//  ДвоичныеДанныеФайла - ДвоичныеДанные - данные файла титула продавца
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриФормированииДереваОтветногоТитулаПокупателя(СтруктураДанных, ОбъектУчета, ИмяФайла, ДвоичныеДанныеФайла, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения заполнения подписанта и ЭП в титулах продавца и покупателя.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ДвоичныеДанные - ДвоичныеДанные - дополненный итоговый ЭД с ЭП и подписантами
//	ОписаниеФайла - Структура из КлючИЗначение:
//		* ДвоичныеДанные - ДвоичныеДанные - данные ЭД
//		* ИмяФайла - Строка - имя файла ЭД
//  СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписанта
//  ПодписьПродавца - Неопределено, ДвоичныеДанные - Подпись продавца
//	ВыбраннаяМЧД - Неопределено, СправочникСсылка.МашиночитаемыеДоверенности - МЧД подписанта
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриЗаполненииПодписантаИЭлектроннойПодписи(Организация, ДвоичныеДанные, ОписаниеФайла, СертификатПодписи, ПодписьПродавца, ВыбраннаяМЧД, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения МЧД по сертификату для подписи.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписанта
//	ВыбраннаяМЧД - Неопределено, СправочникСсылка.МашиночитаемыеДоверенности - МЧД подписанта
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриЗаполненииМашиночитаемойДоверенности(Организация, СертификатПодписи, ВыбраннаяМЧД, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения двоичных данных на основании дерева данных ЭД.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
//  ДвоичныеДанные - ДвоичныеДанные - дополненный итоговый ЭД с ЭП и подписантами
//	ДанныеФайлаЭД - ДеревоЗначений - дерево ЭД
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура СформироватьДвоичныеДанныеИзФайлаЭД(ДвоичныеДанные, ДанныеФайлаЭД, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Предназначена для переопределения получения дерева по объекту учета.
//
// Параметры:
//  ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* Функция - Строка - функция ЭД
//  	* ФорматУПД - Строка - пространство имен формата ЭД
//  	* ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//  	* Организация - ОпределяемыйТип.Организация
//  	* ИдентификаторОтправителя - Строка
//  	* ИдентификаторПолучателя - Строка
//  ДеревоДанных - ДеревоЗначений
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
Процедура ПриПолученииДереваПоОписаниюДанныхОбъектаУчета(ОбъектУчета, СтруктураЭД, ДеревоДанных, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
