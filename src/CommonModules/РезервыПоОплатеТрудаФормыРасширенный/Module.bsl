
#Область СлужебныйПрограммныйИнтерфейс

// Процедура предназначена для заполнения значений показателей, 
// а также сведений сотрудника (подразделение, график работы и др.) 
// в строке документа, выполняющего начисления.
// Используется при изменении одного или нескольких полей, влияющих на такие сведения.
//
// Параметры:
//	Форма						- управляемая форма документа.
//	ИдентификаторСтроки			- идентификатор коллекции данных формы, связанных с таблицей начислений.
//	ОписаниеТаблицы	- структура, содержащая сведения об изменяемой таблицы начислений
//	ЗаполнятьСведенияСотрудников- булево, определяет необходимость обновления кадровых данных
//	ЗаполнятьЗначенияПоказателей- булево, определяет необходимость обновления значений показателей.
//
Процедура ДополнитьСтрокуРасчета(Форма, ОписаниеДокумента, ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	
	ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки);
	
	ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
	
КонецПроцедуры

// Выполняет дозаполнение строк коллекции данными, 
// необходимыми для расчета: сведениями о сотрудниках, 
// показателями расчета и их значениями.
//
Процедура ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок = Неопределено, ЗаполнятьСведенияСотрудников = Истина, ЗаполнятьЗначенияПоказателей = Истина) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		СтрокиРасчета = ДанныеНачислений;
	Иначе
		СтрокиРасчета = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			СтрокаРасчета = ДанныеНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаРасчета <> Неопределено Тогда
				СтрокиРасчета.Добавить(СтрокаРасчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРасчета = Новый Массив;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ВидыРасчета.Добавить(РезервыПоОплатеТрудаРасширенный.НачислениеВидаРасчетаРезерва(СтрокаРасчета.ВидРасчетаРезерва));
	КонецЦикла;
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРасчета, "ВидРасчетаРезерва");
	ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервов(ВидыРасчетаРезервов);
	
	Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервовИнфо Цикл
		Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
			Продолжить;
		КонецЕсли;
		Если ВидРасчетаРезерва.Значение.ЭтоРасчетОтпуска Тогда
			Для Каждого ВидРасчета Из ВидыРасчетаИнфо Цикл
				ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидРасчета.Значение);
				ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ], "Показатели");
				Прервать;
			КонецЦикла;
		Иначе
			ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфо[ВидРасчетаРезерва.Значение.ВидРасчета]);
		КонецЕсли;
		Если ВидРасчетаРезерва.Значение.ИспользоватьСобственнуюФормулуРасчета
			Или ВидРасчетаРезерва.Значение.ЭтоРасчетОтпуска Тогда
			ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ]);
		КонецЕсли;
		ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфоВрем);
	КонецЦикла;
	
	МесяцНачисления = Форма.Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	Если Форма.Объект.Свойство("Организация") Тогда
		Организация = Форма.Объект.Организация;
	КонецЕсли;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, ОписаниеДокумента.Резерв, МесяцНачисления, Форма.Объект.Ссылка, ОписаниеДокумента.ВидОперации);
	
	МенеджерРасчетаРезервовПоОплатеТруда = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаРезервовПоОплатеТруда(МесяцНачисления, Организация);
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РасчетРезервов = Истина;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.НастройкаРезервов      = НастройкаРезервов;
	МенеджерРасчетаЗарплаты = РезервыПоОплатеТрудаРасширенный.СоздатьМенеджерРасчетаЗарплаты(МесяцНачисления, Организация);
	ЗаполнитьЗначенияСвойств(МенеджерРасчетаЗарплаты.НастройкиРасчета, МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета);
	МенеджерРасчетаЗарплаты.НастройкиРасчета.РассчитыватьВзносы     = Ложь;
	МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
	
	ТаблицаРасчета = МенеджерРасчетаРезервовПоОплатеТруда.ТаблицаНачислений();
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		НоваяСтрока = ТаблицаРасчета.Добавить();
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		
		//Подсистема расчета зарлаты манипулирет с полем Начисление, поэтому сменим значения
		НоваяСтрока.ВидРасчета = СтрокаРасчета.Начисление;
		НоваяСтрока.Начисление = СтрокаРасчета.ВидРасчетаРезерва;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ВидРасчета) Тогда
			НоваяСтрока.ВидРасчета = ПланыВидовРасчета.Начисления.ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока.Организация = Организация;
		// Период может не использоваться, тогда полей нет в таблице, их нужно получать 
		// - по периоду, если он указан в шапке
		// - по периоду регистрации.
		Если ОписаниеТаблицы.ИмяРеквизитаДатаНачала = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = НачалоМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаНачалаИмя <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = Форма.Объект[ОписаниеДокумента.ДатаНачалаИмя];
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаОкончанияИмя <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = Форма.Объект[ОписаниеДокумента.ДатаОкончанияИмя];
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияРеквизитов = ВидыРасчетаРезервовИнфо.Получить(НоваяСтрока.ВидРасчетаРезерва);
		ПериодыСтрокиРасчета = Новый Структура("ПериодДействия, ДатаНачала, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(ПериодыСтрокиРасчета, НоваяСтрока);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(НоваяСтрока, ПериодыСтрокиРасчета, ЗначенияРеквизитов);
	КонецЦикла;
	
	// Скорректируем период датами приема на работу / увольнения сотрудников.
	Если ОписаниеДокумента.ПериодДействияВШапке Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "Сотрудник", Истина);
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, "ДатаПриема,ДатаЗавершенияРаботы");
		КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник");
		Для Каждого СтрокаТаблицы Из ТаблицаРасчета Цикл
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(СтрокаТаблицы.Сотрудник, "Сотрудник");
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				Если СтрокаТаблицы.ДатаНачала < КадровыеДанныеСотрудника.ДатаПриема
					И НачалоМесяца(СтрокаТаблицы.ДатаНачала) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаПриема) Тогда
					
					СтрокаТаблицы.ДатаНачала = КадровыеДанныеСотрудника.ДатаПриема;
				КонецЕсли;
				Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы)
					И СтрокаТаблицы.ДатаОкончания > КадровыеДанныеСотрудника.ДатаЗавершенияРаботы
					И НачалоМесяца(СтрокаТаблицы.ДатаОкончания) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы) Тогда
					
					СтрокаТаблицы.ДатаОкончания = Макс(КонецДня(СтрокаТаблицы.ДатаНачала), КадровыеДанныеСотрудника.ДатаЗавершенияРаботы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнятьСведенияСотрудников Тогда
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьСведенияНачисленийДляРасчета(ТаблицаРасчета);
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		ОтборМенеджераРасчета = МенеджерРасчетаРезервовПоОплатеТруда.СоздатьОтборы();
		ОтборМенеджераРасчета.Организация   = Организация;
		ОтборМенеджераРасчета.Подразделение = Форма.Объект.Подразделение;
		ОтборМенеджераРасчета.Резерв        = ОписаниеДокумента.Резерв;
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьЗначенияПоказателейНачислений(ТаблицаРасчета, ОтборМенеджераРасчета);
	КонецЕсли;
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "ВидРасчета");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаРасчета, "ВидРасчетаРезерва");
	ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервов(ВидыРасчетаРезервов);
	
	Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервов Цикл
		Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
			Продолжить;
		КонецЕсли;
		Если ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва].ИспользоватьСобственнуюФормулуРасчета Тогда
			ВидРасчета = ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва].ВидРасчета;
			Если ВидыРасчета.Найти(ВидРасчета) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфо[ВидРасчета], ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Переносим значения в исходную коллекцию.
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		СтрокаНачисленияБезОплатыВДанныеФормы(КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо);
	КонецЦикла;

КонецПроцедуры

Процедура СтрокаНачисленияБезОплатыВДанныеФормы(СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	Если Не ЗначениеЗаполнено(СтрокаИсточник.ВидРасчета) Тогда
		Возврат;
	КонецЕсли;
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.ВидРасчета);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРезервовНачисленияВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, Организация, ВидОперации, ПозицииВставки = Неопределено, ЗаполнятьПоказатели = Истина) Экспорт
	
	ВидыРасчетаРезервовИнфо = Неопределено;
	
	Если ЗаполнятьПоказатели Тогда
		
		ВидыРасчета = Новый Массив;
		Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
			ВидыРасчета.Добавить(СтрокаИсточника.ВидРасчета);
		КонецЦикла;
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		
		Если ЗначениеЗаполнено(ВидыРасчетаИнфо) Тогда
				
			Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
				
				ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "ВидРасчетаРезерва", Истина);
				ЭтоРасчетОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидыРасчетаРезервов[0],"ЭтоРасчетОтпуска");
				Если ЭтоРасчетОтпуска Тогда
					
					ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Начисление", Истина);
					ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервовОтпуск(ВидыРасчетаРезервов);
					
					Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервовИнфо Цикл
						Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
							Продолжить;
						КонецЕсли;
						ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфо[ВидРасчетаРезерва.Значение.ВидРасчета]);
						ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ]);
						ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфоВрем);
					КонецЦикла;
					
				Иначе
					
					ВидыРасчетаРезервовИнфо = ВидыРасчетаИнфо;
					
				КонецЕсли;
				
			Иначе
				
				ВидыРасчетаРезервов = Новый Массив;
				Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
					ВидыРасчетаРезервов.Добавить(СтрокаИсточника.Начисление);
				КонецЦикла;
				
				ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервов(ВидыРасчетаРезервов);
				
				Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервовИнфо Цикл
					Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
						Продолжить;
					КонецЕсли;
					Если ВидРасчетаРезерва.Значение.ЭтоРасчетОтпуска Тогда
						Для Каждого ВидРасчета Из ВидыРасчетаИнфо Цикл
							ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидРасчета.Значение);
							ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ], "Показатели");
							Прервать;
						КонецЦикла;
					Иначе
						ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфо[ВидРасчетаРезерва.Значение.ВидРасчета]);
					КонецЕсли;
					Если ВидРасчетаРезерва.Значение.ИспользоватьСобственнуюФормулуРасчета Тогда
						ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ]);
					КонецЕсли;
					ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфоВрем);
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СтрокаИсточника Из ТаблицаИсточник Цикл
				СтрокаИсточника.ВидРасчетаРезерва = СтрокаИсточника.Начисление;
				СтрокаИсточника.Начисление        = СтрокаИсточника.ВидРасчета;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ПозицииСотрудников = Неопределено;
	СоответствиеОбходовСотрудников = Неопределено;
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("Начисления", ПозицииСотрудников) Тогда
			ПозицииСотрудников = Новый Соответствие;
			ПозицииВставки.Вставить("Начисления", ПозицииСотрудников);
		КонецЕсли;
		СоответствиеОбходовСотрудников = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого СтрокаНачисления Из ТаблицаИсточник Цикл
		
		ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйФормы.ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников, ПозицииСотрудников, СтрокаНачисления.Сотрудник);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		СтрокаНачисленияВДанныеФормы(Организация, СтрокаФормы, СтрокаНачисления, ВидыРасчетаРезервовИнфо);
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенныйФормы.УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников, ПозицииСотрудников);
	
КонецПроцедуры

Процедура СтрокаНачисленияВДанныеФормы(Организация, СтрокаПриемник, СтрокаИсточник, ВидыРасчетаИнфо) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	Если ВидыРасчетаИнфо <> Неопределено Тогда
		ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.ВидРасчетаРезерва);
		Если ЗначенияРеквизитов = Неопределено Тогда
			ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаИсточник.Начисление);
		КонецЕсли;
		
		Если ЗначенияРеквизитов <> Неопределено Тогда
			ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаИсточник.Дополнительно);
			ИсходныеДанные.Вставить("КатегорияНачисления", ЗначенияРеквизитов.КатегорияНачисленияИлиНеоплаченногоВремени);
			ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
			ЗаполнитьЗначенияСвойств(СтрокаПриемник, ЗначенияРеквизитов);
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьКолонкиПоказателей(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов.Показатели);
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПриемник, СтрокаИсточник, ЗначенияРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРезервовВзносыВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПозицииФизическихЛиц = Неопределено;
	СоответствиеОбходовФизическихЛиц = Неопределено;	
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("Взносы", ПозицииФизическихЛиц) Тогда
			ПозицииФизическихЛиц = Новый Соответствие;
			ПозицииВставки.Вставить("Взносы", ПозицииФизическихЛиц);
		КонецЕсли;
		СоответствиеОбходовФизическихЛиц = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйФормы.ОбходТаблицыИдентификаторов(СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц, СтрокаИсточник.ФизическоеЛицо);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточник);
	КонецЦикла;
	
	РасчетЗарплатыРасширенныйФормы.УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовФизическихЛиц, ПозицииФизическихЛиц);
	
КонецПроцедуры

Процедура РасчетРезервовРасчетВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПозицииСотрудников = Неопределено;
	СоответствиеОбходовСотрудников = Неопределено;
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("РасчетРезервов", ПозицииСотрудников) Тогда
			ПозицииСотрудников = Новый Соответствие;
			ПозицииВставки.Вставить("РасчетРезервов", ПозицииСотрудников);
		КонецЕсли;
		СоответствиеОбходовСотрудников = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйФормы.ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников, ПозицииСотрудников, СтрокаИсточник.Сотрудник);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточник);
	КонецЦикла;
	
	РасчетЗарплатыРасширенныйФормы.УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников, ПозицииСотрудников);
	
КонецПроцедуры

Процедура ОценочныеОбязательстваПоСотрудникамВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, ПозицииВставки = Неопределено) Экспорт
	
	ПозицииСотрудников = Неопределено;
	СоответствиеОбходовСотрудников = Неопределено;
	
	Если ПозицииВставки <> Неопределено Тогда
		Если Не ПозицииВставки.Свойство("ОценочныеОбязательстваПоСотрудникам", ПозицииСотрудников) Тогда
			ПозицииСотрудников = Новый Соответствие;
			ПозицииВставки.Вставить("ОценочныеОбязательстваПоСотрудникам", ПозицииСотрудников);
		КонецЕсли;
		СоответствиеОбходовСотрудников = Новый Соответствие;
	КонецЕсли;
			
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		ОбходТаблицыИдентификаторов = РасчетЗарплатыРасширенныйФормы.ОбходТаблицыИдентификаторов(СоответствиеОбходовСотрудников, ПозицииСотрудников, СтрокаИсточник.Сотрудник);
		СтрокаФормы = РасчетЗарплатыРасширенныйКлиентСервер.СтрокаТаблицыПоНачальнойПозиции(ТаблицаПриемник, ОбходТаблицыИдентификаторов);
		ЗаполнитьЗначенияСвойств(СтрокаФормы, СтрокаИсточник);
	КонецЦикла; 
	
	РасчетЗарплатыРасширенныйФормы.УдалитьНеактуальныеСтрокиФормы(ТаблицаПриемник, СоответствиеОбходовСотрудников, ПозицииСотрудников);
	
КонецПроцедуры

Процедура ОценочныеОбязательстваВДанныеФормы(ТаблицаПриемник, ТаблицаИсточник, Очищать) Экспорт
	
	Если Очищать Тогда
		ТаблицаПриемник.Очистить();
		Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточник);
		КонецЦикла;
	Иначе
		
		ТаблицаРезервов = ТаблицаИсточник.Скопировать(Новый Структура("КорректировкаОбязательств", Ложь));
		ТаблицаРезервов.Свернуть("МестоВСтруктуреПредприятия, Подразделение,
			|СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования",
			"СуммаРезерва,СуммаРезерваНУ,СуммаРезерваСтраховыхВзносов,СуммаРезерваСтраховыхВзносовНУ,
			|СуммаРезерваФССНесчастныеСлучаи,СуммаРезерваФССНесчастныеСлучаиНУ");
		
		МасивСтрокКУдалению = Новый Массив;
		Отбор = Новый Структура("МестоВСтруктуреПредприятия, Подразделение,
			|СпособОтраженияЗарплатыВБухУчете, СтатьяФинансирования");
		Для Каждого СтрокаИсточник Из ТаблицаРезервов Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
			МассивСтрок = ТаблицаПриемник.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточник);
			Иначе
				ДанныеЗаполненые = Ложь;
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					Если Не СтрокаМассива.ФиксСтрока И Не СтрокаМассива.ФиксРасчет И Не СтрокаМассива.ФиксЗаполнение Тогда
						Если Не ДанныеЗаполненые Тогда
							ЗаполнитьЗначенияСвойств(СтрокаМассива, СтрокаИсточник);
							ДанныеЗаполненые = Истина;
						Иначе
							МасивСтрокКУдалению.Добавить(СтрокаМассива);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаПриемник Из ТаблицаПриемник Цикл
			Если Не СтрокаПриемник.ФиксСтрока И Не СтрокаПриемник.ФиксРасчет И Не СтрокаПриемник.ФиксЗаполнение Тогда
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаПриемник);
				МассивСтрок = ТаблицаИсточник.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() = 0 Тогда
					МасивСтрокКУдалению.Добавить(СтрокаПриемник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если МасивСтрокКУдалению.Количество() > 0 Тогда
			Для Каждого СтрокаМассива Из МасивСтрокКУдалению Цикл
				ТаблицаПриемник.Удалить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетРезервовВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт
	
	СтрокиРасчета = Новый Массив;
	
	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
			СтрокиРасчета.Добавить(СтрокаФормы);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерРасчета.Зарплата.РасчетРезервов.Добавить(), СтрокаФормы);
		
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("РасчетРезервов", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОценочныеОбязательстваПоСотрудникамВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт
	
	СтрокиРасчета = Новый Массив;
	
	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
			СтрокиРасчета.Добавить(СтрокаФормы);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерРасчета.Зарплата.ОценочныеОбязательстваПоСотрудникам.Добавить(), СтрокаФормы);
		
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("ОценочныеОбязательстваПоСотрудникам", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура НачисленияВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Организация, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт

	ИдентификаторыСтрокСотрудников = Новый Соответствие;
	ФизическоеЛицо = Неопределено;
	
	Если Отбор = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИсточник, "Сотрудник");
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Иначе
		ФизическиеЛицаСотрудников = Отбор.ФизическиеЛицаСотрудников;
	КонецЕсли;
	
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаФормы.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаФормы.Сотрудник];
		Если Отбор <> Неопределено Тогда 
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаФормы.Сотрудник, СтрокаФормы.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаФормы, Организация, ФизическоеЛицо, "Начисления");
		
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Начисления", ИдентификаторыСтрокСотрудников);
	КонецЕсли;
		
КонецПроцедуры

Процедура СтрокаНачисленияВДанныеМенеджераРасчета(МенеджерРасчета, СтрокаИсточник, Организация, ФизическоеЛицо, Владелец = Неопределено) Экспорт
	
	СтрокаПриемник = МенеджерРасчета.СтрокаТаблицыНачислений();
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
	
	//Подсистема расчета зарлаты манипулирет с полем Начисление, поэтому сменим значения
	СтрокаПриемник.ВидРасчета = СтрокаПриемник.Начисление;
	СтрокаПриемник.Начисление = СтрокаПриемник.ВидРасчетаРезерва;
	
	СтрокаПриемник.Организация = Организация;
	ВидРасчетаИнфо = РезервыПоОплатеТрудаРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчетаРезерва(СтрокаПриемник.Начисление);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(СтрокаПриемник, СтрокаИсточник, ВидРасчетаИнфо);
	СтрокаПриемник.ФизическоеЛицо = ФизическоеЛицо;
	СтрокаПриемник.Владелец       = Владелец;
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьДополнительныеСвойстваНачисленийМенеджераРасчета(СтрокаПриемник, СтрокаИсточник);
	
	РасчетЗарплатыРасширенныйФормы.ПоказателиВМенеджерРасчета(СтрокаПриемник, СтрокаИсточник, , РезервыПоОплатеТрудаРасширенный.МаксимальноеКоличествоПоказателей());
	
КонецПроцедуры

Процедура ВзносыВДанныеМенеджераРасчета(ТаблицаИсточник, МенеджерРасчета, Отбор = Неопределено, ПозицииВставки = Неопределено) Экспорт

	СтрокиРасчета = Новый Массив;
	ИдентификаторыСтрокФизическихЛиц = Новый Соответствие;
		
	Для Каждого СтрокаФормы Из ТаблицаИсточник Цикл
		
		Если Отбор <> Неопределено Тогда
			ФизическоеЛицо = Отбор.ФизическиеЛицаОтбор[СтрокаФормы.ФизическоеЛицо];
			Если ФизическоеЛицо = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокФизическихЛиц, СтрокаФормы.ФизическоеЛицо, СтрокаФормы.ПолучитьИдентификатор());
			СтрокиРасчета.Добавить(СтрокаФормы);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(МенеджерРасчета.Зарплата.Взносы.Добавить(), СтрокаФормы);
	КонецЦикла;
	
	Если Отбор = Неопределено Тогда
		ТаблицаИсточник.Очистить();
	КонецЕсли;
	
	Если ПозицииВставки <> Неопределено Тогда
		ПозицииВставки.Вставить("Взносы", ИдентификаторыСтрокФизическихЛиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные, Очищать = Истина) Экспорт

	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ИзмененныеДанные, "Сотрудник", Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеДанные Цикл
		
		Если Не ЗначениеЗаполнено(ИзмененнаяСтрока.ФизическоеЛицо) Тогда
			Если Не ЗначениеЗаполнено(ИзмененнаяСтрока.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			ИзмененнаяСтрока.ФизическоеЛицо = ФизическиеЛицаСотрудников[ИзмененнаяСтрока.Сотрудник];
		КонецЕсли;
		
		МенеджерРасчета.ДобавитьИсточникИзменений(
			ИзмененнаяСтрока.ИмяТаблицы,
			ИзмененнаяСтрока.ФизическоеЛицо,
			ИзмененнаяСтрока.Сотрудник,
			ИзмененнаяСтрока.ВидРасчетаРезерва);

	КонецЦикла;
	
	Если Очищать Тогда
		ИзмененныеДанные.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНачисленийУдалитьЭлементыФормы(Форма, ОписаниеТаблицыВидовРасчета, ОтложенноеИзменение = Ложь) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	
	// поля формы
	Таблица = Форма.Элементы.Найти(ИмяТаблицы);
	ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
	Если ГруппаПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыйЭлемент = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
	Если УдаляемыйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Удалить(УдаляемыйЭлемент);
	
КонецПроцедуры

#КонецОбласти
