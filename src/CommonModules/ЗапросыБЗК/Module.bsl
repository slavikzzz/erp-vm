////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с запросами
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру для 3го параметра функции ЗапросКТаблице.
//
// Возвращаемое значение:
//   Структура - Необязательные параметры
//       * Отбор        - ОтборКомпоновкиДанных, Неопределено
//       * Количество   - Число  - Максимальное количество выбираемых записей.
//                                 По умолчанию 0, что означает "Без ограничений".
//       * Порядок      - Строка - Порядок сортировки выбираемых полей.
//                                 По умолчанию "", что означает "Без сортировки".
//       * УчитыватьRLS - Булево - Если Истина то в запрос будет добавлено ключевое слово "РАЗРЕШЕННЫЕ".
//                                 По умолчанию Ложь, что означает "Не учитывать RLS".
//
//
Функция НастройкиЗапросаКТаблице() Экспорт
	НеобязательныеПараметры = Новый Структура("Количество, Порядок, УчитыватьRLS", 0, "", Ложь);
	НеобязательныеПараметры.Вставить("Отбор", Новый ОтборКомпоновкиДанных);
	Возврат НеобязательныеПараметры;
КонецФункции

// Возвращает запрос к таблице СУБД с указанными отборами и полями.
//
// Параметры:
//   Таблица   - Строка, ОбъектМетаданных - Полное имя таблицы данных или объект метаданных.
//   Поля      - Строка                   - Выбираемые поля.
//   Настройки - Структура, Неопределено  - См. функцию НастройкиЗапросаКТаблице.
//
// Возвращаемое значение:
//   Запрос
//
Функция ЗапросКТаблице(Таблица, Поля, Настройки = Неопределено) Экспорт
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиЗапросаКТаблице();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Фрагменты = Новый Массив;
	
	// Заголовок запроса.
	Фрагменты.Добавить("ВЫБРАТЬ");
	Если Настройки.УчитыватьRLS Тогда
		Фрагменты.Добавить("РАЗРЕШЕННЫЕ");
	КонецЕсли;
	Если ТипЗнч(Настройки.Количество) = Тип("Число") И Настройки.Количество > 0 Тогда
		Фрагменты.Добавить("ПЕРВЫЕ " + Формат(Настройки.Количество, "ЧГ="));
	КонецЕсли;
	
	// Выбираемые поля.
	Фрагменты.Добавить(Символы.Таб + ТекстЗапросаПолей(Поля, ""));
	
	// Источник.
	ПолноеИмя = ?(ТипЗнч(Таблица) = Тип("ОбъектМетаданных"), Таблица.ПолноеИмя(), Таблица);
	Фрагменты.Добавить("ИЗ " + ПолноеИмя + " КАК Таблица");
	
	// Условия (фильтры).
	Если Настройки.Отбор <> Неопределено Тогда
		ФрагментыУсловий = ФрагментыУсловийОтбора(Запрос, Настройки.Отбор, "", Символы.Таб);
		Если ФрагментыУсловий.Количество() > 0 Тогда
			Фрагменты.Добавить("ГДЕ" + Символы.ПС + СтрСоединить(ФрагментыУсловий, Символы.ПС + "И "));
		КонецЕсли;
	КонецЕсли;
	
	// Порядок.
	Если Не ПустаяСтрока(Настройки.Порядок) Тогда
		Фрагменты.Добавить("УПОРЯДОЧИТЬ ПО " + Настройки.Порядок);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(Фрагменты, Символы.ПС);
	Возврат Запрос;
КонецФункции

// Добавляет отбор в коллекцию отборов системы компоновки данных.
//
// Параметры:
//   Отбор        - ОтборКомпоновкиДанных                - Коллекция отборов.
//   Поле         - Строка                               - Поле отбора.
//   ВидСравнения - ВидСравненияКомпоновкиДанных, Строка - Вид сравнения отбора.
//   Значение     - Произвольный                         - Значение отбора.
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных
//
Функция ДобавитьОтбор(Отбор, Поле, ВидСравнения = Неопределено, Значение = Неопределено) Экспорт
	ЭлементОтбораКД = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораКД.Использование  = Истина;
	ЭлементОтбораКД.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Поле);
	ЭлементОтбораКД.ВидСравнения   = ВидСравненияСКД(ВидСравнения);
	ЭлементОтбораКД.ПравоеЗначение = Значение;
	Возврат ЭлементОтбораКД;
КонецФункции

// Добавляет отбор в коллекцию отборов системы компоновки данных и устанавливает РежимОтображения = Недоступный.
//
// Параметры:
//   Отбор        - ОтборКомпоновкиДанных                - Коллекция отборов.
//   Поле         - Строка                               - Поле отбора.
//   ВидСравнения - ВидСравненияКомпоновкиДанных, Строка - Вид сравнения отбора.
//   Значение     - Произвольный                         - Значение отбора.
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных
//
Функция ДобавитьНедоступныйОтбор(Отбор, Поле, ВидСравнения = Неопределено, Значение = Неопределено) Экспорт
	ЭлементОтбораКД = ДобавитьОтбор(Отбор, Поле, ВидСравнения, Значение);
	ЭлементОтбораКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Возврат ЭлементОтбораКД;
КонецФункции

// Добавляет группу в коллекцию отборов системы компоновки данных.
//
// Параметры:
//   Отбор     - ОтборКомпоновкиДанных                            - Коллекция отборов.
//   ТипГруппы - Строка, ТипГруппыЭлементовОтбораКомпоновкиДанных - См. функцию ТипГруппыОтбораСКД.
//
// Возвращаемое значение:
//   ГруппаЭлементовОтбораКомпоновкиДанных
//
Функция ДобавитьГруппуОтбора(Отбор, ТипГруппы = "И") Экспорт
	ГруппаЭлементовОтбораКД = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораКД.Использование = Истина;
	ГруппаЭлементовОтбораКД.ТипГруппы     = ТипГруппыОтбораСКД(ТипГруппы);
	Возврат ГруппаЭлементовОтбораКД;
КонецФункции

// Добавляет отборы в коллекцию отборов системы компоновки данных.
//
// Параметры:
//   Отбор     - ОтборКомпоновкиДанных            - Целевая (дополняемая) коллекция отборов.
//   Коллекция - ОтборКомпоновкиДанных, Структура - Исходная (дополняющая) коллекция отборов.
//
Процедура ДополнитьОтбор(Отбор, Коллекция) Экспорт
	Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из Коллекция Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			ДобавитьОтбор(Отбор, КлючИЗначение.Ключ, ВидСравненияКД, КлючИЗначение.Значение);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ОтборКомпоновкиДанных") Тогда
		Для Каждого ЭлементОтбораКД Из Коллекция.Элементы Цикл
			Тип = ТипЗнч(ЭлементОтбораКД);
			ЭлементОтбораКДПриемник = Отбор.Элементы.Добавить(Тип);
			ЗаполнитьЗначенияСвойств(ЭлементОтбораКДПриемник, ЭлементОтбораКД);
			Если Тип = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ДополнитьОтбор(ЭлементОтбораКДПриемник, ЭлементОтбораКД);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает вид сравнения компоновки данных.
//
// Параметры:
//   ПараметрВидСравнения - Строка, ВидСравненияКомпоновкиДанных - Вид сравнения строкой.
//
// Возвращаемое значение:
//   ВидСравненияКомпоновкиДанных
//
Функция ВидСравненияСКД(ПараметрВидСравнения)
	
	Если ТипЗнч(ПараметрВидСравнения) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Возврат ПараметрВидСравнения;
	Иначе
		Если ПараметрВидСравнения = "=" Или ПараметрВидСравнения = Неопределено Тогда
			Возврат ВидСравненияКомпоновкиДанных.Равно;
		ИначеЕсли ПараметрВидСравнения = "<>" Тогда
			Возврат ВидСравненияКомпоновкиДанных.НеРавно;
		ИначеЕсли ПараметрВидСравнения = ">" Тогда
			Возврат ВидСравненияКомпоновкиДанных.Больше;
		ИначеЕсли ПараметрВидСравнения = ">=" Тогда
			Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ИначеЕсли ПараметрВидСравнения = "<" Тогда
			Возврат ВидСравненияКомпоновкиДанных.Меньше;
		ИначеЕсли ПараметрВидСравнения = "<=" Тогда
			Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		Иначе
			Вид = ОбщегоНазначенияБЗК.ЗначениеСвойства(ВидСравненияКомпоновкиДанных, ПараметрВидСравнения);
			Если Не ЗначениеЗаполнено(Вид) Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный параметр ""ВидСравнения"" = ""%1""';
												|en = 'Unknown parameter ""ВидСравнения"" = ""%1""'"), ПараметрВидСравнения);
			КонецЕсли;
			Возврат Вид;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает тип группы отбора компоновки данных.
//
// Параметры:
//   ТипГруппы - Строка, ТипГруппыЭлементовОтбораКомпоновкиДанных - Тип группы строкой.
//
// Возвращаемое значение:
//   ТипГруппыЭлементовОтбораКомпоновкиДанных
//
Функция ТипГруппыОтбораСКД(ТипГруппы) Экспорт
	
	Если ТипЗнч(ТипГруппы) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
		Возврат ТипГруппы;
	Иначе
		ТипГруппыВРег = ВРег(ТипГруппы);
		Если ТипГруппыВРег = "И" Тогда
			Возврат ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ИначеЕсли ТипГруппыВРег = "ИЛИ" Тогда
			Возврат ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ИначеЕсли ТипГруппыВРег = "НЕ" Тогда
			Возврат ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		Иначе
			Тип = ОбщегоНазначенияБЗК.ЗначениеСвойства(ТипГруппыЭлементовОтбораКомпоновкиДанных, ТипГруппы);
			Если Не ЗначениеЗаполнено(Тип) Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный параметр ""ТипГруппы"" = ""%1""';
												|en = 'Unknown parameter ""ТипГруппы"" = ""%1""'"), ТипГруппы);
			КонецЕсли;
			Возврат Тип;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса полей без последней запятой.
//
// Параметры:
//   Поля             - Строка - Имена реквизитов таблицы перечисленные через запятую.
//   ПсевдонимТаблицы - Строка - Имя таблицы из которой выбираются реквизиты.
//   ИгнорируемыеПоля - Строка - Имена исключаемых из текста запроса реквизитов.
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстЗапросаПолей(Поля, ПсевдонимТаблицы, ИгнорируемыеПоля = "") Экспорт
	Структура = Новый Структура(Поля);
	Если ИгнорируемыеПоля <> "" Тогда
		КоллекцииБЗК.УдалитьКлючиСтруктуры(Структура, ИгнорируемыеПоля);
	КонецЕсли;
	Если Структура.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ФрагментыПолей = Новый Массив;
	Префикс = ?(ПсевдонимТаблицы = "", "", ПсевдонимТаблицы + ".");
	Для Каждого КлючИЗначение Из Структура Цикл
		ФрагментыПолей.Добавить(Префикс + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат СтрСоединить(ФрагментыПолей, "," + Символы.ПС + Символы.Таб);
КонецФункции

// Возвращает фрагменты запроса с условиями отбора.
//
// Параметры:
//   Запрос           - Запрос                - Запрос, в котором требуется установить параметры.
//   ОтборКД          - ОтборКомпоновкиДанных - Устанавливаемые отборы.
//   ПсевдонимТаблицы - Строка                - Имя таблицы, к которой применяются условия.
//
// Возвращаемое значение:
//   Массив Из Строка
//
Функция ФрагментыУсловийОтбора(Запрос, ОтборКД, ПсевдонимТаблицы, Отступ = "") Экспорт
	ФрагментыУсловий = Новый Массив;
	НомерПараметра = 0;
	Префикс = ?(ПсевдонимТаблицы = "", "", ПсевдонимТаблицы + ".");
	Для Каждого ЭлементОтбораКД Из ОтборКД.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбораКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекстУсловийГруппы = ТекстУсловийГруппыОтбора(Запрос, ЭлементОтбораКД, ПсевдонимТаблицы, Отступ + Символы.Таб);
			Если ЗначениеЗаполнено(ТекстУсловийГруппы) Тогда
				ФрагментыУсловий.Добавить(ТекстУсловийГруппы);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Пока Истина Цикл
			НомерПараметра = НомерПараметра + 1;
			ИмяПараметра = "П" + Формат(НомерПараметра, "ЧГ=");
			Если Не Запрос.Параметры.Свойство(ИмяПараметра) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбораКД.ПравоеЗначение);
		
		ПолеОтбора = Строка(ЭлементОтбораКД.ЛевоеЗначение);
		Если Префикс <> "" И Не СтрНачинаетсяС(ПолеОтбора, Префикс) Тогда
			ПолеОтбора = Префикс + ПолеОтбора;
		КонецЕсли;
		
		Если ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " = &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " В (&" + ИмяПараметра + ")");
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " В ИЕРАРХИИ &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " В ИЕРАРХИИ (&" + ИмяПараметра + ")");
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " <> &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			ФрагментыУсловий.Добавить(Отступ + "НЕ " + ПолеОтбора + " В (&" + ИмяПараметра + ")");
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			ФрагментыУсловий.Добавить(Отступ + "НЕ " + ПолеОтбора + " В ИЕРАРХИИ &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			ФрагментыУсловий.Добавить(Отступ + "НЕ " + ПолеОтбора + " В ИЕРАРХИИ (&" + ИмяПараметра + ")");
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " > &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " >= &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " < &" + ИмяПараметра);
			
		ИначеЕсли ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			ФрагментыУсловий.Добавить(Отступ + ПолеОтбора + " <= &" + ИмяПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФрагментыУсловий;
КонецФункции

Функция ТекстУсловийГруппыОтбора(Запрос, ГруппаЭлементовОтбораКД, ПсевдонимТаблицы, Отступ)
	Если ГруппаЭлементовОтбораКД.Элементы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ФрагментыУсловий = ФрагментыУсловийОтбора(Запрос, ГруппаЭлементовОтбораКД, ПсевдонимТаблицы, Отступ);
	
	ПСТаб = Символы.ПС + Отступ;
	ТипГруппы = ОбщегоНазначенияБЗК.ЗначениеСвойства(ГруппаЭлементовОтбораКД, "ТипГруппы");
	Если      ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
		Возврат Отступ +    "(" + СтрСоединить(ФрагментыУсловий, ПСТаб + "ИЛИ ") + ")";
	ИначеЕсли ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
		Возврат Отступ + "НЕ (" + СтрСоединить(ФрагментыУсловий, ПСТаб + "И ")   + ")";
	Иначе
		Возврат Отступ +    "(" + СтрСоединить(ФрагментыУсловий, ПСТаб + "И ")   + ")";
	КонецЕсли;
КонецФункции

#КонецОбласти