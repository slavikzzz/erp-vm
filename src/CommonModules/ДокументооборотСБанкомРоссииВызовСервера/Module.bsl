#Область ПрограммныйИнтерфейс

Функция СформироватьАрхивСОтчетамиЦБ(Контекст) Экспорт
	
	Если Контекст.РезультатВыгрузки.Количество() = 1 Тогда
		// если архив уже сформирован выгрузкой
		ЭлементРезультатаВыгрузки = Контекст.РезультатВыгрузки[0];
		РасширениеВыгрузки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементРезультатаВыгрузки.Имя).Расширение;
		Если нрег(РасширениеВыгрузки) = ".zip" Тогда
			ОсновныеПоляОтчета = ИзвлечьОсновныеПоляОтчета1ПИ("");
			ОсновныеПоляОтчета.Вставить("Это1ПИ", Ложь);
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.Идентификатор) Тогда
				ОсновныеПоляОтчета.Идентификатор = нрег(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.Комментарий) Тогда
				ОсновныеПоляОтчета.Комментарий = ЭлементРезультатаВыгрузки.Имя;
			КонецЕсли;
			
			КороткоеИмяФайлаАрхива = ОсновныеПоляОтчета.Идентификатор + ".zip.enc";
			ПолноеИмяФайлаАрхива = КаталогВременныхФайлов();
			РазделительПутиОС = ПолучитьРазделительПути();
			ПолноеИмяФайлаАрхива = ?(Прав(ПолноеИмяФайлаАрхива, 1) = РазделительПутиОС,
				ПолноеИмяФайлаАрхива, ПолноеИмяФайлаАрхива + РазделительПутиОС) + КороткоеИмяФайлаАрхива;
			ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ЭлементРезультатаВыгрузки.Адрес);
			АдресАрхива = ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива, Контекст.УникальныйИдентификатор);
			
			Контекст.Вставить("ТекстВыгрузки", 		АдресАрхива);
			Контекст.Вставить("ИмяФайлаВыгрузки", 	КороткоеИмяФайлаАрхива);
			Контекст.Вставить("ОсновныеПоляОтчета", ОсновныеПоляОтчета);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	КодировкаФайла = "windows-1251";
	КаталогФайловОтчетности = ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	
	ОсновныеПоляОтчета = Неопределено;
	ПолныеИменаФайлов = Новый Массив;
	Для каждого ЭлементРезультатаВыгрузки Из Контекст.РезультатВыгрузки Цикл
		ПолноеИмяФайла = КаталогФайловОтчетности + ЭлементРезультатаВыгрузки.Имя;
		
		Если ЭтоАдресВременногоХранилища(ЭлементРезультатаВыгрузки.Адрес) Тогда
			ДвоичныеДанныеФайлаВыгрузки = ПолучитьИзВременногоХранилища(ЭлементРезультатаВыгрузки.Адрес);
			ДвоичныеДанныеФайлаВыгрузки.Записать(ПолноеИмяФайла);
			
		Иначе
			Текст = Новый ТекстовыйДокумент;
			Текст.УстановитьТекст(ЭлементРезультатаВыгрузки.Адрес);
			Текст.Записать(ПолноеИмяФайла, КодировкаФайла);
		КонецЕсли;
		
		Если ОсновныеПоляОтчета = Неопределено Тогда
			ОсновныеПоляОтчета = Новый Структура;
			РасширениеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ЭлементРезультатаВыгрузки.Имя).Расширение;
			РасширениеФайла = нрег(РасширениеФайла);
			Это1ПИ = Лев(РасширениеФайла, 4) <> ".xls";
			Это1ПИФорматаXML = Это1ПИ И Лев(РасширениеФайла, 4) = ".xml";
			
			ОсновныеПоляОтчета = ИзвлечьОсновныеПоляОтчета1ПИ(?(Это1ПИФорматаXML, ПолноеИмяФайла, ""));
			ОсновныеПоляОтчета.Вставить("Это1ПИ", Это1ПИ);
			ОсновныеПоляОтчета.Вставить("ИмяФайла", ЭлементРезультатаВыгрузки.Имя);
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.Идентификатор) Тогда
				ОсновныеПоляОтчета.Идентификатор = нрег(СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.Комментарий) Тогда
				ОсновныеПоляОтчета.Комментарий = ЭлементРезультатаВыгрузки.Имя;
			КонецЕсли;
		КонецЕсли;
		
		ПолныеИменаФайлов.Добавить(ПолноеИмяФайла);
	КонецЦикла;
	
	Если ОсновныеПоляОтчета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОсновныеПоляОтчета.Это1ПИ Тогда
		Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.ОГРН) ИЛИ НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.ИНН) Тогда
			ЭтоЮридическоеЛицо = ?(ЗначениеЗаполнено(ОсновныеПоляОтчета.ИНН), Неопределено,
				РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Контекст.Организация));
			ЗапрашиваемыеРеквизиты = ?(ЗначениеЗаполнено(ОсновныеПоляОтчета.ОГРН), "", "ОГРН")
				+ ?(ЗначениеЗаполнено(ОсновныеПоляОтчета.ОГРН) ИЛИ ЗначениеЗаполнено(ОсновныеПоляОтчета.ИНН), "", ", ")
				+ ?(ЗначениеЗаполнено(ОсновныеПоляОтчета.ИНН), "", ?(ЭтоЮридическоеЛицо, "ИННЮЛ", "ИННФЛ"));
			
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Контекст.Организация,, ЗапрашиваемыеРеквизиты);
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.ОГРН) Тогда
				ОсновныеПоляОтчета.ОГРН = СведенияОбОрганизации.ОГРН;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОсновныеПоляОтчета.ИНН) Тогда
				ОсновныеПоляОтчета.ИНН = ?(ЭтоЮридическоеЛицо, СведенияОбОрганизации.ИННЮЛ, СведенияОбОрганизации.ИННФЛ);
			КонецЕсли;
		КонецЕсли;
		
		ОсновныеПоляОтчета.Вставить("Оператор", Неопределено);
		Если ЗначениеЗаполнено(Контекст.УчетнаяЗапись) Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОсновныеПоляОтчета.Оператор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контекст.УчетнаяЗапись,
				"СпецоператорСвязи");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ПолноеИмяФайла = СформироватьОписаниеОтчета1ПИ(КаталогФайловОтчетности, ОсновныеПоляОтчета);
		ПолныеИменаФайлов.Добавить(ПолноеИмяФайла);
	КонецЕсли;
	
	КороткоеИмяФайлаАрхива = ОсновныеПоляОтчета.Идентификатор + ".zip.enc";
	ПолноеИмяФайлаАрхива = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	ПолноеИмяФайлаАрхива = ?(Прав(ПолноеИмяФайлаАрхива, 1) = РазделительПутиОС,
		ПолноеИмяФайлаАрхива, ПолноеИмяФайлаАрхива + РазделительПутиОС) + КороткоеИмяФайлаАрхива;
	
	ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаАрхива,,,, УровеньСжатияZIP.Максимальный);
	
	Для каждого ПолноеИмяФайла Из ПолныеИменаФайлов Цикл
		ЗаписьZIP.Добавить(ПолноеИмяФайла);
	КонецЦикла;
	
	ЗаписьZIP.Записать();
	
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(ПолноеИмяФайлаАрхива);
	АдресАрхива = ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива, Контекст.УникальныйИдентификатор);
	
	Контекст.Вставить("ТекстВыгрузки", 		АдресАрхива);
	Контекст.Вставить("ИмяФайлаВыгрузки", 	КороткоеИмяФайлаАрхива);
	Контекст.Вставить("ОсновныеПоляОтчета", ОсновныеПоляОтчета);
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(КаталогФайловОтчетности);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ПолноеИмяФайлаАрхива);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьОсновныеПоляОтчета1ПИ(ИмяXMLФайлаВыгрузкиОтчета)
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Комментарий", 	"");
	Результат.Вставить("ОГРН", 			"");
	Результат.Вставить("ИНН", 			"");
	
	Если ЗначениеЗаполнено(ИмяXMLФайлаВыгрузкиОтчета) Тогда
		ДеревоXML = ДеревоXMLИзФайла(ИмяXMLФайлаВыгрузкиОтчета);
		Если ДеревоXML <> Неопределено Тогда
			Результат.Идентификатор = ?(ДеревоXML.Свойства().Получить("guid") = Неопределено, "", СокрЛП(ДеревоXML.guid));
			Результат.Комментарий = ?(ДеревоXML.Свойства().Получить("comment") = Неопределено, "", СокрЛП(ДеревоXML.comment));
			
			Если ДеревоXML.Свойства().Получить("reportTitle") <> Неопределено Тогда
				УзелЗаголовокОтчета = ДеревоXML.reportTitle;
				
				Результат.ОГРН = ?(УзелЗаголовокОтчета.Свойства().Получить("ogrnCode") = Неопределено, "",
					СокрЛП(УзелЗаголовокОтчета.ogrnCode));
				Результат.ИНН = ?(УзелЗаголовокОтчета.Свойства().Получить("innCode") = Неопределено, "",
					СокрЛП(УзелЗаголовокОтчета.innCode));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОписаниеОтчета1ПИ(КаталогФайловОтчетности, ПоляОписания)
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	ДобавитьУзелXML(Дерево, "xmlns:fpssopi", Истина, "urn:custis:fpssopi:2.0.0");
	ДобавитьУзелXML(Дерево, "fpssopi:ReportId",, ПоляОписания.Идентификатор);
	
	УзелИнформацияОбУчастнике = ДобавитьУзелXML(Дерево, "fpssopi:RespondentInfo");
	ДобавитьУзелXML(УзелИнформацияОбУчастнике, "fpssopi:INN",, ПоляОписания.ИНН);
	ДобавитьУзелXML(УзелИнформацияОбУчастнике, "fpssopi:OGRN",, ПоляОписания.ОГРН);
	
	ДобавитьУзелXML(Дерево, "fpssopi:FileName",, ПоляОписания.ИмяФайла);
	ДобавитьУзелXML(Дерево, "fpssopi:Description",, ПоляОписания.Комментарий);
	ОператорСтрокой = "";
	Если ЗначениеЗаполнено(ПоляОписания.Оператор) Тогда
		Если ПоляОписания.Оператор = Перечисления.СпецоператорыСвязи.КалугаАстрал Тогда
			ОператорСтрокой = "Калуга_Астрал";
		ИначеЕсли ПоляОписания.Оператор <> Перечисления.СпецоператорыСвязи.Прочие Тогда
			ИндексОператора = Перечисления.СпецоператорыСвязи.Индекс(ПоляОписания.Оператор);
			ОператорСтрокой = Метаданные.Перечисления.СпецоператорыСвязи.ЗначенияПеречисления[ИндексОператора].Имя;
		КонецЕсли;
	КонецЕсли;
	ДобавитьУзелXML(Дерево, "fpssopi:Operator",, ОператорСтрокой);
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML(Дерево, "fpssopi:ReportDescription");
	
	// записываем строку в файл
	ПолноеИмяФайла = КаталогФайловОтчетности + "report_meta.xml";
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайла);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Функция СоздатьДеревоXML() Экспорт
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Код");
	ДеревоXML.Колонки.Добавить("Тип");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("ЭтоCDATA");
	Возврат ДеревоXML;
	
КонецФункции

Функция ДобавитьУзелXML(
		Родитель,
		Код,
		ЭтоАтрибут = Ложь,
		Значение = Неопределено,
		Необязательный = Ложь,
		ЭтоCDATA = Ложь)
	
	Если Необязательный И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовСтр = Родитель.Строки.Добавить();
	
	НовСтр.Код = Код;
	НовСтр.Значение = Значение;
	Если ТипЗнч(ЭтоАтрибут) = Тип("Булево") Тогда
		НовСтр.Тип = ?(ЭтоАтрибут, "А", "Э");
	Иначе
		НовСтр.Тип = ЭтоАтрибут;
	КонецЕсли;
	
	ТипЗнчРодитель = ТипЗнч(Родитель);
	Если (ТипЗнчРодитель = Тип("ДеревоЗначений") И Родитель.Колонки.Найти("ЭтоCDATA") <> Неопределено)
	ИЛИ (ТипЗнчРодитель = Тип("СтрокаДереваЗначений")
		И Родитель.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено) Тогда
		
		НовСтр.ЭтоCDATA = ЭтоCDATA;
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

Функция ЗаписатьXMLВФайл(ТекстДляЗаписи, ФайлДляЗаписи, Кодировка = "windows-1251")
	
	Попытка
		ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, Кодировка, , , Символы.ПС);
		ПотокЗаписи.Записать(ТекстДляЗаписи);
		ПотокЗаписи.Закрыть();
	Исключение
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось записать файл XML:
						|%1';
						|en = 'Не удалось записать файл XML:
						|%1'"),
			ИнформацияОбОшибке().Описание);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстСообщения);
		Возврат Ложь;
	Конецпопытки;
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(
		ДеревоВыгрузки,
		ИмяКорневогоЭлемента = Неопределено)
	
	ПотокXML = СоздатьНовыйПотокXML();
	
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>"
		+ Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ДеревоXMLИзФайла(ПутьКФайлу)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		Фабрика = Новый ФабрикаXDTO;
		ДеревоXML = Фабрика.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		Возврат ДеревоXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

#КонецОбласти
