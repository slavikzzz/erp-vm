#Область ПрограммныйИнтерфейс

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам

#Область ПроверкаЗаполнения

// Проверяет совпадение табличной части "Штрихкоды упаковок" и табличной части ("Товары")
//   в отношении маркируемой продукции перед формированием документа ЭДО.
//   Проверка не выполняется если по документу уже оформлена отгрузка товаров ИСМП (прямой обмен).
//   Допущение: в документе по одной номенклатуре нет отновременно строк с указанием серий и строк без серий.
//
// Параметры:
//   ПроверяемыйДокумент - ДокументСсылка - проверяемый документ
//   АвтоматическиФормироватьОСУ - Булево - коды ОСУ по документу могут формироваться автоматически
// Возвращаемое значение:
//   Булево - номенклатура и количество по маркируемой продукции совпадают
Функция ДанныеДокументаСоответствуютДаннымУпаковок(ПроверяемыйДокумент, АвтоматическиФормироватьОСУ = Ложь) Экспорт
	
	// Проверка прямого обмена: при его использовании проверка штрихкодов не производится
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ПроверяемыйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтгрузкаТоваровИСМП.Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|ГДЕ
	|	НЕ ОтгрузкаТоваровИСМП.ПометкаУдаления
	|	И ОтгрузкаТоваровИСМП.ДокументОснование = &ДокументОснование";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяДокумента = ПроверяемыйДокумент.Метаданные().Имя;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ПроверяемыйДокумент);
	
	ИмяТабличнойЧасти = ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок;
	ИмяКолонки        = ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки;
	
	ИмяТаблицы = СтрШаблон("Документ.%1.%2", ИмяДокумента, ИмяТабличнойЧасти);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ИмяПоляШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	&ИмяТаблицы КАК ТаблицаШтрихКодыУпаковок
	|ГДЕ
	|	ТаблицаШтрихКодыУпаковок.Ссылка = &ПроверяемыйДокумент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПоляШтрихкодУпаковки", СтрШаблон("ТаблицаШтрихКодыУпаковок.%1", ИмяКолонки));
	
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ПроверяемыйДокумент);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	//@skip-check bsl-legacy-check-string-literal
	ДатаКонтроля = НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "Дата"));
	
	ВидыПродукцииДляКонтроляМарок = Новый Массив;
	ВидыПродукцииДляОСУ           = Новый Массив;
	
	ВидыПродукции = ОбщегоНазначенияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(ДатаКонтроля, Ложь);
	ВидыПродукцииПоддерживающиеОСУ = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииОбъемноСортовогоУчета();
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если ОбщегоНазначенияИСМППовтИсп.ДействуетКонтрольПриПродажеОптомПоштучно(ВидПродукции, ДатаКонтроля) Тогда
			ВидыПродукцииДляКонтроляМарок.Добавить(ВидПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВидПродукции Из ВидыПродукцииПоддерживающиеОСУ Цикл
		
		Если ОбщегоНазначенияИСМППовтИсп.ДействуетКонтрольПриПродажеОптомПоОСУ(ВидПродукции, ДатаКонтроля)
			И Не ОбщегоНазначенияИСМППовтИсп.ДействуетКонтрольПриПродажеОптомПоштучно(ВидПродукции, ДатаКонтроля) Тогда
			ВидыПродукцииДляОСУ.Добавить(ВидПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДерева    = Содержимое(ШтрихкодыУпаковок, ВидыПродукцииДляКонтроляМарок);
	ДанныеДокумента = ТаблицаМаркируемойПродукцииДокумента(ПроверяемыйДокумент, ВидыПродукцииДляКонтроляМарок);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ДанныеДерева.Серия,
	|	ДанныеДерева.Количество,
	|	ДанныеДерева.КоличествоНеУказано
	|ПОМЕСТИТЬ ДанныеДерева
	|ИЗ
	|	&ДанныеДерева КАК ДанныеДерева
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Серия,
	|	ДанныеДокумента.Количество
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура      КАК Номенклатура,
	|	ДанныеДокумента.Характеристика    КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДокумента.Серия
	|	КОНЕЦ                             КАК Серия,
	|	&ТребуетВзвешивания КАК ТребуетВзвешивания,
	|	СУММА(ДанныеДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ ОчищенныеДанныеДокумента
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДокумента.Серия
	|	КОНЕЦ,
	|	&ТребуетВзвешивания
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура      КАК Номенклатура,
	|	ДанныеДерева.Характеристика    КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Не ДанныеДокумента.Номенклатура ЕСТЬ NULL
	|			ТОГДА &ПустаяСерия
	|		КОГДА ДанныеДерева.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДерева.Серия
	|	КОНЕЦ                          КАК Серия,
	|	СУММА(ДанныеДерева.Количество) КАК Количество,
	|	СУММА(ДанныеДерева.КоличествоНеУказано) КАК КоличествоНеУказано
	|ПОМЕСТИТЬ ОчищенныеДанныеДерева
	|ИЗ
	|	ДанныеДерева КАК ДанныеДерева
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОчищенныеДанныеДокумента КАК ДанныеДокумента
	|		ПО ДанныеДерева.Номенклатура = ДанныеДокумента.Номенклатура
	|		И ДанныеДерева.Характеристика = ДанныеДокумента.Характеристика
	|		И ДанныеДокумента.Серия = &ПустаяСерия
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ВЫБОР
	|		КОГДА Не ДанныеДокумента.Номенклатура ЕСТЬ NULL
	|			ТОГДА &ПустаяСерия
	|		КОГДА ДанныеДерева.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДерева.Серия
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Номенклатура, ДанныеДерева.Номенклатура)     КАК Номенклатура,
	|	ЕСТЬNULL(ДанныеДокумента.Характеристика, ДанныеДерева.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ДанныеДокумента.Серия, ДанныеДерева.Серия)                   КАК Серия,
	|	ЕСТЬNULL(ДанныеДерева.Количество , 0) - ЕСТЬNULL(ДанныеДокумента.Количество,0) КАК Различие,
	|	ЕСТЬNULL(ДанныеДерева.Количество , 0) КАК ДанныеДерева
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ОчищенныеДанныеДокумента КАК ДанныеДокумента
	|		ПОЛНОЕ СОЕДИНЕНИЕ ОчищенныеДанныеДерева КАК ДанныеДерева
	|		ПО ДанныеДерева.Номенклатура = ДанныеДокумента.Номенклатура
	|		И ДанныеДерева.Характеристика = ДанныеДокумента.Характеристика
	|		И ДанныеДерева.Серия = ДанныеДокумента.Серия
	|ГДЕ
	|	ЕСТЬNULL(ДанныеДерева.Количество, 0) - ЕСТЬNULL(ДанныеДокумента.Количество, 0) <> 0
	|	И (ЕСТЬNULL(ДанныеДокумента.ТребуетВзвешивания, ЛОЖЬ) = ЛОЖЬ
	|		ИЛИ ЕСТЬNULL(ДанныеДерева.КоличествоНеУказано, 0) = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	Если АвтоматическиФормироватьОСУ Тогда
		ТекстЗапроса = ТекстЗапроса + ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеШтрихкодовУпаковок.Номенклатура
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
	|		ПО СвойстваМаркируемойПродукции.Номенклатура = ДанныеШтрихкодовУпаковок.Номенклатура
	|ГДЕ
	|	ДанныеШтрихкодовУпаковок.ДанныеДерева <> 0
	|	ИЛИ НЕ СвойстваМаркируемойПродукции.ВидПродукции В (&ВидыПродукцииПоддерживаютОСУ)
	|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеШтрихкодовУпаковок.Номенклатура
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|";
	КонецЕсли;
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ДанныеДокумента.Номенклатура");
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеДерева",    ДанныеДерева);
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	Запрос.УстановитьПараметр("ПустаяСерия",        ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("НезаполненнаяСерия", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ВидыПродукцииПоддерживаютОСУ", ВидыПродукцииДляОСУ);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

//Проверяет что по текущему прикладному документу есть электронный документ (входящий или исходящий).
//   Вариант: по текущему прикладному документу есть электронный документ с данными о маркируемых товарах.
//
// Параметры:
//   Ссылка - ДокументСсылка - проверяемый документ
//   СодержащимДанныеОМаркируемыхТоварах - Булево - отбор документа ЭДО с данными о маркируемых товарах
//
// Возвращаемое значение:
//   Булево - с текущим документом связан электронный документ.
//
Функция ДокументСвязанСЭлектронным(Ссылка, СодержащимДанныеОМаркируемыхТоварах = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	УстановитьПривилегированныйРежим(Истина);
	Статус = МодульОбменСКонтрагентами.СтатусДокументооборота(Ссылка);
	
	Если Статус.ЭлектронныйДокумент = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не СодержащимДанныеОМаркируемыхТоварах Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВерсияАПИ() = 1 Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус.ЭлектронныйДокумент, "СодержитДанныеОМаркируемыхТоварах");
	Иначе 
		Возврат МодульОбменСКонтрагентами.СведенияОбЭлектронномДокументе(Статус.ЭлектронныйДокумент).СодержитМаркируемыеТовары;
	КонецЕсли;
	
КонецФункции

// Проверяет распределение штрихкодов по строкам товаров. Требуется использование в формате ЭДО с ограничением
// количества символов кодов маркировки для строки маркируемой продукции (после применения ограничения могут быть
// распределены не все коды).
//
// Параметры:
//   ДанныеШтрихкодовУпаковок  - См. ЧастичноеСодержимое
//   ОбъектыСОграничениемДлины - Массив Из ДокументСсылка - ссылки на документы, где требуется проверка
//   Отказ                     - Булево - признак что не все коды распределены
//
Процедура ПроверитьСведенияОМаркировке(ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины, Отказ) Экспорт

	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Обработан, Ссылка", Ложь, Неопределено);
	Для Каждого Ссылка Из ОбъектыСОграничениемДлины Цикл
		ПараметрыПоиска.Ссылка = Ссылка;
		СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
		Если СтрокиУпаковок.Количество() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет распределение штрихкодов по строкам товаров. Требуется использование в формате ЭДО с объемно-сортовыми
// кодами маркировки: для каждого такого кода нужна своя строка документа (после применения ограничения могут быть
// распределены не все коды).
//
// Параметры:
//   ДанныеШтрихкодовУпаковок  - См. ЧастичноеСодержимое
//   Отказ                     - Булево - признак что не все коды распределены
//
Процедура ПроверитьСведенияОМаркировке_2019(ДанныеШтрихкодовУпаковок, Отказ) Экспорт

	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Обработан", Ложь);
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	ВыведенныеСообщения = Новый Соответствие;
	Если СтрокиУпаковок.Количество() Тогда
		Для Каждого НеРаспределенныйКод Из СтрокиУпаковок Цикл
			Если Не ЗначениеЗаполнено(НеРаспределенныйКод.Штрихкод) Тогда
				Продолжить;
			КонецЕсли;
			Если ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура) = Неопределено Тогда
				ВыведенныеСообщения.Вставить(НеРаспределенныйКод.Номенклатура, Новый Соответствие);
			КонецЕсли;
			Если ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура).Получить(НеРаспределенныйКод.Характеристика) = Неопределено Тогда
				ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура).Вставить(НеРаспределенныйКод.Характеристика, Истина);
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось распределить коды маркировки для номенклатуры %1 %2 по строкам электронного документа по причине:
					|	В случае отгрузки кодов маркировки в смешанном режиме (объемно-сортовой учет и индивидуальные коды маркировки),
					|	требуется разбить строку в табличной части исходящего документа';
					|en = 'Не удалось распределить коды маркировки для номенклатуры %1 %2 по строкам электронного документа по причине:
					|	В случае отгрузки кодов маркировки в смешанном режиме (объемно-сортовой учет и индивидуальные коды маркировки),
					|	требуется разбить строку в табличной части исходящего документа'"),
					НеРаспределенныйКод.Номенклатура,
					НеРаспределенныйКод.Характеристика));
			КонецЕсли;
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет распределение штрихкодов по строкам товаров. Требуется использование в формате ЭДО с объемно-сортовыми
// кодами маркировки: для каждого такого кода нужна своя строка документа (после применения ограничения могут быть
// распределены не все коды).
//
// Параметры:
//   ДанныеШтрихкодовУпаковок  - См. ЧастичноеСодержимое
//   Отказ                     - Булево - признак что не все коды распределены
//
Процедура ПроверитьСведенияОМаркировке_5_02(ДанныеШтрихкодовУпаковок, Отказ) Экспорт

	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Обработан", Ложь);
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	ВыведенныеСообщения = Новый Соответствие;
	Если СтрокиУпаковок.Количество() Тогда
		Для Каждого НеРаспределенныйКод Из СтрокиУпаковок Цикл
			Если Не ЗначениеЗаполнено(НеРаспределенныйКод.Штрихкод) Тогда
				Продолжить;
			КонецЕсли;
			Если ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура) = Неопределено Тогда
				ВыведенныеСообщения.Вставить(НеРаспределенныйКод.Номенклатура, Новый Соответствие);
			КонецЕсли;
			Если ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура).Получить(НеРаспределенныйКод.Характеристика) = Неопределено Тогда
				ВыведенныеСообщения.Получить(НеРаспределенныйКод.Номенклатура).Вставить(НеРаспределенныйКод.Характеристика, Истина);
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Не удалось распределить коды маркировки для номенклатуры %1 %2 по строкам электронного документа по причине:
					|	В случае отгрузки кодов маркировки в смешанном режиме (объемно-сортовой учет и индивидуальные коды маркировки),
					|	требуется разбить строку в табличной части исходящего документа';
					|en = 'Не удалось распределить коды маркировки для номенклатуры %1 %2 по строкам электронного документа по причине:
					|	В случае отгрузки кодов маркировки в смешанном режиме (объемно-сортовой учет и индивидуальные коды маркировки),
					|	требуется разбить строку в табличной части исходящего документа'"),
					НеРаспределенныйКод.Номенклатура,
					НеРаспределенныйКод.Характеристика));
			КонецЕсли;
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийОМаркировке

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - См. ЧастичноеСодержимое
//  ОбъектыСОграничениемДлины - Массив Из ДокументСсылка - документы в которых сработало ограничение на длину строки
//
Процедура ЗаполнитьСведенияОМаркировке(Приемник, Источник, ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодУпаковки", Новый ОписаниеТипов("Строка"));
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("КодыИндивидуальныхУпаковок", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия")
			И ЗначениеЗаполнено(Источник.Серия) Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	ОбщаяДлинаКодов = 0;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		ОбщаяДлинаКодов = ОбщаяДлинаКодов + СтрДлина(СтрокаУпаковки.ЗначениеШтрихКода) + 2;
		Если ОбщаяДлинаКодов > 2000 Тогда
			ОбъектыСОграничениемДлины.Добавить(Источник.Ссылка);
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.КодУпаковки = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки);
	КонецЦикла;
	
	ВывестиОшибкуЗаполненияПользователю(ТаблицаКодов, "КодУпаковки", Источник.Ссылка, ПутьКДаннымДляОшибки);
	
КонецПроцедуры

// Заполнение признаков наличия определенных маркируемых товаров в дереве: ЕстьАлкогольнаяПродукция, ЕстьТабачнаяПродукция.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево электронного документа.
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнениеПоказателейМаркировкиВДереве_5_02(ДеревоДанных, ДанныеШтрихкодовУпаковок) Экспорт
	
	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТабачнаяПродукция    = Ложь;
	ЕстьАлкогольнаяПродукция = Ложь;
	
	Для Каждого СтрокаДанныхШтрихкодов Из ДанныеШтрихкодовУпаковок Цикл
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(СтрокаДанныхШтрихкодов.ВидПродукции) Тогда
			ЕстьТабачнаяПродукция = Истина;
		ИначеЕсли СтрокаДанныхШтрихкодов.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или СтрокаДанныхШтрихкодов.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			ЕстьАлкогольнаяПродукция = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЕстьТабачнаяПродукция И ЕстьАлкогольнаяПродукция Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьТабачнаяПродукция Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ЕстьТабачнаяПродукция", ЕстьТабачнаяПродукция);
	КонецЕсли;
	
	Если ЕстьАлкогольнаяПродукция Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ЕстьАлкогольнаяПродукция", ЕстьАлкогольнаяПродукция);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код", ТипСтрока);
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("Код", ТипСтрока);
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("Код", ТипСтрока);
	
	ТранспортныеУпаковки = Новый ТаблицаЗначений;
	ТранспортныеУпаковки.Колонки.Добавить("Код", ТипСтрока);
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия")
			И ЗначениеЗаполнено(Источник.Серия) Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	ПараметрыПоиска.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет);
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Если СтрокиУпаковок.Количество() = 0 Тогда
		ПараметрыПоиска.Удалить("ВидУпаковки");
		СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		
		Если СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			Или СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковки.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			НоваяСтрока = ИндивидуальныеУпаковки.Добавить();
		Иначе
			НоваяСтрока = КонтрольныеИдентификационныеЗнаки.Добавить();
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И Не ЗначениеЗаполнено(СтрокаУпаковки.Штрихкод) Тогда
			НоваяСтрока.Код = СформироватьКодОСУИзGTIN(Источник, СтрокаУпаковки);
		Иначе
			НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихкода;
			СтрокаУпаковки.Обработан = Истина;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Прервать;
		КонецЕсли;
		
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки);
		
	КонецЦикла;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнаки.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнаки);
	КонецЕсли;
	Если ИндивидуальныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки",            ИндивидуальныеУпаковки);
	КонецЕсли;
	Если ТранспортныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковки);
	КонецЕсли;
	
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке, если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке_5_02(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке_5_02(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	СведенияОМаркировке = Новый ТаблицаЗначений;
	СведенияОМаркировке.Колонки.Добавить("ИдентификаторУпаковки",  ТипСтрока);
	СведенияОМаркировке.Колонки.Добавить("Количество",             ТипЧисло);
	СведенияОМаркировке.Колонки.Добавить("Партия",                 ТипСтрока);
	СведенияОМаркировке.Колонки.Добавить("Идентификатор",          Неопределено);
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия")
			И ЗначениеЗаполнено(Источник.Серия) Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	ПараметрыПоиска.Вставить("ВидУпаковки", Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет);
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Если СтрокиУпаковок.Количество() = 0 Тогда
		ПараметрыПоиска.Удалить("ВидУпаковки");
		СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	КонецЕсли;
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("КонтрольныйЗнак", ТипСтрока);
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("ИдентификаторУпаковки", ТипСтрока);
	
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		
		Если СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			Или СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			НоваяСтрока = СведенияОМаркировке.Добавить();
			
			НоваяСтрока.ИдентификаторУпаковки = СтрокаУпаковки.ЗначениеШтрихкода;
			СтрокаУпаковки.Обработан = Истина;
			
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			
			НоваяСтрокаИндивидуальныхУпаковок = ИндивидуальныеУпаковки.Добавить();
			НоваяСтрокаИндивидуальныхУпаковок.ИдентификаторУпаковки = СтрокаУпаковки.ЗначениеШтрихкода;
			
			СтрокаУпаковки.Обработан = Истина;
			
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			НоваяСтрока = СведенияОМаркировке.Добавить();
			
			НоваяСтрока.Количество = СформироватьКоличествоПоОСУ(Источник, СтрокаУпаковки);
			Приемник.ГТИН = СтрокаУпаковки.ЗначениеШтрихкода;
			
			НоваяСтрока.Идентификатор = Новый Структура("ИдентификаторыУпаковок", ИндивидуальныеУпаковки);
			
		Иначе
			
			НоваяСтрокаКИЗ = КонтрольныеИдентификационныеЗнаки.Добавить();
			НоваяСтрокаКИЗ.КонтрольныйЗнак = СтрокаУпаковки.ЗначениеШтрихкода;
			
			СтрокаУпаковки.Обработан = Истина;
			
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Прервать;
		КонецЕсли;
		
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки);
		
	КонецЦикла; 
	
	Если КонтрольныеИдентификационныеЗнаки.Количество() Тогда
		
		НоваяСтрока = СведенияОМаркировке.Добавить();
		НоваяСтрока.Идентификатор = Новый Структура("КонтрольныеЗнаки", КонтрольныеИдентификационныеЗнаки);
		
	КонецЕсли;
	
	Если ИндивидуальныеУпаковки.Количество() Тогда
		
		НоваяСтрока = СведенияОМаркировке.Добавить();
		НоваяСтрока.Идентификатор = Новый Структура("ИдентификаторыУпаковок", ИндивидуальныеУпаковки);
		
	КонецЕсли;
	
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки Маркировка.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки). Имя колонки определяется в 4м параметре.
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимоеТОРГ2)
//  ПолеКоличество - Строка - имя поля количество строки источника
//  ОтборПоТипуРасхождений - Булево - истина, если требуется отбирать коды маркировки с учетом типа расхождения
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
Процедура ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок,
	ПолеКоличество, ОтборПоТипуРасхождений = Ложь, ТипРасхождения = Неопределено) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		ПолеКоличество,
		ОтборПоТипуРасхождений,
		ТипРасхождения,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено 
		Или ДанныеШтрихкодовУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("Код");
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("Код");
	
	ТранспортныеУпаковки = Новый ТаблицаЗначений;
	ТранспортныеУпаковки.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОтборПоТипуРасхождений Тогда
		ПараметрыПоиска.Вставить("ТипРасхождения", ТипРасхождения);
	КонецЕсли;

	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник[ПолеКоличество];
	УчитыватьКоличество = Истина;
	Если ОтборПоТипуРасхождений И Количество = 0 Тогда
		УчитыватьКоличество = Ложь; 
	КонецЕсли;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
			Или СтрокаУпаковки.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Прервать;
		ИначеЕсли УчитыватьКоличество И (Количество <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковки.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			НоваяСтрока = ИндивидуальныеУпаковки.Добавить();
		Иначе
			НоваяСтрока = КонтрольныеИдентификационныеЗнаки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		
		Количество = Количество - 1;
	КонецЦикла;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнаки.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнаки);
	КонецЕсли;
	Если ИндивидуальныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки",            ИндивидуальныеУпаковки);
	КонецЕсли;
	Если ТранспортныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковки);
	КонецЕсли;
	
	Приемник.Вставить("Маркировка", СведенияОМаркировке);

КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * КоличествоДо   - Число - количество в строке до корректировки (ограничивает привязанные строки маркировки),
//   * Количество     - Число - количество в строке после корректировки (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковокДо - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//  ДанныеШтрихкодовУпаковокПосле  - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировкеУКД(Приемник, Источник, ДанныеШтрихкодовУпаковокДо, ДанныеШтрихкодовУпаковокПосле) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировкеУКД(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковокДо,
		ДанныеШтрихкодовУпаковокПосле,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковокДо = Неопределено 
		И ДанныеШтрихкодовУпаковокПосле = Неопределено  Тогда 
		Возврат;
	КонецЕсли;
	
	КонтрольныеИдентификационныеЗнакиДо = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиДо.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиДо = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиДо.Колонки.Добавить("Код");
	
	КонтрольныеИдентификационныеЗнакиПосле = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиПосле.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиПосле = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиПосле.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковокДо = ДанныеШтрихкодовУпаковокДо.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокДо Цикл
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиДо.Добавить();
		Иначе //групповая и индивидульная
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиДо.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокДо, ПараметрыПоиска, СтрокаУпаковки);
	КонецЦикла;
	
	СтрокиУпаковокПосле = ДанныеШтрихкодовУпаковокПосле.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокПосле Цикл
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиПосле.Добавить();
		Иначе //групповая и индивидульная
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиПосле.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокПосле, ПараметрыПоиска, СтрокаУпаковки);
	КонецЦикла;

	Если КонтрольныеИдентификационныеЗнакиДо.Количество() = 0 и КонтрольныеИдентификационныеЗнакиПосле.Количество() > 0 Тогда
		НоваяСтрока = КонтрольныеИдентификационныеЗнакиДо.Добавить();
		НоваяСтрока.Код = "-";
	ИначеЕсли КонтрольныеИдентификационныеЗнакиДо.Количество() > 0 и КонтрольныеИдентификационныеЗнакиПосле.Количество() = 0 Тогда
		НоваяСтрока = КонтрольныеИдентификационныеЗнакиПосле.Добавить();
		НоваяСтрока.Код = "-";
	КонецЕсли;
	
	Если ТранспортныеУпаковкиДо.Количество() = 0 и ТранспортныеУпаковкиПосле.Количество() > 0 Тогда
		НоваяСтрока = ТранспортныеУпаковкиДо.Добавить();
		НоваяСтрока.Код = "-";
	ИначеЕсли ТранспортныеУпаковкиДо.Количество() > 0 и ТранспортныеУпаковкиПосле.Количество() = 0 Тогда
		НоваяСтрока = ТранспортныеУпаковкиПосле.Добавить();
		НоваяСтрока.Код = "-";
	КонецЕсли;

	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиДо);
	КонецЕсли;
	Если ТранспортныеУпаковкиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковкиДо);
	КонецЕсли;
	Приемник.СведенияОМаркировкеДо = СведенияОМаркировке;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиПосле);
	КонецЕсли;
	Если ТранспортныеУпаковкиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковкиПосле);
	КонецЕсли;
	Приемник.СведенияОМаркировкеПосле = СведенияОМаркировке;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * КоличествоДо   - Число - количество в строке до корректировки (ограничивает привязанные строки маркировки),
//   * Количество     - Число - количество в строке после корректировки (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковокДо - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//  ДанныеШтрихкодовУпаковокПосле  - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировкеУКД2020(Приемник, Источник, ДанныеШтрихкодовУпаковокДо, ДанныеШтрихкодовУпаковокПосле) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировкеУКД2020(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковокДо,
		ДанныеШтрихкодовУпаковокПосле,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкодовУпаковокДо)
		И Не ЗначениеЗаполнено(ДанныеШтрихкодовУпаковокПосле) Тогда 
		Возврат;
	КонецЕсли;
	
	КонтрольныеИдентификационныеЗнакиДо = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиДо.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиДо = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиДо.Колонки.Добавить("Код");
	
	ИндивидуальныеУпаковкиДо = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковкиДо.Колонки.Добавить("Код");

	КонтрольныеИдентификационныеЗнакиПосле = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиПосле.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиПосле = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиПосле.Колонки.Добавить("Код");
	
	ИндивидуальныеУпаковкиПосле = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковкиПосле.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	КодыОСУДо = Новый Массив;

	СтрокиУпаковокДо = ДанныеШтрихкодовУпаковокДо.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокДо Цикл
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиДо.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиДо.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			КодыОСУДо.Добавить(СтрокаУпаковки);
			НоваяСтрока = ИндивидуальныеУпаковкиДо.Добавить();
		Иначе //групповая
			НоваяСтрока = ИндивидуальныеУпаковкиДо.Добавить();
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И Не ЗначениеЗаполнено(СтрокаУпаковки.Штрихкод) Тогда
			НоваяСтрока.Код = СформироватьКодОСУИзGTIN(Источник, СтрокаУпаковки, "КоличествоДо");
		Иначе
			НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихкода;
			СтрокаУпаковки.Обработан = Истина;
		КонецЕсли;
		
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокДо, ПараметрыПоиска, СтрокаУпаковки);
	КонецЦикла;
	
	КодыОСУПосле = Новый Массив;

	СтрокиУпаковокПосле = ДанныеШтрихкодовУпаковокПосле.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокПосле Цикл
		Если СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиПосле.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиПосле.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			КодыОСУПосле.Добавить(СтрокаУпаковки);
			НоваяСтрока = ИндивидуальныеУпаковкиПосле.Добавить();
		Иначе //групповая
			НоваяСтрока = ИндивидуальныеУпаковкиПосле.Добавить();
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
				И Не ЗначениеЗаполнено(СтрокаУпаковки.Штрихкод) Тогда
			НоваяСтрока.Код = СформироватьКодОСУИзGTIN(Источник, СтрокаУпаковки);
		Иначе
			НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
			СтрокаУпаковки.Обработан = Истина;
		КонецЕсли;
		
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокПосле, ПараметрыПоиска, СтрокаУпаковки);
	КонецЦикла;

	Если КодыОСУДо.Количество() И Не КодыОСУПосле.Количество() И Приемник.Количество = 0 Тогда

		// Полный возврат по ОСУ: кол-во товара переданного получателю будет равно нулю (02+gtin+37+0).
		Для Каждого СтрокаУпаковки Из КодыОСУДо Цикл

			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				СформироватьКодОСУИзGTIN(Источник, СтрокаУпаковки, "КоличествоДо"),
				СтрокаУпаковки.ВидПродукции, ЭлектронноеВзаимодействиеИСМППовтИсп.ПараметрыРазбора());

			Если РезультатРазбора <> Неопределено
				И РезультатРазбора.Свойство("ДанныеРазбора") И РезультатРазбора.ДанныеРазбора <> Неопределено
				И РезультатРазбора.ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN") Тогда

				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("ЗначениеШтрихКода", РезультатРазбора.ДанныеРазбора.СоставКодаМаркировки.GTIN);
				СтруктураДанных.Вставить("КоличествоУпаковок", 0);
				
				ШтрихкодированиеИСМПСлужебный.ЗаменитьЗначенияШтрихкодаНаОбъемноСортовойУчет(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураДанных),
					"ЗначениеШтрихкода", "КоличествоУпаковок");

				НормализованныйКодМаркировки = КодМаркировкиДляПередачиУПД(
					СтруктураДанных.ЗначениеШтрихкода, СтрокаУпаковки.ВидПродукции);

				НоваяСтрока = ИндивидуальныеУпаковкиПосле.Добавить();
				НоваяСтрока.Код = НормализованныйКодМаркировки;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиДо);
	КонецЕсли;
	Если ТранспортныеУпаковкиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТранспортныеУпаковкиДо);
	КонецЕсли;
	Если ИндивидуальныеУпаковкиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ИндивидуальныеУпаковкиДо);
	КонецЕсли;
	Приемник.СведенияОМаркировкеДо = СведенияОМаркировке;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиПосле);
	КонецЕсли;
	Если ТранспортныеУпаковкиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки", ТранспортныеУпаковкиПосле);
	КонецЕсли;
	Если ИндивидуальныеУпаковкиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ИндивидуальныеУпаковкиПосле);
	КонецЕсли;
	Приемник.СведенияОМаркировкеПосле = СведенияОМаркировке;
	
КонецПроцедуры

// Добавить сведения о участниках обмена 5_02.
// 
// Параметры:
//  ДанныеШтрихкодовУпаковок  - См. ЧастичноеСодержимое
//  Источник                  - ДокументСсылка - ссылка на документ
//  СтруктураДанных           - Структура - возвращается методом ПолучитьДанныеДляЭД учетного документа.
//  ДеревоДанных              - ДеревоЗначений - дерево электронного документа.
//  ДатаСведений              - Дата - дата учетного документа.
//  Отказ                     - Булево - Истина, если есть ошибки заполнения.
Процедура ДобавитьСведенияОУчастникахОбмена_5_02(ДанныеШтрихкодовУпаковок, Источник, СтруктураДанных, ДеревоДанных, ДатаСведений, Отказ) Экспорт
	
	ЭтоВнутреннееПеремещениеМеждуМОД = ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеМеждуМОДИСМП");
	
	Если Не ШтрихкодыУпаковокСодержатПивнуюПродукцию(ДанныеШтрихкодовУпаковок, ДатаСведений)
		И Не ЭтоВнутреннееПеремещениеМеждуМОД Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураАдресов = СтруктураАдресовУчастниковОбмена();
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОбАдресахУчастниковОбмена_5_02(СтруктураДанных, Источник, СтруктураАдресов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоВнутреннееПеремещениеМеждуМОД Тогда
		ЗаполнитьСтруктуруАдресовУчастниковОбменаПоПеремещениюМеждуМОД(Источник, СтруктураДанных, СтруктураАдресов);
	КонецЕсли;
	
	АвтоматическоеЗаполнениеАдресов(СтруктураАдресов);
	
	Участники = Новый Соответствие;
	
	ДанныеГрузоотправителей = Новый Соответствие();
	ДанныеГрузоотправителей.Вставить("СведенияОСчетеФактуре.СведенияОГрузоотправителях", "Грузоотправитель");
	
	ДанныеГрузополучателей = Новый Соответствие();
	ДанныеГрузополучателей.Вставить("СведенияОСчетеФактуре.СведенияОГрузополучателях", "Грузополучатель");
	
	Участники.Вставить("Продавец",   ДанныеГрузоотправителей);
	Участники.Вставить("Покупатель", ДанныеГрузополучателей);
	
	ДанныеУполномоченныхЛиц = Новый Соответствие();
	ДанныеУполномоченныхЛиц.Вставить("Продавец",   "СведенияОСчетеФактуре.СведенияОГрузоотправителях.НомерСтроки.Грузоотправитель");
	ДанныеУполномоченныхЛиц.Вставить("Покупатель", "СведенияОСчетеФактуре.СведенияОГрузополучателях.НомерСтроки.Грузополучатель");
	
	ПутьКДаннымГрузоотправительОнЖе = "СведенияОСчетеФактуре.СведенияОГрузоотправителях.НомерСтроки.ОнЖе";
	ПутьКДаннымОрганизацияПродавец  = "СведенияОСчетеФактуре.СведенияОПродавцах.НомерСтроки.Продавец";
	
	ПутьКДаннымАдресаОбъект = ".Адрес.ТипАдреса.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации";
	ПутьКДаннымАдресаВидКонтактнойИнформации = ".Адрес.ТипАдреса.АвтоматическиЗаполняемый.ВидКонтактнойИнформации";
	
	ГрузоотправительОнЖе             = Ложь;
	КодФИАСАдресаОрганизацииПродавца = "";
	АдресЗначениеПродавца            = "";
	АдресПредставлениеПродавца       = "";
	
	Для Каждого ТипУчастника Из Участники Цикл
		
		АдресСтороныЗаполнен    = Ложь;
		СписокУчастниковСтороны = ТипУчастника.Значение;
		
		Для Каждого Участник Из СписокУчастниковСтороны Цикл
			
			НепосредственныйУчастникОбмена = ?(ЗначениеЗаполнено(СтруктураАдресов[ТипУчастника.Ключ].УполномоченноеЛицоЗаПоставкуГруза),
				СтруктураАдресов[ТипУчастника.Ключ].УполномоченноеЛицоЗаПоставкуГруза,
				СтруктураАдресов[ТипУчастника.Ключ].УчастникОбмена);
				
			Если Не ЗначениеЗаполнено(НепосредственныйУчастникОбмена) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(НепосредственныйУчастникОбмена) Тогда
				АдресСтороныЗаполнен = Истина;
				Продолжить;
			КонецЕсли;
			
			ШаблонОшибкиЗаполненияПоАдресу = НСтр("ru = 'Не удалось корректно заполнить адрес по %1. Возможно, адрес указан в свободной форме.
				|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.';
				|en = 'Не удалось корректно заполнить адрес по %1. Возможно, адрес указан в свободной форме.
				|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.'");
				
			ШаблонОшибкиПустогоАдреса = НСтр("ru = 'Не указан адрес %1. %2 - значение не заполнено.';
											|en = 'Не указан адрес %1. %2 - значение не заполнено.'");
			
			ТекстОшибки = "";
			
			ПутьКДаннымСтроки = Участник.Ключ + ".НомерСтроки." + Участник.Значение;
			ПутьКДаннымУполномоченногоЛица = ДанныеУполномоченныхЛиц.Получить(ТипУчастника.Ключ);
			
			Если ТипУчастника.Ключ = "Продавец" Тогда
				// проверить, если грузоотправитель совпадает с организацией
				
				ТекущееЗначениеУполномоченногоЛица = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьКДаннымГрузоотправительОнЖе);
				
				Если ТекущееЗначениеУполномоченногоЛица = Истина Тогда
					// грузоотправитель - ОнЖе
					
					ГрузоотправительОнЖе = Истина;
					
					ТекущееЗначениеАдреса = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьКДаннымОрганизацияПродавец);
					// данные адреса организации-отправителя
					
					Если ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АвтоматическиЗаполняемый") Тогда
						
						ВладелецКонтактнойИнформации = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации;
						ВидКонтактнойИнформации      = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АвтоматическиЗаполняемый.ВидКонтактнойИнформации;
						
						Если ЗначениеЗаполнено(ВладелецКонтактнойИнформации) И ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
							
							КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
								ВладелецКонтактнойИнформации, ВидКонтактнойИнформации, ДатаСведений, Ложь);
							
							Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
								
								АдресЗначениеПродавца        = КонтактнаяИнформация[0].Значение;
								АдресПредставлениеПродавца   = КонтактнаяИнформация[0].Представление;
								
								КодФИАСАдресаОрганизацииПродавца = ПроверитьЗаполнениеИдентификатораГАР(ДеревоДанных, ПутьКДаннымСтроки, АдресЗначениеПродавца, Истина);
								
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АдресГАР") Тогда
						
						АдресПоПриказуМинфина = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АдресГАР;
						
						Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
							КодФИАСАдресаОрганизацииПродавца = АдресПоПриказуМинфина.ИдентификаторДома;
						ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
							КодФИАСАдресаОрганизацииПродавца = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
						Иначе
							КодФИАСАдресаОрганизацииПродавца = "";
						КонецЕсли;
					
					ИначеЕсли ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АдресРФ") Тогда
						
						КодФИАСАдресаОрганизацииПродавца = ПроверитьЗаполнениеИдентификатораГАР(ДеревоДанных, ПутьКДаннымСтроки, ТекущееЗначениеАдреса.Адрес.ТипАдреса.АдресРФ);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураАдресов[ТипУчастника.Ключ].АвтоматическоеЗаполнение Тогда
			
				ВладелецКонтактнойИнформации = СтруктураАдресов[ТипУчастника.Ключ].ВладелецКонтактнойИнформации;
				ВидКонтактнойИнформации      = СтруктураАдресов[ТипУчастника.Ключ].ВидКонтактнойИнформации;
				
				Если ЗначениеЗаполнено(ВладелецКонтактнойИнформации) И ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
					
					КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
						ВладелецКонтактнойИнформации, ВидКонтактнойИнформации, ДатаСведений, Ложь);
						
					ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКДаннымСтроки + ПутьКДаннымАдресаОбъект, Неопределено);
					ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКДаннымСтроки + ПутьКДаннымАдресаВидКонтактнойИнформации, Неопределено);
					
					Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
						
						АдресЗначение      = КонтактнаяИнформация[0].Значение;
						АдресПредставление = КонтактнаяИнформация[0].Представление;
						
						РезультатЗаполненияГАР_ФИАС = ЗаполнитьАдресУчастникаУПД_5_02(ДеревоДанных, АдресЗначение, АдресПредставление, ПутьКДаннымСтроки);
						
						ИдентификаторГАР_ФИАС = РезультатЗаполненияГАР_ФИАС.ИдентификаторГАР_ФИАС;
						АдресСтороныЗаполнен  = РезультатЗаполненияГАР_ФИАС.АдресЗаполнен;
						
						ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаполненияПоАдресу, АдресПредставление);
						
					Иначе
						
						ПутьКАдресу = ПутьКДаннымСтроки + ".Адрес";
						ТекстОшибки = СтрШаблон(ШаблонОшибкиПустогоАдреса, ВладелецКонтактнойИнформации, ПутьКАдресу);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтруктураАдресов[ТипУчастника.Ключ].АдресЗначениеJSON) Тогда
				
				АдресЗначение = СтруктураАдресов[ТипУчастника.Ключ].АдресЗначениеJSON;
				
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКДаннымСтроки + ПутьКДаннымАдресаОбъект, Неопределено);
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПутьКДаннымСтроки + ПутьКДаннымАдресаВидКонтактнойИнформации, Неопределено);
				
				РезультатЗаполненияГАР_ФИАС = ЗаполнитьАдресУчастникаУПД_5_02(ДеревоДанных, АдресЗначение, СтруктураАдресов[ТипУчастника.Ключ].АдресСтрокой, ПутьКДаннымСтроки); 
				
				ИдентификаторГАР_ФИАС = РезультатЗаполненияГАР_ФИАС.ИдентификаторГАР_ФИАС;
				АдресСтороныЗаполнен  = РезультатЗаполненияГАР_ФИАС.АдресЗаполнен;
				
				ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаполненияПоАдресу, СтруктураАдресов[ТипУчастника.Ключ].АдресСтрокой);
				
			Иначе
				
				Если ТипУчастника.Ключ = "Покупатель" Тогда
					ПутьКДаннымСтроки = ПутьКДаннымУполномоченногоЛица;
				Иначе
					
					ТекущееЗначениеУполномоченногоЛица = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьКДаннымГрузоотправительОнЖе);
					Если Не ТекущееЗначениеУполномоченногоЛица Тогда
						ПутьКДаннымСтроки = ДанныеУполномоченныхЛиц.Получить(ТипУчастника.Ключ);
					КонецЕсли;
					
				КонецЕсли;
				
				ТекущееЗначениеАдреса = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьКДаннымСтроки);
				Если ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АвтоматическиЗаполняемый") Тогда
					
					ВладелецКонтактнойИнформации = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АвтоматическиЗаполняемый.ОбъектКонтактнойИнформации;
					ВидКонтактнойИнформации      = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АвтоматическиЗаполняемый.ВидКонтактнойИнформации;
					
					Если ЗначениеЗаполнено(ВладелецКонтактнойИнформации) И ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
						
						КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
							ВладелецКонтактнойИнформации, ВидКонтактнойИнформации, ДатаСведений, Ложь);
						
						Если ЗначениеЗаполнено(КонтактнаяИнформация) Тогда
							
							АдресЗначение        = КонтактнаяИнформация[0].Значение;
							АдресПредставление   = КонтактнаяИнформация[0].Представление;
							
							ИдентификаторГАР_ФИАС = ПроверитьЗаполнениеИдентификатораГАР(ДеревоДанных, ПутьКДаннымСтроки, АдресЗначение);
							АдресСтороныЗаполнен  = ЗначениеЗаполнено(ИдентификаторГАР_ФИАС);
							
							ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаполненияПоАдресу, АдресПредставление);
							
						Иначе
							
							ПутьКАдресу = ПутьКДаннымСтроки + ".Адрес";
							ТекстОшибки = СтрШаблон(ШаблонОшибкиПустогоАдреса, ВладелецКонтактнойИнформации, ПутьКАдресу);
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АдресГАР") Тогда
					
					АдресПоПриказуМинфина = ТекущееЗначениеАдреса.Адрес.ТипАдреса.АдресГАР;
					Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
						ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторДома;
					ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
						ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
					Иначе
						ИдентификаторГАР_ФИАС = "";
					КонецЕсли;
					
					АдресСтороныЗаполнен  = ЗначениеЗаполнено(ИдентификаторГАР_ФИАС);
					
				ИначеЕсли ТекущееЗначениеАдреса.Адрес.ТипАдреса.Свойство("АдресРФ") Тогда
					
					ИдентификаторГАР_ФИАС = ПроверитьЗаполнениеИдентификатораГАР(ДеревоДанных, ПутьКДаннымСтроки, ТекущееЗначениеАдреса.Адрес.ТипАдреса.АдресРФ);
					АдресСтороныЗаполнен  = ЗначениеЗаполнено(ИдентификаторГАР_ФИАС);
					
				Иначе
					
					АдресСтороныЗаполнен = Ложь;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ТипУчастника.Ключ = "Продавец"
				И ГрузоотправительОнЖе
				И КодФИАСАдресаОрганизацииПродавца <> ИдентификаторГАР_ФИАС Тогда
				
				ТаблицаУчастниковГрузоотправителей  = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Участник.Ключ);
				// если Грузоотправитель = ОнЖе, но адреса не совпадают - необходимо добавить непосредственно грузоотправителя
				ДанныеПродавца = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПутьКДаннымОрганизацияПродавец);
				
				Если ТаблицаУчастниковГрузоотправителей.Количество() Тогда
					НоваяСтрокаГрузополучателя = ТаблицаУчастниковГрузоотправителей[0];
				Иначе
					НоваяСтрокаГрузополучателя = ТаблицаУчастниковГрузоотправителей.Добавить();
				КонецЕсли;
				
				НоваяСтрокаГрузополучателя[Участник.Значение] = ДанныеЭлементаДереваЭлектронногоДокумента(
					ДеревоДанных, ПутьКДаннымУполномоченногоЛица);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузополучателя[Участник.Значение], ДанныеПродавца,, "Адрес");
				НоваяСтрокаГрузополучателя.ОнЖе = Ложь;
				
				ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУчастниковГрузоотправителей, Участник.Ключ);
				
			ИначеЕсли ТипУчастника.Ключ = "Продавец"
				И ГрузоотправительОнЖе
				И ЗначениеЗаполнено(АдресЗначениеПродавца) Тогда
				// если Грузоотправитель - ОнЖе и адрес совпадает, то надо переопределить адрес организации корректным адресом
				// с идентификатором до дома, а не до адресного объекта
				
				ЗаполнитьАдресУчастникаУПД_5_02(ДеревоДанных, АдресЗначениеПродавца, АдресПредставлениеПродавца, ПутьКДаннымОрганизацияПродавец);
				
			КонецЕсли;
			
			Если ЭтоВнутреннееПеремещениеМеждуМОД
				И ЗначениеЗаполнено(СтруктураАдресов[ТипУчастника.Ключ].КодФИАС)
				И СтруктураАдресов[ТипУчастника.Ключ].КодФИАС <> ИдентификаторГАР_ФИАС Тогда
				
				ДанныеАдресаXML = РаботаСАдресами.АдресПоИдентификатору(СтруктураАдресов[ТипУчастника.Ключ].КодФИАС);
				
				Если ДанныеАдресаXML = Неопределено Тогда
					
					ШаблонТекстСообщения = НСтр("ru = 'Не удалось корректно заполнить адрес по идентификатору %1.
						|Проверьте корректность указания кода ФИАС/ГАР по классификатору.';
						|en = 'Не удалось корректно заполнить адрес по идентификатору %1.
						|Проверьте корректность указания кода ФИАС/ГАР по классификатору.'");
					
					ТекстОшибки = СтрШаблон(ШаблонТекстСообщения, СтруктураАдресов[ТипУчастника.Ключ].КодФИАС);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник,,, Отказ);
					
				Иначе
					
					АдресЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеАдресаXML);
					
					РезультатЗаполненияАдреса = ЗаполнитьАдресУчастникаУПД_5_02(ДеревоДанных, АдресЗначение, СтруктураАдресов[ТипУчастника.Ключ].АдресСтрокой, ПутьКДаннымСтроки);
					
					АдресСтороныЗаполнен  = РезультатЗаполненияАдреса.АдресЗаполнен;
					ИдентификаторГАР_ФИАС = РезультатЗаполненияАдреса.ИдентификаторГАР_ФИАС;
					
					ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаполненияПоАдресу, СтруктураАдресов[ТипУчастника.Ключ].АдресСтрокой);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не АдресСтороныЗаполнен Тогда
				
				ПутьКАдресу = ПутьКДаннымСтроки + ".Адрес";
				ШаблонТекстСообщения = НСтр("ru = 'Не удалось корректно заполнить адрес %1. Возможно, адрес указан в свободной форме.
				|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.';
				|en = 'Не удалось корректно заполнить адрес %1. Возможно, адрес указан в свободной форме.
				|Смените тип адреса (команды ""Административно-территориальное"" или ""Муниципальное деление"" меню ""Еще"" формы редактирования адреса.'");
				
				Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
					ТекстОшибки = СтрШаблон(ШаблонТекстСообщения, ПутьКАдресу);
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник,,, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавить сведения о перевозочных документах в формате УПД 5_02.
// 
// Параметры:
//  ДанныеШтрихкодовУпаковок  - См. ЧастичноеСодержимое
//  Источник                  - ДокументСсылка - ссылка на документ
//  СтруктураДанных           - Структура - возвращается методом ПолучитьДанныеДляЭД учетного документа.
//  ДеревоДанных              - ДеревоЗначений - дерево электронного документа.
//  ДатаСведений              - Дата - дата учетного документа.
//  Отказ                     - Булево - Истина, если есть ошибки заполнения
Процедура ДобавитьСведенияОПеревозочныхДокументах_5_02(ДанныеШтрихкодовУпаковок, Источник, СтруктураДанных, ДеревоДанных, ДатаСведений, Отказ) Экспорт
	
	Если Не ШтрихкодыУпаковокСодержатПивнуюПродукцию(ДанныеШтрихкодовУпаковок, ДатаСведений)
		И Не ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеМеждуМОДИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоДокументам = СтруктураДанныхПоПеревозочнымДокументам();
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеМеждуМОДИСМП") Тогда
		ЗаполнитьСтруктуруДанныхПоПеревозочнымДокументамПоПеремещениюМеждуМОД(СтруктураДанныхПоДокументам, СтруктураДанных);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ДобавитьСведенияОПеревозочныхДокументах_5_02(СтруктураДанных, Источник, СтруктураДанныхПоДокументам);
	
	Путь = "СведенияОСчетеФактуре.ИнформационноеПолеФХЖ.ТекстоваяИнформация";
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ТекстоваяИнформация.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2000)));
	
	ДанныеДляДобавления = Новый Соответствие();
	
	Если ЗначениеЗаполнено(СтруктураДанныхПоДокументам.ИдентификаторЭПД) Тогда
		
		СтруктураОбработки = Новый Структура("Значение, ТекстОшибки",
			СтруктураДанныхПоДокументам.ИдентификаторЭПД,
			НСтр("ru = 'Не заполнен идентификатор электронного перевозочного документа.';
				|en = 'Не заполнен идентификатор электронного перевозочного документа.'"));
		
		ДанныеДляДобавления.Вставить("НомерПеревозЭлДок", СтруктураОбработки);
		
	Иначе
	
		СтруктураОбработки = Новый Структура("Значение, ТекстОшибки",
			СтруктураДанныхПоДокументам.НомерТранспортногоДокумента, 
			НСтр("ru = 'Не заполнен номер перевозочного документа.';
				|en = 'Не заполнен номер перевозочного документа.'"));
			
		ДанныеДляДобавления.Вставить("НомерПеревозДок", СтруктураОбработки);
		
		СтруктураОбработки = Новый Структура("Значение, ТекстОшибки",
			Формат(СтруктураДанныхПоДокументам.ДатаТранспортногоДокумента, "ДФ=dd.MM.yyyy;"),
			НСтр("ru = 'Не заполнена дата перевозочного документа.';
				|en = 'Не заполнена дата перевозочного документа.'"));
			
		ДанныеДляДобавления.Вставить("ДатаПеревозДок",  СтруктураОбработки);
		
		СтруктураОбработки = Новый Структура("Значение, ТекстОшибки",
			?(ЗначениеЗаполнено(СтруктураДанныхПоДокументам.РегНомерТС), СтруктураДанныхПоДокументам.РегНомерТС, "-"),
			НСтр("ru = 'Не заполнен регистрационный номер транспортного средства.';
				|en = 'Не заполнен регистрационный номер транспортного средства.'"));
			
		ДанныеДляДобавления.Вставить("РегНомер",        СтруктураОбработки);
		
	КонецЕсли;
	
	Для Каждого ДополнительныеДанные Из ДанныеДляДобавления Цикл
		
		НоваяСтрока               = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = ДополнительныеДанные.Ключ;
		НоваяСтрока.Значение      = ДополнительныеДанные.Значение.Значение;
		
		МассивСтрокДляДобавленияОшибки = Новый Массив;
		МассивСтрокДляДобавленияОшибки.Добавить(НоваяСтрока);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Значение) Тогда
			ОбщегоНазначения.СообщитьПользователю(ДополнительныеДанные.Значение.ТекстОшибки, Источник,,, Отказ);
		Иначе
			ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, Путь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить данные для формирования электронного документа по перемещению между МОДИСМП.
// 
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево формата 5.02, 5.03
//  Приемник     - ТаблицаЗначений - заполняемая таблица данных
//  Документ     - ДокументСсылка.ПеремещениеМеждуМОДИСМП - ссылка на документ.
Процедура ДополнитьДанныеДляФормированияЭлектронногоДокументаПоПеремещениюМеждуМОДИСМП(ДеревоДанных, Приемник, Документ) Экспорт
	
	ТаблицаДляПолученияДанных = ТаблицаДляПолученияДанныхДляФормированияЭлектронногоДокумента();
	
	Для Каждого СтрокаДанныхПриемника Из Приемник Цикл
		
		НоваяСтрока = ТаблицаДляПолученияДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхПриемника);
		
		НоваяСтрока.Упаковка            = СтрокаДанныхПриемника.ЕдиницаИзмерения;
		НоваяСтрока.ИдентификаторСтроки = СтрокаДанныхПриемника.НомерСтрокиИсходногоДокумента;
		
	КонецЦикла;
	
	СтруктураДанных = Новый Соответствие();
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриПолученииДанныхПоНоменклатуреДляФормированияЭлектронногоДокументаПоПеремещениюМеждуМОДИСМП(СтруктураДанных, ТаблицаДляПолученияДанных, Документ);
	
	ИтогоСуммаНалога = 0;
	БезНДС           = Истина;
	
	Для Каждого СтрокаПриемника Из Приемник Цикл
		
		СтруктураДанныхПоСтроке = СтруктураДанных.Получить(СтрокаПриемника.НомерСтрокиИсходногоДокумента);
		
		Если СтруктураДанныхПоСтроке = Неопределено
			Или Не ТипЗнч(СтруктураДанныхПоСтроке) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = СтруктураДанныхПоНоменклатуреДляФормированияЭД();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, СтруктураДанныхПоСтроке);
		
		СтрокаПриемника.НалоговаяСтавка              = ДанныеПоНоменклатуре.НалоговаяСтавка;
		СтрокаПриемника.ЕдиницаИзмерения             = ДанныеПоНоменклатуре.ЕдиницаИзмерения;
		СтрокаПриемника.ЕдиницаИзмеренияКод          = СокрЛП(ДанныеПоНоменклатуре.ЕдиницаИзмеренияКод);
		СтрокаПриемника.ЕдиницаИзмеренияНаименование = ДанныеПоНоменклатуре.ЕдиницаИзмеренияНаименование;
		
		Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.Количество) Тогда
			СтрокаПриемника.Количество                   = ДанныеПоНоменклатуре.Количество;
		КонецЕсли;
		
		СуммаНалога = Новый Структура("Сумма, БезНДС", ДанныеПоНоменклатуре.СуммаНалога, ДанныеПоНоменклатуре.БезНДС);
		
		СтрокаПриемника.СуммаНалога        = СуммаНалога;
		СтрокаПриемника.СтоимостьБезНалога = 0;
		
		ИтогоСуммаНалога = ИтогоСуммаНалога + ДанныеПоНоменклатуре.СуммаНалога;
		
		Если Не ДанныеПоНоменклатуре.БезНДС Тогда
			БезНДС = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаНалога = Новый Структура("Сумма, БезНДС", 0, Истина);
	СуммаНалога.Сумма = ИтогоСуммаНалога;
	
	Если БезНДС = Истина Тогда
		СуммаНалога.Сумма = Неопределено;
	Иначе
		СуммаНалога.БезНДС = Неопределено;
	КонецЕсли;
	
	ЗагрузитьСтруктуруВГруппуДерева(ДеревоДанных, СуммаНалога, "ТаблицаСчетаФактуры.ВсегоКОплате.СуммаНалога");
	
КонецПроцедуры

#КонецОбласти

#Область СоставШтрихкодовУпаковок

// Код маркировки для передачи УПД.
// 
// Параметры:
//  ЗначениеШтрихкода - Строка - Значение кода маркировки
//  ВидПродукции      - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//  РезультатРазбора  - см. ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода - Результат разбора,
//                    - Неопределено - разбор не производился.
// 
// Возвращаемое значение:
//  Строка - Код маркировки для передачи УПД.
Функция КодМаркировкиДляПередачиУПД(ЗначениеШтрихкода, ВидПродукции, РезультатРазбора = Неопределено) Экспорт
	
	Если РезультатРазбора = Неопределено Тогда
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
			ЗначениеШтрихкода, ВидПродукции, ЭлектронноеВзаимодействиеИСМППовтИсп.ПараметрыРазбора());
	КонецЕсли;
	
	ПараметрыНормализации = ЭлектронноеВзаимодействиеИСМППовтИсп.ПараметрыНормализации(
		ВидПродукции, РезультатРазбора.ВидУпаковки);
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ВидПродукции, ПараметрыНормализации);
		Иначе
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				РезультатРазбора, ВидПродукции, ПараметрыНормализации);
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции) Тогда
		
		НормализованныйКодМаркировки = ОбменДаннымиИСМП.КодМаркировкиДляПередачиИСМП(
			РезультатРазбора, ПараметрыНормализации);
		
	КонецЕсли;
	
	Возврат НормализованныйКодМаркировки;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сопоставления информации об упаковках с товарной частью.
// Для транспортных мультитоварных упаковок номенклатура (характеристика, серия)- это различная номенклатура 
//   (характеристика, серия) каждого вложенного (на любом уровне) индивидуального штрихкода, для монотоварных упаковок и
//   кодов маркировки - содержимое, для кодов ОСУ - содержимое без серий.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
// Возвращаемое значение:
// ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Штрихкод           - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на индивидуальный штрихкод содержимого или мультитоварную упаковку
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
// 	 * ТребуетВзвешивания - Булево - признак продукции требующей взвешивания потребительских кодов
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * Мультитоварная     - Булево - признак мультитоварной упаковки
// 	 * ВидПродукции       - Перечислениессылка.ВидыПродукцииИС - вид продукции номенклатуры для кодировки значения штрихкода
// 	 * ВидУпаковки        - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки номенклатуры для кодировки значения штрихкода
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
// 	 * Количество         - Число  - количество маркируемой продукции по коду маркировки
// 	 * КоличествоПотребительскихУпаковок - Число  - количество потребительских упаковок маркируемой продукции по коду маркировки
//   * ТекстОшибкиИС      - Строка - Текст ошибки по строке при наличии
//   * КоличествоВПотребительскойУпаковке - Число - количество в 1 потребительской упаковке (в т.ч. средний вес) для автоматического кода ОСУ
Функция ЧастичноеСодержимое(ТаблицаУпаковок) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка   КАК Ссылка,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыВходящие
		|ИЗ
		|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Штрихкод
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыВходящие.Штрихкод          КАК Штрихкод,
		|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия             КАК Серия,
		|	ШтрихкодыУпаковок.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка) КАК Мультитоварная,
		|	ЛОЖЬ                                КАК Обработан,
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковок.Количество <> 0
		|		ТОГДА ШтрихкодыУпаковок.Количество
		|	ИНАЧЕ 1 КОНЕЦ                       КАК Количество,
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок <> 0
		|		ТОГДА ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок
		|		КОГДА ШтрихкодыУпаковок.Количество <> 0
		|		ТОГДА ШтрихкодыУпаковок.Количество
		|	ИНАЧЕ 1 КОНЕЦ                       КАК КоличествоПотребительскихУпаковок
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|");
	
	СписокЗапросов.Добавить(
		ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка                                  КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода                       КАК ЗначениеШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Штрихкод                                КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.Номенклатура                            КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика                          КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия                                   КАК Серия,
		|	ДанныеШтрихкодовУпаковок.Мультитоварная                          КАК Мультитоварная,
		|	ДанныеШтрихкодовУпаковок.Обработан                               КАК Обработан,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки                             КАК ТипУпаковки,
		|	СвойстваМаркируемойПродукции.ВидПродукции                        КАК ВидПродукции,
		|	&ТребуетВзвешивания                                              КАК ТребуетВзвешивания,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ПустаяСсылка)               КАК ВидУпаковки,
		|	ДанныеШтрихкодовУпаковок.Количество                              КАК Количество,
		|	ДанныеШтрихкодовУпаковок.КоличествоПотребительскихУпаковок       КАК КоличествоПотребительскихУпаковок
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "ДанныеШтрихкодовУпаковок.Номенклатура");
	СписокЗапросов.Добавить(ТекстЗапроса, "Результат");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
		|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|		И ШтрихкодыУпаковок.НомерСтроки = 1
		|		И ШтрихкодыУпаковок.Ссылка.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|		И (ШтрихкодыУпаковок.Ссылка.Номенклатура В(&ПустаяНоменклатура)
		|			ИЛИ (ШтрихкодыУпаковок.Штрихкод.Номенклатура = ШтрихкодыУпаковок.Ссылка.Номенклатура
		|				И ШтрихкодыУпаковок.Штрихкод.Характеристика = ШтрихкодыУпаковок.Ссылка.Характеристика))
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В
		|			(ВЫБРАТЬ
		|				т.Штрихкод
		|			ИЗ
		|				ШтрихкодыВходящие КАК т)",
		"ВложенныеЗаписи");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
		|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|		И ШтрихкодыВходящие.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|		И (ШтрихкодыУпаковок.Ссылка.Номенклатура В(&ПустаяНоменклатура)
		|			ИЛИ (ШтрихкодыУпаковок.Штрихкод.Номенклатура = ШтрихкодыУпаковок.Ссылка.Номенклатура
		|				И ШтрихкодыУпаковок.Штрихкод.Характеристика = ШтрихкодыУпаковок.Ссылка.Характеристика))
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка В
		|			(ВЫБРАТЬ
		|				т.Штрихкод
		|			ИЗ
		|				ШтрихкодыВходящие КАК т)",
		"МультитоварныеУпаковки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодУпаковки",   ТаблицаУпаковок);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	//Структура - результа пакета запросов:
	//  * Результат - РезультатЗапроса - 
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	Результат              = РезультатыЗапроса["Результат"].Выгрузить().Скопировать(Новый Массив); // Коды маркировки и шаблоны для упаковок
	Результат.Колонки.Добавить("КоличествоВПотребительскойУпаковке", ОбщегоНазначения.ОписаниеТипаЧисло(15, 6));
	Результат.Колонки.Добавить("ТекстОшибкиИС",                      ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Выборка = РезультатыЗапроса["Результат"].Выбрать();
	Пока Выборка.Следующий() Цикл
		// Коды ОСУ - выделяем сразу и не обрабатываем дальше
		РезультатРазбора = Неопределено;
		НормализованныйКодМаркировки = КодМаркировкиДляПередачиУПД(
			Выборка.ЗначениеШтрихкода, Выборка.ВидПродукции, РезультатРазбора);
		Если РезультатРазбора <> Неопределено
			И РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			СтрокаЗаполнения = Результат.НайтиСтроки(
				Новый Структура("Номенклатура,Характеристика, Ссылка", Выборка.Номенклатура, Выборка.Характеристика, Выборка.Ссылка));
			Если СтрокаЗаполнения.Количество() = 0 Тогда
				СтрокаЗаполнения = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, Выборка,,"Серия");
				СтрокаЗаполнения.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет;
				СтрокаЗаполнения.Штрихкод = РезультатРазбора.GTIN;
			Иначе
				СтрокаЗаполнения = СтрокаЗаполнения[0];
				КоличествоПотребительскихУпаковок = Формат(СтрокаЗаполнения.КоличествоПотребительскихУпаковок, "ЧДЦ=0; ЧН=0; ЧГ=0;");
				СтрокаЗаполнения.ЗначениеШтрихкода = Лев(СтрокаЗаполнения.ЗначениеШтрихкода, СтрДлина(СтрокаЗаполнения.ЗначениеШтрихкода) - СтрДлина(КоличествоПотребительскихУпаковок)); 
				СтрокаЗаполнения.Количество = СтрокаЗаполнения.Количество + Выборка.Количество;
				СтрокаЗаполнения.КоличествоПотребительскихУпаковок = СтрокаЗаполнения.КоличествоПотребительскихУпаковок + Выборка.КоличествоПотребительскихУпаковок;
				КоличествоПотребительскихУпаковок = Формат(СтрокаЗаполнения.КоличествоПотребительскихУпаковок, "ЧДЦ=0; ЧН=0; ЧГ=0;");
				СтрокаЗаполнения.ЗначениеШтрихкода = СтрокаЗаполнения.ЗначениеШтрихкода + КоличествоПотребительскихУпаковок; 
			КонецЕсли;
		Иначе
			СтрокаЗаполнения = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	//@skip-warning
	ВложенныеЗаписи        = РезультатыЗапроса["ВложенныеЗаписи"].Выгрузить(); // Монотоварные упаковки
	//@skip-warning
	МультитоварныеУпаковки = РезультатыЗапроса["МультитоварныеУпаковки"].Выгрузить(); // Мультитоварные упаковки
	
	Результат.Индексы.Добавить("Ссылка, Штрихкод");
	СтруктураПоиска = Новый Структура("Ссылка, Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
		//@skip-warning
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов["Результат"].Выгрузить();
		ВложенныеЗаписи.Индексы.Добавить("Ссылка, Штрихкод");
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
			ДанныеРодителя = ВложенныеЗаписи.НайтиСтроки(СтруктураПоиска)[0];
			СтруктураПоиска.Штрихкод = ДанныеРодителя.Родитель;
			СтрокиЗаполнения = Результат.НайтиСтроки(СтруктураПоиска);
			Если СтрокиЗаполнения.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокиЗаполнения[0], ДанныеШтрихКода, "Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
			КонецЕсли;
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов["ВложенныеЗаписи"].Выгрузить();
	КонецЦикла;
	
	//После первичного получения мультитоварной упаковки нужна вся вложенность
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"И ШтрихкодыВходящие.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)", "");
	СоответствиеПоОбъектам = Новый Соответствие;
	
	Результат.Индексы.Добавить("Ссылка, Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
	ПоляПоискаДублей = Новый Структура("Ссылка, Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
		
	Пока МультитоварныеУпаковки.Количество() Цикл
		
		Для Каждого СтрокаВложение Из МультитоварныеУпаковки Цикл
			
			СоответствиеУпаковок = СоответствиеПоОбъектам.Получить(СтрокаВложение.Ссылка);
			Если СоответствиеУпаковок = Неопределено Тогда
				СоответствиеУпаковок = Новый Соответствие;
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СтрокаВложение.Родитель);
				СоответствиеПоОбъектам.Вставить(СтрокаВложение.Ссылка, СоответствиеУпаковок);
			ИначеЕсли СоответствиеУпаковок.Получить(СтрокаВложение.Родитель) = Неопределено Тогда
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СтрокаВложение.Родитель);
			Иначе
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СоответствиеУпаковок.Получить(СтрокаВложение.Родитель));
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", МультитоварныеУпаковки);
		ДанныеВложенныхШтрихкодов = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
		//@skip-check bsl-legacy-check-string-literal
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов["Результат"].Выгрузить();
		
		МультитоварныеУпаковки.Индексы.Добавить("Ссылка, Штрихкод");
		
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			Если ЗначениеЗаполнено(ДанныеШтрихКода.Номенклатура) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
				ДанныеРодителя = МультитоварныеУпаковки.НайтиСтроки(СтруктураПоиска)[0];
				СтруктураПоиска.Штрихкод = СоответствиеУпаковок.Получить(ДанныеРодителя.Штрихкод);
				СтрокаЗаполнения = Результат.НайтиСтроки(СтруктураПоиска);
				Если СтрокаЗаполнения.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаЗаполнения = СтрокаЗаполнения[0];
				Если Не ЗначениеЗаполнено(СтрокаЗаполнения.Номенклатура) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, ДанныеШтрихКода,
						"Номенклатура, Характеристика, Серия, ВидПродукции, ТребуетВзвешивания");
				Иначе
					ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, ДанныеШтрихКода);
					ПоляПоискаДублей.Штрихкод = СтруктураПоиска.Штрихкод;
					Если Результат.НайтиСтроки(ПоляПоискаДублей).Количество() = 0 Тогда
						НоваяСтрокаМультитоварнойУпаковки = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаМультитоварнойУпаковки, СтрокаЗаполнения);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаМультитоварнойУпаковки, ПоляПоискаДублей);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		//@skip-check bsl-legacy-check-string-literal
		МультитоварныеУпаковки = ДанныеВложенныхШтрихкодов["МультитоварныеУпаковки"].Выгрузить();
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		РезультатРазбора = Неопределено; // см. ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода
		
		НормализованныйКодМаркировки = КодМаркировкиДляПередачиУПД(
			СтрокаТаблицы.ЗначениеШтрихкода, СтрокаТаблицы.ВидПродукции, РезультатРазбора);
		
		Если ЗначениеЗаполнено(РезультатРазбора.ВидУпаковки) Тогда
			СтрокаТаблицы.ВидУпаковки = РезультатРазбора.ВидУпаковки;
		ИначеЕсли СтрокаТаблицы.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		ИначеЕсли ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
			РезультатРазбора.ВидУпаковки, РезультатРазбора.ДанныеРазбора) Тогда
			СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
		КонецЕсли;
		
		СтрокаТаблицы.ЗначениеШтрихкода = НормализованныйКодМаркировки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сопоставления информации об упаковках с товарной частью.
// Добавляет в таблицу коды ОСУ для строк, по которым коды маркировки не указывались. Считаем что таблица товаров
//   уже соответствует таблице штрихкодов упаковок (с учетом невнесенных ОСУ).
//
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
//  ТаблицаТоваров	 - ТаблицаЗначений - исходная таблица товаров: 
// 	 * Ссылка         - Произвольный - объект-владелец штрихкода
// 	 * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура
// 	 * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
// 	 * Количество     - Число - количество
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  ТаблицаЗначений - См. ЧастичноеСодержимое
//
Функция ЧастичноеСодержимоеИКодыОСУ(ТаблицаУпаковок, ТаблицаТоваров, ПараметрыСканирования) Экспорт
	
	ЧастичноеСодержимоеРезультат = ЧастичноеСодержимое(ТаблицаУпаковок);
	
	Если ЧастичноеСодержимоеРезультат.Колонки.Найти("ТекстОшибкиИС") = Неопределено Тогда
		ЧастичноеСодержимоеРезультат.Колонки.Добавить("ТекстОшибкиИС", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	КонецЕсли;
	
	ДополнитьРезультатКодамиОСУ(ТаблицаТоваров, ПараметрыСканирования, ЧастичноеСодержимоеРезультат);
	
	Возврат ЧастичноеСодержимоеРезультат;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
// для дальнейшего сравнения информации об упаковках с товарной частью.
// 
// Параметры:
//   ШтрихкодыУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров                                       - Исходные штрихкоды упаковок без частичного выбытия.
//                     - Массив Из см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам - Исходные штрихкоды упаковок, используя частичное выбытие.
//   ВидыПродукцииИС   - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС, Неопределено -
//      ограничение содержимого штрихкодов упаковок по виду/видам маркируемой продукции.
//   ДоКомплектующих - Булево - Разворачивать наборы до комплектующих
//   ВключатьШтрихкодУпаковки - Булево - Сворачивает полученную таблицу содержимого до штрихкода упаковки
// Возвращаемое значение:
// ТаблицаЗначений - таблица состава упаковок:
//   * ШтрихкодУпаковки   - СправочникСсылка.ШтрихкодыУпаковокТоваров  - Штрихкод упаковки.
//   * Номенклатура       - ОпределяемыйТип.Номенклатура               - содержимое
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   * Серия              - ОпределяемыйТип.СерияНоменклатуры          - содержимое
//   * Количество         - Число                                      - количество единиц содержимого
//   * ЧастичноеВыбытиеВариантУчета - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС - Вариант частичного выбытия.
Функция Содержимое(Знач ШтрихкодыУпаковок, Знач ВидыПродукцииИС = Неопределено, ДоКомплектующих = Ложь, ВключатьШтрихкодУпаковки = Ложь) Экспорт
	
	Запрос           = Новый Запрос;
	КэшВходящихСтрок = Новый Соответствие;
	ПроверятьЧастичноеВыбытие = Неопределено;
	
	Если ШтрихкодыУпаковок.Количество()
		И ТипЗнч(ШтрихкодыУпаковок[0]) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		ПроверенныеШтрихкоды = ШтрихкодыУпаковок;
	Иначе
		ПроверенныеШтрихкоды = Новый Массив;
		Для Каждого ИсходнаяСтрока Из ШтрихкодыУпаковок Цикл
			ПроверенныеШтрихкоды.Добавить(ИсходнаяСтрока.ШтрихкодУпаковки);
			Если ПроверятьЧастичноеВыбытие = Неопределено Тогда
				ПроверятьЧастичноеВыбытие = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсходнаяСтрока, "ЧастичноеВыбытиеВариантУчета");
			КонецЕсли;
			Если ПроверятьЧастичноеВыбытие Тогда
				КэшВходящихСтрок.Вставить(ИсходнаяСтрока.ШтрихкодУпаковки, ИсходнаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыделитьШтрихкодыСодержащиеВидыПродукции(ПроверенныеШтрихкоды, ВидыПродукцииИС);
	
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ПроверенныеШтрихкоды);
	Запрос.УстановитьПараметр("ЭтоШтрихкодУпаковкиНабора", Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка         КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия          КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                            КАК Количество,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ                            КАК КоличествоНеУказано,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок <> 0
	|			ТОГДА ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                            КАК КоличествоПотребительскихУпаковок,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ПустаяСсылка) КАК ЧастичноеВыбытиеВариантУчета
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|		ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И (Вложенные.Ссылка ЕСТЬ NULL
	|		ИЛИ &ЭтоШтрихкодУпаковкиНабора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вложенные.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|	ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И Вложенные.Ссылка В (&ШтрихкодУпаковки)
	|	И Не &ЭтоШтрихкодУпаковкиНабора";
	
	Если Не ДоКомплектующих Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, "&ЭтоШтрихкодУпаковкиНабора",
			"(ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок = 1
			|	ИЛИ (ШтрихкодыУпаковок.КоличествоПотребительскихУпаковок = 0 И ШтрихкодыУпаковок.Количество = 1))");
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	Для Каждого СтрокаТаблицы Из Результат Цикл
		ОбработкаСтрокиЧастичногоВыбытия(СтрокаТаблицы, КэшВходящихСтрок);
	КонецЦикла;
	Пока ВложенныеЗаписи.Количество() Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[0].Выбрать();
		
		Пока ДочерниеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДочерниеЗаписи);
			ОбработкаСтрокиЧастичногоВыбытия(НоваяСтрока, КэшВходящихСтрок);
			
		КонецЦикла;
		
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
		
	КонецЦикла;
	
	Если ВключатьШтрихкодУпаковки Тогда
		ПоляСвертки = "Номенклатура, Характеристика, Серия, Штрихкод";
	Иначе
		ПоляСвертки = "Номенклатура, Характеристика, Серия"
	КонецЕсли;

	Результат.Свернуть(ПоляСвертки, "КоличествоНеУказано, КоличествоПотребительскихУпаковок, ЧастичноеВыбытиеВариантУчета, Количество");
	
	Возврат Результат;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
// для дальнейшего сравнения информации об упаковках с товарной частью.
//
// Параметры:
//  Упаковки - Массив Из см. ШтрихкодированиеИС.НовыйЭлементКоллекцииУпаковокДляРаспределенияПоТоварам - штрихкоды упаковок, используя частичное выбытие.
//                  - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Штрихкод                       - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
//  ТаблицаТоваров	 - ТаблицаЗначений - исходная таблица товаров:
// 	 * Ссылка         - Произвольный - объект-владелец штрихкода
// 	 * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура
// 	 * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
// 	 * Количество     - Число - количество
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  ТаблицаЗначений - см. Содержимое
Функция СодержимоеИКодыОСУ(Упаковки, ТаблицаТоваров, ПараметрыСканирования) Экспорт
	
	Если ТипЗнч(Упаковки) = Тип("ТаблицаЗначений") Тогда
		ИсточникСодержимого = Упаковки.ВыгрузитьКолонку("Штрихкод");
	Иначе
		ИсточникСодержимого = Упаковки;
	КонецЕсли;
	
	СодержимоеРезультат = Содержимое(ИсточникСодержимого,,, Истина);

	СодержимоеРезультат.Колонки.Добавить("ТекстОшибкиИС",      ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	СодержимоеРезультат.Колонки.Добавить("ВидУпаковки",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	СодержимоеРезультат.Колонки.Добавить("Обработан",          Новый ОписаниеТипов("Булево"));
	СодержимоеРезультат.Колонки.Добавить("ВидПродукции",       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	СодержимоеРезультат.Колонки.Добавить("Мультитоварная",     Новый ОписаниеТипов("Булево"));
	СодержимоеРезультат.Колонки.Добавить("ТребуетВзвешивания", Новый ОписаниеТипов("Булево"));
	СодержимоеРезультат.Колонки.Добавить("ЗначениеШтрихкода",  ОбщегоНазначения.ОписаниеТипаСтрока(255));
	СодержимоеРезультат.Колонки.Добавить("КоличествоВПотребительскойУпаковке", ОбщегоНазначения.ОписаниеТипаЧисло(15, 6));

	ДополнитьРезультатКодамиОСУ(ТаблицаТоваров, ПараметрыСканирования, СодержимоеРезультат);

	Возврат СодержимоеРезультат;

КонецФункции

// Дополняет таблицу транспортных и индивидуальных штрихкодов видом продукции, видом упаковок
// для дальнейшего заполнения данных о кодах маркировки при формировании ТОРГ-2.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   ПолеТипРасхождения - Строка - путь к данным тип расхождения, необязательный параметр.
// 
// Возвращаемое значение:
// ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * ВидПродукции       - Перечислениессылка.ВидыПродукцииИС - вид продукции номенклатуры для кодировки значения штрихкода
// 	 * ВидУпаковки        - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки номенклатуры для кодировки значения штрихкода
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
//   * ТипРасхождения     - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
Функция ЧастичноеСодержимоеТОРГ2(ТаблицаУпаковок, ПолеТипРасхождения = Неопределено) Экспорт
	
	НормализоватьТаблицуЗначений(ТаблицаУпаковок);
	
	СписокЗапросов = Новый СписокЗначений;
	
	ТекстЗапросаДанныеШтрихкодовУпаковок = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.Количество        КАК Количество,
		|	ШтрихкодыУпаковок.ВидУпаковки       КАК ВидУпаковки,
		|	&ПолеТипРасхождения КАК ТипРасхождения 
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеШтрихкода
		|";
	
	Если ПолеТипРасхождения = Неопределено Тогда
		ПолеТипРасхождения = "&ПустойТипРасхождения";
	Иначе
		ПолеТипРасхождения = "ШтрихкодыУпаковок." + ПолеТипРасхождения;
	КонецЕсли;
	ТекстЗапросаДанныеШтрихкодовУпаковок = СтрЗаменить(ТекстЗапросаДанныеШтрихкодовУпаковок, "&ПолеТипРасхождения", ПолеТипРасхождения);

	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	СписокЗапросов.Добавить(
		ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка                    КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Номенклатура              КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика            КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Количество                КАК Количество,
		|	ДанныеШтрихкодовУпаковок.ТипРасхождения            КАК ТипРасхождения,
		|	Ложь                                               КАК Обработан,
		|	СвойстваМаркируемойПродукции.ВидПродукции          КАК ВидПродукции,
		|	ДанныеШтрихкодовУпаковок.ВидУпаковки               КАК ВидУпаковки
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода",
		"Результат");
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ТаблицаУпаковок);
	Запрос.УстановитьПараметр("ПустойТипРасхождения", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП"));
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	//@skip-check bsl-legacy-check-string-literal
	Результат = РезультатыЗапроса["Результат"].Выгрузить();
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		РезультатРазбора = Неопределено; // см. ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода
		
		НормализованныйКодМаркировки = КодМаркировкиДляПередачиУПД(
			СтрокаТаблицы.ЗначениеШтрихкода, СтрокаТаблицы.ВидПродукции, РезультатРазбора);
		
		Если ЗначениеЗаполнено(РезультатРазбора.ВидУпаковки)
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
			СтрокаТаблицы.ВидУпаковки = РезультатРазбора.ВидУпаковки;
		КонецЕсли;
		
		СтрокаТаблицы.ЗначениеШтрихкода = НормализованныйКодМаркировки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура НормализоватьШтрихкодыУпаковок(Товары, ШтрихкодыУпаковок) Экспорт
	
	РазделительЗапросов = "
						  |;
				          |///////////////////////////////////////////////////////////////
						  |";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&Товары КАК Товары
		|";
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	ТекстЗапроса = ТекстЗапроса + ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции();
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|ГДЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции <> НЕОПРЕДЕЛЕНО";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВидыПродукции = Неопределено;
	Иначе
		ВидыПродукции = Результат.Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидыПродукции);
	
	Для Каждого СтрокаДанных из ШтрихкодыУпаковок Цикл
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			СтрокаДанных.ЗначениеШтрихкода, ВидыПродукции,, НастройкиРазбораКодаМаркировки);
		Если ДанныеРазбора <> Неопределено Тогда
			СтрокаДанных.ЗначениеШтрихкода = ДанныеРазбора.НормализованныйКодМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Нормализация кодов, полученных в переданной таблице, заполненной по данным ЭДО.
// Входящая таблица штрихкоды должна содержать данные о номенклатуре, используемой для определения вида продукции при разборе кодов.
// 
// Параметры:
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица, содержащая колонки:
//  * ЗначениеШтрихкода - Строка - Значение штрихкода.
//  * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
Процедура НормализоватьШтрихкодыУпаковокУКД(ШтрихкодыУпаковок) Экспорт
	
	РазделительЗапросов = "
		|;
		|///////////////////////////////////////////////////////////////
		|";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&ШтрихкодыУпаковок КАК Товары
		|";
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	ТекстЗапроса = ТекстЗапроса + ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции();
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваМаркируемойПродукции.Номенклатура КАК Номенклатура,
		|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|ГДЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции <> НЕОПРЕДЕЛЕНО
		|ИТОГИ ПО
		|	ВидПродукции";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Номенклатура");

	ВыборкаПоВидуПродукции = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВидуПродукции.Следующий() Цикл
		
		ВидПродукции = ВыборкаПоВидуПродукции.ВидПродукции;
		
		НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидПродукции);
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		
		Выборка = ВыборкаПоВидуПродукции.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПараметрыОтбора.Номенклатура = Выборка.Номенклатура;
			
			НайденныеСтроки = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					НайденнаяСтрока.ЗначениеШтрихкода, ВидПродукции,, НастройкиРазбораКодаМаркировки, ПользовательскиеПараметрыРазбораКодаМаркировки);
				Если ДанныеРазбора <> Неопределено Тогда
					НайденнаяСтрока.ЗначениеШтрихкода = ДанныеРазбора.НормализованныйКодМаркировки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Обрабатывает таблицы кодов маркировки для заполнения УКД только расхождениями (сокращенный формат).
//
// Параметры:
//  ШтрихкодыУпаковокДо - ТаблицаЗначений - См. ЧастичноеСодержимое. Таблица кодов документа-основания. Будет перезаполнена кодами, которые отсутствуют в корректируемом документе.
//  ШтрихкодыУпаковок   - ТаблицаЗначений - См. ЧастичноеСодержимое. Таблица кодов документа корректировки. Будет перезаполнена кодами, которые отсутствуют в документе основании.
Процедура ЗаполнитьРасхожденияКодовМаркировкиУКД(ШтрихкодыУпаковокДо, ШтрихкодыУпаковок) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокДо.Ссылка                    КАК Ссылка,
		|	ШтрихкодыУпаковокДо.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокДо.Штрихкод                  КАК Штрихкод,
		|	ШтрихкодыУпаковокДо.Номенклатура              КАК Номенклатура,
		|	ШтрихкодыУпаковокДо.Характеристика            КАК Характеристика,
		|	ШтрихкодыУпаковокДо.Серия                     КАК Серия,
		|	ШтрихкодыУпаковокДо.Мультитоварная            КАК Мультитоварная,
		|	ШтрихкодыУпаковокДо.Обработан                 КАК Обработан,
		|	ШтрихкодыУпаковокДо.ТипУпаковки               КАК ТипУпаковки,
		|	ШтрихкодыУпаковокДо.ВидПродукции              КАК ВидПродукции,
		|	ШтрихкодыУпаковокДо.ВидУпаковки               КАК ВидУпаковки,
		|	ШтрихкодыУпаковокДо.Количество                КАК Количество,
		|	ШтрихкодыУпаковокДо.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке
		|ПОМЕСТИТЬ втШтрихкодыУпаковокДо
		|ИЗ
		|	&ШтрихкодыУпаковокДо КАК ШтрихкодыУпаковокДо
		|ИНДЕКСИРОВАТЬ ПО Ссылка, Номенклатура, Характеристика, Серия
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка                    КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковок.Штрихкод                  КАК Штрихкод,
		|	ШтрихкодыУпаковок.Номенклатура              КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика            КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия                     КАК Серия,
		|	ШтрихкодыУпаковок.Мультитоварная            КАК Мультитоварная,
		|	ШтрихкодыУпаковок.Обработан                 КАК Обработан,
		|	ШтрихкодыУпаковок.ТипУпаковки               КАК ТипУпаковки,
		|	ШтрихкодыУпаковок.ВидПродукции              КАК ВидПродукции,
		|	ШтрихкодыУпаковок.ВидУпаковки               КАК ВидУпаковки,
		|	ШтрихкодыУпаковок.Количество                КАК Количество,
		|	ШтрихкодыУпаковок.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке
		|ПОМЕСТИТЬ втШтрихкодыУпаковок
		|ИЗ
		|	&ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ИНДЕКСИРОВАТЬ ПО Ссылка, Номенклатура, Характеристика, Серия
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	втШтрихкодыУпаковок.Ссылка КАК Ссылка,
		|	втШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	втШтрихкодыУпаковок.Штрихкод КАК Штрихкод,
		|	втШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		|	втШтрихкодыУпаковок.Характеристика КАК Характеристика,
		|	втШтрихкодыУпаковок.Серия КАК Серия,
		|	втШтрихкодыУпаковок.Мультитоварная КАК Мультитоварная,
		|	втШтрихкодыУпаковок.Обработан КАК Обработан,
		|	втШтрихкодыУпаковок.ТипУпаковки КАК ТипУпаковки,
		|	втШтрихкодыУпаковок.ВидПродукции КАК ВидПродукции,
		|	втШтрихкодыУпаковок.ВидУпаковки КАК ВидУпаковки,
		|	втШтрихкодыУпаковок.Количество КАК Количество,
		|	втШтрихкодыУпаковок.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке
		|ИЗ
		|	втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ втШтрихкодыУпаковокДо КАК втШтрихкодыУпаковокДо
		|		ПО втШтрихкодыУпаковок.Ссылка = втШтрихкодыУпаковокДо.Ссылка
		|			И втШтрихкодыУпаковок.Номенклатура = втШтрихкодыУпаковокДо.Номенклатура
		|			И втШтрихкодыУпаковок.Характеристика = втШтрихкодыУпаковокДо.Характеристика
		|			И втШтрихкодыУпаковок.Серия = втШтрихкодыУпаковокДо.Серия
		|			И (ВЫБОР
		|				КОГДА втШтрихкодыУпаковок.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет)
		|					ТОГДА втШтрихкодыУпаковок.ЗначениеШтрихкода = втШтрихкодыУпаковокДо.ЗначениеШтрихкода
		|						И втШтрихкодыУпаковок.Количество = втШтрихкодыУпаковокДо.Количество
		|				ИНАЧЕ втШтрихкодыУпаковок.Штрихкод = втШтрихкодыУпаковокДо.Штрихкод
		|			КОНЕЦ)
		|ГДЕ
		|	втШтрихкодыУпаковокДо.Ссылка ЕСТЬ NULL",
		"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	втШтрихкодыУпаковокДо.Ссылка КАК Ссылка,
		|	втШтрихкодыУпаковокДо.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	втШтрихкодыУпаковокДо.Штрихкод КАК Штрихкод,
		|	втШтрихкодыУпаковокДо.Номенклатура КАК Номенклатура,
		|	втШтрихкодыУпаковокДо.Характеристика КАК Характеристика,
		|	втШтрихкодыУпаковокДо.Серия КАК Серия,
		|	втШтрихкодыУпаковокДо.Мультитоварная КАК Мультитоварная,
		|	втШтрихкодыУпаковокДо.Обработан КАК Обработан,
		|	втШтрихкодыУпаковокДо.ТипУпаковки КАК ТипУпаковки,
		|	втШтрихкодыУпаковокДо.ВидПродукции КАК ВидПродукции,
		|	втШтрихкодыУпаковокДо.ВидУпаковки КАК ВидУпаковки,
		|	втШтрихкодыУпаковокДо.Количество КАК Количество,
		|	втШтрихкодыУпаковокДо.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке
		|ИЗ
		|	втШтрихкодыУпаковокДо КАК втШтрихкодыУпаковокДо
		|		ЛЕВОЕ СОЕДИНЕНИЕ втШтрихкодыУпаковок КАК втШтрихкодыУпаковок
		|		ПО втШтрихкодыУпаковокДо.Ссылка = втШтрихкодыУпаковок.Ссылка
		|			И втШтрихкодыУпаковокДо.Номенклатура = втШтрихкодыУпаковок.Номенклатура
		|			И втШтрихкодыУпаковокДо.Характеристика = втШтрихкодыУпаковок.Характеристика
		|			И втШтрихкодыУпаковокДо.Серия = втШтрихкодыУпаковок.Серия
		|			И (ВЫБОР
		|				КОГДА втШтрихкодыУпаковокДо.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет)
		|					ТОГДА втШтрихкодыУпаковокДо.ЗначениеШтрихкода = втШтрихкодыУпаковок.ЗначениеШтрихкода
		|						И втШтрихкодыУпаковокДо.Количество = втШтрихкодыУпаковок.Количество
		|				ИНАЧЕ втШтрихкодыУпаковокДо.Штрихкод = втШтрихкодыУпаковок.Штрихкод
		|			КОНЕЦ)
		|ГДЕ
		|	втШтрихкодыУпаковок.Ссылка ЕСТЬ NULL",
		"ШтрихкодыУпаковокДо");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	Запрос.УстановитьПараметр("ШтрихкодыУпаковокДо", ШтрихкодыУпаковокДо);

	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	//@skip-check bsl-legacy-check-string-literal
	ШтрихкодыУпаковок   = РезультатыЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-check bsl-legacy-check-string-literal
	ШтрихкодыУпаковокДо = РезультатыЗапроса["ШтрихкодыУпаковокДо"].Выгрузить();
	
КонецПроцедуры

// Рассчитывает по таблице расхождений количество бракованных кодов
// 
// Параметры:
//  ВыборкаТовары - ВыборкаИзРезультатаЗапроса - данные выборки по строке товара.
//  ТаблицаУпаковкиРасхождения - См. ЧастичноеСодержимоеТОРГ2.
//
// Возвращаемое значение:
//  Число - количество, доступное к оформлению как брак по расхождениям.
//
Функция ПолучитьКоличествоОформитьРасхожденияКакБрак(ВыборкаТовары, ТаблицаУпаковкиРасхождения) Экспорт
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ВыборкаТовары.Характеристика);
	
	Количество = 0;

	ПараметрыОтбора.Вставить("Обработан", Ложь);
	ПараметрыОтбора.Вставить("ТипРасхождения", ИнтеграцияИСМП.ТипРасхожденияИСМПБрак());
	
	СтрокиРасхожденийБрак = ТаблицаУпаковкиРасхождения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаРасхождения Из СтрокиРасхожденийБрак Цикл
		Количество = Количество + СтрокаРасхождения.Количество;
	КонецЦикла;
	Возврат Количество;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;
//
// Возвращаемое значение:
//  Массив из Строка - массив штрихкодов упаковок
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок.НомерСтроки.КодУпаковки");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
// Возвращаемое значение:
//  Массив из Строка - массив штрихкодов упаковок
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ИндивидуальныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
// Возвращаемое значение:
//  Массив из Строка - массив штрихкодов упаковок
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_5_02(СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковок = Новый Массив;
	
	Путь = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СведенияОМаркировке";
	ПутьКИЗ = Путь + ".НомерСтроки.Идентификатор.КонтрольныеЗнаки";
	ПутьУпаковки = Путь + ".НомерСтроки.Идентификатор.ИдентификаторыУпаковок";
	ПутьГТИН = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.ГТИН";
	
	СведенияОМаркировке = СведенияОТоваре.Строки.Найти(Путь, "ПолныйПуть", Истина);
	ДанныеГТИН          = СведенияОТоваре.Строки.Найти(ПутьГТИН, "ПолныйПуть", Истина);
	
	Если СведенияОМаркировке <> Неопределено И ЗначениеЗаполнено(СведенияОМаркировке.Значение) Тогда
		
		Для Каждого Маркировка Из СведенияОМаркировке.Строки Цикл
			
			ЛогистическаяУпаковка = ЗначениеРеквизитаВДереве(
				Маркировка, Путь + ".НомерСтроки.ИдентификаторУпаковки");
				
			Если ЗначениеЗаполнено(ЛогистическаяУпаковка) Тогда
				ШтрихкодыУпаковок.Добавить(ЛогистическаяУпаковка);
			КонецЕсли;
			
			КоличествоПоОСУ = ЗначениеРеквизитаВДереве(
				Маркировка, Путь + ".НомерСтроки.Количество");
				
			Если ЗначениеЗаполнено(КоличествоПоОСУ) И ЗначениеЗаполнено(ДанныеГТИН.Значение) Тогда
				
				КодОСУ = СформироватьКодОСУПоКоличествуИGTIN(ДанныеГТИН.Значение, КоличествоПоОСУ);
				ШтрихкодыУпаковок.Добавить(КодОСУ);
				
			КонецЕсли;
			
			КонтрольныеЗнаки = Маркировка.Строки.Найти(ПутьКИЗ, "ПолныйПуть", Истина);
			Если КонтрольныеЗнаки <> Неопределено И ЗначениеЗаполнено(КонтрольныеЗнаки.Значение) Тогда
				
				Для Каждого КонтрольныйЗнак Из КонтрольныеЗнаки.Строки Цикл
					
					ШтрихкодыУпаковок.Добавить(ЗначениеРеквизитаВДереве(
						КонтрольныйЗнак, ПутьКИЗ + ".НомерСтроки.КонтрольныйЗнак"));
					
				КонецЦикла;
				
			КонецЕсли;
				
			ИдентификаторыУпаковок = Маркировка.Строки.Найти(ПутьУпаковки, "ПолныйПуть", Истина);
			Если ИдентификаторыУпаковок <> Неопределено И ЗначениеЗаполнено(ИдентификаторыУпаковок.Значение) Тогда
				
				Для Каждого ИдентификаторУпаковки Из ИдентификаторыУпаковок.Строки Цикл
					
					ШтрихкодыУпаковок.Добавить(ЗначениеРеквизитаВДереве(
						ИдентификаторУпаковки, ПутьУпаковки + ".НомерСтроки.ИдентификаторУпаковки"));
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//	Постфикс - Строка - потсфикс имени реквизита строки ЭДО, хранящего сведения о маркировке ("До", "После")
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре, Постфикс = "После")
	
	ШтрихкодыУпаковок = Новый Массив;
	
	ПутьСведенияОМаркировке = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке" + Постфикс;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(ПутьСведенияОМаркировке, "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			ПутьСведенияОМаркировке + ".КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				ПутьСведенияОМаркировке + ".КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) 
				И Не ШтрихкодУпаковки = "-" Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			ПутьСведенияОМаркировке + ".ТранспортныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				ПутьСведенияОМаркировке + ".ТранспортныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) 
				И Не ШтрихкодУпаковки = "-" Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ИндивидуальныеУпаковки = СведенияОТоваре.Строки.Найти(
			ПутьСведенияОМаркировке + ".ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		Если ИндивидуальныеУпаковки <> Неопределено Тогда
			Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
				ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
					ПутьСведенияОМаркировке + ".ИндивидуальныеУпаковки.НомерСтроки.Код");
				Если ЗначениеЗаполнено(ШтрихкодУпаковки) 
					И Не ШтрихкодУпаковки = "-" Тогда 
					ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Создает новую таблицу значений для штрихкодов упаковок.
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Параметры:
// 	ДобавитьНоменклатуру - Булево - признак необходимости дополнить возвращаемую таблицу колонками номенклатуры.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
// * ЗначениеШтрихкода - Строка - Значение штрихкода
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
Функция НоваяТаблицаШтрихкодыУпаковок(ДобавитьНоменклатуру = Ложь) Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	
	Если ДобавитьНоменклатуру Тогда
		ШтрихкодыУпаковок.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		ШтрихкодыУпаковок.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Создает таблицу значений для штрихкодов упаковок, полученных в ТОРГ-2
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
// * ЗначениеШтрихкода - Строка - Значение штрихкода
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
// * ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
// * Количество - Число - количество единиц.
//
Функция ТаблицаШтрихкодыУпаковокНоменклатура() Экспорт

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ЗначениеШтрихкода",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ТаблицаДанных.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаДанных.Колонки.Добавить("ТипРасхождения", Метаданные.ОпределяемыеТипы.ТипРасхожденияИСМП.Тип);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_5_02(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_5_02(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// Используется для УКД, заполненного кодами маркировки полным форматом (все коды До/После).
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_УКД(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// Используется для УКД, заполненного кодами маркировки по упрощенному формату (только расхождения До/После).
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов для заполнения данными из ЭДО (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
//  ШтрихкодыУпаковокОснования - ТаблицаЗначений - таблица, содержащая колонки:
//  * ЗначениеШтрихкода - Строка - Значение штрихкода.
//  * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// 	СтрокаТовары - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_УКД2020(ШтрихкодыУпаковок, СведенияОТоваре, ШтрихкодыУпаковокОснования, СтрокаТовары) Экспорт
	
	ШтрихкодыУпаковокПосле = ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре);
	ШтрихкодыУпаковокДо = ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре, "До");
	
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокПосле Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		НоваяСтрока.Номенклатура      = СтрокаТовары.Номенклатура;
		
	КонецЦикла;
	
	// При использовании сокращенного формата заполнения кодов, согласно доментации "Методические_рекомендации_по_оформлению_документов_ЭДО":
	// "может быть указан перечень КИ до/после, только по измененным КИ"
	// В таком случае, если в исходном документе были разные виды упаковок, но изменения по кодам пришли только в одном теге,
	// нужно дополнить штрихкоды данными исходного ЭД, исключая коды, указанные в теге "СведенияОМаркировкеДо".
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);

	ШтрихкодыОснованияСОтбором = ШтрихкодыУпаковокОснования.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТаблицы Из ШтрихкодыОснованияСОтбором Цикл
		Если ШтрихкодыУпаковокДо.Найти(СтрокаТаблицы.ЗначениеШтрихкода) = Неопределено Тогда
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = СтрокаТаблицы.ЗначениеШтрихкода;
			НоваяСтрока.Номенклатура      = СтрокаТаблицы.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу штрихкоды упаковок при заполнении УКД данными кодов документа-основания с отобором по номенклатуре строки.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
//  ШтрихкодыУпаковокОснования - ТаблицаЗначений - таблица, содержащая колонки:
//  * ЗначениеШтрихкода - Строка - Значение штрихкода
//  * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//  * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
//  СтрокаТовары - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке.
Процедура ДобавитьШтрихкодыПоДокументуОснованию_УКД(ШтрихкодыУпаковок, ШтрихкодыУпаковокОснования, СтрокаТовары) Экспорт
	
	Если ШтрихкодыУпаковокОснования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
	
	ШтрихкодыНоменклатуры = ШтрихкодыУпаковокОснования.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = СтрокаШтрихкода.ЗначениеШтрихкода; 
		НоваяСтрока.Номенклатура      = СтрокаШтрихкода.Номенклатура;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в таблицы штрихкодов упаковок (факт и расхождения).
// 
// Параметры:
//  ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов для заполнения данными раздела Факт (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  ШтрихкодыУпаковокРасхождения - ТаблицаЗначений - Таблица штрихкодов для заполнения данными по расхождениям (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, ШтрихкодыУпаковокРасхождения,
		СведенияОТоваре) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(
		ШтрихкодыУпаковок,
		ШтрихкодыУпаковокРасхождения,
		СведенияОТоваре);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПарамерыЗаполнения = ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях();
	
	Если ЗначениеЗаполнено(СведенияОТоваре.Сопоставление.НоменклатураИБ) Тогда
		ПарамерыЗаполнения.Номенклатура = СведенияОТоваре.Сопоставление.НоменклатураИБ;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОТоваре.Сопоставление.ХарактеристикаИБ) Тогда
		ПарамерыЗаполнения.Характеристика = СведенияОТоваре.Сопоставление.ХарактеристикаИБ;
	КонецЕсли;
	
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, СведенияОТоваре.ПоФакту, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Излишки, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Недостача, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Брак, ПарамерыЗаполнения);
	
КонецПроцедуры

Функция ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	ПараметрыЗаполнения.Вставить("Характеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	ПараметрыЗаполнения.Вставить("ЗаполнятьТипРасходения", Ложь);
	ПараметрыЗаполнения.Вставить("ТипРасхождения", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП"));
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Сворачивает таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов упаковок.
Процедура СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, ШтрихкодУпаковки");
	
КонецПроцедуры

Процедура СвернутьТаблицуШтрихкодовУпаковокАкт(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, Номенклатура, Характеристика, ТипРасхождения", "Количество");
	
КонецПроцедуры

Процедура ОчиститьРезультатыПроверкиДокументаПриЗагрузкеДокумента(Документ) Экспорт
	
	РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.ОчиститьРезультатыПроверкиДокумента(Документ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВерсияАПИ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсияБиблиотеки = ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки();
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБиблиотеки, "1.9.1.1") >= 0 Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ЗавершенОбменПоЭДО(ПроверяемыйДокумент) Экспорт
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПроверяемыйДокумент) 
	 И Не Метаданные.ОпределяемыеТипы.ДокументыИСМП.Тип.СодержитТип(ТипЗнч(ПроверяемыйДокумент))
	 И (ВерсияАПИ() = 1
	  Или Метаданные.ОпределяемыеТипы["ОснованияЭлектронныхДокументовЭДО"].Тип.СодержитТип(ТипЗнч(ПроверяемыйДокумент))) Тогда
		СтатусДокументаПоЭДО = ОбменСКонтрагентами.СтатусДокументооборота(ПроверяемыйДокумент).Статус;
		Если СтатусДокументаПоЭДО = "Утвержден" Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Структура для переопределения адресов в УПД формата 5_02
// 
// Возвращаемое значение:
//  Структура - данные адресов участников обмена:
// * Покупатель - см. КонструкторАдресУчастникаОбмена
// * Продавец - см. КонструкторАдресУчастникаОбмена
Функция СтруктураАдресовУчастниковОбмена() Экспорт
	
	Данные = Новый Структура();
	
	Данные.Вставить("Покупатель",       КонструкторАдресУчастникаОбмена());
	Данные.Вставить("Продавец",         КонструкторАдресУчастникаОбмена());
	
	Возврат Данные;
	
КонецФункции

// Структура для переопределения данных по перевозочным документам в УПД формата 5_02
// 
// Возвращаемое значение:
//  Структура - данные перевозочных документов:
// * НомерТранспортногоДокумента - Строка - номер перевозочного документа
// * ДатаТранспортногоДокумента  - Дата   - дата перевозочного документа
// * ИдентификаторЭПД            - Строка - идентификатор электронного перевозочного документа
// * РегНомерТС                  - Строка - регистрационный номер транспортного средства (до 20 символов)
Функция СтруктураДанныхПоПеревозочнымДокументам() Экспорт
	
	Данные = Новый Структура();
	
	Данные.Вставить("НомерТранспортногоДокумента", "");
	Данные.Вставить("ДатаТранспортногоДокумента",  Дата(1, 1, 1));
	Данные.Вставить("ИдентификаторЭПД",            "");
	Данные.Вставить("РегНомерТС",                  "");
	
	Возврат Данные;
	
КонецФункции

// Структура для переопределения данных по номенклатуре для формирования УПД по перемещению между МОД.
//
// Возвращаемое значение:
//  Структура - данные по номенклатуре:
// * НоменклатураНаименованиеПолное - Строка - наименование номенклатуры
// * НоменклатураКод                - Строка - строковый код номенклатуры
// * ЕдиницаИзмерения               - ОпределяемыйТип.ЕдиницаИзмерения - единица измерения
// * ЕдиницаИзмеренияНаименование   - Строка - представление единицы измерения
// * ЕдиницаИзмеренияКод            - Строка - строковый код единицы измерения по ОКЕИ
// * Количество                     - Число - указание тега КолТов
// * НалоговаяСтавка                - ОпределяемыйТип.СтавкаНДС - рекомендуемое значение БезНДС
// * БезНДС                         - Булево - Истина, если ставка = БезНДС
// * СуммаНалога                    - Число - 0, если ставка = БезНДС.
Функция СтруктураДанныхПоНоменклатуреДляФормированияЭД() Экспорт
	
	Данные = Новый Структура();
	
	Данные.Вставить("НоменклатураНаименованиеПолное", "");
	Данные.Вставить("НоменклатураКод",                "");
	Данные.Вставить("ЕдиницаИзмерения",               ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ЕдиницаИзмерения));
	Данные.Вставить("ЕдиницаИзмеренияНаименование",   "");
	Данные.Вставить("ЕдиницаИзмеренияКод",            "");
	Данные.Вставить("Количество",                     0);
	Данные.Вставить("НалоговаяСтавка",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СтавкаНДС));
	Данные.Вставить("БезНДС",                         Истина);
	Данные.Вставить("СуммаНалога",                    0);
	
	//@skip-check constructor-function-return-section
	Возврат Данные;
	
КонецФункции

// Таблица для формирования прикладного заполнения данных для электронного документа по перемещению между МОД.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица для получения данных для формирования электронного документа:
// * ИдентификаторСтроки - Число - идентификатор строки таблицы, для поиска в заполняемой таблице
// * Номенклатура        - ОпределяемыйТип.Номенклатура
// * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры
// * Упаковка            - ОпределяемыйТип.Упаковка
// * Количество          - Число
// * КоличествоУпаковок  - Число
Функция ТаблицаДляПолученияДанныхДляФормированияЭлектронногоДокумента() Экспорт
	
	Таблица = Новый ТаблицаЗначений();
	
	Таблица.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	Таблица.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	Таблица.Колонки.Добавить("Упаковка",            Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	Таблица.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	Таблица.Колонки.Добавить("КоличествоУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	Возврат Таблица;
	
КонецФункции

// Конструктор для заполнения адресов участников обмена
// 
// Возвращаемое значение:
//  Структура - Конструктор адресов участника обмена:
// * УчастникОбмена - Неопределено - продавец или покупатель, в зависимости от заполнения
// * АвтоматическоеЗаполнение - Булево - если Истина, то необходимо указать ВладелецКонтактнойИнформации и ВидКонтактнойИнформации,
// 		тогда данные адреса будут получены автоматически.
// 		Если Ложь, то необходимо указать АдресЗначенияПолей или АдресЗначениеJSON
// * ВладелецКонтактнойИнформации - Неопределено - владелец КИ, из которого необходимо получить информацию об адресе
// * ВидКонтактнойИнформации - Неопределено - вид КИ, которую надо получить из ВладелецКонтактнойИнформации
// * АдресСтрокой - Строка - представление адреса
// * АдресЗначенияПолей - Строка - адрес в формате XML
// * АдресЗначениеJSON - Строка - адрес в формате JSON
// * КодФИАС - Строка - поле для указания конкретного кода ФИАС/ГАР. Необходимо в случае, если по адресу нельзя получить ФИАС/ГАР,
//  и данные по классификатору указываются вручную
// * УполномоченноеЛицоЗаПоставкуГруза - Неопределено - поле для указание отдельного грузоотправителя/грузополучателя
Функция КонструкторАдресУчастникаОбмена() Экспорт
	
	Данные = Новый Структура();
	
	Данные.Вставить("УчастникОбмена",                    Неопределено);
	Данные.Вставить("АвтоматическоеЗаполнение",          Ложь);
	Данные.Вставить("ВладелецКонтактнойИнформации",      Неопределено);
	Данные.Вставить("ВидКонтактнойИнформации",           Неопределено);
	Данные.Вставить("АдресСтрокой",                      "");
	Данные.Вставить("АдресЗначенияПолей",                "");
	Данные.Вставить("АдресЗначениеJSON",                 "");
	Данные.Вставить("КодФИАС",                           "");
	Данные.Вставить("УполномоченноеЛицоЗаПоставкуГруза", Неопределено);
	
	Возврат Данные;
	
КонецФункции

Процедура АвтоматическоеЗаполнениеАдресов(СтруктураАдресов) Экспорт
	
	Для Каждого ДанныеУчастникаОбмена Из СтруктураАдресов Цикл
		
		Если ДанныеУчастникаОбмена.Значение.АвтоматическоеЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеУчастникаОбмена.Значение.АдресЗначенияПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеУчастникаОбмена.Значение.АдресЗначенияПолей);
		ДанныеУчастникаОбмена.Значение.АдресЗначениеJSON = ДанныеКИ;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция генерирует технический код объемно-сортового учета
//  по регулярному выражению [02][GTIN][37][количество].
// 
// Параметры:
//  GTIN - Строка - GTIN кода ОСУ
//  Количество - Число - Количество по ОСУ
// 
// Возвращаемое значение:
//  Строка
Функция СформироватьКодОСУПоКоличествуИGTIN(GTIN, Количество) Экспорт
	
	Возврат СтрШаблон(
		"%1%2%3%4",
		"02", GTIN, "37", Формат(Количество, "ЧДЦ=0; ЧН=0; ЧГ=;"));
	
КонецФункции

// Возвращает пространство информации продавца УПД версии 5.02 (приказ ЕД-7-26/970@).
//
// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен_УПД_5_02_ИнформацияПродавца() Экспорт
	
	Возврат "ON_NSCHFDOPPR_1_997_01_05_02_01";
	
КонецФункции

// Возвращает пространство информации продавца УПД версии 5.03 (приказ ЕД-7-26/970@).
//
// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен_УПД_5_03_ИнформацияПродавца() Экспорт
	
	Возврат "ON_NSCHFDOPPR_1_997_01_05_03_01";
	
КонецФункции

// Возвращает пространство информации продавца УКД с поддержкой пивной продукции (приказ ЕД-7-26/736@).
//
// Возвращаемое значение:
//  Строка
//
Функция ПространствоИмен_УКД_ПоддержкаПивнойПродукции_ИнформацияПродавца() Экспорт
	
	Возврат "ON_NKORSCHFDOPPR_1_996_03_05_01";
	
КонецФункции

// Проверяет поддержку выбранного формата по пространству имен.
// 
// Параметры:
//  ФорматУПД - Строка - пространство имен формата.
// 
// Возвращаемое значение:
//  Булево - Истина, если поддерживается выбранный формат.
Функция ПроверитьПоддержкуФорматаЭДО(ФорматУПД) Экспорт
	
	СтандартнаяОбработка    = Истина;
	ЭтоПоддерживаемыйФормат = Ложь;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриОпределенииПоддержкиФорматаЭДО(ФорматУПД, ЭтоПоддерживаемыйФормат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		ПоддерживаемыеФорматы = Модуль.ПоддерживаемыеФорматы();
		ЭтоПоддерживаемыйФормат = Модуль.ЭтоФорматПространства(ПоддерживаемыеФорматы, ФорматУПД);
		
	КонецЕсли;
	
	Возврат ЭтоПоддерживаемыйФормат;
	
КонецФункции

// Формирует дерево данных для заполнения или чтения прикладным решением.
//
// Параметры:
//  ПутьКМакетуДанныхЭД - Строка - путь к макету в формате "ИмяОбработки.ИмяМакета", например,
//                         "ОбменСКонтрагентами.Акт501_Исполнитель" (см. Обработка.ОбменСКонтрагентами.Макеты).
// 
// Возвращаемое значение:
//  Неопределено, ДеревоЗначений - Дерево электронного документа.
//
Функция ДеревоЭлектронногоДокумента(ПутьКМакетуДанныхЭД) Экспорт
	
	СтандартнаяОбработка = Истина;
	ДеревоДанных         = Неопределено;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриПолученииДереваЭлектронногоДокумента(ПутьКМакетуДанныхЭД, ДеревоДанных, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДеревоЭлектронногоДокументаБЭД");
		ДеревоДанных = Модуль.ДеревоЭлектронногоДокумента(ПутьКМакетуДанныхЭД);
		
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть   - Строка         - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Ложь) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЗначениеРеквизита = "";
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриОпределенииЗначенияРеквизитаВДереве(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ЗначениеРеквизита = Модуль.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Возвращает данные элемента дерева, находящегося по указанному пути.
// 
// Параметры:
// 	ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - полный путь к реквизиту. Составляющие пути разделяются точками.
// Возвращаемое значение:
//  ТаблицаЗначений - в случае, если указанный реквизит имеет тип "Таблица"
//  Структура - если указанный реквизит имеет тип "Выбор" или "Группа"
//  Произвольный - если указанный реквизит является конечным реквизитом дерева.
//
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПолныйПуть) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЗначениеРеквизита = Неопределено;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриОпределенииДанныхЭлементаДереваЭлектронногоДокумента(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ЗначениеРеквизита = Модуль.ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, ПолныйПуть);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Предназначена для получения установки значения в дереве по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные.
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные. Таблица может предварительно дополняться данными
//                                    для обработки ошибок:
//                                    см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы.
//  
//  НазваниеТаблицы - Строка - название таблицы в дереве.
Процедура ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриЗагрузкеТаблицыВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		Модуль.ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Преназначена для установки значения реквизита в дереве
// (См. ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве)
//
// Параметры:
//  Дерево - ДеревоЗначений, СтрокаДереваЗначений - дерево, содержащее данные электронного документа
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриЗаполненииЗначенияРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		Модуль.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для добавления записей в таблицу дерева.
// (См. ДеревоЭлектронногоДокументаБЭД.ДобавитьЗаписьВТаблицуДерева)
//
// Параметры:
//  Дерево - ДеревоЗначений, СтрокаДереваЗначений - дерево, содержащее данные электронного документа
//  НоваяСтрока - Структура, СтрокаТаблицыЗначений - коллекция для сохранения в дереве
//  НазваниеТаблицы - Строка - название таблицы в дереве.
// 
Процедура ДобавитьЗаписьВТаблицуДерева(Дерево, НоваяСтрока, НазваниеТаблицы) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриДобавленииЗаписиВТаблицуДерева(Дерево, НоваяСтрока, НазваниеТаблицы, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДеревоЭлектронногоДокументаБЭД");
		Модуль.ДобавитьЗаписьВТаблицуДерева(Дерево, НоваяСтрока, НазваниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//Параметры:
//   СтрокиТаблицы - Массив из СтрокаТаблицыЗначений, ТаблицаЗначений - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.СтрокиТаблицы.
//   ПолеТаблицы   - Строка                  - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПолеТаблицы.
//   КлючДанных    - Строка, ЛюбаяСсылка     - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.КлючДанных.
//   ПутьКДанным   - Строка                  - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПутьКДанным.
//   ТекстОшибки   - Строка                  - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ТекстОшибки
// 
Процедура ВывестиОшибкуЗаполненияПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным = "", ТекстОшибки = "") Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриВыводеОшибкиЗаполненияПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным, ТекстОшибки, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		Модуль.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Записывает данные из структуры в группу дерева значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  СтруктураДанных - Структура - данные, которые должны быть загружены в группу
//  Путь - Строка - название группы в дереве.
//
Процедура ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриЗагрузкеСтруктурыВГруппуДерева(Дерево, СтруктураДанных, Путь, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		Модуль.ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификатор учетной записи ЭДО по организации.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация
// 
// Возвращаемое значение:
//  Строка
Функция ИдентификаторУчетнойЗаписиЭДО(Организация) Экспорт
	
	Идентификатор = "";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Отбор = СинхронизацияЭДО.НовыйОтборУчетныхЗаписей();
	Отбор.Организация = "&Организация";
	
	ТекстыЗапросов = Новый СписокЗначений();
	ИмяВременнойТаблицы = "УчетныеЗаписиЭДО";
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриПолученииУчетныхЗаписейЭДОСОтбором(Запрос, ТекстыЗапросов, ИмяВременнойТаблицы, Отбор, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетныеЗаписиЭДО");
		ЗапросУчетныхЗаписей = Модуль.ЗапросУчетныхЗаписей(ИмяВременнойТаблицы, Отбор);
		
		Для Каждого СлужебныйПараметр Из ЗапросУчетныхЗаписей.СлужебныеПараметры Цикл
			Запрос.УстановитьПараметр(СлужебныйПараметр.Ключ, СлужебныйПараметр.Значение);
		КонецЦикла;
		
		ТекстыЗапросов.Добавить(ЗапросУчетныхЗаписей.Текст, ИмяВременнойТаблицы);
		
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("ВЫБРАТЬ * ИЗ УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО", "ИтоговыеЗначенияУчетныхЗаписейЭДО");
	
	Результат = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапросов);
	ДанныеУчетныхЗаписей = Результат.ИтоговыеЗначенияУчетныхЗаписейЭДО.Выбрать();
	
	Если ДанныеУчетныхЗаписей.Следующий() Тогда
		Идентификатор = ДанныеУчетныхЗаписей.ИдентификаторЭДО;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Формирует сообщение титула продавца по данным дерева ЭД.
//
// Параметры:
//  ДанныеСообщения - Структура из КлючИЗначение:
//  	* Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
//  	* ТекстОшибки            - Строка - общий текст ошибки
//  	* МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
//  	* ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
//  	* ИмяФайла               - Строка - имя файла ЭД. - Титул продавца в формате 5_02.
//  ДеревоДанных - ДеревоЗначений - данные сформированного дерева ЭД
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* Функция - Строка - функция ЭД
//  	* ФорматУПД - Строка - пространство имен УПД
//  	* ОбъектУчета - ДокументСсылка - ссылка на документ
//  	* Организация - ОпределяемыйТип.Организация - организация
//  ИдентификаторОтправителя - Строка - идентификатор настройки ЭДО отправителя
//  ИдентификаторПолучателя - Строка - идентификатор настройки ЭДО получателя.
//
Процедура СформироватьДанныеСообщенияОтправителя(ДанныеСообщения, ДеревоДанных, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриФормированииДанныхСообщенияОтправителя(ДанныеСообщения, ДеревоДанных, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронныеДокументыЭДО");
		МодульФНС = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		
		СтруктураОтбора = Новый Структура("Формат, ВариантЗаполнения", СтруктураЭД.ФорматУПД, СтруктураЭД.Функция);
		СтрокиФорматов = МодульФНС.РасшифровкаВариантовЗаполненияФорматовЭДО().НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиФорматов.Количество() = 0 Тогда
			
			// 5.02 формат уже не действует, но возможно еще ни одну настройку обмена не поменяли на 5.03
			ФорматУПД              = ПространствоИмен_УПД_5_02_ИнформацияПродавца();
			СтруктураОтбора.Формат = ФорматУПД;
			
			СтрокиФорматов = МодульФНС.РасшифровкаВариантовЗаполненияФорматовЭДО().НайтиСтроки(СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокиФорматов.Количество() Тогда
			ТипДокумента = СтрокиФорматов[0].ТипДокумента;
		Иначе
			ТипДокумента = Неопределено;
		КонецЕсли;
		
		НастройкиОтправки = Новый Структура();
		НастройкиОтправки.Вставить("СпособОбмена",             Перечисления.СпособыОбменаЭД.ПустаяСсылка());
		НастройкиОтправки.Вставить("ТипДокумента",             ТипДокумента);
		НастройкиОтправки.Вставить("ВидДокумента",             Модуль.ВидДокументаПоТипу(ТипДокумента));
		НастройкиОтправки.Вставить("ИдентификаторОтправителя", ИдентификаторОтправителя);
		НастройкиОтправки.Вставить("ИдентификаторПолучателя",  ИдентификаторПолучателя);
		НастройкиОтправки.Вставить("Формат",                   СтруктураЭД.ФорматУПД);
		НастройкиОтправки.Вставить("Отправитель",              СтруктураЭД.Организация);
		НастройкиОтправки.Вставить("Получатель",               СтруктураЭД.Организация);
		НастройкиОтправки.Вставить("Договор",                  ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДоговорКонтрагентаИС));
		
		ОписаниеСообщения = Модуль.ОписаниеСообщенияОтправителя(
			СтруктураЭД.ОбъектУчета, ДеревоДанных, НастройкиОтправки);
		
		Если ОписаниеСообщения.Данные.ЕстьОшибки Тогда
			
			ШаблонСообщения = НСтр("ru = 'При формировании титула продавца по документу %1 возникли ошибки заполнения.';
									|en = 'При формировании титула продавца по документу %1 возникли ошибки заполнения.'");
			
			ДанныеСообщения.Отказ       = Истина;
			ДанныеСообщения.ТекстОшибки = СтрШаблон(ШаблонСообщения, СтруктураЭД.ОбъектУчета);
			
			Для Каждого ОписаниеОшибки Из ОписаниеСообщения.Данные.Ошибки.ЗаполнениеДанных Цикл
				ДанныеСообщения.МассивОшибокЗаполнения.Добавить(ОписаниеОшибки.ТекстОшибки);
			КонецЦикла;
			
		Иначе
			
			ДанныеСообщения.ДвоичныеДанныеФайла = ОписаниеСообщения.Данные.Документ.ДвоичныеДанные;
			ДанныеСообщения.ИмяФайла            = ОписаниеСообщения.Данные.Документ.ИмяФайла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дерево ответного титула покупателя в ответ на титул продавца.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - данные формируемого ЭД
//  ОбъектУчета - ДокументСсылка - ссылка на документ
//  ИмяФайла - Строка - имя файла титула продавца
//  ДвоичныеДанныеФайла - ДвоичныеДанные - данные файла титула продавца
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
// 
// Возвращаемое значение:
//  Структура из КлючИЗначение:
//		* ДеревоДанных - ДеревоЗначений - дерево ЭД
//		* Формат - Строка - формат ответного титула.
Функция СформироватьДеревоОтветногоТитулаПокупателя(ОбъектУчета, ИмяФайла, ДвоичныеДанныеФайла) Экспорт
	
	СтруктураВозврата = Новый Структура("ДеревоДанных, Формат", Неопределено, "");
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриФормированииДереваОтветногоТитулаПокупателя(СтруктураВозврата, ОбъектУчета, ИмяФайла, ДвоичныеДанныеФайла, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		МодульИнтеграция = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЭДО");
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = ИмяФайла;
		ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанныеФайла;
		СодержаниеДокумента = Модуль.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		
		ПараметрыФормирования = МодульИнтеграция.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ПараметрыФормирования.Формат = Модуль.ФорматОтветногоТитула(СодержаниеДокумента.Формат);
		ПараметрыФормирования.ТипДокумента = СодержаниеДокумента.ТипДокумента;
		
		НаборОбъектовУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчета);
		ДеревоДанных = МодульИнтеграция.ОписаниеДанныхОбъектаУчета(НаборОбъектовУчета, ПараметрыФормирования).Данные;
		
		СтруктураВозврата.ДеревоДанных = ДеревоДанных;
		СтруктураВозврата.Формат       = ПараметрыФормирования.Формат;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Процедура формирует титул покупателя в ответ на титул продавца.
//
// Параметры:
//  ДанныеСообщения - Структура из КлючИЗначение:
//  	* Отказ                  - Булево - Истина, если в процессе формирования выявились ошибки
//  	* ТекстОшибки            - Строка - общий текст ошибки
//  	* МассивОшибокЗаполнения - Массив из Строка - массив ошибок формирования
//  	* ДвоичныеДанныеФайла    - ДвоичныеДанные, Неопределено - данные сформированного титула в формате XML
//  	* ИмяФайла               - Строка - имя файла ЭД. - Титул покупателя в формате 5_02.
//  ДанныеОтветногоТитула - Структура из КлючИЗначение:
//  	* ДеревоДанных - ДеревоЗначений - данные сформированного дерева ЭД
//  	* Формат - Строка
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* ОбъектУчета - ДокументСсылка - ссылка на документ
//  	* ДвоичныеДанныеФайла - ДвоичныеДанные - двоичные данные титула продавца
//  	* ИмяФайлаБезРасширения - Строка - имя файла титула продавца
//  ИдентификаторОтправителя - Строка - идентификатор настройки ЭДО отправителя
//  ИдентификаторПолучателя - Строка - идентификатор настройки ЭДО получателя
Процедура СформироватьДанныеСообщенияПолучателя(ДанныеСообщения, ДанныеОтветногоТитула, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя) Экспорт
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриФормированииДанныхСообщенияПолучателя(ДанныеСообщения, ДанныеОтветногоТитула, СтруктураЭД, ИдентификаторОтправителя, ИдентификаторПолучателя, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		
		ДанныеДляФормирования = Модуль.НовыеДанныеДляФормированияОтветногоТитула();
		ДанныеДляФормирования.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор);
		ДанныеДляФормирования.ДанныеДокумента = ДанныеОтветногоТитула.ДеревоДанных;
		
		ДанныеДляФормирования.Основание.ДвоичныеДанные = СтруктураЭД.ДвоичныеДанныеФайла;
		ДанныеДляФормирования.Основание.ИмяБезРасширения = СтруктураЭД.ИмяФайлаБезРасширения;
		
		ДанныеДляФормирования.Участники.ИдентификаторОтправителя = ИдентификаторОтправителя;
		ДанныеДляФормирования.Участники.ИдентификаторПолучателя =  ИдентификаторПолучателя;
		
		ОписаниеСообщения = Модуль.СформироватьДанныеОтветногоТитула(ДанныеОтветногоТитула.Формат, ДанныеДляФормирования);
		
		Если ОписаниеСообщения.ЕстьОшибки Тогда
			
			ШаблонСообщения = НСтр("ru = 'При формировании титула покупателя по документу %1 возникли ошибки заполнения.';
									|en = 'При формировании титула покупателя по документу %1 возникли ошибки заполнения.'");
			
			ДанныеСообщения.Отказ       = Истина;
			ДанныеСообщения.ТекстОшибки = СтрШаблон(ШаблонСообщения, СтруктураЭД.ОбъектУчета);
			
			Для Каждого ОписаниеОшибки Из ОписаниеСообщения.Ошибки.ЗаполнениеДанных Цикл
				ДанныеСообщения.МассивОшибокЗаполнения.Добавить(ОписаниеОшибки.ТекстОшибки);
			КонецЦикла;
			
		Иначе
			
			ДанныеСообщения.ДвоичныеДанныеФайла = ОписаниеСообщения.Документ.ДвоичныеДанные;
			ДанныеСообщения.ИмяФайла            = ОписаниеСообщения.Документ.ИмяФайла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение подписанта в титулах продавца и покупателя и подписи продавца в титуле покупателя.
// 
// Параметры:
//  ОписаниеФайла - Структура из КлючИЗначение:
//  	* ДвоичныеДанные - ДвоичныеДанные - данные ЭД
//		* ИмяФайла - Строка - имя файла ЭД
//  Организация - ОпределяемыйТип.Организация - организация-подписант
//  СертификатПодписи - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат подписанта
//  ПодписьПродавца - Неопределено, ДвоичныеДанные - Подпись продавца
//  ВыбраннаяМЧД - Неопределено, СправочникСсылка.МашиночитаемыеДоверенности - МЧД подписанта
// 
// Возвращаемое значение:
//  Структура - Заполнить подписанта и электронную подпись:
// * ДвоичныеДанные - Неопределено, ДвоичныеДанные - двоичные данные ЭД
// * ИмяФайла - Строка - имя файла ЭД.
Функция ЗаполнитьПодписантаИЭлектроннуюПодпись(ОписаниеФайла, Организация, СертификатПодписи, ПодписьПродавца = Неопределено, ВыбраннаяМЧД = Неопределено) Экспорт
	
	ДвоичныеДанные = Неопределено;
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриЗаполненииПодписантаИЭлектроннойПодписи(Организация, ДвоичныеДанные, ОписаниеФайла, СертификатПодписи, ПодписьПродавца, ВыбраннаяМЧД, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		
		ЗаполнитьДанныеМашиночитаемойДоверенности(Организация, СертификатПодписи, ВыбраннаяМЧД);
		
		СодержаниеДокумента       = Модуль.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
		ОписаниеДополненногоФайла = Модуль.ЗаполнитьДанныеПодписантаДокумента(ОписаниеФайла, Организация, СертификатПодписи, СодержаниеДокумента, ВыбраннаяМЧД);
		
		ОписаниеОшибки = "";
		ДанныеФайлаЭД = Модуль.ДанныеФайлаЭД(ОписаниеДополненногоФайла, ОписаниеОшибки);
	
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Если ПодписьПродавца <> Неопределено Тогда
			
			ДанныеФайлаЭД.Документ.ИдИнфПрод.ЭП.Очистить();
			
			ПодписьСтрокой = СтрЗаменить(Base64Строка(ПодписьПродавца), Символы.ВК + Символы.ПС, "");
			ДанныеФайлаЭД.Документ.ИдИнфПрод.ЭП.Добавить(ПодписьСтрокой);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Истина;
		ЭлектронноеВзаимодействиеИСМППереопределяемый.СформироватьДвоичныеДанныеИзФайлаЭД(ДвоичныеДанные, ДанныеФайлаЭД, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			
			ЛокальноеИмя = "Файл";
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			
			// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
			МодульРаботаСФайлами   = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиБЭД");
			МодульОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБЭД");
			
			Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
				ДвоичныеДанные = МодульРаботаСФайлами.XDTOВДвоичныеДанные(ДанныеФайлаЭД, Ложь, "windows-1251", ЛокальноеИмя);
				ДвоичныеДанные = МодульОбщегоНазначения.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИменСхемы);
			Иначе
				ДвоичныеДанные = МодульРаботаСФайлами.XDTOВДвоичныеДанные(ДанныеФайлаЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИтоговыйФайл = Новый Структура;
	ИтоговыйФайл.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	ИтоговыйФайл.Вставить("ИмяФайла",       ОписаниеФайла.ИмяФайла);
	
	Возврат ИтоговыйФайл;
	
КонецФункции

// Функция выполняет заполнение описаний данных по объекту учета.
// 
// Параметры:
//  ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//  СтруктураЭД - Структура из КлючИЗначение:
//  	* Функция - Строка - функция ЭД
//  	* ФорматУПД - Строка - пространство имен формата ЭД
//  	* ОбъектУчета - ДокументСсылка.ПеремещениеМеждуМОДИСМП
//  	* Организация - ОпределяемыйТип.Организация
//  	* ИдентификаторОтправителя - Строка
//  	* ИдентификаторПолучателя - Строка
// 
// Возвращаемое значение:
//  ДеревоЗначений - сформированный ЭД
//
Функция ДеревоПоОписаниюДанныхОбъектаУчета(ОбъектУчета, СтруктураЭД) Экспорт
	
	ДеревоДанных         = Новый ДеревоЗначений;
	СтандартнаяОбработка = Истина;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриПолученииДереваПоОписаниюДанныхОбъектаУчета(ОбъектУчета, СтруктураЭД, ДеревоДанных, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
	
		Модуль           = ОбщегоНазначения.ОбщийМодуль("ЭлектронныеДокументыЭДО");
		МодульФНС        = ОбщегоНазначения.ОбщийМодуль("ФорматыЭДО");
		МодульИнтеграция = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЭДО");
		
		СтруктураОтбора = Новый Структура("Формат, ВариантЗаполнения", СтруктураЭД.ФорматУПД, СтруктураЭД.Функция);
		СтрокиФорматов = МодульФНС.РасшифровкаВариантовЗаполненияФорматовЭДО().НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиФорматов.Количество() = 0 Тогда
			
			// 5.02 формат уже не действует, но возможно еще ни одну настройку обмена не поменяли на 5.03
			ФорматУПД              = ПространствоИмен_УПД_5_02_ИнформацияПродавца();
			СтруктураОтбора.Формат = ФорматУПД;
			
			СтрокиФорматов = МодульФНС.РасшифровкаВариантовЗаполненияФорматовЭДО().НайтиСтроки(СтруктураОтбора);
			
		КонецЕсли;
		
		Если СтрокиФорматов.Количество() Тогда
			ТипДокумента = СтрокиФорматов[0].ТипДокумента;
		Иначе
			ТипДокумента = Неопределено;
		КонецЕсли;
		
		НастройкиОтправки = Новый Структура();
		НастройкиОтправки.Вставить("СпособОбмена",             Перечисления.СпособыОбменаЭД.ПустаяСсылка());
		НастройкиОтправки.Вставить("ТипДокумента",             ТипДокумента);
		НастройкиОтправки.Вставить("ВидДокумента",             Модуль.ВидДокументаПоТипу(ТипДокумента));
		НастройкиОтправки.Вставить("ИдентификаторОтправителя", СтруктураЭД.ИдентификаторОтправителя);
		НастройкиОтправки.Вставить("ИдентификаторПолучателя",  СтруктураЭД.ИдентификаторПолучателя);
		НастройкиОтправки.Вставить("Формат",                   СтруктураЭД.ФорматУПД);
		НастройкиОтправки.Вставить("Отправитель",              СтруктураЭД.Организация);
		НастройкиОтправки.Вставить("Получатель",               СтруктураЭД.Организация);
		НастройкиОтправки.Вставить("Договор",                  ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДоговорКонтрагентаИС));
		
		ПараметрыФормирования = МодульИнтеграция.НовыеПараметрыФормированияДанныхОбъектаУчета();
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, НастройкиОтправки);
		
		ОписаниеДанных = МодульИнтеграция.ОписаниеДанныхОбъектаУчета(ОбъектУчета, ПараметрыФормирования);
		ДеревоДанных   = ОписаниеДанных.Данные;
		
	КонецЕсли;
	
	Возврат ДеревоДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. ТаблицаШтрихкодыУпаковокНоменклатура).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
// 	ПараметрыЗаполнения - Структура - Структура (См. ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях).
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, СведенияОТоваре,
		ПараметрыЗаполнения)
	
	Маркировка = Неопределено;
	
	Если Не СведенияОТоваре.Свойство("Маркировка", Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Маркировка.Свойство("КонтрольныеИдентификационныеЗнаки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.КонтрольныеИдентификационныеЗнаки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("ИндивидуальныеУпаковки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.ИндивидуальныеУпаковки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("ТранспортныеУпаковки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.ТранспортныеУпаковки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Функция ТаблицаМаркируемойПродукцииДокумента(Документ, ВидыМаркируемойПродукции) Экспорт
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПродукции.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Серия",            Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Количество",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркируемойПродукцииДокумента(Документ,
		ТаблицаПродукции, ВидыМаркируемойПродукции);
	
	Возврат ТаблицаПродукции;
	
КонецФункции

Процедура ОбработкаСтрокиЧастичногоВыбытия(СтрокаТаблицы, КэшВходящихСтрок)
	
	СтрокаКэша = КэшВходящихСтрок.Получить(СтрокаТаблицы.Штрихкод);
	
	Если СтрокаКэша <> Неопределено
		И ЗначениеЗаполнено(СтрокаКэша.ЧастичноеВыбытиеКоличество)
		И ЗначениеЗаполнено(СтрокаКэша.ЧастичноеВыбытиеВариантУчета) Тогда
		
		СтрокаТаблицы.Количество                   = СтрокаКэша.ЧастичноеВыбытиеКоличество;
		СтрокаТаблицы.ЧастичноеВыбытиеВариантУчета = СтрокаКэша.ЧастичноеВыбытиеВариантУчета;
		
		Если СтрокаКэша.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			СтрокаТаблицы.Номенклатура   = СтрокаКэша.ЧастичноеВыбытиеНоменклатура;
			СтрокаТаблицы.Характеристика = СтрокаКэша.ЧастичноеВыбытиеХарактеристика;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, Знач ВидыПродукцииИС)
	
	Если НЕ ШтрихкодыУпаковок.Количество() Тогда
		Возврат;
	ИначеЕсли ВидыПродукцииИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам

//Для случаев когда в электронный документ попадает не детализированная до серий информация
Процедура ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки)
	
	Если Не СтрокаУпаковки.Мультитоварная Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("Штрихкод", СтрокаУпаковки.Штрихкод);
	СтрокиАналоги = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаАналог Из СтрокиАналоги Цикл
		СтрокаАналог.Обработан = Истина;
	КонецЦикла;
	
	ПараметрыПоиска.Удалить("Штрихкод");
КонецПроцедуры

// Удаляет тип значения NULL для всех колонок в исходной таблице
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - таблица для обработки
// 
Процедура НормализоватьТаблицуЗначений(Таблица) Экспорт
	
	ИсходныеКолонки = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ИсходныеКолонки.Добавить(Колонка);
	КонецЦикла; 
	
	Для Каждого Колонка Из ИсходныеКолонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		ТипКолонки = Колонка.ТипЗначения;
		
		Таблица.Колонки[ИмяКолонки].Имя = "Удалить" + ИмяКолонки;
		
		Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипКолонки, , "NULL"));
		Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("Удалить"+ИмяКолонки), ИмяКолонки);
		
		Таблица.Колонки.Удалить("Удалить" + ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьКодОСУИзGTIN(СтрокаТовары, СтрокаУпаковки, Поле = "Количество")
	
	КоличествоПоТегу37 = СформироватьКоличествоПоОСУ(СтрокаТовары, СтрокаУпаковки, Поле);
	
	Возврат СформироватьКодОСУПоКоличествуИGTIN(СтрокаУпаковки.ЗначениеШтрихкода, КоличествоПоТегу37);
	
КонецФункции

Функция СформироватьКоличествоПоОСУ(СтрокаТовары, СтрокаУпаковки, Поле = "Количество")
	
	КоличествоПоОСУ = 0;
	
	Если СтрокаУпаковки.КоличествоВПотребительскойУпаковке = 0 Тогда
		КоличествоПоОСУ = 0;
	Иначе
		КоличествоПоОСУ = Окр(СтрокаТовары[Поле] / СтрокаУпаковки.КоличествоВПотребительскойУпаковке);
	КонецЕсли;
	
	Возврат КоличествоПоОСУ;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Добавляет в таблицу коды ОСУ для строк, по которым коды маркировки не указывались. Считаем что таблица товаров
//   уже соответствует таблице штрихкодов упаковок (с учетом невнесенных ОСУ).
//
// Параметры:
//  ТаблицаТоваров	 - ТаблицаЗначений - исходная таблица товаров: 
// 	 * Ссылка         - Произвольный - объект-владелец штрихкода
// 	 * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура
// 	 * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
// 	 * Количество     - Число - количество
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
//  ЧастичноеСодержимоеРезультат - см. ЧастичноеСодержимое
Процедура ДополнитьРезультатКодамиОСУ(ТаблицаТоваров, ПараметрыСканирования, ЧастичноеСодержимоеРезультат) Экспорт
	
	ЕстьОшибки = Ложь;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Товары.Ссылка         КАК Ссылка,
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Количество     КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Товары.Ссылка         КАК Ссылка,
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	СУММА(Товары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Товары КАК Товары
		|СГРУППИРОВАТЬ ПО
		|	Товары.Ссылка,
		|	Товары.Номенклатура,
		|	Товары.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|");
	
	СписокЗапросов.Добавить(
		ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции());
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка           КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.Номенклатура     КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика   КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Количество       КАК Количество,
		|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукцииИС,
		|	&ТребуетВзвешивания                       КАК ТребуетВзвешивания,
		|	ЛОЖЬ                                      КАК АвтоматическийОСУИС,
		|	""00000000000000""                        КАК GTIN
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
		|			ПО СвойстваМаркируемойПродукции.ВидПродукции = НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции В (&ВидыПродукцииПоддерживаютОСУ)
		|	И НЕ СвойстваМаркируемойПродукции.ВидПродукции В (&ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении)
		|	И НастройкиУчетаМаркируемойПродукцииИСМП.ДатаОптКонтрольОСУ <> ДАТАВРЕМЯ(1, 1, 1)
		|	И НастройкиУчетаМаркируемойПродукцииИСМП.ДатаОптКонтрольОСУ < &КонтролируемаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка           КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.Номенклатура     КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика   КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Количество       КАК Количество,
		|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукцииИС,
		|	&ТребуетВзвешивания                       КАК ТребуетВзвешивания,
		|	ЛОЖЬ                                      КАК АвтоматическийОСУИС,
		|	""00000000000000""                        КАК GTIN
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
		|			ПО СвойстваМаркируемойПродукции.ВидПродукции = НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции В (&ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении)
		|";
	
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "ДанныеШтрихкодовУпаковок.Номенклатура");
	СписокЗапросов.Добавить(ТекстЗапроса, "Результат");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ВидыПродукцииПоддерживаютОСУ = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииОбъемноСортовогоУчета();
	
	Если Не ПараметрыСканирования = Неопределено Тогда
		ДокументВнутреннегоПеремещения = ОбщегоНазначенияИСВызовСервера.ЭтоДокументВнутреннегоПеремещения(ПараметрыСканирования.СсылкаНаОбъект);
	Иначе
		ДокументВнутреннегоПеремещения = Ложь;
	КонецЕсли;
	
	Если ДокументВнутреннегоПеремещения Тогда
		ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииОбъемноСортовогоУчетаДляВнутреннегоПеремещения();
	Иначе
		ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары",                                               ТаблицаТоваров.Скопировать(, "Ссылка,Номенклатура,Характеристика,Количество"));
	Запрос.УстановитьПараметр("ВидыПродукцииПоддерживаютОСУ",                         ВидыПродукцииПоддерживаютОСУ);
	Запрос.УстановитьПараметр("ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении", ВидыПродукцииПоддерживаютОСУПриВнутреннемПеремещении);
	Запрос.УстановитьПараметр("КонтролируемаяДата",                                   ТекущаяДата);
	
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	//@skip-check bsl-legacy-check-string-literal
	МаркируемаяПродукцияДляОСУ = РезультатыЗапроса["Результат"].Выгрузить();
	ПроверкаИПодборПродукцииИСМП.ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(МаркируемаяПродукцияДляОСУ, Истина, ПараметрыСканирования);
	
	Поиск = Новый Структура("Номенклатура,Характеристика");
	НоменклатураДляОСУ = Новый Массив;
	НоменклатураДляВесовыхКодов = Новый Соответствие;
	ДобавленныеСтроки = Новый Массив;
	ПроверятьНаДату = Неопределено;
	
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования, Истина) Тогда
		ИспользоватьОСУ = ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет;
	Иначе
		ИспользоватьОСУ = Ложь;
	КонецЕсли;
	
	// Замена явно указанного кода ОСУ на автоматический, если он подходит 1 для строки
	Для Каждого СтрокаТЧ Из МаркируемаяПродукцияДляОСУ Цикл
		Если Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(СтрокаТЧ.ВидПродукцииИС) Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверятьНаДату = Неопределено Тогда
			ПроверятьНаДату = ТекущаяДата;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		СтрокиРезультат = ЧастичноеСодержимоеРезультат.НайтиСтроки(Поиск);
		Если СтрокиРезультат.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗамены = СтрокиРезультат[0];
		Если СтрокаЗамены.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			Продолжить;
		КонецЕсли;
		Если Не ИспользоватьОСУ Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗамены.Штрихкод = Неопределено;
		КоличествоКодов = Число(Сред(СтрокаЗамены.ЗначениеШтрихкода, 19));
		СтрокаЗамены.КоличествоВПотребительскойУпаковке = СтрокаТЧ.Количество / КоличествоКодов;
		СтрокаЗамены.ЗначениеШтрихкода = Сред(СтрокаЗамены.ЗначениеШтрихкода, 3, 14);//GTIN
	КонецЦикла;
	
	// Добавление автоматического кода ОСУ, если его нет
	Для Каждого СтрокаТЧ Из МаркируемаяПродукцияДляОСУ Цикл
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		Если ЧастичноеСодержимоеРезультат.НайтиСтроки(Поиск).Количество() Тогда
			Продолжить;
		КонецЕсли;
		Если Не ИспользоватьОСУ Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ЧастичноеСодержимоеРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет;
		НоваяСтрока.Обработан = Ложь;
		НоваяСтрока.ВидПродукции = СтрокаТЧ.ВидПродукцииИС;
		НоваяСтрока.Мультитоварная = Ложь;
		НоваяСтрока.ЗначениеШтрихкода = СтрокаТЧ.GTIN;
		Если СтрокаТЧ.ТребуетВзвешивания
			И СтрокаТЧ.Количество <> 0 Тогда
			ДанныеДляЗапросаПоВидуПродукции = НоменклатураДляВесовыхКодов.Получить(СтрокаТЧ.ВидПродукцииИС);
			Если ДанныеДляЗапросаПоВидуПродукции = Неопределено Тогда
				ДанныеДляЗапросаПоВидуПродукции = Новый Соответствие;
				НоменклатураДляВесовыхКодов.Вставить(СтрокаТЧ.ВидПродукцииИС, ДанныеДляЗапросаПоВидуПродукции);
			КонецЕсли;
			ДанныеДляЗапросаПоВидуПродукции.Вставить(СтрокаТЧ.GTIN,
				Новый Структура("Номенклатура,Количество,ТребуетВзвешивания",
					СтрокаТЧ.Номенклатура, СтрокаТЧ.Количество, Истина));
		Иначе 
			НоменклатураДляОСУ.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		Если Не ЗначениеЗаполнено(СтрокаТЧ.GTIN) Тогда
			ЕстьОшибки = Истина;
			НоваяСтрока.ТекстОшибкиИС = СтрШаблон(
				НСтр("ru = 'Требуется код маркировки или GTIN потребительской упаковки для автоматического формирования кода ОСУ: %1';
					|en = 'Требуется код маркировки или GTIN потребительской упаковки для автоматического формирования кода ОСУ: %1'"),
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
		ИначеЕсли Не СтрокаТЧ.АвтоматическийОСУИС Тогда
			ЕстьОшибки = Истина;
			НоваяСтрока.ТекстОшибкиИС = СтрШаблон(
				НСтр("ru = 'Требуется код маркировки или единственный GTIN потребительской упаковки для автоматического формирования кода ОСУ: %1';
					|en = 'Требуется код маркировки или единственный GTIN потребительской упаковки для автоматического формирования кода ОСУ: %1'"),
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
		КонецЕсли;
	КонецЦикла;
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщегоНазначенияИС.ОписаниеНоменклатуры(НоменклатураДляОСУ);
	КоличествоКодовПоGTINВесовыхТоваров = Новый Соответствие;
	Для Каждого КлючИЗначение Из НоменклатураДляВесовыхКодов Цикл
		КоличествоКодовПоGTINВесовыхТоваров.Вставить(КлючИЗначение.Ключ,
			ПроверкаИПодборПродукцииИСМПВызовСервера.КоличествоПотребительскихУпаковокПоGTIN(
				КлючИЗначение.Значение, КлючИЗначение.Ключ, ПараметрыСканирования));
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		Если СтрокаТЧ.ТребуетВзвешивания
			И СтрокаТЧ.Количество <> 0 Тогда
			ДанныеПоВидуПродукции = КоличествоКодовПоGTINВесовыхТоваров.Получить(СтрокаТЧ.ВидПродукции);
			Если ДанныеПоВидуПродукции.ТребуетсяОбновлениеКлючаСессии Тогда
				ЕстьОшибки = Истина;
				СтрокаТЧ.ТекстОшибкиИС = СтрШаблон(
					НСтр("ru = 'Требуется код маркировки или доступный ключ сессии сервиса ИС МП для автоматического формирования кода ОСУ весового товара: %1';
						|en = 'Требуется код маркировки или доступный ключ сессии сервиса ИС МП для автоматического формирования кода ОСУ весового товара: %1'"),
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
				Продолжить;
			КонецЕсли;
			Если ДанныеПоВидуПродукции.КоличествоПотребительскихУпаковокПоGTIN = Неопределено Тогда
				ЕстьОшибки = Истина;
				СтрокаТЧ.ТекстОшибкиИС = СтрШаблон(
					НСтр("ru = 'Требуется код маркировки. Сервис ИС МП не предоставил количество по GTIN %1 для автоматического формирования кода ОСУ весового товара: %2';
						|en = 'Требуется код маркировки. Сервис ИС МП не предоставил количество по GTIN %1 для автоматического формирования кода ОСУ весового товара: %2'"),
					СтрокаТЧ.ЗначениеШтрихкода,
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
				Продолжить;
			Иначе
				ОписаниеШтрихкода = ДанныеПоВидуПродукции.КоличествоПотребительскихУпаковокПоGTIN.Получить(СтрокаТЧ.ЗначениеШтрихкода);
				Если ОписаниеШтрихкода = Неопределено Тогда
					ЕстьОшибки  = Истина;
					СтрокаТЧ.ТекстОшибкиИС = СтрШаблон(
						НСтр("ru = 'Требуется код маркировки. Сервис ИС МП не предоставил количество по GTIN %1 для автоматического формирования кода ОСУ весового товара: %2';
							|en = 'Требуется код маркировки. Сервис ИС МП не предоставил количество по GTIN %1 для автоматического формирования кода ОСУ весового товара: %2'"),
						СтрокаТЧ.ЗначениеШтрихкода,
						ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
				Иначе
					СтрокаТЧ.КоличествоВПотребительскойУпаковке = ОписаниеШтрихкода.КоличествоПодобрано / ОписаниеШтрихкода.КоличествоВложенныхЕдиниц;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаТЧ.КоличествоВПотребительскойУпаковке = Описание.Получить(СтрокаТЧ.Номенклатура).КоличествоВПотребительскойУпаковке;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКодФИАСПоДаннымАдреса(ДеревоДанных, Участник, ИдентификаторАдресногоОбъекта)
	
	Путь = "СведенияОСчетеФактуре.ИнформационноеПолеФХЖ.ТекстоваяИнформация";
	
	ТекстоваяИнформация = Новый ТаблицаЗначений;
	ТекстоваяИнформация.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	ТекстоваяИнформация.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2000)));
	
	ПутьФИАСКод = "";
	
	Участники = Новый Соответствие;
	Участники.Вставить("СведенияОСчетеФактуре.СведенияОПродавцах", "Продавец_ФиасИД");
	Участники.Вставить("СведенияОСчетеФактуре.СведенияОПокупателях", "Покупатель_ФиасИД");
	Участники.Вставить("СведенияОСчетеФактуре.СведенияОГрузоотправителях", "Продавец_ФиасИД");
	Участники.Вставить("СведенияОСчетеФактуре.СведенияОГрузополучателях", "Покупатель_ФиасИД");
	
	Для Каждого ДанныеУчастника Из Участники Цикл
		
		Если СтрНачинаетсяС(Участник, ДанныеУчастника.Ключ) Тогда
			ПутьФИАСКод = ДанныеУчастника.Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторАдресногоОбъекта) И ЗначениеЗаполнено(ПутьФИАСКод) Тогда
		
		ЗаписаннаяТаблицаДополнительнойИнформации = ДанныеЭлементаДереваЭлектронногоДокумента(ДеревоДанных, Путь);
		
		СтруктураОтбора = Новый Структура("Идентификатор, Значение", ПутьФИАСКод, Строка(ИдентификаторАдресногоОбъекта));
		СтрокиТекстовойИнформации = ЗаписаннаяТаблицаДополнительнойИнформации.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТекстовойИнформации.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТекстоваяИнформация.Добавить();
		НоваяСтрока.Идентификатор = ПутьФИАСКод;
		НоваяСтрока.Значение = Строка(ИдентификаторАдресногоОбъекта);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Значение) Тогда
			ДобавитьЗаписьВТаблицуДерева(ДеревоДанных, НоваяСтрока, Путь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьАдресУчастникаУПД_5_02(ДеревоДанных, АдресЗначение, АдресПредставление, Участник, ОбъектКонтактнойИнформации = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("АдресЗаполнен, ИдентификаторГАР_ФИАС", Ложь, "");
	
	ПутьККорнюАдреса = ".Адрес.ТипАдреса";
	ПутьКСтруктурированномуАдресу = ПутьККорнюАдреса + ".АдресРФ";
	ПутьКАдресуГАР = ПутьККорнюАдреса + ".АдресГАР";
	
	// Корневой элемент группы "АвтоматическиЗаполняемый" может содержать в себе
	// параметры обработки ошибки, которые могут быть добавлены в переопределяемой части.
	
	ПутьКАдресу = Участник + ПутьККорнюАдреса;
	
	ОтборДляПолученияАдресаПоПриказуМинфина = Новый Структура("КодыАдреса, БезПредставлений", Истина, Истина);
	АдресПоПриказуМинфина = РаботаСАдресами.СведенияОбАдресеПриказМинфинаРФ171н(АдресЗначение,
		ОтборДляПолученияАдресаПоПриказуМинфина);
	
	ИдентификаторГАР_ФИАС = "";
	
	Если АдресПоПриказуМинфина.КодСтраны = "643" Тогда // Россия
		
		АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(
			АдресПоПриказуМинфина);
		
		Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
			
			// Заполняем структурированный адрес.
			
			ПутьКАдресу = Участник + ПутьКСтруктурированномуАдресу;
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Индекс", АдресПоПриказуМинфина.Индекс);
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".КодРегиона", АдресПоПриказуМинфина.КодРегиона);
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".НаименованиеРегиона", АдресПоПриказуМинфина.КодРегиона);
			
			ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(АдресПоПриказуМинфина.Район,
				АдресПоПриказуМинфина.РайонСокращение);
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Район", ПредставлениеЭлемента);
			
			ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(АдресПоПриказуМинфина.Город,
				АдресПоПриказуМинфина.ГородСокращение);
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Город", ПредставлениеЭлемента);
			
			ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
				АдресПоПриказуМинфина.НаселенныйПункт, АдресПоПриказуМинфина.НаселенныйПунктСокращение);
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".НаселенныйПункт", ПредставлениеЭлемента);
			
			ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
				АдресПоПриказуМинфина.Улица, АдресПоПриказуМинфина.УлицаСокращение);
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Улица", ПредставлениеЭлемента);
			
			ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
				НРег(АдресПоПриказуМинфина.Здание.ТипЗдания), "№", АдресПоПриказуМинфина.Здание.Номер);
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Дом", ПредставлениеЭлемента);
			
			Если АдресПоПриказуМинфина.Корпуса.Количество() Тогда
				ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
					НРег(АдресПоПриказуМинфина.Корпуса[0].ТипКорпуса), АдресПоПриказуМинфина.Корпуса[0].Номер);
			Иначе
				ПредставлениеЭлемента = "";
			КонецЕсли;
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Корпус", ПредставлениеЭлемента);
			
			Если АдресПоПриказуМинфина.Помещения.Количество() Тогда
				ПредставлениеЭлемента = ПредставлениеАдресногоЭлемента(
					НРег(АдресПоПриказуМинфина.Помещения[0].ТипПомещения),
					АдресПоПриказуМинфина.Помещения[0].Номер);
			Иначе
				ПредставлениеЭлемента = "";
			КонецЕсли;
			
			ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных, ПутьКАдресу + ".Квартира", ПредставлениеЭлемента);
			
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторДома;
			ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
			Иначе
				ИдентификаторГАР_ФИАС = "";
			КонецЕсли;
			
			ВыполнитьУточнениеКодаФИАСПоМОДам(ИдентификаторГАР_ФИАС, АдресПредставление);
			
			ЗаполнитьКодФИАСПоДаннымАдреса(ДеревоДанных, Участник, ИдентификаторГАР_ФИАС);
			
			СтруктураВозврата.АдресЗаполнен         = ЗначениеЗаполнено(ИдентификаторГАР_ФИАС);
			СтруктураВозврата.ИдентификаторГАР_ФИАС = ИдентификаторГАР_ФИАС;
			
		ИначеЕсли АдресСоответствуетФорматуГАР(АдресПоПриказуМинфина) Тогда
			
			// Заполняем адрес в формате государственного адресного реестра.
			
			ПутьКАдресу = Участник + ПутьКАдресуГАР;
			
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторДома;
			ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
			Иначе
				ИдентификаторГАР_ФИАС = "";
			КонецЕсли;
			
			ВыполнитьУточнениеКодаФИАСПоМОДам(ИдентификаторГАР_ФИАС, АдресПредставление);
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ПутьКАдресу + ".УникальныйНомерАдреса",
				Строка(ИдентификаторГАР_ФИАС));
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ПутьКАдресу + ".ПочтовыйИндекс",
				АдресПоПриказуМинфина.Индекс);
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ПутьКАдресу + ".КодРегиона",
				АдресПоПриказуМинфина.КодРегиона);
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				ПутьКАдресу + ".НаименованиеРегиона",
				АдресПоПриказуМинфина.Регион);
			
			// Район, округ, территория.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.МуниципальныйРайон) Тогда
				Виды = Новый Структура();
				Виды.Вставить("МуниципальныйРайон", "1");
				Виды.Вставить("ГородскойОкруг", "2");
				Виды.Вставить("ВнутригородскаяТерритория", "3");
				Виды.Вставить("МуниципальныйОкруг", "4");
				Виды.Вставить("ФедеральнаяТерритория", "5");
				
				Если ВРег(АдресПоПриказуМинфина.МуниципальныйРайонТипПолный) = "МУНИЦИПАЛЬНЫЙ РАЙОН" Тогда
					Вид = Виды.МуниципальныйРайон;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.МуниципальныйРайонТипПолный) = "ГОРОДСКОЙ ОКРУГ" Тогда
					Вид = Виды.ГородскойОкруг;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.МуниципальныйРайонТипПолный) = "ВНУТРИГОРОДСКАЯ ТЕРРИТОРИЯ" Тогда
					Вид = Виды.ВнутригородскаяТерритория;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.МуниципальныйРайонТипПолный) = "МУНИЦИПАЛЬНЫЙ ОКРУГ" Тогда
					Вид = Виды.МуниципальныйОкруг;
				Иначе
					Вид = Виды.ФедеральнаяТерритория;
				КонецЕсли;
				
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".РайонОкругТерритория.Вид",
					Вид);
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".РайонОкругТерритория.Наименование",
					АдресПоПриказуМинфина.МуниципальныйРайон);
			КонецЕсли;
			
			// Город, село, поселение.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Поселение) Тогда
				
				Виды = Новый Структура();
				Виды.Вставить("ГородскоеПоселение", "1");
				Виды.Вставить("СельскоеПоселение", "2");
				Виды.Вставить("МежселеннаяТерритория", "3");
				Виды.Вставить("ВнутригородскойРайон", "4");
				
				Если ВРег(АдресПоПриказуМинфина.ПоселениеТипПолный) = "ГОРОДСКОЕ ПОСЕЛЕНИЕ" Тогда
					Вид = Виды.ГородскоеПоселение;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.ПоселениеТипПолный) = "СЕЛЬСКОЕ ПОСЕЛЕНИЕ" Тогда	
					Вид = Виды.СельскоеПоселение;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.ПоселениеТипПолный) = "МЕЖСЕЛЕННАЯ ТЕРРИТОРИЯ" Тогда	
					Вид = Виды.МежселеннаяТерритория;
				ИначеЕсли ВРег(АдресПоПриказуМинфина.ПоселениеТипПолный) = "ВНУТРИГОРОДСКОЙ РАЙОН" Тогда	
					Вид = Виды.ВнутригородскойРайон;
				КонецЕсли;
				
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ГородСелоПоселение.Вид",
					Вид);
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ГородСелоПоселение.Наименование",
					АдресПоПриказуМинфина.Поселение);
			КонецЕсли;
			
			// Населенный пункт.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.НаселенныйПункт) Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".НаселенныйПункт.Вид",
					НРег(АдресПоПриказуМинфина.НаселенныйПунктТипКраткий));
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".НаселенныйПункт.Наименование",
					АдресПоПриказуМинфина.НаселенныйПункт);
			КонецЕсли;
			
			// Элемент планировочной структуры.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Территория) Тогда	
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ЭлементПланировочнойСтруктуры.Тип",
					НРег(АдресПоПриказуМинфина.ТерриторияТипКраткий));
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ЭлементПланировочнойСтруктуры.Наименование",
					АдресПоПриказуМинфина.Территория);
			КонецЕсли;
			
			// Элемент улично-дорожной сети.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Улица) Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ЭлементУличноДорожнойСети.Тип",
					НРег(АдресПоПриказуМинфина.УлицаТипКраткий));
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ЭлементУличноДорожнойСети.Наименование",
					АдресПоПриказуМинфина.Улица);
			КонецЕсли;
			
			// Здание.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Здание.Номер) Тогда
				Здания = Новый ТаблицаЗначений;
				Здания.Колонки.Добавить("Тип");
				Здания.Колонки.Добавить("Номер");
				
				НоваяСтрока = Здания.Добавить();
				НоваяСтрока.Тип = НРег(АдресПоПриказуМинфина.Здание.ТипЗдания);
				НоваяСтрока.Номер = АдресПоПриказуМинфина.Здание.Номер;
				
				ДобавитьЗаписьВТаблицуДерева(ДеревоДанных,
					НоваяСтрока, ПутьКАдресу + ".Здание");
			КонецЕсли;
			
			// Корпуса.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Корпуса) Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ПомещениеЗдания.Тип",
					НРег(АдресПоПриказуМинфина.Корпуса[0].ТипКорпуса));
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ПомещениеЗдания.Номер",
					АдресПоПриказуМинфина.Корпуса[0].Номер);
			КонецЕсли;
			
			// Помещения.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.Помещения) Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ПомещениеКвартиры.Тип",
					НРег(АдресПоПриказуМинфина.Помещения[0].ТипПомещения));
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ПомещениеКвартиры.Номер",
					АдресПоПриказуМинфина.Помещения[0].Номер);
			КонецЕсли;
			
			// Земельный участок.
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.НомерЗемельногоУчастка) Тогда
				ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
					ПутьКАдресу + ".ЗемельныйУчасток",
					АдресПоПриказуМинфина.НомерЗемельногоУчастка);
			КонецЕсли;
			
			СтруктураВозврата.АдресЗаполнен         = ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта);
			СтруктураВозврата.ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ШтрихкодыУпаковокСодержатПивнуюПродукцию(ДанныеШтрихкодовУпаковок, НаДату)
	
	Если Не ТипЗнч(ДанныеШтрихкодовУпаковок) = Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеШтрихкодовУпаковок.Колонки.Найти("ВидПродукции") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидыПродукции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеШтрихкодовУпаковок, "ВидПродукции", Истина);
	
	Возврат ШтрихкодированиеОбщегоНазначенияИС.ПрисутствуетПрослеживаемаяПоМОДПивнаяПродукция(ВидыПродукции, НаДату);
	
КонецФункции

Функция ПроверитьЗаполнениеИдентификатораГАР(ДеревоДанных, Участник, АдресЗначение, ТолькоЧтение = Ложь)
	
	ИдентификаторГАР_ФИАС = "";
	
	ОтборДляПолученияАдресаПоПриказуМинфина = Новый Структура("КодыАдреса", Истина);
	АдресПоПриказуМинфина = РаботаСАдресами.СведенияОбАдресеПриказМинфинаРФ171н(АдресЗначение,
		ОтборДляПолученияАдресаПоПриказуМинфина);
		
	Если АдресПоПриказуМинфина.КодСтраны = "643" Тогда // Россия
		
		АдресСоответствуетСтруктурированномуФорматуФНС = АдресСоответствуетСтруктурированномуФорматуФНС(
			АдресПоПриказуМинфина);
		
		Если АдресСоответствуетСтруктурированномуФорматуФНС Тогда
			
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторДома;
			ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
			Иначе
				ИдентификаторГАР_ФИАС = "";
			КонецЕсли;
			
			ВыполнитьУточнениеКодаФИАСПоМОДам(ИдентификаторГАР_ФИАС, АдресПоПриказуМинфина.Представление);
			
			Если Не ТолькоЧтение Тогда
				ЗаполнитьКодФИАСПоДаннымАдреса(ДеревоДанных, Участник, ИдентификаторГАР_ФИАС);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторДома) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторДома;
			ИначеЕсли ЗначениеЗаполнено(АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта) Тогда
				ИдентификаторГАР_ФИАС = АдресПоПриказуМинфина.ИдентификаторАдресногоОбъекта;
			Иначе
				ИдентификаторГАР_ФИАС = "";
			КонецЕсли;
			
			ВыполнитьУточнениеКодаФИАСПоМОДам(ИдентификаторГАР_ФИАС, АдресПоПриказуМинфина.Представление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторГАР_ФИАС;
	
КонецФункции

// Проверяет адрес на соответствие структурированному формату государственного адресного реестра (ГАР).
// 
// Параметры:
//  Адрес - см. РаботаСАдресами.СведенияОбАдресе
//
// Возвращаемое значение:
//  Булево - Истина, если адрес соответствует структурированному формату ГАР.
//
Функция АдресСоответствуетФорматуГАР(Адрес) Экспорт
	
	Если Адрес.ТипАдреса <> "Муниципальный"
		Или Не ЗначениеЗаполнено(Адрес.ИдентификаторАдресногоОбъекта)
		Или Не ЗначениеЗаполнено(Адрес.КодРегиона)
		Или Не ЗначениеЗаполнено(Адрес.Регион) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

// Проверяет адрес на соответствие структурированному формату ФНС. Если в сведении об адресе
// заполнены специфичные для ФИАС поля, то он не поместится в формат ФНС.
//
// Параметры:
//  Адрес - см. РаботаСАдресами.СведенияОбАдресе
//
// Возвращаемое значение:
//  Булево - Истина, если адрес соответствует структурированному формату ФНС.
//
Функция АдресСоответствуетСтруктурированномуФорматуФНС(Адрес) Экспорт
	
	Если Адрес.ТипАдреса <> "Административно-территориальный"
		Или ЗначениеЗаполнено(Адрес.Территория)
		Или Адрес.Корпуса.Количество() > 1
		Или Адрес.Помещения.Количество() > 1 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Индекс = Адрес.Индекс;
	КодРегиона = Адрес.КодРегиона;
	Район = ПредставлениеАдресногоЭлемента(Адрес.Район, Адрес.РайонСокращение);
	Город = ПредставлениеАдресногоЭлемента(Адрес.Город, Адрес.ГородСокращение);
	НаселенныйПункт = ПредставлениеАдресногоЭлемента(Адрес.НаселенныйПункт, Адрес.НаселенныйПунктСокращение);
	Улица = ПредставлениеАдресногоЭлемента(Адрес.Улица, Адрес.УлицаСокращение);
	Дом = ПредставлениеАдресногоЭлемента(НРег(Адрес.Здание.ТипЗдания), "№", Адрес.Здание.Номер);
	Если Адрес.Корпуса.Количество() Тогда
		Корпус = ПредставлениеАдресногоЭлемента(НРег(Адрес.Корпуса[0].ТипКорпуса), Адрес.Корпуса[0].Номер);
	Иначе
		Корпус = "";
	КонецЕсли;
	Если Адрес.Помещения.Количество() Тогда
		Квартира = ПредставлениеАдресногоЭлемента(НРег(Адрес.Помещения[0].ТипПомещения), Адрес.Помещения[0].Номер);
	Иначе
		Квартира = "";
	КонецЕсли;
	
	Если СтрДлина(Индекс) <> 6
		Или СтрДлина(КодРегиона) <> 2
		Или СтрДлина(Район) > 50
		Или СтрДлина(Город) > 50
		Или СтрДлина(НаселенныйПункт) > 50
		Или СтрДлина(Улица) > 50
		Или СтрДлина(Дом) > 20
		Или СтрДлина(Корпус) > 20
		Или СтрДлина(Квартира) > 20 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Параметры:
//  ПервыйЭлемент - Строка
//  ВторойЭлемент - Строка
//  ТретийЭлемент - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеАдресногоЭлемента(ПервыйЭлемент = "", ВторойЭлемент = "", ТретийЭлемент = "") Экспорт

	МассивСоставляющих = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйЭлемент) Тогда
		МассивСоставляющих.Добавить(ПервыйЭлемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВторойЭлемент) Тогда
		МассивСоставляющих.Добавить(ВторойЭлемент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТретийЭлемент) Тогда
		МассивСоставляющих.Добавить(ТретийЭлемент);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСоставляющих, " ");

КонецФункции

Процедура ЗаполнитьСтруктуруДанныхПоПеревозочнымДокументамПоПеремещениюМеждуМОД(СтруктураДанных, ДанныеДокумента)
	
	СтруктураДанных.ДатаТранспортногоДокумента  = ДанныеДокумента.ВыборкаШапки.ДатаТТН;
	СтруктураДанных.ИдентификаторЭПД            = ДанныеДокумента.ВыборкаШапки.ИдентификаторЭПД;
	СтруктураДанных.НомерТранспортногоДокумента = ДанныеДокумента.ВыборкаШапки.НомерТТН;
	СтруктураДанных.РегНомерТС                  = ДанныеДокумента.ВыборкаШапки.НомерТС;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруАдресовУчастниковОбменаПоПеремещениюМеждуМОД(ОбъектУчета, СтруктураДанных, СтруктураАдресов)
	
	Если Не ТипЗнч(ОбъектУчета) = Тип("ДокументСсылка.ПеремещениеМеждуМОДИСМП") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеШапки = СтруктураДанных.ВыборкаШапки;
	ЭтоИндивидуальныйПредприниматель = ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(ДанныеШапки.Организация);
	
	СтруктураАдресов.Продавец.УчастникОбмена   = ДанныеШапки.Организация;
	СтруктураАдресов.Покупатель.УчастникОбмена = ДанныеШапки.Организация;
	
	Если ЭтоИндивидуальныйПредприниматель Тогда
		
		СтруктураАдресов.Продавец.АвтоматическоеЗаполнение = Ложь;
		СтруктураАдресов.Продавец.АдресСтрокой             = ДанныеШапки.ОтправительАдресСтрокой;
		СтруктураАдресов.Продавец.КодФИАС                  = ДанныеШапки.ОтправительКодФИАС;
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ДанныеШапки.ОтправительАдрес) Тогда
			СтруктураАдресов.Продавец.АдресЗначениеJSON = ДанныеШапки.ОтправительАдрес;
		Иначе
			СтруктураАдресов.Продавец.АдресЗначенияПолей = ДанныеШапки.ОтправительАдрес;
		КонецЕсли;
		
		СтруктураАдресов.Покупатель.АвтоматическоеЗаполнение = Ложь;
		СтруктураАдресов.Покупатель.АдресСтрокой             = ДанныеШапки.ПолучательАдресСтрокой;
		СтруктураАдресов.Покупатель.КодФИАС                  = ДанныеШапки.ПолучательКодФИАС;
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ДанныеШапки.ПолучательАдрес) Тогда
			СтруктураАдресов.Покупатель.АдресЗначениеJSON = ДанныеШапки.ПолучательАдрес;
		Иначе
			СтруктураАдресов.Покупатель.АдресЗначенияПолей = ДанныеШапки.ПолучательАдрес;
		КонецЕсли;
		
	Иначе
		
		СтруктураАдресов.Покупатель.УполномоченноеЛицоЗаПоставкуГруза = ДанныеШапки.Получатель;
		
		Если Не ДанныеШапки.Отправитель = ДанныеШапки.Организация Тогда
			СтруктураАдресов.Продавец.УполномоченноеЛицоЗаПоставкуГруза = ДанныеШапки.Отправитель;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеМашиночитаемойДоверенности(Организация, СертификатПодписи, ВыбраннаяМЧД)
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриЗаполненииМашиночитаемойДоверенности(Организация, СертификатПодписи, ВыбраннаяМЧД, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенности");
		МодульКриптографии = ОбщегоНазначения.ОбщийМодуль("КриптографияБЭД");
		
		Доверитель = Модуль.НовыеРеквизитыОтбора();
		РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация);
		
		ЗаполнитьЗначенияСвойств(Доверитель, РеквизитыОрганизации, "ИНН, КПП");
		
		Если ТипЗнч(СертификатПодписи) = Тип("СертификатКриптографии") Тогда
			СвойстваСубъектаСертификата = МодульКриптографии.СвойстваСубъектаСертификата(СертификатПодписи);
		Иначе
			СвойстваСубъектаСертификата = МодульКриптографии.СвойстваСубъектаСертификатаПоСсылке(СертификатПодписи);
		КонецЕсли;
		
		Представитель = Модуль.НовыеРеквизитыОтбора();
		Представитель.ИНН = СвойстваСубъектаСертификата.ИНН;
		
		ВсеДоверенности = Модуль.НоваяТаблицаДоверенностей();
		ДействительныеНаДату = ТекущаяДатаСеанса();
		
		СправочникМашинночитаемыеДоверенностиОрганизаций = "Справочник.МашиночитаемыеДоверенностиОрганизаций";
		МодульМашинночитаемыхДоверенностейОрганизаций    = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СправочникМашинночитаемыеДоверенностиОрганизаций);
		
		СправочникМЧД003 = "Справочник.МЧД003";
		МодульМЧД003     = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СправочникМЧД003);
		
		Доверенности002 = МодульМашинночитаемыхДоверенностейОрганизаций.ПолучитьДоверенностиПоОтбору(Доверитель, 
			Представитель, 
			ДействительныеНаДату);
		Доверенности003 = МодульМЧД003.ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Доверенности002, ВсеДоверенности);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Доверенности003, ВсеДоверенности);
		
		ВсеДоверенности.Сортировать("ПриоритетПодбора ВОЗР, ДатаВыдачи УБЫВ");
		
		Для Каждого СтрокаТЗ Из ВсеДоверенности Цикл
			ВыбраннаяМЧД = СтрокаТЗ.Ссылка;
			Прервать;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьУточнениеКодаФИАСПоМОДам(ИдентификаторГАР, Адрес) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторГАР)
		И Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодФИАСв1С", Строка(ИдентификаторГАР));
	Запрос.УстановитьПараметр("ХешАдресаВ1С", ИнтеграцияИС.ХешированиеДанныхSHA256(Адрес));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УточнениеКодовФИАС.КодФИАСвЧЗ КАК КодФИАСвЧЗ
	|ИЗ
	|	РегистрСведений.УточнениеКодовФИАСПоМОДамИСМП КАК УточнениеКодовФИАС
	|ГДЕ
	|	УточнениеКодовФИАС.КодФИАСв1С = &КодФИАСв1С
	|	И УточнениеКодовФИАС.ХешАдресаВ1С = &ХешАдресаВ1С";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИдентификаторГАР = Новый УникальныйИдентификатор(Выборка.КодФИАСвЧЗ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
