
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры
//

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация

	ТекстыОтражения = Новый Массив;

#Область ТекстПрочиеРасходы 
 	ТекстЗапроса = "
	|ВЫБРАТЬ // Отражение расходов по исследованиям и разработкам 
	|	Операция.Ссылка КАК Ссылка,
	|	КОНЕЦПЕРИОДА(Операция.Дата, МЕСЯЦ) КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.СуммаУУ КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходовДт КАК АналитикаУчетаДт,
	|	Строки.ПодразделениеДт КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.ПодразделениеДт КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.СтатьяРасходовДт КАК СубконтоДт1,
	|	Строки.АналитикаРасходовДт КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее) КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	Строки.СуммаНУДт КАК СуммаНУДт,
	|	Строки.СуммаПРДт КАК СуммаПРДт,
	|	Строки.СуммаВРДт КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаКт,
	|	Строки.СтатьяРасходовКт КАК АналитикаУчетаКт,
	|	Строки.ПодразделениеКт КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Строки.ПодразделениеКт КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Строки.СтатьяРасходовКт КАК СубконтоКт1,
	|	Строки.АналитикаРасходовКт КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	Строки.СуммаНУКт КАК СуммаНУКт,
	|	Строки.СуммаПРКт КАК СуммаПРКт,
	|	Строки.СуммаВРКт КАК СуммаВРКт,
	|	""Отражение расходов по исследованиям и разработкам"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПризнаниеРасходовПоИсследованиямИРазработкам КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОтражениеРасходовПоИсследованиямИРазработкам КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти


	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	//-- Локализация
	
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ОтражениеРасходовПоИсследованиямИРазработкам
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыКОтражению.Ссылка КАК Ссылка,
	|	РасходныеДвижения.Подразделение КАК ПодразделениеКт,
	|	РасходныеДвижения.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	РасходныеДвижения.СтатьяРасходов КАК СтатьяРасходовКт,
	|	РасходныеДвижения.АналитикаРасходов КАК АналитикаРасходовКт,
	|	РасходныеДвижения.СуммаРегл - РасходныеДвижения.ПостояннаяРазница - РасходныеДвижения.ВременнаяРазница КАК СуммаНУКт,
	|	РасходныеДвижения.ПостояннаяРазница КАК СуммаПРКт,
	|	РасходныеДвижения.ВременнаяРазница КАК СуммаВРКт,
	|	ПриходныеДвижения.Подразделение КАК ПодразделениеДт,
	|	ПриходныеДвижения.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	ПриходныеДвижения.СтатьяРасходов КАК СтатьяРасходовДт,
	|	ПриходныеДвижения.АналитикаРасходов КАК АналитикаРасходовДт,
	|	ПриходныеДвижения.СуммаРегл - ПриходныеДвижения.ПостояннаяРазница - ПриходныеДвижения.ВременнаяРазница КАК СуммаНУДт,
	|	ПриходныеДвижения.ПостояннаяРазница КАК СуммаПРДт,
	|	ПриходныеДвижения.ВременнаяРазница КАК СуммаВРДт,
	|	ПриходныеДвижения.СуммаРегл КАК Сумма,
	|	ПриходныеДвижения.СуммаУпр КАК СуммаУУ
	|ПОМЕСТИТЬ ОтражениеРасходовПоИсследованиямИРазработкам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК РасходныеДвижения
	|		ПО ДокументыКОтражению.Ссылка = РасходныеДвижения.Регистратор
	|		И РасходныеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК ПриходныеДвижения
	|		ПО РасходныеДвижения.Регистратор = ПриходныеДвижения.Регистратор
	|		И ПриходныеДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И РасходныеДвижения.ИдентификаторФинЗаписи = ПриходныеДвижения.ИдентификаторФинЗаписи
	|ГДЕ
	|	ПриходныеДвижения.СуммаРегл <> 0
	|	ИЛИ ПриходныеДвижения.ПостояннаяРазница <> 0
	|	ИЛИ ПриходныеДвижения.ВременнаяРазница <> 0
	|	ИЛИ ПриходныеДвижения.СуммаУпр <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат ТекстЗапроса;
	
	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область ЗакрытиеМесяца

// Процедура применяет повышающий коэффициент к суммам признания расходов в НУ.
// Коэффициент применяется только к расходам по исследованиям и разработкам, входящим в перечень правительства РФ,
// по статьям с льготируемым видом расходов НУ. Расчет применения повышающего коэффициента фиксируется в регистре 
// сведений РасчетПризнанияРасходовНИОКР.
//
// Параметры:
//  ТаблицаДвижений - ТаблицаЗначений - Таблица движений документа:
//   * СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов
//   * АналитикаРасходов - Характеристика.СтатьиРасходов
//   * ВидДвижения - ВидДвиженияНакопления
//   * ИдентификаторФинЗаписи - Строка
//   * СуммаРегл - Число
//   * ПостояннаяРазница - Число
//   * ВременнаяРазница - Число
//   * ПрименятьКоэффициент - Булево.
//  ДокументПризнания - ДокументСсылка.ПризнаниеРасходовПоИсследованиямИРазработкам -
//  Организация - СправочникСсылка.Организации - Организация, для которой выполняется расчет.
//  ПериодРасчета - Дата - Дата выполнения расчета.
//
Процедура ПрименитьПовышающийКоэффициент(ТаблицаДвижений, ДокументПризнания, Организация, ПериодРасчета) Экспорт

	//++ Локализация
	
	РасчетПризнанияРасходовНУ = РегистрыСведений.РасчетПризнанияРасходовНИОКР.СоздатьНаборЗаписей();
	РасчетПризнанияРасходовНУ.Отбор.Регистратор.Установить(ДокументПризнания);

	ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ =  ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ(ПериодРасчета);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
		|	ПрочиеРасходы.СуммаРегл КАК СуммаРегл,
		|	ПрочиеРасходы.ПостояннаяРазница КАК ПостояннаяРазница,
		|	ПрочиеРасходы.ВременнаяРазница КАК ВременнаяРазница,
		|	ПрочиеРасходы.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ПрочиеРасходы.ВидДвижения КАК ВидДвижения,
		|	ПрочиеРасходы.ПрименятьКоэффициент КАК ПрименятьКоэффициент
		|ПОМЕСТИТЬ ВТДанныеЗаписей
		|ИЗ
		|	&ПрочиеРасходы КАК ПрочиеРасходы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторФинЗаписи
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриходныеДвижения.СтатьяРасходов КАК СтатьяРасходов,
		|	ПриходныеДвижения.СуммаРегл КАК СуммаБУ,
		|	ПриходныеДвижения.ПостояннаяРазница КАК СуммаПР,
		|	ПриходныеДвижения.ВременнаяРазница КАК СуммаВР,
		|	ПриходныеДвижения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ВЫРАЗИТЬ(РасходныеДвижения.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов КАК ВидРасходов,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныеДвижения.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов В
		|		(&НельготируемыеРасходы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Льготируемые,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныеДвижения.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов В
		|		(&РасходыПоОплатеТруда)
		|			ТОГДА ПриходныеДвижения.СуммаРегл - ПриходныеДвижения.ПостояннаяРазница - ПриходныеДвижения.ВременнаяРазница
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНУОплатыТруда,
		|	ПриходныеДвижения.СуммаРегл - ПриходныеДвижения.ПостояннаяРазница - ПриходныеДвижения.ВременнаяРазница КАК СуммаНУ,
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(РасходныеДвижения.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов В
		|		(&НенормируемыеРасходы)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НормируемыеРасходы,
		|	ВЫРАЗИТЬ(РасходныеДвижения.АналитикаРасходов КАК
		|		Справочник.ТемыЭтапыИсследованийИРазработок).ВходитВПереченьПравительстваРФ КАК ВходитВПереченьПравительстваРФ
		|ИЗ
		|	ВТДанныеЗаписей КАК ПриходныеДвижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеЗаписей КАК РасходныеДвижения
		|		ПО ПриходныеДвижения.ИдентификаторФинЗаписи = РасходныеДвижения.ИдентификаторФинЗаписи
		|		И ПриходныеДвижения.ВидДвижения <> РасходныеДвижения.ВидДвижения
		|ГДЕ
		|	ПриходныеДвижения.ПрименятьКоэффициент = ИСТИНА
		|	И ПриходныеДвижения.ВидДвижения = &ВидДвиженияПриход
		|УПОРЯДОЧИТЬ ПО
		|	ВидРасходов
		|ИТОГИ
		|	СУММА(СуммаБУ),
		|	СУММА(СуммаПР),
		|	СУММА(СуммаВР),
		|	МАКСИМУМ(Льготируемые),
		|	СУММА(СуммаНУОплатыТруда),
		|	СУММА(СуммаНУ),
		|	МАКСИМУМ(НормируемыеРасходы)
		|ПО
		|	ВходитВПереченьПравительстваРФ,
		|	ВидРасходов";
	
	Запрос.УстановитьПараметр("ПрочиеРасходы", ТаблицаДвижений);
	Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("НельготируемыеРасходы", ПолучитьНельготируемыеРасходы());
	Запрос.УстановитьПараметр("РасходыПоОплатеТруда", ПолучитьРасходыПоОплатеТруда());
	Запрос.УстановитьПараметр("НенормируемыеРасходы", ПолучитьНенормируемыеРасходы());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВхождениеВПереченьРФ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаВхождениеВПереченьРФ.Следующий() Цикл
	
		Если ВыборкаВхождениеВПереченьРФ.СуммаНУ <> 0 Тогда
		
			ВыборкаВидРасходов = ВыборкаВхождениеВПереченьРФ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			СуммаНормы = ВыборкаВхождениеВПереченьРФ.СуммаНУОплатыТруда * 0.75;
			
			Пока ВыборкаВидРасходов.Следующий() Цикл
						
					СтрокаРасчет= РасчетПризнанияРасходовНУ.Добавить();
					СтрокаРасчет.ПериодРасчета = ПериодРасчета;
					СтрокаРасчет.Организация = Организация;
					СтрокаРасчет.ДокументПризнанияРасходов = ДокументПризнания;
					СтрокаРасчет.ВидРасходов = ВыборкаВидРасходов.ВидРасходов;
					СтрокаРасчет.ВходитВПереченьПравительстваРФ = ВыборкаВидРасходов.ВходитВПереченьПравительстваРФ;
					СтрокаРасчет.СуммаОплатыТруда = ВыборкаВидРасходов.СуммаНУОплатыТруда;
					
					Если ВыборкаВидРасходов.Льготируемые = Истина И ВыборкаВидРасходов.ВходитВПереченьПравительстваРФ Тогда
						
						Если ВыборкаВидРасходов.НормируемыеРасходы = Истина Тогда
		
							СтрокаРасчет.Сумма = ВыборкаВидРасходов.СуммаНУ;
							СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом = Мин(СуммаНормы, ВыборкаВидРасходов.СуммаНУ);
							СтрокаРасчет.СуммаСКоэффициентом = СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом * ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ;
							СтрокаРасчет.СуммаБезКоэффициента = ВыборкаВидРасходов.СуммаНУ - СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом;
						
							СуммаНормы = СуммаНормы - СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом;
							
							МассивКоэффициентов = Новый Массив();
							
							ВыборкаДетальныеЗаписи = ВыборкаВидРасходов.Выбрать();
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								МассивКоэффициентов.Добавить(ВыборкаДетальныеЗаписи.СуммаНУ);
							КонецЦикла;
							
							//Сумма по норме с коэф. 1.5 + сумма сверх нормы с коэф. 1
							СуммаНУКПризнанию = СтрокаРасчет.СуммаБезКоэффициента + СтрокаРасчет.СуммаСКоэффициентом;
							СуммыНУРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаНУКПризнанию, МассивКоэффициентов);
							
							ВыборкаДетальныеЗаписи.Сбросить();
							Для Сч = 0 По ВыборкаДетальныеЗаписи.Количество()-1 Цикл
								
								ВыборкаДетальныеЗаписи.Следующий();
								
								Если СуммыНУРаспределения.Получить(Сч) <> 0 Тогда
									
									Движения = ТаблицаДвижений.НайтиСтроки(Новый Структура("ИдентификаторФинЗаписи, ВидДвижения",
										ВыборкаДетальныеЗаписи.ИдентификаторФинЗаписи, ВидДвиженияНакопления.Приход));
									Если Движения.Количество() > 0 Тогда
										Для Каждого Строка Из Движения Цикл
											Строка.ПостояннаяРазница = Строка.СуммаРегл - СуммыНУРаспределения.Получить(Сч) - Строка.ВременнаяРазница;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							
							СтрокаРасчет.Сумма = ВыборкаВидРасходов.СуммаНУ;
							СтрокаРасчет.СуммаСКоэффициентом = ВыборкаВидРасходов.СуммаНУ * ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ;
							СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом = 0;
							СтрокаРасчет.СуммаБезКоэффициента = 0;
						
							ВыборкаДетальныеЗаписи = ВыборкаВидРасходов.Выбрать();
		
							Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
								Если ВыборкаДетальныеЗаписи.СуммаНУ <> 0 Тогда
									Движения = ТаблицаДвижений.НайтиСтроки(Новый Структура("ИдентификаторФинЗаписи, ВидДвижения",
										ВыборкаДетальныеЗаписи.ИдентификаторФинЗаписи, ВидДвиженияНакопления.Приход));
									Если Движения.Количество() > 0 Тогда
										Для Каждого Строка Из Движения Цикл
											Строка.ПостояннаяРазница = Строка.СуммаРегл - ВыборкаДетальныеЗаписи.СуммаНУ * ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ
												- Строка.ВременнаяРазница;
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					Иначе
						СтрокаРасчет.Сумма = ВыборкаВидРасходов.СуммаНУ;
						СтрокаРасчет.СуммаСКоэффициентом = 0;
						СтрокаРасчет.СуммаПрочихКПризнаниюСКоэффициентом = 0;
						СтрокаРасчет.СуммаБезКоэффициента = ВыборкаВидРасходов.СуммаНУ;
					КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	РасчетПризнанияРасходовНУ.Записать();
	//-- Локализация
	
КонецПроцедуры

// Возвращает документы к отражению в регл. учете
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
//
Процедура ВернутьДокументыКОтражению(МенеджерВТ) Экспорт
	
	//++ Локализация
	РеглУчетПроведениеСервер.ВернутьДокументыКОтражению(МенеджерВТ);
	//-- Локализация
	
КонецПроцедуры

// Устанавливает блокировку и очищает движения локализуемвх регистров
// 
// Параметры:
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит врменную таблицу ДокументыКОтражению с колонками:
// 	* Документ - ДокументСсылка.ПризнаниеРасходовПоИсследованиямИРазработкам - 
Процедура ОчиститьДвиженияДокументовПоПризнаниюРасходов(МенеджерВТ) Экспорт

	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Документ
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению";

	РезультатЗапроса = Запрос.Выполнить();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетПризнанияРасходовНИОКР.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Документ");
		
		Блокировка.Заблокировать();

		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

			НаборЗаписей = РегистрыСведений.РасчетПризнанияРасходовНИОКР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Документ);
			НаборЗаписей.Записать();

		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ВызватьИсключение ТекстОшибки;

	КонецПопытки;

	//-- Локализация
	
КонецПроцедуры

// Определяет размер повышающего коэффициента к суммам признания расходов в НУ
//
// Параметры:
// 	Период - Дата - Период действия.
//
// Возвращаемое значение:
// 	Число - Коэффициент к суммам признания расходов в НУ.
//
Функция ПовышающийКоэффициентКСуммамПризнанияРасходовВНУ(Знач Период) Экспорт

	Коэффициент = 1;
	
	Если НачалоГода(Период) >= '2025-01-01' Тогда
		Коэффициент = 2;
	Иначе
		Коэффициент = 1.5;
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции

#КонецОбласти

#Область КомандыОтчетов

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация

	//++ НЕ УТКА
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Команда = Отчеты.СправкаРасчетПризнанияРасходовПоНИОКР.ДобавитьКомандуОтчета(КомандыОтчетов);
		Если Команда <> Неопределено Тогда
			Команда.ВидимостьВФормах = "ФормаДокумента, ФормаСписка";
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТекстЗапросаУчетнаяПолитикаБУ() Экспорт
	
	Результат =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.Организация 								КАК Организация,
	|	ЛОЖЬ 															КАК УчетНИОКРПоФСБУ26,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)	КАК СтатьяРасходовПоИсследованиям,
	|	НЕОПРЕДЕЛЕНО													КАК АналитикаРасходовПоИсследованиям
	|ПОМЕСТИТЬ ВтУчетнаяПолитикаБухУчета
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации";
	
	//++ Локализация
	Результат =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.Организация 							КАК Организация,
	|	ТаблицаСрезПоследних.УчетНИОКРПоФСБУ26	                    КАК УчетНИОКРПоФСБУ26,
	|	ТаблицаСрезПоследних.СтатьяРасходовПоИсследованиям 			КАК СтатьяРасходовПоИсследованиям,
	|	ТаблицаСрезПоследних.АналитикаРасходовПоИсследованиям		КАК АналитикаРасходовПоИсследованиям
	|ПОМЕСТИТЬ ВтУчетнаяПолитикаБухУчета
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухУчета.СрезПоследних(&НачалоПериода, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК ТаблицаСрезПоследних
	|		ПО ГоловныеОрганизации.Организация = ТаблицаСрезПоследних.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	//-- Локализация
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаУчетныеПолитикиБУ() Экспорт
	
	Результат =
	"ВЫБРАТЬ
	|	вт_ТаблицаИзменений.Период		КАК Период,
	|	вт_ТаблицаИзменений.Организация КАК Организация,
	|	ЛОЖЬ 							КАК ПрименяетсяПризнаниеПоИсследованиям
	|ПОМЕСТИТЬ вт_УчетныеПолитикиБУ
	|ИЗ
	|	вт_ОрганизацииУчетнойПолитики КАК вт_ТаблицаИзменений";
	
	//++ Локализация
	Результат =
	"ВЫБРАТЬ
	|	вт_ТаблицаИзменений.Период			КАК Период,
	|	вт_ТаблицаИзменений.Организация		КАК Организация,
	|	МАКСИМУМ(УчетнаяПолитикаБУ.Период)	КАК ПериодУчетнойПолитикиБУ
	|ПОМЕСТИТЬ вт_ПериодыУчетнойПолитикиБУ
	|ИЗ
	|	вт_ОрганизацииУчетнойПолитики КАК вт_ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухУчета КАК УчетнаяПолитикаБУ
	|		ПО вт_ТаблицаИзменений.ОрганизацияУчетнойПолитики = УчетнаяПолитикаБУ.Организация
	|		И вт_ТаблицаИзменений.Период >= УчетнаяПолитикаБУ.Период
	|СГРУППИРОВАТЬ ПО
	|	вт_ТаблицаИзменений.Период,
	|	вт_ТаблицаИзменений.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ПериодыУчетнойПолитикиБУ.Период		КАК Период,
	|	вт_ПериодыУчетнойПолитикиБУ.Организация КАК Организация,
	|	УчетнаяПолитикаБУ.УчетНИОКРПоФСБУ26	    КАК ПрименяетсяПризнаниеПоИсследованиям
	|ПОМЕСТИТЬ вт_УчетныеПолитикиБУ
	|ИЗ
	|	вт_ПериодыУчетнойПолитикиБУ КАК вт_ПериодыУчетнойПолитикиБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаБухУчета КАК УчетнаяПолитикаБУ
	|		ПО вт_ПериодыУчетнойПолитикиБУ.Организация = УчетнаяПолитикаБУ.Организация
	|		И вт_ПериодыУчетнойПолитикиБУ.ПериодУчетнойПолитикиБУ = УчетнаяПолитикаБУ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ вт_ПериодыУчетнойПолитикиБУ";
	
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.Дата, МЕСЯЦ) КАК ДатаОтражения
	|ИЗ
	|	Документ.ПризнаниеРасходовПоИсследованиямИРазработкам КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

//-- Локализация

#КонецОбласти

//++ Локализация
#Область ЗакрытиеМесяца

Функция ПолучитьНельготируемыеРасходы()
	
	ВидыРасходов = Новый Массив();
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОтчисленияВФондПоддержкиНТДеятельности);
	
	Возврат ВидыРасходов;
	
КонецФункции

Функция ПолучитьРасходыПоОплатеТруда()
	
	ВидыРасходов = Новый Массив();
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.СтраховыеВзносы);
	
	Возврат ВидыРасходов;
	
КонецФункции

Функция ПолучитьНенормируемыеРасходы()
	
	ВидыРасходов = Новый Массив();
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.ОплатаТруда);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.СтраховыеВзносы);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.Амортизация);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.МатериальныеРасходы);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.РасходыНаПриобретениеИсключительныхПравНаИзобретения);
	ВидыРасходов.Добавить(Перечисления.ВидыРасходовНУ.СтоимостьРаботПоДоговорамНаВыполнениеНИОКРЗаказчиков);
	
	Возврат ВидыРасходов;
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти