
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.131";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.СоздатьЗаявкиДСВПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("17af5ce2-a1e0-4c87-8355-987933282f84");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок удержание ДСВ сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок удержание ДСВ сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.131";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.СоздатьЗаявкиОтсутствияПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("2e1786cb-91b5-4ec7-a3f7-4c0d609848db");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на отсутствие сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на отсутствие сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.131";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.СоздатьЗаявкиОстаткиОтпусковПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("8cc94fb1-ef69-4d14-b30d-932c094616f2");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на справки об остатках отпусков сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на справки об остатках отпусков сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.131";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.СоздатьЗаявкиСправкаПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("58fda091-2d44-4903-8e05-9d200ce7994a");
	Обработчик.Комментарий 		= НСтр("ru = 'Перенос заявок на справку с места работы сервиса 1С:Кабинет сотрудника.';
											|en = 'Перенос заявок на справку с места работы сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.172";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.ЗаполнитьДокументыПоЗаявкамДСВПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("c7d10fc6-2901-49b2-8ad3-f741032deb7a");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам на удержание ДСВ сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам на удержание ДСВ сервиса 1С:Кабинет сотрудника.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.30.172";
	Обработчик.Процедура 		= "ЗаявкиСотрудниковРасширенный.ЗаполнитьДокументыПоЗаявкамОтсутствияПрежнейВерсии";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("c022d4f4-065f-4a4c-8d02-fa0c04c5fe73");
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение документов по заявкам на отсутствие сервиса 1С:Кабинет сотрудника.';
											|en = 'Заполнение документов по заявкам на отсутствие сервиса 1С:Кабинет сотрудника.'");
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ЗаявкаКомпенсацияОтпускаКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаКомпенсацияОтпускаКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаУчебныйОтпускКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаУчебныйОтпускКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаДСВКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаДСВКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.ЗаявкаКомпенсацияОтпускаКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаКомпенсацияОтпускаКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаКомпенсацияОтпускаКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаКомпенсацияОтпускаКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаКомпенсацияОтпускаКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаКомпенсацияОтпускаКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаКомпенсацияОтпускаКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаКомпенсацияОтпускаКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаУчебныйОтпускКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаУчебныйОтпускКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаУчебныйОтпускКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаУчебныйОтпускКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаУчебныйОтпускКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаУчебныйОтпускКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаУчебныйОтпускКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаУчебныйОтпускКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаДСВКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаДСВКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаДСВКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаДСВКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаДСВКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаДСВКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаДСВКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаДСВКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника.Изменение.Организации
	|Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.Чтение.Организации
	|Документ.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗаявкаКомпенсацияОтпускаКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаУчебныйОтпускКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаДСВКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника);
	СписокОбъектов.Добавить(Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "a44d517f-4ba0-4dfe-9a89-ffc15ad86fc2", Метаданные.Документы.ЗаявкаКомпенсацияОтпускаКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "7c324b7d-d58a-489c-a91a-90e2052535ee", Метаданные.Документы.ЗаявкаУчебныйОтпускКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "cc33502b-c0c7-472e-929a-b60a34b3209a", Метаданные.Документы.ЗаявкаДСВКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0752089b-bc5b-4162-ae2d-b6f288527333", Метаданные.Документы.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "7a3116ef-622d-4391-a689-4b6c90090253", Метаданные.Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеЗаявкиНаОтпуск

Процедура ЗаполнитьДанныеЗаполненияДокументаОтпускПоВидамОтпусков(ДанныеЗаполнения, ДанныеЗаявки) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьМатериальнуюПомощьПриОтпуске") Тогда
		ДанныеЗаполнения.Вставить("ПредоставитьМатериальнуюПомощьПриОтпуске", ДанныеЗаявки.ПредоставитьМатериальнуюПомощьПриОтпуске);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЕдиновременнуюВыплатуКОтпуску") Тогда
		ДанныеЗаполнения.Вставить("ПредоставитьЕдиновременнуюВыплатуКОтпуску", ДанныеЗаявки.ПредоставитьЕдиновременнуюВыплатуКОтпуску);
	КонецЕсли;
	
	ДанныеОтпусков = Новый Массив;
	Для каждого ДанныеОтпуска Из ДанныеЗаявки.ДанныеПоВидамОтпусков Цикл
		НоваяЗапись = НовоеОписаниеДанныеОтпуска();
		НоваяЗапись.ВидОтпуска 		= ДанныеОтпуска.ВидОтпуска;
		НоваяЗапись.ДатаНачала 		= ДанныеОтпуска.ДатаНачала;
		НоваяЗапись.ДатаОкончания 	= ДанныеОтпуска.ДатаОкончания;
		НоваяЗапись.КоличествоДней 	= ДанныеОтпуска.ДнейОтпуска;
		НоваяЗапись.КоличествоДнейКомпенсации = ДанныеОтпуска.КоличествоДнейКомпенсацииОтпуска;
		ДанныеОтпусков.Добавить(НоваяЗапись);
	КонецЦикла;
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
	
КонецПроцедуры

Функция ВидыКомпенсируемыхОтпусков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И НЕ ВидыОтпусков.ОтпускБезОплаты
	|	И НЕ ВидыОтпусков.ПометкаУдаления
	|	И НЕ ВидыОтпусков.Недействителен";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ЗаполнитьДанныеЗаполненияДокументаОтпуск(ДанныеЗаполнения, ДанныеЗаявки) Экспорт
	
	ДанныеОтпуска 				= Неопределено;
	ДанныеКомпенсацииОтпуска 	= Неопределено;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМатериальнуюПомощьПриОтпуске") Тогда
		ДанныеЗаполнения.Вставить("ПредоставитьМатериальнуюПомощьПриОтпуске", ДанныеЗаявки.ПредоставитьМатериальнуюПомощьПриОтпуске);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЕдиновременнуюВыплатуКОтпуску") Тогда
		ДанныеЗаполнения.Вставить("ПредоставитьЕдиновременнуюВыплатуКОтпуску", ДанныеЗаявки.ПредоставитьЕдиновременнуюВыплатуКОтпуску);
	КонецЕсли;
	
	Если ДанныеЗаявки.ПредоставитьКомпенсациюОтпуска Тогда
		
		Если Не ДанныеЗаявки.ВидОтпускаКомпенсации = Справочники.ВидыОтпусков.Основной Тогда
			ДанныеКомпенсацииОтпуска = ДанныеКомпенсацииОтпусков(ДанныеЗаявки, ДанныеЗаявки.ВидОтпускаКомпенсации);
		КонецЕсли;
		
		ДанныеОтпуска = ДанныеОтпусков(ДанныеЗаявки, Справочники.ВидыОтпусков.Основной);
		Если ДанныеЗаявки.ВидОтпускаКомпенсации = Справочники.ВидыОтпусков.Основной Тогда
			ДанныеОтпуска.КоличествоДнейКомпенсации = ДанныеЗаявки.КоличествоДнейКомпенсацииОтпуска;
		КонецЕсли;
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбщийПериодОтпускаВДокументах") Тогда
			ДанныеЗаполнения.ИспользоватьОбщийПериодОтпускаВДокументах = Истина;
		Иначе
			ДанныеОтпуска = ДанныеОтпусков(ДанныеЗаявки, Справочники.ВидыОтпусков.Основной);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОтпусков = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеОтпуска) Тогда
		ДанныеОтпусков.Добавить(ДанныеОтпуска);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКомпенсацииОтпуска) Тогда
		ДанныеОтпусков.Добавить(ДанныеКомпенсацииОтпуска);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);

КонецПроцедуры

Функция НовоеОписаниеДанныеОтпуска() Экспорт
	
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	
	Описание = Новый Структура;
	Описание.Вставить("ВидОтпуска");
	Описание.Вставить("ДатаНачала", 	ПустаяДата);
	Описание.Вставить("ДатаОкончания", 	ПустаяДата);
	Описание.Вставить("КоличествоДней");
	Описание.Вставить("КоличествоДнейКомпенсации", 0);
	Описание.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", 	ПустаяДата);
	Описание.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск", 	ПустаяДата);
	Описание.Вставить("Основание", "");
	Описание.Вставить("ВидОтпускаПрежний", 		Неопределено);
	Описание.Вставить("ИндексСтрокиДокумента", 	Неопределено);
	
	Возврат Описание;
	
КонецФункции

Функция ДанныеКомпенсацииОтпусков(ДанныеЗаявки, ВидОтпуска)
	
	ДанныеКомпенсацииОтпуска = НовоеОписаниеДанныеОтпуска();
	ДанныеКомпенсацииОтпуска.ВидОтпуска = ВидОтпуска;
	ДанныеКомпенсацииОтпуска.КоличествоДнейКомпенсации = ДанныеЗаявки.КоличествоДнейКомпенсацииОтпуска;
	
	Возврат ДанныеКомпенсацииОтпуска;
	
КонецФункции

Функция ДанныеОтпусков(ДанныеЗаявки, ВидОтпуска)
	
	ВидОтпускаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтпуска, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным");
	
	ДанныеОтпуска = НовоеОписаниеДанныеОтпуска();
	ДанныеОтпуска.ВидОтпуска 	= ВидОтпуска; 
	ДанныеОтпуска.ДатаНачала 	= ДанныеЗаявки.ДатаНачала;
	ДанныеОтпуска.ДатаОкончания = ДанныеЗаявки.ДатаОкончания;
	ПоКалендарнымДням = (ВидОтпускаРеквизиты.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях);
	ДанныеОтпуска.КоличествоДней = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
		ДанныеЗаявки.Сотрудник, ДанныеЗаявки.ДатаНачала, ДанныеЗаявки.ДатаОкончания, ПоКалендарнымДням, ВидОтпускаРеквизиты.ОтпускЯвляетсяЕжегодным);

	Возврат ДанныеОтпуска;
	
КонецФункции

Процедура ЗаполнитьДанныеЗаполненияДокументаОтпускБезОплаты(ДанныеЗаполнения, ДанныеЗаявки) Экспорт
	
	ДанныеОтпуска = НовоеОписаниеДанныеОтпуска();
	ДанныеОтпуска.ВидОтпуска 	= Справочники.ВидыОтпусков.ОтпускЗаСвойСчет;
	ДанныеОтпуска.ДатаНачала 	= ДанныеЗаявки.ДатаНачала;
	ДанныеОтпуска.ДатаОкончания = ДанныеЗаявки.ДатаОкончания;

	ДанныеОтпусков = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОтпуска);
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);

КонецПроцедуры

Функция КоличествоДнейОтпуска(Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат УчетРабочегоВремениРасширенный.ДлительностьИнтервала(Сотрудник, ДатаНачала, ДатаОкончания, Истина, Истина);

КонецФункции

Процедура ЗаполнитьДанныеПоВидамОтпусков(Объект, ДанныеПоВидамОтпусков) Экспорт
	
	Для каждого ДанныеПоВидуОтпуска Из ДанныеПоВидамОтпусков Цикл
		
		НоваяСтрока = Объект.ДанныеПоВидамОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоВидуОтпуска);
		
		Если ДанныеПоВидуОтпуска.ОтпускБезОплаты И Не ЗначениеЗаполнено(НоваяСтрока.ВидОтпуска) Тогда
			НоваяСтрока.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускЗаСвойСчет;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ДатаНачала) И ЗначениеЗаполнено(НоваяСтрока.ДатаОкончания) И ЗначениеЗаполнено(НоваяСтрока.ВидОтпуска) Тогда
			ОтпускВРабочихДняхПоДоговору = ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(Объект.Сотрудник, НоваяСтрока.ДатаНачала);
			ОписаниеВидаОтпуска = ОстаткиОтпусков.ОписаниеВидаОтпуска(НоваяСтрока.ВидОтпуска, ОтпускВРабочихДняхПоДоговору);
			НоваяСтрока.ДнейОтпуска = УчетРабочегоВремениРасширенный.ДлительностьИнтервала(
					Объект.Сотрудник, НоваяСтрока.ДатаНачала, НоваяСтрока.ДатаОкончания,
					ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		КонецЕсли;
		
		Объект.ДнейОтпуска = Объект.ДнейОтпуска + НоваяСтрока.ДнейОтпуска;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВычислениеМенеджераДокумента

Функция ДокументМенеджерОтменяющейЗаявки(ОтменяемаяЗаявка) Экспорт
	
	ДокументМенеджер = Неопределено;
	
	Задание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтменяемаяЗаявка, "Задание");
	Если ТипЗнч(Задание) = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтпуск") Тогда
		ТипОтменяемойЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "ТипЗаявкиКабинетСотрудника");
		Если ТипОтменяемойЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.КомпенсацияОтпуска Тогда
			ДокументМенеджер = Документы.ЗаявкаКомпенсацияОтпускаКабинетСотрудника;
		ИначеЕсли ТипОтменяемойЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
			ДокументМенеджер = Документы.ЗаявкаУчебныйОтпускКабинетСотрудника;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументМенеджер;
	
КонецФункции

Функция ДокументМенеджерПоТипуОбъекта(ТипОбъекта, Объект) Экспорт
	
	ДокументМенеджер = Неопределено;
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаКомпенсациюОтпуска Тогда
		ДокументМенеджер = Документы.ЗаявкаКомпенсацияОтпускаКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Отсутствие Тогда
		ПричинаОтсутствия = Объект.ПричинаОтсутствия;
		Если ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
			ДокументМенеджер = Документы.ЗаявкаУчебныйОтпускКабинетСотрудника;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаДСВ Тогда
		ДокументМенеджер = Документы.ЗаявкаДСВКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаОстаткиОтпусков Тогда
		ДокументМенеджер = Документы.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправкиСМестаРаботы Тогда
		ДокументМенеджер = Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника;
	КонецЕсли;
	
	Возврат ДокументМенеджер;

КонецФункции

#КонецОбласти

#Область КадровыйЭДО

Функция ВладелецЗаявкаСотрудника(Ссылки) Экспорт
	
	Возврат ТипЗнч(Ссылки[0]) = Тип("ДокументСсылка.ЗаявкаСправкаСМестаРаботыКабинетСотрудника")
		Или ТипЗнч(Ссылки[0]) = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы");
	
КонецФункции
	
Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.ИдентификаторПечатнойФормы(),
		НСтр("ru = 'Справка с места работы';
			|en = 'Справка с места работы'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		,
		,
		Перечисления.ВариантыПодписанияДокументовКЭДО.НеТребуется);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура СоздатьЗаявкиДСВПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			
			Если Не ЗначениеЗаполнено(НовыйДокумент.Сотрудник) Тогда
				НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			КонецЕсли;
			
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаУдержаниеДСВ;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиОтсутствияПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.ИдентификаторЭлектронногоДокумента КАК ИдентификаторЭлектронногоДокумента,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника,
	|	Таблица.ПричинаОтсутствия КАК ПричинаОтсутствия
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаОтсутствие КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки,ИдентификаторЭлектронногоДокумента");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			
			Если Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание
				Или Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОпозданиеЛичныеДела;
			ИначеЕсли Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ОтпускПоУходуЗаРебенком;
			ИначеЕсли Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Отгул Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Отгул;
			ИначеЕсли Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Командировка Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.Командировка;
			ИначеЕсли Выборка.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами Тогда
				ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ДниУходаЗаДетьмиИнвалидами;
			КонецЕсли;
			НовыйДокумент.ТипЗаявки = ТипЗаявки;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиОстаткиОтпусковПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправкаОстаткиОтпусков КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			
			ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Истина, НовыйДокумент.ФизическоеЛицо, Выборка.ДатаСоздания);
			НовыйДокумент.Сотрудник = ОсновныеСотрудники[НовыйДокумент.ФизическоеЛицо];
			ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, НовыйДокумент.Сотрудник, "Организация", Выборка.ДатаСоздания);
			Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
				НовыйДокумент.Организация = ТаблицаДанных[0].Организация;
			КонецЕсли;
			
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаявкиСправкаПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Таблица.Ссылка КАК Задание,
	|	Таблица.СрокИсполнения КАК СрокИсполнения,
	|	Таблица.Дата КАК ДатаСоздания,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.СостояниеЗаявки КАК СостояниеЗаявки,
	|	Таблица.Выполнено КАК Выполнено,
	|	Таблица.ТипЗаявкиКабинетСотрудника КАК ТипЗаявкиКабинетСотрудника
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявка
	|		ПО Таблица.Ссылка = Заявка.Задание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	Заявка.Номер ЕСТЬ NULL
	|	И НЕ Таблица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ФИО ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовыйДокумент = Документы.ЗаявкаПрежняяВерсияКабинетСотрудника.СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка, "Задание,Организация,ФизическоеЛицо,ДатаСоздания,СрокИсполнения,ИдентификаторЗаявки");
			НовыйДокумент.Дата = Выборка.ДатаСоздания;
			НовыйДокумент.Сотрудник = КадровыйУчет.ОсновнойСотрудникФизическогоЛица(НовыйДокумент.ФизическоеЛицо, НовыйДокумент.Организация, НовыйДокумент.ДатаСоздания);
			НовыйДокумент.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы;
			
			Если Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Выполнена Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
			ИначеЕсли Выборка.СостояниеЗаявки = Перечисления.СостоянияЗаявокКабинетСотрудника.Отказ Тогда
				Выполнена = Истина;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена;
			Иначе
				Выполнена = Ложь;
				РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.ПустаяСсылка();
			КонецЕсли;
			НовыйДокумент.Выполнена = Выполнена;
			НовыйДокумент.РезультатВыполнения = РезультатВыполнения;
			
			НовыйДокумент.УстановитьНовыйНомер();
			НовыйДокумент.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйДокумент);
			
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамДСВПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.БизнесПроцессы.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.Реквизиты.УдержаниеДСВ.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ЗаявкиСотрудников.ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Заявки.Ссылка КАК Заявка,
	|	Таблица.УдержаниеДСВ КАК ДокументПоЗаявке
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|			ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|		ПО Таблица.Ссылка = Заявки.Задание
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|	И НЕ Таблица.УдержаниеДСВ В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(Таблица.УдержаниеДСВ) В (&ДопустимыеТипы)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;


КонецПроцедуры

Процедура ЗаполнитьДокументыПоЗаявкамОтсутствияПрежнейВерсии(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ПустыеЗначенияДокументПоЗаявке = Новый Массив;
	ПустыеЗначенияДокументПоЗаявке.Добавить(Неопределено);
	ПустыеЗначенияДокументПоЗаявке.Добавить(Null);
	Для Каждого ТипДокументПоЗаявке Из Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ТабличныеЧасти.Отсутствия.Реквизиты.Отсутствие.Тип.Типы() Цикл
		ПустыеЗначенияДокументПоЗаявке.Добавить(ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипДокументПоЗаявке).ПустаяСсылка());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустыеЗначенияДокументПоЗаявке", ПустыеЗначенияДокументПоЗаявке);
	Запрос.УстановитьПараметр("ДопустимыеТипы", ЗаявкиСотрудников.ДопустимыеТипыДокументовПоЗаявкам());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Таблица.Ссылка КАК Задание,
	|	Заявки.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ВТЗаявкиКОбработке
	|ИЗ
	|	Документ.ЗаявкаПрежняяВерсияКабинетСотрудника КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаОтсутствие КАК Таблица
	|		ПО Заявки.Задание = Таблица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|		ПО Заявки.Ссылка = ДокументыПоЗаявкам.Заявка
	|ГДЕ
	|	ДокументыПоЗаявкам.НеподтвержденнаяЗапись ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявки.Заявка КАК Заявка,
	|	ДокументыПоЗаявке.Отсутствие КАК ДокументПоЗаявке
	|ИЗ
	|	ВТЗаявкиКОбработке КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаОтсутствие.Отсутствия КАК ДокументыПоЗаявке
	|		ПО Заявки.Задание = ДокументыПоЗаявке.Ссылка
	|ГДЕ
	|	НЕ ДокументыПоЗаявке.Отсутствие В (&ПустыеЗначенияДокументПоЗаявке)
	|	И ТИПЗНАЧЕНИЯ(ДокументыПоЗаявке.Отсутствие) В (&ДопустимыеТипы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заявка,
	|	ДокументПоЗаявке";
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Заявка") Цикл
			НаборЗаписей = РегистрыСведений.ДокументыПоЗаявкамКабинетСотрудника.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Выборка.Заявка);
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЦикла;
	Иначе
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Процедура УстановитьНовуюФотографию(Форма) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФотографииФизическихЛиц");
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Форма.Объект.ФизическоеЛицо);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ФотографииФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Форма.Объект.ФизическоеЛицо);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Форма.Объект.ФизическоеЛицо;
		ЗаписьНабора.Фотография 	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресНовойФотографии));
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнитьФайлыОтветаЗаявокДляВыгрузки(Заявки, ТипДанных, ТаблицаФайлов) Экспорт
	
	Если ТипДанных = Тип("ДокументСсылка.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудника") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заявки", Заявки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Заявка,
		|	Файлы.Ссылка КАК ФайлЗаявки
		|ИЗ
		|	Справочник.ЗаявкаСправкаОстаткиОтпусковКабинетСотрудникаПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ФайлОтвета
		|	И Файлы.ВладелецФайла В(&Заявки)
		|	И НЕ Файлы.ПометкаУдаления";
		ТаблицаФайловОтвета = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаФайловОтвета, ТаблицаФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	
	Возврат СтруктураПредприятия;

КонецФункции

Функция ПодписанныеФайлыЗаявок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявки
	|ИЗ
	|	Документ.ЗаявкаСправкаСМестаРаботыКабинетСотрудника КАК Заявки
	|ГДЕ
	|	НЕ Заявки.Выполнена
	|	И НЕ Заявки.ПометкаУдаления
	|	И Заявки.ВариантФормированияФайлаОтвета = ЗНАЧЕНИЕ(Перечисление.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.Ссылка КАК Заявка,
	|	ПрисоединенныеФайлы.Ссылка КАК Файл
	|ИЗ
	|	Справочник.ЗаявкаСправкаСМестаРаботыКабинетСотрудникаПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаявки КАК Заявки
	|		ПО ПрисоединенныеФайлы.ВладелецФайла = Заявки.Ссылка
	|ГДЕ
	|	НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоединенныеФайлы.ПодписанЭП";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТипЗаявкаСотрудникаСправкаСМестаРаботы() Экспорт

	Возврат Тип("ДокументСсылка.ЗаявкаСправкаСМестаРаботыКабинетСотрудника");

КонецФункции

Функция ЗаявкаВыполненаАвтоматически(ЗаявкаОбъект) Экспорт

	Если ТипЗнч(ЗаявкаОбъект) <> Тип("ДокументОбъект.ЗаявкаСправкаСМестаРаботыКабинетСотрудника") Тогда
		Возврат Ложь;
	ИначеЕсли ЗаявкаОбъект.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлДляВыводаНаПринтер
		И ЗначениеЗаполнено(ЗаявкаОбъект.ВидСправки) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ФормироватьСправкуАвтоматически = МодульСамообслуживаниеСотрудников.ФормироватьСправкуАвтоматически(ЗаявкаОбъект.ВидСправки);
			Если ФормироватьСправкуАвтоматически Тогда
				Возврат ЗаявкаНаСправкуВыполненаАвтоматически(ЗаявкаОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ЗаявкаНаСправкуВыполненаАвтоматически(ЗаявкаОбъект)
	
	МодульСамообслуживаниеСотрудников = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.КадровыеДанные = "Организация,ВидСобытия";
	ПараметрыПолучения.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаявкаОбъект.ФизическоеЛицо);
	ПараметрыПолучения.ОкончаниеПериода = ЗаявкаОбъект.Дата;
	
	КадровыеДанные = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолучения);
	КадровыеДанные.Индексы.Добавить("ФизическоеЛицо,Организация");
	
	Отбор = Новый Структура("ФизическоеЛицо,Организация", ЗаявкаОбъект.ФизическоеЛицо, ЗаявкаОбъект.Организация);
	НайденныеСтроки = КадровыеДанные.НайтиСтроки(Отбор);
	
	СотрудникиФизическогоЛица = Новый Массив;
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
		Если СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			Продолжить;
		КонецЕсли;
		СотрудникиФизическогоЛица.Добавить(СтрокаТЗ.Сотрудник);
	КонецЦикла;
	
	Если СотрудникиФизическогоЛица.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПолученияСправок = МодульСамообслуживаниеСотрудников.НовыеПараметрыПолученияСправок();
	СтрокаТаблицыПараметров = ПараметрыПолученияСправок.Добавить();
	СтрокаТаблицыПараметров.ИдентификаторЗапроса 	= ЗаявкаОбъект.ИдентификаторЗаявки;
	СтрокаТаблицыПараметров.ФизическоеЛицо 			= ЗаявкаОбъект.ФизическоеЛицо;
	СтрокаТаблицыПараметров.Организация 			= ЗаявкаОбъект.Организация;
	СтрокаТаблицыПараметров.ВидСправки 				= ЗаявкаОбъект.ВидСправки;
	СтрокаТаблицыПараметров.ДатаАктуальности 		= ЗаявкаОбъект.Дата;
	ТабличныеДокументыСправок = 
		МодульСамообслуживаниеСотрудников.ПечатныеФормыПредоставляемыхСотрудникамСправок(ПараметрыПолученияСправок);
	
	ТабличныйДокументСправки = ТабличныеДокументыСправок.Найти(ЗаявкаОбъект.ИдентификаторЗаявки, "ИдентификаторЗапроса").Результат.ТабличныйДокумент;
	
	НачатьТранзакцию();
	Попытка
		
		Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
			
			ДанныеПечатнойФормы = КадровыйЭДОВызовСервера.ДобавитьПечатнуюФорму(
				ТабличныйДокументСправки,
				ЗаявкаОбъект.Ссылка,
				Документы.ЗаявкаСправкаСМестаРаботыКабинетСотрудника.ИдентификаторПечатнойФормы(),
				НСтр("ru = 'Справка с места работы';
					|en = 'Справка с места работы'"),
				ЗаявкаОбъект.Организация,
				ЗаявкаОбъект.ФизическоеЛицо);
			
			ФайлОтветаПоЗаявке = ДанныеПечатнойФормы.ФайлОбъекта.ПолучитьОбъект();
			ФайлОтветаПоЗаявке.ФайлОтвета = Истина;
			ФайлОтветаПоЗаявке.Записать();
			
			РегистрыСведений.ЗапланированныеДействияСФайламиДокументовКЭДО.ЗарегистрироватьОбработкуФайлов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПечатнойФормы.ФайлОбъекта),
				Перечисления.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников);
			
		Иначе
			
			Поток = Новый ПотокВПамяти();
			ТабличныйДокументСправки.Записать(Поток, КадровыйЭДОВызовСервера.ТипФайлаЭлектронногоДокумента());
			ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание, ФайлОтвета");
			ПараметрыФайла.ВладелецФайлов 		= ЗаявкаОбъект.Ссылка;
			ПараметрыФайла.ИмяБезРасширения 	= НСтр("ru = 'Справка с места работы';
														|en = 'Справка с места работы'");
			ПараметрыФайла.РасширениеБезТочки 	= "pdf";
			ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
			ПараметрыФайла.Служебный 	= Истина;
			ПараметрыФайла.ФайлОтвета 	= Истина;
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресХранилища);
			ЗаявкиСотрудников.СоздатьДокументКЭДОСправкаСотруднику(ЗаявкаОбъект.Организация, ЗаявкаОбъект.ФизическоеЛицо, ЗаявкаОбъект.Ссылка, ПрисоединенныйФайл, Истина);
			
		КонецЕсли;
		
		ЗаявкаОбъект.Комментарий = НСтр("ru = 'Заявка выполнена автоматически.';
										|en = 'Заявка выполнена автоматически.'");
		Результат = Новый Структура("РезультатВыполнения,Исполнитель");
		Результат.РезультатВыполнения 	= Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена;
		Результат.Исполнитель 			= "";
		ЗаявкаОбъект.ДополнительныеСвойства.Вставить("РезультатВыполненияЗаявки", Результат);
		ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Ошибка автоматического выполнения заявки сотрудника';
								|en = 'Ошибка автоматического выполнения заявки сотрудника'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон("%1: %2%3%4", ТекстСообщения, Строка(ЗаявкаОбъект.Ссылка), Символы.ПС, ПодробноеПредставлениеОшибки);
		ЗаписьЖурналаРегистрации(ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти