#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ИмяФлажка = СЭДОФССКлиентСервер.ИмяФлажкаПоказыватьТекущиеДелаПоСЭДО();
	Если Не Параметры.Свойство(ИмяФлажка) Тогда
		ПоказыватьТекущиеДелаПоСЭДО = ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
			И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
			И Не ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
			И ЕстьПравоОбмена()
			И РегистрыСведений.ПользователиСЭДО.ПоказыватьТекущиеДелаПоСЭДО()
			И ЕстьТекущиеДела();
		Параметры.Вставить(ИмяФлажка, ПоказыватьТекущиеДелаПоСЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Документы.ВходящийЗапросФССДляРасчетаПособия.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.УведомлениеОСтатусеВыплатыПособия.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.УведомлениеОбИзмененииРасчетаПособия.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.2";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c29fbbf1-fe70-11ea-80e6-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей извещений ФСС в непоставляемые (пользовательские) профили групп доступа.';
										|en = 'Adding SSF notification roles to non-supplied (user) access group profiles.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.75";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("e39137c3-251e-11ec-80fd-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ИзвещениеФСС.ЗаполнитьВидИзвещений";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение вида извещений ФСС.';
										|en = 'Fill in SSF notification kind.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.76";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c088ea52-25e8-11ec-80fd-4cedfb43b11a");
	Обработчик.Процедура       = "Документы.ИзвещениеФСС.ЗаполнитьТаблицуФизическихЛицИзвещений";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение таблицы доступа к извещениям ФСС.';
										|en = 'Fill in the table to access SSF notifications.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ecd45cb0-7a0f-11ec-83fa-bd5234e4af55");
	Обработчик.Процедура       = "СЭДОФСС.ПовторноОбработатьВходящиеСообщенияСЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Повторная обработка входящих сообщений ФСС СЭДО.';
										|en = 'Reprocessing of incoming SSF EDI messages.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.59";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("05351de9-aea3-11ec-843d-ee46f4145caa");
	Обработчик.Процедура       = "СЭДОФСС.ИсправитьВидПособияВДокументах";
	Обработчик.Комментарий     = НСтр("ru = 'Исправление вида пособия в документах СЭДО ФСС.';
										|en = 'Correct the benefit kind in EDI SSF documents.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.59";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1911c92b-011d-11ed-8108-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФСС.ПовторноОбработатьРегистрацииОтветовНаЗапросыФССДляРасчетаПособий";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление статусов регистраций ответов на запросы ФСС для расчета пособий.';
										|en = 'Update registration statuses of responses to SSF requests for benefit calculation.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.59";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("6a0efb0f-d77d-11ec-8107-5cf3709cf896");
	Обработчик.Процедура       = "Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.АдаптироватьКУчетуСЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Адаптация документов ""Уведомление о прекращении отпуска по уходу за ребенком"" к учету СЭДО.';
										|en = 'Customize the ""Notification of termination of the child care leave"" documents to EDI accounting.'");
	
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СНИЛСВходящихСообщенийСЭДО.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.6";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("6e9292e6-aede-11ed-8111-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФСС.ПовторноОбработатьНесоответствияСведенийОЗастрахованномЛице";
	Обработчик.Комментарий     = НСтр("ru = 'Индексация несоответствий сведений о застрахованных лицах (СЭДО).';
										|en = 'Index mismatches of information on insured persons (EDI).'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.77";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("41074ee5-3216-11ee-8117-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.ПользователиСЭДО.ЗаполнитьПоПрикладнымДокументам";
	Обработчик.Комментарий     = НСтр("ru = 'Индексация ответственных СЭДО СФР по данным документов.';
										|en = 'Index persons responsible of EDI of Social Insurance Fund of Russia by document data.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.30.80";
	Обработчик.РежимВыполнения 	= "Отложенно";
	Обработчик.Идентификатор 	= Новый УникальныйИдентификатор("9231740f-2130-4972-a080-9977e03d245a");
	Обработчик.Процедура 		= "Документы.ОтветНаЗапросФССДляРасчетаПособия.ОбновитьДанныеПодписи";
	Обработчик.Комментарий 		= НСтр("ru = 'Заполнение должности и основания подписи в документах «Ответ на запрос СФР для расчета пособия».';
											|en = 'Заполнение должности и основания подписи в документах «Ответ на запрос СФР для расчета пособия».'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.30.121";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("134acb5a-b2f1-11ef-8140-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов.ОбновитьСостоянияНеСоовпадающиеСДокументом";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение состояния регистраций заявлений о возмещении выплат родителям детей инвалидов (СЭДО).';
										|en = 'Заполнение состояния регистраций заявлений о возмещении выплат родителям детей инвалидов (СЭДО).'");
	
КонецПроцедуры

// Добавляет роли извещений ФСС в непоставляемые (пользовательские) профили групп доступа.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьРолиИзвещенийВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей("СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ДобавлениеИзменениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ЧтениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Повторно загружает входящие сообщения ФСС СЭДО.
//
// Параметры:
//   ПараметрыОбновления - Структура, Неопределено - Параметры отложенного обновления.
//   ТипыЧислом - Число, Массив, Неопределено
//   Идентификаторы - Строка, Массив, Неопределено
//   Страхователи - СправочникСсылка.Организации, Массив, Неопределено
//
Процедура ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления = Неопределено, ТипыЧислом = Неопределено, Идентификаторы = Неопределено, Страхователи = Неопределено) Экспорт
	Запрос = ЗапросПоВходящимСообщениямСЭДО(ТипыЧислом, Идентификаторы, Страхователи);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПовторноОбработатьВходящееСообщениеСЭДО(Выборка, Выборка.Содержимое.Получить());
	КонецЦикла;
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПовторноОбработатьВходящееСообщениеСЭДО(Выборка, ТекстСообщения) Экспорт
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Сообщение = Новый Структура(
		"ТекстСообщения,
		|Идентификатор,
		|Организация,
		|Содержимое,
		|Дата,
		|ДатаЗагрузки,
		|ДатаОтправкиПодтверждения,
		|ДатаПолученияИзвещенияОПолученииПодтверждения,
		|ДатаПолученияОшибкиПодтверждения,
		|ДатаСоздания,
		|Новое,
		|ОшибкаОбработкиСообщения,
		|ОшибкаПодтверждения,
		|ПодтверждениеОтправлено,
		|Получатель,
		|Тип,
		|ТребуетсяПодтверждение,
		|СрокДействия");
	ЗаполнитьЗначенияСвойств(Сообщение, Выборка);
	Если ТипЗнч(Сообщение.Тип) = Тип("Число") Тогда
		Сообщение.Тип = Формат(Сообщение.Тип, "ЧН=; ЧГ=");
	КонецЕсли;
	Сообщение.ТекстСообщения = ТекстСообщения;
	Возврат ЭлектронныйДокументооборотСФСС.ПриПолученииСодержимогоСообщенияСЭДО(Сообщение.Организация, Сообщение);
КонецФункции

// Исправляет вид пособия в документах СЭДО ФСС.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ИсправитьВидПособияВДокументах(ПараметрыОбновления = Неопределено) Экспорт
	Ежемесячное    = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком;
	Единовременное = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящийЗапросФСС.Ссылка КАК Ссылка,
	|	ВходящийЗапросФСС.ВидПособия КАК ВидПособия,
	|	ЕСТЬNULL(ВходящиеСообщенияСЭДОФСС.Содержимое, НЕОПРЕДЕЛЕНО) КАК Содержимое
	|ИЗ
	|	Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|		ПО ВходящийЗапросФСС.ИдентификаторСообщения = ВходящиеСообщенияСЭДОФСС.Идентификатор
	|ГДЕ
	|	ВходящийЗапросФСС.ВидПособия = &Ежемесячное";
	Запрос.УстановитьПараметр("Ежемесячное", Ежемесячное);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.Содержимое) = Тип("ХранилищеЗначения") Тогда
			ТекстXML = СериализацияБЗК.СтрокаXMLИзХранилищаЗначения(Выборка.Содержимое);
		Иначе
			ТекстXML = Неопределено;
		КонецЕсли;
		Если ТекстXML <> Неопределено
			И СтрНайти(НРег(ТекстXML), НРег("benefit4Approve")) = 0 Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидПособия = Единовременное;
		ЗаписатьДокумент(ДокументОбъект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветНаЗапросФСС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтветНаЗапросФССДляРасчетаПособия КАК ОтветНаЗапросФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящийЗапросФССДляРасчетаПособия КАК ВходящийЗапросФСС
	|		ПО ОтветНаЗапросФСС.ВходящийЗапрос = ВходящийЗапросФСС.Ссылка
	|			И (ВходящийЗапросФСС.ВидПособия = &Ежемесячное)
	|ГДЕ
	|	ОтветНаЗапросФСС.ВидПособия = &Ежемесячное
	|	И ВходящийЗапросФСС.ВидПособия ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Ежемесячное", Ежемесячное);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ВидПособия = Единовременное;
		ЗаписатьДокумент(ДокументОбъект);
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

// Повторно рассчитывает статус в регистрациях ответов на запросы ФСС для расчета пособий.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ПовторноОбработатьРегистрацииОтветовНаЗапросыФССДляРасчетаПособий(ПараметрыОбновления = Неопределено) Экспорт
	ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, 105);
КонецПроцедуры

// Индексация несоответствий сведений о застрахованных лицах.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ПовторноОбработатьНесоответствияСведенийОЗастрахованномЛице(ПараметрыОбновления = Неопределено) Экспорт
	ПовторноОбработатьВходящиеСообщенияСЭДО(ПараметрыОбновления, 88);
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодписиДокументовСЭДО(ПараметрыОбновления, ИмяДокумента, ОписаниеПодписей) Экспорт

	ОбновлениеВыполнено = Истина;
	Префикс = "Документ.";
	ИменаРеквизитов = ОписаниеПодписей[0];

	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.ОрганизацияДокумента КАК Организация,
		|	Документ.Дата КАК Дата,
		|	Документ.Подписант КАК ФизическоеЛицо
		|ИЗ
		|	&Документ КАК Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО Документ.Подписант = ФизическиеЛица.Ссылка
		|ГДЕ
		|	Документ.Проведен
		|	И Документ.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&Документ", Префикс + ИмяДокумента);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "Должность", ИменаРеквизитов.Должность);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "Подписант", ИменаРеквизитов.ФизическоеЛицо);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ОрганизацияДокумента", ИменаРеквизитов.Организация);

	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФизическоеЛицо);
			ДанныеПодписи = ПодписиДокументов.ОснованияПолномочийФизическихЛиц(Выборка.Организация, ФизическиеЛица, Выборка.Дата);
			ДанныеПодписи = ДанныеПодписи.Получить(Выборка.ФизическоеЛицо);
			Если ДанныеПодписи <> Неопределено Тогда 
				ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектДокумента[ИменаРеквизитов.Должность] = ДанныеПодписи.Должность;
				ОбъектДокумента[ИменаРеквизитов.ОснованиеПодписи] = ДанныеПодписи.ОснованиеПодписи;
				ОбъектДокумента.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			КонецЕсли;
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбновлениеВыполнено);

КонецПроцедуры

Функция ЗапросПоВходящимСообщениямСЭДО(ТипыЧислом = Неопределено, Идентификаторы = Неопределено, Страхователи = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения КАК ДатаОтправкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения КАК ДатаПолученияИзвещенияОПолученииПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения КАК ДатаПолученияОшибкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания,
	|	ВходящиеСообщенияСЭДОФСС.Новое КАК Новое,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаОбработкиСообщения КАК ОшибкаОбработкиСообщения,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаПодтверждения КАК ОшибкаПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ПодтверждениеОтправлено КАК ПодтверждениеОтправлено,
	|	ВходящиеСообщенияСЭДОФСС.Получатель КАК Получатель,
	|	ВходящиеСообщенияСЭДОФСС.Тип КАК Тип,
	|	ВходящиеСообщенияСЭДОФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВходящиеСообщенияСЭДОФСС.СрокДействия КАК СрокДействия
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Тип В (&Типы)
	|	И ВходящиеСообщенияСЭДОФСС.Идентификатор В (&Идентификаторы)
	|	И ВходящиеСообщенияСЭДОФСС.Организация В (&Страхователи)
	|	И (ВходящиеСообщенияСЭДОФСС.Дата >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения >= &Дата
	|			ИЛИ ВходящиеСообщенияСЭДОФСС.ДатаСоздания >= &Дата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ДатаЗагрузки,
	|	ДатаСоздания";
	Если ТипыЧислом <> Неопределено Тогда
		Запрос.УстановитьПараметр("Типы", ТипыЧислом);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВходящиеСообщенияСЭДОФСС.Тип В (&Типы)", "ИСТИНА");
	КонецЕсли;
	Если Идентификаторы <> Неопределено Тогда
		Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящиеСообщенияСЭДОФСС.Идентификатор В (&Идентификаторы)", "");
	КонецЕсли;
	Если Страхователи <> Неопределено Тогда
		Запрос.УстановитьПараметр("Страхователи", Страхователи);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВходящиеСообщенияСЭДОФСС.Организация В (&Страхователи)", "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Дата", ДатаНачалаПроактивныхВыплат());
	Возврат Запрос;
КонецФункции

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ВходящийЗапросФССДляРасчетаПособия);
	СписокОбъектов.Добавить(Документы.ЗапросСтатусовВыплатыПособия);
	СписокОбъектов.Добавить(Документы.ЗапросСреднегоЗаработкаСЭДО);
	СписокОбъектов.Добавить(Документы.ИзвещениеФСС);
	СписокОбъектов.Добавить(Документы.ИсходящееСообщениеОСтраховомСлучаеФСС);
	СписокОбъектов.Добавить(Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО);
	СписокОбъектов.Добавить(Документы.ОтветНаЗапросФССДляРасчетаПособия);
	СписокОбъектов.Добавить(Документы.РегистрацияСведенийОЗастрахованномЛицеФСС);
	СписокОбъектов.Добавить(Документы.СведенияОЗастрахованномЛицеФСС);
	СписокОбъектов.Добавить(Документы.СреднийЗаработокСЭДО);
	СписокОбъектов.Добавить(Документы.СтатусыВыплатыПособия);
	СписокОбъектов.Добавить(Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов);
	СписокОбъектов.Добавить(Документы.УведомлениеОСтатусеВыплатыПособия);
	СписокОбъектов.Добавить(Документы.УведомлениеОбИзмененииРасчетаПособия);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "48b47e89-54a2-11ec-8100-4cedfb43b11a", Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "829471fe-7414-11ef-8138-4cedfb43b11a", Метаданные.Документы.ЗапросСтатусовВыплатыПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "2190cfee-faf9-11ed-8115-4cedfb43b11a", Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0c61029e-9609-11ea-80e1-4cedfb43b11a", Метаданные.Документы.ИзвещениеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "a9c3dc60-c572-11ec-8106-4cedfb43b11a", Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0f591356-b04f-11ed-8111-4cedfb43b11a", Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "3c0f230e-76f6-11ec-8101-4cedfb43b11a", Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d0521718-58eb-11ec-8100-4cedfb43b11a", Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "006d287a-462c-11ec-8100-4cedfb43b11a", Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "abc8313a-0487-11ee-8117-4cedfb43b11a", Метаданные.Документы.СреднийЗаработокСЭДО);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0b005829-750e-11ef-8138-4cedfb43b11a", Метаданные.Документы.СтатусыВыплатыПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "647e8b4c-5994-11ef-812d-4cedfb43b11a", Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "a0cb962b-6ad1-11ef-8138-4cedfb43b11a", Метаданные.Документы.УведомлениеОСтатусеВыплатыПособия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "f1bc7a91-c3fa-472f-a6e8-4cedfb43b11a", Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(Документы.ИзвещениеФСС);
	Обработчики.Добавить(Документы.ВходящийЗапросФССДляРасчетаПособия);
	Обработчики.Добавить(Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов);
	Обработчики.Добавить(Документы.УведомлениеОСтатусеВыплатыПособия);
	Обработчики.Добавить(РегистрыСведений.ЗастрахованныеЛицаСЭДО);
	Обработчики.Добавить(Обработки.ОбщиеФормыСЭДОФСС);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	Для Каждого Уведомление Из Уведомления Цикл
		
		ТипСообщения = Число(Уведомление.Тип);
		
		Если ТипСообщения = 10 Тогда
			// Извещение из системы "Прямые выплаты страхового обеспечения".
			Документы.ИзвещениеФСС.ЗагрузитьУведомлениеОНаличииСообщения10(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 100 Тогда
			// Запрос на проверку, подтверждение, корретировку сведений проактивной выплаты страхового обеспечения.
			Документы.ВходящийЗапросФССДляРасчетаПособия.ЗагрузитьУведомлениеОНаличииСообщения100(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 107 Тогда
			// Уведомление об изменении расчета пособия.
			Документы.УведомлениеОбИзмененииРасчетаПособия.ЗагрузитьУведомлениеОНаличииСообщения107(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 110 Тогда
			// Уведомление об изменении статусов выплат.
			Документы.УведомлениеОСтатусеВыплатыПособия.ЗагрузитьУведомлениеОНаличииСообщения110(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 122 Тогда
			// Отказ в возмещении выплат родителям детей инвалидов.
			Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьУведомлениеОНаличииСообщения122(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	Кэш = Новый Соответствие;
	
	ТипСообщения = Число(Сообщение.Тип);
	ИдентификаторСообщения = НРег(СокрЛП(Сообщение.Идентификатор));
	ТребуетсяПодтверждение = ОбщегоНазначенияБЗК.ЗначениеСвойства(Сообщение, "ТребуетсяПодтверждение");
	Если ТипЗнч(ТребуетсяПодтверждение) <> Тип("Булево") Тогда
		ВходящееСообщение = ВходящееСообщение(ИдентификаторСообщения);
		ТребуетсяПодтверждение = ВходящееСообщение.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если ТипСообщения = 10 Тогда
		// Извещение из системы "Прямые выплаты страхового обеспечения".
		Документы.ИзвещениеФСС.ЗагрузитьСообщение10(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 85 Тогда
		// Ответ на получение статусы выплаты.
		РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий.ЗагрузитьСообщение85(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 87 Тогда
		// Результат регистрации сведений о застрахованном лице.
		Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ЗагрузитьСообщение87(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 88 Тогда
		// Информация о несоответствии сведений о застрахованном лице.
		Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО.ЗагрузитьСообщение88(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 100 Тогда
		// Запрос на проверку, подтверждение, корретировку сведений проактивной выплаты страхового обеспечения.
		Документы.ВходящийЗапросФССДляРасчетаПособия.ЗагрузитьСообщение100(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			ТребуетсяПодтверждение,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 105 Тогда
		// Результат ответа на запрос сведений для расчета и выплаты пособия ФСС.
		РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗагрузитьСообщение105(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 106 Тогда
		// Результат уведомления о прекращении отпуска по уходу за ребенком до полутора лет.
		РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.ЗагрузитьСообщение106(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 107 Тогда
		// Уведомление об изменении расчета пособия.
		Документы.УведомлениеОбИзмененииРасчетаПособия.ЗагрузитьСообщение107(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			ТребуетсяПодтверждение,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 110 Тогда
		// Уведомление об изменении статусов выплат.
		Документы.УведомлениеОСтатусеВыплатыПособия.ЗагрузитьСообщение110(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			ТребуетсяПодтверждение,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 111 Тогда
		// Уведомление об изменении ЭЛН.
		РегистрыСведений.СведенияОбЭЛН.ЗагрузитьСообщение111(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 112 Тогда
		// Результат обработки сообщения о информировании Фонда о жизненных событиях.
		РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.ЗагрузитьСообщение112(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 121 Тогда
		// Результат обработки сообщения о информировании Фонда о жизненных событиях.
		РегистрыСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьСообщение121(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 122 Тогда
		// Отказ в возмещении выплат родителям детей инвалидов.
		Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьСообщение122(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	ИначеЕсли ТипСообщения = 321 Тогда
		// Результат обработки запроса страхователя о получении от Фонда сведений о заработной плате застрахованного лица.
		РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.ЗагрузитьСообщение321(
			Страхователь,
			ИдентификаторСообщения,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	КонецЕсли;
	
	МодульРасширеннойРеализации = МодульРасширеннойРеализации();
	Если МодульРасширеннойРеализации <> Неопределено Тогда
		МодульРасширеннойРеализации.ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат, Кэш);
	КонецЕсли;
	
	СНИЛСВФорматеФСС = ОбщегоНазначенияБЗК.ЗначениеСвойства(Сообщение, "СНИЛС");
	Если ЗначениеЗаполнено(СНИЛСВФорматеФСС) Тогда
		СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СНИЛСВФорматеФСС);
		// Результат обработки сообщения о информировании ФСС о жизненных событиях.
		РегистрыСведений.СНИЛСВходящихСообщенийСЭДО.ПослеРасшифровкиСообщенияСЭДОСоСНИЛС(
			Страхователь,
			ТипСообщения,
			ИдентификаторСообщения,
			СНИЛС,
			Кэш);
	КонецЕсли;
	
	// Добавление шапки и подвала в текст ошибки для более полного анализа.
	Если Результат.ОшибкаОбработки И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Отступ = Символы.ПС + "    ";
		ТелоОшибкиСОтступом = СтрЗаменить(Результат.ОписаниеОшибки, Символы.ПС, Отступ);
		ТекстXMLСОтступом = СтрЗаменить(СтрЗаменить(Сообщение.ТекстСообщения, "<", Отступ + "<"), Отступ + "</", "</");
		Результат.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка обработки сообщения %1 с идентификатором %2:
			|    %3
			|XML-текст сообщения:%4
			|
			|';
			|en = 'Error processing message %1 with ID %2:
			|    %3
			|XML message text:%4
			|
			|'"),
			ТипСообщения,
			ИдентификаторСообщения,
			СокрП(ТелоОшибкиСОтступом),
			ТекстXMLСОтступом);
	КонецЕсли;
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	// Ошибки логического контроля приходят только для исходящих сообщений.
	ТипСообщения = Число(ИсходноеСообщение.Тип);
	
	ТекстОшибки = СокрЛП(ТекстОшибки);
	ИзвлечьФрагментыBase64(ТекстОшибки);
	
	Если ТипСообщения = 84 Тогда
		// Запрос сведений о выплате пособия.
		РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий.ЗагрузитьОшибкуСообщения84(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 86 Тогда
		// Сведения о застрахованном лице.
		Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ЗагрузитьОшибкуСообщения86(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 101 Тогда
		// Ответ на запрос ФСС для расчета пособий.
		РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий.ЗагрузитьОшибкуСообщения101(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 104 Тогда
		// Уведомление о прекращении отпуска по уходу за ребенком до полутора лет.
		РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком.ЗагрузитьОшибкуСообщения104(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 109 Тогда
		// Исходящее сообщение о страховом случае ФСС.
		РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.ЗагрузитьОшибкуСообщения109(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 120 Тогда
		// Заявление о возмещении выплат родителям детей-инвалидов.
		РегистрыСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьОшибкуСообщения120(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 320 Тогда
		// Запрос сведений СФР о среднем заработке.
		РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО.ЗагрузитьОшибкуСообщения320(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОтветаНаПодтверждениеОПрочтении.
Процедура ПослеПолученияОтветаНаПодтверждениеОПрочтении(Страхователь, РезультатыПодтверждений, Результат) Экспорт
	УстановитьПривилегированныйРежим(Истина); // Загружаются все входящие документы.
	
	// Вызывается при получении сообщения с типом 11 в ответ на подтверждение о прочтении входящего сообщения.
	//   Страхователь - СправочникСсылка.Организации - организация, получатель сообщения.
	//   РезультатыПодтверждений - Массив - массив структур:
	//     * ИдентификаторСообщения - Строка - идентификатор исходного сообщения СЭДО, по которому отправлялось подтверждение.
	//     * Тип                    - Число  - тип исходного сообщения СЭДО, по которому отправлялось подтверждение.
	//     * ТекстОшибки            - Строка - ошибка приема подтверждения.
	//     * ТекстПредупреждения    - Строка - предупреждение приема подтверждения.
	//   Результат - Структура - результат обработки сообщения:
	//     * Обработано      - Булево - признак того, что сообщение было успешно обработано.
	//     * ОшибкаОбработки - Булево - признак того, что при обработке сообщения возникла ошибка.
	//     * ОписаниеОшибки  - Строка - описание ошибки обработки.
	Для Каждого ИсходноеСообщение Из РезультатыПодтверждений Цикл
		
		ТипСообщения = Число(ИсходноеСообщение.Тип);
		Если ТипСообщения = 110 Тогда
			// Уведомление об изменении статусов выплат.
			Документы.УведомлениеОСтатусеВыплатыПособия.ЗагрузитьОтветНаПодтверждениеПолученияСообщения110(
				Страхователь,
				ИсходноеСообщение,
				Результат);
		ИначеЕсли ТипСообщения = 122 Тогда
			// Отказ в возмещении выплат родителям детей инвалидов.
			Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьОтветНаПодтверждениеПолученияСообщения122(
				Страхователь,
				ИсходноеСообщение,
				Результат);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияПодтвержденияДоставкиОператоромСообщенияСЭДО.
Процедура ПослеПолученияПодтвержденияДоставкиОператоромСообщенияСЭДО(Страхователь, ИсходноеСообщение, СтатусПодтверждения, Результат) Экспорт
	
	Сообщение = КоллекцииБЗК.СкопироватьСтруктуру(ИсходноеСообщение);
	Сообщение.Вставить("ДоставленоФонду",   Истина);
	Сообщение.Вставить("ДатаОтправкиФонду", Сообщение.Дата);
	Сообщение.Вставить("ТекстОшибки",       "");
	Сообщение.Вставить("ТипЧислом",         Число(Сообщение.Тип));
	
	ЗагрузитьРезультатДоставкиСообщенияСЭДО(Страхователь, Сообщение, Результат);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО.
Процедура ПослеПолученияОшибкиДоставкиОператоромСообщенияСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	Сообщение = КоллекцииБЗК.СкопироватьСтруктуру(ИсходноеСообщение);
	Сообщение.Вставить("ДоставленоФонду",   Ложь);
	Сообщение.Вставить("ДатаОтправкиФонду", '00010101');
	Сообщение.Вставить("ТекстОшибки",       ТекстОшибки);
	Сообщение.Вставить("ТипЧислом",         Число(Сообщение.Тип));
	
	ЗагрузитьРезультатДоставкиСообщенияСЭДО(Страхователь, Сообщение, Результат);
	
КонецПроцедуры

// Возникает после получения результата доставки сообщения СЭДО от оператора.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//   Сообщение - Структура - данные исходного сообщения:
//     * Идентификатор          - Строка - идентификатор исходного сообщения в форме текстового представления UUID.
//     * Тип                    - Строка - тип исходного сообщения строкой.
//     * ТипЧислом              - Число  - тип исходного сообщения числом.
//     * Дата                   - Дата   - дата отправки исходного сообщения.
//     * ДоставленоФонду        - Булево
//     * ДатаОтправкиФонду      - Дата
//     * ТекстОшибки            - Строка
//     * ТипВзаимодействия      - Число  - 0 до начала хранения реквизита, 2 для страхователя, 3 для МЧД
//                                         для исходного сообщения.
//   Результат - Структура - результат обработки сообщения:
//     * Обработано      - Булево - признак того, что сообщение было успешно обработано.
//     * ОшибкаОбработки - Булево - признак того, что при обработке сообщения возникла ошибка.
//     * ОписаниеОшибки  - Строка - описание ошибки обработки.
//
Процедура ЗагрузитьРезультатДоставкиСообщенияСЭДО(Страхователь, Сообщение, Результат)
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульСЭДОФССРасширенный = ОбщегоНазначения.ОбщийМодуль("СЭДОФССРасширенный");
		МодульСЭДОФССРасширенный.ЗагрузитьРезультатДоставкиСообщенияСЭДО(Страхователь, Сообщение, Результат);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Сообщение.ТипЧислом = 84 Тогда
		// Запрос сведений о выплате пособия.
		Документы.ЗапросСтатусовВыплатыПособия.ЗагрузитьРезультатДоставкиСообщения84(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 86 Тогда
		// Сведения о застрахованном лице.
		Документы.СведенияОЗастрахованномЛицеФСС.ЗагрузитьРезультатДоставкиСообщения86(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 101 Тогда
		// Ответ на запрос ФСС для расчета пособий.
		Документы.ОтветНаЗапросФССДляРасчетаПособия.ЗагрузитьРезультатДоставкиСообщения101(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 104 Тогда
		// Уведомление о прекращении отпуска по уходу за ребенком до полутора лет.
		Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ЗагрузитьРезультатДоставкиСообщения104(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 109 Тогда
		// Исходящее сообщение о страховом случае ФСС.
		Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ЗагрузитьРезультатДоставкиСообщения109(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 120 Тогда
		// Заявление о возмещении выплат родителям детей-инвалидов.
		Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.ЗагрузитьРезультатДоставкиСообщения120(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 320 Тогда
		// Запрос сведений СФР о среднем заработке.
		Документы.ЗапросСреднегоЗаработкаСЭДО.ЗагрузитьРезультатДоставкиСообщения320(
			Страхователь,
			Сообщение,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

// Возникает сразу после отправки документа в Фонд (синхронный вызов).
//
// Параметры:
//   РезультатОтправки - Структура
//     Поля для изменения:
//       * ЗначениеРасшифровки    - Произвольный
//       * Измененные             - Массив
//     Поля для чтения:
//       * Ссылка                 - ДокументСсылка
//       * Страхователь           - СправочникСсылка.Организации
//       * ГоловнаяОрганизация    - СправочникСсылка.Организации
//       * ТекстОшибки            - Строка
//       * ИдентификаторСообщения - Строка
//       * ИдентификаторПакета    - Строка
//       * ОбменЧерезОператора    - Булево
//       * ОтправленоОператору    - Булево
//       * Успех                  - Булево
//       * ДоставленоФонду        - Булево
//       * ДатаОтправки           - Дата
//       * ДатаОтправкиОператору  - Дата
//       * ДатаОтправкиФонду      - Дата
//     Служебные поля:
//       * ПолноеИмяДокумента     - Строка
//
Процедура ЗарегистрироватьНепосредственныйРезультатОтправкиДокумента(РезультатОтправки) Экспорт
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РезультатОтправки.ПолноеИмяДокумента);
	Менеджер.ЗарегистрироватьРезультатОтправки(РезультатОтправки);
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия, Истина);
	Списки.Вставить(Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.ЗапросСтатусовВыплатыПособия, Истина);
	Списки.Вставить(Метаданные.Документы.ИзвещениеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия, Истина);
	Списки.Вставить(Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов, Истина);
	Списки.Вставить(Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОЗастрахованномЛицеФСС, Истина);
	Списки.Вставить(Метаданные.Документы.СреднийЗаработокСЭДО, Истина);
	Списки.Вставить(Метаданные.Документы.СтатусыВыплатыПособия, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОСтатусеВыплатыПособия, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия, Истина);
	
	Списки.Вставить(Метаданные.ЖурналыДокументов.УведомленияОВыплатеПособий, Истина);

	Списки.Вставить(Метаданные.РегистрыСведений.ЗастрахованныеЛицаСЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОтчитывающиесяПоВзносамОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииЗапросовСреднегоЗаработкаСЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииЗапросовСтатусовВыплатыПособий, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СНИЛСВходящихСообщенийСЭДО, Истина);
	
	Списки.Вставить(Метаданные.Справочники.ВходящийЗапросФССДляРасчетаПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗапросСреднегоЗаработкаСЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗапросСтатусовВыплатыПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзвещениеФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ИсходящееСообщениеОСтраховомСлучаеФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.НесоответствиеСведенийОЗастрахованномЛицеСЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтветНаЗапросФССДляРасчетаПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтказВВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОЗастрахованномЛицеФССПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СреднийЗаработокСЭДОПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СтатусыВыплатыПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.УведомлениеОСтатусеВыплатыПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.УведомлениеОбИзмененииРасчетаПособияПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ЗапросСтатусовВыплатыПособия);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ИзвещениеФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.СреднийЗаработокСЭДО);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.СтатусыВыплатыПособия);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.УведомлениеОСтатусеВыплатыПособия);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия);
	
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Метаданные.ЖурналыДокументов.УведомленияОВыплатеПособий);
	
	Регистры = Метаданные.РегистрыСведений;
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.ЗастрахованныеЛицаСЭДО);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.ОтчитывающиесяПоВзносамОрганизации, Ложь, Ложь);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.ОчередьОбработкиКадровыхДанныхФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииЗапросовСреднегоЗаработкаСЭДО);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииЗапросовСтатусовВыплатыПособий, Ложь);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииЗаявленийОВозмещенииВыплатРодителямДетейИнвалидов, Ложь);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииОтветовНаЗапросыФССДляРасчетаПособий);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком);
	ДобавитьОписаниеНаличияОграченияПрав(Описание, Регистры.СНИЛСВходящихСообщенийСЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ЗапросСтатусовВыплатыПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ИзвещениеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"ГоловнаяОрганизация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СведенияОЗастрахованномЛицеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СреднийЗаработокСЭДО.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СтатусыВыплатыПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.УведомлениеОСтатусеВыплатыПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Страхователь");
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ВходящийЗапросФССДляРасчетаПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ЗапросСтатусовВыплатыПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ЗапросСреднегоЗаработкаСЭДО;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ИзвещениеФСС;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ОтветНаЗапросФССДляРасчетаПособия;
	СтрокаТаблицы.Реквизит = "Организация";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.РегистрацияСведенийОЗастрахованномЛицеФСС;
	СтрокаТаблицы.Реквизит = "ГоловнаяОрганизация";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.СведенияОЗастрахованномЛицеФСС;
	СтрокаТаблицы.Реквизит = "Организация";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.СреднийЗаработокСЭДО;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.СтатусыВыплатыПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.УведомлениеОСтатусеВыплатыПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.УведомлениеОбИзмененииРасчетаПособия;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
КонецПроцедуры

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента(БольничныйОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
	Попытка
		Документы.ВходящийЗапросФССДляРасчетаПособия.ПриЗаписиПервичногоДокумента(БольничныйОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ВходящийЗапросФССДляРасчетаПособия.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ЗаявлениеОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ЭДО

// АПК:581-выкл Экспортные методы используются в расширенной подсистеме.

// Возвращает признак наличия прав на обмен с ФСС.
Функция ЕстьПравоОбмена() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналЗапросовКСерверамФСС);
КонецФункции

// Возвращает признак наличия прав на отправку электронных документов в ФСС.
Функция ЕстьПравоОтправки() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ОбщиеФормыСЭДОФСС.Команды.ОтправитьВФонд);
КонецФункции

// Возвращает признак наличия прав на отправку электронных документов в ФСС.
Функция ЕстьПравоПолучения() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ОбщиеФормыСЭДОФСС.Команды.ПолучитьНовыеСообщенияСЭДОФСС);
КонецФункции

// Кидает исключение если функция ЕстьПравоОбмена вернула Ложь.
Процедура ПроверитьНаличиеПраваОбмена() Экспорт
	Если Не ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с СЭДО ФСС.';
							|en = 'Insufficient rights to exchange with SSF EDI.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Проверяет наличие права обмена электронными документами с ФСС.
Функция ДоступенОбменЧерезСЭДО() Экспорт
	// АПК:515-выкл Роль выполняет функцию флажка в библиотеке регламентированной отчетности.
	Возврат Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь);
	// АПК:515-вкл
КонецФункции

// Регистрирует ошибку обработки сообщения.
//
// Параметры:
//   Результат - Структура - Результат обработки сообщения. Передается из параметров переопределяемого метода.
//   ТекстОшибки - Строка - Текст ошибки обработки сообщения.
//   ФрагментXML - Строка - Фрагмент xml при обработке которого возникла ошибка.
//
Процедура ОшибкаОбработки(Результат, ТекстОшибки, ФрагментXML = Неопределено) Экспорт
	Результат.ОшибкаОбработки = Истина;
	Результат.ОписаниеОшибки = Строка(Результат.ОписаниеОшибки) + ТекстОшибки;
	Если ЗначениеЗаполнено(ФрагментXML) Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки
			+ Символы.ПС
			+ СтрШаблон(НСтр("ru = 'Фрагмент XML: %1';
							|en = 'XML snippet: %1'"), ФрагментXML);
	КонецЕсли;
	Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + Символы.ПС;
КонецПроцедуры

// Регистрирует ошибку обработки сообщения по причине отсутствия узла с указанным именем.
Процедура ЗаписатьОшибкуПоискаУзла(Результат, ИмяУзла, ФрагментXML = Неопределено) Экспорт
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти узел ""%1"".';
								|en = 'Cannot find the ""%1"" node.'"), ИмяУзла);
	ОшибкаОбработки(Результат, ТекстОшибки, ФрагментXML);
КонецПроцедуры

// Регистрирует ошибку обработки сообщения по причине незаполненности узла с указанным именем.
Процедура ЗаписатьОшибкуЗаполненностиУзла(Результат, ИмяАтрибута, ФрагментXML = Неопределено) Экспорт
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен узел ""%1"".';
								|en = 'The ""%1"" node is not filled.'"), ИмяАтрибута);
	ОшибкаОбработки(Результат, ТекстОшибки, ФрагментXML);
КонецПроцедуры

// Регистрирует ошибку обработки сообщения по причине отсутствия атрибута с указанным именем.
Процедура ЗаписатьОшибкуПоискаАтрибута(Результат, ИмяАтрибута, ФрагментXML = Неопределено) Экспорт
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Отсутствует атрибут ""%1"".';
								|en = 'The ""%1"" attribute is missing.'"), ИмяАтрибута);
	ОшибкаОбработки(Результат, ТекстОшибки, ФрагментXML);
КонецПроцедуры

// Регистрирует ошибку обработки сообщения по причине незаполненности атрибута с указанным именем.
Процедура ЗаписатьОшибкуЗаполненностиАтрибута(Результат, ИмяАтрибута, ФрагментXML = Неопределено) Экспорт
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен атрибут ""%1"".';
								|en = 'The ""%1"" attribute is not filled.'"), ИмяАтрибута);
	ОшибкаОбработки(Результат, ТекстОшибки, ФрагментXML);
КонецПроцедуры

// Возвращает дату формирования сообщения СЭДО.
Функция ДатаСообщения(ИдентификаторСообщения, Кэш = Неопределено) Экспорт
	Если Кэш <> Неопределено Тогда
		ДатаСообщения = Кэш["ДатаСообщения"];
		Если ДатаСообщения = Неопределено Тогда
			ДатаСообщения = ДатаСообщения(ИдентификаторСообщения);
			Кэш.Вставить("ДатаСообщения", ДатаСообщения);
		КонецЕсли;
		Возврат ДатаСообщения;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	// В регистре сведений ВходящиеСообщенияСЭДОФСС:
	//   ДатаСоздания - Когда получили список входящих,
	//   ДатаЗагрузки - Когда загрузили само сообщение,
	//   Дата - Предполагаемая дата формирования сообщения в СЭДО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	НайденнаяДата      = ТекущаяДатаСеанса();
	НайденноеНачалоДня = НачалоДня(НайденнаяДата);
	Если Выборка.Следующий() Тогда
		ОбновитьДатуСообщения(НайденнаяДата, НайденноеНачалоДня, Выборка.Дата);
		ОбновитьДатуСообщения(НайденнаяДата, НайденноеНачалоДня, Выборка.ДатаЗагрузки);
		ОбновитьДатуСообщения(НайденнаяДата, НайденноеНачалоДня, Выборка.ДатаСоздания);
	КонецЕсли;
	Возврат НайденнаяДата;
КонецФункции

Процедура ОбновитьДатуСообщения(НайденнаяДата, НайденноеНачалоДня, Дата) Экспорт
	Если ЗначениеЗаполнено(Дата)
		И Дата < НайденнаяДата
		И Дата <> НайденноеНачалоДня Тогда
		НайденнаяДата      = Дата;
		НайденноеНачалоДня = НачалоДня(Дата);
	КонецЕсли;
КонецПроцедуры

// АПК:581-вкл

#КонецОбласти

#Область Страхователи

Функция ИспользуетсяУчетСтрахователей() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций");
КонецФункции

// Возвращает сведения об страхователе организации с учетом проектных решений прикладной конфигурации.
//
// Параметры:
//   Организация   - СправочникСсылка.Организации
//   ИменаПолей    - Строка             - Требуемые сведения.
//   ДатаПолучения - Дата, Неопределено - Дата получения сведений.
//
// Возвращаемое значение:
//   Структура
//
Функция СведенияОСтрахователе(Знач Организация, Знач ИменаПолей, Знач ДатаПолучения = Неопределено) Экспорт
	Страхователь = СтраховательОрганизации(Организация, ДатаПолучения);
	Сведения = ЗарплатаКадры.СведенияОбОрганизации(Страхователь, ИменаПолей, ДатаПолучения);
	Сведения.Вставить("Страхователь", Страхователь);
	Возврат Сведения;
КонецФункции

// Возвращает страхователя организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Страхователь ФСС, отчитывающийся за филиал.
//
Функция СтраховательОрганизации(Организация, Знач ДатаПолучения = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация;
	КонецЕсли;
	Страхователь = УчетСтраховыхВзносов.ОтчитывающаясяПоВзносамОрганизация(Организация, ДатаПолучения);
	Возврат ?(ЗначениеЗаполнено(Страхователь), Страхователь, Организация);
КонецФункции

// Для массива организаций возвращает массив страхователей.
//
// Параметры:
//   Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция СтрахователиОрганизаций(Организации, ДатаПолучения = Неопределено) Экспорт
	Результат = Новый Массив;
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		Результат.Добавить(СтраховательОрганизации(Организации, ДатаПолучения));
	ИначеЕсли ТипЗнч(Организации) = Тип("Массив") Тогда
		Для Каждого Организация Из Организации Цикл
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Результат, СтраховательОрганизации(Организация, ДатаПолучения));
		КонецЦикла;
	Иначе
		// Вызов исключения.
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СЭДОФСС.СтрахователиОрганизаций",
			"Организации",
			Организации,
			Новый ОписаниеТипов("СправочникСсылка.Организации, Массив"));
	КонецЕсли;
	Возврат Результат;
КонецФункции

// В таблице значений с колонкой "Организация" заполняет колонку "Страхователь".
//   В случае отсутствия - добавляет колонку "Страхователь".
//
// Параметры:
//   ТаблицаЗначений - ТаблицаЗначений - Заполняемая таблица.
//       * Организация - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
Процедура ЗаполнитьСтрахователяВТаблицеЗначений(ТаблицаЗначений, ДатаПолучения = Неопределено) Экспорт
	Если ТаблицаЗначений.Колонки.Найти("Страхователь") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Страхователь", Метаданные.ОпределяемыеТипы.Организация.Тип);
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы.Страхователь = СтраховательОрганизации(СтрокаТаблицы.Организация, ДатаПолучения);
	КонецЦикла;
КонецПроцедуры

// Возвращает массив организаций страхователя.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция ОрганизацииСтрахователя(Страхователь, ДатаПолучения = Неопределено) Экспорт
	Филиалы = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Страхователь, ДатаПолучения);
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Филиалы, Страхователь);
	Возврат Филиалы;
КонецФункции

// Возвращает Истина если у страхователя есть филиалы без самостоятельной регистрации в ФСС.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Булево
//
Функция УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь, ДатаПолучения = Неопределено) Экспорт
	Филиалы = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Страхователь, ДатаПолучения);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Филиалы, Страхователь);
	Возврат Филиалы.Количество() > 0;
КонецФункции

// Возвращает Истина если для данной организации поле "Страхователь" следует показывать пользователю.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Страхователь - СправочникСсылка.Организации
//   ДатаПолучения - Дата - Дата получения сведений.
//
// Возвращаемое значение:
//   Булево
//
Функция ВидимостьПоляСтрахователь(Организация, Страхователь, ДатаПолучения = Неопределено) Экспорт
	Если Организация <> Страхователь Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь, ДатаПолучения);
КонецФункции

Функция СтрахователиИзОтборовПоОрганизациямФормы(Знач ОтборыПоОрганизациям) Экспорт
	
	Если ЗначениеЗаполнено(ОтборыПоОрганизациям.Организации) Тогда
		Если ТипЗнч(ОтборыПоОрганизациям.Организации) = Тип("Массив") Тогда
			МассивСсылок = ОтборыПоОрганизациям.Организации;
		Иначе
			МассивСсылок = ОтборыПоОрганизациям.Организации.ВыгрузитьЗначения();
		КонецЕсли;
		ОбратныйИндекс = МассивСсылок.Количество();
		Пока ОбратныйИндекс > 0 Цикл
			ОбратныйИндекс = ОбратныйИндекс - 1;
			Если Не СЭДОФССКлиентСервер.СсылкаОрганизацииЗаполнена(МассивСсылок[ОбратныйИндекс]) Тогда
				МассивСсылок.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		Если МассивСсылок.Количество() > 0 Тогда
			Возврат СтрахователиОрганизаций(МассивСсылок);
		КонецЕсли;
	КонецЕсли;
	
	Если СЭДОФССКлиентСервер.СсылкаОрганизацииЗаполнена(ОтборыПоОрганизациям.ГоловнаяОрганизация) Тогда
		Возврат СтрахователиГоловнойОрганизации(ОтборыПоОрганизациям.ГоловнаяОрганизация);
	КонецЕсли;
	
	Возврат ЭлектронныйДокументооборотСФСС.ОрганизацииИспользующиеОбменФСС();
	
КонецФункции

// Возвращает массив страхователей головной организации.
//
// Параметры:
//   ГоловнаяОрганизация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция СтрахователиГоловнойОрганизации(ГоловнаяОрганизация) Экспорт
	Возврат ВсеСтрахователи(ГоловнаяОрганизация).ВыгрузитьКолонку("Страхователь");
КонецФункции

Функция ВсеСтрахователи(ГоловнаяОрганизация = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(ОтчитывающиесяПоВзносамОрганизации.ОтчитывающаясяОрганизация, Организации.Ссылка) КАК Страхователь,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК ОтчитывающиесяПоВзносамОрганизации
		|		ПО Организации.Ссылка = ОтчитывающиесяПоВзносамОрганизации.Организация
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.Ссылка КАК Страхователь,
		|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	КонецЕсли;
	Если ГоловнаяОрганизация = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, Символы.ПС + "ГДЕ" + Символы.ПС, Символы.ПС);
	Иначе
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ЕстьПравоПросмотраЖурнала() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
КонецФункции

Функция ИмяСобытияЖурнала() Экспорт
	Возврат УчетПособийСоциальногоСтрахования.ИмяСобытияЖурнала()
		+ "."
		+ НСтр("ru = 'СЭДО';
				|en = 'EDI'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#Область ИсправлениеДокументов

// См. ИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений.
Функция ПоследнийДокументЦепочкиИсправлений(Ссылка) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов") Тогда
		МодульИсправлениеДокументовЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ИсправлениеДокументовЗарплатаКадры");
		Возврат МодульИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений(Ссылка);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОчередьОбработкиКадровыхДанныхФСС() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС);
	РегистрыСведений.ОчередьОбработкиКадровыхДанныхФСС.ОбработчикФоновогоЗадания();
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС;
	Настройка.ДоступноВАвтономномРабочемМесте = Истина;
	Настройка.РаботаетСВнешнимиРесурсами      = Ложь;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОчередьОбработкиКадровыхДанныхФСС.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

#Область НПИ

// Возвращает дату вступления в силу Федерального закона от 30.04.2021 № 126-ФЗ.
Функция ДатаНачалаПроактивныхВыплат() Экспорт
	Возврат '20220101';
КонецФункции

Функция ДатаНачалаПредоставленияДанныхСФРДляРасчетаПособий() Экспорт
	Возврат '20230101';
КонецФункции

Функция ГодНачалаСведенийОСреднемЗаработкеСФР() Экспорт
	Возврат СЭДОФССКлиентСервер.ГодНачалаСведенийОСреднемЗаработкеСФР();
КонецФункции

Функция ДатаОтменыРеестровПВСО() Экспорт
	Возврат '20240101'; // Проект.
КонецФункции

Функция ДатаПереходаНаВерсиюПроактива_2_34() Экспорт
	Возврат '20230825';
КонецФункции

Функция ДатаПереходаНаВерсиюПроактива_2_36() Экспорт
	Возврат '20240227';
КонецФункции

Функция ДатаПереходаНаВерсиюПроактива_2_41() Экспорт
	Возврат Мин('20240819190000', ЗарплатаКадрыПовтИсп.ДатаВступленияВСилуНА("НачалоПереходаНаРегистрационныйНомерСФР"));
КонецФункции

Функция НачатПереходНаВерсиюПроактива_2_41() Экспорт
	Возврат ТекущаяДатаФонда() >= ДатаПереходаНаВерсиюПроактива_2_41();
КонецФункции

// Возвращает текущую дату приведенную к часовому поясу СФР.
Функция ТекущаяДатаФонда() Экспорт
	Возврат МестноеВремя(ТекущаяУниверсальнаяДата(), "Europe/Moscow");
КонецФункции

#КонецОбласти

#Область ПодписиДокументов

// Заполняет ответственных лиц документа при использовании механима вторичных данных и подписи.
//
// Параметры:
//   ДокументОбъект    - ДокументОбъект - Заполняемый документ объект.
//   ПараметрыФиксации - Структура      - Параметры фиксации вторичных данных.
//   ИменаРеквизитов   - Строка         - Имена фиксируемых реквизитов через запятую.
//   Дата              - Дата           - Дата получения среза ответственных лиц.
//
// Возвращаемое значение:
//   Булево - Сведения об ответственных лицах документа изменены.
//
Функция ЗаполнитьПодписантов(ДокументОбъект, ПараметрыФиксации, ИменаРеквизитов = Неопределено, Дата = Неопределено) Экспорт
	
	ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаДляЗаполнения(ДокументОбъект, Дата);
	
	Если ИменаРеквизитов = Неопределено Тогда
		Реквизиты = ОтветственныеЛица;
	Иначе
		Реквизиты = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, ОтветственныеЛица);
	КонецЕсли;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, ДокументОбъект, ПараметрыФиксации);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БРО

Функция ВходящееСообщение(ИдентификаторСообщения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата,
	|	ВходящиеСообщенияСЭДОФСС.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ВходящиеСообщенияСЭДОФСС.ДатаОтправкиПодтверждения КАК ДатаОтправкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияИзвещенияОПолученииПодтверждения КАК ДатаПолученияИзвещенияОПолученииПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаПолученияОшибкиПодтверждения КАК ДатаПолученияОшибкиПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ДатаСоздания КАК ДатаСоздания,
	|	ВходящиеСообщенияСЭДОФСС.Новое КАК Новое,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаОбработкиСообщения КАК ОшибкаОбработкиСообщения,
	|	ВходящиеСообщенияСЭДОФСС.ОшибкаПодтверждения КАК ОшибкаПодтверждения,
	|	ВходящиеСообщенияСЭДОФСС.ПодтверждениеОтправлено КАК ПодтверждениеОтправлено,
	|	ВходящиеСообщенияСЭДОФСС.Получатель КАК Получатель,
	|	ВходящиеСообщенияСЭДОФСС.Тип КАК Тип,
	|	ВходящиеСообщенияСЭДОФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВходящиеСообщенияСЭДОФСС.СрокДействия КАК СрокДействия
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &ИдентификаторСообщения";
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			Возврат Таблица[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПоТекстуЗапроса(Запрос.Текст);
КонецФункции

Функция СтруктураПоТекстуЗапроса(ТекстЗапроса)
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	Структура = Новый Структура;
	Для Каждого КолонкаСхемыЗапроса Из ПоследнийЗапрос.Колонки Цикл
		Структура.Вставить(КолонкаСхемыЗапроса.Псевдоним, КолонкаСхемыЗапроса.ТипЗначения.ПривестиЗначение(Неопределено));
	КонецЦикла;
	Возврат Структура;
КонецФункции

Функция ТекстXML(Идентификатор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналЗапросовКСерверамФСС.ДанныеЗапроса
	|ИЗ
	|	РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросовКСерверамФСС
	|ГДЕ
	|	ЖурналЗапросовКСерверамФСС.Идентификатор = &Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналЗапросовКСерверамФСС.ОтветСервера
	|ИЗ
	|	РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросовКСерверамФСС
	|ГДЕ
	|	ЖурналЗапросовКСерверамФСС.ИдентификаторФСС = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() > 0 Тогда
		Возврат Таблица[0].Содержимое.Получить();
	КонецЕсли;
	Возврат "";
КонецФункции

Функция ИсходящееСообщение(ИдентификаторСообщения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналЗапросовКСерверамФСС.Идентификатор КАК Идентификатор,
	|	ЖурналЗапросовКСерверамФСС.Организация КАК Организация,
	|	ЖурналЗапросовКСерверамФСС.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ЖурналЗапросовКСерверамФСС.АдресРесурса КАК АдресРесурса,
	|	ЖурналЗапросовКСерверамФСС.АдресСервера КАК АдресСервера,
	|	ЖурналЗапросовКСерверамФСС.ДанныеЗапроса КАК ДанныеЗапроса,
	|	ЖурналЗапросовКСерверамФСС.Дата КАК Дата,
	|	ЖурналЗапросовКСерверамФСС.КодСостояния КАК КодСостояния,
	|	ЖурналЗапросовКСерверамФСС.Операция КАК Операция,
	|	ЖурналЗапросовКСерверамФСС.ОтветСервера КАК ОтветСервера,
	|	ЖурналЗапросовКСерверамФСС.ИдентификаторФСС КАК ИдентификаторФСС,
	|	ЖурналЗапросовКСерверамФСС.ТипСообщенияСЭДО КАК ТипСообщенияСЭДО,
	|	ЖурналЗапросовКСерверамФСС.ТипВзаимодействияСЭДО КАК ТипВзаимодействияСЭДО,
	|	ЖурналЗапросовКСерверамФСС.ПакетныйЗапросСообщений КАК ПакетныйЗапросСообщений,
	|	ЖурналЗапросовКСерверамФСС.ДанныеПолученныхПакетноСообщений КАК ДанныеПолученныхПакетноСообщений,
	|	ЖурналЗапросовКСерверамФСС.ИдентификаторПакетаФСС КАК ИдентификаторПакетаФСС,
	|	ЖурналЗапросовКСерверамФСС.ОбменЧерезОператора КАК ОбменЧерезОператора,
	|	ЖурналЗапросовКСерверамФСС.ЭтоПользовательскийЗапрос КАК ЭтоПользовательскийЗапрос
	|ИЗ
	|	РегистрСведений.ЖурналЗапросовКСерверамФСС КАК ЖурналЗапросовКСерверамФСС
	|ГДЕ
	|	ЖурналЗапросовКСерверамФСС.ИдентификаторФСС = &ИдентификаторСообщения";
	
	Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() > 0 Тогда
			Возврат Таблица[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПоТекстуЗапроса(Запрос.Текст);
КонецФункции

#КонецОбласти

#Область Перечисления

Функция ВидОсобойЗоныЧислом(ВидОсобойЗоны) Экспорт
	Менеджер = Перечисления.ВидыОсобойЗоныПроживанияРаботы;
	Если ВидОсобойЗоны = Менеджер.ЗонаСПравомНаОтселение Тогда
		Возврат 1;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаСЛьготнымСоциальноЭкономическимСтатусом Тогда
		Возврат 2;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаОтселения Тогда
		Возврат 3;
	ИначеЕсли ВидОсобойЗоны = Менеджер.ЗонаЗагрязненияПриАварииПОМаяк Тогда
		Возврат 4;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ВидОсобойЗоны(ВидОсобойЗоныЧислом) Экспорт
	Если ВидОсобойЗоныЧислом = 1 Тогда
		Возврат Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаСПравомНаОтселение;
	ИначеЕсли ВидОсобойЗоныЧислом = 2 Тогда
		Возврат Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаСЛьготнымСоциальноЭкономическимСтатусом;
	ИначеЕсли ВидОсобойЗоныЧислом = 3 Тогда
		Возврат Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаОтселения;
	ИначеЕсли ВидОсобойЗоныЧислом = 4 Тогда
		Возврат Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаЗагрязненияПриАварииПОМаяк;
	Иначе
		Возврат Перечисления.ВидыОсобойЗоныПроживанияРаботы.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ПричинаПредоставленияЛьготыЧислом(ПричинаПредоставленияЛьготы) Экспорт
	Менеджер = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом;
	Если ПричинаПредоставленияЛьготы = Менеджер.Чернобыль Тогда
		Возврат 1;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.Семипалатинск Тогда
		Возврат 2;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.Маяк Тогда
		Возврат 3;
	ИначеЕсли ПричинаПредоставленияЛьготы = Менеджер.ПодразделенияОсобогоРиска Тогда
		Возврат 4;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПроизводственныйКалендарь

// Указанная дата учитывается. Проверяются рабочие дни начиная с указанного дня.
Функция БлижайшийРабочийДень(Дата, НомерДня = 1) Экспорт
	Если НомерДня < 1 Или Дата < '19000101' Тогда
		Возврат Дата;
	КонецЕсли;
	РабочиеДни = БлижайшиеРабочиеДни(Дата, НомерДня);
	Количество = РабочиеДни.Количество();
	Если Количество >= НомерДня Тогда // Найдено достаточное количество рабочих дней.
		Возврат РабочиеДни[НомерДня - 1];
	ИначеЕсли Количество = 0 Тогда // Не найдено ни одного рабочего дня. Отсчет в календарных днях.
		Возврат Дата + 86400 * НомерДня;
	Иначе // Найдено недостаточно рабочих дней. Отсчет разницы (недостающего количества дней) от последнего рабочего дня.
		РабочийДень = РабочиеДни[Количество - 1];
		Возврат РабочийДень + 86400 * (НомерДня - Количество);
	КонецЕсли;
КонецФункции

// Текущая дата не учитывается. Проверяются рабочие дни начиная со следующего календарного дня.
Функция СледующийРабочийДень(Дата, НомерДня = 1) Экспорт
	// Дни запрашиваются со следующего календарного дня чтобы исключить текущий день.
	Возврат БлижайшийРабочийДень(Дата + 86400, НомерДня);
КонецФункции

Функция БлижайшиеРабочиеДни(Знач ДатаНачала, Знач Количество)
	РабочиеДни = Новый Массив;
	Если Количество < 1 Тогда
		Возврат РабочиеДни;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(ДатаНачала);
	
	// Наполнение массива календарных дней для запроса по рабочим дням.
	// Коэффициент компенсирует праздники и выходные с небольшим запасом, для минимизации обращений к СУБД.
	КалендарныеДни = Новый Массив;
	ВГраницаКалендарныхДней = ?(Количество < 2, 0, Цел(Количество * 1.5));
	Для ИндексДня = 0 По ВГраницаКалендарныхДней Цикл
		КалендарныеДни.Добавить(ДатаНачала + 86400 * ИндексДня);
	КонецЦикла;
	Если Год(КалендарныеДни[ВГраницаКалендарныхДней]) >= 3999 Тогда
		Возврат РабочиеДни; // В запросе нельзя использовать даты больше 3999 года.
	КонецЕсли;
	
	Календарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат РабочиеДни; // Приложение не настроено для работы по графику.
	КонецЕсли;
	
	ПараметрыПолучения = КалендарныеГрафики.ПараметрыПолученияБлижайшихРабочихДат();
	ПараметрыПолучения.ВызыватьИсключение = Ложь;
	БлижайшиеРабочиеДаты = КалендарныеГрафики.БлижайшиеРабочиеДаты(Календарь, КалендарныеДни, ПараметрыПолучения);
	Если ТипЗнч(БлижайшиеРабочиеДаты) <> Тип("Соответствие") Или БлижайшиеРабочиеДаты.Количество() = 0 Тогда
		Возврат РабочиеДни; // Календарь не заполнен.
	КонецЕсли;
	
	РабочиеДниКоличество = 0;
	Для Каждого КалендарныйДень Из КалендарныеДни Цикл
		РабочийДень = БлижайшиеРабочиеДаты[КалендарныйДень];
		Если ТипЗнч(РабочийДень) = Тип("Дата")
			И РабочийДень >= КалендарныйДень
			И РабочиеДни.Найти(РабочийДень) = Неопределено Тогда
			РабочиеДни.Добавить(РабочийДень);
			РабочиеДниКоличество = РабочиеДниКоличество + 1;
			Если РабочиеДниКоличество = Количество Тогда
				Возврат РабочиеДни;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если найдено недостаточно рабочих дней (например, часть календарных дней попало на длинные праздники),
	// то выполняется второй запрос с недостающими днями.
	Если РабочиеДниКоличество > 0 Тогда
		ОсталосьДней = Количество - РабочиеДниКоличество;
		СледующийДень = РабочиеДни[РабочиеДниКоличество-1] + 86400;
		БлижайшиеРабочиеДни = БлижайшиеРабочиеДни(СледующийДень, ОсталосьДней);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РабочиеДни, БлижайшиеРабочиеДни, Истина);
	КонецЕсли;
	
	Возврат РабочиеДни;
КонецФункции

#КонецОбласти

#Область Проверки

Процедура ПроверитьРайонныйКоэффициент(Отказ, Объект, ИмяРеквизита, Обязательный = Ложь) Экспорт
	РайонныйКоэффициент = Объект[ИмяРеквизита];
	Если Не ЗначениеЗаполнено(РайонныйКоэффициент) Тогда
		Если Обязательный Тогда
			ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяРеквизита);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗначениеДопустимо = (
		РайонныйКоэффициент = 1
		Или РайонныйКоэффициент = 1.10
		Или РайонныйКоэффициент = 1.15
		Или РайонныйКоэффициент = 1.20
		Или РайонныйКоэффициент = 1.25
		Или РайонныйКоэффициент = 1.30
		Или РайонныйКоэффициент = 1.35
		Или РайонныйКоэффициент = 1.40
		Или РайонныйКоэффициент = 1.50
		Или РайонныйКоэффициент = 1.60
		Или РайонныйКоэффициент = 1.70
		Или РайонныйКоэффициент = 1.80
		Или РайонныйКоэффициент = 2.00
		Или РайонныйКоэффициент = 3.00);
	
	Если Не ЗначениеДопустимо Тогда
		Текст = НСтр("ru = 'Указано недопустимое значение районного коэффициента.';
					|en = 'Invalid value of regional factor is specified.'");
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьНомерИзвещенияФСС(Отказ, Объект, ИмяНомера) Экспорт
	
	Номер = Объект[ИмяНомера];
	Если Не ЗначениеЗаполнено(Номер) Тогда
		ПроверкиБЗК.ПроверитьЗаполнениеРеквизитаОбъекта(Отказ, Объект, ИмяНомера);
	ИначеЕсли СтрДлина(Номер) > 12 Тогда
		Текст = НСтр("ru = 'В номере извещения ФСС %1 символов, а должно быть не более 12.';
					|en = 'The SSF notification number contains %1 instead of 12.'");
		Текст = СтрШаблон(Текст, СтрДлина(Номер));
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяНомера);
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(Номер);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'В номере извещения ФСС должны быть только цифры (%1 - не цифра).';
							|en = 'The FSS notification number must contain numbers only (%1 is not a number).'");
			Иначе
				Текст = НСтр("ru = 'В номере извещения ФСС должны быть только цифры (%1 - не цифры).';
							|en = 'The FSS notification number must contain numbers only (%1 are not numbers).'");
			КонецЕсли;
			Текст = СтрШаблон(Текст, ЛишниеСимволы);
			СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяНомера);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИдентификаторРеестраПВСО(Отказ, Объект, ИмяРеквизита, Префиксы = Неопределено, ДлинаПроизвольногоНомераМин = Неопределено) Экспорт
	Идентификатор = Объект[ИмяРеквизита];
	РезультатПроверки = РезультатПроверкиИдентификатораРеестраПВСО(Идентификатор, Префиксы, ДлинаПроизвольногоНомераМин);
	Если Не РезультатПроверки.Успех Тогда
		Текст = РезультатПроверки.Пояснение;
		СообщенияБЗК.СообщитьОбОшибкеВОбъекте(Отказ, Объект, Текст, ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьИдентификаторРеестраВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, СтрокаТаблицы, ИмяРеквизита, Префиксы = Неопределено, ДлинаПроизвольногоНомераМин = Неопределено) Экспорт
	Идентификатор = СтрокаТаблицы[ИмяРеквизита];
	РезультатПроверки = РезультатПроверкиИдентификатораРеестраПВСО(Идентификатор, Префиксы, ДлинаПроизвольногоНомераМин);
	Если Не РезультатПроверки.Успех Тогда
		Текст = РезультатПроверки.Пояснение;
		СообщенияБЗК.СообщитьОбОшибкеВСтрокеТаблицы(Отказ, Объект, ИмяТаблицы, СтрокаТаблицы, ИмяРеквизита, Текст);
	КонецЕсли;
КонецПроцедуры

// Проверяет идентификатор строки реестра.
//
// Параметры:
//   Идентификатор - Строка
//
// Возвращаемое значение:
//   Структура - Результат проверки:
//       * Успех - Булево - Если Истина, то идентификатор прошел проверку. В пояснении будут подробности.
//       * Пояснение - Строка - Текст для вывода результатов в интерфейсе.
//
Функция РезультатПроверкиИдентификатораРеестраПВСО(Идентификатор, Префиксы = Неопределено, ДлинаПроизвольногоНомераМин = Неопределено) Экспорт
	Результат = Новый Структура("Успех, Пояснение, Префикс, РНС, Дата, НомерРеестра, НомерСтроки");
	
	// Варианты шаблонов:
	//  1) Confirmation.xsd / batch_no (RecalculationType):
	//     [C|E|P]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}|\S{18}
	//  2) EventLife.xsd / batch_no (recalculation.batchNo):
	//     [C|E|P]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}|\S{18}
	//  3) NoticeTerminationType_05.xsd / BatchNoType (row.batchNo):
	//       [E|P]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}|\S{18}
	//  4) PaymentState.xsd / BatchNoType (PaymentStatusRequestType.resiveId):
	//     [C|E|P]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:{0,1}\d{0,3}|\S{6,18}
	//
	// Итоговые вариации:
	// 1,2,4)   C_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}
	// 1,2,3,4) E_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}
	// 1,2,3,4) P_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}:\d{1,3}
	// 1,2,3)   \S{18}
	// 4)       \S{6,18}
	
	// Значения параметров по умолчанию:
	Если Префиксы = Неопределено Тогда
		Префиксы = "CEP";
	КонецЕсли;
	Если ДлинаПроизвольногоНомераМин = Неопределено Тогда
		ДлинаПроизвольногоНомераМин = 18;
	КонецЕсли;
	// Предопределенные константы одинаковые для всех вариантов:
	ТребуетсяНомерСтроки = Истина;
	ДлинаПроизвольногоНомераМакс = 18;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		Результат.Успех = Ложь;
		Результат.Пояснение = НСтр("ru = 'Не заполнен идентификатор строки реестра';
									|en = 'Registry line ID is not filled'");
		Возврат Результат;
	КонецЕсли;
	
	Пробелы = " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	БезПробелов = СтроковыеФункцииБЗККлиентСервер.УдалитьСимволы(Идентификатор, Пробелы);
	Если Идентификатор <> БезПробелов Тогда
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьСимволы(Идентификатор, БезПробелов);
		Пояснение = НСтр("ru = 'В идентификаторе не должно быть пробелов (""%1"")';
						|en = 'ID must not contain spaces (""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, ЛишниеСимволы);
		Возврат Результат;
	КонецЕсли;
	
	// Проверяется: "\S{18}" - означает "18 непустых символов подряд", а "\S{6,18}" - "от 6 до 18 непустых символов".
	Если СтрДлина(Идентификатор) >= ДлинаПроизвольногоНомераМин И СтрДлина(Идентификатор) <= ДлинаПроизвольногоНомераМакс Тогда
		Результат.Успех     = Истина;
		Результат.Пояснение = ""; // Без комментариев.
		Возврат Результат;
	КонецЕсли;
	
	Массив = СтрРазделить(Идентификатор, ":");
	Количество = Массив.Количество();
	Если Количество > 2 Тогда
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(НСтр("ru = 'Слишком много двоеточий (%1 шт)';
											|en = 'Too many colons (%1)'"), Количество-1);
		Возврат Результат;
	ИначеЕсли Количество = 2 Тогда
		НомерСтроки = Массив[1];
	Иначе
		Если ТребуетсяНомерСтроки Тогда
			Результат.Успех = Ложь;
			Результат.Пояснение = НСтр("ru = 'Отсутствует двоеточие, после которого указывается номер строки';
										|en = 'The colon specified before a line number is missing'");
			Возврат Результат;
		КонецЕсли;
		НомерСтроки = "";
	КонецЕсли;
	
	Если НомерСтроки = "" Тогда
		Если ТребуетсяНомерСтроки Тогда
			Результат.Успех = Ложь;
			Результат.Пояснение = НСтр("ru = 'Не заполнен номер строки (указывается после двоеточия)';
										|en = 'The line number is not filled (specified after the colon)'");
			Возврат Результат;
		КонецЕсли;
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(НомерСтроки);
		Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Пояснение = НСтр("ru = 'В номере строки ""%1"" должны быть только цифры (%2 - не цифра)';
								|en = 'Line number ""%1"" must contain only digits (%2 is not a digit)'");
			Иначе
				Пояснение = НСтр("ru = 'В номере строки ""%1"" должны быть только цифры (%2 - не цифры)';
								|en = 'Line number ""%1"" must contain only digits (%2 are not digits)'");
			КонецЕсли;
			Результат.Успех = Ложь;
			Результат.Пояснение = СтрШаблон(Пояснение, НомерСтроки, ЛишниеСимволы);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.НомерСтроки = Число(НомерСтроки);
	Если Результат.НомерСтроки >= 1000 Тогда
		Пояснение = НСтр("ru = 'Номер строки ""%1"" должен быть меньше 1000';
						|en = 'Line number ""%1"" must be less than 1000'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, НомерСтроки);
		Возврат Результат;
	КонецЕсли;
	
	ИдРеестра = Массив[0];
	РезультатПроверкиИдентификатораРеестра(ИдРеестра, Префиксы, Результат);
	
	Возврат Результат;
КонецФункции

// Проверяет идентификатор реестра.
//
// Параметры:
//   Идентификатор - Строка
//
// Возвращаемое значение:
//   Структура - Результат проверки:
//       * Успех - Булево - Если Истина, то идентификатор прошел проверку. В пояснении будут подробности.
//       * Пояснение - Строка - Текст для вывода результатов в интерфейсе.
//
Функция РезультатПроверкиИдентификатораРеестра(Идентификатор, Префиксы = "CEP", Результат = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Результат = Новый Структура("Успех, Пояснение, Префикс, РНС, Дата, НомерРеестра");
	КонецЕсли;
	
	// Формат:
	// [C|E|P]_\d{10}_(19|20)[0-9]{2}_[0|1][0-9]_[0-3][0-9]_\d{4,7}[\S]{0,4}
	Массив = СтрРазделить(Идентификатор, "_", Истина);
	Если Массив.ВГраница() < 5 Тогда
		Пояснение = НСтр("ru = 'Ожидается 5 подчеркиваний, фактически %1';
						|en = 'Expected 5 underlines, actually - %1'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, Массив.ВГраница());
		Возврат Результат;
	КонецЕсли;
	
	Результат.Префикс = Массив[0];
	Результат.РНС     = Массив[1];
	
	Если СтрНайти(Префиксы, Результат.Префикс) = 0 Тогда
		Пояснение = НСтр("ru = 'Префикс ""%1"" не соответствует формату (допустимые символы: %2)';
						|en = 'Prefix ""%1"" does not match the format (allowed characters: %2)'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, Результат.Префикс, Префиксы);
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибкиЗаполненияРНС(Результат.РНС, Истина);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Результат.Успех = Ложь;
		Результат.Пояснение = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	Год = ОписаниеТиповЧисло.ПривестиЗначение(Массив[2]);
	Если Год < 1900 Или Год > 2999 Тогда
		Пояснение = НСтр("ru = 'Некорректно указан год (""%1"")';
						|en = 'The year is specified incorrectly (""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, Массив[2]);
		Возврат Результат;
	КонецЕсли;
	МесяцСтрокой = Массив[3];
	Месяц        = ОписаниеТиповЧисло.ПривестиЗначение(МесяцСтрокой);
	Если Месяц < 1 Или Месяц > 12 Тогда
		Пояснение = НСтр("ru = 'Некорректно указан месяц (""%1"")';
						|en = 'The month is specified incorrectly (""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, МесяцСтрокой);
		Возврат Результат;
	ИначеЕсли СтрДлина(МесяцСтрокой) = 1 Тогда
		Пояснение = НСтр("ru = 'Месяц задается в формате ""0%1"" (сейчас указан ""%1"")';
						|en = 'A month is specified in the ""0%1"" format (currently specified ""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, МесяцСтрокой);
		Возврат Результат;
	КонецЕсли;
	ДеньСтрокой = Массив[4];
	День        = ОписаниеТиповЧисло.ПривестиЗначение(ДеньСтрокой);
	Если День < 1 Или День > 31 Или (День > 28 И День > День(КонецМесяца(Дата(Год, Месяц, 1)))) Тогда
		Пояснение = НСтр("ru = 'Некорректно указан день (""%1"")';
						|en = 'The day is specified incorrectly (""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, ДеньСтрокой);
		Возврат Результат;
	ИначеЕсли СтрДлина(ДеньСтрокой) = 1 Тогда
		Пояснение = НСтр("ru = 'День задается в формате ""0%1"" (сейчас указан ""%1"")';
						|en = 'A day is specified in the ""0%1"" format (currently specified ""%1"")'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, ДеньСтрокой);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Дата = Дата(Год, Месяц, День);
	
	Массив.Удалить(0);
	Массив.Удалить(0);
	Массив.Удалить(0);
	Массив.Удалить(0);
	Массив.Удалить(0);
	Результат.НомерРеестра = СтрСоединить(Массив, "_");
	
	РазрядовЧисловойЧастиМин    = 4;
	РазрядовЧисловойЧастиМакс   = 7;
	РазрядовНечисловойЧастиМин  = 0;
	РазрядовНечисловойЧастиМакс = 4;
	
	ДлинаНомера = СтрДлина(Результат.НомерРеестра);
	Если ДлинаНомера < РазрядовЧисловойЧастиМин + РазрядовНечисловойЧастиМин
		Или ДлинаНомера > РазрядовЧисловойЧастиМакс + РазрядовНечисловойЧастиМакс Тогда
		Пояснение = НСтр("ru = 'Некорректный формат номера ""%1"", ожидается от 4 до 11 символов';
						|en = 'Incorrect format of the ""%1"" number, expected from 4 to 11 characters'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, Результат.НомерРеестра);
		Возврат Результат;
	КонецЕсли;
	
	ДлинаНечисловойЧасти = Мин(РазрядовНечисловойЧастиМакс, ДлинаНомера - РазрядовЧисловойЧастиМин);
	ДлинаЧисловойЧасти   = ДлинаНомера - ДлинаНечисловойЧасти;
	ЧисловаяЧастьНомера  = Лев(Результат.НомерРеестра, ДлинаЧисловойЧасти);
	ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(ЧисловаяЧастьНомера);
	Если Не ПустаяСтрока(ЛишниеСимволы) Тогда
		Пояснение = НСтр("ru = 'В левой части номера ""%1"" ожидаются только цифры (""%2"" - не цифры)';
						|en = 'Only digits are expected on the left side of number ""%1"" (""%2"" are not digits)'");
		Результат.Успех = Ложь;
		Результат.Пояснение = СтрШаблон(Пояснение, Результат.НомерРеестра, ЛишниеСимволы);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Результат.Пояснение = НСтр("ru = 'Соответствует требованиям';
								|en = 'Meets the requirements'");
	Возврат Результат;
КонецФункции

Функция ТекстОшибкиЗаполненияРНС(РегистрационныйНомер, ТребоватьЗаполнить) Экспорт
	Если Не ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		Если ТребоватьЗаполнить Тогда
			Возврат НСтр("ru = 'Не заполнен регистрационный номер';
						|en = 'Registration number is not filled'");
		Иначе
			Возврат "";
		КонецЕсли;
	ИначеЕсли СтрДлина(РегистрационныйНомер) <> 10 Тогда
		Текст = НСтр("ru = 'Регистрационный номер ""%1"" должен состоять из 10 цифр (сейчас - %2)';
					|en = 'Registration number ""%1"" must contain 10 digits (currently %2)'");
		Возврат СтрШаблон(Текст, РегистрационныйНомер, СтрДлина(РегистрационныйНомер));
	Иначе
		ЛишниеСимволы = СтроковыеФункцииБЗККлиентСервер.УдалитьЦифрыИзСтроки(РегистрационныйНомер);
		Если ЛишниеСимволы <> "" Тогда
			Если СтрДлина(ЛишниеСимволы) = 1 Тогда
				Текст = НСтр("ru = 'Регистрационный номер ""%1"" должен состоять из 10 цифр (""%2"" - не цифра)';
							|en = 'Registration number ""%1"" must contain 10 digits (""%2"" is not a digit)'");
			Иначе
				Текст = НСтр("ru = 'Регистрационный номер ""%1"" должен состоять из 10 цифр (""%2"" - не цифры)';
							|en = 'Registration number ""%1"" must contain 10 digits (""%2"" are not digits)'");
			КонецЕсли;
			Возврат СтрШаблон(Текст, РегистрационныйНомер, ЛишниеСимволы);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#Область Права

Функция ЕстьПравоПросмотраФактическихНачисленийВДокументе(Документ) Экспорт
	Возврат ПраваНаФактическиеНачисленияВДокументе(Документ).Просмотр;
КонецФункции

Функция ПраваНаФактическиеНачисленияВДокументе(Документ) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульМногофункциональныеДокументыБЗК = ОбщегоНазначения.ОбщийМодуль("МногофункциональныеДокументыБЗК");
		ПраваНаДокумент = МодульМногофункциональныеДокументыБЗК.ПраваНаДокумент(Документ);
		Возврат ПраваНаДокумент["НачисленнаяЗарплата"];
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	
	ПраваНаРаздел = Новый Структура;
	ПраваНаРаздел.Вставить("Просмотр", ПравоДоступа("Чтение", Метаданные.Документы.НачислениеЗарплаты));
	ПраваНаРаздел.Вставить("Редактирование", ПравоДоступа("Изменение", Метаданные.Документы.НачислениеЗарплаты));
	Возврат ПраваНаРаздел;
КонецФункции

#КонецОбласти

#Область ТекущиеДела

Функция ЕстьТекущиеДела()
	Попытка
		// Получение поставщиков.
		ПоставщикиТекущихДел = Новый Массив;
		ПриОпределенииОбработчиковТекущихДел(ПоставщикиТекущихДел);
		
		// Получение дел.
		ТекущиеДела = ТекущиеДелаСервер.ТекущиеДела();
		Для Каждого Поставщик Из ПоставщикиТекущихДел Цикл
			Поставщик.ПриЗаполненииСпискаТекущихДел(ТекущиеДела);
			Если ТекущиеДела.Количество() > 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			"СЭДОФСС.ЕстьТекущиеДела",
			СтрШаблон(
				НСтр("ru = 'При получении поставщиков текущих дел СЭДО возникла ошибка: %1';
					|en = 'An error occurred while receiving the EDI to-do list vendors: %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ДобавитьОписаниеНаличияОграченияПрав(Описание, ОбъектМетаданных, Физлица = Истина, Изменение = Неопределено)
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Если Изменение = Неопределено Тогда
		Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
			Изменение = Ложь;
		Иначе
			Изменение = Истина;
		КонецЕсли;
	КонецЕсли;
	Описание = Описание + Символы.ПС + ПолноеИмя + ".Чтение.Организации";
	Если Изменение Тогда
		Описание = Описание + Символы.ПС + ПолноеИмя + ".Изменение.Организации";
	КонецЕсли;
	Если Физлица Тогда
		Описание = Описание + Символы.ПС + ПолноеИмя + ".Чтение.ГруппыФизическихЛиц";
		Если Изменение Тогда
			Описание = Описание + Символы.ПС + ПолноеИмя + ".Изменение.ГруппыФизическихЛиц";
		КонецЕсли;
	КонецЕсли;
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ОбъектМетаданныхФайлов = Метаданные.Справочники.Найти(ОбъектМетаданных.Имя + "ПрисоединенныеФайлы");
		Если ОбъектМетаданныхФайлов <> Неопределено Тогда
			ДобавитьОписаниеНаличияОграченияПрав(Описание, ОбъектМетаданныхФайлов, Физлица, Изменение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Организации

Функция РегномерДляИдентификатораРеестра(Документ) Экспорт
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомерСФР) Тогда
		Возврат Документ.РегистрационныйНомерСФР;
	ИначеЕсли ЗначениеЗаполнено(Документ.ДополнительныйКодФСС) Тогда
		Возврат Документ.ДополнительныйКодФСС;
	Иначе
		Возврат Документ.РегистрационныйНомерФСС;
	КонецЕсли;
КонецФункции

Процедура ВывестиРегистрационныйНомерИДополнительныйКодПоБуквам(Документ, Секция) Экспорт
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомерСФР) Тогда
		РегномерГоловнойОрганизации   = Документ.РегномерСФРГоловнойОрганизации;
		РегномерФилиалаЕслиОтличается = ?(Документ.РегистрационныйНомерСФР = Документ.РегномерСФРГоловнойОрганизации,
			"",
			Документ.РегистрационныйНомерСФР);
	Иначе
		РегномерГоловнойОрганизации   = Документ.РегистрационныйНомерФСС;
		РегномерФилиалаЕслиОтличается = Документ.ДополнительныйКодФСС;
	КонецЕсли;
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, РегномерГоловнойОрганизации, "РегистрационныйНомер");
	УправлениеПечатьюБЗК.ВывестиПоБуквам(Секция, РегномерФилиалаЕслиОтличается, "ДополнительныйКод");
КонецПроцедуры

Функция ИдентификаторРеестраВНомерЧислом(ИдентификаторРеестра) Экспорт
	НомерСтрокой = СтроковыеФункцииБЗККлиентСервер.СтрПрав(ИдентификаторРеестра, "_");
	Если ЗначениеЗаполнено(НомерСтрокой) Тогда
		НомерЧислом = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерСтрокой);
		Если ЗначениеЗаполнено(НомерЧислом) Тогда
			Возврат НомерЧислом;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ОтветственныеЛица

Функция УполномоченныйПредставитель(Организация, Дата = Неопределено) Экспорт
	Результат = Новый Структура("ФизическоеЛицо, Должность, ОснованиеПодписи");
	
	Если Не ЗначениеЗаполнено(Организация) тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ИменаРолей = "ПредставительСФР";
	ОтветственныеЛица = ПодписиДокументов.ОтветственныеЛицаОрганизации(Организация, ИменаРолей, Дата);
	
	Результат.ФизическоеЛицо   = ОтветственныеЛица.ПредставительСФР;
	Результат.Должность        = ОтветственныеЛица.ПредставительСФРДолжность;
	Результат.ОснованиеПодписи = ОтветственныеЛица.ПредставительСФРОснованиеПодписи;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ФизическиеЛица

Функция СНИЛСИзXML(ЗначениеXML) Экспорт
	Возврат УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СериализацияБЗК.СтрокаИзXML(ЗначениеXML));
КонецФункции

Функция ФИОИзXML(ЭлементDOM) Экспорт
	ИменаПолей = "firstName, lastName, middleName, secondName";
	УзлыDOM  = СериализацияБЗК.УзлыЭлементаDOM(ЭлементDOM, ИменаПолей);
	Имя      = СериализацияБЗК.СтрокаИзXML(УзлыDOM.firstName);
	Фамилия  = СериализацияБЗК.СтрокаИзXML(УзлыDOM.lastName);
	Отчество = СериализацияБЗК.СтрокаИзXML(УзлыDOM.middleName);
	// Обратная совместимость со старыми версиями спецификации.
	Если Не ЗначениеЗаполнено(Фамилия) И УзлыDOM.secondName <> Неопределено Тогда
		Фамилия = СериализацияБЗК.СтрокаИзXML(УзлыDOM.secondName);
	КонецЕсли;
	Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
КонецФункции

Функция КодСтатусаНалогоплательщика(СтатусНалогоплательщика) Экспорт
	
	// Возвращает код статуса налогоплательщика:
	// 0 - не является налоговым резидентом Российской Федерации;
	// 1 - является налоговым резидентом Российской Федерации (кроме налогоплательщиков,
	//     осуществляющих трудовую деятельность по найму в Российской Федерации на основании патента);
	// 2 - высококвалифицированный специалист не является налоговым резидентом Российской Федерации;
	// 3 - участник Государственной программы по оказанию содействия добровольному переселению
	//     в Российскую Федерацию соотечественников, проживающих за рубежом
	//     (член экипажа судна, плавающего под Государственным флагом Российской Федерации),
	//     не является налоговым резидентом Российской Федерации;
	// 4 - иностранный гражданин (лицо без гражданства) признан беженцем 
	//     или получивший временное убежище на территории Российской Федерации,
	//     не является налоговым резидентом Российской Федерации;
	// 5 - иностранный гражданин, осуществляет трудовую деятельность по найму в Российской Федерации на основании патента.
	
	ИмяПредопределенного = НРег(ИмяСтатусаНалогоплательщика(СтатусНалогоплательщика));
	
	Если ИмяПредопределенного = НРег("Нерезидент") Тогда
		
		Возврат 0;
		
	ИначеЕсли ИмяПредопределенного = НРег("Резидент")
		Или ИмяПредопределенного = НРег("ГражданинСтраныЕАЭС") Тогда
		
		Возврат 1;
		
	ИначеЕсли ИмяПредопределенного = НРег("ВысококвалифицированныйИностранныйСпециалист") Тогда
		
		Возврат 2;
		
	ИначеЕсли ИмяПредопределенного = НРег("УчастникПрограммыПоПереселениюСоотечественников")
		Или ИмяПредопределенного = НРег("ЧленЭкипажаСуднаПодФлагомРФ") Тогда
		
		Возврат 3;
		
	ИначеЕсли ИмяПредопределенного = НРег("Беженцы") Тогда
		
		Возврат 4;
		
	ИначеЕсли ИмяПредопределенного = НРег("НерезидентРаботающийНаОснованииПатента") Тогда
		
		Возврат 5;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает имя предопределенного элемента справочника СтатусыНалогоплательщиковПоНДФЛ.
Функция ИмяСтатусаНалогоплательщика(СтатусНалогоплательщика)
	Если Не ЗначениеЗаполнено(СтатусНалогоплательщика) Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(СтатусНалогоплательщика) <> Тип("СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ") Тогда
		Возврат Строка(СтатусНалогоплательщика);
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатусНалогоплательщика, "ИмяПредопределенныхДанных");
	КонецЕсли;
КонецФункции

Функция СтатусНалогоплательщика(КодСтатусаНалогоплательщика) Экспорт
	Если ТипЗнч(КодСтатусаНалогоплательщика) = Тип("Число") Тогда
		КодСтатуса = КодСтатусаНалогоплательщика;
	Иначе
		КодСтатуса = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодСтатусаНалогоплательщика);
	КонецЕсли;
	
	// Возвращает код статуса налогоплательщика:
	// 0 - не является налоговым резидентом Российской Федерации;
	// 1 - является налоговым резидентом Российской Федерации (кроме налогоплательщиков,
	//     осуществляющих трудовую деятельность по найму в Российской Федерации на основании патента);
	// 2 - высококвалифицированный специалист не является налоговым резидентом Российской Федерации;
	// 3 - участник Государственной программы по оказанию содействия добровольному переселению
	//     в Российскую Федерацию соотечественников, проживающих за рубежом
	//     (член экипажа судна, плавающего под Государственным флагом Российской Федерации),
	//     не является налоговым резидентом Российской Федерации;
	// 4 - иностранный гражданин (лицо без гражданства) признан беженцем 
	//     или получивший временное убежище на территории Российской Федерации,
	//     не является налоговым резидентом Российской Федерации;
	// 5 - иностранный гражданин, осуществляет трудовую деятельность по найму в Российской Федерации на основании патента.
	
	Если КодСтатуса = 0 Тогда
		ИмяПредопределенного = "Нерезидент";
		
	ИначеЕсли КодСтатуса = 1 Тогда
		ИмяПредопределенного = "Резидент";
		
	ИначеЕсли КодСтатуса = 2 Тогда
		ИмяПредопределенного = "ВысококвалифицированныйИностранныйСпециалист";
		
	ИначеЕсли КодСтатуса = 3 Тогда
		// Выбор из двух вариантов: "УчастникПрограммыПоПереселениюСоотечественников", "ЧленЭкипажаСуднаПодФлагомРФ".
		Возврат Справочники.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка();
		
	ИначеЕсли КодСтатуса = 4 Тогда
		ИмяПредопределенного = "Беженцы";
		
	ИначеЕсли КодСтатуса = 5 Тогда
		ИмяПредопределенного = "НерезидентРаботающийНаОснованииПатента";
		
	Иначе
		Возврат Справочники.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ." + ИмяПредопределенного);
	
КонецФункции

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	// Изменение СНИЛС - чисто техническая операция, которая не имеет отношения к приему или увольнению.
	// Связанные действия обусловлены тем, что СНИЛС числится в измерениях регистра и влияет на уникальность записей.
	// Эти действия необходимо проводить сразу - в транзакции записи физического лица.
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтарыйСНИЛС) Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			ФизическоеЛицо,
			СтрШаблон(
				НСтр("ru = 'Изменен СНИЛС физического лица %1. Старый СНИЛС: %2, новый: %3.';
					|en = 'SNILS of person %1 is changed. Previous SNILS: %2. New SNILS: %3.'"),
				ФизическоеЛицо,
				СтарыйСНИЛС,
				НовыйСНИЛС),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЕсли;
	
	// 1. Регистр застрахованных лиц готовится заранее т.к. одна из стратегий - замена СНИЛС в записи регистра.
	РегистрыСведений.ЗастрахованныеЛицаСЭДО.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	
	// 2. Заполнение ссылок физических лиц во входящих документах СФР.
	Документы.ИзвещениеФСС.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.НесоответствиеСведенийОЗастрахованномЛицеСЭДО.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.ВходящийЗапросФССДляРасчетаПособия.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.ОтказВВозмещенииВыплатРодителямДетейИнвалидов.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.УведомлениеОСтатусеВыплатыПособия.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	РегистрыСведений.СведенияОбЭЛН.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.СреднийЗаработокСЭДО.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	Документы.СтатусыВыплатыПособия.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	
	// 3. В исходящих документах данные лучше оставить для истории.
	//    Чтобы было понятно почему в отправленном документе заполнились именно такие ФИО, дата рождения и т.п...
	// В регистрациях (результатах приема исходящих документов) ссылки физических лиц
	//   заполняются из отправленных документов. Поэтому их обновлять не требуется. См. документ
	//   РегистрацияСведенийОЗастрахованномЛицеФСС и регистры сведений РегистрацииОтветовНаЗапросыФССДляРасчетаПособий,
	//   РегистрацииУведомленийОПрекращенииОтпускаПоУходуЗаРебенком и РегистрацииИсходящихСообщенийОСтраховыхСлучаяхФСС.
	// Исключение - учет застрахованных лиц, там некоторые замены нужны. См. п.1 и п.5.
	
	// 4. Передача вызова в расширенную реализацию.
	МодульРасширеннойРеализации = МодульРасширеннойРеализации();
	Если МодульРасширеннойРеализации <> Неопределено Тогда
		МодульРасширеннойРеализации.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	КонецЕсли;
	
	// 5. Обновление вторичных данных в неотправленных сведениях о застрахованных лицах.
	Документы.СведенияОЗастрахованномЛицеФСС.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
КонецПроцедуры

Функция ФИОВРодительномПадеже(Фамилия, Имя, Отчество, ФизическоеЛицо) Экспорт
	Если Не ЗначениеЗаполнено(Фамилия) Или Не ЗначениеЗаполнено(Имя) Тогда
		Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
	КонецЕсли;
	ФИО = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
	ФИОВРодительномПадеже = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(ФИО, 2, ФИОВРодительномПадеже, , ФизическоеЛицо);
	Если Не ЗначениеЗаполнено(ФИОВРодительномПадеже) Тогда
		Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
	КонецЕсли;
	Возврат ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОВРодительномПадеже);
КонецФункции

Функция ТаблицаФизлицПоСНИЛС(МассивСНИЛС) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.СтраховойНомерПФР В(&МассивСНИЛС)";
	Запрос.УстановитьПараметр("МассивСНИЛС", МассивСНИЛС);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область Сотрудники

// Возвращает кадровые данные основного сотрудника.
//   Описания параметров см. у методов КадровыйУчет.ОсновнойСотрудникФизическогоЛица 
//   и КадровыйУчет.КадровыеДанныеСотрудников.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   ДатаПолучения - Дата - Дата получения кадровых данных.
//   ТолькоРазрешенные - Булево
//   ТекстОшибки - Строка - Заполняется в случае ошибки получения данных.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - Кадровые данные:
//       * Организация - СправочникСсылка.Организации
//   Неопределено - Если кадровые данные не найдены. В этом случае в параметре ТекстОшибки возвращается текст ошибки.
//
Функция КадровыеДанныеОсновногоСотрудникаФизическогоЛица(ФизическоеЛицо, ГоловнаяОрганизация, ИменаПолей,
	ПредполагаемыйСтрахователь = Неопределено, ПредполагаемаяОрганизация = Неопределено,
	ДатаПолученияУволенных = '00010101', ДатаПолученияРаботающих = '00010101', ТекстОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаПолученияРаботающих) Тогда
		ДатаПолученияРаботающих = ТекущаяДатаСеанса();
	КонецЕсли;
	ТолькоРазрешенные = Не ПривилегированныйРежим()
		И Не Пользователи.ЭтоПолноправныйПользователь();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолучения.Организация         = ГоловнаяОрганизация;
	ПараметрыПолучения.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ПараметрыПолучения.НачалоПериода       = ДатаПолученияУволенных;
	ПараметрыПолучения.ОкончаниеПериода    = ДатаПолученияРаботающих;
	
	Массив = СтрРазделить(ИменаПолей, ПробелыИПереносыСтрок() + ",", Ложь);
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Массив, "ГоловнаяОрганизация");
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Массив, "Организация");
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Массив, "ДатаУвольнения");
	ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Массив, "ВидЗанятости");
	ПараметрыПолучения.КадровыеДанные = СтрСоединить(Массив, ", ");
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|				ТОГДА &МаксимальнаяДата
	|			ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|		КОНЕЦ) КАК ДатаУвольнения,
	|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СотрудникиОрганизации.Организация КАК Организация,
	|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости
	|ПОМЕСТИТЬ МаксимальныеДатыУвольнения
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|ГДЕ
	|	(СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|			ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &ДатаПолученияУволенных)
	|	И (СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ИЛИ СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиОрганизации.ГоловнаяОрганизация,
	|	СотрудникиОрганизации.Организация,
	|	СотрудникиОрганизации.ВидЗанятости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА МаксимальныеДатыУвольнения.Организация В (&ДоступныеФилиалы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПравоПросмотраОрганизации,
	|	ВЫБОР
	|		КОГДА МаксимальныеДатыУвольнения.ДатаУвольнения = &ПустаяДата
	|				ИЛИ МаксимальныеДатыУвольнения.ДатаУвольнения >= &ДатаПолученияРаботающих
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Работает,
	|	МаксимальныеДатыУвольнения.ДатаУвольнения КАК ДатаУвольнения,
	|	ЕСТЬNULL(РегистрСтрахователей.ОтчитывающаясяОрганизация, МаксимальныеДатыУвольнения.Организация) КАК Страхователь,
	|	СотрудникиОрганизации.ВсеПоля КАК ВсеПоля
	|ИЗ
	|	МаксимальныеДатыУвольнения КАК МаксимальныеДатыУвольнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВестиУчетОтчитывающихсяПоВзносамОрганизаций КАК ВестиУчетОтчитывающихсяПоВзносамОрганизаций
	|		ПО (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтчитывающиесяПоВзносамОрганизации КАК РегистрСтрахователей
	|		ПО МаксимальныеДатыУвольнения.Организация = РегистрСтрахователей.Организация
	|			И (ВестиУчетОтчитывающихсяПоВзносамОрганизаций.Значение = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|		ПО МаксимальныеДатыУвольнения.Организация = СотрудникиОрганизации.Организация
	|			И МаксимальныеДатыУвольнения.ВидЗанятости = СотрудникиОрганизации.ВидЗанятости
	|			И (ВЫБОР
	|				КОГДА СотрудникиОрганизации.ДатаУвольнения = &ПустаяДата
	|					ТОГДА &МаксимальнаяДата
	|				ИНАЧЕ СотрудникиОрганизации.ДатаУвольнения
	|			КОНЕЦ = МаксимальныеДатыУвольнения.ДатаУвольнения)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст , "СотрудникиОрганизации.ВсеПоля КАК ВсеПоля", "СотрудникиОрганизации.*");
	
	Запрос.УстановитьПараметр("ДатаПолученияУволенных",  ДатаПолученияУволенных);
	Запрос.УстановитьПараметр("ДатаПолученияРаботающих", ДатаПолученияРаботающих);
	Запрос.УстановитьПараметр("ПустаяДата",              '00010101');
	Запрос.УстановитьПараметр("МаксимальнаяДата",        '39991231235959');
	
	ДоступныеФилиалы = ?(ТолькоРазрешенные, ЗарплатаКадры.ДоступныеОрганизации().Филиалы, Неопределено);
	Если ДоступныеФилиалы = Неопределено Тогда
		// Полные права.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МаксимальныеДатыУвольнения.Организация В (&ДоступныеФилиалы)", "ИСТИНА");
	Иначе
		// Не полные права.
		Запрос.УстановитьПараметр("ДоступныеФилиалы", ДоступныеФилиалы);
	КонецЕсли;
	
	ВсеОрганизации = Запрос.Выполнить().Выгрузить();
	Если ВсеОрганизации.Найти(Истина, "Работает") <> Неопределено
		И ВсеОрганизации.Найти(Ложь, "Работает") <> Неопределено Тогда
		ПодходящиеОрганизации = ВсеОрганизации.Скопировать(Новый Структура("Работает", Истина));
	Иначе
		ПодходящиеОрганизации = ВсеОрганизации;
	КонецЕсли;
	
	КоличествоПодходящих = ПодходящиеОрганизации.Количество();
	Если КоличествоПодходящих = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сотрудник ""%1"" на %2 не принят на работу.';
				|en = 'Employee ""%1"" is not hired as of ""%2"".'"),
			ФизическоеЛицо,
			Формат(ДатаПолученияРаботающих, "ДЛФ=D"));
		Возврат Неопределено;
	ИначеЕсли КоличествоПодходящих = 1 Тогда
		Возврат ПодходящиеОрганизации[0];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредполагаемаяОрганизация) Тогда
		Копия = ПодходящиеОрганизации.Скопировать(Новый Структура("Организация", ПредполагаемаяОрганизация));
		КоличествоПодходящих = Копия.Количество();
		Если КоличествоПодходящих = 1 Тогда
			Возврат Копия[0];
		ИначеЕсли КоличествоПодходящих > 1 Тогда
			ПодходящиеОрганизации = Копия;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредполагаемыйСтрахователь) Тогда
		Копия = ПодходящиеОрганизации.Скопировать(Новый Структура("Страхователь", ПредполагаемыйСтрахователь));
		КоличествоПодходящих = Копия.Количество();
		Если КоличествоПодходящих = 1 Тогда
			Возврат Копия[0];
		ИначеЕсли КоличествоПодходящих > 1 Тогда
			ПодходящиеОрганизации = Копия;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеОрганизаций = ПодходящиеОрганизации.ВыгрузитьКолонку("Организация");
	Если ДоступныеФилиалы <> Неопределено Тогда
		ВГраница = ПредставлениеОрганизаций.ВГраница();
		Для Индекс = 0 По ВГраница Цикл
			Если ДоступныеФилиалы.Найти(ПредставлениеОрганизаций[Индекс]) = Неопределено Тогда
				ПредставлениеОрганизаций[Индекс] = НСтр("ru = '<Недостаточно прав>';
														|en = '<Insufficient rights>'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Требуется выбрать организацию, т.к. сотрудник ""%1"" на %2 работает в нескольких организациях: %3.';
			|en = 'Select a company as employee ""%1"" works for several companies (%3) as of ""%2"".'"),
		ФизическоеЛицо,
		Формат(ДатаПолученияРаботающих, "ДЛФ=D"),
		СтрСоединить(ПредставлениеОрганизаций, ", "));
	Возврат ПодходящиеОрганизации[0];
КонецФункции

Функция ДоговорыФизлица(ГоловнаяОрганизация, ФизическоеЛицо, НачалоПериода, ОкончаниеПериода) Экспорт
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо",      Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаФизическихЛиц.Колонки.Добавить("НачалоПериода",       Новый ОписаниеТипов("Дата"));
	ТаблицаФизическихЛиц.Колонки.Добавить("ОкончаниеПериода",    Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаФизическихЛиц.Добавить();
	СтрокаТаблицы.ФизическоеЛицо      = ФизическоеЛицо;
	СтрокаТаблицы.ГоловнаяОрганизация = ГоловнаяОрганизация;
	СтрокаТаблицы.НачалоПериода       = НачалоПериода;
	СтрокаТаблицы.ОкончаниеПериода    = ОкончаниеПериода;
	
	Возврат КадровыйУчет.ДоговорыФизическихЛиц(ТаблицаФизическихЛиц);
КонецФункции

Функция ДоговорФизлицаНаДатуСобытия(ГоловнаяОрганизация, ФизическоеЛицо, ДатаНачалаСобытия) Экспорт
	Если Не ЗначениеЗаполнено(ФизическоеЛицо)
		Или Не ЗначениеЗаполнено(ГоловнаяОрганизация)
		Или Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Начало = НачалоДня(ДобавитьМесяц(ДатаНачалаСобытия, -1));
	Конец  = '39991231235959';
	Договоры = ДоговорыФизлица(ГоловнаяОрганизация, ФизическоеЛицо, Начало, Конец);
	Договоры.Колонки.Добавить("ВключаетДатуСобытия", Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("Трудовой",            Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("ГПХ",                 Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("ОказаниеУслуг",       Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("Авторский",           Новый ОписаниеТипов("Булево"));
	Если Договоры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	Договоры.Сортировать("Начало, Окончание");
	Для Каждого Договор Из Договоры Цикл
		Если Договор.Начало > Конец
			Или (Договор.Окончание > '00010101' И Договор.Окончание < Начало) Тогда
			Продолжить;
		КонецЕсли;
		Договор.ВключаетДатуСобытия = (Договор.Окончание = '00010101' Или Договор.Окончание > ДатаНачалаСобытия);
		Договор.Трудовой            = Договор.ВидДоговора = Ложь;
		Договор.ГПХ                 = Договор.ВидДоговора = Истина;
		Договор.ОказаниеУслуг       = Договор.ГПХ И Договор.ВидДоговораГПХ = Ложь;
		Договор.Авторский           = Договор.ГПХ И Договор.ВидДоговораГПХ = Истина;
		
		Если Результат = Неопределено
			Или Результат.ВключаетДатуСобытия < Договор.ВключаетДатуСобытия
			Или (Результат.Трудовой < Договор.Трудовой И Результат.ВключаетДатуСобытия = Договор.ВключаетДатуСобытия) Тогда
			Результат = Договор;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ТекущийДоговорФизлица(ГоловнаяОрганизация, ФизическоеЛицо, ДатаСреза) Экспорт
	Результат = Неопределено;
	ИменаПолей = "Начало, Окончание, Трудовой, ГПХ, ОказаниеУслуг, Авторский";
	
	Договоры = ДоговорыФизлица(ГоловнаяОрганизация, ФизическоеЛицо, ДатаСреза, ДатаСреза);
	Договоры.Колонки.Добавить("Трудовой",      Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("ГПХ",           Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("ОказаниеУслуг", Новый ОписаниеТипов("Булево"));
	Договоры.Колонки.Добавить("Авторский",     Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТаблицы Из Договоры Цикл
		Если СтрокаТаблицы.Начало > ДатаСреза
			Или (СтрокаТаблицы.Окончание > '00010101' И СтрокаТаблицы.Окончание < ДатаСреза) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Трудовой      = СтрокаТаблицы.ВидДоговора = Ложь;
		СтрокаТаблицы.ГПХ           = СтрокаТаблицы.ВидДоговора = Истина;
		СтрокаТаблицы.ОказаниеУслуг = СтрокаТаблицы.ГПХ И СтрокаТаблицы.ВидДоговораГПХ = Ложь;
		СтрокаТаблицы.Авторский     = СтрокаТаблицы.ГПХ И СтрокаТаблицы.ВидДоговораГПХ = Истина;
		Если Результат = Неопределено Тогда
			Результат = Новый Структура(ИменаПолей);
			ЗаполнитьЗначенияСвойств(Результат, СтрокаТаблицы, ИменаПолей);
			Продолжить;
		КонецЕсли;
		Результат.Начало        = Мин(СтрокаТаблицы.Начало, Результат.Начало);
		Результат.Окончание     = Макс(СтрокаТаблицы.Окончание, Результат.Окончание);
		Результат.Трудовой      = Макс(СтрокаТаблицы.Трудовой, Результат.Трудовой);
		Результат.ГПХ           = Макс(СтрокаТаблицы.ГПХ, Результат.ГПХ);
		Результат.ОказаниеУслуг = Макс(СтрокаТаблицы.ОказаниеУслуг, Результат.ОказаниеУслуг);
		Результат.Авторский     = Макс(СтрокаТаблицы.Авторский, Результат.Авторский);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДокументыФизическихЛиц

// Возвращает сведения о виде документа: Представление, ЭтоПаспортРФ, КодМВД.
//
// Параметры:
//   Представление             - Строка
//   ИмяПредопределенныхДанных - Строка
//   КодМВД                    - Строка
//
// Возвращаемое значение:
//   Структура
//       * Представление - Строка
//       * ЭтоПаспортРФ  - Булево
//       * КодМВД        - Строка
//
Функция СведенияОВидеДокумента(Представление, ИмяПредопределенныхДанных, КодМВД) Экспорт
	ЭтоПаспортРФ = СтрСравнить(ИмяПредопределенныхДанных, "ПаспортРФ") = 0 Или КодМВД = "21";
	
	Результат = Новый Структура("КодМВД, КодФСС, ЭтоПаспортРФ, Представление");
	Результат.КодМВД        = КодМВД;
	Результат.ЭтоПаспортРФ  = ЭтоПаспортРФ;
	Результат.Представление = ?(ЭтоПаспортРФ, НСтр("ru = 'Паспорт';
													|en = 'Passport'"), Представление);
	
	// Особенность ФСС (и СЭДО и прямых выплат):
	// Виду документов "Свидетельство о предоставлении временного убежища на территории РФ"
	// в спецификации ФСС присвоен код 19, а в классификации ФНС - код 18.
	Если Результат.КодМВД = "18" Тогда
		Результат.КодФСС = "19";
	Иначе
		Результат.КодФСС = Результат.КодМВД;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПоказыватьРазрешениеНаПроживание(КодСтраныГражданства) Экспорт
	Возврат Не ЗначениеЗаполнено(КодСтраныГражданства)
		Или Не ГражданствоРФ(КодСтраныГражданства);
КонецФункции

Функция ГражданствоРФ(КодСтраныГражданства) Экспорт
	Возврат КодСтраныГражданства = "643";
КонецФункции

Функция ПредставлениеУдостоверенияЛичности(ВидДокумента, Серия, Номер, ДатаВыдачи,
	СрокДействия     = Неопределено,
	КемВыдан         = Неопределено,
	КодПодразделения = Неопределено) Экспорт
	
	Представления = Новый Массив;
	
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(ВидДокумента);
	Если ЗначениеЗаполнено(СведенияОВидеДокумента.Представление) Тогда
		Представления.Добавить(СведенияОВидеДокумента.Представление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Серия) Тогда
		Представления.Добавить(" " + СтрЗаменить(Серия, " ", ""));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Представления.Добавить(" № " + Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаВыдачи) Или ЗначениеЗаполнено(КемВыдан) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', выдан %1 %2';
													|en = 'issued %1 %2'"), Формат(ДатаВыдачи, "ДЛФ=D"), КемВыдан)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокДействия) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', действует до %1';
													|en = ', valid until %1'"), Формат(СрокДействия, "ДЛФ=D"))));
	КонецЕсли;
	
	Если СведенияОВидеДокумента.ЭтоПаспортРФ И ЗначениеЗаполнено(КодПодразделения) Тогда
		Представления.Добавить(СокрП(СтрШаблон(НСтр("ru = ', код подр. %1';
													|en = ', business unit code %1'"), КодПодразделения)));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДокумента) И Представления.Количество() > 0 Тогда
		Представления.Вставить(0, НСтр("ru = '<Вид документа не заполнен>';
										|en = '<Document kind is not filled in>'"));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, "");
КонецФункции

Функция СведенияОВидеРазрешенияНаПроживание(ВидДокумента) Экспорт
	СведенияОВидеДокумента = СЭДОФССПовтИсп.СведенияОВидеДокумента(ВидДокумента);
	Если СведенияОВидеДокумента.Свойство("ЭтоВНЖ") Тогда
		Возврат СведенияОВидеДокумента;
	КонецЕсли;
	
	СведенияОВидеДокумента.Вставить("ЭтоВНЖ", Ложь);
	СведенияОВидеДокумента.Вставить("ЭтоРВП", Ложь);
	
	Если Не СведенияОВидеДокумента.ЭтоПаспортРФ Тогда
		Если ЭтоВидНаЖительство(СведенияОВидеДокумента.КодМВД) Тогда
			СведенияОВидеДокумента.ЭтоВНЖ = Истина;
		ИначеЕсли ЭтоРазрешениеНаВременноеПроживание(СведенияОВидеДокумента.КодМВД) Тогда
			СведенияОВидеДокумента.ЭтоРВП = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОВидеДокумента;
КонецФункции

Функция ЭтоВидНаЖительство(КодМВД) Экспорт
	Возврат КодМВД = "12";
КонецФункции

Функция ЭтоРазрешениеНаВременноеПроживание(КодМВД) Экспорт
	Возврат КодМВД = "15";
КонецФункции

#КонецОбласти

#Область РодственникиФизическихЛиц

// Возвращает Истина если в данном варианте внедрения поле "Родственник" следует показывать пользователю.
//
// Возвращаемое значение:
//   Булево
//
Функция ВидимостьПоляРодственник() Экспорт
	ОписаниеТипа = Метаданные.ОпределяемыеТипы.РодственникФизическогоЛица.Тип;
	Возврат Не ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
КонецФункции

Функция ПустаяТаблицаРодственников() Экспорт
	Родственники = Новый ТаблицаЗначений;
	Родственники.Колонки.Добавить("Номер",          Новый ОписаниеТипов("Число"));
	Родственники.Колонки.Добавить("Фамилия",        Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("Имя",            Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("Отчество",       Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("ФИО",            Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("ДатаРождения",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Родственники.Колонки.Добавить("ВозрастЛет",     ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	Родственники.Колонки.Добавить("ВозрастМесяцев", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	Родственники.Колонки.Добавить("СНИЛС",          Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("КодСвязи",       Новый ОписаниеТипов("Строка"));
	Родственники.Колонки.Добавить("Ключи");
	Родственники.Колонки.Добавить("Ссылка");
	Возврат Родственники;
КонецФункции

Функция КадровыеДанныеРодственника(Родственник, ПолучатьПол = Ложь) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульСЭДОФССРасширенный = ОбщегоНазначения.ОбщийМодуль("СЭДОФССРасширенный");
		Возврат МодульСЭДОФССРасширенный.КадровыеДанныеРодственника(Родственник, ПолучатьПол);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
КонецФункции

Функция КадровыеДанныеРодственников(ОтборКД, ПолучатьПол = Ложь) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульСЭДОФССРасширенный = ОбщегоНазначения.ОбщийМодуль("СЭДОФССРасширенный");
		Возврат МодульСЭДОФССРасширенный.КадровыеДанныеРодственников(ОтборКД, ПолучатьПол);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
КонецФункции

// Вызывается при получении ЭЛН.
Процедура ЗаполнитьСсылкиРодственников(ФизическоеЛицо, ТаблицаРодственников, Создавать = Истина) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы") Тогда
		МодульСЭДОФССРасширенный = ОбщегоНазначения.ОбщийМодуль("СЭДОФССРасширенный");
		МодульСЭДОФССРасширенный.ЗаполнитьСсылкиРодственников(ФизическоеЛицо, ТаблицаРодственников, Создавать);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО
КонецПроцедуры

#КонецОбласти

#Область Адреса

Функция КраткоеПредставлениеАдреса(ЗначениеАдреса) Экспорт
	ПараметрыСведенийОбАдресе = Новый Структура;
	ПараметрыСведенийОбАдресе.Вставить("БезПредставлений", Истина);
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса, ПараметрыСведенийОбАдресе);
	
	Представления = Новый Массив;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		Представления.Добавить(СведенияОбАдресе.Город);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
		Представления.Добавить(СведенияОбАдресе.НаселенныйПункт);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.Регион) Тогда
		Представления.Добавить(СведенияОбАдресе.Регион);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СведенияОбАдресе.Улица) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.УлицаТипКраткий) + " " + СведенияОбАдресе.Улица);
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.Территория) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.ТерриторияТипКраткий) + " " + СведенияОбАдресе.Территория);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание.Номер) Тогда
		Представления.Добавить(НРег(СведенияОбАдресе.Здание.ТипЗдания) + " " + СведенияОбАдресе.Здание.Номер);
	КонецЕсли;
	
	Корпус = КонтактнаяИнформацияБЗК.ПредставлениеКорпусовКраткое(СведенияОбАдресе, ", ", " ");
	Если ЗначениеЗаполнено(Корпус) Тогда
		Представления.Добавить(НРег(Корпус));
	КонецЕсли;
	
	Помещение = КонтактнаяИнформацияБЗК.ПредставлениеПомещенийКраткое(СведенияОбАдресе, ", ", " ");
	Если ЗначениеЗаполнено(Помещение) Тогда
		Представления.Добавить(НРег(Помещение));
	КонецЕсли;
	
	Возврат СтрСоединить(Представления, ", ");
КонецФункции

Процедура ВывестиАдрес(КонтекстПечати, ЗначениеАдреса, Префикс) Экспорт
	Если Не ЗначениеЗаполнено(ЗначениеАдреса) Тогда
		Область = КонтекстПечати.Макет.ПолучитьОбласть(Префикс + "_Вариант1");
		КонтекстПечати.ТабличныйДокумент.Вывести(Область);
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура(КонтекстПечати.ИменаПараметровОбластей[Префикс + "_Вариант2"]);
	Секция    = УправлениеПечатьюБЗК.СекцияПечатнойФормы(КонтекстПечати, Префикс + "_Вариант2");
	
	Параметры[Префикс + "Представление"] = МногострочноеПредставлениеАдреса(ЗначениеАдреса);
	
	Секция.ТабличныйДокумент.Параметры.Заполнить(Параметры);
	КонтекстПечати.ТабличныйДокумент.Вывести(Секция.ТабличныйДокумент);
КонецПроцедуры

// Возвращает полное многострочное представление адреса для печати (вывода в табличный документ).
//
// Параметры:
//   ЗначениеАдреса - Строка - Адрес в формате JSON.
//
// Возвращаемое значение:
//   Строка - Полное многострочное представление адреса.
//
Функция МногострочноеПредставлениеАдреса(ЗначениеАдреса) Экспорт
	Структура = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса);
	
	МассивСтрок = Новый Массив;
	
	// Порядок полей: Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Строение, Квартира.
	
	// Уровни адресных объектов:
	//   1.  Регион.
	//   2.  Автономный округ (устаревшее).
	//   3.  Район.
	//   35. Городские и сельские поселения.
	//   4.  Город.
	//   5.  Внутригородская территория (устаревшее).
	//   6.  Населенный пункт.
	//   65. Планировочная структура
	//   7.  Улица.
	//   75. Земельный участок.
	//   8.  Здание, сооружение, объект незавершенного строительства.
	//   9.  Помещение в пределах здания, сооружения.
	//   90. Дополнительная территория (устаревшее).
	//   91. Объект на дополнительной территории (устаревшее).
	
	Если ЗначениеЗаполнено(Структура.Индекс) Тогда
		// * Индекс - Строка - почтовый индекс.
		МассивСтрок.Добавить(НСтр("ru = 'Индекс: ';
									|en = 'ZIP code:'") + Структура.Индекс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Структура.Регион) Тогда
		// * КодРегиона       - Строка - код региона РФ.
		// * Регион           - Строка - текстовое представление региона РФ. Для получения полного наименования региона
		//                                      следует использовать функцию РегионАдресаКонтактнойИнформации.
		// * РегионТипПолный  - Строка - полное наименование типа региона. Например: "область".
		// * РегионТипКраткий - Строка - краткое наименование типа региона. Например: "обл".
		Тип           = НСтр("ru = 'Регион';
							|en = 'Region'");
		Представление = Структура.Регион;
		ТипПолный     = Структура.РегионТипПолный;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Структура.Район) Тогда
		// * Район            - Строка - текстовое представление района у адресов по административно-территориальному делению.
		// * РайонТипПолный   - Строка - полное наименование типа района для адреса по административно-территориальному
		//                               делению. Например: "район".
		// * РайонТипКраткий  - Строка - краткое наименование типа района для адреса по административно-территориальному
		//                               делению. Например: "р-н".
		Тип           = НСтр("ru = 'Район';
							|en = 'District'");
		Представление = Структура.Район;
		ТипПолный     = Структура.РайонТипПолный;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	КонецЕсли;
	
	// Ключ "МуниципальныйРайон" не используется,
	// поскольку представление адреса формируется в административно-территориальном делении.
	// * МуниципальныйРайон           - Строка - текстовое представление муниципального района
	//                                           для адреса по муниципальному делению.
	// * МуниципальныйРайонТипПолный  - Строка - полное наименование типа муниципального района по муниципальному
	//                                           делению. Например: "городской округ".
	// * МуниципальныйРайонТипКраткий - Строка - краткое наименование типа муниципального района для адреса по
	//                                           муниципальному делению. Например: "мун.р-н".
	// * КодМуниципальногоРайона      - Строка - код муниципального района:
	//                                           1- муниципальный район; 2- городской округ;
	//                                           3 - внутригородская территория города федерального значения;
	//                                           4 - муниципальный округ.
	//                                           Если не удалось определить код, то возвращается пустая строка.
	
	Если ЗначениеЗаполнено(Структура.Город) Тогда
		// * Город            - Строка - текстовое представление города у адресов по административно-территориальному делению.
		// * ГородТипПолный   - Строка - полное наименование типа города у адресов по административно-территориальному делению.
		// * ГородТипКраткий  - Строка - текстовое представление города у адресов по административно-территориальному делению.
		Тип           = НСтр("ru = 'Город';
							|en = 'City'");
		Представление = Структура.Город;
		ТипПолный     = Структура.ГородТипПолный;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	КонецЕсли;
	
	// Ключ "Поселение" не используется,
	// поскольку представление адреса формируется в административно-территориальном делении.
	// * Поселение            - Строка - текстовое представление поселения у адресов по муниципальному делению.
	// * ПоселениеТипПолный   - Строка - полное наименование типа сельского поселения по муниципальному делению.
	//                                   Например: "сельское поселение".
	// * ПоселениеТипКраткий  - Строка - краткое наименование типа муниципального района для адреса по муниципальному
	//                                   делению. Например: "с. п.".
	// * КодПоселения         - Строка - код поселения: 1 - городское поселение; 2 - сельское поселение; 3- межселенная
	//                                   территория в составе муниципального района; 4 - внутригородской район городского округа;
	
	Если ЗначениеЗаполнено(Структура.НаселенныйПункт) Тогда
		// * НаселенныйПункт           - Строка - текстовое представление населенного пункта.
		// * НаселенныйПунктТипПолный  - Строка - полное наименование типа населенного пункта. Например: "деревня".
		// * НаселенныйПунктТипКраткий - Строка - краткое наименование типа  населенного пункта. Например: "д".
		Тип           = НСтр("ru = 'Населенный пункт';
							|en = 'Locality'");
		Представление = Структура.НаселенныйПункт;
		ТипПолный     = Структура.НаселенныйПунктТипПолный;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	ИначеЕсли ЗначениеЗаполнено(Структура.ВнутригородскойРайон) Тогда
		// * ВнутригородскойРайон           - Строка  - текстовое представление внутригородского района.
		// * ВнутригородскойРайонТипПолный  - Строка - полное наименование типа внутригородского района. Например: "микрорайон".
		// * ВнутригородскойРайонТипКраткий - Строка - краткое наименование типа внутригородского района. Например: "мкр".
		Тип = Структура.ВнутригородскойРайонТипПолный;
		Если Не ЗначениеЗаполнено(Тип) Тогда
			Тип = НСтр("ru = 'Внутригородской район';
						|en = 'City district'");
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Структура.ВнутригородскойРайон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Структура.Территория) Тогда
		// * Территория           - Строка - текстовое представление территории.
		// * ТерриторияТипПолный  - Строка - полное наименование типа территории. Например: "Гаражно-строительный кооп.".
		// * ТерриторияТипКраткий - Строка - краткое наименование типа территории. Например: "гск".
		Тип = Структура.ТерриторияТипПолный;
		Если Не ЗначениеЗаполнено(Тип) Тогда
			Тип = НСтр("ru = 'Территория';
						|en = 'Territory'");
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Структура.Территория);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Структура.Улица) Тогда
		// * Улица           - Строка - текстовое представление улицы.
		// * УлицаТипПолный  - Строка - полное наименование типа улицы. Например: "Улица".
		// * УлицаТипКраткий - Строка - краткое наименование типа улицы. Например: "ул".
		Тип           = НСтр("ru = 'Улица';
							|en = 'Street'");
		Представление = Структура.Улица;
		ТипПолный     = Структура.УлицаТипПолный;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	ИначеЕсли ЗначениеЗаполнено(Структура.ДополнительнаяТерритория) Тогда
		// * ДополнительнаяТерритория           - Строка - устаревшее свойство. Текстовое представление дополнительной территории.
		// * ДополнительнаяТерриторияСокращение - Строка - устаревшее свойство. Сокращение дополнительной территории.
		Тип           = НСтр("ru = 'Дополнительная территория';
							|en = 'Additional territory'");
		Представление = Структура.ДополнительнаяТерритория;
		ТипПолный     = Структура.ДополнительнаяТерриторияСокращение;
		Если ЗначениеЗаполнено(ТипПолный) И НРег(ТипПолный) <> НРег(Тип) Тогда
			Представление = Представление + " " + ТипПолный;
		КонецЕсли;
		МассивСтрок.Добавить(Тип + ": " + Представление);
	КонецЕсли;
	
	МассивПоследнейСтроки = Новый Массив;
	
	// * Здание - Структура - структура с информацией о здании адреса:
	//   ** ТипЗдания - Строка - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
	//   ** Номер     - Строка  - текстовое представление номера дома (только для адресов РФ).
	Здание = Структура.Здание;
	Если ЗначениеЗаполнено(Здание.Номер) Тогда
		Тип = Здание.ТипЗдания;
		Если Не ЗначениеЗаполнено(Тип) Тогда
			Тип = НСтр("ru = 'Дом';
						|en = 'House'");
		КонецЕсли;
		МассивПоследнейСтроки.Добавить(Тип + ": " + Здание.Номер);
	КонецЕсли;
	
	// * НомерЗемельногоУчастка - Строка - текстовое представление номера земельного участка (только для адресов РФ).
	Если ЗначениеЗаполнено(Структура.НомерЗемельногоУчастка)
		И Структура.НомерЗемельногоУчастка <> Здание.Номер Тогда
		МассивПоследнейСтроки.Добавить(НСтр("ru = 'Земельный участок: ';
											|en = 'Land plot:'") + Структура.НомерЗемельногоУчастка);
	КонецЕсли;
	
	// * Корпуса - Массив - содержит структуры (поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
	Для Каждого Корпус Из Структура.Корпуса Цикл
		Если Не ЗначениеЗаполнено(Корпус.Номер) Тогда
			Продолжить;
		КонецЕсли;
		Тип = Корпус.ТипКорпуса;
		Если Не ЗначениеЗаполнено(Тип) Тогда
			Тип = НСтр("ru = 'Строение';
						|en = 'Construction'");
		КонецЕсли;
		МассивПоследнейСтроки.Добавить(Тип + ": " + Корпус.Номер);
	КонецЦикла;
	
	// * Помещения - Массив - содержит структуры (поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
	Для Каждого Помещение Из Структура.Помещения Цикл
		Если Не ЗначениеЗаполнено(Помещение.Номер) Тогда
			Продолжить;
		КонецЕсли;
		Тип = Помещение.ТипПомещения;
		Если Не ЗначениеЗаполнено(Тип) Тогда
			Тип = НСтр("ru = 'Квартира';
						|en = 'Apartment'");
		КонецЕсли;
		МассивПоследнейСтроки.Добавить(Тип + ": " + Помещение.Номер);
	КонецЦикла;
	
	Если МассивПоследнейСтроки.Количество() > 0 Тогда
		МассивСтрок.Добавить(СтрСоединить(МассивПоследнейСтроки, "    "));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

#КонецОбласти

#Область Банки

Функция НайтиБанкПоБИК(БИК, КоррСчет = "") Экспорт
	Если Не ЗначениеЗаполнено(БИК) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаБанков = РаботаСБанками.СведенияБИК(БИК);
	
	Количество = ТаблицаБанков.Количество();
	Если Количество = 0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Количество > 1 Тогда
		
		Если ЗначениеЗаполнено(КоррСчет) Тогда
			Копия = ТаблицаБанков.Скопировать(Новый Структура("КоррСчет", КоррСчет));
			Копия.Сортировать("ДеятельностьПрекращена Возр");
			Если Копия.Количество() > 0 Тогда
				Возврат Копия[0].Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаБанков.Сортировать("ДеятельностьПрекращена Возр");
		
	КонецЕсли;
	
	Возврат ТаблицаБанков[0].Ссылка;
КонецФункции

#КонецОбласти

#Область Поддержка

Функция ПодготовитьВопросВПоддержку(ДокументОбъект, Вложения) Экспорт
	ИменаРеквизитов = "Ссылка, ГоловнаяОрганизация, Организация, Страхователь, ИдентификаторСообщения, 
		|Дата, ВерсияСпецификации, Ответственный, ХранилищеXML";
	Реквизиты = ОбщегоНазначенияБЗК.ЗначенияСвойств(ДокументОбъект, ИменаРеквизитов);
	
	Организация            = Реквизиты.Организация;
	ИдентификаторСсылки    = Строка(Реквизиты.Ссылка.УникальныйИдентификатор());
	ИдентификаторСообщения = Строка(Реквизиты.ИдентификаторСообщения);
	ДатаВремяДокумента     = Строка(Реквизиты.Дата);
	
	МетаданныеДокумента    = ДокументОбъект.Метаданные();
	ИмяДокумента           = МетаданныеДокумента.Имя;
	ПредставлениеДокумента = МетаданныеДокумента.Представление();
	Менеджер               = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
	ТипСообщения           = Менеджер.ТипСообщения();
	
	ПрочиеСведения = Новый Массив;
	
	ВерсияСпецификации = Реквизиты.ВерсияСпецификации;
	Если ВерсияСпецификации <> Неопределено Тогда
		ПрочиеСведения.Добавить(СтрШаблон(НСтр("ru = 'Версия спецификации документа СЭДО: %1.';
												|en = 'Version of EDI document standards: %1.'"), ВерсияСпецификации));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Реквизиты.Страхователь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Реквизиты.ГоловнаяОрганизация;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ИдентификаторСообщения = ИдентификаторСсылки;
	КонецЕсли;
	
	ИменаПолей =
	"НаимЮЛПол,
	|НаимЮЛСокр,
	|РегистрационныйНомерФСС,
	|КодПодчиненностиФСС,
	|ДополнительныйКодФСС,
	|ИННЮЛ,
	|КППЮЛ,
	|ОГРН";
	Сведения = СЭДОФСС.СведенияОСтрахователе(Организация, ИменаПолей, ТекущаяДатаСеанса());
	
	НаименованиеОрганизации = ?(ЗначениеЗаполнено(Сведения.НаимЮЛПол), Сведения.НаимЮЛПол, Сведения.НаимЮЛСокр);
	
	Если ЗначениеЗаполнено(Сведения.ДополнительныйКодФСС)
		И Сведения.ДополнительныйКодФСС <> Сведения.РегистрационныйНомерФСС Тогда
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС + " (" + Сведения.ДополнительныйКодФСС + ")";
	Иначе
		РегистрацияФСС = Сведения.РегистрационныйНомерФСС + "/" + Сведения.КодПодчиненностиФСС;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	Иначе
		ФизическоеЛицо = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = УполномоченныйПредставитель(Организация).ФизическоеЛицо;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = Реквизиты.Ответственный;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация; 
	
	//  Вложения - Массив Из Структура, Неопределено - файлы вложений. Важно: допускаются только
	//              текстовые вложения (*.txt). Поля структуры элемента вложения:
	//   *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
	//   *ВидДанных - Строка - определяет преобразование переданных данных.
	//                Возможна передача одного из значений:
	//                  - ИмяФайла - Строка - полное имя файла вложения;
	//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
	//                  - Текст - Строка - текст вложения;
	//   *Данные - Строка - данные для формирования вложения;
	ТекстXML = "";
	Если ТипЗнч(Реквизиты.ХранилищеXML) = Тип("ХранилищеЗначения") Тогда
		ТекстXML = Реквизиты.ХранилищеXML.Получить();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстXML) И ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		ТекстXML = ТекстXML(ИдентификаторСообщения);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, КодировкаТекста.UTF8, Истина);
		Вложение = Новый Структура("Представление, ВидДанных, Данные");
		Вложение.Представление = ИмяДокумента + "_" + ТипСообщения + "_" + ИдентификаторСообщения + ".xml";
		Вложение.ВидДанных     = "Адрес";
		Вложение.Данные        = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Вложения.Вставить(0, Вложение);
		СтатусВложенияXML = НСтр("ru = '(xml приложен)';
								|en = '(XML is attached)'");
	Иначе
		СтатусВложенияXML = НСтр("ru = '(xml пуст)';
								|en = '(XML is empty)'");
	КонецЕсли;
	
	Если ПрочиеСведения.Количество() > 0 Тогда
		ПрочиеСведения.Вставить(0, "");
		ПрочиеСведения.Добавить("");
	КонецЕсли;
	
	//  ДанныеСообщения - Структура - данные для формирования сообщения:
	//   *Тема - Строка - тема сообщения;
	//   *Сообщение  - Строка - тело текст сообщения для отправки;
	//   *Получатель - Строка - условное имя получателя сообщения. Возможные значения:
	//        - "webIts" - соответствует адресам "webits-info@1c.ru" и "webits-info@1c.ua",
	//          необходимый адрес выбирается в соответствии с настройками доменной зоны
	//          серверов Интернет-поддержки;
	//        - "taxcom" - соответствует адресу "taxcom@1c.ru";
	//        - "backup" - соответствует адресу "support.backup@1c.ru";
	Сообщение = СообщенияВСлужбуТехническойПоддержкиКлиентСервер.ДанныеСообщения();
	Сообщение.ИспользоватьСтандартныйШаблон = Ложь;
	Сообщение.Получатель = "v8";
	Сообщение.Тема = НСтр("ru = 'Вопрос по СЭДО (тип [Тип]: [Представление]) от [Дата] ([Идентификатор])';
							|en = 'EDI question (type [Тип]: [Представление]) from [Дата] ([Идентификатор])'");
	Сообщение.Тема = СтрЗаменить(Сообщение.Тема, "[Тип]",           ТипСообщения);
	Сообщение.Тема = СтрЗаменить(Сообщение.Тема, "[Представление]", ПредставлениеДокумента);
	Сообщение.Тема = СтрЗаменить(Сообщение.Тема, "[Дата]",          ДатаВремяДокумента);
	Сообщение.Тема = СтрЗаменить(Сообщение.Тема, "[Идентификатор]", ИдентификаторСообщения);
	Сообщение.Сообщение = НСтр(
		"ru = 'Здравствуйте!
		|Вопрос по документу ""[Документ]"" [Уточнение].
		|
		|<Опишите вопрос, приложите снимки экрана>.
		|
		|Регистрационный номер программы: <Укажите номер из регистрационной карточки программного продукта>.
		|
		|Организация: [Организация].
		|ОГРН: [ОГРН], ИНН: [ИНН], КПП: [КПП].
		|Регистрация в СФР: [РегистрацияФСС].
		|Версия платформы: [ВерсияПлатформы].
		|Версия конфигурации: [ИмяКонфигурация] [ВерсияКонфигурации].
		|[ПрочиеСведения]
		|С уважением, [Ответственный].';
		|en = 'Hello,
		|I have a question about the ""[Документ]"" document [Уточнение].
		|
		|<Describe the issue and attach screenshots>.
		|
		|Application registration number: <Specify a number from the software registration card>.
		|
		|Company: [Организация].
		|PSRN: [ОГРН], TIN: [ИНН], KPP: [КПП].
		|Registration with the Social Insurance Fund of Russia: [РегистрацияФСС].
		|Platform version: [ВерсияПлатформы].
		|Configuration version: [ИмяКонфигурация] [ВерсияКонфигурации].
		|[ПрочиеСведения]
		|Sincerely, [Ответственный].'");
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Документ]",           Строка(Реквизиты.Ссылка));
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Уточнение]",          СтатусВложенияXML);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Организация]",        НаименованиеОрганизации);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ОГРН]",               Сведения.ОГРН);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИНН]",                Сведения.ИННЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[КПП]",                Сведения.КППЮЛ);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[РегистрацияФСС]",     РегистрацияФСС);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ИмяКонфигурация]",    Метаданные.Имя);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияКонфигурации]", Метаданные.Версия);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ПрочиеСведения]",     СтрСоединить(ПрочиеСведения, Символы.ПС));
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[ВерсияПлатформы]",    СистемнаяИнформация.ВерсияПриложения);
	Сообщение.Сообщение = СтрЗаменить(Сообщение.Сообщение, "[Ответственный]",      ФизическоеЛицо);
	
	ПараметрыЖурнала = Неопределено;
	
	Возврат СообщенияВСлужбуТехническойПоддержки.ПодготовитьСообщение(Сообщение, Вложения, ПараметрыЖурнала);
КонецФункции

#КонецОбласти

#Область СвертываемыеГруппы_СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьСвертываемыеГруппы(Форма) Экспорт
	ВидимостьОбновлена = Ложь;
	
	ИнициализироватьСвертываемыеГруппы(Форма, ВидимостьОбновлена);
	
	Если Не ВидимостьОбновлена Тогда
		Для Каждого КлючИЗначение Из Форма.ПараметрыСвертываемыхГрупп Цикл
			ОбновитьЭлементыСвертываемойГруппы(Форма, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьСвертываемуюГруппу(Форма, Группа) Экспорт
	ОбновитьЭлементыСвертываемойГруппы(Форма, Форма.ПараметрыСвертываемыхГрупп[Группа.Имя]);
КонецПроцедуры

Процедура СвернутьРазвернутьГруппу(Форма, ИмяЭлемента) Экспорт
	Позиция = СтрНайти(ИмяЭлемента, "_", НаправлениеПоиска.СКонца);
	Если Позиция = 0 Тогда
		ИмяГруппы = ИмяЭлемента;
	Иначе
		ИмяГруппы = Лев(ИмяЭлемента, Позиция - 1);
	КонецЕсли;
	ПараметрыГруппы = Форма.ПараметрыСвертываемыхГрупп[ИмяГруппы];
	ПараметрыГруппы.Развернута = Не (ПараметрыГруппы.Развернута Или ПараметрыГруппы.ТребуетЗаполнения);
	ПараметрыГруппы.ТребуетЗаполнения = Ложь;
	СохранитьНастройкиСвертываемыхГрупп(Форма);
	ОбновитьЭлементыСвертываемойГруппы(Форма, ПараметрыГруппы);
КонецПроцедуры

Процедура СвертываемыеГруппыОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	Для Каждого КлючИЗначение Из Форма.ПараметрыСвертываемыхГрупп Цикл
		КлючИЗначение.Значение.ТребуетЗаполнения = Ложь;
	КонецЦикла;
КонецПроцедуры

Процедура СвертываемыеГруппыАдаптироватьСообщениеПользователю(Форма, Сообщение) Экспорт
	Элемент = Форма.Элементы.Найти(Сообщение.Поле);
	Если Элемент = Неопределено И СтрНайти(Сообщение.Поле, "[") > 0 Тогда
		Массив = СтрРазделить(Сообщение.Поле, "[].", Ложь);
		Элемент = Форма.Элементы.Найти(Массив[0]);
	КонецЕсли;
	Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		Элемент.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	ПараметрыГрупп = Форма.ПараметрыСвертываемыхГрупп;
	ПараметрыГруппы = Неопределено;
	Пока Истина Цикл
		Элемент = Элемент.Родитель;
		Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
			Прервать;
		КонецЕсли;
		Если ПараметрыГрупп.Свойство(Элемент.Имя, ПараметрыГруппы) И Не ПараметрыГруппы.Развернута Тогда
			ПараметрыГруппы.ТребуетЗаполнения = Истина;
			ОбновитьЭлементыСвертываемойГруппы(Форма, ПараметрыГруппы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СвертываемыеГруппы_СлужебныеПроцедурыИФункции

Процедура ОбновитьЭлементыСвертываемойГруппы(Форма, ПараметрыГруппы, СвертываемаяГруппа = Неопределено, Картинка = Неопределено, Кнопка = Неопределено)
	ИмяГруппы = ПараметрыГруппы.Имя;
	Родитель  = Форма.Элементы[ИмяГруппы + "_1"];
	
	Если СвертываемаяГруппа = Неопределено Тогда
		Элементы           = Форма.Элементы;
		СвертываемаяГруппа = Элементы[ИмяГруппы];
		Картинка           = Элементы[ИмяГруппы + "_Картинка"];
		Кнопка             = Элементы[ИмяГруппы + "_Команда"];
	КонецЕсли;
	
	Представление = Неопределено;
	Заполнена     = Неопределено;
	Развернута    = ПараметрыГруппы.Развернута Или ПараметрыГруппы.ТребуетЗаполнения;
	Видимость     = Родитель.Видимость;
	
	Форма.ПриОпределенииСвойствСвертываемойГруппы(СвертываемаяГруппа, Представление, Заполнена, Развернута, Видимость);
	
	Если Видимость <> Родитель.Видимость Тогда
		Родитель.Видимость = Видимость;
	КонецЕсли;
	Если Не Видимость Тогда
		Возврат;
	КонецЕсли;
	
	СвертываемаяГруппа.Видимость = Развернута;
	
	Если Заполнена = Неопределено Тогда
		Заполнена = Развернута Или ЗначениеЗаполнено(Представление);
	КонецЕсли;
	Если Не Развернута И Не Заполнена И Не ЗначениеЗаполнено(Представление) Тогда
		Представление = НСтр("ru = 'Нет';
							|en = 'No'");
	КонецЕсли;
	Если Заполнена Тогда
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизЗеленая, БиблиотекаКартинок.СтрелкаВправоЗеленая);
		Кнопка.ЦветТекста = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
	Иначе
		Картинка.Картинка = ?(Развернута, БиблиотекаКартинок.СтрелкаВнизСераяБЗК, БиблиотекаКартинок.СтрелкаВправоСераяБЗК);
		Кнопка.ЦветТекста = ЦветаСтиля.ЗаголовокПоляЗаполняемогоАвтоматическиЦветБЗК;
	КонецЕсли;
	Если Развернута Или Не ЗначениеЗаполнено(Представление) Или Представление = "-" Тогда
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок;
	Иначе
		Кнопка.Заголовок = СвертываемаяГруппа.Заголовок + ": " + Представление;
	КонецЕсли;
КонецПроцедуры

Процедура ИнициализироватьСвертываемыеГруппы(Форма, ВидимостьОбновлена)
	Если Форма.ПараметрыСвертываемыхГрупп <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Наполнение списка групп.
	МассивГрупп = Новый Массив;
	Форма.ПриОпределенииСвертываемыхГрупп(МассивГрупп);
	// Перенос параметров в реквизит формы.
	ПараметрыГрупп = Новый Структура;
	ШаблонГруппы = Новый Структура("Имя, Развернута, ТребуетЗаполнения", "", Ложь, Ложь);
	Для Каждого ГруппаФормы Из МассивГрупп Цикл
		ПараметрыГруппы = Новый Структура(Новый ФиксированнаяСтруктура(ШаблонГруппы));
		ПараметрыГруппы.Имя = ГруппаФормы.Имя;
		ПараметрыГрупп.Вставить(ПараметрыГруппы.Имя, ПараметрыГруппы);
	КонецЦикла;
	Форма.ПараметрыСвертываемыхГрупп = ПараметрыГрупп;
	// Чтение настроек списка.
	ПрочитатьНастройкиСвертываемыхГрупп(Форма);
	// Добавление элементов формы.
	ДобавитьЭлементыСвертываемыхГрупп(Форма);
	// Отключение второго цикла.
	ВидимостьОбновлена = Истина;
	Форма.ПослеДобавленияЭлементовСвертываемыхГрупп();
КонецПроцедуры

Процедура ПрочитатьНастройкиСвертываемыхГрупп(Форма)
	Хранилище = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Форма.ИмяФормы, "СвертываемыеГруппы");
	ПараметрыГрупп  = Форма.ПараметрыСвертываемыхГрупп;
	ПараметрыГруппы = Неопределено;
	Если ТипЗнч(Хранилище) = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементСписка Из Хранилище Цикл
			Если ПараметрыГрупп.Свойство(ЭлементСписка.Значение, ПараметрыГруппы) Тогда
				ПараметрыГруппы.Развернута = ЭлементСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из Хранилище Цикл
			Если ПараметрыГрупп.Свойство(КлючИЗначение.Ключ, ПараметрыГруппы) Тогда
				ПараметрыГруппы.Развернута = КлючИЗначение.Значение.Развернута;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьНастройкиСвертываемыхГрупп(Форма)
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Форма.ИмяФормы, "СвертываемыеГруппы", Форма.ПараметрыСвертываемыхГрупп);
КонецПроцедуры

Процедура ДобавитьЭлементыСвертываемыхГрупп(Форма)
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	Для Каждого КлючИЗначение Из Форма.ПараметрыСвертываемыхГрупп Цикл
		ПараметрыГруппы    = КлючИЗначение.Значение;
		ИмяГруппы          = ПараметрыГруппы.Имя;
		СвертываемаяГруппа = Элементы.Найти(ИмяГруппы);
		Если СвертываемаяГруппа = Неопределено Тогда
			Текст = СтрШаблон(НСтр("ru = 'Не найдена сворачивающаяся группа %1';
									|en = 'Collapsible group %1 is not found'"), ИмяГруппы);
			СообщенияБЗК.СообщитьОПроблеме(Текст);
			Форма.ПараметрыСвертываемыхГрупп.Очистить();
			Возврат;
		КонецЕсли;
		Родитель = СвертываемаяГруппа.Родитель;
		
		ГруппаСтрок = Элементы.Вставить(ИмяГруппы + "_1", Тип("ГруппаФормы"), Родитель, СвертываемаяГруппа);
		ГруппаСтрок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтрок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаСтрок.Отображение = СвертываемаяГруппа.Отображение;
		ГруппаСтрок.ОтображатьЗаголовок = Ложь;
		
		ГруппаКолонок = Элементы.Добавить(ИмяГруппы + "_2", Тип("ГруппаФормы"), ГруппаСтрок);
		ГруппаКолонок.Вид         = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКолонок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаКолонок.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКолонок.ОтображатьЗаголовок = Ложь;
		ГруппаКолонок.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		ГруппаКолонок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		Картинка = Элементы.Добавить(ИмяГруппы + "_Картинка", Тип("ДекорацияФормы"), ГруппаКолонок);
		Картинка.Вид         = ВидДекорацииФормы.Картинка;
		Картинка.Гиперссылка = Истина;
		Картинка.УстановитьДействие("Нажатие", "Подключаемый_СвернутьРазвернутьГруппу");
		
		Команда = Команды.Добавить(ИмяГруппы + "_Команда");
		Команда.Действие = "Подключаемый_СвернутьРазвернутьГруппу";
		
		Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), ГруппаКолонок);
		Кнопка.ИмяКоманды        = Команда.Имя;
		Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Кнопка.ЦветТекста        = ЦветаСтиля.ОбычнаяГруппаЦветБЗК;
		Кнопка.Шрифт             = СвертываемаяГруппа.ШрифтЗаголовка;
		
		Если ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
			Или ГруппаСтрок.Отображение = ОтображениеОбычнойГруппы.СильноеВыделение Тогда
			Кнопка.Шрифт = ШрифтыСтиля.ОбычнаяГруппаШрифтБЗК;
		КонецЕсли;
		
		Элементы.Переместить(СвертываемаяГруппа, ГруппаСтрок);
		
		СвертываемаяГруппа.Поведение            = ПоведениеОбычнойГруппы.Обычное;
		СвертываемаяГруппа.Отображение          = ОтображениеОбычнойГруппы.Нет;
		СвертываемаяГруппа.ОтображатьЗаголовок  = Ложь;
		СвертываемаяГруппа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСлева;
		СвертываемаяГруппа.Подсказка            = " ";
		
		ОбновитьЭлементыСвертываемойГруппы(Форма, ПараметрыГруппы, СвертываемаяГруппа, Картинка, Кнопка);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

Функция ПредставлениеСписка(Список, ОграничениеДлины, Разделитель = "; ") Экспорт
	Всего = Список.Количество();
	Если Всего = 0 Тогда
		Возврат "";
	КонецЕсли;
	Первый            = Истина;
	Обработано        = 0;
	ИспользованоДлины = 0;
	ДлинаВсего        = Цел(Log10(Всего)) + 4;
	ДлинаРазделителя  = СтрДлина(Разделитель);
	
	Представления = Новый Массив;
	Для Каждого Элемент Из Список Цикл
		Обработано = Обработано + 1;
		Представление = СокрЛП(?(ЗначениеЗаполнено(Элемент.Представление), Элемент.Представление, Строка(Элемент.Значение)));
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		Длина = СтрДлина(Представление);
		ИспользованоДлины = ИспользованоДлины + Длина + ?(Первый, 0, ДлинаРазделителя);
		Превышение = ИспользованоДлины - ОграничениеДлины;
		Если Обработано < Всего Тогда
			Превышение = Превышение + ДлинаВсего;
		КонецЕсли;
		Если Превышение > 0 Тогда
			ВмещаетсяБукв = Длина - Превышение;
			Если ВмещаетсяБукв > 10 Тогда
				Первый = Ложь;
				Представления.Добавить(Лев(Представление, ВмещаетсяБукв - 3) + "...");
			КонецЕсли;
			Прервать;
		Иначе
			Первый = Ложь;
			Представления.Добавить(Представление);
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрСоединить(Представления, Разделитель);
	Если Обработано < Всего Тогда
		Результат = Результат + " (" + Формат(Всего, "ЧГ=") + ")";
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ИзвлечьФрагментыBase64(Строка)
	Массив = СтрРазделить(Строка, " " + Символы.ПС + Символы.Таб, Ложь);
	Для Каждого Фрагмент Из Массив Цикл
		Фрагмент = СокрЛП(Фрагмент);
		Если СтрДлина(Фрагмент) > 20 Тогда
			ИзвлеченныйФрагмент = СтрокаИзBase64(Фрагмент);
			Если ЗначениеЗаполнено(ИзвлеченныйФрагмент)
				И ИзвлеченныйФрагмент <> Фрагмент
				И ТолькоДопустимыеСимволыВСтроке(ИзвлеченныйФрагмент) Тогда
				Строка = СтрЗаменить(Строка, Фрагмент, ИзвлеченныйФрагмент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ТолькоДопустимыеСимволыВСтроке(ПроверяемаяСтрока) Экспорт
	Возврат НайтиНедопустимыеСимволыXML(ПроверяемаяСтрока) = 0 // Быстрая проверка.
		И НедопустимыеСимволыСтроки(ПроверяемаяСтрока).Количество() = 0; // Медленная проверка.
КонецФункции

Функция НедопустимыеСимволыСтроки(ПроверяемаяСтрока) Экспорт
	РазрешенныеСимволы = "0123456789
	|abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя
	|ABCDEFGHIJKLMNOPQRSTUVWXYZАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ
	|<>{}[]()«»!@#$%^&*+-=/*\/№?_""'`,.:;" + ПробелыИПереносыСтрок();
	Возврат СтрРазделить(ПроверяемаяСтрока, РазрешенныеСимволы, Ложь);
КонецФункции

Функция СтрокаИзBase64(СтрокаBase64)
	Если ПустаяСтрока(СтрокаBase64) Тогда
		Возврат СтрокаBase64;
	КонецЕсли;
	Попытка
		Данные = Base64Значение(СтрокаBase64);
		Если Данные = Неопределено Тогда
			Возврат СтрокаBase64;
		КонецЕсли;
		Чтение = Новый ЧтениеДанных(Данные);
		Строка = Чтение.ПрочитатьСимволы();
		Чтение.Закрыть();
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Возврат СтрокаBase64;
		КонецЕсли;
		Возврат Строка;
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			"СЭДОФСС.СтрокаИзBase64",
			СтрШаблон(
				НСтр("ru = 'При извлечении содержимого строки base64 <<%1>> возникла ошибка: %2';
					|en = 'An error occurred while extracting the line base64 <<%1>> content: %2'"),
				СтрокаBase64,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат СтрокаBase64;
	КонецПопытки;
КонецФункции

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   ДокументОбъект - ДокументОбъект - Записываемый документ.
//   ОтправлятьВДругиеУзлы - Булево, Неопределено - Включает регистрацию документа на узлах планов обмена.
//       Значение по умолчанию: Ложь для существующих документов, Истина для новых документов.
//   ВключитьБизнесЛогику - Булево, Неопределено, Строка - Определяет необходимость выполнения обработчиков записи
//       (ПередЗаписью, ПриЗаписи).
//       Истина             - Выполнять код обрабочтиков.
//       Ложь, Неопределено - Не выполнять код обрабочтиков.
//       "БЗК"              - Выполнять только код зарплатно-кадровых механизмов.
//   РежимЗаписи - РежимЗаписиДокумента, Неопределено - Режим записи документа.
//       Значение по умолчанию: РежимЗаписиДокумента.Запись.
//
Процедура ЗаписатьДокумент(Знач ДокументОбъект, Знач ОтправлятьВДругиеУзлы = Неопределено, 
	Знач ВключитьБизнесЛогику = Неопределено, Знач РежимЗаписи = Неопределено) Экспорт
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	Если ЭтоНовый И Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ОтправлятьВДругиеУзлы = Неопределено Тогда
		// Новые ссылочные объекты должны всегда регистрироваться к обмену.
		// См. ОбменДаннымиСобытия.ЗарегистрироватьИзменениеОбъекта.
		ОтправлятьВДругиеУзлы = ЭтоНовый;
	ИначеЕсли ТипЗнч(ОтправлятьВДругиеУзлы) <> Тип("Булево") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра РегистрироватьНаУзлахПлановОбмена';
								|en = 'Invalid type of parameter РегистрироватьНаУзлахПлановОбмена'");
	КонецЕсли;
	
	Если ВключитьБизнесЛогику = Неопределено Тогда
		ВключитьБизнесЛогику = Ложь;
	ИначеЕсли ВключитьБизнесЛогику = "БЗК" Тогда
		ВключитьБизнесЛогику = Ложь;
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	ИначеЕсли ТипЗнч(ВключитьБизнесЛогику) <> Тип("Булево") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра ВключитьБизнесЛогику';
								|en = 'Invalid type of parameter ВключитьБизнесЛогику'");
	КонецЕсли;
	
	Если РежимЗаписи = Неопределено Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	ИначеЕсли ТипЗнч(РежимЗаписи) <> Тип("РежимЗаписиДокумента") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра РежимЗаписи';
								|en = 'Invalid type of parameter РежимЗаписи'");
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ДокументОбъект.ПометкаУдаления Тогда
		// По умолчанию предполагается что пользователь установил пометку удаления вручную и заинтересован в сохранении
		//   этого состояния документа даже если код по какой-то причине изменяет некоторые реквизиты документа.
		// Переопределить это поведение можно сняв пометку удаления перед проведением документа.
		Комментарий = СтрШаблон(
			НСтр("ru = 'При проведении документа %1 могла возникнуть ошибка по причине наличия пометки на удаление. Режим записи документа снижен до ""Запись"" (был ""%2"").';
				|en = 'An error could occur when posting the %1 document as the document was marked for deletion. The document write mode was changed to ""Save"" (previous value is ""%2"").'"),
			ДокументОбъект,
			РежимЗаписи);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Предупреждение,
			ДокументОбъект.Метаданные(),
			?(ЭтоНовый, ДокументОбъект.Номер, ДокументОбъект.Ссылка),
			Комментарий,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	РежимЗаписиТребуетВключенияБизнесЛогики = (РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	Если ВключитьБизнесЛогику Или Не РежимЗаписиТребуетВключенияБизнесЛогики Тогда
		// Подойдет реализация в БСП.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(
			ДокументОбъект,
			ОтправлятьВДругиеУзлы,
			ВключитьБизнесЛогику,
			РежимЗаписи);
	Иначе
		// Для проведения или отмены проведения без включенной бизнес-логики типовая реализация не подходит.
		ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ", ОтправлятьВДругиеУзлы);
		ДокументОбъект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
		
		Если Не ОтправлятьВДругиеУзлы И Не ЭтоНовый Тогда
			ДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		КонецЕсли;
		
		Если ВключитьБизнесЛогику Тогда
			ДокументОбъект.Записать(РежимЗаписи);
		Иначе
			Если Не ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ДокументОбъект.Проведен = Истина;
			ИначеЕсли ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				ДокументОбъект.Проведен = Ложь;
			КонецЕсли;
			ДокументОбъект.Записать();
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект);
	КонецЕсли;
КонецПроцедуры

Функция ПробелыИПереносыСтрок() Экспорт
	Возврат " " + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
КонецФункции

// Преобразует строковое представление версии в числовое.
Функция ВерсияЧислом(СтрокаВерсии, КоличествоРазрядов = 4, МножительРазрядов = 10000) Экспорт
	Если ТипЗнч(СтрокаВерсии) = Тип("Число") Тогда
		Возврат СтрокаВерсии;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Тогда
		Возврат 0;
	КонецЕсли;
	Результат = 0;
	Фрагменты = СтрРазделить(СтрокаВерсии, ".");
	Разряд = 0;
	Для Каждого ФрагментВерсии Из Фрагменты Цикл
		Результат = Результат * МножительРазрядов + Число(ФрагментВерсии);
		Разряд = Разряд + 1;
	КонецЦикла;
	Если Разряд <> КоличествоРазрядов Тогда
		Результат = Результат / Pow(МножительРазрядов, Разряд - КоличествоРазрядов);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ПеренестиОтборыВПользовательскиеНастройки(Форма, Список) Экспорт
	Параметры = Форма.Параметры;
	Если Параметры.Отбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Массив = Новый Массив;
	НастройкиКД = Список.КомпоновщикНастроек.Настройки;
	Для Каждого КлючИЗначение Из Параметры.Отбор Цикл
		Массив.Добавить(КлючИЗначение.Ключ);
		ПараметрКД = Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ);
		ДоступнаяНастройка = НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ПараметрКД);
		Если ДоступнаяНастройка <> Неопределено Тогда
			НастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Иначе
			УстановитьЗначениеОтбора(
				НастройкиКД,
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		КонецЕсли;
	КонецЦикла;
	Если Форма.КлючНазначенияИспользования = "" Тогда
		Форма.КлючНазначенияИспользования = СтрСоединить(Массив, ",");
	КонецЕсли;
	Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
	Параметры.Отбор.Очистить();
КонецПроцедуры

Процедура УстановитьЗначениеОтбора(НастройкиКД, ИмяПоля, ЗначениеПоля, РежимОтображения) Экспорт
	Тип = ТипЗнч(ЗначениеПоля);
	Если Тип = Тип("Структура") Тогда
		Условие = ВидСравненияКомпоновкиДанных[ЗначениеПоля.Вид];
		Значение = ЗначениеПоля.Значение;
	ИначеЕсли Тип = Тип("Массив") Тогда
		Условие = ВидСравненияКомпоновкиДанных.ВСписке;
		Значение = ЗначениеПоля;
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда
		Условие = ВидСравненияКомпоновкиДанных.ВСписке;
		Значение = ЗначениеПоля.ВыгрузитьЗначения();
	ИначеЕсли Тип = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Условие = ЗначениеПоля;
		Значение = Неопределено;
	Иначе
		Условие = ВидСравненияКомпоновкиДанных.Равно;
		Значение = ЗначениеПоля;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		НастройкиКД.Отбор,
		ИмяПоля,
		Значение,
		Условие,
		,
		Истина,
		РежимОтображения);
КонецПроцедуры

Функция ПредставлениеНомераИДаты(Номер, Дата) Экспорт
	Если ЗначениеЗаполнено(Номер) Или ЗначениеЗаполнено(Дата) Тогда
		Возврат СтрШаблон(НСтр("ru = '№ %1 от %2';
								|en = 'No. %1 from %2'"), Номер, Формат(Дата, "ДЛФ=D"));
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#Область XML

Функция ПредставлениеСпискаОшибокXML(СписокОшибокDOM) Экспорт
	// Для сообщения 321 ожидаемые поля: code,message,details.
	Если СписокОшибокDOM = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МассивСтрок = Новый Массив;
	Для Каждого ОшибкаDOM Из СписокОшибокDOM.ДочерниеУзлы Цикл
		Если ОшибкаDOM.ТипУзла <> ТипУзлаDOM.Элемент Тогда
			Продолжить;
		КонецЕсли;
		УзлыОшибки = СериализацияБЗК.УзлыЭлементаDOMСКонтролем(ОшибкаDOM, "code, message, details");
		Код         = СериализацияБЗК.СтрокаИзXML(УзлыОшибки.code);
		Сообщение   = СериализацияБЗК.СтрокаИзXML(УзлыОшибки.message);
		Подробности = СериализацияБЗК.СтрокаИзXML(УзлыОшибки.details);
		// Все данные будут записываться в переменную Сообщение.
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Массив = СтрРазделить(Сообщение, Символы.ПС + Символы.ВК, Ложь);
			Сообщение = СтрСоединить(Массив, Символы.ПС + "  ");
		КонецЕсли;
		Если ЗначениеЗаполнено(Подробности) Тогда
			Массив = СтрРазделить(Подробности, Символы.ПС + Символы.ВК, Ложь);
			Подробности = СтрСоединить(Массив, Символы.ПС + "    ");
			Сообщение = ?(ЗначениеЗаполнено(Сообщение), Сообщение + Символы.ПС + "    " + Подробности, Подробности);
		КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			Сообщение = СокрП(Код + ": " + Сообщение);
		КонецЕсли;
		Если УзлыОшибки.ПредставленияНеобработанныхУзловDOM.Количество() > 0 Тогда
			Необработанные = СтрСоединить(УзлыОшибки.ПредставленияНеобработанныхУзловDOM, Символы.ПС);
			Необработанные = НСтр("ru = 'Необработанные узлы сообщения:';
									|en = 'Unprocessed message nodes:'") + Символы.ПС + Необработанные;
			Сообщение = ?(ЗначениеЗаполнено(Сообщение), Сообщение + Символы.ПС + "    " + Необработанные, Необработанные);
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			МассивСтрок.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
КонецФункции

#КонецОбласти

#Область Печать

Процедура УстановитьСтандартныйОтступПечати(КонтекстПечати) Экспорт
	ТабличныйДокумент = КонтекстПечати.ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.РазмерКолонтитулаСнизу  = 0;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	УправлениеПечатьюБЗК.УстановитьОтступ(ТабличныйДокумент, 2, 2, 2, 0);
КонецПроцедуры

#КонецОбласти

Функция СведенияОВидеПособия(ВидПособия) Экспорт
	Результат = Новый Структура(
		"ЭтоЛН, ЭтоОбычныйБольничный, ЭтоБольничныйПоБиР, ЭтоПособиеПриРождении, ЭтоОтпускПоУходу, ЭтоНСПЗ, Числом",
		Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, 0);
	
	Если ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности Тогда
		Результат.Числом = 1;
		Результат.ЭтоОбычныйБольничный = Истина;
	ИначеЕсли ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам Тогда
		Результат.Числом = 2;
		Результат.ЭтоБольничныйПоБиР = Истина;
	ИначеЕсли ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка Тогда
		Результат.Числом = 4;
		Результат.ЭтоПособиеПриРождении = Истина;
	ИначеЕсли ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком Тогда
		Результат.Числом = 5;
		Результат.ЭтоОтпускПоУходу = Истина;
	ИначеЕсли ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве Тогда
		Результат.Числом = 6;
		Результат.ЭтоНСПЗ = Истина;
	КонецЕсли;
	
	Результат.ЭтоЛН = Результат.ЭтоОбычныйБольничный Или Результат.ЭтоБольничныйПоБиР Или Результат.ЭтоНСПЗ;
	
	Возврат Результат;
КонецФункции

Функция ПредставлениеСпособаВыплаты(Документ) Экспорт
	Если Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
		Если ЗначениеЗаполнено(Документ.КартаМИР) Тогда
			Возврат СтрШаблон(НСтр("ru = 'На карту МИР %1 ';
									|en = 'To MIR card %1 '"), Строка(Документ.КартаМИР));
		КонецЕсли;
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
		Если ЗначениеЗаполнено(Документ.НомерСчета) Тогда
			Возврат СтрШаблон(НСтр("ru = 'На счет в банке %1';
									|en = 'To bank account %1'"), Документ.Банк);
		КонецЕсли;
	ИначеЕсли Документ.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		Если ЗначениеЗаполнено(Документ.АдресПроживания) Тогда
			ВидВДательномПадеже = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(Документ.АдресПроживанияВид),
				3,
				Документ.АдресПроживанияВид);
			Возврат СтрШаблон(
				НСтр("ru = 'По %1: %2';
					|en = 'By %1: %2'"),
				НРег(ВидВДательномПадеже),
				СЭДОФСС.КраткоеПредставлениеАдреса(Документ.АдресПроживания));
		КонецЕсли;
	Иначе
		Возврат Строка(Документ.СпособВыплатыПособия);
	КонецЕсли;
	Возврат "";
КонецФункции

Функция СписокВыбораКатегорийЗастрахованныхЛиц(СписокВыбора = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	СписокВыбора.Добавить("INSURED", НСтр("ru = 'Застрахованное лицо';
											|en = 'Insured person'"));
	СписокВыбора.Добавить("PRISONER", НСтр("ru = 'Oсужденное к лишению свободы лицо, привлекаемое к оплачиваемому труду';
											|en = 'A person sentenced to imprisonment assigned with paid work'"));
	СписокВыбора.Добавить("COMPULSORY", НСтр("ru = 'Лицо, осужденное к принудительным работам, привлеченное к труду';
											|en = 'A person sentenced to community service, involved in labor'"));
	// Категория "VOLUNTEER" (добровольно вступившие в правоотношения по ОСС по ВНИМ) исключена 09.02.2023.
	Возврат СписокВыбора;
КонецФункции

Функция СписокВыбораПричинИсправления(СписокВыбора = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	
	СписокВыбора.Добавить("1", НСтр("ru = 'Представлены дополнительные сведения о выплатах в расчетном периоде';
									|en = 'Additional information about payments in payroll period is submitted'"));
	СписокВыбора.Добавить("2", НСтр("ru = 'Поступление от застрахованного лица заявления о замене одного года или двух лет расчетного периода предшествующими годами';
									|en = 'Receipt of an application from an insured person for replacement of one or two years of the payroll period with the previous years'"));
	СписокВыбора.Добавить("3", НСтр("ru = 'По результатам документальной выездной (камеральной) проверки';
									|en = 'Based on the results of documentary field tax inspection'"));
	СписокВыбора.Добавить("4", НСтр("ru = 'Перерасчет листка нетрудоспособности при признании несчастного случая на производстве страховым';
									|en = 'Recalculation of sick leave record if industrial accident is considered insurable'"));
	СписокВыбора.Добавить("5", НСтр("ru = 'Перерасчет листка нетрудоспособности в случае ошибки в расчете работодателя';
									|en = 'Recalculation of sick leave record in case of employer calculation error'"));
	СписокВыбора.Добавить("6", НСтр("ru = 'Иное';
									|en = 'Other'"));
	
	Для Каждого Элемент Из СписокВыбора Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

Функция СписокВыбораСпособовВыплаты(СписокВыбора = Неопределено, ТекущееЗначение = Неопределено, КатегорияЗастрахованногоЛица = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	ЭтоСведенияОЗастрахованномЛице = (КатегорияЗастрахованногоЛица = Неопределено);
	
	СписокВыбора.Добавить(Перечисления.СпособыВыплатыПособия.НаКартуМИР);
	СписокВыбора.Добавить(Перечисления.СпособыВыплатыПособия.ЧерезБанк);
	СписокВыбора.Добавить(Перечисления.СпособыВыплатыПособия.ПочтовымПереводом);
	
	ИнаяОрганизация = Перечисления.СпособыВыплатыПособия.ИнаяОрганизация;
	Если ТекущееЗначение = ИнаяОрганизация
		Или КатегорияЗастрахованногоЛица = "PRISONER"
		Или КатегорияЗастрахованногоЛица = "COMPULSORY"
		Или (ЭтоСведенияОЗастрахованномЛице
			И СпособыПрямыхВыплатФСС.ВидимостьСпособаВыплатыЧерезИнуюОрганизацию()) Тогда
		СписокВыбора.Добавить(ИнаяОрганизация);
	КонецЕсли;
	
	Для Каждого Элемент Из СписокВыбора Цикл
		Элемент.Представление = Строка(Элемент.Значение);
	КонецЦикла;
	
	ПустаяСсылка = Перечисления.СпособыВыплатыПособия.ПустаяСсылка();
	Если ТекущееЗначение = ПустаяСсылка
		Или ЭтоСведенияОЗастрахованномЛице Тогда
		СписокВыбора.Добавить(ПустаяСсылка, НСтр("ru = 'Нет';
												|en = 'No'"));
	КонецЕсли;
	
	Возврат СписокВыбора;
КонецФункции

Процедура НастроитьПолеВидУдостоверенияЛичности(ПолеВвода, ТекущееЗначение = Неопределено, КодыМВД = "") Экспорт
	СписокВыбора = ПолеВвода.СписокВыбора;
	
	Если СписокВыбора.Количество() = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Виды.Ссылка КАК Ссылка,
		|	Виды.КодМВД КАК КодМВД,
		|	Виды.Наименование КАК Наименование,
		|	Виды.Представление КАК Представление
		|ИЗ
		|	Справочник.ВидыДокументовФизическихЛиц КАК Виды
		|ГДЕ
		|	Виды.КодМВД В(&КодыМВД)
		|	И НЕ Виды.ПометкаУдаления";
		Если ЗначениеЗаполнено(КодыМВД) Тогда
			МассивКодовМВД = СтрРазделить(КодыМВД, ", ", Ложь);
			Запрос.УстановитьПараметр("КодыМВД", МассивКодовМВД);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Виды.КодМВД В(&КодыМВД)", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Виды.ПометкаУдаления", "НЕ Виды.ПометкаУдаления");
		КонецЕсли;
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Если Таблица.Количество() = 0 Тогда
			УстановитьОтключениеБезопасногоРежима(Истина);
			УстановитьПривилегированныйРежим(Истина);
			КадровыйУчет.ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД();
			УстановитьПривилегированныйРежим(Ложь);
			УстановитьОтключениеБезопасногоРежима(Ложь);
			Таблица = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			СписокВыбора.Добавить(СтрокаТаблицы.Ссылка, "(" + СтрокаТаблицы.КодМВД + ") " + СтрокаТаблицы.Представление);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КодыМВД) Тогда
			ПолеВвода.КнопкаСоздания = СписокВыбора.Количество() < МассивКодовМВД.Количество();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееЗначение)
		И СписокВыбора.НайтиПоЗначению(ТекущееЗначение) = Неопределено Тогда
		СписокВыбора.Добавить(ТекущееЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыЗапросаИлиОтветаДляРасчетаПособия(Форма, ЭтоФормаСписка) Экспорт
	Если ЭтоФормаСписка Тогда
		Список = ОбщегоНазначенияБЗК.ЗначениеСвойства(Форма, "Список");
		Если ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
			ПеренестиОтборыВПользовательскиеНастройки(Форма, Список);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура НастроитьПолеВводаПервичногоДокумента(ВидПособия, Сотрудник, ПолеВвода, ПервичныйДокумент) Экспорт
	СвойстваПособия = ПрямыеВыплатыПособийСоциальногоСтрахования.СвойстваПособияФСС(ВидПособия, ПервичныйДокумент);
	
	ОбратныйИндекс = СвойстваПособия.ПараметрыВыбора.Количество();
	Пока ОбратныйИндекс > 0 Цикл
		ОбратныйИндекс = ОбратныйИндекс - 1;
		ПараметрВыбора = СвойстваПособия.ПараметрыВыбора[ОбратныйИндекс];
		Если СтрЗаканчиваетсяНа(ПараметрВыбора.Имя, "ПособиеВыплачиваетсяФСС") Тогда
			СвойстваПособия.ПараметрыВыбора.Удалить(ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипов = СвойстваПособия.ОписаниеТипов;
	Если ОписаниеТипов = Неопределено Тогда
		Если ПолеВвода.ВыбиратьТип Тогда
			ОписаниеТипов = Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия.Реквизиты.ДокументОснование.Тип;
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОписаниеТипов.СодержитТип(ТипЗнч(ПервичныйДокумент)) Тогда
		ПервичныйДокумент = ОписаниеТипов.ПривестиЗначение();
	КонецЕсли;
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Если СвойстваПособия.ОтбиратьПоСотруднику Тогда
			ПутьКРеквизитуСвязи = "Объект.Сотрудник";
		Иначе
			ПутьКРеквизитуСвязи = "Объект.ФизическоеЛицо";
		КонецЕсли;
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Сотрудник", ПутьКРеквизитуСвязи));
	КонецЕсли;
	
	// Скрытие поля "Документ основание" в случае, когда выбор документа технически невозможен, а именно:
	// Описание типов пустое, либо типов несколько и первичный документ не заполнен (ПервичныйДокумент = Неопределено);
	// И выбор типа первичного документа запрещен и тип строго зависит от вида пособия (Не ПолеВвода.ВыбиратьТип).
	ПолеВвода.Видимость             = (ПервичныйДокумент <> Неопределено Или ПолеВвода.ВыбиратьТип);
	ПолеВвода.ОграничениеТипа       = ОписаниеТипов;
	ПолеВвода.Заголовок             = СвойстваПособия.ЗаголовокПоля;
	ПолеВвода.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	ПолеВвода.ПараметрыВыбора       = Новый ФиксированныйМассив(СвойстваПособия.ПараметрыВыбора);
КонецПроцедуры

Функция ЗаполнитьПервичныйДокументДляРасчетаПособияФСС(Документ, ПараметрыФиксации = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(Документ.ВидПособия)
		Или Не ЗначениеЗаполнено(Документ.ГоловнаяОрганизация)
		Или Не ЗначениеЗаполнено(Документ.ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваПособия = ПрямыеВыплатыПособийСоциальногоСтрахования.СвойстваПособияФСС(Документ.ВидПособия, Неопределено);
	Если СвойстваПособия.ОписаниеТипов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ПервичныйДокумент", Документ.ПервичныйДокумент);
	
	Для Каждого Тип Из СвойстваПособия.ОписаниеТипов.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			МенеджерОснования = Документы[ОбъектМетаданных.Имя];
			МенеджерОснования.ЗаполнитьПервичныйДокументДляРасчетаПособияФСС(Документ, Реквизиты);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьДанныеШапки(Реквизиты, Документ, ПараметрыФиксации);
КонецФункции

Функция ОтветНаЗапросРасширенныеДанные(Документ) Экспорт
	МодульРасширеннойРеализации = МодульРасширеннойРеализации();
	Если МодульРасширеннойРеализации = Неопределено Тогда
		Возврат Новый Структура;
	Иначе
		Возврат МодульРасширеннойРеализации.ОтветНаЗапросРасширенныеДанные(Документ);
	КонецЕсли;
КонецФункции

Функция МодульРасширеннойРеализации()
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО") Тогда
		Возврат ОбщегоНазначения.ОбщийМодуль("СЭДОФССРасширенный");
	КонецЕсли;
	// АПК:278-вкл
	Возврат Неопределено;
КонецФункции

Функция ИсточникСреднегоПоУмолчанию(Организация, ФизическоеЛицо, ДатаНачалаСобытия, УчитыватьЗаработокПредыдущихСтрахователей) Экспорт
	Если ДатаНачалаСобытия < ДатаНачалаПредоставленияДанныхСФРДляРасчетаПособий() Тогда
		Возврат Перечисления.ИсточникиСреднегоДляПособий.УчетОрганизации;
	КонецЕсли;
	Возврат Перечисления.ИсточникиСреднегоДляПособий.ПустаяСсылка();
КонецФункции

Функция СписокВыбораТиповУведомлений(СписокВыбора = Неопределено, ТекущееЗначение = Неопределено) Экспорт
	Если СписокВыбора = Неопределено Тогда
		СписокВыбора = Новый СписокЗначений;
	Иначе
		СписокВыбора.Очистить();
	КонецЕсли;
	СписокВыбора.Добавить(1, НСтр("ru = 'От работодателя получена информация о необходимости выплаты пособия';
									|en = 'От работодателя получена информация о необходимости выплаты пособия'"));
	СписокВыбора.Добавить(2, НСтр("ru = 'Документ направлен на оплату';
									|en = 'Документ направлен на оплату'"));
	СписокВыбора.Добавить(3, НСтр("ru = 'Пособие успешно выплачено';
									|en = 'Пособие успешно выплачено'"));
	СписокВыбора.Добавить(4, НСтр("ru = 'Оплата не прошла, от банка получен отказ';
									|en = 'Оплата не прошла, от банка получен отказ'"));
	СписокВыбора.Добавить(5, НСтр("ru = 'Работодателю направлено извещение о необходимости предоставления дополнительных сведений';
									|en = 'Работодателю направлено извещение о необходимости предоставления дополнительных сведений'"));
	
	Для Каждого Элемент Из СписокВыбора Цикл
		Элемент.Представление = Строка(Элемент.Значение) + " - " + Элемент.Представление;
	КонецЦикла;
	
	Возврат СписокВыбора;
КонецФункции

#КонецОбласти

#Область УдалениеПомеченныхОбъектов

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	ИсключенияПоискаСсылок.Добавить(Метаданные.РегистрыСведений.СНИЛСВходящихСообщенийСЭДО);
КонецПроцедуры

#КонецОбласти
