

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаменаСпецификаций

// Выполняет замену спецификаций в структуре заказов на производство
//
// Параметры:
//  Замены - ТаблицаЗначений - содержит структуру параметров замены:
//  	* ЗаказНаПроизводство	 - ДокументСсылка.ЗаказНаПроизводство2_2		 - заказ на производство
//  	* Номенклатура			 - СправочникСсылка.Номенклатура				 - номенклатура.
//  	* Характеристика		 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры.
//  	* Склад					 - СправочникСсылка.Склады						 - склад.
//  	* Назначение			 - СправочникСсылка.Назначения					 - назначение.
//  	* Спецификация			 - СправочникСсылка.РесурсныеСпецификации		 - новая спецификация.
//  Задания - ТаблицаЗначений - если параметр передан, задания добавляются в переданную таблицу, а не записываются в базу данных.
//  КонтролироватьЗначения - Булево - признак, необходимо проверять корректность устанавливаемых значений.
// Возвращаемое значение:
//   Число - количество выполненнызх замен.
//
Функция ЗаменитьСпецификации(Замены, Задания = Неопределено, КонтролироватьЗначения = Ложь) Экспорт
	
	ВыполненоЗамен = 0;
	
	Для каждого Замена Из Замены Цикл
		
		Если КонтролироватьЗначения И СтруктураЗаказаСлужебный.ЗаменаСпецификацииВСтруктуреЗаказаДопускается(Замена) Тогда
		
			Шаблон = НСтр("ru = 'Не поддерживается замена спецификации для полуфабрикатов производимых в процессе (%1, %2).';
							|en = 'Replacement of the bill of materials for semi-finished products manufactured throughout the process is not supported (%1, %2).'");
			ТекстОшибки = СтрШаблон(Шаблон, Замена.ЗаказНаПроизводство, НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Замена.Номенклатура, Замена.Характеристика,,, Замена.Назначение));
			ВызватьИсключение ТекстОшибки;
		
		КонецЕсли;
		
		ЗаменаВыполнена = РегистрыСведений.КэшНСИСтруктурыЗаказа.ЗаменитьСпецификацию(Замена);
		
		Если Не ЗаменаВыполнена Тогда
			Продолжить;
		КонецЕсли;
		 
		ВыполненоЗамен = ВыполненоЗамен + 1;
		
	КонецЦикла;
	
	Возврат ВыполненоЗамен;
	
КонецФункции

// Проверяет возможность замены спецификации для номенклатуры.
//  - не допускается замена спецификаций для полуфабрикатов производимых в процессе.
// 
// Параметры:
// 	ДанныеСтроки - Структура:
//  * ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
//  * Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//  * Склад - СправочникСсылка.Склады - склад.
//  * Назначение - СправочникСсылка.Назначения - назначение.
// Возвращаемое значение:
// 	Булево - признак, замена спецификации возможна
Функция ЗаменаСпецификацииВСтруктуреЗаказаДопускается(ДанныеСтроки) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|ГДЕ
	|	КэшНСИ.Предопределенная
	|		И КэшНСИ.Номенклатура        = &Номенклатура
	|		И КэшНСИ.Характеристика      = &Характеристика
	|		И КэшНСИ.Склад               = &Склад
	|		И КэшНСИ.Назначение          = &Назначение
	|		И КэшНСИ.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|";
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ДанныеСтроки.ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("Номенклатура", ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеСтроки.Характеристика);
	Запрос.УстановитьПараметр("Склад", ДанныеСтроки.Склад);
	Запрос.УстановитьПараметр("Назначение", ДанныеСтроки.Назначение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область РегламентныеОперации

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ДинамическаяСтруктураЗаказовНаПроизводство;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ДинамическаяСтруктураЗаказовНаПроизводство;

КонецПроцедуры

#Область ЗапускРасчетаРегл

// Выполняет запуск расчета структуры заказа.
Процедура ЗапуститьРасчетРегл() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа);
	
	Если Не ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыРасчета = СтруктураЗаказа.ПараметрыРасчета();
	
	// Ключ фонового задания, сформированного по регламентному заданию, содержит "идентификатор" регламентного задания
	//  в результате нужна дополнительная проверка и запуск отдельного фонового задания
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК Т)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаСпецификации КАК Т)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Т)
	|	ИЛИ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Т)");
	
	ЕстьЗадания = Не Запрос.Выполнить().Пустой();
	
	Если ЕстьЗадания Тогда
		СтруктураЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
	Если СтрНайти(ПараметрыРасчета.ДополнительныеПараметры, "КонтрольРасчета") > 0 Тогда
		КонтрольРасчета();
	КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьНастройкиРеглЗаданияРасчетСтруктурыЗаказа(ПараметрыЗадания)
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа.Имя);
		
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 1 Тогда
			ЗаписьЖурналаРегистрации(
				СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа,,
				НСтр("ru = 'Не найдено регламентное задание: Расчет структуры заказов на производство';
					|en = 'A scheduled job is not found: Production order structure calculation'"));
			Возврат;
		КонецЕсли;
		
		Задание = Задания[0];
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьРеглЗаданиеРасчетСтруктурыЗаказа()

	Возврат Константы.ДинамическаяСтруктураЗаказовНаПроизводство.Получить();

КонецФункции

Процедура УстановитьИспользованиеРеглЗаданияРасчетСтруктурыЗаказа() Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеРасчетСтруктурыЗаказа());
	УстановитьНастройкиРеглЗаданияРасчетСтруктурыЗаказа(ПараметрыЗадания);
	
КонецПроцедуры

Процедура УстановитьРасписаниеРеглЗаданияРасчетСтруктурыЗаказа(РасписаниеРегламентногоЗадания) Экспорт

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеРасчетСтруктурыЗаказа());
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	УстановитьНастройкиРеглЗаданияРасчетСтруктурыЗаказа(ПараметрыЗадания);

КонецПроцедуры

#КонецОбласти

#Область СверткаРегистров

// Выполняет запуск свертки сторно-записей в регистрах сведений
// - "Структура заказа движения номеклатуры",
// - "Структура заказа трудозатраты".
// В результате удаляются лишние записи регистра.
Процедура СверткаРегистровРегл() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ДинамическаяСтруктураЗаказовНаПроизводство") Тогда
		Возврат
	КонецЕсли;
	
	СверткаРегистров();
	
КонецПроцедуры

// Сворачивает сторно-записи в регистрах сведений
// - "Структура заказа движения номеклатуры",
// - "Структура заказа трудозатраты".
Процедура СверткаРегистров() Экспорт
	
	ШаблоныЗапросов = Новый Структура();
	
	Наборы = Новый Массив();
	Наборы.Добавить(Метаданные.РегистрыСведений.СтруктураЗаказа.Имя);
	Наборы.Добавить(Метаданные.РегистрыСведений.ТрудозатратыСтруктурыЗаказа.Имя);
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|
	|	&Измерения,
	|	&СуммаРесурсы
	|
	|ПОМЕСТИТЬ ВтИтоги
	|ИЗ
	|	ИмяРегистра КАК Таблица
	|
	|ГДЕ
	|	Таблица.КлючНабор = &КлючНабор
	|
	|	И &Группировка
	|	И &Имеющие
	|	И &Индекс
	|
	|;
	|ВЫБРАТЬ
	|
	|	&Измерения,
	|	&Ресурсы,
	|	&Реквизиты
	|
	|ИЗ
	|	ВтИтоги КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяРегистра КАК Движения
	|		ПО &УсловиеСоединения
	|			И НЕ Движения.ДополнительнаяЗапись
	|";
	
	Для каждого Набор Из Наборы Цикл
		
		МетаданныеРегистра = СтруктураЗаказаПовтИсп.СтруктураМетаданныхРегистра(Набор);
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяРегистра", "РегистрСведений" + "." + Набор);
		
		Подстановки = Новый Массив();
		Шаблон = "Таблица.%1 КАК %1";
		
		Для каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", СтрСоединить(Подстановки, ","));
	
		Подстановки = Новый Массив();
		Шаблон = "Таблица.%1";
		
		Для каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Группировка", "СГРУППИРОВАТЬ ПО" + " " + СтрСоединить(Подстановки, ","));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Индекс", "ИНДЕКСИРОВАТЬ ПО" + " " + СтрСоединить(Подстановки, ","));
		
		Подстановки = Новый Массив();
		Шаблон = "СУММА(Таблица.%1) КАК %1";
		
		Для каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаРесурсы", СтрСоединить(Подстановки, ","));
		
		Подстановки = Новый Массив();
		Шаблон = "СУММА(Таблица.%1) <> 0";
		
		Для каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Имеющие", "ИМЕЮЩИЕ" + " " + СтрСоединить(Подстановки, " ИЛИ "));
		
		Подстановки = Новый Массив();
		Шаблон = "Таблица.%1 КАК %1";
		
		Для каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ресурсы", СтрСоединить(Подстановки, ","));
		
		Подстановки = Новый Массив();
		Шаблон = "Движения.%1 КАК %1";
		
		Для каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизиты", СтрСоединить(Подстановки, ","));
	
		Подстановки = Новый Массив();
		Шаблон = "Таблица.%1 = Движения.%1";
		
		Для каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Текст = СтрШаблон(Шаблон, Поле);
			Подстановки.Добавить(Текст);
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", СтрСоединить(Подстановки, " И "));
		
		ШаблоныЗапросов.Вставить(Набор, Новый Запрос(ТекстЗапроса));
		
	КонецЦикла;
	
	НаборыОбработанныеРанее = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|
	|	Задания.Разделитель         КАК Разделитель,
	|	Задания.ИдентификаторНабора КАК ИдентификаторНабора,
	|
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.СтруктураЗаказа КАК ДД
	|		ГДЕ
	|			ДД.КлючНабор = Задания.ИдентификаторНабора
	|			И ДД.ДополнительнаяЗапись) КАК ЕстьСторноДвиженияНоменклатуры,
	|
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ТрудозатратыСтруктурыЗаказа КАК ДД
	|		ГДЕ
	|			ДД.КлючНабор = Задания.ИдентификаторНабора
	|			И ДД.ДополнительнаяЗапись) КАК ЕстьСторноТрудозатраты
	|
	|ИЗ
	|	РегистрСведений.ЗаданияКСверткеСторноЗаписейВГрафикеПроизводства КАК Задания
	|ГДЕ
	|	Задания.Разделитель В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|			ПорцияРасчета.Разделитель
	|		ИЗ
	|			РегистрСведений.ЗаданияКСверткеСторноЗаписейВГрафикеПроизводства КАК ПорцияРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Разделитель");
	
	Результат = Запрос.Выполнить();
	
	Пока НЕ Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		Пока ЕстьЗаписиВВыборке Цикл
			
			ТекРазделитель = Выборка.Разделитель;
			
			Пока ЕстьЗаписиВВыборке И ТекРазделитель = Выборка.Разделитель Цикл
				
				НужноСвернуть = НаборыОбработанныеРанее.Получить(Выборка.ИдентификаторНабора) = Неопределено;
				
				Если НужноСвернуть Тогда
				
					Если Выборка.ЕстьСторноДвиженияНоменклатуры Тогда
						СвернутьРегистрВПопытке(Выборка.ИдентификаторНабора, ШаблоныЗапросов, Метаданные.РегистрыСведений.СтруктураЗаказа.Имя);
					КонецЕсли;
					
					Если Выборка.ЕстьСторноТрудозатраты Тогда
						СвернутьРегистрВПопытке(Выборка.ИдентификаторНабора, ШаблоныЗапросов, Метаданные.РегистрыСведений.ТрудозатратыСтруктурыЗаказа.Имя);
					КонецЕсли;
					
					НаборыОбработанныеРанее.Вставить(Выборка.ИдентификаторНабора, Истина);
					
				КонецЕсли;
				
				ЕстьЗаписиВВыборке = Выборка.Следующий();
				
			КонецЦикла;
			
			РегистрыСведений.ЗаданияКСверткеСторноЗаписейВГрафикеПроизводства.УдалитьЗадания(ТекРазделитель);
			
		КонецЦикла;
		
		НаборыОбработанныеРанее.Очистить();
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьРегистрВПопытке(КлючНабор, ШаблоныЗапросов, ИмяРегистра)
	
	Шаблон = ШаблоныЗапросов[ИмяРегистра];
	Шаблон.УстановитьПараметр("КлючНабор", КлючНабор);
	
	СчетчикОшибок = 1;
	Пока Истина Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений" + "." + ИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("КлючНабор", КлючНабор);
			
			Блокировка.Заблокировать();
			
			Движения = Шаблон.Выполнить().Выгрузить();
			
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(КлючНабор);
			НаборЗаписей.Загрузить(Движения);
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если СчетчикОшибок >= КоличествоПопытокЗаписи() Тогда
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			СчетчикОшибок = СчетчикОшибок + 1;
			Продолжить;
			
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания)
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства.Имя);
		
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 1 Тогда
			ЗаписьЖурналаРегистрации(
				СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства,,
				НСтр("ru = 'Не найдено регламентное задание: Свертка сторно записей в регистрах структуры заказов на производство';
					|en = 'A scheduled job is not found: The record storno rollup in production order structure registers'"));
			Возврат;
		КонецЕсли;
		
		Задание = Задания[0];
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства()

	Возврат Константы.ДинамическаяСтруктураЗаказовНаПроизводство.Получить() И СтруктураЗаказа.СлужебныеНастройки().РассчитыватьИзменения;

КонецФункции

Процедура УстановитьИспользованиеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства() Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства());
	УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания);
	
КонецПроцедуры

Процедура УстановитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(РасписаниеРегламентногоЗадания) Экспорт

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства());
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КонтрольРасчета

Процедура КонтрольРасчета() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
	|
	|	Изделия.Номенклатура   КАК Номенклатура,
	|	Изделия.Характеристика КАК Характеристика,
	|	Изделия.Склад          КАК Склад,
	|	Изделия.Назначение     КАК Назначение
	|
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Изделия
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Задания
	|		ГДЕ
	|			Задания.Очередь >= 0
	|			И Задания.Номенклатура = Изделия.Номенклатура
	|			И Задания.Характеристика = Изделия.Характеристика
	|			И Задания.Склад = Изделия.Склад
	|			И Задания.Назначение = Изделия.Назначение
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК БуферЗаданий
	|		ГДЕ
	|			БуферЗаданий.Очередь >= 0
	|			И БуферЗаданий.Номенклатура = Изделия.Номенклатура
	|			И БуферЗаданий.Характеристика = Изделия.Характеристика
	|			И БуферЗаданий.Склад = Изделия.Склад
	|			И БуферЗаданий.Назначение = Изделия.Назначение)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК Задания
	|		ГДЕ
	|			Задания.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаСпецификации КАК БуферЗаданий
	|		ГДЕ
	|			БуферЗаданий.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|		ГДЕ
	|			КэшНСИ.Номенклатура = Изделия.Номенклатура
	|			И КэшНСИ.Характеристика = Изделия.Характеристика
	|			И КэшНСИ.Склад = Изделия.Склад
	|			И КэшНСИ.Назначение = Изделия.Назначение
	|			И КэшНСИ.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|			И НЕ КэшНСИ.Запланировать)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Таблица
	|		ГДЕ
	|			Таблица.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|			И Таблица.ТипОшибки В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации))
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Таблица
	|		ГДЕ
	|			Таблица.ТипОшибки В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Изделия.Номенклатура,
	|	Изделия.Характеристика,
	|	Изделия.Склад,
	|	Изделия.Назначение,
	|	Изделия.ЗаказНаПроизводство,
	|	Изделия.КлючНоменклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(Изделия.Требуется) <> СУММА(Изделия.Запланировано)
	|									+ СУММА(Изделия.РаспределеноИзЗапасов)
	|									+ СУММА(Изделия.РаспределеноИзЗапасовОбособленно)
	|									+ СУММА(Изделия.РаспределеноИзПартий)
	|									+ СУММА(Изделия.РаспределеноИзПартийОбособленно)
	|");
	
	ИмяСобытия = НСтр("ru = 'Расчет структуры заказа на производство. Контроль расчета';
						|en = 'Production order structure calculation. Calculation control'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьПроблемы = Не РезультатЗапроса.Пустой();
	
	Если Не
		ЕстьПроблемы Тогда
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Контроль выполнен, ошибок не обнаружено.';
																							|en = 'Control is completed. No errors are detected.'"));
		
	Иначе
		
		Пока ЕстьПроблемы Цикл
			
			ПроблемныеСтроки = РезультатЗапроса.Выгрузить();
			
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗадания(ПроблемныеСтроки);
			
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,,  СтрШаблон(НСтр("ru = 'Контроль выполнен, найденные ошибки зарегистрированы.';
																											|en = 'Control is completed. Detected errors are registered.'")));
			
			РезультатЗапроса = Запрос.Выполнить();
			ЕстьПроблемы = Не РезультатЗапроса.Пустой();
			
		КонецЦикла;
	
		СтруктураЗаказа.ЗапуститьРасчет();
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолныйРасчет

Процедура ВыполнитьПересчет(ПараметрыДействия, АдресРезультата) Экспорт
	
	КлючеваяОперация = "СтруктураЗаказаСлужебный.ВыполнитьПересчет";
	НачалоРасчета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазмерПорции = ПараметрыДействия.ПорцияРасчета.Количество();
	ЗамерВремени = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	ВыполнитьПересчетРасчетВнутриЗамераВремени(ПараметрыДействия);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерВремени, РазмерПорции);
	РезультатРасчета = Новый Структура("Операция, РазмерПорции, Длительность", КлючеваяОперация, РазмерПорции, ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоРасчета);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьПересчетРасчетВнутриЗамераВремени(ПараметрыДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПорцияРасчета", ПараметрыДействия.ПорцияРасчета);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	
	|	Партии.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Партии.КлючНабор           КАК КлючНабор
	|
	|ПОМЕСТИТЬ Партии
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Партии
	|ГДЕ
	|	Партии.ЗаказНаПроизводство В (&ПорцияРасчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партии.ЗаказНаПроизводство,
	|	Партии.КлючНабор
	|
	|ИМЕЮЩИЕ
	|	СУММА(Партии.Запланировано) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партии.ЗаказНаПроизводство
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Номенклатура        КАК Номенклатура,
	|	Движения.Характеристика      КАК Характеристика,
	|	Движения.Склад               КАК Склад,
	|	Движения.Назначение          КАК Назначение,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ИЗ
	|	Партии КАК Партии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|		ПО Партии.КлючНабор = Движения.КлючНабор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Пока Не
		РезультатЗапроса[0].Пустой() Цикл
		
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗаданияВСледующуюОчередь(РезультатЗапроса[1].Выгрузить());
		
		УдалитьПартииИзСтруктурыПоКлючамНаборов(РезультатЗапроса[0].Выгрузить());
		
		РезультатЗапроса = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
	|	КэшНСИ.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	КэшНСИ.Разделитель         КАК Разделитель
	|ИЗ
	|	РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|ГДЕ
	|	КэшНСИ.ЗаказНаПроизводство В (&ПорцияРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока Не
		РезультатЗапроса.Пустой() Цикл
		
		РегистрыСведений.КэшНСИСтруктурыЗаказа.УдалитьКэшПоКлючам(РезультатЗапроса.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ОчиститьПротокол(ПараметрыДействия.ПорцияРасчета.ВыгрузитьКолонку("ЗаказНаПроизводство"));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000 РАЗЛИЧНЫЕ
	|
	|	Изделия.Номенклатура        КАК Номенклатура,
	|	Изделия.Характеристика      КАК Характеристика,
	|	Изделия.Склад               КАК Склад,
	|	Изделия.Назначение          КАК Назначение,
	|	Изделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Изделия
	|ГДЕ
	|	Изделия.ЗаказНаПроизводство В (&ПорцияРасчета)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК Задания
	|		ГДЕ
	|			Задания.Очередь >= 0
	|			И Задания.Номенклатура = Изделия.Номенклатура
	|			И Задания.Характеристика = Изделия.Характеристика
	|			И Задания.Склад = Изделия.Склад
	|			И Задания.Назначение = Изделия.Назначение
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаРаспределениеЗапасов КАК БуферЗаданий
	|		ГДЕ
	|			БуферЗаданий.Очередь >= 0
	|			И БуферЗаданий.Номенклатура = Изделия.Номенклатура
	|			И БуферЗаданий.Характеристика = Изделия.Характеристика
	|			И БуферЗаданий.Склад = Изделия.Склад
	|			И БуферЗаданий.Назначение = Изделия.Назначение)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК Задания
	|		ГДЕ
	|			Задания.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.БуферЗаданийКРасчетуСтруктурыЗаказаСпецификации КАК БуферЗаданий
	|		ГДЕ
	|			БуферЗаданий.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|		ГДЕ
	|			КэшНСИ.Номенклатура = Изделия.Номенклатура
	|			И КэшНСИ.Характеристика = Изделия.Характеристика
	|			И КэшНСИ.Склад = Изделия.Склад
	|			И КэшНСИ.Назначение = Изделия.Назначение
	|			И КэшНСИ.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|			И НЕ КэшНСИ.Запланировать)
	|
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Таблица
	|		ГДЕ
	|			Таблица.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство
	|			И Таблица.ТипОшибки В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации))
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК Таблица
	|		ГДЕ
	|			Таблица.ТипОшибки В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Изделия.Номенклатура,
	|	Изделия.Характеристика,
	|	Изделия.Склад,
	|	Изделия.Назначение,
	|	Изделия.ЗаказНаПроизводство,
	|	Изделия.КлючНоменклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(Изделия.Требуется) <> СУММА(Изделия.Запланировано + Изделия.РаспределеноИзЗапасов + Изделия.РаспределеноИзЗапасовОбособленно)
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока Не
		РезультатЗапроса.Пустой() Цикл
		
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗаданияВСледующуюОчередь(РезультатЗапроса.Выгрузить());
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;         
	
	РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадания(ПараметрыДействия.ПорцияРасчета);
	
КонецПроцедуры

Процедура УдалитьПартииИзСтруктурыПоКлючамНаборов(Список)
	
	Всего = Список.Количество();
	Индекс = 0;
	
	СчетчикОшибок = 1;
	
	Пока Всего > Индекс Цикл
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Список[Индекс].КлючНабор);
			НаборЗаписей.Записать(Истина);
			
			НаборЗаписей = РегистрыСведений.ТрудозатратыСтруктурыЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(Список[Индекс].КлючНабор);
			НаборЗаписей.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СчетчикОшибок < КоличествоПопытокЗаписи() Тогда
				СтруктураЗаказа.ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Индекс = Индекс + 1;
		СчетчикОшибок = 1;
		
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область ЗаполнениеДокументов

// Возвращает данные для формирование документов "Заказ на перемещение товаров" Или "Перемещение товаров" по плану производства.
//
// Параметры:
//  ИдентификаторыСтрок - Массив - список ключей указывающих изделия в партии перемещения товаров.
//  ТолькоВНаличии - Булево - признак, если истина, то список номенклатуры запланированной к перемещению будет отфильтрован по наличию на складе отгрузки.
// Возвращаемое значение:
//  ТаблицаЗначений - содержит структуру параметров замены:
//  	* Номенклатура			 - СправочникСсылка.Номенклатура				 - номенклатура.
//  	* Характеристика		 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика номенклатуры.
//  	* СкладОтгрузки			 - СправочникСсылка.Склады						 - склад отгрузки.
//  	* СкладПоступления		 - СправочникСсылка.Склады						 - склад поступления.
//  	* Назначение			 - СправочникСсылка.Назначения					 - назначение.
//  	* Количество			 - Число										 - количество в ед.хранения товара.
//
Функция ТабличнаяЧастьПеремещениеИзделийПоНоменклатурномуПлану(ИдентификаторыСтрок, ТолькоВНаличии = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючиНоменклатуры", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("ТолькоВНаличии", ТолькоВНаличии);
	Запрос.Текст =
	"ВЫБРАТЬ
	|
	|	План.Номенклатура           КАК Номенклатура,
	|	План.Характеристика         КАК Характеристика,
	|	План.Назначение             КАК Назначение,
	|	План.Склад                  КАК Склад,
	|	План.ЗаказНаПроизводство    КАК ЗаказНаПроизводство,
	|	План.КлючНоменклатура       КАК КлючНоменклатура,
	|	План.КлючПартия             КАК КлючПартия,
	|	СУММА(План.Запланировано)   КАК Запланировано
	|	
	|ПОМЕСТИТЬ Приход
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК План
	|	
	|ГДЕ
	|	План.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение)
	|	И План.КлючНоменклатура В (&КлючиНоменклатуры)
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	План.Номенклатура,
	|	План.Характеристика,
	|	План.Назначение,
	|	План.Склад,
	|	План.ЗаказНаПроизводство,
	|	План.КлючНоменклатура,
	|	План.КлючПартия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	КлючПартия
	|;
	|
	|ВЫБРАТЬ
	|
	|	План.Номенклатура           КАК Номенклатура,
	|	План.Характеристика         КАК Характеристика,
	|	План.Назначение             КАК Назначение,
	|	План.Склад                  КАК Склад,
	|	План.ЗаказНаПроизводство    КАК ЗаказНаПроизводство,
	|	План.КлючНоменклатура       КАК КлючНоменклатура,
	|	План.КлючПартия             КАК КлючПартия,
	|	План.НазначениеСтруктуры    КАК НазначениеСтруктуры,
	|
	|	СУММА(План.Требуется) КАК Требуется,
	|
	|	СУММА(План.РаспределеноИзЗапасов)            КАК РаспределеноИзЗапасов,
	|	СУММА(План.РаспределеноИзЗапасовОбособленно) КАК РаспределеноИзЗапасовОбособленно
	|	
	|ПОМЕСТИТЬ Расход
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК План
	|	
	|ГДЕ
	|	
	|	(План.Номенклатура, План.Характеристика, План.Назначение, План.КлючПартия) В
	|		(ВЫБРАТЬ
	|			Номенклатура,
	|			Характеристика,
	|			Назначение,
	|			КлючПартия
	|		ИЗ
	|			Приход КАК ДД)
	|
	|	 И План.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано))
	|	 И План.ДатаПоступления    = ДАТАВРЕМЯ(1,1,1)
	|	 И План.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	План.Номенклатура,
	|	План.Характеристика,
	|	План.Назначение,
	|	План.Склад,
	|	План.ЗаказНаПроизводство,
	|	План.КлючНоменклатура,
	|	План.КлючПартия,
	|	План.НазначениеСтруктуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	КлючПартия
	|;
	|
	|ВЫБРАТЬ
	|
	|	Приход.Номенклатура           КАК Номенклатура,
	|	Приход.Характеристика         КАК Характеристика,
	|	Расход.Назначение             КАК Назначение,
	|
	|	Приход.Склад КАК СкладПолучатель,
	|	Расход.Склад КАК СкладОтправитель,
	|
	|	ISNULL(НормативныйГрафик.Начало, ДАТАВРЕМЯ(1,1,1)) КАК НачалоОтгрузки,
	|	ISNULL(НормативныйГрафик.Окончание, ДАТАВРЕМЯ(1,1,1)) КАК ОкончаниеПоступления,
	|
	|	ВЫБОР
	|		КОГДА &ТолькоВНаличии
	|			ТОГДА Расход.РаспределеноИзЗапасов ИНАЧЕ Расход.Требуется
	|	КОНЕЦ КАК Количество
	|
	|ИЗ
	|	Приход КАК Приход
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расход КАК Расход
	|	ПО Приход.Номенклатура   = Расход.Номенклатура
	|	 И Приход.Характеристика = Расход.Характеристика
	|	 И Приход.Назначение     = Расход.Назначение
	|	 И Приход.КлючПартия     = Расход.КлючПартия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
	|	ПО Приход.КлючПартия        = НормативныйГрафик.КлючПартия
	|	 И НормативныйГрафик.Этап   = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ТолькоВНаличии
	|			ТОГДА Расход.РаспределеноИзЗапасов ИНАЧЕ Расход.Требуется
	|	КОНЕЦ > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Приход.Номенклатура           КАК Номенклатура,
	|	Приход.Характеристика         КАК Характеристика,
	|	Расход.НазначениеСтруктуры    КАК Назначение,
	|
	|	Приход.Склад КАК СкладПолучатель,
	|	Расход.Склад КАК СкладОтправитель,
	|
	|	ISNULL(НормативныйГрафик.Начало, ДАТАВРЕМЯ(1,1,1)) КАК НачалоОтгрузки,
	|	ISNULL(НормативныйГрафик.Окончание, ДАТАВРЕМЯ(1,1,1)) КАК ОкончаниеПоступления,
	|
	|	Расход.РаспределеноИзЗапасовОбособленно КАК Количество
	|
	|ИЗ
	|	Приход КАК Приход
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Расход КАК Расход
	|	ПО Приход.Номенклатура   = Расход.Номенклатура
	|	 И Приход.Характеристика = Расход.Характеристика
	|	 И Приход.Назначение     = Расход.Назначение
	|	 И Приход.КлючПартия     = Расход.КлючПартия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК НормативныйГрафик
	|	ПО Приход.КлючПартия        = НормативныйГрафик.КлючПартия
	|	 И НормативныйГрафик.Этап   = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
	|
	|ГДЕ
	|	&ТолькоВНаличии И Расход.РаспределеноИзЗапасовОбособленно > 0
	|
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция БлокироватьРасчет() Экспорт
	ПараметрЗапускаПриложения = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
	Возврат СтрНайти(ПараметрЗапускаПриложения, "БлокироватьРасчетСтруктурыЗаказа") > 0;
КонецФункции

// Параметры:
// 	ЗаказНаПроизводство - ДокументСсылка.ЗаказНаПроизводство2_2
// Возвращаемое значение:
// 	Структура - Описание:
// * Начало - Дата
// * Окончание - Дата
Функция ГраницыПериодаНормативногоГрафика(ЗаказНаПроизводство) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	График.Начало КАК Начало,
		|	График.Окончание КАК Окончание
		|ИЗ
		|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
		|ГДЕ
		|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И График.КлючПартия = &ПустойКлючСвязи
		|	И График.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Границы = Новый Структура("Начало, Окончание", '00010101', '00010101');
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Границы, Выборка);
	КонецЕсли;
	
	Возврат Границы;
	
КонецФункции

// Регистрирует задания к перераспределению запасов при изменении приоритета заказа на производство
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКРасчетуСтруктурыЗаказаПриИзмененииПриоритета", есть и служебные колонки:
//             * ЗаказНаПроизводство    - ДокументСсылка.ЗаказНаПроизводство2_2 -
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * УдалитьДеньРегистрации - Число  -
//             * ДатаЗаписи             - Дата   -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - Неопределено, Структура - дополнительные свойства выполнения заданий.
//
Процедура ЗарегистрироватьЗаданияКРаспределениюЗапасовПриИзмененииПриоритетаЗаказаНаПроизводство(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказыНаПроизводство", Задания.ВыгрузитьКолонку("ЗаказНаПроизводство"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	Движения.Номенклатура   КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Склад          КАК Склад,
	|	Движения.Назначение     КАК Назначение
	|
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Движения
	|ГДЕ
	|	Движения.ЗаказНаПроизводство В (&ЗаказыНаПроизводство)
	|;
	|";
	
	ЗапуститьРасчет = Ложь;
	
	Попытка
		
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗадания(
			Запрос.Выполнить().Выгрузить());
		
		ЗапуститьРасчет = Истина;
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ПоляОшибки  = Новый Структура("ЗаказНаПроизводство");
		
		Для каждого Задание Из Задания Цикл
			
			ИдентификаторыНеОбработанныхЗаписей.Вставить(
				Задание.ИдентификаторЗаписи,
				ОтложенныеЗадания.ТекстОшибкиВыполнения(ПоляОшибки, Задание, ТекстОшибки));
			
		КонецЦикла;
		
	КонецПопытки;
	
	Если ЗапуститьРасчет Тогда
		СтруктураЗаказа.ЗапуститьРасчет();
	КонецЕсли;
	
КонецПроцедуры

// Текст запроса формирования временной таблицы "Очередь заказов".
// 
// Параметры:
//  ИмяВременнойТаблицыИсточник - Строка - Имя временной таблицы источник
//  ИмяВременнойТаблицыПриемник - Строка - Имя временной таблицы приемник
// 
// Возвращаемое значение:
//  Строка - Текст запроса временная таблица очередь заказов
Функция ТекстЗапросаВременнаяТаблицаОчередьЗаказов(ИмяВременнойТаблицыИсточник, ИмяВременнойТаблицыПриемник = "Очередь") Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1000000000
		|
		|	Таблица.Ссылка КАК Ссылка,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерОчереди
		|
		|ПОМЕСТИТЬ ИмяВременнойТаблицыПриемник_Предварительная
		|ИЗ
		|	ИмяВременнойТаблицыИсточник КАК Таблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.Ссылка.Приоритет.РеквизитДопУпорядочивания,
		|	Таблица.Ссылка.Подразделение.РеквизитДопУпорядочивания,
		|	Таблица.Ссылка.Очередь,
		|	Таблица.Ссылка
		|;
		|ВЫБРАТЬ
		|
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.НомерОчереди КАК НомерОчереди
		|
		|ПОМЕСТИТЬ ИмяВременнойТаблицыПриемник
		|ИЗ
		|	ИмяВременнойТаблицыПриемник_Предварительная КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|УНИЧТОЖИТЬ ИмяВременнойТаблицыПриемник_Предварительная;
		|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицыИсточник", ИмяВременнойТаблицыИсточник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицыПриемник", ИмяВременнойТаблицыПриемник);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция КоличествоПопытокЗаписи() Экспорт
	
	Возврат ?(ТранзакцияАктивна(), 1, 3);

КонецФункции

#КонецОбласти

#КонецОбласти
