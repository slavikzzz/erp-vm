////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в регламентированном учете.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает процент деятельности ЕНВД зарегистрированный в подсистеме ЗарплатаКадры.
// 
// Параметры:
//  Организация	 - Тип СправочникСсылка.Организации
//  ПериодРегистрации	   - Тип Дата, первое число месяца, месяц по которому надо получить процент ЕНВД.
//
// Возвращаемое значение:
//  Число от 0 до 100, или Неопределено, если в Организации применяется ЕНВД, но процент на месяц еще не задан.
//
Функция ПроцентЕНВД(Организация, ПериодРегистрации) Экспорт  
	
	Если Не ПлательщикЕНВД(Организация, ПериодРегистрации) Тогда
		// В указанном месяце организация не является плательщиком ЕНВД
		// процент принимаем равным нулю.
		Возврат 0;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцентЕНВД.Процент
		|ИЗ
		|	РегистрСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату КАК ПроцентЕНВД
		|ГДЕ
		|	ПроцентЕНВД.Месяц = &ПериодРегистрации
		|	И ПроцентЕНВД.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Процент;
			
		Иначе
			// На текущий месяц процент ЕНВД еще не зарегистрирован
			// получим процент ЕНВД по данным бухгалтерского учета и зарегистрируем его
			// функция может вернуть значение Неопределенно, если не удалось вычислить процент.
 
			ПроцентЕНВД = ОтражениеЗарплатыВБухучетеПереопределяемый.ПроцентЕНВД(Организация, ПериодРегистрации);
			Если ПроцентЕНВД <> Неопределено Тогда
				УстановитьПривилегированныйРежим(Истина);
				ЗарегистрироватьПроцентЕНВД(Организация, ПериодРегистрации, ПроцентЕНВД);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Возврат ПроцентЕНВД;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает настройку учетной политики, является ли организация в указанном месяце плательщиком ЕНВД.
//
// Параметры:
//  Организация	 - Тип СправочникСсылка.Организации
//  Период	   	 - Тип Дата, месяц по которому надо получить применение ЕНВД в организации.
//
// Возвращаемое значение:
//  Булево
//
Функция ПлательщикЕНВД(Организация, Период) Экспорт

	Если НачалоМесяца(Период) >= ЗарплатаКадры.ДатаОтменыЕНВД() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСреза", НачалоМесяца(Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСистемыНалогообложения.ПрименяетсяЕНВД КАК ПлательщикЕНВД
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК НастройкиСистемыНалогообложения";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПлательщикЕНВД;
		
	КонецЕсли;

КонецФункции

// Функция возвращает настройку отражения в бухучете из РС ОтражениеВРегламентированномУчетеНастройкиОрганизаций.
//
// Возвращаемое значение:
//	Структура
//	* ФормироватьПроводкиВКонцеПериода - тип Булево, Истина, если хотя бы в одной организации проводки формируются в
//	                                     конце месяца.
//  * ФормироватьПроводкиВКонцеПериодаПоОрганизациям - соответствие, ключ - Организация, значение - значение настройки
//                                                     ФормироватьПроводкиВКонцеПериода.
//
Функция ОтражениеВРегламентированномУчетеНастройкиОрганизаций() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОтраженияВБухучете = Новый Структура;
	НастройкиОтраженияВБухучете.Вставить("ФормироватьПроводкиВКонцеПериода", Ложь);
	НастройкиОтраженияВБухучете.Вставить("ФормироватьПроводкиВКонцеПериодаПоОрганизациям", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(ОтражениеВУчете.ФормироватьПроводкиВКонцеПериода, ЛОЖЬ) КАК ФормироватьПроводкиВКонцеПериода
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций КАК ОтражениеВУчете
	|		ПО Организации.Ссылка = ОтражениеВУчете.Организация";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат НастройкиОтраженияВБухучете;
	КонецЕсли;
	
	ФормироватьПроводкиВКонцеПериода = Результат.Выгрузить().ВыгрузитьКолонку("ФормироватьПроводкиВКонцеПериода").Найти(Истина) <> Неопределено;
	НастройкиОтраженияВБухучете.ФормироватьПроводкиВКонцеПериода = ФормироватьПроводкиВКонцеПериода;
	
	ФормироватьПроводкиВКонцеПериодаПоОрганизациям = Новый Соответствие;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ФормироватьПроводкиВКонцеПериодаПоОрганизациям.Вставить(Выборка.Организация, Выборка.ФормироватьПроводкиВКонцеПериода);
	КонецЦикла;
	
	НастройкиОтраженияВБухучете.ФормироватьПроводкиВКонцеПериодаПоОрганизациям = ФормироватьПроводкиВКонцеПериодаПоОрганизациям;
	
	Возврат НастройкиОтраженияВБухучете;

КонецФункции

// Возвращает структуру с параметрами для расчета оценочных обязательств по отпускам.
//
// Параметры:
//  Организация - организация
//  ПериодРегистрации - Тип Дата, дата на которую получаем данные.
//	Сотрудники - Тип Массив, необязательный.
//				Если параметр не передан, данные будут получены по всем сотрудникам организации.
//
// Возвращаемое значение: Структура, описание см ОтражениеЗарплатыВБухучете.ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков.
//
Функция ПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники = Неопределено) Экспорт
	
	ПараметрыДляРасчета = ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		
		НастройкиРезервовОтпусков = МодульРезервОтпусков.НастройкиРезервовОтпусков(Организация, ПериодРегистрации);
		Если НастройкиРезервовОтпусков.ФормироватьРезервБУ Тогда
			ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыДляРасчета;
	
КонецФункции 

// Возвращает таблицу с фондом оплаты труда по организациям.
//
// Параметры:
//  Организации - массив организаций, головная организация и ее филиалы.
//  ПериодРегистрации - Тип Дата, дата на которую получаем данные.
//
// Возвращаемое значение: Таблица значений
//		* Организация
//		* ФондОплатыТруда - сумма начислений, входящих в расчет отпуска.
//		* СтраховыеВзносы - сумма взносов, приходящихся на начисления, входящие в расчет отпуска.
//
Функция ФондОплатыТрудаПоОрганизациямДляРасчетаОценочныхОбязательствОтпусков(Организации, ПериодРегистрации) Экспорт

	ФондОплатыТруда = Новый ТаблицаЗначений;
	ФондОплатыТруда.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФондОплатыТруда.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ФондОплатыТруда.Колонки.Добавить("СтраховыеВзносы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	СУММА(Таблица.Сумма) КАК ФондОплатыТруда,
	|	0 КАК СтраховыеВзносы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Таблица
	|ГДЕ
	|	Таблица.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Таблица.Организация В(&Организации)
	|	И Таблица.НачислениеУдержание В(&Начисления)
	|	И &УсловиеПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Организация,
	|	0,
	|	СУММА(&СтраховыеВзносы)
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК Таблица
	|ГДЕ
	|	Таблица.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Таблица.Организация В(&Организации)
	|	И Таблица.Начисление В(&Начисления)
	|	И &УсловиеПоСотрудникам
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Организация";
	ТекстПоляСуммВзносов = "";
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина),",");
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ТекстПоляСуммВзносов = ТекстПоляСуммВзносов + ?(ПустаяСтрока(ТекстПоляСуммВзносов),"","+") + " Таблица." + ИмяПоля;
	КонецЦикла;
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&СтраховыеВзносы", ТекстПоляСуммВзносов);
	
	// Параметры получения ФОТ - таблица значений,
	// каждая строка таблицы содержит условия отбора для запроса, по сотрудникам и базовым начислениям.
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПолученияФОТ = ПараметрыПолученияФОТОрганизацийДляОценочныхОбязательствОтпусков(Организации, ПериодРегистрации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
	
	Для каждого СтрокаТЗ Из ПараметрыПолученияФОТ Цикл
		
		Если СтрокаТЗ.Сотрудники = Неопределено Тогда
			// Нет условий по сотрудникам.
			УсловиеПоСотрудникам = "ИСТИНА";
		ИначеЕсли СтрокаТЗ.Сотрудники.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("Сотрудники", СтрокаТЗ.Сотрудники);
			УсловиеПоСотрудникам = "Таблица.Сотрудник В(&Сотрудники)";
		Иначе
			Продолжить;
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "&УсловиеПоСотрудникам", УсловиеПоСотрудникам);
		
		Запрос.УстановитьПараметр("Начисления", СтрокаТЗ.БазовыеНачисления);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ФондОплатыТруда.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	ФондОплатыТруда.Свернуть("Организация","ФондОплатыТруда,СтраховыеВзносы");
	
	Возврат ФондОплатыТруда;

КонецФункции

// Рассчитывает эффективную ставку страховых взносов по сотрудникам.
//
// Параметры:
//  	Организация - Тип СправочникСсылка.Организации, организация для которой получаем данные
//  	ПериодРегистрации - Тип Дата, дата на которую получаем данные.
//		Сотрудники - массив сотрудников, по которым надо получить ставки, необязательный.
//
//	Возвращаемое значение:
//			Структура со свойствами
//				* СтавкиВзносовФСС_НС - таблица значений с колонками: Сотрудник, Ставка 
//				* СтавкиСтраховыхВзносов - таблица значений с колонками: Сотрудник, Ставка.
//
Функция ПараметрыДляИнвентаризацииОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники = Неопределено) Экспорт

	ОписаниеЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 4));
	
	СтавкиВзносовФСС_НС = Новый ТаблицаЗначений;
	СтавкиВзносовФСС_НС.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СтавкиВзносовФСС_НС.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СтавкиВзносовФСС_НС.Колонки.Добавить("Ставка",         ОписаниеЧисло);
	
	СтавкиСтраховыхВзносов = Новый ТаблицаЗначений;
	СтавкиСтраховыхВзносов.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СтавкиСтраховыхВзносов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СтавкиСтраховыхВзносов.Колонки.Добавить("Ставка",         ОписаниеЧисло);
	
	ПараметрыДляРасчета = Новый Структура;
	ПараметрыДляРасчета.Вставить("СтавкиВзносовФСС_НС",    СтавкиВзносовФСС_НС);
	ПараметрыДляРасчета.Вставить("СтавкиСтраховыхВзносов", СтавкиСтраховыхВзносов);
	
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация      = Организация;
		ПараметрыПолучения.НачалоПериода    = НачалоМесяца(ПериодРегистрации);
		ПараметрыПолучения.ОкончаниеПериода = КонецМесяца(ПериодРегистрации);
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
		Сотрудники = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ПараметрыДляРасчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиДляЗаполнения
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
	|ИЗ
	|	ВТСотрудникиДляЗаполнения КАК Сотрудники";
	Запрос.Выполнить();
	
	// поля временной таблицы: ФизическоеЛицо, СтавкаФСС_НС, СтавкаСтраховыхВзносов
	УчетСтраховыхВзносов.СоздатьВТЭффективныеСтавкиВзносовДляОценочныхОбязательств(Запрос.МенеджерВременныхТаблиц, Организация, ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиДляЗаполнения.Сотрудник КАК Сотрудник,
	|	СотрудникиДляЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СтавкиВзносов.СтавкаФСС_НС, 0) КАК СтавкаФСС_НС,
	|	ЕСТЬNULL(СтавкиВзносов.СтавкаСтраховыхВзносов, 0) КАК СтавкаСтраховыхВзносов
	|ИЗ
	|	ВТСотрудникиДляЗаполнения КАК СотрудникиДляЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭффективныеСтавкиВзносовДляОценочныхОбязательств КАК СтавкиВзносов
	|		ПО СотрудникиДляЗаполнения.ФизическоеЛицо = СтавкиВзносов.ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПараметрыДляРасчета.СтавкиВзносовФСС_НС.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		НоваяСтрока.Ставка = Выборка.СтавкаФСС_НС;
		НоваяСтрока = ПараметрыДляРасчета.СтавкиСтраховыхВзносов.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		НоваяСтрока.Ставка = Выборка.СтавкаСтраховыхВзносов;
	КонецЦикла;
	
	Возврат ПараметрыДляРасчета;

КонецФункции

// Формирует данные для отражения в бухучете результатов расчета зарплаты.
//
// Параметры:
//  	Организация 		- Тип СправочникСсылка.Организации, организация для которой получаем данные
//  	ПериодРегистрации 	- Тип Дата, дата соответствует месяцу, за которые получаются данные.
//
//	Возвращаемое значение:
//			Структура - см. НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете() 
//				* НачисленнаяЗарплатаИВзносы - ТаблицаЗначений - см. НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы()
//					* ФизическоеЛицо
//					* Сотрудник
//					* Подразделение
//					* ПодразделениеУчетаЗатрат
//					* ДатаНачала
//					* ВидОперации
//					* Начисление
//					* СпособОтраженияЗарплатыВБухучете
//					* СтатьяФинансирования
//					* СтатьяРасходов
//					* ОблагаетсяЕНВД
//					* ВидНачисленияОплатыТрудаДляНУ
//					* ПериодПринятияРасходов
//					* Сумма
//					* Колонки взносов, состав определяется в ОтражениеЗарплатыВУчете.КолонкиВзносов()
//				* НачисленныйНДФЛ - ТаблицаЗначений - см. НоваяТаблицаБухучетНачисленныйНДФЛ()
//					* ФизическоеЛицо
//					* Сотрудник
//					* ВидОперации
//					* СтатьяФинансирования
//					* СтатьяРасходов
//					* КодПоОКАТО
//					* КодПоОКТМО
//					* КПП
//					* КодНалоговогоОргана
//					* РегистрацияВНалоговомОргане
//					* Сумма
//				* УдержаннаяЗарплата - ТаблицаЗначений - см. НоваяТаблицаБухучетУдержаннаяЗарплата()
//					* ФизическоеЛицо
//					* Сотрудник
//					* Подразделение
//					* ПодразделениеУчетаЗатрат
//					* ДатаНачала
//					* ВидОперации
//					* СтатьяФинансирования
//					* СтатьяРасходов
//					* Контрагент
//					* Сумма
//					* ЯвляетсяОснованиемОформленияКассовогоЧека
//					* ОписаниеУдержанияДляЧека
//					* ДокументОснование
//
Функция ДанныеДляОтраженияЗарплатыВБухучете(Организация, ПериодРегистрации) Экспорт

	Возврат ОтражениеЗарплатыВБухучетеВнутренний.ДанныеДляОтраженияЗарплатыВБухучете(Организация, ПериодРегистрации);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.34";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучете.УдалитьРольОтражениеЗарплатыВБухгалтерскомУчете";
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДолиЕНВДСтраховыеВзносы

// Создает временную таблицу ВТНачисленияСДаннымиЕНВД 
//		Поля таблицы ВТНачисленияСДаннымиЕНВД
//			Сотрудник
//			Начисление
//			ДатаНачала
//			ДоляЕНВД, число от 0 до 1.
//
// Параметры:
// 		Организация
//		МесяцНачисления
//		МенеджерВременныхТаблиц, содержит временные таблицы
//			ВТНачисления - начисления, которые дополняются долей ЕНВД
//			ВТНачисленияСРаспределением - таблица с результатами распределения начислений, может отсутствовать 
//		НачисленияПоСотрудникам - таблица значений с начислениями сотрудников.
//
Процедура СоздатьВТНачисленияСДаннымиЕНВД(Организация, МесяцНачисления, МенеджерВременныхТаблиц, НачисленияПоСотрудникам) Экспорт

	ПлательщикЕНВД = ПлательщикЕНВД(Организация, МесяцНачисления);
	
	Если Не ПлательщикЕНВД Тогда
		// не используется ЕНВД, создадим таблицу с нулевой долей ЕНВД
		СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВременныхТаблиц);
		Возврат;
	КонецЕсли;
	
	ОтражениеЗарплатыВБухучетеВнутренний.СоздатьВТНачисленияСДаннымиЕНВД(Организация, МесяцНачисления, МенеджерВременныхТаблиц, НачисленияПоСотрудникам);

КонецПроцедуры

// Создает временную таблицу ВТНачисленияСДаннымиЕНВД 
//		Поля таблицы ВТНачисленияСДаннымиЕНВД
//			Сотрудник
//			Начисление
//			ДатаНачала
//			ДоляЕНВД, число от 0 до 1.
//
// Параметры:
// 		Организация
//		МесяцНачисления
//		МенеджерВременныхТаблиц, содержит временные таблицы
//			ВТНачисления - начисления, которые дополняются долей ЕНВД.
//
Процедура СоздатьВТНачисленияСДаннымиЕНВДПоЕжемесячнойДоле(Организация, МесяцНачисления, МенеджерВТ) Экспорт
	
	Если ПлательщикЕНВД(Организация, МесяцНачисления) Тогда
		ОтражениеЗарплатыВБухучетеВнутренний.СоздатьВТНачисленияСДаннымиЕНВДПоЕжемесячнойДоле(МенеджерВТ, Организация, МесяцНачисления);
	Иначе
		СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВТ);
	КонецЕсли;

КонецПроцедуры

// МенеджерВременныхТаблиц - содержит временные таблицы
//			ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов - с именем в свойстве ИмяВТБухучетНачислений
//			ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов -  с именем в свойстве ИмяВТНачисления.
//
Процедура СоздатьВТНачисленияСДаннымиЕНВДПоТаблицеБухучетНачислений(МенеджерВременныхТаблиц, ИмяВТБухучетНачислений, ИмяВТНачисления) Экспорт

	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ПодразделениеОрганизации КАК Подразделение,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТНачисленияИсходнаяТаблица
	|ИЗ
	|	ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов КАК СписокНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.ОблагаетсяЕНВД,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачисленийПоСотрудникам
	|ИЗ
	|	ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов КАК БухучетНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	СУММА(Начисления.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачисленийПоСотрудникамСвод
	|ИЗ
	|	ВТБухучетНачисленийПоСотрудникам КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Подразделение,
	|	Начисления.Начисление,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСвод.Сотрудник КАК Сотрудник,
	|	НачисленияСвод.Подразделение КАК Подразделение,
	|	НачисленияСвод.Начисление КАК Начисление,
	|	НачисленияСвод.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ОблагаетсяЕНВД ЕСТЬ NULL 
	|				ИЛИ НачисленияСвод.Сумма = 0
	|			ТОГДА 0
	|		КОГДА Начисления.Сумма = НачисленияСвод.Сумма
	|			ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(Начисления.Сумма / НачисленияСвод.Сумма КАК ЧИСЛО(25, 10))
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТНачисленияПоСотрудникамДоляЕНВД
	|ИЗ
	|	ВТБухучетНачисленийПоСотрудникамСвод КАК НачисленияСвод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачисленийПоСотрудникам КАК Начисления
	|		ПО НачисленияСвод.Сотрудник = Начисления.Сотрудник
	|			И НачисленияСвод.Подразделение = Начисления.Подразделение
	|			И НачисленияСвод.Начисление = Начисления.Начисление
	|			И НачисленияСвод.ДатаНачала = Начисления.ДатаНачала
	|			И (Начисления.ОблагаетсяЕНВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияИсходная.Сотрудник,
	|	НачисленияИсходная.Подразделение,
	|	НачисленияИсходная.Начисление,
	|	НачисленияИсходная.ДатаНачала,
	|	ВЫБОР
	|		КОГДА НачисленияПоСотрудникамДоляЕНВД.ДоляЕНВД ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ НачисленияПоСотрудникамДоляЕНВД.ДоляЕНВД
	|	КОНЕЦ КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТНачисленияСДаннымиЕНВД
	|ИЗ
	|	ВТНачисленияИсходнаяТаблица КАК НачисленияИсходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоСотрудникамДоляЕНВД КАК НачисленияПоСотрудникамДоляЕНВД
	|		ПО НачисленияИсходная.Сотрудник = НачисленияПоСотрудникамДоляЕНВД.Сотрудник
	|			И НачисленияИсходная.Подразделение = НачисленияПоСотрудникамДоляЕНВД.Подразделение
	|			И НачисленияИсходная.Начисление = НачисленияПоСотрудникамДоляЕНВД.Начисление
	|			И НачисленияИсходная.ДатаНачала = НачисленияПоСотрудникамДоляЕНВД.ДатаНачала";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТБухучетНачисленийДляРегистрацииДоходовСтраховыхВзносов", ИмяВТБухучетНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияДляРегистрацииДоходовСтраховыхВзносов", ИмяВТНачисления);
	Запрос.Выполнить();
	
	УдалитьВТ.Добавить("ВТНачисленияИсходнаяТаблица");
	УдалитьВТ.Добавить("ВТБухучетНачисленийПоСотрудникам");
	УдалитьВТ.Добавить("ВТБухучетНачисленийПоСотрудникамСвод");
	УдалитьВТ.Добавить("ВТНачисленияПоСотрудникамДоляЕНВД");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

Процедура СоздатьВТНачисленияСДаннымиЕНВДНулеваяДоляЕНВД(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокНачислений.Сотрудник КАК Сотрудник,
	|	СписокНачислений.ПодразделениеОрганизации КАК Подразделение,
	|	СписокНачислений.Начисление КАК Начисление,
	|	СписокНачислений.ДатаНачала КАК ДатаНачала,
	|	0 КАК ДоляЕНВД
	|ПОМЕСТИТЬ ВТНачисленияСДаннымиЕНВД
	|ИЗ
	|	ВТНачисленияИсходнаяТаблица КАК СписокНачислений";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияИсходнаяТаблица", ИмяВТНачисления);
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область БлокПроцедурИФункцийДляРедактированияПроцентаЕнвдНаФормеДокумента

Процедура ОбъектПриЧтенииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт

	ДополнитьФормуРеквизитыРедактированияЕНВД(Форма, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	Если ДобавлятьЭлементыФормы Тогда
		ПолучитьФункциональнуюОпциюФормыПлательщикЕНВДЗарплатаКадры(Форма);
		ПрочитатьСведенияПроцентЕНВД(Форма, Организация, МесяцНачисления);
		УстановитьТекстПредупрежденияПроцентЕНВДСтрока(Форма);
		ОтражениеЗарплатыВБухучетеКлиентСервер.ОбновитьИнфонадписьПроцентЕНВД(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектПриСозданииНаСервереПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт

	ДополнитьФормуРеквизитыРедактированияЕНВД(Форма);
	ПолучитьФункциональнуюОпциюФормыПлательщикЕНВДЗарплатаКадры(Форма);
	ПрочитатьСведенияПроцентЕНВД(Форма, Организация, МесяцНачисления);
	УстановитьТекстПредупрежденияПроцентЕНВДСтрока(Форма);
	ОтражениеЗарплатыВБухучетеКлиентСервер.ОбновитьИнфонадписьПроцентЕНВД(Форма);

КонецПроцедуры

Процедура ОбработатьИзменениеОрганизацииПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт
	
	ПолучитьФункциональнуюОпциюФормыПлательщикЕНВДЗарплатаКадры(Форма);
	ПрочитатьСведенияПроцентЕНВД(Форма, Организация, МесяцНачисления);
	
	// Установим текст предупреждения при редактировании.
	УстановитьТекстПредупрежденияПроцентЕНВДСтрока(Форма);
	ОтражениеЗарплатыВБухучетеКлиентСервер.ОбновитьИнфонадписьПроцентЕНВД(Форма);
	
КонецПроцедуры

Процедура ОбработатьИзменениеМесяцНачисленияПроцентЕНВД(Форма, Организация, МесяцНачисления) Экспорт
	
	ПолучитьФункциональнуюОпциюФормыПлательщикЕНВДЗарплатаКадры(Форма);
	ПрочитатьСведенияПроцентЕНВД(Форма, Организация, МесяцНачисления);
	
	// Установим текст предупреждения при редактировании.
	УстановитьТекстПредупрежденияПроцентЕНВДСтрока(Форма);
	ОтражениеЗарплатыВБухучетеКлиентСервер.ОбновитьИнфонадписьПроцентЕНВД(Форма);
	
КонецПроцедуры

Процедура ЗарегистрироватьПроцентЕНВДПослеРедактированияВФорме(Организация, Месяц, ПроцентЕНВД, ПроцентЕНВДСтрока) Экспорт

	Если ПустаяСтрока(ПроцентЕНВДСтрока) Тогда
		ПроцентЕНВДДляРегистрации = Неопределено;
	Иначе
		ПроцентЕНВДДляРегистрации = ПроцентЕНВД;
	КонецЕсли;
	ЗарегистрироватьПроцентЕНВД(Организация, Месяц, ПроцентЕНВДДляРегистрации);

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииОбслуживанияДокументОтражениеВУчете

Процедура ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(Организация, Период, КоллекцияНачисленныйНДФЛ) Экспорт
	
	ОтражениеЗарплатыВБухучетеВнутренний.ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(Организация, Период, КоллекцияНачисленныйНДФЛ);
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонокКодовТерриторийДокументОтражениеВУчете(Форма, Месяц, ИмяТаблицыНДФЛ = "НачисленныйНДФЛ") Экспорт

	ДатаПереходаНаКодыОКТМО = УчетНДФЛ.ДатаПереходаНаКодыОКТМО();
	
	ВидимостьКолонок = Новый Соответствие;
	ВидимостьКолонок.Вставить("КодПоОКАТО", Месяц < ДатаПереходаНаКодыОКТМО);
	ВидимостьКолонок.Вставить("КодПоОКТМО",Месяц >= ДобавитьМесяц(ДатаПереходаНаКодыОКТМО, -12));
	
	Для Каждого КлючИЗначение Из ВидимостьКолонок Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, ИмяТаблицыНДФЛ + КлючИЗначение.Ключ, "Видимость", КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьВидимостьКолонкиКПП(Форма, Организация, ИмяТаблицы = "НачисленныйНДФЛ") Экспорт

	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"ЮридическоеФизическоеЛицо");
	ОрганизацияЮрлицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяТаблицы + "КПП", "Видимость", ОрганизацияЮрлицо);

КонецПроцедуры

Процедура УстановитьВидимостьКолонокРезервовПоОплатеТруда(Форма, Организация, Период) Экспорт
	
	РезервыИспользуются = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервыПоОплатеТруда = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		РезервыИспользуются = МодульРезервыПоОплатеТруда.ВыплачиваютсяРезервыВОрганизации(Организация, Период);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "НачисленнаяЗарплатаИВзносыГруппаРезервПоказатели","Видимость", РезервыИспользуются);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ВыплатаЗаСчетРезерваГруппаРезервы","Видимость", РезервыИспользуются);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеДокументОтражениеВУчете(Форма) Экспорт
	
	// Таблица НачисленныйНДФЛ, поля ОКАТО, КПП.
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачисленныйНДФЛ.РегистрацияВНалоговомОргане");
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленныйНДФЛКодПоОКАТО");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленныйНДФЛКодПоОКТМО");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленныйНДФЛКПП");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленныйНДФЛКодНалоговогоОргана");
	
	// Таблица Удержания, поле Контрагент.
	СписокУдержаний = Новый СписокЗначений;
	СписокУдержаний.ЗагрузитьЗначения(ВидыОперацийУдержанийТребующиеВВодаКонтрагента());
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокУдержаний;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаКонтрагент");
	
	// Таблица Удержания, поле ОписаниеУдержанияДляЧека.
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ЯвляетсяОснованиемОформленияКассовогоЧека");
	ЭлементОтбора.ПравоеЗначение = Ложь;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаОписаниеУдержанияДляЧека");
	
	// Таблица Удержания, поле СтатьяРасходов.
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаСтатьяРасходов");
	
	// Таблица Удержания, поле ДокументОснование.
	СписокУдержанийДокументОснование = Новый СписокЗначений;
	СписокУдержанийДокументОснование.ЗагрузитьЗначения(ВидыОперацийУдержанийТребующиеВводаДокументаОснования());
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.УдержаннаяЗарплата.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокУдержанийДокументОснование;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("УдержаннаяЗарплатаДокументОснование");
	
	// Таблица НачисленнаяЗарплатаИВзносы, поле НачисленнаяЗарплатаИВзносыСпособОтраженияЗарплатыВБухучете.
	СписокНачислений = Новый СписокЗначений;
	СписокНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС); 
	СписокНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
	СписокНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЗаЗадержкуЗарплаты);
	СписокНачислений.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПособиеНаПогребение);
	
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НачисленнаяЗарплатаИВзносы.ВидОперации");
	ЭлементОтбора.ПравоеЗначение = СписокНачислений;
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыСпособОтраженияЗарплатыВБухучете");
	
	// Таблица НачисленнаяЗарплатаИВзносы, поля РезервБУ, РезервНУ.
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачисленнаяЗарплатаИВзносы.Резерв");
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыРезервБУ");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НачисленнаяЗарплатаИВзносыРезервНУ");
	
КонецПроцедуры

Функция ВидыОперацийУдержанийТребующиеВводаКонтрагента() Экспорт

	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгента);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ВознаграждениеПлатежногоАгентаКонтрагенты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.Профвзносы);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДобровольныеВзносыВНПФ);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания);
	
	Возврат ВидыОпераций;

КонецФункции

Функция ВидыОперацийУдержанийТребующиеВводаДокументаОснования() Экспорт

	ВидыОпераций = Новый Массив;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛистыКонтрагенты);
	
	Возврат ВидыОпераций;

КонецФункции

Процедура УстановитьУсловноеОформлениеВыплатаЗаСчетРезерва(Форма, Организация, Период) Экспорт

	НовыйАлгоритмРасчетаОтпусков = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервыПоОплатеТруда = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		НовыйАлгоритмРасчетаОтпусков = МодульРезервыПоОплатеТруда.ЕстьНастройкиРезерваОтпусков(Организация, Период);
	КонецЕсли;
	
	ПредставлениеУникальногоИдентификатора = СтрШаблон("%1%2","ВыплатаЗаСчетРезерваРезерв",Строка(Форма.УникальныйИдентификатор));
	
	Если Не НовыйАлгоритмРасчетаОтпусков И Форма.Элементы.ВыплатаЗаСчетРезерваГруппаРезервы.Видимость Тогда
		
		// Резервы отпусков не начисляются, или начисляются по архивному алгоритму
		// и начисляются резервы по оплате труда.
		// Для строк с резервами отпусков, начисленных по архивному алгоритму,
		// выключаем ОтметкаНезаполненного для поля Резерв.
		
		Для каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
			Если ЭлементОформления.Представление = ПредставлениеУникальногоИдентификатора Тогда
				ЭлементОформления.Использование = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Таблица ВыплатаЗаСчетРезерва, поле Резерв.
		СписокВидовОперация = Новый СписокЗначений;
		СписокВидовОперация.ЗагрузитьЗначения(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныеОтпускаОценочныеОбязательстваИРезервы());
		
		ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = ПредставлениеУникальногоИдентификатора;
		// Вид оформления
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		// Условие для оформления
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВыплатаЗаСчетРезерва.ВидОперации");
		ЭлементОтбора.ПравоеЗначение = СписокВидовОперация;
		// Оформляемое поле
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ВыплатаЗаСчетРезерваРезерв");
		
	ИначеЕсли Форма.УсловноеОформление.Элементы.Количество() > 0 Тогда
		
		Для каждого ЭлементОформления Из Форма.УсловноеОформление.Элементы Цикл
			Если ЭлементОформления.Представление = ПредставлениеУникальногоИдентификатора Тогда
				ЭлементОформления.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьКолонокВзносов(Форма, Период, ИмяТаблицы = "НачисленнаяЗарплатаИВзносы") Экспорт

	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(Форма, Период, ИмяТаблицы);
	
	ПоказыватьКолонкуВзносыПоЕдиномуТарифу = Ложь;
	Если Период >= УчетСтраховыхВзносов.ДатаОбъединенияВзносов()
		И Форма.Элементы.НачисленнаяЗарплатаИВзносыПФРДоПредельнойВеличины.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "НачисленнаяЗарплатаИВзносыПФРДоПредельнойВеличины", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "НачисленнаяЗарплатаИВзносыПФРСПревышения", "Видимость", Ложь);
		ПоказыватьКолонкуВзносыПоЕдиномуТарифу = Истина;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, "НачисленнаяЗарплатаИВзносыВзносыПоЕдиномуТарифу", "Видимость", ПоказыватьКолонкуВзносыПоЕдиномуТарифу);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеРасчетаОценочныхОбязательств

// Возвращает бухучет начислений, входящий в базу расчета оценочных обязательств.
//
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Сотрудники - Массив
// 		НачалоПериода – Дата 
// 		КонецПериода – Дата
// 		ОбязательстваПоОтпускам - Булево
// 		БазовыеНачисления - Массив, Неопределено.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
// 			* ПодразделениеУчетаЗатрат - СправочникСсылка.ПодразделенияОрганизаций
// 			* МестоВСтруктуреПредприятия - ОпределяемыйТип.МестоВСтруктуреПредприятия
// 			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
// 			* СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
// 			* Сумма - Число.
//
Функция БухучетБазовыхНачисленийОценочныхОбязательств(Организация, Сотрудники, НачалоПериода, КонецПериода, ОбязательстваПоОтпускам, БазовыеНачисления) Экспорт
	
	Возврат ОтражениеЗарплатыВБухучетеВнутренний.БухучетБазовыхНачисленийОценочныхОбязательств(Организация, Сотрудники, НачалоПериода, КонецПериода, ОбязательстваПоОтпускам, БазовыеНачисления);
	
КонецФункции

// Возвращает бухучет начислений, входящий в базу расчета оценочных обязательств.
//
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Сотрудники - Массив
// 		Период  – Дата 
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
// 			* ПодразделениеУчетаЗатрат - СправочникСсылка.ПодразделенияОрганизаций
// 			* МестоВСтруктуреПредприятия - ОпределяемыйТип.МестоВСтруктуреПредприятия
// 			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
// 			* СпособОтраженияЗарплатыВБухучете - СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
// 			* Сумма - Число.
//
Функция НастройкиБухучетаДляРаспределенияПоУмолчанию(Организация, Сотрудники, Период) Экспорт
	
	Возврат ОтражениеЗарплатыВБухучетеВнутренний.НастройкиБухучетаДляРаспределенияПоУмолчанию(Организация, Сотрудники, Период);
	
КонецФункции

// Возвращает структуру с параметрами для расчета оценочных обязательств по отпускам.
//
// Параметры:
//  Организация - организация
//  ПериодРегистрации - Тип Дата, дата на которую получаем данные.
//	Сотрудники - Тип Массив, необязательный.
//				Если параметр не передан, данные будут получены по всем сотрудникам организации.
// Возвращаемое значение: Структура, описание см ОтражениеЗарплатыВБухучете.ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков.
//
Функция ДанныеДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, Сотрудники = Неопределено) Экспорт
	
	ПараметрыДляРасчета = ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		
		МодульРезервов = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		ФормируютсяРезервыВОрганизации = МодульРезервов.ФормируютсяРезервыВОрганизации(Организация, ПериодРегистрации)
			Или МодульРезервов.ФормируютсяРезервыВОрганизации(Организация, ДобавитьМесяц(ПериодРегистрации, -12));
		Если ФормируютсяРезервыВОрганизации Тогда
			ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники);
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПараметрыДляРасчета;
	
КонецФункции

// Возвращает страховые взносы по сотрудникам.
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Период - Дата
// 		Сотрудники - Массив
// 		ОбязательстваПоОтпускам - Булево
// 		БазовыеНачисления - Массив, Неопределено.
//
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* СтраховыеВзносы - Число
// 			* ФССНесчастныеСлучаи - Число
//
Функция ИсчисленныеВзносыДляРасчетаОценочныхОбязательств(Организация, Период, Сотрудники, ОбязательстваПоОтпускам, БазовыеНачисления) Экспорт
	
	Возврат ОтражениеЗарплатыВБухучетеВнутренний.ИсчисленныеВзносыДляРасчетаОценочныхОбязательств(Организация, Период, Сотрудники, ОбязательстваПоОтпускам, БазовыеНачисления);
	
КонецФункции

// Рассчитывает эффективные ставки страховых взносов.
// 	Параметры:
// 		Организация - СправочникСсылка.Организации
// 		Период - Дата
// 		Сотрудники - Массив
// Возвращаемое значение:
// 		ТаблицаЗначений, содержит колонки
// 			* Сотрудник - СправочникСсылка.Сотрудники
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* СтавкаСтраховыхВзносов - Число
// 			* СтавкаФСС_НС - Число
//
Функция ЭффективныеСтавкиВзносовДляОценочныхОбязательств(Организация, Период, Сотрудники) Экспорт

	ОписаниеЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 4));
	
	СтавкиВзносов = Новый ТаблицаЗначений;
	СтавкиВзносов.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СтавкиВзносов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СтавкиВзносов.Колонки.Добавить("СтавкаСтраховыхВзносов", ОписаниеЧисло);
	СтавкиВзносов.Колонки.Добавить("СтавкаФСС_НС",  ОписаниеЧисло);
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат СтавкиВзносов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиДляЗаполнения
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
	|ИЗ
	|	ВТСотрудникиДляЗаполнения КАК Сотрудники";
	Запрос.Выполнить();
	
	// поля временной таблицы: ФизическоеЛицо, СтавкаФСС_НС, СтавкаСтраховыхВзносов
	УчетСтраховыхВзносов.СоздатьВТЭффективныеСтавкиВзносовДляОценочныхОбязательств(Запрос.МенеджерВременныхТаблиц, Организация, Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиДляЗаполнения.Сотрудник КАК Сотрудник,
	|	СотрудникиДляЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СтавкиВзносов.СтавкаФСС_НС, 0) КАК СтавкаФСС_НС,
	|	ЕСТЬNULL(СтавкиВзносов.СтавкаСтраховыхВзносов, 0) КАК СтавкаСтраховыхВзносов
	|ИЗ
	|	ВТСотрудникиДляЗаполнения КАК СотрудникиДляЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЭффективныеСтавкиВзносовДляОценочныхОбязательств КАК СтавкиВзносов
	|		ПО СотрудникиДляЗаполнения.ФизическоеЛицо = СтавкиВзносов.ФизическоеЛицо";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СтавкиВзносов.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		НоваяСтрока.СтавкаФСС_НС = Выборка.СтавкаФСС_НС;
		НоваяСтрока.СтавкаСтраховыхВзносов = Выборка.СтавкаСтраховыхВзносов;
	КонецЦикла;
	
	Возврат СтавкиВзносов;

КонецФункции

// Возвращает таблицу с фондом оплаты труда по организациям.
//
// Параметры:
// 	Организации - массив организаций, головная организация и ее филиалы.
// 	ПериодРегистрации - Тип Дата, дата на которую получаем данные.
// 	ОбязательстваПоОтпускам - Булево
// 	БазовыеНачисления - Массив, Неопределено.
//
// Возвращаемое значение: Таблица значений
//		* Организация
//		* ФондОплатыТруда - сумма начислений, входящих в расчет отпуска.
//		* СтраховыеВзносы - сумма взносов, приходящихся на начисления, входящие в расчет отпуска.
//
Функция ФондОплатыТрудаПоОрганизациямДляРасчетаОценочныхОбязательств(Организации, Период, ОбязательстваПоОтпускам, БазовыеНачисления) Экспорт

	Если ОбязательстваПоОтпускам Тогда
		Возврат ФондОплатыТрудаПоОрганизациямДляРасчетаОценочныхОбязательствОтпусков(Организации, Период);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БазовыеНачисления) Тогда
		НачисленияДляОтбора = ОтражениеЗарплатыВБухучетеВнутренний.БазовыеНачисленияОплатаТруда();
	Иначе
		НачисленияДляОтбора = БазовыеНачисления;
	КонецЕсли;
	
	ФондОплатыТруда = Новый ТаблицаЗначений;
	ФондОплатыТруда.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФондОплатыТруда.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ФондОплатыТруда.Колонки.Добавить("СтраховыеВзносы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	СУММА(Таблица.Сумма) КАК ФондОплатыТруда,
	|	0 КАК СтраховыеВзносы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК Таблица
	|ГДЕ
	|	Таблица.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Таблица.Организация В(&Организации)
	|	И Таблица.НачислениеУдержание В(&Начисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.Организация,
	|	0,
	|	СУММА(&СтраховыеВзносы)
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК Таблица
	|ГДЕ
	|	Таблица.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Таблица.Организация В(&Организации)
	|	И Таблица.Начисление В(&Начисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Организация";
	ТекстПоляСуммВзносов = "";
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносов.ОтражаемыеВУчетеВзносы(Истина),",");
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		ТекстПоляСуммВзносов = ТекстПоляСуммВзносов + ?(ПустаяСтрока(ТекстПоляСуммВзносов),"","+") + " Таблица." + ИмяПоля;
	КонецЦикла;
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&СтраховыеВзносы", ТекстПоляСуммВзносов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Начисления", НачисленияДляОтбора);
	
	Запрос.Текст = ШаблонТекстаЗапроса;
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ФондОплатыТруда.Добавить(), Выборка);
	КонецЦикла;
	
	ФондОплатыТруда.Свернуть("Организация","ФондОплатыТруда,СтраховыеВзносы");
	
	Возврат ФондОплатыТруда;

КонецФункции

#КонецОбласти

#Область Прочие

Процедура СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц) Экспорт

	ОтражениеЗарплатыВБухучетеВнутренний.СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц)	

КонецПроцедуры

Процедура ДополнитьСведенияОВзносахДаннымиБухучета(Движения, Организация, ПериодРегистрации, Ссылка, МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт

	ОтражениеЗарплатыВБухучетеВнутренний.ДополнитьСведенияОВзносахДаннымиБухучета(Движения, Организация, ПериодРегистрации, Ссылка, МенеджерВременныхТаблиц, ИмяВременнойТаблицы);

КонецПроцедуры 

// Выполняет проверку наличия начислений, требующих указания процента ЕНВД, если такие начисления есть, вызывается исключение.
//
// Параметры:
// 	Организация
// 	ПериодРегистрации
// 	МенеджерВТ - МенеджерВременныхТаблиц - содержит временную таблицу с именем, указанным в параметре ИмяВременнойТаблицы,
// 							поля временной таблицы:
//							* Сотрудник - имя поля уточняется в ИменаПолейВременнойТаблицы
//							* Период - имя поля уточняется в ИменаПолейВременнойТаблицы
//							* Организация
//							* Подразделение
//							* ТерриторияВыполненияРаботВОрганизации
//
// 	ИмяИсходнойВТ - Строка - имя временной таблицы начислений.
// 	ИменаПолейВТ - Строка - имена полей временной таблицы, через запятую, в которых содержаться сотрудник и период.
//
Процедура ПроверитьНеобходимостьРегистрацииПроцентаЕНВДНаТекущийМесяцВызватьИсключение(Организация, ПериодРегистрации, МенеджерВТ, ИмяИсходнойВТ) Экспорт
																
													
	Если ОтражениеЗарплатыВБухучетеВнутренний.ТребуетсяРегистрацияПроцентаЕНВД(МенеджерВТ, ИмяИсходнойВТ, Организация, ПериодРегистрации) Тогда
		
		// На текущий месяц не задан процент ЕНВД и есть объекты учета, 
		// для которых доля ЕНВД определяется процентом,
		// вызываем исключение и сообщаем о проблеме.
		
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для организации ""%1"" не задан процент деятельности ЕНВД на %2 года.
		|Действие не выполнено.';
		|en = 'UTII activity percent for %2 years is not specified for company ""%1"".
		|The action is not executed. '"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование"), Формат(ПериодРегистрации, "ДФ='ММММ гггг'"));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Распределяет сведения о доходах по статьям по базе по умолчании.
//
// Параметры:
// 	СведенияОДоходах - ТаблицаЗначений - должна содержать колонки
// 			* ИдентификаторСтроки
// 			* Организация
// 			* Сотрудник
// 			* Период
// 			* Подразделение
// 			* ТерриторияВыполненияРаботВОрганизации
// 			* Начисление
// 	РезультатРаспределения - ТаблицаЗначений - в таблицу помещаются результаты распределения.
//
Процедура РаспределитьСведенияОДоходахПоСтатьямиПоБазеПоУмолчанию(СведенияОДоходах, РезультатРаспределения) Экспорт
	
	ОтражениеЗарплатыВБухучетеВнутренний.РаспределитьСведенияОДоходахПоСтатьямиПоБазеПоУмолчанию(СведенияОДоходах, РезультатРаспределения);
	
КонецПроцедуры

Процедура УстановитьСписокВыбораОтношениеКЕНВД(ЭлементФормы, ИмяЭлемента) Экспорт

	ОтражениеЗарплатыВБухучетеВнутренний.УстановитьСписокВыбораОтношениеКЕНВД(ЭлементФормы, ИмяЭлемента);

КонецПроцедуры

// Возвращает значение использования ЕНВД на дату для информационной базы.
// Если дата пустая или больше даты отмены ЕНВД возвращается Лож, иначе 
// возвращается значение настройки использования ЕНВД.
//
// Параметры:
// 	Период - Дата
//
// 	Возвращаемое значение:
// 		Булево.
//
Функция ИспользуетсяЕНВД(Период) Экспорт

	Если Не ЗначениеЗаполнено(Период) Или Период >= ЗарплатаКадры.ДатаОтменыЕНВД() Тогда
		Возврат Ложь;
	Иначе
		Возврат ОтражениеЗарплатыВБухучетеВнутренний.ИспользуетсяЕНВД();
	КонецЕсли;
	
КонецФункции

// Устанавливает условное оформление списков истории настроек бухучета.
//
// Параметры:
// 	Форма - Управляемая форма
// 	ИмяТаблицы - Строка
//
Процедура УстановитьУсловноеОформлениеНастройкиБухучетаЕНВД(Форма, ИмяТаблицы = "НаборЗаписей") Экспорт
	
	ДатаОтменыЕНВД = ЗарплатаКадры.ДатаОтменыЕНВД();
	
	ТекстПояснения = СтрШаблон("%1 %2", НСтр("ru = 'не применяется с';
											|en = 'not applied since'"), Формат(ДатаОтменыЕНВД, "ДФ=dd.MM.yyyy"));
		
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	// Вид оформления
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПояснения);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	// Оформляемое поле
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы +"ОтношениеКЕНВД");
	// условие для оформления
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Период");
	ЭлементОтбора.ПравоеЗначение = ДатаОтменыЕНВД;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбслуживаниеОценочныхОбязательств

// Заполняет параметры для расчета оценочных обязательств по отпускам.
//
// Параметры:
// 	Организация - тип СправочникСсылка.Организации.
// 	ПериодРегистрации - тип Дата.
// 	ПараметрыДляРасчета - структура, параметры, которые будут заполняться, описание см ОтражениеЗарплатыВБухучете.ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков.
// 	Сотрудники - Неопределенно или Массив.
//
Процедура ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники)

	ОтражениеЗарплатыВБухучетеВнутренний.ЗаполнитьПараметрыДляРасчетаОценочныхОбязательствОтпусков(Организация, ПериодРегистрации, ПараметрыДляРасчета, Сотрудники);

КонецПроцедуры

// Рассчитывает остатки отпусков по сотрудникам.
//
// Параметры:
// 	Организация - тип СправочникСсылка.Организации.
// 	Период - тип Дата.
// 	Сотрудники - Неопределенно или Массив.
//
//	Возвращаемое значение - Таблица значений, описание см ОтражениеЗарплатыВБухучете.НоваяТаблицаОстаткиОтпусков.
//
Функция ОстаткиОтпусковДляРасчетаОценочныхОбязательств(Организация, Период, Сотрудники, КадровыеДанныеСтрока) Экспорт

	ТаблицаОстаткиОтпусков = НоваяТаблицаОстаткиОтпусков();
	
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.Организация      = Организация;
		ПараметрыПолучения.НачалоПериода    = НачалоМесяца(Период);
		ПараметрыПолучения.ОкончаниеПериода = КонецМесяца(Период);
		ПараметрыПолучения.Вставить("КадровыеДанные", КадровыеДанныеСтрока);
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	Иначе
		ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, КадровыеДанныеСтрока, КонецМесяца(Период));
	КонецЕсли;
	
	Если ТаблицаСотрудников.Колонки.Найти("ТерриторияВыполненияРаботВОрганизации") = Неопределено Тогда
		ТаблицаСотрудников.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	БухучетСотрудников = ОтражениеЗарплатыВБухучетеВнутренний.НастройкиБухучетаДляРасчетаОбязательств(ТаблицаСотрудников, Организация, Период);
	БухучетСотрудников.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	
	МассивСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
	СведенияОбОтпусках = Новый ТаблицаЗначений;
	СведенияОбОтпусках.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СведенияОбОтпусках.Колонки.Добавить("ОстатокОтпусков", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	СведенияОбОтпусках.Колонки.Добавить("ОтпускАвансом", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	СведенияОбОтпусках.Колонки.Добавить("СреднийЗаработок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СведенияОбОтпусках.Колонки.Добавить("РасчетПоСохраняемомуЗаработку", Новый ОписаниеТипов("Булево"));
	ОтражениеЗарплатыВБухучетеВнутренний.ЗаполнитьСведенияОбОтпускахСотрудниковДляОценочныхОбязательств(СведенияОбОтпусках, МассивСотрудников, Организация, Период);
	
	Для каждого СтрокаСведений Из СведенияОбОтпусках Цикл
		
		НоваяСтрока = ТаблицаОстаткиОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСведений);
		НоваяСтрока.Организация = Организация;
		
		Отбор.Сотрудник = СтрокаСведений.Сотрудник;
		СтрокиБухучета = БухучетСотрудников.НайтиСтроки(Отбор);
		Если СтрокиБухучета.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиБухучета[0],"Подразделение,СпособОтраженияЗарплатыВБухучете,СтатьяФинансирования");
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ТаблицаОстаткиОтпусков;

КонецФункции

Функция ФондОплатыТрудаИСтраховыеВзносыДляРасчетаОценочныхОбязательствОтпусков(Организация, Период, НачисленнаяЗарплатаИВзносы) Экспорт
	
	ТаблицаФондОплатыТрудаИСтраховыеВзносы = НоваяТаблицаФондОплатыТрудаИСтраховыеВзносы();
	
	ПоляВзносов = ОтражениеЗарплатыВУчете.КолонкиВзносов();
	Для Индекс = 0 По ПоляВзносов.ВГраница() Цикл
		Если ВРег(ПоляВзносов[Индекс]) = ВРег("ФССНесчастныеСлучаи") Тогда
			ПоляВзносов.Удалить(Индекс);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СотрудникиДляОбработки = ОбщегоНазначения.ВыгрузитьКолонку(НачисленнаяЗарплатаИВзносы, "Сотрудник", Истина);
	ПараметрыПолученияФОТ  = ПараметрыПолученияФОТСотрудниковДляОценочныхОбязательствОтпусков(СотрудникиДляОбработки, Период);
	
	// СоответствиеСотрудников - фильтр по сотрудникам, если Значение = Истина, расчет обязательств по сотруднику
	// выполняется по среднему заработку, если Ложь - по сохраняемому заработку.
	СоответствиеСотрудников 			= ПараметрыПолученияФОТ.Сотрудники;
	
	СоответствиеПоСреднемуЗаработку 	= ПараметрыПолученияФОТ.БазаОтпускаПоСреднемуЗаработку;
	СоответствиеПоСохраняемомуЗаработку = ПараметрыПолученияФОТ.БазаОтпускаПоСохраняемомуЗаработку;
	
	Для каждого СтрокаТЗ Из НачисленнаяЗарплатаИВзносы Цикл
		
		СтрокаПодходит = Ложь;
		
		РасчетПоСреднемуЗаработку = СоответствиеСотрудников[СтрокаТЗ.Сотрудник];
		Если РасчетПоСреднемуЗаработку = Истина Тогда
			СтрокаПодходит = (СоответствиеПоСреднемуЗаработку[СтрокаТЗ.Начисление] = Истина);
		ИначеЕсли РасчетПоСреднемуЗаработку = Ложь Тогда
			СтрокаПодходит = (СоответствиеПоСохраняемомуЗаработку[СтрокаТЗ.Начисление] = Истина);
		КонецЕсли;
		
		Если СтрокаПодходит Тогда
			
			НоваяСтрока = ТаблицаФондОплатыТрудаИСтраховыеВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
			НоваяСтрока.ФондОплатыТруда = СтрокаТЗ.Сумма;
			НоваяСтрока.Организация 	= Организация;
			
			СтраховыеВзносы = 0;
			Для каждого ИмяПоляВзносов Из ПоляВзносов Цикл
				СтраховыеВзносы = СтраховыеВзносы + СтрокаТЗ[ИмяПоляВзносов];
			КонецЦикла;
			НоваяСтрока.СтраховыеВзносы = СтраховыеВзносы;
			
			НоваяСтрока.РасчетПоСохраняемомуЗаработку = Не РасчетПоСреднемуЗаработку;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаФондОплатыТрудаИСтраховыеВзносы);
	
	Возврат ТаблицаФондОплатыТрудаИСтраховыеВзносы;
	
КонецФункции 

// Возвращает параметры для отбора строк таблицы значений с ФОТ для оценочных обязательств.
//
// Параметры:
//	СотрудникиДляОбработки - Массив - сотрудники.
//	Период - Дата - определяет период, для которого получаются параметры.
//
// Возвращаемое значение:
//	Структура - содержит свойства:
//		* Сотрудники - Соответствие - Ключ: Сотрудник, Значение: булево, если Истина,
//										то расчет обязательств по сотруднику выполняется по среднему заработку,
//										если Ложь, то по сохраняемому заработку.
//		* БазаОтпускаПоСреднемуЗаработку - Соответствие - Ключ: Начисление, Значение: Истина - начисление входи в базу.
//		* БазаОтпускаПоСохраняемомуЗаработку - Соответствие - Ключ: Начисление, Значение: Истина - начисление входи в базу.
//
Функция ПараметрыПолученияФОТСотрудниковДляОценочныхОбязательствОтпусков(СотрудникиДляОбработки, Период) Экспорт
	
	ПараметрыПолученияФОТ = Новый Структура("Сотрудники,БазаОтпускаПоСреднемуЗаработку,БазаОтпускаПоСохраняемомуЗаработку");
	ПараметрыПолученияФОТ.Сотрудники 						 = Новый Соответствие;
	ПараметрыПолученияФОТ.БазаОтпускаПоСреднемуЗаработку 	 = Новый Соответствие;
	ПараметрыПолученияФОТ.БазаОтпускаПоСохраняемомуЗаработку = Новый Соответствие;
	
	ОтражениеЗарплатыВБухучетеВнутренний.ЗаполнитьПараметрыПолученияФОТСотрудниковДляОценочныхОбязательствОтпусков(СотрудникиДляОбработки, Период, ПараметрыПолученияФОТ);
	
	Возврат ПараметрыПолученияФОТ;

КонецФункции

// Возвращает параметры, используемые в запросе получения ФОТ для расчета оценочных обязательств отпусков.
//
// Параметры:
//	Организации - Массив - содержит организации, по которым получаются параметры.
//	Период - Дата - определяет период, для которого получаются параметры.
//
// Возвращаемое значение:
//	ТаблицаЗначений - содержит колонки:
//		* Сотрудники - Неопределено или Массив, если Неопределено, то отбор по сотрудникам не требуется.
//		* БазовыеНачисления - Массив - начисления, по которым выполняется отбор.
//
Функция ПараметрыПолученияФОТОрганизацийДляОценочныхОбязательствОтпусков(Организации, Период)
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Сотрудники");
	ТаблицаПараметров.Колонки.Добавить("БазовыеНачисления");
	
	ОтражениеЗарплатыВБухучетеВнутренний.ЗаполнитьПараметрыПолученияФОТОрганизацийДляОценочныхОбязательствОтпусков(Организации, Период, ТаблицаПараметров);
	
	Возврат ТаблицаПараметров;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляОтраженияЗарплатыВБухучете

// Выполняет свертку таблиц значений структуры ДанныеДляОтражения
// 
//	Параметры
// 		ДанныеДляОтражения - структура, содержит таблицы значений
// 		СтрокаКолонкиУдаления - строка, через запятую указаны имена колонок, которые необходимо удалить.
//
Процедура СвернутьДанныеДляОтраженияЗарплатыВБухучете(ДанныеДляОтражения, СтрокаКолонкиУдаления) Экспорт

	КолонкиУдаления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаКолонкиУдаления);
	
	Для каждого ЭлементСтруктуры Из ДанныеДляОтражения Цикл
		
		КолонкиГруппировок  = Новый Массив;
		КолонкиСуммирования = Новый Массив;
		Для каждого КолонкаТЗ Из ЭлементСтруктуры.Значение.Колонки Цикл
			Если КолонкиУдаления.Найти(КолонкаТЗ.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				КолонкиСуммирования.Добавить(КолонкаТЗ.Имя);
			Иначе
				КолонкиГруппировок.Добавить(КолонкаТЗ.Имя);
			КонецЕсли;
		КонецЦикла;
		КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ", ");
		КолонкиГруппировок = СтрСоединить(КолонкиГруппировок, ", ");
		ЭлементСтруктуры.Значение.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		// удалим строки с нулевыми суммами
		Отбор = Новый Структура(КолонкиСуммирования);
		Для каждого ЭлементКоллекции Из Отбор Цикл
			Отбор[ЭлементКоллекции.Ключ] = 0;
		КонецЦикла;
		НайденныеСтроки = ЭлементСтруктуры.Значение.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЭлементСтруктуры.Значение.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция БухучетНДФЛ(ТаблицаНДФЛ) Экспорт
	
	БухучетНДФЛ = НоваяТаблицаБухучетНачисленныйНДФЛ();
	
	РегистрацииНО = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "РегистрацияВНалоговомОргане", Истина);
	РеквизитыРегистрацийНО = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(РегистрацииНО, "КодПоОКАТО,КодПоОКТМО,КПП,Код");
	
	Для каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		НоваяСтрока = БухучетНДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		РеквизитыРегистрации = РеквизитыРегистрацийНО[СтрокаТЗ.РегистрацияВНалоговомОргане];
		Если РеквизитыРегистрации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыРегистрации);
			НоваяСтрока.КодНалоговогоОргана = РеквизитыРегистрации.Код;
		КонецЕсли;
	КонецЦикла;
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(БухучетНДФЛ);
	
	Возврат БухучетНДФЛ;
	
КонецФункции	

Функция БухучетСтраховыхВзносов(Организация, Период, ТаблицаВзносов, БухучетНачислений) Экспорт
	
	ОтражениеЗарплатыВБухучетеВнутренний.ИсключитьСтрокиНеОблагаемыеВзносами(БухучетНачислений);
	
	Если БухучетНачислений.Колонки.Найти("ИсключатьПриОбработкеВзносов") = Неопределено Тогда
		БухучетНачислений.Колонки.Добавить("ИсключатьПриОбработкеВзносов", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Из таблицы ТаблицаВзносов отбираем строки, по которым есть записи с пустым сотрудником,
	// и записи потенциально относятся к доходам сотрудника (определяем это по типу поля Начисление).
	// Для таких строк "вычисляем" основных сотрудников и подразделение, далее дозаполняем
	// этими данными строки таблицы ТаблицаВзносов.
	ТаблицаВзносов.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	СтрокиФизическихЛиц = Новый Соответствие;
	НайденныеСтроки = ТаблицаВзносов.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Начисление) 
			Или ТипЗнч(СтрокаТЗ.Начисление) = Тип("ПланВидовРасчетаСсылка.Начисления")
			Или ТипЗнч(СтрокаТЗ.Начисление) = Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний") Тогда
			
			СтрокиПоФизическомуЛицу = СтрокиФизическихЛиц[СтрокаТЗ.ФизическоеЛицо];
			Если СтрокиПоФизическомуЛицу = Неопределено Тогда
				СтрокиПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиПоФизическомуЛицу.Добавить(СтрокаТЗ);
			СтрокиФизическихЛиц.Вставить(СтрокаТЗ.ФизическоеЛицо, СтрокиПоФизическомуЛицу);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиФизическихЛиц, "Ключ");
	
	Если МассивФизическихЛиц.Количество() > 0 Тогда
		
		КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, МассивФизическихЛиц, Организация, Период, КонецМесяца(Период));
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(Сотрудники.Сотрудник) КАК Сотрудник,
		|		Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ВТОсновныеСотрудникиФизическихЛиц КАК Сотрудники
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Сотрудники.ФизическоеЛицо) КАК Сотрудники";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		ТаблицаСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "Подразделение,Организация", КонецМесяца(Период));
		
		Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
			СтрокиПоФизическомуЛицу = СтрокиФизическихЛиц[СтрокаТЗ.ФизическоеЛицо];
			Для каждого СтрокаТаблицыВзносов Из СтрокиПоФизическомуЛицу Цикл
				СтрокаТаблицыВзносов.Сотрудник = СтрокаТЗ.Сотрудник;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВзносов.Подразделение) И СтрокаТЗ.Организация = Организация Тогда
					СтрокаТаблицыВзносов.Подразделение = СтрокаТЗ.Подразделение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("БухучетНачислений", БухучетНачислений);
	Запрос.УстановитьПараметр("ТаблицаВзносов", ТаблицаВзносов);
	Запрос.УстановитьПараметр("ПериодРегистрации", Период);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаВзносов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаВзносов.Организация КАК Организация,
	|	ТаблицаВзносов.Сотрудник КАК Сотрудник,
	|	ТаблицаВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаВзносов.Подразделение КАК Подразделение,
	|	ТаблицаВзносов.ВидОперации КАК ВидОперации,
	|	ТаблицаВзносов.Начисление КАК Начисление,
	|	ТаблицаВзносов.ДатаНачала КАК ДатаНачала,
	|	ТаблицаВзносов.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ТаблицаВзносов.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	&ТаблицаВзносов КАК ТаблицаВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ФизическоеЛицо,
	|	Подразделение,
	|	ДатаНачала,
	|	Начисление,
	|	ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	БухучетНачислений.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачислений
	|ИЗ
	|	&БухучетНачислений КАК БухучетНачислений
	|ГДЕ
	|	НЕ БухучетНачислений.ИсключатьПриОбработкеВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СУММА(БухучетНачислений.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТБухучетНачисленийСвод
	|ИЗ
	|	ВТБухучетНачислений КАК БухучетНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	БухучетНачислений.Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо,
	|	БухучетНачислений.ДатаНачала,
	|	БухучетНачислений.Подразделение,
	|	БухучетНачислений.Начисление,
	|	БухучетНачислений.ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БухучетНачислений.Сотрудник КАК Сотрудник,
	|	БухучетНачислений.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БухучетНачислений.Подразделение КАК Подразделение,
	|	БухучетНачислений.ДатаНачала КАК ДатаНачала,
	|	БухучетНачислений.Начисление КАК Начисление,
	|	БухучетНачислений.ВидОперации КАК ВидОперации,
	|	БухучетНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	БухучетНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	БухучетНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	БухучетНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	БухучетНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.Сумма = 0
	|				ИЛИ БухучетНачисленийСвод.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(БухучетНачислений.Сумма / БухучетНачисленийСвод.Сумма КАК ЧИСЛО(25, 10))
	|	КОНЕЦ КАК База
	|ПОМЕСТИТЬ ВТБухучетНачисленийБаза
	|ИЗ
	|	ВТБухучетНачислений КАК БухучетНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачисленийСвод КАК БухучетНачисленийСвод
	|		ПО БухучетНачислений.ДатаНачала = БухучетНачисленийСвод.ДатаНачала
	|			И БухучетНачислений.Сотрудник = БухучетНачисленийСвод.Сотрудник
	|			И БухучетНачислений.ФизическоеЛицо = БухучетНачисленийСвод.ФизическоеЛицо
	|			И БухучетНачислений.Подразделение = БухучетНачисленийСвод.Подразделение
	|			И БухучетНачислений.Начисление = БухучетНачисленийСвод.Начисление
	|			И БухучетНачислений.ОблагаетсяЕНВД = БухучетНачисленийСвод.ОблагаетсяЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ФизическоеЛицо,
	|	Подразделение,
	|	ДатаНачала,
	|	Начисление,
	|	ОблагаетсяЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СтраховыеВзносы.Организация КАК Организация,
	|	СтраховыеВзносы.ПериодРегистрации КАК ПериодРегистрации,
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносы.Подразделение КАК Подразделение,
	|	СтраховыеВзносы.Начисление КАК Начисление,
	|	СтраховыеВзносы.ВидОперации КАК ВидОперации,
	|	СтраховыеВзносы.ДатаНачала КАК ДатаНачала,
	|	СтраховыеВзносы.Сумма КАК Сумма,
	|	ЕСТЬNULL(БухучетНачислений.ПодразделениеУчетаЗатрат, СтраховыеВзносы.Подразделение) КАК ПодразделениеУчетаЗатрат,
	|	ЕСТЬNULL(БухучетНачислений.СпособОтраженияЗарплатыВБухучете, ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)) КАК СпособОтраженияЗарплатыВБухучете,
	|	ЕСТЬNULL(БухучетНачислений.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(БухучетНачислений.СтатьяРасходов, ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК СтатьяРасходов,
	|	ЕСТЬNULL(БухучетНачислений.База, СтраховыеВзносы.Сумма) КАК База,
	|	ЕСТЬNULL(БухучетНачислений.ВидОперации, ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход)) КАК ВидОперацииНачисления,
	|	СтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА БухучетНачислений.ВидОперации ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетДанныхБухучета
	|ИЗ
	|	ВТВзносы КАК СтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБухучетНачисленийБаза КАК БухучетНачислений
	|		ПО СтраховыеВзносы.Сотрудник = БухучетНачислений.Сотрудник
	|			И СтраховыеВзносы.ФизическоеЛицо = БухучетНачислений.ФизическоеЛицо
	|			И СтраховыеВзносы.Подразделение = БухучетНачислений.Подразделение
	|			И СтраховыеВзносы.ОблагаетсяЕНВД = БухучетНачислений.ОблагаетсяЕНВД
	|			И СтраховыеВзносы.Начисление = БухучетНачислений.Начисление
	|			И СтраховыеВзносы.ДатаНачала = БухучетНачислений.ДатаНачала
	|			И (БухучетНачислений.База <> 0)";
		
	ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоэффициентов.Индексы.Добавить("ИдентификаторСтроки");
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	ОтражениеВУчетеСтраховыеВзносы = НоваяТаблицыОтражениеВУчетеСтраховыеВзносы();
	СвойстваЗаполненияПоВзносам = "ФизическоеЛицо,Сотрудник,Подразделение,ОблагаетсяЕНВД,ИдентификаторСтроки,ДатаНачала,ВидОперации";
	
	СтрокиБезБухучета = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаВзносов Цикл
		
		Отбор.ИдентификаторСтроки = СтрокаТЗ.ИдентификаторСтроки;
		СтрокиОтражения = ТаблицаКоэффициентов.НайтиСтроки(Отбор);
		
		Если СтрокиОтражения[0].НетДанныхБухучета Тогда
			НоваяСтрока = ОтражениеВУчетеСтраховыеВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиОтражения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, СвойстваЗаполненияПоВзносам);
			СтрокиБезБухучета.Добавить(НоваяСтрока);
			Продолжить;
		КонецЕсли;
		
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиОтражения,"База");
		Результаты = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаТЗ.Сумма, Коэффициенты);
		
		Индекс = 0;
		Для Каждого СтрокаОтражения Из СтрокиОтражения Цикл
			
			НоваяСтрока = ОтражениеВУчетеСтраховыеВзносы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтражения);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ, СвойстваЗаполненияПоВзносам);
			НоваяСтрока.Сумма = Результаты[Индекс];
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтрокиБезБухучета.Количество() > 0 Тогда
		// СтрокиБезБухучета - массив ссылок на строки таблицы ОтражениеВУчетеСтраховыеВзносы.
		ОтражениеЗарплатыВБухучетеВнутренний.РаспределитьВзносыПоБазеПоУмолчанию(СтрокиБезБухучета, Организация, Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОтражениеВУчетеСтраховыеВзносы", ОтражениеВУчетеСтраховыеВзносы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеВзносыПоФизическимЛицам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносыПоФизическимЛицам.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносыПоФизическимЛицам.Подразделение КАК Подразделение,
	|	СтраховыеВзносыПоФизическимЛицам.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтраховыеВзносыПоФизическимЛицам.Начисление КАК Начисление,
	|	СтраховыеВзносыПоФизическимЛицам.ВидОперации КАК ВидОперации,
	|	СтраховыеВзносыПоФизическимЛицам.ВидОперацииНачисления КАК ВидОперацииНачисления,
	|	СтраховыеВзносыПоФизическимЛицам.ДатаНачала КАК ДатаНачала,
	|	СтраховыеВзносыПоФизическимЛицам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтраховыеВзносыПоФизическимЛицам.СтатьяРасходов КАК СтатьяРасходов,
	|	СтраховыеВзносыПоФизическимЛицам.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтраховыеВзносыПоФизическимЛицам.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	СтраховыеВзносыПоФизическимЛицам.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТОтражениеВУчетеСтраховыеВзносы
	|ИЗ
	|	&ОтражениеВУчетеСтраховыеВзносы КАК СтраховыеВзносыПоФизическимЛицам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтраховыеВзносы.Сотрудник КАК Сотрудник,
	|	СтраховыеВзносы.Подразделение КАК Подразделение,
	|	СтраховыеВзносы.Начисление КАК Начисление,
	|	СтраховыеВзносы.ВидОперацииНачисления КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ СтраховыеВзносы.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	СтраховыеВзносы.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	СтраховыеВзносы.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СтраховыеВзносы.СтатьяРасходов КАК СтатьяРасходов,
	|	СтраховыеВзносы.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	СтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СтраховыеВзносы.ДатаНачала < &ПериодРегистрации
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносы.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодПринятияРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ВзносыПоЕдиномуТарифу)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВзносыПоЕдиномуТарифу,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСПревышения)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРСПревышения,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДоПредельнойВеличины)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРДоПредельнойВеличины,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРПоСуммарномуТарифу)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРПоСуммарномуТарифу,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРСтраховаяЧасть)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРСтраховая,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРНакопительнаяЧасть)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРНакопительная,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФСС)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФСС,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФФОМС)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФФОМС,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ТФОМС)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТФОМС,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ФССНС)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФССНесчастныеСлучаи,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифЛЭ)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРНаДоплатуЛетчикам,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРДополнительныйТарифШахтеры)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРНаДоплатуШахтерам,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахБезСпецОценки,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаПодземныхИВредныхРаботахСпецОценка,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахБезСпецОценки,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРЗаЗанятыхНаТяжелыхИПрочихРаботахСпецОценка,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОПСпоМеждународнымДоговорам)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПСпоМеждународнымДоговорам,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОПСпоМеждународнымДоговорамСПревышения)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПСпоМеждународнымДоговорамСПревышения,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОМСпоМеждународнымДоговорам)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОМСпоМеждународнымДоговорам,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОМСпоМеждународнымДоговорамСПревышения)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОМСпоМеждународнымДоговорамСПревышения,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОССпоМеждународнымДоговорам)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОССпоМеждународнымДоговорам,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносы.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ОССпоМеждународнымДоговорамСПревышения)
	|				ТОГДА СтраховыеВзносы.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОССпоМеждународнымДоговорамСПревышения
	|ИЗ
	|	ВТОтражениеВУчетеСтраховыеВзносы КАК СтраховыеВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносы.Начисление,
	|	СтраховыеВзносы.Подразделение,
	|	СтраховыеВзносы.ПодразделениеУчетаЗатрат,
	|	СтраховыеВзносы.СтатьяФинансирования,
	|	СтраховыеВзносы.ФизическоеЛицо,
	|	СтраховыеВзносы.СпособОтраженияЗарплатыВБухучете,
	|	СтраховыеВзносы.ОблагаетсяЕНВД,
	|	СтраховыеВзносы.ДатаНачала,
	|	СтраховыеВзносы.Сотрудник,
	|	СтраховыеВзносы.СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СтраховыеВзносы.ДатаНачала < &ПериодРегистрации
	|			ТОГДА &ПериодРегистрации
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(СтраховыеВзносы.ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ,
	|	СтраховыеВзносы.ВидОперацииНачисления";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ОбслуживаниеЗаполненияДокумента

// Приводит структуру таблиц значений с результатами заполнения табличных частей документа
// к структуре табличных частей, таблицы с результатами заполнения могут содержать вспомогательные колонки.
//
// Параметры
//		РезультатЗаполнения - Структура - ключ соответствует имени табличной части, значение - таблица значений.
//		ДокументСсылка - Ссылка - ссылка на документ, для которого получены результаты заполнения
//
Процедура ПривестиРезультатыЗаполненияКСтруктуреТаблицДокумента(РезультатЗаполнения, ДокументСсылка) Экспорт

	ТаблицыДокумента = Новый Структура;
	
	МДДокумент = ДокументСсылка.Метаданные();
	Для каждого ТабличнаяЧасть Из МДДокумент.ТабличныеЧасти Цикл
		Таблица = Новый ТаблицаЗначений;
		Для каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
			Таблица.Колонки.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Тип);
		КонецЦикла;
		ТаблицыДокумента.Вставить(ТабличнаяЧасть.Имя, Таблица);
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из ТаблицыДокумента Цикл
	
		ИмяТЧ 	= ЭлементКоллекции.Ключ;
		
		Таблица = Неопределено;
		Если Не РезультатЗаполнения.Свойство(ИмяТЧ, Таблица) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Таблица.Колонки.Найти("ПодразделениеУчетаЗатрат") <> Неопределено Тогда
			Таблица.Колонки.Удалить("Подразделение");
			Таблица.Колонки.ПодразделениеУчетаЗатрат.Имя = "Подразделение";
		КонецЕсли;
		
		НоваяТаблица = ЭлементКоллекции.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, НоваяТаблица);
		РезультатЗаполнения[ИмяТЧ] = НоваяТаблица;
	
	КонецЦикла;

КонецПроцедуры

// Выполняет сортировку таблиц значений с результатами заполнения документа .
//
// Параметры
//		РезультатЗаполнения - Структура - ключ соответствует имени табличной части, значение - таблица значений.
//
Процедура УпорядочитьДанныеДляОтраженияЗарплатыВБухучете(РезультатЗаполнения) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.ИмяПоля КАК ИмяПоля
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпорядоченнаяТаблица.ИмяПоля КАК ИмяПоля
	|ИЗ
	|	ВТТаблица КАК УпорядоченнаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	УпорядоченнаяТаблица.ИмяПоля";
	
	СоединениеФизическоеЛицо = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Таблица.ФизическоеЛицо = ФизическиеЛица.Ссылка";
	
	СоединениеПодразделение = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО Таблица.Подразделение = ПодразделенияОрганизаций.Ссылка";
	
	СоединениеСотрудник = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Таблица.Сотрудник = Сотрудники.Ссылка";
	
	ПолеФизическоеЛицо 	= "ФизическиеЛица.Наименование КАК ФизическоеЛицоНаименование";
	ПолеПодразделение 	= "ПодразделенияОрганизаций.Наименование КАК ПодразделениеНаименование";
	ПолеСотрудник 		= "Сотрудники.Наименование КАК СотрудникНаименование";
	
	Для каждого ЭлементКоллекции Из РезультатЗаполнения Цикл
		
		ИмяТаблицы = ЭлементКоллекции.Ключ;
		Если ЭлементКоллекции.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляВременнойТаблицы = Новый Массив;
		ЕстьПолеСтатьяФинансирования = Ложь;
		Для каждого КолонкаТЗ Из ЭлементКоллекции.Значение.Колонки Цикл
			ИмяПоля = КолонкаТЗ.Имя;
			ПоляВременнойТаблицы.Добавить("Таблица." + ИмяПоля + " КАК " + ИмяПоля);
			Если ВРег(ИмяПоля) = ВРег("СтатьяФинансирования") Тогда
				ЕстьПолеСтатьяФинансирования = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ПоляСортировки = Новый Массив;
		Если ВРег(ИмяТаблицы) = ВРег("НачисленнаяЗарплатаИВзносы") Тогда
			ТекстСоединения = "ВТТаблица КАК Таблица" + СоединениеФизическоеЛицо + СоединениеПодразделение;
			ПоляСортировки.Добавить(ПолеФизическоеЛицо);
			ПоляСортировки.Добавить(ПолеПодразделение);
			ТекстУпорядочивания = "ФизическоеЛицоНаименование,ПодразделениеНаименование,ВидОперации,";
			Если ЕстьПолеСтатьяФинансирования Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяФинансирования,";
			КонецЕсли;
			ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяРасходов,СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД,ВидНачисленияОплатыТрудаДляНУ";
		ИначеЕсли ВРег(ИмяТаблицы) = ВРег("НачисленныйНДФЛ") Тогда
			ТекстСоединения = "ВТТаблица КАК Таблица" + СоединениеФизическоеЛицо;
			ПоляСортировки.Добавить(ПолеФизическоеЛицо);
			ТекстУпорядочивания = "ФизическоеЛицоНаименование,ВидОперации,";
			Если ЕстьПолеСтатьяФинансирования Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяФинансирования,";
			КонецЕсли;
			ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяРасходов,КодНалоговогоОргана,КПП,КодПоОКТМО";
		ИначеЕсли ВРег(ИмяТаблицы) = ВРег("УдержаннаяЗарплата") Тогда
			ТекстСоединения = "ВТТаблица КАК Таблица" + СоединениеФизическоеЛицо + СоединениеПодразделение;
			ПоляСортировки.Добавить(ПолеФизическоеЛицо);
			ПоляСортировки.Добавить(ПолеПодразделение);
			ТекстУпорядочивания = "ФизическоеЛицоНаименование,ПодразделениеНаименование,ВидОперации,";
			Если ЕстьПолеСтатьяФинансирования Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяФинансирования,";
			КонецЕсли;
			ТекстУпорядочивания = ТекстУпорядочивания + "СтатьяРасходов,Контрагент,ЯвляетсяОснованиемОформленияКассовогоЧека,ОписаниеУдержанияДляЧека";
		ИначеЕсли ВРег(ИмяТаблицы) = ВРег("ВыплатаЗаСчетРезерва") Тогда
			ТекстСоединения = "ВТТаблица КАК Таблица" + СоединениеСотрудник;
			ПоляСортировки.Добавить(ПолеСотрудник);
			ТекстУпорядочивания = "СотрудникНаименование,ВидОперации";
			Если ЕстьПолеСтатьяФинансирования Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + ",СтатьяФинансирования";
			КонецЕсли;
		КонецЕсли;
		
		ПоляЗапроса  = СтрСоединить(ПоляВременнойТаблицы, "," + Символы.ПС);
		ПоляЗапросаСортировки  = ПоляЗапроса + "," + Символы.ПС + СтрСоединить(ПоляСортировки, "," + Символы.ПС);
		
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "УпорядоченнаяТаблица.ИмяПоля КАК ИмяПоля", ПоляЗапросаСортировки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.ИмяПоля КАК ИмяПоля", ПоляЗапроса);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблица КАК УпорядоченнаяТаблица", ТекстСоединения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УпорядоченнаяТаблица.ИмяПоля", ТекстУпорядочивания);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Таблица", ЭлементКоллекции.Значение);
		РезультатЗаполнения[ИмяТаблицы] = Запрос.Выполнить().Выгрузить();
		ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц,"ВТТаблица");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

Функция НоваяСтруктураДанныеДляОтраженияЗарплатыВБухучете() Экспорт

	ДанныеДляОтражения = Новый Структура;
	ДанныеДляОтражения.Вставить("НачисленнаяЗарплатаИВзносы", НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы());
	ДанныеДляОтражения.Вставить("НачисленныйНДФЛ", НоваяТаблицаБухучетНачисленныйНДФЛ());
	ДанныеДляОтражения.Вставить("УдержаннаяЗарплата", НоваяТаблицаБухучетУдержаннаяЗарплата());
	
	Возврат ДанныеДляОтражения;

КонецФункции 

Функция НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы() Экспорт
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьМассивТиповНачисления(МассивТиповНачисления);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВидНачисленияОплатыТрудаДляНУ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНачисленийОплатыТрудаДляНУ"));
	Таблица.Колонки.Добавить("ПериодПринятияРасходов", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Таблица.Колонки.Добавить("Резерв", Новый ОписаниеТипов("СправочникСсылка.Резервы"));
	Таблица.Колонки.Добавить("РезервБУ", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РезервНУ", Новый ОписаниеТипов("Булево"));
	
	КолонкиВзносов = ОтражениеЗарплатыВУчете.КолонкиВзносов();
	Для каждого ИмяПоля Из КолонкиВзносов Цикл
		Таблица.Колонки.Добавить(ИмяПоля, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаБухучетНачисленныйНДФЛ() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("КодПоОКАТО", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(11)));
	Таблица.Колонки.Добавить("КодПоОКТМО", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(11)));
	Таблица.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	Таблица.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(4)));
	Таблица.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаБухучетУдержаннаяЗарплата() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ЯвляетсяОснованиемОформленияКассовогоЧека",  Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ОписаниеУдержанияДляЧека", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицыОтражениеВУчетеСтраховыеВзносы() Экспорт
	
	МассивТиповНачисления = Новый Массив;
	МассивТиповНачисления.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТиповНачисления.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	ОтражениеЗарплатыВУчетеВнутренний.ДополнитьМассивТиповНачисления(МассивТиповНачисления);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("ВидОперацииНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов(МассивТиповНачисления));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ПериодПринятияРасходов", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Функция ОписаниеПараметровДляРасчетаОценочныхОбязательствОтпусков() Экспорт

	ПараметрыДляРасчета = Новый Структура;
	ПараметрыДляРасчета.Вставить("ОстаткиОтпусков", НоваяТаблицаОстаткиОтпусков());
	ПараметрыДляРасчета.Вставить("ФондОплатыТрудаИСтраховыеВзносы", НоваяТаблицаФондОплатыТрудаИСтраховыеВзносы());
	ПараметрыДляРасчета.Вставить("НастройкиБухучетаСотрудников", НоваяТаблицаНастройкиБухучетаСотрудников());
	
	Возврат ПараметрыДляРасчета;

КонецФункции 

Функция НоваяТаблицаОстаткиОтпусков() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ОстатокОтпусков", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	Таблица.Колонки.Добавить("ОтпускАвансом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	Таблица.Колонки.Добавить("СреднийЗаработок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РасчетПоСохраняемомуЗаработку", Новый ОписаниеТипов("Булево"));
	
	// вспомогательная колонка
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаНастройкиБухучетаСотрудников() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДоляРаспределения", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ЗначениеДоляРаспределенияБухучетЗарплаты.Тип));
	
	// вспомогательная колонка
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;

КонецФункции

Функция НоваяТаблицаФондОплатыТрудаИСтраховыеВзносы() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("МестоВСтруктуреПредприятия", Метаданные.ОпределяемыеТипы.МестоВСтруктуреПредприятия.Тип);
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("СтраховыеВзносы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ФССНесчастныеСлучаи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("РасчетПоСохраняемомуЗаработку", Новый ОписаниеТипов("Булево"));
	
	// вспомогательные колонки
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаНачисленоЗаСчетРезерва() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация",          Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("Сотрудник",            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("Резерв",               Новый ОписаниеТипов("СправочникСсылка.Резервы"));
	Таблица.Колонки.Добавить("Сумма",                Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("СтраховыеВзносы",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ФССНесчастныеСлучаи",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("РезервБУ",             Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("РезервНУ",             Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВидОперации",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
	
	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область БлокПроцедурИФункцийДляРедактированияПроцентаЕнвдНаФормеДокумента

Процедура ДополнитьФормуРеквизитыРедактированияЕНВД(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь)
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ОрганизацияПлательщикЕНВДЗарплатаКадры", Новый ОписаниеТипов("Булево")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроцентЕНВД", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(8,5))));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроцентЕНВДИнфоНадпись", Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроцентЕНВДСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9))));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПроцентЕНВДСтрокаПрежнееЗначение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9))));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, НЕ ДобавлятьЭлементыФормы);
	
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		Если Форма.Элементы.Найти("ПроцентЕНВДСтрока") = Неопределено Тогда
			
			РедактированиеДоступно = ДоступноИзменениеПроцентаЕНВДДляУчетаЗатратНаЗарплату();
			
			ЭлементРодитель = Форма.Элементы.ГруппаЕНВД;
			ПолеВвода = Форма.Элементы.Вставить("ПроцентЕНВДСтрока", Тип("ПолеФормы"), ЭлементРодитель);
			ПолеВвода.ПутьКДанным = "ПроцентЕНВДСтрока";
			ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок = "% ЕНВД";
			ПолеВвода.Подсказка = НСтр("ru = 'Применяется к начислениям сотрудников, для которых указано отношение к ЕНВД: ""Определяется ежемесячно процентом""';
										|en = 'Applied to employees'' accruals for which relation to UTII is specified: ""Determined monthly as a percent""'");
			ПолеВвода.КнопкаВыбора = Истина;
			ПолеВвода.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийТекст;
			ПолеВвода.КартинкаКнопкиВыбора = БиблиотекаКартинок.Калькулятор;
			ПолеВвода.Ширина = 6;
			ПолеВвода.УстановитьДействие("НачалоВыбора", "Подключаемый_ПроцентЕНВДСтрокаНачалоВыбора");
			ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПроцентЕНВДСтрокаПриИзменении");
			ПолеВвода.ТолькоПросмотр = НЕ РедактированиеДоступно Или Форма.ТолькоПросмотр;
			
			ПолеНадпись = Форма.Элементы.Вставить("ПроцентЕНВДИнфоНадпись", Тип("ПолеФормы"), ЭлементРодитель);
			ПолеНадпись.ПутьКДанным = "ПроцентЕНВДИнфоНадпись";
			ПолеНадпись.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеНадпись.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНадпись.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьФункциональнуюОпциюФормыПлательщикЕНВДЗарплатаКадры(Форма)
	
	Форма.ОрганизацияПлательщикЕНВДЗарплатаКадры = Форма.ПолучитьФункциональнуюОпциюФормы("ПлательщикЕНВДЗарплатаКадры");
	Форма.Элементы.ГруппаЕНВД.Видимость = Форма.ОрганизацияПлательщикЕНВДЗарплатаКадры;

КонецПроцедуры

Процедура ПрочитатьСведенияПроцентЕНВД(Форма, Организация, МесяцНачисления)

	ТекущийПроцентЕНВД = ПроцентЕНВД(Организация, МесяцНачисления);
	Если ТекущийПроцентЕНВД = Неопределено Тогда
		Форма.ПроцентЕНВД = 0;
		Форма.ПроцентЕНВДСтрокаПрежнееЗначение = "";
		Форма.ПроцентЕНВДСтрока = "";
	Иначе
		Форма.ПроцентЕНВД = ТекущийПроцентЕНВД;
		Форма.ПроцентЕНВДСтрока = Формат(Форма.ПроцентЕНВД, "ЧЦ=8; ЧДЦ=5; ЧН=0");
		Форма.ПроцентЕНВДСтрокаПрежнееЗначение = Форма.ПроцентЕНВДСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстПредупрежденияПроцентЕНВДСтрока(Форма)

	ТекстПредупреждения = Форма.ТекстПредупрежденияПриРедактированииПроцентаЕНВД();
	Форма.Элементы.ПроцентЕНВДСтрока.ПредупреждениеПриРедактировании = ТекстПредупреждения;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИБ

Процедура ЗаполнитьСтатьюРасходовВДокументеОтражениеЗарплатыВБухучете(ПараметрыОбновления = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОбработке.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВБухучете.НачисленнаяЗарплатаИВзносы КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
	|	ГДЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВБухучете.НачисленныйНДФЛ КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
	|	ГДЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.Ссылка
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВБухучете.УдержаннаяЗарплата КАК ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы
	|	ГДЕ
	|		ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|		И ОтражениеЗарплатыВБухучетеНачисленнаяЗарплатаИВзносы.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму)) КАК ДокументыКОбработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВБухучете.Ссылка КАК Ссылка,
	|	ОтражениеЗарплатыВБухучете.Проведен КАК Проведен
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ОтражениеЗарплатыВБухучете.Ссылка = ДокументыКОбработке.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтражениеЗарплатыВБухучете.ПериодРегистрации УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	СтатьиРасходовПоВидуОперации 		= ОтражениеЗарплатыВУчете.СтатьиРасходовПоВидуОперации();
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ОтражениеЗарплатыВБухучете", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаТЧ Из ДокументОбъект.НачисленнаяЗарплатаИВзносы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				НоваяСтатьяРасходов = СтатьиРасходовПоВидуОперации[СтрокаТЧ.ВидОперации];
				Если Не ЗначениеЗаполнено(НоваяСтатьяРасходов) Тогда
					НоваяСтатьяРасходов = СтатьяРасчетыПоОплатеТруда;	
				КонецЕсли;
				СтрокаТЧ.СтатьяРасходов = НоваяСтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.НачисленныйНДФЛ Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				НоваяСтатьяРасходов = СтатьиРасходовПоВидуОперации[СтрокаТЧ.ВидОперации];
				Если Не ЗначениеЗаполнено(НоваяСтатьяРасходов) Тогда
					НоваяСтатьяРасходов = СтатьяРасчетыПоОплатеТруда;	
				КонецЕсли;
				СтрокаТЧ.СтатьяРасходов = НоваяСтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.УдержаннаяЗарплата Цикл
			Если СтрокаТЧ.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				НоваяСтатьяРасходов = СтатьиРасходовПоВидуОперации[СтрокаТЧ.ВидОперации];
				Если Не ЗначениеЗаполнено(НоваяСтатьяРасходов) Тогда
					НоваяСтатьяРасходов = СтатьяРасчетыПоОплатеТруда;	
				КонецЕсли;
				СтрокаТЧ.СтатьяРасходов = НоваяСтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект,,, РежимЗаписиДокумента.Запись);
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

// Удаление роли из пользовательских профилей.
//
Процедура УдалитьРольОтражениеЗарплатыВБухгалтерскомУчете() Экспорт
	
	ОтражениеЗарплатыВБухучетеВнутренний.УдалитьРольОтражениеЗарплатыВБухгалтерскомУчете();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвижений

Функция НоваяТаблицаНастройкиБухучетаДоговоровГПХ() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ДоговорАкт",  						Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ДоговорАктЗарплатаКадры.Тип));
	Таблица.Колонки.Добавить("ИдентификаторСтроки",  				Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ПодразделениеУчетаЗатрат",			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования",				Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",						Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("СпособОтраженияЗарплатыВБухучете", 	Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияЗарплатыВБухучете"));
	Таблица.Колонки.Добавить("ОблагаетсяЕНВД",  					Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДоляРаспределения",  					Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ЗначениеДоляРаспределенияБухучетЗарплаты.Тип));
	
	Возврат Таблица;
	
КонецФункции

Процедура СформироватьДвиженияБухучетДоговоровГПХ(Движения, НастройкиБухучета) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиБухучета) Тогда
		Возврат;
	КонецЕсли; 
	
	Движения.БухучетДоговоровГПХ.Записывать = Истина;
	
	Для каждого СтрокаТЗ Из НастройкиБухучета Цикл
		НоваяСтрока = Движения.БухучетДоговоровГПХ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ДоступноИзменениеПроцентаЕНВДДляУчетаЗатратНаЗарплату()
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату);
	
КонецФункции

// Процедура регистрирует процент ЕНВД в регистре сведений ПроцентЕНВДДляУчетаЗатратНаЗарплату.
//
// Параметры:
//  Организация	 - Тип СправочникСсылка.Организации
//  Месяц	     - Тип Дата, месяц, на который регистрируется процент ЕНВД.
//  ПроцентЕНВД  - Тип Число, или Неопределено
//		если ПроцентЕНВД = Неопределено, необходимо удалить регистрацию процента на указанный месяц.
//
Процедура ЗарегистрироватьПроцентЕНВД(Организация, Месяц, ПроцентЕНВД)
	
	ПериодРегистрации = НачалоМесяца(Месяц);
	
	НаборЗаписей = РегистрыСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Месяц.Установить(ПериодРегистрации);
	НаборЗаписей.Прочитать();
	
	Если ПроцентЕНВД = Неопределено И НаборЗаписей.Выбран() Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	Иначе
		
		// Выполняем запись только если новое значение не равно текущему.
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Организация = Организация;
			НоваяЗапись.Месяц = ПериодРегистрации;
			НоваяЗапись.Процент = ПроцентЕНВД;
			НаборЗаписей.Записать();
		ИначеЕсли НаборЗаписей[0].Процент <> ПроцентЕНВД Тогда
			НаборЗаписей[0].Организация = Организация;
			НаборЗаписей[0].Месяц = ПериодРегистрации;
			НаборЗаписей[0].Процент = ПроцентЕНВД;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НачислениеВидНачисленияОплатыТрудаДляНУ() Экспорт

	НачислениеВидНачисленияОплатыТрудаДляНУ = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление,
	|	Начисления.ВидНачисленияДляНУ КАК ВидНачисленияОплатыТрудаДляНУ
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыОсобыхНачисленийИУдержаний.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыОсобыхНачисленийИУдержаний.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп21ст255)
	|		КОГДА ВидыОсобыхНачисленийИУдержаний.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.пп21ст255)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаДляНУ.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачисленийИУдержаний";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеВидНачисленияОплатыТрудаДляНУ.Вставить(Выборка.Начисление, Выборка.ВидНачисленияОплатыТрудаДляНУ);
	КонецЦикла;
	
	Возврат НачислениеВидНачисленияОплатыТрудаДляНУ;

КонецФункции

#КонецОбласти

#КонецОбласти