////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рабочие места охраны труда"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка),
		"ТекущаяОрганизация",
		ОбщегоНазначения.ТекущаяДатаПользователя());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		Форма.ТекущаяОрганизация = ТаблицаКадровыхДанных[0].ТекущаяОрганизация;
	КонецЕсли;
		
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.ТекущаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавляемыйРеквизит Из МассивДобавляемыхРеквизитов Цикл
		Если ДобавляемыйРеквизит.Имя = "РабочееМестоОхраныТруда" Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("РабочееМестоОхраныТруда", Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда"), , НСтр("ru = 'Рабочее место';
																																								|en = 'Workplace'"), Ложь));
	
КонецПроцедуры

Процедура ФормаСотрудникаДобавитьЭлементыФормы(Форма) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.ТекущаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаРабочееМесто = Форма.Элементы.Найти("РабочееМесто");
	Если ЭлементГруппаРабочееМесто = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Найти("ТекущееРабочееМесто");
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить(
			"ТекущееРабочееМесто",
			Тип("ПолеФормы"),
			ЭлементГруппаРабочееМесто,
			Форма.Элементы.ТекущееПодразделение);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.ПутьКДанным = "РабочееМестоОхраныТруда";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		МодульОхранаТрудаФормы.ФормаСотрудникаДобавитьЭлементыФормы(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаКадровойИсторииПриСозданииНаСервере(Форма) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда")) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	ФормаКадровойИсторииДобавитьЭлементыФормы(Форма);
	ДополнитьКадровуюИсториюРабочимиМестами(Форма);
	ФормаКадровойИсторииУстановитьЭлементУсловногоОформления(Форма);
	
КонецПроцедуры

Процедура ПриСозданииФормСпискаИлиВыбораСотрудников(Форма, ИмяСледующегоЭлемента, ТолькоПросмотр = Истина) Экспорт
	
	Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда")) Тогда
		
		Возврат;
	КонецЕсли;
	
	Организация = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОрганизацияИспользование")
		И Форма.ОрганизацияИспользование Тогда
		
		Организация = Форма.Организация;
	КонецЕсли;
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписок = Форма.Элементы.Найти("Список");
	Если ЭлементСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Найти("РабочееМесто");
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("РабочееМесто",
										Тип("ПолеФормы"),
										ЭлементСписок,
										Форма.Элементы[ИмяСледующегоЭлемента]);
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ТолькоПросмотр = ТолькоПросмотр;
		Элемент.ПутьКДанным = "Список.РабочееМесто";
	КонецЕсли;
	
КонецПроцедуры

Функция ОтпускаПоРабочемуМесту(ДанныеПозиции) Экспорт
	
	ТаблицаОтпусков = Новый ТаблицаЗначений;
	
	ТаблицаОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска");
	ТаблицаОтпусков.Колонки.Добавить("КоличествоДнейВГод");
	
	Если Не РабочиеМестаОхраныТруда.УсловияТрудаРабочихМестОхраныТрудаПрименяются() Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если Не ДанныеПозиции.Свойство("РабочееМесто") Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	ОтпускЗаВредность = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность");
	Если Не ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтпускЗаВредность, "ПометкаУдаления,Недействителен");
	Если РеквизитыОтпуска.ПометкаУдаления Или РеквизитыОтпуска.Недействителен Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПозиции.РабочееМесто) Тогда
		Возврат ТаблицаОтпусков;
	КонецЕсли;
			
	КоличествоДнейВГод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПозиции.РабочееМесто, "КоличествоДнейДополнительногоОтпускаВГод");
	Если ЗначениеЗаполнено(КоличествоДнейВГод) Тогда
		СтрокаВредногоОтпуска = ТаблицаОтпусков.Добавить();
		СтрокаВредногоОтпуска.ВидЕжегодногоОтпуска = ОтпускЗаВредность;
		СтрокаВредногоОтпуска.КоличествоДнейВГод = КоличествоДнейВГод;
	КонецЕсли; 
	
	Возврат ТаблицаОтпусков;
	
КонецФункции

Процедура УточнитьПараметрыОтбораФормыВыбораСотрудников(Форма, Организация, СписокНастройкиОтбора = Неопределено) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РабочееМесто = Неопределено;
	
	Если Форма.Параметры.Отбор.Свойство("РабочееМесто")
		И ЗначениеЗаполнено(Форма.Параметры.Отбор.РабочееМесто) Тогда
		
		// Отбор по рабочему месту
		РабочееМесто = Форма.Параметры.Отбор.РабочееМесто;
		
		Если СписокНастройкиОтбора <> Неопределено Тогда
			Форма.ФилиалЗафиксирован = Истина;
			СписокНастройкиОтбора.Добавить(НСтр("ru = 'Рабочее место';
												|en = 'Workplace'") + ": " + РабочееМесто);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеРабочегоМеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочееМесто, "Владелец,Подразделение");
		УстановитьПривилегированныйРежим(Ложь);
		
		Филиал = ДанныеРабочегоМеста.Владелец;
		Форма.Организация = ЗарплатаКадры.ГоловнаяОрганизация(Филиал);
		
		ПодразделенияОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРабочегоМеста.Подразделение);
		Форма.Подразделения = Новый ФиксированныйМассив(ПодразделенияОтбора);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, "РабочееМесто", РабочееМесто,ВидСравненияКомпоновкиДанных.Равно,
			"РабочееМесто", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Форма.Параметры.Отбор.Удалить("РабочееМесто");
	
	КонецЕсли;
			
КонецПроцедуры

#Область КадровыйУчет

Процедура ДополнитьФормуКадровогоПриказа(Форма, УстановитьДействие = Истина, ЭтоТабличнаяЧасть = Ложь) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаРабочееМесто = Форма.Элементы.Найти("ГруппаРабочееМесто");
	Если ЭлементГруппаРабочееМесто = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Найти("РабочееМесто");
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("РабочееМесто", Тип("ПолеФормы"), ЭлементГруппаРабочееМесто);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Если ЭтоТабличнаяЧасть Тогда
			Элемент.ПутьКДанным = "Объект.Сотрудники.РабочееМесто";
		Иначе
			Элемент.ПутьКДанным = "Объект.РабочееМесто";
		КонецЕсли;
		Если УстановитьДействие Тогда
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РабочееМестоПриИзменении");
			Элемент.УстановитьДействие("Очистка", "Подключаемый_РабочееМестоОчистка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыйПереводДополнитьФорму(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементПозицияГруппа = Форма.Элементы.Найти("ПозицияГруппа");
	Если ЭлементПозицияГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ДобавлятьРеквизитыФормы Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РабочееМестоКомментарий", Новый ОписаниеТипов("Строка")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееРабочееМесто",
			Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда")));
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		ЭлементРабочееМестоГруппа = Форма.Элементы.Найти("РабочееМестоГруппа");
		Если ЭлементРабочееМестоГруппа = Неопределено Тогда
			ЭлементРабочееМестоГруппа = Форма.Элементы.Вставить("РабочееМестоГруппа", Тип("ГруппаФормы"),
				ЭлементПозицияГруппа, Форма.Элементы.ПозицияКомментарий);
			ЭлементРабочееМестоГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементРабочееМестоГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ЭлементРабочееМестоГруппа.ОтображатьЗаголовок = Ложь;
			ЭлементРабочееМестоГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		КонецЕсли;
		
		Элемент = Форма.Элементы.Найти("ИзменитьРабочееМесто");
		Если Элемент = Неопределено Тогда
			Элемент = Форма.Элементы.Вставить("ИзменитьРабочееМесто", Тип("ПолеФормы"), ЭлементРабочееМестоГруппа);
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.ВажнаяНадписьШрифт;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			Элемент.ПутьКДанным = "Объект.ИзменитьРабочееМесто";
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ИзменитьРабочееМестоПриИзменении");
		КонецЕсли;
		
		Элемент = Форма.Элементы.Найти("РабочееМесто");
		Если Элемент = Неопределено Тогда
			Элемент = Форма.Элементы.Вставить("РабочееМесто", Тип("ПолеФормы"), ЭлементРабочееМестоГруппа);
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.ПутьКДанным = "Объект.РабочееМесто";
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РабочееМестоПриИзменении");
			Элемент.УстановитьДействие("Очистка", "Подключаемый_РабочееМестоОчистка");
		КонецЕсли;
		
		ЭлементРабочееМестоКомментарийГруппа = Форма.Элементы.Найти("РабочееМестоКомментарийГруппа");
		Если ЭлементРабочееМестоКомментарийГруппа = Неопределено Тогда
			ЭлементРабочееМестоКомментарийГруппа = Форма.Элементы.Вставить("РабочееМестоКомментарийГруппа",
				Тип("ГруппаФормы"), ЭлементПозицияГруппа, Форма.Элементы.ПозицияКомментарий);
			ЭлементРабочееМестоКомментарийГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементРабочееМестоКомментарийГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ЭлементРабочееМестоКомментарийГруппа.ОтображатьЗаголовок = Ложь;
			ЭлементРабочееМестоКомментарийГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		КонецЕсли;
	
		Элемент = Форма.Элементы.Найти("РабочееМестоКомментарий");
		Если Элемент = Неопределено Тогда
			Элемент = Форма.Элементы.Вставить("РабочееМестоКомментарий", Тип("ПолеФормы"), ЭлементРабочееМестоКомментарийГруппа);
			Элемент.Вид = ВидПоляФормы.ПолеНадписи;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.ПутьКДанным = "РабочееМестоКомментарий";
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Элемент.Видимость = Ложь;
			Элемент.РастягиватьПоГоризонтали = Истина;
			Элемент.РастягиватьПоВертикали = Ложь;
			Элемент.Высота = 2;
			Элемент.АвтоМаксимальнаяШирина = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура КадровыйПереводСпискомДополнитьФорму(Форма) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементРеквизитыСтроки = Форма.Элементы.Найти("СотрудникиРеквизитыСтрокиГруппа");
	Если ЭлементРеквизитыСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Найти("СотрудникиРабочееМесто");
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("СотрудникиРабочееМесто",
										Тип("ПолеФормы"),
										ЭлементРеквизитыСтроки,
										Форма.Элементы.СотрудникиДатаНачала);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "Объект.Сотрудники.РабочееМесто";
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыйПереводСотрудникПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИзменитьРабочееМесто = Ложь;
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораПериодическихДанных(ПоляОтбораПериодическихДанных, Отбор, Организация) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляОтбораПериодическихДанных.Вставить("РабочиеМестаСотрудников", Отбор);
	
КонецПроцедуры

Процедура ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(КлючиСтруктурыТекущихКадровыхДанныхСотрудника, Организация = Неопределено) Экспорт
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	РабочиеМестаОхраныТруда.ДополнитьИменаКадровыхДанных(КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	
КонецПроцедуры

Процедура УстановитьТекущееРабочееМесто(ОбъектДанных, ТекущиеКадровыеДанные = Неопределено, ИмяПоля = "ТекущееРабочееМесто") Экспорт
	
	Организация = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДанных, "Объект") Тогда
		Организация = ОбъектДанных.Объект.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДанных, "Организация") Тогда
		Организация = ОбъектДанных.Организация;
	КонецЕсли;
	
	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДанных, ИмяПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДанных[ИмяПоля] = ?(ТекущиеКадровыеДанные = Неопределено,
							Справочники.РабочиеМестаОхраныТруда.ПустаяСсылка(),
							ТекущиеКадровыеДанные.РабочееМестоОхраныТруда);
	
КонецПроцедуры

Процедура КадровыйПереводДополнитьРасшифровкуСтрокиСотрудника(Форма, ИдентификаторСтрокиСотрудника, ТекстРасшифровки) Экспорт
	
	Объект = Форма.Объект;
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	
	Если СтрокаСотрудника.ИзменитьРабочееМесто Тогда
		ТекстРасшифровки = ?(ПустаяСтрока(ТекстРасшифровки), "", ТекстРасшифровки + "; ") + НСтр("ru = 'Изменено рабочее место';
																								|en = 'The workplace is changed'");
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьРабочееМестоВФормеДокумента(Форма, ЭтоПеревод = Ложь) Экспорт
	
	УстановитьЗначениеРабочегоМестаВФормеДокумента(Форма, ЭтоПеревод);
	УстановитьСвойстваЭлементаРабочееМестоВФормеДокумента(Форма, ЭтоПеревод);
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементаРабочееМестоВФормеДокумента(Форма, ЭтоПеревод = Ложь) Экспорт

	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Подразделение");
	Организация = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Организация");
	Должность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Должность");
	
	РабочееМестоДоступно = ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Должность);
	
	Если ЭтоПеревод Тогда
		ИзменитьРабочееМесто = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.ИзменитьРабочееМесто");
		УстановитьСвязиПараметровВыбораДляКадровогоПеревода(Форма, ИзменитьРабочееМесто);
		РабочееМестоДоступно = РабочееМестоДоступно И ИзменитьРабочееМесто;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РабочееМесто", "Доступность", РабочееМестоДоступно);
	
КонецПроцедуры 

Процедура УстановитьЗначениеРабочегоМестаВФормеДокумента(Форма, ЭтоПеревод = Ложь) Экспорт

	Если Не РабочиеМестаОхраныТруда.РабочиеМестаОхраныТрудаИспользуются(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Подразделение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Подразделение");
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", Неопределено);
		Возврат;
	КонецЕсли;
	
	Должность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Должность");
	
	РабочееМесто = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто");
	ДанныеРабочегоМеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочееМесто, "Должность, Подразделение", Истина);
	Если Не (ДанныеРабочегоМеста.Подразделение = Подразделение И ДанныеРабочегоМеста.Должность = Должность) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", Неопределено);
	КонецЕсли;
	
	Владелец = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.Организация");
	СписокРабочихМест = РабочиеМестаОхраныТруда.РабочиеМестаПоПодразделениюИДолжности(Подразделение, Должность, Владелец);
	КоличествоРабочихМест = СписокРабочихМест.Количество();
	
	Если КоличествоРабочихМест = 1 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", СписокРабочихМест[0].Значение);
	ИначеЕсли КоличествоРабочихМест = 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", Неопределено);
	КонецЕсли;
	
	Если Не ЭтоПеревод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееРабочееМесто = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ТекущееРабочееМесто");
	Если КоличествоРабочихМест > 1 Тогда
		ИзменитьРабочееМесто = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.ИзменитьРабочееМесто");
		Если Не ИзменитьРабочееМесто И Не ТекущееРабочееМесто = РабочееМесто Тогда
			ДанныеТекущегоРабочегоМеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееРабочееМесто, "Должность, Подразделение", Истина);
			Если Не (ДанныеТекущегоРабочегоМеста.Подразделение = Подразделение И ДанныеТекущегоРабочегоМеста.Должность = Должность) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", Неопределено);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто", ТекущееРабочееМесто);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	НовоеРабочееМесто = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.РабочееМесто");
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект.ИзменитьРабочееМесто", Не ТекущееРабочееМесто = НовоеРабочееМесто);
	
КонецПроцедуры 

#КонецОбласти

#Область ОрганизацияУчетнаяПолитика

Процедура ДополнитьФормуУчетнойПолитикиОрганизации(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВключитьИспользованиеРабочихМестОхраныТруда", Новый ОписаниеТипов("Булево")));
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
КонецПроцедуры

Процедура ЗаписатьДополнительныеДанныеФормыУчетнойПолитикиОрганизации(Форма) Экспорт
	
	Если Не Форма.ВключитьИспользованиеРабочихМестОхраныТруда Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриЗаписиДополнительныхДанныхФормыУчетнойПолитикиОрганизации(Форма, СтандартнаяОбработка);
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьРабочиеМестаОхраныТруда.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ФормаКадровойИсторииДобавитьЭлементыФормы(Форма)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РегистраторРабочиеМеста",
														Документы.ТипВсеСсылки(),
														"КадроваяИстория"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РабочееМестоИзменено",
														Новый ОписаниеТипов("Булево"),
														"КадроваяИстория"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РабочееМесто",
														Новый ОписаниеТипов("СправочникСсылка.РабочиеМестаОхраныТруда"),
														"КадроваяИстория",
														НСтр("ru = 'Рабочее место';
															|en = 'Workplace'")));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭлементКадроваяИстория = Форма.Элементы.Найти("КадроваяИстория");
	Если ЭлементКадроваяИстория = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Форма.Элементы.Найти("КадроваяИсторияРабочееМесто");
	Если Элемент = Неопределено Тогда
		Элемент = Форма.Элементы.Вставить("КадроваяИсторияРабочееМесто",
										Тип("ПолеФормы"),
										ЭлементКадроваяИстория,
										Форма.Элементы.КадроваяИсторияГрафикРаботы);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.ПутьКДанным = "КадроваяИстория.РабочееМесто";
		Элемент.Подсказка = НСтр("ru = 'Рабочее место охраны труда';
								|en = 'Occupational safety and health workplace'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКадровуюИсториюРабочимиМестами(Форма)
	
	КадроваяИстория = Форма.КадроваяИстория.Выгрузить();
	РабочиеМеста = КадроваяИстория.Скопировать();
	РабочиеМеста.Очистить();
	ИсключаемыеКолонки = ИсключаемыеКолонкиКадровойИстории(КадроваяИстория.Колонки);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Измерения = Новый ТаблицаЗначений;
	Измерения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Измерения.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Измерения.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	СтрокаИзмерения = Измерения.Добавить();
	СтрокаИзмерения.Сотрудник = Форма.СсылкаНаСотрудника;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыКадровойИстории.Период КАК Период,
		|	&Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПериодыКадровойИстории
		|ИЗ
		|	&КадроваяИстория КАК ПериодыКадровойИстории";
	Запрос.УстановитьПараметр("КадроваяИстория", КадроваяИстория);
	Запрос.УстановитьПараметр("Сотрудник", Форма.СсылкаНаСотрудника);
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"РабочиеМестаСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(Измерения));
	
	РабочиеМестаОхраныТруда.СоздатьВТКадроваяИсторияРабочиеМеста(Запрос);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	История.Период КАК Период,
		|	МАКСИМУМ(ИсторияПредыдущая.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПредыдущиеПериоды
		|ИЗ
		|	ВТКадроваяИсторияРабочиеМеста КАК История
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияРабочиеМеста КАК ИсторияПредыдущая
		|		ПО История.Период > ИсторияПредыдущая.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	История.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ПериодПредыдущий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	История.Период КАК Период,
		|	История.ПериодКадроваяИстория КАК ПериодКадроваяИстория,
		|	История.РабочееМесто КАК РабочееМесто,
		|	ВЫБОР
		|		КОГДА История.РабочееМесто = ИсторияПредыдущие.РабочееМесто
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РабочееМестоИзменено,
		|	История.РегистраторРабочиеМеста КАК РегистраторРабочиеМеста
		|ИЗ
		|	ВТКадроваяИсторияРабочиеМеста КАК История
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредыдущиеПериоды КАК ПредыдущиеПериоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияРабочиеМеста КАК ИсторияПредыдущие
		|			ПО ПредыдущиеПериоды.ПериодПредыдущий = ИсторияПредыдущие.Период
		|		ПО История.Период = ПредыдущиеПериоды.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтрокаНайдена = Ложь;
		Для каждого СтрокаКадроваяИстория Из КадроваяИстория Цикл
			Если Выборка.Период = СтрокаКадроваяИстория.Период Тогда			
				ЗаполнитьЗначенияСвойств(СтрокаКадроваяИстория, Выборка);
				Если ЗначениеЗаполнено(СтрокаКадроваяИстория.РегистраторРабочиеМеста) 
				   И СтрокаКадроваяИстория.Основания.НайтиПоЗначению(СтрокаКадроваяИстория.РегистраторРабочиеМеста) = Неопределено Тогда
					СтрокаКадроваяИстория.Основания.Добавить(СтрокаКадроваяИстория.РегистраторРабочиеМеста);
				КонецЕсли;				
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;		
		Если Не СтрокаНайдена Тогда
			Для каждого СтрокаКадроваяИстория Из КадроваяИстория Цикл
				Если Выборка.ПериодКадроваяИстория = СтрокаКадроваяИстория.Период Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКадроваяИстория, , ИсключаемыеКолонки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Если ЗначениеЗаполнено(НоваяСтрока.РегистраторРабочиеМеста) Тогда
						НоваяСтрока.Основания.Добавить(НоваяСтрока.РегистраторРабочиеМеста);
					КонецЕсли;
					НоваяСтрока.КоличествоСтавокПредставление = КадровыйУчетКлиентСервер.ПредставлениеКоличестваСтавок(НоваяСтрока.КоличествоСтавок);					
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла; 
	
	Если РабочиеМеста.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РабочиеМеста, КадроваяИстория);
		КадроваяИстория.Сортировать("Период");
	КонецЕсли; 
	
	Форма.КадроваяИстория.Загрузить(КадроваяИстория);
	
КонецПроцедуры

Процедура ФормаКадровойИсторииУстановитьЭлементУсловногоОформления(Форма)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("КадроваяИсторияРабочееМесто");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУсловногоОформления.Отбор, "КадроваяИстория.РабочееМестоИзменено", Истина);
	
КонецПроцедуры

Функция ИсключаемыеКолонкиКадровойИстории(Колонки)
	
	ИсключаемыеКолонки = Новый Массив;
	ИсключаемыеКолонки.Добавить("Период");
	ИсключаемыеКолонки.Добавить("Основания");
	
	Для каждого Колонка Из Колонки Цикл
		Если СтрНайти(Колонка.Имя, "Изменен") = 0 И СтрНайти(Колонка.Имя, "Регистратор") = 0 Тогда
			Продолжить;
		КонецЕсли;	
		ИсключаемыеКолонки.Добавить(Колонка.Имя);					
	КонецЦикла; 
	
	Возврат СтрСоединить(ИсключаемыеКолонки, ",");
	
КонецФункции

Процедура УстановитьСвязиПараметровВыбораДляКадровогоПеревода(Форма, ИзменитьРабочееМесто)
	
	Форма.Элементы.РабочееМесто.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("ДатаНачала", "Объект.ДатаНачала"));
	
	Если ИзменитьРабочееМесто Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Должность", "Объект.Должность"));
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Объект.Подразделение"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.ИзменитьПодразделениеИДолжность") Тогда
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОбособленноеПодразделение"));
	Иначе
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	КонецЕсли;
	
	Форма.Элементы.РабочееМесто.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);

КонецПроцедуры

#КонецОбласти
