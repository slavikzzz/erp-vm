////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Имущественные налоги".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияТранспортногоНалога);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияНалогаНаИмущество);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоИмущественнымНалогам);
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетЗемельногоНалога);
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетНалогаНаИмущество);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости);
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасчетТранспортногоНалога);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияЗемельногоНалога);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияТранспортногоНалога);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.ПараметрыНачисленияНалогаНаИмущество);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.СпособыОтраженияРасходовПоИмущественнымНалогам);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПараметрыНачисленияНалогаНаИмущество");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПараметрыНачисленияЗемельногоНалога");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПараметрыНачисленияТранспортногоНалога");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СпособыОтраженияРасходовПоИмущественнымНалогам");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетЗемельногоНалога");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетНалогаНаИмущество");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетТранспортногоНалога");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Коды видов транспортных средств.
// 
// Параметры:
//  Дата - Дата - Дата
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Коды видов транспортных средств:
//		* Ключ - Строка - код ТС
//		* Значение - Структура - Содержит:
//			** Наименование - Строка -
//			** КодЕдиницыИзмерения - Строка -
Функция КодыВидовТранспортныхСредств(Дата) Экспорт

	Если Дата = '000101010000' Тогда
		ТекущийПоказательГод = Год(ТекущаяДатаСеанса());
	Иначе
		ТекущийПоказательГод = Год(Дата);
	КонецЕсли;
	
	СоответствиеКодов = Новый Соответствие;
	
	Макет = РегистрыСведений.ПараметрыНачисленияТранспортногоНалога.ПолучитьМакет("ВидыТранспортныхСредств");
	ТекущаяОбласть = Макет.Области.Найти(ИмяОбластиМакетаВидыТранспортныхСредств(ТекущийПоказательГод));

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				
				Прервать;
			
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				
				Продолжить;
				
			Иначе
	
				СтруктураКода = Новый Структура;
				СтруктураКода.Вставить("Наименование", Название);
				СтруктураКода.Вставить("КодЕдиницыИзмерения", КодЕдиницыИзмерения);
				
				СоответствиеКодов.Вставить(КодПоказателя, СтруктураКода);
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеКодов;

КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
// 
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных с командами отчетов.
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога);
	Объекты.Добавить(Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество);
	Объекты.Добавить(Метаданные.Документы.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверить налоговый орган.
// 
// Параметры:
//  Объект - ДокументОбъект.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога,
//  		ДокументОбъект.ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество,
//  		ДокументОбъект.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога - Налоговый орган
//  		
//  НепроверяемыеРеквизиты - Массив из Строка - Непроверяемые реквизиты
//  Отказ - Булево - Отказ
Процедура ПроверитьНалоговыйОрган(Объект, НепроверяемыеРеквизиты, Отказ) Экспорт

	НепроверяемыеРеквизиты.Добавить("НалоговыйОрган.НалоговыйОрган");
	НепроверяемыеРеквизиты.Добавить("НалоговыйОрган.КодПоОКТМО");
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Налоговый орган""';
							|en = 'Column %1 in line %2 of the Tax authority list is not filled'");
	
	Для Каждого ДанныеСтроки Из Объект.НалоговыйОрган Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НалоговыйОрган)
			И ДанныеСтроки.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Налоговый орган';
															|en = 'Tax authority'"), ДанныеСтроки.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"НалоговыйОрган", ДанныеСтроки.НомерСтроки, "НалоговыйОрган");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.КодПоОКТМО)
			И (ДанныеСтроки.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане
				ИЛИ ДанныеСтроки.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО) Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Код по ОКТМО';
															|en = 'RNCMT code'"), ДанныеСтроки.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"НалоговыйОрган", ДанныеСтроки.НомерСтроки, "КодПоОКТМО");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ЗаполнитьСписокРегионов(СписокРегионов) Экспорт
	
	Макет = РегистрыСведений.СтавкиТранспортногоНалога.ПолучитьМакет("КодыОКТМОСубъектовРФ");
	КодыОКТМОСубъектовРФ = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	ТаблицаРегионов = АдресныйКлассификатор.СубъектыРФ();
	
	ШаблонПредставления = НСтр("ru = '%1 %2';
								|en = '%1 %2'"); //например: "Москва г"
	Для Каждого Регион Из ТаблицаРегионов Цикл
		
		СтрокаСоответствия = КодыОКТМОСубъектовРФ.Найти(Строка(Регион.КодСубъектаРФ), "КодСубъектаРФ");
		
		Если СтрокаСоответствия <> Неопределено Тогда
		
			Представление = СтрШаблон(ШаблонПредставления, Регион.Наименование, Регион.Сокращение);
			СписокРегионов.Добавить(СтрокаСоответствия.КодОКТМО, Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодыЕдиницИзмеренияТранспортныхСредств() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", НСтр("ru = 'л. с.';
								|en = 'r. r.'"));
	Список.Добавить("999", НСтр("ru = 'Кгс';
								|en = 'Kgf'"));
	Список.Добавить("181", НСтр("ru = 'БРТ';
								|en = 'GRT'"));
	Список.Добавить("796", НСтр("ru = 'шт';
								|en = 'pcs'"));
	
	Возврат Список;
	
КонецФункции

Функция ИмяОбластиМакетаВидыТранспортныхСредств(Год)
	
	Если Год < 2011 Тогда
		Возврат "Область2007";
	ИначеЕсли Год < 2012 Тогда
		Возврат "Область2011";
	ИначеЕсли Год < 2013 Тогда
		Возврат "Область2012";
	ИначеЕсли Год < 2019 Тогда
		Возврат "Область2013";
	Иначе
		Возврат "Область2019";
	КонецЕсли;
	
КонецФункции

// Проверяет настройки льготы по транспортному налогу.
// 
// Параметры:
//  Объект - ДокументОбъект.ПараметрыНачисленияТранспортногоНалога, ДокументОбъект.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога - Объект.
//  ДанныеЛьготы - ДокументОбъект.ПараметрыНачисленияТранспортногоНалога, ТабличнаяЧасть - Данные льготы.
//  ДатаПараметров - Дата - Дата параметров.
//  Отказ - Булево - Отказ.
//  ИмяТЧ - Строка - Имя ТЧ.
Процедура ПроверитьНастройкиЛьготыПоТранспортномуНалогу(Объект, ДанныеЛьготы, ДатаПараметров, Отказ, ИмяТЧ = Неопределено) Экспорт
	
	Если ДанныеЛьготы.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму
		И ДатаПараметров <> '000101010000' 
		И Год(ДатаПараметров) >= 2012 Тогда
		
		ТекстСообщения = НСтр("ru = 'Уменьшение суммы налога на сумму можно использовать только при регистрации транспортных средств до 2012 года';
								|en = 'You can use tax amount reduction for amount only if vehicles are registered before 2012'");

		Если ИмяТЧ <> Неопределено Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТЧ, ДанныеЛьготы.НомерСтроки, "Льгота");
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		Иначе
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "НалоговаяЛьгота",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеЛьготы.ЛьготнаяСтавка)
		И ДанныеЛьготы.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		
		Если ИмяТЧ <> Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не указана ставка льготы в строке %1 списка ""Транспортный налог""';
					|en = 'Relief rate in line %1 of the Vehicle tax list is not specified'"),
				ДанныеЛьготы.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ПараметрыНалога", ДанныеЛьготы.НомерСтроки, "Льгота");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не указана ставка льготы';
									|en = 'Relief rate is not specified'");
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ТекстНалоговойЛьготы",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеЛьготы.ПроцентУменьшения)
		И ДанныеЛьготы.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		
		Если ИмяТЧ <> Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не указан процент уменьшения льготы в строке %1 списка ""Транспортный налог""';
					|en = 'Relief reduction percent in line %1 of the Vehicle tax list is not specified'"),
				ДанныеЛьготы.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ПараметрыНалога", ДанныеЛьготы.НомерСтроки, "Льгота");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не указан процент уменьшения льготы';
									|en = 'Relief reduction percent is not specified'");
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ТекстНалоговойЛьготы",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ДанныеЛьготы.СуммаУменьшения)
		И ДанныеЛьготы.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		
		Если ИмяТЧ <> Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не указана сумма льготы в строке %1 списка ""Транспортный налог""';
					|en = 'Relief amount in line %1 of the Vehicle tax list is not specified'"),
				ДанныеЛьготы.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ПараметрыНалога", ДанныеЛьготы.НомерСтроки, "Льгота");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле,, Отказ);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не указана сумма льготы';
									|en = 'Relief amount is not specified'");
				
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ТекстНалоговойЛьготы",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти
