#Область ПрограммныйИнтерфейс

// Дополняет параметры отражения необходимыми для формирования проводок по регистрам оперативного учета.
// 
// Параметры:
// 	 ПараметрыФормированияПроводок - см. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
//
Процедура ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = Истина;
	ПараметрыФормированияПроводок.УдалитьНезначащиеПроводки = Истина;
	
КонецПроцедуры

// Выполняет формирование проводок международного учета по данным регистров оперативного учета.
// 
// Параметры:
// 	ПараметрыФормированияПроводок - Структура - Параметры формирования проводок.
// 	ТаблицаПроводок - ТаблицаЗначений - Таблица, в которую добавляются сформированные проводки.
//
Процедура Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ПараметрыЗапросаДанныхФинансовыхРегистров();
	Запрос = ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
	ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос);
	
	Если ТекстыЗапросовЗаписейРегистров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров));
	
	СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
	
	РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов);

	РаспределитьКорреспонденцииПоДатамПогашения(Запрос, ТекстыЗапросов);
	
	ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
	
	ПроверитьОшибкиКорреспонденций(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок);
	
	СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов);
	
	ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);
	
	УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов);
	
	СформироватьЗапросыАналитикиКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.УничтожитьВременныеТаблицы(Запрос, ТекстыЗапросов);
	
	ЗаполнитьТаблицуПроводок(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок);
	
КонецПроцедуры

// Дополняет таблицы регистрации документа к отражению в международном учете по данным движений в финансовых регистрах.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, который проводится.
// 	ДополнительныеСвойства - Структура - Дополнительные свойства РС ОтражениеДокументовВМеждународномУчете.
// 	ТаблицаРегистрации - ТаблицаЗначений - Таблица с данными регистрации к отражению, которую необходимо дополнить:
// 	                      * Период - Дата - период регистрации (дата документа)
// 	                      * Организация - СправочникСсылка.Организации - организация по которой документ формирует проводки
// 	                      * ДатаОтражения - Дата - дата, на которую документ формирует проводки;
// 	                      * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - отражаемая хозяйственная операция.
//
Процедура ДополнитьТаблицыРегистрацииКОтражению(Объект, ДополнительныеСвойства, ТаблицаРегистрации) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Объект.Ссылка);
	КомандаДокументыОперативногоУчета = Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Команды.ПроводкиДокументаОперативногоУчета; 
	Если НЕ КомандаДокументыОперативногоУчета.ТипПараметраКоманды.СодержитТип(ТипДокумента) Тогда
		Возврат;	
	КонецЕсли;
	
	ТаблицаОтражениеДокументовВМеждународномУчете = Неопределено;
	ПереданаТаблицаОтражениеДокументовВМеждународномУчете = 
		ДополнительныеСвойства.Свойство("ТаблицаОтражениеДокументовВМеждународномУчете", ТаблицаОтражениеДокументовВМеждународномУчете);
	
	Если ПереданаТаблицаОтражениеДокументовВМеждународномУчете  Тогда 
		// В модуле менеджера была подготовлена таблица данных для регистрации.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтражениеДокументовВМеждународномУчете, ТаблицаРегистрации);
	Иначе
		ДополнитьТаблицуРегистрацииПоДаннымФинансовыхРегистров(Объект, ТаблицаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет структуру параметров отражения записей регистров накопления в финансовом учете:
//  ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Может быть переопределено в описании объектов бух.учета
//  ПутьКДаннымМестоУчета - Строка - Путь выборки данных регистра, соответствующих местам учета, в разрезе которых указываются исключения счетов учета
//  ИсточникиСубконто - Структура Из КлючИЗначение - Описание:
//    Ключ - Строка - Имя измерения регистра или реквизита измерения если оно является ключем аналитики
//    Значение - см. ОписаниеПоляРегистра
//  ПоляОтбораДвижений - Структура Из КлючИЗначение - Описание:
//    Ключ - Строка - Имя измерения регистра
//    Значение - см. ОписаниеПоляРегистра
//  ВыделениеДолгосрочныхАктивовОбязательств - Булево - Признак деления учетных данных регистра на краткосрочные и долгосрочные.
//  ПутьКДаннымДатаПогашения - Строка - Путь выборки данных регистра, соответствующих датам погашения обязательств
// 
// Параметры:
// 	ПараметрыОтражения - см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
// 
Процедура ДополнитьПараметрыОтраженияДвиженийВФинансовомУчете(ПараметрыОтражения) Экспорт
	
	ПараметрыОтражения.Вставить("ПутьКДаннымОбъектНастройки", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымМестоУчета", "");
	ПараметрыОтражения.Вставить("ИсточникиСубконто", Новый Структура);
	ПараметрыОтражения.Вставить("ПоляОтбораДвижений", Новый Структура);
	ПараметрыОтражения.Вставить("ВыделениеДолгосрочныхАктивовОбязательств", Ложь);
	ПараметрыОтражения.Вставить("ПутьКДаннымДатаПогашения", "");
	
КонецПроцедуры

// Заполняет параметры отражения движений в фин.учете источниками заполнения субконто по измерениям и реквизитам регистра накопления
//
// Параметры:
//  ПараметрыОтражения - см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//	НедоступныеПоля - Массив - Массив имен полей, которые не доступны в качестве источников заполнения субконто
//
Процедура ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра, НедоступныеПоля = Неопределено) Экспорт
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если НедоступныеПоля <> Неопределено И НедоступныеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Измерение.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоляРегистра = ОписаниеПоляРегистра();
		ОписаниеПоляРегистра.ПутьКДанным = Измерение.Имя;
		ОписаниеПоляРегистра.Заголовок = Измерение.Синоним;
		ОписаниеПоляРегистра.Тип = Измерение.Тип;
		
		ПараметрыОтражения.ИсточникиСубконто.Вставить(Измерение.Имя, ОписаниеПоляРегистра);
		ПараметрыОтражения.ПоляОтбораДвижений.Вставить(Измерение.Имя, ОписаниеПоляРегистра);
	КонецЦикла;
	
	ДобавитьСоставКлючейАналитикиВИсточникиСубконто(ПараметрыОтражения.ИсточникиСубконто, МетаданныеРегистра);
	
	ОборотныеСубконто = МеждународныйУчетСерверПовтИсп.ОборотныеСубконто();
	РегистраторЭтоРеквизит = Ложь;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Если НедоступныеПоля <> Неопределено И НедоступныеПоля.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить")
		 ИЛИ Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитВИсточникиСубконто = Ложь;
		
		Для Каждого ОборотноеСубконто Из ОборотныеСубконто Цикл
			Если Реквизит.Тип = ОборотноеСубконто.ТипЗначения Тогда
				ДобавитьРеквизитВИсточникиСубконто = Истина;
			Иначе
				ТипыСубконто = ОборотноеСубконто.ТипЗначения.Типы();
				Для Каждого ТипСубконто Из ТипыСубконто Цикл
					Если Реквизит.Тип.СодержитТип(ТипСубконто) Тогда
						ДобавитьРеквизитВИсточникиСубконто = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ДобавитьРеквизитВИсточникиСубконто Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавитьРеквизитВИсточникиСубконто Тогда
			ОписаниеПоляРегистра = ОписаниеПоляРегистра();
			ОписаниеПоляРегистра.ПутьКДанным = Реквизит.Имя;
			ОписаниеПоляРегистра.Заголовок = Реквизит.Синоним;
			ОписаниеПоляРегистра.Тип = Реквизит.Тип;
			
			ПараметрыОтражения.ИсточникиСубконто.Вставить(Реквизит.Имя, ОписаниеПоляРегистра);
			ПараметрыОтражения.ПоляОтбораДвижений.Вставить(Реквизит.Имя, ОписаниеПоляРегистра);
		КонецЕсли;
		
		Если Реквизит.Имя = "НастройкаХозяйственнойОперации" Тогда
			ОписаниеПоляРегистра = ОписаниеПоляРегистра();
			ОписаниеПоляРегистра.ПутьКДанным = Реквизит.Имя;
			ОписаниеПоляРегистра.Заголовок = Реквизит.Синоним;
			ОписаниеПоляРегистра.Тип = Реквизит.Тип;
			ПараметрыОтражения.ПоляОтбораДвижений.Вставить(Реквизит.Имя, ОписаниеПоляРегистра);
		КонецЕсли;
		
		Если Реквизит.Имя = ПараметрыОтражения.ПутьКДаннымРегистратор Тогда
			РегистраторЭтоРеквизит = Истина;
			ОписаниеПоляРегистра = ОписаниеПоляРегистра();
			ОписаниеПоляРегистра.ПутьКДанным = Реквизит.Имя;
			ОписаниеПоляРегистра.Заголовок = "Регистратор";
			ОписаниеПоляРегистра.Тип = Реквизит.Тип;
			ПараметрыОтражения.ПоляОтбораДвижений.Вставить("Регистратор", ОписаниеПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РегистраторЭтоРеквизит Тогда
		ОписаниеПоляРегистра = ОписаниеПоляРегистра();
		ОписаниеПоляРегистра.ПутьКДанным = "Регистратор";
		ОписаниеПоляРегистра.Заголовок = "Регистратор";
		ОписаниеПоляРегистра.Тип = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип;
		ПараметрыОтражения.ПоляОтбораДвижений.Вставить("Регистратор", ОписаниеПоляРегистра);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку - текст выборки значения ГФУ номенклатуры из регистров ВыручкаИСебестоимостьПродаж и СебестоимостьТоваров
//
// Параметры:
//  ПсевдонимИсточника - Строка - псевдоним источника данных в запросе
//
// Возвращаемое значение:
//  Строка - текст выборки значения ГФУ номенклатуры
//
Функция ПолеВыборкиГФУНоменклатуры(ПсевдонимИсточника = Неопределено) Экспорт
	
	Если ПсевдонимИсточника = Неопределено Тогда
		ПсевдонимИсточника = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПсевдонимИсточникаДанныхПоУмолчанию();
	КонецЕсли;
	
	ПолеВыборкиГФУ = "ВЫБОР
	|		КОГДА ПсевдонимИсточника.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ПсевдонимИсточника.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета И ПсевдонимИсточника.ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПсевдонимИсточника.ВидЗапасов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ПсевдонимИсточника.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ";
	
	ПолеВыборкиГФУ = СтрЗаменить(ПолеВыборкиГФУ, "ПсевдонимИсточника", ПсевдонимИсточника);
	
	Возврат ПолеВыборкиГФУ;
	
КонецФункции

// Выполняет проверку наличия настроенных соответствий счетов, необходимых для отражения документов. 
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ДокументыКОтражению:
// 	              * Документ - ДокументСсылка - отражаемый документ
// 	              * Организация - СправочникСсылка.Организации - отражаемая организация
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - действующая на дату отражения настройка формирования проводок
// 	ПараметрыПроверки - См. Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица необходимых настроек:
// 	              * ОбъектУчета - ПеречислениеСсылка.ОбъектыФинансовогоУчета -
// 	              * ОбъектНастройки - Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета
// 	              * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета -
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - 
//
Функция ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки) Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ТаблицаОшибок.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ТаблицаОшибок.Колонки.Добавить("ОбъектНастройки", Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип);
	ТаблицаОшибок.Колонки.Добавить("ПланСчетов", Новый ОписаниеТипов("СправочникСсылка.ПланыСчетовМеждународногоУчета"));
	ТаблицаОшибок.Колонки.Добавить("НастройкаФормированияПроводок", Новый ОписаниеТипов("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыДляНастройки.ОбъектУчета,
	|	ОбъектыДляНастройки.ОбъектНастройки,
	|	ОбъектыДляНастройки.ПланСчетов,
	|	ОбъектыДляНастройки.НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.СчетаМеждународногоУчетаТребующиеНастройки КАК ОбъектыДляНастройки
	|ГДЕ
	|	(ПланСчетов, НастройкаФормированияПроводок, Документ) В
	|		(ВЫБРАТЬ
	|			ДокументыКОтражению.ПланСчетов,
	|			ДокументыКОтражению.НастройкаФормированияПроводок,
	|			ДокументыКОтражению.Регистратор
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		) 
	|";
	
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	#Область АнализПроводокОперативногоУчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализПроводокОперативногоУчета);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НастройкаПроводокПоОбъектамУчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сформированные в финансовых регистрах проводки по объектам учета
		|с применением настроек счетов и настроек отражения корреспонденций.';
		|en = 'Accounting object entries generated in financial registers
		|using account settings and correspondence recording settings.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализПроводокОперативногоУчета");
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НастройкаПроводокПоОбъектамУчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сформированные в финансовых регистрах проводки по объектам учета
		|с применением настроек счетов и настроек отражения корреспонденций.';
		|en = 'Accounting object entries generated in financial registers
		|using account settings and correspondence recording settings.'");

	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОшибкиПроводокОперативногоУчета");
	#КонецОбласти
	
	#Область АнализКорреспонденцийОперативногоУчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализКорреспонденцийОперативногоУчета);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
КонецПроцедуры

// Возвращает признак использования деления активов и обязательств на краткосрочные и долгосрочные по срокам обращения.
// 
// Параметры:
//  Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - организации по которым выполняется анализ
//  Период - Дата - дата, на которую выполняется анализ
// 
// Возвращаемое значение:
//  Булево - признак использования деления активов и обязательств по срокам обращения.
//
Функция ИспользуетсяВыделениеДолгосрочныхАктивовОбязательств(Организации, Период) Экспорт
	
	ИспользуетсяВыделениеДолгосрочныхАктивовОбязательств =
		ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет")
		И ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета");
	
	Если ИспользуетсяВыделениеДолгосрочныхАктивовОбязательств Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(
		|		&Период,
		|		Организация В (&Организации)
		|	) КАК ПланыСчетовМеждународногоУчета
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(
		|		&Период,
		|		Организация В (&Организации)
		|	) КАК УчетнаяПолитикаФинансовогоУчета
		|	ПО ПланыСчетовМеждународногоУчета.Организация = УчетнаяПолитикаФинансовогоУчета.Организация
		|ГДЕ
		|	ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств
		|	И УчетнаяПолитикаФинансовогоУчета.ДлительностьОперационногоЦикла > 0
		|";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияУТКлиентСервер.Массив(Организации));
		ИспользуетсяВыделениеДолгосрочныхАктивовОбязательств = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат ИспользуетсяВыделениеДолгосрочныхАктивовОбязательств;
	
КонецФункции

// Удалить после перехода на 8.3.20. Заменить на функцию языка запросов СТРОКА()
// Использует стандартный реквизит регистра НомерСтроки как ИдентификаторСтроки, преобразуя из типа Число в тип Строка.
// Применяется для идентификации записей регистра в случае заполнения в них реквизита ИдентификаторФинЗаписи значением
// уникального идентификатора объекта расчетов и отсутстсвия реквизита ИдентификаторСтроки.
//
// Параметры:
//  ПараметрыОтражения - см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Процедура ИспользоватьНомерСтрокиКакИдентификаторСтроки(ПараметрыОтражения) Экспорт
	
	СтрокиПреобразования = Новый Массив();
	МаксимальноеКоличествоРазрядов = 6;
	
	Для НомерРазряда = 1 По МаксимальноеКоличествоРазрядов Цикл
		СтрокаПреобразования = СтрЗаменить(
			"ПОДСТРОКА(""0123456789"", СЕКУНДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), СЕКУНДА, ПсевдонимИсточникаДанных.НомерСтроки * &Множитель)) / 6 + 1, 1)",
			"&Множитель",
			Формат(6 * Pow(10, 1 - НомерРазряда), "ЧРД=.; ЧГ=0"));
		СтрокиПреобразования.Вставить(0, СтрокаПреобразования);
	КонецЦикла;
	
	Разделитель = Символы.ПС + Символы.Таб + "+ ";
	
	ПараметрыОтражения.ПутьКДаннымИдентификаторСтроки = СтрЗаменить(
		СтрСоединить(СтрокиПреобразования, Разделитель),
		"ПсевдонимИсточникаДанных",
		ПараметрыОтражения.ПсевдонимИсточникаДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает менеджер временных таблиц с остатками регистров накопления, подлежащих реклассификации из
// долгосрочных в краткосрочные в переданном периоде. Имена временных таблиц в менеджере соответствуют
// именам регистров накопления. Пустые временные таблицы уничтожаются.
// 
// Параметры:
//  Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - организации по которым выполняется анализ остатков
//  Период - Дата - дата месяца, в котором происходит анализ остатков 
// 
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц с реклассифицируемыми остатками регистров накопления.
//
Функция ДанныеРеклассификацииДолгосрочныхАктивовОбязательств(Организации, Период) Экспорт
	
	БалансовыеФинансовыеРегистры = БалансовыеФинансовыеРегистры();
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	
	ТекстыЗапросов = Новый Массив();
	
	Для Каждого ИмяРегистра Из БалансовыеФинансовыеРегистры Цикл
		МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер - 
		МетаданныеРегистра = МетаданныеРегистрыНакопления[ИмяРегистра];
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра);
		
		Если ПараметрыОтраженияВУчете.ВыделениеДолгосрочныхАктивовОбязательств Тогда
			ТекстыЗапросов.Добавить(МеждународныйУчетПоДаннымФинансовыхРегистровСлужебный.ТекстЗапросаОстатковДляРеклассификации(ИмяРегистра));
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГраницаПериода", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(Организации));
	Запрос.Выполнить();
	
	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	""&ИмяТаблицы"" КАК ИмяТаблицы
		|ИЗ
		|	&ИмяТаблицы
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ВременнаяТаблица.ПолноеИмя);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстыЗапросов.Очистить();
	
	Результат = Запрос.Выполнить();
	ТаблицыСДанными = Результат.Выгрузить().ВыгрузитьКолонку("ИмяТаблицы");
	
	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		Если ТаблицыСДанными.Найти(ВременнаяТаблица.ПолноеИмя) = Неопределено Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ВременнаяТаблица.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Возвращает организации, по которым в регистрах накопления есть остатки, подлежащие реклассификации из
// долгосрочных в краткосрочные в переданном периоде.
// 
// Параметры:
//  Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - организации по которым выполняется анализ остатков
//  Период - Дата - дата месяца, в котором происходит анализ остатков 
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Организации - организации для которых существуют реклассифицируемые остатки регистров накопления.
//
Функция ОрганизацииРеклассификацииДолгосрочныхАктивовОбязательств(Организации, Период) Экспорт
	
	ОрганизацииРеклассификации = Новый Массив();
	МенеджерВременныхТаблиц = ДанныеРеклассификацииДолгосрочныхАктивовОбязательств(Организации, Период);
	
	Если МенеджерВременныхТаблиц.Таблицы.Количество() = 0 Тогда
		Возврат ОрганизацииРеклассификации;
	КонецЕсли;
	
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	ТекстыЗапросов = Новый Массив();
	
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		МенеджерРегистра = РегистрыНакопления[ВременнаяТаблица.ПолноеИмя]; // РегистрНакопленияМенеджер - 
		МетаданныеРегистра = МетаданныеРегистрыНакопления[ВременнаяТаблица.ПолноеИмя];
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&Организация КАК Организация
		|ИЗ
		|	&ИмяТаблицы КАК ТаблицаРегистра
		|СГРУППИРОВАТЬ ПО
		|	&Организация
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияВУчете.ПутьКДаннымОрганизация));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ВременнаяТаблица.ПолноеИмя);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	Результат = Запрос.Выполнить();
	ОрганизацииРеклассификации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат ОрганизацииРеклассификации;
	
КонецФункции

// Добавляет в переданный массив тексты запросов для формирования проводок по реклассификации остатков регистров
// накопления
// 
// Параметры:
// 	ТекстыЗапросов - Массив из Строка - заполняемый массив текстов запросов
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, полученный в функции ДанныеРеклассификацииДолгосрочныхАктивовОбязательств()
//
Процедура ДобавитьТекстыЗапросовРеклассификацииДолгосрочныхАктивовОбязательств(ТекстыЗапросов, МенеджерВременныхТаблиц) Экспорт
	
	ИменаВременныхТаблиц = Новый Массив();
	
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		ИменаВременныхТаблиц.Добавить(ВременнаяТаблица.ПолноеИмя);
	КонецЦикла;
	
	Для Каждого ИмяВременнойТаблицы Из ИменаВременныхТаблиц Цикл
		ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(ИмяВременнойТаблицы, МенеджерВременныхТаблиц, "ИдентификаторФинЗаписи");
		ТекстыЗапросов.Добавить(МеждународныйУчетПоДаннымФинансовыхРегистровСлужебный.ТекстЗапросаДвиженийРеклассификацииОстатков(ИмяВременнойТаблицы));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список полей источника данных объекта учета, которые могут быть использованы для заполнения субконто определенного типа.
// Наиболее подходящие по типу поля будут в начале списка.
// 
// Параметры:
// 	ТипЗначенияСубконто - ОписаниеТипов - Тип субконто
// 	ОписаниеОбъектаУчета - См. Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектаФинансовогоУчета 
// 	Префикс - Строка - произвольный префикс, который добавляется к имени поля. Например, "ОбъектУчетаКт"
// Возвращаемое значение:
// 	СписокЗначений Из ЭлементСпискаЗначений - Описание:
//		* Значение - Строка - Имя поля с учетом префикса
//		* Представление - Строка - Путь к данным
//
Функция ВозможныеПоляЗаполненияСубконто(ТипЗначенияСубконто, ОписаниеОбъектаУчета, Префикс = "") Экспорт
	
	Результат = Новый СписокЗначений();
	
	Если ОписаниеОбъектаУчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеПолейРегистра = ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ОписаниеОбъектаУчета.ИсточникДанных);
	Для Каждого ОписаниеПоля Из ОписаниеПолейРегистра Цикл
		Результат.Добавить(?(ПустаяСтрока(Префикс), "", Префикс + ".") + ОписаниеПоля.ИмяПоля, ОписаниеПоля.ПутьКДанным);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор описания поля регистра - источника субконто или отбора движений
//
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ПутьКДанным - Строка - Полный путь к полю источнику субконто
// 		* Заголовок - Строка - Заголовок поля источника субконто
// 		* Тип - ОписаниеТипов - Тип данных, который хранится в поле
Функция ОписаниеПоляРегистра() Экспорт
	
	Возврат Новый Структура("ПутьКДанным, Заголовок, Тип", "", "", Новый ОписаниеТипов());
	
КонецФункции

// Добавляет в источники заполнения субконто реквизиты измерений регистра накопления - ключей аналитики
//
// Параметры:
//  ИсточникиСубконто - Структура Из КлючИЗначение - Источники заполнения субконто:
//   * Ключ - Строка - Имя реквизита измерения - ключа аналитики
//   * Значение - см. ОписаниеПоляРегистра
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//
Процедура ДобавитьСоставКлючейАналитикиВИсточникиСубконто(ИсточникиСубконто, МетаданныеРегистра) Экспорт
	
	ТипыКлючейАналитики = Новый Массив();
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	
	Для Каждого ТипКлючаАналитики Из ТипыКлючейАналитики Цикл
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если СтрНачинаетсяС(Измерение.Имя, "Удалить") Тогда
			ИначеЕсли Измерение.Тип.СодержитТип(ТипКлючаАналитики) Тогда
				МетаданныеКлючаАналитики = Метаданные.НайтиПоТипу(ТипКлючаАналитики);
				Для каждого Реквизит Из МетаданныеКлючаАналитики.Реквизиты Цикл
					ОписаниеИсточникаСубконто = ОписаниеПоляРегистра();
					ОписаниеИсточникаСубконто.ПутьКДанным = СтрШаблон("%1.%2", Измерение.Имя, Реквизит.Имя);
					ОписаниеИсточникаСубконто.Заголовок = СтрШаблон("%1 (%2)", Реквизит.Синоним, Измерение.Синоним);
					ОписаниеИсточникаСубконто.Тип = Реквизит.Тип;
					ИсточникиСубконто.Вставить(СтрШаблон("%1_%2", Измерение.Имя, Реквизит.Имя), ОписаниеИсточникаСубконто);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру для установки значений параметров запроса данных финансовых регистров,
// в том числе из отчетов АнализКорреспонденцийОперативногоУчета и АнализПроводокОперативногоУчета.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачала - Дата - дата начала построения отчета
//   * ДатаОкончания - Дата - дата окончания построения отчета
//   * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета, Массив из СправочникСсылка.ПланыСчетовМеждународногоУчета - отбор по плану или планам счетов
//   * Регистратор - ДокументСсылка, Массив из ДокументСсылка - отбор по документу или документам
//   * Организация - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - отбор по организации или организациям
//   * ОбъектУчетаДт - ПеречислениеСсылка.ОбъектыФинансовогоУчета - отбор по объекту учета дебета
//   * ОбъектУчетаКт - ПеречислениеСсылка.ОбъектыФинансовогоУчета - отбор по объекту учета кредита
//   * ТипРегистратора - Массив из Тип - отбор по коллекциям движений типов документов
//   * НеОтраженныеВУчете - Булево, Неопределено - признак установки отбора документов, не отраженных в МФУ
//   * ДополнительныйОтбор - ОтборКомпоновкиДанных - отбор фиксированных настроек компоновщика настроек компоновки данных
//   * КлючВарианта - Строка - имя варианта отчета
//
Функция ПараметрыЗапросаДанныхФинансовыхРегистров() Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ДатаНачала", '00010101');
	ПараметрыЗапроса.Вставить("ДатаОкончания", '00010101');
	ПараметрыЗапроса.Вставить("ПланСчетов", Неопределено);
	ПараметрыЗапроса.Вставить("Регистратор", Неопределено);
	ПараметрыЗапроса.Вставить("Организация", Неопределено);
	ПараметрыЗапроса.Вставить("ОбъектУчетаДт", Неопределено);
	ПараметрыЗапроса.Вставить("ОбъектУчетаКт", Неопределено);
	ПараметрыЗапроса.Вставить("ТипРегистратора", Неопределено);
	ПараметрыЗапроса.Вставить("НеОтраженныеВУчете", Неопределено);
	ПараметрыЗапроса.Вставить("ДополнительныйОтбор", Неопределено);
	ПараметрыЗапроса.Вставить("КлючВарианта", Неопределено);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

// Возвращает запрос для выполнения отчетов АнализКорреспонденцийОперативногоУчета и АнализПроводокОперативногоУчета.
// Принимает на входе значения параметров, по которым в формируемом запросе должен быть установлен отбор
// или наложены ограничения на состав таблиц выборки при формировании текстов запросов.
// 
// Параметры:
//  ПараметрыЗапроса - см. ПараметрыЗапросаДанныхФинансовыхРегистров
// 
// Возвращаемое значение:
//  Запрос
//
Функция ЗапросАнализаКорреспонденцийОперативногоУчета(ПараметрыЗапроса) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДополнительныйОтбор = ПараметрыЗапроса.ДополнительныйОтбор; // ОтборКомпоновкиДанных -
	ЕстьДополнительныйОтбор = ДополнительныйОтбор.Элементы.Количество() > 0;
	
	Запрос = ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц);
	
	Если Запрос.Параметры.ВыручкаБезНДС = Неопределено
		И ПараметрыЗапроса.КлючВарианта = "ОшибкиПроводокОперативногоУчета" Тогда
		Запрос.Параметры.ВыручкаБезНДС = Истина;
	КонецЕсли;
	
	ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос);
	
	Если ТекстыЗапросовЗаписейРегистров.Количество() = 0 Тогда
		ТекстЗапроса = Отчеты.АнализКорреспонденцийОперативногоУчета.Создать().СхемаКомпоновкиДанных.НаборыДанных.НаборДвижений.Запрос;
		
		Если ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийШахматнаяВедомость"
		 ИЛИ ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийПоДокументам" Тогда
			Запрос.Текст = ТекстЗапроса;
		Иначе
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапроса,,, "втНаборДвижений");
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		
		Возврат Запрос;
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров));
	
	СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
	
	РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов);
	
	РаспределитьКорреспонденцииПоДатамПогашения(Запрос, ТекстыЗапросов);
	
	Если ПараметрыЗапроса.КлючВарианта = "ОшибкиПроводокОперативногоУчета" Тогда
		
		ТекстыЗапросов.Добавить(ТекстЗапросаАнализОшибокКорреспонденций(ПараметрыЗапроса));
		
	ИначеЕсли ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийШахматнаяВедомость"
		ИЛИ ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийПоДокументам" Тогда
		
		ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
		
	Иначе
		
		ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
		
		ПропуститьПроверкуОшибокКорреспонденций(ТекстыЗапросов);
		
		СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов);
		
		ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);
		
		УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаПолныйАнализКорреспонденций());
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	Запрос.Выполнить();
	
	Если ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийШахматнаяВедомость" Тогда
		Запрос.Текст = ТекстЗапросаАнализКорреспонденцийДляНастройки();
	ИначеЕсли ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийПоДокументам" Тогда
		Если ЕстьДополнительныйОтбор Тогда
			ПодготовитьЗапросАнализаКорреспонденцийДляНастройкиСОтбором(Запрос, ТекстыЗапросов,
				ТекстыЗапросовЗаписейРегистров, ПараметрыЗапроса.ДополнительныйОтбор);
		Иначе
			Запрос.Текст = ТекстЗапросаАнализКорреспонденцийДляНастройки();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Рекурсивно копирует отбор компоновки данных из источника в приемник с добавлением суффикса
// к имени поля компоновки данных
//
// Параметры:
//  ОтборПриемник - ОтборКомпоновкиДанных - отбор, в который копируются элементы отбора
//  ОтборИсточник - ОтборКомпоновкиДанных - отбор, из которого копируются элементы отбора
//  ДтКт - Строка - суффикс, добавляемый к имени поля компоновки данных, "Дт" или "Кт"
//
Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник, ДтКт = "") Экспорт
	
	Для Каждого ЭлементОтбора Из ОтборИсточник.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора, ДтКт);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ЭлементОтбора, ДтКт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьТаблицуРегистрацииПоДаннымФинансовыхРегистров(Документ, ТаблицаРегистрации)

	ОписаниеРегистров = ПараметрыОтраженияДвиженийФинансовыхРегистров(Документ, Истина);
	ТекстыЗапросовРегистрации = Новый Массив;
	
	Для каждого КлючИЗначение Из ОписаниеРегистров Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		Описание = КлючИЗначение.Значение;
		
		Если ПустаяСтрока(Описание.ПутьКДаннымОрганизация) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Период КАК ДатаОтражения,
		|	&Организация КАК Организация,
		|	НастройкаХозяйственнойОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	&ПолноеИмяРегистра КАК ТаблицаРегистра
		|ГДЕ
		|	&Регистратор = &Ссылка
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяРегистра", СтрШаблон("РегистрНакопления.%1", ИмяРегистра));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", Описание.ПутьКДаннымОрганизация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", Описание.ПутьКДаннымРегистратор);
		ТекстыЗапросовРегистрации.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Если ТекстыЗапросовРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросовРегистрации, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаРегистрации);
	
КонецПроцедуры

Функция ПараметрыОтраженияДвиженийФинансовыхРегистров(Документ, РегистрацияКОтражению = Ложь)
	
	ПараметрыОтраженияДвиженийРегистров = Новый Структура;
	
	БалансовыеФинансовыеРегистры = БалансовыеФинансовыеРегистры();
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	ТипКоллекцииДвиженийДокумента = ТипЗнч(Документ.Движения);
	
	Для Каждого ИмяРегистра Из БалансовыеФинансовыеРегистры Цикл
		Если ИмяРегистра = МетаданныеРегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя Тогда
			ИмяРегистраПроверкиДвижений = МетаданныеРегистрыНакопления.РасчетыСКлиентами.Имя;
		ИначеЕсли ИмяРегистра = МетаданныеРегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя Тогда
			ИмяРегистраПроверкиДвижений = МетаданныеРегистрыНакопления.РасчетыСПоставщиками.Имя;
		Иначе
			ИмяРегистраПроверкиДвижений = ИмяРегистра;
		КонецЕсли;
		
		Если ТипКоллекцииДвиженийДокумента = Тип("Структура")
			И НЕ Документ.Движения.Свойство(ИмяРегистраПроверкиДвижений) Тогда
			Продолжить;
		ИначеЕсли ТипКоллекцииДвиженийДокумента = Тип("КоллекцияДвижений")
			И Документ.Движения.Найти(ИмяРегистраПроверкиДвижений) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер - 
		МетаданныеРегистра = МетаданныеРегистрыНакопления[ИмяРегистра];
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра, РегистрацияКОтражению);
		ПараметрыОтраженияДвиженийРегистров.Вставить(ИмяРегистра, ПараметрыОтраженияВУчете);
	КонецЦикла;
	
	Возврат ПараметрыОтраженияДвиженийРегистров;
	
КонецФункции

Функция БалансовыеФинансовыеРегистры(ОбъектыФинансовогоУчета = Неопределено)
	
	Если ОбъектыФинансовогоУчета = Неопределено Тогда
		ФинансовыеРегистры = Новый Массив();
		ИсточникиДанныхОбъектовУчета = Перечисления.ОбъектыФинансовогоУчета.ИсточникиДанныхОбъектовФинансовогоУчета();
		
		Для Каждого КлючИЗначение Из ИсточникиДанныхОбъектовУчета Цикл
			ИмяРегистра = КлючИЗначение.Значение;
			Если ЗначениеЗаполнено(ИмяРегистра) И ФинансовыеРегистры.Найти(ИмяРегистра) = Неопределено Тогда
				ФинансовыеРегистры.Добавить(ИмяРегистра);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИсточникиДанных = ОбъектыФинансовогоУчета.Скопировать(, "ИсточникДанных");
		СлужебныеСтроки = ИсточникиДанных.НайтиСтроки(Новый Структура("ИсточникДанных", ""));
		
		Для Каждого СлужебнаяСтрока Из СлужебныеСтроки Цикл
			ИсточникиДанных.Удалить(СлужебнаяСтрока);
		КонецЦикла;
		
		ИсточникиДанных.Свернуть("ИсточникДанных");
		ФинансовыеРегистры = ИсточникиДанных.ВыгрузитьКолонку("ИсточникДанных");
	КонецЕсли;
	
	Возврат ФинансовыеРегистры;
	
КонецФункции

Функция ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ИмяРегистра)
	
	ПоляРегистра = Новый ТаблицаЗначений();
	ПоляРегистра.Колонки.Добавить("ИмяПоля", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Если ИмяРегистра = "" Тогда
		Возврат ПоляРегистра;
	КонецЕсли;
	
	ОписаниеПоляРегистра = ОписаниеПоляРегистра();
	Для Каждого КлючИЗначение Из ОписаниеПоляРегистра Цикл
		ИмяКолонки = КлючИЗначение.Ключ;
		ТипКолонки = ТипЗнч(КлючИЗначение.Значение);
		ПоляРегистра.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипКолонки)));
	КонецЦикла;
	
	МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер -
	ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для каждого КлючИЗначение Из ПараметрыОтраженияВУчете.ИсточникиСубконто Цикл
		ОписаниеИсточникаСубконто = КлючИЗначение.Значение;
		Если ОписаниеИсточникаСубконто.Тип = ТипЗначенияСубконто Тогда
			НоваяСтрока = ПоляРегистра.Вставить(0);
			НоваяСтрока.ИмяПоля = КлючИЗначение.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеИсточникаСубконто);
		Иначе
			Для каждого Тип Из ТипЗначенияСубконто.Типы() Цикл
				Если ОписаниеИсточникаСубконто.Тип.СодержитТип(Тип) Тогда
					НоваяСтрока = ПоляРегистра.Добавить();
					НоваяСтрока.ИмяПоля = КлючИЗначение.Ключ;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеИсточникаСубконто);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляРегистра;
	
КонецФункции

Функция ПустыеЗначенияТипа(ОписаниеТипов)
	
	ПустыеЗначения = Новый Массив();
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		ПустыеЗначения.Добавить(МеждународныйУчетКлиентСервер.ПустоеЗначениеТипа(Тип));
	КонецЦикла;
	
	Если ПустыеЗначения.Количество() > 1 Тогда
		ПустыеЗначения.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат ПустыеЗначения;
	
КонецФункции

#Область ТекстыЗапросовФормированияКорреспонденций

Функция ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц)
	
	Запрос = ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц);
	
	ИсточникиСоСрокамиОбращения = Новый ТаблицаЗначений();
	ИсточникиСоСрокамиОбращения.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(150)); // имя регистра - источника объекта учета
	ИсточникиСоСрокамиОбращения.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	Запрос.УстановитьПараметр("ИсточникиСоСрокамиОбращения", ИсточникиСоСрокамиОбращения);
	
	ПризнакиУчетаКорреспонденций = Новый ТаблицаЗначений();
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("КорОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("ПризнакУчета", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ПризнакиУчетаКорреспонденций.Колонки.Добавить("Значение", Новый ОписаниеТипов("Булево"));
	Запрос.УстановитьПараметр("ПризнакиУчетаКорреспонденций", ПризнакиУчетаКорреспонденций);
	
	ОбъектыНесобственныхЦенностей = Новый ТаблицаЗначений();
	ОбъектыНесобственныхЦенностей.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыФинансовогоУчета"));
	Запрос.УстановитьПараметр("ОбъектыНесобственныхЦенностей", ОбъектыНесобственныхЦенностей);
	
	Запрос.УстановитьПараметр("ОбъектыУчетаНДС", Новый Массив());
	Запрос.УстановитьПараметр("ОбъектыУчетаСНДС", Новый Массив());
	
	Запрос.УстановитьПараметр("ПризнакУчетаВыручкаБезНДС", "ВыручкаБезНДС");
	
	Запрос.УстановитьПараметр("ВыделениеДолгосрочныхАктивовОбязательств", Ложь);
	Запрос.УстановитьПараметр("СпособУчетаНесобственныхЦенностей", Неопределено);
	Запрос.УстановитьПараметр("ВыручкаБезНДС", Неопределено);
	
	Запрос.УстановитьПараметр("ПорядокПримененияНастроекПоОбъектам", 9999);
	
	Запрос.УстановитьПараметр("ПрефиксВыраженияСубконтоДт", "ОбъектУчетаДт");
	Запрос.УстановитьПараметр("ПрефиксВыраженияСубконтоКт", "ОбъектУчетаКт");
	Запрос.УстановитьПараметр("ДлинаПрефиксаВыраженияДт", СтрДлина(Запрос.Параметры.ПрефиксВыраженияСубконтоДт));
	Запрос.УстановитьПараметр("ДлинаПрефиксаВыраженияКт", СтрДлина(Запрос.Параметры.ПрефиксВыраженияСубконтоКт));
	
	КвалификаторыДенежнойСуммы = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип.КвалификаторыЧисла;
	Запрос.УстановитьПараметр("ДлинаСуммы", КвалификаторыДенежнойСуммы.Разрядность);
	Запрос.УстановитьПараметр("ТочностьСуммы", КвалификаторыДенежнойСуммы.РазрядностьДробнойЧасти);
	
	КвалификаторыКоличества = Метаданные.РегистрыБухгалтерии.Международный.Ресурсы.Количество.Тип.КвалификаторыЧисла;
	Запрос.УстановитьПараметр("ДлинаКоличества", КвалификаторыКоличества.Разрядность);
	Запрос.УстановитьПараметр("ТочностьКоличества", КвалификаторыКоличества.РазрядностьДробнойЧасти);
	
	ТекстыЗапросов = Новый Массив();
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ДокументыКОтражению") <> Неопределено Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДокументыКОтражению.Регистратор КАК Регистратор,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения
		|ПОМЕСТИТЬ втПорцияДокументов
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыКОтражению.Регистратор,
		|	ДокументыКОтражению.Организация,
		|	ДокументыКОтражению.ДатаОтражения
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Организация,
		|	ДатаОтражения
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ПорцияДокументов.Регистратор) КАК ТипРегистратора
		|ИЗ
		|	втПорцияДокументов КАК ПорцияДокументов
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(ПорцияДокументов.Регистратор)
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей) КАК КоличествоСпособУчетаНесобственныхЦенностей,
		|	ЕСТЬNULL(МАКСИМУМ(ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей),
		|		ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах)) КАК СпособУчетаНесобственныхЦенностей,
		|	ЕСТЬNULL(МАКСИМУМ(НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств), ЛОЖЬ) КАК ВыделениеДолгосрочныхАктивовОбязательств,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС) КАК КоличествоВыручкаБезНДС,
		|	ЕСТЬNULL(МАКСИМУМ(НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС), ИСТИНА) КАК ВыручкаБезНДС
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетов
		|		ПО ДокументыКОтражению.ПланСчетов = ПланыСчетов.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
		|		ПО ДокументыКОтражению.НастройкаФормированияПроводок = НастройкиФормированияПроводок.Ссылка
		|");
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результаты = Запрос.ВыполнитьПакет();
		
		Запрос.Параметры.ТипРегистратора = Результаты[1].Выгрузить().ВыгрузитьКолонку("ТипРегистратора");
		Запрос.Параметры.ПланСчетов = Результаты[2].Выгрузить().ВыгрузитьКолонку("ПланСчетов");
		
		ВыборкаНастройкиПроводок = Результаты[3].Выбрать();
	Иначе
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей КАК СпособУчетаНесобственныхЦенностей,
		|	НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств КАК ИспользоватьВыделениеДолгосрочныхАктивовОбязательств,
		|	НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС КАК ПроводкиПоВыручкеБезНДС
		|ИЗ
		|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетов
		|		ПО ПланыСчетовОрганизаций.ПланСчетов = ПланыСчетов.Ссылка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
		|		ПО ПланыСчетовОрганизаций.НастройкаФормированияПроводок = НастройкиФормированияПроводок.Ссылка
		|ГДЕ
		|	&УсловиеПериод
		|	И &УсловиеПланСчетов
		|	И &УсловиеОрганизация
		|СГРУППИРОВАТЬ ПО
		|	ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей,
		|	НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств,
		|	НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС
		|");
		
		Если Запрос.Параметры.ДатаНачала > '00010101' Тогда
			ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей КАК СпособУчетаНесобственныхЦенностей,
			|	НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств КАК ИспользоватьВыделениеДолгосрочныхАктивовОбязательств,
			|	НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС КАК ПроводкиПоВыручкеБезНДС
			|ИЗ
			|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&ДатаНачала,
			|		&УсловиеПланСчетов
			|		И &УсловиеОрганизация) КАК ПланыСчетовОрганизаций
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетов
			|		ПО ПланыСчетовОрганизаций.ПланСчетов = ПланыСчетов.Ссылка
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиФормированияПроводокМеждународногоУчета КАК НастройкиФормированияПроводок
			|		ПО ПланыСчетовОрганизаций.НастройкаФормированияПроводок = НастройкиФормированияПроводок.Ссылка
			|СГРУППИРОВАТЬ ПО
			|	ПланыСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей,
			|	НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств,
			|	НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС
			|");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить("
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.СпособУчетаНесобственныхЦенностей) КАК КоличествоСпособУчетаНесобственныхЦенностей,
			|	ЕСТЬNULL(МАКСИМУМ(НастройкиФормированияПроводок.СпособУчетаНесобственныхЦенностей),
			|		ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах)) КАК СпособУчетаНесобственныхЦенностей,
			|	ЕСТЬNULL(МАКСИМУМ(НастройкиФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств), ЛОЖЬ) КАК ВыделениеДолгосрочныхАктивовОбязательств,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС) КАК КоличествоВыручкаБезНДС,
			|	ЕСТЬNULL(МАКСИМУМ(НастройкиФормированияПроводок.ПроводкиПоВыручкеБезНДС), ИСТИНА) КАК ВыручкаБезНДС
			|ИЗ
			|	&НастройкиФормированияПроводок КАК НастройкиФормированияПроводок",
			"&НастройкиФормированияПроводок",
			"(" + СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПериод", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияПериод(Запрос.Параметры));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПланСчетов", СтрокаУсловияПланСчетов(Запрос.Параметры));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", СтрокаУсловияОрганизация(Запрос.Параметры, Неопределено));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", "Период");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПланСчетов", "ПланСчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "Организация");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаПланСчетов", "&ПланСчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаОрганизация", "&Организация");
		
		Запрос.Текст = ТекстЗапроса;
		ВыборкаНастройкиПроводок = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	ВыборкаНастройкиПроводок.Следующий();
	Запрос.Параметры.ВыделениеДолгосрочныхАктивовОбязательств = ВыборкаНастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств;
	
	Если ВыборкаНастройкиПроводок.КоличествоСпособУчетаНесобственныхЦенностей <= 1 Тогда
		Запрос.Параметры.СпособУчетаНесобственныхЦенностей = ВыборкаНастройкиПроводок.СпособУчетаНесобственныхЦенностей;
	КонецЕсли;
	
	Если ВыборкаНастройкиПроводок.КоличествоВыручкаБезНДС <= 1 Тогда
		Запрос.Параметры.ВыручкаБезНДС = ВыборкаНастройкиПроводок.ВыручкаБезНДС;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ШаблонТекстаЗапросаЗаписейРегистра()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&ОбъектУчета КАК ОбъектУчета,
	|	&ОбъектНастройки КАК ОбъектНастройки,
	|	&МестоУчета КАК МестоУчета,
	|	&ЭтоДебет КАК ЭтоДебет,
	|	&ЭтоКредит КАК ЭтоКредит,
	|	&ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	&Регистратор КАК Регистратор,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&НастройкаХозОперации КАК НастройкаХозОперации,
	|	&ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	&ВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
	|	&ДатаПогашения КАК ДатаПогашения,
	|	&Валюта КАК Валюта,
	|	&СуммаУпр КАК СуммаУпр,
	|	&СуммаРегл КАК СуммаРегл,
	|	&СуммаВал КАК СуммаВал,
	|	&Количество КАК Количество,
	|	&РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	&ИсточникДанных
	|ГДЕ
	|	&Активность
	|	И &ИдентификаторФинЗаписи <> &ИдентификаторНеиспользуемойФинЗаписи
	|	И &УсловиеПериод
	|	И &УсловиеРегистратор
	|	И &УсловиеОрганизация
	|	И &УсловиеЗначенияРесурсов
	|	И &УсловиеУдаляемыеДокументы
	|	И &УсловиеДополнительныйОтбор
	|	И &УсловиеРеквизитСторно
	|СГРУППИРОВАТЬ ПО
	|	&Период,
	|	&ОбъектУчета,
	|	&ОбъектНастройки,
	|	&МестоУчета,
	|	&ЭтоДебет,
	|	&ЭтоКредит,
	|	&ЭтоСторно,
	|	&ГруппаПолейАналитики,
	|	&Регистратор,
	|	&Организация,
	|	&Подразделение,
	|	&НаправлениеДеятельности,
	|	&НастройкаХозОперации,
	|	&ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки,
	|	&ВидДеятельностиНДС,
	|	&ДатаПогашения,
	|	&Валюта,
	|	&РеквизитСторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстыЗапросовЗаписейРегистров(Запрос)
	
	ТекстыЗапросовРегистров = Новый Структура();
	
	НастройкиПроводок = НастройкиФормированияПроводокПоПараметрамЗапроса(Запрос.Параметры);
	ОбъектыФинансовогоУчета = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектовФинансовогоУчета(НастройкиПроводок);
	ИсключитьОбъектыУчетаПоФункциональнымОпциям(ОбъектыФинансовогоУчета);
	
	БалансовыеФинансовыеРегистры = БалансовыеФинансовыеРегистры(ОбъектыФинансовогоУчета);
	ИсключитьРегистрыПоКоллекциямДвиженийРегистраторов(Запрос.Параметры, БалансовыеФинансовыеРегистры);
	ИсключитьРегистрыПоКорреспонденциямОбъектовУчета(Запрос.Параметры, БалансовыеФинансовыеРегистры, ОбъектыФинансовогоУчета);
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	СвойстваОбъектовМетаданных = Метаданные.СвойстваОбъектов;
	
	ЕстьПорцияДокументов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втПорцияДокументов") <> Неопределено;
	РегистрыВосстановленияРасчетовПоСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыВосстановленияРасчетовПоСторно();
	
	Для Каждого ИмяИсточникаДанных Из БалансовыеФинансовыеРегистры Цикл
		СтруктураПоиска = Новый Структура("ИсточникДанных", ИмяИсточникаДанных);
		СтрокиОбъектовУчета = ОбъектыФинансовогоУчета.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиОбъектовУчета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрыВосстановленияРасчетовПоСторно.Найти(ИмяИсточникаДанных) <> Неопределено Тогда
			Запрос.Параметры.ВосстановитьРасчетыПоСторно = Истина;
		КонецЕсли;
		
		МенеджерРегистра = РегистрыНакопления[ИмяИсточникаДанных]; // РегистрНакопленияМенеджер - 
		МетаданныеРегистра = РегистрыНакопленияМетаданные[ИмяИсточникаДанных];
		ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра);
		ВременнаяТаблицаДвижений = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("Движения" + ИмяИсточникаДанных);
		
		Если ПараметрыОтраженияДвижений.ВыделениеДолгосрочныхАктивовОбязательств
			И ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымДатаПогашения) Тогда
			Если ВременнаяТаблицаДвижений <> Неопределено
				И ВременнаяТаблицаДвижений.Колонки.Найти("ДатаПлановогоПогашения") <> Неопределено Тогда
				ПараметрыОтраженияДвижений.ПутьКДаннымДатаПогашения = "ДатаПлановогоПогашения";
			Иначе
				ПараметрыОтраженияДвижений.ВыделениеДолгосрочныхАктивовОбязательств = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеДебет)
		 ИЛИ НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеКредит) Тогда
			УсловиеДебет  = ПараметрыОтраженияДвижений.УсловиеДебет;
			УсловиеКредит = ПараметрыОтраженияДвижений.УсловиеКредит;
		ИначеЕсли МетаданныеРегистра.ВидРегистра = СвойстваОбъектовМетаданных.ВидРегистраНакопления.Обороты Тогда
			УсловиеДебет  = "ЛОЖЬ";
			УсловиеКредит = "ЛОЖЬ";
		ИначеЕсли ПараметрыОтраженияДвижений.ИнверсияДвижений Тогда
			УсловиеДебет  = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			УсловиеКредит = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		Иначе
			УсловиеДебет  = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
			УсловиеКредит = "&ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
		КонецЕсли;
		
		Если УсловиеДебет = "ЛОЖЬ" Тогда
			ВыражениеЭтоДебет = УсловиеДебет;
		Иначе
			ВыражениеЭтоДебет = "ВЫБОР
			|		КОГДА &ЭтоСторно
			|			ТОГДА &УсловиеКредит
			|		ИНАЧЕ &УсловиеДебет
			|	КОНЕЦ";
		КонецЕсли;
		
		Если УсловиеКредит = "ЛОЖЬ" Тогда
			ВыражениеЭтоКредит = УсловиеКредит;
		Иначе
			ВыражениеЭтоКредит = "ВЫБОР
			|		КОГДА &ЭтоСторно
			|			ТОГДА &УсловиеДебет
			|		ИНАЧЕ &УсловиеКредит
			|	КОНЕЦ";
		КонецЕсли;
		
		ПараметрыОтраженияДвижений.Вставить("ВыражениеЭтоДебет", ВыражениеЭтоДебет);
		ПараметрыОтраженияДвижений.Вставить("ВыражениеЭтоКредит", ВыражениеЭтоКредит);
		
		КлючиРесурсовОбъектовУчета = Новый Соответствие();
		
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ЗаполнитьКорИсточникиДанных(Запрос.Параметры, СтрокаОбъектаУчета);
			ЗаполнитьИсточникиСоСрокамиОбращения(Запрос.Параметры, СтрокаОбъектаУчета, ПараметрыОтраженияДвижений);
			ЗаполнитьПризнакиУчетаКорреспонденций(Запрос.Параметры, СтрокаОбъектаУчета);
			ЗаполнитьОбъектыНесобственныхЦенностей(Запрос.Параметры, СтрокаОбъектаУчета);
			ЗаполнитьОбъектыПоПризнакамУчетаНДС(Запрос.Параметры, СтрокаОбъектаУчета);
			
			ВсеРесурсы = Новый Массив();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыУпр);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыРегл);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыКоличество);
			КлючРесурсов = СтрСоединить(ВсеРесурсы, ",");
			
			Если КлючиРесурсовОбъектовУчета[КлючРесурсов] = Неопределено Тогда
				КлючиРесурсовОбъектовУчета.Вставить(КлючРесурсов, Новый Массив());
			КонецЕсли;
			
			КлючиРесурсовОбъектовУчета[КлючРесурсов].Добавить(СтрокаОбъектаУчета);
		КонецЦикла;
		
		Если КлючиРесурсовОбъектовУчета.Количество() = 1 Тогда
			ПоляВыборкиОбъектаУчета = СтрокиВыборкиПолейПоОписаниюОбъектаУчета(
				СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры);
		Иначе
			ПоляВыборкиОбъектаУчета = Новый Структура();
			ИменаПолейВыборки = ПоляВыборкиПоОписаниюОбъектаУчета();
			
			Для Каждого ИмяПоля Из ИменаПолейВыборки Цикл
				ПоляВыборкиОбъектаУчета.Вставить(ИмяПоля, Новый Соответствие());
			КонецЦикла;
			
			НомерКлючаРесурсов = 0;
			
			Для Каждого КлючРесурсовОбъектовУчета Из КлючиРесурсовОбъектовУчета Цикл
				НомерКлючаРесурсов = НомерКлючаРесурсов + 1;
				СтрокиОбъектовУчета = КлючРесурсовОбъектовУчета.Значение;
				
				СтрокиВыборкиПолейОбъектаУчета = СтрокиВыборкиПолейПоОписаниюОбъектаУчета(
					СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры);
				
				Для Каждого КлючИЗначение Из ПоляВыборкиОбъектаУчета Цикл
					СтрокаВыборкиПоля = СтрокиВыборкиПолейОбъектаУчета[КлючИЗначение.Ключ];
					Если КлючИЗначение.Значение[СтрокаВыборкиПоля] = Неопределено Тогда
						КлючИЗначение.Значение.Вставить(СтрокаВыборкиПоля, Новый Массив());
					КонецЕсли;
					КлючИЗначение.Значение[СтрокаВыборкиПоля].Добавить(НомерКлючаРесурсов);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ИмяПоля Из ИменаПолейВыборки Цикл
				СтрокиВыборкиПоля = ПоляВыборкиОбъектаУчета[ИмяПоля];
				ПолеВыборкиОбъектаУчета = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыбораЗначенияПоля(СтрокиВыборкиПоля);
				ПоляВыборкиОбъектаУчета.Вставить(ИмяПоля, ПолеВыборкиОбъектаУчета);
			КонецЦикла;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение) Тогда
			Подразделение = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Справочники.СтруктураПредприятия.ПустаяСсылка());
		Иначе
			Подразделение = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение);
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымМестоУчета) Тогда
			МестоУчета = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
		Иначе
			МестоУчета = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымМестоУчета);
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВалюта) Тогда
			Валюта = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Справочники.Валюты.ПустаяСсылка());
		Иначе
			Валюта = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымВалюта);
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымСторно) Тогда
			РеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь);
		Иначе
			РеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымСторно);
		КонецЕсли;
		
		Регистратор = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор);
		Организация = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымОрганизация);
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС) Тогда
			ВидДеятельностиНДС = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка());
		Иначе
			ВидДеятельностиНДС = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС);
		КонецЕсли;
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.РесурсОтсутствуетИлиМожетБытьПустым(ПараметрыОтраженияДвижений.РесурсыУпр) Тогда
			Запрос.Параметры.РегистрыБезСуммыУпр.Добавить(ИмяИсточникаДанных);
		КонецЕсли;
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.РесурсОтсутствуетИлиМожетБытьПустым(ПараметрыОтраженияДвижений.РесурсыРегл) Тогда
			Запрос.Параметры.РегистрыБезСуммыРегл.Добавить(ИмяИсточникаДанных);
		КонецЕсли;
		
		ИмяРегистра = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ИмяИсточникаДанных);
		
		Если ВременнаяТаблицаДвижений = Неопределено Тогда
			ИсточникДанных = СтрШаблон("РегистрНакопления.%1 КАК ТаблицаРегистра", ИмяИсточникаДанных);
			
			Если ЕстьПорцияДокументов Тогда
				ИсточникДанных = ИсточникДанных + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПорцияДокументов КАК ПорцияДокументов
				|		ПО &Регистратор = ПорцияДокументов.Регистратор
				|		 И &Организация = ПорцияДокументов.Организация
				|		 И НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) = ПорцияДокументов.ДатаОтражения";
			КонецЕсли;
			УсловиеУдаляемыеДокументы = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияУдаляемыеДокументы(МетаданныеРегистра);
		Иначе
			ИсточникДанных = СтрШаблон("%1 КАК ТаблицаРегистра", ВременнаяТаблицаДвижений.ПолноеИмя);
			УсловиеУдаляемыеДокументы = "ИСТИНА";
		КонецЕсли;
		
		Если КлючиРесурсовОбъектовУчета.Количество() > 1 Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьПовторительВИсточникДанных(ИсточникДанных, КлючиРесурсовОбъектовУчета.Количество());
		КонецЕсли;
		
		УсловиеПериод = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияПериод(Запрос.Параметры);
		УсловиеРегистратор = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияРегистратор(Запрос.Параметры);
		УсловиеОрганизация = СтрокаУсловияОрганизация(Запрос.Параметры, ИмяИсточникаДанных);
		УсловиеДополнительныйОтбор = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаДополнительныйОтбор(ПараметрыОтраженияДвижений);
		УсловиеРеквизитСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияРеквизитСторно();
		
		ТекстЗапроса = ШаблонТекстаЗапросаЗаписейРегистра();
		
		Если КлючиРесурсовОбъектовУчета.Количество() > 1 Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьПовторительВПоляГруппировки(ТекстЗапроса);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектУчета", ПоляВыборкиОбъектаУчета.ОбъектУчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНастройки", ПоляВыборкиОбъектаУчета.ОбъектНастройки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаправлениеДеятельности", ПоляВыборкиОбъектаУчета.НаправлениеДеятельности);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторФинЗаписи", ПоляВыборкиОбъектаУчета.ИдентификаторФинЗаписи);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХозОперации", ПоляВыборкиОбъектаУчета.НастройкаХозОперации);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторСтроки", ПоляВыборкиОбъектаУчета.ИдентификаторСтроки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаПогашения", ПоляВыборкиОбъектаУчета.ДатаПогашения);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоДебет", ПоляВыборкиОбъектаУчета.ЭтоДебет);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоКредит", ПоляВыборкиОбъектаУчета.ЭтоКредит);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоСторно", ПоляВыборкиОбъектаУчета.ЭтоСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаУпр", ПоляВыборкиОбъектаУчета.СуммаУпр);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаРегл", ПоляВыборкиОбъектаУчета.СуммаРегл);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаВал", ПоляВыборкиОбъектаУчета.СуммаВал);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Количество", ПоляВыборкиОбъектаУчета.Количество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗначенияРесурсов", ПоляВыборкиОбъектаУчета.УсловиеЗначенияРесурсов);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДебет", УсловиеДебет);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКредит", УсловиеКредит);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПериод", УсловиеПериод);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРегистратор", УсловиеРегистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", УсловиеОрганизация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеУдаляемыеДокументы", УсловиеУдаляемыеДокументы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДополнительныйОтбор", УсловиеДополнительныйОтбор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРеквизитСторно", УсловиеРеквизитСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", ИмяРегистра);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", Валюта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МестоУчета", МестоУчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", Регистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", Организация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", Подразделение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДеятельностиНДС", ВидДеятельностиНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитСторно", РеквизитСторно);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаРегистратор", "&Регистратор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаОрганизация", "&Организация");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("Период"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Активность", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("Активность"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДвижения", ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ВидДвижения"));
		
		Если ИмяИсточникаДанных = РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам.Имя Тогда
			ТекстВложеннойТаблицы = "(" + ТекстЗапроса + ")";
			
			// удалить после исправления ошибки 00-00450915
			НачислениеАвансаКлиентаПриВозврате = "(ТаблицаРегистра.ЭтоКредит
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеКредиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.ВозвратТоваровОтКлиента),
			|		ТИП(Документ.КорректировкаРеализации),
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00556880
			ЗачетАвансаКлиентаПриКорректировке = "(ТаблицаРегистра.ЭтоДебет
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеДебиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00570173
			НачислениеАвансаКлиентаПриКорректировке = "(ТаблицаРегистра.ЭтоДебет
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеКредиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаКлиентаПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|				ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|	КОНЕЦ КАК ОбъектУчета,
			|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
			|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ КАК ЭтоДебет,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ КАК ЭтоКредит,
			|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
			|	&ПоляАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Организация КАК Организация,
			|	ТаблицаРегистра.Подразделение КАК Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ КАК НастройкаХозОперации,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
			|	ТаблицаРегистра.Валюта КАК Валюта,
			|	СУММА(ТаблицаРегистра.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаРегистра.СуммаРегл) КАК СуммаРегл,
			|	СУММА(ТаблицаРегистра.СуммаВал) КАК СуммаВал,
			|	СУММА(ТаблицаРегистра.Количество) КАК Количество,
			|	ТаблицаРегистра.РеквизитСторно КАК РеквизитСторно
			|ИЗ
			|	&ТекстВложеннойТаблицы КАК ТаблицаРегистра
			|	,
			|	(ВЫБРАТЬ
			|		НЕОПРЕДЕЛЕНО КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Дт КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Кт КАК ДтКт
			|	) КАК ЧастиДвойнойЗаписи
			|ГДЕ
			|	ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|	ИЛИ &НачислениеАвансаКлиентаПриВозврате
			|	ИЛИ &ЗачетАвансаКлиентаПриКорректировке
			|	ИЛИ &НачислениеАвансаКлиентаПриКорректировке
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРегистра.Период,
			|	ТаблицаРегистра.ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаКлиентаПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|				ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|	КОНЕЦ,
			|	ТаблицаРегистра.ОбъектНастройки,
			|	ТаблицаРегистра.МестоУчета,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ,
			|	ТаблицаРегистра.ЭтоСторно,
			|	&ГруппаАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор,
			|	ТаблицаРегистра.Организация,
			|	ТаблицаРегистра.Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаКлиентаПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		КОГДА &ЗачетАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаКлиента)
			|		КОГДА &НачислениеАвансаКлиентаПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.ДатаПогашения,
			|	ТаблицаРегистра.Валюта,
			|	ТаблицаРегистра.РеквизитСторно
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВложеннойТаблицы", ТекстВложеннойТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаКлиентаПриВозврате", НачислениеАвансаКлиентаПриВозврате);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗачетАвансаКлиентаПриКорректировке", ЗачетАвансаКлиентаПриКорректировке);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаКлиентаПриКорректировке", НачислениеАвансаКлиентаПриКорректировке);
			
		ИначеЕсли ИмяИсточникаДанных = РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам.Имя Тогда
			ТекстВложеннойТаблицы = "(" + ТекстЗапроса + ")";
			
			// удалить после исправления ошибки 00-00453822
			НачислениеАвансаПоставщикуПриВозврате = "(ТаблицаРегистра.ЭтоДебет
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка),
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеДебиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.ВозвратТоваровПоставщику),
			|		ТИП(Документ.КорректировкаПриобретения),
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00556880
			ЗачетАвансаПоставщикуПриКорректировке = "(ТаблицаРегистра.ЭтоКредит
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеКредиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			// удалить после исправления причины возникновения ошибки 00-00570173
			НачислениеАвансаПоставщикуПриКорректировке = "(ТаблицаРегистра.ЭтоКредит
			|	И ТаблицаРегистра.ОбъектУчета = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|	И ТаблицаРегистра.НастройкаХозОперации В (
			|		ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеДебиторскойЗадолженности))
			|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (
			|		ТИП(Документ.КорректировкаЗадолженности)))";
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|	КОНЕЦ КАК ОбъектУчета,
			|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
			|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ КАК ЭтоДебет,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ КАК ЭтоКредит,
			|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
			|	&ПоляАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Организация КАК Организация,
			|	ТаблицаРегистра.Подразделение КАК Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ КАК НастройкаХозОперации,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
			|	ТаблицаРегистра.Валюта КАК Валюта,
			|	СУММА(ТаблицаРегистра.СуммаУпр) КАК СуммаУпр,
			|	СУММА(ТаблицаРегистра.СуммаРегл) КАК СуммаРегл,
			|	СУММА(ТаблицаРегистра.СуммаВал) КАК СуммаВал,
			|	СУММА(ТаблицаРегистра.Количество) КАК Количество,
			|	ТаблицаРегистра.РеквизитСторно КАК РеквизитСторно
			|ИЗ
			|	&ТекстВложеннойТаблицы КАК ТаблицаРегистра
			|	,
			|	(ВЫБРАТЬ
			|		НЕОПРЕДЕЛЕНО КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Дт КАК ДтКт
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		&Кт КАК ДтКт
			|	) КАК ЧастиДвойнойЗаписи
			|ГДЕ
			|	ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|	ИЛИ &НачислениеАвансаПоставщикуПриВозврате
			|	ИЛИ &ЗачетАвансаПоставщикуПриКорректировке
			|	ИЛИ &НачислениеАвансаПоставщикуПриКорректировке
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаРегистра.Период,
			|	ТаблицаРегистра.ИмяРегистра,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ВЫБОР
			|				КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|			КОНЕЦ
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|			КОНЕЦ
			|		КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|			ТОГДА ВЫБОР
			|				КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
			|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам)
			|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками)
			|			КОНЕЦ
			|		ИНАЧЕ ТаблицаРегистра.ОбъектУчета
			|	КОНЕЦ,
			|	ТаблицаРегистра.ОбъектНастройки,
			|	ТаблицаРегистра.МестоУчета,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоДебет
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Дт
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.ЭтоКредит
			|		ИНАЧЕ ЧастиДвойнойЗаписи.ДтКт = &Кт
			|	КОНЕЦ,
			|	ТаблицаРегистра.ЭтоСторно,
			|	&ГруппаАналитикиВложеннойТаблицы,
			|	ТаблицаРегистра.Регистратор,
			|	ТаблицаРегистра.Организация,
			|	ТаблицаРегистра.Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности,
			|	ВЫБОР
			|		КОГДА ЧастиДвойнойЗаписи.ДтКт = НЕОПРЕДЕЛЕНО
			|			ТОГДА ТаблицаРегистра.НастройкаХозОперации
			|		КОГДА &НачислениеАвансаПоставщикуПриВозврате
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		КОГДА &ЗачетАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ЗачетАвансаПоставщику)
			|		КОГДА &НачислениеАвансаПоставщикуПриКорректировке
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику)
			|		ИНАЧЕ ТаблицаРегистра.НастройкаХозОперации
			|	КОНЕЦ,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки,
			|	ТаблицаРегистра.СлужебныйВидДеятельностиНДС,
			|	ТаблицаРегистра.ДатаПогашения,
			|	ТаблицаРегистра.Валюта,
			|	ТаблицаРегистра.РеквизитСторно
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВложеннойТаблицы", ТекстВложеннойТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаПоставщикуПриВозврате", НачислениеАвансаПоставщикуПриВозврате);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗачетАвансаПоставщикуПриКорректировке", ЗачетАвансаПоставщикуПриКорректировке);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачислениеАвансаПоставщикуПриКорректировке", НачислениеАвансаПоставщикуПриКорректировке);
		КонецЕсли;
		
		ТекстыЗапросовРегистров.Вставить(ИмяИсточникаДанных, ТекстЗапроса);
	КонецЦикла;
	
	Возврат ТекстыЗапросовРегистров;
	
КонецФункции

Функция ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров)
	
	ТекстыЗапросов = Новый Массив();
	
	Для Каждого КлючИЗначение Из ТекстыЗапросовЗаписейРегистров Цикл
		ТекстыЗапросов.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораАналитики", "//ПоляВыбораАналитики");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаПолейАналитики", "//ГруппаПолейАналитики");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляАналитикиВложеннойТаблицы", "//ПоляАналитикиВложеннойТаблицы");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаАналитикиВложеннойТаблицы", "//ГруппаАналитикиВложеннойТаблицы");
	
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовКорреспонденций();
	ПоляИндексирования = ПоляИндексаТаблицыКорреспонденций();
	ТаблицаДляПомещения = "втДвиженияРегистров";
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапроса, УдаляемыеПоляВыборки, ПоляИндексирования, ТаблицаДляПомещения);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов)
	
	ДобавитьТаблицыСведенийОбОбъектахУчета(ТекстыЗапросов);
	ДобавитьТаблицыДвиженийДебетаИКредита(ТекстыЗапросов);
	ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов);
	
	ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, Запрос.Параметры, Истина);
	
	Если ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "втОшибкиКорреспонденций") Тогда
		ОпределитьМаксимальныйНомерЗаписейДвижений(ТекстыЗапросов);
		
		ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, Запрос.Параметры, "Дт");
		ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, Запрос.Параметры, "Кт");
		
		ОпределитьРегистрыСДвижениямиРеверса(ТекстыЗапросов);
		
		ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, "Дт");
		ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, "Кт");
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втМаксимальныйНомерЗаписей");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровРеверсДебет");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровРеверсКредит");

		ТаблицаКорреспонденцийДвиженийРегистров = Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров;
		
		ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов);
		
		ОпределитьКорреспонденцииБезОшибок(ТекстыЗапросов, Запрос.Параметры);
		ОпределитьРегистрыЗаменыРеверсаНаСторно(ТекстыЗапросов);
		
		Если ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "втКорреспонденцииБезОшибок") Тогда
			ЗаменитьКорреспонденцииРеверсаНаСторно(ТекстыЗапросов,
				Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров,
				ТаблицаКорреспонденцийДвиженийРегистров);
			
			ТаблицаРегистровЗаменыРеверса = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втРегистрыЗаменыРеверсаНаСторно");
			ТаблицаРегистровЗаменыРеверса = ТаблицаРегистровЗаменыРеверса.ПолучитьДанные().Выгрузить();
			Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно = ТаблицаРегистровЗаменыРеверса.ВыгрузитьКолонку("ИмяРегистра");
		Иначе
			Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров;
		КонецЕсли;
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРегистрыЗаменыРеверсаНаСторно");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втКорреспонденцииБезОшибок");
	Иначе
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
		ДобавитьПустуюТаблицуДокументовЗаменыРеверса(ТекстыЗапросов);
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебет");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втКорИсточникиДанных");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыКорИсточниковДанных");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОбъектыНесобственныхЦенностей");
	
	ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ЕСТЬNULL(ПризнакиУчетаКорреспонденций.НомерЗначения, 0) КАК НомерСложнойЗаписи,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт = ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрКт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт = ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт = ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглКт <> 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт = ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|		ПО ДвиженияДебетКредит.ОбъектУчетаДт = ПризнакиУчетаКорреспонденций.ОбъектУчетаДт
	|		 И ДвиженияДебетКредит.ОбъектУчетаКт = ПризнакиУчетаКорреспонденций.ОбъектУчетаКт
	|ГДЕ
	|	&УсловиеОбъектУчетаДт
	|	И &УсловиеОбъектУчетаКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСторно.Период КАК Период,
	|	0 КАК НомерЗаписиДт,
	|	0 КАК НомерЗаписиКт,
	|	0 КАК НомерСложнойЗаписи,
	|	РасчетыСКлиентамиПоСторно.ИмяРегистра КАК ИмяРегистраДт,
	|	РасчетыСКлиентамиПоСторно.ИмяРегистра КАК ИмяРегистраКт,
	|	РасчетыСКлиентамиПоСторно.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РасчетыСКлиентамиПоСторно.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РасчетыСКлиентамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиДт,
	|	РасчетыСКлиентамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиКт,
	|	РасчетыСКлиентамиПоСторно.МестоУчета КАК МестоУчетаДт,
	|	РасчетыСКлиентамиПоСторно.МестоУчета КАК МестоУчетаКт,
	|	РасчетыСКлиентамиПоСторно.ЭтоСторно КАК ЭтоСторноДт,
	|	РасчетыСКлиентамиПоСторно.ЭтоСторно КАК ЭтоСторноКт,
	|	РасчетыСКлиентамиПоСторно.Организация КАК Организация,
	|	РасчетыСКлиентамиПоСторно.Регистратор КАК Регистратор,
	|	РасчетыСКлиентамиПоСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиДт,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиКт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСКт,
	|	РасчетыСКлиентамиПоСторно.ДатаПогашения КАК ДатаПогашенияДт,
	|	РасчетыСКлиентамиПоСторно.ДатаПогашения КАК ДатаПогашенияКт,
	|	РасчетыСКлиентамиПоСторно.Валюта КАК ВалютаДт,
	|	РасчетыСКлиентамиПоСторно.Валюта КАК ВалютаКт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрДт КАК СуммаДвиженияУпрДт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрКт КАК СуммаДвиженияУпрКт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглДт КАК СуммаДвиженияРеглДт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглКт КАК СуммаДвиженияРеглКт,
	|	РасчетыСКлиентамиПоСторно.СуммаВалДт КАК СуммаДвиженияВалДт,
	|	РасчетыСКлиентамиПоСторно.СуммаВалКт КАК СуммаДвиженияВалКт,
	|	0 КАК КоличествоДвиженияДт,
	|	0 КАК КоличествоДвиженияКт,
	|	РасчетыСКлиентамиПоСторно.РеквизитСторно КАК РеквизитСторноДт,
	|	РасчетыСКлиентамиПоСторно.РеквизитСторно КАК РеквизитСторноКт,
	|	ЛОЖЬ КАК СложнаяПроводкаДт,
	|	ЛОЖЬ КАК СложнаяПроводкаКт,
	|	ИСТИНА КАК УчитыватьХозОперацию,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрДт КАК СуммаУпрДт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрКт КАК СуммаУпрКт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглДт КАК СуммаРеглДт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втРасчетыСКлиентамиПоСторно КАК РасчетыСКлиентамиПоСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСторно.Период КАК Период,
	|	0 КАК НомерЗаписиДт,
	|	0 КАК НомерЗаписиКт,
	|	0 КАК НомерСложнойЗаписи,
	|	РасчетыСПоставщикамиПоСторно.ИмяРегистра КАК ИмяРегистраДт,
	|	РасчетыСПоставщикамиПоСторно.ИмяРегистра КАК ИмяРегистраКт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиДт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиКт,
	|	РасчетыСПоставщикамиПоСторно.МестоУчета КАК МестоУчетаДт,
	|	РасчетыСПоставщикамиПоСторно.МестоУчета КАК МестоУчетаКт,
	|	РасчетыСПоставщикамиПоСторно.ЭтоСторно КАК ЭтоСторноДт,
	|	РасчетыСПоставщикамиПоСторно.ЭтоСторно КАК ЭтоСторноКт,
	|	РасчетыСПоставщикамиПоСторно.Организация КАК Организация,
	|	РасчетыСПоставщикамиПоСторно.Регистратор КАК Регистратор,
	|	РасчетыСПоставщикамиПоСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиДт,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиКт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСКт,
	|	РасчетыСПоставщикамиПоСторно.ДатаПогашения КАК ДатаПогашенияДт,
	|	РасчетыСПоставщикамиПоСторно.ДатаПогашения КАК ДатаПогашенияКт,
	|	РасчетыСПоставщикамиПоСторно.Валюта КАК ВалютаДт,
	|	РасчетыСПоставщикамиПоСторно.Валюта КАК ВалютаКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрДт КАК СуммаДвиженияУпрДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрКт КАК СуммаДвиженияУпрКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглДт КАК СуммаДвиженияРеглДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглКт КАК СуммаДвиженияРеглКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаВалДт КАК СуммаДвиженияВалДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаВалКт КАК СуммаДвиженияВалКт,
	|	0 КАК КоличествоДвиженияДт,
	|	0 КАК КоличествоДвиженияКт,
	|	РасчетыСПоставщикамиПоСторно.РеквизитСторно КАК РеквизитСторноДт,
	|	РасчетыСПоставщикамиПоСторно.РеквизитСторно КАК РеквизитСторноКт,
	|	ЛОЖЬ КАК СложнаяПроводкаДт,
	|	ЛОЖЬ КАК СложнаяПроводкаКт,
	|	ИСТИНА КАК УчитыватьХозОперацию,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрДт КАК СуммаУпрДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрКт КАК СуммаУпрКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглДт КАК СуммаРеглДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втРасчетыСПоставщикамиПоСторно КАК РасчетыСПоставщикамиПоСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт,
	|	ВалютаДт,
	|	ВалютаКт,
	|	СложнаяПроводкаДт,
	|	СложнаяПроводкаКт
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОбъектУчетаДт",
		СтрокаУсловияОбъектУчета(Запрос.Параметры, "Дт", "ДвиженияДебетКредит"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОбъектУчетаКт",
		СтрокаУсловияОбъектУчета(Запрос.Параметры, "Кт", "ДвиженияДебетКредит"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ТаблицаКорреспонденцийДвиженийРегистров",
		Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров);
	
КонецПроцедуры

Процедура РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СуммыДокументовВВалютахУчета.Регистратор КАК Регистратор,
	|	СуммыДокументовВВалютахУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СуммыДокументовВВалютахУчета.Валюта КАК Валюта,
	|	СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СуммыДокументовВВалютахУчета.СуммаБезНДС КАК СуммаБезНДС,
	|	СуммыДокументовВВалютахУчета.СуммаНДС КАК СуммаНДС,
	|	СуммыДокументовВВалютахУчета.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	СуммыДокументовВВалютахУчета.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов
	|ПОМЕСТИТЬ втСуммыДокументовВВалютахУчета
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|		ГДЕ
	|			ДвиженияДебетКредит.Регистратор = СуммыДокументовВВалютахУчета.Регистратор
	|			И (ДвиженияДебетКредит.СложнаяПроводкаДт ИЛИ ДвиженияДебетКредит.СложнаяПроводкаКт)
	|		)
	|	И НЕ
	|		(СуммыДокументовВВалютахУчета.Валюта В
	|			(&ВалютаУправленческогоУчета,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|		И СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов В
	|			(&ВалютаУправленческогоУчета,
	|			ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ИдентификаторСтроки,
	|	Валюта,
	|	ВалютаВзаиморасчетов,
	|	СуммаНДСВзаиморасчетов
	|");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.НомерСложнойЗаписи КАК НомерСложнойЗаписи,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК РаспределяемаяСуммаВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК РаспределяемаяСуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК РаспределяемоеКоличествоДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК РаспределяемоеКоличествоКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = &ВалютаУправленческогоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРаспределениеСуммыДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = &ВалютаУправленческогоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьРаспределениеСуммыКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА ДвиженияДебетКредит.ВалютаДт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы))
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ОбъектУчетаКт В (&ОбъектыУчетаНДС)
	|					ТОГДА 0
	|				КОГДА ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.Валюта
	|					ТОГДА СуммыВВалютахДт.СуммаБезНДС + СуммыВВалютахДт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахДт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахДт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ОбъектУчетаКт В (&ОбъектыУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.Валюта
	|					ТОГДА СуммыВВалютахДт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахДт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ОбъектУчетаКт В (&ОбъектыУчетаСНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.Валюта
	|					ТОГДА СуммыВВалютахДт.СуммаБезНДС + СуммыВВалютахДт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахДт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахДт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.Валюта
	|				ТОГДА СуммыВВалютахДт.СуммаБезНДС
	|			ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов - СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|		КОНЕЦ * ВЫБОР
	|			КОГДА СуммыВВалютахДт.СуммаБезНДС < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА ДвиженияДебетКредит.ВалютаКт = ДвиженияДебетКредит.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаДвиженияВалКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы))
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ОбъектУчетаДт В (&ОбъектыУчетаНДС)
	|					ТОГДА 0
	|				КОГДА ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.Валюта
	|					ТОГДА СуммыВВалютахКт.СуммаБезНДС + СуммыВВалютахКт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахКт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахКт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ОбъектУчетаДт В (&ОбъектыУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.Валюта
	|					ТОГДА СуммыВВалютахКт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахКт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ОбъектУчетаДт В (&ОбъектыУчетаСНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.Валюта
	|					ТОГДА СуммыВВалютахКт.СуммаБезНДС + СуммыВВалютахКт.СуммаНДС
	|				ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов
	|			КОНЕЦ * ВЫБОР
	|				КОГДА СуммыВВалютахКт.СуммаБезНДС < 0 ИЛИ СуммыВВалютахКт.СуммаНДС < 0
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.Валюта
	|				ТОГДА СуммыВВалютахКт.СуммаБезНДС
	|			ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов - СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|		КОНЕЦ * ВЫБОР
	|			КОГДА СуммыВВалютахКт.СуммаБезНДС < 0
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияДт = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределениеКоличестваДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияКт = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьРаспределениеКоличестваКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияДт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаКоличества, &ТочностьКоличества)) КАК КоличествоДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДвиженияКт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|		КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДвиженияКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаКоличества, &ТочностьКоличества)) КАК КоличествоКт
	|ПОМЕСТИТЬ втРаспределениеНебалансовых
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДокументовВВалютахУчета КАК СуммыВВалютахДт
	|		ПО ДвиженияДебетКредит.Регистратор = СуммыВВалютахДт.Регистратор
	|		 И ДвиженияДебетКредит.ИдентификаторСтрокиКт = СуммыВВалютахДт.ИдентификаторСтроки
	|		 И ДвиженияДебетКредит.СложнаяПроводкаДт
	|		 И (ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.Валюта
	|			ИЛИ (ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.ВалютаВзаиморасчетов И СуммыВВалютахДт.СуммаНДСВзаиморасчетов <> 0))
	|		 И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|			ГДЕ
	|				ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|				И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|				И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|				И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|			)
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДокументовВВалютахУчета КАК СуммыВВалютахКт
	|		ПО ДвиженияДебетКредит.Регистратор = СуммыВВалютахКт.Регистратор
	|		 И ДвиженияДебетКредит.ИдентификаторСтрокиДт = СуммыВВалютахКт.ИдентификаторСтроки
	|		 И ДвиженияДебетКредит.СложнаяПроводкаКт
	|		 И (ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.Валюта
	|			ИЛИ (ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.ВалютаВзаиморасчетов И СуммыВВалютахКт.СуммаНДСВзаиморасчетов <> 0))
	|		 И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|			ГДЕ
	|				ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|				И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|				И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|				И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|			)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	НомерЗаписиДт,
	|	НомерЗаписиКт,
	|	НомерСложнойЗаписи
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаСуммы", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьСуммы", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаКоличества", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаКоличества));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьКоличества", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьКоличества));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебетКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСуммыДокументовВВалютахУчета");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияСуммы(ТекстыЗапросов, "втКоррекцияОшибокСуммВалДт", "РаспределяемаяСуммаВалДт", "СуммаВалДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияСуммы(ТекстыЗапросов, "втКоррекцияОшибокСуммВалКт", "РаспределяемаяСуммаВалКт", "СуммаВалКт");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияКоличества(ТекстыЗапросов, "втКоррекцияОшибокКоличествДт", "РаспределяемоеКоличествоДт", "КоличествоДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияКоличества(ТекстыЗапросов, "втКоррекцияОшибокКоличествКт", "РаспределяемоеКоличествоКт", "КоличествоКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.НомерСтроки КАК НомерЗаписи,
	|	РаспределениеНебалансовых.НомерЗаписиДт КАК НомерЗаписиДт,
	|	РаспределениеНебалансовых.НомерЗаписиКт КАК НомерЗаписиКт,
	|	РаспределениеНебалансовых.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеНебалансовых.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РаспределениеНебалансовых.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	РаспределениеНебалансовых.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	РаспределениеНебалансовых.МестоУчетаДт КАК МестоУчетаДт,
	|	РаспределениеНебалансовых.МестоУчетаКт КАК МестоУчетаКт,
	|	РаспределениеНебалансовых.ЭтоСторноДт КАК ЭтоСторноДт,
	|	РаспределениеНебалансовых.ЭтоСторноКт КАК ЭтоСторноКт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	РаспределениеНебалансовых.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	РаспределениеНебалансовых.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	РаспределениеНебалансовых.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	РаспределениеНебалансовых.ВалютаДт КАК ВалютаДт,
	|	РаспределениеНебалансовых.ВалютаКт КАК ВалютаКт,
	|	РаспределениеНебалансовых.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	РаспределениеНебалансовых.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	РаспределениеНебалансовых.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	РаспределениеНебалансовых.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	РаспределениеНебалансовых.РеквизитСторноДт КАК РеквизитСторноДт,
	|	РаспределениеНебалансовых.РеквизитСторноКт КАК РеквизитСторноКт,
	|	РаспределениеНебалансовых.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	РаспределениеНебалансовых.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	РаспределениеНебалансовых.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	РаспределениеНебалансовых.СуммаУпрДт КАК СуммаУпрДт,
	|	РаспределениеНебалансовых.СуммаУпрКт КАК СуммаУпрКт,
	|	РаспределениеНебалансовых.СуммаРеглДт КАК СуммаРеглДт,
	|	РаспределениеНебалансовых.СуммаРеглКт КАК СуммаРеглКт,
	|	РаспределениеНебалансовых.СуммаВалДт + ЕСТЬNULL(КоррекцияОшибокСуммВалДт.ОшибкаОкругления, 0) КАК СуммаВалДт,
	|	РаспределениеНебалансовых.СуммаВалКт + ЕСТЬNULL(КоррекцияОшибокСуммВалКт.ОшибкаОкругления, 0) КАК СуммаВалКт,
	|	РаспределениеНебалансовых.КоличествоДт + ЕСТЬNULL(КоррекцияОшибокКоличествДт.ОшибкаОкругления, 0) КАК КоличествоДт,
	|	РаспределениеНебалансовых.КоличествоКт + ЕСТЬNULL(КоррекцияОшибокКоличествКт.ОшибкаОкругления, 0) КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалДт КАК КоррекцияОшибокСуммВалДт
	|		ПО РаспределениеНебалансовых.НомерЗаписиДт = КоррекцияОшибокСуммВалДт.НомерЗаписиДт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокСуммВалДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалКт КАК КоррекцияОшибокСуммВалКт
	|		ПО РаспределениеНебалансовых.НомерЗаписиКт = КоррекцияОшибокСуммВалКт.НомерЗаписиКт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокСуммВалКт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествДт КАК КоррекцияОшибокКоличествДт
	|		ПО РаспределениеНебалансовых.НомерЗаписиДт = КоррекцияОшибокКоличествДт.НомерЗаписиДт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокКоличествДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествКт КАК КоррекцияОшибокКоличествКт
	|		ПО РаспределениеНебалансовых.НомерЗаписиКт = КоррекцияОшибокКоличествКт.НомерЗаписиКт
	|		 И РаспределениеНебалансовых.НомерСтроки = КоррекцияОшибокКоличествКт.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписиДт,
	|	НомерЗаписиКт
	|");
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	УдаляемыеВременныеТаблицы.Добавить("втРаспределениеНебалансовых");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалКт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествКт");

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
КонецПроцедуры

Процедура РаспределитьКорреспонденцииПоДатамПогашения(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт ИЛИ ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторно,
	|	ЕСТЬNULL(ДетальныеДвиженияДебет.СуммаУпр, ДвиженияДебетКредит.СуммаДвиженияУпрДт) КАК СуммаДвиженияУпрДт,
	|	ЕСТЬNULL(ДетальныеДвиженияКредит.СуммаУпр, ДвиженияДебетКредит.СуммаДвиженияУпрКт) КАК СуммаДвиженияУпрКт,
	|	ЕСТЬNULL(ДетальныеДвиженияДебет.СуммаРегл, ДвиженияДебетКредит.СуммаДвиженияРеглДт) КАК СуммаДвиженияРеглДт,
	|	ЕСТЬNULL(ДетальныеДвиженияКредит.СуммаРегл, ДвиженияДебетКредит.СуммаДвиженияРеглКт) КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК РаспределяемаяСуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК РаспределяемаяСуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК РаспределяемаяСуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК РаспределяемаяСуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК РаспределяемаяСуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК РаспределяемаяСуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК РаспределяемоеКоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК РаспределяемоеКоличествоКт,
	|	ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|		ИЛИ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1 КАК ЕстьРаспределение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДетальныеДвиженияДебет.ДатаПогашения
	|		ИНАЧЕ ДвиженияДебетКредит.ДатаПогашенияДт
	|	КОНЕЦ КАК ДатаПогашенияДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДетальныеДвиженияКредит.ДатаПогашения
	|		ИНАЧЕ ДвиженияДебетКредит.ДатаПогашенияКт
	|	КОНЕЦ КАК ДатаПогашенияКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрДт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаУпрДт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаУпрДт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаУпрДт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаУпрДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаУпрКт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаУпрКт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаУпрКт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаУпрКт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаУпрКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглДт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаРеглДт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаРеглДт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаРеглДт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаРеглДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаРеглКт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаРеглКт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаРеглКт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаРеглКт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаРеглКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаВалДт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаВалДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаВалДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаВалДт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаВалДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.СуммаВалКт = 0
	|			ТОГДА ДвиженияДебетКредит.СуммаВалКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.СуммаВалКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.СуммаВалКт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаСуммы, &ТочностьСуммы)) КАК СуммаВалКт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоДт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.КоличествоДт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.КоличествоДт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаКоличества, &ТочностьКоличества)) КАК КоличествоДт,
	|	ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.КоличествоКт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			И НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ДвиженияДебетКредит.КоличествоКт
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияКредит.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияДебет.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрДт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияДебет.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглДт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА НЕ ЕСТЬNULL(ДетальныеДвиженияДебет.КоличествоЭтаповПогашения, 0) > 1
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияКредит.СуммаУпр / ДвиженияДебетКредит.СуммаДвиженияУпрКт
	|				КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|					ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияКредит.СуммаРегл / ДвиженияДебетКредит.СуммаДвиженияРеглКт
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияУпрДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияУпрКт <> 0
	|				ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияДебет.СуммаУпр * ДетальныеДвиженияКредит.СуммаУпр / (ДвиженияДебетКредит.СуммаДвиженияУпрДт * ДвиженияДебетКредит.СуммаДвиженияУпрКт)
	|			КОГДА ДвиженияДебетКредит.СуммаДвиженияРеглДт <> 0 И ДвиженияДебетКредит.СуммаДвиженияРеглКт <> 0
	|				ТОГДА ДвиженияДебетКредит.КоличествоКт * ДетальныеДвиженияДебет.СуммаРегл * ДетальныеДвиженияКредит.СуммаРегл / (ДвиженияДебетКредит.СуммаДвиженияРеглДт * ДвиженияДебетКредит.СуммаДвиженияРеглКт)
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ЧИСЛО(&ДлинаКоличества, &ТочностьКоличества)) КАК КоличествоКт
	|ПОМЕСТИТЬ втРаспределениеПоДатамПогашения
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДетальныхДвиженийСИтогамиДебет КАК ДетальныеДвиженияДебет
	|		ПО ДвиженияДебетКредит.НомерЗаписиДт = ДетальныеДвиженияДебет.НомерЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДетальныхДвиженийСИтогамиКредит КАК ДетальныеДвиженияКредит
	|		ПО ДвиженияДебетКредит.НомерЗаписиКт = ДетальныеДвиженияКредит.НомерЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	НомерЗаписи
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаСуммы", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьСуммы", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаКоличества", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаКоличества));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьКоличества", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьКоличества));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДетальныхДвиженийСИтогамиДебет", Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиДебет);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДетальныхДвиженийСИтогамиКредит", Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиКредит);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияДебетКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиДебет);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиКредит);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммУпрДт", "РаспределяемаяСуммаУпрДт", "СуммаУпрДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммУпрКт", "РаспределяемаяСуммаУпрКт", "СуммаУпрКт");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммРеглДт", "РаспределяемаяСуммаРеглДт", "СуммаРеглДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммРеглКт", "РаспределяемаяСуммаРеглКт", "СуммаРеглКт");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммВалДт", "РаспределяемаяСуммаВалДт", "СуммаВалДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокСуммВалКт", "РаспределяемаяСуммаВалКт", "СуммаВалКт");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокКоличествДт", "РаспределяемоеКоличествоДт", "КоличествоДт");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьТаблицуОшибокОкругленияРесурса(ТекстыЗапросов, "втКоррекцияОшибокКоличествКт", "РаспределяемоеКоличествоКт", "КоличествоКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеПоДатамПогашения.Период КАК Период,
	|	РаспределениеПоДатамПогашения.НомерСтроки КАК НомерЗаписи,
	|	РаспределениеПоДатамПогашения.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеПоДатамПогашения.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеПоДатамПогашения.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РаспределениеПоДатамПогашения.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РаспределениеПоДатамПогашения.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	РаспределениеПоДатамПогашения.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	РаспределениеПоДатамПогашения.МестоУчетаДт КАК МестоУчетаДт,
	|	РаспределениеПоДатамПогашения.МестоУчетаКт КАК МестоУчетаКт,
	|	РаспределениеПоДатамПогашения.ЭтоСторноДт КАК ЭтоСторноДт,
	|	РаспределениеПоДатамПогашения.ЭтоСторноКт КАК ЭтоСторноКт,
	|	РаспределениеПоДатамПогашения.Организация КАК Организация,
	|	РаспределениеПоДатамПогашения.Регистратор КАК Регистратор,
	|	РаспределениеПоДатамПогашения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РаспределениеПоДатамПогашения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеПоДатамПогашения.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	РаспределениеПоДатамПогашения.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	РаспределениеПоДатамПогашения.ВалютаДт КАК ВалютаДт,
	|	РаспределениеПоДатамПогашения.ВалютаКт КАК ВалютаКт,
	|	РаспределениеПоДатамПогашения.РеквизитСторно КАК РеквизитСторно,
	|	РаспределениеПоДатамПогашения.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	РаспределениеПоДатамПогашения.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	РаспределениеПоДатамПогашения.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	РаспределениеПоДатамПогашения.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	РаспределениеПоДатамПогашения.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	РаспределениеПоДатамПогашения.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	РаспределениеПоДатамПогашения.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	РаспределениеПоДатамПогашения.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	РаспределениеПоДатамПогашения.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	РаспределениеПоДатамПогашения.СуммаУпрДт + ЕСТЬNULL(КоррекцияОшибокСуммУпрДт.ОшибкаОкругления, 0) КАК СуммаУпрДт,
	|	РаспределениеПоДатамПогашения.СуммаУпрКт + ЕСТЬNULL(КоррекцияОшибокСуммУпрКт.ОшибкаОкругления, 0) КАК СуммаУпрКт,
	|	РаспределениеПоДатамПогашения.СуммаРеглДт + ЕСТЬNULL(КоррекцияОшибокСуммРеглДт.ОшибкаОкругления, 0) КАК СуммаРеглДт,
	|	РаспределениеПоДатамПогашения.СуммаРеглКт + ЕСТЬNULL(КоррекцияОшибокСуммРеглКт.ОшибкаОкругления, 0) КАК СуммаРеглКт,
	|	РаспределениеПоДатамПогашения.СуммаВалДт + ЕСТЬNULL(КоррекцияОшибокСуммВалДт.ОшибкаОкругления, 0) КАК СуммаВалДт,
	|	РаспределениеПоДатамПогашения.СуммаВалКт + ЕСТЬNULL(КоррекцияОшибокСуммВалКт.ОшибкаОкругления, 0) КАК СуммаВалКт,
	|	РаспределениеПоДатамПогашения.КоличествоДт + ЕСТЬNULL(КоррекцияОшибокКоличествДт.ОшибкаОкругления, 0) КАК КоличествоДт,
	|	РаспределениеПоДатамПогашения.КоличествоКт + ЕСТЬNULL(КоррекцияОшибокКоличествКт.ОшибкаОкругления, 0) КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	втРаспределениеПоДатамПогашения КАК РаспределениеПоДатамПогашения
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммУпрДт КАК КоррекцияОшибокСуммУпрДт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммУпрДт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммУпрДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммУпрКт КАК КоррекцияОшибокСуммУпрКт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммУпрКт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммУпрКт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммРеглДт КАК КоррекцияОшибокСуммРеглДт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммРеглДт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммРеглДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммРеглКт КАК КоррекцияОшибокСуммРеглКт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммРеглКт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммРеглКт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалДт КАК КоррекцияОшибокСуммВалДт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммВалДт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммВалДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалКт КАК КоррекцияОшибокСуммВалКт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокСуммВалКт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокСуммВалКт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествДт КАК КоррекцияОшибокКоличествДт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокКоличествДт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокКоличествДт.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествКт КАК КоррекцияОшибокКоличествКт
	|		ПО РаспределениеПоДатамПогашения.НомерЗаписи = КоррекцияОшибокКоличествКт.НомерЗаписи
	|		 И РаспределениеПоДатамПогашения.НомерСтроки = КоррекцияОшибокКоличествКт.НомерСтроки
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	НомерЗаписи,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	МестоУчетаДт,
	|	МестоУчетаКт,
	|	Организация
	|");
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	УдаляемыеВременныеТаблицы.Добавить("втРаспределениеПоДатамПогашения");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммУпрДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммУпрКт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммРеглДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммРеглКт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокСуммВалКт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествДт");
	УдаляемыеВременныеТаблицы.Добавить("втКоррекцияОшибокКоличествКт");

	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
КонецПроцедуры

Процедура ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчета,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ОбъектНастройкиДт В (&ПустыеОбъектыНастройки)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиПодбораСчетов,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчета,
	|	ДвиженияДебетКредит.Организация КАК Организация
	|ПОМЕСТИТЬ втОбъектыУчетаИНастройки
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.МестоУчетаДт,
	|	ДвиженияДебетКредит.Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчета,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ОбъектНастройкиКт В (&ПустыеОбъектыНастройки)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиПодбораСчетов,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчета,
	|	ДвиженияДебетКредит.Организация КАК Организация
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаКт,
	|	ДвиженияДебетКредит.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройкиПодбораСчетов,
	|	МестоУчета,
	|	Организация
	|";
	
	ТипыОбъектовНастроек = Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип;
	ПустыеОбъектыНастройки = ПустыеЗначенияТипа(ТипыОбъектовНастроек);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустыеОбъектыНастройки", ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ПустыеОбъектыНастройки));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	НастройкиСчетовПоОбъектам.ПланСчетов КАК ПланСчетов,
	|	НастройкиСчетовПоОбъектам.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НастройкиСчетовПоОбъектам.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	НастройкиСчетовПоОбъектам.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втПриоритетыСчетовУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = НастройкиСчетовПоОбъектам.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = НастройкиСчетовПоОбъектам.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.МестоУчета = НастройкиСчетовПоОбъектам.МестоУчета
	|		 И ОбъектыУчетаИНастройки.Организация = НастройкиСчетовПоОбъектам.Организация
	|ГДЕ
	|	&УсловиеПланСчетов
	|	И НастройкиСчетовПоОбъектам.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И НастройкиСчетовПоОбъектам.МестоУчета <> НЕОПРЕДЕЛЕНО
	|	И НастройкиСчетовПоОбъектам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	НастройкиСчетовПоОбъектам.ПланСчетов КАК ПланСчетов,
	|	НастройкиСчетовПоОбъектам.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НастройкиСчетовПоОбъектам.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	НастройкиСчетовПоОбъектам.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = НастройкиСчетовПоОбъектам.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = НастройкиСчетовПоОбъектам.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.МестоУчета = НастройкиСчетовПоОбъектам.МестоУчета
	|ГДЕ
	|	&УсловиеПланСчетов
	|	И НастройкиСчетовПоОбъектам.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И НастройкиСчетовПоОбъектам.МестоУчета <> НЕОПРЕДЕЛЕНО
	|	И НастройкиСчетовПоОбъектам.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	НастройкиСчетовПоОбъектам.ПланСчетов КАК ПланСчетов,
	|	НастройкиСчетовПоОбъектам.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НастройкиСчетовПоОбъектам.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	НастройкиСчетовПоОбъектам.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = НастройкиСчетовПоОбъектам.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = НастройкиСчетовПоОбъектам.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.Организация = НастройкиСчетовПоОбъектам.Организация
	|ГДЕ
	|	&УсловиеПланСчетов
	|	И НастройкиСчетовПоОбъектам.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И НастройкиСчетовПоОбъектам.МестоУчета = НЕОПРЕДЕЛЕНО
	|	И НастройкиСчетовПоОбъектам.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	НастройкиСчетовПоОбъектам.ПланСчетов КАК ПланСчетов,
	|	НастройкиСчетовПоОбъектам.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НастройкиСчетовПоОбъектам.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	НастройкиСчетовПоОбъектам.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК НастройкиСчетовПоОбъектам
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = НастройкиСчетовПоОбъектам.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = НастройкиСчетовПоОбъектам.ОбъектНастройки
	|ГДЕ
	|	&УсловиеПланСчетов
	|	И НастройкиСчетовПоОбъектам.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета)
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	Приоритет,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПланСчетов", СтрокаУсловияПланСчетов(Запрос.Параметры));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПланСчетов", "НастройкиСчетовПоОбъектам.ПланСчетов");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаПланСчетов", "&ПланСчетов");
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОбъектыУчетаИНастройки");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПриоритетыСчетовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки КАК ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета КАК МестоУчета,
	|	ПриоритетыСчетовУчета.Организация КАК Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов КАК ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МИНИМУМ(ПриоритетыСчетовУчета.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втНаивысшиеПриоритетыСчетов
	|ИЗ
	|	втПриоритетыСчетовУчета КАК ПриоритетыСчетовУчета
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыСчетовУчета.ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета,
	|	ПриоритетыСчетовУчета.Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	Приоритет,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПриоритетыСчетовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки КАК ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета КАК МестоУчета,
	|	ПриоритетыСчетовУчета.Организация КАК Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов КАК ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ПриоритетыСчетовУчета.СчетУчетаДолгосрочный КАК СчетУчетаДолгосрочный,
	|	ПриоритетыСчетовУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаОбъектовУчета
	|ИЗ
	|	втПриоритетыСчетовУчета КАК ПриоритетыСчетовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНаивысшиеПриоритетыСчетов КАК НаивысшиеПриоритетыСчетов
	|		ПО ПриоритетыСчетовУчета.ОбъектУчета = НаивысшиеПриоритетыСчетов.ОбъектУчета
	|		 И ПриоритетыСчетовУчета.ОбъектНастройки = НаивысшиеПриоритетыСчетов.ОбъектНастройки
	|		 И ПриоритетыСчетовУчета.МестоУчета = НаивысшиеПриоритетыСчетов.МестоУчета
	|		 И ПриоритетыСчетовУчета.Организация = НаивысшиеПриоритетыСчетов.Организация
	|		 И ПриоритетыСчетовУчета.Приоритет = НаивысшиеПриоритетыСчетов.Приоритет
	|		 И ПриоритетыСчетовУчета.ПланСчетов = НаивысшиеПриоритетыСчетов.ПланСчетов
	|		 И ПриоритетыСчетовУчета.НастройкаФормированияПроводок = НаивысшиеПриоритетыСчетов.НастройкаФормированияПроводок
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыСчетовУчета.ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета,
	|	ПриоритетыСчетовУчета.Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок,
	|	ПриоритетыСчетовУчета.СчетУчетаДолгосрочный,
	|	ПриоритетыСчетовУчета.СчетУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втПриоритетыСчетовУчета");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втНаивысшиеПриоритетыСчетов");
	
	ДобавитьТаблицуНастроекФормированияПроводок(Запрос, ТекстыЗапросов);
	ДобавитьТаблицуУчетныхПолитикФинансовогоУчета(Запрос, ТекстыЗапросов);
	ДобавитьТаблицуНастроекУчетаПрочихОпераций(ТекстыЗапросов);
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиПроводокПоПериодам.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)) КАК ПланСчетов,
	|	ЕСТЬNULL(НастройкиПроводокПоПериодам.НастройкаФормированияПроводок, ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)) КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(НастройкиПроводокПоПериодам.ВыделениеДолгосрочныхАктивовОбязательств, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПериодам.ДлительностьОперационногоЦикла, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ДатаПогашенияДт = ДАТАВРЕМЯ(0001,01,01)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втИсточникиСоСрокамиОбращения КАК ИсточникиСоСрокамиОбращения
	|			ГДЕ
	|				ИсточникиСоСрокамиОбращения.ИмяРегистра = ДвиженияДебетКредит.ИмяРегистраДт
	|				И ИсточникиСоСрокамиОбращения.ОбъектУчета = ДвиженияДебетКредит.ОбъектУчетаДт
	|			)
	|			ТОГДА ЛОЖЬ
	|		КОГДА РАЗНОСТЬДАТ(ДвиженияДебетКредит.Период, ДвиженияДебетКредит.ДатаПогашенияДт, МЕСЯЦ) >= УчетнаяПолитикаПоПериодам.ДлительностьОперационногоЦикла
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(НастройкиПроводокПоПериодам.ВыделениеДолгосрочныхАктивовОбязательств, ЛОЖЬ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПериодам.ДлительностьОперационногоЦикла, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.ДатаПогашенияКт = ДАТАВРЕМЯ(0001,01,01)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втИсточникиСоСрокамиОбращения КАК ИсточникиСоСрокамиОбращения
	|			ГДЕ
	|				ИсточникиСоСрокамиОбращения.ИмяРегистра = ДвиженияДебетКредит.ИмяРегистраКт
	|				И ИсточникиСоСрокамиОбращения.ОбъектУчета = ДвиженияДебетКредит.ОбъектУчетаКт
	|			)
	|			ТОГДА ЛОЖЬ
	|		КОГДА РАЗНОСТЬДАТ(ДвиженияДебетКредит.Период, ДвиженияДебетКредит.ДатаПогашенияКт, МЕСЯЦ) >= УчетнаяПолитикаПоПериодам.ДлительностьОперационногоЦикла
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиУчетаПрочихОперацийДт.НастройкаСчетовУчета ЕСТЬ NULL
	|			ТОГДА НастройкиУчетаПрочихОперацийДт.НастройкаСчетовУчета
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиУчетаПрочихОперацийКт.НастройкаСчетовУчета ЕСТЬ NULL
	|			ТОГДА НастройкиУчетаПрочихОперацийКт.НастройкаСчетовУчета
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияДебетКредит.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСНастройкамиДебетКредит
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПериодам КАК НастройкиПроводокПоПериодам
	|		ПО НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НастройкиПроводокПоПериодам.Период
	|		 И ДвиженияДебетКредит.Организация = НастройкиПроводокПоПериодам.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ втУчетнаяПолитикаПоПериодам КАК УчетнаяПолитикаПоПериодам
	|		ПО НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = УчетнаяПолитикаПоПериодам.Период
	|		 И ДвиженияДебетКредит.Организация = УчетнаяПолитикаПоПериодам.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиУчетаПрочихОпераций КАК НастройкиУчетаПрочихОперацийДт
	|		ПО ДвиженияДебетКредит.НомерЗаписи = НастройкиУчетаПрочихОперацийДт.НомерЗаписи
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = НастройкиУчетаПрочихОперацийДт.ПланСчетов
	|		 И НастройкиУчетаПрочихОперацийДт.ДебетКредит = ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ЭтоСторноДт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|		 КОНЕЦ
	|		И ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиДт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиУчетаПрочихОпераций КАК НастройкиУчетаПрочихОперацийКт
	|		ПО ДвиженияДебетКредит.НомерЗаписи = НастройкиУчетаПрочихОперацийКт.НомерЗаписи
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = НастройкиУчетаПрочихОперацийКт.ПланСчетов
	|		 И НастройкиУчетаПрочихОперацийКт.ДебетКредит = ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ЭтоСторноКт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|		 КОНЕЦ
	|		И ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиКт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|		ГДЕ
	|			ПризнакиУчетаКорреспонденций.ОбъектУчетаДт = ДвиженияДебетКредит.ОбъектУчетаДт
	|			И ПризнакиУчетаКорреспонденций.ОбъектУчетаКт = ДвиженияДебетКредит.ОбъектУчетаКт
	|			И ПризнакиУчетаКорреспонденций.ПризнакУчета = &ПризнакУчетаВыручкаБезНДС
	|			И ПризнакиУчетаКорреспонденций.Значение <> НастройкиПроводокПоПериодам.ВыручкаБезНДС
	|		)
	|	И ((ДвиженияДебетКредит.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		И ДвиженияДебетКредит.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности))
	|		ИЛИ НастройкиПроводокПоПериодам.СпособУчетаНесобственныхЦенностей = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ОтражаютсяНаЗабалансовыхСчетах))
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	МестоУчетаДт,
	|	МестоУчетаКт,
	|	Организация,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	УдаляемыеВременныеТаблицы.Добавить("втДвиженияДебетКредит");
	УдаляемыеВременныеТаблицы.Добавить("втИсточникиСоСрокамиОбращения");
	УдаляемыеВременныеТаблицы.Добавить("втНастройкиПроводокПоПериодам");
	УдаляемыеВременныеТаблицы.Добавить("втУчетнаяПолитикаПоПериодам");
	УдаляемыеВременныеТаблицы.Добавить("втНастройкиУчетаПрочихОпераций");
	УдаляемыеВременныеТаблицы.Добавить("втПризнакиУчетаКорреспонденций");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияДебетКредит.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияДебетКредит.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиДт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|			ТОГДА НастройкиСчетовПрочихОперацийДт.СчетУчета
	|		КОГДА ДвиженияДебетКредит.ДолгосрочныйДт
	|			ТОГДА СчетаОбъектовУчетаДт.СчетУчетаДолгосрочный
	|		ИНАЧЕ СчетаОбъектовУчетаДт.СчетУчета
	|	КОНЕЦ, ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)) КАК СчетУчетаДт,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиКт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|			ТОГДА НастройкиСчетовПрочихОперацийКт.СчетУчета
	|		КОГДА ДвиженияДебетКредит.ДолгосрочныйКт
	|			ТОГДА СчетаОбъектовУчетаКт.СчетУчетаДолгосрочный
	|		ИНАЧЕ СчетаОбъектовУчетаКт.СчетУчета
	|	КОНЕЦ, ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияДебетКредит.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетамиДебетКредит
	|ИЗ
	|	втДвиженияСНастройкамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОбъектовУчета КАК СчетаОбъектовУчетаДт
	|		ПО ДвиженияДебетКредит.ОбъектУчетаДт = СчетаОбъектовУчетаДт.ОбъектУчета
	|		 И ДвиженияДебетКредит.ОбъектНастройкиДт = СчетаОбъектовУчетаДт.ОбъектНастройки
	|		 И ДвиженияДебетКредит.МестоУчетаДт = СчетаОбъектовУчетаДт.МестоУчета
	|		 И ДвиженияДебетКредит.Организация = СчетаОбъектовУчетаДт.Организация
	|		 И ДвиженияДебетКредит.ПланСчетов = СчетаОбъектовУчетаДт.ПланСчетов
	|		 И ДвиженияДебетКредит.НастройкаФормированияПроводок = СчетаОбъектовУчетаДт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОбъектовУчета КАК СчетаОбъектовУчетаКт
	|		ПО ДвиженияДебетКредит.ОбъектУчетаКт = СчетаОбъектовУчетаКт.ОбъектУчета
	|		 И ДвиженияДебетКредит.ОбъектНастройкиКт = СчетаОбъектовУчетаКт.ОбъектНастройки
	|		 И ДвиженияДебетКредит.МестоУчетаКт = СчетаОбъектовУчетаКт.МестоУчета
	|		 И ДвиженияДебетКредит.Организация = СчетаОбъектовУчетаКт.Организация
	|		 И ДвиженияДебетКредит.ПланСчетов = СчетаОбъектовУчетаКт.ПланСчетов
	|		 И ДвиженияДебетКредит.НастройкаФормированияПроводок = СчетаОбъектовУчетаКт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийДт
	|		ПО ДвиженияДебетКредит.ОбъектНастройкиДт = НастройкиСчетовПрочихОперацийДт.Ссылка
	|		 И ДвиженияДебетКредит.ПланСчетов = НастройкиСчетовПрочихОперацийДт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийКт
	|		ПО ДвиженияДебетКредит.ОбъектНастройкиКт = НастройкиСчетовПрочихОперацийКт.Ссылка
	|		 И ДвиженияДебетКредит.ПланСчетов = НастройкиСчетовПрочихОперацийКт.ПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчетаДт,
	|	СчетУчетаКт
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСНастройкамиДебетКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСчетаОбъектовУчета");
	
КонецПроцедуры

Процедура ПроверитьОшибкиКорреспонденций(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втОшибкиКорреспонденций
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	ДвиженияСоСчетами.ИмяРегистраДт = """"
	|	ИЛИ ДвиженияСоСчетами.ИмяРегистраКт = """"
	|	ИЛИ ДвиженияСоСчетами.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.ИдентификаторФинЗаписи = """"
	|	ИЛИ ДвиженияСоСчетами.СуммаУпрДт <> ДвиженияСоСчетами.СуммаУпрКт
	|	ИЛИ ДвиженияСоСчетами.СуммаРеглДт <> ДвиженияСоСчетами.СуммаРеглКт
	|	ИЛИ ДвиженияСоСчетами.ПланСчетов = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|	ИЛИ (ДвиженияСоСчетами.СчетУчетаДт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|		И ДвиженияСоСчетами.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		И (ДвиженияСоСчетами.ПланСчетов.ПроводкиСКорреспонденцией
	|			ИЛИ ДвиженияСоСчетами.ИмяРегистраДт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ИЛИ ДвиженияСоСчетами.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)))
	|	ИЛИ (ДвиженияСоСчетами.СчетУчетаКт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|		И ДвиженияСоСчетами.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		И (ДвиженияСоСчетами.ПланСчетов.ПроводкиСКорреспонденцией
	|			ИЛИ ДвиженияСоСчетами.ИмяРегистраКт <> &ИмяРегистраСлужебныхОбъектовУчета
	|			ИЛИ ДвиженияСоСчетами.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЛОЖЬ КАК ДолгосрочныйДт,
	|	ЛОЖЬ КАК ДолгосрочныйКт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	КОНЕЦ) КАК СчетУчетаДт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	КОНЕЦ) КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраДт,
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраКт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	КОНЕЦ) КАК ОбъектУчетаДт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	КОНЕЦ) КАК ОбъектУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектНастройкиДт,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектНастройкиКт,
	|	ЛОЖЬ КАК ЭтоСторноДт,
	|	ЛОЖЬ КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозОперации,
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрКт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	(ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И НЕ ДвиженияСоСчетами.ОбъектУчетаДт В
	|		(ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков),
	|		 ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)))
	|	ИЛИ
	|	(ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И НЕ ДвиженияСоСчетами.ОбъектУчетаКт В
	|		(ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков),
	|		 ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)))
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.Регистратор,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|	ИЛИ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация,
	|	ПланСчетов
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияПоПрочимАктивамПассивам.Период КАК Период,
	|	ДвиженияПоПрочимАктивамПассивам.Регистратор КАК Регистратор,
	|	ДвиженияПоПрочимАктивамПассивам.Организация КАК Организация,
	|	ДвиженияПоПрочимАктивамПассивам.Статья КАК Статья,
	|	ДвиженияПоПрочимАктивамПассивам.ДебетКредит КАК ДебетКредит,
	|	ДвиженияПоПрочимАктивамПассивам.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияПоПрочимАктивамПассивам.НастройкаХозяйственнойОперации КАК НастройкаХозОперации
	|ПОМЕСТИТЬ втДвиженияПоПрочимАктивамПассивам
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ДвиженияПоПрочимАктивамПассивам
	|		ПО ОшибкиКорреспонденций.Период = ДвиженияПоПрочимАктивамПассивам.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ДвиженияПоПрочимАктивамПассивам.Регистратор
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ДвиженияПоПрочимАктивамПассивам.ИдентификаторФинЗаписи
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ДвиженияПоПрочимАктивамПассивам.НастройкаХозяйственнойОперации
	|		 И ОшибкиКорреспонденций.Организация = ДвиженияПоПрочимАктивамПассивам.Организация
	|ГДЕ
	|	(ОшибкиКорреспонденций.ИмяРегистраДт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ОшибкиКорреспонденций.СчетУчетаДт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка))
	|	ИЛИ
	|	(ОшибкиКорреспонденций.ИмяРегистраКт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ОшибкиКорреспонденций.СчетУчетаКт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка))
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация,
	|	ДебетКредит
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОшибкиКорреспонденций.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ОшибкиКорреспонденций.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ОшибкиКорреспонденций.СчетУчетаДт КАК СчетУчетаДт,
	|	ОшибкиКорреспонденций.СчетУчетаКт КАК СчетУчетаКт,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОшибкиКорреспонденций.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОшибкиКорреспонденций.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОшибкиКорреспонденций.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОшибкиКорреспонденций.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ОшибкиКорреспонденций.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ТИПЗНАЧЕНИЯ(ОшибкиКорреспонденций.ОбъектНастройкиДт) КАК ТипОбъектаНастройкиДт,
	|	ТИПЗНАЧЕНИЯ(ОшибкиКорреспонденций.ОбъектНастройкиКт) КАК ТипОбъектаНастройкиКт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыДт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовДт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыКт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовКт,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор,
	|	ОшибкиКорреспонденций.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиКорреспонденций.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиКорреспонденций.СуммаУпрДт КАК СуммаУпрДт,
	|	ОшибкиКорреспонденций.СуммаУпрКт КАК СуммаУпрКт,
	|	ОшибкиКорреспонденций.СуммаРеглДт КАК СуммаРеглДт,
	|	ОшибкиКорреспонденций.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|	ЛЕВОЕ СОЕДИНЕНИЕ втДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыДт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыДт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыДт.Регистратор
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыДт.ИдентификаторФинЗаписи
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыДт.НастройкаХозОперации
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыДт.Организация
	|		 И ПрочиеАктивыПассивыДт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноДт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|		 КОНЕЦ
	|		 И ОшибкиКорреспонденций.ИмяРегистраДт = &ИмяРегистраПрочиеАктивыПассивы
	|		 И ОшибкиКорреспонденций.СчетУчетаДт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ втДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыКт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыКт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыКт.Регистратор
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыКт.ИдентификаторФинЗаписи
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыКт.НастройкаХозОперации
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыКт.Организация
	|		 И ПрочиеАктивыПассивыКт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноКт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|		 КОНЕЦ
	|		 И ОшибкиКорреспонденций.ИмяРегистраКт = &ИмяРегистраПрочиеАктивыПассивы
	|		 И ОшибкиКорреспонденций.СчетУчетаКт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.ПланСчетов.ПроводкиСКорреспонденцией КАК ПроводкиСКорреспонденцией,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Регистратор,
	|	ОшибкиКорреспонденций.Организация,
	|	ОшибкиКорреспонденций.ПланСчетов
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	Выборка = Результаты[Результаты.ВГраница() - 1].Выбрать();
	ВыборкаПроводки = Результаты[Результаты.ВГраница()].Выбрать();
	
	НастройкиПроводок = НастройкиФормированияПроводокПоПараметрамЗапроса(Запрос.Параметры);
	РасширенноеОписаниеОбъектовУчета = Перечисления.ОбъектыФинансовогоУчета.РасширенноеОписаниеОбъектовУчетаДляНастройки(НастройкиПроводок);
	
	Пока ВыборкаПроводки.Следующий() Цикл
		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(НоваяПроводка, ВыборкаПроводки, "ПланСчетов,Период,Организация,Регистратор");
		ОшибкиСтатусыПроводки = Новый Соответствие();
		
		СтруктураПоиска = Новый Структура("ПланСчетов,Период,Организация,Регистратор");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПроводки);
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторФинЗаписи) Тогда
				
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = НСтр("ru = 'Не заполнен идентификатор фин.записи в %1';
									|en = 'Financial record ID is required in %1'");
				Если НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт)
					ИЛИ Выборка.ИмяРегистраДт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт)
					ИЛИ Выборка.ИмяРегистраКт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт])));
				ИначеЕсли Выборка.ИмяРегистраДт = Выборка.ИмяРегистраКт Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт])));
				Иначе
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистрах ""%1"" и ""%2""';
																		|en = 'the ""%1"" and ""%2"" registers'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				КонецЕсли;
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт) Тогда
				
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
											|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'"),
					ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
					Выборка.ИдентификаторФинЗаписи);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт) Тогда
				
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
											|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'"),
					ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
					Выборка.ИдентификаторФинЗаписи);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(Выборка.ОбъектУчетаДт)
					И Выборка.ИмяРегистраДт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен объект учета для записи регистра ""%1"" с идентификатором %2';
												|en = 'Accounting object is not defined for the ""%1"" register record with the %2 ID'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
						Выборка.ИдентификаторФинЗаписи);
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ОбъектУчетаКт)
					И Выборка.ИмяРегистраКт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен объект учета для записи регистра ""%1"" с идентификатором %2';
												|en = 'Accounting object is not defined for the ""%1"" register record with the %2 ID'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
						Выборка.ИдентификаторФинЗаписи);
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				
				Если Выборка.СуммаУпрДт <> Выборка.СуммаУпрКт Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					Если Выборка.ИмяРегистраДт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы управленческого учета дебета и кредита по объекту учета ""%1""';
													|en = 'The amounts of management accounting of debit and credit for the ""%1"" accounting object do not match'"),
							Перечисления.ОбъектыФинансовогоУчета.ПредставлениеОбъектаУчетаСГруппой(
								?(ЗначениеЗаполнено(Выборка.ОбъектУчетаДт), Выборка.ОбъектУчетаДт, Выборка.ОбъектУчетаКт),
								РасширенноеОписаниеОбъектовУчета));
					Иначе
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы управленческого учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
													|en = 'The amounts of management accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'"),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
							Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				
				Если Выборка.СуммаРеглДт <> Выборка.СуммаРеглКт Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					Если Выборка.ИмяРегистраДт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы регламентированного учета дебета и кредита по объекту учета ""%1""';
													|en = 'The amounts of local accounting of debit and credit for the ""%1"" accounting object do not match'"),
							Перечисления.ОбъектыФинансовогоУчета.ПредставлениеОбъектаУчетаСГруппой(
								?(ЗначениеЗаполнено(Выборка.ОбъектУчетаДт), Выборка.ОбъектУчетаДт, Выборка.ОбъектУчетаКт),
								РасширенноеОписаниеОбъектовУчета));
					Иначе
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы регламентированного учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
													|en = 'The amounts of local accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'"),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
							Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПланСчетов) Тогда
				
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен план счетов международного учета организации ""%1""';
											|en = 'Financial accounting chart of accounts of the ""%1"" company is not defined'"), Выборка.Организация);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.НастройкаФормированияПроводок) Тогда
				
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определена настройка формирования проводок организации ""%1"" по плану счетов ""%2""';
											|en = 'Posting schema of the ""%1"" company for the ""%2"" chart of accounts is not defined'"),
					Выборка.Организация, Выборка.ПланСчетов);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(Выборка.СчетУчетаДт) И ЗначениеЗаполнено(Выборка.ОбъектУчетаДт)
				   И (ВыборкаПроводки.ПроводкиСКорреспонденцией
						ИЛИ Выборка.ИмяРегистраДт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
						ИЛИ Выборка.ОбъектУчетаДт = Перечисления.ОбъектыФинансовогоУчета.ВводОстатков)
				   И Выборка.ОбъектУчетаДт <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
					Если Выборка.ТипОбъектаНастройкиДт = Тип("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций") Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета прочих активов и пассивов по статье ""%1""';
													|en = 'Ledger account of other assets and liabilities for the ""%1"" item is not defined'"),
							Выборка.СтатьяАктивовПассивовДт);
					Иначе
						ЗарегистрироватьПустойСчетДляНастройки(Выборка, "Дт");
						ПредставлениеСрокаОбращения = НРег(ПредставлениеСрокаОбращения(Выборка, Запрос.Параметры, "Дт"));
						ПредставлениеОбъектаУчетаДт = Перечисления.ОбъектыФинансовогоУчета.ПредставлениеОбъектаУчетаСГруппой(
							Выборка.ОбъектУчетаДт, РасширенноеОписаниеОбъектовУчета);
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен %1 счет учета для объекта учета ""%2"" с %3';
													|en = 'Ledger account %1 is not identified for the ""%2"" accounting object with %3'"),
							ПредставлениеСрокаОбращения,
							ПредставлениеОбъектаУчетаДт,
							?(ЗначениеЗаполнено(Выборка.ОбъектНастройкиДт),
								СтрШаблон(НСтр("ru = 'настройкой ""%1""';
												|en = 'the ""%1"" setting'"), Выборка.ОбъектНастройкиДт),
								НСтр("ru = 'пустой настройкой';
									|en = 'empty setting'")));
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.СчетУчетаКт) И ЗначениеЗаполнено(Выборка.ОбъектУчетаКт)
				   И (ВыборкаПроводки.ПроводкиСКорреспонденцией
						ИЛИ Выборка.ИмяРегистраКт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
						ИЛИ Выборка.ОбъектУчетаКт = Перечисления.ОбъектыФинансовогоУчета.ВводОстатков)
				   И Выборка.ОбъектУчетаКт <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
					Если Выборка.ТипОбъектаНастройкиКт = Тип("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций") Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета прочих активов и пассивов по статье ""%1""';
													|en = 'Ledger account of other assets and liabilities for the ""%1"" item is not defined'"),
							Выборка.СтатьяАктивовПассивовКт);
					Иначе
						ЗарегистрироватьПустойСчетДляНастройки(Выборка, "Кт");
						ПредставлениеСрокаОбращения = НРег(ПредставлениеСрокаОбращения(Выборка, Запрос.Параметры, "Кт"));
						ПредставлениеОбъектаУчетаКт = Перечисления.ОбъектыФинансовогоУчета.ПредставлениеОбъектаУчетаСГруппой(
							Выборка.ОбъектУчетаКт, РасширенноеОписаниеОбъектовУчета);
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен %1 счет учета для объекта учета ""%2"" с %3';
													|en = 'Ledger account %1 is not identified for the ""%2"" accounting object with %3'"),
							ПредставлениеСрокаОбращения,
							ПредставлениеОбъектаУчетаКт,
							?(ЗначениеЗаполнено(Выборка.ОбъектНастройкиКт),
								СтрШаблон(НСтр("ru = 'настройкой ""%1""';
												|en = 'the ""%1"" setting'"), Выборка.ОбъектНастройкиКт),
								НСтр("ru = 'пустой настройкой';
									|en = 'empty setting'")));
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ОшибкиСтатусыПроводки Цикл
			МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(НоваяПроводка, КлючИЗначение.Ключ);
			МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(НоваяПроводка, КлючИЗначение.Значение);
		КонецЦикла;
		
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
	КонецЦикла;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втРегистраторыСОшибками
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Регистратор,
	|	ОшибкиКорреспонденций.Организация,
	|	ОшибкиКорреспонденций.ПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ПланСчетов
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияПоПрочимАктивамПассивам");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаУпрКт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаРеглДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаРеглКт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаВалДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаВалКт < 0
	|			  ИЛИ ДвиженияСоСчетами.КоличествоДт < 0
	|			  ИЛИ ДвиженияСоСчетами.КоличествоКт < 0
	|		ИНАЧЕ ДвиженияСоСчетами.ЭтоСторноДт ИЛИ ДвиженияСоСчетами.ЭтоСторноКт
	|	КОНЕЦ КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втРегистраторыСОшибками КАК РегистраторыСОшибками
	|		ГДЕ
	|			РегистраторыСОшибками.Период = ДвиженияСоСчетами.Период
	|			И РегистраторыСОшибками.Регистратор = ДвиженияСоСчетами.Регистратор
	|			И РегистраторыСОшибками.Организация = ДвиженияСоСчетами.Организация
	|			И РегистраторыСОшибками.ПланСчетов = ДвиженияСоСчетами.ПланСчетов
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ДолгосрочныйДт,
	|	ДолгосрочныйКт,
	|	ИнвертироватьПроводку,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСоСчетамиДебетКредит");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРегистраторыСОшибками");
	
КонецПроцедуры

Процедура ПропуститьПроверкуОшибокКорреспонденций(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаУпрКт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаРеглДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаРеглКт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаВалДт < 0
	|			  ИЛИ ДвиженияСоСчетами.СуммаВалКт < 0
	|			  ИЛИ ДвиженияСоСчетами.КоличествоДт < 0
	|			  ИЛИ ДвиженияСоСчетами.КоличествоКт < 0
	|		ИНАЧЕ ДвиженияСоСчетами.ЭтоСторноДт ИЛИ ДвиженияСоСчетами.ЭтоСторноКт
	|	КОНЕЦ КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ДолгосрочныйДт,
	|	ДолгосрочныйКт,
	|	ИнвертироватьПроводку,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСоСчетамиДебетКредит");
	
КонецПроцедуры

Процедура СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчета,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройки,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчета,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторно,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтроки,
	|	ДвиженияСоСчетами.ВалютаДт КАК Валюта,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашения,
	|	СУММА(ДвиженияСоСчетами.СуммаУпрДт) КАК СуммаУпр,
	|	СУММА(ДвиженияСоСчетами.СуммаРеглДт) КАК СуммаРегл,
	|	СУММА(ДвиженияСоСчетами.СуммаВалДт) КАК СуммаВал,
	|	СУММА(ДвиженияСоСчетами.КоличествоДт) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|ГДЕ
	|	ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.МестоУчетаДт,
	|	ДвиженияСоСчетами.ЭтоСторноДт,
	|	ДвиженияСоСчетами.Регистратор,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ВалютаДт,
	|	ДвиженияСоСчетами.ДатаПогашенияДт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчета,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройки,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчета,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторно,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтроки,
	|	ДвиженияСоСчетами.ВалютаКт КАК Валюта,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашения,
	|	СУММА(ДвиженияСоСчетами.СуммаУпрКт) КАК СуммаУпр,
	|	СУММА(ДвиженияСоСчетами.СуммаРеглКт) КАК СуммаРегл,
	|	СУММА(ДвиженияСоСчетами.СуммаВалКт) КАК СуммаВал,
	|	СУММА(ДвиженияСоСчетами.КоличествоКт) КАК Количество
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|ГДЕ
	|	ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноКт,
	|	ДвиженияСоСчетами.Регистратор,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ВалютаКт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтроки,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	ДатаПогашения,
	|	Организация,
	|	НастройкаХозОперации
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДляПомещения", "вт" + ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета());
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	НастройкиОтраженияОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	НастройкиОтраженияОборотов.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	НастройкиОтраженияОборотов.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	НастройкиОтраженияОборотов.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	НастройкиОтраженияОборотов.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт КАК ПользовательскаяНастройкаЗаполненияСубконтоДт,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт КАК ПользовательскаяНастройкаЗаполненияСубконтоКт,
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫБОР
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ НастройкиОтраженияОборотов.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ НастройкиОтраженияОборотов.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыДляНастройки
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ДолгосрочныйДт = НастройкиОтраженияОборотов.ДолгосрочныйДт
	|		 И ДвиженияСоСчетами.ДолгосрочныйКт = НастройкиОтраженияОборотов.ДолгосрочныйКт
	|		 И НЕ ДвиженияСоСчетами.ИнвертироватьПроводку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиОтраженияОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	НастройкиОтраженияОборотов.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	НастройкиОтраженияОборотов.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	НастройкиОтраженияОборотов.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	НастройкиОтраженияОборотов.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт КАК ПользовательскаяНастройкаЗаполненияСубконтоДт,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт КАК ПользовательскаяНастройкаЗаполненияСубконтоКт,
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	ВЫБОР
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ НастройкиОтраженияОборотов.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ НастройкиОтраженияОборотов.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ДолгосрочныйДт = НастройкиОтраженияОборотов.ДолгосрочныйКт
	|		 И ДвиженияСоСчетами.ДолгосрочныйКт = НастройкиОтраженияОборотов.ДолгосрочныйДт
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ИсходныйОбъектНастройкиДт,
	|	ИсходныйОбъектНастройкиКт,
	|	МестоУчетаДт,
	|	МестоУчетаКт,
	|	ДатаПогашенияДт,
	|	ДатаПогашенияКт,
	|	Организация,
	|	НастройкаХозОперации,
	|	ЕстьДополнительныйОтборДт,
	|	ЕстьДополнительныйОтборКт
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОборотыДляНастройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ОборотыДляНастройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыДляНастройки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт
	|ПОМЕСТИТЬ втКлючиНастроекОборотов
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДляНастройки.ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт,
	|	ОборотыДляНастройки.ОбъектУчетаДт,
	|	ОборотыДляНастройки.ОбъектУчетаКт,
	|	ОборотыДляНастройки.ДолгосрочныйДт,
	|	ОборотыДляНастройки.ДолгосрочныйКт,
	|	ОборотыДляНастройки.ПорядокПрименения,
	|	ОборотыДляНастройки.ИнвертироватьПроводку,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ДолгосрочныйДт,
	|	ДолгосрочныйКт,
	|	ПорядокПрименения,
	|	ЕстьДополнительныйОтборДт,
	|	ЕстьДополнительныйОтборКт
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйКт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйДт
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйДт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйКт
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт3
	|ПОМЕСТИТЬ втЗначенияСубконтоОборотов
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ДолгосрочныйДт = НастройкиОтраженияОборотов.ДолгосрочныйДт
	|		 И КлючиНастроекОборотов.ДолгосрочныйКт = НастройкиОтраженияОборотов.ДолгосрочныйКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|	И НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	) ИЛИ
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|	И НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	)
	|СГРУППИРОВАТЬ ПО
	|	КлючиНастроекОборотов.ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйКт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйДт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйКт
	|	КОНЕЦ,
	|	КлючиНастроекОборотов.ПорядокПрименения,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ПорядокПрименения,
	|	ИнвертироватьПроводку
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраКт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйКт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйДт
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ДолгосрочныйДт
	|		ИНАЧЕ КлючиНастроекОборотов.ДолгосрочныйКт
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА NULL
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА NULL
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт3
	|ПОМЕСТИТЬ втВыраженияСубконтоОборотов
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ДолгосрочныйДт = НастройкиОтраженияОборотов.ДолгосрочныйДт
	|		 И КлючиНастроекОборотов.ДолгосрочныйКт = НастройкиОтраженияОборотов.ДолгосрочныйКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаДт
	|	И НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	) ИЛИ
	|	НЕ НастройкиОтраженияОборотов.СчетУчетаОпределяетсяНастройкойОбъектаКт
	|	И НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ПорядокПрименения,
	|	ИнвертироватьПроводку
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	КлючиНастроекОборотов.ИмяРегистраДт КАК ИмяРегистраДт,
	|	КлючиНастроекОборотов.ИмяРегистраКт КАК ИмяРегистраКт,
	|	КлючиНастроекОборотов.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	КлючиНастроекОборотов.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	КлючиНастроекОборотов.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	КлючиНастроекОборотов.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	НастройкиОтраженияОборотов.ДополнительныйОтборДт КАК ДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ДополнительныйОтборКт КАК ДополнительныйОтборКт
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ДолгосрочныйДт = НастройкиОтраженияОборотов.ДолгосрочныйДт
	|		 И КлючиНастроекОборотов.ДолгосрочныйКт = НастройкиОтраженияОборотов.ДолгосрочныйКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт
	|	ИЛИ КлючиНастроекОборотов.ЕстьДополнительныйОтборКт
	|ИТОГИ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт
	|");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт
	|	ИЛИ КлючиНастроекОборотов.ЕстьДополнительныйОтборКт
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатОтборОборотов = Результаты[Результаты.ВГраница() - 1];
	РезультатИменаРегистров = Результаты[Результаты.ВГраница()];

	ВыборкаИмяРегистраДт = РезультатОтборОборотов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИмяРегистра = РезультатИменаРегистров.Выбрать();
	
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ПоляИндексирования = ПоляИндексаТаблицОтдельныхКорреспонденций();
	ПоляИндексаРеверса = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляИндексаТаблицЗаменыРеверсаНаСторно();
	РегистрыВосстановленияРасчетовПоСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыВосстановленияРасчетовПоСторно();

	ДоступныеПоляРегистров = Новый Структура();
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		ДоступныеПоляРегистра = Новый Массив();
		
		ИмяТаблицыРегистра = ВыборкаИмяРегистра.ИмяРегистра;
		
		ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ДоступныеПоляРегистра, ИмяТаблицыРегистра);
		
		Если ИмяТаблицыРегистра <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ТаблицаЗаменыРеверса = "втИсходная" + ИмяТаблицыРегистра;
			ТаблицаДляПомещения = "вт" + ИмяТаблицыРегистра;
			
			ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ИмяТаблицыРегистра];
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			
			Если Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
				ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексаРеверса, ТаблицаЗаменыРеверса);
				ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
				
				ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы(Истина);
				ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ТаблицаЗаменыРеверса);
				ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			КонецЕсли;
			
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексирования, ТаблицаДляПомещения);
			
			Если РегистрыВосстановленияРасчетовПоСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
				ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяТаблицыРегистра);
				ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			КонецЕсли;
			
			ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
			
			Если Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
				ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ТаблицаЗаменыРеверса);
			КонецЕсли;
		КонецЕсли;
		
		ДоступныеПоляРегистров.Вставить(ИмяТаблицыРегистра, ДоступныеПоляРегистра);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
	
		ПоляВыбораКомпоновкиДанных = ПоляВыбораКомпоновкиДанных(Запрос.Параметры);
		ТаблицаРезультатовКомпоновкиДанных = ТаблицаРезультатовКомпоновкиДанных(ПоляВыбораКомпоновкиДанных);
		АдресХранилищаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		ИзмеренияНастроекОборотов = ИзмеренияНастроекОтраженияКорреспонденций();
	Иначе
		ТаблицаРезультатовКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Пока ВыборкаИмяРегистраДт.Следующий() Цикл
		ВыборкаИмяРегистраКт = ВыборкаИмяРегистраДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИмяРегистраКт.Следующий() Цикл
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
			|	ОборотыДляНастройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
			|	ОборотыДляНастройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
			|	ОборотыДляНастройки.НомерЗаписи КАК НомерЗаписи,
			|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
			|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
			|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
			|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
			|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
			|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
			|	&ДоступныеПоляТаблицыДт,
			|	&ДоступныеПоляТаблицыКт
			|ИЗ
			|	втОборотыДляНастройки КАК ОборотыДляНастройки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаДт КАК ТаблицаДт
			|		ПО ОборотыДляНастройки.Период = ТаблицаДт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаДт.Регистратор
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаДт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиДт = ТаблицаДт.ИдентификаторСтроки
			|		 И ОборотыДляНастройки.ИмяРегистраДт = &ИмяРегистраДт
			|		 И ОборотыДляНастройки.ОбъектУчетаДт = ТаблицаДт.ОбъектУчета
			|		 И ОборотыДляНастройки.ИсходныйОбъектНастройкиДт = ТаблицаДт.ОбъектНастройки
			|		 И ОборотыДляНастройки.МестоУчетаДт = ТаблицаДт.МестоУчета
			|		 И ОборотыДляНастройки.ДатаПогашенияДт = ТаблицаДт.ДатаПогашения
			|		 И ОборотыДляНастройки.Организация = ТаблицаДт.Организация
			|		 И ВЫБОР
			|			КОГДА ТаблицаДт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаДт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаДт.ЭтоДебет
			|			ИНАЧЕ НЕ ТаблицаДт.ЭтоКредит
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ЭтоСторноДт = ТаблицаДт.ЭтоСторно
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаКт КАК ТаблицаКт
			|		ПО ОборотыДляНастройки.Период = ТаблицаКт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаКт.Регистратор
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаКт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиКт = ТаблицаКт.ИдентификаторСтроки
			|		 И ОборотыДляНастройки.ИмяРегистраКт = &ИмяРегистраКт
			|		 И ОборотыДляНастройки.ОбъектУчетаКт = ТаблицаКт.ОбъектУчета
			|		 И ОборотыДляНастройки.ИсходныйОбъектНастройкиКт = ТаблицаКт.ОбъектНастройки
			|		 И ОборотыДляНастройки.МестоУчетаКт = ТаблицаКт.МестоУчета
			|		 И ОборотыДляНастройки.ДатаПогашенияКт = ТаблицаКт.ДатаПогашения
			|		 И ОборотыДляНастройки.Организация = ТаблицаКт.Организация
			|		 И ВЫБОР
			|			КОГДА ТаблицаКт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаКт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаКт.ЭтоКредит
			|			ИНАЧЕ НЕ ТаблицаКт.ЭтоДебет
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ЭтоСторноКт = ТаблицаКт.ЭтоСторно
			|ГДЕ
			|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт
			|	ИЛИ ОборотыДляНастройки.ЕстьДополнительныйОтборКт
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДт", СтрШаблон("вт%1", ВыборкаИмяРегистраДт.ИмяРегистраДт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКт", СтрШаблон("вт%1", ВыборкаИмяРегистраКт.ИмяРегистраКт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраДт", СтрШаблон("""%1""", ВыборкаИмяРегистраДт.ИмяРегистраДт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраКт", СтрШаблон("""%1""", ВыборкаИмяРегистраКт.ИмяРегистраКт));
			
			ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистров[ВыборкаИмяРегистраДт.ИмяРегистраДт], ТекстЗапроса, "Дт");
			ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистров[ВыборкаИмяРегистраКт.ИмяРегистраКт], ТекстЗапроса, "Кт");
			
			СхемаКомпоновкиДанных = НоваяСхемаКомпоновкиДанных(ТекстЗапроса);
			АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресХранилищаКомпоновкиДанных);
			КомпоновщикНастроек = НовыйКомпоновщикНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных, ПоляВыбораКомпоновкиДанных, Запрос.Параметры);
			
			ВыборкаОтборы = ВыборкаИмяРегистраКт.Выбрать();
			Если ВыборкаОтборы.Количество() > 1 Тогда
				ГруппаИли = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ЭлементыОтбора = ГруппаИли.Элементы;
			Иначе
				ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
			КонецЕсли;
			
			Пока ВыборкаОтборы.Следующий() Цикл
				ОтборОборота = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ОтборОборота.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ДобавитьИзмеренияНастройкиВОтборКомпоновкиДанных(ИзмеренияНастроекОборотов, ВыборкаОтборы, ОтборОборота);
				
				Если ВыборкаОтборы.ЕстьДополнительныйОтборДт Тогда
					ДополнительныйОтборДт = ВыборкаОтборы.ДополнительныйОтборДт; // ХранилищеЗначения -
					КомпоновщикНастроекДт = Новый КомпоновщикНастроекКомпоновкиДанных();
					КомпоновщикНастроекДт.ЗагрузитьНастройки(ДополнительныйОтборДт.Получить());
					СкопироватьОтборКомпоновкиДанных(ОтборОборота, КомпоновщикНастроекДт.Настройки.Отбор, "Дт");
				КонецЕсли;
				
				Если ВыборкаОтборы.ЕстьДополнительныйОтборКт Тогда
					ДополнительныйОтборКт = ВыборкаОтборы.ДополнительныйОтборКт; // ХранилищеЗначения -
					КомпоновщикНастроекКт = Новый КомпоновщикНастроекКомпоновкиДанных();
					КомпоновщикНастроекКт.ЗагрузитьНастройки(ДополнительныйОтборКт.Получить());
					СкопироватьОтборКомпоновкиДанных(ОтборОборота, КомпоновщикНастроекКт.Настройки.Отбор, "Кт");
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьРезультатыКомпоновкиВТаблицу(СхемаКомпоновкиДанных, КомпоновщикНастроек,
				Запрос.МенеджерВременныхТаблиц, ТаблицаРезультатовКомпоновкиДанных);
		КонецЦикла;
	КонецЦикла;
	
	ЕстьОборотыСДополнительнымОтбором = ТаблицаРезультатовКомпоновкиДанных <> Неопределено
		И ТаблицаРезультатовКомпоновкиДанных.Количество() > 0;
	
	Если ЕстьОборотыСДополнительнымОтбором Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаРезультатовКомпоновки.НомерЗаписи КАК НомерЗаписи,
		|	ТаблицаРезультатовКомпоновки.ПорядокПрименения КАК ПорядокПрименения
		|ПОМЕСТИТЬ втОборотыСОтбором
		|ИЗ
		|	&ТаблицаРезультатовКомпоновкиДанных КАК ТаблицаРезультатовКомпоновки
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерЗаписи,
		|	ПорядокПрименения
		|");
		
		Запрос.УстановитьПараметр("ТаблицаРезультатовКомпоновкиДанных", ТаблицаРезультатовКомпоновкиДанных);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыДляНастройки.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	ОборотыДляНастройки.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ОборотыДляНастройки.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ОборотыДляНастройки.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИспользоватьНастройкиКорреспонденцийКт
	|		ИНАЧЕ ОборотыДляНастройки.ИспользоватьНастройкиКорреспонденцийДт
	|	КОНЕЦ КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИспользоватьНастройкиКорреспонденцийДт
	|		ИНАЧЕ ОборотыДляНастройки.ИспользоватьНастройкиКорреспонденцийКт
	|	КОНЕЦ КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.СчетУчетаКт
	|		ИНАЧЕ ОборотыДляНастройки.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.СчетУчетаДт
	|		ИНАЧЕ ОборотыДляНастройки.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ДолгосрочныйКт
	|		ИНАЧЕ ОборотыДляНастройки.ДолгосрочныйДт
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ДолгосрочныйДт
	|		ИНАЧЕ ОборотыДляНастройки.ДолгосрочныйКт
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	ОборотыДляНастройки.НомерЗаписи КАК НомерЗаписи,
	|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраКт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектУчетаКт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектУчетаДт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектНастройкиКт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектНастройкиДт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.МестоУчетаКт
	|		ИНАЧЕ ОборотыДляНастройки.МестоУчетаДт
	|	КОНЕЦ КАК МестоУчетаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.МестоУчетаДт
	|		ИНАЧЕ ОборотыДляНастройки.МестоУчетаКт
	|	КОНЕЦ КАК МестоУчетаКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ЭтоСторноКт
	|		ИНАЧЕ ОборотыДляНастройки.ЭтоСторноДт
	|	КОНЕЦ КАК ЭтоСторноДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ЭтоСторноДт
	|		ИНАЧЕ ОборотыДляНастройки.ЭтоСторноКт
	|	КОНЕЦ КАК ЭтоСторноКт,
	|	ОборотыДляНастройки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыДляНастройки.Организация КАК Организация,
	|	ОборотыДляНастройки.Регистратор КАК Регистратор,
	|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИдентификаторСтрокиКт
	|		ИНАЧЕ ОборотыДляНастройки.ИдентификаторСтрокиДт
	|	КОНЕЦ КАК ИдентификаторСтрокиДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИдентификаторСтрокиДт
	|		ИНАЧЕ ОборотыДляНастройки.ИдентификаторСтрокиКт
	|	КОНЕЦ КАК ИдентификаторСтрокиКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИсходныйОбъектНастройкиКт
	|		ИНАЧЕ ОборотыДляНастройки.ИсходныйОбъектНастройкиДт
	|	КОНЕЦ КАК ИсходныйОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИсходныйОбъектНастройкиДт
	|		ИНАЧЕ ОборотыДляНастройки.ИсходныйОбъектНастройкиКт
	|	КОНЕЦ КАК ИсходныйОбъектНастройкиКт,
	|	ОборотыДляНастройки.РеквизитСторно КАК РеквизитСторно,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ВалютаКт
	|		ИНАЧЕ ОборотыДляНастройки.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ВалютаДт
	|		ИНАЧЕ ОборотыДляНастройки.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ОборотыДляНастройки.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ОборотыДляНастройки.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ОборотыДляНастройки.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ОборотыДляНастройки.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ОборотыДляНастройки.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ОборотыДляНастройки.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ОборотыДляНастройки.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ДатаПогашенияКт
	|		ИНАЧЕ ОборотыДляНастройки.ДатаПогашенияДт
	|	КОНЕЦ КАК ДатаПогашенияДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ДатаПогашенияДт
	|		ИНАЧЕ ОборотыДляНастройки.ДатаПогашенияКт
	|	КОНЕЦ КАК ДатаПогашенияКт,
	|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
	|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
	|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
	|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
	|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
	|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
	|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
	|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыСоСчетами
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|ГДЕ
	|	НЕ ОборотыДляНастройки.ЕстьДополнительныйОтборДт
	|	И НЕ ОборотыДляНастройки.ЕстьДополнительныйОтборКт
	|	ИЛИ &УсловиеОтбораОборотовСДополнительнымОтбором
	|";
	
	Если ЕстьОборотыСДополнительнымОтбором Тогда
		УсловиеОтбораОборотовСДополнительнымОтбором = "ИСТИНА В
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА
		|	ИЗ
		|		втОборотыСОтбором КАК ОборотыСОтбором
		|	ГДЕ
		|		ОборотыСОтбором.НомерЗаписи = ОборотыДляНастройки.НомерЗаписи
		|		И ОборотыСОтбором.ПорядокПрименения = ОборотыДляНастройки.ПорядокПрименения
		|	)
		|";
	Иначе
		УсловиеОтбораОборотовСДополнительнымОтбором = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОтбораОборотовСДополнительнымОтбором",
		УсловиеОтбораОборотовСДополнительнымОтбором);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОборотыДляНастройки");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втКлючиНастроекОборотов");
	
	Если ЕстьОборотыСДополнительнымОтбором Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОборотыСОтбором");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	&ПорядокПримененияНастроекПоОбъектам КАК ПорядокПрименения,
	|	ЛОЖЬ КАК НеОтражаетсяНаСчетах,
	|	ЛОЖЬ КАК РучноеУточнениеПроводки,
	|	ЛОЖЬ КАК ИнвертироватьЗнакРесурсов,
	|	ЛОЖЬ КАК ПрименятьПоследующиеНастройки,
	|	ЛОЖЬ КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	ЛОЖЬ КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втВсеДвиженияИОбороты
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыСоСчетами.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыСоСчетами.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	ОборотыСоСчетами.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ОборотыСоСчетами.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ОборотыСоСчетами.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	ОборотыСоСчетами.ИспользоватьНастройкиКорреспонденцийДт КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	ОборотыСоСчетами.ИспользоватьНастройкиКорреспонденцийКт КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	ОборотыСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ОборотыСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ОборотыСоСчетами.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ОборотыСоСчетами.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ОборотыСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ОборотыСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ОборотыСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыСоСчетами.Период КАК Период,
	|	ОборотыСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОборотыСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОборотыСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОборотыСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ОборотыСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ОборотыСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ОборотыСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ОборотыСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ОборотыСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ОборотыСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыСоСчетами.Организация КАК Организация,
	|	ОборотыСоСчетами.Регистратор КАК Регистратор,
	|	ОборотыСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОборотыСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОборотыСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ОборотыСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ОборотыСоСчетами.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ОборотыСоСчетами.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ОборотыСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ОборотыСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ОборотыСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ОборотыСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ОборотыСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ОборотыСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ОборотыСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ОборотыСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ОборотыСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ОборотыСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ОборотыСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ОборотыСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ОборотыСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ОборотыСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ОборотыСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ОборотыСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ОборотыСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ОборотыСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ОборотыСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ОборотыСоСчетами.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втОборотыСоСчетами КАК ОборотыСоСчетами
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	ПорядокПрименения,
	|	ПрименятьПоследующиеНастройки,
	|	НеОтражаетсяНаСчетах
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСоСчетами");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОборотыСоСчетами");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВсеДвиженияИОбороты.ПорядокПрименения КАК ПорядокПрименения,
	|	ВсеДвиженияИОбороты.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ВсеДвиженияИОбороты.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ВсеДвиженияИОбороты.ИспользоватьНастройкиКорреспонденцийДт КАК ИспользоватьНастройкиКорреспонденцийДт,
	|	ВсеДвиженияИОбороты.ИспользоватьНастройкиКорреспонденцийКт КАК ИспользоватьНастройкиКорреспонденцийКт,
	|	ВсеДвиженияИОбороты.СчетУчетаДт КАК СчетУчетаДт,
	|	ВсеДвиженияИОбороты.СчетУчетаКт КАК СчетУчетаКт,
	|	ВсеДвиженияИОбороты.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ВсеДвиженияИОбороты.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ВсеДвиженияИОбороты.ПланСчетов КАК ПланСчетов,
	|	ВсеДвиженияИОбороты.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВсеДвиженияИОбороты.Период КАК Период,
	|	ВсеДвиженияИОбороты.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ВсеДвиженияИОбороты.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ВсеДвиженияИОбороты.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ВсеДвиженияИОбороты.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ВсеДвиженияИОбороты.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ВсеДвиженияИОбороты.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ТИПЗНАЧЕНИЯ(ВсеДвиженияИОбороты.ОбъектНастройкиДт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийДт,
	|	ТИПЗНАЧЕНИЯ(ВсеДвиженияИОбороты.ОбъектНастройкиКт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийКт,
	|	ВсеДвиженияИОбороты.МестоУчетаДт КАК МестоУчетаДт,
	|	ВсеДвиженияИОбороты.МестоУчетаКт КАК МестоУчетаКт,
	|	ВсеДвиженияИОбороты.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ВсеДвиженияИОбороты.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ВсеДвиженияИОбороты.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВсеДвиженияИОбороты.Организация КАК Организация,
	|	ВсеДвиженияИОбороты.Регистратор КАК Регистратор,
	|	ВсеДвиженияИОбороты.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ВсеДвиженияИОбороты.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВсеДвиженияИОбороты.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ВсеДвиженияИОбороты.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ВсеДвиженияИОбороты.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ВсеДвиженияИОбороты.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ВсеДвиженияИОбороты.РеквизитСторно КАК РеквизитСторно,
	|	ВсеДвиженияИОбороты.ВалютаДт КАК ВалютаДт,
	|	ВсеДвиженияИОбороты.ВалютаКт КАК ВалютаКт,
	|	ВсеДвиженияИОбороты.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ВсеДвиженияИОбороты.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ВсеДвиженияИОбороты.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ВсеДвиженияИОбороты.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ВсеДвиженияИОбороты.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ВсеДвиженияИОбороты.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ВсеДвиженияИОбороты.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ВсеДвиженияИОбороты.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ВсеДвиженияИОбороты.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ВсеДвиженияИОбороты.СуммаУпрДт КАК СуммаУпрДт,
	|	ВсеДвиженияИОбороты.СуммаУпрКт КАК СуммаУпрКт,
	|	ВсеДвиженияИОбороты.СуммаРеглДт КАК СуммаРеглДт,
	|	ВсеДвиженияИОбороты.СуммаРеглКт КАК СуммаРеглКт,
	|	ВсеДвиженияИОбороты.СуммаВалДт КАК СуммаВалДт,
	|	ВсеДвиженияИОбороты.СуммаВалКт КАК СуммаВалКт,
	|	ВсеДвиженияИОбороты.КоличествоДт КАК КоличествоДт,
	|	ВсеДвиженияИОбороты.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втВсеДвиженияИОбороты КАК ВсеДвиженияИОбороты
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втВсеДвиженияИОбороты КАК ПредыдущиеНастройки
	|		ГДЕ
	|			ПредыдущиеНастройки.НомерЗаписи = ВсеДвиженияИОбороты.НомерЗаписи
	|			И ПредыдущиеНастройки.ПорядокПрименения < ВсеДвиженияИОбороты.ПорядокПрименения
	|			И НЕ ПредыдущиеНастройки.ПрименятьПоследующиеНастройки
	|		)
	|	И НЕ ВсеДвиженияИОбороты.НеОтражаетсяНаСчетах
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	СчетУчетаДт,
	|	СчетУчетаКт,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	ИдентификаторФинЗаписи
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втВсеДвиженияИОбороты");
	
КонецПроцедуры

Процедура СформироватьЗапросыАналитикиКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров)
		
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт КАК ИспользоватьНастройкиКорреспонденций,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчета,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчета
	|ПОМЕСТИТЬ втСчетаОбъектовУчета
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.ИмяРегистраДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаДт,
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт КАК ИспользоватьНастройкиКорреспонденций,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчета,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчета
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт,
	|	ДвиженияСоСчетами.СчетУчетаКт,
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчета,
	|	СчетУчета,
	|	ИспользоватьНастройкиКорреспонденций
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаМеждународногоУчета
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.СчетУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаМеждународногоУчета.СчетУчета КАК СчетУчета,
	|	ЕСТЬNULL(СчетаМеждународногоУчета.СчетУчета.Валютный, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(СчетаМеждународногоУчета.СчетУчета.Количественный, ЛОЖЬ) КАК Количественный,
	|	ЕСТЬNULL(СчетаМеждународногоУчета.СчетУчета.УчетПоПодразделениям, ЛОЖЬ) КАК УчетПоПодразделениям,
	|	ЕСТЬNULL(СчетаМеждународногоУчета.СчетУчета.УчетПоНаправлениямДеятельности, ЛОЖЬ) КАК УчетПоНаправлениямДеятельности,
	|	ВЫБОР
	|		КОГДА НЕ ВидыСубконто3.Ссылка ЕСТЬ NULL ТОГДА 3
	|		КОГДА НЕ ВидыСубконто2.Ссылка ЕСТЬ NULL ТОГДА 2
	|		КОГДА НЕ ВидыСубконто1.Ссылка ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСубконто,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто1,
	|	ВидыСубконто1.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто1,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто2,
	|	ВидыСубконто2.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто2,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто2,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто3,
	|	ВидыСубконто3.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто3,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто3
	|ПОМЕСТИТЬ втСвойстваСчетовУчета
	|ИЗ
	|	втСчетаМеждународногоУчета КАК СчетаМеждународногоУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто1
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто1.Ссылка
	|		 И ВидыСубконто1.НомерСтроки = 1
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто2
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто2.Ссылка
	|		 И ВидыСубконто2.НомерСтроки = 2
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто3
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто3.Ссылка
	|		 И ВидыСубконто3.НомерСтроки = 3
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСчетаМеждународногоУчета");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ПланСчетов КАК ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета,
	|	СчетаОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто1
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто1,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто2
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто2,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто3
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто3
	|ПОМЕСТИТЬ втУказанныеЗначенияСубконто
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета КАК НастройкиЗаполненияСубконто
	|		ПО СчетаОбъектовУчета.ПланСчетов = НастройкиЗаполненияСубконто.ПланСчетов
	|		 И СчетаОбъектовУчета.НастройкаФормированияПроводок = НастройкиЗаполненияСубконто.НастройкаФормированияПроводок
	|		 И СчетаОбъектовУчета.ОбъектУчета = НастройкиЗаполненияСубконто.ОбъектУчета
	|		 И СчетаОбъектовУчета.СчетУчета = НастройкиЗаполненияСубконто.СчетУчета
	|ГДЕ
	|	НЕ СчетаОбъектовУчета.ИспользоватьНастройкиКорреспонденций
	|	И (НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	)
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.ОбъектУчета,
	|	СчетаОбъектовУчета.СчетУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто1
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто2
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто3
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	СчетУчета,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ПланСчетов КАК ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета,
	|	СчетаОбъектовУчета.ИмяРегистра КАК ИмяРегистра,
	|	СчетаОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ПОМЕСТИТЬ втВыраженияЗаполненияСубконто
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета КАК НастройкиЗаполненияСубконто
	|		ПО СчетаОбъектовУчета.ПланСчетов = НастройкиЗаполненияСубконто.ПланСчетов
	|		 И СчетаОбъектовУчета.НастройкаФормированияПроводок = НастройкиЗаполненияСубконто.НастройкаФормированияПроводок
	|		 И СчетаОбъектовУчета.ОбъектУчета = НастройкиЗаполненияСубконто.ОбъектУчета
	|		 И СчетаОбъектовУчета.СчетУчета = НастройкиЗаполненияСубконто.СчетУчета
	|ГДЕ
	|	НЕ СчетаОбъектовУчета.ИспользоватьНастройкиКорреспонденций
	|	И (НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистра,
	|	ОбъектУчета,
	|	СчетУчета,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ИмяРегистра КАК ИмяРегистра,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.ИмяРегистра,
	|	СчетаОбъектовУчета.СчетУчета
	|ИТОГИ ПО
	|	ИмяРегистра
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СвойстваСчетовУчета.СчетУчета КАК СчетУчета,
	|	СвойстваСчетовУчета.КоличествоСубконто КАК КоличествоСубконто,
	|	СвойстваСчетовУчета.ВидСубконто1 КАК ВидСубконто1,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто1 КАК ТипЗначенияСубконто1,
	|	СвойстваСчетовУчета.ИмяВидаСубконто1 КАК ИмяВидаСубконто1,
	|	СвойстваСчетовУчета.ВидСубконто2 КАК ВидСубконто2,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто2 КАК ТипЗначенияСубконто2,
	|	СвойстваСчетовУчета.ИмяВидаСубконто2 КАК ИмяВидаСубконто2,
	|	СвойстваСчетовУчета.ВидСубконто3 КАК ВидСубконто3,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто3 КАК ТипЗначенияСубконто3,
	|	СвойстваСчетовУчета.ИмяВидаСубконто3 КАК ИмяВидаСубконто3
	|ИЗ
	|	втСвойстваСчетовУчета КАК СвойстваСчетовУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВыраженияЗаполненияСубконто.ИмяРегистра КАК ИмяРегистра,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто1 КАК ВыражениеСубконто1,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто2 КАК ВыражениеСубконто2,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто3 КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконто
	|СГРУППИРОВАТЬ ПО
	|	ВыраженияЗаполненияСубконто.ИмяРегистра,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто1,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто2,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто3
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Дт
	|		И (НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3)
	|	) ИЛИ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Кт
	|		И (НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраКт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Дт
	|		И (ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеДт3)
	|	) ИЛИ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Кт
	|		И (ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеКт3)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатСчетаУчетаРегистров = Результаты[Результаты.ВГраница() - 2];
	РезультатВидыСубконто = Результаты[Результаты.ВГраница() - 1];
	РезультатВыраженияСубконто = Результаты[Результаты.ВГраница()];
	
	ВыборкаИмяРегистра = РезультатСчетаУчетаРегистров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВидыСубконто = РезультатВидыСубконто.Выбрать();
	ВыборкаВыраженияСубконто = РезультатВыраженияСубконто.Выбрать();
	
	ВсеВидыСубконто = ВсеВидыСубконтоСчетовУчета(ВыборкаВидыСубконто);
	ВсеВыраженияСубконто = ВсеВыраженияЗаполненияСубконто(ВыборкаВыраженияСубконто, Запрос.Параметры);
	
	НастройкиПроводок = НастройкиФормированияПроводокПоПараметрамЗапроса(Запрос.Параметры);
	ОбъектыФинансовогоУчета = Перечисления.ОбъектыФинансовогоУчета.ОписаниеОбъектовФинансовогоУчета(НастройкиПроводок);
	
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ПоляИндексаРеверса = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляИндексаТаблицЗаменыРеверсаНаСторно();
	РегистрыВосстановленияРасчетовПоСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыВосстановленияРасчетовПоСторно();
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	ИндексРезультатаЗапросаАналитики = 0;
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		ВидыСубконтоРегистра = ВидыСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВидыСубконто);
		ВыраженияСубконтоРегистра = ВыраженияСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВыраженияСубконто, Запрос.Параметры);
		
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		
		ИмяТаблицыРегистра = ВыборкаИмяРегистра.ИмяРегистра;
		Если ИмяТаблицыРегистра = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ИмяТаблицыРегистра = "";
		КонецЕсли;
		
		ДобавитьПоляВыбораСубконто(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ВсеВидыСубконто, ВидыСубконтоРегистра, ИмяТаблицыРегистра, ОбъектыФинансовогоУчета);
		
		ДобавитьПоляВыбораВыражений(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ВсеВыраженияСубконто, ВыраженияСубконтоРегистра);
		
		ИмяВременнойТаблицыРегистра = "вт" + ВыборкаИмяРегистра.ИмяРегистра;
		
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицыРегистра) = Неопределено Тогда
			ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ИмяТаблицыРегистра];
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			
			Если Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
				ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексаРеверса, ИмяВременнойТаблицыРегистра);
				ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
				УдаляемыеВременныеТаблицы.Добавить(ИмяВременнойТаблицыРегистра);
				ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 1;
				
				ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы(Истина);
				ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ИмяВременнойТаблицыРегистра);
			Иначе
				ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки);
			КонецЕсли;
			
			Если РегистрыВосстановленияРасчетовПоСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
				ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяТаблицыРегистра);
			КонецЕсли;
		Иначе
			ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы();
			ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ИмяВременнойТаблицыРегистра);
		КонецЕсли;
		
		ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
		Запрос.Параметры.РегистрыВыборкиАналитики.Вставить(ВыборкаИмяРегистра.ИмяРегистра, ИндексРезультатаЗапросаАналитики);
		ИндексРезультатаЗапросаАналитики = ИндексРезультатаЗапросаАналитики + 1;
	КонецЦикла;
	
	Запрос.Параметры.ВсеВидыСубконто = ВсеВидыСубконто;
	Запрос.Параметры.ВсеВыраженияСубконто = ВсеВыраженияСубконто;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.ПланСчетов.ПроводкиСКорреспонденцией КАК ПроводкиСКорреспонденцией,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	СвойстваСчетовУчетаДт.Валютный КАК ВалютныйДт,
	|	СвойстваСчетовУчетаДт.Количественный КАК КоличественныйДт,
	|	СвойстваСчетовУчетаДт.УчетПоПодразделениям КАК УчетПоПодразделениямДт,
	|	СвойстваСчетовУчетаДт.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельностиДт,
	|	СвойстваСчетовУчетаДт.КоличествоСубконто КАК КоличествоСубконтоДт,
	|	СвойстваСчетовУчетаДт.ВидСубконто1 КАК ВидСубконтоДт1,
	|	СвойстваСчетовУчетаДт.ВидСубконто2 КАК ВидСубконтоДт2,
	|	СвойстваСчетовУчетаДт.ВидСубконто3 КАК ВидСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиСчетовПрочихОперацийДт.Субконто1
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт1
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто1
	|	КОНЕЦ КАК ЗначениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиСчетовПрочихОперацийДт.Субконто2
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт2
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто2
	|	КОНЕЦ КАК ЗначениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиСчетовПрочихОперацийДт.Субконто3
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт3
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто3
	|	КОНЕЦ КАК ЗначениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт1 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто1 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт2 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто2 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт3 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто3 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто1
	|	КОНЕЦ КАК ВыражениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто2
	|	КОНЕЦ КАК ВыражениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийДт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто3
	|	КОНЕЦ КАК ВыражениеСубконтоДт3,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт1, ЛОЖЬ) КАК КорВыражениеДт1,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт2, ЛОЖЬ) КАК КорВыражениеДт2,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт3, ЛОЖЬ) КАК КорВыражениеДт3,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	СвойстваСчетовУчетаКт.Валютный КАК ВалютныйКт,
	|	СвойстваСчетовУчетаКт.Количественный КАК КоличественныйКт,
	|	СвойстваСчетовУчетаКт.УчетПоПодразделениям КАК УчетПоПодразделениямКт,
	|	СвойстваСчетовУчетаКт.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельностиКт,
	|	СвойстваСчетовУчетаКт.КоличествоСубконто КАК КоличествоСубконтоКт,
	|	СвойстваСчетовУчетаКт.ВидСубконто1 КАК ВидСубконтоКт1,
	|	СвойстваСчетовУчетаКт.ВидСубконто2 КАК ВидСубконтоКт2,
	|	СвойстваСчетовУчетаКт.ВидСубконто3 КАК ВидСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиСчетовПрочихОперацийКт.Субконто1
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт1
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто1
	|	КОНЕЦ КАК ЗначениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиСчетовПрочихОперацийКт.Субконто2
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт2
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто2
	|	КОНЕЦ КАК ЗначениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиСчетовПрочихОперацийКт.Субконто3
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт3
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто3
	|	КОНЕЦ КАК ЗначениеСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт1 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто1 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт2 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто2 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт3 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто3 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто1
	|	КОНЕЦ КАК ВыражениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто2
	|	КОНЕЦ КАК ВыражениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиКорреспонденцийКт
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто3
	|	КОНЕЦ КАК ВыражениеСубконтоКт3,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт1, ЛОЖЬ) КАК КорВыражениеКт1,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт2, ЛОЖЬ) КАК КорВыражениеКт2,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт3, ЛОЖЬ) КАК КорВыражениеКт3,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ИсходныйОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияСоСчетами.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияСоСчетами.НастройкаХозОперации) КАК НастройкаХозОперацииПредставление,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияСоСчетами.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияСоСчетами.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ДвиженияСоСчетами.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияСоСчетами.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпр,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРегл,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваСчетовУчета КАК СвойстваСчетовУчетаДт
	|		ПО ДвиженияСоСчетами.СчетУчетаДт = СвойстваСчетовУчетаДт.СчетУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваСчетовУчета КАК СвойстваСчетовУчетаКт
	|		ПО ДвиженияСоСчетами.СчетУчетаКт = СвойстваСчетовУчетаКт.СчетУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втУказанныеЗначенияСубконто КАК УказанныеЗначенияСубконтоДт
	|		ПО ДвиженияСоСчетами.ОбъектУчетаДт = УказанныеЗначенияСубконтоДт.ОбъектУчета
	|		 И ДвиженияСоСчетами.СчетУчетаДт = УказанныеЗначенияСубконтоДт.СчетУчета
	|		 И ДвиженияСоСчетами.ПланСчетов = УказанныеЗначенияСубконтоДт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = УказанныеЗначенияСубконтоДт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втУказанныеЗначенияСубконто КАК УказанныеЗначенияСубконтоКт
	|		ПО ДвиженияСоСчетами.ОбъектУчетаКт = УказанныеЗначенияСубконтоКт.ОбъектУчета
	|		 И ДвиженияСоСчетами.СчетУчетаКт = УказанныеЗначенияСубконтоКт.СчетУчета
	|		 И ДвиженияСоСчетами.ПланСчетов = УказанныеЗначенияСубконтоКт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = УказанныеЗначенияСубконтоКт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконтоДт
	|		ПО ДвиженияСоСчетами.ИмяРегистраДт = ВыраженияЗаполненияСубконтоДт.ИмяРегистра
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = ВыраженияЗаполненияСубконтоДт.ОбъектУчета
	|		 И ДвиженияСоСчетами.СчетУчетаДт = ВыраженияЗаполненияСубконтоДт.СчетУчета
	|		 И ДвиженияСоСчетами.ПланСчетов = ВыраженияЗаполненияСубконтоДт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияЗаполненияСубконтоДт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконтоКт
	|		ПО ДвиженияСоСчетами.ИмяРегистраКт = ВыраженияЗаполненияСубконтоКт.ИмяРегистра
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ВыраженияЗаполненияСубконтоКт.ОбъектУчета
	|		 И ДвиженияСоСчетами.СчетУчетаКт = ВыраженияЗаполненияСубконтоКт.СчетУчета
	|		 И ДвиженияСоСчетами.ПланСчетов = ВыраженияЗаполненияСубконтоКт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияЗаполненияСубконтоКт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втЗначенияСубконтоОборотов КАК ЗначенияСубконтоОборотов
	|		ПО ДвиженияСоСчетами.ОбъектУчетаДт = ЗначенияСубконтоОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ЗначенияСубконтоОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ПланСчетов = ЗначенияСубконтоОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ЗначенияСубконтоОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ПорядокПрименения = ЗначенияСубконтоОборотов.ПорядокПрименения
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку = ЗначенияСубконтоОборотов.ИнвертироватьПроводку
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|		ПО ДвиженияСоСчетами.ИмяРегистраДт = ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		 И ДвиженияСоСчетами.ИмяРегистраКт = ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = ВыраженияСубконтоОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ВыраженияСубконтоОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ПланСчетов = ВыраженияСубконтоОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияСубконтоОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ПорядокПрименения = ВыраженияСубконтоОборотов.ПорядокПрименения
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку = ВыраженияСубконтоОборотов.ИнвертироватьПроводку
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийДт
	|		ПО ДвиженияСоСчетами.ОбъектНастройкиДт = НастройкиСчетовПрочихОперацийДт.Ссылка
	|		 И ДвиженияСоСчетами.ПланСчетов = НастройкиСчетовПрочихОперацийДт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийКт
	|		ПО ДвиженияСоСчетами.ОбъектНастройкиКт = НастройкиСчетовПрочихОперацийКт.Ссылка
	|		 И ДвиженияСоСчетами.ПланСчетов = НастройкиСчетовПрочихОперацийКт.ПланСчетов
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемыеВременныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовОбработкиДвиженийРегистров

Процедура ДобавитьТаблицыСведенийОбОбъектахУчета(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ИсточникиСоСрокамиОбращения.ИсточникДанных КАК ИмяРегистра,
	|	ИсточникиСоСрокамиОбращения.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втИсточникиСоСрокамиОбращения
	|ИЗ
	|	&ИсточникиСоСрокамиОбращения КАК ИсточникиСоСрокамиОбращения
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистра,
	|	ОбъектУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОбъектыНесобственныхЦенностей.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ втОбъектыНесобственныхЦенностей
	|ИЗ
	|	&ОбъектыНесобственныхЦенностей КАК ОбъектыНесобственныхЦенностей
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|");
	
	ДобавитьТаблицыПризнаковУчетаКорреспонденций(ТекстыЗапросов);
	
КонецПроцедуры

Процедура ДобавитьТаблицыПризнаковУчетаКорреспонденций(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПризнакиУчетаКорреспонденций.ОбъектУчета КАК ОбъектУчета,
	|	ПризнакиУчетаКорреспонденций.КорОбъектУчета КАК КорОбъектУчета,
	|	ПризнакиУчетаКорреспонденций.ПризнакУчета КАК ПризнакУчета,
	|	ПризнакиУчетаКорреспонденций.Значение КАК Значение
	|ПОМЕСТИТЬ втИсходныеПризнакиУчетаКорреспонденций
	|ИЗ
	|	&ПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПризнакиУчетаКорреспонденций.ПризнакУчета КАК ПризнакУчета,
	|	ПризнакиУчетаКорреспонденций.Значение КАК Значение,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗначения
	|ПОМЕСТИТЬ втЗначенияПризнаковУчетаКорреспонденций
	|ИЗ
	|	втИсходныеПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ПризнакиУчетаКорреспонденций.ПризнакУчета,
	|	ПризнакиУчетаКорреспонденций.Значение
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ЗначенияПризнаковУчетаКорреспонденций.ПризнакУчета КАК ПризнакУчета,
	|	МИНИМУМ(ЗначенияПризнаковУчетаКорреспонденций.Значение) КАК МинимальноеЗначение,
	|	МАКСИМУМ(ЗначенияПризнаковУчетаКорреспонденций.Значение) КАК МаксимальноеЗначение,
	|	КОЛИЧЕСТВО(ЗначенияПризнаковУчетаКорреспонденций.Значение) КАК КоличествоЗначений
	|ПОМЕСТИТЬ втИтогиПризнаковУчетаКорреспонденций
	|ИЗ
	|	втЗначенияПризнаковУчетаКорреспонденций КАК ЗначенияПризнаковУчетаКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПризнаковУчетаКорреспонденций.ПризнакУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ПризнакиУчетаКорреспонденций.ОбъектУчета
	|		ИНАЧЕ ПризнакиУчетаКорреспонденций.КорОбъектУчета
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ПризнакиУчетаКорреспонденций.КорОбъектУчета
	|		ИНАЧЕ ПризнакиУчетаКорреспонденций.ОбъектУчета
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ПризнакиУчетаКорреспонденций.ПризнакУчета КАК ПризнакУчета,
	|	ПризнакиУчетаКорреспонденций.Значение КАК Значение,
	|	ЗначенияПризнаковУчета.НомерЗначения КАК НомерЗначения,
	|	ИтогиПризнаковУчета.МинимальноеЗначение КАК МинимальноеЗначение,
	|	ИтогиПризнаковУчета.МаксимальноеЗначение КАК МаксимальноеЗначение,
	|	ИтогиПризнаковУчета.КоличествоЗначений КАК КоличествоЗначений
	|ПОМЕСТИТЬ втПризнакиУчетаКорреспонденций
	|ИЗ
	|	втИсходныеПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗначенияПризнаковУчетаКорреспонденций КАК ЗначенияПризнаковУчета
	|		ПО ПризнакиУчетаКорреспонденций.ПризнакУчета = ЗначенияПризнаковУчета.ПризнакУчета
	|		 И ПризнакиУчетаКорреспонденций.Значение = ЗначенияПризнаковУчета.Значение
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИтогиПризнаковУчетаКорреспонденций КАК ИтогиПризнаковУчета
	|		ПО ПризнакиУчетаКорреспонденций.ПризнакУчета = ИтогиПризнаковУчета.ПризнакУчета
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ПризнакУчета
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИсходныеПризнакиУчетаКорреспонденций");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втЗначенияПризнаковУчетаКорреспонденций");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиПризнаковУчетаКорреспонденций");
	
КонецПроцедуры

Процедура ДобавитьТаблицыДвиженийДебетаИКредита(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ДвиженияРегистров.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|					ТОГДА ДвиженияРегистров.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА ДвиженияРегистров.СуммаВал
	|				ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|			КОНЕЦ
	|		ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА ДвиженияРегистров.Валюта = ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			И ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		ИНАЧЕ ДвиженияРегистров.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровДебет
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоКредит
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистра,
	|	ОбъектУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыУпр)
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ДвиженияРегистров.Валюта = &ВалютаУправленческогоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|					ТОГДА ДвиженияРегистров.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА ДвиженияРегистров.СуммаВал
	|				ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|			КОНЕЦ
	|		ИНАЧЕ ДвиженияРегистров.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ДвиженияРегистров.СуммаРегл <> 0
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА НЕ ДвиженияРегистров.ИмяРегистра В (&РегистрыБезСуммыРегл)
	|			ТОГДА ДвиженияРегистров.СуммаРегл
	|		КОГДА ДвиженияРегистров.Валюта = ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		КОГДА ДвиженияРегистров.Организация.ВалютаРегламентированногоУчета = &ВалютаУправленческогоУчета
	|			И ДвиженияРегистров.СуммаУпр <> 0
	|			ТОГДА ДвиженияРегистров.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияРегистров.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА ДвиженияРегистров.СуммаВал
	|		ИНАЧЕ ДвиженияРегистров.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровКредит
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоДебет
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистра,
	|	ОбъектУчета
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистров");
	
КонецПроцедуры

Процедура ОбработатьИСоединитьТаблицыДвижений(Запрос, ТекстыЗапросов)
	
	СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, "Дт");
	СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, "Кт");
	
	ОпределитьСложныеПроводкиСУказаниемКорИсточников(Запрос, ТекстыЗапросов);
	
	ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, Запрос.Параметры, "Дт");
	ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, Запрос.Параметры, "Кт");
	
	ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, "Дт");
	ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, "Кт");
	
	СоединитьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСИтогамиДебет");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСИтогамиКредит");
	
КонецПроцедуры

Процедура СвернутьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДетальныеДвижения
	|ИЗ
	|	втДвиженияРегистровДтКт КАК ДвиженияРегистров
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втИсточникиСоСрокамиОбращения КАК ИсточникиСоСрокамиОбращения
	|		ГДЕ
	|			ИсточникиСоСрокамиОбращения.ИмяРегистра = ДвиженияРегистров.ИмяРегистра
	|			И ИсточникиСоСрокамиОбращения.ОбъектУчета = ДвиженияРегистров.ОбъектУчета
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	ИдентификаторСтроки,
	|	ИмяРегистра,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ВидДеятельностиНДС,
	|	Валюта,
	|	ЭтоДтКт,
	|	ЭтоСторно,
	|	РеквизитСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДетальныеДвижения.Период КАК Период,
	|	ДетальныеДвижения.ИмяРегистра КАК ИмяРегистра,
	|	ДетальныеДвижения.ОбъектУчета КАК ОбъектУчета,
	|	ДетальныеДвижения.ОбъектНастройки КАК ОбъектНастройки,
	|	ДетальныеДвижения.МестоУчета КАК МестоУчета,
	|	ДетальныеДвижения.ЭтоДтКт КАК ЭтоДтКт,
	|	ДетальныеДвижения.ЭтоСторно КАК ЭтоСторно,
	|	ДетальныеДвижения.Организация КАК Организация,
	|	ДетальныеДвижения.Регистратор КАК Регистратор,
	|	ДетальныеДвижения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДетальныеДвижения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДетальныеДвижения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДетальныеДвижения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДетальныеДвижения.Валюта КАК Валюта,
	|	ДетальныеДвижения.РеквизитСторно КАК РеквизитСторно,
	|	МАКСИМУМ(ДетальныеДвижения.НомерЗаписи) КАК НомерЗаписи,
	|	МАКСИМУМ(ДетальныеДвижения.ДатаПогашения) КАК ДатаПогашения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДетальныеДвижения.ДатаПогашения) КАК КоличествоЭтаповПогашения,
	|	СУММА(ДетальныеДвижения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДетальныеДвижения.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ДетальныеДвижения.СуммаВал) КАК СуммаВал,
	|	СУММА(ДетальныеДвижения.Количество) КАК Количество
	|ПОМЕСТИТЬ втИтогиДетальныхДвижений
	|ИЗ
	|	втДетальныеДвижения КАК ДетальныеДвижения
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеДвижения.Период,
	|	ДетальныеДвижения.Регистратор,
	|	ДетальныеДвижения.ИдентификаторФинЗаписи,
	|	ДетальныеДвижения.НастройкаХозОперации,
	|	ДетальныеДвижения.ИдентификаторСтроки,
	|	ДетальныеДвижения.ИмяРегистра,
	|	ДетальныеДвижения.ОбъектУчета,
	|	ДетальныеДвижения.ОбъектНастройки,
	|	ДетальныеДвижения.МестоУчета,
	|	ДетальныеДвижения.Организация,
	|	ДетальныеДвижения.ВидДеятельностиНДС,
	|	ДетальныеДвижения.Валюта,
	|	ДетальныеДвижения.ЭтоДтКт,
	|	ДетальныеДвижения.ЭтоСторно,
	|	ДетальныеДвижения.РеквизитСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	ИдентификаторСтроки,
	|	ИмяРегистра,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ВидДеятельностиНДС,
	|	Валюта,
	|	ЭтоДтКт,
	|	ЭтоСторно,
	|	РеквизитСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекущаяТаблицаДвиженийСИтогами = ?(ДтКт = "Дт",
		Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиДебет,
		Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиКредит);
	
	СоздатьТаблицуДвиженийСИтогами = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ТекущаяТаблицаДвиженийСИтогами) = Неопределено;
	
	Если СоздатьТаблицуДвиженийСИтогами Тогда
		ДополнитьТаблицуДвиженийСИтогами = Ложь;
		СоздаваемаяТаблицаДвиженийСИтогами = ТекущаяТаблицаДвиженийСИтогами;
	Иначе
		ДополнитьТаблицуДвиженийСИтогами = ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "втИтогиДетальныхДвижений");
		Если ДополнитьТаблицуДвиженийСИтогами Тогда
			СоздаваемаяТаблицаДвиженийСИтогами = ТекущаяТаблицаДвиженийСИтогами + "1";
			УдаляемаяТаблицаДвиженийСИтогами = ТекущаяТаблицаДвиженийСИтогами;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьТаблицуДвиженийСИтогами ИЛИ ДополнитьТаблицуДвиженийСИтогами Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДетальныеДвижения.Период КАК Период,
		|	ДетальныеДвижения.ИмяРегистра КАК ИмяРегистра,
		|	ДетальныеДвижения.ОбъектУчета КАК ОбъектУчета,
		|	ДетальныеДвижения.ОбъектНастройки КАК ОбъектНастройки,
		|	ДетальныеДвижения.МестоУчета КАК МестоУчета,
		|	ДетальныеДвижения.ЭтоДтКт КАК ЭтоДтКт,
		|	ДетальныеДвижения.ЭтоСторно КАК ЭтоСторно,
		|	ДетальныеДвижения.Организация КАК Организация,
		|	ДетальныеДвижения.Регистратор КАК Регистратор,
		|	ДетальныеДвижения.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДетальныеДвижения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ДетальныеДвижения.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДетальныеДвижения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	ДетальныеДвижения.ДатаПогашения КАК ДатаПогашения,
		|	ДетальныеДвижения.Валюта КАК Валюта,
		|	ДетальныеДвижения.СуммаУпр КАК СуммаУпр,
		|	ДетальныеДвижения.СуммаРегл КАК СуммаРегл,
		|	ДетальныеДвижения.СуммаВал КАК СуммаВал,
		|	ДетальныеДвижения.Количество КАК Количество,
		|	ДетальныеДвижения.РеквизитСторно КАК РеквизитСторно,
		|	ЕСТЬNULL(ИтогиДетальныхДвижений.НомерЗаписи, 0) КАК НомерЗаписи,
		|	ЕСТЬNULL(ИтогиДетальныхДвижений.КоличествоЭтаповПогашения, 1) КАК КоличествоЭтаповПогашения
		|ПОМЕСТИТЬ СоздаваемаяТаблицаДвиженийСИтогами
		|ИЗ
		|	втДетальныеДвижения КАК ДетальныеДвижения
		|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиДетальныхДвижений КАК ИтогиДетальныхДвижений
		|		ПО ДетальныеДвижения.Период = ИтогиДетальныхДвижений.Период
		|		 И ДетальныеДвижения.Регистратор = ИтогиДетальныхДвижений.Регистратор
		|		 И ДетальныеДвижения.ИдентификаторФинЗаписи = ИтогиДетальныхДвижений.ИдентификаторФинЗаписи
		|		 И ДетальныеДвижения.НастройкаХозОперации = ИтогиДетальныхДвижений.НастройкаХозОперации
		|		 И ДетальныеДвижения.ИдентификаторСтроки = ИтогиДетальныхДвижений.ИдентификаторСтроки
		|		 И ДетальныеДвижения.ИмяРегистра = ИтогиДетальныхДвижений.ИмяРегистра
		|		 И ДетальныеДвижения.ОбъектУчета = ИтогиДетальныхДвижений.ОбъектУчета
		|		 И ДетальныеДвижения.ОбъектНастройки = ИтогиДетальныхДвижений.ОбъектНастройки
		|		 И ДетальныеДвижения.МестоУчета = ИтогиДетальныхДвижений.МестоУчета
		|		 И ДетальныеДвижения.Организация = ИтогиДетальныхДвижений.Организация
		|		 И ДетальныеДвижения.ВидДеятельностиНДС = ИтогиДетальныхДвижений.ВидДеятельностиНДС
		|		 И ДетальныеДвижения.Валюта = ИтогиДетальныхДвижений.Валюта
		|		 И ДетальныеДвижения.ЭтоДтКт = ИтогиДетальныхДвижений.ЭтоДтКт
		|		 И ДетальныеДвижения.ЭтоСторно = ИтогиДетальныхДвижений.ЭтоСторно
		|		 И ДетальныеДвижения.РеквизитСторно = ИтогиДетальныхДвижений.РеквизитСторно
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоздаваемаяТаблицаДвиженийСИтогами", СоздаваемаяТаблицаДвиженийСИтогами);
		
		Если ДополнитьТаблицуДвиженийСИтогами Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДетальныеДвиженияСИтогами.Период КАК Период,
			|	ДетальныеДвиженияСИтогами.ИмяРегистра КАК ИмяРегистра,
			|	ДетальныеДвиженияСИтогами.ОбъектУчета КАК ОбъектУчета,
			|	ДетальныеДвиженияСИтогами.ОбъектНастройки КАК ОбъектНастройки,
			|	ДетальныеДвиженияСИтогами.МестоУчета КАК МестоУчета,
			|	ДетальныеДвиженияСИтогами.ЭтоДтКт КАК ЭтоДтКт,
			|	ДетальныеДвиженияСИтогами.ЭтоСторно КАК ЭтоСторно,
			|	ДетальныеДвиженияСИтогами.Организация КАК Организация,
			|	ДетальныеДвиженияСИтогами.Регистратор КАК Регистратор,
			|	ДетальныеДвиженияСИтогами.НастройкаХозОперации КАК НастройкаХозОперации,
			|	ДетальныеДвиженияСИтогами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ДетальныеДвиженияСИтогами.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ДетальныеДвиженияСИтогами.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
			|	ДетальныеДвиженияСИтогами.ДатаПогашения КАК ДатаПогашения,
			|	ДетальныеДвиженияСИтогами.Валюта КАК Валюта,
			|	ДетальныеДвиженияСИтогами.СуммаУпр КАК СуммаУпр,
			|	ДетальныеДвиженияСИтогами.СуммаРегл КАК СуммаРегл,
			|	ДетальныеДвиженияСИтогами.СуммаВал КАК СуммаВал,
			|	ДетальныеДвиженияСИтогами.Количество КАК Количество,
			|	ДетальныеДвиженияСИтогами.РеквизитСторно КАК РеквизитСторно,
			|	ДетальныеДвиженияСИтогами.НомерЗаписи КАК НомерЗаписи,
			|	ДетальныеДвиженияСИтогами.КоличествоЭтаповПогашения КАК КоличествоЭтаповПогашения
			|ИЗ
			|	УдаляемаяТаблицаДвиженийСИтогами КАК ДетальныеДвиженияСИтогами
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УдаляемаяТаблицаДвиженийСИтогами", УдаляемаяТаблицаДвиженийСИтогами);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерЗаписи
		|";
		
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДетальныеДвижения");
	
	Если ДополнитьТаблицуДвиженийСИтогами Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемаяТаблицаДвиженийСИтогами);

		Если ДтКт = "Дт" Тогда
			Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиДебет = СоздаваемаяТаблицаДвиженийСИтогами;
		Иначе
			Запрос.Параметры.ТаблицаДетальныхДвиженийСИтогамиКредит = СоздаваемаяТаблицаДвиженийСИтогами;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втСвернутыеДвиженияДтКт
	|ИЗ
	|	втДвиженияРегистровДтКт КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втИсточникиСоСрокамиОбращения КАК ИсточникиСоСрокамиОбращения
	|		ГДЕ
	|			ИсточникиСоСрокамиОбращения.ИмяРегистра = ДвиженияРегистров.ИмяРегистра
	|			И ИсточникиСоСрокамиОбращения.ОбъектУчета = ДвиженияРегистров.ОбъектУчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИтогиДетальныхДвижений.Период КАК Период,
	|	ИтогиДетальныхДвижений.НомерЗаписи КАК НомерЗаписи,
	|	ИтогиДетальныхДвижений.ИмяРегистра КАК ИмяРегистра,
	|	ИтогиДетальныхДвижений.ОбъектУчета КАК ОбъектУчета,
	|	ИтогиДетальныхДвижений.ОбъектНастройки КАК ОбъектНастройки,
	|	ИтогиДетальныхДвижений.МестоУчета КАК МестоУчета,
	|	ИтогиДетальныхДвижений.ЭтоДтКт КАК ЭтоДтКт,
	|	ИтогиДетальныхДвижений.ЭтоСторно КАК ЭтоСторно,
	|	ИтогиДетальныхДвижений.Организация КАК Организация,
	|	ИтогиДетальныхДвижений.Регистратор КАК Регистратор,
	|	ИтогиДетальныхДвижений.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ИтогиДетальныхДвижений.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ИтогиДетальныхДвижений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ИтогиДетальныхДвижений.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ИтогиДетальныхДвижений.ДатаПогашения КАК ДатаПогашения,
	|	ИтогиДетальныхДвижений.Валюта КАК Валюта,
	|	ИтогиДетальныхДвижений.СуммаУпр КАК СуммаУпр,
	|	ИтогиДетальныхДвижений.СуммаРегл КАК СуммаРегл,
	|	ИтогиДетальныхДвижений.СуммаВал КАК СуммаВал,
	|	ИтогиДетальныхДвижений.Количество КАК Количество,
	|	ИтогиДетальныхДвижений.РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	втИтогиДетальныхДвижений КАК ИтогиДетальныхДвижений
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втДвиженияРегистровДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиДетальныхДвижений");
	
КонецПроцедуры

Процедура ОпределитьСложныеПроводкиСУказаниемКорИсточников(Запрос, ТекстыЗапросов)
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втКорИсточникиДанных") = Неопределено Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	КорИсточникиДанных.ОбъектУчета КАК ОбъектУчета,
		|	КорИсточникиДанных.КорИсточникДанных КАК КорИмяРегистра,
		|	КорИсточникиДанных.Идентификатор КАК Идентификатор,
		|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор
		|ПОМЕСТИТЬ втКорИсточникиДанных
		|ИЗ
		|	&КорИсточникиДанных КАК КорИсточникиДанных
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	КорИсточникДанных
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	КорИсточникиДанных.ОбъектУчета КАК ОбъектУчета,
		|	КорИсточникиДанных.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ втИдентификаторыКорИсточниковДанных
		|ИЗ
		|	втКорИсточникиДанных КАК КорИсточникиДанных
		|СГРУППИРОВАТЬ ПО
		|	КорИсточникиДанных.ОбъектУчета,
		|	КорИсточникиДанных.Идентификатор
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебет.Период КАК Период,
	|	ДвиженияДебет.Организация КАК Организация,
	|	ДвиженияДебет.Регистратор КАК Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КорИсточникиДанных.КорИмяРегистра КАК КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.ОбъектУчета) КАК КоличествоОбъектовУчета
	|ПОМЕСТИТЬ втИдентификаторыОперацийДебет
	|ИЗ
	|	втСвернутыеДвиженияДебет КАК ДвиженияДебет
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|		ПО ДвиженияДебет.ОбъектУчета = КорИсточникиДанных.ОбъектУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.ИдентификаторФинЗаписи,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.НастройкаХозОперации,
	|	КорИсточникиДанных.КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	КорИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияКредит.Период КАК Период,
	|	ДвиженияКредит.Организация КАК Организация,
	|	ДвиженияКредит.Регистратор КАК Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КорИсточникиДанных.КорИмяРегистра КАК КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор КАК КорИдентификатор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.ОбъектУчета) КАК КоличествоОбъектовУчета
	|ПОМЕСТИТЬ втИдентификаторыОперацийКредит
	|ИЗ
	|	втСвернутыеДвиженияКредит КАК ДвиженияКредит
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|		ПО ДвиженияКредит.ОбъектУчета = КорИсточникиДанных.ОбъектУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.ИдентификаторФинЗаписи,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.НастройкаХозОперации,
	|	КорИсточникиДанных.КорИмяРегистра,
	|	КорИсточникиДанных.КорИдентификатор
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	КорИмяРегистра,
	|	Организация,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	втИдентификаторыОперацийДебет КАК ИдентификаторыОперацийДебет
	|ГДЕ
	|	ИдентификаторыОперацийДебет.КоличествоОбъектовУчета > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	втИдентификаторыОперацийКредит КАК ИдентификаторыОперацийКредит
	|ГДЕ
	|	ИдентификаторыОперацийКредит.КоличествоОбъектовУчета > 1
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	
	Результаты = Запрос.ВыполнитьПакет();
	ЕстьСложныеПроводки = НЕ Результаты[Результаты.ВГраница()].Пустой();
	
	Если НЕ ЕстьСложныеПроводки Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвиженияДебет.Период КАК Период,
		|	ДвиженияДебет.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияДебет.Организация КАК Организация,
		|	ДвиженияДебет.Регистратор КАК Регистратор,
		|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.ОбъектУчета) КАК КоличествоОбъектовУчета
		|ИЗ
		|	втСвернутыеДвиженияДебет КАК ДвиженияДебет
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентификаторыОперацийКредит КАК ИдентификаторыОперацийКредит
		|		ПО ДвиженияДебет.Период = ИдентификаторыОперацийКредит.Период
		|		 И ДвиженияДебет.Регистратор = ИдентификаторыОперацийКредит.Регистратор
		|		 И ДвиженияДебет.ИдентификаторФинЗаписи = ИдентификаторыОперацийКредит.ИдентификаторФинЗаписи
		|		 И ДвиженияДебет.ИмяРегистра = ИдентификаторыОперацийКредит.КорИмяРегистра
		|		 И ДвиженияДебет.Организация = ИдентификаторыОперацийКредит.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И ИдентификаторыОперацийКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияДебет.НастройкаХозОперации = ИдентификаторыОперацийКредит.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияДебет.Период,
		|	ДвиженияДебет.Регистратор,
		|	ДвиженияДебет.ИдентификаторФинЗаписи,
		|	ДвиженияДебет.ИмяРегистра,
		|	ДвиженияДебет.Организация,
		|	ДвиженияДебет.НастройкаХозОперации
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияДебет.ОбъектУчета) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДвиженияКредит.Период КАК Период,
		|	ДвиженияКредит.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияКредит.Организация КАК Организация,
		|	ДвиженияКредит.Регистратор КАК Регистратор,
		|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.ОбъектУчета) КАК КоличествоОбъектовУчета
		|ИЗ
		|	втСвернутыеДвиженияКредит КАК ДвиженияКредит
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентификаторыОперацийДебет КАК ИдентификаторыОперацийДебет
		|		ПО ДвиженияКредит.Период = ИдентификаторыОперацийДебет.Период
		|		 И ДвиженияКредит.Регистратор = ИдентификаторыОперацийДебет.Регистратор
		|		 И ДвиженияКредит.ИдентификаторФинЗаписи = ИдентификаторыОперацийДебет.ИдентификаторФинЗаписи
		|		 И ДвиженияКредит.ИмяРегистра = ИдентификаторыОперацийДебет.КорИмяРегистра
		|		 И ДвиженияКредит.Организация = ИдентификаторыОперацийДебет.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И ИдентификаторыОперацийДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияКредит.НастройкаХозОперации = ИдентификаторыОперацийДебет.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ДвиженияКредит.Период,
		|	ДвиженияКредит.Регистратор,
		|	ДвиженияКредит.ИдентификаторФинЗаписи,
		|	ДвиженияКредит.ИмяРегистра,
		|	ДвиженияКредит.Организация,
		|	ДвиженияКредит.НастройкаХозОперации
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДвиженияКредит.ОбъектУчета) > 1
		|";
		
		Результат = Запрос.Выполнить();
		ЕстьСложныеПроводки = НЕ Результат.Пустой();
	КонецЕсли;
	
	Если НЕ ЕстьСложныеПроводки Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыОперацийДебет");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИдентификаторыОперацийКредит");
	КонецЕсли;
	
	Запрос.Параметры.СложныеПроводкиСУказаниемКорИсточников = ЕстьСложныеПроводки;
	
КонецПроцедуры

Процедура ДобавитьИдентификаторыИсточниковДанных(ТекстыЗапросов, ПараметрыЗапроса, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно,
	|	&ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
	|	&ИдентификаторКорИсточниковДанных КАК ИдентификаторКорИсточниковДанных
	|ПОМЕСТИТЬ втДвиженияДтКт
	|ИЗ
	|	втСвернутыеДвиженияДтКт КАК ДвиженияРегистров
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация,
	|	ИдентификаторКорИсточниковДанных
	|";
	
	Если ПараметрыЗапроса.СложныеПроводкиСУказаниемКорИсточников Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"втСвернутыеДвиженияДтКт КАК ДвиженияРегистров",
			"втСвернутыеДвиженияДтКт КАК ДвиженияРегистров
			|	ЛЕВОЕ СОЕДИНЕНИЕ втИдентификаторыКорИсточниковДанных КАК ИдентификаторыКорИсточниковДанных
			|		ПО ДвиженияРегистров.ОбъектУчета = ИдентификаторыКорИсточниковДанных.ОбъектУчета");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ПОМЕСТИТЬ втДвиженияДтКт",
			"ПОМЕСТИТЬ втДвиженияРегистровДтКт");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Регистратор,
			|	ИдентификаторФинЗаписи,",
			"ИНДЕКСИРОВАТЬ ПО
			|	Период,
			|	Регистратор,
			|	ИдентификаторФинЗаписи,
			|	ИмяРегистра,");
		
		ЕстьКорИсточникиДанных = "НЕ ИдентификаторыКорИсточниковДанных.Идентификатор ЕСТЬ NULL";
		ИдентификаторКорИсточниковДанных = "ЕСТЬNULL(ИдентификаторыКорИсточниковДанных.Идентификатор, """")";
	Иначе
		ЕстьКорИсточникиДанных = "ИСТИНА В
			|		(ВЫБРАТЬ ПЕРВЫЕ 1
			|			ИСТИНА
			|		ИЗ
			|			втИдентификаторыКорИсточниковДанных КАК ИдентификаторыКорИсточниковДанных
			|		ГДЕ
			|			ИдентификаторыКорИсточниковДанных.ОбъектУчета = ДвиженияРегистров.ОбъектУчета
			|		)";
		ИдентификаторКорИсточниковДанных = """""";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьКорИсточникиДанных", ЕстьКорИсточникиДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторКорИсточниковДанных", ИдентификаторКорИсточниковДанных);
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втСвернутыеДвиженияДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	
	Если ПараметрыЗапроса.СложныеПроводкиСУказаниемКорИсточников Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДвиженияРегистров.Период КАК Период,
		|	ДвиженияРегистров.НомерЗаписи КАК НомерЗаписи,
		|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
		|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
		|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
		|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
		|	ДвиженияРегистров.ЭтоДтКт КАК ЭтоДтКт,
		|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
		|	ДвиженияРегистров.Организация КАК Организация,
		|	ДвиженияРегистров.Регистратор КАК Регистратор,
		|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДвиженияРегистров.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
		|	ДвиженияРегистров.ДатаПогашения КАК ДатаПогашения,
		|	ДвиженияРегистров.Валюта КАК Валюта,
		|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
		|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
		|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
		|	ДвиженияРегистров.Количество КАК Количество,
		|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно,
		|	ДвиженияРегистров.ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
		|	ВЫБОР
		|		КОГДА ДвиженияРегистров.ИдентификаторКорИсточниковДанных <> """"
		|			ТОГДА ДвиженияРегистров.ИдентификаторКорИсточниковДанных
		|		ИНАЧЕ ЕСТЬNULL(КорИдентификаторыОпераций.КорИдентификатор, """")
		|	КОНЕЦ КАК ИдентификаторКорИсточниковДанных
		|ПОМЕСТИТЬ втДвиженияДтКт
		|ИЗ
		|	втДвиженияРегистровДтКт КАК ДвиженияРегистров
		|	ЛЕВОЕ СОЕДИНЕНИЕ втКорИдентификаторыОперацийДтКт КАК КорИдентификаторыОпераций
		|		ПО ДвиженияРегистров.Период = КорИдентификаторыОпераций.Период
		|		 И ДвиженияРегистров.Регистратор = КорИдентификаторыОпераций.Регистратор
		|		 И ДвиженияРегистров.ИдентификаторФинЗаписи = КорИдентификаторыОпераций.ИдентификаторФинЗаписи
		|		 И ДвиженияРегистров.ИмяРегистра = КорИдентификаторыОпераций.КорИмяРегистра
		|		 И ДвиженияРегистров.Организация = КорИдентификаторыОпераций.Организация
		|		 И ВЫБОР
		|			КОГДА ДвиженияРегистров.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				И КорИдентификаторыОпераций.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
		|				ТОГДА ДвиженияРегистров.НастройкаХозОперации = КорИдентификаторыОпераций.НастройкаХозОперации
		|			ИНАЧЕ ИСТИНА
		|		 КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Регистратор,
		|	ИдентификаторФинЗаписи,
		|	НастройкаХозОперации,
		|	Организация,
		|	ИдентификаторКорИсточниковДанных
		|";
		
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ИмяТаблицыДвижений = "втДвиженияРегистровДтКт";
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
		
		ИмяТаблицыДвижений = "втКорИдентификаторыОперацийДтКт";
		ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИтогиПоОперациямИФинЗаписям(ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторКорИсточниковДанных КАК ИдентификаторКорИсточниковДанных,
	|	КОЛИЧЕСТВО(Движения.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоОперациям
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОбъектыНесобственныхЦенностей КАК ОбъектыНесобственныхЦенностей
	|		ГДЕ
	|			ОбъектыНесобственныхЦенностей.ОбъектУчета = Движения.ОбъектУчета
	|		)
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.НастройкаХозОперации,
	|	Движения.Организация,
	|	Движения.ИдентификаторКорИсточниковДанных
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	НастройкаХозОперации,
	|	Организация,
	|	ИдентификаторКорИсточниковДанных
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(Движения.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(Движения.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Движения.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоФинЗаписям
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	Движения.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорДвиженияДтКт КАК КорДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПризнакиУчетаКорреспонденций КАК ПризнакиУчетаКорреспонденций
	|				ПО ПризнакиУчетаКорреспонденций.ОбъектУчетаДтКт = Движения.ОбъектУчета
	|				 И ПризнакиУчетаКорреспонденций.ОбъектУчетаКорДтКт = КорДвижения.ОбъектУчета
	|		ГДЕ
	|			КорДвижения.Период = Движения.Период
	|			И КорДвижения.Регистратор = Движения.Регистратор
	|			И КорДвижения.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И КорДвижения.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И КорДвижения.Организация = Движения.Организация
	|			И КорДвижения.ЭтоКорДтКт
	|			И ВЫБОР
	|				КОГДА ПризнакиУчетаКорреспонденций.ПризнакУчета ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ПризнакиУчетаКорреспонденций.Значение = ПризнакиУчетаКорреспонденций.МаксимальноеЗначение
	|			КОНЕЦ
	|		)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорДвиженияДтКт КАК КорДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|				ПО КорИсточникиДанных.ОбъектУчета = Движения.ОбъектУчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|				ПО ИсточникиДанных.ОбъектУчета = КорДвижения.ОбъектУчета
	|		ГДЕ
	|			КорДвижения.Период = Движения.Период
	|			И КорДвижения.Регистратор = Движения.Регистратор
	|			И КорДвижения.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И КорДвижения.НастройкаХозОперации = Движения.НастройкаХозОперации
	|			И КорДвижения.Организация = Движения.Организация
	|			И КорДвижения.ЭтоКорДтКт
	|			И (КорДвижения.ОбъектУчета <> Движения.ОбъектУчета ИЛИ КорДвижения.ЭтоСторно = Движения.ЭтоСторно)
	|			И ВЫБОР
	|				КОГДА НЕ ИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|					ТОГДА ИсточникиДанных.КорИмяРегистра = Движения.ИмяРегистра
	|				КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|					ТОГДА КорИсточникиДанных.КорИмяРегистра = КорДвижения.ИмяРегистра
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОбъектыНесобственныхЦенностей КАК ОбъектыНесобственныхЦенностей
	|		ГДЕ
	|			ОбъектыНесобственныхЦенностей.ОбъектУчета = Движения.ОбъектУчета
	|		)
	|СГРУППИРОВАТЬ ПО
	|	Движения.Период,
	|	Движения.Регистратор,
	|	Движения.ИдентификаторФинЗаписи,
	|	Движения.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.НомерЗаписи КАК НомерЗаписи,
	|	Движения.ИмяРегистра КАК ИмяРегистра,
	|	Движения.ОбъектУчета КАК ОбъектУчета,
	|	Движения.ОбъектНастройки КАК ОбъектНастройки,
	|	Движения.МестоУчета КАК МестоУчета,
	|	Движения.ЭтоДтКт КАК ЭтоДтКт,
	|	Движения.ЭтоСторно КАК ЭтоСторно,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Движения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Движения.ДатаПогашения КАК ДатаПогашения,
	|	Движения.Валюта КАК Валюта,
	|	Движения.СуммаУпр КАК СуммаУпр,
	|	Движения.СуммаРегл КАК СуммаРегл,
	|	Движения.СуммаВал КАК СуммаВал,
	|	Движения.Количество КАК Количество,
	|	Движения.РеквизитСторно КАК РеквизитСторно,
	|	Движения.ЕстьКорИсточникиДанных КАК ЕстьКорИсточникиДанных,
	|	ЕСТЬNULL(ИтогиПоОперациям.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейОперации,
	|	ЕСТЬNULL(ИтогиПоОперациям.СуммаУпр, 0) КАК СуммаУпрОперации,
	|	ЕСТЬNULL(ИтогиПоОперациям.СуммаРегл, 0) КАК СуммаРеглОперации,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.СуммаУпр, 0) КАК СуммаУпрФинЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписям.СуммаРегл, 0) КАК СуммаРеглФинЗаписи,
	|	ТИПЗНАЧЕНИЯ(Движения.Регистратор) КАК ТипРегистратора,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОбъектыНесобственныхЦенностей КАК ОбъектыНесобственныхЦенностей
	|		ГДЕ
	|			ОбъектыНесобственныхЦенностей.ОбъектУчета = Движения.ОбъектУчета
	|	) КАК НесобственныеЦенности
	|ПОМЕСТИТЬ втДвиженияСИтогамиДтКт
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоОперациям КАК ИтогиПоОперациям
	|		ПО Движения.Период = ИтогиПоОперациям.Период
	|		 И Движения.Регистратор = ИтогиПоОперациям.Регистратор
	|		 И Движения.ИдентификаторФинЗаписи = ИтогиПоОперациям.ИдентификаторФинЗаписи
	|		 И Движения.НастройкаХозОперации = ИтогиПоОперациям.НастройкаХозОперации
	|		 И Движения.Организация = ИтогиПоОперациям.Организация
	|		 И Движения.ИдентификаторКорИсточниковДанных = ИтогиПоОперациям.ИдентификаторКорИсточниковДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоФинЗаписям КАК ИтогиПоФинЗаписям
	|		ПО Движения.Период = ИтогиПоФинЗаписям.Период
	|		 И Движения.Регистратор = ИтогиПоФинЗаписям.Регистратор
	|		 И Движения.ИдентификаторФинЗаписи = ИтогиПоФинЗаписям.ИдентификаторФинЗаписи
	|		 И Движения.Организация = ИтогиПоФинЗаписям.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация,
	|	НастройкаХозОперации,
	|	ОбъектУчета
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиПоОперациям");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втИтогиПоФинЗаписям");
	
КонецПроцедуры

Процедура СоединитьДвиженияПоКлючевымПолям(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДвиженияДебет.Период, ДвиженияКредит.Период) КАК Период,
	|	ЕСТЬNULL(ДвиженияДебет.НомерЗаписи, 0) КАК НомерЗаписиДт,
	|	ЕСТЬNULL(ДвиженияКредит.НомерЗаписи, 0) КАК НомерЗаписиКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебет.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.ИмяРегистра
	|		КОГДА ДвиженияКредит.НесобственныеЦенности
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияКредит.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.ИмяРегистра
	|		КОГДА ДвиженияДебет.НесобственныеЦенности
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебет.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.ОбъектУчета
	|		КОГДА ДвиженияКредит.НесобственныеЦенности
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВзаимозачетаЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.РасчетыПоВзаимозачетамЗадолженности)
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|		  ИЛИ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.РасчетыСРозничнымиПокупателями)
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияКредит.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.ОбъектУчета
	|		КОГДА ДвиженияДебет.НесобственныеЦенности
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВзаимозачетаЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.РасчетыПоВзаимозачетамЗадолженности)
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|		  ИЛИ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.РасчетыСРозничнымиПокупателями)
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ВводОстатков)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ПустаяСсылка)
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ЕСТЬNULL(ДвиженияДебет.ОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК ОбъектНастройкиДт,
	|	ЕСТЬNULL(ДвиженияКредит.ОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК ОбъектНастройкиКт,
	|	ЕСТЬNULL(ДвиженияДебет.МестоУчета, НЕОПРЕДЕЛЕНО) КАК МестоУчетаДт,
	|	ЕСТЬNULL(ДвиженияКредит.МестоУчета, НЕОПРЕДЕЛЕНО) КАК МестоУчетаКт,
	|	ЕСТЬNULL(ДвиженияДебет.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноДт,
	|	ЕСТЬNULL(ДвиженияКредит.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.Организация
	|		КОГДА ДвиженияКредит.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.Организация
	|		КОГДА ДвиженияДебет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.Организация
	|		ИНАЧЕ ДвиженияДебет.Организация
	|	КОНЕЦ КАК Организация,
	|	ЕСТЬNULL(ДвиженияДебет.Регистратор, ДвиженияКредит.Регистратор) КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		КОГДА ДвиженияКредит.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		ИНАЧЕ ДвиженияДебет.НастройкаХозОперации
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторФинЗаписи, ДвиженияКредит.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиДт,
	|	ЕСТЬNULL(ДвиженияКредит.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиКт,
	|	ЕСТЬNULL(ДвиженияДебет.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСДт,
	|	ЕСТЬNULL(ДвиженияКредит.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСКт,
	|	ЕСТЬNULL(ДвиженияДебет.ДатаПогашения, ДАТАВРЕМЯ(0001,01,01)) КАК ДатаПогашенияДт,
	|	ЕСТЬNULL(ДвиженияКредит.ДатаПогашения, ДАТАВРЕМЯ(0001,01,01)) КАК ДатаПогашенияКт,
	|	ЕСТЬNULL(ДвиженияДебет.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	|	ЕСТЬNULL(ДвиженияКредит.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) КАК СуммаДвиженияУпрДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0) КАК СуммаДвиженияУпрКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) КАК СуммаДвиженияРеглДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0) КАК СуммаДвиженияРеглКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаВал, 0) КАК СуммаДвиженияВалДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаВал, 0) КАК СуммаДвиженияВалКт,
	|	ЕСТЬNULL(ДвиженияДебет.Количество, 0) КАК КоличествоДвиженияДт,
	|	ЕСТЬNULL(ДвиженияКредит.Количество, 0) КАК КоличествоДвиженияКт,
	|	ЕСТЬNULL(ДвиженияДебет.РеквизитСторно, ЛОЖЬ) КАК РеквизитСторноДт,
	|	ЕСТЬNULL(ДвиженияКредит.РеквизитСторно, ЛОЖЬ) КАК РеквизитСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|				  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглФинЗаписи, 0)
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|					  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ (ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|		  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|			  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглФинЗаписи, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|					  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ (ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|		  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|			  ИЛИ ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) <> ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|		  ИЛИ ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.НесобственныеЦенности
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаУпр <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаУпрОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаУпр
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.НесобственныеЦенности
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) <> ДвиженияКредит.СуммаУпр
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) <> ДвиженияКредит.СуммаУпрОперации
	|			ТОГДА ДвиженияКредит.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ДвиженияКредит.КоличествоЗаписейОперации = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.НесобственныеЦенности
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаРегл <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаРеглОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаРегл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.НесобственныеЦенности
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглФинЗаписи, 0) <> ДвиженияКредит.СуммаРегл
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) <> ДвиженияКредит.СуммаРеглОперации
	|			ТОГДА ДвиженияКредит.СуммаРегл
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглКт
	|ПОМЕСТИТЬ ТаблицаКорреспонденцийДвиженийРегистров
	|ИЗ
	|	втДвиженияСИтогамиДебет КАК ДвиженияДебет
	|	ПОЛНОЕ СОЕДИНЕНИЕ втДвиженияСИтогамиКредит КАК ДвиженияКредит
	|	ПО ДвиженияДебет.Период = ДвиженияКредит.Период
	|	 И ДвиженияДебет.Регистратор = ДвиженияКредит.Регистратор
	|	 И ДвиженияДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|	 И ДвиженияДебет.Организация = ДвиженияКредит.Организация
	|	 И НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|	 И НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|	 И ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	// корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|						ПО КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|						ПО ИсточникиДанных.ОбъектУчета = ДвиженияТолькоКредит.ОбъектУчета
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА НЕ ИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|							ТОГДА ИсточникиДанных.КорИмяРегистра = ДвиженияДебет.ИмяРегистра
	|						КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|							ТОГДА КорИсточникиДанных.КорИмяРегистра = ДвиженияТолькоКредит.ИмяРегистра
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				)
	// корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|						ПО КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|					ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК ИсточникиДанных
	|						ПО ИсточникиДанных.ОбъектУчета = ДвиженияТолькоДебет.ОбъектУчета
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА НЕ ИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|							ТОГДА ИсточникиДанных.КорИмяРегистра = ДвиженияКредит.ИмяРегистра
	|						КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|							ТОГДА КорИсточникиДанных.КорИмяРегистра = ДвиженияТолькоДебет.ИмяРегистра
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|				)
	// корреспонденции записей с пустыми настройками ХО запрещены, если обе образуют сложные проводки с другими записями
	|		КОГДА ДвиженияДебет.КоличествоЗаписейЗаписи > 1 И ДвиженияКредит.КоличествоЗаписейЗаписи > 1
	|			ТОГДА ЛОЖЬ
	// корреспонденции записей с пустыми настройками ХО запрещены, если одна образует сложные проводки, а для другой есть корреспонденция с заполненной настройкой ХО
	|		КОГДА ДвиженияДебет.КоличествоЗаписейЗаписи > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|				)
	// корреспонденции записей с пустыми настройками ХО запрещены, если одна образует сложные проводки, а для другой есть корреспонденция с заполненной настройкой ХО
	|		КОГДА ДвиженияКредит.КоличествоЗаписейЗаписи > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|				)
	// корреспонденции записей с пустыми настройками ХО запрещены, если для обеих есть корреспонденции с заполненными настройками ХО
	|		ИНАЧЕ НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДвиженияДебет КАК ДвиженияТолькоДебет
	|			ГДЕ
	|				ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|				И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|				И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|				И ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|				И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|				И ДвиженияТолькоДебет.ЭтоДебет
	|				И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|			)
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				втДвиженияКредит КАК ДвиженияТолькоКредит
	|			ГДЕ
	|				ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|				И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|				И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|				И ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|				И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|				И ДвиженияТолькоКредит.ЭтоКредит
	|				И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|			)
	|	 КОНЕЦ
	|	 И ВЫБОР
	// корреспонденции записей оборотного регистров с самими собой запрещены всегда
	|		КОГДА НЕ ДвиженияДебет.ЭтоДебет И НЕ ДвиженияКредит.ЭтоКредит
	|			ТОГДА ЛОЖЬ
	// записи несобственных подконтрольных ценностей не образовывают корреспонденций
	|		КОГДА ДвиженияДебет.НесобственныеЦенности ИЛИ ДвиженияКредит.НесобственныеЦенности
	|			ТОГДА ЛОЖЬ
	// корреспонденции записей ограничены в описании объекта учета дебета
	|		КОГДА ДвиженияДебет.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|					И КорИсточникиДанных.КорИмяРегистра = ДвиженияКредит.ИмяРегистра
	|				)
	// корреспонденции записей ограничены в описании объекта учета кредита
	|		КОГДА ДвиженияКредит.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В 
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|					И КорИсточникиДанных.КорИмяРегистра = ДвиженияДебет.ИмяРегистра
	|				)
	// корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета И ДвиженияДебет.ЭтоСторно И НЕ ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета
	|						ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|						И ДвиженияТолькоКредит.ЭтоСторно <> ДвиженияДебет.ЭтоСторно
	|						И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	// корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета И НЕ ДвиженияДебет.ЭтоСторно И ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета
	|						ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|						И ДвиженияТолькоДебет.ЭтоСторно <> ДвиженияКредит.ЭтоСторно
	|						И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// корреспонденции записей внутри одного регистра приоритет у записей с одинаковыми объектами учета и суммами упр и регл
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра И ДвиженияДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|					И ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияКредит.ОбъектУчета
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|					И ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияДебет.ОбъектУчета
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// прочие случаи отношения многие ко многим, приоритет у записей с одинаковыми суммами упр и регл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации > 1 И ДвиженияКредит.КоличествоЗаписейОперации > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|					И ДвиженияТолькоКредит.ЭтоКредит
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|					И ДвиженияТолькоДебет.ЭтоДебет
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл
	|				)
	|		ИНАЧЕ ИСТИНА
	|	 КОНЕЦ
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// несобственные подконтрольные ценности выводим всегда
	|				КОГДА ДвиженияКредит.НесобственныеЦенности
	|					ТОГДА ИСТИНА
	// запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияКредит.СуммаУпр = 0 И ДвиженияКредит.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияКредит.ЭтоКредит
	|					ТОГДА ИСТИНА
	// запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим расходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияКредит КАК ДвиженияТолькоКредит
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоКредит.ИмяРегистра = КорИсточникиДанных.КорИмяРегистра
	|							 И ДвиженияКредит.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоКредит.Период = ДвиженияКредит.Период
	|						И ДвиженияТолькоКредит.Регистратор = ДвиженияКредит.Регистратор
	|						И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|						И ДвиженияТолькоКредит.Организация = ДвиженияКредит.Организация
	|						И ДвиженияТолькоКредит.ЭтоКредит
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|							ИНАЧЕ НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// несобственные подконтрольные ценности выводим всегда
	|				КОГДА ДвиженияДебет.НесобственныеЦенности
	|					ТОГДА ИСТИНА
	// запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияДебет.СуммаУпр = 0 И ДвиженияДебет.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияДебет.ЭтоДебет
	|					ТОГДА ИСТИНА
	// запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим приходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияДебет КАК ДвиженияТолькоДебет
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоДебет.ИмяРегистра = КорИсточникиДанных.КорИмяРегистра
	|							 И ДвиженияДебет.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоДебет.Период = ДвиженияДебет.Период
	|						И ДвиженияТолькоДебет.Регистратор = ДвиженияДебет.Регистратор
	|						И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|						И ДвиженияТолькоДебет.Организация = ДвиженияДебет.Организация
	|						И ДвиженияТолькоДебет.ЭтоДебет
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|							ИНАЧЕ НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация,
	|	ЭтоСторноДт,
	|	ЭтоСторноКт
	|";
	
	ТаблицаКорреспонденцийДвиженийРегистров = Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ТаблицаКорреспонденцийДвиженийРегистров) <> Неопределено Тогда
		ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров + "1";
		Запрос.Параметры.ТаблицаКорреспонденцийДвиженийРегистров = ТаблицаКорреспонденцийДвиженийРегистров;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт)
	
	Если ДтКт = "Дт" Тогда
		ЭтоДтКт = "ЭтоДебет";
		ЭтоКорДтКт = "ЭтоКредит";
		ОбъектУчетаДтКт = "ОбъектУчетаДт";
		ОбъектУчетаКорДтКт = "ОбъектУчетаКт";
		втДвиженияДтКт = "втДвиженияДебет";
		втКорДвиженияДтКт = "втДвиженияКредит";
		втДвиженияСИтогамиДтКт = "втДвиженияСИтогамиДебет";
		втДвиженияРегистровДтКт = "втДвиженияРегистровДебет";
		втСвернутыеДвиженияДтКт = "втСвернутыеДвиженияДебет";
		втДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсДебет";
		втКорДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсКредит";
		втКорИдентификаторыОперацийДтКт = "втИдентификаторыОперацийКредит";
	Иначе
		ЭтоДтКт = "ЭтоКредит";
		ЭтоКорДтКт = "ЭтоДебет";
		ОбъектУчетаДтКт = "ОбъектУчетаКт";
		ОбъектУчетаКорДтКт = "ОбъектУчетаДт";
		втДвиженияДтКт = "втДвиженияКредит";
		втКорДвиженияДтКт = "втДвиженияДебет";
		втДвиженияСИтогамиДтКт = "втДвиженияСИтогамиКредит";
		втДвиженияРегистровДтКт = "втДвиженияРегистровКредит";
		втСвернутыеДвиженияДтКт = "втСвернутыеДвиженияКредит";
		втДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсКредит";
		втКорДвиженияРегистровРеверсДтКт = "втДвиженияРегистровРеверсДебет";
		втКорИдентификаторыОперацийДтКт = "втИдентификаторыОперацийДебет";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭтоДтКт", ЭтоДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭтоКорДтКт", ЭтоКорДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъектУчетаДтКт", ОбъектУчетаДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОбъектУчетаКорДтКт", ОбъектУчетаКорДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияДтКт", втДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорДвиженияДтКт", втКорДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияСИтогамиДтКт", втДвиженияСИтогамиДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияРегистровДтКт", втДвиженияРегистровДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втСвернутыеДвиженияДтКт", втСвернутыеДвиженияДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втДвиженияРегистровРеверсДтКт", втДвиженияРегистровРеверсДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорДвиженияРегистровРеверсДтКт", втКорДвиженияРегистровРеверсДтКт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втКорИдентификаторыОперацийДтКт", втКорИдентификаторыОперацийДтКт);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовИсправленияОшибокКорреспонденцийСРеверсом

Процедура ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса, ОшибкиРеверса = Ложь)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втОшибкиКорреспонденций
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит
	|ГДЕ
	|	(ДвиженияДебетКредит.ИмяРегистраДт = """"
	|		ИЛИ ДвиженияДебетКредит.ИмяРегистраКт = """"
	|		ИЛИ (ДвиженияДебетКредит.СуммаУпрДт <> ДвиженияДебетКредит.СуммаУпрКт
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыУпр)
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыУпр))
	|		ИЛИ (ДвиженияДебетКредит.СуммаРеглДт <> ДвиженияДебетКредит.СуммаРеглКт
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыБезСуммыРегл)
	|			И НЕ ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыБезСуммыРегл)))
	|	И ДвиженияДебетКредит.ИдентификаторФинЗаписи <> """"
	|	И &ЭтоДвиженияРеверса
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.Период,
	|	ДвиженияДебетКредит.Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|";
	
	Если ОшибкиРеверса Тогда
		ЭтоДвиженияРеверса = "ИСТИНА В 
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияРеверса
		|		ГДЕ
		|			ДвиженияРеверса.Период = ДвиженияДебетКредит.Период
		|			И ДвиженияРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
		|			И ДвиженияРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
		|			И ДвиженияРеверса.Организация = ДвиженияДебетКредит.Организация
		|			И (ДвиженияРеверса.ЭтоСторноДт ИЛИ ДвиженияРеверса.ЭтоСторноКт)
		|		)";
	Иначе
		ЭтоДвиженияРеверса = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоДвиженияРеверса", ЭтоДвиженияРеверса);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ОпределитьМаксимальныйНомерЗаписейДвижений(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	МАКСИМУМ(МаксимальныеНомераЗаписей.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втМаксимальныйНомерЗаписей
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДвиженияДебет.НомерЗаписи) КАК НомерЗаписи
	|	ИЗ
	|		втДвиженияДебет КАК ДвиженияДебет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МАКСИМУМ(ДвиженияКредит.НомерЗаписи) КАК НомерЗаписи
	|	ИЗ
	|		втДвиженияКредит КАК ДвиженияКредит
	|	) КАК МаксимальныеНомераЗаписей
	|");
	
КонецПроцедуры

Процедура ВосстановитьДвиженияОшибочныхКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДетальныеДвиженияСИтогами.Период КАК Период,
	|	ДетальныеДвиженияСИтогами.ИмяРегистра КАК ИмяРегистра,
	|	ДетальныеДвиженияСИтогами.ОбъектУчета КАК ОбъектУчета,
	|	ДетальныеДвиженияСИтогами.ОбъектНастройки КАК ОбъектНастройки,
	|	ДетальныеДвиженияСИтогами.МестоУчета КАК МестоУчета,
	|	ДетальныеДвиженияСИтогами.ЭтоДтКт КАК ЭтоДтКт,
	|	ДетальныеДвиженияСИтогами.ЭтоСторно КАК ЭтоСторно,
	|	ДетальныеДвиженияСИтогами.Организация КАК Организация,
	|	ДетальныеДвиженияСИтогами.Регистратор КАК Регистратор,
	|	ДетальныеДвиженияСИтогами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДетальныеДвиженияСИтогами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДетальныеДвиженияСИтогами.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДетальныеДвиженияСИтогами.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДетальныеДвиженияСИтогами.ДатаПогашения КАК ДатаПогашения,
	|	ДетальныеДвиженияСИтогами.Валюта КАК Валюта,
	|	ДетальныеДвиженияСИтогами.СуммаУпр КАК СуммаУпр,
	|	ДетальныеДвиженияСИтогами.СуммаРегл КАК СуммаРегл,
	|	ДетальныеДвиженияСИтогами.СуммаВал КАК СуммаВал,
	|	ДетальныеДвиженияСИтогами.Количество КАК Количество,
	|	ДетальныеДвиженияСИтогами.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДетальныеДвижения
	|ИЗ
	|	ТаблицаДетальныхДвиженийСИтогами КАК ДетальныеДвиженияСИтогами
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|		ГДЕ
	|			ОшибкиКорреспонденций.Период = ДетальныеДвиженияСИтогами.Период
	|			И ОшибкиКорреспонденций.Регистратор = ДетальныеДвиженияСИтогами.Регистратор
	|			И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ДетальныеДвиженияСИтогами.ИдентификаторФинЗаписи
	|			И ОшибкиКорреспонденций.Организация = ДетальныеДвиженияСИтогами.Организация
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИмяРегистра,
	|	ОбъектУчета,
	|	Организация
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДетальныхДвиженийСИтогами", ?(ДтКт = "Дт",
		ПараметрыЗапроса.ТаблицаДетальныхДвиженийСИтогамиДебет,
		ПараметрыЗапроса.ТаблицаДетальныхДвиженийСИтогамиКредит));
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Движения.Период КАК Период,
	|	Движения.ИмяРегистра КАК ИмяРегистра,
	|	Движения.ОбъектУчета КАК ОбъектУчета,
	|	Движения.ОбъектНастройки КАК ОбъектНастройки,
	|	Движения.МестоУчета КАК МестоУчета,
	|	Движения.ЭтоДтКт КАК ЭтоДтКт,
	|	Движения.ЭтоСторно КАК ЭтоСторно,
	|	Движения.Организация КАК Организация,
	|	Движения.Регистратор КАК Регистратор,
	|	Движения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	Движения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Движения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Движения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	Движения.ДатаПогашения КАК ДатаПогашения,
	|	Движения.Валюта КАК Валюта,
	|	Движения.СуммаУпр КАК СуммаУпр,
	|	Движения.СуммаРегл КАК СуммаРегл,
	|	Движения.СуммаВал КАК СуммаВал,
	|	Движения.Количество КАК Количество,
	|	Движения.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровРеверсДтКт
	|ИЗ
	|	втДвиженияДтКт КАК Движения
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|		ГДЕ
	|			ОшибкиКорреспонденций.Период = Движения.Период
	|			И ОшибкиКорреспонденций.Регистратор = Движения.Регистратор
	|			И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И ОшибкиКорреспонденций.Организация = Движения.Организация
	|		)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДетальныеДвижения КАК ДетальныеДвижения
	|		ГДЕ
	|			ДетальныеДвижения.Период = Движения.Период
	|			И ДетальныеДвижения.Регистратор = Движения.Регистратор
	|			И ДетальныеДвижения.ИдентификаторФинЗаписи = Движения.ИдентификаторФинЗаписи
	|			И ДетальныеДвижения.ИмяРегистра = Движения.ИмяРегистра
	|			И ДетальныеДвижения.ОбъектУчета = Движения.ОбъектУчета
	|			И ДетальныеДвижения.Организация = Движения.Организация
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДетальныеДвижения.Период КАК Период,
	|	ДетальныеДвижения.ИмяРегистра КАК ИмяРегистра,
	|	ДетальныеДвижения.ОбъектУчета КАК ОбъектУчета,
	|	ДетальныеДвижения.ОбъектНастройки КАК ОбъектНастройки,
	|	ДетальныеДвижения.МестоУчета КАК МестоУчета,
	|	ДетальныеДвижения.ЭтоДтКт КАК ЭтоДтКт,
	|	ДетальныеДвижения.ЭтоСторно КАК ЭтоСторно,
	|	ДетальныеДвижения.Организация КАК Организация,
	|	ДетальныеДвижения.Регистратор КАК Регистратор,
	|	ДетальныеДвижения.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДетальныеДвижения.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДетальныеДвижения.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДетальныеДвижения.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДетальныеДвижения.ДатаПогашения КАК ДатаПогашения,
	|	ДетальныеДвижения.Валюта КАК Валюта,
	|	ДетальныеДвижения.СуммаУпр КАК СуммаУпр,
	|	ДетальныеДвижения.СуммаРегл КАК СуммаРегл,
	|	ДетальныеДвижения.СуммаВал КАК СуммаВал,
	|	ДетальныеДвижения.Количество КАК Количество,
	|	ДетальныеДвижения.РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	втДетальныеДвижения КАК ДетальныеДвижения
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ИмяТаблицыДвижений = "втДвиженияДтКт";
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ИмяТаблицыДвижений, ДтКт);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ИмяТаблицыДвижений);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДетальныеДвижения");
	
КонецПроцедуры

Процедура ОпределитьРегистрыСДвижениямиРеверса(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРеверсДт.Период КАК Период,
	|	ДвиженияРеверсДт.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверсДт.Организация КАК Организация,
	|	ДвиженияРеверсДт.Регистратор КАК Регистратор,
	|	ДвиженияРеверсДт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втРегистрыСДвижениямиРеверса
	|ИЗ
	|	втДвиженияРегистровРеверсДебет КАК ДвиженияРеверсДт
	|ГДЕ
	|	ДвиженияРеверсДт.ЭтоСторно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияРеверсКт.Период КАК Период,
	|	ДвиженияРеверсКт.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверсКт.Организация КАК Организация,
	|	ДвиженияРеверсКт.Регистратор КАК Регистратор,
	|	ДвиженияРеверсКт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ИЗ
	|	втДвиженияРегистровРеверсКредит КАК ДвиженияРеверсКт
	|ГДЕ
	|	ДвиженияРеверсКт.ЭтоСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|");
	
КонецПроцедуры

Процедура ЗаменитьДвиженияРеверсаНаСторно(ТекстыЗапросов, ДтКт)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияРеверс.Период КАК Период,
	|	ДвиженияРеверс.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверс.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРеверс.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРеверс.МестоУчета КАК МестоУчета,
	|	ДвиженияРеверс.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияРеверс.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРеверс.Организация КАК Организация,
	|	ДвиженияРеверс.Регистратор КАК Регистратор,
	|	ДвиженияРеверс.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРеверс.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРеверс.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРеверс.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРеверс.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРеверс.Валюта КАК Валюта,
	|	ДвиженияРеверс.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРеверс.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРеверс.СуммаВал КАК СуммаВал,
	|	ДвиженияРеверс.Количество КАК Количество,
	|	ДвиженияРеверс.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровСторно
	|ИЗ
	|	втДвиженияРегистровРеверсДтКт КАК ДвиженияРеверс
	|ГДЕ
	|	НЕ ДвиженияРеверс.ЭтоСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияРеверс.Период КАК Период,
	|	ДвиженияРеверс.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРеверс.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРеверс.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРеверс.МестоУчета КАК МестоУчета,
	|	ДвиженияРеверс.ЭтоКорДтКт КАК ЭтоДтКт,
	|	НЕ ДвиженияРеверс.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРеверс.Организация КАК Организация,
	|	ДвиженияРеверс.Регистратор КАК Регистратор,
	|	ДвиженияРеверс.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРеверс.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРеверс.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРеверс.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРеверс.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияРеверс.Валюта КАК Валюта,
	|	- ДвиженияРеверс.СуммаУпр КАК СуммаУпр,
	|	- ДвиженияРеверс.СуммаРегл КАК СуммаРегл,
	|	- ДвиженияРеверс.СуммаВал КАК СуммаВал,
	|	- ДвиженияРеверс.Количество КАК Количество,
	|	ДвиженияРеверс.РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	втКорДвиженияРегистровРеверсДтКт КАК ДвиженияРеверс
	|ГДЕ
	|	ДвиженияРеверс.ЭтоСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСторно.Период КАК Период,
	|	ДвиженияСторно.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияСторно.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияСторно.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияСторно.МестоУчета КАК МестоУчета,
	|	ДвиженияСторно.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияСторно.Организация КАК Организация,
	|	ДвиженияСторно.Регистратор КАК Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияСторно.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияСторно.Валюта КАК Валюта,
	|	СУММА(ДвиженияСторно.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияСторно.СуммаРегл) КАК СуммаРегл,
	|	СУММА(ДвиженияСторно.СуммаВал) КАК СуммаВал,
	|	СУММА(ДвиженияСторно.Количество) КАК Количество,
	|	ДвиженияСторно.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втСвернутыеДвиженияСторно
	|ИЗ
	|	втДвиженияРегистровСторно КАК ДвиженияСторно
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСторно.Период,
	|	ДвиженияСторно.ИмяРегистра,
	|	ДвиженияСторно.ОбъектУчета,
	|	ДвиженияСторно.ОбъектНастройки,
	|	ДвиженияСторно.МестоУчета,
	|	ДвиженияСторно.ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно,
	|	ДвиженияСторно.Организация,
	|	ДвиженияСторно.Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС,
	|	ДвиженияСторно.ДатаПогашения,
	|	ДвиженияСторно.Валюта,
	|	ДвиженияСторно.РеквизитСторно
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияРегистровСторно");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияСторно.НомерЗаписи + МаксимальныйНомерЗаписей.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСторно.Период КАК Период,
	|	ДвиженияСторно.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияСторно.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияСторно.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияСторно.МестоУчета КАК МестоУчета,
	|	ДвиженияСторно.ЭтоДтКт КАК ЭтоДтКт,
	|	ДвиженияСторно.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияСторно.Организация КАК Организация,
	|	ДвиженияСторно.Регистратор КАК Регистратор,
	|	ДвиженияСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСторно.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияСторно.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияСторно.ДатаПогашения КАК ДатаПогашения,
	|	ДвиженияСторно.Валюта КАК Валюта,
	|	ДвиженияСторно.СуммаУпр КАК СуммаУпр,
	|	ДвиженияСторно.СуммаРегл КАК СуммаРегл,
	|	ДвиженияСторно.СуммаВал КАК СуммаВал,
	|	ДвиженияСторно.Количество КАК Количество,
	|	ДвиженияСторно.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияРегистровДтКт
	|ИЗ
	|	втСвернутыеДвиженияСторно КАК ДвиженияСторно
	|	,
	|	втМаксимальныйНомерЗаписей КАК МаксимальныйНомерЗаписей
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистра,
	|	ОбъектУчета
	|";
	
	ВыполнитьЗаменуИменТаблицИПолейДвижений(ТекстЗапроса, ДтКт);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втСвернутыеДвиженияСторно");
	
КонецПроцедуры

Процедура ОпределитьКорреспонденцииБезОшибок(ТекстыЗапросов, ПараметрыЗапроса)
	
	ОпределитьОшибкиКорреспонденций(ТекстыЗапросов, ПараметрыЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втКорреспонденцииБезОшибок
	|ИЗ
	|	ТаблицаКорреспонденцийДвиженийРегистров КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|		ГДЕ
	|			ОшибкиКорреспонденций.Период = ДвиженияДебетКредит.Период
	|			И ОшибкиКорреспонденций.Регистратор = ДвиженияДебетКредит.Регистратор
	|			И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|			И ОшибкиКорреспонденций.Организация = ДвиженияДебетКредит.Организация
	|		)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКорреспонденцийДвиженийРегистров", ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОшибкиКорреспонденций");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, ПараметрыЗапроса.ТаблицаКорреспонденцийДвиженийРегистров);
	
КонецПроцедуры

Процедура ОпределитьРегистрыЗаменыРеверсаНаСторно(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КорреспонденцииБезОшибок.Период КАК Период,
	|	КорреспонденцииБезОшибок.Организация КАК Организация,
	|	КорреспонденцииБезОшибок.Регистратор КАК Регистратор,
	|	КорреспонденцииБезОшибок.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ втДокументыЗаменыРеверсаНаСторно
	|ИЗ
	|	втКорреспонденцииБезОшибок КАК КорреспонденцииБезОшибок
	|СГРУППИРОВАТЬ ПО
	|	КорреспонденцииБезОшибок.Период,
	|	КорреспонденцииБезОшибок.Регистратор,
	|	КорреспонденцииБезОшибок.ИдентификаторФинЗаписи,
	|	КорреспонденцииБезОшибок.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	Организация
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрыРеверса.ИмяРегистра КАК ИмяРегистра
	|ПОМЕСТИТЬ втРегистрыЗаменыРеверсаНаСторно
	|ИЗ
	|	втРегистрыСДвижениямиРеверса КАК РегистрыРеверса
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|		ГДЕ
	|			ДокументыЗаменыРеверса.Период = РегистрыРеверса.Период
	|			И ДокументыЗаменыРеверса.Регистратор = РегистрыРеверса.Регистратор
	|			И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = РегистрыРеверса.ИдентификаторФинЗаписи
	|			И ДокументыЗаменыРеверса.Организация = РегистрыРеверса.Организация
	|		)
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРегистрыСДвижениямиРеверса");
	
КонецПроцедуры

Процедура ЗаменитьКорреспонденцииРеверсаНаСторно(ТекстыЗапросов,
	СоздаваемаяТаблицаКорреспонденцийДвижений, УдаляемаяТаблицаКорреспонденцийДвижений)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияДебетКредит.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияДебетКредит.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияДебетКредит.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияДебетКредит.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияДебетКредит.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияДебетКредит.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияДебетКредит.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияДебетКредит.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ СоздаваемаяТаблицаКорреспонденцийДвижений
	|ИЗ
	|	УдаляемаяТаблицаКорреспонденцийДвижений КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
	|		ГДЕ
	|			ДокументыЗаменыРеверса.Период = ДвиженияДебетКредит.Период
	|			И ДокументыЗаменыРеверса.Регистратор = ДвиженияДебетКредит.Регистратор
	|			И ДокументыЗаменыРеверса.ИдентификаторФинЗаписи = ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|			И ДокументыЗаменыРеверса.Организация = ДвиженияДебетКредит.Организация
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияБезОшибок.Период КАК Период,
	|	ДвиженияБезОшибок.НомерЗаписиДт КАК НомерЗаписиДт,
	|	ДвиженияБезОшибок.НомерЗаписиКт КАК НомерЗаписиКт,
	|	ДвиженияБезОшибок.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияБезОшибок.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияБезОшибок.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияБезОшибок.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияБезОшибок.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияБезОшибок.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияБезОшибок.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияБезОшибок.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияБезОшибок.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияБезОшибок.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияБезОшибок.Организация КАК Организация,
	|	ДвиженияБезОшибок.Регистратор КАК Регистратор,
	|	ДвиженияБезОшибок.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияБезОшибок.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияБезОшибок.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияБезОшибок.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияБезОшибок.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияБезОшибок.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияБезОшибок.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияБезОшибок.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ДвиженияБезОшибок.ВалютаДт КАК ВалютаДт,
	|	ДвиженияБезОшибок.ВалютаКт КАК ВалютаКт,
	|	ДвиженияБезОшибок.СуммаДвиженияУпрДт КАК СуммаДвиженияУпрДт,
	|	ДвиженияБезОшибок.СуммаДвиженияУпрКт КАК СуммаДвиженияУпрКт,
	|	ДвиженияБезОшибок.СуммаДвиженияРеглДт КАК СуммаДвиженияРеглДт,
	|	ДвиженияБезОшибок.СуммаДвиженияРеглКт КАК СуммаДвиженияРеглКт,
	|	ДвиженияБезОшибок.СуммаДвиженияВалДт КАК СуммаДвиженияВалДт,
	|	ДвиженияБезОшибок.СуммаДвиженияВалКт КАК СуммаДвиженияВалКт,
	|	ДвиженияБезОшибок.КоличествоДвиженияДт КАК КоличествоДвиженияДт,
	|	ДвиженияБезОшибок.КоличествоДвиженияКт КАК КоличествоДвиженияКт,
	|	ДвиженияБезОшибок.РеквизитСторноДт КАК РеквизитСторноДт,
	|	ДвиженияБезОшибок.РеквизитСторноКт КАК РеквизитСторноКт,
	|	ДвиженияБезОшибок.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияБезОшибок.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияБезОшибок.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияБезОшибок.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияБезОшибок.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияБезОшибок.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияБезОшибок.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втКорреспонденцииБезОшибок КАК ДвиженияБезОшибок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СоздаваемаяТаблицаКорреспонденцийДвижений", СоздаваемаяТаблицаКорреспонденцийДвижений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УдаляемаяТаблицаКорреспонденцийДвижений", УдаляемаяТаблицаКорреспонденцийДвижений);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, УдаляемаяТаблицаКорреспонденцийДвижений);
	
КонецПроцедуры

Процедура ДобавитьПустуюТаблицуДокументовЗаменыРеверса(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(0001, 01, 01) КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ втДокументыЗаменыРеверсаНаСторно
	|ГДЕ
	|	ЛОЖЬ
	|");
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовВосстановленияРасчетовПоСторно

Процедура ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	&Организация КАК Организация,
	|	РеестрДокументов.Ссылка КАК ДокументСторно,
	|	РеестрДокументов.ДатаДокументаИБ КАК Период,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ втРеестрДокументовСторно
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Проведен
	|	И РеестрДокументов.СторноИсправление
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И &УсловияОтбора
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСторно,
	|	СторнируемыйДокумент
	|";
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 0", "");
	КонецЕсли;
	
	ЕстьПорцияДокументов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втПорцияДокументов") <> Неопределено;
	
	Если ЕстьПорцияДокументов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрСведений.РеестрДокументов КАК РеестрДокументов",
			"РегистрСведений.РеестрДокументов КАК РеестрДокументов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПорцияДокументов КАК ПорцияДокументов
			|		ПО НАЧАЛОПЕРИОДА(РеестрДокументов.ДатаДокументаИБ, ДЕНЬ) = ПорцияДокументов.ДатаОтражения
			|		 И РеестрДокументов.Ссылка = ПорцияДокументов.Регистратор");
		ПолеВыборкиОрганизации = "ПорцияДокументов.Организация";
	Иначе
		ПолеВыборкиОрганизации = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	СтрокиУсловийОтбора = Новый Массив();
	
	Если Запрос.Параметры.ДатаНачала > '00010101' Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.ДатаДокументаИБ >= &ДатаНачала");
	КонецЕсли;
	
	Если Запрос.Параметры.ДатаОкончания > '00010101' Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.ДатаДокументаИБ <= &ДатаОкончания");
	КонецЕсли;
	
	Если ТипЗнч(Запрос.Параметры.Регистратор) = Тип("Массив") Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.Ссылка В (&Регистратор)");
	ИначеЕсли ЗначениеЗаполнено(Запрос.Параметры.Регистратор) Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.Ссылка = &Регистратор");
	КонецЕсли;
	
	Если СтрокиУсловийОтбора.Количество() > 0 Тогда
		РазделительСтрок = Символы.ПС + Символы.Таб + "И ";
		ТекстУсловияОтбора = СтрСоединить(СтрокиУсловийОтбора, РазделительСтрок);
	Иначе
		ТекстУсловияОтбора = "ИСТИНА";
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", ПолеВыборкиОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", ТекстУсловияОтбора);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#Область ВосстановлениеАвансаКлиента
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСКлиентамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьКлиентов) КАК ОбъектУчетаДт,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыПолученныеОтКлиентов) КАК ОбъектУчетаКт,
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента) КАК НастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПогашения,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляВыборки,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСКлиентамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		НЕ РасчетыСКлиентамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.ДолгУпр) <> 0 ИЛИ СУММА(ДанныеРегистра.ПредоплатаУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.ДолгРегл) <> 0 ИЛИ СУММА(ДанныеРегистра.ПредоплатаРегл) <> 0
	|";
	
	Если ЕстьПорцияДокументов Тогда
		УсловиеСоединенияПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация";
	Иначе
		УсловиеСоединенияПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Если ТипЗнч(Запрос.Параметры.Организация) = Тип("Массив") Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация В (&Организация)";
	ИначеЕсли ЗначениеЗаполнено(Запрос.Параметры.Организация) Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = &Организация";
	Иначе
		УсловиеОтбораПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляВыборки.Добавить("ОбъектРасчетов");
	СуществующиеПоляВыборки.Добавить("Валюта");
	СуществующиеПоляВыборки.Добавить("РасчетныйДокумент");
	СуществующиеПоляВыборки.Добавить("Регистратор");
	СуществующиеПоляВыборки.Добавить("НастройкаХозяйственнойОперации");
	
	СтрокиВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для Каждого КлючИЗначение Из ПараметрыОтраженияВУчете.ПоляОтбораДвижений Цикл
		ЧастиПутиКДанным = СтрРазделить(КлючИЗначение.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляВыборки.Найти(ИмяПоляРегистра) = Неопределено Тогда
			СтрокиВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
			СуществующиеПоляВыборки.Добавить(ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляВыборки", СтрСоединить(СтрокиВыборкиПрочихПолей, РазделительСтрок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияПоОрганизации", УсловиеСоединенияПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоОрганизации", УсловиеОтбораПоОрганизации);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВосстановлениеАвансаПоставщику
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСПоставщикамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.АвансыВыданныеПоставщикам) КАК ОбъектУчетаДт,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.ЗадолженностьПередПоставщиками) КАК ОбъектУчетаКт,
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику) КАК НастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДАТАВРЕМЯ(0001,01,01) КАК ДатаПогашения,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляВыборки,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСПоставщикамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		НЕ РасчетыСПоставщикамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.ДолгУпр) <> 0 ИЛИ СУММА(ДанныеРегистра.ПредоплатаУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.ДолгРегл) <> 0 ИЛИ СУММА(ДанныеРегистра.ПредоплатаРегл) <> 0
	|";
	
	Если ЕстьПорцияДокументов Тогда
		УсловиеСоединенияПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация";
	Иначе
		УсловиеСоединенияПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Если ТипЗнч(Запрос.Параметры.Организация) = Тип("Массив") Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация В (&Организация)";
	ИначеЕсли ЗначениеЗаполнено(Запрос.Параметры.Организация) Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = &Организация";
	Иначе
		УсловиеОтбораПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляВыборки.Добавить("ОбъектРасчетов");
	СуществующиеПоляВыборки.Добавить("Валюта");
	СуществующиеПоляВыборки.Добавить("РасчетныйДокумент");
	СуществующиеПоляВыборки.Добавить("Регистратор");
	СуществующиеПоляВыборки.Добавить("НастройкаХозяйственнойОперации");
	
	СтрокиВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ФинансовыйУчетПоДаннымБалансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для Каждого КлючИЗначение Из ПараметрыОтраженияВУчете.ПоляОтбораДвижений Цикл
		ЧастиПутиКДанным = СтрРазделить(КлючИЗначение.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляВыборки.Найти(ИмяПоляРегистра) = Неопределено Тогда
			СтрокиВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
			СуществующиеПоляВыборки.Добавить(ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляВыборки", СтрСоединить(СтрокиВыборкиПрочихПолей, РазделительСтрок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияПоОрганизации", УсловиеСоединенияПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоОрганизации", УсловиеОтбораПоОрганизации);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втРеестрДокументовСторно");
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСКлиентамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСКлиентамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСПоставщикамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСПоставщикамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ОбъектУчетаДт КАК ОбъектУчета,
	|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
	|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрДт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглДт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалДт КАК СуммаВал,
	|	0 КАК Количество
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ОбъектУчетаКт КАК ОбъектУчета,
	|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
	|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрКт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглКт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалКт КАК СуммаВал,
	|	0 КАК Количество
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|";
	
	Если ИмяРегистра = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя Тогда
		ИсточникДанных = "втРасчетыСКлиентамиПоСторно";
	Иначе
		ИсточникДанных = "втРасчетыСПоставщикамиПоСторно";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
	
	ИндексироватьПо = "ИНДЕКСИРОВАТЬ ПО"; //@Query-part
	
	Если СтрНайти(ТекстЗапросаРегистра, ИндексироватьПо, НаправлениеПоиска.СКонца) = 0 Тогда
		ТекстЗапросаРегистра = ТекстЗапросаРегистра
			+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
			+ ТекстЗапроса;
	Иначе
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, ИндексироватьПо,
			ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
			+ ТекстЗапроса
			+ ИндексироватьПо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовОпределенияСчетовУчетаПоОбъектам

Процедура ДобавитьТаблицуНастроекФормированияПроводок(Запрос, ТекстыЗапросов)
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ДокументыКОтражению") = Неопределено Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ПланыСчетовМеждународногоУчетаОрганизаций.Период КАК Период,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
		|ПОМЕСТИТЬ втНастройкиПроводокПоПланамСчетов
		|ИЗ
		|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
		|ГДЕ
		|	&УсловиеПланСчетов
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	ПланСчетов
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПланСчетов", СтрокаУсловияПланСчетов(Запрос.Параметры));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПланСчетов", "ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрЗапросаПланСчетов", "&ПланСчетов");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) КАК Период,
		|	ДвиженияДебетКредит.Организация КАК Организация,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)) КАК ПланСчетов,
		|	МАКСИМУМ(НастройкиПроводокПоПланамСчетов.Период) КАК ПериодНастройкиПроводок
		|ПОМЕСТИТЬ втПериодыНастроекПроводок
		|ИЗ
		|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
		|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПланамСчетов КАК НастройкиПроводокПоПланамСчетов
		|		ПО ДвиженияДебетКредит.Период >= НастройкиПроводокПоПланамСчетов.Период
		|		 И ДвиженияДебетКредит.Организация = НастройкиПроводокПоПланамСчетов.Организация
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ),
		|	ДвиженияДебетКредит.Организация,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка))
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодНастройкиПроводок,
		|	Организация,
		|	ПланСчетов
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПериодыНастроекПроводок.Период КАК Период,
		|	ПериодыНастроекПроводок.Организация КАК Организация,
		|	ПериодыНастроекПроводок.ПланСчетов КАК ПланСчетов,
		|	ЕСТЬNULL(ПериодыНастроекПроводок.ПланСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей, ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах)) КАК СпособУчетаНесобственныхЦенностей,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок, ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)) КАК НастройкаФормированияПроводок,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств, ЛОЖЬ) КАК ВыделениеДолгосрочныхАктивовОбязательств,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок.ПроводкиПоВыручкеБезНДС, ЛОЖЬ) КАК ВыручкаБезНДС
		|ПОМЕСТИТЬ втНастройкиПроводокПоПериодам
		|ИЗ
		|	втПериодыНастроекПроводок КАК ПериодыНастроекПроводок
		|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПланамСчетов КАК НастройкиПроводокПоПланамСчетов
		|		ПО ПериодыНастроекПроводок.ПериодНастройкиПроводок = НастройкиПроводокПоПланамСчетов.Период
		|		 И ПериодыНастроекПроводок.Организация = НастройкиПроводокПоПланамСчетов.Организация
		|		 И ПериодыНастроекПроводок.ПланСчетов = НастройкиПроводокПоПланамСчетов.ПланСчетов
		|СГРУППИРОВАТЬ ПО
		|	ПериодыНастроекПроводок.Период,
		|	ПериодыНастроекПроводок.Организация,
		|	ПериодыНастроекПроводок.ПланСчетов,
		|	НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	ПланСчетов,
		|	НастройкаФормированияПроводок
		|");
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втНастройкиПроводокПоПланамСчетов");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втПериодыНастроекПроводок");
	Иначе
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДокументыКОтражению.ДатаОтражения КАК Период,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
		|	ДокументыКОтражению.ПланСчетов.СпособУчетаНесобственныхПодконтрольныхЦенностей КАК СпособУчетаНесобственныхЦенностей,
		|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ДокументыКОтражению.НастройкаФормированияПроводок.ИспользоватьВыделениеДолгосрочныхАктивовОбязательств КАК ВыделениеДолгосрочныхАктивовОбязательств,
		|	ДокументыКОтражению.НастройкаФормированияПроводок.ПроводкиПоВыручкеБезНДС КАК ВыручкаБезНДС
		|ПОМЕСТИТЬ втНастройкиПроводокПоПериодам
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|СГРУППИРОВАТЬ ПО
		|	ДокументыКОтражению.ДатаОтражения,
		|	ДокументыКОтражению.Организация,
		|	ДокументыКОтражению.ПланСчетов,
		|	ДокументыКОтражению.НастройкаФормированияПроводок
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	ПланСчетов,
		|	НастройкаФормированияПроводок
		|");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуУчетныхПолитикФинансовогоУчета(Запрос, ТекстыЗапросов)
	
	Если Запрос.Параметры.ВыделениеДолгосрочныхАктивовОбязательств Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	УчетнаяПолитикаФинансовогоУчета.Период КАК Период,
		|	УчетнаяПолитикаФинансовогоУчета.Организация КАК Организация,
		|	УчетнаяПолитикаФинансовогоУчета.ДлительностьОперационногоЦикла КАК ДлительностьОперационногоЦикла
		|ПОМЕСТИТЬ втУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) КАК Период,
		|	ДвиженияДебетКредит.Организация КАК Организация,
		|	МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики
		|ПОМЕСТИТЬ втПериодыУчетнойПолитики
		|ИЗ
		|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
		|	ЛЕВОЕ СОЕДИНЕНИЕ втУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ДвиженияДебетКредит.Период >= УчетнаяПолитика.Период
		|		 И ДвиженияДебетКредит.Организация = УчетнаяПолитика.Организация
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ),
		|	ДвиженияДебетКредит.Организация
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодУчетнойПолитики,
		|	Организация
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПериодыУчетнойПолитики.Период КАК Период,
		|	ПериодыУчетнойПолитики.Организация КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитика.ДлительностьОперационногоЦикла, 0) КАК ДлительностьОперационногоЦикла
		|ПОМЕСТИТЬ втУчетнаяПолитикаПоПериодам
		|ИЗ
		|	втПериодыУчетнойПолитики КАК ПериодыУчетнойПолитики
		|	ЛЕВОЕ СОЕДИНЕНИЕ втУчетнаяПолитика КАК УчетнаяПолитика
		|		ПО ПериодыУчетнойПолитики.ПериодУчетнойПолитики = УчетнаяПолитика.Период
		|		 И ПериодыУчетнойПолитики.Организация = УчетнаяПолитика.Организация
		|СГРУППИРОВАТЬ ПО
		|	ПериодыУчетнойПолитики.Период,
		|	ПериодыУчетнойПолитики.Организация,
		|	ЕСТЬNULL(УчетнаяПолитика.ДлительностьОперационногоЦикла, 0)
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация
		|");
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втУчетнаяПолитика");
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втПериодыУчетнойПолитики");
	Иначе
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(0001,01,01) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	0 КАК ДлительностьОперационногоЦикла
		|ПОМЕСТИТЬ втУчетнаяПолитикаПоПериодам
		|ГДЕ
		|	ЛОЖЬ
		|");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуНастроекУчетаПрочихОпераций(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.НомерЗаписи КАК НомерЗаписи,
	|	ПрочиеАктивыПассивы.ДебетКредит КАК ДебетКредит,
	|	НастройкиМеждународногоУчета.ПланСчетов КАК ПланСчетов,
	|	МАКСИМУМ(НастройкиМеждународногоУчета.Ссылка) КАК НастройкаСчетовУчета
	|ПОМЕСТИТЬ втНастройкиУчетаПрочихОпераций
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивы
	|		ПО ДвиженияДебетКредит.Период = ПрочиеАктивыПассивы.Период
	|		 И ДвиженияДебетКредит.Регистратор = ПрочиеАктивыПассивы.Регистратор
	|		 И ДвиженияДебетКредит.ИдентификаторФинЗаписи = ПрочиеАктивыПассивы.ИдентификаторФинЗаписи
	|		 И ДвиженияДебетКредит.НастройкаХозОперации = ПрочиеАктивыПассивы.НастройкаХозяйственнойОперации
	|		 И ДвиженияДебетКредит.Организация = ПрочиеАктивыПассивы.Организация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	|		ПО ПрочиеАктивыПассивы.НастройкаСчетовУчета = НастройкиМеждународногоУчета.Ссылка
	|ГДЕ
	|	(ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиДт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций))
	|	ИЛИ
	|	(ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраПрочиеАктивыПассивы
	|		И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиКт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций))
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.НомерЗаписи,
	|	ПрочиеАктивыПассивы.ДебетКредит,
	|	НастройкиМеждународногоУчета.ПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	ПланСчетов,
	|	ДебетКредит
	|");
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовАналитикиКорреспонденций

Функция ТекстВыборкиАналитикиИзВременнойТаблицы(ЗаменаРеверсаНаСторно = Ложь)
	
	Если ЗаменаРеверсаНаСторно Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
		|	ТаблицаРегистра.ОбъектУчета КАК ОбъектУчета,
		|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
		|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоДебет
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоДебет
		|		ИНАЧЕ ТаблицаРегистра.ЭтоДебет
		|	КОНЕЦ КАК ЭтоДебет,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоКредит
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоКредит
		|		ИНАЧЕ ТаблицаРегистра.ЭтоКредит
		|	КОНЕЦ КАК ЭтоКредит,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоСторно
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоСторно
		|		ИНАЧЕ ТаблицаРегистра.ЭтоСторно
		|	КОНЕЦ КАК ЭтоСторно,
		|	&ПоляАналитикиВложеннойТаблицы,
		|	ТаблицаРегистра.Регистратор КАК Регистратор,
		|	ТаблицаРегистра.Организация КАК Организация,
		|	ТаблицаРегистра.Подразделение КАК Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
		|	ТаблицаРегистра.Валюта КАК Валюта,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаУпр
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаУпр
		|		ИНАЧЕ ТаблицаРегистра.СуммаУпр
		|	КОНЕЦ) КАК СуммаУпр,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаРегл
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаРегл
		|		ИНАЧЕ ТаблицаРегистра.СуммаРегл
		|	КОНЕЦ) КАК СуммаРегл,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.СуммаВал
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.СуммаВал
		|		ИНАЧЕ ТаблицаРегистра.СуммаВал
		|	КОНЕЦ) КАК СуммаВал,
		|	СУММА(ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.Количество
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА -ТаблицаРегистра.Количество
		|		ИНАЧЕ ТаблицаРегистра.Количество
		|	КОНЕЦ) КАК Количество
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаРегистра
		|	ЛЕВОЕ СОЕДИНЕНИЕ втДокументыЗаменыРеверсаНаСторно КАК ДокументыЗаменыРеверса
		|		ПО ТаблицаРегистра.Период = ДокументыЗаменыРеверса.Период
		|		 И ТаблицаРегистра.Регистратор = ДокументыЗаменыРеверса.Регистратор
		|		 И ТаблицаРегистра.ИдентификаторФинЗаписи = ДокументыЗаменыРеверса.ИдентификаторФинЗаписи
		|		 И ТаблицаРегистра.Организация = ДокументыЗаменыРеверса.Организация
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаРегистра.Период,
		|	ТаблицаРегистра.ИмяРегистра,
		|	ТаблицаРегистра.ОбъектУчета,
		|	ТаблицаРегистра.ОбъектНастройки,
		|	ТаблицаРегистра.МестоУчета,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоДебет
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоДебет
		|		ИНАЧЕ ТаблицаРегистра.ЭтоДебет
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоКредит
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоКредит
		|		ИНАЧЕ ТаблицаРегистра.ЭтоКредит
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ДокументыЗаменыРеверса.Регистратор ЕСТЬ NULL
		|			ТОГДА ТаблицаРегистра.ЭтоСторно
		|		КОГДА ТаблицаРегистра.ЭтоСторно
		|			ТОГДА НЕ ТаблицаРегистра.ЭтоСторно
		|		ИНАЧЕ ТаблицаРегистра.ЭтоСторно
		|	КОНЕЦ,
		|	&ГруппаАналитикиВложеннойТаблицы,
		|	ТаблицаРегистра.Регистратор,
		|	ТаблицаРегистра.Организация,
		|	ТаблицаРегистра.Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки,
		|	ТаблицаРегистра.ДатаПогашения,
		|	ТаблицаРегистра.Валюта
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
		|	ТаблицаРегистра.ОбъектУчета КАК ОбъектУчета,
		|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
		|	ТаблицаРегистра.МестоУчета КАК МестоУчета,
		|	ТаблицаРегистра.ЭтоДебет КАК ЭтоДебет,
		|	ТаблицаРегистра.ЭтоКредит КАК ЭтоКредит,
		|	ТаблицаРегистра.ЭтоСторно КАК ЭтоСторно,
		|	&ПоляВыбораАналитики,
		|	ТаблицаРегистра.Регистратор КАК Регистратор,
		|	ТаблицаРегистра.Организация КАК Организация,
		|	ТаблицаРегистра.Подразделение КАК Подразделение,
		|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаРегистра.ДатаПогашения КАК ДатаПогашения,
		|	ТаблицаРегистра.Валюта КАК Валюта,
		|	ТаблицаРегистра.СуммаУпр КАК СуммаУпр,
		|	ТаблицаРегистра.СуммаРегл КАК СуммаРегл,
		|	ТаблицаРегистра.СуммаВал КАК СуммаВал,
		|	ТаблицаРегистра.Количество КАК Количество
		|ИЗ
		|	&ИсточникДанных КАК ТаблицаРегистра
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовВариантовОтчетаАнализПроводокОперативногоУчета

Функция ТекстЗапросаАнализОшибокКорреспонденций(ПараметрыЗапроса)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка) КАК ПланСчетов,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка) КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ЛОЖЬ КАК ДолгосрочныйДт,
	|	ЛОЖЬ КАК ДолгосрочныйКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалДт
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалКт
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоКт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоДт
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоДт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоКт
	|	КОНЕЦ КАК КоличествоКт
	|ПОМЕСТИТЬ втНаборДвижений
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	&УсловиеНеОтраженныеВУчете
	|";
	
	Если ПараметрыЗапроса.НеОтраженныеВУчете = Истина Тогда
		УсловиеНеОтраженныеВУчете = "ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
		|		ГДЕ
		|			СтатусыОтражения.Организация = ДвиженияДебетКредит.Организация
		|			И СтатусыОтражения.Регистратор = ДвиженияДебетКредит.Регистратор
		|			И НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ)
		|			И НЕ СтатусыОтражения.Статус В (
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
		|			)
		|		)
		|";
	Иначе
		УсловиеНеОтраженныеВУчете = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНеОтраженныеВУчете", УсловиеНеОтраженныеВУчете);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДвиженияДебетКредит.ИнвертироватьПроводку",
		"ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолныйАнализКорреспонденций()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ ДвиженияСоСчетами.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ ДвиженияСоСчетами.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ДолгосрочныйКт
	|		ИНАЧЕ ДвиженияСоСчетами.ДолгосрочныйДт
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ДолгосрочныйДт
	|		ИНАЧЕ ДвиженияСоСчетами.ДолгосрочныйКт
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияСоСчетами.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияСоСчетами.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ВалютаКт
	|		ИНАЧЕ ДвиженияСоСчетами.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ВалютаДт
	|		ИНАЧЕ ДвиженияСоСчетами.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаУпрДт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаУпрКт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаРеглДт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаРеглКт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаВалКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаВалДт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.СуммаВалДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаВалКт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.КоличествоКт
	|		ИНАЧЕ ДвиженияСоСчетами.КоличествоДт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияСоСчетами.КоличествоДт
	|		ИНАЧЕ ДвиженияСоСчетами.КоличествоКт
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоКт
	|ПОМЕСТИТЬ втНаборДвижений
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияСоСчетами.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияСоСчетами.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияСоСчетами.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияСоСчетами.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовВариантовОтчетаАнализКорреспонденцийОперативногоУчета

Функция ТекстЗапросаАнализКорреспонденцийДляНастройки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ДолгосрочныйКт
	|		ИНАЧЕ ДвиженияДебетКредит.ДолгосрочныйДт
	|	КОНЕЦ КАК ДолгосрочныйДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ДолгосрочныйДт
	|		ИНАЧЕ ДвиженияДебетКредит.ДолгосрочныйКт
	|	КОНЕЦ КАК ДолгосрочныйКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалДт
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалКт
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоКт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоДт
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоДт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоКт
	|	КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	ДвиженияДебетКредит.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|	И ДвиженияДебетКредит.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ДвиженияДебетКредит.ИнвертироватьПроводку",
		"ВЫБОР
		|		КОГДА ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок
		|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
		|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт < 0
		|			  ИЛИ ДвиженияДебетКредит.СуммаУпрКт < 0
		|			  ИЛИ ДвиженияДебетКредит.СуммаРеглДт < 0
		|			  ИЛИ ДвиженияДебетКредит.СуммаРеглКт < 0
		|			  ИЛИ ДвиженияДебетКредит.СуммаВалДт < 0
		|			  ИЛИ ДвиженияДебетКредит.СуммаВалКт < 0
		|			  ИЛИ ДвиженияДебетКредит.КоличествоДт < 0
		|			  ИЛИ ДвиженияДебетКредит.КоличествоКт < 0
		|		ИНАЧЕ ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт
		|	КОНЕЦ");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// В процедуре происходит формирование запроса для отчета по корреспонденциям,
// отражение которых происходит с использованием настроек корреспонденций с установленным отбором
// 
// Параметры:
//  Запрос - Запрос - запрос отчета по корреспонденциям
//  ТекстыЗапросов - Массив из Строка - массив текстов запросов
//  ТекстыЗапросовРегистров - Структура Из КлючИЗначение - Описание:
//   * Ключ - Строка - имя финансового регистра
//   * Значение - Строка - текст запроса выборки данных финансового регистра
//  ДополнительныйОтбор - ОтборКомпоновкиДанных - отбор, установленный в настройке отражения корреспонденции
//
Процедура ПодготовитьЗапросАнализаКорреспонденцийДляНастройкиСОтбором(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров, ДополнительныйОтбор)
	
	ПоляОтбораДт = Новый Массив();
	ПоляОтбораКт = Новый Массив();
	
	ЗаполнитьПоляЭлементовОтбора(ПоляОтбораДт, ДополнительныйОтбор.Элементы, "Дт");
	ЗаполнитьПоляЭлементовОтбора(ПоляОтбораКт, ДополнительныйОтбор.Элементы, "Кт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.ДолгосрочныйДт КАК ДолгосрочныйДт,
	|	ДвиженияДебетКредит.ДолгосрочныйКт КАК ДолгосрочныйКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ЛОЖЬ КАК ИнвертироватьПроводку,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыДляНастройки
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	НЕ ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаУпрКт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаРеглДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаРеглКт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаВалДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаВалКт < 0
	|			  ИЛИ ДвиженияДебетКредит.КоличествоДт < 0
	|			  ИЛИ ДвиженияДебетКредит.КоличествоКт < 0
	|		ИНАЧЕ ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.ДолгосрочныйКт КАК ДолгосрочныйДт,
	|	ДвиженияДебетКредит.ДолгосрочныйДт КАК ДолгосрочныйКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноКт,
	|	ИСТИНА КАК ИнвертироватьПроводку,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиКт КАК ИсходныйОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ИсходныйОбъектНастройкиДт КАК ИсходныйОбъектНастройкиКт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаКт,
	|	ДвиженияДебетКредит.ДатаПогашенияКт КАК ДатаПогашенияДт,
	|	ДвиженияДебетКредит.ДатаПогашенияДт КАК ДатаПогашенияКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	-ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрДт,
	|	-ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрКт,
	|	-ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглДт,
	|	-ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглКт,
	|	-ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалДт,
	|	-ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалКт,
	|	-ДвиженияДебетКредит.КоличествоКт КАК КоличествоДт,
	|	-ДвиженияДебетКредит.КоличествоДт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаУпрКт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаРеглДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаРеглКт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаВалДт < 0
	|			  ИЛИ ДвиженияДебетКредит.СуммаВалКт < 0
	|			  ИЛИ ДвиженияДебетКредит.КоличествоДт < 0
	|			  ИЛИ ДвиженияДебетКредит.КоличествоКт < 0
	|		ИНАЧЕ ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ИсходныйОбъектНастройкиДт,
	|	ИсходныйОбъектНастройкиКт,
	|	МестоУчетаДт,
	|	МестоУчетаКт,
	|	ДатаПогашенияДт,
	|	ДатаПогашенияКт,
	|	Организация,
	|	НастройкаХозОперации
	|");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втДвиженияСоСчетамиДебетКредит");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|ГДЕ
	|	&УсловиеОбъектУчетаДт
	|	И &УсловиеОбъектУчетаКт
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДляНастройки.ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОбъектУчетаДт",
		СтрокаУсловияОбъектУчета(Запрос.Параметры, "Дт", "ОборотыДляНастройки", Истина));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОбъектУчетаКт",
		СтрокаУсловияОбъектУчета(Запрос.Параметры, "Кт", "ОборотыДляНастройки", Истина));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатОборотыРегистров = Результаты[Результаты.ВГраница() - 1];
	РезультатИменаРегистров = Результаты[Результаты.ВГраница()];
	
	ВыборкаОборотыРегистров = РезультатОборотыРегистров.Выбрать();
	ВыборкаИмяРегистра = РезультатИменаРегистров.Выбрать();
	
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ПоляИндексирования = ПоляИндексаТаблицОтдельныхКорреспонденций();
	ПоляИндексаРеверса = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПоляИндексаТаблицЗаменыРеверсаНаСторно();
	РегистрыВосстановленияРасчетовПоСторно = ФинансовыйУчетПоДаннымБалансовыхРегистров.РегистрыВосстановленияРасчетовПоСторно();

	ДоступныеПоляРегистров = Новый Структура();
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		ИмяТаблицыРегистра = ВыборкаИмяРегистра.ИмяРегистра;
		
		Если ПустаяСтрока(ИмяТаблицыРегистра)
		 ИЛИ ИмяТаблицыРегистра = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		ДоступныеПоляРегистра = Новый Массив();
		
		ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ДоступныеПоляРегистра, ИмяТаблицыРегистра);

		ТаблицаЗаменыРеверса = "втИсходная" + ИмяТаблицыРегистра;
		ТаблицаДляПомещения = "вт" + ИмяТаблицыРегистра;
		
		ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ИмяТаблицыРегистра];
		ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
		
		Если Запрос.Параметры.РегистрыЗаменыРеверсаНаСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексаРеверса, ТаблицаЗаменыРеверса);
			ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
			
			ТекстЗапросаРегистра = ТекстВыборкиАналитикиИзВременнойТаблицы(Истина);
			ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ТаблицаЗаменыРеверса);
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
		КонецЕсли;
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексирования, ТаблицаДляПомещения);
		
		Если РегистрыВосстановленияРасчетовПоСторно.Найти(ИмяТаблицыРегистра) <> Неопределено Тогда
			ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяТаблицыРегистра);
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
		ДоступныеПоляРегистров.Вставить(ИмяТаблицыРегистра, ДоступныеПоляРегистра);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
	КонецЕсли;
	
	Пока ВыборкаОборотыРегистров.Следующий() Цикл
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
		|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ОборотыДляНастройки.СчетУчетаДт КАК СчетУчетаДт,
		|	ОборотыДляНастройки.СчетУчетаКт КАК СчетУчетаКт,
		|	ОборотыДляНастройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
		|	ОборотыДляНастройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
		|	ОборотыДляНастройки.Период КАК Период,
		|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
		|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
		|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
		|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
		|	ОборотыДляНастройки.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
		|	ОборотыДляНастройки.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
		|	ОборотыДляНастройки.Организация КАК Организация,
		|	ОборотыДляНастройки.Регистратор КАК Регистратор,
		|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
		|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
		|	ОборотыДляНастройки.СтатусОтражения КАК СтатусОтражения,
		|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
		|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
		|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
		|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
		|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
		|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
		|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
		|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт,
		|	&ПоляОтбораТаблицыДт,
		|	&ПоляОтбораТаблицыКт
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		Если ПоляОтбораДт.Количество() > 0
			И НЕ ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраДт)
			И НЕ ВыборкаОборотыРегистров.ИмяРегистраДт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаДт КАК ТаблицаДт
			|		ПО ОборотыДляНастройки.Период = ТаблицаДт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаДт.Регистратор
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаДт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиДт = ТаблицаДт.ИдентификаторСтроки
			|		 И ОборотыДляНастройки.ИмяРегистраДт = &ИмяРегистраДт
			|		 И ОборотыДляНастройки.ОбъектУчетаДт = ТаблицаДт.ОбъектУчета
			|		 И ОборотыДляНастройки.ИсходныйОбъектНастройкиДт = ТаблицаДт.ОбъектНастройки
			|		 И ОборотыДляНастройки.ДатаПогашенияДт = ТаблицаДт.ДатаПогашения
			|		 И ОборотыДляНастройки.Организация = ТаблицаДт.Организация
			|		 И ВЫБОР
			|			КОГДА ТаблицаДт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаДт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаДт.ЭтоДебет
			|			ИНАЧЕ НЕ ТаблицаДт.ЭтоКредит
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ЭтоСторноДт = ТаблицаДт.ЭтоСторно
			|";
		КонецЕсли;
			
		Если ПоляОтбораКт.Количество() > 0
			И НЕ ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраКт)
			И НЕ ВыборкаОборотыРегистров.ИмяРегистраКт = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаКт КАК ТаблицаКт
			|		ПО ОборотыДляНастройки.Период = ТаблицаКт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаКт.Регистратор
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаКт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиКт = ТаблицаКт.ИдентификаторСтроки
			|		 И ОборотыДляНастройки.ИмяРегистраКт = &ИмяРегистраКт
			|		 И ОборотыДляНастройки.ОбъектУчетаКт = ТаблицаКт.ОбъектУчета
			|		 И ОборотыДляНастройки.ИсходныйОбъектНастройкиКт = ТаблицаКт.ОбъектНастройки
			|		 И ОборотыДляНастройки.ДатаПогашенияКт = ТаблицаКт.ДатаПогашения
			|		 И ОборотыДляНастройки.Организация = ТаблицаКт.Организация
			|		 И ВЫБОР
			|			КОГДА ТаблицаКт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаКт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаКт.ЭтоКредит
			|			ИНАЧЕ НЕ ТаблицаКт.ЭтоДебет
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ЭтоСторноКт = ТаблицаКт.ЭтоСторно
			|";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДт", СтрШаблон("вт%1", ВыборкаОборотыРегистров.ИмяРегистраДт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКт", СтрШаблон("вт%1", ВыборкаОборотыРегистров.ИмяРегистраКт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраДт", СтрШаблон("""%1""", ВыборкаОборотыРегистров.ИмяРегистраДт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраКт", СтрШаблон("""%1""", ВыборкаОборотыРегистров.ИмяРегистраКт));
		
		ДоступныеПоляРегистраДт = Неопределено;
		ДоступныеПоляРегистраКт = Неопределено;
		
		Если ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраДт)
		 ИЛИ НЕ ДоступныеПоляРегистров.Свойство(ВыборкаОборотыРегистров.ИмяРегистраДт, ДоступныеПоляРегистраДт) Тогда
			ДоступныеПоляРегистраДт = Новый Массив();
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраКт)
		 ИЛИ НЕ ДоступныеПоляРегистров.Свойство(ВыборкаОборотыРегистров.ИмяРегистраКт, ДоступныеПоляРегистраКт) Тогда
			ДоступныеПоляРегистраКт = Новый Массив();
		КонецЕсли;
		
		ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбораДт, ДоступныеПоляРегистраДт, ТекстЗапроса, "Дт");
		ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбораКт, ДоступныеПоляРегистраКт, ТекстЗапроса, "Кт");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
		|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ОборотыДляНастройки.СчетУчетаДт КАК СчетУчетаДт,
		|	ОборотыДляНастройки.СчетУчетаКт КАК СчетУчетаКт,
		|	ОборотыДляНастройки.ДолгосрочныйДт КАК ДолгосрочныйДт,
		|	ОборотыДляНастройки.ДолгосрочныйКт КАК ДолгосрочныйКт,
		|	ОборотыДляНастройки.Период КАК Период,
		|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
		|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
		|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
		|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
		|	ОборотыДляНастройки.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
		|	ОборотыДляНастройки.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
		|	ОборотыДляНастройки.Организация КАК Организация,
		|	ОборотыДляНастройки.Регистратор КАК Регистратор,
		|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
		|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
		|	ОборотыДляНастройки.СтатусОтражения КАК СтатусОтражения,
		|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
		|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
		|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
		|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
		|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
		|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
		|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
		|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|");
		
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "втОборотыДляНастройки");
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
		
		ОборотыДляНастройки = Результаты[0].Выгрузить();
		
		ТипыПолейОтбораДт = Новый Структура();
		ТипыПолейОтбораКт = Новый Структура();
		
		Для Каждого КлючИЗначение Из ТекстыЗапросовРегистров Цикл
			МенеджерРегистра = РегистрыНакопления[КлючИЗначение.Ключ]; // РегистрНакопленияМенеджер -
			ПараметрыОтражения = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
			ДоступныеПоляОтбора = ПараметрыОтражения.ПоляОтбораДвижений;
			
			ЗаполнитьТипыПолейОтбора(ПоляОтбораДт, ТипыПолейОтбораДт, ДоступныеПоляОтбора);
			ЗаполнитьТипыПолейОтбора(ПоляОтбораКт, ТипыПолейОтбораКт, ДоступныеПоляОтбора);
		КонецЦикла;
		
		ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбораДт, ОборотыДляНастройки.Колонки, "Дт");
		ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбораКт, ОборотыДляНастройки.Колонки, "Кт");
		
		ТекстВыборкиПолей = "";
		РазделительСтрок = "," + Символы.ПС + Символы.Таб;
		
		Для Каждого Колонка Из ОборотыДляНастройки.Колонки Цикл
			Если НЕ ПустаяСтрока(ТекстВыборкиПолей) Тогда
				ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок;
			КонецЕсли;
			ТекстВыборкиПолей = ТекстВыборкиПолей + "ОборотыДляНастройки." + Колонка.Имя;
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ТекстВыборкиПолей
		|ПОМЕСТИТЬ втОборотыДляНастройки
		|ИЗ
		|	&ОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиПолей", ТекстВыборкиПолей);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОборотыДляНастройки", ОборотыДляНастройки);
		Результат = Запрос.Выполнить();
		
		Если ПоляОтбораДт.Найти("ТипРегистратора") <> Неопределено Тогда
			СтрокаВыборкиПоля = "ТИПЗНАЧЕНИЯ(ОборотыДляНастройки.РегистраторДт) КАК ТипРегистратораДт";
			ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок + СтрокаВыборкиПоля;
		КонецЕсли;
		
		Если ПоляОтбораКт.Найти("ТипРегистратора") <> Неопределено Тогда
			СтрокаВыборкиПоля = "ТИПЗНАЧЕНИЯ(ОборотыДляНастройки.РегистраторКт) КАК ТипРегистратораКт";
			ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок + СтрокаВыборкиПоля;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ТекстВыборкиПолей
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиПолей", ТекстВыборкиПолей);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияПараметровЗапроса

Процедура ЗаполнитьИсточникиСоСрокамиОбращения(ПараметрыЗапроса, СтрокаОбъектаУчета, ПараметрыОтраженияДвижений)
	
	ИсточникиСоСрокамиОбращения = ПараметрыЗапроса.ИсточникиСоСрокамиОбращения; // ТаблицаЗначений -
	
	Если ПараметрыЗапроса.ВыделениеДолгосрочныхАктивовОбязательств
		И ПараметрыОтраженияДвижений.ВыделениеДолгосрочныхАктивовОбязательств
		И СтрокаОбъектаУчета.ВыделениеДолгосрочныхАктивовОбязательств Тогда
		НоваяСтрока = ИсточникиСоСрокамиОбращения.Добавить();
		НоваяСтрока.ИсточникДанных = СтрокаОбъектаУчета.ИсточникДанных;
		НоваяСтрока.ОбъектУчета = СтрокаОбъектаУчета.ОбъектУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиУчетаКорреспонденций(ПараметрыЗапроса, СтрокаОбъектаУчета)
	
	ПризнакиУчетаКорреспонденций = ПараметрыЗапроса.ПризнакиУчетаКорреспонденций; // ТаблицаЗначений -
	
	Для Каждого ПризнакУчетаКорреспонденции Из СтрокаОбъектаУчета.ПризнакиУчетаКорреспонденций Цикл
		НоваяСтрока = ПризнакиУчетаКорреспонденций.Добавить();
		НоваяСтрока.ОбъектУчета = СтрокаОбъектаУчета.ОбъектУчета;
		НоваяСтрока.КорОбъектУчета = ПризнакУчетаКорреспонденции.ОбъектУчета;
		НоваяСтрока.ПризнакУчета = ПризнакУчетаКорреспонденции.ПризнакУчета;
		НоваяСтрока.Значение = ПризнакУчетаКорреспонденции.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыНесобственныхЦенностей(ПараметрыЗапроса, СтрокаОбъектаУчета)
	
	ОбъектыНесобственныхЦенностей = ПараметрыЗапроса.ОбъектыНесобственныхЦенностей; // ТаблицаЗначений -
	
	Если ПараметрыЗапроса.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.НеОтражаютсяНаСчетах
	   И ПараметрыЗапроса.СпособУчетаНесобственныхЦенностей <> Перечисления.СпособыУчетаНесобственныхПодконтрольныхЦенностей.ПустаяСсылка()
	   И СтрокаОбъектаУчета.НесобственныеЦенности Тогда
		НоваяСтрока = ОбъектыНесобственныхЦенностей.Добавить();
		НоваяСтрока.ОбъектУчета = СтрокаОбъектаУчета.ОбъектУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыПоПризнакамУчетаНДС(ПараметрыЗапроса, СтрокаОбъектаУчета)
	
	Если СтрокаОбъектаУчета.УчетНДС Тогда
		ПараметрыЗапроса.ОбъектыУчетаНДС.Добавить(СтрокаОбъектаУчета.ОбъектУчета);
	КонецЕсли;
	
	Если СтрокаОбъектаУчета.УчетСНДС Тогда
		ПараметрыЗапроса.ОбъектыУчетаСНДС.Добавить(СтрокаОбъектаУчета.ОбъектУчета);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияТекстовЗапросов

Функция НастройкиФормированияПроводокПоПараметрамЗапроса(ПараметрыЗапроса)
	
	НастройкиПроводок = Справочники.НастройкиФормированияПроводокМеждународногоУчета.НастройкиФормированияПроводок(, Ложь);
	
	НастройкиПроводок.ВыделениеДолгосрочныхАктивовОбязательств = ПараметрыЗапроса.ВыделениеДолгосрочныхАктивовОбязательств;
	НастройкиПроводок.СпособУчетаНесобственныхЦенностей = ПараметрыЗапроса.СпособУчетаНесобственныхЦенностей;
	НастройкиПроводок.ВыручкаБезНДС = ПараметрыЗапроса.ВыручкаБезНДС;
	
	Возврат НастройкиПроводок;
	
КонецФункции

Процедура ИсключитьОбъектыУчетаПоФункциональнымОпциям(ОбъектыФинансовогоУчета)
	
	КоличествоСтрок = ОбъектыФинансовогоУчета.Количество();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИндексСтроки = КоличествоСтрок - НомерСтроки;
		ОписаниеОбъектаУчета = ОбъектыФинансовогоУчета[ИндексСтроки];
		Если НЕ Перечисления.ОбъектыФинансовогоУчета.ОбъектУчетаДоступенПоФункциональнымОпциям(ОписаниеОбъектаУчета) Тогда
			ОбъектыФинансовогоУчета.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьРегистрыПоКоллекциямДвиженийРегистраторов(ПараметрыЗапроса, БалансовыеФинансовыеРегистры)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапроса.Регистратор)
	   И НЕ ЗначениеЗаполнено(ПараметрыЗапроса.ТипРегистратора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗапроса.Регистратор) = Тип("Массив") Тогда
		ТипыРегистраторов = Новый Массив();
		Для Каждого Регистратор Из ПараметрыЗапроса.Регистратор Цикл
			ТипРегистратора = ТипЗнч(Регистратор);
			Если ТипыРегистраторов.Найти(ТипРегистратора) = Неопределено Тогда
				ТипыРегистраторов.Добавить(ТипРегистратора);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Регистратор) Тогда 
		ТипыРегистраторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ПараметрыЗапроса.Регистратор));
	ИначеЕсли ТипЗнч(ПараметрыЗапроса.ТипРегистратора) = Тип("Массив") Тогда
		ТипыРегистраторов = ПараметрыЗапроса.ТипРегистратора;
	Иначе
		ТипыРегистраторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗапроса.ТипРегистратора);
	КонецЕсли;
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	ВсеРегистрыНакопления = Новый Соответствие();
	
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		ДокументМетаданные = Метаданные.НайтиПоТипу(ТипРегистратора);
		Для Каждого РегистрМетаданные Из ДокументМетаданные.Движения Цикл
			Если РегистрыНакопленияМетаданные.Содержит(РегистрМетаданные) Тогда
				ИмяРегистра = РегистрМетаданные.Имя;
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИмяРегистра Из БалансовыеФинансовыеРегистры Цикл
		МенеджерРегистра = РегистрыНакопления[ИмяРегистра];
		МетаданныеРегистра = РегистрыНакопленияМетаданные[ИмяРегистра];
		ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра);
		
		Если ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор <> "Регистратор" Тогда
			РеквизитРегистратор = МетаданныеРегистра.Реквизиты[ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор];
			Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
				Если РеквизитРегистратор.Тип.СодержитТип(ТипРегистратора) Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтраженияДвижений.ВыделениеДолгосрочныхАктивовОбязательств Тогда
			Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
				Если ТипРегистратора = Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет") Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЗначений = БалансовыеФинансовыеРегистры.Количество();
	
	Для НомерЗначения = 1 По КоличествоЗначений Цикл
		ИндексЗначения = КоличествоЗначений - НомерЗначения;
		ИмяРегистра = БалансовыеФинансовыеРегистры[ИндексЗначения];
		Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
			БалансовыеФинансовыеРегистры.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьРегистрыПоКорреспонденциямОбъектовУчета(ПараметрыЗапроса, БалансовыеФинансовыеРегистры, ОбъектыФинансовогоУчета)
	
	// Отбор регистров по объектам учета некрасиво показывает сложные проводки в отчетах
	Возврат;
	
	Если ТипЗнч(ПараметрыЗапроса.ОбъектУчетаДт) = Тип("Массив") Тогда
		ОбъектыУчетаДт = ПараметрыЗапроса.ОбъектУчетаДт;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбъектУчетаДт) Тогда
		ОбъектыУчетаДт = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗапроса.ОбъектУчетаДт);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗапроса.ОбъектУчетаКт) = Тип("Массив") Тогда
		ОбъектыУчетаКт = ПараметрыЗапроса.ОбъектУчетаКт;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ОбъектУчетаКт) Тогда
		ОбъектыУчетаКт = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЗапроса.ОбъектУчетаКт);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ОбъектыУчетаДт.Количество() = 0
	 ИЛИ ОбъектыУчетаКт.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ВсеРегистрыНакопления = Новый Соответствие();
	
	Для Каждого ОбъектУчета Из ОбъектыУчетаДт Цикл
		СтрокиОбъектаУчета = ОбъектыФинансовогоУчета.НайтиСтроки(Новый Структура("ОбъектУчета", ОбъектУчета));
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектаУчета Цикл
			ИмяРегистра = СтрокаОбъектаУчета.ИсточникДанных;
			Если НЕ ПустаяСтрока(ИмяРегистра) Тогда
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОбъектУчета Из ОбъектыУчетаКт Цикл
		СтрокиОбъектаУчета = ОбъектыФинансовогоУчета.НайтиСтроки(Новый Структура("ОбъектУчета", ОбъектУчета));
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектаУчета Цикл
			ИмяРегистра = СтрокаОбъектаУчета.ИсточникДанных;
			Если НЕ ПустаяСтрока(ИмяРегистра) Тогда
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВсеРегистрыНакопления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоЗначений = БалансовыеФинансовыеРегистры.Количество();
	
	Для НомерЗначения = 1 По КоличествоЗначений Цикл
		ИндексЗначения = КоличествоЗначений - НомерЗначения;
		ИмяРегистра = БалансовыеФинансовыеРегистры[ИндексЗначения];
		Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
			БалансовыеФинансовыеРегистры.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция УдаляемыеПоляВыборкиЗапросовКорреспонденций()
	
	УдаляемыеПоля = Новый Массив();
	УдаляемыеПоля.Добавить("Подразделение");
	УдаляемыеПоля.Добавить("НаправлениеДеятельности");
	
	Возврат УдаляемыеПоля;
	
КонецФункции

Функция УдаляемыеПоляВыборкиЗапросовАналитикиДвижений()
	
	УдаляемыеПоля = Новый Массив();
	УдаляемыеПоля.Добавить("СлужебныйВидДеятельностиНДС");
	УдаляемыеПоля.Добавить("РеквизитСторно");
	
	Возврат УдаляемыеПоля;
	
КонецФункции

Функция ПоляИндексаТаблицыКорреспонденций()
	
	ПоляИндекса = Новый Массив();
	ПоляИндекса.Добавить("ЭтоДебет");
	ПоляИндекса.Добавить("ЭтоКредит");
	
	Возврат ПоляИндекса;
	
КонецФункции

Функция ПоляИндексаТаблицОтдельныхКорреспонденций()
	
	ПоляИндекса = Новый Массив();
	ПоляИндекса.Добавить("Период");
	ПоляИндекса.Добавить("Регистратор");
	ПоляИндекса.Добавить("ИдентификаторФинЗаписи");
	ПоляИндекса.Добавить("ИдентификаторСтроки");
	ПоляИндекса.Добавить("ОбъектУчета");
	ПоляИндекса.Добавить("ОбъектНастройки");
	ПоляИндекса.Добавить("МестоУчета");
	ПоляИндекса.Добавить("ДатаПогашения");
	ПоляИндекса.Добавить("Организация");
	ПоляИндекса.Добавить("НастройкаХозОперации");
	
	Возврат ПоляИндекса;
	
КонецФункции

Функция ПоляВыборкиПоОписаниюОбъектаУчета()
	
	ПоляВыборки = Новый Массив();
	ПоляВыборки.Добавить("ОбъектУчета");
	ПоляВыборки.Добавить("ОбъектНастройки");
	ПоляВыборки.Добавить("НаправлениеДеятельности");
	ПоляВыборки.Добавить("ИдентификаторФинЗаписи");
	ПоляВыборки.Добавить("НастройкаХозОперации");
	ПоляВыборки.Добавить("ИдентификаторСтроки");
	ПоляВыборки.Добавить("ДатаПогашения");
	ПоляВыборки.Добавить("ЭтоДебет");
	ПоляВыборки.Добавить("ЭтоКредит");
	ПоляВыборки.Добавить("СуммаУпр");
	ПоляВыборки.Добавить("СуммаРегл");
	ПоляВыборки.Добавить("СуммаВал");
	ПоляВыборки.Добавить("Количество");
	ПоляВыборки.Добавить("ЭтоСторно");
	ПоляВыборки.Добавить("УсловиеЗначенияРесурсов");
	
	Возврат ПоляВыборки;
	
КонецФункции

Функция СтрокиВыборкиПолейПоОписаниюОбъектаУчета(СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса)
	
	ПоляВыборкиОбъектаУчета = Новый Структура(СтрСоединить(ПоляВыборкиПоОписаниюОбъектаУчета(), ","));
	
	ПоляВыборкиОбъектаУчета.ОбъектУчета = СтрокаВыборкиОбъектаУчета(СтрокиОбъектовУчета, ПараметрыЗапроса);
	
	ПоляВыборкиОбъектаУчета.ОбъектНастройки = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымОбъектНастройки",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, Неопределено);
	
	ПоляВыборкиОбъектаУчета.НаправлениеДеятельности = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымНаправлениеДеятельности",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	ПоляВыборкиОбъектаУчета.ИдентификаторФинЗаписи = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымИдентификаторФинЗаписи",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, "");
	
	ПоляВыборкиОбъектаУчета.НастройкаХозОперации = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымНастройкаХозОперации",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, Справочники.НастройкиХозяйственныхОпераций.ПустаяСсылка());
	
	ПоляВыборкиОбъектаУчета.ИдентификаторСтроки = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымИдентификаторСтроки",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, "");
	
	ПоляВыборкиОбъектаУчета.ДатаПогашения = СтрокаВыборкиПоляСПризнакомУчетаВОбъекте("ПутьКДаннымДатаПогашения",
		"ВыделениеДолгосрочныхАктивовОбязательств", СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, '00010101');
		
	ПоляВыборкиОбъектаУчета.ЭтоДебет = СтрокаВыборкиПоляОбъектаУчета("ВыражениеЭтоДебет",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, Ложь);
		
	ПоляВыборкиОбъектаУчета.ЭтоКредит = СтрокаВыборкиПоляОбъектаУчета("ВыражениеЭтоКредит",
		СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, Ложь);
	
	Если СтрокиОбъектовУчета[0].РесурсыУпр.Количество() > 0 Тогда
		РесурсУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыУпр);
	Иначе
		РесурсУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыУпр);
	КонецЕсли;
	
	Если СтрокиОбъектовУчета[0].РесурсыРегл.Количество() > 0 Тогда
		РесурсРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыРегл);
	Иначе
		РесурсРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыРегл);
	КонецЕсли;
	
	Если СтрокиОбъектовУчета[0].РесурсыВал.Количество() > 0 Тогда
		РесурсВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыВал);
	Иначе
		РесурсВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыВал);
	КонецЕсли;
	
	Если СтрокиОбъектовУчета[0].РесурсыКоличество.Количество() > 0 Тогда
		РесурсКоличество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыКоличество);
	Иначе
		РесурсКоличество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыКоличество);
	КонецЕсли;
	
	ШаблонВыборкиСуммы = "ВЫБОР
	|		КОГДА СУММА(&Ресурс) < 0
	|			ТОГДА -СУММА(&Ресурс)
	|		ИНАЧЕ СУММА(&Ресурс)
	|	КОНЕЦ";
	
	УсловияСторно = Новый Массив();
	УсловияНеНоль = Новый Массив();
	
	ПоляВыборкиОбъектаУчета.СуммаУпр = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсУпр, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборкиОбъектаУчета.СуммаРегл = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсРегл, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборкиОбъектаУчета.СуммаВал = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсВал, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	ПоляВыборкиОбъектаУчета.Количество = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиСуммыРесурса(РесурсКоличество, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
	
	Если УсловияСторно.Количество() = 0 Тогда
		УсловияСторно.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь));
	КонецЕсли;
	
	Если УсловияНеНоль.Количество() = 0 Тогда
		УсловияНеНоль.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Ложь));
	КонецЕсли;
	
	ПоляВыборкиОбъектаУчета.ЭтоСторно = "(" + СтрСоединить(УсловияСторно, " ИЛИ ") + ")";
	ПоляВыборкиОбъектаУчета.УсловиеЗначенияРесурсов = "(" + СтрСоединить(УсловияНеНоль, " ИЛИ ") + ")";
	
	Возврат ПоляВыборкиОбъектаУчета;
	
КонецФункции

Функция СтрокаВыборкиОбъектаУчета(СтрокиОбъектовУчета, ПараметрыЗапроса)
	
	СтрокиВыбора = Новый Массив();
	ОбъектыБезОтбора = Новый Массив();
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		Если ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			СтрокиКогда = Новый Массив();
			СтрокиКогда.Добавить(Символы.Таб);
			СтрокиКогда.Добавить("КОГДА"); //@Query-part
			СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных, ПараметрыЗапроса));
			
			СтрокиТогда = Новый Массив();
			СтрокиТогда.Добавить(Символы.Таб);
			СтрокиТогда.Добавить("ТОГДА"); //@Query-part
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(СтрокаОбъектаУчета.ОбъектУчета));
			
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
		Иначе
			ОбъектыБезОтбора.Добавить(СтрокаОбъектаУчета);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиВыбора.Количество() = 0 И ОбъектыБезОтбора.Количество() = 0 Тогда
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Перечисления.ОбъектыФинансовогоУчета.ПустаяСсылка());
	ИначеЕсли ОбъектыБезОтбора.Количество() > 1 Тогда
		СтрокиИсключения = Новый Массив();
		СтрокиИсключения.Добавить("ru = 'Для регистра %1 описано более одного объекта финансового учета без указания отбора выборки данных:'");
		Для Каждого СтрокаОбъектаУчета Из ОбъектыБезОтбора Цикл
			СтрокиИсключения[0] = СтрЗаменить(СтрокиИсключения[0], "%1", СтрокаОбъектаУчета.ИсточникДанных);
			СтрокиИсключения.Добавить(СтрокаОбъектаУчета.ОбъектУчета);
		КонецЦикла;
		ВызватьИсключение СтрСоединить(СтрокиИсключения, Символы.ПС);
	ИначеЕсли СтрокиВыбора.Количество() = 0 Тогда
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ОбъектыБезОтбора[0].ОбъектУчета);
	Иначе
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		Если ОбъектыБезОтбора.Количество() = 0 Тогда
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Перечисления.ОбъектыФинансовогоУчета.ПустаяСсылка()));
		Иначе
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ОбъектыБезОтбора[0].ОбъектУчета));
		КонецЕсли;
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиПоляОбъектаУчета(СвойствоПутьКДанным, СтрокиОбъектовУчета, ПараметрыОтраженияДвижений,
	ПараметрыЗапроса, НеопределенноеЗначение)
	
	ПутиКДаннымОбъектовУчета = Новый Соответствие();
	ПутьКДаннымБезОтбора = Неопределено;
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		ПутьКДанным = СтрокаОбъектаУчета[СвойствоПутьКДанным];
		Если ПутиКДаннымОбъектовУчета[ПутьКДанным] = Неопределено Тогда
			ПутиКДаннымОбъектовУчета.Вставить(ПутьКДанным, Новый Массив());
		КонецЕсли;
		ПутиКДаннымОбъектовУчета[ПутьКДанным].Добавить(СтрокаОбъектаУчета);
		Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			ПутьКДаннымБезОтбора = ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиВыбора = Новый Массив();
	
	Для Каждого ПутьКДаннымОбъектовУчета Из ПутиКДаннымОбъектовУчета Цикл
		Если ПутьКДаннымБезОтбора = Неопределено И ПустаяСтрока(ПутьКДаннымОбъектовУчета.Ключ) Тогда
			Продолжить;
		ИначеЕсли ПутьКДаннымОбъектовУчета.Ключ = ПутьКДаннымБезОтбора Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаОтборов = Новый Массив();
		Для Каждого СтрокаОбъектаУчета Из ПутьКДаннымОбъектовУчета.Значение Цикл
			ГруппаОтборов.Добавить(СтрокаОбъектаУчета.ОтборДанных);
		КонецЦикла;
		
		СтрокиКогда = Новый Массив();
		СтрокиКогда.Добавить(Символы.Таб);
		СтрокиКогда.Добавить("КОГДА"); //@Query-part
		СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(ГруппаОтборов, ПараметрыЗапроса));
		
		СтрокиТогда = Новый Массив();
		СтрокиТогда.Добавить(Символы.Таб);
		СтрокиТогда.Добавить("ТОГДА"); //@Query-part
		Если НЕ ПустаяСтрока(ПутьКДаннымОбъектовУчета.Ключ) Тогда
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПутьКДаннымОбъектовУчета.Ключ));
		ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]));
		Иначе
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
	КонецЦикла;
	
	Если СтрокиВыбора.Количество() > 0 Тогда
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		Если ЗначениеЗаполнено(ПутьКДаннымБезОтбора) Тогда
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПутьКДаннымБезОтбора));
		ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]));
		Иначе
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	ИначеЕсли ЗначениеЗаполнено(ПутьКДаннымБезОтбора) Тогда
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПутьКДаннымБезОтбора);
	ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]);
	Иначе
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение);
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиПоляСПризнакомУчетаВОбъекте(СвойствоПутьКДанным, СвойствоПризнакУчета,
	СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, ПараметрыЗапроса, НеопределенноеЗначение)
	
	ЗначениеОбщегоПризнакаУчета = Неопределено;
	
	Если ПараметрыЗапроса.Свойство(СвойствоПризнакУчета, ЗначениеОбщегоПризнакаУчета)
		И НЕ Булево(ЗначениеОбщегоПризнакаУчета) Тогда
		Возврат ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение);
	ИначеЕсли НЕ Булево(ПараметрыОтраженияДвижений[СвойствоПризнакУчета]) Тогда
		Возврат ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение);
	ИначеЕсли ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
		Возврат ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение);
	КонецЕсли;
	
	ПризнакиУчетаОбъектовУчета = Новый Соответствие();
	ПризнакУчетаБезОтбора = Неопределено;
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		ПризнакУчета = Булево(СтрокаОбъектаУчета[СвойствоПризнакУчета]);
		Если ПризнакиУчетаОбъектовУчета[ПризнакУчета] = Неопределено Тогда
			ПризнакиУчетаОбъектовУчета.Вставить(ПризнакУчета, Новый Массив());
		КонецЕсли;
		ПризнакиУчетаОбъектовУчета[ПризнакУчета].Добавить(СтрокаОбъектаУчета);
		Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			ПризнакУчетаБезОтбора = ПризнакУчета;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиВыбора = Новый Массив();
	
	Для Каждого ПризнакУчетаОбъектовУчета Из ПризнакиУчетаОбъектовУчета Цикл
		Если ПризнакУчетаОбъектовУчета.Ключ = ПризнакУчетаБезОтбора Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаОтборов = Новый Массив();
		Для Каждого СтрокаОбъектаУчета Из ПризнакУчетаОбъектовУчета.Значение Цикл
			ГруппаОтборов.Добавить(СтрокаОбъектаУчета.ОтборДанных);
		КонецЦикла;
		
		СтрокиКогда = Новый Массив();
		СтрокиКогда.Добавить(Символы.Таб);
		СтрокиКогда.Добавить("КОГДА"); //@Query-part
		СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(ГруппаОтборов, ПараметрыЗапроса));
		
		СтрокиТогда = Новый Массив();
		СтрокиТогда.Добавить(Символы.Таб);
		СтрокиТогда.Добавить("ТОГДА"); //@Query-part
		Если ПризнакУчетаОбъектовУчета.Ключ = Истина Тогда
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]));
		Иначе
			СтрокиТогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
	КонецЦикла;
	
	Если СтрокиВыбора.Количество() > 0 Тогда
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		Если ПризнакУчетаБезОтбора = Истина Тогда
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]));
		Иначе
			СтрокиИначе.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	ИначеЕсли ПризнакУчетаБезОтбора = Истина Тогда
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]);
	Иначе
		СтрокаВыборки = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(НеопределенноеЗначение);
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиСубконто(ВидСубконто, ТипЗначенияСубконто, ИмяРегистра, СтрокиОбъектовУчета)
	
	СтрокиВыбора = Новый Массив();
	
	ПутьКДаннымСубконтоБезОтбора = "";
	ОтборыДанныхБезПутейСубконто = Новый Массив();
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		ПутьКДаннымСубконто = СтрокаОбъектаУчета.ПутиКДаннымСубконто[ВидСубконто];
		Если ПутьКДаннымСубконто <> Неопределено Тогда
			ПутьКДаннымСубконто = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПутьКДаннымСубконто);
			Если ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
				СтрокиКогда = Новый Массив();
				СтрокиКогда.Добавить(Символы.Таб);
				СтрокиКогда.Добавить("КОГДА"); //@Query-part
				СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных));
				
				СтрокиТогда = Новый Массив();
				СтрокиТогда.Добавить(Символы.Таб);
				СтрокиТогда.Добавить("ТОГДА"); //@Query-part
				СтрокиТогда.Добавить(ПутьКДаннымСубконто);
				
				СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
				СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
			Иначе
				ПутьКДаннымСубконтоБезОтбора = ПутьКДаннымСубконто;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			ОтборыДанныхБезПутейСубконто.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных));
		КонецЕсли;
	КонецЦикла;
	
	ПодобратьПоляРегистраПоТипуСубконто = НЕ ПустаяСтрока(ИмяРегистра);
	
	Если НЕ ПустаяСтрока(ПутьКДаннымСубконтоБезОтбора) Тогда
		СтрокиКогда = Новый Массив();
		СтрокиКогда.Добавить(Символы.Таб);
		СтрокиКогда.Добавить("КОГДА"); //@Query-part
		
		Если ОтборыДанныхБезПутейСубконто.Количество() > 0 Тогда
			СтрокиКогда.Добавить("НЕ ("); //@Query-part
			СтрокиКогда.Добавить(СтрСоединить(ОтборыДанныхБезПутейСубконто, " ИЛИ ")); //@Query-part
			СтрокиКогда.Добавить(")");
		Иначе
			СтрокиКогда.Добавить("ИСТИНА"); //@Query-part
			ПодобратьПоляРегистраПоТипуСубконто = Ложь;
		КонецЕсли;
		
		СтрокиТогда = Новый Массив();
		СтрокиТогда.Добавить(Символы.Таб);
		СтрокиТогда.Добавить("ТОГДА"); //@Query-part
		СтрокиТогда.Добавить(ПутьКДаннымСубконтоБезОтбора);
		
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
	КонецЕсли;
	
	Если ПодобратьПоляРегистраПоТипуСубконто Тогда
		ОписаниеПолейРегистра = ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ИмяРегистра);
		
		Для Каждого ОписаниеПоля Из ОписаниеПолейРегистра Цикл
			ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ОписаниеПоля.ПутьКДанным);
			
			СтрокиКогда = Новый Массив();
			СтрокиКогда.Добавить(Символы.Таб);
			СтрокиКогда.Добавить("КОГДА НЕ"); //@Query-part
			СтрокиКогда.Добавить(ПутьКДанным);
			СтрокиКогда.Добавить("В ("); //@Query-part
			СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ПустыеЗначенияТипа(ОписаниеПоля.Тип)));
			СтрокиКогда.Добавить(") И ТИПЗНАЧЕНИЯ("); //@Query-part
			СтрокиКогда.Добавить(ПутьКДанным);
			СтрокиКогда.Добавить(") В ("); //@Query-part
			СтрокиКогда.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ТипЗначенияСубконто.Типы()));
			СтрокиКогда.Добавить(")");
			
			СтрокиТогда = Новый Массив();
			СтрокиТогда.Добавить(Символы.Таб);
			СтрокиТогда.Добавить("ТОГДА"); //@Query-part
			СтрокиТогда.Добавить(ПутьКДанным);
				
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиВыбора.Количество() > 0 Тогда
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		СтрокиИначе.Добавить("НЕОПРЕДЕЛЕНО"); //@Query-part
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	Иначе
		СтрокаВыборки = "НЕОПРЕДЕЛЕНО"; //@Query-part
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаУсловияПланСчетов(ПараметрыЗапроса)
	
	Если ТипЗнч(ПараметрыЗапроса.ПланСчетов) = Тип("Массив") Тогда
		Возврат "&ПланСчетов В (&ПараметрЗапросаПланСчетов)";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.ПланСчетов) Тогда
		Возврат "&ПланСчетов = &ПараметрЗапросаПланСчетов";
	Иначе
		Возврат "ИСТИНА";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияОрганизация(ПараметрыЗапроса, ИмяРегистра)
	
	Если ТипЗнч(ПараметрыЗапроса.Организация) = Тип("Массив") Тогда
		Возврат "&Организация В (&ПараметрЗапросаОрганизация)";
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Организация) Тогда
		Возврат "&Организация = &ПараметрЗапросаОрганизация";
	Иначе
		Возврат "ИСТИНА";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияОбъектУчета(ПараметрыЗапроса, ДтКт, ПсевдонимИсточника, СтрогоеУсловие = Ложь)
	
	СтрокиУсловия = Новый Массив();
	
	Если ТипЗнч(ПараметрыЗапроса["ОбъектУчета" + ДтКт]) = Тип("Массив") Тогда
		СтрокиУсловия.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ОбъектУчета%1", ПсевдонимИсточника) + " В (&ОбъектУчета%1)");
		Если НЕ СтрогоеУсловие Тогда
			СтрокиУсловия.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ОбъектУчета%2", ПсевдонимИсточника) + " В (&ОбъектУчета%1)");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса["ОбъектУчета" + ДтКт]) Тогда
		СтрокиУсловия.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ОбъектУчета%1", ПсевдонимИсточника) + " = &ОбъектУчета%1");
		Если НЕ СтрогоеУсловие Тогда
			СтрокиУсловия.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника("ОбъектУчета%2", ПсевдонимИсточника) + " = &ОбъектУчета%1");
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокиУсловия.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	ИначеЕсли СтрокиУсловия.Количество() = 1 Тогда
		Возврат СтрШаблон(СтрокиУсловия[0], ДтКт);
	Иначе
		КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
		Возврат СтрШаблон("(" + СтрСоединить(СтрокиУсловия, " ИЛИ ") + ")", ДтКт, КорДтКт);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСрокаОбращения(Выборка, ПараметрыЗапроса, ДтКт)
	
	Если ПараметрыЗапроса.ИсточникиСоСрокамиОбращения.Найти(Выборка["ОбъектУчета" + ДтКт], "ОбъектУчета") = Неопределено Тогда
		Возврат "";
	ИначеЕсли Выборка["Долгосрочный" + ДтКт] Тогда
		Возврат НСтр("ru = 'Долгосрочный';
					|en = 'Long-term'");
	Иначе
		Возврат НСтр("ru = 'Краткосрочный';
					|en = 'Short-term'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодборСчетовУчета

Функция ВсеВидыСубконтоСчетовУчета(Выборка)
	
	ВсеВидыСубконто = Новый Соответствие();
	НомерПользовательскогоСубконто = 1;
	
	Пока Выборка.Следующий() Цикл
		Для НомерСубконто = 1 По Выборка.КоличествоСубконто Цикл
			ВидСубконто = Выборка["ВидСубконто" + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) И ВсеВидыСубконто[ВидСубконто] = Неопределено Тогда
				Если ПустаяСтрока(Выборка["ИмяВидаСубконто" + НомерСубконто]) Тогда
					ИмяВидаСубконто = "ПользовательскоеСубконто" + Формат(НомерПользовательскогоСубконто, "ЧГ=0");
					НомерПользовательскогоСубконто = НомерПользовательскогоСубконто + 1;
				Иначе
					ИмяВидаСубконто = "Субконто" + Выборка["ИмяВидаСубконто" + НомерСубконто];
				КонецЕсли;
				ОписаниеСубконто = Новый Структура();
				ОписаниеСубконто.Вставить("Имя", ИмяВидаСубконто);
				ОписаниеСубконто.Вставить("Тип", Выборка["ТипЗначенияСубконто" + НомерСубконто]);
				ВсеВидыСубконто.Вставить(ВидСубконто, ОписаниеСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВсеВидыСубконто;
	
КонецФункции

Функция ВсеВыраженияЗаполненияСубконто(Выборка, ПараметрыЗапроса)
	
	ВсеВыраженияСубконто = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		Для НомерВыражения = 1 По 3 Цикл
			ВыражениеСубконто = Выборка["ВыражениеСубконто" + НомерВыражения];
			Если ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса);
				Если ВсеВыраженияСубконто[ВыражениеСубконто] = Неопределено Тогда
					ИмяВыражения = "Выражение" + СтрЗаменить(ВыражениеСубконто, ".", "");
					ВсеВыраженияСубконто.Вставить(ВыражениеСубконто, ИмяВыражения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВсеВыраженияСубконто;
	
КонецФункции

Функция ВидыСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВидыСубконто)
	
	ВидыСубконтоРегистра = Новый Массив();
	
	ВыборкаСчетУчета = ВыборкаИмяРегистра.Выбрать();
	Пока ВыборкаСчетУчета.Следующий() Цикл
		ВыборкаВидыСубконто.Сбросить();
		ВыборкаВидыСубконто.НайтиСледующий(ВыборкаСчетУчета.СчетУчета, "СчетУчета");
		Для НомерСубконто = 1 По ВыборкаВидыСубконто.КоличествоСубконто Цикл
			ВидСубконто = ВыборкаВидыСубконто["ВидСубконто" + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) И ВидыСубконтоРегистра.Найти(ВидСубконто) = Неопределено Тогда
				ВидыСубконтоРегистра.Добавить(ВидСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВидыСубконтоРегистра;
	
КонецФункции

Функция ВыраженияСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВыраженияСубконто, ПараметрыЗапроса)
	
	ВыраженияСубконтоРегистра = Новый Массив();
	
	ВыборкаВыраженияСубконто.Сбросить();
	Пока ВыборкаВыраженияСубконто.НайтиСледующий(ВыборкаИмяРегистра.ИмяРегистра, "ИмяРегистра") Цикл
		Для НомерВыражения = 1 По 3 Цикл
			ВыражениеСубконто = ВыборкаВыраженияСубконто["ВыражениеСубконто" + НомерВыражения];
			Если ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса);
				Если ВыраженияСубконтоРегистра.Найти(ВыражениеСубконто) = Неопределено Тогда
					ВыраженияСубконтоРегистра.Добавить(ВыражениеСубконто);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыраженияСубконтоРегистра;
	
КонецФункции

Процедура ДобавитьПоляВыбораСубконто(СтрокиПолейАналитики, СтрокиГруппАналитики, ВсеВидыСубконто, ВидыСубконтоРегистра, ИмяРегистра, ОбъектыФинансовогоУчета)
	
	СтруктураПоиска = Новый Структура("ИсточникДанных", ИмяРегистра);
	СтрокиОбъектовУчета = ОбъектыФинансовогоУчета.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ВидСубконто Из ВидыСубконтоРегистра Цикл
		ОписаниеВидаСубконто = ВсеВидыСубконто[ВидСубконто];
		СтрокаВыборкиСубконто = СтрокаВыборкиСубконто(ВидСубконто, ОписаниеВидаСубконто.Тип, ИмяРегистра, СтрокиОбъектовУчета);
		СтрокиПолейАналитики.Добавить(СтрокаВыборкиСубконто + " КАК " + ОписаниеВидаСубконто.Имя);
		СтрокиГруппАналитики.Добавить(СтрокаВыборкиСубконто);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляВыбораВыражений(СтрокиПолейАналитики, СтрокиГруппАналитики, ВсеВыраженияСубконто, ВыраженияСубконтоРегистра)
	
	Для Каждого ВыражениеСубконто Из ВыраженияСубконтоРегистра Цикл
		ИмяВыражения = ВсеВыраженияСубконто[ВыражениеСубконто];
		ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ВыражениеСубконто);
		СтрокиПолейАналитики.Добавить(ПутьКДанным + " КАК " + ИмяВыражения);
		СтрокиГруппАналитики.Добавить(ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра)

	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиПолейАналитики.Количество() > 0 Тогда
		ТекстПолейАналитики = СтрСоединить(СтрокиПолейАналитики, РазделительСтрок);
	Иначе
		ТекстПолейАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	Если СтрокиГруппАналитики.Количество() > 0 Тогда
		ТекстГруппыАналитики = СтрСоединить(СтрокиГруппАналитики, РазделительСтрок);
	Иначе
		ТекстГруппыАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ПоляВыбораАналитики", ТекстПолейАналитики);
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ГруппаПолейАналитики", ТекстГруппыАналитики);
	
	Если СтрНайти(ТекстЗапросаРегистра, "&ПоляАналитикиВложеннойТаблицы") > 0 Тогда
		Разделитель = " КАК ";
		ДлинаРазделителя = СтрДлина(Разделитель);
		
		ПоляВложеннойТаблицы = Новый Массив();
		ГруппыВложеннойТаблицы = Новый Массив();
		
		Для Каждого СтрокаВыборкиПоля Из СтрокиПолейАналитики Цикл
			ПозицияРазделителя = СтрНайти(СтрокаВыборкиПоля, Разделитель, НаправлениеПоиска.СКонца);
			ПсевдонимПоля = Сред(СтрокаВыборкиПоля, ПозицияРазделителя + ДлинаРазделителя);
			
			ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ПсевдонимПоля);
			
			ПоляВложеннойТаблицы.Добавить(ПутьКДанным + " КАК " + ПсевдонимПоля);
			ГруппыВложеннойТаблицы.Добавить(ПутьКДанным);
		КонецЦикла;
	
		Если ПоляВложеннойТаблицы.Количество() > 0 Тогда
			ТекстПолейАналитики = СтрСоединить(ПоляВложеннойТаблицы, РазделительСтрок);
		Иначе
			ТекстПолейАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
		КонецЕсли;
		
		Если ГруппыВложеннойТаблицы.Количество() > 0 Тогда
			ТекстГруппыАналитики = СтрСоединить(ГруппыВложеннойТаблицы, РазделительСтрок);
		Иначе
			ТекстГруппыАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
		КонецЕсли;
		
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ПоляАналитикиВложеннойТаблицы", ТекстПолейАналитики);
		ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ГруппаАналитикиВложеннойТаблицы", ТекстГруппыАналитики);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики, ДоступныеПоляРегистра, ИмяРегистра)
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("Организация");
	СуществующиеПоляВыборки.Добавить("Подразделение");
	СуществующиеПоляВыборки.Добавить("НаправлениеДеятельности");
	СуществующиеПоляВыборки.Добавить("Валюта");
	СуществующиеПоляВыборки.Добавить("Регистратор");
	СуществующиеПоляВыборки.Добавить("НастройкаХозяйственнойОперации");
	
	Если ПустаяСтрока(ИмяРегистра)
	 ИЛИ ИмяРегистра = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Для Каждого ИмяПоляРегистра Из СуществующиеПоляВыборки Цикл
			ДоступныеПоляРегистра.Добавить(ИмяПоляРегистра);
		КонецЦикла;
	Иначе
		МенеджерРегистра = РегистрыНакопления[ИмяРегистра]; // РегистрНакопленияМенеджер -
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. МеждународныйУчетПоДаннымФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
		
		Для Каждого КлючИЗначение Из ПараметрыОтраженияВУчете.ПоляОтбораДвижений Цикл
			ЧастиПутиКДанным = СтрРазделить(КлючИЗначение.Значение.ПутьКДанным, ".");
			ИмяПоляРегистра = ЧастиПутиКДанным[0];
			
			Если ДоступныеПоляРегистра.Найти(ИмяПоляРегистра) = Неопределено Тогда
				ДоступныеПоляРегистра.Добавить(ИмяПоляРегистра);
				Если СуществующиеПоляВыборки.Найти(ИмяПоляРегистра) = Неопределено Тогда
					ПутьКДанным = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПутьКДаннымСПсевдонимомИсточника(ИмяПоляРегистра);
					СтрокиПолейАналитики.Добавить(ПутьКДанным + " КАК " + ИмяПоляРегистра);
					СтрокиГруппАналитики.Добавить(ПутьКДанным);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДоступныеПоляРегистра.Добавить("ТипРегистратора");
	
КонецПроцедуры

Процедура ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистра, ТекстЗапроса, ДтКт);
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("ВалютаДт");
	СуществующиеПоляВыборки.Добавить("ВалютаКт");
	
	СтрокиДоступныхПолей = Новый Массив();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоляРегистра Цикл
		ИмяПоля = ДоступноеПоле + ДтКт;
		
		Если СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
			Если ДоступноеПоле = "НастройкаХозяйственнойОперации" Тогда
				СтрокиДоступныхПолей.Добавить("Таблица" + ДтКт+ ".НастройкаХозОперации КАК " + ИмяПоля);
			ИначеЕсли ДоступноеПоле = "ТипРегистратора" Тогда
				СтрокиДоступныхПолей.Добавить("ТИПЗНАЧЕНИЯ(Таблица" + ДтКт+ ".Регистратор) КАК " + ИмяПоля);
			Иначе
				СтрокиДоступныхПолей.Добавить("Таблица" + ДтКт+ "." + ДоступноеПоле + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиДоступныхПолей.Количество() > 0 Тогда
		ТекстДоступныхПолей = СтрСоединить(СтрокиДоступныхПолей, РазделительСтрок);
	Иначе
		ТекстДоступныхПолей = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДоступныеПоляТаблицы" + ДтКт, ТекстДоступныхПолей);
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбора, ДоступныеПоляРегистра, ТекстЗапроса, ДтКт)
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("ВалютаДт");
	СуществующиеПоляВыборки.Добавить("ВалютаКт");
	
	СтрокиПолейОтбора = Новый Массив();
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		ИмяПоля = ПолеОтбора + ДтКт;
		
		Если ДоступныеПоляРегистра.Количество() = 0 Тогда
			СтрокиПолейОтбора.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено) + " КАК " + ИмяПоля);
		ИначеЕсли СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
			Если ПолеОтбора = "НастройкаХозяйственнойОперации" Тогда
				СтрокиПолейОтбора.Добавить("Таблица" + ДтКт+ ".НастройкаХозОперации КАК " + ИмяПоля);
			ИначеЕсли ПолеОтбора = "ТипРегистратора" Тогда
				СтрокиПолейОтбора.Добавить("ТИПЗНАЧЕНИЯ(Таблица" + ДтКт+ ".Регистратор) КАК " + ИмяПоля);
			ИначеЕсли ДоступныеПоляРегистра.Найти(ПолеОтбора) <> Неопределено Тогда
				СтрокиПолейОтбора.Добавить("Таблица" + ДтКт+ "." + ПолеОтбора + " КАК " + ИмяПоля);
			Иначе
				СтрокиПолейОтбора.Добавить(ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено) + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиПолейОтбора.Количество() > 0 Тогда
		ТекстПолейОтбора = СтрСоединить(СтрокиПолейОтбора, РазделительСтрок);
	Иначе
		ТекстПолейОтбора = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОтбораТаблицы" + ДтКт, ТекстПолейОтбора);
	
КонецПроцедуры

Процедура ЗаполнитьТипыПолейОтбора(ПоляОтбора, ТипыПолейОтбора, ДоступныеПоляОтбора)
	
	Для Каждого КлючИЗначение Из ДоступныеПоляОтбора Цикл
		ЧастиПутиКДанным = СтрРазделить(КлючИЗначение.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		
		Для Каждого ПолеОтбора Из ПоляОтбора Цикл
			Если ПолеОтбора = ИмяПоляРегистра Тогда
				Если НЕ ТипыПолейОтбора.Свойство(ПолеОтбора) Тогда
					ТипыПолейОтбора.Вставить(ПолеОтбора, Новый Массив());
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыПолейОтбора[ПолеОтбора], КлючИЗначение.Значение.Тип.Типы(), Истина);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПоляОтбора.Найти("ТипРегистратора") <> Неопределено И НЕ ТипыПолейОтбора.Свойство("Регистратор") Тогда
		ТипыПолейОтбора.Вставить("Регистратор", Документы.ТипВсеСсылки().Типы());
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбора, КолонкиТаблицы, ДтКт)
	
	СуществующиеКолонкиТаблицы = Новый Массив();
	СуществующиеКолонкиТаблицы.Добавить("ВалютаДт");
	СуществующиеКолонкиТаблицы.Добавить("ВалютаКт");
	
	Для Каждого КлючИЗначение Из ТипыПолейОтбора Цикл
		ИмяКолонки = КлючИЗначение.Ключ + ДтКт;
		
		Если СуществующиеКолонкиТаблицы.Найти(ИмяКолонки) = Неопределено Тогда
			КолонкиТаблицы.Добавить(ИмяКолонки, Новый ОписаниеТипов(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПустойСчетДляНастройки(ВыборкаДвижения, ДтКт)
	
	ДанныеРегистрацииСчета = РегистрыСведений.СчетаМеждународногоУчетаТребующиеНастройки.НовыеДанныеРегистрацииСчета();
	ДанныеРегистрацииСчета.ПланСчетов = ВыборкаДвижения.ПланСчетов;
	ДанныеРегистрацииСчета.НастройкаФормированияПроводок = ВыборкаДвижения.НастройкаФормированияПроводок;
	ДанныеРегистрацииСчета.ОбъектУчета = ВыборкаДвижения["ОбъектУчета" + ДтКт];
	ДанныеРегистрацииСчета.ОбъектНастройки = ВыборкаДвижения["ОбъектНастройки" + ДтКт];
	ДанныеРегистрацииСчета.Документ = ВыборкаДвижения.Регистратор;
	ДанныеРегистрацииСчета.Долгосрочный = ВыборкаДвижения["Долгосрочный" + ДтКт];
	
	РегистрыСведений.СчетаМеждународногоУчетаТребующиеНастройки.ЗарегистрироватьДляНастройки(ДанныеРегистрацииСчета);
	
КонецПроцедуры

Процедура НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса, ДтКт = "")
	
	Если ДтКт <> "Кт" И СтрНачинаетсяС(ВыражениеСубконто, ПараметрыЗапроса.ПрефиксВыраженияСубконтоДт) Тогда
		ВыражениеСубконто = Сред(ВыражениеСубконто, ПараметрыЗапроса.ДлинаПрефиксаВыраженияДт + 2);
	КонецЕсли;
	
	Если ДтКт <> "Дт" И СтрНачинаетсяС(ВыражениеСубконто, ПараметрыЗапроса.ПрефиксВыраженияСубконтоКт) Тогда
		ВыражениеСубконто = Сред(ВыражениеСубконто, ПараметрыЗапроса.ДлинаПрефиксаВыраженияКт + 2);
	КонецЕсли;
	
	ВыражениеСубконто = СтрЗаменить(ВыражениеСубконто, "_", ".");
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеНастроекСКД

Функция ПоляВыбораКомпоновкиДанных(ПараметрыЗапроса)
	
	ПоляВыбора = Новый Структура();
	ПоляВыбора.Вставить("НомерЗаписи", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	ПоляВыбора.Вставить("ПорядокПрименения", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ПоляВыбора;
	
КонецФункции

Функция ТаблицаРезультатовКомпоновкиДанных(ПоляВыбораКомпоновкиДанных)
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
	
	Для Каждого ПолеВыбора Из ПоляВыбораКомпоновкиДанных Цикл
		ТаблицаРезультатов.Колонки.Добавить(ПолеВыбора.Ключ, ПолеВыбора.Значение);
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

Функция ИзмеренияНастроекОтраженияКорреспонденций()
	
	ИзмеренияНастроек = Новый Массив();
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.Измерения Цикл
		ИзмеренияНастроек.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Возврат ИзмеренияНастроек;
	
КонецФункции

Функция НоваяСхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция НовыйКомпоновщикНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных, ПоляВыбораКомпоновкиДанных, ПараметрыЗапроса)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Для Каждого ПолеВыбора Из ПоляВыбораКомпоновкиДанных Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбора.Ключ);
	КонецЦикла;
	
	Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Параметр = ДоступныйПараметр.Параметр;
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр, ПараметрыЗапроса[Строка(Параметр)]);
	КонецЦикла;
	
	ДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Процедура ДобавитьИзмеренияНастройкиВОтборКомпоновкиДанных(ИзмеренияНастроек, ВыборкаНастройки, ОтборПриемник)
	
	Для Каждого ИмяИзмерения Из ИзмеренияНастроек Цикл
		НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяИзмерения);
		НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ВыборкаНастройки[ИмяИзмерения];
		НовыйЭлемент.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРезультатыКомпоновкиВТаблицу(СхемаКомпоновкиДанных, КомпоновщикНастроек, МенеджерВременныхТаблиц, ТаблицаРезультатовКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина,, МенеджерВременныхТаблиц);
	
	ПроцессорВыводаВТаблицуЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультатаКомпоновки = ПроцессорВыводаВТаблицуЗначений.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультатаКомпоновки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРезультатовКомпоновки.Добавить(), СтрокаРезультата);
	КонецЦикла;
	
КонецПроцедуры

// Копирует элемент отбора компоновки данных в приемник
// с добавлением суффикса к имени поля компоновки данных
//
// Параметры:
//  ОтборПриемник - ОтборКомпоновкиДанных - отбор, в который копируются элементы отбора
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - копируемый элемент отбора
//  ДтКт - Строка - суффикс, добавляемый к имени поля компоновки данных, "Дт" или "Кт"
//
Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора, ДтКт)
	
	ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение);
	
	Если НЕ ПустаяСтрока(ДтКт) Тогда
		ЧастиПутиКДанным = СтрРазделить(ПутьКДанным, ".");
		ЧастиПутиКДанным[0] = ЧастиПутиКДанным[0] + ДтКт;
		ПутьКДанным = СтрСоединить(ЧастиПутиКДанным, ".");
	КонецЕсли;
	
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,, "ЛевоеЗначение");
	
КонецПроцедуры

// Копирует группу элементов отбора компоновки данных в приемник
// с добавлением суффикса к именам полей компоновки данных
//
// Параметры:
//  ОтборПриемник - ОтборКомпоновкиДанных - отбор, в который копируются элементы отбора
//  ГруппаЭлементов - ГруппаЭлементовОтбораКомпоновкиДанных - группа, из которого копируются элементы отбора
//  ДтКт - Строка - суффикс, добавляемый к имени поля компоновки данных, "Дт" или "Кт"
//
Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов, ДтКт)
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа, ЭлементОтбора, ДтКт);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа, ЭлементОтбора, ДтКт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоляЭлементовОтбора(ПоляОтбора, ЭлементыОтбора, ДтКт = "")
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ЗаполнитьПоляЭлементовОтбора(ПоляОтбора, ЭлементОтбора, ДтКт);
			Иначе
				ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПолеОтбора = СтрРазделить(ПутьКДанным, ".")[0];
				
				Если НЕ ПустаяСтрока(ДтКт) Тогда
					Если СтрЗаканчиваетсяНа(ПолеОтбора, ДтКт) Тогда
						ПолеОтбора = Сред(ПолеОтбора, 1, СтрДлина(ПолеОтбора) - СтрДлина(ДтКт));
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ПоляОтбора.Найти(ПолеОтбора) = Неопределено Тогда
					ПоляОтбора.Добавить(ПолеОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПроводок

Процедура ЗаполнитьТаблицуПроводок(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок)
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	ПараметрыФормированияПроводок.Вставить("ДлинаСуммы", Запрос.Параметры.ДлинаСуммы);
	ПараметрыФормированияПроводок.Вставить("ТочностьСуммы", Запрос.Параметры.ТочностьСуммы);
	ПараметрыФормированияПроводок.Вставить("ДлинаКоличества", Запрос.Параметры.ДлинаКоличества);
	ПараметрыФормированияПроводок.Вставить("ТочностьКоличества", Запрос.Параметры.ТочностьКоличества);
	
	ТаблицыАналитики = Новый Структура();
	ИндексРезультатаЗапросаДвижений = 0;
	
	Для Каждого КлючИЗначение Из Запрос.Параметры.РегистрыВыборкиАналитики Цикл
		ТаблицыАналитики.Вставить(КлючИЗначение.Ключ, ТаблицаЗапросаАналитики(Результаты[КлючИЗначение.Значение]));
		Если КлючИЗначение.Значение >= ИндексРезультатаЗапросаДвижений Тогда
			ИндексРезультатаЗапросаДвижений = КлючИЗначение.Значение + 1;
		КонецЕсли;
	КонецЦикла;
	
	РезультатДвижения = Результаты[ИндексРезультатаЗапросаДвижений];
	ВыборкаДвижения = РезультатДвижения.Выбрать();
	
	Пока ВыборкаДвижения.Следующий() Цикл
		СтрокиАналитикиДт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, Запрос.Параметры, "Дт");
		СтрокиАналитикиКт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, Запрос.Параметры, "Кт");

		ОшибкиПроводки = Новый Соответствие();
		
		Если НЕ ФинансовыйУчетПоДаннымБалансовыхРегистров.ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитикиДт, Запрос.Параметры, "Дт") Тогда
			ОшибкиПроводки.Вставить(СтрШаблон(НСтр("ru = 'Ошибка при подборе субконто к записи регистра ""%1"" с идентификатором %2.';
													|en = 'An error occurred upon picking an extra dimension for the ""%1"" register record with ID %2.'"),
				ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.РегистрыНакопления[ВыборкаДвижения.ИмяРегистраДт]),
				ВыборкаДвижения.ИдентификаторФинЗаписи));
		КонецЕсли;
		
		Если НЕ ФинансовыйУчетПоДаннымБалансовыхРегистров.ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитикиКт, Запрос.Параметры, "Кт") Тогда
			ОшибкиПроводки.Вставить(СтрШаблон(НСтр("ru = 'Ошибка при подборе субконто к записи регистра ""%1"" с идентификатором %2.';
													|en = 'An error occurred upon picking an extra dimension for the ""%1"" register record with ID %2.'"),
				ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.РегистрыНакопления[ВыборкаДвижения.ИмяРегистраКт]),
				ВыборкаДвижения.ИдентификаторФинЗаписи));
		КонецЕсли;
		
		Если СтрокиАналитикиДт.Количество() > 1 И СтрокиАналитикиКт.Количество() > 1 Тогда
			ОшибкиПроводки.Вставить(СтрШаблон(НСтр("ru = 'Записи регистров ""%1"" и ""%2"" с идентификатором %3 имеют отношение ""многие ко многим"".';
													|en = 'Records of registers ""%1"" and ""%2"" with ID %3 have the Many-to-Many relationship.'"),
				ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.РегистрыНакопления[ВыборкаДвижения.ИмяРегистраДт]),
				ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.РегистрыНакопления[ВыборкаДвижения.ИмяРегистраКт]),
				ВыборкаДвижения.ИдентификаторФинЗаписи));
		КонецЕсли;
		
		Если ОшибкиПроводки.Количество() > 0 Тогда
			ТекстОшибки = "";
			Для Каждого ОшибкаПроводки Из ОшибкиПроводки Цикл
				ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + ОшибкаПроводки.Ключ;
			КонецЦикла;
			ДобавитьПроводкуСОшибкой(ТаблицаПроводок, ВыборкаДвижения, ТекстОшибки, ПараметрыФормированияПроводок);
		ИначеЕсли СтрокиАналитикиДт.Количество() = 1 И СтрокиАналитикиКт.Количество() = 1 Тогда
			ДобавитьПростуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
		Иначе
			ДобавитьСложнуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗапросаАналитики(РезультатЗапроса)
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	ОбязательныеПоляИндекса = "Период,Регистратор,ИдентификаторФинЗаписи,ИдентификаторСтроки,ИмяРегистра,ОбъектУчета,ОбъектНастройки,МестоУчета,ДатаПогашения,Организация";
	
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",ЭтоДебет,ЭтоСторно");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",ЭтоКредит,ЭтоСторно");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоДебет,ЭтоСторно");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоКредит,ЭтоСторно");
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, ПараметрыЗапроса, ДтКт)
	
	ИмяРегистра = ВыборкаДвижения["ИмяРегистра" + ДтКт];
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Период", ВыборкаДвижения.Период);
	СтруктураПоиска.Вставить("Регистратор", ВыборкаДвижения.Регистратор);
	СтруктураПоиска.Вставить("ИдентификаторФинЗаписи", ВыборкаДвижения.ИдентификаторФинЗаписи);
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ВыборкаДвижения["ИдентификаторСтроки" + ДтКт]);
	СтруктураПоиска.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураПоиска.Вставить("ОбъектУчета", ВыборкаДвижения["ОбъектУчета" + ДтКт]);
	СтруктураПоиска.Вставить("ОбъектНастройки", ВыборкаДвижения["ОбъектНастройки" + ДтКт]);
	СтруктураПоиска.Вставить("МестоУчета", ВыборкаДвижения["МестоУчета" + ДтКт]);
	СтруктураПоиска.Вставить("ДатаПогашения", ВыборкаДвижения["ДатаПогашения" + ДтКт]);
	СтруктураПоиска.Вставить("Организация", ВыборкаДвижения.Организация);
	
	Если ВыборкаДвижения.УчитыватьХозОперацию Тогда
		СтруктураПоиска.Вставить("НастройкаХозОперации", ВыборкаДвижения.НастройкаХозОперации);
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		СтруктураПоиска.Вставить("ЭтоКредит", Ложь);
	Иначе
		СтруктураПоиска.Вставить("ЭтоДебет", Ложь);
	КонецЕсли;
	
	СтруктураПоиска.Вставить("ЭтоСторно", ВыборкаДвижения["ЭтоСторно" + ДтКт]);
	СтрокиАналитики = ТаблицыАналитики[ИмяРегистра].Скопировать(СтруктураПоиска); // ТаблицаЗначений -
	
	Если СтрокиАналитики.Количество() = 0
	   И СтруктураПоиска.ОбъектНастройки = Неопределено Тогда
		СтруктураПоиска.ОбъектНастройки = Null;
		СтрокиАналитики = ТаблицыАналитики[ИмяРегистра].Скопировать(СтруктураПоиска); // ТаблицаЗначений -
	КонецЕсли;
	
	ВыполнитьДополнительныйОтборСтрокАналитики(ВыборкаДвижения, СтрокиАналитики, ДтКт);
	
	СтрокиАналитики.Колонки.Добавить("Субконто1");
	СтрокиАналитики.Колонки.Добавить("Субконто2");
	СтрокиАналитики.Колонки.Добавить("Субконто3");
	СтрокиАналитики.Колонки.Добавить("КорСубконто1");
	СтрокиАналитики.Колонки.Добавить("КорСубконто2");
	СтрокиАналитики.Колонки.Добавить("КорСубконто3");
	
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	ПрефиксВыраженияСубконто = ?(ВыборкаДвижения.ИнвертироватьПроводку, КорДтКт, ДтКт);
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
		ВидСубконто = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто];
		ЗначениеСубконто = ВыборкаДвижения["ЗначениеСубконто" + ДтКт + НомерСубконто];
		НеВычислятьСубконто = ВыборкаДвижения["НеВычислятьСубконто" + ДтКт + НомерСубконто];
		ВыражениеСубконто = ВыборкаДвижения["ВыражениеСубконто" + ДтКт + НомерСубконто];
		ЭтоВыражениеИзКорреспонденции = ВыборкаДвижения["КорВыражение" + ДтКт + НомерСубконто];
		
		Если НЕ ЭтоВыражениеИзКорреспонденции И ЗначениеЗаполнено(ВыражениеСубконто) Тогда
			НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса, ПрефиксВыраженияСубконто);
		КонецЕсли;
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			Если НеВычислятьСубконто Тогда
				СубконтоСтроки = ЗначениеСубконто;
			ИначеЕсли ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				Если ЭтоВыражениеИзКорреспонденции Тогда
					СубконтоСтроки = Неопределено;
				Иначе
					СубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВыраженияСубконто[ВыражениеСубконто]];
				КонецЕсли;
			Иначе
				СубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВидыСубконто[ВидСубконто].Имя];
			КонецЕсли;
			
			СтрокаАналитики["Субконто" + НомерСубконто] = ?(ЗначениеЗаполнено(СубконтоСтроки), СубконтоСтроки, Неопределено);
			СтрокаАналитики.НаправлениеДеятельности = ?(ЗначениеЗаполнено(СтрокаАналитики.НаправлениеДеятельности), СтрокаАналитики.НаправлениеДеятельности, Неопределено);
			СтрокаАналитики.Подразделение = ?(ЗначениеЗаполнено(СтрокаАналитики.Подразделение), СтрокаАналитики.Подразделение, Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	Если ВыборкаДвижения["КоличествоСубконто" + ДтКт] = 0 Тогда
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			СтрокаАналитики.НаправлениеДеятельности = ?(ЗначениеЗаполнено(СтрокаАналитики.НаправлениеДеятельности), СтрокаАналитики.НаправлениеДеятельности, Неопределено);
			СтрокаАналитики.Подразделение = ?(ЗначениеЗаполнено(СтрокаАналитики.Подразделение), СтрокаАналитики.Подразделение, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьКорВыражения = Ложь;
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
		ЕстьВыражениеДляКорреспонденции = ВыборкаДвижения["КорВыражение" + КорДтКт + НомерСубконто];
		КорВыражениеСубконто = ВыборкаДвижения["ВыражениеСубконто" + КорДтКт + НомерСубконто];
		
		Если ЕстьВыражениеДляКорреспонденции И ЗначениеЗаполнено(КорВыражениеСубконто) Тогда
			НормализоватьВыражениеСубконто(КорВыражениеСубконто, ПараметрыЗапроса, ПрефиксВыраженияСубконто);
			ЕстьКорВыражения = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			КорСубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВыраженияСубконто[КорВыражениеСубконто]];
			СтрокаАналитики["КорСубконто" + НомерСубконто] = ?(ЗначениеЗаполнено(КорСубконтоСтроки), КорСубконтоСтроки, Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	Если СтрокиАналитики.Количество() > 1 Тогда
		КолонкиГруппировки = "НаправлениеДеятельности,Подразделение,Субконто1,Субконто2,Субконто3";
		Если ЕстьКорВыражения Тогда
			КолонкиГруппировки = КолонкиГруппировки + ",КорСубконто1,КорСубконто2,КорСубконто3";
		КонецЕсли;
		КолонкиСуммирования = "СуммаУпр,СуммаРегл,СуммаВал,Количество";
		СтрокиАналитики.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
		ВыполнитьОтборСтрокАналитикиПоСуммам(ВыборкаДвижения, СтрокиАналитики, ДтКт);
	КонецЕсли;
	
	Возврат СтрокиАналитики;
	
КонецФункции

// Условия отбора в этой процедуре должны соответствовать дополнительным условиям соединения записей в процедуре формирования корреспонденций
//
Процедура ВыполнитьДополнительныйОтборСтрокАналитики(ВыборкаДвижения, СтрокиАналитики, ДтКт)
	
	Если НЕ ВыборкаДвижения.УчитыватьХозОперацию Тогда
		КоличествоСтрок = СтрокиАналитики.Количество();
		Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
			СтрокаАналитики = СтрокиАналитики[КоличествоСтрок - ОбратныйИндекс];
			Если ЗначениеЗаполнено(СтрокаАналитики.НастройкаХозОперации)
				И СтрокаАналитики.НастройкаХозОперации <> ВыборкаДвижения.НастройкаХозОперации Тогда
				СтрокиАналитики.Удалить(СтрокаАналитики);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыполнитьОтборСтрокАналитикиПоСуммам(ВыборкаДвижения, СтрокиАналитики, ДтКт);
	
КонецПроцедуры

Процедура ВыполнитьОтборСтрокАналитикиПоСуммам(ВыборкаДвижения, СтрокиАналитики, ДтКт)
	
	Если СтрокиАналитики.Количество() > 1
	И НЕ ВыборкаДвижения["СложнаяПроводка" + ДтКт] Тогда
		АналитикаССуммамиДвижения = Новый Массив();
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			Если СтрокаАналитики.СуммаУпр = ВыборкаДвижения["СуммаДвиженияУпр" + ДтКт]
			   И СтрокаАналитики.СуммаРегл = ВыборкаДвижения["СуммаДвиженияРегл" + ДтКт] Тогда
				АналитикаССуммамиДвижения.Добавить(СтрокаАналитики);
			КонецЕсли;
		КонецЦикла;
		
		Если АналитикаССуммамиДвижения.Количество() = 1 Тогда
			КоличествоСтрок = СтрокиАналитики.Количество();
			Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
				СтрокаАналитики = СтрокиАналитики[КоличествоСтрок - ОбратныйИндекс];
				Если СтрокаАналитики <> АналитикаССуммамиДвижения[0] Тогда
					СтрокиАналитики.Удалить(СтрокаАналитики);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроводкуСОшибкой(ТаблицаПроводок, ВыборкаДвижения, ТекстОшибки, ПараметрыФормированияПроводок)
	
	НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
	ЗаполнитьЗначенияСвойств(НоваяПроводка, ВыборкаДвижения, "ПланСчетов,Период,Организация,Регистратор");
	
	СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
	
	МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(НоваяПроводка, ТекстОшибки);
	МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(НоваяПроводка, СтатусПроводки);
	МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
	
КонецПроцедуры

Процедура ДобавитьПростуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок)
	
	ВалютыОперативногоУчета = ФинансовыйУчетПоДаннымБалансовыхРегистров.ВалютыОперативногоУчета(ВыборкаДвижения.Организация);
	УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ВыборкаДвижения.ПланСчетов, ВыборкаДвижения.Организация);

	ФункциональнаяСумма = ФункциональнаяСумма(ВыборкаДвижения, ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
	СуммаПредставления = СуммаПредставления(ВыборкаДвижения, ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
	
	НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
	
	ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения);
	ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов);
	
	ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ВыборкаДвижения, СтрокиАналитикиДт[0], "Дт");
	ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ВыборкаДвижения, СтрокиАналитикиКт[0], "Кт");
	
	ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокиАналитикиДт[0], "Дт");
	ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокиАналитикиКт[0], "Кт");
	
	ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок);
	
	МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
	
КонецПроцедуры

Функция ФункциональнаяСумма(ДанныеРесурсов, ВалютыОперативногоУчета, ВалютыМеждународногоУчета)
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		Сумма = ДанныеРесурсов.СуммаУпр;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
	Иначе //ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл
		Сумма = ДанныеРесурсов.СуммаРегл;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

Функция СуммаПредставления(ДанныеРесурсов, ВалютыОперативногоУчета, ВалютыМеждународногоУчета, Корреспонденция = Истина)
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр
		И ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаУпр Тогда
		Сумма = ДанныеРесурсов.СуммаУпр;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
	ИначеЕсли ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл
		И ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаРегл Тогда
		Сумма = ДанныеРесурсов.СуммаРегл;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
	ИначеЕсли ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаУпр Тогда
		Сумма = ДанныеРесурсов.СуммаУпр;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
	ИначеЕсли ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаРегл Тогда
		Сумма = ДанныеРесурсов.СуммаРегл;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
	ИначеЕсли Корреспонденция
		И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаДт Тогда
		Сумма = ДанныеРесурсов.СуммаВалДт;
		ВалютаРесурса = ДанныеРесурсов.ВалютаДт;
	ИначеЕсли Корреспонденция
		И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаКт Тогда
		Сумма = ДанныеРесурсов.СуммаВалКт;
		ВалютаРесурса = ДанныеРесурсов.ВалютаКт;
	ИначеЕсли НЕ Корреспонденция
		И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.Валюта Тогда
		Сумма = ДанныеРесурсов.СуммаВал;
		ВалютаРесурса = ДанныеРесурсов.Валюта;
	ИначеЕсли ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		Сумма = ДанныеРесурсов.СуммаУпр;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
	Иначе //ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл
		Сумма = ДанныеРесурсов.СуммаРегл;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения)
	
	НоваяПроводка.Период = ВыборкаДвижения.Период;
	НоваяПроводка.Регистратор = ВыборкаДвижения.Регистратор;
	НоваяПроводка.ПланСчетов = ВыборкаДвижения.ПланСчетов;
	НоваяПроводка.Организация = ВыборкаДвижения.Организация;
	
	Если (ВыборкаДвижения.ПроводкиСКорреспонденцией
			ИЛИ ВыборкаДвижения.ИмяРегистраДт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
			ИЛИ ВыборкаДвижения.ОбъектУчетаДт = Перечисления.ОбъектыФинансовогоУчета.ВводОстатков)
	   И ВыборкаДвижения.ОбъектУчетаДт <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
		НоваяПроводка.СчетДт = ВыборкаДвижения.СчетУчетаДт;
	КонецЕсли;
	
	Если (ВыборкаДвижения.ПроводкиСКорреспонденцией
			ИЛИ ВыборкаДвижения.ИмяРегистраКт <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
			ИЛИ ВыборкаДвижения.ОбъектУчетаКт = Перечисления.ОбъектыФинансовогоУчета.ВводОстатков)
	   И ВыборкаДвижения.ОбъектУчетаКт <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
		НоваяПроводка.СчетКт = ВыборкаДвижения.СчетУчетаКт;
	КонецЕсли;
	
	НоваяПроводка.Содержание = ВыборкаДвижения.НастройкаХозОперацииПредставление;
	НоваяПроводка.Сторно = ВыборкаДвижения.РеквизитСторно;
	НоваяПроводка.ИдентификаторФинЗаписи = "";
	НоваяПроводка.НастройкаХозяйственнойОперации = ВыборкаДвижения.НастройкаХозОперации;
	
	Если ВыборкаДвижения.РучноеУточнениеПроводки Тогда
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(НоваяПроводка, 
			Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов)
	
	НоваяПроводка.Сумма = ФункциональнаяСумма.Сумма;
	НоваяПроводка.ВалютаХраненияСуммыФункциональной = ФункциональнаяСумма.Валюта;
	НоваяПроводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
	
	НоваяПроводка.СуммаПредставления = СуммаПредставления.Сумма;
	НоваяПроводка.ВалютаХраненияСуммыПредставления = СуммаПредставления.Валюта;
	НоваяПроводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
	
КонецПроцедуры

Процедура ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ДанныеРесурсов, СтрокаАналитики, ДтКт, Корреспонденция = Истина)
	
	Если ВыборкаДвижения["Валютный" + ДтКт] Тогда
		НоваяПроводка["Валюта" + ДтКт] = ДанныеРесурсов["Валюта" + ?(Корреспонденция, ДтКт, "")];
		НоваяПроводка["ВалютнаяСумма" + ДтКт] = ДанныеРесурсов["СуммаВал" + ?(Корреспонденция, ДтКт, "")];
		Если НЕ ЗначениеЗаполнено(НоваяПроводка["Валюта" + ДтКт])
		   И НЕ ЗначениеЗаполнено(НоваяПроводка["ВалютнаяСумма" + ДтКт]) Тогда
			НоваяПроводка["Валюта" + ДтКт] = НоваяПроводка.ВалютаХраненияСуммыФункциональной;
			НоваяПроводка["ВалютнаяСумма" + ДтКт] = НоваяПроводка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДвижения["Количественный" + ДтКт] Тогда
		НоваяПроводка["Количество" + ДтКт] = ДанныеРесурсов["Количество" + ?(Корреспонденция, ДтКт, "")];
	КонецЕсли;
	
	Если ВыборкаДвижения["ИмяРегистра" + ДтКт] <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Если ВыборкаДвижения["УчетПоПодразделениям" + ДтКт] Тогда
			НоваяПроводка["Подразделение" + ДтКт] = СтрокаАналитики.Подразделение;
		КонецЕсли;
		Если ВыборкаДвижения["УчетПоНаправлениямДеятельности" + ДтКт] Тогда
			НоваяПроводка["НаправлениеДеятельности" + ДтКт] = СтрокаАналитики.НаправлениеДеятельности;
		КонецЕсли;
		
		КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
		Если ВыборкаДвижения["ИмяРегистра" + КорДтКт] = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
		   И ВыборкаДвижения["ОбъектУчета" + КорДтКт] <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
			Если ВыборкаДвижения["УчетПоПодразделениям" + КорДтКт] Тогда
				НоваяПроводка["Подразделение" + КорДтКт] = СтрокаАналитики.Подразделение;
			КонецЕсли;
			
			Если ВыборкаДвижения["УчетПоНаправлениямДеятельности" + КорДтКт] Тогда
				НоваяПроводка["НаправлениеДеятельности" + КорДтКт] = СтрокаАналитики.НаправлениеДеятельности;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокаАналитики, ДтКт)
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
		НоваяПроводка["ВидСубконто" + ДтКт + НомерСубконто] = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто];
		Если ВыборкаДвижения["ИмяРегистра" + ДтКт] <> ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета() Тогда
			Если НЕ ВыборкаДвижения["КорВыражение" + ДтКт + НомерСубконто]
			 ИЛИ ЗначениеЗаполнено(СтрокаАналитики["Субконто" + НомерСубконто]) Тогда
				НоваяПроводка["Субконто" + ДтКт + НомерСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаАналитики["Субконто" + НомерСубконто]) Тогда
			НоваяПроводка["Субконто" + ДтКт + НомерСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
		КонецЕсли;
	КонецЦикла;
	
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	
	Для НомерКорСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
		Если ВыборкаДвижения["КорВыражение" + КорДтКт + НомерКорСубконто]
		И НЕ ЗначениеЗаполнено(НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто]) Тогда
			НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто] = СтрокаАналитики["КорСубконто" + НомерКорСубконто];
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаДвижения["ИмяРегистра" + КорДтКт] = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИмяРегистраСлужебныхОбъектовУчета()
	   И ВыборкаДвижения["ОбъектУчета" + КорДтКт] <> Перечисления.ОбъектыФинансовогоУчета.СлужебныйНесобственныеЦенности Тогда
		Для НомерКорСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
			Если НЕ ЗначениеЗаполнено(НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто])
				И НЕ ВыборкаДвижения["НеВычислятьСубконто" + КорДтКт + НомерКорСубконто] Тогда
				Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
					Если ВыборкаДвижения["ВидСубконто" + КорДтКт + НомерКорСубконто] = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто] Тогда
						НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ЗначениеЗаполнено(НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто])
					И ВыборкаДвижения["ОбъектУчета" + КорДтКт] = Перечисления.ОбъектыФинансовогоУчета.РасчетыСРозничнымиПокупателями
					И ВыборкаДвижения["ВидСубконто" + КорДтКт + НомерКорСубконто] = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты Тогда
					НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто] = Справочники.Контрагенты.РозничныйПокупатель;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок)
	
	Если ВыборкаДвижения.ИнвертироватьПроводку Тогда
		РегистрыБухгалтерии.Международный.ИнвертироватьПроводку(
			НоваяПроводка,
			ПараметрыФормированияПроводок.ИнвертируемыеПоля,
			ПараметрыФормированияПроводок.ИнвертируемыеРесурсы,
			ПараметрыФормированияПроводок.КоличествоСубконто);
	КонецЕсли;
	
	Если ВыборкаДвижения.ИнвертироватьЗнакРесурсов Тогда
		Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.ИнвертируемыеРесурсы Цикл
			Если ЗначениеЗаполнено(НоваяПроводка[ИмяРесурса]) Тогда
				НоваяПроводка[ИмяРесурса] = -НоваяПроводка[ИмяРесурса];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСложнуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
	
	ВалютыОперативногоУчета = ФинансовыйУчетПоДаннымБалансовыхРегистров.ВалютыОперативногоУчета(ВыборкаДвижения.Организация);
	УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ВыборкаДвижения.ПланСчетов, ВыборкаДвижения.Организация);
	
	Если СтрокиАналитикиДт.Количество() > 1 Тогда
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
	Иначе
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
	КонецЕсли;
	
	РесурсыМногихАналитик = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПересчитанныеРесурсыМногихАналитик(ВыборкаДвижения, МногоАналитик, ПараметрыФормированияПроводок);
	РесурсыОднойАналитики = ФинансовыйУчетПоДаннымБалансовыхРегистров.РаспределенныеРесурсыОднойАналитики(ВыборкаДвижения, ОднаАналитика, РесурсыМногихАналитик, ПараметрыФормированияПроводок);
	
	ИндексСтрокиАналитики = 0;
	Для Каждого СтрокаАналитики Из МногоАналитик.СтрокиАналитики Цикл
		ФункциональнаяСумма = ФункциональнаяСумма(РесурсыМногихАналитик[ИндексСтрокиАналитики], ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
		СуммаПредставления = СуммаПредставления(РесурсыМногихАналитик[ИндексСтрокиАналитики], ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов, Ложь);

		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);

		ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения);
		ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов);
		
		ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения,
			РесурсыМногихАналитик[ИндексСтрокиАналитики], СтрокаАналитики, МногоАналитик.ДтКт, Ложь);
		ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения,
			РесурсыОднойАналитики[ИндексСтрокиАналитики], ОднаАналитика.СтрокиАналитики[0], ОднаАналитика.ДтКт, Ложь);
		
		ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокаАналитики, МногоАналитик.ДтКт);
		ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, ОднаАналитика.СтрокиАналитики[0], ОднаАналитика.ДтКт);
		
		ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок);
		
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		ИндексСтрокиАналитики = ИндексСтрокиАналитики + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти