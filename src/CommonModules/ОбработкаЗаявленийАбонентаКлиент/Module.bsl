////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Процедура ПодключитьОбработчикПроверкиЗаявлений(Интервал = Неопределено) Экспорт
	
	ОтключитьОбработчикПроверкиЗаявлений();
	
	// Подключаем однократно.
	// Внутри процедуры по результату проверки будет принято решение, включить ли его еще раз или нет.
	Интервал = ИнтервалПроверкиЗаявлений(Интервал);
	ПодключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента", Интервал, Истина);
	
КонецПроцедуры

Процедура ОтключитьОбработчикПроверкиЗаявлений() Экспорт
	
	ОтключитьОбработчикОжидания("СообщитьОбОдобренныхЗаявленияхАбонента");
	
КонецПроцедуры

Процедура ВключитьАвтоматическуюПроверкуСтатуса(ДокументЗаявление) Экспорт
	
	// Запускаем на сервере регламентное задание 
	ОбработкаЗаявленийАбонентаВызовСервера.ВключитьОтслеживаниеИзмененияСтатусаЗаявления(ДокументЗаявление);
	// Отслеживаем, вдруг у заявления изменился статус - тогда надо показать сообщение пользователю.
	ПодключитьОбработчикПроверкиЗаявлений();
	
КонецПроцедуры

Процедура СообщитьОбОдобренныхЗаявленияхАбонента_ПослеПолученияКонтекста(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.СообщитьОбОдобренныхЗаявленияхАбонента_Контейнер(Неопределено, Неопределено);
	
КонецПроцедуры

Процедура ПодсказкаКСертификатуОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "Подробнее" Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = ОбработкаЗаявленийАбонентаКлиентСервер.ПодробнаяПодсказкаПриВыбореСертификатаФНС(Форма.ЭтоЮридическоеЛицо);
		ПоказатьПредупреждение(, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Данные для запроса на сертификат
// 
//////////////////////////////////////////////////////////////////////////////////////////////
Функция ПараметрыНовогоСертификата(ДокументЗаявление) Экспорт
	
	ЭтоДоверенноеЛицо = ДокументЗаявление.ВладелецЭЦПЭтоФизЛицо;
	
	ПараметрыНовогоСертификата = Новый СписокЗначений;
	
	ЭтоЮридическоеЛицо = СтрДлина(ДокументЗаявление.ИНН)=10;
	
	// CN
	Если ЭтоЮридическоеЛицо И НЕ ЭтоДоверенноеЛицо Тогда
		CN = ДокументЗаявление.КраткоеНаименование;
	Иначе
		CN = ДокументЗаявление.ВладелецЭЦПФамилия
			+ " " 
			+ ДокументЗаявление.ВладелецЭЦПИмя
			+ " " 
			+ ДокументЗаявление.ВладелецЭЦПОтчество;
	КонецЕсли;
	ПараметрыНовогоСертификата.Добавить("2.5.4.3", СокрЛП(CN));
	
	// SN
	ПараметрыНовогоСертификата.Добавить("2.5.4.4", СокрЛП(ДокументЗаявление.ВладелецЭЦПФамилия));
	
	// GN
	ПараметрыНовогоСертификата.Добавить("2.5.4.42", СокрЛП(СокрЛП(ДокументЗаявление.ВладелецЭЦПИмя) + " " + СокрЛП(ДокументЗаявление.ВладелецЭЦПОтчество)));
	
	// SNILS
	СНИЛС = ДокументЗаявление.ВладелецЭЦПСНИЛС;
	СНИЛС = СтрЗаменить(СНИЛС,"-","");
	СНИЛС = СтрЗаменить(СНИЛС," ","");
	ПараметрыНовогоСертификата.Добавить("1.2.643.100.3", СНИЛС);
	
	// INN, INNLE
	ИНН = ДокументЗаявление.ИНН;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		Если НЕ ЭтоДоверенноеЛицо Тогда
			ПараметрыНовогоСертификата.Добавить("1.2.643.100.4", ИНН);
		КонецЕсли;
		
	КонецЕсли;
	
	ИННФЛ = ДокументЗаявление.ВладелецЭЦПИНН;
	Если ЗначениеЗаполнено(ИННФЛ) Тогда
		ПараметрыНовогоСертификата.Добавить("1.2.643.3.131.1.1", ИННФЛ);
	КонецЕсли;
	
	// E
	Если Не ПустаяСтрока(ДокументЗаявление.ЭлектроннаяПочта) Тогда
		ПараметрыНовогоСертификата.Добавить("1.2.840.113549.1.9.1", ДокументЗаявление.ЭлектроннаяПочта);
	КонецЕсли;
	
	// OGRN, OGRNIP
	Если НЕ ЭтоДоверенноеЛицо Тогда
		Если ЭтоЮридическоеЛицо Тогда
			ОГРН = ДокументЗаявление.ОГРН;
			ПараметрыНовогоСертификата.Добавить("1.2.643.100.1", СокрЛП(ОГРН));
		Иначе
			ОГРН = ДокументЗаявление.ОГРН;
			Если ЗначениеЗаполнено(ОГРН) Тогда
				ПараметрыНовогоСертификата.Добавить("1.2.643.100.5", СокрЛП(ОГРН));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Подразделение
	ДобавитьПодразделение = 
		НЕ ЭтоДоверенноеЛицо
		И ЭтоЮридическоеЛицо 
		И ДокументЗаявление.ПризнакОбособленногоПодразделения;
		
	Если ДобавитьПодразделение Тогда
		ПараметрыНовогоСертификата.Добавить("2.5.4.11", ДокументЗаявление.ВладелецЭЦППодразделение); 
	КонецЕсли;
	
	// Адрес
	ВключатьАдресДляИП = Истина;
	
	Если ЭтоЮридическоеЛицо ИЛИ ВключатьАдресДляИП Тогда
		
		ПараметрыНовогоСертификата.Добавить("2.5.4.6", "RU"); 
		
		// Область, город, улица
		Если НЕ ЭтоДоверенноеЛицо Тогда
			ОбработкаЗаявленийАбонентаВызовСервера.ЗаявлениеСформироватьАдресДляЗапросаНаСертификатКвалифицированный(
				ДокументЗаявление.Ссылка, 
				ПараметрыНовогоСертификата);
		КонецЕсли;
		
	КонецЕсли;
	
	// O
	Если ЭтоЮридическоеЛицо И НЕ ЭтоДоверенноеЛицо Тогда
		ПараметрыНовогоСертификата.Добавить("2.5.4.10",ДокументЗаявление.КраткоеНаименование); // поле O
	КонецЕсли;
	
	// T
	Если ЭтоЮридическоеЛицо И НЕ ЭтоДоверенноеЛицо Тогда
		ПараметрыНовогоСертификата.Добавить("2.5.4.12",ДокументЗаявление.ВладелецЭЦПДолжность); // поле T
	КонецЕсли;
	
	Возврат ПараметрыНовогоСертификата;
	
КонецФункции

Функция ДоступноСканирование() Экспорт

	ВерсияБСП = ОбработкаЗаявленийАбонентаВызовСервера.ВерсияБСП();
	
	ИспользоватьНовыйМетод = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
		ВерсияБСП, 
		"3.1.9.0") >= 0;
		
	Если ИспользоватьНовыйМетод Тогда
	
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		Доступно = МодульРаботаСФайламиКлиент.ДоступноСканирование();
		
	Иначе
	
		МодульРаботаСФайламиСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиСлужебныйКлиент");
		Доступно = МодульРаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
		
	КонецЕсли;
	
	Возврат Доступно;

КонецФункции

Функция ФормаОповещенияИлиМастераУжеОткрыта() Экспорт
	
	Окна = ПолучитьОкна();
	
	Если Окна = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Имена проверяемых форм
	ИменаФорм = Новый Массив;
	ИменаФорм.Добавить("Документ_ЗаявлениеАбонентаСпецоператораСвязи_ФормаДокумента");
	ИменаФорм.Добавить("СообщениеОбОдобренномЗаявлении");
	ИменаФорм.Добавить("СообщениеОбОтклоненномЗаявлении");
	ИменаФорм.Добавить("СообщениеОНеподключенномНаправлении");
	ИменаФорм.Добавить("СообщениеОНеобработанномЗаявлении");
	ИменаФорм.Добавить("ДлительноеДействие");
	ИменаФорм.Добавить("Мастер");
	
	Для Каждого ОткрытоеОкно Из Окна Цикл
		Если ОткрытоеОкно <> Неопределено Тогда
			ТекущаяФорма = ОткрытоеОкно.ПолучитьСодержимое();
			Если ТипЗнч(ТекущаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
				
				Для каждого ТекущееИмяФормы Из ИменаФорм Цикл
					Если СтрНайти(ТекущаяФорма.ИмяФормы, ТекущееИмяФормы) <> 0 Тогда 
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОткрытьФормуПомощи(Форма, ФИО = "", НомерТелефона = "", СсылкаНаИнструкцию = "") Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	
	Если ФИО <> "" Тогда
		ДополнительныеПараметры.Вставить("Фио", ФИО);
	КонецЕсли;
	
	Если НомерТелефона <> "" Тогда
		ДополнительныеПараметры.Вставить("НомерТелефона", НомерТелефона);
	КонецЕсли;
	
	Если СсылкаНаИнструкцию <> "" Тогда
		ДополнительныеПараметры.Вставить("СсылкаНаИнструкцию", СсылкаНаИнструкцию);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.Мастер_Помощь", ДополнительныеПараметры, Форма);
	
КонецПроцедуры

#Область ДляБП3

Процедура Открыть1СОтчетностьНаЗакладкеОтчеты() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность",
		ПараметрыФормы,
		,
		"1С-Отчетность");
	
	Оповестить("Открытие формы 1С-Отчетность", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьЗаявлениеНаПодключение(ЗаявлениеНаПодключение) Экспорт
	
	ПоказатьЗначение(, ЗаявлениеНаПодключение);
	
КонецПроцедуры

#КонецОбласти

	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнтервалПроверкиЗаявлений(Знач Интервал) Экспорт
	
	Если Интервал = Неопределено Тогда
		
		ИспользуетсяРежимТестирования = ДокументооборотСКОКлиент.ИспользуетсяРежимТестирования();
			
		Если ИспользуетсяРежимТестирования Тогда
			Интервал = 15;
		Иначе
			Интервал = 600;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

Процедура ПроверкаУЦОбработкаНавигационнойСсылки(Форма, Ссылка, СтандартнаяОбработка) Экспорт
	
	ЭтоВебСтраница = СтрНайти(Ссылка, "http");
	Если НЕ ЭтоВебСтраница Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(Форма.КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_УдалитеViPNet",, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключаемыйСертификатНажатие(ОповещениеОЗавершении, Форма, ПараметрыФормы = Неопределено) Экспорт
	
	КонтекстЭДОКлиент = Форма.КонтекстЭДОКлиент;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимВыбора", "Сертификат");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВключаемыйСертификатНажатие_Завершение", 
		ЭтотОбъект,
		ДополнительныеПараметры); 
	
	КонтекстЭДОКлиент.ВключаемыйСертификатНажатие(Форма, ОписаниеОповещения, ПараметрыФормы);
	
КонецПроцедуры

Процедура ВключаемыйСертификатНажатие_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйСертификат = Результат.ВключаемыйСертификат;
	Период = 60 * 24 * 60 * 60;
	
	ПредложитьЗаменить = ВыбранныйСертификат.ДействителенПо - Период < ТекущаяДата();

	ВходящийКонтекст.Вставить("Результат", Результат);
	
	Если ПредложитьЗаменить Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВключаемыйСертификатНажатие_ПослеВопроса", 
			ЭтотОбъект, 
			ВходящийКонтекст);
		
		ТекстВопроса = ТекстВопросаОбИстекающемСертификате(ВыбранныйСертификат.ДействителенПо);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(НСтр("ru = 'Использовать выбранный';
							|en = 'Использовать выбранный'"));
		Кнопки.Добавить(НСтр("ru = 'Отмена';
							|en = 'Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
		
	Иначе
		ВключаемыйСертификатНажатие_ПослеВопроса(НСтр("ru = 'Использовать выбранный';
														|en = 'Использовать выбранный'"), ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстВопросаОбИстекающемСертификате(ДействителенПо)
	
	ТекстВопроса = НСтр("ru = 'Ваш сертификат истекает через %1.
                         |После окончания срока действия сертификата эл. подписи отправка отчетов станет невозможной.';
                         |en = 'Ваш сертификат истекает через %1.
                         |После окончания срока действия сертификата эл. подписи отправка отчетов станет невозможной.'");
	
	Осталось = Цел((ДействителенПо - ТекущаяДата())/60/60/24); // в днях
	Если Осталось = 0 Тогда
		Осталось = Цел((ДействителенПо - ТекущаяДата())/60/60); // в часах
		Шаблон = ";%1 час;;%1 часа;%1 часов;%1 часов";
	Иначе
		Шаблон = ";%1 день;;%1 дня;%1 дней;%1 дней";
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(
		ТекстВопроса,
		ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Осталось));
	
	Возврат ТекстВопроса;
	
КонецФункции

Процедура ВключаемыйСертификатНажатие_ПослеВопроса(Ответ, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	ОбработкаЗаявленийАбонентаКлиентСервер.УстановитьМодифицированность(Форма);
	
	Если Ответ = НСтр("ru = 'Использовать выбранный';
						|en = 'Использовать выбранный'") Тогда
		
		ПослеВыбораСуществующегоСертификата(ВходящийКонтекст);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораСуществующегоСертификата(ВходящийКонтекст)
	
	Форма = ВходящийКонтекст.Форма;
	
	ЭтоЗаявлениеНаИзменение = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма);
	
	Если ЭтоЗаявлениеНаИзменение Тогда
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаписатьСуществующийСертификатВФорму", 
			ЭтотОбъект,
			ВходящийКонтекст);
	
		Текст = НСтр("ru = 'Обратите внимание, изменение некоторых настроек будет недоступно в этом заявлении в связи с подключением сертификата эл. подписи из другой программы. Для изменения этих настроек дождитесь одобрения данного заявления и отправьте новое.';
					|en = 'Обратите внимание, изменение некоторых настроек будет недоступно в этом заявлении в связи с подключением сертификата эл. подписи из другой программы. Для изменения этих настроек дождитесь одобрения данного заявления и отправьте новое.'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		ЗаписатьСуществующийСертификатВФорму(КодВозвратаДиалога.ОК, ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСуществующийСертификатВФорму(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	Результат = ВходящийКонтекст.Результат;
	Форма     = ВходящийКонтекст.Форма;
	
	Успешно = СкорректироватьПризнакЭтоФизЛицо(Результат, Форма);
	Если НЕ Успешно Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	// Определяем до присвоения новых значений, иначе значение изменится
	ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
	
	Форма.СпособПолученияСертификата	= ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	Форма.ВключаемыйСертификат 			= Результат.ВключаемыйСертификат;
	Форма.ЭтоСертификатДругогоУЦ		= Результат.ЭтоСертификатДругогоУЦ;
	Форма.ВключаемыйСертификатОблачный 	= Результат.ВключаемыйСертификатОблачный;
	
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Форма.ВключаемыйСертификат);
	Форма.МестоХраненияКлюча = МестоХраненияКлюча;
	
	Если НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаБыстрыйСтарт(Форма) Тогда
		
		Если КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(МестоХраненияКлюча) Тогда
			
			ИсходнаяУчетнаяЗапись = Форма.СвойствоОблачнойПодписи.ИсходнаяУчетнаяЗапись;
			Форма.СвойствоОблачнойПодписи = ОбработкаЗаявленийАбонентаКлиентСервер.СведенияОблачнойПодписиЗаявления();
			Форма.СвойствоОблачнойПодписи.УчетнаяЗапись = КриптографияЭДКОКлиентСервер.ПолучитьУчетнуюЗаписьПодписи(МестоХраненияКлюча);
			Форма.СвойствоОблачнойПодписи.ПоставляемыйСервер = ОбработкаЗаявленийАбонентаВызовСервера.ЭтоПоставляемыйСерверОблачнойПодписи(Форма.СвойствоОблачнойПодписи.УчетнаяЗапись);
			Форма.СвойствоОблачнойПодписи.ИсходнаяУчетнаяЗапись = ИсходнаяУчетнаяЗапись;
			Форма.ПереключитьНаОблачнуюПодпись(МестоХраненияКлюча);
			
		ИначеЕсли Форма.ВключаемыйСертификатОблачный И НЕ ЭтоОблако Тогда
			
			Форма.ПереключитьНаОблачноеХранение();
			
		ИначеЕсли НЕ Форма.ВключаемыйСертификатОблачный И ЭтоОблако Тогда
			
			Форма.ПереключитьНаЛокальноеХранение();
			
		ИначеЕсли Форма.ВключаемыйСертификатОблачный 
			И ЭтоОблако
			И ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма) Тогда
			
			// Контакты берем из РЕДО из облачного сертификата
			Форма.ПолучитьНастройкиПаролейВОблакеССервера(Форма.ВключаемыйСертификат);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаБыстрыйСтарт(Форма) Тогда
		Форма.УправлениеФормой();
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Функция СкорректироватьПризнакЭтоФизЛицо(Результат, Форма) Экспорт
	
	// Могли выбрать сертификат сотрудника, содержащий реквизиты организации
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	Если НЕ ЭтоРуководитель И ЗначениеЗаполнено(Форма.Организация) Тогда
		
		ЭтоСертификатФизЛица  = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоСертификатФизЛица(Результат.ВключаемыйСертификат);
		ЭтоЗаявлениеВРежимеБС = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма) И Форма.ЭтоБыстрыйСтарт;
		
		Если НЕ ЭтоЗаявлениеВРежимеБС И ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда  // Только так мы точно определим, что в заявлении выбран руководитель
			Владелец = ДокументооборотСКОКлиентСервер.ВладелецСертификат(Результат.ВключаемыйСертификат);
			ЭтоСертификатСотрудника = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоСертификатСотрудника(Владелец);
			Если ЭтоСертификатСотрудника Тогда
				Текст = НСтр("ru = 'Сертификаты сотрудников, содержащие реквизиты организации, не могут быть использованы с 01.09.2024 г. в соответствии с ч. 2.7 ст. 3 ФЗ от 27.12.2019 № 476-ФЗ. Выберите сертификат физ. лица, не содержащий реквизиты организации, или выпустите новый.';
							|en = 'Сертификаты сотрудников, содержащие реквизиты организации, не могут быть использованы с 01.09.2024 г. в соответствии с ч. 2.7 ст. 3 ФЗ от 27.12.2019 № 476-ФЗ. Выберите сертификат физ. лица, не содержащий реквизиты организации, или выпустите новый.'");
				Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма) Тогда
					ВызватьИсключение Текст;
				Иначе
					ПоказатьПредупреждение(,Текст);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.ВладелецЭЦПЭтоФизЛицо <> ЭтоСертификатФизЛица Тогда 
			
			Форма.ВладелецЭЦПЭтоФизЛицо = ЭтоСертификатФизЛица;
			// Удаляем МЧД
			ОбработкаЗаявленийАбонентаКлиентСервер.УдалитьМЧДИзФайлов(Форма);
			
			Если Форма.ВладелецЭЦПЭтоФизЛицо Тогда
				Форма.ЗаполнитьМЧДВЗаявлении();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УЦПриИзменении(Форма, ОповещениеОЗавершении = Неопределено) Экспорт
	
	УЦФНС = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
	УЦАЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
	
	Если Форма.УЦ = УЦФНС Тогда
		
		Форма.УЦ = УЦАЦ;
		
		Текст = НСтр("ru = 'Удостоверяющий центр ФНС приостановил возможность получения сертификата путем отправки заявления.
                      |Вы можете получить сертификат ФНС, обратившись непосредственно в инспекцию.';
                      |en = 'Удостоверяющий центр ФНС приостановил возможность получения сертификата путем отправки заявления.
                      |Вы можете получить сертификат ФНС, обратившись непосредственно в инспекцию.'");
		
		Подробнее = Новый ФорматированнаяСтрока(НСтр("ru = 'здесь';
													|en = 'здесь'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/v-fns");
			
		Текст = Новый ФорматированнаяСтрока(
			Текст,
			Символы.ПС,
			НСтр("ru = 'Подробнее про получение сертификата в инспекции читайте ';
				|en = 'Подробнее про получение сертификата в инспекции читайте '"),
			Подробнее,
			".");
		
		ОписаниеОповещения = Новый ОписаниеОповещения;
		ПоказатьПредупреждение(ОписаниеОповещения, Текст);
		
	Иначе
	
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		
		ВыбранФНС  = Форма.УЦ = УЦФНС;
		ВыбранАЦУЦ = Форма.УЦ = УЦАЦ;
		ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
		ЭтоОблачнаяПодпись = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
		
		Если (ЭтоОблако ИЛИ ЭтоОблачнаяПодпись) И (ВыбранФНС ИЛИ ВыбранАЦУЦ) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ИсправитьУЦ", 
				ЭтотОбъект,
				ДополнительныеПараметры);

			Шаблон = НСтр("ru = 'Получение сертификата эл. подписи в %1 невозможно при хранении подписи в программе. Переключиться на хранение подписи на этом компьютере?';
							|en = 'Получение сертификата эл. подписи в %1 невозможно при хранении подписи в программе. Переключиться на хранение подписи на этом компьютере?'");
			Текст = СтрШаблон(Шаблон, Форма.УЦ);
			
			ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ОбработкаЗаявленийАбонентаКлиентСервер.ИзменитьОформлениеУЦ(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправитьУЦ(Ответ, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	ВернутьОснование = 
		Ответ = КодВозвратаДиалога.Нет 
		ИЛИ Ответ = КодВозвратаДиалога.Отмена;
	
	Если ВернутьОснование Тогда
		
		ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
		ЭтоОблако = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОблако(Форма);
		ЭтоОблачнаяПодпись = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
			
		Если ЭтоРуководитель И (ЭтоОблако ИЛИ ЭтоОблачнаяПодпись) Тогда
			Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
		Иначе
			Форма.УЦ = Неопределено;
		КонецЕсли;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Форма.ПереключитьНаЛокальноеХранение();
	КонецЕсли;
	
	Форма.УправлениеФормой();
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
	
КонецПроцедуры

Функция ЛицензииКриптоПроИстекла(Форма) Экспорт
	
	КонтекстЭДОКлиент = Форма.КонтекстЭДОКлиент;

	ДатаИстечения = КонтекстЭДОКлиент.ДатаИстеченияЛицензииКриптоПро();
	Бесконечная   = НЕ КонтекстЭДОКлиент.СрокЛицензииКриптоПроКонечный();
	
	Истекла = 
		НЕ Бесконечная 
		И ДатаИстечения <> Неопределено 
		И ДатаИстечения < ТекущаяДата();
		
	Возврат Истекла;
		
КонецФункции

Процедура ПодписатьЗаявлениеСтороннимСертификатом(
		КонтекстЭДОКлиент, 
		ОповещениеОЗавершении, 
		ДвДанныеДляПодписания, 
		СертификатДляПодписания,
		ТипКриптопровайдера) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ДвДанныеДляПодписания", ДвДанныеДляПодписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьЗаявлениеСтороннимСертификатом_ПослеПолученияМенеджера", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(
		СертификатДляПодписания, 
		ОписаниеОповещения, 
		ТипКриптопровайдера);
	
	КонецПроцедуры
	
Функция МенеджерКриптографииПлатформыПолучен(Результат) Экспорт
	
	Выполнено = 
		Результат.Выполнено = Истина 
		И Результат.Свойство("МенеджерКриптографии")
		И Результат.МенеджерКриптографии <> Неопределено;
		
	Возврат Выполнено;
	
КонецФункции

Функция ОшибкаПолученияМенеджераКриптографииПлатформы(Результат) Экспорт
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		ОписаниеОшибки = Результат.ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Не удалось установить расширение для работы с криптографией платформы';
								|en = 'Не удалось установить расширение для работы с криптографией платформы'");
	КонецЕсли;
		
	Возврат ОписаниеОшибки;
	
КонецФункции

Процедура ПодписатьЗаявлениеСтороннимСертификатом_ПослеПолученияМенеджера(Результат, ВходящийКонтекст) Экспорт
	
	Выполнено = МенеджерКриптографииПлатформыПолучен(Результат);
	
	Если Выполнено Тогда
		
		СертификатКриптографии 	= Результат.СертификатКриптографии;
		МенеджерКриптографии 	= Результат.МенеджерКриптографии;
		
	Иначе
		
		ОписаниеОшибки = ОшибкаПолученияМенеджераКриптографииПлатформы(Результат);
		
		ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	// Нельзя объединять оповещения, так как параметры оповещения различные
	Оповещение = Новый ОписаниеОповещения(
		"СформироватьИОтправить_ПроверкаПодписи", 
		ЭтотОбъект, 
		ВходящийКонтекст,
		"СформироватьИОтправить_ОбработчикОшибкиПодписания",
		ЭтотОбъект);
			
	ДвДанныеДляПодписания = ВходящийКонтекст.ДвДанныеДляПодписания;
	
	// Методом платформы, так как компонента не подписывает сертификатами сторонних УЦ
	МенеджерКриптографии.НачатьПодписывание(
		Оповещение, 
		ДвДанныеДляПодписания, 
		СертификатКриптографии);
		
КонецПроцедуры

Процедура СформироватьИОтправить_ОбработчикОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	
	ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ТекстОшибки);
	
КонецПроцедуры

Процедура СформироватьИОтправить_ПроверкаПодписи(ПодписанноеСообщение, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("ПодписанноеСообщение", ПодписанноеСообщение);
	
	ДвДанныеДляПодписания = ВходящийКонтекст.ДвДанныеДляПодписания;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьИОтправить_ПослеПроверкиПодписи", 
		ЭтотОбъект, 
		ВходящийКонтекст,
		"СформироватьИОтправить_ОбработчикОшибкиПодписания",
		ЭтотОбъект);
		
	ВходящийКонтекст.МенеджерКриптографии.НачатьПроверкуПодписи(
		ОписаниеОповещения,
		ДвДанныеДляПодписания, 
		ПодписанноеСообщение);
	
КонецПроцедуры

Процедура СформироватьИОтправить_ПослеПроверкиПодписи(Результат, ВходящийКонтекст) Экспорт
	
	ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст);
	
КонецПроцедуры

Процедура ВернутьРезультатПодписанияПлатформой(ВходящийКонтекст, ТекстОшибки = "") Экспорт
	
	Если ТекстОшибки = "" Тогда
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("ПодписанноеСообщение", ВходящийКонтекст.ПодписанноеСообщение);
	Иначе
		Результат = Новый Структура();
		Результат.Вставить("Выполнено", Ложь);
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	ОповещениеОЗавершении = ВходящийКонтекст.ОповещениеОЗавершении;
	 
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ИсправитьОшибкиЛокальногоХраненияКлюча(Форма, ОповещениеОЗавершении, Параметр, СтандартнаяОбработка = Истина) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		Действие = Параметр.НавигационнаяСсылка;
	Иначе
		Действие = Параметр;
	КонецЕсли;
	
	КонтекстЭДОКлиент = Форма.КонтекстЭДОКлиент;
	
	Если Действие = "Исправить конфликт" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",,,,,,ОповещениеОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли Действие = "Установить компоненту" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(ОповещениеОЗавершении, Ложь,, Истина);
		
	ИначеЕсли Действие = "Установить криптопровайдер" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС")
			ИЛИ Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр") Тогда
			
			ОткрытьФорму(
				КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_УстановитеКриптоПро"
				,,,,,,
				ОповещениеОЗавершении,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		Иначе
			
			ОткрытьФорму(
				КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ОтсуствиеКриптопровайдеров"
				,,,,,,
				ОповещениеОЗавершении,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
	ИначеЕсли Действие = "Приобрести" Тогда
			
		ПерейтиПоНавигационнойСсылке("https://1c-report.ru/vse-dlya-podpisi");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УказатьНаправленияВЗаявлении(Форма, ВыполняемоеОповещения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыФормы", Форма.ПараметрыФормыНаправленийСервер());
	
	ОткрытьФорму(
		Форма.КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Направления", 
		ДополнительныеПараметры,
		,
		,
		,
		,
		ВыполняемоеОповещения);
	
КонецПроцедуры

Процедура СпроситьПроСуществующееПодключение(Организация, ПредыдущееЗначениеОрганизации, ВыполняемоеОповещение) Экспорт
	
	ТекстВопроса = "Организация " +""""+ Организация +""""+ " уже подключена к 1С-Отчетности.
		|Продолжить заполнение заявления на новое подключение или изменить существующее подключение?";
	
	Если ЗначениеЗаполнено(ПредыдущееЗначениеОрганизации) Тогда
		
		ВопросПроПредыдущуюОрганизацию = НСтр("ru = 'Обратите внимание, сведения, указанные в заявлении по организации ""%1"", будут очищены';
												|en = 'Обратите внимание, сведения, указанные в заявлении по организации ""%1"", будут очищены'");
		ВопросПроПредыдущуюОрганизацию = СтрШаблон(ВопросПроПредыдущуюОрганизацию, Строка(ПредыдущееЗначениеОрганизации));
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.ПС + ВопросПроПредыдущуюОрганизацию;
		
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(2, НСтр("ru = 'Изменить существующее';
							|en = 'Изменить существующее'"));
	Кнопки.Добавить(1, НСтр("ru = 'Новое подключение';
							|en = 'Новое подключение'"));
	Кнопки.Добавить(3, НСтр("ru = 'Отмена';
							|en = 'Отмена'"));
	
	ПоказатьВопрос(ВыполняемоеОповещение, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
	
КонецПроцедуры

Функция ЗаявлениеСформироватьЗапросНаСертификатКвалифицированный(ВходящийКонтекст) Экспорт
	
	pRequestInfo = pRequestInfo(ВходящийКонтекст);
	
	Запрос = "pRequestInfo:{
	|%1
	|}";
	Запрос = СтрШаблон(Запрос, pRequestInfo);
	
	Возврат Запрос;
	
КонецФункции

Функция pRequestInfo(ВходящийКонтекст)
	
	ДокументЗаявление = ВходящийКонтекст.ДокументЗаявление;
	
	CertAttrs       = CertAttrs(ДокументЗаявление);
	CertEnhKeyUsage = "1.3.6.1.5.5.7.3.2,1.3.6.1.5.5.7.3.4"; // проверка подлинности клиента, защищенная электронная почта
	SignTool        = SignTool(ДокументЗаявление);
	IdentKind       = IdentKind(ДокументЗаявление);
	OIDЛицензии     = ВходящийКонтекст.OIDЛицензииКриптоПро;
	
	Подстроки = Новый Массив;
	ДобавитьВЗапросНаСертификат(Подстроки, "CertAttrs", CertAttrs);
	ДобавитьВЗапросНаСертификат(Подстроки, "CertEnhKeyUsage", CertEnhKeyUsage);
	ДобавитьВЗапросНаСертификат(Подстроки, "CertPolicies", "<1.2.643.100.113.1=>");
	ДобавитьВЗапросНаСертификат(Подстроки, "dwKeyUsage", "240");
	ДобавитьВЗапросНаСертификат(Подстроки, "SignTool", SignTool);
	
	Если ЗначениеЗаполнено(OIDЛицензии) Тогда
		ДобавитьВЗапросНаСертификат(Подстроки, "CertTemplate", OIDЛицензии);
	КонецЕсли;
		
	ДобавитьВЗапросНаСертификат(Подстроки, "IdentKind", IdentKind);
	
	СтрокаЗапроса = СтрСоединить(Подстроки, Символы.ПС);
	
	Возврат СтрокаЗапроса;
	
КонецФункции

Процедура ДобавитьВЗапросНаСертификат(Подстроки, Ключ, Значение)
	
	Шаблон    = "%1:{%2}";
	Подстрока = СтрШаблон(Шаблон, Ключ, Значение);
	Подстроки.Добавить(Подстрока);
	
КонецПроцедуры

Функция SignTool(ДокументЗаявление)
	
	СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(ДокументЗаявление.ТипКриптопровайдера);
	
	Если СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
		КриптоСредство = "СКЗИ ""ViPNet CSP"", версия 4.2";
	Иначе
		КриптоСредство = """КриптоПро CSP"" (версия 4.0)";
	КонецЕсли;
	
	Возврат КриптоСредство;
	
КонецФункции

Функция CertAttrs(ДокументЗаявление)
	
	Реквизиты = ПараметрыНовогоСертификата(ДокументЗаявление);
	CertAttrs = "";
	Подстроки = Новый Массив;
	
	Для Каждого Реквизит Из Реквизиты Цикл 
		
		Ключ     = Реквизит.Значение;
		Значение = СокрЛП(Реквизит.Представление);
		
		Если ПустаяСтрока(Значение) Тогда
			Значение = "0";
			Продолжить;
		КонецЕсли;
		
		Подстрока = СтрШаблон("<%1=%2>", Ключ, Значение);
		
		Подстроки.Добавить(Подстрока);
		
	КонецЦикла;
	
	CertAttrs = СтрСоединить(Подстроки, ",");
	
	Возврат CertAttrs;
	
КонецФункции

Функция IdentKind(ДокументЗаявление)
	
	IdentKind = Строка(ОбработкаЗаявленийАбонентаКлиентСервер.IdentKind(ДокументЗаявление));
	Возврат IdentKind;
	
КонецФункции

Процедура НайтиИУстановитьСертификатСТокена(
		Форма,
		ВыполняемоеОповещения = Неопределено, 
		ВыводитьСообщения = Ложь,
		ЗаписатьВФорму = Истина) Экспорт
		
	ДополнительныеПараметры = ШаблонПаметровПолученияСертификатовСТокена();
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.ОповещениеОЗавершении = ВыполняемоеОповещения;
	ДополнительныеПараметры.ВыводитьСообщения = ВыводитьСообщения;
	ДополнительныеПараметры.ВыводитьБублик = Истина;
	ДополнительныеПараметры.ЗаписатьВФорму = ЗаписатьВФорму;
	
	ВходящийКонтекст = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДополнительныеПараметры);
	
	ДействиеПриПолучении = Новый ОписаниеОповещения(
		"ПредложитьКВыборуСертификатыСТокенаПослеПолучения", 
		ЭтотОбъект,
		ВходящийКонтекст);
		
	ДополнительныеПараметры.ДействиеПриПолучении = ДействиеПриПолучении;

	ПолучитьСертификатыСТокенаПоКонтексту(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ШаблонПаметровПолученияСертификатовСТокена() Экспорт
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Неопределено);
	ДополнительныеПараметры.Вставить("ВсеСертификаты", Неопределено);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", Неопределено);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", Ложь);
	ДополнительныеПараметры.Вставить("ВыводитьБублик", Ложь);
	ДополнительныеПараметры.Вставить("ДействиеПриПолучении", Неопределено);
	ДополнительныеПараметры.Вставить("ЗаписатьВФорму", Истина);
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ПредложитьКВыборуСертификатыСТокенаПослеПолучения(Результат, ВходящийКонтекст) Экспорт
	
	Сертификаты = Результат.Сертификаты;
	ВходящийКонтекст = Результат;
	
	Если Сертификаты.Количество() = 1 Тогда
		
		ПредложитьВыборСертификатаСТокена_ПослеВыбора(Сертификаты[0], ВходящийКонтекст);
		
	Иначе
	
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПредложитьВыборСертификатаСТокена_ПослеВыбора", 
			ЭтотОбъект,
			ВходящийКонтекст);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
			
		ОткрытьФорму(
			"Документ.ЗаявлениеАбонентаСпецоператораСвязи.Форма.ВыборСертификатаНаТокене",
			ДополнительныеПараметры,
			ВходящийКонтекст.Форма,
			,
			,
			,
			ОписаниеОповещения);
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСертификатыСТокенаПоКонтексту(ВходящийКонтекст) Экспорт
		
	Если ВходящийКонтекст.ВыводитьБублик Тогда
		ДлительнаяОтправкаКлиент.ПоказатьПростуюФормуОжидания(ВходящийКонтекст.Форма);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НайтиСертификатыНаТокене_ПослеПолученияКонтейнеров", 
		ЭтотОбъект,
		ВходящийКонтекст);
	
	КриптографияЭДКОКлиент.ПолучитьКонтейнерыКлючей(ОписаниеОповещения, Истина, ВходящийКонтекст.ВыводитьСообщения);
	
КонецПроцедуры

Функция ШаблонСертификатаСТокена()
	
	Контейнер = Новый Структура(
		"ИмяФайлаКонтейнера, 
		|Адрес, 
		|ТекстОшибки, 
		|ИмяФайлаСертификата, 
		|Субъект, 
		|Подходит, 
		|Установлен, 
		|СерийныйНомер, 
		|ДатаНачала,
		|ДатаОкончания");
	
	Контейнер.Подходит = Ложь;
	Контейнер.Установлен = Ложь;

	Возврат Контейнер;

КонецФункции

Процедура НайтиСертификатыНаТокене_ПослеПолученияКонтейнеров(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	Если НЕ Результат.Выполнено Тогда
		ДлительнаяОтправкаКлиент.ЗакрытьПростуюФормуОжидания(Форма);
		Форма.СообщитьОбОтсутствииПодходящихСертификатов(Форма);
		Возврат;
	КонецЕсли;
	
	Контейнеры = Новый Массив;
	Для каждого ИмяФайлаКонтейнера Из Результат.КонтейнерыКлючей Цикл
		
		Если ЭтоКлючСНужногоНосителя(Форма, ИмяФайлаКонтейнера) Тогда
			
			Контейнер = ШаблонСертификатаСТокена();
			Контейнер.ИмяФайлаКонтейнера = ИмяФайлаКонтейнера;
			
			Контейнеры.Добавить(Контейнер);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Контейнеры.Количество() = 0 Тогда
		ДлительнаяОтправкаКлиент.ЗакрытьПростуюФормуОжидания(Форма);
		Форма.СообщитьОбОтсутствииПодходящихСертификатов(Форма);
		Возврат;
	КонецЕсли;

	ВходящийКонтекст.Вставить("Номер", 0);
	ВходящийКонтекст.Вставить("Контейнеры", Контейнеры);
	
	ПолучитьСертификатыСТокена(ВходящийКонтекст);
	
КонецПроцедуры

Функция ЭтоКлючСНужногоНосителя(Форма, ИмяФайлаКонтейнера)

	ЭтоКлючСТокена   = СтрНачинаетсяС(Врег(ИмяФайлаКонтейнера), "SCARD");
	ЭтоКлючИзРеестра = СтрНачинаетсяС(Врег(ИмяФайлаКонтейнера), "REGISTRY");
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаБыстрыйСтарт(Форма)
		И Форма.ВладелецЭЦПТип <> ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		
		Возврат НЕ ЭтоКлючИзРеестра; // токен + флешка
		
	Иначе
		Возврат ЭтоКлючСТокена;
	КонецЕсли;

КонецФункции

Процедура ПолучитьСертификатыСТокена(ВходящийКонтекст) Экспорт
	
	Номер = ВходящийКонтекст.Номер;
	Контейнеры = ВходящийКонтекст.Контейнеры;
	
	Если ВходящийКонтекст.Номер = Контейнеры.Количество() Тогда
		
		ПредложитьВыборСертификатаСТокена(ВходящийКонтекст);
		
	Иначе
		
		Контейнер = Контейнеры[Номер];
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НайтиСертификатыНаТокене_ПослеПолученияФайлаСертификата", 
			ЭтотОбъект,
			ВходящийКонтекст);
		
		КриптографияЭДКОКлиент.ПолучитьСертификатИзКонтейнера(
			ОписаниеОповещения,
			Контейнер.ИмяФайлаКонтейнера,
			".cer",
			ВходящийКонтекст.ВыводитьСообщения);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСертификатыНаТокене_ПослеПолученияФайлаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Номер = ВходящийКонтекст.Номер;
	Контейнер = ВходящийКонтекст.Контейнеры[Номер];
	
	Если НЕ Результат.Выполнено Тогда
		Контейнер.ТекстОшибки = НСтр("ru = 'Не удалось получить сертификат из контейнера ';
									|en = 'Не удалось получить сертификат из контейнера '") + Контейнер.ИмяФайлаКонтейнера;
		ПолучитьСертификатыСТокена_ПерейтиКСледующему(ВходящийКонтекст);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НайтиСертификатыНаТокене_ПослеПолученияBase64Сертификата", 
		ЭтотОбъект,
		ВходящийКонтекст);
		
	Контейнер.ИмяФайлаСертификата = Результат.ИмяФайлаСертификата;
	
	ОперацииСФайламиЭДКОКлиент.ФайлВBase64(
		ОписаниеОповещения, 
		Контейнер.ИмяФайлаСертификата,
		ВходящийКонтекст.ВыводитьСообщения);
		
КонецПроцедуры

Процедура ПолучитьСертификатыСТокена_ПерейтиКСледующему(ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Номер = ВходящийКонтекст.Номер + 1;
	ПолучитьСертификатыСТокена(ВходящийКонтекст);
	
КонецПроцедуры

Функция РеквизитыФормыДляСравненияСертификата(Форма)
	
	Реквизиты =
	"ВладелецЭЦПФамилия,
	|ВладелецЭЦПИмя,
	|ВладелецЭЦПОтчество,
	|ВладелецЭЦПТип,
	|ВладелецЭЦПЭтоФизЛицо,
	|ЭтоЮридическоеЛицо,
	|ИНН,
	|ВладелецЭЦПИНН,
	|ВладелецЭЦПСНИЛС";
	
	Результат = Новый Структура(Реквизиты);
	ЗаполнитьЗначенияСвойств(Результат, Форма);
	
	Возврат Результат;
	
КонецФункции

Процедура НайтиСертификатыНаТокене_ПослеПолученияBase64Сертификата(Результат, ВходящийКонтекст) Экспорт
	
	Номер = ВходящийКонтекст.Номер;
	Контейнер = ВходящийКонтекст.Контейнеры[Номер];
	
	Если НЕ Результат.Выполнено Тогда
		Контейнер.ТекстОшибки = НСтр("ru = 'Не удалось получить Base64 сертификата из контейнера ';
									|en = 'Не удалось получить Base64 сертификата из контейнера '") + Контейнер.ИмяФайлаКонтейнера;
		ПолучитьСертификатыСТокена_ПерейтиКСледующему(ВходящийКонтекст);
		Возврат;
	КонецЕсли;
	
	ДвДанные = Base64Значение(Результат.СтрокаBase64);
	Контейнер.Адрес = ПоместитьВоВременноеХранилище(ДвДанные, ВходящийКонтекст.Форма.УникальныйИдентификатор);
	
	РеквизитыСтруктурой = РеквизитыФормыДляСравненияСертификата(ВходящийКонтекст.Форма);
	
	Попытка
		Результат = ОбработкаЗаявленийАбонентаВызовСервера.ЗаполнитьСвойстваСертификатаСТокена(
			РеквизитыСтруктурой, 
			Контейнер, 
			ВходящийКонтекст.ЗаписатьВФорму);
			
		ЗаполнитьЗначенияСвойств(ВходящийКонтекст.Контейнеры[Номер], Результат);
	Исключение
		Контейнер.ТекстОшибки = 
			НСтр("ru = 'Не удалось получить свойства сертификата из контейнера ';
				|en = 'Не удалось получить свойства сертификата из контейнера '") 
			+ Контейнер.ИмяФайлаКонтейнера 
			+ НСтр("ru = ' по причине: ';
					|en = ' по причине: '")
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПолучитьСертификатыСТокена_ПерейтиКСледующему(ВходящийКонтекст);
		Возврат;
	КонецПопытки;
	
	ПолучитьСертификатыСТокена_ПерейтиКСледующему(ВходящийКонтекст);
		
КонецПроцедуры

Процедура ПредложитьВыборСертификатаСТокена(ВходящийКонтекст) Экспорт

	Номер = ВходящийКонтекст.Номер;
	Контейнеры = ВходящийКонтекст.Контейнеры;
	
	Сертификаты = Новый Массив;
	Для каждого Контейнер Из Контейнеры Цикл
		Если Контейнер.Подходит Тогда
			Сертификаты.Добавить(Контейнер);
		КонецЕсли;
	КонецЦикла;
	
	Если Сертификаты.Количество() = 0 Тогда
		Форма = ВходящийКонтекст.Форма;
		ДлительнаяОтправкаКлиент.ЗакрытьПростуюФормуОжидания(Форма);
		Форма.СообщитьОбОтсутствииПодходящихСертификатов(Форма);
		Возврат;
	КонецЕсли;
	
	ВходящийКонтекст.Вставить("Сертификаты", Сертификаты);
	
	ВыполнитьОбработкуОповещения(
		ВходящийКонтекст.ДействиеПриПолучении, 
		ВходящийКонтекст);
		
КонецПроцедуры
	
Процедура ПредложитьВыборСертификатаСТокена_ПослеВыбора(Контейнер, ВходящийКонтекст) Экспорт
	
	УстановитьСертификатСТокена(Контейнер, ВходящийКонтекст);
		
КонецПроцедуры
	
Процедура УстановитьСертификатСТокена(Контейнер, ВходящийКонтекст) Экспорт
	
	Если Контейнер = Неопределено Тогда
		ДлительнаяОтправкаКлиент.ЗакрытьПростуюФормуОжидания(ВходящийКонтекст.Форма);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;

	ВходящийКонтекст.Вставить("Контейнер", Контейнер);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеУстановкиСертификатаВХранилище", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	КриптографияЭДКОКлиент.УстановитьСертификатВКонтейнерИХранилище(
		ОписаниеОповещения,
		Контейнер.ИмяФайлаСертификата,
		Контейнер.ИмяФайлаКонтейнера,
		ВходящийКонтекст.ВыводитьСообщения);
		
КонецПроцедуры

Процедура ПослеУстановкиСертификатаВХранилище(Результат, ВходящийКонтекст) Экспорт
	
	ДлительнаяОтправкаКлиент.ЗакрытьПростуюФормуОжидания(ВходящийКонтекст.Форма);
	
	Если НЕ Результат.Выполнено Тогда
		
		ТекстОшибки = 
			НСтр("ru = 'Не удалось установить сертификат в хранилище MY из контейнера ';
				|en = 'Не удалось установить сертификат в хранилище MY из контейнера '")
			+ ВходящийКонтекст.Контейнер.ИмяФайлаКонтейнера;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСертификатСТокена_ПослеПолученияУстановленныхСертификатов", 
		ЭтотОбъект, 
		ВходящийКонтекст);
	
	ДополнительныеПараметрыМетода = Новый Структура;
	ДополнительныеПараметрыМетода.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", ДокументооборотСКОКлиент.ПредлагатьУстановкуРасширения());
	ДополнительныеПараметрыМетода.Вставить("ВыводитьСообщения", Ложь);
	
	Хранилище = Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина);
	КриптографияЭДКОКлиент.ПолучитьСертификаты(ОписаниеОповещения, Хранилище, ДополнительныеПараметрыМетода);
	
КонецПроцедуры

Процедура ПолучитьСертификатСТокена_ПослеПолученияУстановленныхСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении);
		Возврат;
	КонецЕсли;
	
	СерийныйНомер = Нрег(Строка(ВходящийКонтекст.Контейнер.СерийныйНомер));
	
	Для каждого Сертификат Из Результат.Сертификаты Цикл
		Если Нрег(Сертификат.СерийныйНомер) = СерийныйНомер Тогда
			ВыбранноеЗначение = Сертификат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		ТекстОшибки = 
			НСтр("ru = 'Не удалось найти сертификат в хранилище MY из контейнера ';
				|en = 'Не удалось найти сертификат в хранилище MY из контейнера '")
			+ ВходящийКонтекст.Контейнер.ИмяФайлаКонтейнера;
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);

	Форма = ВходящийКонтекст.Форма;
	
	Если ВходящийКонтекст.ЗаписатьВФорму Тогда
		Форма.КонтекстЭДОКлиент.ПослеВыбораЛокальногоСертификатаВЗаявлении(
			Результат, 
			ВходящийКонтекст);
	Иначе
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОбОтсутствииПодходящихСертификатов(Форма, ОповещениеОЗавершении = Неопределено) Экспорт
	
	ЭтоРуководитель = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма);
	
	ДополнительныеПараметры = Новый Структура();
	Если ЭтоРуководитель Тогда
		ДополнительныеПараметры.Вставить("ИНН", Форма.ИНН);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ВладелецЭЦПИНН",   Форма.ВладелецЭЦПИНН);
	ДополнительныеПараметры.Вставить("ВладелецЭЦПСНИЛС", Форма.ВладелецЭЦПСНИЛС);
	ДополнительныеПараметры.Вставить("ВладелецЭЦПФИО",   ОбработкаЗаявленийАбонентаКлиентСервер.ФИОВладельца(Форма));
	ДополнительныеПараметры.Вставить("Организация",      Форма.Организация);
			
	ОткрытьФорму(
		"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.Мастер_ОшибкиПоискаСертификата", 
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОповещениеОЗавершении);
	
КонецПроцедуры

Процедура ВывестиОшибку(Элемент) Экспорт
	
	Если Элемент.Подсказка <> "" Тогда
		ПоказатьПредупреждение(,Элемент.Подсказка);
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьЗаявлениеПоЕГРЮЛ(Форма, ОбработчикЗавершения) Экспорт
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ПроверятьЗаявлениеПоЕГРЮЛ(Форма) Тогда
		
		ЗаполнитьТаблицуСравненияРеквизитовПоЕГРЮЛ(Форма);
			
		Если ЕстьРазличающиесяРеквизитыЕГРЮЛ(Форма) Тогда
			
			АдресТаблицыСравненияРеквизитов = Форма.АдресТаблицы("ТаблицаСравненияПоЕГРЮЛ");
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("Адрес", АдресТаблицыСравненияРеквизитов);
			ДополнительныеПараметры.Вставить("ЭтоЮридическоеЛицо", Форма.ЭтоЮридическоеЛицо);
			
			ОткрытьФорму("Документ.ЗаявлениеАбонентаСпецоператораСвязи.Форма.СравнениеРеквизитовЗаявленияПоЕГРЮЛ", 
				ДополнительныеПараметры,
				,
				,
				,
				,
				ОбработчикЗавершения);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	
КонецПроцедуры

Функция НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(Форма, ЕстьОшибка, ЗначениеВЗаявлении, ЗначениеВЕГРЮЛ, Реквизит)
	
	НоваяСтрока = Форма.ТаблицаСравненияПоЕГРЮЛ.Добавить();
	НоваяСтрока.Различается = ЕстьОшибка;
	НоваяСтрока.Заявление   = ЗначениеВЗаявлении;
	НоваяСтрока.ЕГРЮЛ       = ЗначениеВЕГРЮЛ;
	НоваяСтрока.ЕГРЮЛПредставление = ЗначениеВЕГРЮЛ;
	НоваяСтрока.Реквизит    = Реквизит;
	НоваяСтрока.Наименование = Строка(НоваяСтрока.Реквизит);
	
	Возврат НоваяСтрока;
	
КонецФункции

// Таблица сравнения по ЕГРЮЛ
Процедура ЗаполнитьТаблицуСравненияРеквизитовПоЕГРЮЛ(Форма) Экспорт
	
	ЭтоПервичное = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
	ЭтоВторичное = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаВторичногоЗаявления(Форма);
	
	Форма.ТаблицаСравненияПоЕГРЮЛ.Очистить();
	
	ПроверятьКраткоеНаименование = 
		Форма.ЭтоЮридическоеЛицо 
		И ЗначениеЗаполнено(Форма.КраткоеНаименование_БИП) 
		И НЕ Форма.ЭтоЭлектронноеПодписание
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное 
		И Форма.ИзменитьРеквизитыПодключенияК1СОтчетности 
		И Форма.КраткоеНаименованиеИсходное <> Форма.КраткоеНаименование);
	
	Если ПроверятьКраткоеНаименование Тогда
		
		// КраткоеНаименование
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьКраткоеНаименованиеПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			ОбработкаЗаявленийАбонентаКлиентСервер.НормализоватьКраткоеНаименование(Форма.КраткоеНаименование), 
			ОбработкаЗаявленийАбонентаКлиентСервер.НормализоватьКраткоеНаименование(Форма.КраткоеНаименование_БИП), 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"));
		
	КонецЕсли;
		
	ПроверятьОГРН = 
		НЕ Форма.ЭтоИностраннаяОрганизация 
		И ЗначениеЗаполнено(Форма.ОГРН_БИП) 
		И НЕ Форма.ЭтоЭлектронноеПодписание
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное 
		И Форма.ИзменитьРеквизитыПодключенияК1СОтчетности 
		И Форма.ОГРНИсходный <> Форма.ОГРН);
	
	Если ПроверятьОГРН Тогда
		
		// ОГРН
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьОГРНПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			Форма.ОГРН, 
			Форма.ОГРН_БИП, 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"));

		НоваяСтрока.Наименование = ?(Форма.ЭтоЮридическоеЛицо, НСтр("ru = 'ОГРН';
																	|en = 'ОГРН'"), НСтр("ru = 'ОГРНИП';
																						|en = 'ОГРНИП'"));
		
	КонецЕсли;
	
	ПроверятьРегион = 
		ЗначениеЗаполнено(Форма.КодРегиона_БИП)
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное 
		И (Форма.ИзменитьРеквизитыПодключенияК1СОтчетности 
		И Форма.ОбластьИсходная <> Форма.Область 
		ИЛИ Форма.ЭтоУдаленноеПереизданиеСертификата));
	
	Если ПроверятьРегион Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.КодРегиона) Тогда 
			Форма.КодРегиона = ОбработкаЗаявленийАбонентаВызовСервера.КодРегионаПоАдресу(Форма.АдресЮридическийЗначение);
		КонецЕсли;
		
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьКодРегионаПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			ОбработкаЗаявленийАбонентаВызовСервера.КодИНазваниеРегионаДляСертификата(Форма.КодРегиона), 
			ОбработкаЗаявленийАбонентаВызовСервера.КодИНазваниеРегионаДляСертификата(Форма.КодРегиона_БИП), 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегиона"));
			
	КонецЕсли;
		
	ПроверятьГород = 
		ЗначениеЗаполнено(Форма.Город_БИП)
		И Форма.ЭтоЮридическоеЛицо
		И ЭтоВторичное 
		И Форма.ЭтоУдаленноеПереизданиеСертификата
		И ЗначениеЗаполнено(Форма.АдресЮридический_JSON);
		
	Если ПроверятьГород Тогда
		
		ГородИзОрганизации = ОбработкаЗаявленийАбонентаВызовСервера.ПолеСертификата_2_5_4_7(Форма.АдресЮридический_JSON);
		ЕстьОшибка = Врег(Форма.Город_БИП) <> Врег(ГородИзОрганизации);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			ГородИзОрганизации, 
			Форма.Город_БИП,
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Город"));
			
	КонецЕсли;
		
	ПроверятьУлицу = 
		ЗначениеЗаполнено(Форма.Улица_БИП)
		И Форма.ЭтоЮридическоеЛицо
		И ЭтоВторичное 
		И Форма.ЭтоУдаленноеПереизданиеСертификата
		И ЗначениеЗаполнено(Форма.АдресЮридический_JSON);
		
	Если ПроверятьУлицу Тогда
		
		УлицаИзОрганизации = ОбработкаЗаявленийАбонентаВызовСервера.ПолеСертификата_2_5_4_9(Форма.АдресЮридический_JSON);
		ЕстьОшибка = Врег(Форма.Улица_БИП) <> Врег(УлицаИзОрганизации);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			УлицаИзОрганизации, 
			Форма.Улица_БИП,
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.Улица"));
			
	КонецЕсли;	
		
	ПроверятьФНС = 
		Форма.СдаватьВФНС
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное 
		И Форма.ИзменитьСоставКонтролирующихОрганов 
		И Форма.ТаблицаИзменилась("ПолучателиФНС", "ПолучателиФНСИсходные"));
	
	Если ПроверятьФНС Тогда

		КодыФНСПрописьюБезКПП = ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьКодыФНСПрописьюБезКПП(Форма.ПолучателиФНС);
		
		// КодыФНС
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьКодИФНСПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			КодыФНСПрописьюБезКПП,
			Форма.ИФНС_БИП, 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"));
			
		НоваяСтрока.Наименование = НСтр("ru = 'Код ИФНС';
										|en = 'Код ИФНС'");
		
		Если ЗначениеЗаполнено(Форма.ИФНС_БИП) Тогда
			НоваяСтрока.ЕГРЮЛПредставление = НоваяСтрока.ЕГРЮЛ + НСтр("ru = ' (отсутствует среди подключаемых)';
																		|en = ' (отсутствует среди подключаемых)'");
		Иначе
			НоваяСтрока.ЕГРЮЛПредставление = НСтр("ru = '<не указан>';
													|en = '<не указан>'");
		КонецЕсли;
		
	КонецЕсли;
	
	ИПИспользуетТрудНаемныхРаботников = НЕ Форма.ЭтоЮридическоеЛицо И Форма.ИПИспользуетТрудНаемныхРаботников;
	
	ПроверятьПФР = Форма.СдаватьВПФР 
		И (Форма.ЭтоЮридическоеЛицо 
		ИЛИ ИПИспользуетТрудНаемныхРаботников)
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное 
		И Форма.ИзменитьСоставКонтролирующихОрганов 
		И (Форматировать(Форма.КодПФР) <> Форматировать(Форма.КодПФРИсходный)
		ИЛИ Форматировать(Форма.РегНомерПФР) <> Форматировать(Форма.РегНомерПФРИсходный)));
	
	Если ПроверятьПФР Тогда
		
		ЗарегистрированаВПФР = 
			ЗначениеЗаполнено(Форма.РегНомерПФР_БИП)
			ИЛИ ЗначениеЗаполнено(Форма.КодПФР_БИП);
		
		// РегНомерПФР 
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьРегНомерПФРПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			Форма.РегНомерПФР, 
			Форма.РегНомерПФР_БИП, 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"));
			
		Если НЕ ЗарегистрированаВПФР И ЗначениеЗаполнено(Форма.РегНомерПФР) Тогда
			НоваяСтрока.ЕГРЮЛПредставление = НСтр("ru = 'Организация не зарегистрирована в СФР (бывш. ПФР)';
													|en = 'Организация не зарегистрирована в СФР (бывш. ПФР)'");
		КонецЕсли;
		
		Если ИПИспользуетТрудНаемныхРаботников Тогда
			НоваяСтрока.Наименование = НСтр("ru = 'Рег. номер в СФР (бывш. ПФР) за сотрудников';
											|en = 'Рег. номер в СФР (бывш. ПФР) за сотрудников'");
		КонецЕсли;
			
		// КодПФР
		ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьКодПФРПоЕГРЮЛ(Форма);
		
		НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
			Форма, 
			ЕстьОшибка, 
			Форма.КодПФР, 
			Форма.КодПФР_БИП, 
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"));
			
		Если НЕ ЗарегистрированаВПФР И ЗначениеЗаполнено(Форма.КодПФР) Тогда
			НоваяСтрока.ЕГРЮЛПредставление = НСтр("ru = 'Организация не зарегистрирована в СФР (бывш. ПФР)';
													|en = 'Организация не зарегистрирована в СФР (бывш. ПФР)'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоВторичное Тогда
		ПроверятьВладельцаПоЕГРЮЛ = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверятьВладельцаПоЕГРЮЛ(Форма);
	КонецЕсли;
	
	ПроверятьВладельца =
		ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма)
		И (ЭтоПервичное
		ИЛИ ЭтоВторичное И ПроверятьВладельцаПоЕГРЮЛ);
		
	Если ПроверятьВладельца Тогда

		// ФИО Руководителя
		ФИО_БИП = Форма.РуководительФамилия_БИП + " "
			+ Форма.РуководительИмя_БИП + " " 
			+ Форма.РуководительОтчество_БИП; 

		Если ЗначениеЗаполнено(ФИО_БИП) Тогда
			
			ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьФИОРуководителяПоЕГРЮЛ(Форма);
				
			ФИО_Владельца = Форма.ВладелецЭЦПФамилия + " " 
				+ Форма.ВладелецЭЦПИмя + " " 
				+ Форма.ВладелецЭЦПОтчество;
				
			НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
				Форма, 
				ЕстьОшибка, 
				ФИО_Владельца, 
				ФИО_БИП, 
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПФИО"));
				
			НоваяСтрока.Наименование = НСтр("ru = 'ФИО руководителя';
											|en = 'ФИО руководителя'");
			
		КонецЕсли;
		
		// ИНН Руководителя
		Если ЗначениеЗаполнено(Форма.РуководительИНН_БИП) Тогда
			
			ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьИННРуководителяПоЕГРЮЛ(Форма);
			
			НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
				Форма, 
				ЕстьОшибка, 
				Форма.ВладелецЭЦПИНН, 
				Форма.РуководительИНН_БИП, 
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПИНН"));
			
			НоваяСтрока.Наименование = НСтр("ru = 'ИНН руководителя';
											|en = 'ИНН руководителя'");
			
		КонецЕсли;
		
		// Должность Руководителя
		Если ЗначениеЗаполнено(Форма.РуководительДолжность_БИП) Тогда
			
			ЕстьОшибка = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьДолжностьРуководителяПоЕГРЮЛ(Форма);
			
			НоваяСтрока = НоваяСтрокаТаблицыСравненияПоЕГРЮЛ(
				Форма, 
				ЕстьОшибка, 
				Форма.ВладелецЭЦПДолжность, 
				Форма.РуководительДолжность_БИП, 
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"));
			
			НоваяСтрока.Наименование = НСтр("ru = 'Должность руководителя';
											|en = 'Должность руководителя'");
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Функция Форматировать(Значение) Экспорт
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.Форматировать(Значение);
	
КонецФункции

Функция ЕстьРазличающиесяРеквизитыЕГРЮЛ(Форма)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Различается", Истина);
	
	НайденныеСтроки = Форма.ТаблицаСравненияПоЕГРЮЛ.НайтиСтроки(Отбор);
		
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Процедура ЗаполнитьСписокКриптопровайдеров(
		ВыполняемоеОповещение, 
		КонтекстЭДОКлиент, 
		Форма, 
		ПредлагатьУстановкуРасширения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Оповещение 	= Новый ОписаниеОповещения(
		"ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	ЭтоLinux = ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux();
		
	ПутьМодуляКриптографии = ?(ЭтоLinux,
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии(), "");
		
	ПоддерживаемыеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(
		,
		ЭтоLinux,
		,
		ПутьМодуляКриптографии);
		
	ПараметрыМодуляКриптографии = ?(ПоддерживаемыеКриптопровайдеры.Количество() >= 1,
		ПоддерживаемыеКриптопровайдеры[0], Неопределено);
	
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь, ПараметрыМодуляКриптографии, ПредлагатьУстановкуРасширения);
		
КонецПроцедуры

Процедура ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	
	Если Результат.Выполнено Тогда
		
		Форма.КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		Форма.ТекстОшибкиПодключенияКомпоненты = "";
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение,,, Результат.МенеджерКриптографии);
		
	Иначе
		
		Форма.ТекстОшибкиПодключенияКомпоненты = Результат.ОписаниеОшибки;
		
		Если Форма.ТекстОшибкиПодключенияКомпоненты = КриптографияЭДКОСлужебныйКлиент.ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии() Тогда
			// Не установлен криптопровайдер, но компонента стоит
			Форма.КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		КонецЕсли;
		
		ЗаполнитьСписокКриптопровайдеровЗавершение(Новый Структура("Выполнено", Ложь), ВходящийКонтекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Форма = ВходящийКонтекст.Форма;
	КонтекстЭДОКлиент = ВходящийКонтекст.КонтекстЭДОКлиент;
	
	ВходящийКонтекст.Вставить("КриптопровайдерПриКонфликте", Форма.КриптопровайдерПриКонфликте);
	
	РезультатПоиска = КонтекстЭДОКлиент.РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
	
	Форма.CryptoProCSPУстановлен	= РезультатПоиска.CryptoProCSPУстановлен;
	Форма.ViPNetCSPУстановлен 	= РезультатПоиска.ViPNetCSPУстановлен;
	
	Если Форма.ViPNetCSPУстановлен Тогда
		Форма.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	ИначеЕсли Форма.CryptoProCSPУстановлен Тогда
		Форма.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	КонецЕсли;
	
	ВыполняемоеОповещение 	= ВходящийКонтекст.ВыполняемоеОповещение;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

Процедура ОтменитьПроверкуТелефонаНажатие(Форма) Экспорт
	
	Форма.ПроверкаТелефонДляПаролей = ОбработкаЗаявленийАбонентаКлиентСервер.ШаблонПроверкиДляОблака();
	Форма.ТелефонМобильныйДляПаролей = Неопределено;
	Форма.Таймер = 0;
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстПоляТелефонДляПаролей", 0.1, Истина);
	Форма.УправлениеФормойКлиент();
	
КонецПроцедуры

Процедура ТелефонДляПаролейИзменениеТекстаРедактирования(Форма, Текст) Экспорт
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
	Форма.ТелефонМобильныйДляПаролей = Представление;
	
	Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Форма.ТелефонМобильныйДляПаролей = Текст;
	КонецЕсли;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей", 1, Истина);
	
КонецПроцедуры

Процедура КодПодтвержденияПриИзменении(Форма, Элемент) Экспорт
	
	КодПодтвержденияИзменениеТекстаРедактирования(Форма, Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

Процедура КодПодтвержденияИзменениеТекстаРедактирования(Форма, Элемент, Текст, СтандартнаяОбработка) Экспорт
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		Форма.КодПодтверждения = СокрЛП(Текст);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьКодПодтверждения(Форма) Экспорт
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ОчиститьСообщения();
	Форма.КодПодтверждения = Неопределено;
	
	Результат = Форма.ПроверитьНомерНаСервере(Форма.ТелефонМобильныйДляПаролей, Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Форма.Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Истина;
		Форма.ПроверкаТелефонДляПаролей.КодОтправлен = Истина;
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтверждения", 0.1, Истина);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки,, "ТелефонМобильныйДляПаролей");
	КонецЕсли;
	Форма.УправлениеФормойКлиент();
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикОбратногоОтсчета(Форма) Экспорт
	
	Форма.Таймер = Форма.Таймер - 1;
	Если Форма.Таймер >= 0 Тогда
		Форма.НадписьОбратногоОтсчета = СтрШаблон(НСтр("ru = 'Запросить код повторно можно будет через %1 сек.';
														|en = 'Запросить код повторно можно будет через %1 сек.'"), Форма.Таймер);
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);		
	Иначе
		Форма.НадписьОбратногоОтсчета = "";
		Форма.ПроверкаТелефонДляПаролей.КодОтправлен = Ложь;
		Форма.УправлениеФормойКлиент();
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ПроверитьКодПодтверждения(Форма) Экспорт
	
	ОчиститьСообщения();
	
	Форма.КодПодтверждения = СокрЛП(Форма.КодПодтверждения);
	Если СтрДлина(Форма.КодПодтверждения) = 6 Тогда
		Если Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
			
			Результат = Форма.ПроверитьТелефонПоКодуНаСервере(
				Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки, 
				Форма.КодПодтверждения);
				
			Если Результат.Выполнено Тогда
				Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Ложь;
				Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = Истина;
				Форма.ОтключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения");
				Форма.УправлениеФормойКлиент();
				Форма.ВыполнитьДействияПриПравильномКоде();
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтверждения");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ОбновитьТелефонДляПаролей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ПроверитьНомер.Видимость = Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено;
	Если Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		Элементы.ТелефонМобильныйДляПаролей.ОбновитьТекстРедактирования();
		Форма.ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер");
		Форма.ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоПодборКонтактов(Форма, Текст, ДанныеВыбора, СтандартнаяОбработка, ИмяПоля) Экспорт

	ДанныеВыбора = Новый СписокЗначений;
	Для каждого Строка Из Форма.ПредыдущиеУчетныеЗаписи Цикл
		
		Значение = Строка.Значение[ИмяПоля];
		
		Если ЗначениеЗаполнено(Значение) 
			И ДанныеВыбора.НайтиПоЗначению(Значение) = Неопределено
			И СтрНайти(Значение, Текст) <> 0 Тогда
			
			ДанныеВыбора.Добавить(Значение);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыПаспорта() Экспорт

	ПараметрыФормы = 
		"ВладелецЭЦПКемВыданДокумент,
		|ВладелецЭЦПВидДокумента,
		|ВладелецЭЦПГражданство,
		|ВладелецЭЦПДатаВыдачиДокумента,
		|ВладелецЭЦПДатаРождения,
		|ВладелецЭЦПКодПодразделения,
		|ВладелецЭЦПМестоРождения,
		|ВладелецЭЦПНомерДокумента,
		|ВладелецЭЦППол,
		|ВладелецЭЦПСерияДокумента,
		|ЗапретитьИзменение,
		|ВладелецЭЦПИмя,
		|ВладелецЭЦПОтчество,
		|ВладелецЭЦПФамилия,
		|ВладелецЭЦП,
		|ВладелецЭЦПТип,
		|Организация";
	
	Возврат ПараметрыФормы;

КонецФункции


#КонецОбласти