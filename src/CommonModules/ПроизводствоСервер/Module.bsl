////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	Параметры.ЕстьПроизводныеДвижения = Истина;
	
	ТипДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ВыпускПродукции);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЗаказыМатериаловВПроизводство);
		
		//++ Устарело_Производство21
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЗаказыМатериаловСУчетомКорректировок);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаСписаниеПоНормативам);
		//-- Устарело_Производство21

		//++ НЕ УТКА
		Если (ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2") Или ТипДокумента = Тип("ДокументОбъект.ЗаказНаПроизводство2_2"))
			И НЕ Документ.ДинамическаяСтруктура Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов);
		КонецЕсли;
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаПередачуИзПроизводства);
		//-- НЕ УТКА
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыКОформлению);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ВыпускПродукции);
		
		ТипДокумента = ТипЗнч(Документ);
		
		ИсправительныйДокумент = ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ);
		
		Если Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ЗаказМатериаловВПроизводство")
				//++ НЕ УТКА

				//++ Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ЗаказНаПроизводство")
				//-- Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2")
				//-- НЕ УТКА
				)
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И (ТипДокумента = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов")
				//++ Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ПередачаМатериаловВПроизводство")
				//-- Устарело_Производство21
				)
			//++ НЕ УТКА

			//++ Устарело_Производство21
			Или ТипДокумента = Тип("ДокументОбъект.КорректировкаЗаказаМатериаловВПроизводство") 
			//-- Устарело_Производство21

			//-- НЕ УТКА
			Или ИсправительныйДокумент
			Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ЗаказыМатериаловВПроизводство);
		КонецЕсли;
		
		//++ НЕ УТКА

		//++ Устарело_Производство21
		Если Не Свойства.ЭтоНовый
				И ТипДокумента = Тип("ДокументОбъект.ЗаказНаПроизводство")
				И (Документ.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству
					Или Документ.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт)
			Или ТипДокумента = Тип("ДокументОбъект.КорректировкаЗаказаМатериаловВПроизводство") Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ЗаказыМатериаловСУчетомКорректировок);
		КонецЕсли;
		
		Если Не Свойства.ЭтоНовый
				И ТипДокумента = Тип("ДокументОбъект.ВыпускПродукции") И Документ.ВыпускПоРаспоряжениям
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ТипДокумента = Тип("ДокументОбъект.СписаниеЗатратНаВыпуск") Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаСписаниеПоНормативам);
		КонецЕсли;
		//-- Устарело_Производство21
			
		Если Не Свойства.ЭтоНовый
				И ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2")
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ТипДокумента = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов") И Документ.ПоРаспоряжениям
				И (Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства
					Или Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства) 
			Или ИсправительныйДокумент Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РаспоряженияНаПередачуИзПроизводства);
		КонецЕсли;
		//-- НЕ УТКА
		
		Если ИсправительныйДокумент
			//++ НЕ УТКА
			Или Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ЗаказНаРемонт")
				//++ Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.МаршрутныйЛистПроизводства")
				//-- Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2")
				Или (ТипДокумента = Тип("ДокументОбъект.ПроизводственнаяОперация2_2") И Документ.ОперацияКакРаспоряжениеВыработки)
				)
			//-- НЕ УТКА
			Или Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И ТипДокумента = Тип("ДокументОбъект.ВыработкаСотрудников")
			Или ТипДокумента = Тип("ДокументОбъект.ПроизводствоБезЗаказа") Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТрудозатратыКОформлению);
		КонецЕсли;
		
		//++ НЕ УТКА
		Если (ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2") Или ТипДокумента = Тип("ДокументОбъект.ЗаказНаПроизводство2_2"))
			И НЕ Документ.ДинамическаяСтруктура Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов);
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыпускПродукции;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЗаказыМатериаловВПроизводство;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	//++ НЕ УТКА
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РаспоряженияНаПередачуИзПроизводства;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	//-- НЕ УТКА
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ТрудозатратыКОформлению;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		// Движения по регистру сторнируем только в случае, если не оформлена выработка.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументыСторно.Ссылка КАК Регистратор,
		|	ДокументыСторно.Дата КАК Период,
		|	ДанныеРегистра.Активность КАК Активность,
		|	ДанныеРегистра.ВидДвижения КАК ВидДвижения,
		|	ДанныеРегистра.Организация КАК Организация,
		|	ДанныеРегистра.ПартияПроизводства КАК ПартияПроизводства,
		|	ДанныеРегистра.Распоряжение КАК Распоряжение,
		|	ДанныеРегистра.ВидРабот КАК ВидРабот,
		|	ДанныеРегистра.Исполнитель КАК Исполнитель,
		|	ДанныеРегистра.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
		|	ДанныеРегистра.Подразделение КАК Подразделение,
		|	- ДанныеРегистра.Количество КАК Количество,
		|	ИСТИНА КАК Сторно
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению КАК ДанныеРегистра
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ДанныеРегистра.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.ТрудозатратыКОформлению КАК ОформлениеТрудозатрат
		|	ПО
		|		ДанныеРегистра.Распоряжение = ОформлениеТрудозатрат.Распоряжение
		|		И ОформлениеТрудозатрат.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|ГДЕ
		|	НЕ ДанныеРегистра.Сторно
		|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОформлениеТрудозатрат.Регистратор ЕСТЬ NULL
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
		
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам производства.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ВыпускПродукции");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЗаказыМатериаловВПроизводство");
	//++ Устарело_Производство21
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЗаказыМатериаловСУчетомКорректировок");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РаспоряженияНаСписаниеПоНормативам");
	//-- Устарело_Производство21

	//++ НЕ УТКА
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ОбеспечениеПроизводственныхПроцессов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РаспоряженияНаПередачуИзПроизводства");
	//-- НЕ УТКА
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТрудозатратыКОформлению");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область ЗаказыМатериаловВПроизводство
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыМатериаловВПроизводствоИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	ТаблицаОстатков.Серия                         КАК Серия,
				|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
				|	ТаблицаОстатков.Склад                         КАК Склад,
				|	ТаблицаОстатков.Назначение                    КАК Назначение,
				|	ТаблицаОстатков.НазначениеОтправителя         КАК НазначениеОтправителя,
				|	ТаблицаОстатков.Подразделение                 КАК Подразделение,
				|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
				|ИЗ
				|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(,
				|			(Распоряжение, Номенклатура, Характеристика, Серия, КодСтроки, Склад, Назначение, НазначениеОтправителя, Подразделение) В
				|				(ВЫБРАТЬ
				|					Таблица.Распоряжение,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика,
				|					Таблица.Серия,
				|					Таблица.КодСтроки,
				|					Таблица.Склад,
				|					Таблица.Назначение,
				|					Таблица.НазначениеОтправителя,
				|					Таблица.Подразделение
				|				ИЗ
				|					ДвиженияЗаказыМатериаловВПроизводствоИзменение КАК Таблица)
				|	) КАК ТаблицаОстатков
				|
				|ГДЕ
				|	ТаблицаОстатков.КОформлениюОстаток < 0";
		Иначе
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	ТаблицаОстатков.Серия                         КАК Серия,
				|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
				|	ТаблицаОстатков.Склад                         КАК Склад,
				|	ТаблицаОстатков.Назначение                    КАК Назначение,
				|	ТаблицаОстатков.НазначениеОтправителя         КАК НазначениеОтправителя,
				|	ТаблицаОстатков.Подразделение                 КАК Подразделение,
				|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
				|ИЗ
				|	ВТЗаказыМатериаловВПроизводствоОстатки  КАК ТаблицаОстатков
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|		ВТДопустимыеОтклоненияЗаказыМатериаловВПроизводство КАК ДопустимыеОтклонения
				|		ПО
				|			ТаблицаОстатков.Распоряжение     = ДопустимыеОтклонения.Распоряжение
				|			И ТаблицаОстатков.Номенклатура   = ДопустимыеОтклонения.Номенклатура
				|			И ТаблицаОстатков.Характеристика = ДопустимыеОтклонения.Характеристика
				|			И ТаблицаОстатков.Склад          = ДопустимыеОтклонения.Склад
				|			И ТаблицаОстатков.Серия          = ДопустимыеОтклонения.Серия
				|			И ТаблицаОстатков.Назначение     = ДопустимыеОтклонения.Назначение
				|			И ТаблицаОстатков.НазначениеОтправителя = ДопустимыеОтклонения.НазначениеОтправителя
				|			И ТаблицаОстатков.Подразделение  = ДопустимыеОтклонения.Подразделение
				|
				|ГДЕ
				|	ТаблицаОстатков.КОформлениюОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение,0) < 0";
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЗаказыМатериаловВПроизводство");
		
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТКА

	//++ Устарело_Производство21
	#Область ЗаказыМатериаловСУчетомКорректировок
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыМатериаловСУчетомКорректировокИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОбороты.Организация                КАК Организация,
			|	ТаблицаОбороты.Подразделение              КАК Подразделение,
			|	ТаблицаОбороты.Распоряжение               КАК Распоряжение,
			|	ТаблицаОбороты.КодСтрокиРаспоряжения      КАК КодСтрокиРаспоряжения,
			|	ТаблицаОбороты.ВариантОбеспечения         КАК ВариантОбеспечения,
			|	ТаблицаОбороты.ДатаПотребности            КАК ДатаПотребности,
			|	ТаблицаОбороты.КодСтроки                  КАК КодСтроки,
			|	ТаблицаОбороты.Отменено                   КАК Отменено,
			|	ТаблицаОбороты.ПроизводствоНаСтороне      КАК ПроизводствоНаСтороне,
			|	ТаблицаОбороты.Серия                      КАК Серия,
			|	ТаблицаОбороты.Склад                      КАК Склад,
			|	ВЫБОР
			|		КОГДА ТаблицаОбороты.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|			ТОГДА ТаблицаОбороты.Упаковка.Представление                 
			|		ИНАЧЕ ТаблицаОбороты.Номенклатура.ЕдиницаИзмерения.Представление
			|	КОНЕЦ КАК УпаковкаПредставление,
			|	ТаблицаОбороты.Номенклатура.Представление    КАК НоменклатураПредставление,
			|	ТаблицаОбороты.Характеристика.Представление  КАК ХарактеристикаПредставление,
			|	ТаблицаОбороты.КоличествоУпаковокОборот   КАК КоличествоУпаковок
			|ИЗ
			|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(,,, 
			|				(Организация,Подразделение,Распоряжение,КодСтрокиРаспоряжения) В 
			|					(ВЫБРАТЬ
			|						Таблица.Организация,
			|						Таблица.Подразделение,
			|						Таблица.Распоряжение,
			|						Таблица.КодСтрокиРаспоряжения
			|					ИЗ
			|						ЗаказыМатериаловСУчетомКорректировокИзменение КАК Таблица)
			|				)КАК ТаблицаОбороты
			|
			|ГДЕ
			|	ТаблицаОбороты.КоличествоУпаковокОборот < 0";
			
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиЗаказыМатериаловСУчетомКорректировок");
		
	КонецЕсли;
	
	#КонецОбласти
	//-- Устарело_Производство21
	
	#Область РаспоряженияНаПередачуИзПроизводства
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение") Тогда
		
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		
		Если ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
				|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
				|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
				|	ТаблицаОстатков.Получатель                    КАК Получатель,
				|	ТаблицаОстатков.Организация                   КАК Организация,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	ТаблицаОстатков.Назначение                    КАК Назначение,
				|	ТаблицаОстатков.Серия                         КАК Серия,
				|	ТаблицаОстатков.Операция                      КАК Операция,
				|	ТаблицаОстатков.КоличествоОстаток             КАК Количество
				|ПОМЕСТИТЬ ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль
				|ИЗ
				|	РегистрНакопления.РаспоряженияНаПередачуИзПроизводства.Остатки(,
				|			(Распоряжение, КодСтроки, Отправитель, Получатель, Организация, Номенклатура, Характеристика, Назначение, Серия, Операция) В
				|				(ВЫБРАТЬ
				|					Таблица.Распоряжение,
				|					Таблица.КодСтроки,
				|					Таблица.Отправитель,
				|					Таблица.Получатель,
				|					Таблица.Организация,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика,
				|					Таблица.Назначение,
				|					Таблица.Серия,
				|					Таблица.Операция
				|				ИЗ
				|					ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение КАК Таблица)
				|	) КАК ТаблицаОстатков
				|ГДЕ
				|	ТаблицаОстатков.КоличествоОстаток < 0");
			
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	Таблица.Распоряжение,
				|	Таблица.КодСтроки,
				|	Таблица.Отправитель,
				|	Таблица.Получатель,
				|	Таблица.Организация,
				|	Таблица.Номенклатура,
				|	Таблица.Характеристика,
				|	Таблица.Назначение,
				|	Таблица.Серия,
				|	Таблица.Операция
				|ПОМЕСТИТЬ ВТ_РаспоряженияНаПередачуИзПроизводстваКонтрольНаДату
				|ИЗ
				|	ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение КАК Таблица
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль
				|	ПО Таблица.Распоряжение = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Заказ
				|		И Таблица.КодСтроки = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.КодСтроки
				|		И Таблица.Отправитель = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Отправитель
				|		И Таблица.Получатель = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Получатель
				|		И Таблица.Организация = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Организация
				|		И Таблица.Номенклатура = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Номенклатура
				|		И Таблица.Характеристика = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Характеристика
				|		И Таблица.Назначение = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Назначение
				|		И Таблица.Серия = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Серия
				|		И Таблица.Операция = ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Операция
				|
				|ГДЕ
				|	ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль.Заказ ЕСТЬ NULL");
			
			ТекстЗапроса =
				"ВЫБРАТЬ
				|	ЛОЖЬ                                          КАК КонтрольНаДату,
				|	ТаблицаОстатков.Заказ                         КАК Заказ,
				|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
				|	ТаблицаОстатков.Получатель                    КАК Получатель,
				|	ТаблицаОстатков.Организация                   КАК Организация,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	ТаблицаОстатков.Назначение                    КАК Назначение,
				|	ТаблицаОстатков.Серия                         КАК Серия,
				|	ТаблицаОстатков.Операция                      КАК Операция,
				|	ТаблицаОстатков.Количество                    КАК Количество
				|ИЗ
				|	ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль КАК ТаблицаОстатков
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ИСТИНА                                        КАК КонтрольНаДату,
				|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
				|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
				|	ТаблицаОстатков.Получатель                    КАК Получатель,
				|	ТаблицаОстатков.Организация                   КАК Организация,
				|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
				|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаОстатков.Характеристика                КАК Характеристика,
				|	ТаблицаОстатков.Назначение                    КАК Назначение,
				|	ТаблицаОстатков.Серия                         КАК Серия,
				|	ТаблицаОстатков.Операция                      КАК Операция,
				|	ТаблицаОстатков.КоличествоОстаток             КАК Количество
				|ИЗ
				|	РегистрНакопления.РаспоряженияНаПередачуИзПроизводства.Остатки(&ДатаКонтроля,
				|			(Распоряжение, КодСтроки, Отправитель, Получатель, Организация, Номенклатура, Характеристика, Назначение, Серия, Операция) В
				|				(ВЫБРАТЬ
				|					Таблица.Распоряжение,
				|					Таблица.КодСтроки,
				|					Таблица.Отправитель,
				|					Таблица.Получатель,
				|					Таблица.Организация,
				|					Таблица.Номенклатура,
				|					Таблица.Характеристика,
				|					Таблица.Назначение,
				|					Таблица.Серия,
				|					Таблица.Операция
				|				ИЗ
				|					ВТ_РаспоряженияНаПередачуИзПроизводстваКонтрольНаДату КАК Таблица)
				|	) КАК ТаблицаОстатков
				|ГДЕ
				|	ТаблицаОстатков.КоличествоОстаток < 0
				|";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов")
			И Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства Тогда
			
			ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Распоряжение                  КАК Распоряжение,
			|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
			|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
			|	ТаблицаОстатков.Получатель                    КАК Получатель,
			|	ТаблицаОстатков.Организация                   КАК Организация,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Назначение                    КАК Назначение,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.Операция                      КАК Операция,
			|	ТаблицаОстатков.Количество + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) КАК Количество
			|ПОМЕСТИТЬ ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль
			|ИЗ
			|	ВТРаспоряженияНаПередачуИзПроизводстваОстатки КАК ТаблицаОстатков
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДопустимыеОтклоненияРаспоряженияНаПередачуИзПроизводства КАК ДопустимыеОтклонения
			|	ПО ТаблицаОстатков.Отправитель		= ДопустимыеОтклонения.Отправитель
			|	И ТаблицаОстатков.Получатель		= ДопустимыеОтклонения.Получатель
			|	И ТаблицаОстатков.Организация		= ДопустимыеОтклонения.Организация
			|	И ТаблицаОстатков.Распоряжение		= ДопустимыеОтклонения.Распоряжение
			|	И ТаблицаОстатков.Номенклатура		= ДопустимыеОтклонения.Номенклатура
			|	И ТаблицаОстатков.Характеристика	= ДопустимыеОтклонения.Характеристика
			|	И ТаблицаОстатков.Назначение		= ДопустимыеОтклонения.Назначение
			|	И ТаблицаОстатков.Серия				= ДопустимыеОтклонения.Серия
			|	И ТаблицаОстатков.Операция			= ДопустимыеОтклонения.Операция
			|	И ТаблицаОстатков.КодСтроки			= ДопустимыеОтклонения.КодСтроки
			|
			|ГДЕ
			|	ТаблицаОстатков.Количество + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) < 0
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ТаблицаОстатков.Отправитель,
			|	ТаблицаОстатков.Получатель,
			|	ТаблицаОстатков.Организация,
			|	ТаблицаОстатков.Распоряжение,
			|	ТаблицаОстатков.Номенклатура,
			|	ТаблицаОстатков.Характеристика,
			|	ТаблицаОстатков.Назначение,
			|	ТаблицаОстатков.Серия,
			|	ТаблицаОстатков.Операция,
			|	ТаблицаОстатков.КодСтроки
			|");
			
			ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТаблицаДвижений.Распоряжение,
			|	ТаблицаДвижений.КодСтроки,
			|	ТаблицаДвижений.Отправитель,
			|	ТаблицаДвижений.Получатель,
			|	ТаблицаДвижений.Организация,
			|	ТаблицаДвижений.Номенклатура,
			|	ТаблицаДвижений.Характеристика,
			|	ТаблицаДвижений.Назначение,
			|	ТаблицаДвижений.Серия,
			|	ТаблицаДвижений.Операция
			|ПОМЕСТИТЬ ВТ_РаспоряженияНаПередачуИзПроизводстваКонтрольНаДату
			|ИЗ
			|	ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение КАК ТаблицаДвижений
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль КАК ТаблицаОперативногоКонтроля
			|	ПО ТаблицаДвижений.Распоряжение		= ТаблицаОперативногоКонтроля.Распоряжение
			|	И ТаблицаДвижений.КодСтроки			= ТаблицаОперативногоКонтроля.КодСтроки
			|	И ТаблицаДвижений.Отправитель		= ТаблицаОперативногоКонтроля.Отправитель
			|	И ТаблицаДвижений.Получатель		= ТаблицаОперативногоКонтроля.Получатель
			|	И ТаблицаДвижений.Организация		= ТаблицаОперативногоКонтроля.Организация
			|	И ТаблицаДвижений.Номенклатура		= ТаблицаОперативногоКонтроля.Номенклатура
			|	И ТаблицаДвижений.Характеристика	= ТаблицаОперативногоКонтроля.Характеристика
			|	И ТаблицаДвижений.Назначение		= ТаблицаОперативногоКонтроля.Назначение
			|	И ТаблицаДвижений.Серия				= ТаблицаОперативногоКонтроля.Серия
			|	И ТаблицаДвижений.Операция			= ТаблицаОперативногоКонтроля.Операция
			|
			|ГДЕ
			|	ТаблицаОперативногоКонтроля.Распоряжение ЕСТЬ NULL
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ТаблицаДвижений.Отправитель,
			|	ТаблицаДвижений.Получатель,
			|	ТаблицаДвижений.Организация,
			|	ТаблицаДвижений.Распоряжение,
			|	ТаблицаДвижений.Номенклатура,
			|	ТаблицаДвижений.Характеристика,
			|	ТаблицаДвижений.Назначение,
			|	ТаблицаДвижений.Серия,
			|	ТаблицаДвижений.Операция,
			|	ТаблицаДвижений.КодСтроки
			|");
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЛОЖЬ                                          КАК КонтрольНаДату,
			|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
			|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
			|	ТаблицаОстатков.Получатель                    КАК Получатель,
			|	ТаблицаОстатков.Организация                   КАК Организация,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.ЕдиницаИзмерения              КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Назначение                    КАК Назначение,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.Операция                      КАК Операция,
			|	ТаблицаОстатков.Количество                    КАК Количество
			|ИЗ
			|	ВТ_РаспоряженияНаПередачуИзПроизводстваОперативныйКонтроль КАК ТаблицаОстатков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА                                        КАК КонтрольНаДату,
			|	ТаблицаОстатков.Распоряжение                  КАК Заказ,
			|	ТаблицаОстатков.Отправитель                   КАК Отправитель,
			|	ТаблицаОстатков.Получатель                    КАК Получатель,
			|	ТаблицаОстатков.Организация                   КАК Организация,
			|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика                КАК Характеристика,
			|	ТаблицаОстатков.Назначение                    КАК Назначение,
			|	ТаблицаОстатков.Серия                         КАК Серия,
			|	ТаблицаОстатков.Операция                      КАК Операция,
			|	ТаблицаОстатков.КоличествоОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) КАК Количество
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаПередачуИзПроизводства.Остатки(&ДатаКонтроля,
			|			(Распоряжение, КодСтроки, Отправитель, Получатель, Организация, Номенклатура, Характеристика, Назначение, Серия, Операция) В
			|				(ВЫБРАТЬ
			|					Таблица.Распоряжение,
			|					Таблица.КодСтроки,
			|					Таблица.Отправитель,
			|					Таблица.Получатель,
			|					Таблица.Организация,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Назначение,
			|					Таблица.Серия,
			|					Таблица.Операция
			|				ИЗ
			|					ВТ_РаспоряженияНаПередачуИзПроизводстваКонтрольНаДату КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДопустимыеОтклоненияРаспоряженияНаПередачуИзПроизводства КАК ДопустимыеОтклонения
			|	ПО ТаблицаОстатков.Отправитель		= ДопустимыеОтклонения.Отправитель
			|	И ТаблицаОстатков.Получатель		= ДопустимыеОтклонения.Получатель
			|	И ТаблицаОстатков.Организация		= ДопустимыеОтклонения.Организация
			|	И ТаблицаОстатков.Распоряжение		= ДопустимыеОтклонения.Распоряжение
			|	И ТаблицаОстатков.Номенклатура		= ДопустимыеОтклонения.Номенклатура
			|	И ТаблицаОстатков.Характеристика	= ДопустимыеОтклонения.Характеристика
			|	И ТаблицаОстатков.Назначение		= ДопустимыеОтклонения.Назначение
			|	И ТаблицаОстатков.Серия				= ДопустимыеОтклонения.Серия
			|	И ТаблицаОстатков.Операция			= ДопустимыеОтклонения.Операция
			|	И ТаблицаОстатков.КодСтроки			= ДопустимыеОтклонения.КодСтроки
			|
			|ГДЕ
			|	ТаблицаОстатков.КоличествоОстаток + ЕСТЬNULL(ДопустимыеОтклонения.ДопустимоеОтклонение, 0) < 0
			|";
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЛОЖЬ			КАК КонтрольНаДату,
			|	НЕОПРЕДЕЛЕНО	КАК Заказ,
			|	НЕОПРЕДЕЛЕНО	КАК Отправитель,
			|	НЕОПРЕДЕЛЕНО	КАК Получатель,
			|	НЕОПРЕДЕЛЕНО	КАК Номенклатура,
			|	НЕОПРЕДЕЛЕНО	КАК ЕдиницаИзмерения,
			|	НЕОПРЕДЕЛЕНО	КАК Характеристика,
			|	НЕОПРЕДЕЛЕНО	КАК Назначение,
			|	НЕОПРЕДЕЛЕНО	КАК Серия,
			|	НЕОПРЕДЕЛЕНО	КАК Операция,
			|	0				КАК Количество
			|ГДЕ
			|	ЛОЖЬ
			|";
			
		КонецЕсли;
		
		ЗапросДаты = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Т.ДатаКонтроля) КАК Дата ИЗ ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение КАК Т");
		ЗапросДаты.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ДатаОстатка = ?(ВыборкаДаты.Следующий() И ЗначениеЗаполнено(ВыборкаДаты.Дата), ВыборкаДаты.Дата, Документ.Дата);
		Запрос.УстановитьПараметр("ДатаКонтроля", ДатаОстатка);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРаспоряженияНаПередачуИзПроизводства");
		
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	//++ Устарело_Производство21
	#Область РаспоряженияНаСписаниеПоНормативам
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение") Тогда
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Организация КАК Организация,
			|	ТаблицаОстатков.Подразделение КАК Подразделение,
			|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика КАК Характеристика,
			|	ТаблицаОстатков.Распоряжение КАК Распоряжение,
			|	ТаблицаОстатков.КодСтроки КАК КодСтроки,
			|	ТаблицаОстатков.Назначение КАК Назначение,
			|	ТаблицаОстатков.КоличествоОстаток КАК Количество
			|ПОМЕСТИТЬ РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Остатки(
			|			,
			|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Распоряжение,
			|					Таблица.КодСтроки,
			|					Таблица.Назначение
			|				ИЗ
			|					ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Таблица)) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КоличествоОстаток < 0");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Таблица.Организация,
			|	Таблица.Подразделение,
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика,
			|	Таблица.Распоряжение,
			|	Таблица.КодСтроки,
			|	Таблица.Назначение
			|ПОМЕСТИТЬ РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату
			|ИЗ
			|	ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль КАК РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль
			|		ПО Таблица.Организация = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Организация
			|			И Таблица.Подразделение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Подразделение
			|			И Таблица.Номенклатура = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Номенклатура
			|			И Таблица.Характеристика = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Характеристика
			|			И Таблица.Распоряжение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Распоряжение
			|			И Таблица.КодСтроки = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.КодСтроки
			|			И Таблица.Назначение = РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Назначение
			|ГДЕ
			|	РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль.Распоряжение ЕСТЬ NULL");
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЛОЖЬ КАК КонтрольНаДату,
			|	ТаблицаОстатков.Организация КАК Организация,
			|	ТаблицаОстатков.Подразделение КАК Подразделение,
			|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
			|	ТаблицаОстатков.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика КАК Характеристика,
			|	ТаблицаОстатков.Распоряжение КАК Распоряжение,
			|	ТаблицаОстатков.КодСтроки КАК КодСтроки,
			|	ТаблицаОстатков.Назначение КАК Назначение,
			|	ТаблицаОстатков.Количество КАК Количество
			|ИЗ
			|	РаспоряженияНаСписаниеПоНормативам_ОперативныйКонтроль КАК ТаблицаОстатков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА,
			|	ТаблицаОстатков.Организация,
			|	ТаблицаОстатков.Подразделение,
			|	ТаблицаОстатков.Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика,
			|	ТаблицаОстатков.Распоряжение,
			|	ТаблицаОстатков.КодСтроки,
			|	ТаблицаОстатков.Назначение,
			|	-(ТаблицаОстатков.КоличествоРасход - ТаблицаОстатков.КоличествоПриход)
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Обороты(
			|			&ДатаКонтроляПередЗаписьюНачало,
			|			&ДатаКонтроляПередЗаписьюКонец,
			|			,
			|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Распоряжение,
			|					Таблица.КодСтроки,
			|					Таблица.Назначение
			|				ИЗ
			|					РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату КАК Таблица)
			|					И &ДатаКонтроляПередЗаписьюНачало <> ДатаВремя(1,1,1)) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КоличествоРасход > ТаблицаОстатков.КоличествоПриход
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА,
			|	ТаблицаОстатков.Организация,
			|	ТаблицаОстатков.Подразделение,
			|	ТаблицаОстатков.Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика,
			|	ТаблицаОстатков.Распоряжение,
			|	ТаблицаОстатков.КодСтроки,
			|	ТаблицаОстатков.Назначение,
			|	-(ТаблицаОстатков.КоличествоРасход - ТаблицаОстатков.КоличествоПриход)
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаСписаниеПоНормативам.Обороты(
			|			&ДатаКонтроляПриЗаписиНачало,
			|			&ДатаКонтроляПриЗаписиКонец,
			|			,
			|			(Организация, Подразделение, Номенклатура, Характеристика, Распоряжение, КодСтроки, Назначение) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Распоряжение,
			|					Таблица.КодСтроки,
			|					Таблица.Назначение
			|				ИЗ
			|					РаспоряженияНаСписаниеПоНормативам_КонтрольНаДату КАК Таблица)
			|					И &ДатаКонтроляПриЗаписиНачало <> ДатаВремя(1,1,1)) КАК ТаблицаОстатков
			|ГДЕ
			|	ТаблицаОстатков.КоличествоРасход > ТаблицаОстатков.КоличествоПриход";
		
		ЗапросДаты = Новый Запрос(
			"ВЫБРАТЬ
			|	МИНИМУМ(Т.ДатаКонтроляПередЗаписью) КАК ДатаКонтроляПередЗаписью,
			|	МИНИМУМ(Т.ДатаКонтроляПриЗаписи) КАК ДатаКонтроляПриЗаписи
			|ИЗ ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение КАК Т");
		
		ЗапросДаты.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ДатаКонтроляПередЗаписьюНачало = Дата("00010101");
		ДатаКонтроляПередЗаписьюКонец = Дата("00010101");
		
		ДатаКонтроляПриЗаписиНачало = Дата("00010101");
		ДатаКонтроляПриЗаписиКонец = Дата("00010101");
		
		Если ВыборкаДаты.Следующий() Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДаты.ДатаКонтроляПередЗаписью) Тогда
				ДатаКонтроляПередЗаписьюНачало = НачалоМесяца(ВыборкаДаты.ДатаКонтроляПередЗаписью);
				ДатаКонтроляПередЗаписьюКонец = КонецМесяца(ВыборкаДаты.ДатаКонтроляПередЗаписью);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДаты.ДатаКонтроляПриЗаписи) Тогда
				ДатаКонтроляПриЗаписиНачало = НачалоМесяца(ВыборкаДаты.ДатаКонтроляПриЗаписи);
				ДатаКонтроляПриЗаписиКонец = КонецМесяца(ВыборкаДаты.ДатаКонтроляПриЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаКонтроляПередЗаписьюНачало",  ДатаКонтроляПередЗаписьюНачало);
		Запрос.УстановитьПараметр("ДатаКонтроляПередЗаписьюКонец",   ДатаКонтроляПередЗаписьюКонец);
		
		Запрос.УстановитьПараметр("ДатаКонтроляПриЗаписиНачало",     ДатаКонтроляПриЗаписиНачало);
		Запрос.УстановитьПараметр("ДатаКонтроляПриЗаписиКонец",      ДатаКонтроляПриЗаписиКонец);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРаспоряженияНаСписаниеПоНормативам");
		
	КонецЕсли;
	
	#КонецОбласти
	//-- Устарело_Производство21
	
	#Область ТрудозатратыКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТрудозатратыКОформлениюИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Организация                     КАК Организация,
			|	ТаблицаОстатков.ПартияПроизводства              КАК ПартияПроизводства,
			|	ТаблицаОстатков.Распоряжение                    КАК Распоряжение,
			|	ТаблицаОстатков.ВидРабот                        КАК ВидРабот,
			|	ТаблицаОстатков.ВидРабот.ЕдиницаИзмерения       КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Исполнитель                     КАК Исполнитель,
			|	ТаблицаОстатков.Подразделение                   КАК Подразделение,
			|	ТаблицаОстатков.КодСтрокиРаспоряжения           КАК КодСтрокиРаспоряжения,
			|	ТаблицаОстатков.КоличествоОстаток               КАК Количество
			|ИЗ
			|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(,
			|			(Организация, ПартияПроизводства, Распоряжение, ВидРабот, Исполнитель, Подразделение, КодСтрокиРаспоряжения) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.ПартияПроизводства,
			|					Таблица.Распоряжение,
			|					Таблица.ВидРабот,
			|					Таблица.Исполнитель,
			|					Таблица.Подразделение,
			|					Таблица.КодСтрокиРаспоряжения
			|				ИЗ
			|					ДвиженияТрудозатратыКОформлениюИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	(ТаблицаОстатков.КоличествоОстаток < 0)";
			
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиТрудозатратыКОформлению");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область ЗаказыМатериаловВПроизводство
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыМатериаловВПроизводствоИзменение") Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов")
			//++ Устарело_Производство21
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.ПередачаМатериаловВПроизводство")
			//-- Устарело_Производство21
			Тогда
			
			ШаблонСообщенияСоСкладомСПодразделением = НСтр("ru = 'Номенклатура %1, склад %2, подразделение %3
				|По строке %4 оформлено больше, чем указано в распоряжении, на %5 %6';
				|en = 'Items %1, warehouse %2, business unit %3
				| The line %4contains more registered items than stated in the instruction by %5 %6'");
				
			ШаблонСообщенияСоСкладомБезПодразделения = НСтр("ru = 'Номенклатура %1, склад %2
				|По строке %4 оформлено больше, чем указано в распоряжении, на %5 %6';
				|en = 'Items %1, warehouse %2
				| The line %4contains more registered items than stated in the instruction by %5 %6'");
				
			ШаблонСообщенияБезСкладаСПодразделением = НСтр("ru = 'Номенклатура %1, подразделение %3
				|По строке %4 оформлено больше, чем указано в распоряжении, на %5 %6';
				|en = 'Items %1, business unit %3
				| The line %4contains more registered items than stated in the instruction by %5 %6'");
				
			ШаблонСообщенияБезСкладаБезПодразделения = НСтр("ru = 'Номенклатура %1
				|По строке %4 оформлено больше, чем указано в распоряжении, на %5 %6';
				|en = 'Items %1
				|The line %4contains more registered items than stated in the instruction by %5 %6'");
				
		Иначе
	
			ШаблонСообщенияСоСкладомСПодразделением = НСтр("ru = 'Номенклатура %1, склад %2, подразделение %3
				|По строке %4 уже оформлена передача материалов в количестве большем, чем указано в документе, на %5 %6';
				|en = 'Items %1, warehouse %2, business unit %3
				| In line %4, the transfer of materials has already been registered in quantity greater than specified in the document by %5%6'");
				
			ШаблонСообщенияСоСкладомБезПодразделения = НСтр("ru = 'Номенклатура %1, склад 2
				|По строке %4 уже оформлена передача материалов в количестве большем, чем указано в документе, на %5 %6';
				|en = 'Items %1, warehouse 2 
				| In line %4, the transfer of materials has already been registered in quantity greater than specified in the document by %5 %6'");
				
			ШаблонСообщенияБезСкладаСПодразделением = НСтр("ru = 'Номенклатура %1, подразделение %3
				|По строке %4 уже оформлена передача материалов в количестве большем, чем указано в документе, на %5 %6';
				|en = 'Items %1, business unit%3 
				| In line %4, the transfer of materials has already been registered in quantity greater than specified in the document by %5 %6'");
				
			ШаблонСообщенияБезСкладаБезПодразделения = НСтр("ru = 'Номенклатура %1
				|По строке %4 уже оформлена передача материалов в количестве большем, чем указано в документе, на %5 %6';
				|en = 'Items %1
				| In line %4, the transfer of materials has already been registered in quantity greater than specified in the document by %5 %6'");
				
		КонецЕсли;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЗаказыМатериаловВПроизводство Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ЗначениеЗаполнено(СтрокаОшибки.Склад)
				И ЗначениеЗаполнено(СтрокаОшибки.Подразделение) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСоСкладомСПодразделением,
					ПредставлениеНоменклатуры, СтрокаОшибки.Склад, СтрокаОшибки.Подразделение,
					СтрокаОшибки.КодСтроки, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			ИначеЕсли ЗначениеЗаполнено(СтрокаОшибки.Склад)
				И Не ЗначениеЗаполнено(СтрокаОшибки.Подразделение) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияСоСкладомБезПодразделения,
					ПредставлениеНоменклатуры, СтрокаОшибки.Склад,,
					СтрокаОшибки.КодСтроки, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаОшибки.Склад)
				И ЗначениеЗаполнено(СтрокаОшибки.Подразделение) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияБезСкладаСПодразделением,
					ПредставлениеНоменклатуры,, СтрокаОшибки.Подразделение,
					СтрокаОшибки.КодСтроки, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			Иначе 
				ТекстСообщения = СтрШаблон(ШаблонСообщенияБезСкладаБезПодразделения, ПредставлениеНоменклатуры,,,
					СтрокаОшибки.КодСтроки, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТКА

	//++ Устарело_Производство21
	#Область ЗаказыМатериаловСУчетомКорректировок
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияЗаказыМатериаловСУчетомКорректировокИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Корректировка заказа материала ""%1"" превышает количество по заказу на %2 %3';
								|en = 'Adjustment of material order ""%1"" exceeds order quantity by %2 %3'");
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
			ШаблонСообщения = НСтр("ru = 'По материалу ""%1"" введены корректировки, которые превышают количество по заказу на %2 %3';
									|en = 'For the ""%1"" material, adjustments exceeding the order quantity by %2 %3 were entered '");
		КонецЕсли;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиЗаказыМатериаловСУчетомКорректировок Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.НоменклатураПредставление, СтрокаОшибки.ХарактеристикаПредставление);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры,
				-СтрокаОшибки.КоличествоУпаковок, СтрокаОшибки.УпаковкаПредставление);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	//-- Устарело_Производство21
	
	#Область РаспоряженияНаПередачуИзПроизводства
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаПередачуИзПроизводстваИзменение") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРаспоряженияНаПередачуИзПроизводства Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЭтапПроизводства2_2") Тогда
				// Это проведение распоряжения
				Если СтрокаОшибки.КонтрольНаДату Тогда
					Если СтрокаОшибки.Операция = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'На позицию %1 уже оформлен выпуск и распоряжение должно быть оформлено не позже выпуска';
								|en = 'Release is already registered for item %1, the reference should be registered not later than the release'"),
							ПредставлениеНоменклатуры);
					Иначе
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'На позицию %1 уже оформлен возврат и распоряжение должно быть оформлено не позже возврата';
								|en = 'Return has already been registered for the %1 item. Reference should be registered not later then return'"),
							ПредставлениеНоменклатуры);
					КонецЕсли;
				Иначе
					Если СтрокаОшибки.Операция = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'На позицию %1 оформлен выпуск в количестве большем, чем указано в документе, на %2 %3';
								|en = 'Registered release for the %1 item exceeds the one specified in the document by %2 %3'"),
							ПредставлениеНоменклатуры, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					Иначе
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'На позицию %1 оформлен возврат в количестве большем, чем указано в документе, на %2 %3';
								|en = 'Registered return for the %1 item exceeds the one specified in the document by %2 %3'"),
							ПредставлениеНоменклатуры, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					КонецЕсли; 
				КонецЕсли;
			Иначе
				// Это проведение накладной
				Если СтрокаОшибки.КонтрольНаДату Тогда
					Если СтрокаОшибки.Операция = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства Тогда
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Выпуск позиции %1 должен быть оформлен не раньше даты завершения выполнения этапа производства';
								|en = 'The %1 position release must be generated not earlier than the end date of the production stage'"),
							ПредставлениеНоменклатуры);
					Иначе
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Возврат позиции %1 должен быть оформлен не раньше даты завершения выполнения этапа производства';
								|en = 'The %1 item return should be registered not earlier than the date of production stage end'"),
							ПредставлениеНоменклатуры);
					КонецЕсли;
				Иначе
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Количество позиций %1 превышает количество по распоряжению на %2 %3';
							|en = 'The %1 position quantity exceeds the quantity under the reference by %2 %3'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	//++ Устарело_Производство21
	#Область РаспоряженияНаСписаниеПоНормативам
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспоряженияНаСписаниеПоНормативамИзменение") Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВыпускПродукции") Тогда
			ШаблонСообщения = НСтр("ru = 'На изделие %1 уже списаны материалы (%2 %3)';
									|en = 'Materials (%2 %3) are written off to product %1'");
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеЗатратНаВыпуск") Тогда
			ШаблонСообщения = НСтр("ru = 'На изделие %1 еще не оформлен выпуск продукции (%2 %3)';
									|en = 'Product release (%2 %3) is not registered for product %1'");
		КонецЕсли;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРаспоряженияНаСписаниеПоНормативам Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры,
				-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	//-- Устарело_Производство21
	
	#Область ТрудозатратыКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТрудозатратыКОформлениюИзменение") Тогда
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВыработкаСотрудников") Тогда
			ШаблонСообщения = НСтр("ru = 'Количество по виду работ ""%1""
				| превышает или не соответствует данным распоряжения (на %2 %3)';
				|en = 'The quantity according to the activity kind ""%1""
				| exceeds or does not correspond to the reference data (by %2 %3)'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Выработка сотрудников по виду работ ""%1""
				| уже оформлена на %2 %3';
				|en = 'Timesheets charge by the activity kind ""%1"" 
				|has already been generated for %2 %3'");
		КонецЕсли;
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТрудозатратыКОформлению Цикл
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаОшибки.ВидРабот,
				-СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

// Получает настройки подсистемы "Производство"
// 
// Возвращаемое значение:
//   - Структура - настройки подсистемы "Производство"
//
Функция НастройкиПодсистемыПроизводство() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользуетсяПроизводство", ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство"));
	Результат.Вставить("ИспользуетсяПроизводствоНаСтороне", Ложь);
	//++ Устарело_Переработка24
	Результат.Вставить("ИспользуетсяПроизводствоНаСтороне",
		ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне"));
	//-- Устарело_Переработка24
	
	Результат.Вставить("ИспользуетсяПроизводствоНаСтороне2_5",
		ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5"));
	//++ Устарело_Переработка24
	Результат.Вставить("ИспользуетсяТолькоПередачаВПереработку2_5",
		ПолучитьФункциональнуюОпцию("ИспользуетсяТолькоПередачаВПереработку2_5"));
	//-- Устарело_Переработка24
	Результат.Вставить("ИспользоватьЗаказыПереработчикам2_5",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПереработчикам2_5"));
	
	Результат.Вставить("ИспользуетсяПроизводство21", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством"));
	Результат.Вставить("ИспользуетсяПроизводство22", ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2"));
	
	#Область УправлениеПроизводством
	
	Результат.Вставить("ДинамическаяСтруктураЗаказовНаПроизводство", Ложь);
	Результат.Вставить("ПланируетсяГрафикПроизводства", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоПроизводственнымРесурсам", Ложь);
	Результат.Вставить("ИспользуетсяПланированиеПоМатериальнымРесурсам", Ложь);
	Результат.Вставить("ФорматДатыГрафика", "ДЛФ=D");
	
	//++ НЕ УТКА
	НастройкиУправленияПроизводством = УправлениеПроизводством.НастройкиУправленияПроизводством();
	ЗаполнитьЗначенияСвойств(Результат, НастройкиУправленияПроизводством);
	//-- НЕ УТКА
	
	#КонецОбласти
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого требуется получить параметры
//
// Возвращаемое значение:
//   Структура   - содержит параметры производственного подразделения
//
Функция ПараметрыПроизводственногоПодразделения(Подразделение) Экспорт
	
	СписокПодразделений = Новый Массив;
	СписокПодразделений.Добавить(Подразделение);
	Параметры = ПараметрыПроизводственныхПодразделений(СписокПодразделений);
	Возврат Параметры[Подразделение];
	
КонецФункции

// Возвращает параметры производственного подразделения
//
// Параметры:
//  СписокПодразделений - Массив - список подразделений для которых требуется получить параметры
//
// Возвращаемое значение:
//  Соответствие - где:
//  *Ключ - СправочникСсылка.СтруктураПредприятия
//  *Значение - см. СтруктураРеквизитовПроизводственногоПодразделения.
//
Функция ПараметрыПроизводственныхПодразделений(СписокПодразделений) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураПредприятия.Наименование           КАК Наименование,
	|	СтруктураПредприятия.ПодразделениеДиспетчер КАК ПодразделениеДиспетчер,
	|
	|	СтруктураПредприятия.ПроизводственноеПодразделение КАК ПроизводственноеПодразделение,
	|	СтруктураПредприятия.ПроизводствоПоЗаказам  КАК ПроизводствоПоЗаказам,
	|	СтруктураПредприятия.ПроизводствоБезЗаказов КАК ПроизводствоБезЗаказов,
	|
	|	СтруктураПредприятия.ИспользуетсяСписаниеЗатратНаВыпуск КАК ИспользуетсяСписаниеЗатратНаВыпуск,
	|
	|	СтруктураПредприятия.ГрафикиРаботы.(
	|		ГрафикРаботы КАК График
	|	)                                     КАК Графики,
	|	ОсновнойКалендарьПредприятия.Значение КАК ОсновнойГрафик,
	|
//++ НЕ УТКА
	|	СтруктураПредприятия.ИнтервалПланирования           КАК ИнтервалПланирования,
	|	СтруктураПредприятия.НачалоИнтервалаПланирования    КАК НачалоИнтервалаПланирования,
	|	СтруктураПредприятия.ОкончаниеИнтервалаПланирования КАК ОкончаниеИнтервалаПланирования,
	|
//++ Устарело_Производство21
	|	СтруктураПредприятия.УправлениеМаршрутнымиЛистами    КАК УправлениеМаршрутнымиЛистами,
	|	СтруктураПредприятия.СпособПооперационногоУправления КАК СпособПооперационногоУправления,
//-- Устарело_Производство21
	|
	|	СтруктураПредприятия.ИспользоватьПооперационноеУправление   КАК ИспользоватьПооперационноеУправление,
	|	СтруктураПредприятия.ИспользоватьПооперационноеПланирование КАК ИспользоватьПооперационноеПланирование,
	|
	|	СтруктураПредприятия.ИспользоватьМатериалыВОперациях        КАК ИспользоватьМатериалыВОперациях,
	|	СтруктураПредприятия.ИспользоватьВыходныеИзделияВОперациях  КАК ИспользоватьВыходныеИзделияВОперациях,
	|
	|	СтруктураПредприятия.ИспользоватьСменныеЗадания             КАК ИспользоватьСменныеЗадания,
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.СпособНастройкиГрафикаРаботы = ЗНАЧЕНИЕ(Перечисление.СпособыНастройкиГрафикаРаботыПодразделений.Смены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                       КАК ИспользоватьСмены,
	|
	|	СтруктураПредприятия.ИспользоватьПроизводственныеУчастки    КАК ИспользоватьУчастки,
	|
//-- НЕ УТКА
	|	СтруктураПредприятия.ИспользоватьБригадныеНаряды            КАК ИспользоватьБригадныеНаряды,
	|	СтруктураПредприятия.ИспользоватьПерсональныеНаряды         КАК ИспользоватьПерсональныеНаряды,
	|
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В (&СписокПодразделений)
	|");
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);

	ЗначенияПараметров = Новый Соответствие;
	
	Для каждого Ссылка Из СписокПодразделений Цикл
		Результат = СтруктураРеквизитовПроизводственногоПодразделения();
		ЗначенияПараметров.Вставить(Ссылка, Результат);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(ИСТИНА);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(ЛОЖЬ);
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЗначенияПараметров[Выборка.Ссылка], Выборка);
		
		Если Выборка.Графики.Пустой() Тогда
			ЗначенияПараметров[Выборка.Ссылка].ГрафикиРаботы.Добавить(Выборка.ОсновнойГрафик);
		Иначе
			ЗначенияПараметров[Выборка.Ссылка].ГрафикиРаботы = Выборка.Графики.Выгрузить().ВыгрузитьКолонку("График");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

// Определяет используется ли производство версии 2.1
// 
// Возвращаемое значение:
//   Булево - Истина, если используется производство версии 2.1
//
Функция ИспользуетсяПроизводство21() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством");
	
КонецФункции

// Определяет используется ли производство версии 2.2
// 
// Возвращаемое значение:
//   Булево - Истина, если используется производство версии 2.2
//
Функция ИспользуетсяПроизводство22() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2");
	
КонецФункции

// Определяет, используются ли серии в производстве версии 2.2.
//
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  *ИспользоватьСерииНоменклатуры - Булево
//  *УчитыватьСебестоимостьПоСериям - Булево
//
Функция ИспользованиеСерийВПроизводстве22() Экспорт
	
	Результат = Новый Структура("ИспользоватьСерииНоменклатуры, УчитыватьСебестоимостьПоСериям", Ложь, Ложь);
	
//++ НЕ УТКА
	Результат.Вставить("ИспользоватьСерииНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыПроизводство22"));
	Результат.Вставить("УчитыватьСебестоимостьПоСериям", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямПроизводство22"));
//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Устанавливает использование параметризации в зависимости от использования производства
//
Процедура УстановитьИспользованиеПараметризацииРесурсныхСпецификаций() Экспорт
	
	УправлениеПредприятием = Ложь;
	//++ НЕ УТКА
	УправлениеПредприятием = Истина;
	//-- НЕ УТКА
	
	ЗначениеКонстанты = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") И УправлениеПредприятием Тогда
		
		ЗначениеКонстанты = Истина;
		
	КонецЕсли;
	
	Константы.ИспользоватьПараметризациюРесурсныхСпецификаций.Установить(ЗначениеКонстанты);
	
КонецПроцедуры

// Устанавливает опции для работы с производственными операциями в зависимости от использования производства
//
Процедура УстановитьОпцииДляРаботыСПроизводственнымиОперациями(Производство21 = Неопределено, Производство22 = Неопределено) Экспорт
	
	УправлениеПредприятием = Ложь;
	//++ НЕ УТКА
	УправлениеПредприятием = Истина;
	//-- НЕ УТКА
	
	Если Производство21 = Неопределено Тогда
		Производство21 = Константы.ИспользоватьУправлениеПроизводством.Получить();
	КонецЕсли;
	
	Если Производство22 = Неопределено Тогда
		Производство22 = Константы.ИспользоватьУправлениеПроизводством2_2.Получить();
	КонецЕсли;
	
	Константы.ИспользоватьМаршрутныеКарты.Установить(Производство21 И УправлениеПредприятием);
	Константы.ХранитьОперацииВРесурсныхСпецификациях.Установить(НЕ Производство21 И Производство22 И УправлениеПредприятием);
	//++ НЕ УТКА
	Константы.ИспользоватьТехнологическиеПроцессы.Установить(НЕ Производство21 И Производство22 И УправлениеПредприятием);
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ВводНаОсновании

// Добавляет команду создания документа
//
// Параметры:
//  КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено -
//
Функция ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	КомандаСоздатьНаОсновании = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
			
			СписокОпераций = Документы.ДвижениеПродукцииИМатериалов.СписокОпераций();
			Операция = СписокОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
			
			Если Операция <> Неопределено Тогда
				
				КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
				КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
				КомандаСоздатьНаОсновании.Представление = Операция.Представление;
				КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьПередачуМатериаловВКладовуюНаОсновании";
				КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
				КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
				КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	//++ Устарело_Производство21
	КомандаСоздатьНаОсновании = Документы.ПередачаМатериаловВПроизводство.ДобавитьКомандуСоздатьНаОснованииПередачаВПроизводство(КомандыСоздатьНаОсновании);
	//-- Устарело_Производство21
	
	Возврат КомандаСоздатьНаОсновании;
	
КонецФункции

// Добавляет команду создания документа
//
// Параметры:
//  КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено -
//
Функция ДобавитьКомандуСоздатьВыпускПродукцииБезЗаказаНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДвижениеПродукцииИМатериалов) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Передача выпущенной продукции';
														|en = 'Transfer released products'");
		КомандаСоздатьНаОсновании.Обработчик = "ПроизводствоКлиент.СоздатьВыпускПродукцииБезЗаказаНаОсновании";
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеПроизводством2_2";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОчередьЗаданий

// Добавляет задание или список заданий в очередь
//
// Параметры:
//  Очередь 	- Строка			 - имя очереди (имя регистра сведений очереди).
//  Задание 	- Структура, Массив, ТаблицаЗначений	 - структура со значениями измерений, реквизитов и ресурсов
//											или массив заданий, для регистрации нескольких заданий за раз.
// 
// Возвращаемое значение:
//  Массив - идентификаторы новых заданий.
//
Функция ДобавитьЗаданиеВОчередь(Очередь, Задание) Экспорт
	
	НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();// РегистрСведенийНаборЗаписей
	
	Идентификаторы = Новый Массив;
	ДеньРегистрации = Цел((ТекущаяУниверсальнаяДата() - '20000101000000') / 86400);
	
	Если ТипЗнч(Задание) = Тип("Массив") Или ТипЗнч(Задание) = Тип("ТаблицаЗначений") Тогда
		СписокЗаданий = Задание;
	Иначе
		СписокЗаданий = ОбщегоНазначенияУТКлиентСервер.Массив(Задание);
	КонецЕсли;
	
	Для каждого ТекущиеДанные Из СписокЗаданий Цикл
		
		НовоеЗадание = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеЗадание, ТекущиеДанные);
		
		НовоеЗадание.ДеньРегистрации = ДеньРегистрации;
		НовоеЗадание.Идентификатор = Новый УникальныйИдентификатор;
		
		Идентификаторы.Добавить(НовоеЗадание.Идентификатор);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей.Записать(Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Идентификаторы;
	
КонецФункции

// Запускает фоновое задание обработчик очереди
//
// Параметры:
//  Очередь			 - Строка							 - имя очереди (имя регистра сведений очереди).
//  Отбор			 - Структура						 - задания по этому отбору будут обрабатываться первыми.
//  Идентификатор	 - УникальныйИдентификатор, Массив	 - идентификатор или список идентификаторов заданий
//	  Если фоновое задание запускается в той же транзакции, что и добавление новых заданий в очередь возможна ситуация,
//	     когда фоновое задание запущено, транзакция не завершена и задания для обработки не видны сеансу фонового задания.
//	  Для решения этой проблемой перед обработкой первой порции заданий из очереди открывается транзакция
//       и устанавливается блокировка на задания в очереди по идентификатору.
//  ОжидатьЗавершенияВыполнения - Булево				 - определяет поведение, в случае если в момент запуска задания
//    уже выполняется обработка очереди, запущенная ранее.
//    Если передано значение Истина, то будет выполнено ожидание завершения обработки очереди, после чего запущена
//    еще одна итерация.
//    Если передано значение Ложь, то ожидание и повторный запуск не выполняются.
//
Процедура ЗапуститьЗаданиеОбработкиОчереди(Очередь, Отбор = Неопределено, Идентификатор = Неопределено, ОжидатьЗавершенияВыполнения = Ложь) Экспорт
	
	Если ОчередьЗаданийПуста(Очередь, Отбор) Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = Очередь + ".ОбработкаОчереди";
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючПоиска = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	Если Задания.ВГраница() <> -1 Тогда
		Если ОжидатьЗавершенияВыполнения Тогда
			ФоновыеЗадания.ОжидатьЗавершенияВыполнения(Задания);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяЭкспортнойПроцедуры = "ПроизводствоСервер.ОбработатьОчередьЗаданий";
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Очередь", Очередь);
	ПараметрыЗаполнения.Вставить("Отбор", Отбор);
	ПараметрыЗаполнения.Вставить("Идентификатор", Идентификатор);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыЗаполнения);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Обработка очереди <%1>';
										|en = 'Processing queue <%1>'"), Метаданные.РегистрыСведений[Очередь].Синоним);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Проверяет активность фонового задания по обработке очереди
//
// Параметры:
//  Очередь - Строка - имя очереди (имя регистра сведений очереди).
// 
// Возвращаемое значение:
//  Булево - Истина, если обработка очереди заданий выполняется
//
Функция ВыполняетсяОбработкаОчереди(Очередь) Экспорт
	
	Ключ = Очередь + ".ОбработкаОчереди";
	
	КлючПоиска = Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат (Задания.Количество() > 0 И Задания[0].Состояние = СостояниеФоновогоЗадания.Активно);
	
КонецФункции

#КонецОбласти

#Область РасчетДолейСтоимости

// Рассчитывает долю стоимости выходных изделий по табличной части документа
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//
Процедура РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат) Экспорт
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	
	Если Не ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ВызватьИсключение НСтр("ru = 'Некорректно переданы параметры распределения затрат.';
								|en = 'Cost allocation parameters are transferred incorrectly.'");
	КонецЕсли;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки        КАК НомерСтроки,
	|
	|	Таблица.Номенклатура       КАК Номенклатура,
	|	Таблица.Характеристика     КАК Характеристика,
	|
	|	&ПолеСерия,
	|	Таблица.Упаковка           КАК Упаковка,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Количество         КАК Количество,
	|
	|	Таблица.ДоляСтоимости      КАК ДоляСтоимости
	|
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть", "ТабличнаяЧастьПредварительная") + 
		"
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки        КАК НомерСтроки,
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Упаковка           КАК Упаковка,
		|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Таблица.Количество         КАК Количество,
		|	Таблица.ДоляСтоимости      КАК ДоляСтоимости,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	ТабличнаяЧастьПредварительная КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = Таблица.Номенклатура.ВидНоменклатуры
		|;
		|";
		
	КонецЕсли;
	
	ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, 
																	ПараметрыРаспределенияЗатрат, 
																	ИспользуетсяЦенообразование25);
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|
	|	&ДоляСтоимости КАК ДоляСтоимости,
	|	&ДоляСтоимостиНаЕдиницу КАК ДоляСтоимостиНаЕдиницу
	|
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|	,СоединениеДоляСтоимости
	|;
	|";

	Если ИспользуетсяЦенообразование25 Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия,", "Таблица.Серия КАК Серия,");
		
		ПараметрыПодстановки = ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ТабличнаяЧасть",
			"&СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.ХарактеристикаЦО,
			|		Т.СерияЦО,
			|		Т.УпаковкаЦО
			|	ИЗ
			|		ТабличнаяЧасть КАК Т)",
			ИспользуетсяЦенообразование25);
			
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия,", "");
		
		ПараметрыПодстановки = ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ТабличнаяЧасть",
			"&СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, Характеристика) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.Характеристика
			|	ИЗ
			|		ТабличнаяЧасть КАК Т)",
			ИспользуетсяЦенообразование25);
			
	КонецЕсли;

	ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки, ИспользуетсяЦенообразование25);

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	КолонкиВыгрузки = "НомерСтроки, Номенклатура, Характеристика, Количество, ДоляСтоимости";
	КолонкиПоЗначению = Новый Структура();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "Упаковка") Тогда
		КолонкиВыгрузки = КолонкиВыгрузки + ", Упаковка";
	Иначе
		КолонкиПоЗначению.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "КоличествоУпаковок") Тогда
		КолонкиВыгрузки = КолонкиВыгрузки + ", КоличествоУпаковок";
	Иначе
		КолонкиПоЗначению.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧасть[0], "Серия") Тогда
			КолонкиВыгрузки = КолонкиВыгрузки + ", Серия";
		Иначе
			КолонкиПоЗначению.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	ТаблицаЗначений = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(ТабличнаяЧасть,, КолонкиВыгрузки, КолонкиПоЗначению);
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаЗначений);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата, 
												ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта, 
												ПроизводствоСерверПовтИсп.ВалютаПлановойСебестоимостиПродукции()));
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(ТабличнаяЧасть[Выборка.НомерСтроки - 1], Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает долю стоимости строки табличной части
//
// Параметры:
//  ДанныеСтроки				 - Структура - строка табличной части
//  ПараметрыРаспределенияЗатрат - см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
// 
// Возвращаемое значение:
//  Структура - см. ПроизводствоКлиентСервер.СтруктураПолейДоляСтоимости :
// * ДоляСтоимости - Число -
// * ДоляСтоимостиНаЕдиницу - Число -
Функция РассчитатьДолюСтоимостиНоменклатуры(ДанныеСтроки, ПараметрыРаспределенияЗатрат) Экспорт
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	0                   КАК НомерСтроки,
	|
	|	&Номенклатура       КАК Номенклатура,
	|	&Характеристика     КАК Характеристика,
	|
	|	&ПолеСерия,
	|	&Упаковка           КАК Упаковка,
	|	&КоличествоУпаковок КАК КоличествоУпаковок,
	|	&Количество         КАК Количество,
	|
	|	0                   КАК ДоляСтоимости
	|
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|;
	|";

	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть", "ТабличнаяЧастьПредварительная") + 
		"
		|ВЫБРАТЬ
		|	Таблица.НомерСтроки        КАК НомерСтроки,
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Упаковка           КАК Упаковка,
		|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Таблица.Количество         КАК Количество,
		|	Таблица.ДоляСтоимости      КАК ДоляСтоимости,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	ТабличнаяЧастьПредварительная КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = Таблица.Номенклатура.ВидНоменклатуры
		|;
		|";
		
	КонецЕсли;

	ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, ПараметрыРаспределенияЗатрат, ИспользуетсяЦенообразование25);
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	&ДоляСтоимости КАК ДоляСтоимости,
	|	&ДоляСтоимостиНаЕдиницу КАК ДоляСтоимостиНаЕдиницу
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|	,СоединениеДоляСтоимости
	|;
	|";
	
	Если ИспользуетсяЦенообразование25 Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия,", "&Серия КАК Серия,");
	
		ПараметрыПодстановки = ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ТабличнаяЧасть",
			"&СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.ХарактеристикаЦО,
			|		Т.СерияЦО,
			|		Т.УпаковкаЦО
			|	ИЗ
			|		ТабличнаяЧасть КАК Т)",
			ИспользуетсяЦенообразование25);
			
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСерия,", "");
		
		ПараметрыПодстановки = ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
			"ТабличнаяЧасть",
			"&СпособРаспределенияЗатратНаВыходныеИзделия",
			"(Номенклатура, Характеристика) В (
			|	Выбрать
			|		Т.Номенклатура,
			|		Т.Характеристика
			|	ИЗ
			|		ТабличнаяЧасть КАК Т)",
			ИспользуетсяЦенообразование25);
			
	КонецЕсли;
	
	ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки, ИспользуетсяЦенообразование25);

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Номенклатура",       ДанныеСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",     ДанныеСтроки.Характеристика);
	
	Запрос.УстановитьПараметр("Упаковка",           ДанныеСтроки.Упаковка);
	Запрос.УстановитьПараметр("КоличествоУпаковок", ДанныеСтроки.КоличествоУпаковок);
	Запрос.УстановитьПараметр("Количество",         ДанныеСтроки.Количество);
	Если ИспользуетсяЦенообразование25 Тогда
		Если ДанныеСтроки.Свойство("Серия") И ТипЗнч(ДанныеСтроки.Серия) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			Запрос.УстановитьПараметр("Серия", ДанныеСтроки.Серия);
		Иначе
			Запрос.УстановитьПараметр("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	Иначе
		Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия]);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата, 
												ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Валюта", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта, 
												ПроизводствоСерверПовтИсп.ВалютаПлановойСебестоимостиПродукции()));
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ПроизводствоКлиентСервер.СтруктураПолейДоляСтоимости();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает процент распределения затрат на выходные изделия по табличной части
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//  Группировки			         - Массив, Неопределено	 -
//
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат, Группировки = Неопределено) Экспорт
	
	Если Не ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент Тогда
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтогиПоГруппировкам = ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки);
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Отменено = (ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено И Строка.Отменено);
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
			Группировка = Строка[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		Иначе
			Группировка = "";
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> ""
			И Группировки <> Неопределено
			И Группировки.Найти(Группировка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Итоги = ИтогиПоГруппировкам[Группировка];
		
		Если Итоги = Неопределено Тогда
			Строка.ДоляСтоимостиПроцент = 0;
			Строка.ДоляСтоимостиОбязательна = Ложь;
			Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Ложь;
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = ?(Итоги.ДоляСтоимостиОбязательна, "ДоляСтоимости", "Количество");
		
		Если НЕ Отменено
			И Итоги[ИмяПоля] <> 0
			И (НЕ Итоги.ИспользуетсяПараметризация
				ИЛИ Итоги.ИспользуетсяПараметризация
					И НЕ Итоги.ДоляСтоимостиРассчитывается) Тогда
			Строка.ДоляСтоимостиПроцент = (Строка[ИмяПоля] / Итоги[ИмяПоля]) * 100;
		Иначе
			Строка.ДоляСтоимостиПроцент =
				?(Не Итоги.ДоляСтоимостиОбязательна И Итоги.КоличествоСтрокВГруппировке = 1 И НЕ Отменено, 100, 0);
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна Тогда
			Строка.ДоляСтоимостиОбязательна = Итоги.ДоляСтоимостиОбязательна И НЕ Отменено;
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения Тогда
			ЗаполнитьПризнакЕстьОшибкиЗаполненияДолиСтоимости(Строка, Итоги, Отменено, ПараметрыРаспределенияЗатрат);
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации Тогда
			Строка.ДоляСтоимостиНедоступна = Итоги.ИспользуетсяПараметризация И Итоги.ДоляСтоимостиРассчитывается;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция подготавливает параметры для открытия формы ввода долей стоимости и возвращает их.
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы справочника, документа
//  ПараметрыРаспределенияЗатрат - Структура			 - структура параметров расчета, см. ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия
//	ТекущиеДанныеИдентификатор	 - Число				 - идентификатор текущей строки в форме документа;
//
// Возвращаемое значение:
//	Структура - параметры формы ввода долей стоимости
//
Функция ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор) Экспорт
	
	ПараметрыФормы = Новый Структура;
	
	ТабличнаяЧасть = Объект[ПараметрыРаспределенияЗатрат.ИмяТЧ];
	ДанныеСтроки = ТабличнаяЧасть.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	
	ДанныеПоНоменклатуре = Новый Структура("
		|Номенклатура,
		|Характеристика,
		|
		|Упаковка,
		|КоличествоУпаковок,
		|Количество,
		|
		|ДоляСтоимости,
		|ДоляСтоимостиНаЕдиницу
		|");
		
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		ДанныеПоНоменклатуре.Вставить("Серия");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеСтроки);
	ПараметрыФормы.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	
	Группировки = Новый Массив;
	Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
		Группировка = ДанныеСтроки[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		ПараметрыФормы.Вставить("ГруппировкаЗатрат", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ПолеПредставленияГруппировкиЗатрат]);
	Иначе
		Группировка = "";
		ПараметрыФормы.Вставить("ГруппировкаЗатрат", "");
	КонецЕсли;
	Группировки.Добавить(Группировка);
	
	ИтогиПоГруппировкам = ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки);
	Итоги = ИтогиПоГруппировкам[Группировка];
	
	Если ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент Тогда
		ПараметрыФормы.Вставить("ДоляСтоимостиПроцент", ДанныеСтроки.ДоляСтоимостиПроцент);
		ПараметрыФормы.Вставить("ДоляСтоимостиИтого", Итоги.ДоляСтоимости);
	Иначе
		ПараметрыФормы.Вставить("ДоляСтоимостиПроцент", ?(Итоги.ДоляСтоимости <> 0, (ДанныеСтроки.ДоляСтоимости/Итоги.ДоляСтоимости) * 100, 0));
		ПараметрыФормы.Вставить("ДоляСтоимостиИтого", Итоги.ДоляСтоимости);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИспользуетсяПараметризация", Итоги.ИспользуетсяПараметризация);
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ПараметрыФормы.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	Иначе
		ПараметрыФормы.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ДанныеСтроки[ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия]);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ТолькоПросмотр", ПараметрыРаспределенияЗатрат.ТолькоПросмотр);

	ПараметрыФормы.Вставить("ПараметрыЗаполненияДолейСтоимости", ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Устанавливает условное оформление для поля "Доля стоимости"
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПутьКЭлементам   - Строка - пути к элементам формы.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимости(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "", ПутиКДанным = Неопределено) Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// только просмотр
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиОбязательна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// отображение (для отмененных строк)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ДоляСтоимости"]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Устанавливает расширенное условное оформление для полей группы "Доля стоимости %"
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПутьКЭлементам   - Строка - пути к элементам формы.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "", ПутиКДанным = Неопределено) Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	НазванияЭлементов = НазванияЭлементовДолиСтоимости(ПутьКЭлементамФормы);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	// доля стоимости (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ДоляСтоимости]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "СпособРаспределенияЗатратНаВыходныеИзделия");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// доля стоимости (отметка незаполненного)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ДоляСтоимости]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиОбязательна");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// доля стоимости, % (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ДоляСтоимостиПроцент]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ДоляСтоимостиПроцент]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// доля стоимости, индикатор (видимость)
	Элемент = УсловноеОформление.Элементы.Добавить();

	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ЕстьОшибкиЗаполненияДолиСтоимости]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[НазванияЭлементов.ЕстьОшибкиЗаполненияДолиСтоимости]["Имя"]);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоляСтоимостиПроцент");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление поля "Доля стоимости" для отмененных строк
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ИмяЭлементаФормы - Строка - имя элемента формы доли стоимости.
//
Процедура УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(Форма, ИмяОбъекта, ИмяТЧ, ИмяЭлементаФормы) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	// доля стоимости (отображение для отмененных строк)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаФормы);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Процедура подготавливает параметры для открытия формы ввода долей стоимости и возвращает их.
//
// Параметры:
//  Объект	 - ДокументОбъект, СправочникОбъект	 - объект, строку которого необходимо проверить
//  Строка	 - Структура	 - строка, в которой выполняется проверка доли стоимости
//
// Возвращаемое значение:
//	Булево - признак необходимости заполнения доли стоимости в строке
//
Функция ТребуетсяЗаполнитьДолюСтоимости(Объект, Строка) Экспорт
	
	Если Объект.СпособРаспределенияЗатратНаВыходныеИзделия =
			Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		
		Итоги = Объект.Продукция.Выгрузить(
			Новый Структура("Отменено", Ложь),
			"Номенклатура, Характеристика, ДоляСтоимости");
		
		Итоги.Свернуть("Номенклатура, Характеристика", "ДоляСтоимости");
		
		ОбщаяДоля = 0;
		Для Каждого ТекДоля Из Итоги Цикл
			ОбщаяДоля = ОбщаяДоля + ТекДоля.ДоляСтоимости
		КонецЦикла;
		
		Если Строка.ДоляСтоимости = 0
			И (Итоги.Количество() > 1
			ИЛИ Не ОбщаяДоля = 0) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Строка.ДоляСтоимости = 0;
	КонецЕсли;
	
КонецФункции

// Добавляет запрос для получения данных, необходимых для заполнения долей стоимости.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстЗапросаЗаполнитьДолюСтоимостиПакетно(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	ПараметрыРаспределенияЗатрат = Неопределено;
	
	Если Не ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ПроверитьЗаполнитьДолюСтоимости",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыРаспределенияЗатрат) Тогда
	
		Возврат;
	КонецЕсли;
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	
	// Строки к расчету
	ТекстЗапроса = "";
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	Таблица.НомерСтроки        КАК НомерСтроки,
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Упаковка           КАК Упаковка,
		|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Таблица.Количество         КАК Количество,
		|	&СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
		|	0                          КАК ДоляСтоимости,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО,
		|	ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Серия.СерияНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО
		|ПОМЕСТИТЬ ВТСтрокиКРасчетуДолейСтоимости
		|ИЗ
		|	ВтИсточникДанных КАК Таблица
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|	ПО ВидыНоменклатуры.Ссылка = Таблица.Номенклатура.ВидНоменклатуры";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	Таблица.НомерСтроки        КАК НомерСтроки,
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Упаковка           КАК Упаковка,
		|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
		|	Таблица.Количество         КАК Количество,
		|	&СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
		|	0                          КАК ДоляСтоимости
		|ПОМЕСТИТЬ ВТСтрокиКРасчетуДолейСтоимости
		|ИЗ
		|	ВтИсточникДанных КАК Таблица";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&СпособРаспределенияЗатратНаВыходныеИзделия",
			"Таблица." + ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТСтрокиКРасчетуДолейСтоимости");
	ИмяТаблицы = "ВТСтрокиКРасчетуДолейСтоимости";
	
	// Авторасчет характеристик
	Если ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики
		И ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости Тогда
		
		Если ИспользуетсяЦенообразование25 Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
			|	МАКСИМУМ(ЦеныНоменклатуры.ХарактеристикаЦО) КАК ХарактеристикаЦО
			|ПОМЕСТИТЬ ВтАвтоподборХарактеристикиДолиСтоимости
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
			|			,
			|			ВидЦены = &ВидЦены
			|				И Номенклатура В
			|					(ВЫБРАТЬ
			|						Отбор.Номенклатура
			|					ИЗ
			|						ВТСтрокиКРасчетуДолейСтоимости КАК Отбор)) КАК ЦеныНоменклатуры
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатуры.Номенклатура";
			
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВтАвтоподборХарактеристикиДолиСтоимости");
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТабличнаяЧасть.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
			|
			|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
			|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
			|			) ТОГДА
			|			ЕСТЬNULL(АвтоподборХарактеристики.ХарактеристикаЦО, ТабличнаяЧасть.ХарактеристикаЦО)
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
			|	КОНЕЦ                             КАК ХарактеристикаЦО,
			|	ТабличнаяЧасть.СерияЦО           КАК СерияЦО,
			|	ТабличнаяЧасть.УпаковкаЦО         КАК УпаковкаЦО,
			|
			|	ТабличнаяЧасть.Упаковка           КАК Упаковка,
			|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТабличнаяЧасть.Количество         КАК Количество,
			|
			|	ТабличнаяЧасть.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
			|
			|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
			|
			|ПОМЕСТИТЬ ВТСтрокиКРасчетуДолейСтоимостиСАвтоХарактеристиками
			|ИЗ
			|	ВТСтрокиКРасчетуДолейСтоимости КАК ТабличнаяЧасть
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАвтоподборХарактеристикиДолиСтоимости КАК АвтоподборХарактеристики
			|		ПО ТабличнаяЧасть.Номенклатура = АвтоподборХарактеристики.Номенклатура
			|			И (ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
			
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТСтрокиКРасчетуДолейСтоимостиСАвтоХарактеристиками");
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
			|	МАКСИМУМ(ЦеныНоменклатуры.Характеристика) КАК Характеристика
			|ПОМЕСТИТЬ ВтАвтоподборХарактеристикиДолиСтоимости
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
			|			,
			|			ВидЦены = &ВидЦены
			|				И Номенклатура В
			|					(ВЫБРАТЬ
			|						Отбор.Номенклатура
			|					ИЗ
			|						ВТСтрокиКРасчетуДолейСтоимости КАК Отбор)) КАК ЦеныНоменклатуры
			|
			|СГРУППИРОВАТЬ ПО
			|	ЦеныНоменклатуры.Номенклатура";
			
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВтАвтоподборХарактеристикиДолиСтоимости");
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТабличнаяЧасть.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
			|
			|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
			|			) ТОГДА
			|			ЕСТЬNULL(АвтоподборХарактеристики.Характеристика, ТабличнаяЧасть.Характеристика)
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ                             КАК Характеристика,
			|
			|	ТабличнаяЧасть.Упаковка           КАК Упаковка,
			|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ТабличнаяЧасть.Количество         КАК Количество,
			|
			|	ТабличнаяЧасть.СпособРаспределенияЗатратНаВыходныеИзделия КАК СпособРаспределенияЗатратНаВыходныеИзделия,
			|
			|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
			|
			|ПОМЕСТИТЬ ВТСтрокиКРасчетуДолейСтоимостиСАвтоХарактеристиками
			|ИЗ
			|	ВТСтрокиКРасчетуДолейСтоимости КАК ТабличнаяЧасть
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАвтоподборХарактеристикиДолиСтоимости КАК АвтоподборХарактеристики
			|		ПО ТабличнаяЧасть.Номенклатура = АвтоподборХарактеристики.Номенклатура
			|			И (ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
			
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВТСтрокиКРасчетуДолейСтоимостиСАвтоХарактеристиками");
			
		КонецЕсли;
		
		ИмяТаблицы = "ВТСтрокиКРасчетуДолейСтоимостиСАвтоХарактеристиками";
		
	КонецЕсли;
	
	// Расчет долей стоимости
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапросаОтборПоНоменклатуре =
		"(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В (
		|	Выбрать
		|		Т.Номенклатура,
		|		Т.ХарактеристикаЦО,
		|		Т.СерияЦО,
		|		Т.УпаковкаЦО
		|	ИЗ
		|		&ИмяТаблицы КАК Т)";
	Иначе
		ТекстЗапросаОтборПоНоменклатуре =
		"(Номенклатура, Характеристика) В (
		|	Выбрать
		|		Т.Номенклатура,
		|		Т.Характеристика
		|	ИЗ
		|		&ИмяТаблицы КАК Т)";
	КонецЕсли;
	ТекстЗапросаОтборПоНоменклатуре = СтрЗаменить(ТекстЗапросаОтборПоНоменклатуре, "&ИмяТаблицы", ИмяТаблицы);
	
	ПараметрыПодстановки = ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(
		"ТабличнаяЧасть",
		"ТабличнаяЧасть.СпособРаспределенияЗатратНаВыходныеИзделия",
		ТекстЗапросаОтборПоНоменклатуре,
		ИспользуетсяЦенообразование25);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	&ДоляСтоимости КАК ДоляСтоимости,
	|	&ДоляСтоимостиНаЕдиницу КАК ДоляСтоимостиНаЕдиницу
	|ИЗ
	|	&ИмяТаблицы КАК ТабличнаяЧасть
	|	,СоединениеДоляСтоимости";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	
	ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, ПараметрыПодстановки, ИспользуетсяЦенообразование25);
	
	ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ДолиСтоимости");
	
	// Параметры запросов
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ВидЦены", ПроизводствоСерверПовтИсп.ВидЦеныПлановойСтоимости());
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Дата, 
												ТекущаяДатаСеанса()));
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ?(ЗначениеЗаполнено(
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта), 
												ПараметрыРаспределенияЗатрат.ПараметрыЗаполненияДолейСтоимости.Валюта, 
												ПроизводствоСерверПовтИсп.ВалютаПлановойСебестоимостиПродукции()));
	ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	
	Если ПустаяСтрока(ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("СпособРаспределенияЗатратНаВыходныеИзделия", ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГрафикиРаботы

// Создает временную таблицу с графиками работы подразделений.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки					 - Массив, СправочникСсылка.СтруктураПредприятия - ссылки на подразделения.
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ИмяВТ					 - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыПодразделений(Ссылки, МенеджерВременныхТаблиц, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение) КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО СтруктураПредприятия.Ссылка = Графики.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)		
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В(&Ссылки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки",
		?(ТипЗнч(Ссылки) = Тип("Массив"), Ссылки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки)));
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы подразделений.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.СтруктураПредприятия - ссылки на подразделения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.СтруктураПредприятия - подразделение.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыПодразделений(Ссылки) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыПодразделений(Ссылки, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текст запроса для отсчета заданного количества дней по календарным графикам.
//
// Параметры:
//  ИскатьВперед - Булево - если истина, то поиск вперед, иначе поиск назад.
//
// Возвращаемое значение:
//	Строка - текст запроса дат по календарю работы предприятия.
//
Функция ТекстЗапросаДатПоКалендарю(ИскатьВперед = Истина) Экспорт
	
	Если ИскатьВперед Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.Календарь   КАК Календарь,
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			+ Т.ЧислоДней
			|			+ ВЫБОР
			|				КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|					0
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Т.ДатаОтсчета, ГОД), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВСледующемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВСледующемГоду.Календарь
			|		 И ПоставкаВСледующемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВСледующемГоду.Год = ГОД(Т.ДатаОтсчета) + 1
			|		 И ПоставкаВСледующемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= Т.ЧислоДней
			|			- (ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|			+ ВЫБОР
			|				КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|					0
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВСледующемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	Календарь, ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	Иначе
			
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Т.ЧислоДней   КАК ЧислоДней,
			|	Т.ДатаОтсчета КАК ДатаОтсчета,
			|	ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) КАК Дата
			|ПОМЕСТИТЬ ВтДатыГрафика
			|ИЗ
			|	ВтПараметрыПоиска КАК Т //шаблон
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ТекущаяДата
			|		ПО Т.Календарь = ТекущаяДата.Календарь
			|		 И ТекущаяДата.Год         = ГОД(Т.ДатаОтсчета)
			|		 И ТекущаяДата.ДатаГрафика = Т.ДатаОтсчета
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВТекущемГоду
			|		ПО Т.Календарь = ПоставкаВТекущемГоду.Календарь
			|		 И ПоставкаВТекущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВТекущемГоду.Год = ГОД(Т.ДатаОтсчета)
			|		 И ПоставкаВТекущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода
			|			- Т.ЧислоДней
			|			+ ВЫБОР
			|				КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|					0
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследняяДатаГода
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоследняяДатаГода.Календарь
			|		 И ПоследняяДатаГода.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоследняяДатаГода.ДатаГрафика = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Т.ДатаОтсчета, ГОД), СЕКУНДА, -1), ДЕНЬ)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоставкаВПредыдущемГоду
			|		ПО ПоставкаВТекущемГоду.ДатаГрафика ЕСТЬ NULL
			|		 И Т.Календарь = ПоставкаВПредыдущемГоду.Календарь
			|		 И ПоставкаВПредыдущемГоду.ДеньВключенВГрафик
			|		 И ПоставкаВПредыдущемГоду.Год = ГОД(Т.ДатаОтсчета) - 1
			|		 И ПоставкаВПредыдущемГоду.КоличествоДнейВГрафикеСНачалаГода
			|			= ПоследняяДатаГода.КоличествоДнейВГрафикеСНачалаГода
			|				- (Т.ЧислоДней - ТекущаяДата.КоличествоДнейВГрафикеСНачалаГода)
			|				+ ВЫБОР
			|					КОГДА ТекущаяДата.ДеньВключенВГрафик ТОГДА
			|						0
			|					ИНАЧЕ
			|						1
			|				КОНЕЦ
			|
			|ГДЕ
			|	НЕ ЕСТЬNULL(ПоставкаВТекущемГоду.ДатаГрафика, ПоставкаВПредыдущемГоду.ДатаГрафика) ЕСТЬ NULL
			|ИНДЕКСИРОВАТЬ ПО
			|	ЧислоДней, ДатаОтсчета
			|;
			|
			|////////////////////////////////////////////////////////////
			|";
			
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА

// Создает временную таблицу с графиками работы видов РЦ.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки					 - Массив, СправочникСсылка.ВидыРабочихЦентров - ссылки на виды РЦ.
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//  ИмяВТ					 - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыВидовРЦ(Ссылки, МенеджерВременныхТаблиц, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыРабочихЦентров.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыРабочихЦентров.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА ВидыРабочихЦентров.Календарь
		|		ИНАЧЕ ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
		|	КОНЕЦ КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО ВидыРабочихЦентров.Подразделение = Графики.Ссылка
		|			И ВидыРабочихЦентров.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В(&Ссылки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки",
		?(ТипЗнч(Ссылки) = Тип("Массив"), Ссылки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки)));
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы видов РЦ.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.ВидыРабочихЦентров - ссылки на виды РЦ.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.ВидыРабочихЦентров - вид РЦ.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыВидовРЦ(Ссылки) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыВидовРЦ(Ссылки, МенеджерВременныхТаблиц, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает временную таблицу с графиками работы рабочих центров.
// Колонки таблицы: Ссылка, ГрафикРаботы.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - ссылки на рабочие центры
//		либо виды РЦ (см. параметр ОтборПоРЦ). В последнем случае будут получены все РЦ, принадлежащие данным видам РЦ.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в котором будет создана временная таблица.
//	ОтборПоРЦ - Булево - Истина: первый параметр содержит ссылки на рабочие центры;
//		Ложь: первый параметр содержит ссылки на виды рабочих центров.
//  ИмяВТ  - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТГрафикиРаботыРЦ(Ссылки, МенеджерВременныхТаблиц, ОтборПоРЦ = Истина, ИмяВТ = "ВТГрафикиРаботы") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РабочиеЦентры.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА РабочиеЦентры.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА РабочиеЦентры.Календарь
		|		КОГДА ВидыРабочихЦентров.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|			ТОГДА ВидыРабочихЦентров.Календарь
		|		ИНАЧЕ ЕСТЬNULL(Графики.ГрафикРаботы, ОсновнойКалендарьПредприятия.Значение)
		|	КОНЕЦ КАК ГрафикРаботы
		|ПОМЕСТИТЬ ИмяВТ
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|		ПО РабочиеЦентры.ВидРабочегоЦентра = ВидыРабочихЦентров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия.ГрафикиРаботы КАК Графики
		|		ПО (ВидыРабочихЦентров.Подразделение = Графики.Ссылка)
		|			И (РабочиеЦентры.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|			И (ВидыРабочихЦентров.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
		|		ПО (ИСТИНА)
		|ГДЕ
		|	(&ОтборПоРЦ
		|				И РабочиеЦентры.Ссылка В (&Ссылки)
		|			ИЛИ НЕ &ОтборПоРЦ
		|				И РабочиеЦентры.ВидРабочегоЦентра В (&Ссылки))";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяВТ", ИмяВТ);
	
	МассивСсылок = ?(ТипЗнч(Ссылки) = Тип("Массив"),
		Ссылки,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылки));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	Запрос.УстановитьПараметр("ОтборПоРЦ", ОтборПоРЦ);
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает графики работы рабочих центров.
//
// Параметры:
//  Ссылки - Массив, СправочникСсылка.РабочиеЦентры, СправочникСсылка.ВидыРабочихЦентров - ссылки на рабочие центры
//		либо виды РЦ (см. параметр ОтборПоРЦ). В последнем случае будут получены все РЦ, принадлежащие данным видам РЦ.
//	ОтборПоРЦ - Булево - Истина: первый параметр содержит ссылки на рабочие центры;
//		Ложь: первый параметр содержит ссылки на виды рабочих центров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//		* Ссылка - СправочникСсылка.РабочиеЦентры - рабочий центр.
//		* ГрафикРаботы - СправочникСсылка.Календари - график работы.
//
Функция ГрафикиРаботыРЦ(Ссылки, ОтборПоРЦ = Истина) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТГрафикиРаботыРЦ(Ссылки, МенеджерВременныхТаблиц, ОтборПоРЦ, "ВТГрафикиРаботы");
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВТГрафикиРаботы.Ссылка       КАК Ссылка,
		|	ВТГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикиРаботы КАК ВТГрафикиРаботы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область ТипыПроизводственногоПроцесса

// Ограничить список типов производственного процесса
//
// Параметры:
//  Элемент			- ПолеФормы	- элемент формы, в котором необходимо установить ограничение.
//  ИсключаемыеТипы	- Массив	- массив типов производственного процесса, которые не должны отображаться.
// 
Процедура ЗаполнитьСписокТиповПроизводственногоПроцесса(Элемент, ИсключаемыеТипы = Неопределено) Экспорт
	
	СписокВыбора = Элемент.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого ТипПроцесса Из Перечисления.ТипыПроизводственныхПроцессов Цикл
		
		Если Не ИсключаемыеТипы = Неопределено
			И Не ИсключаемыеТипы.Найти(ТипПроцесса) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбора.Добавить(ТипПроцесса);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Округление

// Возвращает условие отбора строк округления
//
//	Параметры:
//		ИмяТЧ		 - Строка - имя табличной части
//		ИмяПоляСклад - Строка - имя реквизита склад, по умолчанию "Склад"
//
//	Возвращаемое значение:
//		Строка - условие отбора строк
//			
Функция УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад = "Склад") Экспорт
	
	Результат = СтрШаблон(
		"НЕ ЕСТЬNULL(ВЫРАЗИТЬ(%1.%2 КАК Справочник.Склады).ЦеховаяКладовая, ЛОЖЬ)", ИмяТЧ, ИмяПоляСклад);
		
	Возврат Результат;	
	
КонецФункции	

#КонецОбласти

#Область Заполнение

// Заполняет служебные реквизиты в строке на основании выбранного склада
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  Параметры			 - Структура - вспомогательные параметры для заполнения.
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ЗаполнитьПризнакЦеховаяКладовая(ТекущаяСтрока, Параметры, КэшированныеЗначения) Экспорт
	
	ИмяПоляСклад = "Склад";
	ЗначениеСклада = Неопределено;
	ЗаполнитьПодразделение = Ложь;
	
	Если Параметры <> Неопределено Тогда
		
		Если Параметры.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = Параметры.ИмяПоляСклад;	
		КонецЕсли;
			
		Если Параметры.Свойство("ЗаполнитьПодразделение") Тогда
			ЗаполнитьПодразделение = Параметры.ЗаполнитьПодразделение;	
		КонецЕсли;		
		
		Параметры.Свойство("ЗначениеСклада", ЗначениеСклада);
		
	КонецЕсли;	
	
	Если ЗначениеСклада = Неопределено Тогда
		ЗначениеСклада = ТекущаяСтрока[ИмяПоляСклад];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСклада) И ТипЗнч(ЗначениеСклада) = Тип("СправочникСсылка.Склады") Тогда
		
		СвойстваСклада = КэшированныеЗначения.СвойстваСкладов.Получить(ЗначениеСклада);
		
		Если СвойстваСклада = Неопределено Тогда
			
			СвойстваСкладов = Справочники.Склады.СвойстваСкладов(ЗначениеСклада);
			СвойстваСклада = СвойстваСкладов.Получить(ЗначениеСклада);
			
			КэшированныеЗначения.СвойстваСкладов.Вставить(ЗначениеСклада, СвойстваСклада);
			
		КонецЕсли;	
		
		ЦеховаяКладовая = СвойстваСклада.ЦеховаяКладовая;
		Подразделение = СвойстваСклада.Подразделение;
		
	Иначе
		
		ЦеховаяКладовая = Ложь;
		Подразделение = Неопределено;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЦеховаяКладовая = ЦеховаяКладовая;
	
	Если ЗаполнитьПодразделение И ТекущаяСтрока.ЦеховаяКладовая Тогда
		ТекущаяСтрока.Подразделение = Подразделение;
	КонецЕсли;
	
	Если ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		ТекущаяСтрока.НужноОкруглять = Не ТекущаяСтрока.ЦеховаяКладовая;	
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет признаки ЦеховаяКладовая и НужноОкруглять в строках таблицы
// 
// Параметры:
//  ТаблицаФормы   - ДанныеФормыКоллекция                  - обрабатываемая таблица
//  ИмяПоля        - Строка                                - имя реквизита склад, по умолчанию "Склад"
//  ЗначениеСклада - СправочникСсылка.Склады, Неопределено -
//  Строки         - Массив, Неопределено                  - массив обрабатываемых строк
//
Процедура ЗаполнитьПризнакЦеховаяКладоваяВТаблице(
			ТаблицаФормы, ИмяПоля = "Склад", ЗначениеСклада = Неопределено, Строки = Неопределено) Экспорт
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&Склад КАК Справочник.Склады) КАК Склад
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Склад.ЦеховаяКладовая КАК ЦеховаяКладовая,
	|	НЕ ЕСТЬNULL(Таблица.Склад.ЦеховаяКладовая, ЛОЖЬ) КАК НужноОкруглять
	|ИЗ
	|	Таблица КАК Таблица";
	
	Если ЗначениеСклада = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад", СтрШаблон("Таблица.%1", ИмяПоля));
		ПоляТаблицы  = СтрШаблон("НомерСтроки, %1", ИмяПоля);
	Иначе
		ПоляТаблицы  = "НомерСтроки";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаФормы.Выгрузить(Строки, ПоляТаблицы));
	Запрос.УстановитьПараметр("Склад",   ЗначениеСклада);
		
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаФормы[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения данных по назначению.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстЗапросаРеквизитыПоНазначению(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьСлужебныеРеквизитыПоНазначению",
		СтруктураДействий,
		КэшированныеЗначения) Тогда
	
		ТекстЗарпоса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	СпрНазначения.ТипНазначения КАК ТипНазначения,
		|	СпрНазначения.Заказ КАК Заказ,
		|	СпрНазначения.Партнер КАК Партнер,
		|	СпрНазначения.Договор КАК Договор,
		|	СпрНазначения.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО ИсточникДанных.Назначение = СпрНазначения.Ссылка";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "СлужебныеРеквизитыПоНазначению");
		ОписаниеЗапроса.ПривилегированныйРежим = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения данных по назначению.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстЗапросаПолучательПоНаправлениюВыпуска(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьПолучателяПоНаправлениюВыпуска",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия) Тогда
	
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	МАКСИМУМ(СпрСклады.Ссылка)           КАК ЦеховаяКладовая
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
			|	ПО СпрСклады.Ссылка = ИсточникДанных.Ссылка
			|
			|ГДЕ
			|	НЕ СпрСклады.ПометкаУдаления
			|	И НЕ СпрСклады.ЭтоГруппа
			|	И СпрСклады.Подразделение = &Подразделение
			|	И СпрСклады.ЦеховаяКладовая
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсточникДанных.ИдентификаторСтрокиВТ
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(СпрСклады.Ссылка) = 1
			|";
			
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Подразделение", ПараметрыДействия.Подразделение);
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	МАКСИМУМ(СпрСклады.Ссылка)           КАК ЦеховаяКладовая
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
			|	ПО СпрСклады.Ссылка = ИсточникДанных.Ссылка
			|
			|ГДЕ
			|	НЕ СпрСклады.ПометкаУдаления
			|	И НЕ СпрСклады.ЭтоГруппа
			|	И СпрСклады.ЦеховаяКладовая
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсточникДанных.ИдентификаторСтрокиВТ
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(СпрСклады.Ссылка) = 1
			|";
		КонецЕсли;
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПолучательПоНаправлениюВыпуска");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения данных по назначению.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения.
//
Процедура ДополнитьТекстЗапросаПризнакЦеховаяКладовая(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьПризнакЦеховаяКладовая",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия) Тогда
	
		ИмяПоляСклад = "Склад";
		Если ПараметрыДействия <> Неопределено
			И ПараметрыДействия.Свойство("ИмяПоляСклад") Тогда
				ИмяПоляСклад = ПараметрыДействия.ИмяПоляСклад;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсточникДанных.ИдентификаторСтрокиВТ            КАК ИдентификаторСтрокиВТ,
		|	ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)       КАК ЦеховаяКладовая,
		|	ЕСТЬNULL(СпрСклады.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|	ПО СпрСклады.Ссылка = &ИмяПоляСклад
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСклад", "ИсточникДанных." + ИмяПоляСклад);
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ПризнакЦеховаяКладовая");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтучныйТоварВМернойЕдинице

// Возвращает текст запроса полей "Упаковка" и "КоличествоУпаковки" для замены на единицу хранения 
// в случаи штучного товара, которая учитывается в мерной единице
// 
// Параметры:
//	ИмяТаблицы - Строка - имя таблицы для которого нужно произвести замену полей "Упаковка" и "КоличествоУпаковок"
//
// Возвращаемое значение:
//  Структура - содержит тексты запросов:
//  	* Упаковка                             - Строка - текст для получения поля "Упаковка".
//  	* КоличествоУпаковок                   - Строка - текст для получения поля "КоличествоУпаковок".
//  	* СоединениеШтучныйТоварВМернойЕдинице - Строка - текст соединений.
//  	* ШтучныйТоварВМерныхЕдиницах          - Строка - признак штучного товара в мерных единицах
//
Функция ТекстЗапросаНастройкиШтучногоТовараВМернойЕдинице(ИмяТаблицы) Экспорт

	ТекстШтучныйТоварВМерныхЕдиницах = 	
	"СпрЕдиницыХранения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|	И СпрУпаковки.ТипИзмеряемойВеличины В (
	|								ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))";
	
	ТекстЗапросаУпаковка = 
	"ВЫБОР
	|	КОГДА &ШтучныйТоварВМерныхЕдиницах
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	ИНАЧЕ Таблица.Упаковка
	|КОНЕЦ";
	
	ТекстЗапросаУпаковка = 
		СтрЗаменить(ТекстЗапросаУпаковка, "&ШтучныйТоварВМерныхЕдиницах", ТекстШтучныйТоварВМерныхЕдиницах);
	
	ТекстКоличествоУпаковок = 
	"ВЫБОР
	|	КОГДА &ШтучныйТоварВМерныхЕдиницах
	|		ТОГДА Таблица.Количество
	|	ИНАЧЕ Таблица.КоличествоУпаковок
	|КОНЕЦ";
	
	ТекстКоличествоУпаковок = 
		СтрЗаменить(ТекстКоличествоУпаковок, "&ШтучныйТоварВМерныхЕдиницах", ТекстШтучныйТоварВМерныхЕдиницах);
	
	ТекстСоединения =
	"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО Таблица.Номенклатура = СпрНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрЕдиницыХранения
	|	ПО СпрНоменклатура.ЕдиницаИзмерения = СпрЕдиницыХранения.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
	|	ПО Таблица.Упаковка = СпрУпаковки.Ссылка";
		
	Настройки = Новый Структура;
	Настройки.Вставить("ШтучныйТоварВМерныхЕдиницах", ТекстШтучныйТоварВМерныхЕдиницах);
	Настройки.Вставить("Упаковка", СтрЗаменить(ТекстЗапросаУпаковка, "Таблица", ИмяТаблицы));
	Настройки.Вставить("КоличествоУпаковок", СтрЗаменить(ТекстКоличествоУпаковок, "Таблица", ИмяТаблицы));
	Настройки.Вставить("СоединениеШтучныйТоварВМернойЕдинице", СтрЗаменить(ТекстСоединения, "Таблица", ИмяТаблицы));
		
	Возврат Настройки;
	
КонецФункции

// Возвращает параметры применения штучного товара в мерной единице
//
// Возвращаемое значение:
//  Структура - содержит параметры применения:
//		*Упаковка                             - Булево - признак настройки для поля "<имя таблицы>.Упаковка"
//		*КоличествоУпаковок                   - Булево - признак настройки для поля "<имя таблицы>.КоличествоУпаковок"
//		*ШтучныйТоварВМерныхЕдиницах          - Булево - признак настройки для параметра "&ШтучныйТоварВМерныхЕдиницах"
//		*СоединениеШтучныйТоварВМернойЕдинице - Булево - признак настройки для конструкции "//&СоединениеШтучныйТоварВМернойЕдинице"
//
Функция ПараметрыПримененияШтучногоТовараВМернойЕдинице() Экспорт
	
	НастройкиПрименения = Новый Структура;
	НастройкиПрименения.Вставить("Упаковка", Истина);
	НастройкиПрименения.Вставить("КоличествоУпаковок", Истина);
	НастройкиПрименения.Вставить("ШтучныйТоварВМерныхЕдиницах", Истина);
	НастройкиПрименения.Вставить("СоединениеШтучныйТоварВМернойЕдинице", Истина);
	
	Возврат НастройкиПрименения;
	
КонецФункции		

// Применяет к тексту запроса настройки штучного товара, которая учитывается в мерной единице
// см. ПроизводствоСервер.ТекстЗапросаНастройкиШтучногоТовараВМернойЕдинице 
// 
// Параметры:
//	ТекстЗапроса - Строка - текст запроса, к которому применяются настройки
//	ИмяТаблицы - Строка - см. ПроизводствоСервер.ТекстЗапросаНастройкиШтучногоТовараВМернойЕдинице
//	Параметры  - см. ПроизводствоСервер.ПараметрыПримененияШтучногоТовараВМернойЕдинице
//  
Процедура ПрименитьНастройкиШтучногоТовараВМернойЕдинице(ТекстЗапроса, ИмяТаблицы, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыПримененияШтучногоТовараВМернойЕдинице();	
	КонецЕсли;
	
	Настройки = ТекстЗапросаНастройкиШтучногоТовараВМернойЕдинице(ИмяТаблицы);
	
	ИмяПоля = "Упаковка";
	Если Параметры[ИмяПоля] Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон("%1.%2", ИмяТаблицы, ИмяПоля), Настройки[ИмяПоля]);
	КонецЕсли;
	
	ИмяПоля = "КоличествоУпаковок";
	Если Параметры[ИмяПоля] Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон("%1.%2", ИмяТаблицы, ИмяПоля), Настройки[ИмяПоля]);
	КонецЕсли;
	
	ИмяПоля = "ШтучныйТоварВМерныхЕдиницах";
	Если Параметры[ИмяПоля] Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон("&%1", ИмяПоля), Настройки[ИмяПоля]);
	Конецесли;	
		
	ИмяПоля = "СоединениеШтучныйТоварВМернойЕдинице";
	Если Параметры[ИмяПоля] Тогда	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон("//&%1", ИмяПоля), Настройки[ИмяПоля]);
	КонецЕсли;	
		
КонецПроцедуры	

#КонецОбласти

#Область Прочее

// Включает/отключает использование свойств для нормативно-справочной информации.
//
Процедура УстановитьИспользованиеСвойствСправочников() Экспорт
	
	ПараметрыНабора              = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьПроизводство.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РесурсныеСпецификации", ПараметрыНабора);
//++ НЕ УТ
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗаказМатериаловВПроизводство", ПараметрыНабора);	
//-- НЕ УТ	

//++ НЕ УТКА
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВидыРабочихЦентров", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_РабочиеЦентры", ПараметрыНабора);
//-- НЕ УТКА
	
КонецПроцедуры

// Заполняет данные выбора при вводе текста в поле "Исполнитель" в этапах производства и производстве без заказа.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - список значений для заполнения
//  Текст - Строка - текст, введенный в поле
//  Параметры - Структура - структура отбора с ключами:
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, в котором выполняются работы
//    * Организация - СправочникСсылка.Организации - организация бригады
//    * Дата - Дата - исползуется для подбора сотрудников на определенную дату
//
Процедура ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 20
	|	Бригады.Ссылка
	|ИЗ
	|	Справочник.Бригады КАК Бригады,
	|	Справочник.СтруктураПредприятия КАК Реквизиты
	|
	|ГДЕ
	|	Реквизиты.Ссылка = &Подразделение
	|	И Реквизиты.ИспользоватьБригадныеНаряды
	|	И НЕ Бригады.ПометкаУдаления
	|	И Бригады.Наименование ПОДОБНО &СтрокаПоиска
	|	И (Бригады.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица,
	|	Справочник.СтруктураПредприятия КАК Реквизиты
	|
	|ГДЕ
	|	Реквизиты.Ссылка = &Подразделение
	|	И Реквизиты.ИспользоватьПерсональныеНаряды
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И ФизическиеЛица.Наименование ПОДОБНО &СтрокаПоиска
	//++ Локализация
	|	И НЕ &УчетТрудозатратВРазрезеСотрудников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
	|	ПО ДанныеДляПодбора.Сотрудник = Сотрудники.Ссылка
	|	И ДанныеДляПодбора.Начало <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДанныеДляПодбора.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|	И (ДанныеДляПодбора.Организация = &Организация ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И ДанныеДляПодбора.Начало <= &ТекущаяДата
	|	И ДанныеДляПодбора.Окончание >= &ТекущаяДата,
	|	Справочник.СтруктураПредприятия КАК Реквизиты
	|
	|ГДЕ
	|	&УчетТрудозатратВРазрезеСотрудников
	|	И Реквизиты.Ссылка = &Подразделение
	|	И Реквизиты.ИспользоватьПерсональныеНаряды
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И Сотрудники.Наименование ПОДОБНО &СтрокаПоиска
	//-- Локализация
	|";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Если Параметры.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Иначе
		Запрос.УстановитьПараметр("Организация", Неопределено);
	КонецЕсли;
	
	//++ Локализация
	Если Параметры.Свойство("Дата") Тогда
		Запрос.УстановитьПараметр("УчетТрудозатратВРазрезеСотрудников", ИспользуетсяУчетТрудозатратВРазрезеСотрудников(Параметры.Дата));
		Если ЗначениеЗаполнено(Параметры.Дата) Тогда
			Запрос.УстановитьПараметр("ТекущаяДата", Параметры.Дата);
		Иначе
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	КонецЕсли;
	//-- Локализация
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Определяет что выступает в качестве исполнителя: физическое лицо или сотрудник.
// 
// Параметры:
//  Дата - Дата - Дата, которая используется для сравнения
// 
// Возвращаемое значение:
//  Булево - Используется учет трудозатрат в разрезе сотрудников
Функция ИспользуетсяУчетТрудозатратВРазрезеСотрудников(Дата) Экспорт
	
	НачалоУчетаТрудозатратПоСотрудникам = Дата(1,1,1);
	
	//++ Локализация
	НачалоУчетаТрудозатратПоСотрудникам = ПолучитьФункциональнуюОпцию("УчетТрудозатратВРазрезеСотрудников");
	//-- Локализация
	
	Возврат ЗначениеЗаполнено(НачалоУчетаТрудозатратПоСотрудникам) И Дата >= НачалоУчетаТрудозатратПоСотрудникам;
	
КонецФункции

// Возвращает список уволенных сотрудников.
// 
// Параметры:
//  Сотрудники - Массив из СправочникСсылка.Сотрудники - Исполнители
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Поля:
//  *Сотрудник - СправочникСсылка.Сотрудники
//  *ДатаУвольнения - Дата
Функция УволенныеСотрудники(Сотрудники) Экспорт
	
	УволенныеСотрудники = Новый ТаблицаЗначений();
	
	//++ Локализация
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДляПодбора.Сотрудник КАК Сотрудник,
	|	ДанныеДляПодбора.Начало КАК ДатаУвольнения
	|ИЗ
	|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
	|ГДЕ
	|	ДанныеДляПодбора.Сотрудник В (&Сотрудники)
	|	И ДанныеДляПодбора.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	УволенныеСотрудники = Запрос.Выполнить().Выгрузить();
	//-- Локализация
	
	Возврат УволенныеСотрудники;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ОформлениеПроизводстваБезЗаказов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОформлениеПроизводстваБезЗаказов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока =  ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПроизводстваБезЗаказов);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПроизводствоСервер.Оформление_ОформлениеПроизводстваБезЗаказов");
	НоваяСтрока.ДействиеИспользование =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПроизводствоСервер.Использование_ОформлениеПроизводстваБезЗаказов");
	НоваяСтрока.ДействиеВыполнить  =  ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ОформлениеПроизводстваБезЗаказов.Формы.ФормаРабочееМесто.ПолноеИмя());
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "ГруппаРаботы");
	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ОформлениеПроизводстваБезЗаказов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет производственных операций не ведется';
				|en = 'Routing operation accounting is not kept'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	НастройкиПроизводства = НастройкиПодсистемыПроизводство();
	
	Если НЕ НастройкиПроизводства.ИспользуетсяПроизводство22 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется управление производством (версия 2.2)';
				|en = 'Production management, version 2.2 is not used'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Ссылка КАК Работа
	|ПОМЕСТИТЬ ВТРаботы
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работы.Организация      КАК Организация,
	|	Работы.Подразделение    КАК Подразделение,
	|	Работы.Номенклатура     КАК Номенклатура,
	|	Работы.Характеристика   КАК Характеристика,
	|	Работы.Назначение       КАК Назначение,
	// Получаем объем потребления работ в текущем периоде, не обеспеченный выпуском.
	|	ВЫБОР
	|		КОГДА Работы.КоличествоНачальныйОстаток > 0
	|			ТОГДА Работы.КоличествоРасход - Работы.КоличествоПриход - Работы.КоличествоНачальныйОстаток
	|		ИНАЧЕ Работы.КоличествоРасход - Работы.КоличествоПриход
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ ВТНеоформленноеПроизводство
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.ОстаткиИОбороты(
	|		&НачалоПериода,
	|		&КонецПериода,,,
	|		Организация В(&МассивОрганизаций)
	|			И Номенклатура В(
	|				ВЫБРАТЬ
	|					ВТРаботы.Работа
	|				ИЗ
	|					ВТРаботы КАК ВТРаботы)) КАК Работы
	|ГДЕ
	|	Работы.КоличествоКонечныйОстаток < 0
	|	И НЕ ВЫБОР
	|			КОГДА Работы.КоличествоНачальныйОстаток > 0
	|				ТОГДА Работы.КоличествоРасход - Работы.КоличествоПриход - Работы.КоличествоНачальныйОстаток
	|			ИНАЧЕ Работы.КоличествоРасход - Работы.КоличествоПриход
	|		КОНЕЦ = 0
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНеоформленноеПроизводство = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет работ, требующих оформления выпуска.';
				|en = 'There are no works requiring release registration.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Оформляет этап закрытия месяца для производство без заказов.
//
// Параметры:
//  ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Оформление_ОформлениеПроизводстваБезЗаказов(ПараметрыОбработчика) Экспорт
	
	НастройкиПроизводства = НастройкиПодсистемыПроизводство();
	
	Если НЕ (НастройкиПроизводства.ИспользуетсяПроизводство21 И НастройкиПроизводства.ИспользуетсяПроизводство22) Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Наименование = НСтр("ru = 'Оформление производства без заказов';
															|en = 'Register backflush production'");
	КонецЕсли;
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Оформить';
															|en = 'Register'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_ОформлениеПроизводстваБезЗаказов(ТаблицаПроверок) Экспорт
	
	// Оформление производства без заказов (2.2).
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НеОформленноеПроизводствоБезЗаказов",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеПроизводстваБезЗаказов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"ПроизводствоСервер.ПроверкаНеобходимостиОформленияПроизводстваБезЗаказов");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформлен выпуск работ, принятых потребителями.';
			|en = 'The release of works accepted by consumers is not registered.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Выпуск работ, принятых потребителями, должен быть оформлен в полном объеме.';
			|en = 'The release of works accepted by consumers must be registered in full.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

Процедура ПроверкаНеобходимостиОформленияПроизводстваБезЗаказов(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",    НСтр("ru = 'Организация';
												|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",  НСтр("ru = 'Подразделение';
												|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Номенклатура",   НСтр("ru = 'Номенклатура';
												|en = 'Item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Характеристика", НСтр("ru = 'Характеристика номенклатуры';
												|en = 'Item variant'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Назначение",     НСтр("ru = 'Назначение';
												|en = 'Assignment'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",     НСтр("ru = 'Количество';
												|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНеоформленноеПроизводство",
		НСтр("ru = 'По организации ""%1"" за %2 не оформлен выпуск работ, принятых потребителями.';
			|en = 'The release of works accepted by consumers is not registered for %1 company as of %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеВыработкиСотрудников

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОформлениеВыработкиСотрудников(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыработкиСотрудников);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Оформить';
										|en = 'Register'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПроизводствоСервер.Использование_ВыработкаСотрудников");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ПроизводствоСервер.Выполнить_ВыработкаСотрудников");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ВыработкаСотрудников.Формы.ФормаСпискаДокументов.ПолноеИмя());
	
КонецПроцедуры


// Обработчики этапа.

Процедура Использование_ВыработкаСотрудников(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Производственный учет не ведется.';
				|en = 'Production accounting is not kept.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	// Выбираем распоряжения, по которым были движения в текущем месяце
	//  - если таблица пустая, значит оформление не требуется.
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Организация КАК Организация,
	|	ДД.Распоряжение КАК Распоряжение,
	|	ДД.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, , Организация В (&МассивОрганизаций)) КАК ДД
	|
	|СГРУППИРОВАТЬ ПО
	|	ДД.Организация,
	|	ДД.Распоряжение,
	|	ДД.КодСтрокиРаспоряжения
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДД.КоличествоПриход) <> 0
	|		ИЛИ СУММА(ДД.КоличествоРасход) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// выбираем остатки по распоряжениям текущего месяца без учета периода
	//  - если остатки есть, значит требуется оформить выработку.
	|ВЫБРАТЬ
	|	Остатки.Организация КАК Организация,
	|	Остатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОрганизацииСОстаткамиКОформлению
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|			,
	|			Организация В (&МассивОрганизаций)
	|				И (Распоряжение, КодСтрокиРаспоряжения) В
	|					(ВЫБРАТЬ
	|						Т.Распоряжение,
	|						Т.КодСтрокиРаспоряжения
	|					ИЗ
	|						Обороты КАК Т)) КАК Остатки
	|";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.Обороты = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'За указанный период работы сотрудниками не выполнялись, оформление выработки не требуется.';
				|en = 'Works were not performed by employees for the specified period; output registration is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РазмерыВременныхТаблиц.ОрганизацииСОстаткамиКОформлению = 0 Тогда
		
		// Вся выработка оформлена.
		Возврат;
		
	Иначе
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 выработка оформлена не по всем сотрудникам.';
				|en = 'Work output is not registered by some employees for the ""%1"" company for period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Запрос,
			"ОрганизацииСОстаткамиКОформлению",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ВыработкаСотрудников(ПараметрыОбработчика) Экспорт
	
	Документы.ВыработкаСотрудников.ОформитьПриЗакрытииМесяца(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверкаЗаполненияРеквизитов

// Проверяет заполнение получателя в табличной части.
//
// Параметры:
//	Объект - ДокументОбъект - Проверяемый документ
//	ИмяТЧ  - Строка         - Имя табличной части
//	Отказ  - Булево         - Признак наличия ошибок.
//
Процедура ПроверитьЗаполнениеПолучателяВТабличнойЧасти(Объект, ИмяТЧ, Отказ) Экспорт
	
	МетаданныеОбъекта  = Объект.Метаданные();
	МетаданныеТЧ       = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ];
	СинонимТЧ          = МетаданныеТЧ.Синоним;
	СоставнойТип       = МетаданныеТЧ.Реквизиты.Получатель.Тип.Типы().Количество() > 1;
	
	ПризнакОтменыСтрок =
		ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("Отменено", МетаданныеОбъекта, ИмяТЧ);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки      КАК НомерСтроки,
	|	ТабличнаяЧасть.Номенклатура     КАК Номенклатура,
	|	ТабличнаяЧасть.Получатель       КАК Получатель,
	|	ТабличнаяЧасть.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	&ОтборОтменено
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"&ОтборОтменено", ?(ПризнакОтменыСтрок, "НЕ ТабличнаяЧасть.Отменено", "ИСТИНА"));
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Если СоставнойТип Тогда
		
		ТекстЗапроса = ТекстЗапроса + "	
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                      КАК НеУказан
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ТаблицаПроверки
		|		ПО ТабличнаяЧасть.Получатель = ТаблицаПроверки.Ссылка
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И ЕСТЬNULL(ТаблицаПроверки.Ссылка, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ &ОставитьИзделияУПереработчика
		|	И &СкладИзделияГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ТаблицаПроверки
		|		ПО ТабличнаяЧасть.Получатель = ТаблицаПроверки.Ссылка
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И ЕСТЬNULL(ТаблицаПроверки.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "	
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ИСТИНА                     КАК НеУказан
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	 
		|	ВЫРАЗИТЬ(ТабличнаяЧасть.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В (
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|	И ТабличнаяЧасть.СписатьНаРасходы = ЛОЖЬ
		|	И ТабличнаяЧасть.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		
	КонецЕсли;	
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	КолонкиТаблицы = "НомерСтроки, Номенклатура, Получатель, СписатьНаРасходы" 
		+ ?(ПризнакОтменыСтрок, ", Отменено", "");
		
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Объект[ИмяТЧ].Выгрузить(, КолонкиТаблицы));
	
	СкладИзделияГруппа = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СкладПродукции") Тогда
		СкладИзделияГруппа = Справочники.Склады.ЭтоГруппа(Объект.СкладПродукции);
	КонецЕсли;
	Запрос.УстановитьПараметр("СкладИзделияГруппа", СкладИзделияГруппа);
	
	ОставитьИзделияУПереработчика = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ОставитьИзделияУПереработчика") Тогда
		ОставитьИзделияУПереработчика = Объект.ОставитьИзделияУПереработчика;
	КонецЕсли;
	Запрос.УстановитьПараметр("ОставитьИзделияУПереработчика", ОставитьИзделияУПереработчика);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.НеУказан Тогда
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "ЗАПОЛНЕНИЕ"  , "Получатель", Выборка.НомерСтроки, СинонимТЧ);
			Иначе
				ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("КОЛОНКА", "КОРРЕКТНОСТЬ", "Получатель", Выборка.НомерСтроки, СинонимТЧ);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Получатель"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение долей стоимости в табличной части.
//
// Параметры:
//	Объект                        - ДокументОбъект - Проверяемый документ
//	ИмяТЧ                         - Строка         - Имя табличной части
//	МассивНепроверяемыхРеквизитов - Массив         - реквизиты, которые не нужно проверять платформенной проверкой
//	Отказ                         - Булево         - Признак наличия ошибок.
//
Процедура ПроверитьЗаполнениеДолейСтоимостиВТабличнойЧасти(Объект, ИмяТЧ, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МассивГруппировокЗатрат = Новый Массив;
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям);
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям);
	//++ НЕ УТКА
	МассивГруппировокЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства);
	//-- НЕ УТКА
	
	Если МассивГруппировокЗатрат.Найти(Объект.ГруппировкаЗатрат) = Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".ДоляСтоимости");
		Возврат;
	КонецЕсли;
	
	ПроверитьСпособРаспределенияЗатрат =
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям;
	
	МетаданныеОбъекта = Объект.Метаданные();
	МенеджерОбъекта   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	
	ПараметрыРаспределенияЗатрат = МенеджерОбъекта.ПараметрыРаспределенияЗатрат(Объект);
	
	Если ПроверитьСпособРаспределенияЗатрат
	   И ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия 
			<> Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".ДоляСтоимости");
		
	ПоляСвязи                  = ПараметрыРаспределенияЗатрат.ПоляСвязи;
	ПолеГруппыЗатрат           = ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат;
	ПоляПроверкиДолейСтоимости = СтрРазделить(ПоляСвязи, ",");
	
	ШаблонПоляЗапроса = "	%1%2 КАК %3";
	
	МассивПоляЗапроса = Новый Массив;
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, ""				 , "&Ссылка"      , "Ссылка"));
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "НомерСтроки"  , "НомерСтроки"));
	МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "ДоляСтоимости", "ДоляСтоимости"));
	
	ПризнакОтменыСтрок = ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("Отменено", МетаданныеОбъекта, ИмяТЧ);
	Если ПризнакОтменыСтрок Тогда
		МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", "Отменено", "Отменено"));
	КонецЕсли;	
	
	ГруппаЗатратВШапке = Ложь;
	Если ЗначениеЗаполнено(ПолеГруппыЗатрат) Тогда
		
		ГруппаЗатратВШапке = Не ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта(ПолеГруппыЗатрат, МетаданныеОбъекта, ИмяТЧ);
		
		Если ГруппаЗатратВШапке Тогда
			МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, ""               , "&ГруппаЗатрат" , ПолеГруппыЗатрат));	
		Иначе
			МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", ПолеГруппыЗатрат, ПолеГруппыЗатрат));
		КонецЕсли;	
		
	КонецЕсли;	
	
	Для каждого ПолеПроверки Из ПоляПроверкиДолейСтоимости Цикл
		МассивПоляЗапроса.Добавить(СтрШаблон(ШаблонПоляЗапроса, "ТабличнаяЧасть.", ПолеПроверки, ПолеПроверки));	
	КонецЦикла;
	
	РазделительПолейЗапроса = ",
							  |";
	ТекстЗапросаПоля 	= СтрСоединить(МассивПоляЗапроса, РазделительПолейЗапроса);
	ТекстЗапросаУсловие = ?(ПризнакОтменыСтрок, "ГДЕ НЕ ТабличнаяЧасть.Отменено", "");
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстЗапросаПоля
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаПоля", ТекстЗапросаПоля) + ТекстЗапросаУсловие + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	МассивТекстыЗапроса = Новый Массив;
	МассивТекстыЗапроса.Добавить(ТекстЗапроса); 
	МассивТекстыЗапроса.Добавить(ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат));
	
	ТекстЗапроса = СтрСоединить(МассивТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
				   
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка); 
	Запрос.УстановитьПараметр("ТабличнаяЧасть" , Объект[ИмяТЧ]);
	
	Если ГруппаЗатратВШапке Тогда
		Запрос.УстановитьПараметр("ГруппаЗатрат" , Объект[ПолеГруппыЗатрат]);	
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		СинонимТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"КОЛОНКА", "ЗАПОЛНЕНИЕ", "Доля стоимости", Выборка.НомерСтроки, СинонимТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ДоляСтоимости"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Математика

#Область НОД

Функция НаибольшийОбщийДелительВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Если МассивЧисел.Количество() < 2 Тогда
		
		НОД = 1;
		
	Иначе
		
		НОД = МассивЧисел[0];
		
		Для Индекс = 1 По МассивЧисел.Количество()-1 Цикл
		
			НОД = НаибольшийОбщийДелитель(НОД, МассивЧисел[Индекс]);
			
			Если НОД = 1 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НОД;
	
КонецФункции

Функция НаибольшийОбщийДелитель(Знач Числитель, Знач Знаменатель) Экспорт
	
	Если Числитель = 0 ИЛИ Знаменатель = 0 Тогда
		
		Возврат 1;
		
	КонецЕсли;

	Пока Знаменатель <> 0 Цикл
		
		ОстатокОтДеления = Числитель % Знаменатель;
		Числитель = Знаменатель;
		Знаменатель = ОстатокОтДеления;
		
	КонецЦикла;
	
	Возврат Числитель;

КонецФункции

#КонецОбласти

#Область НОК

Функция НаименьшееОбщееКратноеВКоллекции(Коллекция, ИмяКолонки = "Количество") Экспорт
	
	Если ТипЗнч(Коллекция) <> ТипЗнч("ТабличнаяЧасть") Тогда
		МассивЧисел = Новый Массив;
		Для Каждого ЭлементКоллекции Из Коллекция Цикл
			МассивЧисел.Добавить(ЭлементКоллекции[ИмяКолонки]);
		КонецЦикла;
	Иначе
		МассивЧисел = ОбщегоНазначенияУТ.ВыгрузитьЗначенияКолонки(Коллекция, ИмяКолонки);
	КонецЕсли;
	
	Возврат НаименьшееОбщееКратное(МассивЧисел);
	
КонецФункции

Функция НаименьшееОбщееКратное(Числа) Экспорт

	НОК = 1;
	
	Для Каждого Число Из Числа Цикл
		
		НОК = НОК * Число / НаибольшийОбщийДелитель(НОК,Число);
		
	КонецЦикла;
	
	Возврат НОК;
	
КонецФункции

#КонецОбласти

#Область Дроби

Функция Дробь(Знач Числитель, Знач Знаменатель) Экспорт
	
	Дробь = ПроизводствоКлиентСервер.Дробь(Числитель, Знаменатель);
	Возврат Дробь;

КонецФункции

Функция МинДробь(Дробь1, Дробь2) Экспорт
	
	Если Дробь1.Числитель * Дробь2.Знаменатель < Дробь2.Числитель * Дробь1.Знаменатель Тогда
		
		Возврат Дробь(Дробь1.Числитель, Дробь1.Знаменатель);
		
	Иначе
		
		Возврат Дробь(Дробь2.Числитель, Дробь2.Знаменатель);
		
	КонецЕсли;
	
КонецФункции

Функция МаксДробь(Дробь1, Дробь2) Экспорт
	
	Если Дробь1.Числитель * Дробь2.Знаменатель > Дробь2.Числитель * Дробь1.Знаменатель Тогда
		
		Возврат Дробь(Дробь1.Числитель, Дробь1.Знаменатель);
		
	Иначе
		
		Возврат Дробь(Дробь2.Числитель, Дробь2.Знаменатель);
		
	КонецЕсли;
	
КонецФункции

Функция СуммаДробей(МассивДробей, СократитьРезультат = Ложь) Экспорт
	
	НаименьшееОбщееКратное = НаименьшееОбщееКратноеВКоллекции(МассивДробей, "Знаменатель");
	
	Числитель = 0;
	Для каждого Дробь Из МассивДробей Цикл
		Числитель = Числитель + Дробь.Числитель * НаименьшееОбщееКратное / Дробь.Знаменатель;
	КонецЦикла;
	
	Результат = ПроизводствоКлиентСервер.Дробь(Числитель, НаименьшееОбщееКратное);
	
	Если СократитьРезультат Тогда
		
		СократитьДробь(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СократитьДробь(Дробь) Экспорт
	
	НаибольшийОбщийДелитель = НаибольшийОбщийДелитель(Дробь.Числитель, Дробь.Знаменатель);
	
	Дробь.Числитель   = Дробь.Числитель / НаибольшийОбщийДелитель;
	Дробь.Знаменатель = Дробь.Знаменатель / НаибольшийОбщийДелитель;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОчередьЗаданий

// Обрабатывает очередь заданий.
// 
// Параметры:
//  Параметры       - Структура - с ключами:
//   * Очередь       - Строка    - имя очереди (имя регистра сведений очереди).
//   * Отбор         - Структура - задания по этому отбору будут обрабатываться первыми.
//   * Идентификатор - УникальныйИдентификатор, Массив, Неопределено - идентификатор или список идентификаторов заданий
//                        Если фоновое задание запускается в той же транзакции, что и добавление новых заданий в очередь
//                           возможна ситуация, когда фоновое задание запущено, транзакция не завершена и задания для
//                           обработки не видны сеансу фонового задания.
//                        Для решения этой проблемой перед обработкой первой порции заданий из очереди открывается
//                           транзакция и устанавливается блокировка на задания в очереди по идентификатору.
//  АдресРезультата - Строка, Неопределено - адрес во временном хранилище.
//
Процедура ОбработатьОчередьЗаданий(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Очередь = Параметры.Очередь;
	
	ПараметрыОбработки = РегистрыСведений[Очередь].ПараметрыОбработки();
	
	ПараметрыОбработчика = Новый Массив(3); // (Задание, ПропуститьЗадание = Ложь, ДополнительныеДанные)
	
	ОжидатьЗавершениеЗаписиЗаданийВОчередь(Очередь, Параметры.Идентификатор);
	
	ЗаданияКОбработке = РегистрыСведений[Очередь].ОчередьЗаданий(Параметры.Отбор);
	
	Пока ЗаданияКОбработке <> Неопределено Цикл
		
		СписокЗаданий = РегистрыСведений[Очередь].ВыбратьИзОчереди(ЗаданияКОбработке);
		
		Пока СписокЗаданий.ВГраница() <> - 1 Цикл
			
			ПараметрыОбработчика[0] = СписокЗаданий[0];
			ПараметрыОбработчика[1] = Ложь;
			ПараметрыОбработчика[2] = ПараметрыОбработки.ДополнительныеДанные;
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					ПараметрыОбработки.Обработчик,
					ПараметрыОбработчика);
				
			Исключение
				
				РегистрыСведений[Очередь].ЗаписатьОшибку(ПараметрыОбработчика[0], ПараметрыОбработчика[1], ИнформацияОбОшибке());
				
			КонецПопытки;
			
			Если ПараметрыОбработчика[1] <> Истина Тогда
				
				РегистрыСведений[Очередь].УдалитьЗадание(СписокЗаданий[0], ЗаданияКОбработке);
				
			КонецЕсли;
			
			СписокЗаданий.Удалить(0);
			
		КонецЦикла;
		
		ЗаданияКОбработке = РегистрыСведений[Очередь].ОчередьЗаданий();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОчередьЗаданийПуста(Очередь, Отбор)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	&РегистрСведений КАК Очередь
	|ГДЕ
	|	&ТекстОтбора");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрСведений", "РегистрСведений." + Очередь);
	
	ТекстОтбора = "ИСТИНА";
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		СтрокиОтбора = Новый Массив;
		Для каждого КлючЗначение Из Отбор Цикл
			СтрокиОтбора.Добавить(КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ);
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		ТекстОтбора = СтрСоединить(СтрокиОтбора, " И ");
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбора", ТекстОтбора);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОжидатьЗавершениеЗаписиЗаданийВОчередь(Очередь, Идентификатор = Неопределено)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ИмяОчереди = "РегистрСведений." + Очередь;
			
			БлокировкаДанных = Новый БлокировкаДанных;
			
			Если ТипЗнч(Идентификатор) <> Тип("Массив") Тогда
				БлокировкаДанных.Добавить(ИмяОчереди).УстановитьЗначение("Идентификатор", Идентификатор);
			Иначе
				Для каждого ЭлементБлокировки Из Идентификатор Цикл
					БлокировкаДанных.Добавить(ИмяОчереди).УстановитьЗначение("Идентификатор", ЭлементБлокировки);
				КонецЦикла;
			КонецЕсли;
			
			БлокировкаДанных.Заблокировать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(СобытиеОбработкаОчередиЗаданий(), УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегистрыСведений[Очередь],,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОчередьЗаданий(Очередь, Отбор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ОбрабатываемыеЗадания
	|ИЗ
	|	&РегистрСведений КАК Очередь
	|ГДЕ
	|	&ТекстОтбора
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистрСведений", "РегистрСведений." + Очередь);
	
	ТекстОтбора = "ИСТИНА";
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		СтрокиОтбора = Новый Массив;
		Для каждого КлючЗначение Из Отбор Цикл
			СтрокиОтбора.Добавить(КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ);
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		ТекстОтбора = СтрСоединить(СтрокиОтбора, " И ");
		
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбора", ТекстОтбора);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Выгрузить()[0].Количество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ВыбратьИзОчереди(Очередь, МенеджерВременныхТаблиц) Экспорт
	
	Измерения = Метаданные.РегистрыСведений[Очередь].Измерения;
	
	СписокПолей = Новый Массив;
	СписокПолейВыборки = Новый Массив;
	СписокПолейГруппировки = Новый Массив;
	
	КоличествоИзмерений = Измерения.Количество();
	Индекс = 0;
	
	Пока Индекс < КоличествоИзмерений Цикл
		
		Измерение = Измерения[Индекс];//ОбъектМетаданных -
		Индекс = Индекс + 1;

		Если Измерение.Имя <> "Идентификатор" И Измерение.Имя <> "ДеньРегистрации" И СтрНайти(Измерение.Имя, "Удалить") = 0 Тогда
			СписокПолей.Добавить(Измерение.Имя);
			СписокПолейВыборки.Добавить(СтрШаблон("ОбрабатываемыеЗадания.%1 КАК %1", Измерение.Имя));
			СписокПолейГруппировки.Добавить(СтрШаблон("ОбрабатываемыеЗадания.%1", Измерение.Имя));
		КонецЕсли;
	КонецЦикла;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&СписокПолейВыборки
	|ИЗ
	|	ОбрабатываемыеЗадания КАК ОбрабатываемыеЗадания
	|СГРУППИРОВАТЬ ПО
	|	&СписокПолейГруппировки
	|");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокПолейВыборки", СтрСоединить(СписокПолейВыборки, ","));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокПолейГруппировки", СтрСоединить(СписокПолейГруппировки, " , "));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Массив();
	
	Ключи = СтрСоединить(СписокПолей, ",");
	Пока Выборка.Следующий() Цикл
		Задание = Новый Структура(Ключи);
		ЗаполнитьЗначенияСвойств(Задание, Выборка);
		Результат.Добавить(Задание);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЗадание(Очередь, Задание, МенеджерВременныхТаблиц) Экспорт
	
	Измерения = Метаданные.РегистрыСведений[Очередь].Измерения;//КоллекцияОбъектовМетаданных -
	
	Запрос = Новый Запрос();
	
	СписокПолей = Новый Массив;
	СписокПолейОтбора = Новый Массив;
	
	КоличествоИзмерений = Измерения.Количество();
	Индекс = 0;
	
	Пока Индекс < КоличествоИзмерений Цикл
		
		Измерение = Измерения[Индекс];//ОбъектМетаданных -
		Индекс = Индекс + 1;
		
		Если Измерение.Имя <> "Идентификатор" И Измерение.Имя <> "ДеньРегистрации" И СтрНайти(Измерение.Имя, "Удалить") = 0 Тогда
			СписокПолей.Добавить(Измерение.Имя);
			СписокПолейОтбора.Добавить(СтрШаблон("ОбрабатываемыеЗадания.%1 = &%1", Измерение.Имя));
			Запрос.УстановитьПараметр(Измерение.Имя, Задание[Измерение.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбрабатываемыеЗадания.Идентификатор КАК Идентификатор
	|ИЗ
	|	ОбрабатываемыеЗадания КАК ОбрабатываемыеЗадания
	|ГДЕ
	|	&СписокПолейОтбора
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СписокПолейОтбора", СтрСоединить(СписокПолейОтбора," И "));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений[Очередь].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей.ОчередьРасчетаПланаПроизводства
		
		Набор.Отбор.Идентификатор.Установить(Выборка.Идентификатор);
		
		Набор.Записать(Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуОбработкиОчередиЗаданий(Очередь, ТекстОшибки, Задание = Неопределено, Данные = Неопределено) Экспорт
	
	ИмяСобытия = СобытиеОбработкаОчередиЗаданий();
	
	Если ЗначениеЗаполнено(Задание) Тогда
		
		ОписаниеЗадания = Новый Массив;
		
		Для каждого КлючИЗначение Из Задание Цикл
			ОписаниеЗадания.Добавить(СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
		КонецЦикла;
		
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки задания :
			|
			|%2
			|
			|%3';
			|en = 'An error occurred while processing the job:
			|
			|%2
			|
			|%3'"), СтрСоединить(ОписаниеЗадания, ";" + Символы.ПС), ТекстОшибки);
		
	Иначе
		ОписаниеОшибки = ТекстОшибки;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений[Очередь],
		Данные,
		ОписаниеОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДолейСтоимости

Функция ТекстЗапросаПроверитьДолиСтоимостиВыходныхИзделий(ПоляСвязи, ПолеГруппыЗатрат = "") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ГруппаЗатрат КАК ГруппаЗатрат,
	|	СУММА(1)			 КАК Количество
	|ПОМЕСТИТЬ ИспользоватьДолюСтоимости
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Таблица.Ссылка	  КАК Ссылка,
	|		&ГруппаЗатратПоле КАК ГруппаЗатрат,
	|		&ПоляСвязиПоле,
	|		Таблица.ДоляСтоимости = 0 КАК ПризнакДоляСтоимости
	|	ИЗ
	|		ТабличнаяЧасть КАК Таблица) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ГруппаЗатрат
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.ГруппаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка      КАК Ссылка,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТабличнаяЧасть КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользоватьДолюСтоимости КАК ИспользоватьДолюСтоимости
	|		ПО &ГруппаЗатратСоединение
	|ГДЕ
	|	Таблица.ДоляСтоимости = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ТекстЗапросаПоляСвязиПоле = "";
	МассивПолейСвязи          = СтрРазделить(ПоляСвязи, ",");
	Для каждого ПолеСвязи Из МассивПолейСвязи Цикл
		ТекстЗапросаПоляСвязиПоле = ТекстЗапросаПоляСвязиПоле + "Таблица." + ПолеСвязи + "," + Символы.ПС;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляСвязиПоле", 
		Лев(ТекстЗапросаПоляСвязиПоле, СтрДлина(ТекстЗапросаПоляСвязиПоле) - 2));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаЗатратПоле",
		?(ЗначениеЗаполнено(ПолеГруппыЗатрат), "Таблица." + ПолеГруппыЗатрат, "ИСТИНА"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаЗатратСоединение",
		?(ЗначениеЗаполнено(ПолеГруппыЗатрат), "Таблица." + ПолеГруппыЗатрат + " = ИспользоватьДолюСтоимости.ГруппаЗатрат", "(ИСТИНА)"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыПодстановкиАлгоритмаРасчетаДолейСтоимости(ИмяТаблицы = "ТабличнаяЧасть", 
															ИсточникСпособРаспределенияЗатратНаВыходныеИзделия = "&СпособРаспределенияЗатратНаВыходныеИзделия", 
															ТекстЗапросаОтборПоНоменклатуре = "",
															ИспользуетсяЦенообразование25 = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	Параметры.Вставить("ИсточникСпособРаспределенияЗатратНаВыходныеИзделия", ИсточникСпособРаспределенияЗатратНаВыходныеИзделия);
	
	Параметры.Вставить("ДоляСтоимости",           "&ДоляСтоимости");               // "%ДоляСтоимости%"
	Параметры.Вставить("ДоляСтоимостиНаЕдиницу",  "&ДоляСтоимостиНаЕдиницу");      // "%ДоляСтоимостиНаЕдиницу%"
	Параметры.Вставить("СоединениеДоляСтоимости", "," + "СоединениеДоляСтоимости");// "%СоединениеДоляСтоимости%"
	
	Параметры.Вставить("ИсточникНоменклатура",     ИмяТаблицы + ".Номенклатура");
	Параметры.Вставить("ИсточникХарактеристика",   ИмяТаблицы + ".Характеристика");
	Параметры.Вставить("ИсточникУпаковка",         ИмяТаблицы + ".Упаковка");
	Параметры.Вставить("ИсточникЕдиницаИзмерения", ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
	Параметры.Вставить("ИсточникКоличество",       ИмяТаблицы + ".Количество");
	Параметры.Вставить("ИсточникДоляСтоимости",    ИмяТаблицы + ".ДоляСтоимости");
	
	Если ИспользуетсяЦенообразование25 = Неопределено Тогда
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 Тогда
		Параметры.Вставить("ИсточникХарактеристикаЦО", ИмяТаблицы + ".ХарактеристикаЦО");
		Параметры.Вставить("ИсточникСерияЦО",          ИмяТаблицы + ".СерияЦО");
		Параметры.Вставить("ИсточникУпаковкаЦО",       ИмяТаблицы + ".УпаковкаЦО");
	КонецЕсли;
	
	Параметры.Вставить("ТекстЗапросаОтборПоНоменклатуре", ТекстЗапросаОтборПоНоменклатуре);
	Параметры.Вставить("ТекстЗапросаОтборСпособРаспределенияЗатрат", "&СпособРаспределенияЗатратНаВыходныеИзделия = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)");
	Параметры.Вставить("Дата", "&Дата");
	
	Возврат Параметры;
	
КонецФункции

Процедура ВыполнитьПодстановкуАлгоритмаРасчетаДолейСтоимости(ТекстЗапроса, Подстановка, ИспользуетсяЦенообразование25 = Ложь) Экспорт
	
	Шаблон = "
	|ВЫБОР
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)
	|	
	|		ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЕСТЬNULL(ПлановыеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1), 0) * ВЫБОР
	|				КОГДА &Валюта <> ПлановыеЦены.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|						ТОГДА 
	|							(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|							/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ * &ИсточникКоличество КАК ЧИСЛО(31,2))
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему)
	|	
	|		ТОГДА &Объем * &ИсточникКоличество
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу)
	|	
	|		ТОГДА &Вес * &ИсточникКоличество
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости)
	|	
	|		ТОГДА &ИсточникДоляСтоимости
	|	
	|	ИНАЧЕ 0
	|	
	|КОНЕЦ
	|;
	|ВЫБОР
	|
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости)
	|	
	|		ТОГДА ЕСТЬNULL(ЕСТЬNULL(ПлановыеЦены.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ВЫБОР
	|				КОГДА &Валюта <> ПлановыеЦены.Валюта
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|							ТОГДА 
	|								(КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|								/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ, 0)
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоОбъему)
	|	
	|		ТОГДА &Объем
	|	
	|	КОГДА &Параметр = ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоВесу)
	|	
	|		ТОГДА &Вес
	|	
	|	ИНАЧЕ 0
	|
	|КОНЕЦ
	|;
	|";
	
	Если ИспользуетсяЦенообразование25 Тогда
		Шаблон = Шаблон + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|		ВидЦены = &ВидЦены
		|		И &ТекстЗапросаОтборПоНоменклатуре
		|		И &ТекстЗапросаОтборСпособРаспределенияЗатрат
		|) КАК ПлановыеЦены
		|ПО &ИсточникНоменклатура   = ПлановыеЦены.Номенклатура
		| И &ИсточникХарактеристикаЦО = ПлановыеЦены.ХарактеристикаЦО
		| И &СерияЦО = ПлановыеЦены.СерияЦО
		| И &УпаковкаЦО = ПлановыеЦены.УпаковкаЦО
		|
		|";
	Иначе
		Шаблон = Шаблон + "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|		ВидЦены = &ВидЦены
		|		И &ТекстЗапросаОтборПоНоменклатуре
		|		И &ТекстЗапросаОтборСпособРаспределенияЗатрат
		|) КАК ПлановыеЦены
		|ПО &ИсточникНоменклатура   = ПлановыеЦены.Номенклатура
		| И &ИсточникХарактеристика = ПлановыеЦены.Характеристика
		|
		|";
	КонецЕсли;
	
	Шаблон = Шаблон + "ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|ПО 
	|	ПлановыеЦены.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта И БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалюты
	|	ПО ИСТИНА
	|";
	
	
	Шаблон = СтрЗаменить(Шаблон, "&Параметр", Подстановка.ИсточникСпособРаспределенияЗатратНаВыходныеИзделия);
	
	Шаблон = СтрЗаменить(Шаблон, "&Вес",                 Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("&ИсточникЕдиницаИзмерения", "&ИсточникНоменклатура"));
	Шаблон = СтрЗаменить(Шаблон, "&Объем",               Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("&ИсточникЕдиницаИзмерения", "&ИсточникНоменклатура"));
	Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаКоэффициентУпаковки1", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ПлановыеЦены.Упаковка", "ПлановыеЦены.Номенклатура"));
	
	Шаблон = СтрЗаменить(Шаблон, "&Дата",                Подстановка.Дата);
	Если ИспользуетсяЦенообразование25 Тогда
		Шаблон = СтрЗаменить(Шаблон, "&ИсточникХарактеристикаЦО", Подстановка.ИсточникХарактеристикаЦО);
		Шаблон = СтрЗаменить(Шаблон, "&СерияЦО",                  Подстановка.ИсточникСерияЦО);
		Шаблон = СтрЗаменить(Шаблон, "&УпаковкаЦО",               Подстановка.ИсточникУпаковкаЦО);
	КонецЕсли;
	
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникНоменклатура",     Подстановка.ИсточникНоменклатура);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникХарактеристика",   Подстановка.ИсточникХарактеристика);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникУпаковка",         Подстановка.ИсточникУпаковка);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникЕдиницаИзмерения", Подстановка.ИсточникЕдиницаИзмерения);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникКоличество",       Подстановка.ИсточникКоличество);
	Шаблон = СтрЗаменить(Шаблон, "&ИсточникДоляСтоимости",    Подстановка.ИсточникДоляСтоимости);
	
	Если ЗначениеЗаполнено(Подстановка.ТекстЗапросаОтборПоНоменклатуре) Тогда
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборПоНоменклатуре", Подстановка.ТекстЗапросаОтборПоНоменклатуре);
	Иначе
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборПоНоменклатуре", "ИСТИНА");
	КонецЕсли;
	Если Подстановка.ИсточникСпособРаспределенияЗатратНаВыходныеИзделия = "&СпособРаспределенияЗатратНаВыходныеИзделия" Тогда
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборСпособРаспределенияЗатрат", Подстановка.ТекстЗапросаОтборСпособРаспределенияЗатрат);
	Иначе
		Шаблон = СтрЗаменить(Шаблон, "&ТекстЗапросаОтборСпособРаспределенияЗатрат", "ИСТИНА");
	КонецЕсли;
	
	Шаблоны = СтрРазделить(Шаблон,";");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.СоединениеДоляСтоимости, Шаблоны[2]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.ДоляСтоимостиНаЕдиницу,  Шаблоны[1]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Подстановка.ДоляСтоимости,           Шаблоны[0]);
	
КонецПроцедуры

Процедура ВыполнитьПодстановкуТекстаЗапросаАвторасчетаЛюбойХарактеристики(ТекстЗапроса, ПараметрыРаспределенияЗатрат, ИспользуетсяЦенообразование25)
	
	Если Не ПараметрыРаспределенияЗатрат.АвтоРасчетЛюбойХарактеристики Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоПлановойСтоимости Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть", "ТабличнаяЧастьДляАвторасчета") + 
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныНоменклатуры.ХарактеристикаЦО) КАК ХарактеристикаЦО
		|ПОМЕСТИТЬ ВтАвтоподборХарактеристики
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|			,
		|			ВидЦены = &ВидЦены
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						Отбор.Номенклатура
		|					ИЗ
		|						ТабличнаяЧастьДляАвторасчета КАК Отбор)) КАК ЦеныНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.Номенклатура
		|;
		|	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки        КАК НомерСтроки,
		|
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			) ТОГДА
		|			ЕСТЬNULL(АвтоподборХарактеристики.ХарактеристикаЦО, ТабличнаяЧасть.ХарактеристикаЦО)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|	КОНЕЦ                             КАК ХарактеристикаЦО,
		|	ТабличнаяЧасть.СерияЦО           КАК СерияЦО,
		|	ТабличнаяЧасть.УпаковкаЦО         КАК УпаковкаЦО,
		|
		|	ТабличнаяЧасть.Упаковка           КАК Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество         КАК Количество,
		|
		|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
		|
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	ТабличнаяЧастьДляАвторасчета КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАвтоподборХарактеристики КАК АвтоподборХарактеристики
		|		ПО ТабличнаяЧасть.Номенклатура = АвтоподборХарактеристики.Номенклатура
		|			И (ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|;
		|";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть", "ТабличнаяЧастьДляАвторасчета") + 
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныНоменклатуры.Характеристика) КАК Характеристика
		|ПОМЕСТИТЬ ВтАвтоподборХарактеристики
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
		|			,
		|			ВидЦены = &ВидЦены
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						Отбор.Номенклатура
		|					ИЗ
		|						ТабличнаяЧастьДляАвторасчета КАК Отбор)) КАК ЦеныНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.Номенклатура
		|;
		|	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки        КАК НомерСтроки,
		|
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.Номенклатура.ИспользованиеХарактеристик В (
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			) ТОГДА
		|			ЕСТЬNULL(АвтоподборХарактеристики.Характеристика, ТабличнаяЧасть.Характеристика)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                             КАК Характеристика,
		|
		|	ТабличнаяЧасть.Упаковка           КАК Упаковка,
		|	ТабличнаяЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ТабличнаяЧасть.Количество         КАК Количество,
		|
		|	ТабличнаяЧасть.ДоляСтоимости КАК ДоляСтоимости
		|
		|ПОМЕСТИТЬ ТабличнаяЧасть
		|ИЗ
		|	ТабличнаяЧастьДляАвторасчета КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАвтоподборХарактеристики КАК АвтоподборХарактеристики
		|		ПО ТабличнаяЧасть.Номенклатура = АвтоподборХарактеристики.Номенклатура
		|			И (ТабличнаяЧасть.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|;
		|";
	КонецЕсли;
	
КонецПроцедуры

Функция ИтогиДолейСтоимостиПоГруппировкам(ТабличнаяЧасть, ПараметрыРаспределенияЗатрат, Группировки = "") Экспорт
	
	Результат = Новый Соответствие;
	СвойстваГруппировок = Новый Соответствие;
	
	ПоляСвязи = СтрРазделить(ПараметрыРаспределенияЗатрат.ПоляСвязи, ",");
	
	Для каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> "" Тогда
			Группировка = Строка[ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат];
		Иначе
			Группировка = "";
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено И Строка.Отменено Тогда
			
			Итоги = Результат[Группировка];
			Если Итоги = Неопределено Тогда
				
				Итоги = Новый Структура();
				
				Итоги.Вставить("Количество", 0);
				Итоги.Вставить("ДоляСтоимости", 0);
				Итоги.Вставить("ДоляСтоимостиОбязательна", Ложь);
				Итоги.Вставить("ДоляСтоимостиРассчитывается", Ложь);
				Итоги.Вставить("ИспользуетсяПараметризация", Ложь);
				Итоги.Вставить("КоличествоСтрокВГруппировке", 0);
				
				Результат.Вставить(Группировка, Итоги);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат <> ""
			И Группировки <> Неопределено
			И Группировки.Найти(Группировка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуетсяПараметризация = ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации
			И (Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
				ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
				ИЛИ Строка.РасчетПоФормуле);
		
		ДоляСтоимостиРассчитывается = ПроизводствоКлиентСервер.ДоляСтоимостиРассчитывается(Строка, ПараметрыРаспределенияЗатрат);
		Итоги = Результат[Группировка];
		
		Если Итоги = Неопределено Тогда
			
			Итоги = Новый Структура();
			Итоги.Вставить("Количество", Строка.Количество);
			Итоги.Вставить("ДоляСтоимости", Строка.ДоляСтоимости);
			Итоги.Вставить("ДоляСтоимостиОбязательна", ДоляСтоимостиРассчитывается);
			Итоги.Вставить("ДоляСтоимостиРассчитывается", ДоляСтоимостиРассчитывается);
			Итоги.Вставить("ИспользуетсяПараметризация", ИспользуетсяПараметризация);
			Итоги.Вставить("КоличествоСтрокВГруппировке", 1);
			
			Если ЗначениеЗаполнено(ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке) Тогда
				ДоляСтоимости = ПараметрыРаспределенияЗатрат.ДоляСтоимостиДругихДокументовВГруппировке;
				Если ЗначениеЗаполнено(ДоляСтоимости) Тогда
					Итоги.ДоляСтоимостиОбязательна = Истина;
					Итоги.ДоляСтоимости = Итоги.ДоляСтоимости + ДоляСтоимости;
				КонецЕсли;
			КонецЕсли;
			
			Результат.Вставить(Группировка, Итоги);
			
		Иначе
			Итоги.Количество = Итоги.Количество + Строка.Количество;
			Итоги.ДоляСтоимости = Итоги.ДоляСтоимости + Строка.ДоляСтоимости;
			Итоги.ИспользуетсяПараметризация = Макс(Итоги.ИспользуетсяПараметризация, ИспользуетсяПараметризация);
			Итоги.КоличествоСтрокВГруппировке = Итоги.КоличествоСтрокВГруппировке + 1;
		КонецЕсли;
		
		Если Не Итоги.ДоляСтоимостиОбязательна Тогда
			Если Итоги.ДоляСтоимости <> 0 Тогда
				Итоги.ДоляСтоимостиОбязательна = Истина;
			ИначеЕсли Итоги.ИспользуетсяПараметризация И Итоги.КоличествоСтрокВГруппировке > 1 Тогда
				Итоги.ДоляСтоимостиОбязательна = Истина;
			Иначе
				Если СвойстваГруппировок[Группировка] <> Неопределено Тогда
					Для каждого Поле Из ПоляСвязи Цикл
						Если Строка[Поле] <> СвойстваГруппировок[Группировка][Поле] Тогда
							Итоги.ДоляСтоимостиОбязательна = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ДанныеСтроки = Новый Структура(ПараметрыРаспределенияЗатрат.ПоляСвязи);
					ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
					СвойстваГруппировок.Вставить(Группировка, ДанныеСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПризнакЕстьОшибкиЗаполненияДолиСтоимости(Строка, Итоги, Отменено, ПараметрыРаспределенияЗатрат)
	
	Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Ложь;
	
	РасчетПоФормуле = (ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации И Строка.РасчетПоФормуле);
	
	Автовыбор = ПараметрыРаспределенияЗатрат.ЕстьПараметризацияРесурснойСпецификации И 
		(Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
			ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ);
	
	Если Отменено ИЛИ Строка.ДоляСтоимости > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Автовыбор И Итоги.ДоляСтоимостиРассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетПоФормуле И Строка.ДоляСтоимостиНаЕдиницу > 0 И Итоги.ДоляСтоимостиРассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	Если Итоги.ДоляСтоимостиОбязательна ИЛИ Строка.Количество = 0 И РасчетПоФормуле = Ложь Тогда
		Строка.ЕстьОшибкиЗаполненияДолиСтоимости = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция НазванияЭлементовДолиСтоимости(Расположение)

	ВозвращаемоеЗначение = Новый Структура("ДоляСтоимости, ДоляСтоимостиПроцент, ЕстьОшибкиЗаполненияДолиСтоимости");
	
	Если Расположение = "Продукция" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "ПродукцияДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "ПродукцияДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "ПродукцияЕстьОшибкиЗаполненияДолиСтоимости";
	ИначеЕсли Расположение = "ВыходныеИзделия" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "ВыходныеИзделияДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "ВыходныеИзделияДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости";
	ИначеЕсли Расположение = "ПобочныеИзделия" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "ПобочныеИзделияДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "ПобочныеИзделияДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "ПобочныеИзделияЕстьОшибкиЗаполненияДолиСтоимости";
	ИначеЕсли Расположение = "РедактированиеЭтаповВыходныеИзделия" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "РедактированиеЭтаповВыходныеИзделияДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "РедактированиеЭтаповВыходныеИзделияДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "РедактированиеЭтаповВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости";
	ИначеЕсли Расположение = "Партии" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "ПартииДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "ПартииДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "ПартииЕстьОшибкиЗаполненияДолиСтоимости";
	//++ НЕ УТКА
	ИначеЕсли Расположение = "Товары" Тогда
		ВозвращаемоеЗначение.ДоляСтоимости = "ТоварыДоляСтоимости";
		ВозвращаемоеЗначение.ДоляСтоимостиПроцент = "ТоварыДоляСтоимостиПроцент";
		ВозвращаемоеЗначение.ЕстьОшибкиЗаполненияДолиСтоимости = "ТоварыЕстьОшибкиЗаполненияДолиСтоимости";
	//-- НЕ УТКА
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимое значение параметра функции';
								|en = 'Invalid function parameter value'");
	КонецЕсли;
	Возврат ВозвращаемоеЗначение

КонецФункции

#КонецОбласти

#Область ОтборВДинамическомСписке

// Добавляет отбор в массив отборов.
//
// Параметры:
//  СписокОтборов - Массив из Структура - содержит:
//                             * Имя          - Строка -
//                             * ТекстЗапроса - Строка -
//                             * Параметры    - Структура, Произвольный -
//                             * Использовать - Булево -
//                             * Операция     - Строка -
//  Имя          - Строка -
//  ТекстЗапроса - Строка -
//  Параметры    - Структура, Произвольный -
//  Использовать - Булево -
//  Операция     - Строка -
//
Процедура ДобавитьОтборВСписокОтборов(СписокОтборов, Имя, ТекстЗапроса, Параметры = Неопределено, Использовать = Истина, Операция = "СсылкаВСписке") Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Имя", Имя);
	Отбор.Вставить("ТекстЗапроса", ТекстЗапроса);
	Отбор.Вставить("Параметры", Параметры);
	Отбор.Вставить("Использовать", Использовать);
	Отбор.Вставить("Операция", Операция);
	
	СписокОтборов.Добавить(Отбор);
	
КонецПроцедуры

Процедура ВыполнитьПодстановкуОтборовВТекстЗапросаДинамическогоСписка(ТекстЗапроса, СписокОтборов, ИмяТаблицы = "ОсновнаяТаблица") Экспорт
	
	Если Не ЗначениеЗаполнено(СписокОтборов) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ПакетВыборкиДанных = СхемаЗапроса.ПакетЗапросов.Количество()-1;
	Отборы = СхемаЗапроса.ПакетЗапросов[ПакетВыборкиДанных].Операторы[0].Отбор;
	
	Для каждого Отбор Из СписокОтборов Цикл
		
		Если Не Отбор.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если Отбор.Операция = "СсылкаВСписке" Тогда
			
			ТекстОтбора = СтрШаблон("(%1.Ссылка) В
				|(
				|	%2
				|)",
				ИмяТаблицы,
				Отбор.ТекстЗапроса);
			
		ИначеЕсли Отбор.Операция = "СсылкаНеВСписке" Тогда
			
			ТекстОтбора = СтрШаблон("НЕ (%1.Ссылка) В
				|(
				|	%2
				|)",
				ИмяТаблицы,
				Отбор.ТекстЗапроса);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Передана несуществующая операция отбора!';
									|en = 'Non-existing filter operation is transferred.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		
		ТекстОтбора = СтрЗаменить(ТекстОтбора, "&Ссылка", ИмяТаблицы + ".Ссылка");
		Отборы.Добавить(ТекстОтбора);
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

// Устанавливает параметры отбора динамического списка.
//
// Параметры:
//  Список - ДинамическийСписок - обрабатываемый динамический список.
//  СписокОтборов - Массив Из Структура - содержит:
//                             * Имя          - Строка -
//                             * ТекстЗапроса - Строка -
//                             * Параметры    - Структура, Произвольный -
//                             * Использовать - Булево -
//                             * Операция     - Строка -
//
Процедура УстановитьПараметрыОтбораДинамическогоСписка(Список, СписокОтборов) Экспорт
	
	Для каждого Отбор Из СписокОтборов Цикл
		
		Если Не Отбор.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Отбор.Параметры) = Тип("Структура") Тогда
			
			Для каждого Параметр Из Отбор.Параметры Цикл
				
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Список,
					Параметр.Ключ,
					Параметр.Значение);
				
			КонецЦикла;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				Список,
				Отбор.Имя,
				Отбор.Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЖурналаРегистрации

Функция СобытиеРасчетНормативнойДлительности() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Расчет нормативной длительности';
								|en = 'Standard duration calculation'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеСозданиеСпецификации() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Создание спецификации';
								|en = 'Generate bill of materials'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеКопированиеСпецификации() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Копирование спецификации';
								|en = 'Copy the bill of materials'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеЗаменаСпецификаций() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Межцеховое управление';
								|en = 'Production scheduling and controlling'", КодЯзыка),
						 НСтр("ru = 'Замена спецификаций';
								|en = 'Bills of materials replacement'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеПланированиеГрафикаПроизводства() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Межцеховое управление';
								|en = 'Production scheduling and controlling'", КодЯзыка),
						 НСтр("ru = 'Планирование графика производства';
								|en = 'Production schedule creating'", КодЯзыка));
	
	Возврат Событие;
		
КонецФункции

Функция СобытиеРедактированиеЦепочкиЭтапов() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Межцеховое управление';
								|en = 'Production scheduling and controlling'", КодЯзыка),
						 НСтр("ru = 'Редактирование цепочки этапов';
								|en = 'Stage chain editing'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеПередачаЭтаповКВыполнению() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Межцеховое управление';
								|en = 'Production scheduling and controlling'", КодЯзыка),
						 НСтр("ru = 'Передача этапов к выполнению';
								|en = 'Release stages'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеПометкаНаУдалениеЭтапов() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Межцеховое управление';
								|en = 'Production scheduling and controlling'", КодЯзыка),
						 НСтр("ru = 'Пометка на удаление этапов производства';
								|en = 'Production stage deletion mark'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеРасчетОчередиПроизводственныхОпераций() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Внутрицеховое управление';
								|en = 'Shop management'", КодЯзыка),
						 НСтр("ru = 'Формирование очереди производственных операций';
								|en = 'Generating routing operation queue'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеЗаполнениеЭтаповПоПроизводственнымОперациям() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'Внутрицеховое управление';
								|en = 'Shop management'", КодЯзыка),
						 НСтр("ru = 'Заполнение этапов по производственным операциям';
								|en = 'Filling in stages according to routing operations'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеРасчетЗначенияСвойстваПриАвтовыборе() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Расчет значения свойства при автовыборе';
								|en = 'Calculating property value on autoselect'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеАвтовыборХарактеристикиПоАлгоритму() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Автовыбор характеристики по алгоритму';
								|en = 'Automatic selection of variant as per algorithm'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеРасчетКоличестваПоФормуле() Экспорт
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие  = СтрШаблон("%1.%2",
						 НСтр("ru = 'НСИ производства';
								|en = 'Manufacturing master data'", КодЯзыка),
						 НСтр("ru = 'Расчет количества по формуле';
								|en = 'Calculating quantity using the formula'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеРасчетДлительностиДоВыпускаПоЭтапамПроизводства() Экспорт

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Событие = СтрШаблон("%1.%2",
					 НСтр("ru = 'Межцеховое управление';
							|en = 'Production scheduling and controlling'", КодЯзыка),
					 НСтр("ru = 'Расчет длительности до выпуска по этапам производства';
							|en = 'Calculation of the duration before release by production stages'", КодЯзыка));
	
	Возврат Событие;
	
КонецФункции

Функция СобытиеОбработкаОчередиЗаданий() Экспорт
	
	Возврат НСтр("ru = 'Обработка очереди заданий';
				|en = 'Job queue processing'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область Таблица

// Возвращает структуру полей для выгрузки и заполнения таблицы.
//
// Возвращаемое значение:
// 	Структура - содержит поля:
//		* ОсновныеПоля		  - Строка 	  - основные поля таблицы, разделенные запятыми
//		* ДополнительныеПоля  - Структура - структура дополнительных полей - ключ:	имя поле 
//																			 значение:	описание типов
//		* ПодменяемыеПоля     - Структура - структура подменяемых полей - клюя:	имя	заполняемого поле
//																		  значение:	имя	поле источник данных для заполнения
//		* ЗначенияПоУмолчанию - Структура - структура значений по умолчанию - ключ:	имя поле
//																			  значение:	значение поле
// 
Функция СтруктураПолейТаблицы() Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновныеПоля", "");
	СтруктураПолей.Вставить("ДополнительныеПоля", Новый Структура);
	СтруктураПолей.Вставить("ПодменяемыеПоля", Новый Структура);
	СтруктураПолей.Вставить("ЗначенияПоУмолчанию", Новый Структура);
	
	Возврат СтруктураПолей;
	
КонецФункции

// Возвращает адрес временного хранилища таблицы значение, созданного на основании данных строк таблицы
//
// Параметры:
// 	Форма                 - ФормаКлиентскогоПриложения 		- форма с таблицей с выделенными строками
// 	ИмяОбъекта            - Строка           		- имя объекта владельца таблицы
// 	ИмяТаблицы            - Строка           		- имя таблицы
// 	ВыделенныеСтроки      - Булево           		- Истина: только выделенные строки
//                                           		  Ложь: все строки
// 	СтруктураПолейТаблицы - см. ПроизводствоСервер.СтруктураПолейТаблицы
//	ОтборСтрок            - Структура, Неопределено - ключ: имя реквизита таблицы
//													  значение: массив значений реквизита таблицы для отбора
//
// Возвращаемое значение:
// 	Строка - адрес временного хранилища таблицы значение 
// 
Функция ПоместитьВоВременноеХранилищеДанныеСтрок(
			Форма, ИмяОбъекта, ИмяТаблицы, ВыделенныеСтроки, СтруктураПолейТаблицы, ОтборСтрок = Неопределено) Экспорт
	
	ТаблицаДанных = Форма[ИмяОбъекта][ИмяТаблицы];
	
	ОсновныеПоля = СтруктураПолейТаблицы.ОсновныеПоля;
	ДополнительныеПоля = СтруктураПолейТаблицы.ДополнительныеПоля;
	ПодменяемыеПоля = СтруктураПолейТаблицы.ПодменяемыеПоля;
	ЗначенияПоУмолчанию = СтруктураПолейТаблицы.ЗначенияПоУмолчанию;
	
	Таблица = ?(ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений"),	
					ТаблицаДанных.СкопироватьКолонки(ОсновныеПоля),	ТаблицаДанных.Выгрузить(Новый Массив, ОсновныеПоля));
	
	Если ДополнительныеПоля <> Неопределено Тогда
		Для каждого ДополнительноеПоле Из ДополнительныеПоля Цикл
			Таблица.Колонки.Добавить(ДополнительноеПоле.Ключ, ДополнительноеПоле.Значение);	
		КонецЦикла;	
	КонецЕсли;	
	
	ДанныеСтрок = ?(ВыделенныеСтроки, Форма.Элементы[ИмяТаблицы].ВыделенныеСтроки, ТаблицаДанных);
	Для каждого СтрокаДанных Из ДанныеСтрок Цикл
		
		ТекущаяСтрока = ?(ВыделенныеСтроки, ТаблицаДанных.НайтиПоИдентификатору(СтрокаДанных), СтрокаДанных);
		
		Если ОтборСтрок <> Неопределено Тогда
			
			ОтменитьОбработкуСтроки = Ложь;
			
			Для каждого ЭлементОтбора Из ОтборСтрок Цикл
				Если ЭлементОтбора.Значение.Найти(ТекущаяСтрока[ЭлементОтбора.Ключ]) = Неопределено Тогда
					ОтменитьОбработкуСтроки = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ОтменитьОбработкуСтроки Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;	
		
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущаяСтрока);
		
		Для каждого ПодменяемоеПоле Из ПодменяемыеПоля Цикл
			СтрокаТаблицы[ПодменяемоеПоле.Ключ] = ТекущаяСтрока[ПодменяемоеПоле.Значение];	
		КонецЦикла;	
		
		Если ЗначенияПоУмолчанию <> Неопределено Тогда
			Для каждого ЗначениеПоУмолчанию Из ЗначенияПоУмолчанию Цикл
				Если Не ЗначениеЗаполнено(СтрокаТаблицы[ЗначениеПоУмолчанию.Ключ]) Тогда
					СтрокаТаблицы[ЗначениеПоУмолчанию.Ключ] = ЗначениеПоУмолчанию.Значение;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, Форма.УникальныйИдентификатор);
	
КонецФункции	

// Сворачивает таблицу значение с возможностью сохранением порядка строк
// В случаи, когда параметр КолонкиСуммирования не указан все числовые колонки попадают в колонки суммирования.
// Те числовые колонки, которые должны попасть в колонки группировки, нужно перечислить в параметре КолонкиГруппировок.
// Нечисловые колонки перечислять в КолонкиГруппировки не нужно.
// При сохранении порядка строк колонки, которые не участвуют в сворачивании, не удаляются и остаются заполненными
// значением первой найденной строки в разрезе колонок группировки
// 
// Параметры:
//  Таблица			    - ТаблицаЗначений              - Таблица сворачивания
//  КолонкиГруппировок  - Строка, Массив, Неопределено - Колонки группировки таблицы
//  КолонкиСуммирования - Строка, Массив, Неопределено - Колонки сворачивания таблицы
//  СохранитьПорядок    - Булево                       - Признак сохранения порядка строк
//
Процедура СвернутьТаблицуЗначений(Таблица, Знач КолонкиГруппировок = Неопределено, Знач КолонкиСуммирования = Неопределено, СохранитьПорядок = Ложь) Экспорт
	
	Если КолонкиСуммирования = Неопределено Тогда
		
		Если КолонкиГруппировок = Неопределено Тогда
			КолонкиГруппировок = Новый Массив;
		ИначеЕсли ТипЗнч(КолонкиГруппировок) = Тип("Строка") Тогда
			КолонкиГруппировок = СтрРазделить(КолонкиГруппировок, ",", Ложь);
		КонецЕсли;
		
		КолонкиСуммирования = Новый Массив;
		
		Для Каждого Колонка Из Таблица.Колонки Цикл
			Если ТипЗнч(Колонка.ТипЗначения.ПривестиЗначение()) = Тип("Число") Тогда
				Если КолонкиГруппировок.Найти(Колонка.Имя) = Неопределено Тогда
					КолонкиСуммирования.Добавить(Колонка.Имя);
				КонецЕсли;
			Иначе
				КолонкиГруппировок.Добавить(Колонка.Имя);	
			КонецЕсли;
		КонецЦикла;	
		
		КолонкиГруппировок  = СтрСоединить(КолонкиГруппировок , ",");
		КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ",");
		
	ИначеЕсли КолонкиГруппировок = Неопределено Тогда	
		
		Если ТипЗнч(КолонкиСуммирования) = Тип("Строка") Тогда
			КолонкиСуммирования = СтрРазделить(КолонкиСуммирования, ",", Ложь);
		КонецЕсли;
		
		КолонкиГруппировок = Новый Массив;
		
		Для Каждого Колонка Из Таблица.Колонки Цикл
			Если КолонкиСуммирования.Найти(Колонка.Имя) = Неопределено Тогда
				КолонкиГруппировок.Добавить(Колонка.Имя);
			КонецЕсли;	
		КонецЦикла;
		
		КолонкиГруппировок  = СтрСоединить(КолонкиГруппировок , ",");
		КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ",");
		
	Иначе	
		
		Если ТипЗнч(КолонкиГруппировок) = Тип("Массив") Тогда
			КолонкиГруппировок = СтрСоединить(КолонкиГруппировок, ",");	
		КонецЕсли;	
		
		Если ТипЗнч(КолонкиСуммирования) = Тип("Массив") Тогда
			КолонкиСуммирования = СтрСоединить(КолонкиСуммирования, ",");	
		КонецЕсли;	
		
	КонецЕсли;
	
	
	Если СохранитьПорядок Тогда
		
		МассивКолонокСуммирования = СтрРазделить(КолонкиСуммирования, ",");
		
		Таблица.Индексы.Добавить(КолонкиГруппировок);
		
		ИндексСтроки    = 0;
		КоличествоСтрок = Таблица.Количество();
		СтруктураОтбора = Новый Структура(КолонкиГруппировок);
		
		Пока КоличествоСтрок > 0 Цикл
			
			СтрокаГруппировки = Таблица[ИндексСтроки];
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаГруппировки);
			
			МассивСтрок = Таблица.НайтиСтроки(СтруктураОтбора);
			ИндексНайденнойСтроки = МассивСтрок.ВГраница();
			Пока ИндексНайденнойСтроки > 0 Цикл
				
				НайденнаяСтрока = МассивСтрок[ИндексНайденнойСтроки];
				
				Для каждого КолонкаСуммирования Из МассивКолонокСуммирования Цикл
					СтрокаГруппировки[КолонкаСуммирования] = СтрокаГруппировки[КолонкаСуммирования] 
															 + НайденнаяСтрока[КолонкаСуммирования];  
				КонецЦикла;
				
				Таблица.Удалить(НайденнаяСтрока);
				
				КоличествоСтрок       = КоличествоСтрок - 1;
				ИндексНайденнойСтроки = ИндексНайденнойСтроки - 1;
				
			КонецЦикла;	
			
			КоличествоСтрок = КоличествоСтрок - 1;
			ИндексСтроки    = ИндексСтроки + 1;
			
		КонецЦикла;
	
	Иначе
		
		Таблица.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает таблицу значений, добавляя колонку и заполняя 
// итоговыми значениями (в разрезе колонок группировки) другой колонки на основании данных строк таблицы.
//
// Параметры:
// 	Форма             - ФормаКлиентскогоПриложения - форма.
// 	ИмяОбъекта        - Строка - имя объекта.
// 	ИмяТаблицы        - Строка - имя таблицы.
// 	ВыделенныеСтроки  - Булево - Истина - только выделенные строки
//                               Ложь   - все строки.
//  НастройкиКолонок  - Структура - Содержит:
//   *ИмяСуммируемойКолонки - Строка - имя колонки источника.
//   *ИтоговаяКолонка       - Структура - Содержит:
//     **Имя         - Строка                      - имя колонки
//     **ТипЗначения - ОписаниеТипов, Неопределено - тип колонки, если не заполнено, тогда тип суммируемой колонки.
//   *КолонкиГруппировок - Строка - имена колонок, разделенных запятыми, по которым рассчитывается ИтоговаяКолонка.
//	ОтборСтрок        - Структура, Неопределено - ключ     - имя реквизита таблицы
//                                                значение - массив значений реквизита таблицы для отбора.
//  ИсточникИтогов 	  - ТаблицаЗначений, ДанныеФормыКоллекция, Неопределено - Таблица значений расчета итогов, 
//                                                                            если Неопределено, 
//                                                                            тогда определяется через форму.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - результирующая таблица значение
//
Функция ТаблицаСИтоговымЗначениемКолонкиПоСтрокам(
			Форма, ИмяОбъекта, ИмяТаблицы, ВыделенныеСтроки, НастройкиКолонок, ОтборСтрок = Неопределено, ИсточникИтогов = Неопределено) Экспорт
	
	ИмяСуммируемойКолонки = НастройкиКолонок.ИмяСуммируемойКолонки;
	ИмяИтоговойКолонки = НастройкиКолонок.ИтоговаяКолонка.Имя;
	ТипИтоговойКолонки = НастройкиКолонок.ИтоговаяКолонка.ТипЗначения;
	КолонкиГруппировок = НастройкиКолонок.КолонкиГруппировок;
	
	ТаблицаДанных = Форма[ИмяОбъекта][ИмяТаблицы]; // ДанныеФормыКоллекция, ТаблицаЗначений
	ТаблицаИтогов = ?(ИсточникИтогов <> Неопределено, ИсточникИтогов, ТаблицаДанных);
	
	Таблица = ?(ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений"), 
					ТаблицаДанных.Выгрузить(Новый Массив), ТаблицаДанных.СкопироватьКолонки());
	
	Таблица.Колонки.Добавить(
		ИмяИтоговойКолонки, ?(ТипИтоговойКолонки = Неопределено, Таблица.Колонки[ИмяСуммируемойКолонки].ТипЗначения, ТипИтоговойКолонки));
		
	Таблица.Индексы.Добавить(КолонкиГруппировок);
	
	СтруктураОтбора = Новый Структура(КолонкиГруппировок);
	
	ТолькоВыделенныеСтроки = ВыделенныеСтроки И ТипЗнч(ТаблицаДанных) <> Тип("ТаблицаЗначений");
	
	ДанныеСтрок = ?(ТолькоВыделенныеСтроки, Форма.Элементы[ИмяТаблицы].ВыделенныеСтроки, ТаблицаДанных);
	
	Для каждого СтрокаДанных Из ДанныеСтрок Цикл
		
		ТекущаяСтрока = ?(ТолькоВыделенныеСтроки, ТаблицаДанных.НайтиПоИдентификатору(СтрокаДанных), СтрокаДанных);
		
		Если ОтборСтрок <> Неопределено Тогда
			
			ОтменитьОбработкуСтроки = Ложь;
			
			Для каждого ЭлементОтбора Из ОтборСтрок Цикл
				Если ЭлементОтбора.Значение.Найти(ТекущаяСтрока[ЭлементОтбора.Ключ]) = Неопределено Тогда
					ОтменитьОбработкуСтроки = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ОтменитьОбработкуСтроки Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ТекущаяСтрока);
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрока);
		
		МассивСтрок = Таблица.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 1 Тогда
			ЗначениеИтоговойКолонки = МассивСтрок[0][ИмяИтоговойКолонки];
		Иначе
			ЗначениеИтоговойКолонки = 0;
			МассивСтрок = ТаблицаИтогов.НайтиСтроки(СтруктураОтбора);
			Для каждого НайденнаяСтрока Из МассивСтрок Цикл
				ЗначениеИтоговойКолонки = ЗначениеИтоговойКолонки + НайденнаяСтрока[ИмяСуммируемойКолонки];	
			КонецЦикла;	
		КонецЕсли;
		
		Таблица[Таблица.Количество() - 1][ИмяИтоговойКолонки] = ЗначениеИтоговойКолонки;
		
	КонецЦикла;	
	
	Возврат Таблица;
	
КонецФункции	

#КонецОбласти

#Область Прочее

Процедура СкопироватьЗначенияКолонки(Таблица, Источник, Приемник, СоздатьНовуюКолонку = Истина) Экспорт
	
	Если СоздатьНовуюКолонку Тогда
		
		Таблица.Колонки.Добавить(Приемник, Таблица.Колонки[Источник].ТипЗначения);
	КонецЕсли;
	Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку(Источник), Приемник); 
	
КонецПроцедуры

Функция МассивЗначений(Значение, СоздатьНовыйМассив = Ложь) Экспорт

	Перем Результат;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Если Значение <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
		
	ИначеЕсли СоздатьНовыйМассив Тогда
		
		Результат = Новый Массив;
		Для каждого ЭлементКоллекции Из Значение Цикл
			Результат.Добавить(ЭлементКоллекции);
		КонецЦикла;
		
	Иначе
		
		Результат = Значение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьМассив(КоличествоЭлементов = 1, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Для Сч = 1 По КоличествоЭлементов Цикл
		
		Результат.Добавить(ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СледующийПараметрЗапроса(Текст, Параметр = "", Курсор = 1) Экспорт
	
	Параметр = "";
	Позиция = СтрНайти(Текст, "&", НаправлениеПоиска.СНачала, Курсор);
	Если Позиция > 0 Тогда
		Для Курсор = Позиция + 1 По СтрДлина(Текст) - 1 Цикл
			КодСимвола = КодСимвола(Текст, Курсор);
			Если (КодСимвола >= 48 И КодСимвола <= 57) // цифры
				Или (КодСимвола >= 65 И КодСимвола <= 90) // латиница большие
				Или (КодСимвола >= 97 И КодСимвола <= 122) // латиница маленькие
				Или (КодСимвола >= 1040 И КодСимвола <= 1103) // кириллица
				Или КодСимвола = 95 Тогда // символ "_"
				Продолжить;
			КонецЕсли;
			Параметр = Сред(Текст, Позиция + 1, Курсор - Позиция - 1);
			Возврат Истина;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, ИмяПоля)
	
	ПутьКДаннымПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПутиКДанным, ИмяПоля, ИмяОбъекта + "." + ИмяПоля);
	Возврат Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецФункции

// Возвращает структуру реквизитов производственного подразделения.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * Наименование - Строка -
//   * ПодразделениеДиспетчер - Булево -
//   * ПроизводствоПоЗаказам - Булево -
//   * ПроизводствоБезЗаказов - Булево -
//   * ИспользуетсяСписаниеЗатратНаВыпуск - Булево -
//   * ГрафикиРаботы - Массив -
//   * ИспользоватьБригадныеНаряды - Булево -
//   * ИспользоватьПерсональныеНаряды - Булево -
//
Функция СтруктураРеквизитовПроизводственногоПодразделения()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Наименование",           "");
	Параметры.Вставить("ПодразделениеДиспетчер", Ложь);
	
	Параметры.Вставить("ПроизводственноеПодразделение", Ложь);
	Параметры.Вставить("ПроизводствоПоЗаказам",  Ложь);
	Параметры.Вставить("ПроизводствоБезЗаказов", Ложь);
	
	Параметры.Вставить("ИспользуетсяСписаниеЗатратНаВыпуск", Ложь);
	
	Параметры.Вставить("ГрафикиРаботы", Новый Массив);
	
//++ НЕ УТКА
	Параметры.Вставить("ИнтервалПланирования",           Перечисления.ТочностьГрафикаПроизводства.День);
	Параметры.Вставить("НачалоИнтервалаПланирования",    '00010101');
	Параметры.Вставить("ОкончаниеИнтервалаПланирования", КонецДня('00010101'));
	
	//++ Устарело_Производство21
	Параметры.Вставить("УправлениеМаршрутнымиЛистами",    Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ);
	Параметры.Вставить("СпособПооперационногоУправления", Перечисления.СпособыУправленияОперациями.ПустаяСсылка());
	//-- Устарело_Производство21
	
	Параметры.Вставить("ИспользоватьПооперационноеУправление",   Ложь);
	Параметры.Вставить("ИспользоватьМатериалыВОперациях",        Ложь);
	Параметры.Вставить("ИспользоватьВыходныеИзделияВОперациях",  Ложь);
	Параметры.Вставить("ИспользоватьПооперационноеПланирование", Ложь);
	
	Параметры.Вставить("ИспользоватьСменныеЗадания", Ложь);
	Параметры.Вставить("ИспользоватьСмены",          Ложь);
	
	Параметры.Вставить("ИспользоватьУчастки",        Ложь);
	
//-- НЕ УТКА
	Параметры.Вставить("ИспользоватьБригадныеНаряды",    Ложь);
	Параметры.Вставить("ИспользоватьПерсональныеНаряды", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Определяет доступность команды "Изменить выделенные" в производственных документах и справочниках
// 
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево - Доступна команда изменить выделенные
Функция ДоступнаКомандаИзменитьВыделенные(ОбъектМетаданных = Неопределено) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
	
КонецФункции

// Преобразует исходный цвет в формат RGB
//
// Параметры:
//  ИсходныйЦвет - Цвет - Цвет который нужно преобразовать.
//
// Возвращаемое значение:
//   Цвет   - цвет в формате RGB
//
Функция ЦветВФорматеRGB(ИсходныйЦвет) Экспорт

	Если ИсходныйЦвет.Вид = ВидЦвета.Абсолютный Тогда
		
		Возврат ИсходныйЦвет;
		
	ИначеЕсли ИсходныйЦвет.Вид = ВидЦвета.WebЦвет Тогда
	
		СоответствиеЦветов = Новый Соответствие;
		СоответствиеЦветов.Вставить(WebЦвета.Аквамарин, Новый Цвет(127, 255, 212));
		СоответствиеЦветов.Вставить(WebЦвета.АкварельноСиний, Новый Цвет(240, 248, 255));
		СоответствиеЦветов.Вставить(WebЦвета.АнтикБелый, Новый Цвет(250, 235, 215));
		СоответствиеЦветов.Вставить(WebЦвета.Бежевый, Новый Цвет(245, 245, 220));
		СоответствиеЦветов.Вставить(WebЦвета.Белоснежный, Новый Цвет(255, 250, 250));
		СоответствиеЦветов.Вставить(WebЦвета.Белый, Новый Цвет(255, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.Бирюзовый, Новый Цвет(64, 224, 208));
		СоответствиеЦветов.Вставить(WebЦвета.БледноБирюзовый, Новый Цвет(175, 238, 238));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЗеленый, Новый Цвет(152, 251, 152));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЗолотистый, Новый Цвет(238, 232, 170));
		СоответствиеЦветов.Вставить(WebЦвета.БледноКрасноФиолетовый, Новый Цвет(219, 112, 147));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЛиловый, Новый Цвет(230, 230, 250));
		СоответствиеЦветов.Вставить(WebЦвета.БледноМиндальный, Новый Цвет(255, 235, 205));
		СоответствиеЦветов.Вставить(WebЦвета.БледноСиреневый, Новый Цвет(216, 191, 216));
		СоответствиеЦветов.Вставить(WebЦвета.Васильковый, Новый Цвет(100, 149, 237));
		СоответствиеЦветов.Вставить(WebЦвета.ВесеннеЗеленый, Новый Цвет(0, 255, 127));
		СоответствиеЦветов.Вставить(WebЦвета.Голубой, Новый Цвет(173, 216, 230));
		СоответствиеЦветов.Вставить(WebЦвета.ГолубойСКраснымОттенком, Новый Цвет(255, 240, 245));
		СоответствиеЦветов.Вставить(WebЦвета.ГолубойСоСтальнымОттенком, Новый Цвет(176, 196, 222));
		СоответствиеЦветов.Вставить(WebЦвета.ГрифельноСерый, Новый Цвет(112, 128, 144));
		СоответствиеЦветов.Вставить(WebЦвета.ГрифельноСиний, Новый Цвет(106, 90, 205));
		СоответствиеЦветов.Вставить(WebЦвета.Древесный, Новый Цвет(222, 184, 184));
		СоответствиеЦветов.Вставить(WebЦвета.ДымчатоБелый, Новый Цвет(245, 245, 245));
		СоответствиеЦветов.Вставить(WebЦвета.ЖелтоЗеленый, Новый Цвет(154, 205, 50));
		СоответствиеЦветов.Вставить(WebЦвета.Желтый, Новый Цвет(255, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗамшаСветлый, Новый Цвет(255, 228, 181));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленаяЛужайка, Новый Цвет(124, 252, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоватоЖелтый, Новый Цвет(127, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоватоЛимонный, Новый Цвет(0, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоЖелтый, Новый Цвет(173, 255, 47));
		СоответствиеЦветов.Вставить(WebЦвета.Зеленый, Новый Цвет(0, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленыйЛес, Новый Цвет(34, 139, 34));
		СоответствиеЦветов.Вставить(WebЦвета.Золотистый, Новый Цвет(218, 165, 32));
		СоответствиеЦветов.Вставить(WebЦвета.Золотой, Новый Цвет(255, 215, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Индиго, Новый Цвет(75, 0, 130));
		СоответствиеЦветов.Вставить(WebЦвета.Киноварь, Новый Цвет(205, 92, 92));
		СоответствиеЦветов.Вставить(WebЦвета.Кирпичный, Новый Цвет(178, 34, 34));
		СоответствиеЦветов.Вставить(WebЦвета.КожаноКоричневый, Новый Цвет(139, 69, 19));
		СоответствиеЦветов.Вставить(WebЦвета.Коралловый, Новый Цвет(255, 127, 80));
		СоответствиеЦветов.Вставить(WebЦвета.Коричневый, Новый Цвет(165, 42, 42));
		СоответствиеЦветов.Вставить(WebЦвета.КоролевскиГолубой, Новый Цвет(65, 105, 225));
		СоответствиеЦветов.Вставить(WebЦвета.КрасноФиолетовый, Новый Цвет(208, 32, 144));
		СоответствиеЦветов.Вставить(WebЦвета.Красный, Новый Цвет(255, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Кремовый, Новый Цвет(255, 251, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Лазурный, Новый Цвет(240, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЛимонноЗеленый, Новый Цвет(50, 205, 50));
		СоответствиеЦветов.Вставить(WebЦвета.Лимонный, Новый Цвет(255, 250, 205));
		СоответствиеЦветов.Вставить(WebЦвета.Лосось, Новый Цвет(250, 128, 114));
		СоответствиеЦветов.Вставить(WebЦвета.ЛососьСветлый, Новый Цвет(255, 160, 122));
		СоответствиеЦветов.Вставить(WebЦвета.ЛососьТемный, Новый Цвет(233, 150, 122));
		СоответствиеЦветов.Вставить(WebЦвета.Льняной, Новый Цвет(250, 240, 230));
		СоответствиеЦветов.Вставить(WebЦвета.Малиновый, Новый Цвет(220, 20, 60));
		СоответствиеЦветов.Вставить(WebЦвета.МятныйКрем, Новый Цвет(245, 255, 250));
		СоответствиеЦветов.Вставить(WebЦвета.НавахоБелый, Новый Цвет(255, 222, 173));
		СоответствиеЦветов.Вставить(WebЦвета.НасыщенноНебесноГолубой, Новый Цвет(0, 191, 255));
		СоответствиеЦветов.Вставить(WebЦвета.НасыщенноРозовый, Новый Цвет(255, 20, 147));
		СоответствиеЦветов.Вставить(WebЦвета.НебесноГолубой, Новый Цвет(135, 206, 235));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноАквамариновый, Новый Цвет(102, 205, 170));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноБирюзовый, Новый Цвет(72, 209, 204));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноВесеннеЗеленый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноГрифельноСиний, Новый Цвет(123, 104, 238));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноЗеленый, Новый Цвет(192, 220, 192));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноКоричневый, Новый Цвет(205, 133, 63));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноПурпурный, Новый Цвет(147, 112, 219));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноСиний, Новый Цвет(0, 0, 205));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноФиолетовоКрасный, Новый Цвет(199, 21, 133));
		СоответствиеЦветов.Вставить(WebЦвета.Оливковый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ОранжевоКрасный, Новый Цвет(255, 69, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Оранжевый, Новый Цвет(255, 165, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Орхидея, Новый Цвет(218, 112, 214));
		СоответствиеЦветов.Вставить(WebЦвета.ОрхидеяНейтральный, Новый Цвет(186, 85, 211));
		СоответствиеЦветов.Вставить(WebЦвета.ОрхидеяТемный, Новый Цвет(153, 50, 204));
		СоответствиеЦветов.Вставить(WebЦвета.Охра, Новый Цвет(160, 82, 45));
		СоответствиеЦветов.Вставить(WebЦвета.Перламутровый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Персиковый, Новый Цвет(255, 218, 185));
		СоответствиеЦветов.Вставить(WebЦвета.ПесочноКоричневый, Новый Цвет(244, 164, 96));
		СоответствиеЦветов.Вставить(WebЦвета.ПолночноСиний, Новый Цвет(25, 25, 112));
		СоответствиеЦветов.Вставить(WebЦвета.ПризрачноБелый, Новый Цвет(248, 248, 255));
		СоответствиеЦветов.Вставить(WebЦвета.Пурпурный, Новый Цвет(160, 32, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Пшеничный, Новый Цвет(245, 222, 179));
		СоответствиеЦветов.Вставить(WebЦвета.РозовоКоричневый, Новый Цвет(188, 143, 143));
		СоответствиеЦветов.Вставить(WebЦвета.Розовый, Новый Цвет(255, 192, 203));
		СоответствиеЦветов.Вставить(WebЦвета.Роса, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.РыжеватоКоричневый, Новый Цвет(210, 180, 140));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоГрифельноСерый, Новый Цвет(119, 136, 153));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоГрифельноСиний, Новый Цвет(132, 112, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЖелтый, Новый Цвет(255, 255, 224));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЖелтыйЗолотистый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЗеленый, Новый Цвет(144, 238, 144));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЗолотистый, Новый Цвет(238, 221, 130));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоКоралловый, Новый Цвет(240, 128, 128));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоКоричневый, Новый Цвет(255, 228, 196));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоНебесноГолубой, Новый Цвет(135, 206, 250));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоРозовый, Новый Цвет(255, 182, 193));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоСерый, Новый Цвет(211, 211, 211));
		СоответствиеЦветов.Вставить(WebЦвета.СеребристоСерый, Новый Цвет(220, 220, 220));
		СоответствиеЦветов.Вставить(WebЦвета.Серебряный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СероСиний, Новый Цвет(95, 158, 160));
		СоответствиеЦветов.Вставить(WebЦвета.Серый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СинеСерый, Новый Цвет(30, 144, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СинеФиолетовый, Новый Цвет(138, 43, 226));
		СоответствиеЦветов.Вставить(WebЦвета.Синий, Новый Цвет(0, 0, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СинийСоСтальнымОттенком, Новый Цвет(70, 130, 180));
		СоответствиеЦветов.Вставить(WebЦвета.СинийСПороховымОттенком, Новый Цвет(176, 224, 230));
		СоответствиеЦветов.Вставить(WebЦвета.Сливовый, Новый Цвет(221, 160, 221));
		СоответствиеЦветов.Вставить(WebЦвета.СлоноваяКость, Новый Цвет(255, 255, 240));
		СоответствиеЦветов.Вставить(WebЦвета.СтароеКружево, Новый Цвет(253, 245, 230));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноБирюзовый, Новый Цвет(0, 206, 209));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноБордовый, Новый Цвет(176, 48, 96));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноГрифельноСерый, Новый Цвет(47, 79, 79));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноГрифельноСиний, Новый Цвет(72, 61, 139));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноЗеленый, Новый Цвет(0, 100, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноЗолотистый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТемноКрасный, Новый Цвет(139, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноОливковоЗеленый, Новый Цвет(85, 107, 47));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноОранжевый, Новый Цвет(255, 140, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТемноСиний, Новый Цвет(0, 0, 139));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноФиолетовый, Новый Цвет(148, 0, 211));
		СоответствиеЦветов.Вставить(WebЦвета.ТеплоРозовый, Новый Цвет(255, 105, 180));
		СоответствиеЦветов.Вставить(WebЦвета.Томатный, Новый Цвет(255, 99, 71));
		СоответствиеЦветов.Вставить(WebЦвета.ТопленоеМолоко, Новый Цвет(255, 239, 213));
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоОливковый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоРозовый, Новый Цвет(255, 228, 225));
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Ультрамарин, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Фиолетовый, Новый Цвет(238, 130, 238));
		СоответствиеЦветов.Вставить(WebЦвета.Фуксин, Новый Цвет(255, 0, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ФуксинТемный, Новый Цвет(139, 0, 139));
		СоответствиеЦветов.Вставить(WebЦвета.Фуксия, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Хаки, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ХакиТемный, Новый Цвет(189, 183, 107));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолны, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныНейтральный, Новый Цвет(60, 179, 113));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныСветлый, Новый Цвет(32, 178, 170));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныТемный, Новый Цвет(143, 188, 143));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветокБелый, Новый Цвет(255, 250, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Циан, Новый Цвет(0, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЦианАкварельный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦианНейтральный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦианСветлый, Новый Цвет(224, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЦианТемный, Новый Цвет(0, 139, 139));
		СоответствиеЦветов.Вставить(WebЦвета.Черный, Новый Цвет(0, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ШелковыйОттенок, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Шоколадный, Новый Цвет(210, 105, 30));
		
		Возврат СоответствиеЦветов.Получить(ИсходныйЦвет);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает служебный табличный документ
//
// Возвращаемое значение:
//  ТабличныйДокумент - Содержит:
//  * Параметры - ПараметрыМакетаТабличногоДокумента - Содержит:
//                 ** НомерСтроки - Число -
//                 ** ТекстЗаголовка - Строка - 
//
Функция СлужебнаяСтруктураТабличныйДокумент() Экспорт
	
	Возврат Новый ТабличныйДокумент;
	
КонецФункции

// Возвращает служебную таблицу значений
//
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит:
//  * НомерСтроки - Число - 
//  * Ссылка - ДокументСсылка, СправочникСсылка - 
//  * Идентификатор - Число, УникальныйИдентификатор - 
//  * НачалоЭтапа - Дата -
//  * Описание - Строка - 
//  * Строки - КоллекцияСтрокДереваЗначений - 
//
Функция СлужебнаяСтруктураТаблицыЗначений() Экспорт
	
	Возврат Новый ТаблицаЗначений;
	
КонецФункции

// Возвращает служебнуые структуры
//
// Возвращаемое значение:
//  Структура - Содержит:
//  * ДанныеСпецификаций - Массив из Структура - содержит:
//                                    ** ВыходныеИзделия - ТаблицаЗначений - 
//                                    ** МатериалыИУслуги - ТаблицаЗначений - содержит:
//                                                           *** НомерСтроки - Число - 
//  * Дополнение - Структура -
//
Функция СлужебнаяСтруктураСтруктуры() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

// Возвращает служебнуый массив из структур
//
// Возвращаемое значение:
//  Массив из Структура - Содержит:
//  * Идентификатор - Число, УникальныйИдентификатор - 
//
Функция СлужебнаяСтруктураМассиваИзСтруктур() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

#КонецОбласти

#КонецОбласти
