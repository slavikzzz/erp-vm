
#Область ПрограммныйИнтерфейс

// Параметры:
//  ПоставщикиУслуг - Массив из Структура - описывает поставщика услуги:
// 	 * Идентификатор - Строка - идентификатор поставщика услуги (тип Строка - Строка(50)),
// 	 * Наименование - Строка - наименование поставщика услуги (тип Строка - Строка(150)),
// 	 * Услуги - Массив из Структура - услуги поставщика с обязательными ключами:
// 	   ** Идентификатор - Строка - идентификатор услуги  (тип Строка - Строка(50))
// 	   ** Наименование - Строка - наименование услуги  (тип Строка - Строка(150))
// 	   ** ТипУслуги - ПеречислениеСсылка.ТипыУслуг - тип услуги.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	УслугиО1СО = Новый Массив;
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторОтключитьУслугуИнтеграции());
	Услуга.Вставить("Наименование", НСтр("ru = 'Отключить интеграцию с учетными системами';
										|en = 'Отключить интеграцию с учетными системами'"));
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	УслугиО1СО.Добавить(Услуга);
	
	Услуга = Новый Структура;
	Услуга.Вставить("Идентификатор", ИдентификаторЭтоБизКуб());
	Услуга.Вставить("Наименование", НСтр("ru = 'Это БизКуб';
										|en = 'Это БизКуб'"));
	Услуга.Вставить("ТипУслуги", Перечисления.ТипыУслуг.Безлимитная);
	УслугиО1СО.Добавить(Услуга);
	
	НовыйПоставщик = Новый Структура;
	НовыйПоставщик.Вставить("Идентификатор", ИдентификаторПоставщикаОтчетность());
	НовыйПоставщик.Вставить("Наименование", НСтр("ru = '1С-Отчетность';
												|en = '1С-Отчетность'"));
	НовыйПоставщик.Вставить("Услуги", УслугиО1СО);
	
	ПоставщикиУслуг.Добавить(НовыйПоставщик);
	
КонецПроцедуры

// Событие, которое вызывается при обновлении доступных лицензий.
// @skip-warning ПустойМетод - переопределяемый метод.
//
// Параметры:
//	ПараметрыЛицензии - Структура - соответствует составу реквизитов, измерений и ресурсов РС "ДоступныеЛицензии":
// 	 * ИдентификаторПодписки - УникальныйИдентификатор - внутренний идентификатор подписки.
// 	 * Услуга - СправочникСсылка.УслугиСервиса - услуга.
// 	 * ДатаНачалаДействия - Дата - дата начала действия подписки.
// 	 * ДатаОкончанияДействия - Дата - дата окончания действия подписки.
// 	 * КоличествоЛицензий - Число - количество лицензий.
// 	 * НомерПодписки - Строка - номер подписки.
// 	 * ДатаИзменения - Дата - дата изменения.
//
Процедура ПриОбновленииДоступныхЛицензий(ПараметрыЛицензии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторУслуги = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЛицензии.Услуга, "Идентификатор");
	
	Если ИдентификаторУслуги = ИдентификаторОтключитьУслугуИнтеграции() Тогда
		Константы.ОтключитьИнтеграциюСУчетнымиСистемами.Установить(Истина);
	ИначеЕсли ИдентификаторУслуги = ИдентификаторЭтоБизКуб() Тогда
		Константы.ЭтоБизКубБРО.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Событие, которое вызывается при удалении доступных лицензий.
//
// Параметры:
//	ПараметрыЛицензии - см. ПриОбновленииДоступныхЛицензий.ПараметрыЛицензии
//
//@skip-check module-empty-method
Процедура ПриУдаленииДоступныхЛицензий(ПараметрыЛицензии) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторУслуги = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЛицензии.Услуга, "Идентификатор");
	
	Если ИдентификаторУслуги = ИдентификаторОтключитьУслугуИнтеграции() Тогда
		Константы.ОтключитьИнтеграциюСУчетнымиСистемами.Установить(Ложь);
	ИначеЕсли ИдентификаторУслуги = ИдентификаторЭтоБизКуб() Тогда
		Константы.ЭтоБизКубБРО.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоБизКуб() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
	
		Возврат Константы.ЭтоБизКубБРО.Получить();
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ОтключенаИнтеграцияСУчетнымиСистемами() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
	
		Возврат Константы.ОтключитьИнтеграциюСУчетнымиСистемами.Получить();
		
	Иначе
		
		Включить = ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("ВклИнтеграциюСУчетСистем", Ложь);
		Возврат НЕ Включить;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИдентификаторЭтоБизКуб() Экспорт

	Возврат "ЭтоБизКуб";

КонецФункции

Функция ИдентификаторОтключитьУслугуИнтеграции() Экспорт

	Возврат "ОтключитьИнтеграциюСУчетнымиСистемами";

КонецФункции

Функция ИдентификаторПоставщикаОтчетность() Экспорт
	
	Возврат "1С_Отчетность";
	
КонецФункции

#КонецОбласти