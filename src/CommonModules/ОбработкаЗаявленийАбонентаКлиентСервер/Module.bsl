
#Область ПрограммныйИнтерфейс

// Устанавливает значение параметра облачной подписи в заявление по его виду
//
// Параметры:
//	ОбъектДокумента	- ДокументОбъект.ЗаявлениеАбонентаСпецоператораСвязи
//	ВидПараметра 	- ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//	ТекущееЗначение	- Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
// Возвращаемое значение:
//	Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
Процедура УстановитьПараметрПодключения(ОбъектДокумента, ВидПараметра, ТекущееЗначение) Экспорт
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	ТаблицаПараметров = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи;
	ВсеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	
	Если ВсеСтроки.Количество() > 1 Тогда
		Для Каждого СтрокаМассива Из ВсеСтроки Цикл
			ТаблицаПараметров.Удалить(СтрокаМассива);
		КонецЦикла;	
		НашлиСтроку = ТаблицаПараметров.Добавить();
	ИначеЕсли ВсеСтроки.Количество() = 1 Тогда
		НашлиСтроку = ВсеСтроки[0];
	Иначе	
		НашлиСтроку = ТаблицаПараметров.Добавить();
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущееЗначение) И ТекущееЗначение <> Ложь Тогда
		НашлиСтроку.Параметр = СсылкаПараметра;
		НашлиСтроку.ЗначениеСсылка = Неопределено;
		НашлиСтроку.ЗначениеБулево = Ложь;
		НашлиСтроку.ЗначениеСтрока = "";
		
		ТипПараметра = ТипПараметраОблачнойПодписи(СсылкаПараметра);
		Если ТипПараметра = Тип("Булево") Тогда
			НашлиСтроку.ЗначениеБулево = ТекущееЗначение;
		ИначеЕсли ТипПараметра = Тип("Строка") Тогда
			НашлиСтроку.ЗначениеСтрока = ТекущееЗначение;
		Иначе
			НашлиСтроку.ЗначениеСсылка = ТекущееЗначение;
		КонецЕсли;
	Иначе
		ТаблицаПараметров.Удалить(НашлиСтроку);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает установленое значение параметра облачной подписи в заявление по его виду
//
// Параметры:
//	ОбъектДокумента - ДокументОбъект.ЗаявлениеАбонентаСпецоператораСвязи, ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи
//	ВидПараметра 	- ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	Строка, Булево, СправочникСсылка.УчетныеЗаписиDSS
//
Функция ПолучитьПараметрПодключения(ОбъектДокумента, ВидПараметра) Экспорт
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	
	Если ТипЗнч(ОбъектДокумента) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ВсеСтроки = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьРеквизитОблачнойПодписи(ОбъектДокумента, СсылкаПараметра);
	ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДанныеФормыСтруктура") Тогда
		ВсеСтроки = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	Иначе
		ВсеСтроки = ОбъектДокумента.НайтиСтроки(Новый Структура("Параметр", СсылкаПараметра));
	КонецЕсли;
	
	НашлиСтроку = Новый Структура("ЗначениеСсылка, ЗначениеБулево, ЗначениеСтрока", Неопределено, Ложь, "");
	
	Если ВсеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НашлиСтроку, ВсеСтроки[0]);
	КонецЕсли;
	
	ТипПараметра = ТипПараметраОблачнойПодписи(СсылкаПараметра);
	Если ТипПараметра = Тип("Булево") Тогда
		Результат = НашлиСтроку.ЗначениеБулево;
	ИначеЕсли ТипПараметра = Тип("Строка") Тогда
		Результат = НашлиСтроку.ЗначениеСтрока;
	Иначе
		Результат = НашлиСтроку.ЗначениеСсылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует структуру для хранения информации об используемой облачной подписи в заявлениях.
//
// Параметры:
//	ОбъектДокумента - ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи, Структура, ДанныеФормыСтруктура
//
// Возвращаемое значение:
//	Структура
//
Функция СведенияОблачнойПодписиЗаявления(ОбъектДокумента = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСервера", "");
	Результат.Вставить("НовыйЛогин", "");
	Результат.Вставить("ОтправкаКлючаМобильногоПриложения", Ложь);
	Результат.Вставить("ОтправкаКодаАктивации", Ложь);
	Результат.Вставить("ПодписьВозможна", Ложь);
	Результат.Вставить("СменитьКлючМобильногоПриложения", Ложь);
	Результат.Вставить("СменитьКлючМобильногоПриложенияАвтоматически", Ложь);
	Результат.Вставить("СменитьПароль", Ложь);
	Результат.Вставить("СоздатьУчетнуюЗапись", Ложь);
	Результат.Вставить("Телефон", "");
	Результат.Вставить("ЭлектроннаяПочта", "");
	Результат.Вставить("УчетнаяЗапись", Неопределено);
	Результат.Вставить("УчетнаяЗаписьДляВосстановления", Неопределено);
	Результат.Вставить("ТребуетИзменения", Ложь);
	Результат.Вставить("ОтправитьСПодписью", Ложь);
	Результат.Вставить("НовыйЛогинПроверен", Ложь);
	Результат.Вставить("ПоставляемыйСервер", Ложь);
	Результат.Вставить("ИсходнаяУчетнаяЗапись", Неопределено);
	Результат.Вставить("ИсходныйТелефон", "");
	
	Если ОбъектДокумента <> Неопределено Тогда
		РеквизитДокумента = ОбъектДокумента;
		Если ТипЗнч(ОбъектДокумента) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
			РеквизитДокумента = ОбъектДокумента.ПараметрыПодключенияОблачнойПодписи;
		КонецЕсли;
		Если ТипЗнч(РеквизитДокумента) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Результат, РеквизитДокумента);
		Иначе	
			Результат.ИдентификаторСервера = ПолучитьПараметрПодключения(РеквизитДокумента, "ИдентификаторСервера");
			Результат.СоздатьУчетнуюЗапись = ПолучитьПараметрПодключения(РеквизитДокумента, "СоздатьНовуюУчетнуюЗапись");
			Результат.УчетнаяЗапись = ПолучитьПараметрПодключения(РеквизитДокумента, "УчетнаяЗапись");
			Результат.НовыйЛогин = ПолучитьПараметрПодключения(РеквизитДокумента, "Логин");
			Результат.СменитьКлючМобильногоПриложения = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьКлючМобильногоПриложения");
			Результат.СменитьКлючМобильногоПриложенияАвтоматически = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьКлючМобильногоПриложенияАвтоматически");
			Результат.СменитьПароль = ПолучитьПараметрПодключения(РеквизитДокумента, "СменитьПароль");
			Результат.Телефон = ПолучитьПараметрПодключения(РеквизитДокумента, "Телефон");
			Результат.ЭлектроннаяПочта = ПолучитьПараметрПодключения(РеквизитДокумента, "ЭлектроннаяПочта");
			Результат.ОтправкаКлючаМобильногоПриложения = ПолучитьПараметрПодключения(РеквизитДокумента, "ПовторнаяОтправкаКлючаМобильногоПриложения");
			Результат.ОтправкаКодаАктивации = ПолучитьПараметрПодключения(РеквизитДокумента, "ПовторнаяОтправкаКодаАвторизации");
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ОтправкаКлючаМобильногоПриложения
		ИЛИ Результат.ОтправкаКодаАктивации
		ИЛИ Результат.СменитьКлючМобильногоПриложения
		ИЛИ Результат.СменитьКлючМобильногоПриложенияАвтоматически
		ИЛИ Результат.СменитьПароль
		ИЛИ (ЗначениеЗаполнено(Результат.НовыйЛогин) И Результат.СоздатьУчетнуюЗапись)
		ИЛИ ЗначениеЗаполнено(Результат.Телефон)
		ИЛИ ЗначениеЗаполнено(Результат.ЭлектроннаяПочта) Тогда
		Результат.ТребуетИзменения = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьКонтактыВладельцаЭЦП(Форма, ДанныеСотрудника, ЭтоЗаявлениеНаИзменение = Ложь) Экспорт
		
	ПередставлениеТелефона = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ДанныеСотрудника.ТелефонРабочий); 
	Если ПередставлениеТелефона = "" И ЗначениеЗаполнено(ДанныеСотрудника.ТелефонРабочий) Тогда
		Форма.ТелефонМобильный  = ДанныеСотрудника.ТелефонРабочий;
	ИначеЕсли ЗначениеЗаполнено(ПередставлениеТелефона) Тогда 
		Форма.ТелефонМобильный  = ПередставлениеТелефона;
	ИначеЕсли ЭтоЗаявлениеНаИзменение Тогда
		Форма.ТелефонМобильный  = Форма.ТелефонМобильныйИсходный;
	КонецЕсли;
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонМобильный);
	Форма.ТелефонМобильныйДляПаролей = Представление;
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.ЭлектроннаяПочта) Тогда
		Форма.ЭлектроннаяПочта = ДанныеСотрудника.ЭлектроннаяПочта;
		Форма.ЭлектроннаяПочтаДляПаролей = СокрЛП(Форма.ЭлектроннаяПочта);
	ИначеЕсли ЭтоЗаявлениеНаИзменение Тогда
		Форма.ЭлектроннаяПочта = Форма.ЭлектроннаяПочтаИсходная;
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаКлиентСервер.ОчиститьИСкопироватьНастройкиПаролейВОблакеИзКоробки(Форма);
	
КонецПроцедуры

Функция ПодсказкаПриВыбореСертификатаКазначейства() Экспорт

	Подсказка = Новый ФорматированнаяСтрока(
		НСтр("ru = 'В соответствии с Постановлением правительства РФ от 10 июля 2020 г. N 1018 руководители и сотрудники некоммерческих организаций, а также коммерческих, которым предоставляются средства из бюджетной системы РФ, должны получать сертификат в Федеральном казначействе. ';
			|en = 'В соответствии с Постановлением правительства РФ от 10 июля 2020 г. N 1018 руководители и сотрудники некоммерческих организаций, а также коммерческих, которым предоставляются средства из бюджетной системы РФ, должны получать сертификат в Федеральном казначействе. '"),
		Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...';
										|en = 'Подробнее...'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/v-federal-nom-kaznachejstve"));
		
	Возврат Подсказка;

КонецФункции

Функция ПодсказкаПриВыбореСертификатаФНС(ЭтоЮридическоеЛицо) Экспорт
	
	Если ЭтоЮридическоеЛицо Тогда
		Подсказка = НСтр("ru = 'Получение сертификата эл. подписи руководителями организаций в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.';
						|en = 'Получение сертификата эл. подписи руководителями организаций в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	Иначе
		Подсказка = НСтр("ru = 'Получение сертификата эл. подписи индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.';
						|en = 'Получение сертификата эл. подписи индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ в вашем городе из программы 1С временно недоступно. Получите сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	КонецЕсли;
	
	Возврат Подсказка;

КонецФункции

Функция ПодсказкаПриБесшовномПолученииСертификатаВДУЦ(Форма) Экспорт

	УЦ = Форма.УЦ;
	
	ПроТокен = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Для отправки заявления понадобится ';
			|en = 'Для отправки заявления понадобится '"),
		Новый ФорматированнаяСтрока(НСтр("ru = 'токен';
										|en = 'токен'"),,,,"e1cib/command/ОбщаяКоманда.ПояснитьПроТокен"),
		". ");
		
	Если ЭтоУдаленноеПереизданиеСертификата(Форма) Тогда
		ПроТокен = Новый ФорматированнаяСтрока(
			ПроТокен, 
			Символы.ПС,
			НСтр("ru = 'Можно использовать имеющийся токен, если на нем осталось место.';
				|en = 'Можно использовать имеющийся токен, если на нем осталось место.'"));
	КонецЕсли;
		
	Если УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС") Тогда

		Подробнее = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подробнее о получении сертификата в инспекции ФНС читайте ';
				|en = 'Подробнее о получении сертификата в инспекции ФНС читайте '"),
			Новый ФорматированнаяСтрока(НСтр("ru = 'здесь';
											|en = 'здесь'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/v-fns"),
			".");
			
	ИначеЕсли ЭтоУдаленноеПереизданиеСертификата(Форма) Тогда
		
		Подробнее = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Ознакомьтесь';
											|en = 'Ознакомьтесь'"),,,,"e1cib/command/ОбщаяКоманда.ПоказатьЭтапыУдаленногоПереизданияСертификата"),
			НСтр("ru = ' с этапами и условиями удаленного переиздания сертификата';
				|en = ' с этапами и условиями удаленного переиздания сертификата'"));
			
	ИначеЕсли НЕ ЭтоУдаленноеПереизданиеСертификата(Форма) Тогда
		
		Подробнее = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Для получения сертификата эл. подписи необходимо провести идентификацию личности владельца. ';
				|en = 'Для получения сертификата эл. подписи необходимо провести идентификацию личности владельца. '"),
			Символы.ПС,
			Новый ФорматированнаяСтрока(НСтр("ru = 'Убедитесь';
											|en = 'Убедитесь'"),,,,"https://help.astral.ru/1c-o/poluchenie-elektronnoj-podpisi/u-doverennogo-litsa-uts-fns"),
			НСтр("ru = ' в возможности проведения идентификации в вашем регионе.';
				|en = ' в возможности проведения идентификации в вашем регионе.'"));
		
	КонецЕсли;
	
	Если Форма.CryptoProCSPУстановлен Тогда
		
		Подсказка = Новый ФорматированнаяСтрока(
			ПроТокен,
			Символы.ПС,
			Подробнее);
			
	Иначе
		
		ПроCryptoPro = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Перед отправкой заявления ';
				|en = 'Перед отправкой заявления '"),
			Новый ФорматированнаяСтрока(НСтр("ru = 'установите';
											|en = 'установите'"),,,,"e1cib/command/ОбщаяКоманда.УстановитьКриптоПроДляФНС"),
			НСтр("ru = ' КриптоПро CSP.';
				|en = ' КриптоПро CSP.'"));
			
		Подсказка = Новый ФорматированнаяСтрока(
			ПроТокен,
			Символы.ПС,
			ПроCryptoPro,
			Символы.ПС,
			Подробнее);
			
	КонецЕсли;
		
	Возврат Подсказка;

КонецФункции

Функция ПодробнаяПодсказкаПриВыбореСертификатаФНС(ЭтоЮридическоеЛицо) Экспорт
	
	Если ЭтоЮридическоеЛицо Тогда
		Подсказка = НСтр("ru = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" руководители коммерческих организаций должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.';
						|en = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" руководители коммерческих организаций должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	Иначе
		Подсказка = НСтр("ru = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" индивидуальные предприниматели, нотариусы, адвокаты и главы КФХ должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.';
						|en = 'В соответствии с ФЗ от 06.04.2011 N 63-ФЗ (ред. от 02.07.2021) ""Об электронной подписи"" индивидуальные предприниматели, нотариусы, адвокаты и главы КФХ должны получать сертификат в удостоверяющем центре ФНС или у его доверенного лица.'");
	КонецЕсли;
	
	Возврат Подсказка;

КонецФункции

Функция ВидДокументаЗаявленияСкорректированный(ЭлектронныйДокумент) Экспорт
	
	ВидДокумента = ЭлектронныйДокумент.Документ;
	НовыйВид     = ЭлектронныйДокумент.Документ;
	
	Если ВидДокумента = "Заявление_на_подключение" 
		ИЛИ ВидДокумента = "Заявление_на_изменение" Тогда
		// xml-заявление
		НовыйВид = "Заявление";
	ИначеЕсли ВидДокумента = "Заявление" Тогда
		// Скан заявления для 1С:БС и ПСБ
		НовыйВид = "ЗаявлениеНаПодключение";
	ИначеЕсли ВидДокумента = "СвидетельствоОПостановкеНаУчет" Тогда
		НовыйВид = "ПроизвольныйДокумент";
	ИначеЕсли ВидДокумента = "Доверенность" И ЭлектронныйДокумент.ЭтоМЧД Тогда
		НовыйВид = "МЧД";
	ИначеЕсли ВидДокумента = "Доверенность" И ЭлектронныйДокумент.ЭтоПодписьКМЧД Тогда
		НовыйВид = "ПодписьКМЧД";
	ИначеЕсли ВидДокумента = "ПодтверждениеПрав" Тогда
		НовыйВид = "ПодтверждениеПраваАдмин";
	КонецЕсли;
	
	Возврат НовыйВид;
	
КонецФункции

Функция ЧастичноеПредставлениеТелефона(Телефон) Экспорт
		
	Представление = "";
	ТолькоЦифры = ЦифрыИзСтроки(Телефон, Истина);

	Если СтрДлина(ТолькоЦифры) = 10 Тогда
		Представление = СтрШаблон(
			"+7 %1 ***-**-%2", 
			Сред(ТолькоЦифры, 1, 3), 
			Сред(ТолькоЦифры, 9));
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

Функция ЦифрыИзСтроки(Строка, ЭтоТелефон) Экспорт
		
	ТекстДляОбработки = СокрЛП(Строка); 
	Цифры = "";
	Для Индекс = 1 По СтрДлина(ТекстДляОбработки) Цикл
		ТекущийСимвол = Сред(ТекстДляОбработки, Индекс, 1);
		Если СтрНайти("0123456789", ТекущийСимвол) Тогда
			Цифры = Цифры + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТелефон И СтрДлина(Цифры) = 11 Тогда
		Цифры = Сред(Цифры, 2);
	КонецЕсли;
	
	Возврат Цифры;

КонецФункции

Процедура ИзменитьОформлениеДокументов(Форма, СкрытьПринудительно = Ложь) Экспорт
	
	ЭтоФормаЗаявления = ЭтоФормаЗаявления(Форма);
	
	СкрытьДокументы = 
		ЭтоФормаЗаявления И НЕ ЗначениеЗаполнено(Форма.Организация) 
		ИЛИ СкрытьПринудительно;
	
	Элементы = Форма.Элементы;
	
	Если ЭтоФормаЗаявления Тогда
		Элементы.ГруппаСканов.Видимость = Ложь;
	КонецЕсли;
	
	Если СкрытьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	Количество = 0;
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		
		ВидДокумента = ТекущийВидДокумента.Ключ;
		Описание 	 = ТекущийВидДокумента.Значение;
		
		Если Описание.Видимость Тогда
			Количество = Количество + 1;
		КонецЕсли;
		
		Элементы["Группа" + ВидДокумента].Видимость 	= Описание.Видимость;
		Элементы["Заголовок" + ВидДокумента].Заголовок 	= Описание.Представление + ":";
		
		ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
	КонецЦикла;
	
	Если ЭтоФормаЗаявления Тогда
		Элементы.ГруппаЗаголовокДляДокументов.Видимость = Количество > 0;
		Элементы.ВыбратьВсе.Видимость = Количество > 1;
		Элементы.ГруппаСканов.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеДокумента(Форма, ВидДокумента) Экспорт
	
	Размер 		= 0;
	Количество  = 0;
	ИмяПервого  = "";
	МЧД = Новый Массив;
	
	Для каждого ФайлДокумента Из Форма.ФайлыДокументов Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			
			Размер = Размер + ФайлДокумента.Размер;
			ОпределитьНаименованиеДокументовВЗаявлении(ФайлДокумента, ИмяПервого);
			ПосчитатьКоличествоДокументовВЗаявлении(ФайлДокумента, ВидДокумента, МЧД, Количество);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОсобаяОбработка  = ОткрытьФормуДобавленияМЧДИлиСкана(Форма, ВидДокумента);
	Если ОсобаяОбработка Тогда
		ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(
			Форма, 
			ВидДокумента, 
			Размер, 
			Количество, 
			ИмяПервого,
			,
			НСтр("ru = 'доверенность';
				|en = 'доверенность'"),
			НСтр("ru = 'доверенности';
				|en = 'доверенности'"),
			НСтр("ru = 'доверенностей';
				|en = 'доверенностей'"),
			НСтр("ru = 'ж';
				|en = 'ж'"),
			Ложь);
	Иначе
		ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(Форма, ВидДокумента, Размер, Количество, ИмяПервого);
	КонецЕсли;
	
КонецПроцедуры

Функция МобильныйУказанКорректно(Форма, ТихийРежим = Ложь, ТекстОшибки = "") Экспорт
	
	Корректный = Истина;
	
	Если Форма.ПолучатьСМСУведомления Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Форма.ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите новый номер мобильного телефона';
								|en = 'Укажите новый номер мобильного телефона'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки,, "ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ТекстОшибки = НСтр("ru = 'Мобильный телефон должен иметь формат 
				|+7 XXX XXX-XX-XX';
				|en = 'Мобильный телефон должен иметь формат 
				|+7 XXX XXX-XX-XX'");
			Если НЕ ТихийРежим Тогда
				СообщитьПользователю(ТекстОшибки, ,"ТелефонМобильный");
			КонецЕсли;
			Корректный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Корректный;
	
КонецФункции

Процедура СообщитьПользователю(
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
		
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщенияПользователю,
			КлючДанных,
			Поле,
			ПутьКДанным,
			Отказ);
	#КонецЕсли
			
КонецПроцедуры

Функция ИспользоватьСуществующий(Объект) Экспорт
	
	ЭтоФорма  = ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения");
	ЭтоСсылка = НЕ ЭтоФорма;
	
	ИспользуетсяСуществующий = Объект.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	
	Результат = 
		ИспользуетсяСуществующий 
		И (ЭтоФорма И ЭтоСменаСертификата(Объект) ИЛИ ЭтоСсылка);
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНеобходимостьУстановкиГалки_ВключатьЛицензиюКриптоПроВСертификат(Форма) Экспорт
	
	Если Форма.СертификатДолженБытьПолученОтГосУЦ
		ИЛИ Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ Тогда
		
		Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = Ложь;
		Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
		Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЭтоКриптоПро = Форма.CryptoProCSPУстановлен
		И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	ЭтоЛокальнаяУчетка = Форма.ЭтоПереходВКоробку ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса
						ИЛИ КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(Форма.МестоХраненияКлюча);
	#Если ВебКлиент Тогда
		ЭтоВеб = Истина;
	#ИначеЕсли Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ЭтоВеб = ОбщегоНазначения.ЭтоВебКлиент();
	#Иначе
		ЭтоВеб = Ложь;
	#КонецЕсли
	ЛицензиюНельзяВычислить =
		СтрНайти(Форма.ИмяФормы, "ВнешняяОбработка") > 0 
		ИЛИ ЭтоВеб;
		
	Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = ЭтоКриптоПро И ЭтоЛокальнаяУчетка;
	Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
	
	Если Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		
		Если Форма.ЛицензияКриптоПроВключенаВСертификат Тогда
  
			Если ЛицензиюНельзяВычислить
				ИЛИ Форма.СрокЛицензииКриптоПроКонечный Тогда
				
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Истина;
			Иначе
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
				Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
			КонецЕсли;
			
		Иначе
			Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
			Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодыФНСПрописью(Знач ТаблицаКодовФНС) Экспорт

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФНС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКодыФНСПрописьюБезКПП(Знач ТаблицаКодовФНС) Экспорт

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС > 0 Тогда
		
		Коды = Новый Массив;
		Для каждого Строка Из ТаблицаКодовФНС Цикл
			Если Коды.Найти(Строка.КодПолучателя) = Неопределено Тогда
				Коды.Добавить(Строка.КодПолучателя);
			КонецЕсли;
		КонецЦикла;
		
		Результат = СтрСоединить(Коды, ", ");
		
	ИначеЕсли КоличествоКодовФНС > 5 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФНС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКодыРосстатПрописью(Знач Получатели) Экспорт
	
	Результат = "";
	КоличествоКодовФСГС = Получатели.Количество();
	Если КоличествоКодовФСГС = 1 Тогда
		Результат = Получатели[0].КодПолучателя;
	ИначеЕсли КоличествоКодовФСГС > 1 Тогда
		Результат = НесколькоНаправленийПрописью(КоличествоКодовФСГС);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НесколькоНаправленийПрописью(Количество) Экспорт

	Результат = "";
	Подстрока1 = Строка(Количество);
	Подстрока2 = ДлительнаяОтправкаКлиентСервер.ПредметИсчисленияБезЧисла(
		Количество,
		НСтр("ru = 'направление';
			|en = 'направление'"),
		НСтр("ru = 'направления';
			|en = 'направления'"),
		НСтр("ru = 'направлений';
			|en = 'направлений'"),
		"с");
	Результат = Подстрока1 + " " + Подстрока2;
	
	Возврат Результат;

КонецФункции

Процедура ОчиститьВключаемыйСертификат(Форма) Экспорт
	
	Форма.ВключаемыйСертификат = Неопределено;
	Форма.ВключаемыйСертификатОблачный = Ложь;
	Форма.ИдентификаторПолученияСпискаОблачныхСертификатов = "";
	Форма.ОблачныеСертификатыКалуги.Очистить();
	Форма.ЭтоСертификатДругогоУЦ = Ложь;
	
	Если ЭтоФормаПервичногоЗаявления(Форма) Тогда
		Форма.ЛицензияКриптоПроВключенаВСертификат = Ложь;
	КонецЕсли;
	
	ОчиститьИСкопироватьНастройкиПаролейВОблакеИзКоробки(Форма);
	
КонецПроцедуры

Процедура УточнитьРежимРаботыСКлючами(Форма) Экспорт
	
	БудетАЦУЦ = ЭтоРуководитель(Форма) И НЕ ИспользоватьСуществующий(Форма);
	
	ВыбратьРежимОблака = 
		Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса")
		И НЕ Форма.СертификатДолженБытьПолученОтГосУЦ 
		И БудетАЦУЦ;
	
	Если ВыбратьРежимОблака Тогда
		Форма.РежимРаботыСКлючами = 1;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	Иначе
		Форма.РежимРаботыСКлючами = 2;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоРуководитель(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
КонецФункции

Функция ЭтоБухгалтер(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	
КонецФункции

Функция ЭтоДругойСотрудник(Форма) Экспорт
	
	Возврат Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	
КонецФункции

Процедура ОпределитьИзменениеВМестеХраненияКлючей(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.ЭтоПереходВКоробку = Ложь;
	Форма.ЭтоПереходВОблако  = Ложь;
	
	ЕстьИзменение = Форма.ИзменитьМестоХранения ИЛИ ИспользоватьСуществующий(Форма);
	
	ВМоделиСервиса = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	
	Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса
		ИЛИ Форма.ДоступнаЭлектроннаяОблачнаяПодпись Тогда
		
		Если Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака Тогда
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro")
				ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				
				Форма.ЭтоПереходВКоробку = ЕстьИзменение;
				
			КонецЕсли;
			
		Иначе
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса Тогда
				Форма.ЭтоПереходВОблако  = ЕстьИзменение;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Переопределить =
			Форма.ВыбранноеМестоХраненияКлюча = Неопределено
			ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса;
		
		Если Переопределить Тогда
			ОпределитьВыбранноеМестоХраненияКлюча(Форма);
		КонецЕсли;
		
		Форма.ЭтоПереходВКоробку = Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака И ЕстьИзменение;
		
	КонецЕсли;
	
	СравнитьКриптопровайдера(Форма);
	
КонецПроцедуры

Процедура СравнитьКриптопровайдера(Форма)

	ИзменилсяКриптопровайдерЛокальнойУчетки = НЕ Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака 
		И Форма.ТипКриптопровайдераИсходный <> Форма.ВыбранноеМестоХраненияКлюча; 
	
	Форма.ТипКриптопровайдераИзменился = 
		(Форма.ЭтоПереходВКоробку 
		ИЛИ Форма.ЭтоПереходВОблако 
		ИЛИ ИзменилсяКриптопровайдерЛокальнойУчетки) 
		И Форма.ИзменитьМестоХранения;
	
КонецПроцедуры

Процедура ОпределитьВыбранноеМестоХраненияКлюча(Форма, ПринудительнаяМодель = Неопределено) Экспорт
	
	ВМоделиСервиса = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
	ЛокальныеКлючи = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ТолькоЛокальныеКлючи");
	VipNet         = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	CryptoPro      = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	CryptoProDSS   = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProDSS");
	ПустаяСсылка   = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка");
	ЭтоПодписьОблака = КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(Форма.МестоХраненияКлюча);
	
	ПереключитьНаЛокальныеКлючи = 
		ПринудительнаяМодель = ЛокальныеКлючи
		ИЛИ ПринудительнаяМодель = VipNet
		ИЛИ ПринудительнаяМодель = CryptoPro;
	ПереключитьНаОблако = ПринудительнаяМодель = ВМоделиСервиса И Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	
	УстановленТолькоОдинКриптопровайдер = Форма.КомпонентаУстановлена 
		И (Форма.ViPNetCSPУстановлен ИЛИ Форма.CryptoProCSPУстановлен)
		И НЕ (Форма.ViPNetCSPУстановлен И Форма.CryptoProCSPУстановлен);
		
	ДоступенВыборОблака = 
		НЕ Форма.СертификатДолженБытьПолученОтГосУЦ
		И НЕ ПереключитьНаЛокальныеКлючи
		И (Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса 
		ИЛИ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса
		ИЛИ ЭтоПодписьОблака);
		
	Форма.ВыбранноеМестоХраненияКлюча = ПустаяСсылка;
	
	ЭтоОблако = 
		Форма.ЭтоУчетнаяЗаписьВМоделиСервиса 
		И ДоступенВыборОблака 
		И НЕ ПереключитьНаЛокальныеКлючи
		ИЛИ ПереключитьНаОблако;
		
	ЭтоОблачнаяПодпись = 
		ЭтоПодписьОблака 
		И Форма.ДоступнаЭлектроннаяОблачнаяПодпись
		И ДоступенВыборОблака
		И НЕ ПереключитьНаЛокальныеКлючи;

	Если ЭтоОблачнаяПодпись Тогда
			
		Форма.ВыбранноеМестоХраненияКлюча = CryptoProDSS;

	ИначеЕсли ЭтоОблако Тогда
			
		Форма.ВыбранноеМестоХраненияКлюча = ВМоделиСервиса;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
		
	ИначеЕсли УстановленТолькоОдинКриптопровайдер Тогда
		
		Если Форма.ViPNetCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = VipNet;
		ИначеЕсли Форма.CryptoProCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = CryptoPro;
		КонецЕсли;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		
	ИначеЕсли ПереключитьНаЛокальныеКлючи И 
		(ПринудительнаяМодель = VipNet ИЛИ ПринудительнаяМодель = CryptoPro) Тогда
		
		Форма.ВыбранноеМестоХраненияКлюча = ПринудительнаяМодель;
		Форма.МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбранныйКриптопровайдер(Форма) Экспорт
	
	Если Форма.CryptoProCSPУстановлен И НЕ Форма.ИгнорироватьКонфликт
		ИЛИ Форма.ИгнорироватьКонфликт И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		
	КонецЕсли;
	
КонецФункции

Процедура УдалитьТекущийВидДокументов(Форма, Документ) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = Документ Тогда
			ЭлементыДляУдаления.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Форма.ФайлыДокументов.Удалить(ЭлементДляУдаления);
	КонецЦикла;
			
КонецПроцедуры

Процедура ДополнитьФайлыВидомДокумента(Файлы, Документ, Форма) Экспорт
	
	Для Каждого Файл Из Файлы Цикл
		Файл.Вставить("Документ", Документ);
		Форма.ФайлыДокументов.Добавить(Файл, Документ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьМодифицированность(Форма) Экспорт
	
	ЭтоБыстрыйСтарт = ЭтоФормаБыстрыйСтарт(Форма);
	ЕстьЗаблокироватьМодифицированность = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, 
		"ЗаблокироватьМодифицированность_БС");
		
	ЗаблокированаМодифицированность = 
		ЕстьЗаблокироватьМодифицированность 
		И Форма.ЗаблокироватьМодифицированность_БС;
		
	Если ЭтоБыстрыйСтарт ИЛИ ЗаблокированаМодифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРеквизит = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, 
		"ЗапретитьИзменение"); 
		
	Если ЕстьРеквизит И НЕ Форма.ЗапретитьИзменение ИЛИ НЕ ЕстьРеквизит Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьМодифицированность(Форма) Экспорт
	Форма.Модифицированность = Ложь;
КонецПроцедуры

Функция ОписаниеФайла(ПолноеИмя, Адрес) Экспорт
	
	Файл = Новый Файл(ПолноеИмя);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", 			Файл.Имя);
	// Для совместимости ДополнитьОписанияРазмерамиФайлов и ДобавитьФайлыСПредпросмотром
	ОписаниеФайла.Вставить("ИсходноеИмя", 	Файл.Имя);
	ОписаниеФайла.Вставить("Адрес", 		Адрес);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(ОписаниеФайла);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	Возврат ОписанияФайлов;
	
КонецФункции

Процедура ОчиститьФайл(Форма, ВидДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура ОчиститьФайлыПриУстановкеНовогоВладельцаЭЦП(Форма) Экспорт
	
	// Работа с файлами
	ОчиститьФайл(Форма, "Паспорт");
	ОчиститьФайл(Форма, "СНИЛС");
	ОчиститьФайл(Форма, "ПодтверждениеПолномочий");
	ОчиститьФайл(Форма, "Заявление");
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Процедура ПослеДобавленияСкана(Форма, ВидДокумента, ФайлыДокумента) Экспорт
	
	УстановитьМодифицированность(Форма);
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ДополнитьФайлыВидомДокумента(ФайлыДокумента, ВидДокумента, Форма);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

Процедура УдалитьВсеСканы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Очищаем файлы 
	Для каждого ТекущийВидДокумента Из ВидыДокументовПоФорме(Форма) Цикл
		ВидДокумента = ТекущийВидДокумента.Ключ;
		УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	КонецЦикла;
	
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

Функция ВидыДокументов_Шаблон() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ЭтоЭлектронноеПодписание", Ложь);
	Параметры.Вставить("ЭтоНулевка", Ложь);
	Параметры.Вставить("ВладелецЭЦПТип", Неопределено);
	Параметры.Вставить("ВладелецЭЦП", Неопределено);
	Параметры.Вставить("ЭтоЮридическоеЛицо", Истина);
	Параметры.Вставить("ЭтоПервичноеЗаявление", Истина);
	Параметры.Вставить("ИспользоватьСуществующий", Ложь);
	Параметры.Вставить("ЭтоСтороннийУЦ", Ложь);
	Параметры.Вставить("ЭтоПереизданиеСертификата", Ложь);
	Параметры.Вставить("ЭтоРуководитель", Ложь);
	Параметры.Вставить("ЭтоБюджетополучатель", Ложь);
	Параметры.Вставить("ПоказыватьПодтверждениеПрав", Ложь);
	Параметры.Вставить("ЭтоОткрытиеСВыбраннойЭЦП", Ложь);
	Параметры.Вставить("ЭтоБыстрыйСтарт", Ложь);
	Параметры.Вставить("ЕстьПредыдущиеУчетныеЗаписи", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция ВидыДокументовПоФорме(Форма) Экспорт
	
	Если ЭтоФормаВыбораДоверенностиВЗаявлении(Форма) Тогда
		
		Виды = Новый Структура;
		ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Форма);
		Возврат Виды;
		
	ИначеЕсли ЭтоФормаЗаявления(Форма) Тогда
		
		Параметры = ПараметрыПоФорме(Форма);
		Возврат ВидыДокументовВЗаявлении(Параметры);
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ЭтоБанковскаяГарантия(Форма) Тогда
		
		Виды = Новый Структура;
		
		Описание = ОписаниеВидаДокумента();
		Описание.Видимость 	   = Истина;
		Описание.Представление = НСтр("ru = 'Файл банковской гарантии';
										|en = 'Файл банковской гарантии'");
		Описание.ОдинФайл 	   = Истина;
		
		Виды.Вставить("XML", Описание);
		
		Описание = ОписаниеВидаДокумента();
		Описание.Видимость 	   = Истина;
		Описание.Представление = НСтр("ru = 'Файл подписи';
										|en = 'Файл подписи'");
		Описание.ОдинФайл 	   = Истина;
		
		Виды.Вставить("Подпись", Описание);
		
		Возврат Виды;
		
	КонецЕСли;

КонецФункции

Функция ПараметрыПоФорме(Форма) Экспорт
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоНулевка 				= Форма.ЭтоРежимБесплатнойНулевойОтчетности ИЛИ Форма.ЭтоРежимОграниченнойФункциональности;
	Параметры.ЭтоПервичноеЗаявление	 	= ЭтоФормаПервичногоЗаявления(Форма);
	Параметры.ИспользоватьСуществующий	= ИспользоватьСуществующий(Форма);
	Параметры.ЭтоРуководитель			= ЭтоРуководитель(Форма);
	Параметры.ПоказыватьПодтверждениеПрав = Форма.ЭтоМультиРежим И Форма.ВладелецЭЦПРасширилСебеПрава;
	
	СписокСвойств = 
		"ЭтоЭлектронноеПодписание, 
		|ВладелецЭЦПТип, 
		|ВладелецЭЦП, 
		|ЭтоЮридическоеЛицо, 
		|ЭтоБюджетополучатель,
		|ЭтоБыстрыйСтарт,
		|ЕстьПредыдущиеУчетныеЗаписи,
		|ЭтоОткрытиеСВыбраннойЭЦП";
	
	ЗаполнитьЗначенияСвойств(Параметры, Форма, СписокСвойств);
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = Форма.ЭтоСертификатДругогоУЦ;
	Иначе
		Параметры.ЭтоСтороннийУЦ = Форма.ПереиздатьСертификат И Форма.ЭтоСертификатДругогоУЦИсходный;
		Параметры.ЭтоПереизданиеСертификата = Форма.ПереиздатьСертификат;
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Функция ВидыДокументовПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	Параметры = ПараметрыПоВходящемуКонтексту(ВходящийКонтекст);
	Возврат ВидыДокументовВЗаявлении(Параметры);
		
КонецФункции

Функция ПараметрыПоВходящемуКонтексту(ВходящийКонтекст) Экспорт
	
	ДокументЗаявление = ВходящийКонтекст.ДокументЗаявление;
	
	Параметры = ВидыДокументов_Шаблон();
	Параметры.ЭтоЭлектронноеПодписание 	= ДокументЗаявление.ПодписатьЭП;
	Параметры.ЭтоЮридическоеЛицо 		= ДокументЗаявление.ТипОрганизации;
	Параметры.ЭтоПервичноеЗаявление 	= ВходящийКонтекст.ЭтоЗаявлениеНаПодключение;
	Параметры.ЭтоРуководитель			= ЭтоРуководитель(ДокументЗаявление);
	Параметры.ПоказыватьПодтверждениеПрав = ДокументЗаявление.ЭтоМультиРежим И ДокументЗаявление.ВладелецЭЦПРасширилСебеПрава;
	
	СписокСвойствИзДокумента = 
		"ВладелецЭЦПТип, 
		|ВладелецЭЦП, 
		|ЭтоБюджетополучатель,
		|ЭтоБыстрыйСтарт,
		|ЕстьПредыдущиеУчетныеЗаписи,
		|ЭтоОткрытиеСВыбраннойЭЦП";
	
	ЗаполнитьЗначенияСвойств(Параметры, ДокументЗаявление, СписокСвойствИзДокумента);
	
	СписокСвойствИзКонтекста = 
		"ЭтоНулевка, 
		|ИспользоватьСуществующий";
	
	ЗаполнитьЗначенияСвойств(Параметры, ВходящийКонтекст, СписокСвойствИзКонтекста);
	
	Если Параметры.ЭтоПервичноеЗаявление Тогда
		Параметры.ЭтоСтороннийУЦ = ДокументЗаявление.ЭтоСертификатДругогоУЦ;
	Иначе
		Параметры.ЭтоСтороннийУЦ = ЭтотПараметрИзменился(ДокументЗаявление, "УдостоверяющийЦентр");
		Параметры.ЭтоПереизданиеСертификата = ЭтотПараметрИзменился(ДокументЗаявление, "ПереизданиеСертификата");		
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции
	
Функция ЭтотПараметрИзменился(Заявление, ИмяРеквизита) Экспорт
	
	ИзмененныйРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности." + ИмяРеквизита);
	СтруктураПоиска    = Новый Структура("ИзмененныйРеквизит", ИзмененныйРеквизит);
	Возврат Заявление.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	
КонецФункции

Функция ЭтоФормаПервичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоПервичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаПодключениеУпрощенное"; 
	Возврат ЭтоПервичноеЗаявление;
	
КонецФункции

Функция ЭтоФормаЗаявления(Форма) Экспорт
	
	ЭтоНеФорма = 
		Форма = Неопределено 
		ИЛИ ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения");
		
	Если ЭтоНеФорма Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоФормаЗаявления = 
		СтрНайти(ИмяФормы, "МастерФормированияЗаявки")
		ИЛИ СтрНайти(ИмяФормы, "ЗаявлениеАбонентаСпецоператораСвязи");
	
	Возврат ЭтоФормаЗаявления;
	
КонецФункции

Функция ЭтоФормаВторичногоЗаявления(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоВторичноеЗаявление = ИмяФормы = "МастерФормированияЗаявкиНаИзменениеПараметровПодключения"; 
	Возврат ЭтоВторичноеЗаявление;
	
КонецФункции

Функция ЭтоФормаБыстрыйСтарт(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоБыстрыйСтарт = ИмяФормы = "БыстрыйСтарт"; 
	Возврат ЭтоБыстрыйСтарт;
	
КонецФункции

Функция КраткоеИмяФормыПоПолному(Форма) Экспорт
	
	Подстроки = СтрРазделить(Форма.ИмяФормы, ".");
	Количество = Подстроки.Количество();
	ИмяФормы = Подстроки[Количество - 1];
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ОписаниеВидаДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("Видимость", 			Истина);
	Описание.Вставить("Представление", 		"");
	Описание.Вставить("Постфикс", 			"");
	Описание.Вставить("ТолькоДляНулевки", 	Ложь);
	Описание.Вставить("ОдинФайл", 			Ложь);
	
	Возврат Описание;
	
КонецФункции

Функция ЭтоСертификатСтороннегоУЦПоФорме(Форма) Экспорт

	Параметры = ПараметрыПоФорме(Форма);
	ЭтоСертификатСтороннегоУЦ = ТребуетсяПриложитьДокументВоВторичном(Параметры);
	Возврат ЭтоСертификатСтороннегоУЦ;

КонецФункции

Функция ТребуетсяПриложитьДокументВоВторичном(Параметры)
	
	// Требуется в случае, если ранее использовали сертификат СУЦ, а теперь переходият на серт. КА
	// В этом случае при подключении документы не собирались, должны быть собраны при переиздании
	ЭтоВторичноеЗаявление = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	ТребуетсяПриложить = 
		ЭтоВторичноеЗаявление
		И Параметры.ЭтоЭлектронноеПодписание 
		И Параметры.ЭтоСтороннийУЦ
		И НЕ Параметры.ИспользоватьСуществующий
		И НЕ СканыБудетСобиратьГосОрган(Параметры);
		
	Возврат ТребуетсяПриложить; 

КонецФункции

Функция ТребуетсяПриложитьДокументВПервичном(Параметры) Экспорт
	
	ЭтоОтправкаБезДокументов_БС = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОтправкаБезДокументов(Параметры);

	Возврат (Параметры.ЭтоНулевка ИЛИ Параметры.ЭтоЭлектронноеПодписание) 
		И Параметры.ЭтоПервичноеЗаявление
		И НЕ Параметры.ИспользоватьСуществующий
		И НЕ СканыБудетСобиратьГосОрган(Параметры)
		И НЕ ЭтоОтправкаБезДокументов_БС;
	
КонецФункции

Функция СканыБудетСобиратьГосОрган(Параметры) Экспорт

	СканыБудетСобиратьГосОрган = 
		Параметры.ЭтоРуководитель
		ИЛИ Параметры.ЭтоБюджетополучатель;
		
	Возврат СканыБудетСобиратьГосОрган;
	
КонецФункции

Функция ТребуетсяПриложитьСканПаспортаВоВторичном(Параметры) Экспорт

	ЭтоВторичное = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	ТребуетсяПриложить = 
		ЭтоВторичное
		И Параметры.ЭтоЭлектронноеПодписание
		И Параметры.ЭтоПереизданиеСертификата
		И НЕ Параметры.ИспользоватьСуществующий
		И НЕ СканыБудетСобиратьГосОрган(Параметры);
		
	Возврат ТребуетсяПриложить;
	
КонецФункции

Процедура ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры) Экспорт
	
	// Паспорт
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры)
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры)
		ИЛИ ТребуетсяПриложитьСканПаспортаВоВторичном(Параметры);
		
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость 	   = Видимость;
	Описание.Представление = НСтр("ru = 'Паспорт (разворот с фото)';
									|en = 'Паспорт (разворот с фото)'");
	Описание.ОдинФайл 	   = Истина;
	
	Виды.Вставить("Паспорт", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры) Экспорт
	
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры) 
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
	
	// СНИЛС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость		= Видимость;
	Описание.Представление 	= НСтр("ru = 'Свидетельство СНИЛС';
										|en = 'Свидетельство СНИЛС'");
	Описание.ОдинФайл 		= Истина;
	
	Виды.Вставить("СНИЛС", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоЭлектронноеПодписание = Параметры.ЭтоЭлектронноеПодписание;
	ИспользоватьСуществующий = Параметры.ИспользоватьСуществующий;
	ЭтоВторичноеЗаявление 	 = НЕ Параметры.ЭтоПервичноеЗаявление;
	
	Видимость = 
		ТребуетсяПриложитьДокументВоВторичном(Параметры) 
		ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
	
	// Постановка на учет в ФНС
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.Представление 		= НСтр("ru = 'Свидетельство ИНН орг-ции';
											|en = 'Свидетельство ИНН орг-ции'");
	Описание.ТолькоДляНулевки 	= Истина;
	
	Виды.Вставить("СвидетельствоОПостановкеНаУчет", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип 			 = Параметры.ВладелецЭЦПТип;
	ЭтоЮридическоеЛицо 		 = Параметры.ЭтоЮридическоеЛицо;
	
	// Подтверждение полномочий
	Описание = ОписаниеВидаДокумента();
	
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	Если ЭтоЮридическоеЛицо И НЕ ЭтоРуководитель Тогда
		
		Видимость = 
			ТребуетсяПриложитьДокументВоВторичном(Параметры)
			ИЛИ ТребуетсяПриложитьДокументВПервичном(Параметры);
		
		Описание.Видимость = Видимость;
		
	Иначе
		Описание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоРуководитель Тогда
		Описание.Представление 	= НСтр("ru = 'Приказ о назначении';
											|en = 'Приказ о назначении'");
	Иначе
		Описание.Представление 	= НСтр("ru = 'Подтверждение полномочий';
											|en = 'Подтверждение полномочий'");
	КонецЕсли;
	
	Виды.Вставить("ПодтверждениеПолномочий", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры) Экспорт
	
	ВладелецЭЦПТип  = Параметры.ВладелецЭЦПТип;
	ЭтоРуководитель = ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	// Доверенность
	Описание = ОписаниеВидаДокумента();
	
	Описание.Видимость = 
		НЕ ЭтоРуководитель 
		И (ЗначениеЗаполнено(Параметры.ВладелецЭЦП) 
		ИЛИ Параметры.ЭтоОткрытиеСВыбраннойЭЦП)
		И НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоОтправкаБезДокументов(Параметры);
		
	Описание.Представление 	= НСтр("ru = 'Доверенность';
										|en = 'Доверенность'");
	
	Виды.Вставить("Доверенность", Описание);
	
КонецПроцедуры

Процедура ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры) Экспорт
	
	ЭтоНулевка 				 = Параметры.ЭтоНулевка;
	ЭтоПервичноеЗаявление    = Параметры.ЭтоПервичноеЗаявление;
	
	Видимость = ТребуетсяПриложитьДокументВПервичном(Параметры) И ЭтоНулевка;
			
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Видимость;
	Описание.ТолькоДляНулевки 	= Истина;
	
	Если ЭтоПервичноеЗаявление Тогда
		Описание.Представление  = НСтр("ru = 'Заявление на подключение';
										|en = 'Заявление на подключение'");
	Иначе
		Описание.Представление  = НСтр("ru = 'Заявление на изменение';
										|en = 'Заявление на изменение'");
	КонецЕсли;

	Виды.Вставить("Заявление", Описание);
	
КонецПроцедуры

Функция ВидыДокументовВЗаявлении(Параметры) Экспорт
	
	Виды = Новый Структура;
	ВидыДокументовВЗаявлении_ДобавитьПаспорт(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСНИЛС(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьСвидетельствоОПостановкеНаУчет(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПолномочий(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьДоверенность(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьЗаявление(Виды, Параметры);
	ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПрав(Виды, Параметры);

	Возврат Виды;

КонецФункции

Функция ПодсказкаДляЭлектронногоПодписания(ДобавлятьОтступы = Истина) Экспорт
	
	Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Подписать заявление эл. подписью можно, если у организации для выбранного сотрудника 
                                                  |есть действующий сертификат и на компьютере установлен криптопровайдер. 
                                                  |При использовании эл. подписи некоторые документы можно будет не оформлять в бумажном виде.
                                                  |После отправки заявления, подписанного эл. подписью, будет создан новый закрытый ключ и сертификат.';
                                                  |en = 'Подписать заявление эл. подписью можно, если у организации для выбранного сотрудника 
                                                  |есть действующий сертификат и на компьютере установлен криптопровайдер. 
                                                  |При использовании эл. подписи некоторые документы можно будет не оформлять в бумажном виде.
                                                  |После отправки заявления, подписанного эл. подписью, будет создан новый закрытый ключ и сертификат.'"));
	
	Если ДобавлятьОтступы Тогда
		Результат = Новый ФорматированнаяСтрока(Результат, Символы.ПС, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭП";
	
	Если ПустаяСтрока(Форма.ВладелецЭЦП) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните владельца эл. подписи';
											|en = 'Заполните владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	КонецЕсли;
		
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьФИОВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "УказательВладелецЭП";
	
	// Фамилия
	Если ПустаяСтрока(Форма.ВладелецЭЦПФамилия) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните фамилию владельца эл. подписи';
											|en = 'Заполните фамилию владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПФамилия, 
			НСтр("ru = 'Фамилия владельца эл. подписи';
				|en = 'Фамилия владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Имя
	Если ПустаяСтрока(Форма.ВладелецЭЦПИмя) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните имя владельца эл. подписи';
											|en = 'Заполните имя владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПИмя, 
			НСтр("ru = 'Имя владельца эл. подписи';
				|en = 'Имя владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Отчетство
	Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПОтчество, 
			НСтр("ru = 'Отчество владельца эл. подписи';
				|en = 'Отчество владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьИННВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	РезультатПроверки = ПроверитьИННВладельцаЭПВТихомРежиме(Форма);
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьИННВладельцаЭПВТихомРежиме(Форма) Экспорт

	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	
	ФИО = ДокументооборотСКОКлиентСервер.ФамилияИнициалы(Форма.ВладелецЭЦПФамилия, Форма.ВладелецЭЦПИмя, Форма.ВладелецЭЦПОтчество);
	
	Если ПустаяСтрока(ФИО) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните ИНН владельца эл. подписи в карточке физ. лица';
							|en = 'Заполните ИНН владельца эл. подписи в карточке физ. лица'");
		
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = Истина;
		Возврат РезультатПроверки;
		
	ИначеЕсли ПустаяСтрока(Форма.ВладелецЭЦПИНН) Тогда
		
		ТекстОшибки = НСтр("ru = 'Заполните ИНН владельца эл. подписи (%1) в карточке физ. лица';
							|en = 'Заполните ИНН владельца эл. подписи (%1) в карточке физ. лица'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
		
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = Истина;
		Возврат РезультатПроверки;
		
	ИначеЕсли СтрДлина(Форма.ВладелецЭЦПИНН) <> 12 Тогда
		
		ТекстОшибки = НСтр("ru = 'ИНН владельца эл. подписи (%1) должен состоять из 12 цифр';
							|en = 'ИНН владельца эл. подписи (%1) должен состоять из 12 цифр'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		РезультатПроверки.Пустой	  = СтрДлина(Форма.ВладелецЭЦПИНН) < 12;
		Возврат РезультатПроверки;

	Иначе
		
		ТекстОшибкиПоСути = ОшибкаПроверкиИННТребованиям(Форма.ВладелецЭЦПИНН);
		Если ЗначениеЗаполнено(ТекстОшибкиПоСути) Тогда
			
			ТекстОшибки = НСтр("ru = 'ИНН владельца эл. подписи (%1) некорректный:';
								|en = 'ИНН владельца эл. подписи (%1) некорректный:'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ФИО);
			ТекстОшибки = ТекстОшибки + Символы.ПС +  ТекстОшибкиПоСути;
			
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			Возврат РезультатПроверки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОшибкаПроверкиИННТребованиям(ИНН) 
	
	ТекстОшибкиПоСути = "";
	РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ТекстОшибкиПоСути);
	
	Возврат ТекстОшибкиПоСути;
		
КонецФункции

Функция ПроверитьВладелецЭЦПСНИЛС(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ПроверитьСНИЛС(Форма, Форма.ВладелецЭЦПСНИЛС, МастерДалее, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция СНИЛСБезРазделителей(СНИЛС) Экспорт

	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛС, "-","");
	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛСТолькоЦифры, " ","");
	
	Возврат СНИЛСТолькоЦифры;

КонецФункции

Функция ПроверитьИНН(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле     = "ИНН";
	РезультатПроверки.Реквизит = "ИННКомментарий";
	
	ИНН = СокрЛП(Форма.ИНН);
	
	// ИНН
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Укажите ИНН организации для начала подключения к 1С-Отчетности';
											|en = 'Укажите ИНН организации для начала подключения к 1С-Отчетности'");
		РезультатПроверки.Пустой	  = Истина;
		
	Иначе
		
		Если Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 10 Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН организации должен состоять из 10 цифр';
												|en = 'ИНН организации должен состоять из 10 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 10;
			
		ИначеЕсли НЕ Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 12 Тогда
				
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН предпринимателя должен состоять из 12 цифр';
												|en = 'ИНН предпринимателя должен состоять из 12 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 12;

		Иначе
			РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Форма.ЭтоЮридическоеЛицо, РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция РезультатПроверкиДанныхДляОтбораСертификатов(Форма, ВыводитьСообщения = Ложь) Экспорт
	
	РезультатФИО      = ПроверитьФИОВладельцаЭП(Форма, , ВыводитьСообщения);
	РезультатИННФЛ    = ПроверитьИННВладельцаЭП(Форма, , ВыводитьСообщения);
	РезультатСНИЛС    = ПроверитьВладелецЭЦПСНИЛС(Форма, , ВыводитьСообщения);
	РезультатИННЮЛ    = ПроверитьИНН(Форма, , ВыводитьСообщения);
	
	ЕстьОшибка = Ложь;
	ТекстОшибки = "";
		
	Результаты = Новый Массив;
	Результаты.Добавить(РезультатФИО);
	Результаты.Добавить(РезультатИННФЛ);
	Результаты.Добавить(РезультатСНИЛС);
	Результаты.Добавить(РезультатИННЮЛ);
	
	Для каждого Результат Из Результаты Цикл
		Если Результат.ЕстьОшибка И НЕ Результат.Пустой Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = ТекстОшибки + Символы.ПС + "- " + Результат.ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибка", ЕстьОшибка);
	Результат.Вставить("ТекстОшибки", СокрЛП(ТекстОшибки));
		
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаОрганизациюПоФорме(Форма) Экспорт
	
	Возврат СсылкаНаОрганизацию(Форма.Организация);

КонецФункции

Функция СсылкаНаОрганизацию(Организация) Экспорт
	
	Возврат Новый ФорматированнаяСтрока(Строка(Организация),,,,ПолучитьНавигационнуюСсылку(Организация));

КонецФункции

Функция СсылкаНаВладельца(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		ПодстрокаВладелец = Новый ФорматированнаяСтрока(Строка(Форма.ВладелецЭЦП),,,,ПолучитьНавигационнуюСсылку(Форма.ВладелецЭЦП));
	Иначе
		ПодстрокаВладелец = ФИОВладельца(Форма);
	КонецЕсли;
	
	Возврат ПодстрокаВладелец;

КонецФункции

Функция ФИОВладельца(Форма) Экспорт
	
	ФИО = Форма.ВладелецЭЦПФамилия + " " + Форма.ВладелецЭЦПИмя + " " + Форма.ВладелецЭЦПОтчество;
	ФИО = СокрЛП(ФИО);
	
	Возврат ФИО;

КонецФункции

Функция ПредставлениеОтбораСертификатов(Форма) Экспорт
	
	// Отбоp проверяется в методе ЭтоСертификатОрганизации
	
	Если ЭтоРуководитель(Форма) Тогда
		Шаблон = 
		НСтр("ru = '- ИНН: %1
			       |- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4';
			       |en = '- ИНН: %1
			       |- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4'");
	Иначе
		Шаблон = 
		НСтр("ru = '- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4';
			       |en = '- ФИО физ. лица: %2
			       |- ИНН физ. лица: %3
			       |- СНИЛС: %4'");
	КонецЕсли;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		СокрЛП(Форма.ИНН),
		ФИОВладельца(Форма),
		СокрЛП(Форма.ВладелецЭЦПИНН),
		СокрЛП(Форма.ВладелецЭЦПСНИЛС));
	
	Возврат Представление;

КонецФункции

Функция ТекстОшибкиНеНайденоНиОдногоСертификата(Форма, ДобавлятьВступление) Экспорт
	
	Если ДобавлятьВступление Тогда
		Вступление = ПодсказкаДляЭлектронногоПодписания();
	Иначе
		Вступление = "";
	КонецЕсли;
	
	РезультатПроверки = РезультатПроверкиДанныхДляОтбораСертификатов(Форма);
	
	СсылкаНаОрганизацию = СсылкаНаОрганизациюПоФорме(Форма);
	
	ПодстрокаОрганизация = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Не найдено ни одного сертификата эл. подписи по организации ';
			|en = 'Не найдено ни одного сертификата эл. подписи по организации '"),
		СсылкаНаОрганизацию);
		
	Если РезультатПроверки.ЕстьОшибка Тогда
		
		ТекстОшибки = РезультатПроверки.ТекстОшибки;

		ПолныйТекстОшибки = Новый ФорматированнаяСтрока(
			Вступление,
			ПодстрокаОрганизация,
			НСтр("ru = ' по причине:';
				|en = ' по причине:'"),
			Символы.ПС,
			Символы.ПС,
			ТекстОшибки,
			СсылкаНаВсеСертификаты());
		
	Иначе
	
		ПредставлениеОтбора = ПредставлениеОтбораСертификатов(Форма);
		
		ПолныйТекстОшибки = Новый ФорматированнаяСтрока(
			Вступление,
			ПодстрокаОрганизация,
			НСтр("ru = ' по данным:';
				|en = ' по данным:'"),
			Символы.ПС,
			Символы.ПС,
			ПредставлениеОтбора,
			СсылкаНаВсеСертификаты());
			
	КонецЕсли;
	
	Возврат ПолныйТекстОшибки;
				
КонецФункции

Функция СсылкаНаВсеСертификаты() Экспорт
	
	
	ПодстрокаКоманда = Новый ФорматированнаяСтрока(НСтр("ru = 'Все сертификаты';
														|en = 'Все сертификаты'"),,,,"e1cib/command/ОбщаяКоманда.ПоказатьВсеЛичныеСертификаты");
				
	Подсказка = Новый ФорматированнаяСтрока(
		Символы.ПС,
		Символы.ПС,
		ПодстрокаКоманда);
		
	Возврат Подсказка;
	
КонецФункции

Функция ОшибкаПриПолученииСертификатаЧерезДУЦ() Экспорт
	
	ОписаниеОшибки = НСтр("ru = 'Подписание эл. подписью невозможно в случае получения сертификата руководителями организаций, индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ';
							|en = 'Подписание эл. подписью невозможно в случае получения сертификата руководителями организаций, индивидуальными предпринимателями, нотариусами, адвокатами и главами КФХ'");
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Процедура ИнициализироватьСпособПолученияСертификата(Форма, ЗаявлениеСозданоКопированием) Экспорт
	
	ПереключитьНаСуществующий = 
		Форма.СертификатДолженБытьПолученОтГосУЦ
		ИЛИ Форма.ЭтоИнтеграцияСБанком
		ИЛИ ЗначениеЗаполнено(Форма.ТарифОператораЭДО)
		ИЛИ Форма.ЭтоОткрытиеСВыбраннойЭЦП
		ИЛИ ЭтоРуководитель(Форма);
	
	Если ПереключитьНаСуществующий Тогда 
		Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	ИначеЕсли НЕ ЗаявлениеСозданоКопированием Тогда
		Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИздатьНовый");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеБюджетополучателя(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ЭтоФормаПервичногоЗаявления(Форма) Тогда
		Элемент = Элементы.ГруппаБюджетополучатель;
	Иначе
		Элемент = Элементы.ЭтоБюджетополучатель;
	КонецЕсли;
	
	Элемент.Видимость = 
		Форма.ЭтоЮридическоеЛицо
		И НЕ Форма.ЭтоИнтеграцияСБанком
		И НЕ (ЭтоФормаПервичногоЗаявления(Форма) И Форма.ЭтоОткрытиеСВыбраннойЭЦП);
	
	Элемент.Доступность = НЕ Форма.ЗапретитьИзменение;
	
КонецПроцедуры

Функция ЭтоСменаСертификата(Форма) Экспорт
	
	Если ЭтоФормаВторичногоЗаявления(Форма) Тогда
		ЭтоСменаСертификата = Форма.ПереиздатьСертификат;
	Иначе
		// В первичном всегда сертификат переиздается
		ЭтоСменаСертификата = Истина;
	КонецЕсли;
	
	Возврат ЭтоСменаСертификата;
	
КонецФункции

Функция ТекстЧерезСколькоЛетМесяцевНедельДней(ДатаОтсчета, ДатаЗавершения, ПрефиксЧисла = "", ПостфиксСуществительного = "") Экспорт
	
	Если ДатаЗавершения <= ДатаОтсчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ГодОтсчета = Год(ДатаОтсчета);
	МесяцОтсчета = Месяц(ДатаОтсчета);
	ДеньОтсчета = День(ДатаОтсчета);
	ЧасОтсчета = Час(ДатаОтсчета);
	МинутаОтсчета = Минута(ДатаОтсчета);
	СекундаОтсчета = Секунда(ДатаОтсчета);
	
	ГодЗавершения = Год(ДатаЗавершения);
	МесяцЗавершения = Месяц(ДатаЗавершения);
	ДеньЗавершения = День(ДатаЗавершения);
	ЧасЗавершения = Час(ДатаЗавершения);
	МинутаЗавершения = Минута(ДатаЗавершения);
	СекундаЗавершения = Секунда(ДатаЗавершения);
	
	РазницаВГодах = ГодЗавершения - ГодОтсчета;
	РазницаВМесяцах = МесяцЗавершения - МесяцОтсчета;
	РазницаВДнях = ДеньЗавершения - ДеньОтсчета;
	РазницаВЧасах = ЧасЗавершения - ЧасОтсчета;
	РазницаВМинутах = МинутаЗавершения - МинутаОтсчета;
	РазницаВСекундах = СекундаЗавершения - СекундаОтсчета;
	
	Если РазницаВСекундах < 0 Тогда
		РазницаВМинутах = РазницаВМинутах - 1;
		РазницаВСекундах = РазницаВСекундах + 60;
	КонецЕсли;
	
	Если РазницаВМинутах < 0 Тогда
		РазницаВЧасах = РазницаВЧасах - 1;
		РазницаВМинутах = РазницаВМинутах + 60;
	КонецЕсли;
	
	Если РазницаВЧасах < 0 Тогда
		РазницаВДнях = РазницаВДнях - 1;
		РазницаВЧасах = РазницаВЧасах + 24;
	КонецЕсли;
	
	Если РазницаВДнях < 0 Тогда
		
		РазницаВМесяцах = РазницаВМесяцах - 1;
		Если МесяцЗавершения = 3 Тогда
			// берем год отсчета, в который существуют все дни месяца, например, с 29.02.2008 по 1.03.2009
			// прошло 1 год 1 день: c 29.02.2008 по 1.03.2008 прошел 1 день, далее 1 год
			Если (ГодОтсчета % 4 = 0) И ((ГодОтсчета % 100 <> 0) ИЛИ (ГодОтсчета % 400 = 0)) Тогда
				РазницаВДнях = РазницаВДнях + 29;
			Иначе
				РазницаВДнях = РазницаВДнях + 28;
			КонецЕсли;
			
		ИначеЕсли (МесяцЗавершения = 5) ИЛИ (МесяцЗавершения = 7) ИЛИ (МесяцЗавершения = 10)
			ИЛИ (МесяцЗавершения = 12) Тогда
			РазницаВДнях = РазницаВДнях + 30;
			
		Иначе
			РазницаВДнях = РазницаВДнях + 31;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РазницаВМесяцах < 0 Тогда
		РазницаВМесяцах = РазницаВМесяцах + 12;
		РазницаВГодах = РазницаВГодах - 1;
	КонецЕсли;
	РазницаВНеделях = Цел(РазницаВДнях / 7);
	РазницаВДнях = РазницаВДнях % 7;
	
	Результат = ПредставлениеРазницыЧерезСколькоЛетМесяцевНедельДней(
		РазницаВГодах, 
		РазницаВМесяцах, 
		РазницаВНеделях, 
		РазницаВДнях, 
		РазницаВЧасах, 
		РазницаВМинутах, 
		РазницаВСекундах, 
		ПрефиксЧисла, 
		ПостфиксСуществительного);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеРазницыЧерезСколькоЛетМесяцевНедельДней(
		РазницаВГодах = 0, 
		РазницаВМесяцах = 0, 
		РазницаВНеделях = 0, 
		РазницаВДнях = 0, 
		РазницаВЧасах = 0, 
		РазницаВМинутах = 0, 
		РазницаВСекундах = 0, 
		ПрефиксЧисла = "", 
		ПостфиксСуществительного = "",
		ВремяВыводитьПринудительно = Ложь) Экспорт
	
	Результат = "";
	Если РазницаВГодах > 0 Тогда
		Шаблон = НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 лет';
						|en = ';%1 год;;%1 года;%1 лет;%1 лет'");
		Результат = ПрефиксЧисла 
			+ ДокументооборотСКОКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, РазницаВГодах)
			+ ПостфиксСуществительного;
	КонецЕсли;
	
	Если РазницаВМесяцах > 0 Тогда
		НомерМесяца = Строка(РазницаВМесяцах) + НСтр("ru = ' мес.';
													|en = ' мес.'");
		Разделитель = ?(РазницаВНеделях = 0 И РазницаВДнях = 0, НСтр("ru = ' и ';
																	|en = ' и '"), ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерМесяца + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВНеделях > 0 Тогда
		НомерНедели = Строка(РазницаВНеделях) + НСтр("ru = ' нед.';
													|en = ' нед.'");
		Разделитель = ?(РазницаВДнях = 0, НСтр("ru = ' и ';
												|en = ' и '"), ", ");
		Результат = СоединитьЧерез(Результат, Разделитель, ПрефиксЧисла + НомерНедели + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВДнях > 0 Тогда
		НомерДня = Строка(РазницаВДнях) + НСтр("ru = ' д.';
												|en = ' д.'");
		Результат = СоединитьЧерез(Результат, НСтр("ru = ' и ';
													|en = ' и '"), ПрефиксЧисла + НомерДня + ПостфиксСуществительного);
	КонецЕсли;
	
	Если РазницаВДнях = 0 И Результат = "" ИЛИ ВремяВыводитьПринудительно Тогда
		
		Если РазницаВЧасах > 0 ИЛИ РазницаВМинутах > 0 Тогда
			Если РазницаВЧасах > 0 Тогда
				НомерЧаса = Строка(РазницаВЧасах) + НСтр("ru = ' ч.';
														|en = ' ч.'");
				Результат = СокрЛП(Результат + " " + ПрефиксЧисла + НомерЧаса + ПостфиксСуществительного);
			КонецЕсли;
			Если РазницаВМинутах > 0 Тогда
				НомерМинуты = Строка(РазницаВМинутах) + НСтр("ru = ' мин.';
															|en = ' мин.'");
				Результат = СоединитьЧерез(Результат, НСтр("ru = ' и ';
															|en = ' и '"), ПрефиксЧисла + НомерМинуты + ПостфиксСуществительного);
			КонецЕсли;
		Иначе
			НомерСекунды = Строка(РазницаВСекундах) + НСтр("ru = ' сек.';
															|en = ' сек.'");
			Результат = ПрефиксЧисла + НомерСекунды + ПостфиксСуществительного;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоединитьЧерез(Строка1, Разделитель, Строка2)
	
	Если ПустаяСтрока(Строка(Строка1)) Тогда
		Возврат Строка2;
	ИначеЕсли ПустаяСтрока(Строка(Строка2)) Тогда
		Возврат Строка1;
	Иначе
		Возврат Строка1 + Разделитель + Строка2;
	КонецЕсли;
	
КонецФункции

Функция ЭтоОблако(Форма) Экспорт
	
	Если ЭтоФормаПервичногоЗаявления(Форма) ИЛИ ЭтоФормаБыстрыйСтарт(Форма) Тогда
		ЭтоОблако = Форма.РежимРаботыСКлючами = 1;
	Иначе

		Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			ЭтоОблако = 
				Форма.ЭтоПереходВОблако 
				ИЛИ КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(Форма.МестоХраненияКлюча) И НЕ Форма.ЭтоПереходВКоробку
				ИЛИ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ Форма.ЭтоПереходВКоробку 
				ИЛИ ИспользоватьСуществующий(Форма) И Форма.ВключаемыйСертификатОблачный;
		Иначе
			ЭтоОблако = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ЭтоОблако;
	
КонецФункции

Процедура ПроверитьВключаемыйСертификат(Форма, МастерДалее) Экспорт
	
	ЭтоЗаявленияНаИзменение = ЭтоФормаВторичногоЗаявления(Форма);
	
	Проверить = 
		ИспользоватьСуществующий(Форма)
		И (ЭтоЗаявленияНаИзменение И Форма.ПереиздатьСертификат
		ИЛИ НЕ ЭтоЗаявленияНаИзменение);
	
	Если Проверить Тогда
		
		Если Форма.ВключаемыйСертификат = Неопределено Тогда
		
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Выберите сертификат, либо переключитесь в режим получения нового сертификата';
								|en = 'Выберите сертификат, либо переключитесь в режим получения нового сертификата'");
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки,,,"УказательВключаемыйСертификат"); 
			
		ИначеЕсли Форма.ВключаемыйСертификатОблачный И НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
			МастерДалее = Ложь;
			
			ТекстОшибки = НСтр("ru = 'Выбран сертификат, хранящийся в программе, но использование таких сертификатов вам недоступно';
								|en = 'Выбран сертификат, хранящийся в программе, но использование таких сертификатов вам недоступно'");
			Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Форма) Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ', поскольку вы являетесь руководителем и должны использовать сертификат с токена. Выберите сертификат с токена, либо переключитесь в режим получения нового сертификата';
												|en = ', поскольку вы являетесь руководителем и должны использовать сертификат с токена. Выберите сертификат с токена, либо переключитесь в режим получения нового сертификата'");
			ИначеЕсли Форма.ЭтоБюджетополучатель Тогда
				ТекстОшибки = ТекстОшибки + НСтр("ru = ', поскольку вы должны использовать сертификат, полученный в Федеральном казначействе. Выберите сертификат Федерального казначейства';
												|en = ', поскольку вы должны использовать сертификат, полученный в Федеральном казначействе. Выберите сертификат Федерального казначейства'");
			Иначе
				ТекстОшибки = ТекстОшибки + НСтр("ru = '. Выберите локальный сертификат, либо переключитесь в режим получения нового сертификата';
												|en = '. Выберите локальный сертификат, либо переключитесь в режим получения нового сертификата'");
			КонецЕсли;
			
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки,,,"УказательВключаемыйСертификат");

		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьУЦПоУмолчанию(Форма) Экспорт
	
	Если ЭтоРуководитель(Форма) И НЕ ИспользоватьСуществующий(Форма) Тогда
		Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
	Иначе
		Форма.УЦ = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановленViPNet(Форма) Экспорт
	
	ЭтоРежимТестирования = ДокументооборотСКОКлиентСервер.ИспользуетсяРежимТестирования();
	
	УстановленViPNet =
		НЕ ЭтоОблако(Форма)
		И Форма.ViPNetCSPУстановлен 
		И НЕ Форма.CryptoProCSPУстановлен 
		И НЕ ЭтоРежимТестирования;
		
	Возврат УстановленViPNet;
		
КонецФункции

Функция ЭтоПолучениеСертификатВКА(Форма) Экспорт

	 ПолучениеВКА =
		НЕ ЭтоРуководитель(Форма) // Получат сертификат в ФНС
		И НЕ Форма.ЭтоБюджетополучатель // Получат сертификат в ФК
		И НЕ ИспользоватьСуществующий(Форма);
		
	Возврат ПолучениеВКА;
		
КонецФункции

Процедура ИзменитьОформлениеУЦ(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Ошибка
	РезультатПроверки = ПроверитьУЦ(Форма,, Ложь);
	Элементы.ПроверкаУЦ.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	Элементы.ПроверкаУЦ.Видимость = ЗначениеЗаполнено(Элементы.ПроверкаУЦ.Заголовок);
	
	ВыбраноУдаленноеПереиздание = ВыбраноУдаленноеПереизданиеСертификата(Форма);
	
	// Подсказка
	Элемент = Элементы.ГруппаЗначенияУЦ;
	ОтобразитьПодсказку = 
		Форма.ВозможноБесшовноеПолучениеСертификатаВДУЦ 
		И НЕ ИспользоватьСуществующий(Форма);
		
	Если ОтобразитьПодсказку Тогда
		ТекстПодсказки = ПодсказкаПриБесшовномПолученииСертификатаВДУЦ(Форма);
		Элемент.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	// Видимость
	Элементы.ГруппаУЦ.Видимость = НужноВыбратьУЦ(Форма);
	
	Элементы.УЦ.Видимость = НЕ ВыбраноУдаленноеПереиздание;
	
	Если Элементы.УЦ.Видимость Тогда
		Элементы.УЦ.Доступность = НЕ Форма.ЗапретитьИзменение;
	КонецЕсли;
	
	Если ЭтоФормаВторичногоЗаявления(Форма) Тогда
		Форма.ИзменитьОформлениеУдаленногоПереизданияСертификата();
	КонецЕсли;
	
КонецПроцедуры

Функция НужноВыбратьУЦ(Форма)

	Возврат ЭтоРуководитель(Форма)
		И ЭтоСменаСертификата(Форма)
		И НЕ ИспользоватьСуществующий(Форма)
		И НЕ Форма.ЭтоИнтеграцияСБанком;

КонецФункции
	
Функция ВыбраноУдаленноеПереизданиеСертификата(Форма)

	Возврат
		ДоступенВыборСпособаПереизданияСертификата(Форма)
		И Форма.ЭтоУдаленноеПереизданиеСертификата;

КонецФункции
	
Функция ЭтоУдаленноеПереизданиеСертификата(Форма)

	Возврат
		ЭтоФормаВторичногоЗаявления(Форма)
		И Форма.ЭтоУдаленноеПереизданиеСертификата;

КонецФункции
		
Функция ДоступенВыборСпособаПереизданияСертификата(Форма) Экспорт

	Возврат
		ЭтоРуководитель(Форма)
		И ЭтоСменаСертификата(Форма)
		И ЭтоФормаВторичногоЗаявления(Форма)
		И НЕ ИспользоватьСуществующий(Форма)
		И НЕ Форма.ЭтоБюджетополучатель
		И Форма.ЭтоСертификатФНС;
		
КонецФункции

Функция ПриViPNetВыбралиУЦФНСилиАЦУЦ(Форма) Экспорт
	
	ЭтоФНС  = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
	ЭтоАЦУЦ = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
	
	ЭтоРежимТестирования = ДокументооборотСКОКлиентСервер.ИспользуетсяРежимТестирования();
	
	Результат = (ЭтоФНС ИЛИ ЭтоАЦУЦ) И УстановленViPNet(Форма) И НЕ ЭтоРежимТестирования;

	Возврат Результат;
	
КонецФункции

Функция ПроверитьУЦ(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Реквизит  = "ПроверкаУЦ";
	РезультатПроверки.Поле 		= "УЦ";
	
	Если НужноВыбратьУЦ(Форма) ИЛИ ДоступенВыборСпособаПереизданияСертификата(Форма) Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.УЦ) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Выберите место, где будете получать сертификат';
												|en = 'Выберите место, где будете получать сертификат'");
			РезультатПроверки.Пустой	  = Истина;
		КонецЕсли;
		
		ЭтоФНС  = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦФНС");
		ЭтоАЦУЦ = Форма.УЦ = ПредопределенноеЗначение("Перечисление.УдостоверяющиеЦентрыБРО.УЦАналитическийЦентр");
		
		ШлюзФНСПриостановлен = Истина;

		Если ШлюзФНСПриостановлен И ЭтоФНС Тогда
			ТекстОшибки = НСтр("ru = 'Удостоверяющий центр ФНС приостановил возможность получения сертификата путем отправки заявления.
	              |Вы можете получить сертификат ФНС, обратившись непосредственно в инспекцию.';
	              |en = 'Удостоверяющий центр ФНС приостановил возможность получения сертификата путем отправки заявления.
	              |Вы можете получить сертификат ФНС, обратившись непосредственно в инспекцию.'");
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
		ПроверятьКриптопровайдер = НЕ ШлюзФНСПриостановлен И ЭтоФНС ИЛИ ЭтоАЦУЦ;
		
		НадоСменитьКриптопровайдер = ПроверятьКриптопровайдер И ПриViPNetВыбралиУЦФНСилиАЦУЦ(Форма);

		Если НадоСменитьКриптопровайдер Тогда
			
			ТекстОшибки = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Недоступно при использовании ViPNet CSP. ';
					|en = 'Недоступно при использовании ViPNet CSP. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Подробнее...';
												|en = 'Подробнее...'"),,,,"Подробнее"));
				
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
		ЭтоРежимТестирования = ДокументооборотСКОКлиентСервер.ИспользуетсяРежимТестирования();

		Если ПроверятьКриптопровайдер 
			И НЕ Форма.CryptoProCSPУстановлен 
			И ВыводитьСообщения
			И НЕ ЭтоРежимТестирования Тогда
			
			ТекстОшибки = Новый ФорматированнаяСтрока(
			    НСтр("ru = 'Для получения сертификата эл. подписи ';
					|en = 'Для получения сертификата эл. подписи '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'установите';
												|en = 'установите'"),,,,"e1cib/command/ОбщаяКоманда.УстановитьКриптоПроДляФНС"),
				НСтр("ru = ' КриптоПро CSP.';
					|en = ' КриптоПро CSP.'"));
			РезультатПроверки.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
		// Для первичного проверка делается в методе ЕстьОшибкаЛицензииКриптоПро()
		Если ЭтоФормаВторичногоЗаявления(Форма) Тогда
			
			ЭтоОтправкаЗаявления = ВыводитьСообщения;
			
			Если ПроверятьКриптопровайдер
				И Форма.CryptoProCSPУстановлен 
				И Форма.ЛицензииКриптоПроИстекла
				И НЕ ЭтоОтправкаЗаявления Тогда
				
				ТекстОшибки = Новый ФорматированнаяСтрока(
				    НСтр("ru = 'Вероятно, лицензия на КриптоПро CSP истекла. ';
						|en = 'Вероятно, лицензия на КриптоПро CSP истекла. '"),
					Новый ФорматированнаяСтрока(НСтр("ru = 'Приобрести';
													|en = 'Приобрести'"),,,,"https://1c-report.ru/vse-dlya-podpisi"));
					
				РезультатПроверки.ТекстОшибки = ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
		
КонецФункции

// Формирует контекст места хранения ключа по переданным параметрам.
// 
Функция ОпределитьМестоХраненияКлюча(ВыбранноеМестоХраненияКлюча, УчетнаяЗаписьОблачнойПодписи = Неопределено) Экспорт
	
	Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	
	Если ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProHSM") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoProDSS")
		ИЛИ ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись") Тогда
		Результат = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(ПредопределенноеЗначение("Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись"), УчетнаяЗаписьОблачнойПодписи);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина);
	ИначеЕсли ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка") Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
	КонецЕсли;
				
	Возврат Результат;
	
КонецФункции

// Описывает допустимые типы значения для указанного вида значения параметра облачной подписи
//
// Параметры:
//	ВидПараметра - ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	Тип, Строка
//
Функция ТипПараметраОблачнойПодписи(ВидПараметра)
	
	СсылкаПараметра = ПолучитьВидПараметраОблачнойПодписи(ВидПараметра);
	
	Если СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ИдентификаторСервера")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.Логин")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.Телефон")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ЭлектроннаяПочта") Тогда
		Результат = Тип("Строка");
		
	ИначеЕсли СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПовторнаяОтправкаКлючаМобильногоПриложения")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПовторнаяОтправкаКодаАвторизации")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьКлючМобильногоПриложения")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьКлючМобильногоПриложенияАвтоматически")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СменитьПароль")
		ИЛИ СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.СоздатьНовуюУчетнуюЗапись") Тогда
		Результат = Тип("Булево");
		
	ИначеЕсли СсылкаПараметра = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.УчетнаяЗапись") Тогда
		Результат = "Ссылка";
		
	Иначе
		Результат = Тип("Строка");
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Проверяет и формирует ссылку на перечесление
//
// Параметры:
//	ВидПараметра - ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи, Строка
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи
//
Функция ПолучитьВидПараметраОблачнойПодписи(ВидПараметра)
	
	Если ТипЗнч(ВидПараметра) = Тип("ПеречислениеСсылка.ПараметрыПодключенияКОблачнойПодписи") Тогда
		Результат = ВидПараметра;
	ИначеЕсли ТипЗнч(ВидПараметра) = Тип("Строка") И СтрНайти(ВидПараметра, ".") > 0 Тогда
		Результат = ПредопределенноеЗначение(ВидПараметра);
	ИначеЕсли ТипЗнч(ВидПараметра) = Тип("Строка") Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи." + ВидПараметра);
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияКОблачнойПодписи.ПустаяСсылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КнопкиНетДа() Экспорт

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(НСтр("ru = 'Нет';
						|en = 'Нет'"));
	Кнопки.Добавить(НСтр("ru = 'Да';
						|en = 'Да'"));
	
	Возврат Кнопки;
	
КонецФункции

Процедура ПосчитатьКоличествоДокументовВЗаявлении(ФайлДокумента, ВидДокумента, МЧД, Количество)
	
	// Для МЧД считаем количество различных МЧД
	// Для остальных видов документов - количество файлов
	Если ЭтоМЧД(ФайлДокумента) Тогда
		
		Если МЧД.Найти(ФайлДокумента.МЧД) = Неопределено Тогда
			МЧД.Добавить(ФайлДокумента.МЧД);
		КонецЕсли;
		
		Количество = МЧД.Количество();
	Иначе
		Количество = Количество + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоМЧД(ФайлДокумента) Экспорт
	
	ЭтоМЧД =
		ФайлДокумента.Документ = НСтр("ru = 'Доверенность';
										|en = 'Доверенность'")
		И ФайлДокумента.Свойство("МЧД") 
		И ЗначениеЗаполнено(ФайлДокумента.МЧД);
		
	Возврат ЭтоМЧД;
	
КонецФункции

Процедура ОпределитьНаименованиеДокументовВЗаявлении(ФайлДокумента, ИмяПервого)
	
	Если ЭтоМЧД(ФайлДокумента) Тогда
		ИмяПервого = Строка(ФайлДокумента.МЧД);
	Иначе
		ИмяПервого = ФайлДокумента.ИсходноеИмя;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоФормаВыбораДоверенностиВЗаявлении(Форма) Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФормы = КраткоеИмяФормыПоПолному(Форма);
	
	ЭтоФормаЗаявления = СтрНайти(ИмяФормы, "Мастер_Доверенности");
	Возврат ЭтоФормаЗаявления;
	
КонецФункции

Функция ТребованияВложениямЗаявления() Экспорт
	
	ДополнительныеПараметры = ОперацииСФайламиЭДКОКлиентСервер.ТребованияКСканам();
	ДополнительныеПараметры.Вставить("ДопустимыеТипыФайлов", 		"jpeg;jpg;png;pdf;tiff;tif;xml;sgn");
	ДополнительныеПараметры.Вставить("ГлубинаЦвета", 				"БитНаПиксел24");
	ДополнительныеПараметры.Вставить("ПреобразоватьВОттенкиСерого", Ложь);
	ДополнительныеПараметры.Вставить("МинимальнаяПлотность", 		150);
	ДополнительныеПараметры.Вставить("МаксимальнаяПлотность", 		400);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмерФайла", 	10 * 1024 * 1024);

	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ИзменитьОформлениеВладельцаЭП(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Руководитель или Предприниматель
	Элементы.ГруппаВыбораВидаВладельцаЭЦП.Видимость = 
		НЕ Форма.ЭтоИнтеграцияСБанком
		И (НЕ Форма.ЭтоОткрытиеСВыбраннойЭЦП
		ИЛИ НЕ ЗначениеЗаполнено(Форма.Руководитель));
		
	Элементы.ВыбратьГлБухгалтера.Видимость = Форма.ЭтоЮридическоеЛицо;
	
	// Оформление выпадающих меню
	Элементы.ВыбратьДиректора.Пометка 		= Ложь;
	Элементы.ВыбратьГлБухгалтера.Пометка 	= Ложь;
	Элементы.ВыбратьСотрудника.Пометка 		= Ложь;

	Если Форма.ЭтоЮридическоеЛицо Тогда
		Элементы.ВыбратьДиректора.Заголовок = НСтр("ru = 'Руководитель';
													|en = 'Руководитель'");
	Иначе
		Элементы.ВыбратьДиректора.Заголовок = НСтр("ru = 'Предприниматель';
													|en = 'Предприниматель'");
	КонецЕсли;
	
	Если ЭтоРуководитель(Форма) Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьДиректора.Заголовок;
		Элементы.ВыбратьДиректора.Пометка = Истина;
		
	ИначеЕсли ЭтоБухгалтер(Форма) И Форма.ЭтоЮридическоеЛицо Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьГлБухгалтера.Заголовок;
		Элементы.ВыбратьГлБухгалтера.Пометка = Истина;
		
	ИначеЕсли ЭтоДругойСотрудник(Форма) Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьСотрудника.Заголовок;
		Элементы.ВыбратьСотрудника.Пометка = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаВыбораВидаВладельцаЭЦП.Доступность = НЕ Форма.ЗапретитьИзменение;
	
КонецПроцедуры

Функция СоответствиеИДиМЧД(ДокументЗаявление) Экспорт
	
	ИД = Новый Соответствие;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.ЭтоМЧД Тогда
			ИД.Вставить(ЭлектронныйДокумент.МЧД, ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИД;
	
КонецФункции

Процедура УдалитьМЧДИзФайлов(Форма) Экспорт
	
	Индекс = Форма.ФайлыДокументов.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ДанныеМЧД  = Форма.ФайлыДокументов[Индекс].Значение;
		ЭтоФайлМЧД = ДанныеМЧД.Свойство("МЧД") И ЗначениеЗаполнено(ДанныеМЧД.МЧД);
		Если ЭтоФайлМЧД Тогда
			Форма.ФайлыДокументов.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДоверенностьСредиФайлов(Форма) Экспорт
	
	МЧД = Новый СписокЗначений;
	
	Для каждого Строка Из Форма.ФайлыДокументов Цикл
		Если Строка.Представление = "Доверенность" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Функция ИзвлечьМЧДИзФайлов(Форма) Экспорт
	
	МЧД = Новый СписокЗначений;
	
	Для каждого Строка Из Форма.ФайлыДокументов Цикл
		ДанныеМЧД  = Строка.Значение;
		ЭтоФайлМЧД = ДанныеМЧД.Свойство("МЧД") И ЗначениеЗаполнено(ДанныеМЧД.МЧД);
		Если ЭтоФайлМЧД Тогда
			МЧД.Добавить(ДанныеМЧД, ДанныеМЧД.Документ);
		КонецЕсли;
	КонецЦикла;
	
	УдалитьМЧДИзФайлов(Форма);
	
	Возврат МЧД;

КонецФункции

Процедура ВернутьМЧДВФайлы(Форма, МЧД) Экспорт
	
	Для каждого ДанныеМЧД Из МЧД Цикл
		Форма.ФайлыДокументов.Добавить(ДанныеМЧД.Значение, ДанныеМЧД.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОднуМЧДВФайлыЗаявления(Форма, ДанныеМЧД) Экспорт
	
	Документ = "Доверенность";
	
	Файл = Новый Структура();
	Файл.Вставить("Документ", Документ);
	Файл.Вставить("МЧД",      ДанныеМЧД.МЧД);
	Файл.Вставить("Адрес",    ДанныеМЧД.АдресМЧД);
	Файл.Вставить("ИсходноеИмя", ДанныеМЧД.ИмяМЧД);
	Файл.Вставить("ЭтоМЧД",   Истина);
	Файл.Вставить("Размер",   ДанныеМЧД.РазмерМЧД);
	
	Форма.ФайлыДокументов.Добавить(Файл, Документ);
	
	Если ЗначениеЗаполнено(ДанныеМЧД.АдресПодписи) Тогда
		
		Подпись = Новый Структура();
		Подпись.Вставить("Документ", Документ);
		Подпись.Вставить("МЧД",      ДанныеМЧД.МЧД);
		Подпись.Вставить("Адрес",    ДанныеМЧД.АдресПодписи);
		Подпись.Вставить("ИсходноеИмя", ДанныеМЧД.ИмяПодписи);
		Подпись.Вставить("ЭтоПодписьКМЧД", Истина);
		Подпись.Вставить("Размер",   ДанныеМЧД.РазмерПодписи);
		
		Форма.ФайлыДокументов.Добавить(Подпись, Документ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМЧДВФайлыЗаявления(Форма, ДанныеМЧД) Экспорт
	
	УдалитьМЧДИзФайлов(Форма);
	
	Если Форма.ВладелецЭЦПЭтоФизЛицо Тогда
		
		УдалитьТекущийВидДокументов(Форма, "Доверенность");
		
		Для каждого ДанныеОднойМЧД Из ДанныеМЧД Цикл
			Если ЗначениеЗаполнено(ДанныеОднойМЧД.МЧД) Тогда
				ДобавитьОднуМЧДВФайлыЗаявления(Форма, ДанныеОднойМЧД);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ЭтоСотрудникИП(Форма) Экспорт
	
	ЭтоРуководитель = ЭтоРуководитель(Форма);
	ЭтоИП = НЕ Форма.ЭтоЮридическоеЛицо;
	
	ЭтоСотрудникИП = ЭтоИП И НЕ ЭтоРуководитель;
	
	Возврат ЭтоСотрудникИП;
	
КонецФункции

Функция ЗапрещенВыпускСертификатаНаСотрудника(Форма) Экспорт
	
	ЭтоРуководитель    = ЭтоРуководитель(Форма);
	ПриказВступилВСилу = ОбработкаЗаявленийАбонентаВызовСервера.ЗапретВыпускаСертификатаНаСотрудникаВступилВСилу();
	
	ЭтоСотрудник = НЕ ЭтоРуководитель;
	
	Возврат ПриказВступилВСилу И ЭтоСотрудник И ЭтоПолучениеНовогоСертификата(Форма);
	
КонецФункции

Функция ОбязательноПриложитьМЧД(Форма) Экспорт
	
	Если ЭтоРуководитель(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоСотрудникИП = ЭтоСотрудникИП(Форма);
	
	ЭтоИспользоватьСуществующий = Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	
	ВыбранСертификатФЛ = 
		ЭтоИспользоватьСуществующий 
		И Форма.ВключаемыйСертификат <> Неопределено
		И Форма.ВладелецЭЦПЭтоФизЛицо
		И ЭтоСертификатФизЛица(Форма.ВключаемыйСертификат);
		
	ИспользуетсяСертификатФЛ = ИспользуетсяСертификатФЛ(Форма);
		
	Обязательно = 
		ВыбранСертификатФЛ 
		ИЛИ ЭтоСотрудникИП 
		ИЛИ ИспользуетсяСертификатФЛ
		ИЛИ ЗапрещенВыпускСертификатаНаСотрудника(Форма);
	
	Возврат Обязательно;
		
КонецФункции

Функция ИспользуетсяСертификатФЛ(Форма) Экспорт
	
	Используется =
		НЕ ЭтоПолучениеНовогоСертификата(Форма)
		И НЕ ИспользоватьСуществующий(Форма)
		И ЭтоФормаВторичногоЗаявления(Форма)
		И Форма.ВладелецЭЦПЭтоФизЛицоИсходный;
		
	Возврат Используется;
		
КонецФункции

Функция ИспользуетсяСертификатСотрудника(Форма) Экспорт
	
	Обязательно =
		НЕ ЭтоПолучениеНовогоСертификата(Форма)
		И НЕ ИспользоватьСуществующий(Форма)
		И ЭтоФормаВторичногоЗаявления(Форма)
		И НЕ Форма.ВладелецЭЦПЭтоФизЛицоИсходный;
		
	Возврат Обязательно;
		
КонецФункции

Функция ЕстьВыборМеждуМЧДиСканом(Форма) Экспорт
	
	ИспользоватьСуществующий = Форма.СпособПолученияСертификата = ПредопределенноеЗначение("Перечисление.СпособПолученияСертификата.ИспользоватьСуществующий");
	ИздатьНовыйСертификат  = ЭтоПолучениеНовогоСертификата(Форма);
	ЭтоРуководитель        = ЭтоРуководитель(Форма);
	ПереключенНаСуществующийНоНеВыбран = ИспользоватьСуществующий И Форма.ВключаемыйСертификат = Неопределено;
	
	ЕстьВыбор = 
		(ИздатьНовыйСертификат ИЛИ ПереключенНаСуществующийНоНеВыбран)
		И Форма.ЭтоЮридическоеЛицо
		И НЕ ЭтоРуководитель
		И НЕ ИспользуетсяСертификатСотрудника(Форма)
		И НЕ ЗапрещенВыпускСертификатаНаСотрудника(Форма);
		
	Возврат ЕстьВыбор;
		
КонецФункции

Функция ОткрытьФормуДобавленияМЧДИлиСкана(Форма, ВидДокумента) Экспорт
	
	ЭтоОткрытиеИзЗаявления = ЭтоФормаЗаявления(Форма);
	ЭтоДоверенность        = ВидДокумента = НСтр("ru = 'Доверенность';
												|en = 'Доверенность'");
	
	ЭтоОткрытиеДоверенности = 
		ЭтоОткрытиеИзЗаявления 
		И ЭтоДоверенность;
	
	Если НЕ ЭтоОткрытиеДоверенности Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбязательноПриложитьМЧД  = ОбязательноПриложитьМЧД(Форма);
	ЕстьВыборМеждуМЧДиСканом = ЕстьВыборМеждуМЧДиСканом(Форма);
		
	ОткрытьФормуДобавленияМЧДИлиСкана = 
		ОбязательноПриложитьМЧД
		ИЛИ ЕстьВыборМеждуМЧДиСканом;
	
	Возврат ОткрытьФормуДобавленияМЧДИлиСкана;
		
КонецФункции

Функция ЭтоСертификатФизЛица(Сертификат) Экспорт
	
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВладелецСтруктура = ДокументооборотСКОКлиентСервер.ВладелецСертификат(Сертификат);
	Возврат ЭтоСертификатФизЛицаПоВладельцу(ВладелецСтруктура);
	
КонецФункции

Функция ЭтоСертификатФизЛицаПоВладельцу(ВладелецСтруктура) Экспорт
	
	Если ВладелецСтруктура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоСертификатФизЛица = 
		НЕ ЭтоСертификатСотрудника(ВладелецСтруктура) 
		ИЛИ ЭтоСертификатФЛКазначейства(ВладелецСтруктура);
		
	Возврат ЭтоСертификатФизЛица;
	
КонецФункции

Функция ЭтоСертификатФЛКазначейства(ВладелецСтруктура) Экспорт
	
	Если ВладелецСтруктура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИННы = ДокументооборотСКОКлиентСервер.ИННыИзСертификата(ВладелецСтруктура);
	ЕстьИННЮЛ = ЗначениеЗаполнено(ИННы.ЮЛ);
	
	// Сертификаты физ. лиц казначейства могут содержать название организации
	ЭтоСертификатФЛКазначейства = НЕ ЕстьИННЮЛ И (ВладелецСтруктура.Свойство("O") ИЛИ ВладелецСтруктура.Свойство("UN"));
	
	Возврат ЭтоСертификатФЛКазначейства;
	
КонецФункции

Функция ЭтоСертификатСотрудника(Знач ВладелецСтруктура) Экспорт
	
	Если ВладелецСтруктура = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецСтруктура) = Тип("Строка") Тогда
		ВладелецСтруктура = ДокументооборотСКОКлиентСервер.ВладелецСтруктуройИзСтроки(ВладелецСтруктура);
	КонецЕсли;
	
	ИННы = ДокументооборотСКОКлиентСервер.ИННыИзСертификата(ВладелецСтруктура);
	ЕстьИННЮЛ = ЗначениеЗаполнено(ИННы.ЮЛ);
	
	ЭтоСертификатСотрудника = 
		ЕстьИННЮЛ
		ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВладелецСтруктура, "O")
		ИЛИ ЗначениеЗаполнено(ДокументооборотСКОКлиентСервер.ОГРНСертификата(ВладелецСтруктура));
	
	ЭтоСертификатФЛКазначейства = ЭтоСертификатФЛКазначейства(ВладелецСтруктура);
		
	Возврат ЭтоСертификатСотрудника И НЕ ЭтоСертификатФЛКазначейства;
	
КонецФункции

Функция ЭтоСертификатИП(Сертификат) Экспорт
	
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВладелецСтруктура = ДокументооборотСКОКлиентСервер.ВладелецСертификат(Сертификат);
	
	ЭтоСертификатИП = 
		ВладелецСтруктура.Свойство("OGRNIP")
		ИЛИ ВладелецСтруктура.Свойство("OID1_2_643_100_5"); // ОГРНИП
	
	Возврат ЭтоСертификатИП;
	
КонецФункции

Функция ПредставлениеОрганизацииСертификата(Сертификат) Экспорт
	
	Если ЭтоСертификатФизЛица(Сертификат) Тогда
		Возврат "Физическое лицо";
	ИначеЕсли ЭтоСертификатИП(Сертификат) Тогда
		Возврат "Индивидуальный предприниматель";
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ЭтоПолучениеНовогоСертификата(Форма) Экспорт
	
	ЭтоПереизданиеСертификата = Ложь;
	Если НЕ ИспользоватьСуществующий(Форма) Тогда
		
		Если ЭтоФормаПервичногоЗаявления(Форма) Тогда
			ЭтоПереизданиеСертификата = Истина;
		ИначеЕсли ЭтоФормаВторичногоЗаявления(Форма)
			И Форма.ПереиздатьСертификат Тогда
			ЭтоПереизданиеСертификата = Истина;
		ИначеЕсли ЭтоФормаВыбораДоверенностиВЗаявлении(Форма) Тогда
			ЭтоПереизданиеСертификата = Форма.ЭтоПолучениеНовогоСертификата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоПереизданиеСертификата;

КонецФункции

Функция ЭтоНужнаяФорма(Форма, Имя) Экспорт
	
	ЭтоНеФорма = 
		Форма = Неопределено 
		ИЛИ ТипЗнч(Форма) <> Тип("ФормаКлиентскогоПриложения");
		
	Если ЭтоНеФорма Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КраткоеИмяФормыПоПолному(Форма) = Имя;
	
КонецФункции

Процедура ВидыДокументовВЗаявлении_ДобавитьПодтверждениеПрав(Виды, Параметры) Экспорт
	
	Описание = ОписаниеВидаДокумента();
	Описание.Видимость			= Параметры.ПоказыватьПодтверждениеПрав;
	Описание.ТолькоДляНулевки 	= Ложь;
	Описание.Представление  	= НСтр("ru = 'Предоставление прав';
										|en = 'Предоставление прав'");

	Виды.Вставить("ПодтверждениеПрав", Описание);
	
КонецПроцедуры

Функция ПроверитьСНИЛС(Форма, СНИЛС, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭЦПСНИЛС";
	
	// СНИЛС
	СНИЛСБезРазделителей = СНИЛСБезРазделителей(СНИЛС);
	
	Если ПустаяСтрока(СНИЛСБезРазделителей) Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните СНИЛС владельца эл. подписи';
											|en = 'Заполните СНИЛС владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
	Иначе
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СНИЛС) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра';
												|en = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(СНИЛС, Ложь, Истина) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)';
												|en = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'");
		КонецЕсли;
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьФизЛицо(Форма, Строка, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	// ФизическоеЛицо
	Если ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
		
		РезультатПроверки = ПроверитьСНИЛС(Форма, Строка.СНИЛС, МастерДалее, ВыводитьСообщения);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не заполнено физ. лицо у пользователя %1. Зайдите в карточку пользователя %1 и заполните поле ""Физическое лицо""';
							|en = 'Не заполнено физ. лицо у пользователя %1. Зайдите в карточку пользователя %1 и заполните поле ""Физическое лицо""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Пользователь);
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки 	= ТекстОшибки;
		РезультатПроверки.Реквизит 		= "ФизическоеЛицо";
		РезультатПроверки.Поле 			= "ФизическоеЛицо";
		
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);

	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ТекстОшибкиРезультатаПроверки(РезультатПроверки) Экспорт
	
	Текст = "";
	
	Если ТипЗнч(РезультатПроверки) = Тип("Массив") Тогда
		
		Для каждого Строка Из РезультатПроверки Цикл
			Если Строка.ЕстьОшибка Тогда
				Текст = Текст + Символы.ПС + Строка.ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РезультатПроверки.ЕстьОшибка Тогда
		Текст = РезультатПроверки.ТекстОшибки;
	Конецесли;

	Текст = СокрЛП(Текст);
	
	Возврат Текст;

КонецФункции

Функция ЭтоЗаявлениеНаИзменение(Заявление) Экспорт
	
	Если ЭтоФормаЗаявления(Заявление) Тогда
		Возврат ЭтоФормаВторичногоЗаявления(Заявление);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Заявление, "ТипЗаявления") Тогда
		Возврат Заявление.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиСвойстваСертификатаВЗапрос(Ключ, ПараметрыНовогоСертификата, РеквизитыСертификата) Экспорт
	
	Значение = Неопределено;
	Если РеквизитыСертификата.Свойство(Ключ, Значение) Тогда
		
		КлючСертификата = Ключ;
		КлючСертификата = СтрЗаменить(КлючСертификата, "OID", "");
		КлючСертификата = СтрЗаменить(КлючСертификата, "_", ".");
		
		ПараметрыНовогоСертификата.Добавить(КлючСертификата, Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция IdentKind(ДокументЗаявление) Экспорт
	
	// 1 - НЕ требуется встреча с партнером (02 01 01 дистанционная идентификация)
	// 0 - требуется встреча с партнером    (02 01 00 идентификация при личной встрече)
	УдаленнаяАутентификацияБулево 	= НЕ ДокументЗаявление.ТребуетсяВстречаСПартнером;
	УдаленнаяАутентификацияЧисло 	= Число(УдаленнаяАутентификацияБулево);
	
	Возврат УдаленнаяАутентификацияЧисло;
	
КонецФункции

Процедура ИнициализироватьПроверкиДляОблака(Форма) Экспорт
	
	ИнициализироватьПроверкиТелефонаДляОблака(Форма);
	ИнициализироватьПроверкиПочтыДляОблака(Форма);
	
КонецПроцедуры

Процедура ИнициализироватьПроверкиТелефонаДляОблака(Форма) Экспорт
	
	Форма.ПроверкаТелефонДляПаролей = ШаблонПроверкиДляОблака();
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонМобильныйДляПаролей);
	Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	Форма.ПроверкаТелефонДляПаролей.Значение = Представление;
	
КонецПроцедуры

Функция ШаблонПроверкиДляОблака() Экспорт
	
	Возврат Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь, "", "");
	
КонецФункции

Процедура ИнициализироватьПроверкиПочтыДляОблака(Форма) Экспорт
	
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей = ШаблонПроверкиДляОблака();
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Форма.ЭлектроннаяПочтаДляПаролей);
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей.Значение = Форма.ЭлектроннаяПочтаДляПаролей;
	
КонецПроцедуры

Функция ПолучитьСвойстваДляПроверок() Экспорт
	
	Возврат "ЗначениеВведено,ВыполняетсяПроверка,ИдентификаторПроверки,ПодтверждениеВыполнено,КодОтправлен,ИсходноеЗначение, Значение";

КонецФункции

Процедура СкопироватьНастройкиПаролейВОблакеИзКоробки(Форма) Экспорт
	
	ЭтоЗаявлениеНаИзменение = ЭтоФормаВторичногоЗаявления(Форма);
	
	ИнициализироватьПроверкиДляОблака(Форма);
	
	Форма.ПроверкаТелефонДляПаролей.ИсходноеЗначение = Форма.ТелефонМобильный;
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонМобильный);
	Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	
	Если ЭтоЗаявлениеНаИзменение Тогда
		Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонМобильныйИсходный);
		Форма.ТелефонМобильныйДляПаролей = Представление;
	КонецЕсли;
	
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение = Форма.ЭлектроннаяПочта;
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Форма.ЭлектроннаяПочта);
	Форма.ЭлектроннаяПочтаДляПаролей = СокрЛП(Форма.ЭлектроннаяПочта);
	
КонецПроцедуры

Процедура ОчиститьИСкопироватьНастройкиПаролейВОблакеИзКоробки(Форма) Экспорт
	
	Если НЕ ЭтоФормаЗаявления(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОблако(Форма) Тогда
		
		ИнициализироватьПроверкиТелефонаДляОблака(Форма);
		СкопироватьНастройкиПаролейВОблакеИзКоробки(Форма);
		
		Если ЭтоФормаВторичногоЗаявления(Форма) Тогда
			
			Если ЗначениеЗаполнено(Форма.ВладелецЭЦП)
				И Форма.ВладелецЭЦП = Форма.ВладелецЭЦПИсходный Тогда
				
				Форма.ПостинициализацияЭПВОблакеСервер();
			КонецЕсли;
			
			Форма.ПроверитьНеобходимостьУстановкиГалки_ИзменитьНастройкиУведомлений();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоСертификатВладельца(Форма, Субъект) Экспорт

	// Если какое-то поле Владельца не заполнено, то по нему не проверяем
	ИННСовпадает   = ИННВладельцаСовпадаетССертификатом(Форма, Субъект);
	СНИЛССовпадает = СНИЛССовпадает(Форма, Субъект);
	ФИОСовпадает   = ФИОВладельцаСовпадает(Форма, Субъект);
		
	Совпадают = 
		ИННСовпадает 
		И СНИЛССовпадает 
		И ФИОСовпадает;
		
	Возврат Совпадают;
	
КонецФункции

Функция ИННВладельцаСовпадаетССертификатом(Форма, Субъект) Экспорт
	
	ИННы = ДокументооборотСКОКлиентСервер.ИННыИзСертификата(Субъект);
	ЭтоРуководитель = ЭтоРуководитель(Форма);
	
	Если Форма.ВладелецЭЦПЭтоФизЛицо Тогда
		
		Если ЗначениеЗаполнено(Форма.ВладелецЭЦПИНН) Тогда
			ИННСовпадает = ИННы.ФЛ = Форма.ВладелецЭЦПИНН;
		Иначе
			ИННСовпадает = Истина;
		КонецЕсли;
		
	ИначеЕсли Форма.ЭтоЮридическоеЛицо Тогда
		
		Если ЗначениеЗаполнено(Форма.ИНН) Тогда
			СовпадаетИННОрганизации = ЭтоРуководитель И ИННы.ЮЛ = Форма.ИНН ИЛИ НЕ ЭтоРуководитель;
		Иначе
			СовпадаетИННОрганизации = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ВладелецЭЦПИНН) Тогда
			СовпадаетИННФЛ = НЕ ЗначениеЗаполнено(ИННы.ФЛ) ИЛИ ИННы.ФЛ = Форма.ВладелецЭЦПИНН;
		Иначе
			СовпадаетИННФЛ = Истина;
		КонецЕсли;
		
		ИННСовпадает = 
			СовпадаетИННОрганизации
			ИЛИ СовпадаетИННФЛ;
			 
	ИначеЕсли ЗначениеЗаполнено(Форма.ВладелецЭЦПИНН) И ЗначениеЗаполнено(Форма.ИНН) Тогда
		
		ИННСовпадает = 
			(ИННы.ФЛ = Форма.ИНН
			И ИННы.ФЛ = Форма.ВладелецЭЦПИНН);
			
	Иначе
			
		ИННСовпадает = Истина;
			
	КонецЕсли;
	
	Возврат ИННСовпадает;
	
КонецФункции

Функция СНИЛССертификата(Субъект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Субъект, "SNILS") Тогда
		ПолеСНИЛС = "SNILS";
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Субъект, "OID1_2_643_100_3") Тогда
		ПолеСНИЛС = "OID1_2_643_100_3";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат Субъект[ПолеСНИЛС];
	
КонецФункции

Функция СНИЛССовпадает(Форма, Субъект)
	
	СНИЛССертификата = СНИЛССертификата(Субъект);
	
	ВладелецЭЦПСНИЛСБезРазделителей = ОбработкаЗаявленийАбонентаКлиентСервер.СНИЛСБезРазделителей(Форма.ВладелецЭЦПСНИЛС);
	
	Если ЗначениеЗаполнено(ВладелецЭЦПСНИЛСБезРазделителей) Тогда
		СНИЛССовпадает = СНИЛССертификата = ВладелецЭЦПСНИЛСБезРазделителей;
	Иначе
		СНИЛССовпадает = Истина;
	КонецЕсли;
	
	Возврат СНИЛССовпадает;
	
КонецФункции

Функция ФИОВладельцаСовпадает(Форма, Субъект)
	
	ФИОИзСертификата = ДокументооборотСКОКлиентСервер.ФИОИзСертификата(Субъект);
	ФИОИзСертификата = СтрЗаменить(ФИОИзСертификата, " ", "_");
	
	ФИОВладельца = ОбработкаЗаявленийАбонентаКлиентСервер.ФИОВладельца(Форма);
	
	Если ЗначениеЗаполнено(СокрЛП(ФИОВладельца)) Тогда
		ФИОВладельца = СтрЗаменить(ФИОВладельца, " ", "_");
		ФИОСовпадают = Врег(ФИОВладельца) = Врег(ФИОИзСертификата);
	Иначе
		ФИОСовпадают = Истина;
	КонецЕсли;
	
	Возврат ФИОСовпадают;
	
КонецФункции

Функция ПроверитьКраткоеНаименованиеПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Форма.КраткоеНаименование_БИП) Тогда
		Возврат ЕстьОшибка;
	КонецЕсли;
	
	КраткоеНаименование_БИП = НормализоватьКраткоеНаименование(Форма.КраткоеНаименование_БИП);
	КраткоеНаименование = НормализоватьКраткоеНаименование(Форма.КраткоеНаименование);
	
	Длина = СтрДлина(КраткоеНаименование);
	
	Корректно = ЗначениеЗаполнено(КраткоеНаименование_БИП) // После нормализации
		И (Совпадают(КраткоеНаименование_БИП, КраткоеНаименование )
		ИЛИ Совпадают(Лев(КраткоеНаименование_БИП, Длина), КраткоеНаименование));
		
	ЕстьОшибка = НЕ Корректно;

	Возврат ЕстьОшибка;
	
КонецФункции

Функция Совпадают(ТекстБИП, ТекстЗаявление)
	
	Возврат ВРег(СокрЛП(ТекстБИП)) = ВРег(СокрЛП(ТекстЗаявление));
	
КонецФункции

Функция ПроверитьКодИФНСПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Форма.ИФНС_БИП) Тогда
		Возврат ЕстьОшибка;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("КодПолучателя", Форма.ИФНС_БИП);
	
	НайденныеСтроки = Форма.ПолучателиФНС.НайтиСтроки(Отбор);
		
	ЕстьОшибка = НайденныеСтроки.Количество() = 0;

	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПрерватьСравнение(Значение_БИП, Значение_Заявление)
	
	Возврат НЕ ЗначениеЗаполнено(СокрЛП(Значение_БИП)) 
	И НЕ ЗначениеЗаполнено(СокрЛП(Значение_Заявление));
	
КонецФункции

Функция ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Знач Значение_БИП, 
		Знач Значение_Заявление,
		Представление) Экспорт
		
	ЕстьОшибка = Ложь;
		
	Если ПрерватьСравнение(Значение_БИП, Значение_Заявление) Тогда
		Возврат ЕстьОшибка;
	КонецЕсли;
	
	ЕстьОшибка = СокрЛП(Значение_БИП) <> СокрЛП(Значение_Заявление);

	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьКодПФРПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ(
		Форма,
		Форма.КодПФР_БИП, 
		Форма.КодПФР,
		НСтр("ru = 'Код СФР(бывш. ПФР)';
			|en = 'Код СФР(бывш. ПФР)'"));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьРегНомерПФРПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Форма.РегНомерПФР_БИП, 
		Форма.РегНомерПФР,
		НСтр("ru = 'Рег. номер СФР(бывш. ПФР)';
			|en = 'Рег. номер СФР(бывш. ПФР)'"));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьОГРНПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Форма.ОГРН_БИП, 
		Форма.ОГРН,
		?(Форма.ЭтоЮридическоеЛицо, НСтр("ru = 'ОГРН';
										|en = 'ОГРН'"), НСтр("ru = 'ОГРНИП';
																|en = 'ОГРНИП'")));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьКодРегионаПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Форма.КодРегиона_БИП, 
		Форма.КодРегиона,
		НСтр("ru = 'Код региона';
			|en = 'Код региона'"));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьИННРуководителяПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Форма.РуководительИНН_БИП,
		Форма.ВладелецЭЦПИНН,
		НСтр("ru = 'ИНН руководителя';
			|en = 'ИНН руководителя'"));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьДолжностьРуководителяПоЕГРЮЛ(Форма) Экспорт
	
	ЕстьОшибка = ПростоеСравнениеПоЕГРЮЛ( 
		Форма,
		Форма.РуководительДолжность_БИП,
		Форма.ВладелецЭЦПДолжность,
		НСтр("ru = 'Должность руководителя';
			|en = 'Должность руководителя'"));
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция ПроверитьФИОРуководителяПоЕГРЮЛ(Форма) Экспорт
	
	РуководительФамилия_БИП  = НормализоватьФИО(Форма.РуководительФамилия_БИП);
	РуководительИмя_БИП      = НормализоватьФИО(Форма.РуководительИмя_БИП);
	РуководительОтчество_БИП = НормализоватьФИО(Форма.РуководительОтчество_БИП);
	
	ВладелецЭЦПФамилия  = НормализоватьФИО(Форма.ВладелецЭЦПФамилия);
	ВладелецЭЦПИмя      = НормализоватьФИО(Форма.ВладелецЭЦПИмя);
	ВладелецЭЦПОтчество = НормализоватьФИО(Форма.ВладелецЭЦПОтчество);
	
	ЕстьОшибка = 
		ЗначениеЗаполнено(РуководительФамилия_БИП) // После нормализации
		И НЕ Совпадают(РуководительФамилия_БИП, ВладелецЭЦПФамилия)
		ИЛИ ЗначениеЗаполнено(РуководительИмя_БИП) // После нормализации
		И НЕ Совпадают(РуководительИмя_БИП, ВладелецЭЦПИмя)
		ИЛИ ЗначениеЗаполнено(РуководительОтчество_БИП) // После нормализации
		И НЕ Совпадают(РуководительОтчество_БИП, ВладелецЭЦПОтчество);
		
	Возврат ЕстьОшибка;
	
КонецФункции

Функция НормализоватьФИО(Знач Строка) Экспорт
	
	Если СокрЛП(Строка) = "-" Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(Строка);
	КонецЕсли;

КонецФункции

Процедура ОтобразитьРезультатПроверки(Элемент, РезультатПроверки) Экспорт
	
	ЕстьРеквизит = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатПроверки, "Пустой");
	
	Пустой = ЕстьРеквизит И РезультатПроверки.Пустой;
		
	Элемент.Видимость = ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) И (НЕ Пустой ИЛИ НЕ ЕстьРеквизит);
	Элемент.Подсказка = РезультатПроверки.ТекстОшибки;
	Элемент.Заголовок = РезультатПроверки.ТекстОшибки;
	
КонецПроцедуры

Функция ЕстьРусскиеБуквы(Строка) 
	
	Строка = СокрЛП(Строка);
	
	Для ИндексСимвола = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, ИндексСимвола);
		
		ЭтоРусскаяБуква = 
			(Код >= 1040 И Код <= 1103) 
			ИЛИ Код = 1105 // "ё"
			ИЛИ Код = 1025;  // "Ё"
			
		Если ЭтоРусскаяБуква Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НормализоватьПробелы(Строка) Экспорт
	
	Возврат НормализоватьСдвоенныеСимволы(Строка, " ");
	
КонецФункции

Функция НормализоватьСдвоенныеСимволы(Знач Строка, Символ)
	
	ЕстьСимвол = СтрНайти(Строка, Символ) > 0;
	
	Пока СтрЧислоВхождений(Строка, Символ + Символ) > 0 Цикл 
		Строка = СтрЗаменить(Строка, Символ + Символ, Символ);
	КонецЦикла;
	
	Возврат СокрЛП(Строка);
	
КонецФункции

Функция ЗаменитьЗапрещенныеКавычки(Строка)
	
	// ● Любая кавычка заменяется на стандартную двойную (код 34).
	КавычкаЭталон = Символ(34);
	
	КодыКавычек = "39,60,62,96,132,139,146,148,155,171,187";
	КодыКавычек = СтрРазделить(КодыКавычек, ",");
	
	Для каждого Код Из КодыКавычек Цикл
		КавычкаЗапрщенная = Символ(Число(Код));
		Строка = СтрЗаменить(Строка, КавычкаЗапрщенная, КавычкаЭталон);
	КонецЦикла;
	
	Возврат СокрЛП(Строка);
	
КонецФункции

Функция УбратьПробелПослеПервойИПередВторойКавычкой(Строка)
	
	Кавычка = Символ(34);

	Если СтрЧислоВхождений(Строка, Кавычка) = 2 Тогда
		
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			Строка, 
			Кавычка, 
			Истина);
			
		Позиция1Кавычки = СтрНайти(Строка, Кавычка);
		Позиция1КавычкиИПробела = СтрНайти(Строка, Кавычка + " ");
		
		Если Позиция1Кавычки = Позиция1КавычкиИПробела Тогда
			Строка = Лев(Строка, Позиция1Кавычки) + Сред(Строка, Позиция1Кавычки + 2);
		КонецЕсли;
		
		Позиция2Кавычки  = СтрНайти(Строка, Кавычка, , , 2);
		СимволДо2Кавычки = Сред(Строка, Позиция2Кавычки - 1, 1);
		Если СимволДо2Кавычки = " " Тогда
			Строка = Лев(Строка, Позиция2Кавычки - 2) + Кавычка + Сред(Строка, Позиция2Кавычки + 1);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СокрЛП(Строка);
	
КонецФункции

Функция НормализоватьКавычки(Строка)
	
	Кавычка = Символ(34);

	// ● Любая кавычка заменяется на стандартную двойную (код 34)
	Строка = ЗаменитьЗапрещенныеКавычки(Строка);
	
	// ● Кавычки идущие подряд удаляются, оставляется одна кавычка
	Строка = НормализоватьСдвоенныеСимволы(Строка,  Кавычка);
	
	// ● Пробелы идущие подряд удаляются, оставляется только один пробел.
	Строка = НормализоватьПробелы(Строка);
	
	// ● Если в наименовании две кавычки, удаляем пробел после первой и перед второй.
	Строка = УбратьПробелПослеПервойИПередВторойКавычкой(Строка);
	
	Возврат СокрЛП(Строка);
	
КонецФункции

Функция НормализоватьКраткоеНаименование(Знач Строка) Экспорт
	
	//●	если в строке есть символы 0D,OA то они и все что после них удаляется.
	//●	удаляются начальные и конечные пробелы
	//●	если в строке нет ни одной русской буквы то она отбрасывается и в сравнении дальше не участвует 
	//  (в кратких именах бывает "-","--------","*******")
	//●	если строка равна “НЕТ” то она отбрасывается
	
	Если НЕ ЗначениеЗаполнено(Строка)
		ИЛИ НЕ ЕстьРусскиеБуквы(Строка)
		ИЛИ ВРЕГ(Строка) = НСтр("ru = 'НЕТ';
								|en = 'НЕТ'") Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Строка = НормализоватьКавычки(Строка);
	Строка = НормализоватьПробел(Строка);
	// ●	Если есть значения вида "*№ #*" (номер школы или детского садика) то пробел после "№" удаляется. 
	Строка = СтрЗаменить(Строка, "№ ", "№");
	
	Возврат СокрЛП(Строка);
	
КонецФункции

Функция НормализоватьПробел(Строка)
	
	// ●	Если в наименовании есть дефис, удаляем пробел перед и после дефиса.
	Строка = СтрЗаменить(Строка, " -", "-");
	Строка = СтрЗаменить(Строка, "- ", "-");
	
	Возврат СокрЛП(Строка);
	
КонецФункции

// Проверка по ЕГРЮЛ 
Функция ПроверятьЗаявлениеПоЕГРЮЛ(Форма) Экспорт
	
	Проверять = Форма.ЕстьДанные_БИП
		И (ЭтоФормаПервичногоЗаявления(Форма) 
		ИЛИ ЭтоФормаВторичногоЗаявления(Форма) И ПроверятьЗаявлениеПоЕГРЮЛВЗаявленииНаИзменение(Форма));
		
	Возврат Проверять;
 
КонецФункции

Функция ПроверятьЗаявлениеПоЕГРЮЛВЗаявленииНаИзменение(Форма) Экспорт
	
	ПроверятьОрганизацию = ПроверятьОрганизациюПоЕГРЮЛ(Форма);
		
	ПроверятьВладельца = ПроверятьВладельцаПоЕГРЮЛ(Форма);
	
	ПроверятьГосОрганы = ПроверятьГосОрганыПоЕГРЮЛ(Форма);

	Проверять = ПроверятьОрганизацию ИЛИ ПроверятьВладельца ИЛИ ПроверятьГосОрганы;
		
	Возврат Проверять;
 
КонецФункции

Функция ПроверятьОрганизациюПоЕГРЮЛ(Форма) Экспорт
	
	Проверять = Форма.ИзменитьРеквизитыПодключенияК1СОтчетности
		И (Форма.ЭтоЮридическоеЛицо И Форма.КраткоеНаименованиеИсходное <> Форма.КраткоеНаименование 
		ИЛИ Форма.ОГРНИсходный <> Форма.ОГРН
		ИЛИ Форма.ОбластьИсходная <> Форма.Область)
		ИЛИ Форма.ЭтоУдаленноеПереизданиеСертификата;
		
	Возврат Проверять;
 
КонецФункции

Функция ПроверятьВладельцаПоЕГРЮЛ(Форма) Экспорт
	
	Проверять = 
		Форма.ИзменитьВладельцаСертификата
		И (Форма.ВладелецЭЦПИНН <> Форма.ВладелецЭЦПИННИсходный
		ИЛИ Форма.ВладелецЭЦПОтчество <> Форма.ВладелецЭЦПОтчествоИсходный
		ИЛИ Форма.ВладелецЭЦПИмя <> Форма.ВладелецЭЦПИмяИсходный
		ИЛИ Форма.ВладелецЭЦПФамилия <> Форма.ВладелецЭЦПФамилияИсходный)
		ИЛИ Форма.ЭтоУдаленноеПереизданиеСертификата;
	
	Возврат Проверять;
 
КонецФункции

Функция ПроверятьГосОрганыПоЕГРЮЛ(Форма) Экспорт
	
	Проверять = 
		Форма.ИзменитьСоставКонтролирующихОрганов
		И (Форма.СдаватьВФНС И Форма.ТаблицаИзменилась("ПолучателиФНС", "ПолучателиФНСИсходные")
		ИЛИ Форма.СдаватьВПФР И Форматировать(Форма.КодПФР) <> Форматировать(Форма.КодПФРИсходный)
		ИЛИ Форма.СдаватьВПФР И Форматировать(Форма.РегНомерПФР) <> Форматировать(Форма.РегНомерПФРИсходный));

	Возврат Проверять;
 
КонецФункции

Функция Форматировать(Значение) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(Значение);
	
КонецФункции

Функция ТипЗаявления(Форма) Экспорт
	
	ЕстьРеквизит = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТипЗаявления");
	
	Если ЭтоФормаПервичногоЗаявления(Форма) ИЛИ ЕстьРеквизит 
		И Форма.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
		
	ИначеЕсли ЭтоФормаВторичногоЗаявления(Форма) ИЛИ ЕстьРеквизит 
		И Форма.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
		
	Иначе
		
		Возврат ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка");
		
	КонецЕсли;
		
КонецФункции

Процедура ЗаменитьЕГРЮЛнаЕГНИП(Текст, ЭтоЮридическоеЛицо) Экспорт

	Если НЕ ЭтоЮридическоеЛицо Тогда
		Текст = СтрЗаменить(Текст, НСтр("ru = 'ЕГРЮЛ';
										|en = 'ЕГРЮЛ'"), НСтр("ru = 'ЕГРИП';
																|en = 'ЕГРИП'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОформлениеЭПВОблаке(Форма) Экспорт
	
	Элементы = Форма.Элементы;
		
	// Облачное хранение
	Элементы.КартинкаТелефонПроверен.Видимость = Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
	Элементы.ПроверитьНомер.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка;
	Элементы.ТелефонМобильныйДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтверждения.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторно.Видимость = Не Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчета.Видимость = Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
		
КонецПроцедуры

Функция ФИОПоФамилияИмяОтчество(Фамилия, Имя, Отчество = "") Экспорт
	
	ФИО = Новый Массив;
	ФИО.Добавить(СокрЛП(Фамилия));
	ФИО.Добавить(СокрЛП(Имя));
	ФИО.Добавить(СокрЛП(Отчество));
	
	ФИО = СтрСоединить(ФИО, " ");
	
	Возврат ФИО;

КонецФункции

Функция ЭтоОтправкаБезДокументов(Источник) Экспорт
	
	Возврат Источник.ЭтоБыстрыйСтарт И Источник.ЕстьПредыдущиеУчетныеЗаписи;
	
КонецФункции
	

#КонецОбласти