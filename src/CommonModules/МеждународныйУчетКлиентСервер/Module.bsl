#Область ПрограммныйИнтерфейс

// Возвращает тип плана счетов международного учета
// 
// Возвращаемое значение:
// 	Тип - Тип плана счетов международного учета
//
Функция ТипПланСчетов() Экспорт
	
	Возврат Тип("ПланСчетовСсылка.Международный");
		
КонецФункции

// Возвращает имя плана счетов международного учета. 
// 
// Возвращаемое значение:
// 	Строка - Имя плана счетов международного учета
//
Функция ИмяПланаСчетов() Экспорт
	
	Возврат "Международный";
		
КонецФункции

// Возвращает тип видов субконто международного учета
// 
// Возвращаемое значение:
// 	Тип - Тип видов субконто международного учета
//
Функция ТипВидСубконто() Экспорт
	
	Возврат Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные");
	
КонецФункции

// Предназначена для получения пустого значения заданного типа:
//	примитивного, или ссылочного.
//
// Параметры:
//	ЗаданныйТип - Тип - Тип, пустое значение которого нужно получить.
//
// Возвращаемое значение:
//	Произвольный - Пустое значение указанного типа.
//
Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции // ПустоеЗначениеТипа();

// Определяет типы источников уточнения счета, соответствующие группе финансового учета.
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры,
//							 СправочникСсылка.ГруппыФинансовогоУчетаРасчетов,
//							 СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств,
//                           СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов - группа финансового учета
//                               номенклатуры, расчетов с контрагентами, денежных средств, доходов/расходов.
//
// Возвращаемое значение:
//  Массив - массив значений перечисления ТипыИсточниковУточненияСчета.
//
Функция ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета) Экспорт

	ТипыИсточников = Новый Массив;
	Если ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатуры"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовКредита"));
	ИначеЕсли ТипЗнч(ГруппаФинансовогоУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов") Тогда
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивовДебета"));
		ТипыИсточников.Добавить(ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивовКредита"));
	КонецЕсли; 
	
	Возврат ТипыИсточников;

КонецФункции

// Определяет имя справочника групп финансового учета по типу источника уточнения счета.
//
// Параметры:
//  ТипИсточника - ПеречислениеСсылка.ТипыИсточниковУточненияСчета - тип источника уточнения счета.
//
// Возвращаемое значение:
//  Строка - имя справочника.
//
Функция ИмяСправочникаГруппФинансовогоУчета(ТипИсточника) Экспорт

	ИмяСправочника = "";
	Если ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатуры")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаНоменклатурыКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаНоменклатуры";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетов")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаРасчетовКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаРасчетов";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредств")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДенежныхСредствКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаДенежныхСредств";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходовКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаДоходовРасходов";
	ИначеЕсли ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивовДебета")
		Или ТипИсточника = ПредопределенноеЗначение("Перечисление.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивовКредита") Тогда
		ИмяСправочника = "ГруппыФинансовогоУчетаВнеоборотныхАктивов";
	КонецЕсли; 
	
	Возврат ИмяСправочника;

КонецФункции

// Копирует данные формы дерева значений.
//
// Параметры:
//  Приемник - ДанныеФормыДерево - дерево приемник.
//  Источник - ДанныеФормыДерево - дерево источник.
//  ВключатьПодчиненные - Булево - Истина, если необходимо рекурсивно копировать элементы низлежащих уровней дерева.
//
Процедура СкопироватьДанныеФормыДерево(Приемник, Источник, ВключатьПодчиненные) Экспорт

	ЭлементыИсточника = Источник.ПолучитьЭлементы();
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	Для каждого ЭлементИсточника Из ЭлементыИсточника Цикл
		ЭлементПриемника = ЭлементыПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
		Если ВключатьПодчиненные Тогда
			СкопироватьДанныеФормыДерево(ЭлементПриемника, ЭлементИсточника, ВключатьПодчиненные = Ложь);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Ищет в дререве значений заданное значение в заданной колонке дерева.
//
// Параметры:
//  ДанныеФормыДерево - ДанныеФормыДерево - дерево значений.
//  ЗначениеРеквизита - Произвольный - искомое значение.
//  ИмяРеквизита - Строка - имя реквизита дерева значение которого необходимо найти.
//  ВключатьПодчиненные - Булево - Истина, если необходимо рекурсивно искать среди элементов низлежащих уровней дерева.
// 
// Возвращаемое значение:
//  Неопределено, СтрокаДереваЗначений - Найти элемент дерева
//
Функция НайтиЭлементДерева(ДанныеФормыДерево, ЗначениеРеквизита, ИмяРеквизита, ВключатьПодчиненные = Ложь) Экспорт

	ЭлементыДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			Возврат ЭлементДерева;
		Иначе
			Если ВключатьПодчиненные Тогда
				НайденныйЭлементДерева = НайтиЭлементДерева(ЭлементДерева, ЗначениеРеквизита, ИмяРеквизита, ВключатьПодчиненные);
				Если НайденныйЭлементДерева <> Неопределено Тогда
					Возврат НайденныйЭлементДерева;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Разворачивает все узлы дерева.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма содержащая дерево элементов.
//  ИмяТаблицыФормы - Строка - имя элемента формы содержащего дерево элементов.
//  ДанныеФормыДерево - ДанныеФормыДерево - само дерево значений.
//  ВключатьПодчиненные - Булево - Истина, если необходимо рекурсивно разворачивать элементы низлежащих уровней дерева.
//
Процедура РазвернутьДерево(Форма, ИмяТаблицыФормы, ДанныеФормыДерево, ВключатьПодчиненные = Ложь) Экспорт

	ЭлементыДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Форма.Элементы[ИмяТаблицыФормы].Развернуть(ЭлементДерева.ПолучитьИдентификатор(), ВключатьПодчиненные);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
