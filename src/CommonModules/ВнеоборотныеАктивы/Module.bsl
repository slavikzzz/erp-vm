////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетДвиженийПоКомпонентамАмортизации

// Вызывается при выполнении операции закрытия месяца "Актуализация параметров узлов и компонентов амортизации".
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
//
Процедура ВыполнитьОперациюАктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = ЗакрытиеМесяцаСервер.НачалоРасчета(ПараметрыОбработчика.ДанныеЭтапа.Код, ПараметрыРасчета.КонецПериода,,
		ПараметрыРасчета.МассивОрганизаций);
	НачалоПериода = Макс(НачалоПериода, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоПериода <= ПараметрыРасчета.КонецПериода Цикл
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца." 
			+ ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыОбработчика.ДанныеЭтапа.Код));
		
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(НачалоПериода, ПараметрыРасчета.МассивОрганизаций);
		
		// Этап 1. Подготовка работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета,
				ДоступныеОрганизации, ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДоступныеОрганизации, НачалоПериода);
		КонецПопытки;
		
		// Этап 2. Расчет по организациям и периоду.
		
		НачатьТранзакцию();
		
		Попытка
			
			Запрос = Новый Запрос();
			Запрос.МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КэшГраниц.Документ) КАК Количество
			|ИЗ КэшГраниц КАК КэшГраниц
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КоличествоДанных = Выборка.Количество;
			КонецЕсли;
			
			// Проверка отключена, т.к. операция должна выполняться по-месячно
			//@skip-check query-in-loop
			СформироватьДвиженияПоКомпонентамАмортизации(ДанныеКРасчетуЗаМесяц);
				
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ЕстьОшибки = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'Актуализация параметров узлов и компонентов амортизации за период %1 завершилось с ошибкой:
					|%2';
					|en = 'Cannot update financial details of depreciation sub-assets and components for period %1 due to:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		КонецПопытки;
		
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		// Этап 3. Завершение работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ДоступныеОрганизации,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(Неопределено, ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДоступныеОрганизации, НачалоПериода);
		КонецПопытки;
		
		НачалоПериода = ОкончаниеПериода + 1;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных/10);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УчетОС

// Добавляет значения параметров для отражения списания ОС.
// 
// Параметры:
// 	ЗначенияПараметровПроведения - Структура - 
Процедура ДополнитьЗначенияПараметровПроведенияПриСписанииОС(ЗначенияПараметровПроведения) Экспорт

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеСтоимостиОС", Перечисления.ХозяйственныеОперации.СписаниеСтоимостиОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеСтоимостиОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеСтоимостиОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеАмортизацииОС", Перечисления.ХозяйственныеОперации.СписаниеАмортизацииОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеАмортизацииОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеАмортизацииОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеРезерваПереоценкиСтоимостиОС", Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиСтоимостиОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеРезерваПереоценкиСтоимостиОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеРезерваПереоценкиСтоимостиОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеРезерваПереоценкиАмортизацииОС", Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиАмортизацииОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеРезерваПереоценкиАмортизацииОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеРезерваПереоценкиАмортизацииОС);
	
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ОС", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ПрибыльУбытки", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	
	ЗначенияПараметровПроведения.Вставить("ХО_ЗакрытиеРасходовОтСписанияОС", Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтСписанияОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗакрытиеРасходовОтСписанияОС", Справочники.НастройкиХозяйственныхОпераций.ЗакрытиеРасходовОтСписанияОС);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗакрытиеРасходовОтРеализацииОС", Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтРеализацииОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗакрытиеРасходовОтРеализацииОС", Справочники.НастройкиХозяйственныхОпераций.ЗакрытиеРасходовОтРеализацииОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеОбесцененияОС", Перечисления.ХозяйственныеОперации.СписаниеОбесцененияОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеОбесцененияОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеОбесцененияОС);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

// Формирует записи в регистрах заданий к закрытию месяца.
// 
// Параметры:
// 	Документ - ДокументОбъект -
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВнеоборотныеАктивы.ФормированиеЗаданийКЗакрытиюМесяца");
	
	МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	
	РасчетАмортизацииОС.СформироватьЗадания(Документ, ДанныеТаблиц);
	РасчетАмортизацииНМА.СформироватьЗадания(Документ, ДанныеТаблиц);
	РасчетСтоимостиВНА.СформироватьЗадания(Документ, ДанныеТаблиц);
	ОтложенноеФормированиеДвиженийВНА.СформироватьЗадания(Документ, ДанныеТаблиц);
	ЗакрытиеРасходовОтВыбытияОС.СформироватьЗадания(Документ, МенеджерВременныхТаблиц);
	ОбесценениеВНАСервер.СформироватьЗаданияКЗакрытиюМесяцаПоОСНМА(Документ, ДанныеТаблиц);
	СформироватьЗаданияАктуализацииПараметровУзловКомпонентов(Документ, ДанныеТаблиц);
	РасчетСтоимостиИнвестицииВАренду.СформироватьЗадания(Документ, МенеджерВременныхТаблиц);
		
	УчетАрендованныхОС.СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц);
	ВнеоборотныеАктивыЛокализация.СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Формирует задания к отложенному обновлению движений по регистрам сведений для подчиненных узлов и компонентов.
//
// Параметры:
// 	Документ - ДокументОбъект, Неопределено - Документ, который изменяется.
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаданияАктуализацииПараметровУзловКомпонентов(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ОтложенноеФормированиеДвиженийВНА.ДвиженияЗаписываютсяПриВыполненииОперации(Документ)
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли; 
	
	ИспользуемыеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);

	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("МестонахождениеОС");
	СписокТаблиц.Добавить("УзлыКомпонентыАмортизации");
	СписокТаблиц.Добавить("ПорядокУчетаОС");
	СписокТаблиц.Добавить("ПорядокУчетаОСБУ");
	СписокТаблиц.Добавить("ПорядокУчетаОСУУ");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ОсновноеСредство");
	ТекстОбъединенияДанныхОС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СоставЕГДС");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ВнеоборотныйАктив");
	ТекстОбъединенияДанныхЕГДС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	ТекстыДанных = Новый Массив;
	Если ТекстОбъединенияДанныхОС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхОС);
	КонецЕсли;
	Если ТекстОбъединенияДанныхЕГДС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхЕГДС);
	КонецЕсли; 
	ТекстОбъединенияДанных = СтрСоединить(ТекстыДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТипыДокументов = ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов();
	
	Если Документ <> Неопределено Тогда
		ТипДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ.Ссылка));
		ЗарегистрироватьДокумент = (ТипыДокументов.Найти(ТипДокумента) <> Неопределено);
	Иначе
		ЗарегистрироватьДокумент = Ложь;
	КонецЕсли;
	
	Если ТекстОбъединенияДанных = "" Или НЕ ЗарегистрироватьДокумент Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация       КАК Организация,
	|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
	|	ИзмененныеДанные.Документ          КАК Документ,
	|	МИНИМУМ(ИзмененныеДанные.Период)   КАК Период
	|ПОМЕСТИТЬ ИзмененныеДанные
	|ИЗ
	|	ТекстОбъединенияДанных_Переопределямый КАК ИзмененныеДанные
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(&Период) КАК Компоненты
	|		ПО Компоненты.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.ОбъектУчета,
	|	ИзмененныеДанные.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединенияДанных_Переопределямый", "(" + ТекстОбъединенияДанных + ")");
	СписокЗапросов.Добавить(ТекстЗапроса);
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.АктуализацияПараметровУзловКомпонентовАмортизации) КАК Операция,
	|	НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИзмененныеДанные.Организация КАК Организация,
	|		ИзмененныеДанные.Документ КАК Документ,
	|		ИзмененныеДанные.Период КАК Период
	|	ИЗ
	|		ИзмененныеДанные КАК ИзмененныеДанные
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументыПоОС.Организация КАК Организация,
	|		ДокументыПоОС.Ссылка КАК Документ,
	|		ДокументыПоОС.Дата КАК Период
	|	ИЗ
	|		ИзмененныеДанные КАК ИзмененныеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
	|			И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
	|			И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
	|			И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
	|			И (ДокументыПоОС.Проведен)
	|			И (ДокументыПоОС.ТипСсылки В (&ТипыДокументов))) КАК ИзмененныеДанные
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИзмененныеДанные";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Документ.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
КонецПроцедуры

// Формирует задания при записи движений распределения взаиморасчетов.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц		 - Менеджер временных таблиц.
//
Процедура СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(МенеджерВременныхТаблиц) Экспорт
	
	ВнеоборотныеАктивыЛокализация.СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Идентификатор предупреждения при печати.
// Используется для вывода текста сообщения пользователю в виде предупреждения в шапке формы "Печать документов".
//
// Возвращаемое значение:
//   Строка - Значение реквизита Поле объекта СообщениеПользователю.
//       В реквизите Текст объекта СообщениеПользователю может быть как обычный тест,
//       так и шаблон форматированной строки (см. СтроковыеФункции.ФорматированнаяСтрока).
Функция ИдентификаторПредупрежденияПриПечати() Экспорт
	Возврат "ПредупреждениеСведенияНеактуальны";
КонецФункции

// Добавляет текст предупреждения, информирующий пользователя о том, что стоимость или амортизация не актуальны,
// т.к. не выполнено закрытие месяца.
// 
// Параметры:
//  СведенияАктуальны - Булево - Ложь, если сведения не актуальны.
//  ТабличныйДокумент - ТабличныйДокумент - Печатная форма
Процедура ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны) Экспорт

	Если СведенияАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	// Информацию о том, что сведения неактуальны передаем в форму печати через сообщения пользователю.
	СообщениеОНеактуальности = Новый СообщениеПользователю;
	СообщениеОНеактуальности.Поле = ИдентификаторПредупрежденияПриПечати();
	СообщениеОНеактуальности.Текст = НСтр(
		"ru = 'Стоимость и амортизация не актуальны, необходимо выполнить закрытие месяца.';
		|en = 'Cost and depreciation are not relevant, close the month.'");
	СообщениеОНеактуальности.Сообщить();
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Предупреждения печатных форм выводятся через сообщения пользователю.
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ИдентификаторПредупреждения = ИдентификаторПредупрежденияПриПечати();
	Для Каждого Сообщение Из Сообщения Цикл
		
		// Предупреждения, которые требуют вывода в шапку, маркируются специальным именем поля.
		Если Сообщение.Поле <> ИдентификаторПредупреждения Тогда
			// При получении сообщений они очищаются. 
			// Если в очереди сообщений были не относящиеся к сообщениям печатной формы для ВНА - они пропадут.
			// Восстановим эти сообщения.
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		// Предупреждений может быть несколько, поэтому перед созданием элементов осуществляется подбор свободного имени.
		НомерСуффикса = 0;
		Суффикс = ИдентификаторПредупреждения;
		Пока Форма.Элементы.Найти(Суффикс + Формат(НомерСуффикса, "ЧГ=")) <> Неопределено Цикл
			НомерСуффикса = НомерСуффикса + 1;
		КонецЦикла;
		Если НомерСуффикса <> 0 Тогда
			Суффикс = Суффикс + Формат(НомерСуффикса, "ЧГ=");
		КонецЕсли;
		
		// Если текст объемный (подробный), то из него выделяется краткая часть.
		Позиция = СтрНайти(Сообщение.Текст, Символы.ПС, , , 2);
		Если Позиция > 0 Тогда
			Кратко = СокрЛП(Лев(Сообщение.Текст, Позиция - 1));
			Подробно = Сообщение.Текст;
		Иначе
			Кратко = Сообщение.Текст;
			Подробно = "";
		КонецЕсли;
		
		// Горизонтальная группа.
		Группа = Форма.Элементы.Вставить("Группа" + Суффикс, Тип("ГруппаФормы"), ,
			Форма.Элементы.ГруппаДополнительнаяИнформация);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// Восклицательный знак средних размеров.
		Картинка = Форма.Элементы.Добавить("Картинка" + Суффикс, Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение32;
		
		// Краткий текст предупреждения.
		Надпись = Форма.Элементы.Добавить(Суффикс, Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Кратко);
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

		Если Подробно <> "" Тогда
			// Гиперссылка "Подробнее...".
			ГруппаПодробнее = Форма.Элементы.Добавить("ГруппаПодробнее" + Суффикс, Тип("ГруппаФормы"), Группа);
			ГруппаПодробнее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПодробнее.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаПодробнее.ОтображатьЗаголовок = Истина;
			ГруппаПодробнее.Заголовок = НСтр("ru = 'Подробнее...';
											|en = 'More...'");
			ГруппаПодробнее.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
			ГруппаПодробнее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаПодробнее.Поведение = ПоведениеОбычнойГруппы.Всплывающая;

			ГруппаПодробнее.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			
			// Подробный текст предупреждения.
			Надпись = Форма.Элементы.Добавить("Подробнее" + Суффикс, Тип("ДекорацияФормы"), ГруппаПодробнее);
			Надпись.Вид = ВидДекорацииФормы.Надпись;
			Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Подробно);
			Надпись.АвтоМаксимальнаяШирина = Ложь;
			Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		КонецЕсли;

		Сообщение.Текст = ""; // Обработанные сообщения принудительно очищаем.

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеМеханизмы

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами создания на основании.
//
// Пример:
//	Объекты.Добавить(Метаданные.Справочники.Организации);
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы.АмортизацияНМА2_4);
	Объекты.Добавить(Метаданные.Документы.АмортизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	Объекты.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС);
	Объекты.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ОбъединениеОС);
	Объекты.Добавить(Метаданные.Документы.ПередачаОСВАренду2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ЗаключениеДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеУслугПоАренде);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияОС);
	Объекты.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеОС2_4);
	Объекты.Добавить(Метаданные.Документы.УлучшениеНМА);
	Объекты.Добавить(Метаданные.Документы.ИзменениеУсловийДоговораАренды);
	
	Объекты.Добавить(Метаданные.Справочники.ДоговорыАренды);
	Объекты.Добавить(Метаданные.Справочники.НематериальныеАктивы);
	Объекты.Добавить(Метаданные.Справочники.ОбъектыЭксплуатации);
	Объекты.Добавить(Метаданные.Справочники.ОбъектыСтроительства);
	Объекты.Добавить(Метаданные.Справочники.ТемыЭтапыИсследованийИРазработок);
	
	ВнеоборотныеАктивыЛокализация.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	Разделы = Новый Соответствие;
	Разделы.Вставить("ПоступлениеУслугПоАренде", "Закупки");
	
	//++ НЕ УТКА
	Разделы.Вставить("НаработкаОбъектовЭксплуатации", "УправлениеРемонтами");
	//-- НЕ УТКА
	
	СписокДокументов = СписокДокументовВНА();
	СписокДокументов.Добавить("НаработкаОбъектовЭксплуатации");
	
	Для Каждого ИмяДокумента Из СписокДокументов Цикл
		
		Раздел = Разделы.Получить(ИмяДокумента);
		Если Раздел = Неопределено Тогда
			Раздел = "ВнеоборотныеАктивы";
		КонецЕсли;
		
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ." + ИмяДокумента, "Дата", Раздел, "Организация");
			
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКАктуализацииДвиженийПоВНА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	
	ВнеоборотныеАктивыЛокализация.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВозвратОСИзАренды2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыбытиеАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыкупАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыработкаНМА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ЗаключениеДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.МодернизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.НаработкаОбъектовЭксплуатации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ОбесценениеВНА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ОбъединениеОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПередачаОСВАренду2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПоступлениеАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПрекращениеДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПризнаниеРасходовПоИсследованиямИРазработкам")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.РазукомплектацияОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеОС2_4") 
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.УлучшениеНМА") 
		ИЛИ ВнеоборотныеАктивыЛокализация.ДокументИмеетПрисоединенныеФайлы(ТипВладелецФайла) Тогда
		
		ИменаСправочников.Вставить("ДокументыВНАПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Для Каждого ИмяДокумента Из СписокДокументовВНА() Цикл
		Списки.Вставить(Метаданные.Документы[ИмяДокумента], Истина);
	КонецЦикла;
	
	Списки.Вставить(Метаданные.РегистрыНакопления.АмортизацияНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.АмортизацияОС, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ИнвестицииВАренду, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СтоимостьНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СтоимостьОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДокументыПоНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДокументыПоОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестонахождениеОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестоУчетаНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСБУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСУУ, Истина);
	
	ВнеоборотныеАктивыЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	//++ НЕ УТКА
	СписокОбъектов.Добавить(Документы.ЗаказНаРемонт);
	СписокОбъектов.Добавить(Документы.РегистрацияДефекта);
	СписокОбъектов.Добавить(Документы.УстановкаЗначенийНаработки);
	//-- НЕ УТКА
	
	СписокОбъектов.Добавить(Документы.АмортизацияНМА2_4);
	СписокОбъектов.Добавить(Документы.АмортизацияОС2_4);
	СписокОбъектов.Добавить(Документы.ВводОстатковВзаиморасчетовПоАренде);
	СписокОбъектов.Добавить(Документы.ВводОстатковВнеоборотныхАктивов2_4);
	СписокОбъектов.Добавить(Документы.ВводОстатковИнвестицииВАренду);
	СписокОбъектов.Добавить(Документы.ВозвратОСИзАренды2_4);
	СписокОбъектов.Добавить(Документы.ВыбытиеАрендованныхОС);
	СписокОбъектов.Добавить(Документы.ВыработкаНМА);
	СписокОбъектов.Добавить(Документы.ЗаключениеДоговораАренды);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровНМА2_4);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровОС2_4);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийДоговораАренды);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийПередачиВАренду);
	СписокОбъектов.Добавить(Документы.МодернизацияОС2_4);
	СписокОбъектов.Добавить(Документы.НаработкаОбъектовЭксплуатации);
	СписокОбъектов.Добавить(Документы.ОбесценениеВНА);
	СписокОбъектов.Добавить(Документы.ОбъединениеОС);
	СписокОбъектов.Добавить(Документы.ПередачаОСВАренду2_4);
	СписокОбъектов.Добавить(Документы.ПеремещениеНМА2_4);
	СписокОбъектов.Добавить(Документы.ПеремещениеОС2_4);
	СписокОбъектов.Добавить(Документы.ПереоценкаНМА2_4);
	СписокОбъектов.Добавить(Документы.ПереоценкаОС2_4);
	СписокОбъектов.Добавить(Документы.ПодготовкаКПередачеНМА2_4);
	СписокОбъектов.Добавить(Документы.ПодготовкаКПередачеОС2_4);
	СписокОбъектов.Добавить(Документы.ПоступлениеАрендованныхОС);
	СписокОбъектов.Добавить(Документы.ПоступлениеУслугПоАренде);
	СписокОбъектов.Добавить(Документы.ПризнаниеРасходовПоИсследованиямИРазработкам);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуНМА2_4);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуОС2_4);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	СписокОбъектов.Добавить(Документы.РазукомплектацияОС);
	СписокОбъектов.Добавить(Документы.СписаниеНМА2_4);
	СписокОбъектов.Добавить(Документы.СписаниеОС2_4);
	СписокОбъектов.Добавить(Документы.УлучшениеНМА);
	
	СписокОбъектов.Добавить(Справочники.ДоговорыАренды);
	СписокОбъектов.Добавить(Справочники.НематериальныеАктивы);
	СписокОбъектов.Добавить(Справочники.ОбъектыЭксплуатации);
	
КонецПроцедуры

// Заполняет массив структур, которые будут использованы для начального заполнения и восстановления начального заполнения профилей.
//
// Параметры:
//  ОписанияПрофилей - Массив из см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
//  ПараметрыОбновления - Структура:
//   * ОбновлятьИзмененныеПрофили - Булево - начальное значение Истина.
//   * ЗапретитьИзменениеПрофилей - Булево - начальное значение Истина.
//       Если установить Ложь, тогда поставляемые профили можно не только просматривать, но и редактировать.
//   * ОбновлятьГруппыДоступа     - Булево - начальное значение Истина.
//   * ОбновлятьГруппыДоступаСУстаревшимиНастройками - Булево - начальное значение Ложь.
//       Если установить Истина, то настройки значений, выполненные администратором для
//       вида доступа, который был удален из профиля, будут также удалены из групп доступа.
//
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ДобавитьПрофильБухгалтерВнеоборотныхАктивов(ОписанияПрофилей);
	ДобавитьПрофильОтветственныйЗаВедениеОбъектовЭксплуатации(ОписанияПрофилей);
	
КонецПроцедуры

// См. ПланыВидовХарактеристик.СтатьиРасходов.ОбработкаПараметровВыбора
Процедура ОбработкаПараметровВыбораСтатьиРасходов(Параметры) Экспорт
	
	ПорядокУчетаБУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПорядокУчетаБУ", Неопределено);
	ПорядокУчетаУУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПорядокУчетаУУ", Неопределено);
	ПорядокУчетаНУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПорядокУчетаНУ", Неопределено);
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаУУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Параметры.Отбор.Вставить("ВариантРаспределенияРасходовУпр", Новый ФиксированныйМассив(ВариантыРаспределения));
	КонецЕсли; 
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаБУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Параметры.Отбор.Вставить("ВариантРаспределенияРасходовРегл", Новый ФиксированныйМассив(ВариантыРаспределения));
	КонецЕсли; 
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаНУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Параметры.Отбор.Вставить("ВариантРаспределенияРасходовНУ", Новый ФиксированныйМассив(ВариантыРаспределения));
	КонецЕсли; 
		
КонецПроцедуры

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт

	ВнеоборотныеАктивыЛокализация.ПриПолученииПредопределенныхНаборовСвойств(Наборы);

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ПеремещениеНМА2_4";
	Набор.Идентификатор = Новый УникальныйИдентификатор("bb2ad558-3d21-473e-aa2e-1e21994eda95");
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_НаработкаОбъектовЭксплуатации";
	Набор.Идентификатор = Новый УникальныйИдентификатор("45db92d0-bf39-42af-b189-9f819039e04e");
		
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

// Находит объекты эксплуатации по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОбъектыЭксплуатацииПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт
	
	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации с инвентарным номером %1 не найден';
							|en = 'An asset with inventory number %1 is not found'");
	Для каждого Штрихкод Из Результат.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации ""%1"" не может быть добавлен, т.к. он не удовлетворяет условиям выбора';
							|en = 'The asset ""%1"" cannot be added, as it does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из Результат.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
	Возврат Результат.МассивОбъектов;
	
КонецФункции

// Находит основные средства по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОсновныеСредстваПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	СообщитьОРезультатахПоискаПоШтрихкоду(Результат);
	
	Возврат Результат.МассивОбъектов;

КонецФункции

// Находит объекты эксплуатации по штрихкодам.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 	
// Возвращаемое значение:
// 	Структура - содержит:
//    * МассивОбъектов - Массив из СправочникСсылка.ОбъектыЭксплуатации - найденные объекты.
//    * НеНайдены - Массив из Строка - штрихкоды, по которым не удалось найти объекты.
//    * НеПодходят - Массив из СправочникСсылка.ОбъектыЭксплуатации - Объекты, которые не подходят по параметрам подбора.
Функция НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("МассивОбъектов", Новый Массив);
	Результат.Вставить("НеПодходят", Новый Массив);
	Результат.Вставить("НеНайдены", Новый Массив);

	МассивШтрихкодов = МассивШтрихкодов(ДанныеШтрихкодов);
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	ОбъектыЭксплуатации.ИнвентарныйНомер В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыЭксплуатации.Наименование,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	НеНайдены = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		Если РезультатЗапроса.Найти(Штрихкод, "ИнвентарныйНомер") = Неопределено Тогда
			НеНайдены.Добавить(Штрихкод);
		КонецЕсли; 
	КонецЦикла; 
	
	НеПодходят = Новый Массив;
	Если ПараметрыПодбора <> Неопределено Тогда
		НеПодходят = УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора);
	КонецЕсли; 
	
	Результат.МассивОбъектов = МассивОбъектов;
	Результат.НеПодходят = НеПодходят;
	Результат.НеНайдены = НеНайдены;
	
	Возврат Результат;

КонецФункции

// Сообщает о результатах поиска по штрихкоду.
// 
// Параметры:
// 	РезультатПоиска - см. НайтиОбъектыПоШтрихкодам
Процедура СообщитьОРезультатахПоискаПоШтрихкоду(РезультатПоиска) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Основное средство с инвентарным номером %1 не найдено';
							|en = 'Fixed asset with inventory number %1 is not found'");
	Для каждого Штрихкод Из РезультатПоиска.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" не может быть добавлено в документ, т.к. оно не удовлетворяет условиям выбора';
							|en = 'The fixed asset ""%1"" cannot be added to the document, as it does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из РезультатПоиска.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
КонецПроцедуры

// Получает список штрихкодов из результата ввода.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  
// Возвращаемое значение:
// 	Массив - 
Функция МассивШтрихкодов(ДанныеШтрихкодов) Экспорт
	
	МассивШтрихкодов = Новый Массив;
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		Для каждого СтрокаШтрихкод Из ДанныеШтрихкодов Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
				МассивШтрихкодов.Добавить(СтрокаШтрихкод.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкодов.Штрихкод) Тогда
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов.Штрихкод);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивШтрихкодов);
	
	Возврат МассивШтрихкодов;
	
КонецФункции
 
#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Заполнить';
											|en = 'Fill'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости.Формы.Форма.ПолноеИмя());
КонецПроцедуры

// Процедура определяет необходимость выполнения этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости(ПараметрыОбработчика) Экспорт
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4() Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат; 
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости") 
		И НЕ ЗначениеЗаполнено(Константы.ДатаНачалаУчетаСебестоимости.Получить()) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'При включенном учете себестоимости заполнение стоимости не требуется.';
				|en = 'When the cost accounting is off, filling of the cost is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат; 
	КонецЕсли;
	
	Если Обработки.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости.ЕстьДокументыКОбработке() Тогда
		
		ТекстСообщения = НСтр("ru = 'Обнаружены документы, в которых стоимость, указанная в документе, отличается от фактической.';
								|en = 'The documents are found where the cost specified in the document is different from the actual cost.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстСообщения,,,
			Перечисления.ВажностьПроблемыУчета.Ошибка);
		
	Иначе
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов, в которых требуется заполнить стоимость.';
				|en = 'No documents where filling of the cost is required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияПараметровУзловКомпонентовАмортизации

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_АктуализацияПараметровУзловКомпонентовАмортизации(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АктуализацияПараметровУзловКомпонентовАмортизации);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_АктуализацияПараметровУзловКомпонентовАмортизации");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_АктуализацияПараметровУзловКомпонентовАмортизации");
	
КонецПроцедуры

// Определяет статус операции "АктуализацияПараметровУзловКомпонентовАмортизации".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_АктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет узлов объектов эксплуатации доступен начиная с версии 2.4.';
				|en = 'Sub-asset accounting is available starting from version 2.4.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПрименяетсяУчетУзловКомпонентовАмортизации(ПараметрыОбработчика) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика, НСтр("ru = 'Актуализация параметров узлов компонентов амортизации не требуется.';
										|en = 'You do not need to update the depreciation component sub-asset parameters.'",
			ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина)
	
КонецПроцедуры

// Выполняет операцию "АктуализацияПараметровУзловКомпонентовАмортизации".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_АктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ЗавершенПереходНаВНА24(ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюАктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Определяет используется ли управление ВНА версии 2.4.
//
// Параметры:
//  Период	 - Дата - На какую дату нужно проверить (если не указана, то проверяется на текущую дату).
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА версии 2.4.
//
Функция ИспользуетсяУправлениеВНА_2_4(Период = '000101010000') Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА_2_4(Период);

КонецФункции

// Определяет используется ли управление ВНА.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА.
//
Функция ИспользуетсяУправлениеВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
			ИЛИ ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА();

КонецФункции
  
// Определяет местонахождение основного средства.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о местонахождении:
//  * Организация - СправочникСсылка.Организации -
//  * МОЛ - СправочникСсылка.ФизическиеЛица -
//  * Местонахождение - СправочникСсылка.СтруктураПредприятия -
//  * АдресМестонахождения - Строка -
//  * Арендатор - СправочникСсылка.Организации, СправочникСсылка.Контрагенты -
//  * ПодразделениеАрендатора - СправочникСсылка.СтруктураПредприятия -
//  * МОЛАрендатора - СправочникСсылка.ФизическиеЛица -
//
Функция МестонахождениеОС(ОсновноеСредство) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОС.Арендатор КАК Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора,
	|	ПереданныеВАрендуОС.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|		, 
	|		ДатаИсправления = ДАТАВРЕМЯ(1,1,1) 
	|			И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК ПереданныеВАрендуОС
	|		ПО ПереданныеВАрендуОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	
	МестонахождениеОС = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестонахождениеОС.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестонахождениеОС, Выборка);
	КонецЕсли;
	
	Возврат МестонахождениеОС;
	
КонецФункции

// Определяет место учета нематериального актива.
//
// Параметры:
//  НематериальныйАктив	 - СправочникСсылка.НематериальныеАктивы - нематериальный актив.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о месте учета:
//  * Организация - СправочникСсылка.Организации -
//  * Подразделение - СправочникСсылка.СтруктураПредприятия -
//
Функция МестоУчетаНМА(НематериальныйАктив) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.Организация,
	|	МестоУчетаНМА.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &НематериальныйАктив) КАК МестоУчетаНМА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	
	Результат = Запрос.Выполнить();
	
	МестоУчетаНМА = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестоУчетаНМА.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестоУчетаНМА, Выборка);
	КонецЕсли;

	Возврат МестоУчетаНМА;
	
КонецФункции

// Определяет местонахождение и сведения об арендодателе основного средства.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о местонахождении:
//  	* Организация - СправочникСсылка.Организации -
// 		* Партнер - СправочникСсылка.Партнеры -
//  	* Контрагент - СправочникСсылка.Контрагенты -
//  	* Договор - СправочникСсылка.ДоговорыАренды, СправочникСсылка.ДоговорыКонтрагентов - 
//  	* МОЛ - СправочникСсылка.ФизическиеЛица -
//  	* Местонахождение - СправочникСсылка.СтруктураПредприятия -
//  	* АдресМестонахождения - Строка -
//
Функция МестонахождениеИАрендодательОС(ОсновноеСредство) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	АрендованныеОС.Партнер КАК Партнер,
	|	АрендованныеОС.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	
	МестонахождениеОС = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестонахождениеОС.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестонахождениеОС, Выборка);
	КонецЕсли;
	
	Возврат МестонахождениеОС;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации ОС.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияОС(ОсновноеСредство) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестонахождениеОС(ОсновноеСредство);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ,ЗалоговаяСтоимость,
											|ОбесценениеРегл, ОбесценениеУпр");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)       
		|	КОНЕЦ КАК Амортизация,
		|
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВРЦФ,
		|
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК ЗалоговаяСтоимость,
		|
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеУпр,
		|
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеРегл
		|
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК АмортизацияОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = АмортизацияОСОстатки.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = СтоимостьОСОстатки.ОсновноеСредство
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОСУУ
		|		ПО ОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбесценениеВНА.Остатки(
		|				,
		|				Организация = &Организация
		|					И ВнеоборотныйАктив = &ОсновноеСредство) КАК ОбесценениеВНАОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = ОбесценениеВНАОстатки.ВнеоборотныйАктив
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка = &ОсновноеСредство";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации НМА.
//
// Параметры:
//  НематериальныйАктив - СправочникСсылка.НематериальныеАктивы	 - Нематериальный актив для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияНМА(НематериальныйАктив) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестоУчетаНМА(НематериальныйАктив);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ,
											|ОбесценениеУпр,ОбесценениеРегл");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ КАК Амортизация,
		|
		// АмортизацияРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияВРЦФ,
		|
		// Стоимость
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|
		// СтоимостьРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьВРЦФ,
		|
		// ОбесценениеРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеРегл,
		|
		//ОбесценениеУпр
		|  ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеУпр
		|
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК АмортизацияНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = АмортизацияНМАОстатки.НематериальныйАктив
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК СтоимостьНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = СтоимостьНМАОстатки.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМА
		|		ПО НематериальныеАктивы.Ссылка = ПервоначальныеСведенияНМА.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПорядокУчетаНМАУУ
		|		ПО НематериальныеАктивы.Ссылка = ПорядокУчетаНМАУУ.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбесценениеВНА.Остатки(
		|				,
		|				Организация = &Организация
		|					И ВнеоборотныйАктив = &НематериальныйАктив) КАК ОбесценениеВНАОстатки
		|		ПО НематериальныеАктивы.Ссылка = ОбесценениеВНАОстатки.ВнеоборотныйАктив
		|ГДЕ
		|	НематериальныеАктивы.Ссылка = &НематериальныйАктив";
	КонецЕсли; 

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации узлов и компонентов амортизации ОС-владельца.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - ОС-владелец узлов и компонентов для которых необходимо получить сведения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с узлами и компонентами и сведениями об их стоимости
//
Функция СтоимостьИАмортизацияУзловКомпонентов(ОсновноеСредство) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестонахождениеОС(ОсновноеСредство);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияУзловКомпонентов();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ПОМЕСТИТЬ ВтУзлыОсновныхСредств
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
		|ГДЕ
		|	УзлыКомпоненты.ОсновноеСредство = &ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УзелКомпонент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ПОМЕСТИТЬ УзлыКомпоненты
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(, УзелКомпонент В
		|		(ВЫБРАТЬ
		|			ВтУзлыОсновныхСредств.УзелКомпонент КАК УзелКомпонент
		|		ИЗ
		|			ВтУзлыОсновныхСредств КАК ВтУзлыОсновныхСредств)) КАК УзлыКомпоненты
		|ГДЕ
		|	УзлыКомпоненты.ОсновноеСредство = &ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УзелКомпонент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ КАК Амортизация,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеУпр,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимостьРегл
		|ИЗ
		|	УзлыКомпоненты КАК УзлыКомпоненты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК АмортизацияОСОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = АмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК СтоимостьОСОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = СтоимостьОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК ПорядокУчетаОСУУ
		|		ПО УзлыКомпоненты.УзелКомпонент = ПорядокУчетаОСУУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбесценениеВНА.Остатки(, Организация = &Организация
		|		И ВнеоборотныйАктив В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК ОбесценениеВНАОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = ОбесценениеВНАОстатки.ВнеоборотныйАктив";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции // СтоимостьИАмортизацияУзловКомпонентов()

// Проверяет, что документ проводится в периоде, который соответствует версии документа.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Проводимый документ.
//  ЭтоДокументВерсии2_4 - Булево			 - Истина, если документ относится к версии 2.4.
//  Отказ				 - Булево			 - Отказ от проведения.
//
Процедура ПроверитьСоответствиеДатыВерсииУчета(Объект, ЭтоДокументВерсии2_4, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
	ИспользуетсяУправлениеВНА_2_4 = (Объект.Дата >= ДатаНачалаУчета
				ИЛИ Объект.Дата = '000101010000' 
					И ТекущаяДатаСеанса() >= ДатаНачалаУчета);
	
	ТекстСообщения = Неопределено;

	Если ИспользуетсяУправлениеВНА_2_4 И НЕ ЭтоДокументВерсии2_4 Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата документа должна быть до %1 (начало ведения учета внеоборотных активов версии 2.4).
                               |После этой даты необходимо использовать документы, расположенные в разделе ""Внеоборотные активы"".';
                               |en = 'Document date must be before %1 (start date of fixed assets accounting of version 2.4).
                               |After this date, you must use documents from the ""Asset management"" section.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		
	ИначеЕсли НЕ ИспользуетсяУправлениеВНА_2_4 И ЭтоДокументВерсии2_4  Тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамАренды Тогда
				
			// Документы, которые можно проводить до даты начала учета версии 2.4
			Если НачалоДня(Объект.Дата) < НачалоДня(ДатаНачалаУчета-1) Тогда
				
				ТекстСообщения = НСтр("ru = 'Если документ оформлен для перехода на учет версии 2.4, то его дата должна быть %1.
	                                   |В остальных случаях дата документа должна быть после %2 (начало ведения учета внеоборотных активов версии 2.4).
	                                   |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".';
	                                   |en = 'If the document is registered to transfer to accounting 2.4, its date must be %1.
	                                   |In other cases the document date must be after %2 (beginning of fixed asset accounting 2.4).
	                                   |Before this date, use documents from the ""Local accounting"" section.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета-1, "ДЛФ=D"), Формат(ДатаНачалаУчета, "ДЛФ=D"));
			КонецЕсли; 
			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть после %1 (начало ведения учета внеоборотных активов версии 2.4).
	                               |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".';
	                               |en = 'Document date must be after %1 (beginning of fixed assets accounting 2.4).
	                               |Before this date, you must use documents from the ""Local accounting"" section.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТекстСообщения <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Дата",, Отказ); 
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет, что документ проводится при учете НМА по ФСБУ 14.
//
// Параметры:
//  Объект - ДокументОбъект- Проводимый документ.
//  Отказ - Булево - Отказ от проведения.
//
Процедура ПроверитьПрименениеФСБУ14(Объект, Отказ) Экспорт
	
	Если НЕ НастройкиНалоговУчетныхПолитикПовтИсп.ПрименяетсяФСБУ14(Объект.Организация, Объект.Дата) Тогда
		ТекстСообщения = НСтр("ru = 'Оформление документа поддерживается только при учете НМА по ФСБУ 14.';
								|en = 'You can register the document only if you account for intangible assets by the Russian GAAP (FSBU) 14.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Дата",, Отказ); 
	КонецЕсли;
	
КонецПроцедуры

// Определяет организации, по которым закрытие месяца должно выполняться вместе.
//
// Параметры:
//  Период	 - Дата - Период закрытия месяца.
// 
// Возвращаемое значение:
//  Массив из Массив - Список групп организаций.
//
Функция ГруппыОрганизацийОСиНМА(Период) Экспорт
	
	МассивОСиНМА = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьГруппыОрганизацийОСиНМА(Период, МассивОСиНМА);
	
	Возврат МассивОСиНМА;
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ВнеоборотныеАктивыЛокализация.НастроитьВариантыОтчетов(Настройки);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	#Область ВедомостьПоОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоОС_МУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств?';
									|en = 'Take an overview of cost and depreciation of fixed assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств?';
									|en = 'Take an overview of cost and depreciation of fixed assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_БУ");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств в бухгалтерском учете?';
									|en = 'Check summary data on the cost and depreciation of fixed assets in local accounting.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС_УУ");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств в управленческом учете?';
									|en = 'Check summary data on the cost and depreciation of fixed assets in management accounting.'");
	
	#КонецОбласти
	
	#Область ВедомостьПоНМА_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоНМА_МУ);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;

	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?';
									|en = 'Take an overview of cost and amortization of intangible assets and R&D expenses.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_Основной");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?';
									|en = 'Take an overview of cost and amortization of intangible assets and R&D expenses.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_БУ");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в бухгалтерском учете?';
									|en = 'Check summary data on the cost and depreciation of intangible assets and R&D expenses in local accounting.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА_УУ");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = Ложь;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР в управленческом учете?';
									|en = 'Check summary data on the cost and depreciation of intangible assets and R&D expenses in management accounting.'");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииОС_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииОС");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииОСКонтекст");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииНМА_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииНМА_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииНМА");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииНМАКонтекст");
	#КонецОбласти
	
	#Область РеестрОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрОС_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие основные средства числятся в организации?';
									|en = 'View company''s fixed assets.'");
	#КонецОбласти

	#Область ПереданныеВАрендуОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПереданныеВАрендуОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были переданы в аренду?
									 |Кому были переданы?
									 |Какой срок аренды?';
									 |en = 'View the fixed assets provided to lessee.
									 |Check the lessees.
									 |Track the lease terms.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПереданныеВАрендуОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были переданы в аренду?
									 |Кому были переданы?
									 |Какой срок аренды?';
									 |en = 'View the fixed assets provided to lessee.
									 |Check the lessees.
									 |Track the lease terms.'");
	#КонецОбласти

	#Область СтруктураЗатратПоОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтруктураЗатратПоОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУправлениеРемонтами");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие затраты отнесены на основные средства?';
									|en = 'View expenses allocated to fixed assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтруктураЗатратПоОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие затраты отнесены на основные средства?';
									|en = 'View expenses allocated to fixed assets.'");
	#КонецОбласти
	
	//++ НЕ УТКА
	
	#Область КарточкаОбъектаЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаОбъектаЭксплуатации);
	ОписаниеОтчета.Включен = Ложь;
	#КонецОбласти
	
	#Область КонтрольКорректностиЗаполненияОбъектовЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольКорректностиЗаполненияОбъектовЭксплуатации);
	ОписаниеОтчета.Включен = Ложь;
	#КонецОбласти

	//-- НЕ УТКА

	#Область ВнеоборотныеАктивыСОбесценением
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВнеоборотныеАктивыСОбесценением);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьОбесценениеВНА");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Остаток обесценения по внеоборотным активам с группировкой по единицам генерирующим денежные средства.';
									|en = 'Impairment balance for fixed assets with grouping by cash-generating units.'");
	
	#КонецОбласти

КонецПроцедуры

// Определяет завершение перехода на версию 2.4.
//
// Параметры:
//  Период - Дата - параметры обработчика события этапа.
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - 
// 
// Возвращаемое значение:
//  Булево - Истина, если переход завершен.
//
Функция ЗавершенПереходНаВНА24(Период, СписокОрганизаций) Экспорт

	Если НЕ ИспользуетсяУправлениеВНА_2_4(Период)
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СостояниеЭтапа = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
						Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24, 
						Период, 
						СписокОрганизаций,
						Ложь,
						Ложь);
						
	Возврат СостояниеЭтапа <> Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;

КонецФункции

// Определяет параметры получения данных в запросе, который содержит обращение к данным двух версий учета.
//
// Параметры:
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Начало периода.
// 
// Возвращаемое значение:
//  Структура - Параметры получения данных в запросе.
//
Функция ПараметрыПолученияДанныхДвухВерсийУчета(НачалоПериода, КонецПериода) Экспорт

	НачалоПериода22 = НачалоПериода;
	НачалоПериода24 = НачалоПериода;
	КонецПериода22 = КонецПериода;
	КонецПериода24 = КонецПериода;
	
	НачалоУчета24 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
	
	ИспользуетсяВерсия22 =
		ИспользоватьВнеоборотныеАктивы2_2
		И (НЕ ЗначениеЗаполнено(НачалоПериода)
			ИЛИ НачалоПериода < НачалоУчета24
			ИЛИ НЕ ИспользоватьВнеоборотныеАктивы2_4);
			
	ИспользуетсяВерсия24 =
		ИспользоватьВнеоборотныеАктивы2_4
		И (НЕ ЗначениеЗаполнено(КонецПериода)
			ИЛИ КонецПериода > НачалоУчета24);
			
	Если ИспользуетсяВерсия22 И ИспользуетсяВерсия24 Тогда
		КонецПериода22 = НачалоУчета24 - 1;
		НачалоПериода24 = НачалоУчета24;
	КонецЕсли; 

	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия22", ИспользуетсяВерсия22);
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия24", ИспользуетсяВерсия24);
	ПараметрыПолученияДанных.Вставить("НачалоПериода22", НачалоПериода22);
	ПараметрыПолученияДанных.Вставить("КонецПериода22", КонецПериода22);
	ПараметрыПолученияДанных.Вставить("НачалоПериода24", НачалоПериода24);
	ПараметрыПолученияДанных.Вставить("КонецПериода24", КонецПериода24);
	
	Возврат ПараметрыПолученияДанных;
	
КонецФункции

// Позволяет определить есть ли в табличной части документа строки с одинаковыми объектами учета.
//  При нахождении дублей формирует сообщения пользователю.
//
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  ИмяТабличнойЧасти - Строка - Имя табличной части, в которой нужно искать дубли.
//  ИмяРеквизита - Строка - Имя реквизита ТЧ.
//  Отказ - Булево - Признак отказа от дальнейшей обработки.
//  ШаблонСообщения - Строка - Шаблон сообщения, который будет использоваться.
//  ФорматЗначения - Строка - Формат значения: Месяц, Квартал.
//
Процедура ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ИмяРеквизита, Отказ, ШаблонСообщения = Неопределено, ФорматЗначения = Неопределено) Экспорт
	
	Если ШаблонСообщения = Неопределено Тогда
		Если ИмяТабличнойЧасти = "ОС" Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже выбрано в строке %2.';
									|en = 'Asset ""%1"" is already selected in line %2.'");
		ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда
			ШаблонСообщения = НСтр("ru = 'Нематериальный актив ""%1"" уже выбран в строке %2.';
									|en = 'Intangible asset ""%1"" is already selected in line %2.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значение ""%1"" уже выбрано в строке %2.';
									|en = 'Value ""%1"" is already selected in line %2.'");
		КонецЕсли;
	КонецЕсли; 
	
	СписокОбъектов = Новый Соответствие;
	Для каждого ДанныеСтроки Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходнаяСтрока = СписокОбъектов.Получить(ДанныеСтроки[ИмяРеквизита]);
		Если ИсходнаяСтрока = Неопределено Тогда
			СписокОбъектов.Вставить(ДанныеСтроки[ИмяРеквизита], ДанныеСтроки.НомерСтроки);
			Продолжить;
		КонецЕсли; 
		
		Если ВРег(ФорматЗначения) = "МЕСЯЦ"
			ИЛИ ВРег(ФорматЗначения) = "КВАРТАЛ" Тогда
			ЗначениеСтроки = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ДанныеСтроки[ИмяРеквизита], ФорматЗначения);
		Иначе
			ЗначениеСтроки = ДанныеСтроки[ИмяРеквизита];
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗначениеСтроки, Формат(ИсходнаяСтрока, "ЧГ="));
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, ДанныеСтроки.НомерСтроки, ИмяРеквизита);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "", Отказ);
	
	КонецЦикла; 
	
КонецПроцедуры

// Определяет принят ли к учету объект эксплуатации.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ОбъектыЭксплуатации	 - Объект эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если принят к учету.
//
Функция ОбъектЭксплуатацииПринятКУчету(Ссылка) Экспорт

	ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(Ссылка);
	ПринятКУчету = 
		ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету 
		ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
		ИЛИ ПервоначальныеСведения.СостояниеНУ = Перечисления.СостоянияОС.ПринятоКУчету;
	
	Возврат ПринятКУчету

КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив из ОбъектМетаданных - объекты метаданных с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.НематериальныеАктивы);
	
	Объекты.Добавить(Метаданные.Документы.АмортизацияНМА2_4);
	Объекты.Добавить(Метаданные.Документы.АмортизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	Объекты.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС);
	Объекты.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ОбесценениеВНА);
	Объекты.Добавить(Метаданные.Документы.ОбъединениеОС);
	Объекты.Добавить(Метаданные.Документы.ПередачаОСВАренду2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияОС);
	Объекты.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеОС2_4);
	Объекты.Добавить(Метаданные.Документы.УлучшениеНМА);
	
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовНМА2_4);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовОС2_4);
	
	ВнеоборотныеАктивыЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
КонецПроцедуры

// Добавляет в журнал документы подсистемы ВНА.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - см. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы
//
Процедура ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Возвращает ОС, которые приняты к учету.
//
// Параметры:
//  ОсновноеСредствоИлиСписок	 - Массив, СправочникСсылка.ОбъектыЭксплуатации	 - Основные средства, для которых нужно проверить принятие учету.
//  Период						 - Дата											 - Дата, на которую ОС должны быть приняты к учету.
//  СостояниеПринят				 - Массив										 - Список состояний, в которых ОС считается принятым к учету.
// 
// Возвращаемое значение:
//  Массив - ОС, которые приняты к учету.
//
Функция ВернутьПринятыеКУчетуОС(ОсновноеСредствоИлиСписок, Период, СостояниеПринят = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ОсновноеСредствоИлиСписок) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПринятыеКУчетуОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ДатаИсправления = ДАТАВРЕМЯ(1,1,1) И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Период, 
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация
		|ГДЕ
		|	ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестонахождениеОС.ОсновноеСредство.Наименование,
		|	МестонахождениеОС.ОсновноеСредство.ИнвентарныйНомер";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	Если СостояниеПринят = Неопределено Тогда
		СостояниеПринят = Перечисления.СостоянияОС.ПринятоКУчету;
	КонецЕсли; 
	Запрос.УстановитьПараметр("СостояниеПринят", СостояниеПринят);
	
	СписокОС = ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), ОсновноеСредствоИлиСписок, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредствоИлиСписок));
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");

КонецФункции

// Возвращает ОС, которые приняты к учету.
//
// Параметры:
//  НМАИлиСписок	 - Массив, СправочникСсылка.НематериальныеАктивы	 - НМА, для которых нужно проверить принятие учету.
//  Период						 - Дата											 - Дата, на которую НМА должны быть приняты к учету.
// 
// Возвращаемое значение:
//  Массив - НМА, которые приняты к учету.
//
Функция ВернутьПринятыеКУчетуНМА(НМАИлиСписок, Период) Экспорт

	Если НЕ ЗначениеЗаполнено(НМАИлиСписок) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПринятыеКУчетуНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МестоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив
		|ИЗ
		|	РегистрСведений.МестоУчетаНМА.СрезПоследних(&Период, НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&Период, НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаНМАУУ.НематериальныйАктив
		|			И МестоУчетаНМА.Организация = ПорядокУчетаНМАУУ.Организация
		|ГДЕ
		|	ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестоУчетаНМА.НематериальныйАктив.Наименование,
		|	МестоУчетаНМА.НематериальныйАктив.Код";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	СписокНМА = ?(ТипЗнч(НМАИлиСписок) = Тип("Массив"), НМАИлиСписок, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НМАИлиСписок));
	Запрос.УстановитьПараметр("СписокНМА", СписокНМА);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");

КонецФункции

// Удаляет из массива объекты эксплуатации не соответствующие отбору.
//
// Параметры:
//  МассивОбъектов	 - Массив	 - Массив из которого требуется удалить объекты эксплуатации.
//  ПараметрыПодбора - Структура - Параметры подбора.
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыЭксплуатации - удаленные ссылки. 
Функция УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора) Экспорт

	ОписаниеЗапроса = Справочники.ОбъектыЭксплуатации.ОписаниеЗапросаДляВыбора(ПараметрыПодбора, Истина, МассивОбъектов);
	
	Запрос = Новый Запрос(ОписаниеЗапроса.ТекстЗапроса);
	Для каждого ОписаниеПараметра Из ОписаниеЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла; 
	
	ДоступныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УдаленныеСсылки = Новый Массив;
	
	Для Сч = -МассивОбъектов.ВГраница() По 0 Цикл
		Если ДоступныеОбъекты.Найти(МассивОбъектов[-Сч]) = Неопределено Тогда
			УдаленныеСсылки.Добавить(МассивОбъектов[-Сч]);
			МассивОбъектов.Удалить(-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УдаленныеСсылки;
	
КонецФункции

// Формирует движения в регистре сведений при обновлении ИБ.
// 
// Параметры:
// 	ИмяРегистра	- Строка - Имя регистра.
// 	Параметры	- Структура	- Параметры обработчика обновления.
//
// Возвращаемое значение:
//	Число - количество обработанных объектов
Функция СформироватьДвиженияПриОбновленииИБ(ИмяРегистра, Параметры) Экспорт
	
	ОбъектовОбработано = 0;
	
	ПолноеИмяРегистра = "РегистрСведений." + ИмяРегистра;
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Если НЕ РегистраторыОбновлены(ИмяРегистра, Параметры) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат 0;
	КонецЕсли;

	#Область ФормированиеДвижений
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанныхДляОбработки.ВыбиратьПорциями = Ложь;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
							Параметры.Очередь, 
							Неопределено, 
							ПолноеИмяРегистра, 
							МенеджерВременныхТаблиц, 
							ДополнительныеПараметрыВыборкиДанныхДляОбработки);

	СоздатьВременнуюТаблицуСДаннымиДокументовДляОбработки(
		МетаданныеРегистра, 
		ПараметрыОбработки.ИмяВременнойТаблицы, 
		МенеджерВременныхТаблиц);

	// Документы нужно выбирать в хронологическом порядке, т.к. при формировании движений используется срез последних.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ВТДляОбработки.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(втДанныеДокументовДляОбработки.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Период
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДокументовДляОбработки КАК втДанныеДокументовДляОбработки
	|		ПО втДанныеДокументовДляОбработки.Ссылка = ВТДляОбработки.Регистратор
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВТДляОбработки.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(втДанныеДокументовДляОбработки.Дата, ДАТАВРЕМЯ(1,1,1))";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ПолучитьДвиженияИЗаписатьПриОбновленииИБ(
			ИмяРегистра, 
			ПолноеИмяРегистра, 
			Выборка.Регистратор, 
			МетаданныеРегистра, 
			Параметры);

		ОбъектовОбработано = ОбъектовОбработано + 1;
		
	КонецЦикла;

	#КонецОбласти

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
	Возврат ОбъектовОбработано;
	
КонецФункции

// Проверяет обновлены регистраторы регистра.
// 
// Параметры:
// 	ИмяРегистра	- Строка - Имя регистра.
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
// Возвращаемое значение:
// 	Булево - Ложь, если регистраторы не обновлены.
//
Функция РегистраторыОбновлены(ИмяРегистра, Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений." + ИмяРегистра;
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЧитаемыеДанные = Новый Массив;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента = Метаданные.Документы.КорректировкаРегистров Тогда
			Продолжить;			
		КонецЕсли;
		Если МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			ЧитаемыеДанные.Добавить("Документ." + МетаданныеДокумента.Имя);
		КонецЕсли;		
	КонецЦикла;
	
	Если ЧитаемыеДанные.Количество() <> 0
		И ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, ЧитаемыеДанные) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Создает временную таблицу с данными объектов.
// 
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрСведений - Метаданные регистра.
//  ИмяТаблицыВТДляОбработки - Строка - Имя таблицы "ВТДляОбработки".
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
Процедура СоздатьВременнуюТаблицуСДаннымиДокументовДляОбработки(МетаданныеРегистра, ИмяТаблицыВТДляОбработки, МенеджерВременныхТаблиц) Экспорт

	СписокОбъектов = Новый Массив;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента <> Метаданные.Документы.КорректировкаРегистров
			И МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			СписокОбъектов.Добавить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;

	ТекстыЗапроса = Новый Массив;
	Для Каждого ПолноеИмяОбъекта Из СписокОбъектов Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Дата КАК Дата,
		|	Таблица.Организация КАК Организация
		| 
		|ПОМЕСТИТЬ втДанныеДокументовДляОбработки
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (
		|		ВЫБРАТЬ
		|			СсылкиДляОбработки.Регистратор
		|		ИЗ
		|			ВТДляОбработки КАК СсылкиДляОбработки)";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ПолноеИмяОбъекта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДляОбработки", ИмяТаблицыВТДляОбработки);
		
		Если ТекстыЗапроса.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ втДанныеДокументовДляОбработки", "");
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает таблицу движений документа и записывает в регистр.
// 
// Параметры:
// 	ИмяРегистра - Строка - 
// 	ПолноеИмяРегистра - Строка - 
// 	Регистратор - Произвольный - 
// 	МетаданныеРегистра - ОбъектМетаданныхРегистрСведений - 
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ПолучитьДвиженияИЗаписатьПриОбновленииИБ(ИмяРегистра, ПолноеИмяРегистра, Регистратор, МетаданныеРегистра, Параметры) Экспорт

	НачатьТранзакцию();

	Попытка

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Регистратор));
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);

		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);

		Блокировка.Заблокировать();

		// Получим таблицу движений.
		ТаблицаРегистра = Неопределено;

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Проведен") = Истина Тогда
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
			ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистра, ТаблицаРегистра);
		КонецЕсли;

		// Запись таблицы движений.
		Если ТаблицаРегистра <> Неопределено Тогда

			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

		Иначе

			ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
			ДополнительныеПараметрыОтметкиОбработки.ЭтоДвижения = Истина;
			ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = ПолноеИмяРегистра;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(
				Регистратор, 
				ДополнительныеПараметрыОтметкиОбработки, 
				Параметры.Очередь);

		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать записи регистра ""%1"": %2 по причине: %3';
										|en = 'Cannot process records in register ""%1"": %2. Reason: %3'"),
									?(ЗначениеЗаполнено(МетаданныеРегистра.Синоним), МетаданныеРегистра.Синоним, МетаданныеРегистра.Имя),
									Строка(Регистратор),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение, 
			Регистратор.Метаданные(), 
			Регистратор, 
			ТекстСообщения);

	КонецПопытки;
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на изменение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля) Экспорт
	
	// Справочники.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГруппНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГруппФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНематериальныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовСтроительства");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрисоединенныхФайловДокументовВНА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПричинСписанияОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСобытийОС");

	// Документы.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаОстатковВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВозвратовОСОтАрендатора");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВыбытийАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийПараметровНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийПараметровОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКорректировокСтоимостиИАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКорректировокСтоимостиИАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМодернизацийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНаработкиОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъединенийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПередачиОСАрендатору");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПереоценкиНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПереоценкиОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодготовкиКПередачеНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодготовкиКПередачеОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПоступленийАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПризнаниеРасходовПоИсследованиямИРазработкам");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПринятийКУчетуНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПринятийКУчетуОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРазукомплектацийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТемЭтаповИсследованийИРазработок");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУлучшенияНМА");
	
	// Регистры.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНематериальнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоОсновнымСредствам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиОС");
	
	// Обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовНМА");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовОС");
	
	// Отчеты.
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтераПоВнеоборотнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыРазделаВнеоборотныеАктивы");
	
	// Видимые подсистемы КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");
	
	// Обесценение ВНА
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхОбесцененияВНА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДанныхОбесцененияВНА");
	
	ВнеоборотныеАктивыЛокализация.ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля);
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на чтение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаЧтение(ОписаниеПрофиля) Экспорт
	
	// Справочники.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГруппНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГруппФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНематериальныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовСтроительства");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрисоединенныхФайловДокументовВНА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПричинСписанияОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСобытийОС");

	// Документы.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВводаОстатковВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВозвратовОСОтАрендатора");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВыбытийАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийПараметровНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийПараметровОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКорректировокСтоимостиИАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКорректировокСтоимостиИАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМодернизацийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработкиОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъединенийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПередачиОСАрендатору");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПеремещенийНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПеремещенийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПереоценкиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПереоценкиОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПодготовкиКПередачеНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПодготовкиКПередачеОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоступленийАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПризнаниеРасходовПоИсследованиямИРазработкам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПринятийКУчетуНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПринятийКУчетуОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРазукомплектацийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСписанийНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСписанийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеТемЭтаповИсследованийИРазработок");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУлучшенийНМА");
	
	// Регистры.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНематериальнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоОсновнымСредствам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиОС");
	
	// Обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовАренды");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовНМА");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовОС");
	
	// Отчеты.
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтераПоВнеоборотнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыРазделаВнеоборотныеАктивы");
	
	// Видимые подсистемы КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");
	
	ВнеоборотныеАктивыЛокализация.ДобавитьРолиДляДоступаКПодсистемеВНАНаЧтение(ОписаниеПрофиля);
	
КонецПроцедуры

// Формирует текст запроса, получающий "срез последних" регистра.
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра
//  ИмяТаблицыСрезПоследних - Строка - Имя таблицы срез последних
//  ИмяОсновнойТаблицы - Строка - Имя основной таблицы, которая должна содержать поля Ссылка, Период и поля являющиеся измерениями регистра
//  ТекстыЗапроса - СписокЗначений из Строка - Тексты запроса
//  СоответствиеИзмерений - Структура - Соответствие измерений основной таблицы и регистра
//	УчестьИсправления - Булево - Истина, если нужно учесть исправления прошлой датой
Процедура ТекстЗапросаСрезПоследнихРегистра(ИмяРегистра, ИмяТаблицыСрезПоследних, ИмяОсновнойТаблицы, ТекстыЗапроса, СоответствиеИзмерений = Неопределено, УчестьИсправления = Ложь) Экспорт

	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицыСрезПоследних, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствиеИзмерений = Неопределено Тогда
		СоответствиеИзмерений = Новый Структура;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ПараметрыРегистра = Новый Структура;
	ПараметрыРегистра.Вставить("ЭтоНезависимыйРегистр", МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый);
	ПараметрыРегистра.Вставить("ВыборкаПолей", "");
	ПараметрыРегистра.Вставить("ВыборкаИзмерений", "");
	ПараметрыРегистра.Вставить("ГруппировкаИзмерений", "");
	ПараметрыРегистра.Вставить("ИндексИзмерений", "");
	ПараметрыРегистра.Вставить("УсловиеСоединенияОсновнойТаблицы", "");
	ПараметрыРегистра.Вставить("УсловиеСоединенияТаблицРегистра", "");
	
	ВыборкаПолей = Новый Массив;
	ВыборкаИзмерений = Новый Массив;
	ГруппировкаИзмерений = Новый Массив;
	ИндексИзмерений = Новый Массив;
	УсловиеСоединенияОсновнойТаблицы = Новый Массив;
	УсловиеСоединенияТаблицРегистра = Новый Массив;
	
	ЧастьЗапросаКак = " КАК "; // @query-part
	ЧастьЗапросаИ = " И "; // @query-part
	
	ИсключитьИзмеренияИзСоединения = Новый Массив;
	Для Каждого КлючИЗначение Из СоответствиеИзмерений Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			ИсключитьИзмеренияИзСоединения.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя;
		ВыборкаПолей.Добавить(ПутьКПолю + ЧастьЗапросаКак + МетаданныеИзмерения.Имя);
		
		Если ИсключитьИзмеренияИзСоединения.Найти(МетаданныеИзмерения.Имя) = Неопределено Тогда
			
			ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя;
			ВыборкаИзмерений.Добавить(ПутьКПолю + ЧастьЗапросаКак + МетаданныеИзмерения.Имя);
			
			ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя;
			ГруппировкаИзмерений.Добавить(ПутьКПолю);
		
			ИмяИзмерения = МетаданныеИзмерения.Имя;
			Если СоответствиеИзмерений.Свойство(МетаданныеИзмерения.Имя, ИмяИзмерения) Тогда
				ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя + " = " + "ОсновнаяТаблица." + ИмяИзмерения;
			Иначе
				ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя + " = " + "ОсновнаяТаблица." + МетаданныеИзмерения.Имя;
			КонецЕсли;
			УсловиеСоединенияОсновнойТаблицы.Добавить(ПутьКПолю);
			
			ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя + " = " + "ОсновнаяТаблица." + МетаданныеИзмерения.Имя;
			УсловиеСоединенияТаблицРегистра.Добавить(ПутьКПолю);

			ИндексИзмерений.Добавить(МетаданныеИзмерения.Имя);
			
		КонецЕсли;

	КонецЦикла;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		
		ПутьКПолю = "ТаблицаРегистра." + МетаданныеИзмерения.Имя;
		ВыборкаПолей.Добавить(ПутьКПолю + ЧастьЗапросаКак + МетаданныеИзмерения.Имя);
		
	КонецЦикла; 
	
	Если УчестьИсправления
		И ВнеоборотныеАктивыСлужебный.РегистрПоддерживаетИсправление(ИмяРегистра) Тогда
		УсловиеСоединенияОсновнойТаблицы.Добавить("ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)");
		УсловиеСоединенияТаблицРегистра.Добавить("ТаблицаРегистра.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)");
	КонецЕсли;
	
	Если НЕ ПараметрыРегистра.ЭтоНезависимыйРегистр Тогда
		УсловиеСоединенияОсновнойТаблицы.Добавить("ТаблицаРегистра.Активность");
		УсловиеСоединенияТаблицРегистра.Добавить("ТаблицаРегистра.Активность");
	КонецЕсли;
	
	Если НЕ  ПараметрыРегистра.ЭтоНезависимыйРегистр Тогда
		УсловиеСоединенияОсновнойТаблицы.Добавить("ТаблицаРегистра.Регистратор <> ОсновнаяТаблица.Ссылка");
	КонецЕсли;
	
	РазделительПолей = ",
	|	";
	ПараметрыРегистра.ВыборкаПолей = СтрСоединить(ВыборкаПолей, РазделительПолей);
	ПараметрыРегистра.ВыборкаИзмерений = СтрСоединить(ВыборкаИзмерений, РазделительПолей);
	ПараметрыРегистра.ГруппировкаИзмерений = СтрСоединить(ГруппировкаИзмерений, РазделительПолей);
	ПараметрыРегистра.ИндексИзмерений = СтрСоединить(ИндексИзмерений, РазделительПолей);
	
	РазделительПолей = "
	|" + ЧастьЗапросаИ;
	ПараметрыРегистра.УсловиеСоединенияОсновнойТаблицы = СтрСоединить(УсловиеСоединенияОсновнойТаблицы, РазделительПолей);
	ПараметрыРегистра.УсловиеСоединенияТаблицРегистра = СтрСоединить(УсловиеСоединенияТаблицРегистра, РазделительПолей);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	&ВыборкаИзмерений,
	|	МАКСИМУМ(ТаблицаРегистра.Период) КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_Период
	|
	|ИЗ
	|	ВтСписокОбъектов КАК ОсновнаяТаблица
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО (ТаблицаРегистра.Период <= ОсновнаяТаблица.Период)
	|			И &УсловиеСоединенияОсновнойТаблицы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновнаяТаблица.Ссылка,
	|	&ГруппировкаИзмерений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	&ИндексИзмерений
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтСписокОбъектов", ИмяОсновнойТаблицы);
	ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, "", ПараметрыРегистра);

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицыСрезПоследних, Ложь);

	Если ПараметрыРегистра.ЭтоНезависимыйРегистр Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОсновнаяТаблица.Ссылка КАК Ссылка,
		|	ТаблицаРегистра.Период КАК Период,
		|	&ВыборкаПолей
		|
		|ПОМЕСТИТЬ ВТ_СрезПоследнихРегистра
		|
		|ИЗ
		|	ВТ_ИмяРегистра_Период КАК ОсновнаяТаблица
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Период = ОсновнаяТаблица.Период
		|			И &УсловиеСоединенияТаблицРегистра
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	&ИндексИзмерений
		|";
		ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра);
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицыСрезПоследних, Ложь);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОсновнаяТаблица.Ссылка КАК Ссылка,
		|	ТаблицаРегистра.Период КАК ПериодТаблицыРегистра,
		|	&ВыборкаИзмерений,
		|	МАКСИМУМ(ТаблицаРегистра.Регистратор) КАК РегистраторТаблицыРегистра
		|
		|ПОМЕСТИТЬ ВТ_ИмяРегистра_Регистратор
		|
		|ИЗ
		|	ВТ_ИмяРегистра_Период КАК ОсновнаяТаблица
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Период = ОсновнаяТаблица.Период
		|			И ТаблицаРегистра.Регистратор <> ОсновнаяТаблица.Ссылка
		|			И &УсловиеСоединенияТаблицРегистра
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновнаяТаблица.Ссылка,
		|	ТаблицаРегистра.Период,
		|	&ГруппировкаИзмерений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РегистраторТаблицыРегистра,
		|	ПериодТаблицыРегистра,
		|	&ИндексИзмерений
		|";
		ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра);
		ТекстыЗапроса.Добавить(ТекстЗапроса, "", Ложь);
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОсновнаяТаблица.Ссылка КАК Ссылка,
		|	ТаблицаРегистра.Период КАК Период,
		|	&ВыборкаПолей
		|
		|ПОМЕСТИТЬ ВТ_СрезПоследнихРегистра
		|
		|ИЗ
		|	ВТ_ИмяРегистра_Регистратор КАК ОсновнаяТаблица
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
		|		ПО ТаблицаРегистра.Период = ОсновнаяТаблица.ПериодТаблицыРегистра
		|			И ТаблицаРегистра.Регистратор = ОсновнаяТаблица.РегистраторТаблицыРегистра
		|			И &УсловиеСоединенияТаблицРегистра
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	&ИндексИзмерений
		|";
		ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра);
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицыСрезПоследних, Ложь);
		
		ТекстЗапроса =
		"УНИЧТОЖИТЬ ВТ_ИмяРегистра_Регистратор";
	
		ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра);
		ТекстыЗапроса.Добавить(ТекстЗапроса, "", Ложь);
		
	КонецЕсли;
	
	ТекстЗапроса =
	"УНИЧТОЖИТЬ ВТ_ИмяРегистра_Период";

	ТекстЗапроса = ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "", Ложь);
	
КонецПроцедуры

// Формирует текст запроса, который получает записи регистра с учетом исправлений.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя регистра сведений.
// 	ИмяВременнойТаблицы - Строка - Имя временной таблицы.
// 	ИмяПоляПериод - Строка - Имя поля "Период".
// 	ДополнительныеПоля - Структура - Позволяет добавить в таблицу доп. поля (Ключ: имя поля, Значение: Выражение поля).
// 	
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаЗаписиРегистраСУчетомИсправлений(ИмяРегистра, ИмяВременнойТаблицы = "", ИмяПоляПериод = "", ДополнительныеПоля = Неопределено) Экспорт
	
	Если ДополнительныеПоля = Неопределено Тогда
		ДополнительныеПоля = Новый Структура;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	&ТекстПолей
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра
	|
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистра
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистраИсправления
	|		ПО НАЧАЛОПЕРИОДА(ДанныеРегистраИсправления.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ)
	|			И &ОрганизацияСОЕДИНЕНИЕ
	|			И ДанныеРегистраИсправления.ОсновноеСредство = ДанныеРегистра.ОсновноеСредство
	|			И ДанныеРегистраИсправления.Регистратор <> ДанныеРегистра.Регистратор
	|			И (ДанныеРегистраИсправления.ДатаИсправления <= &ДатаДокумента
	|				ИЛИ &ДатаДокумента = ДАТАВРЕМЯ(1,1,1))
	|			И ДанныеРегистраИсправления.ДатаИсправления <> ДАТАВРЕМЯ(1,1,1)
	|			И ДанныеРегистраИсправления.Активность
	|ГДЕ
	|	(ДанныеРегистра.Период >= &НачалоПериода
	|		ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1,1,1))
	|
	|	И (ДанныеРегистра.Период <= &КонецПериода
	|		ИЛИ &КонецПериода = ДАТАВРЕМЯ(1,1,1))
	|
	|	И (ДанныеРегистра.ДатаИсправления <= &ДатаДокумента
	|		ИЛИ &ДатаДокумента = ДАТАВРЕМЯ(1,1,1))
	|		
	|	И &ОрганизацияГДЕ
	|
	|	И (ДанныеРегистра.ОсновноеСредство В (&СписокОС)
	|		ИЛИ &БезОтбораОС)
	|
	|	И ДанныеРегистра.Активность
	|
	|	И ДанныеРегистраИсправления.Регистратор ЕСТЬ NULL";
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];

	ЕстьОрганизация = Ложь;

	СписокПолей = Новый Массив;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеИзмерения.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПолей.Добавить("	ДанныеРегистра." + МетаданныеИзмерения.Имя + " КАК " + МетаданныеИзмерения.Имя);
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
		КонецЕсли;
		 
	КонецЦикла; 
	
	Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеРесурса.Имя) Тогда
			Продолжить;
		КонецЕсли;

		ПутьКПолю = "	ДанныеРегистра." + МетаданныеРесурса.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеРесурса.Имя);
		
	КонецЦикла; 
	
	Для каждого МетаданныеРеквизита Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;

		ПутьКПолю = "	ДанныеРегистра." + МетаданныеРеквизита.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеРеквизита.Имя);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДополнительныеПоля Цикл
		СписокПолей.Добавить(КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ);
	КонецЦикла;
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	Если ЕстьОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияСОЕДИНЕНИЕ", "ДанныеРегистраИсправления.Организация = ДанныеРегистра.Организация");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияГДЕ", "ДанныеРегистра.Организация = &Организация");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияСОЕДИНЕНИЕ", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияГДЕ", "ИСТИНА");
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ?(ИмяВременнойТаблицы <> "", ИмяВременнойТаблицы, ИмяРегистра + "_ЗаписиСУчетомИсправлений"));
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство" + ?(ЕстьОрганизация, ",Организация", "");
	
	Если ЗначениеЗаполнено(ИмяПоляПериод) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра.Период", "ДанныеРегистра." + ИмяПоляПериод);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистраИсправления.Период", "ДанныеРегистраИсправления." + ИмяПоляПериод);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса, который получает срез последних регистра с учетом исправлений.
// 
// Параметры:
// 	ИмяРегистра - Строка - Имя регистра сведений.
// 	ИмяВременнойТаблицы - Строка - Имя временной таблицы.
// 	ДополнительныеПоля - Структура - Позволяет добавить в таблицу доп. поля (Ключ: имя поля, Значение: Выражение поля).
// 	УсловияЗапроса - Строка - Условия запроса.
// 	
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаСрезПоследнихРегистраСУчетомИсправлений(ИмяРегистра, ИмяВременнойТаблицы = "", ДополнительныеПоля = Неопределено, УсловияЗапроса = "") Экспорт

	Если ДополнительныеПоля = Неопределено Тогда
		ДополнительныеПоля = Новый Структура;
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Период) КАК Период,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_СрезПериод
	| 
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистра
	|
	|ГДЕ
	|	ДанныеРегистра.Период <= &Дата
	|	И ДанныеРегистра.ДатаИсправления <= &ДатаДокумента
	|	И ДанныеРегистра.Организация = &Организация
	|	И (ДанныеРегистра.ОсновноеСредство В (&СписокОС)
	|			ИЛИ &БезОтбораОС)
	|
	|	И ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО Период, ОсновноеСредство, Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(НАЧАЛОПЕРИОДА(ДанныеРегистраИсправление.ДатаИсправления, ДЕНЬ), ДАТАВРЕМЯ(1,1,1))) КАК ДатаИсправления,
	|	ДанныеРегистра_СрезПериод.Период КАК Период,
	|	ДанныеРегистра_СрезПериод.Организация КАК Организация,
	|	ДанныеРегистра_СрезПериод.ОсновноеСредство КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_СрезПериодИсправления
	|
	|ИЗ
	|	ВТ_ИмяРегистра_СрезПериод КАК ДанныеРегистра_СрезПериод
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистраИсправление
	|		ПО НАЧАЛОПЕРИОДА(ДанныеРегистраИсправление.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра_СрезПериод.Период, ДЕНЬ)
	|			И ДанныеРегистраИсправление.Организация = ДанныеРегистра_СрезПериод.Организация
	|			И ДанныеРегистраИсправление.ОсновноеСредство = ДанныеРегистра_СрезПериод.ОсновноеСредство
	|			И ДанныеРегистраИсправление.ДатаИсправления <= &ДатаДокумента
	|			И ДанныеРегистраИсправление.ДатаИсправления <> ДАТАВРЕМЯ(1,1,1)
	|			И ДанныеРегистраИсправление.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра_СрезПериод.Период,
	|	ДанныеРегистра_СрезПериод.Организация,
	|	ДанныеРегистра_СрезПериод.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО Период, ОсновноеСредство, Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИмяРегистра_СрезПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеРегистра.Регистратор) КАК Регистратор,
	|	ДанныеРегистра_СрезПериодИсправления.Период КАК Период,
	|	ДанныеРегистра_СрезПериодИсправления.Организация КАК Организация,
	|	ДанныеРегистра_СрезПериодИсправления.ОсновноеСредство КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_СрезРегистратор
	|
	|ИЗ
	|	ВТ_ИмяРегистра_СрезПериодИсправления КАК ДанныеРегистра_СрезПериодИсправления
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистра
	|		ПО ДанныеРегистра.Организация = ДанныеРегистра_СрезПериодИсправления.Организация
	|			И ДанныеРегистра.ОсновноеСредство = ДанныеРегистра_СрезПериодИсправления.ОсновноеСредство
	|			И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра_СрезПериодИсправления.Период, ДЕНЬ)
	|			И ДанныеРегистра.ДатаИсправления = ДанныеРегистра_СрезПериодИсправления.ДатаИсправления
	|			И ДанныеРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра_СрезПериодИсправления.Период,
	|	ДанныеРегистра_СрезПериодИсправления.Организация,
	|	ДанныеРегистра_СрезПериодИсправления.ОсновноеСредство
	|
	|
	|ИНДЕКСИРОВАТЬ ПО Регистратор, Период, ОсновноеСредство, Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИмяРегистра_СрезПериодИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	&ТекстПолей
	|
	|ПОМЕСТИТЬ ВТ_ИмяРегистра
	|
	|ИЗ
	|	ВТ_ИмяРегистра_СрезРегистратор КАК ДанныеРегистра_СрезРегистратор
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС КАК ДанныеРегистра
	|	ПО ДанныеРегистра.Регистратор = ДанныеРегистра_СрезРегистратор.Регистратор
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра_СрезРегистратор.Период, ДЕНЬ)
	|		И ДанныеРегистра.Организация = ДанныеРегистра_СрезРегистратор.Организация
	|		И ДанныеРегистра.ОсновноеСредство = ДанныеРегистра_СрезРегистратор.ОсновноеСредство
	|		И ДанныеРегистра.Активность
	|
	|ГДЕ
	|	&ДанныеРегистра_УсловияТаблицы
	|
	|ИНДЕКСИРОВАТЬ ПО ОсновноеСредство, Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИмяРегистра_СрезРегистратор
	|";
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];

	ЕстьОрганизация = Ложь;

	СписокПолей = Новый Массив;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеИзмерения.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПолей.Добавить("	ДанныеРегистра." + МетаданныеИзмерения.Имя + " КАК " + МетаданныеИзмерения.Имя);
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
		КонецЕсли;
		 
	КонецЦикла; 
	
	Для каждого МетаданныеРесурса Из МетаданныеРегистра.Ресурсы Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеРесурса.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПолю = "	ДанныеРегистра." + МетаданныеРесурса.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеРесурса.Имя);
		
	КонецЦикла; 
	
	Для каждого МетаданныеРеквизита Из МетаданныеРегистра.Реквизиты Цикл
		
		Если ДополнительныеПоля.Свойство(МетаданныеРеквизита.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКПолю = "	ДанныеРегистра." + МетаданныеРеквизита.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеРеквизита.Имя);
		
	КонецЦикла;
	 
	Для Каждого КлючИЗначение Из ДополнительныеПоля Цикл
		СписокПолей.Добавить(КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ);
	КонецЦикла;

	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	Если НЕ ЕстьОрганизация Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистраДоИсправления.Организация = ДанныеРегистра_СрезПериод.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистраИсправление.Организация = ДанныеРегистра_СрезПериод.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра.Организация = &Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра.Организация = ДанныеРегистра_СрезПериодИсправления.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра.Организация = ДанныеРегистра_СрезРегистратор.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра.Организация", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеРегистра_СрезПериод.Организация", "НЕОПРЕДЕЛЕНО");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"ИНДЕКСИРОВАТЬ ПО Период, ОсновноеСредство, Организация", 
			"ИНДЕКСИРОВАТЬ ПО Период, ОсновноеСредство");
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"ИНДЕКСИРОВАТЬ ПО Регистратор, Период, ОсновноеСредство, Организация", 
			"ИНДЕКСИРОВАТЬ ПО Регистратор, Период, ОсновноеСредство");
			
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, 
			"ИНДЕКСИРОВАТЬ ПО ОсновноеСредство, Организация", 
			"ИНДЕКСИРОВАТЬ ПО ОсновноеСредство");
			
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ?(ИмяВременнойТаблицы <> "", ИмяВременнойТаблицы, ИмяРегистра + "_СрезПоследнихСУчетомИсправлений"));
	
	Если НЕ ПустаяСтрока(УсловияЗапроса) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеРегистра_УсловияТаблицы", УсловияЗапроса);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДанныеРегистра_УсловияТаблицы", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ИзменениеУсловийДоговораАренды.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаСтоимостиИАмортизацииНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаСтоимостиИАмортизацииОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПринятиеКУчетуНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПринятиеКУчетуОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачислениеПроцентовПоАренде.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	РегистрыСведений.АрендованныеОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДокументыПоОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПараметрыАмортизацииНМАБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПараметрыАмортизацииНМАУУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПервоначальныеСведенияНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокУчетаНМАБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Прочее

Функция СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей = Неопределено, СписокПолейТаблиц = Неопределено) Экспорт

	ТекстДопПолей = "";
	Если СписокДопПолей <> Неопределено Тогда
		Если ТипЗнч(СписокДопПолей) = Тип("Строка") Тогда
			// Чтобы соблюдался одинаковый порядок полей.
			Для каждого ИмяПоля Из СтрРазделить(СписокДопПолей, ",") Цикл
				ТекстДопПолей = ТекстДопПолей + "
				|	, ИзмененныеДанные." + ИмяПоля + " КАК " + ИмяПоля;
			КонецЦикла;
		Иначе
			Для каждого КлючИЗначение Из СписокДопПолей Цикл
				ТекстДопПолей = ТекстДопПолей + "
				|	, ИзмененныеДанные." + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), КлючИЗначение.Значение, КлючИЗначение.Ключ) + " КАК " + КлючИЗначение.Ключ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	Если СписокПолейТаблиц = Неопределено Тогда
		СписокПолейТаблиц = Новый Структура;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ИмяТаблицы Из СписокТаблиц Цикл
		
		ИмяВременнойТаблицы = ИмяТаблицы + "Изменение";
		
		Если ТипЗнч(ДанныеТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
			ЕстьЗаписи = ДанныеТаблиц.Таблицы.Найти(ИмяВременнойТаблицы) <> Неопределено;
		Иначе
			ЕстьЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТаблиц, ИмяВременнойТаблицы, Ложь);
		КонецЕсли;
		
		Если НЕ ЕстьЗаписи Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПолейТаблицы = "";
		Для каждого КлючИЗначение Из СписокПолейТаблиц Цикл
			Если КлючИЗначение.Значение.Найти(ИмяТаблицы) <> Неопределено Тогда
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, ИзмененныеДанные." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
			Иначе
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, НЕОПРЕДЕЛЕНО КАК " + КлючИЗначение.Ключ;
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Период КАК Период,
		|	ИзмененныеДанные.Организация КАК Организация,
		|	ИзмененныеДанные.Документ КАК Документ,
		|	&ИмяТаблицы КАК ИмяТаблицы
		|	,&ТекстДопПолей
		|	,&ТекстПолейТаблицы
		|ИЗ
		|	&ИмяВременнойТаблицы КАК ИзмененныеДанные";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", """" + ВРег(ИмяТаблицы) + """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстДопПолей", ТекстДопПолей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстПолейТаблицы", ТекстПолейТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		МассивСтрок.Добавить(ТекстЗапроса);
		
	КонецЦикла; 
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ТекстОбъединенияДанных = СтрСоединить(МассивСтрок, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Возврат ТекстОбъединенияДанных;
	КонецЕсли; 
	
	Возврат "";

КонецФункции

Функция ПровестиДокументыВФоне(СписокДокументов) Экспорт

	Для каждого ДокументСсылка Из СписокДокументов Цикл
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли; 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 

	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ЕстьОшибки", Ложь);
	РезультатРасчета.Вставить("ТекстОшибки", "");

	Возврат РезультатРасчета;
	
КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта(Форма, Организация, Дата, Периодичность = "МЕСЯЦ") Экспорт
	
	ГоловнаяОрганизация = НастройкиНалоговУчетныхПолитикПовтИсп.ГоловнаяОрганизация(Организация);
	
	ПараметрыФО = Новый Структура("Организация, Период",
		ГоловнаяОрганизация, ?(ВРег(Периодичность) = "МЕСЯЦ", НачалоМесяца(Дата), НачалоДня(Дата)));

	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

Функция УсловияПереходаНаУчет2_4() Экспорт

	КомментарийУчет2_4 = "";
	УсловияВключенияУчет2_4 = "";
	КомментарийМинДатаНачалаУчета2_4 = "";
	КомментарийМаксДатаНачалаУчета2_4 = "";
	
	МинимальнаяДатаНачалаУчета2_4 = '000101010000';
	МаксимальнаяДатаНачалаУчета2_4 = '000101010000';
	
	РежимПартионногоУчета = Истина;
	ВестиУправленческийУчетОрганизаций = Истина;
	ИспользоватьУчетПрочихДоходовРасходовРегл = Истина;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		РежимПартионногоУчета = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- установить опции ""Партионный учет"" значение ""Версия 2.2""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")';
                    |en = '- set the ""Version 2.2"" value to the ""Lot accounting"" option
                    |(in ""Master data and settings"" - ""Profitability & cost"")'");
	Иначе
		ДатаОпции = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала применения партионного учета версии 2.2: %1';
									|en = 'Accounting should not start earlier than lot accounting 2.2. start date: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;

	Если НЕ Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Получить() Тогда
		ИспользоватьУчетПрочихДоходовРасходовРегл = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Прочие доходы и расходы в валюте регл. учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")';
                    |en = '- enable the ""Income and expenses in local accounting currency"" option
                    |(in ""Master data and settings"" - ""Profitability & cost"")'");
	КонецЕсли;

	Если НЕ РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
		ВестиУправленческийУчетОрганизаций = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Управленческий учет по правилам международного финансового учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"" - ""Доп. настройки учета себестоимости"")';
                    |en = '- enable the ""Management accounting according to financial accounting rules"" option
                    | (in ""Master data and settings"" - ""Profitability & cost"" - ""Add. settings of cost accounting"")'");
	Иначе
		ДатаОпции = РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала ведения управленческого учета по правилам международного финансового учета: %1';
									|en = 'Accounting start date cannot be earlier than the start date of management accounting according to the financial accounting rules: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;
	
	ВнеоборотныеАктивыЛокализация.УсловияПереходаНаУчет2_4(
		МинимальнаяДатаНачалаУчета2_4, 
		КомментарийМинДатаНачалаУчета2_4,
		МаксимальнаяДатаНачалаУчета2_4, 
		КомментарийМаксДатаНачалаУчета2_4);
	
	Если ЗначениеЗаполнено(УсловияВключенияУчет2_4) Тогда
		КомментарийУчет2_4 = НСтр("ru = 'Для включения возможности учета версии 2.4 необходимо:';
									|en = 'To enable accounting 2.4:'") + УсловияВключенияУчет2_4;
	КонецЕсли; 
	
	ДоступностьУчета2_4 = Новый Структура;
	ДоступностьУчета2_4.Вставить("РежимПартионногоУчета", РежимПартионногоУчета);
	ДоступностьУчета2_4.Вставить("ВестиУправленческийУчетОрганизаций", ВестиУправленческийУчетОрганизаций);
	ДоступностьУчета2_4.Вставить("ИспользоватьУчетПрочихДоходовРасходовРегл", ИспользоватьУчетПрочихДоходовРасходовРегл);
	
	ДоступностьУчета2_4.Вставить("КомментарийУчет2_4", КомментарийУчет2_4);
	ДоступностьУчета2_4.Вставить("УсловияВключенияУчет2_4", УсловияВключенияУчет2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМинДатаНачалаУчета2_4", КомментарийМинДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМаксДатаНачалаУчета2_4", КомментарийМаксДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МинимальнаяДатаНачалаУчета2_4", МинимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МаксимальнаяДатаНачалаУчета2_4", МаксимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("ДоступенУчет", НЕ ЗначениеЗаполнено(КомментарийУчет2_4));
	
	ВнеоборотныеАктивыЛокализация.ДополнитьУсловияПереходаНаУчет2_4(ДоступностьУчета2_4);
	
	Возврат ДоступностьУчета2_4;
	
КонецФункции

Процедура ОбработатьПараметрыФормыПереданныеИзЗакрытияМесяца(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("МассивОрганизаций") Тогда
		
		СписокОрганизаций = Новый СписокЗначений();
		СписокОрганизаций.ЗагрузитьЗначения(Параметры.МассивОрганизаций); 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Организация", 
			СписокОрганизаций,,,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	КонецЕсли;
	 
	Если Параметры.Свойство("Период") Тогда
		ПериодСписка = Элементы.Список.Период; // СтандартныйПериод - 
		ПериодСписка.ДатаНачала = НачалоМесяца(Параметры.Период); 
		ПериодСписка.ДатаОкончания= КонецМесяца(Параметры.Период); 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает список документов подсистемы ВНА.
// 
// Возвращаемое значение:
// 	Массив из Строка - Список документов подсистемы ВНА.
//
Функция СписокДокументовВНА() Экспорт
	
	СписокДокументовВНА = Новый Массив;
	УчетАрендованныхОС.СписокДокументовПодсистемы(СписокДокументовВНА);
	
	СписокДокументовВНА.Добавить(Метаданные.Документы.АмортизацияНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.АмортизацияОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ВыбытиеАрендованныхОС.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ВыработкаНМА.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.МодернизацияОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ОбесценениеВНА.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ОбъединениеОС.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПередачаОСВАренду2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПеремещениеНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПеремещениеОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПереоценкаНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПереоценкаОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПризнаниеРасходовПоИсследованиямИРазработкам.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.РазукомплектацияОС.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.СписаниеНМА2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.СписаниеОС2_4.Имя);
	СписокДокументовВНА.Добавить(Метаданные.Документы.УлучшениеНМА.Имя);
	
	Возврат СписокДокументовВНА;
	
КонецФункции

// Устанавливает параметры выбора статьи по порядку учета.
// 
// Параметры:
//  ПараметрыВыбора - ФиксированныйМассив из ПараметрВыбора - Параметры выбора
//  ЗначенияПараметровВыбора - Структура - Значения параметров выбора
Процедура УстановитьПараметрыВыбораСтатьиПоПорядкуУчета(ПараметрыВыбора, ЗначенияПараметровВыбора) Экспорт
	
	НовыеПараметрыВыбора = Новый Массив;
	Для Каждого Элемент Из ПараметрыВыбора Цикл
		Если ВРег(Элемент.Имя) <> ВРег("Отбор.ВариантРаспределенияРасходовУпр")
			И ВРег(Элемент.Имя) <> ВРег("Отбор.ВариантРаспределенияРасходовРегл")
			И ВРег(Элемент.Имя) <> ВРег("Отбор.ВариантРаспределенияРасходовНУ") Тогда
			НовыеПараметрыВыбора.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ПорядокУчетаБУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПараметровВыбора, "ПорядокУчетаБУ", Неопределено);
	ПорядокУчетаУУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПараметровВыбора, "ПорядокУчетаУУ", Неопределено);
	ПорядокУчетаНУ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияПараметровВыбора, "ПорядокУчетаНУ", Неопределено);
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаУУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Элемент = Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходовУпр", ВариантыРаспределения);
		НовыеПараметрыВыбора.Добавить(Элемент);
	КонецЕсли; 
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаБУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Элемент = Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходовРегл", ВариантыРаспределения);
		НовыеПараметрыВыбора.Добавить(Элемент);
	КонецЕсли; 
	
	ВариантыРаспределения = ВнеоборотныеАктивыКлиентСервер.ДоступныеВариантыРаспределенияРасходов(ПорядокУчетаНУ);
	Если ВариантыРаспределения.Количество() <> 0 Тогда
		Элемент = Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходовНУ", ВариантыРаспределения);
		НовыеПараметрыВыбора.Добавить(Элемент);
	КонецЕсли; 
	
	ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетДвиженийПоКомпонентамАмортизации

Процедура СформироватьДвиженияПоКомпонентамАмортизации(ДанныеКРасчетуЗаМесяц)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ВнеоборотныеАктивы.СформироватьДвиженияПоКомпонентамАмортизации");
	
	МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);

	Регистры = Новый Структура;
	Регистры.Вставить("МестонахождениеОС");
	Регистры.Вставить("ПорядокУчетаОС");
	Регистры.Вставить("ПорядокУчетаОСУУ");
	Регистры.Вставить("ПорядокУчетаОСБУ");
	Регистры.Вставить("СоставЕГДС");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Документ КАК Ссылка,
	|	КэшГраниц.Организация КАК Организация,
	|	РеестрДокументов.ДатаДокументаИБ КАК Дата
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО РеестрДокументов.Ссылка = КэшГраниц.Документ
	|			И НЕ РеестрДокументов.ДополнительнаяЗапись
	|   		И РеестрДокументов.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбработанныхДанных = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
		ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Выборка.Ссылка, Регистры); // Структура
		
		ДокументОбъект = ПроведениеДокументов.ЭмуляцияДокумента(Выборка.Ссылка, Выборка.Дата);
		ОтложенноеФормированиеДвиженийВНА.УстановитьПризнакВыполненияОперации(ДокументОбъект);
		
		ВнеоборотныеАктивыСлужебный.ЗаписатьТаблицыДвижений(ТаблицыДляДвижений, ДокументОбъект, МенеджерВременныхТаблиц, Ложь);
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

		КоличествоОбработанныхДанных = КоличествоОбработанныхДанных + 1;

	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных);
		
КонецПроцедуры

Функция ПрименяетсяУчетУзловКомпонентовАмортизации(ПараметрыОбработчика)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
	|		ПО МестонахождениеОС.ОсновноеСредство = УзлыКомпонентыАмортизации.ОсновноеСредство
	|			И МестонахождениеОС.Активность
	|
	|ГДЕ
	|	МестонахождениеОС.Организация В (&Организация)
	|	И УзлыКомпонентыАмортизации.Период <= &КонецПериода
	|	И УзлыКомпонентыАмортизации.Активность
	|";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ДобавитьПрофильБухгалтерВнеоборотныхАктивов(ОписанияПрофилей)
	
	// Профиль "Бухгалтер по внеоборотным активам".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "БухгалтерПоВнеоборотнымАктивам";
	ОписаниеПрофиля.Идентификатор = "ddb10492-ea5e-11e3-b754-c86000df10d3";
	ОписаниеПрофиля.Родитель      = "Финансы";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Бухгалтер по внеоборотным активам';
										|en = 'Fixed asset accountant'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомКА.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля);
	УчетАрендованныхОС.ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля);
	
	// Справочники, добавление.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТемЭтаповИсследованийИРазработок");
	
	// Прочие справочники, чтение.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоговоровКонтрагентов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЛогистическихПараметров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоПартнерам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНазначений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСоглашенийСКлиентами");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСоглашенийСПоставщиками");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКатегорийЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПриоритетов");
	//++ НЕ УТКА
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассовОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУзловОбъектовЭксплуатации");
	//-- НЕ УТКА
	
	// Документы, добавление.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВнутреннихПотребленийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПриобретенийУслугПрочихАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрочихОприходованийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРеализацийУслугПрочихАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаявленийОВвозеТоваров");
	
	// Прочие документы, чтение.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаказовНаВнутреннееПотребление");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам");
	
	// Отчеты и обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовВнутреннегоТовародвижения");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиПечатьЭтикетокТМЦВЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ПросмотрЭтаповОплатыПоставщику");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЗапросКоличестваИСерий");
	
	// Чтение регистров.
	
	// Чтение прочих регистров.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковДоступныхТоваров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковЗаказовНаВнутреннееПотребление");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровКОтгрузке");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровНаСкладах");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрочихАктивовПассивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрочихДоходовРасходов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСостоянийДоставки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЦенНоменклатуры");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеТМЦВЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРегистровНДС");
	
//++ НЕ УТКА
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГрафикаПроизводства");
//-- НЕ УТКА

	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации", "ВначалеВсеРазрешены");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьПрофильБухгалтерПоВнеоборотнымАктивам(ОписаниеПрофиля);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = 
		НСтр("ru = 'Дополнительный профиль, назначаемый пользователям для выполнения задач учета внеоборотных активов:
		|1. Сопровождения нормативно-справочной информации
		|2. Ведения документов движений внеоборотных активов
		|3. Получение отчетов по данным бухгалтерского и налогового учета.';
		|en = 'Additional profile assigned to users to execute tasks of fixed assets accounting:
		|1. Support master data
		|2. Keep a record of documents of fixed asset movements
		|3. Receive reports on accounting and tax accounting data.'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильОтветственныйЗаВедениеОбъектовЭксплуатации(ОписанияПрофилей)
	
	// Профиль "Ответственный за ведение объектов эксплуатации (дополнительный)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "ОтветственныйЗаВедениеОбъектовЭксплуатации";
	ОписаниеПрофиля.Идентификатор = "4871ded3-fdd7-4616-a7fd-c373544d7af5";
	ОписаниеПрофиля.Родитель = "АдминистрированиеИНСИ";
	ОписаниеПрофиля.Наименование = НСтр("ru = 'Ответственный за ведение объектов эксплуатации (дополнительный)';
										|en = 'Employee responsible for assets (additional)'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Прикладные права.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновЭтикетокИЦенников");
	
	//++ НЕ УТКА
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУзловОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКлассовОбъектовЭксплуатации");
	//-- НЕ УТКА

	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");

	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Дополнительный профиль, назначается пользователям, ведущим справочник ""Объекты эксплуатации"".';
									|en = 'Additional profile is assigned to users keeping the ""Assets"" catalog.'");
	                                      
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОперацийЗакрытияМесяца

// Очередь заданий к расчету.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - содержит поля:
//  	* ИдентификаторЗадания - УникальныйИдентификатор -
//  	* АдресРезультата - Строка
//  	* НаименованиеФоновогоЗадания - Строка
//  	* Статус - Строка
//  	* ПроцедураРасчета - Строка
//  	* ОжидатьЗавершение - Число
//  	* ПараметрыЗадания - Структура
//
Функция ОчередьЗаданийКРасчету() Экспорт
	
	ОчередьЗаданийКРасчету = Новый ТаблицаЗначений;
	ОчередьЗаданийКРасчету.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("АдресРезультата", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("НаименованиеФоновогоЗадания", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПроцедураРасчета", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ОжидатьЗавершение", Новый ОписаниеТипов("Число"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПараметрыЗадания");
	
	Возврат ОчередьЗаданийКРасчету;
	
КонецФункции

// Выполняет очередь заданий.
// 
// Параметры:
//  ОчередьЗаданийКРасчету - см. ОчередьЗаданийКРасчету
//  МаксимумЗаданий - Число - Максимум заданий
//  ИдентификаторРасчета - УникальныйИдентификатор - идентификатор расчета
//  ЗапуститьВФоне - Булево - Запустить в фоне
// 
// Возвращаемое значение:
//  Структура -  Выполнить очередь заданий:
// 		* ЕстьОшибки - Булево - 
// 		* ТекстОшибки - Строка - 
// 		* КоличествоДанных - Число - 
Функция ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету, МаксимумЗаданий, ИдентификаторРасчета, ЗапуститьВФоне = Истина) Экспорт

	ВыполняетсяЗаданий = 0;
	
	ЕстьЗадания = Истина;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);
	РезультатВыполнения.Вставить("ТекстОшибки", "");
	РезультатВыполнения.Вставить("КоличествоДанных", 0);
	
	Пока ЕстьЗадания Цикл
		
		ЕстьЗадания = Ложь;
		
		Для каждого ОписаниеЗадания Из ОчередьЗаданийКРасчету Цикл
			
			Если ОписаниеЗадания.Статус = "" И ВыполняетсяЗаданий < МаксимумЗаданий Тогда
				
				// Запуск задания
				ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияФункции(Новый УникальныйИдентификатор);
				ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = ОписаниеЗадания.НаименованиеФоновогоЗадания;
				ПараметрыВыполненияВФоне.ЗапуститьНеВФоне = НЕ ЗапуститьВФоне;
				
				РезультатВыполненияЗадания = ДлительныеОперации.ВыполнитьФункцию(
												ПараметрыВыполненияВФоне, 
												ОписаниеЗадания.ПроцедураРасчета,
												ОписаниеЗадания.ПараметрыЗадания);
				
				ЗакрытиеМесяцаСервер.ЗапущеноПодчиненноеФоновоеЗаданиеЭтапаРасчета(
					ИдентификаторРасчета, РезультатВыполненияЗадания.ИдентификаторЗадания);
				
				ОписаниеЗадания.ОжидатьЗавершение = ПараметрыВыполненияВФоне.ОжидатьЗавершение;
				ОписаниеЗадания.Статус = РезультатВыполненияЗадания.Статус;
				ОписаниеЗадания.ИдентификаторЗадания = РезультатВыполненияЗадания.ИдентификаторЗадания;
				ОписаниеЗадания.АдресРезультата = РезультатВыполненияЗадания.АдресРезультата;
				
				Если ОписаниеЗадания.Статус = "Выполняется" Тогда
					ВыполняетсяЗаданий = ВыполняетсяЗаданий + 1;
				ИначеЕсли ОписаниеЗадания.Статус = "Ошибка" Тогда
					РезультатВыполнения.ЕстьОшибки = Истина;
					РезультатВыполнения.ТекстОшибки = РезультатВыполненияЗадания.ПодробноеПредставлениеОшибки;
				КонецЕсли;
				
			ИначеЕсли ОписаниеЗадания.Статус = "Выполняется" Тогда
				
				// Проверка выполнения
				
				Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ОписаниеЗадания.ИдентификаторЗадания);
				Если Задание <> Неопределено 
					И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					
					Задание = Задание.ОжидатьЗавершенияВыполнения(ОписаниеЗадания.ОжидатьЗавершение);
					Если Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
						ОписаниеЗадания.Статус = "Выполнено";
						ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					КонецЕсли;
					
				ИначеЕсли Задание = Неопределено 
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					
					РезультатВыполнения.ЕстьОшибки = Истина;
					
					ОписаниеЗадания.Статус = "Ошибка";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					
					ОписаниеЗадания.Статус = "Выполнено";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если ОписаниеЗадания.Статус = "Выполнено" 
				И ЭтоАдресВременногоХранилища(ОписаниеЗадания.АдресРезультата) Тогда
				
				КоличествоДанных = ПолучитьИзВременногоХранилища(ОписаниеЗадания.АдресРезультата);
				Если КоличествоДанных <> Неопределено Тогда
					РезультатВыполнения.КоличествоДанных = РезультатВыполнения.КоличествоДанных + КоличествоДанных;
				КонецЕсли;
				
				ОписаниеЗадания.АдресРезультата = Неопределено;
				
			КонецЕсли;
			
			Если ОписаниеЗадания.Статус = "Выполняется" ИЛИ ОписаниеЗадания.Статус = "" Тогда
				ЕстьЗадания = Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Формирует таблицу ВтВсеДанныеКРасчету.
// 
// Параметры:
//  НачалоПериода - Дата - Начало периода
//  КонецПериода - Дата - Конец периода
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - Список организаций
//  ИдентификаторыДокументов - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификаторы документов
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
Процедура СформироватьТаблицуВтВсеДанныеКРасчету(НачалоПериода, КонецПериода, СписокОрганизаций, ИдентификаторыДокументов, МенеджерВременныхТаблиц) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВсеДокументы.Ссылка КАК Ссылка,
	|	ВсеДокументы.Дата КАК Дата,
	|	ВсеДокументы.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВсеДокументы.Организация КАК Справочник.Организации).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВсеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ВсеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ВсеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВсеДокументы.ОбъектУчета КАК ОбъектУчета,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.СписаниеОС2_4)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.СписаниеНМА2_4)
	|			ТОГДА 999999
	|		ИНАЧЕ ЧАС(ВсеДокументы.Дата)*10000 + МИНУТА(ВсеДокументы.Дата)*100 + СЕКУНДА(ВсеДокументы.Дата)
	|	КОНЕЦ КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтВсеДанныеКРасчету
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДокументы.ОсновноеСредство КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ТекущиеДокументы
	|
	|	ГДЕ
	|		ТекущиеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ТекущиеДокументы.ОсновноеСредство В (
	|				ВЫБРАТЬ
	|					СписокОбъектов.ОбъектУчета
	|				ИЗ
	|					СписокОбъектов КАК СписокОбъектов)
	|
	|		И (НЕ ТекущиеДокументы.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаОСВАренду))
	|			ИЛИ НЕ ТекущиеДокументы.ДополнительнаяЗапись)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДокументы.НематериальныйАктив КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоНМА КАК ТекущиеДокументы
	|
	|	ГДЕ
	|		ТекущиеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ТекущиеДокументы.НематериальныйАктив В (
	|				ВЫБРАТЬ
	|					СписокОбъектов.ОбъектУчета
	|				ИЗ
	|					СписокОбъектов КАК СписокОбъектов)
	|
	|		И (НЕ ТекущиеДокументы.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс))
	|			ИЛИ НЕ ТекущиеДокументы.ДополнительнаяЗапись)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Узлы по ОС-владельцу
	|	ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ОбъектУчета
	|
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ТекущиеДокументы
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|			ПО УзлыКомпонентыАмортизации.ОсновноеСредство = ТекущиеДокументы.ОсновноеСредство
	|
	|	ГДЕ
	|		ТекущиеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ТекущиеДокументы.ОсновноеСредство В (
	|				ВЫБРАТЬ
	|					СписокОбъектов.ОбъектУчета
	|				ИЗ
	|					СписокОбъектов КАК СписокОбъектов)
	|
	|		И (НЕ ТекущиеДокументы.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаОСВАренду))
	|			ИЛИ НЕ ТекущиеДокументы.ДополнительнаяЗапись)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// ОС-владельцы по узлу 
	|	ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ОбъектУчета
	|
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ТекущиеДокументы
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|			ПО УзлыКомпонентыАмортизации.УзелКомпонент = ТекущиеДокументы.ОсновноеСредство
	|				И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|	ГДЕ
	|		ТекущиеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ТекущиеДокументы.ОсновноеСредство В (
	|				ВЫБРАТЬ
	|					СписокОбъектов.ОбъектУчета
	|				ИЗ
	|					СписокОбъектов КАК СписокОбъектов)
	|
	|		И (НЕ ТекущиеДокументы.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаОСВАренду))
	|			ИЛИ НЕ ТекущиеДокументы.ДополнительнаяЗапись)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Объекты строительства
	|	ВЫБРАТЬ
	|		ТекущиеДокументы.Регистратор КАК Ссылка,
	|		ТекущиеДокументы.Период КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДокументы.АналитикаКапитализацииРасходов КАК ОбъектУчета
	|
	|	ИЗ
	|		РегистрНакопления.СтоимостьОС КАК ТекущиеДокументы
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО РеестрДокументов.Ссылка = ТекущиеДокументы.Регистратор
	|
	|	ГДЕ
	|		ТекущиеДокументы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|		И РеестрДокументов.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ТекущиеДокументы.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|		И ТекущиеДокументы.АналитикаКапитализацииРасходов <> НЕОПРЕДЕЛЕНО
	|		И ТекущиеДокументы.Активность
	|
	|		И ТекущиеДокументы.ОсновноеСредство В (
	|				ВЫБРАТЬ
	|					СписокОбъектов.ОбъектУчета
	|				ИЗ
	|					СписокОбъектов КАК СписокОбъектов)
	|
	|	) КАК ВсеДокументы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует таблицу порцию ВтПорцияДанныхКРасчету.
// 
// Параметры:
//  НачалоПериода - Дата - Начало периода
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  РазмерПорцииДанных - Число - 
//  ХозяйственныеОперации - Массив -
// 
// Возвращаемое значение:
//  Число - количество данных к расчету
Функция СформироватьТаблицуВтПорцияДанныхКРасчету(НачалоПериода, МенеджерВременныхТаблиц, РазмерПорцииДанных = 100, ХозяйственныеОперации = Неопределено) Экспорт
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтПорцияДанныхКРасчету");

	Если ХозяйственныеОперации = Неопределено Тогда
		ХозяйственныеОперации = Новый Массив;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ОбработанныеДанные") = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК ОбъектУчета,
		|	ЛОЖЬ КАК ЕстьОшибки
		|ПОМЕСТИТЬ ОбработанныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		ИспользуемыеВТ.Добавить("ОбработанныеДанные");
		
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтПорцияДанныхКРасчету") <> Неопределено Тогда
		ТекстЗапроса = 
		"УНИЧТОЖИТЬ ВтПорцияДанныхКРасчету";
		СписокЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтВсеДанныеКРасчету.Ссылка КАК Ссылка,
	|	ВтВсеДанныеКРасчету.Дата КАК Дата,
	|	ВтВсеДанныеКРасчету.Организация КАК Организация,
	|	ВтВсеДанныеКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВтВсеДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ВтВсеДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ВтВсеДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВтВсеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ВтВсеДанныеКРасчету.Приоритет КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтНеобработанныеДанныеКРасчету
	|
	|ИЗ
	|	ВтВсеДанныеКРасчету КАК ВтВсеДанныеКРасчету
	|
	|ГДЕ
	|	ВтВсеДанныеКРасчету.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (ВтВсеДанныеКРасчету.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|		ИЛИ НЕ &ОтборПоХозяйственнойОперации)
	|
	// Документ не обработан
	|	И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОбработанныеДанные КАК ОбработанныеДанные
	|			ГДЕ
	|				ОбработанныеДанные.Ссылка = ВтВсеДанныеКРасчету.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 50 РАЗЛИЧНЫЕ
	|	ТекущиеДанныеКРасчету.Ссылка КАК Ссылка,
	|	ТекущиеДанныеКРасчету.Дата КАК Дата,
	|	ТекущиеДанныеКРасчету.Организация КАК Организация,
	|	ТекущиеДанныеКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ТекущиеДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ТекущиеДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТекущиеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ТекущиеДанныеКРасчету.Приоритет КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтПорцияДанныхКРасчетуПредварительная
	|
	|ИЗ
	|	ВтНеобработанныеДанныеКРасчету КАК ТекущиеДанныеКРасчету
	|
	|ГДЕ
	// Нет более ранних документов по любому из объектов текущего документа
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ВтНеобработанныеДанныеКРасчету КАК ВсеОбъектыДокумента
	|
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНеобработанныеДанныеКРасчету КАК ПредыдущиеДанныеКРасчету
	|				ПО ПредыдущиеДанныеКРасчету.ОбъектУчета = ВсеОбъектыДокумента.ОбъектУчета
	|					И ПредыдущиеДанныеКРасчету.Ссылка <> ВсеОбъектыДокумента.Ссылка
	|
	|		ГДЕ
	|			ВсеОбъектыДокумента.Ссылка = ТекущиеДанныеКРасчету.Ссылка
	|
	|			И (ПредыдущиеДанныеКРасчету.Дата < ВсеОбъектыДокумента.Дата
	|				ИЛИ ПредыдущиеДанныеКРасчету.Дата = ВсеОбъектыДокумента.Дата
	|					И ПредыдущиеДанныеКРасчету.Приоритет < ВсеОбъектыДокумента.Приоритет
	|				ИЛИ ПредыдущиеДанныеКРасчету.Дата = ВсеОбъектыДокумента.Дата
	|					И ПредыдущиеДанныеКРасчету.Приоритет = ВсеОбъектыДокумента.Приоритет
	|					И ПредыдущиеДанныеКРасчету.Ссылка < ВсеОбъектыДокумента.Ссылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеДанныеКРасчету.Ссылка КАК Ссылка,
	|	ТекущиеДанныеКРасчету.Дата КАК Дата,
	|	ТекущиеДанныеКРасчету.Дата КАК Период,
	|	ТекущиеДанныеКРасчету.Организация КАК Организация,
	|	ТекущиеДанныеКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ТекущиеДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ТекущиеДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ТекущиеДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТекущиеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ТекущиеДанныеКРасчету.Приоритет КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтПорцияДанныхКРасчету
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДанныеКРасчету.Ссылка КАК Ссылка,
	|		ТекущиеДанныеКРасчету.Дата КАК Дата,
	|		ТекущиеДанныеКРасчету.Организация КАК Организация,
	|		ТекущиеДанныеКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ТекущиеДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ТекущиеДанныеКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчетуПредварительная КАК ТекущиеДанныеКРасчету
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТекущиеДанныеКРасчету.Ссылка КАК Ссылка,
	|		ТекущиеДанныеКРасчету.Дата КАК Дата,
	|		ТекущиеДанныеКРасчету.Организация КАК Организация,
	|		ТекущиеДанныеКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ТекущиеДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ТекущиеДанныеКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтНеобработанныеДанныеКРасчету КАК ТекущиеДанныеКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОС
	|			ПО ТаблицаОС.Ссылка = ТекущиеДанныеКРасчету.Ссылка
	|
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ТекущиеДанныеКРасчету.Ссылка) = ТИП(Документ.ПринятиеКУчетуУзловКомпонентовАмортизации)
	|
	|		И ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ВтПорцияДанныхКРасчетуПредварительная КАК Т
	|			ГДЕ
	|				ТИПЗНАЧЕНИЯ(Т.Ссылка) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|				И Т.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|				И Т.Дата >= НАЧАЛОПЕРИОДА(ТекущиеДанныеКРасчету.Дата, МЕСЯЦ)
	|				И Т.Дата <= КОНЕЦПЕРИОДА(ТекущиеДанныеКРасчету.Дата, МЕСЯЦ))
	|
	|	) КАК ТекущиеДанныеКРасчету
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	СтрокаПоиска = "ВЫБРАТЬ ПЕРВЫЕ 50 РАЗЛИЧНЫЕ"; // @query-part
	СтрокаЗамены = "ВЫБРАТЬ ПЕРВЫЕ %1 РАЗЛИЧНЫЕ"; // @query-part
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрокаПоиска, СтрШаблон(СтрокаЗамены, Формат(РазмерПорцииДанных, "ЧГ=0;")));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(НачалоПериода));
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборПоХозяйственнойОперации", ХозяйственныеОперации.Количество() <> 0);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	Возврат Выборка.Количество;
	
КонецФункции

// Формирует таблицу ВтДанныеКРасчету, которая используется для формирования движений.
// В таблицу добавляются объекты:
//  - указанные в одном документе;
//  - компоненты и ОС-владельцы.
// 
// Параметры:
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - должна быть таблица ВтПорцияДанныхКРасчету
Процедура СформироватьТаблицуВтДанныеКРасчету(МенеджерВременныхТаблиц) Экспорт
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтДанныеКРасчету");

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ДанныеКРасчету.Организация КАК Справочник.Организации).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ДанныеКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.Приоритет КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтДанныеКРасчету
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|		ВтПорцияДанныхКРасчету.Дата КАК Дата,
	|		ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|		ВтПорцияДанныхКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ВтПорцияДанныхКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ВтПорцияДанныхКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ВтПорцияДанныхКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Добавление всех ОС одного документа, т.к. задание может быть только на один из них
	|	ВЫБРАТЬ
	|		ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|		ВтПорцияДанныхКРасчету.Дата КАК Дата,
	|		ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|		ВтПорцияДанныхКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ВтПорцияДанныхКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ЗависимыеОбъекты.ОсновноеСредство КАК ОбъектУчета,
	|		ВтПорцияДанныхКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ЗависимыеОбъекты
	|			ПО ЗависимыеОбъекты.Ссылка = ВтПорцияДанныхКРасчету.Ссылка
	|				И ЗависимыеОбъекты.ОсновноеСредство <> ВтПорцияДанныхКРасчету.ОбъектУчета
	|				И НЕ ЗависимыеОбъекты.ДополнительнаяЗапись
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
		// Добавление всех НМА одного документа, т.к. задание может быть только на один из них
	|	ВЫБРАТЬ
	|		ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|		ВтПорцияДанныхКРасчету.Дата КАК Дата,
	|		ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|		ВтПорцияДанныхКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ВтПорцияДанныхКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ЗависимыеОбъекты.НематериальныйАктив КАК ОбъектУчета,
	|		ВтПорцияДанныхКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоНМА КАК ЗависимыеОбъекты
	|			ПО ЗависимыеОбъекты.Ссылка = ВтПорцияДанныхКРасчету.Ссылка
	|				И ЗависимыеОбъекты.НематериальныйАктив <> ВтПорцияДанныхКРасчету.ОбъектУчета
	|				И НЕ ЗависимыеОбъекты.ДополнительнаяЗапись
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
		// Добавление компонент, т.к. задание может быть только владельца
	|	ВЫБРАТЬ
	|		ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|		ВтПорцияДанныхКРасчету.Дата КАК Дата,
	|		ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|		ВтПорцияДанныхКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ВтПорцияДанныхКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ОбъектУчета,
	|		ВтПорцияДанныхКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|			ПО УзлыКомпонентыАмортизации.ОсновноеСредство = ВтПорцияДанныхКРасчету.ОбъектУчета
	|				И УзлыКомпонентыАмортизации.УзелКомпонент.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
	|				И УзлыКомпонентыАмортизации.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
		// Добавление владельцев, т.к. задание может быть только на узел
	|	ВЫБРАТЬ
	|		ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|		ВтПорцияДанныхКРасчету.Дата КАК Дата,
	|		ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|		ВтПорцияДанныхКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ВтПорцияДанныхКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ОбъектУчета,
	|		ВтПорцияДанныхКРасчету.Приоритет КАК Приоритет
	|	ИЗ
	|		ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|			ПО УзлыКомпонентыАмортизации.УзелКомпонент = ВтПорцияДанныхКРасчету.ОбъектУчета
	|				И УзлыКомпонентыАмортизации.УзелКомпонент.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
	|				И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|				И УзлыКомпонентыАмортизации.Активность
	|
	|	) КАК ДанныеКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
КонецПроцедуры

// Количество данных к расчету.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//  ИмяТаблицы - Строка - Имя таблицы
// 
// Возвращаемое значение:
//  Число - Количество данных к расчету
Функция КоличествоДанныхКРасчету(МенеджерВременныхТаблиц, ИмяТаблицы = "") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтДанныеКРасчету.Ссылка), 0) КАК КоличествоДокументов
	|ИЗ
	|	ВтДанныеКРасчету КАК ВтДанныеКРасчету";
	
	Если ИмяТаблицы <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтДанныеКРасчету", ИмяТаблицы);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДокументов = 0;
	Если Выборка.Следующий() Тогда
		КоличествоДокументов = Выборка.КоличествоДокументов;
	КонецЕсли;
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Формирует очередь объектов для многопоточного выполнения операции.
// В одну очередь попадают объекты:
//  - указанные в одном документе;
//  - компоненты и ОС-владельцы;
//  - ОС, принимаемые к учету в рамках одного объекта строительства.
// 
// Параметры:
//  НачалоПериода - Дата - Начало периода выборки документов
//  КонецПериода - Дата - Конец периода выборки документов
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - Список организаций
//  МаксимальныйНомерОчереди - Число - Максимальный номер очереди
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Очередь объектов:
//  	* Месяц - Дата -
//  	* ОбъектУчета - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы -
//  	* НомерОчереди - Число
//
Функция ОчередьОбъектов(НачалоПериода, КонецПериода, СписокОрганизаций, МаксимальныйНомерОчереди, МенеджерВременныхТаблиц) Экспорт
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеОбъекты.Ссылка КАК Ссылка,
	|	ТекущиеОбъекты.ОсновноеСредство КАК ОбъектУчета,
	|	ТекущиеОбъекты.НомерЗаписи КАК НомерЗаписи
	|
	|ПОМЕСТИТЬ ВтВсеОбъекты
	|
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ТекущиеОбъекты
	|
	|ГДЕ
	|	ТекущиеОбъекты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтСписокДокументов.Ссылка
	|			ИЗ
	|				ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеОбъекты.Ссылка КАК Ссылка,
	|	ТекущиеОбъекты.НематериальныйАктив КАК ОбъектУчета,
	|	ТекущиеОбъекты.НомерЗаписи КАК НомерЗаписи
	|
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ТекущиеОбъекты
	|
	|ГДЕ
	|	ТекущиеОбъекты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтСписокДокументов.Ссылка
	|			ИЗ
	|				ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерЗаписи,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗависимыеОбъекты.ОбъектУчета КАК ОбъектУчета,
	|	ЗависимыеОбъекты.ЗависимыйОбъект КАК ЗависимыйОбъект
	|
	|ПОМЕСТИТЬ ВтЗависимостьОбъектов
	|
	|ИЗ
		// Связь объектов в одном документе
	|	(ВЫБРАТЬ
	|		ТекущиеОбъекты.ОбъектУчета КАК ОбъектУчета,
	|		ЕСТЬNULL(ЗависимыеОбъекты.ОбъектУчета, НЕОПРЕДЕЛЕНО) КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		ВтВсеОбъекты КАК ТекущиеОбъекты
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВсеОбъекты КАК ЗависимыеОбъекты
	|			ПО ЗависимыеОбъекты.Ссылка = ТекущиеОбъекты.Ссылка
	|				И ЗависимыеОбъекты.ОбъектУчета <> ТекущиеОбъекты.ОбъектУчета
	|				И ЗависимыеОбъекты.НомерЗаписи <> 0
	|
	|	ГДЕ
	|		ТекущиеОбъекты.НомерЗаписи = 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь компонента с ОС-владельцем
	|	ВЫБРАТЬ
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ОбъектУчета,
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|
	|	ГДЕ
	|		УзлыКомпонентыАмортизации.УзелКомпонент В (
	|			ВЫБРАТЬ
	|				ЗаданияКРасчету.ОбъектУчета
	|			ИЗ
	|				ЗаданияКРасчету КАК ЗаданияКРасчету)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство В (
	|			ВЫБРАТЬ
	|				ЗаданияКРасчету.ОбъектУчета
	|			ИЗ
	|				ЗаданияКРасчету КАК ЗаданияКРасчету)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь ОС-владельца с компонентой 
	|	ВЫБРАТЬ
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ОбъектУчета,
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|
	|	ГДЕ
	|		УзлыКомпонентыАмортизации.УзелКомпонент В (
	|			ВЫБРАТЬ
	|				ЗаданияКРасчету.ОбъектУчета
	|			ИЗ
	|				ЗаданияКРасчету КАК ЗаданияКРасчету)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство В (
	|			ВЫБРАТЬ
	|				ЗаданияКРасчету.ОбъектУчета
	|			ИЗ
	|				ЗаданияКРасчету КАК ЗаданияКРасчету)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь ОС через объект строительства 
	|	ВЫБРАТЬ
	|		ТекущиеОбъекты.ОсновноеСредство КАК ОбъектУчета,
	|		ТекущиеОбъекты.АналитикаКапитализацииРасходов КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрНакопления.СтоимостьОС КАК ТекущиеОбъекты
	|
	|	ГДЕ
	|		ТекущиеОбъекты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ТекущиеОбъекты.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|		И ТекущиеОбъекты.АналитикаКапитализацииРасходов <> НЕОПРЕДЕЛЕНО
	|		И ТекущиеОбъекты.Активность
	|
	|		И ТекущиеОбъекты.Регистратор В (
	|			ВЫБРАТЬ
	|				ВтСписокДокументов.Ссылка
	|			ИЗ
	|				ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|	) КАК ЗависимыеОбъекты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ЕСТЬNULL(ВтЗависимостьОбъектов.ЗависимыйОбъект, НЕОПРЕДЕЛЕНО) КАК ЗависимыйОбъект
	|
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗависимостьОбъектов КАК ВтЗависимостьОбъектов
	|		ПО ВтЗависимостьОбъектов.ОбъектУчета = ЗаданияКРасчету.ОбъектУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияКРасчету.ОбъектУчета,
	|	ЕСТЬNULL(ВтЗависимостьОбъектов.ЗависимыйОбъект, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаданияКРасчету.Месяц) КАК Месяц,
	|	ЗаданияКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ЛОЖЬ Обработано
	|
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияКРасчету.ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаЗависимости = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	ТаблицаЗависимости.Индексы.Добавить("ОбъектУчета,ЗависимыйОбъект");

	ТаблицаОбъектов = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	ТаблицаОбъектов.Индексы.Добавить("Обработано");

	ТипыОбъектовУчета = Новый Массив;
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	
	ОчередьОбъектов = Новый ТаблицаЗначений();
	ОчередьОбъектов.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ОчередьОбъектов.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(ТипыОбъектовУчета));
	ОчередьОбъектов.Колонки.Добавить("НомерОчереди", ОбщегоНазначения.ОписаниеТипаЧисло(31,, ДопустимыйЗнак.Неотрицательный));
	
	// Алгоритм:
	// 1. Помечаем текущий объект как обработанный
	// 2. Добавляем текущий объект в список зависимых объектов
	// 3. Перебираем список зависимых объектов
	//   3.1. Получаем зависимый объект из списка
	//   3.2. Удаляем зависимый объект из списка
	//   3.3. Перебираем все не обработанные объекты:
	//   3.3.1. Если не обработанный объект связан с зависимым объектов, то
	//     3.3.1.1. Помечаем этот объект как обработанный
	//     3.3.1.2. Добавляем объект в очередь и в список зависимых объектом
	//   3.3.2. Иначе ничего не делаем

	ТекущийНомерОчереди = 1;
	Для Каждого ТекущийОбъект Из ТаблицаОбъектов Цикл
		
		Если ТекущийОбъект.Обработано Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийОбъект.Обработано = Истина;

		НовыйОбъектОчереди = ОчередьОбъектов.Добавить();
		НовыйОбъектОчереди.Месяц = ТекущийОбъект.Месяц;
		НовыйОбъектОчереди.ОбъектУчета = ТекущийОбъект.ОбъектУчета;
		НовыйОбъектОчереди.НомерОчереди = ТекущийНомерОчереди;
		
		ЗависимыеОбъекты = Новый Массив;
		ЗависимыеОбъекты.Добавить(ТекущийОбъект.ОбъектУчета);
		
		// 3. Перебираем список зависимых объектов
		Пока ЗависимыеОбъекты.Количество() <> 0 Цикл
			
			ЗависимыйОбъект = ЗависимыеОбъекты[0];
			ЗависимыеОбъекты.Удалить(0);
			
			// 3.3. Перебираем все не обработанные объекты
			СтруктураПоиска = Новый Структура("Обработано", Ложь);
			СписокНеОбработанныхОбъектов = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
			
			Если СписокНеОбработанныхОбъектов.Количество() = 0 Тогда
				ЗависимыеОбъекты.Очистить();
				Прервать;
			КонецЕсли;
			
			Для Каждого НеОбработанныйОбъект Из СписокНеОбработанныхОбъектов Цикл
				
				СтруктураПоиска = Новый Структура("ОбъектУчета, ЗависимыйОбъект", НеОбработанныйОбъект.ОбъектУчета, ЗависимыйОбъект);
				СписокОбъектов = ТаблицаЗависимости.НайтиСтроки(СтруктураПоиска);
				Если СписокОбъектов.Количество() = 0 Тогда
					СтруктураПоиска = Новый Структура("ОбъектУчета, ЗависимыйОбъект", ЗависимыйОбъект, НеОбработанныйОбъект.ОбъектУчета);
					СписокОбъектов = ТаблицаЗависимости.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
				
				// 3.3.1. Если не обработанный объект связан с зависимым объектом
				Если СписокОбъектов.Количество() <> 0 Тогда
					
					НеОбработанныйОбъект.Обработано = Истина;
					
					НовыйОбъектОчереди = ОчередьОбъектов.Добавить();
					НовыйОбъектОчереди.Месяц = НеОбработанныйОбъект.Месяц;
					НовыйОбъектОчереди.ОбъектУчета = НеОбработанныйОбъект.ОбъектУчета;
					НовыйОбъектОчереди.НомерОчереди = ТекущийНомерОчереди;
					
					ЗависимыеОбъекты.Добавить(НеОбработанныйОбъект.ОбъектУчета);

				КонецЕсли;
				
			КонецЦикла;

		КонецЦикла;
		
		ТекущийНомерОчереди = ТекущийНомерОчереди + 1;
		Если ТекущийНомерОчереди > МаксимальныйНомерОчереди Тогда
			ТекущийНомерОчереди = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ОчередьОбъектов.Свернуть("Месяц,ОбъектУчета,НомерОчереди");
	ОчередьОбъектов.Сортировать("НомерОчереди");

	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	Возврат ОчередьОбъектов;
	
КонецФункции

// Формирует очередь объектов для многопоточного выполнения операции с помощью механизма платформы РасчетСистемЛинейныхУравнений.
// В одну очередь попадают объекты:
//  - указанные в одном документе;
//  - компоненты и ОС-владельцы;
//  - ОС, принимаемые к учету в рамках одного объекта строительства.
// 
// Параметры:
//  НачалоПериода - Дата - Начало периода выборки документов
//  КонецПериода - Дата - Конец периода выборки документов
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - Список организаций
//  МаксимальныйНомерОчереди - Число - Максимальный номер очереди
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Очередь объектов:
//  	* ОбъектУчета - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы - Объект учета
//  	* НомерОчереди - Число - Номер очереди
//
Функция ОчередьОбъектовСЛУ(НачалоПериода, КонецПериода, СписокОрганизаций, МаксимальныйНомерОчереди, МенеджерВременныхТаблиц) Экспорт
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеОбъекты.Ссылка КАК Ссылка,
	|	ТекущиеОбъекты.ОсновноеСредство КАК ОбъектУчета,
	|	ТекущиеОбъекты.НомерЗаписи КАК НомерЗаписи
	|
	|ПОМЕСТИТЬ Очередь_ВсеОбъектыДокументов
	|
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ТекущиеОбъекты
	|
	|ГДЕ
	|	ТекущиеОбъекты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтСписокДокументов.Ссылка
	|			ИЗ
	|				ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеОбъекты.Ссылка КАК Ссылка,
	|	ТекущиеОбъекты.НематериальныйАктив КАК ОбъектУчета,
	|	ТекущиеОбъекты.НомерЗаписи КАК НомерЗаписи
	|
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ТекущиеОбъекты
	|
	|ГДЕ
	|	ТекущиеОбъекты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтСписокДокументов.Ссылка
	|			ИЗ
	|				ВтСписокДокументов КАК ВтСписокДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерЗаписи,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗависимыеОбъекты.ОбъектУчета КАК ОбъектУчета,
	|	ЗависимыеОбъекты.ЗависимыйОбъект КАК ЗависимыйОбъект
	|
	|ПОМЕСТИТЬ Очередь_Зависимость
	|
	|ИЗ
		// Связь объектов в одном документе
	|	(ВЫБРАТЬ
	|		ТекущиеОбъекты.ОбъектУчета КАК ОбъектУчета,
	|		ЕСТЬNULL(ЗависимыеОбъекты.ОбъектУчета, ТекущиеОбъекты.ОбъектУчета) КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		Очередь_ВсеОбъектыДокументов КАК ТекущиеОбъекты
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Очередь_ВсеОбъектыДокументов КАК ЗависимыеОбъекты
	|			ПО ЗависимыеОбъекты.Ссылка = ТекущиеОбъекты.Ссылка
	|				И ЗависимыеОбъекты.ОбъектУчета <> ТекущиеОбъекты.ОбъектУчета
	|				И ЗависимыеОбъекты.НомерЗаписи <> 0
	|
	|	ГДЕ
	|		ТекущиеОбъекты.НомерЗаписи = 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь компонента с ОС-владельцем
	|	ВЫБРАТЬ
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ОбъектУчета,
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|
	|	ГДЕ
	|		УзлыКомпонентыАмортизации.УзелКомпонент В (
	|			ВЫБРАТЬ
	|				ВсеОбъекты.ОбъектУчета
	|			ИЗ
	|				Очередь_ВсеОбъектыДокументов КАК ВсеОбъекты)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство В (
	|			ВЫБРАТЬ
	|				ВсеОбъекты.ОбъектУчета
	|			ИЗ
	|				Очередь_ВсеОбъектыДокументов КАК ВсеОбъекты)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь ОС-владельца с компонентой 
	|	ВЫБРАТЬ
	|		УзлыКомпонентыАмортизации.ОсновноеСредство КАК ОбъектУчета,
	|		УзлыКомпонентыАмортизации.УзелКомпонент КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|
	|	ГДЕ
	|		УзлыКомпонентыАмортизации.УзелКомпонент В (
	|			ВЫБРАТЬ
	|				ВсеОбъекты.ОбъектУчета
	|			ИЗ
	|				Очередь_ВсеОбъектыДокументов КАК ВсеОбъекты)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство В (
	|			ВЫБРАТЬ
	|				ВсеОбъекты.ОбъектУчета
	|			ИЗ
	|				Очередь_ВсеОбъектыДокументов КАК ВсеОбъекты)
	|
	|		И УзлыКомпонентыАмортизации.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
		// Связь ОС через объект строительства 
	|	ВЫБРАТЬ
	|		ТекущиеОбъекты.ОсновноеСредство КАК ОбъектУчета,
	|		ТекущиеОбъекты.АналитикаКапитализацииРасходов КАК ЗависимыйОбъект
	|
	|	ИЗ
	|		РегистрНакопления.СтоимостьОС КАК ТекущиеОбъекты
	|
	|	ГДЕ
	|		ТекущиеОбъекты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ТекущиеОбъекты.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
	|		И ТекущиеОбъекты.АналитикаКапитализацииРасходов <> НЕОПРЕДЕЛЕНО
	|		И ТекущиеОбъекты.Активность
	|
	|		И ТекущиеОбъекты.Регистратор В (
	|			ВЫБРАТЬ
	|				ВсеОбъекты.Ссылка
	|			ИЗ
	|				Очередь_ВсеОбъектыДокументов КАК ВсеОбъекты)
	|
	|	) КАК ЗависимыеОбъекты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбъектов.ОбъектУчета КАК ОбъектУчета,
	|	АВТОНОМЕРЗАПИСИ() НомерОбъекта
	|
	|ПОМЕСТИТЬ Очередь_НомераОбъектов
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокОбъектов.ОбъектУчета КАК ОбъектУчета
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Зависимость.ОбъектУчета КАК ОбъектУчета
	|		ИЗ
	|			Очередь_Зависимость КАК Зависимость
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			Зависимость.ЗависимыйОбъект КАК ОбъектУчета
	|		ИЗ
	|			Очередь_Зависимость КАК Зависимость
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ЗаданияКРасчету.ОбъектУчета КАК ОбъектУчета
	|		ИЗ
	|			ЗаданияКРасчету КАК ЗаданияКРасчету
	|
	|		) КАК СписокОбъектов
	|
	|	СГРУППИРОВАТЬ ПО
	|		СписокОбъектов.ОбъектУчета
	|
	|	) КАК СписокОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвязьОбъектов.НомерОбъекта КАК НомерОбъекта,
	|	СвязьОбъектов.НомерЗависимогоОбъекта КАК НомерЗависимогоОбъекта,
	|	1 КАК Коэффициент
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		СписокОбъектов.НомерОбъекта КАК НомерОбъекта,
	|		ЕСТЬNULL(СписокОбъектовЗависимость.НомерОбъекта, СписокОбъектов.НомерОбъекта) КАК НомерЗависимогоОбъекта
	|
	|ИЗ
	|		Очередь_НомераОбъектов КАК СписокОбъектов
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Очередь_Зависимость КАК Зависимость
	|			ПО Зависимость.ОбъектУчета = СписокОбъектов.ОбъектУчета
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Очередь_НомераОбъектов КАК СписокОбъектовЗависимость
	|			ПО СписокОбъектовЗависимость.ОбъектУчета = Зависимость.ЗависимыйОбъект
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		СписокОбъектов.НомерОбъекта КАК НомерОбъекта,
	|		ЕСТЬNULL(СписокОбъектовЗависимость.НомерОбъекта, СписокОбъектов.НомерОбъекта) КАК НомерЗависимогоОбъекта
	|
	|	ИЗ
	|		Очередь_НомераОбъектов КАК СписокОбъектов
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Очередь_Зависимость КАК Зависимость
	|			ПО Зависимость.ЗависимыйОбъект = СписокОбъектов.ОбъектУчета
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Очередь_НомераОбъектов КАК СписокОбъектовЗависимость
	|			ПО СписокОбъектовЗависимость.ОбъектУчета = Зависимость.ОбъектУчета
	|
	|	) КАК СвязьОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязьОбъектов.НомерОбъекта,
	|	СвязьОбъектов.НомерЗависимогоОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбъектов.ОбъектУчета КАК ОбъектУчета,
	|	СписокОбъектов.НомерОбъекта КАК НомерОбъекта
	|ИЗ
	|	Очередь_НомераОбъектов КАК СписокОбъектов
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаЗависимости = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();

	ТаблицаОбъектов = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	ТаблицаОбъектов.Индексы.Добавить("НомерОбъекта");

	РасчетСЛУ = Новый РасчетСистемЛинейныхУравнений;
	РасчетСЛУ.ИсточникДанныхСвязей = ТаблицаЗависимости;
	РасчетСЛУ.КолонкаУравненияВСвязях = "НомерОбъекта";
	РасчетСЛУ.КолонкаПеременныеВСвязях = "НомерЗависимогоОбъекта";
	ОписаниеСЛАУ = РасчетСЛУ.ОписанияСистем.Добавить();
	ОписаниеСЛАУ.КолонкаКоэффициентовВСвязях = "Коэффициент";
	
	СвязностьОбъектов = РасчетСЛУ.ПолучитьКомпонентыСвязности(СпособПолученияКомпонентСвязностиРасчетаСистемЛинейныхУравнений.КомпонентыСлабойСвязности);
	СвязностьОбъектов.Сортировать("НомерКомпоненты");
	
	ОчередьОбъектов = Новый ТаблицаЗначений();
	ОчередьОбъектов.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(ТаблицаОбъектов.Колонки.ОбъектУчета.ТипЗначения));
	ОчередьОбъектов.Колонки.Добавить("НомерОчереди", ОбщегоНазначения.ОписаниеТипаЧисло(31,, ДопустимыйЗнак.Неотрицательный));
	ОчередьОбъектов.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТекущийНомерОчереди = 1;
	ТекущийНомерКомпоненты = 0;
	Для Каждого Выборка Из СвязностьОбъектов Цикл

		Если ТекущийНомерКомпоненты <> Выборка.НомерКомпоненты Тогда
			
			ТекущийНомерОчереди = ТекущийНомерОчереди + 1;
			Если ТекущийНомерОчереди > МаксимальныйНомерОчереди Тогда
				ТекущийНомерОчереди = 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеОбъекта = ТаблицаОбъектов.Найти(Выборка.НомерУзла, "НомерОбъекта");

		НовыйОбъектОчереди = ОчередьОбъектов.Добавить();
		НовыйОбъектОчереди.ОбъектУчета = ДанныеОбъекта.ОбъектУчета;
		НовыйОбъектОчереди.НомерОчереди = ТекущийНомерОчереди;
		НовыйОбъектОчереди.Месяц = НачалоПериода;

		ТекущийНомерКомпоненты = Выборка.НомерКомпоненты;

	КонецЦикла;
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	Возврат ОчередьОбъектов;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	ИмяРегистра - Строка - Имя регистра заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, ИмяРегистра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		Если Организации.Количество() <> 0 Тогда
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Идентификаторы документов по которым актуализируются параметры узлов компонентов.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификаторы документов
Функция ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов() Экспорт

	СписокОбъектов = Новый Массив;
	УчетАрендованныхОС.ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов(СписокОбъектов);
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОбъединениеОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РазукомплектацияОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));

	Для каждого ТипОбъекта Из СписокТипов Цикл
		СписокОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипОбъекта));
	КонецЦикла; 
	
	Возврат СписокОбъектов;

КонецФункции
 
// Пустые способы отражения расходов.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка - Пустые способы отражения расходов
Функция ПустыеСпособыОтраженияРасходов() Экспорт

	ПустыеСпособыОтраженияРасходов = Новый Массив;
	ПустыеСпособыОтраженияРасходов.Добавить(Неопределено);
	ПустыеСпособыОтраженияРасходов.Добавить(NULL);
	ПустыеСпособыОтраженияРасходов.Добавить(Документы.ИзменениеПараметровОС2_4.ПустаяСсылка());
	ПустыеСпособыОтраженияРасходов.Добавить(Документы.ИзменениеПараметровНМА2_4.ПустаяСсылка());

	ВнеоборотныеАктивыЛокализация.ДополнитьПустыеСпособыОтраженияРасходов(ПустыеСпособыОтраженияРасходов);
	
	Возврат ПустыеСпособыОтраженияРасходов;
	
КонецФункции

Процедура ДобавитьВРегистрНовыеЗаписи(Регистратор, ИмяРегистра, НовыеЗаписи, ВидИсточника) Экспорт

	НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	
	Для Сч = -НаборЗаписей.Количество() + 1 По 0 Цикл
		Если НаборЗаписей[-Сч].ВидИсточника = ВидИсточника Тогда
			НаборЗаписей.Удалить(-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	Для Каждого СтрокаТаблицыИсточник Из НовыеЗаписи Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицыИсточник);
		НоваяЗапись.ВидИсточника = ВидИсточника;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ЗаменитьТекстЗапроса(ТекстЗапроса, ИмяРегистра, ИмяТаблицыСрезПоследних, ПараметрыРегистра)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПервоначальныеСведенияОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_СрезПоследнихРегистра", ИмяТаблицыСрезПоследних);
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыборкаПолей", ПараметрыРегистра.ВыборкаПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыборкаИзмерений", ПараметрыРегистра.ВыборкаИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппировкаИзмерений", ПараметрыРегистра.ГруппировкаИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексИзмерений", ПараметрыРегистра.ИндексИзмерений);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияОсновнойТаблицы", ПараметрыРегистра.УсловиеСоединенияОсновнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияТаблицРегистра", ПараметрыРегистра.УсловиеСоединенияТаблицРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Налогообложение НДС.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  Дата - Дата - Дата
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС
Функция НалогообложениеНДС(Организация, Дата) Экспорт
	
	ДатаСреза = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
	
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	//++ Локализация
	
	НастройкиСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиСистемыНалогообложения", Организация, ДатаСреза);
	
	Если НастройкиСистемыНалогообложения <> Неопределено
		И НастройкиСистемыНалогообложения.ПрименяетсяЕНВД Тогда
			
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
		
	Иначе
		
		НастройкиУчетаНДС = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиУчетаНДС", Организация, ДатаСреза);
		
		Если НастройкиУчетаНДС <> Неопределено
			И НастройкиУчетаНДС.ПрименяетсяОсвобождениеОтУплатыНДС Тогда
				
			НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		
		Иначе
		
			Если НастройкиСистемыНалогообложения <> Неопределено
				И НастройкиСистемыНалогообложения.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная Тогда
					
				НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат НалогообложениеНДС;
	
КонецФункции

#КонецОбласти

#КонецОбласти
