////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция возвращает признак - является ли организация иностранной в зависимости от ИНН.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//
// Возвращаемое значение:
//   Истина - организация является иностранной;
//   Ложь   - организация не является иностранной.
//
//
Функция ЭтоИностраннаяОрганизацияПоИНН(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "ИННЮЛ");
	ИНН      = Сведения.ИННЮЛ;
	
	ЭтоИностраннаяОрганизация = СтрДлина(ИНН) > 4 И Лев(ИНН, 4) = "9909";
	
	Возврат ЭтоИностраннаяОрганизация;
	
КонецФункции

// Коды органов ФСГС, заменяемые в связи с поддержкой взаимодействия с ЦЕМПОС.
//
// Возвращаемое значение:
//  Соответствие - для кодов органов ФСГС возвращаются коды, на которые их следует заменить в справочниках
//                 (организаций, подразделений).
//
Функция СоответствиеЗаменяемыхКодовОргановФСГС(Знач ОпрашиватьСервис = Ложь) Экспорт
	
	Если ОпрашиватьСервис Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = Новый Соответствие;
		
		КлючОбъекта = "regservice.keydisk.ru/GetCemposRecipientList";
		ДатаЗапроса = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ДатаПоследнегоУдачногоЗапроса");
		
		ДатаСервера = ТекущаяДатаСеанса();
		Если ДатаЗапроса <> Неопределено И ДатаЗапроса + 86400 > ДатаСервера И ДатаЗапроса < ДатаСервера Тогда 
			ДанныеЗапроса = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ДанныеПоследнегоУдачногоЗапроса");
			Если ТипЗнч(ДанныеЗапроса) = Тип("Соответствие") Тогда 
				Возврат ДанныеЗапроса;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыСоединения = Новый Структура("Таймаут", 30);
		URL = "http://regservice.keydisk.ru/regservice.asmx/GetCemposRecipientList";
		Соединение = ОбщегоНазначенияЭДКО.СоединениеССерверомИнтернета(URL, ПараметрыСоединения);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
		Запрос = Новый HTTPЗапрос("/regservice.asmx/GetCemposRecipientList", Заголовки);
		Запрос.УстановитьТелоИзСтроки("regionCode=");
		
		Попытка
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			
		Исключение
			
			Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС';
				|en = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
			
			Возврат АвтономноеСоответствиеЗаменяемыхКодовТОГС();
			
		КонецПопытки;
		
		Если Ответ.КодСостояния = 200 Тогда
			
			НормализованныйОтвет = НормализоватьЗаменуКодовЦЕМПОС(Ответ.ПолучитьТелоКакСтроку());
			Если ТипЗнч(НормализованныйОтвет) = Тип("Соответствие") Тогда 
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ДатаПоследнегоУдачногоЗапроса", ТекущаяДатаСеанса());
				ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "ДанныеПоследнегоУдачногоЗапроса", НормализованныйОтвет);
			КонецЕсли;
			
			Возврат НормализованныйОтвет;
			
		Иначе
			
			Ошибка = Ответ.ПолучитьТелоКакСтроку();
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС';
				|en = 'Электронный документооброт с контролирующими органами.Получение изменений кодов органов ФСГС на ЦЕМПОС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
			
			Возврат АвтономноеСоответствиеЗаменяемыхКодовТОГС();
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		Результат = АвтономноеСоответствиеЗаменяемыхКодовТОГС();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АвтономноеСоответствиеЗаменяемыхКодовТОГС()
	
	СоответствияТОГС = Новый Соответствие;
	СоответствияТОГС.Вставить("52-00", "52-52-00");
	СоответствияТОГС.Вставить("47-00", "47-47-00");
	СоответствияТОГС.Вставить("23-99", "23-23-00");
	СоответствияТОГС.Вставить("29-00", "29-29-00");
	СоответствияТОГС.Вставить("59-00", "59-59-00");
	СоответствияТОГС.Вставить("02-00", "02-02-00");
	СоответствияТОГС.Вставить("51-00", "51-51-00");
	СоответствияТОГС.Вставить("67-00", "67-67-00");
	СоответствияТОГС.Вставить("10-00", "10-10-00");
	СоответствияТОГС.Вставить("23-00", "23-23-00");
	СоответствияТОГС.Вставить("50-80", "50-50-00");
	СоответствияТОГС.Вставить("01-00", "01-01-00");
	СоответствияТОГС.Вставить("15-01", "15-15-01");
	СоответствияТОГС.Вставить("26-00", "26-26-00");
	СоответствияТОГС.Вставить("06-00", "06-06-00");
	СоответствияТОГС.Вставить("73-00", "73-73-00");
	СоответствияТОГС.Вставить("07-00", "07-07-00");
	СоответствияТОГС.Вставить("74-00", "74-74-00");
	СоответствияТОГС.Вставить("09-01", "09-09-01");
	СоответствияТОГС.Вставить("55-00", "55-55-00");
	СоответствияТОГС.Вставить("61-78", "61-61-78");
	СоответствияТОГС.Вставить("68-00", "68-68-00");
	СоответствияТОГС.Вставить("11-00", "11-11-00");
	СоответствияТОГС.Вставить("50-56", "50-50-00");
	СоответствияТОГС.Вставить("04-00", "04-04-00");
	СоответствияТОГС.Вставить("22-00", "22-22-00");
	СоответствияТОГС.Вставить("79-00", "79-79-00");
	СоответствияТОГС.Вставить("91-00", "91-91-00");
	СоответствияТОГС.Вставить("24-00", "24-24-00");
	СоответствияТОГС.Вставить("21-00", "21-21-00");
	СоответствияТОГС.Вставить("78-00", "78-78-00");
	СоответствияТОГС.Вставить("30-00", "30-30-00");
	СоответствияТОГС.Вставить("87-00", "87-87-00");
	СоответствияТОГС.Вставить("08-00", "08-08-00");
	СоответствияТОГС.Вставить("75-00", "75-75-00");
	СоответствияТОГС.Вставить("92-00", "92-92-00");
	СоответствияТОГС.Вставить("12-00", "12-12-00");
	СоответствияТОГС.Вставить("35-00", "35-35-00");
	СоответствияТОГС.Вставить("61-72", "61-61-72");
	СоответствияТОГС.Вставить("13-00", "13-13-00");
	СоответствияТОГС.Вставить("49-00", "49-49-00");
	СоответствияТОГС.Вставить("32-00", "32-32-00");
	СоответствияТОГС.Вставить("27-00", "27-27-00");
	СоответствияТОГС.Вставить("53-00", "53-53-00");
	СоответствияТОГС.Вставить("31-00", "31-31-00");
	СоответствияТОГС.Вставить("50-64", "50-50-00");
	СоответствияТОГС.Вставить("03-00", "03-03-00");
	СоответствияТОГС.Вставить("70-00", "70-70-00");
	СоответствияТОГС.Вставить("56-00", "56-56-00");
	СоответствияТОГС.Вставить("48-00", "48-48-00");
	СоответствияТОГС.Вставить("64-05", "64-64-05");
	СоответствияТОГС.Вставить("16-00", "16-16-00");
	СоответствияТОГС.Вставить("60-00", "60-60-00");
	СоответствияТОГС.Вставить("14-00", "14-14-00");
	СоответствияТОГС.Вставить("62-00", "62-62-00");
	СоответствияТОГС.Вставить("20-00", "20-20-00");
	СоответствияТОГС.Вставить("19-00", "19-19-00");
	СоответствияТОГС.Вставить("76-00", "76-76-00");
	СоответствияТОГС.Вставить("50-48", "50-50-00");
	СоответствияТОГС.Вставить("05-00", "05-05-00");
	СоответствияТОГС.Вставить("17-00", "17-17-00");
	СоответствияТОГС.Вставить("42-00", "42-42-00");
	СоответствияТОГС.Вставить("66-00", "66-66-00");
	СоответствияТОГС.Вставить("43-11", "43-43-11");
	СоответствияТОГС.Вставить("36-00", "36-36-00");
	СоответствияТОГС.Вставить("45-00", "45-45-00");
	СоответствияТОГС.Вставить("39-00", "39-39-00");
	СоответствияТОГС.Вставить("50-65", "50-50-00");
	СоответствияТОГС.Вставить("43-43", "43-43-11");
	СоответствияТОГС.Вставить("33-00", "33-33-00");
	СоответствияТОГС.Вставить("38-00", "38-38-00");
	СоответствияТОГС.Вставить("50-73", "50-50-00");
	СоответствияТОГС.Вставить("34-00", "34-34-00");
	СоответствияТОГС.Вставить("25-00", "25-25-00");
	СоответствияТОГС.Вставить("18-00", "18-18-00");
	СоответствияТОГС.Вставить("40-00", "40-40-00");
	СоответствияТОГС.Вставить("44-00", "44-44-00");
	СоответствияТОГС.Вставить("72-00", "72-72-00");
	СоответствияТОГС.Вставить("65-00", "65-65-00");
	СоответствияТОГС.Вставить("86-00", "86-86-00");
	СоответствияТОГС.Вставить("69-00", "69-69-00");
	СоответствияТОГС.Вставить("37-00", "37-37-00");
	СоответствияТОГС.Вставить("89-00", "89-89-00");
	СоответствияТОГС.Вставить("57-00", "57-57-00");
	СоответствияТОГС.Вставить("50-78", "50-50-00");
	СоответствияТОГС.Вставить("58-00", "58-58-00");
	СоответствияТОГС.Вставить("41-00", "41-41-00");
	СоответствияТОГС.Вставить("54-00", "54-54-00");
	СоответствияТОГС.Вставить("61-01", "61-61-01");
	СоответствияТОГС.Вставить("61-02", "61-61-02");
	СоответствияТОГС.Вставить("61-03", "61-61-03");
	СоответствияТОГС.Вставить("61-04", "61-61-04");
	СоответствияТОГС.Вставить("61-05", "61-61-05");
	СоответствияТОГС.Вставить("61-06", "61-61-06");
	СоответствияТОГС.Вставить("61-07", "61-61-07");
	СоответствияТОГС.Вставить("61-08", "61-61-08");
	СоответствияТОГС.Вставить("61-09", "61-61-09");
	СоответствияТОГС.Вставить("61-10", "61-61-10");
	СоответствияТОГС.Вставить("61-12", "61-61-12");
	СоответствияТОГС.Вставить("61-13", "61-61-13");
	СоответствияТОГС.Вставить("61-14", "61-61-14");
	СоответствияТОГС.Вставить("61-15", "61-61-15");
	СоответствияТОГС.Вставить("61-16", "61-61-16");
	СоответствияТОГС.Вставить("61-17", "61-61-17");
	СоответствияТОГС.Вставить("61-18", "61-61-18");
	СоответствияТОГС.Вставить("61-19", "61-61-19");
	СоответствияТОГС.Вставить("61-62", "61-61-62");
	СоответствияТОГС.Вставить("61-68", "61-61-68");
	СоответствияТОГС.Вставить("61-74", "61-61-74");
	СоответствияТОГС.Вставить("61-82", "61-61-82");
	СоответствияТОГС.Вставить("50-74", "50-50-00");
	СоответствияТОГС.Вставить("50-45", "50-50-00");
	СоответствияТОГС.Вставить("77-00", "77-77-00");
	СоответствияТОГС.Вставить("50-33", "50-50-00");
	СоответствияТОГС.Вставить("50-16", "50-50-00");
	СоответствияТОГС.Вставить("50-57", "50-50-00");
	СоответствияТОГС.Вставить("50-15", "50-50-00");
	СоответствияТОГС.Вставить("50-40", "50-50-00");
	СоответствияТОГС.Вставить("50-28", "50-50-00");
	СоответствияТОГС.Вставить("50-54", "50-50-00");
	СоответствияТОГС.Вставить("50-09", "50-50-00");
	СоответствияТОГС.Вставить("50-30", "50-50-00");
	СоответствияТОГС.Вставить("50-52", "50-50-00");
	СоответствияТОГС.Вставить("50-51", "50-50-00");
	СоответствияТОГС.Вставить("50-39", "50-50-00");
	СоответствияТОГС.Вставить("50-25", "50-50-00");
	СоответствияТОГС.Вставить("50-06", "50-50-00");
	СоответствияТОГС.Вставить("50-42", "50-50-00");
	СоответствияТОГС.Вставить("50-21", "50-50-00");
	СоответствияТОГС.Вставить("50-50", "50-50-00");
	СоответствияТОГС.Вставить("50-93", "50-50-00");
	СоответствияТОГС.Вставить("50-43", "50-50-00");
	СоответствияТОГС.Вставить("50-08", "50-50-00");
	СоответствияТОГС.Вставить("50-47", "50-50-00");
	СоответствияТОГС.Вставить("50-90", "50-50-00");
	СоответствияТОГС.Вставить("50-70", "50-50-00");
	СоответствияТОГС.Вставить("50-23", "50-50-00");
	СоответствияТОГС.Вставить("50-31", "50-50-00");
	СоответствияТОГС.Вставить("50-18", "50-50-00");
	СоответствияТОГС.Вставить("50-46", "50-50-00");
	СоответствияТОГС.Вставить("50-53", "50-50-00");
	СоответствияТОГС.Вставить("50-44", "50-50-00");
	СоответствияТОГС.Вставить("50-83", "50-50-00");
	СоответствияТОГС.Вставить("50-12", "50-50-00");
	СоответствияТОГС.Вставить("50-22", "50-50-00");
	СоответствияТОГС.Вставить("50-20", "50-50-00");
	СоответствияТОГС.Вставить("50-59", "50-50-00");
	СоответствияТОГС.Вставить("50-76", "50-50-00");
	СоответствияТОГС.Вставить("50-49", "50-50-00");
	СоответствияТОГС.Вставить("50-05", "50-50-00");
	СоответствияТОГС.Вставить("50-04", "50-50-00");
	СоответствияТОГС.Вставить("50-11", "50-50-00");
	СоответствияТОГС.Вставить("50-13", "50-50-00");
	СоответствияТОГС.Вставить("50-32", "50-50-00");
	СоответствияТОГС.Вставить("50-58", "50-50-00");
	СоответствияТОГС.Вставить("50-67", "50-50-00");
	СоответствияТОГС.Вставить("50-71", "50-50-00");
	СоответствияТОГС.Вставить("50-75", "50-50-00");
	СоответствияТОГС.Вставить("50-38", "50-50-00");
	СоответствияТОГС.Вставить("50-03", "50-50-00");
	СоответствияТОГС.Вставить("50-00", "50-50-00");
	СоответствияТОГС.Вставить("50-34", "50-50-00");
	СоответствияТОГС.Вставить("50-55", "50-50-00");
	СоответствияТОГС.Вставить("50-41", "50-50-00");
	СоответствияТОГС.Вставить("63-00", "63-63-00");
	СоответствияТОГС.Вставить("71-00", "71-71-00");
	СоответствияТОГС.Вставить("28-00", "28-28-00");
	СоответствияТОГС.Вставить("46-00", "46-46-00");
	СоответствияТОГС.Вставить("00-00", "00-00-00");

	Возврат СоответствияТОГС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с прикладным кодом
// автоматического заполнения данных статистической отчетности.

// Возвращает поля, которые не требуется заполнять.
//
Функция ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяРеглОтчета, ИмяФормы, Период) Экспорт
	
	НеТребуютсяПоляФормы = Новый Массив;
	
	// Проверка имеет смысл только для некоторых отчетов
	Если Не (ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП3"
		 Или ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП1"
		 Или ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП6"
		 Или ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаПМ"
		 Или ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФорма3ТОРГПМ") Тогда
		Возврат НеТребуютсяПоляФормы;
	КонецЕсли;
	
	// Если все разделы формы представлены в одном макете, а сам макет соответствует маске "[ИмяФормы]_%",
	// то массив незаполняемых полей можно сформировать, отфильтров имена областей макета по маске
	// (например, если не нужно заполнять раздел 2 и все поля второго раздела начинаются с "П02",
	// то в массив незаполняемых можно добавить имена всех областей макета, начинающиеся с "П02").
	МакетыФормыОтчета = Новый Массив;
	Для каждого МакетОтчета Из Метаданные.Отчеты[ИмяРеглОтчета].Макеты Цикл
		Если СтрНайти(МакетОтчета.Имя, ИмяФормы + "_") = 1 Тогда
			МакетыФормыОтчета.Добавить(МакетОтчета);
		КонецЕсли;
		Если МакетыФормыОтчета.Количество() > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Функция не поддерживает отчеты, в которых форма разделена на несколько макетов.
	Если МакетыФормыОтчета.Количество() <> 1 Тогда
		Возврат НеТребуютсяПоляФормы;
	КонецЕсли;
	
	ПоследнийМесяцКвартала = Месяц(Период) % 3 = 0;
	ПоследнийМесяцГода = (Месяц(Период) = 12);
	
	МакетФормыОтчета = Отчеты[ИмяРеглОтчета].ПолучитьМакет(МакетыФормыОтчета[0].Имя);
	
	Если ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП3" Тогда
		
		// Разделы 2, 3 и 4 заполняются только в квартальных периодах
		Если Не ПоследнийМесяцКвартала Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П02");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П03");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П04");
		КонецЕсли;
		
		// Строка 50.а раздела 3 заполняется только за январь-декабрь
		Если Не ПоследнийМесяцГода Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П030005003");
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П030005004");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП1" Тогда
		
		Если Не ПоследнийМесяцКвартала Тогда
			Если ИмяФормы = "ФормаОтчета2023Кв1" Или ИмяФормы = "ФормаОтчета2024Кв1" Тогда
				// Раздел 1.2 заполняется только в квартальный период
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001007");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001008");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001009");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001010");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001011");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001012");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001013");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001014");
			Иначе
				// Строки 3, 4, 5 раздела 1 заполняется только в квартальный период.
				// Строка "Справочно:" раздела 5 заполняется только в квартальный период (с 2019 года исключена).
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001003");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001004");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П0001005");
				НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "ПотребЭнерг");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаП6" Тогда
		
		// Раздел 3 заполняется только за полугодие
		Если Месяц(Период) <> 6 Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П03");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФормаПМ" Тогда
		
		// Раздел 4 заполняется только за январь-декабрь
		Если Не ПоследнийМесяцГода Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П04");
		КонецЕсли;
		
	ИначеЕсли ИмяРеглОтчета = "РегламентированныйОтчетСтатистикаФорма3ТОРГПМ" Тогда
		
		// Раздел 4 (появился с отчета за январь-декабрь 2020) заполняется только за январь-декабрь
		Если Не ПоследнийМесяцГода Тогда
			НайтиОбластиТабличногоДокументаПоНачалуИмени(НеТребуютсяПоляФормы, МакетФормыОтчета, "П000002");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеТребуютсяПоляФормы;
	
КонецФункции

// Краткое представление формы, которое выводится, например, в заголовке диалога настройки.
//
// Параметры:
//  РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет
//
// Возвращаемое значение:
//   Строка - краткое представление формы.
//
Функция КраткоеПредставлениеФормы(РегламентированныйОтчет) Экспорт
	
	МетаОтчет = Метаданные.Отчеты.Найти(РегламентированныйОтчет.ИсточникОтчета);
	
	Если МетаОтчет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
		КраткоеПредставление = СокрЛП(СтрЗаменить(СтрЗаменить(МетаОтчет.ОсновнаяФорма.Синоним, "Статистика:", ""), "Форма", ""));
	Иначе
		КраткоеПредставление = СокрЛП(СтрЗаменить(Лев(МетаОтчет.Синоним, СтрНайти(МетаОтчет.Синоним, """") - 1), "Форма", ""));
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

// Возвращает список классификаторов, про которые знает БРО.
// 
// Возвращаемое значение:
//   СписокЗначений - "ВидыДеятельности", "ВидыПродукцииОпт", "ВидыПродукцииПроизводство",
//                    "ВидыПродукцииРозница", "УслугиНаселению".
//
Функция ВидыКлассификаторов() Экспорт 
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ВидыДеятельности");
	Результат.Добавить("ВидыПродукцииОпт");
	Результат.Добавить("ВидыПродукцииПроизводство");
	Результат.Добавить("ВидыПродукцииРозница");
	Результат.Добавить("УслугиНаселению");
	
	Возврат Результат;
	
КонецФункции

// Возвращает список версий классификатора
//
// Параметры:
//  ВидКласификатора - строка
//
// Возвращаемое значение:
//   СписокЗначений - версии классификатора.
//   Например: для ВидКласификатора = "ВидыПродукцииОпт"
//   вернем список версий ("2010кв1", "2012кв1", "2013кв1", "2013кв4", "2014кв1")
//   с представлением.
//
Функция ВерсииКлассификатора(ВидКласификатора) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Если ВидКласификатора = "ВидыДеятельности" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2012кв1", "2012");
		Результат.Добавить("2014кв1", "2014");
	ИначеЕсли ВидКласификатора = "ВидыПродукцииОпт"
		Или ВидКласификатора = "ВидыПродукцииПроизводство"
		Или ВидКласификатора = "ВидыПродукцииРозница" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2012кв1", "2012");
		Результат.Добавить("2013кв1", "2013, 1-3 кв.");
		Результат.Добавить("2013кв4", "2013, 4 кв.");
		Результат.Добавить("2014кв1", "2014");
	ИначеЕсли ВидКласификатора = "УслугиНаселению" Тогда
		Результат.Добавить("2010кв1", "2010");
		Результат.Добавить("2013кв1", "2013, 1-3 кв.");
		Результат.Добавить("2013кв4", "2013, 4 кв.");
		Результат.Добавить("2014кв1", "2014");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// По классификатору и версии вернем таблицу значений
//
// Параметры:
//   ВидКласификатора - строка
//   Версия - строка
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные классификатора.
//   Возвращаем таблицу значений с 4 колонками:
//   Код, Наименование, НаименованиеЕдиницыИзмерения, КодЕдиницыИзмерения
//   Все колонки имеют тип "строка"
//
Функция ДанныеКлассификатора(ВидКласификатора, ВерсияКлассификатора) Экспорт
	Если ВидКласификатора = "ВидыДеятельности" Тогда
		Возврат КлассификаторВидовДеятельности(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииОпт" Тогда
		Возврат КлассификаторПродукцииОпт(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииПроизводство" Тогда
		Возврат КлассификаторПродукцииПроизводство(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "ВидыПродукцииРозница" Тогда
		Возврат КлассификаторПродукцииРозница(ВерсияКлассификатора);
	ИначеЕсли ВидКласификатора = "УслугиНаселению" Тогда
		Возврат КлассификаторУслугНаселению(ВерсияКлассификатора);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции описания форм статистики.

// Функция читает структуру XML переданной формы статистики.
//
// Параметры:
// 	 ИмяОтчета - Строка - имя отчета.
//   ИмяСхемыВыгрузки - Строка - имя схемы выгрузки.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содежит иерархию полей формы статистики.
//
Функция ПолучитьПоляФормыСтатистики(ИмяОтчета, ИмяСхемыВыгрузки) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель",   ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("НомерСтроки",  ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ИмяПоля",      ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("Родитель",     Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	ТаблицаПоказателей.Колонки.Добавить("Период",       Новый ОписаниеТипов("Строка"));// ТекущийПериод, ПредыдущийПериод или АналогичныйПериодПредыдущегоГода
	ТаблицаПоказателей.Колонки.Добавить("ЭтоГруппа",    Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателей.Колонки.Добавить("СНачалаГода",  Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателей.Колонки.Добавить("ЕстьЭлементы", Новый ОписаниеТипов("Булево"));
	
	ДеревоПоказателей = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяОтчета, ИмяСхемыВыгрузки);
	
	Для Каждого Тег_report Из ДеревоПоказателей.Строки	Цикл
		
		Если Тег_report.Код = "report" Тогда
			
			Для Каждого Тег_sections Из Тег_report.Строки Цикл
				
				Если Тег_sections.Код = "sections" Тогда
					
					Для Каждого Тег_section Из Тег_sections.Строки Цикл
						
						Если Тег_section.Код = "section" Тогда
							
							Группа = ТаблицаПоказателей.Добавить();
							
							Группа.Показатель 	= Тег_section.Представление;
							Группа.ЭтоГруппа 	= Истина;
							
							РодительРаздел = Группа;
							
							Для Каждого Тег_row Из Тег_section.Строки Цикл
								
								Если Тег_row.Код = "row" Тогда
									
									НаименованиеПоказателя = Тег_row.Представление;
									
									Строка = ТаблицаПоказателей.Добавить();
									
									Строка.Показатель 	= НаименованиеПоказателя;
									Строка.ЭтоГруппа 	= Истина;
									Строка.Родитель 	= РодительРаздел;
									Родитель 			= Строка;
									
									НомерСтроки = "";
									
									Для Каждого Тег_col Из Тег_row.Строки Цикл
										
										Если Тег_col.Код = "code" Тогда
											
											НомерСтроки	= Тег_col.ЗначениеПоУмолчанию;
											Родитель.Показатель = "Строка " + НомерСтроки + ": " + НаименованиеПоказателя;
										Иначе
											
											ИмяПоля = Тег_col.Ключ;
											
											Если ЗначениеЗаполнено(ИмяПоля) И ЭтоКодПоказателяП(ИмяПоля) Тогда 
												
												Строка = ТаблицаПоказателей.Добавить();
												
												Представление = Тег_col.Представление;
												
												Строка.ИмяПоля 			= ИмяПоля;
												Строка.Показатель 		= Тег_col.Представление;
												Строка.НомерСтроки 		= НомерСтроки;
												Строка.Родитель 		= Родитель;
												Родитель.ЕстьЭлементы 	= Истина;
												РодительРаздел.ЕстьЭлементы = Истина;
												
												Если СтрНайти(НРег(Представление),"за предыдущий") Тогда	
													
													Строка.Период = "ПредыдущийПериод";
													
												ИначеЕсли СтрНайти(НРег(Представление),"за соответствующий") Тогда
												
													Строка.Период = "АналогичныйПериодПредыдущегоГода";
													
												Иначе
													
													Строка.Период = "ТекущийПериод";
													
												КонецЕсли;
												
												Если СтрНайти(НРег(Представление),"с начала ") И СтрНайти(НРег(Представление)," года") Тогда	
													
													Строка.СНачалаГода = Истина;
													
												КонецЕсли;
												
											КонецЕсли;
											
										КонецЕсли;
										
									КонецЦикла; // col
									
								КонецЕсли;
								
							КонецЦикла; // row
							
						КонецЕсли;
						
					КонецЦикла; //section
					
				КонецЕсли	
				
			КонецЦикла;	// sections
			
		КонецЕсли;
		
	КонецЦикла; //report	
	
	Возврат	ТаблицаПоказателей;
	
КонецФункции	

// Функция считывает версии списков отчета.
//
// Парамеры: 
//   ИмяОтчета - Строка - идентификатор отчета, для которого нужно вернуть версии списков.
//
// Возвращаемое значение:
//   СписокЗначений - версии списков отчета.
//
Функция ПолучитьВерсииСписковОтчета(ИмяОтчета) Экспорт
	СписокВерсий = Новый СписокЗначений;
	ОтчетМетаданные = Метаданные.Отчеты.Найти(ИмяОтчета);
	
	Если ОтчетМетаданные = Неопределено Тогда 
		Возврат СписокВерсий;
	КонецЕсли;
		
	Для Каждого Макет Из ОтчетМетаданные.Макеты Цикл
		Если Лев(Макет.Имя,6) = "Списки" Тогда
			СписокВерсий.Добавить(Макет.Имя, Лев(СтрЗаменить(Макет.Имя, "Списки", ""), 4));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВерсий;
КонецФункции

// Функция возвращает структуру содержащую 2 параметра:
//
// Параметры:
//   ИмяКлассификатора - Строка
//   Назначение - Строка
// Возвращаемое значение:
//   Структура - расположение классификатор форм статистики.
//
Функция ПолучитьРасположениеКлассификатораСтатистики(ИмяКлассификатора, Назначение = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура("ОтчетИсточникДанных, ОбластьИсточникДанных");
	
	Если ИмяКлассификатора = "КлассификаторВидовЭкономическойДеятельности" Тогда
		
		СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okved");
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторПродукцииПоВидамДеятельности" Тогда
		
		Если Назначение = "ВидыУслугРозница" Тогда
			СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаПУслуги");
			СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		Иначе
			СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП1");
			СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okp");
		КонецЕсли;
		
	ИначеЕсли ИмяКлассификатора = "КлассификаторУслугНаселению" Тогда
		
		СтруктураПараметров.Вставить("ОтчетИсточникДанных", "РегламентированныйОтчетСтатистикаФормаП5М");
		СтруктураПараметров.Вставить("ОбластьИсточникДанных", "s_okun");
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает данные переданного списка выбора отчета.
//
// Параметры:
//    ИмяОтчета - Строка - Идентификатор отчета содежащего искомый список.
//    ИмяМакета - Строка - Идентификатор макета в котором хранятся списки отчета.
//    ИмяСписка - Строка - Имя искомого списка в макете "Списки" отчета.
//    ДополнятьКодСлева - Булево - дополнять код слева (по умолчанию) символом "0"
//	                      до длины кода (по умолчанию) 12, длина кода и символ дополнения могут быть определены
//                        параметрами.
//	  ДлинаКода - Число - длина кода классификатора, коды классификатора будут приведены к этой длине.
//	  СимволДополненияКода - Строка - символ которым нужно дополнить код слева, до заданной длины.
//
// Возвращаемое значение:
// 	 ТаблицаЗначений - данные списка.
//
Функция ПолучитьЗначенияИзСпискаВыбораОтчета(ИмяОтчета, ИмяМакета, ИмяСписка, ДополнятьКодСлева = Ложь, ДлинаКода = Неопределено, СимволДополненияКода = "0") Экспорт
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	
	СпискиОтчета = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	
	//В полученном макете содержатся значения всех списков используемых в отчете
	//ищем переданный
	Список = СпискиОтчета.Области.Найти(ИмяСписка);
	
	Если Список = Неопределено Тогда
		Возврат ТаблицаПоказателей;
	КонецЕсли;
	
	Если Список.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		//заполнение дерева данными списка	
		ВерхОбласти = Список.Верх;
		НизОбласти = Список.Низ;
		
		НомерКолонки = 1;
		Область = СпискиОтчета.Область(ВерхОбласти - 1, НомерКолонки);
		ИмяКолонки = Область.Текст;
		ДлинаКодаКлассификатора = 20;
		
		Если ДлинаКода <> Неопределено Тогда
			
			ДлинаКодаКлассификатора = ДлинаКода;
			
		КонецЕсли;
		
		Пока ЗначениеЗаполнено(ИмяКолонки) Цикл
			
			Если ИмяКолонки = "id" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
			ИначеЕсли ИмяКолонки = "Text" Тогда
				ТаблицаПоказателей.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			Иначе
				ТаблицаПоказателей.Колонки.Добавить(СтрЗаменить(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяКолонки, "")," ", "_"), Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
			КонецЕсли;
			
			НомерКолонки = НомерКолонки + 1;
			Область = СпискиОтчета.Область(ВерхОбласти - 1, НомерКолонки);
			ИмяКолонки = Область.Текст;
			
		КонецЦикла;
		
		Если ТаблицаПоказателей.Колонки.Количество() = 0 Тогда
			Возврат ТаблицаПоказателей;
		КонецЕсли;
		
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			
			СтрокаСписка = ТаблицаПоказателей.Добавить();
			
			Для Каждого Колонка Из ТаблицаПоказателей.Колонки Цикл
				
				ЗначениеКолнки = СокрП(СпискиОтчета.Область(НомСтр, ТаблицаПоказателей.Колонки.Индекс(Колонка) + 1).Текст);
				Если Колонка.Имя = "Код" И ДополнятьКодСлева Тогда
					
					ЗначениеКолнки = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЗначениеКолнки, ДлинаКодаКлассификатора, СимволДополненияКода);
					
				КонецЕсли;
				
				СтрокаСписка[Колонка.Имя] = ЗначениеКолнки;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;

	Если ТаблицаПоказателей.Колонки.Количество() <> 0 Тогда
		ТаблицаПоказателей.Сортировать(ТаблицаПоказателей.Колонки[0].Имя + " Возр");
	КонецЕсли;
	
	Возврат ТаблицаПоказателей;

КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с потребителями БРО.

// Формирует автоматически в фоне формы регламентированных отчетов для выбранных налоговых органов.
// Предназначена для автоформирования регл. отчетов:
//   "6-НДФЛ (с 2021 года)";
//   "6-НДФЛ";
//   "Декларация по ЕНВД (за периоды, начиная с 01.01.2016)".
//
// Параметры:
//   СтруктураПараметров - Структура - ключи:
//     "ИмяОтчета" - Строка - имя регламентированного отчета;
//     "Организация" - СправочникСсылка.Организации - ссылка на организацию;
//     "ДатаНачалаПериодаОтчета" - Дата - дата начала периода отчета;
//     "ДатаКонцаПериодаОтчета" - Дата - дата конца периода отчета;
//     "НалоговыеОрганы" - СписокЗначений - список элементов справочника "РегистрацииВНалоговомОргане";
//     "АдресВоВременномХранилищеРезультатаАвтоформирования" - Строка - адрес во временном хранилище результата автоформирования;
//   НеиспользуемыйАдресХранилища - Строка - обязателен для совместимости с БСП, если процедура применяется как
//                                           диспетчер запуска автоформирования регламентированных отчетов в фоне
//                                           (необязателен в остальных случаях).
//
Процедура СформироватьАвтоматическиРеглОтчетВФоне(СтруктураПараметров, НеиспользуемыйАдресХранилища = "") Экспорт
	
	ИмяОтчета = СтруктураПараметров.ИмяОтчета;
	Организация = СтруктураПараметров.Организация;
	ДатаНачалаПериодаОтчета = СтруктураПараметров.ДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета = СтруктураПараметров.ДатаКонцаПериодаОтчета;
	НалоговыеОрганы = СтруктураПараметров.НалоговыеОрганы;
	АдресВоВременномХранилищеРезультатаАвтоформирования = СтруктураПараметров.АдресВоВременномХранилищеРезультатаАвтоформирования;
	
	ИмяФормыОтчета = Неопределено;
	СтруктураПараметров.Свойство("ИмяФормыОтчета", ИмяФормыОтчета);
	
	ПараметрыАвтоФормирования = Новый Структура;
	
	Если ИмяОтчета = "РегламентированныйОтчет6_НДФЛ" Тогда
		
		ПараметрыАвтоФормирования.Вставить("ИсточникОтчета", ИмяОтчета);
		ПараметрыАвтоФормирования.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
		ПараметрыАвтоФормирования.Вставить("Организация",    Организация);
		ПараметрыАвтоФормирования.Вставить("ДатаНачала",     ДатаНачалаПериодаОтчета);
		ПараметрыАвтоФормирования.Вставить("ДатаОкончания",  ДатаКонцаПериодаОтчета);
		
	КонецЕсли;
	
	РезультатАвтоформирования = Новый Массив;
	
	Для Каждого НалоговыйОрган Из НалоговыеОрганы Цикл
		
		ПараметрыАвтоФормирования.Вставить("КПП", НалоговыйОрган.Значение.КПП);
		ПараметрыАвтоФормирования.Вставить("НалоговыйОрган", НалоговыйОрган.Значение.Код);
		ПараметрыАвтоФормирования.Вставить("ОКТМО", НалоговыйОрган.Значение.КодПоОКТМО);
		ПараметрыАвтоФормирования.Вставить("РегистрацияВНалоговомОргане", НалоговыйОрган.Значение);
		ПараметрыАвтоФормирования.Вставить("РезультатАвтоформирования", РезультатАвтоформирования);
		
		СформироватьАвтоматическиРеглОтчет(ИмяОтчета,
										   Организация,
										   ДатаНачалаПериодаОтчета,
										   ДатаКонцаПериодаОтчета,
										   ,
										   ИмяФормыОтчета,
										   ПараметрыАвтоФормирования);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПараметрыАвтоФормирования.РезультатАвтоформирования,
								  АдресВоВременномХранилищеРезультатаАвтоформирования);
	
КонецПроцедуры

// Процедура обновляет сохраненные данные регламентированного отчета 
// заданного вида для указанной организации за нужный отчетный период.
//
// Параметры:
//	 ИсточникОтчета - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
// 	 Организация - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаНачала - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   ДатаОкончания - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//
// Пример:
//   ИнтерфейсыВзаимодействия.ОбновитьДанныеРеглОтчета("РегламентированныйОтчетРСВ1", Организация, '20120101', '20121231', СсылкаНаСохрРеглОтчет);
//
Процедура ОбновитьДанныеРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет) Экспорт
	Отчеты[ИсточникОтчета].ОбновитьДанныеРеглОтчета(Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
КонецПроцедуры

// Функция автоматически формирует регламентированный отчет заданного вида для указанной организации
// за нужный отчетный период, сохраняет его в ИБ и возвращает ссылку.
//
// Параметры:
//   ИсточникОтчета      - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация         - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаНачала          - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   ДатаОкончания       - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   КорректирующийОтчет - Булево - признак корректирующего отчета.
//   ИмяФормыОтчета      - Строка - строка с именем формы регламентированного отчета (определяет нужную из форм,
//                                  действующих в отчетном периоде).
//   ПараметрыАвтоФормирования - Структура - параметры автоматического формирования регл. отчета.
//
// Возвращемое значение:
//   ДокументСсылка.РегламентированныйОтчет - ссылка на документ "РегламентированныйОтчет".
//
// Пример:
//   ИнтерфейсыВзаимодействия.СформироватьАвтоматическиРеглОтчет("РегламентированныйОтчетРСВ1", Организация, '20120101', '20121231');
//
Функция СформироватьАвтоматическиРеглОтчет(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет = Ложь,
										   ИмяФормыОтчета = Неопределено, ПараметрыАвтоФормирования = Неопределено) Экспорт
	
	Если ИмяФормыОтчета = Неопределено Тогда
		ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания);
	КонецЕсли;
	
	Если ИмяФормыОтчета = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать отчет!';
													|en = 'Не удалось сформировать отчет!'"));
		Возврат ИмяФормыОтчета;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
		Возврат Отчеты[ИсточникОтчета].СформироватьАвтоматическиРеглОтчет(КорректирующийОтчет, ИмяФормыОтчета, ПараметрыАвтоФормирования);
	ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетСтатистикаФорма1Предприниматель"
		Или ИсточникОтчета = "РегламентированныйОтчет6НДФЛ"
		Или ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход"
		Или ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
		Возврат Отчеты[ИсточникОтчета].СформироватьАвтоматическиРеглОтчет(Организация, ДатаНачала, ДатаОкончания, КорректирующийОтчет,
			ИмяФормыОтчета, ПараметрыАвтоФормирования);
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(ИсточникОтчета, ИмяФормыОтчета).АвтоФормированиеНаСервере Тогда
		ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяФормыОтчета);
		ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
		Возврат ОтчетОбъект.СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоФормирования, КорректирующийОтчет);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Процедура устанавливает значение реквизита "Вид" формы РСВ-1.
//
// Параметры:
//   Ссылка              - ДокументСсылка.РегламентированныйОтчет - ссылка на регл. отчет.
//   КорректирующаяФорма - Булево - признак корректирующей формы.
//
Процедура УстановитьВидФормыРСВ_1(Ссылка, КорректирующаяФорма) Экспорт
	
	ОбъектРегОтчет = Ссылка.ПолучитьОбъект();
	ОбъектРегОтчет.Вид = ?(КорректирующаяФорма, 1, 0);
	ОбъектРегОтчет.Записать();
	
КонецПроцедуры

// Функция определяет для организации, подключен ли документооборот с контролирующим органом.
//
// Параметры:
//  Организация			 - СправочникСсылка.Организации - Организация, для которой определяется
//		наличие подключенного документооборота с контролирующим органом.
//  КонтролирующийОрган	 - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган, для 
//		которого определяется наличие подключения.
//  ПроверятьДляТекущегоПользователя - Булево - Если истина, доступ проверяется для текущего пользователя
// 		иначе в целом по организации. Если Организация не указана, то флаг ПроверятьДляТекущегоПользователя игнорируется
// Возвращаемое значение:
//  Булево - Истина, если документооборот с контролирующим органом подключен.
Функция ПодключенДокументооборотСКонтролирующимОрганом(
		Организация = Неопределено, 
		КонтролирующийОрган = Неопределено,
		ВыполнятьВПривилегированномРежиме = Истина,
		ПроверятьДляТекущегоПользователя = Ложь) Экспорт
		
	Если ВыполнятьВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ДокументооборотСКонтролирующимиОрганами) Тогда
		
		КонтекстЭДОСервер = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			ДокументооборотПодключен = КонтекстЭДОСервер.ПодключенДокументооборотСКонтролирующимОрганом(
				Организация, 
				КонтролирующийОрган, 
				ПроверятьДляТекущегоПользователя);
				
		Иначе
			ДокументооборотПодключен = КонтекстЭДОСервер.ХотяБыОднаОрганизацияИспользуетДокументооборот();
		КонецЕсли;
		
	Иначе
		ДокументооборотПодключен = Ложь;
	КонецЕсли;
	
	Возврат ДокументооборотПодключен;
	
КонецФункции

// Функция определяет, имеет ли организация учетную запись.
//
// Параметры:
//  Организация			 - СправочникСсылка.Организации - Организация, для которой определяется
//		наличие подключенного документооборота с контролирующим органом.
// Возвращаемое значение:
//  Булево - Истина, учетная запись есть.
Функция ОрганизацияИмеетУчетнуюЗапись(Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация, 
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Если РеквизитыОрганизации.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Возврат ЗначениеЗаполнено(РеквизитыОрганизации.УчетнаяЗаписьОбмена);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|	И Организации.УчетнаяЗаписьОбмена <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
			|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выбрать().Количество() > 0;
		
	КонецЕсли;
	
КонецФункции

// Конструктор параметров автоматического формирования регламентированных отчетов без открытия формы.
//
// Возвращаемое значение:
//   Структура - Содержит ключи с параметрами автоформирования.
//
Функция НовыйПараметрыАвтоформированияОтчета() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ИсточникОтчета", "");
	Параметры.Вставить("ИмяФормыОтчета", "");
	Параметры.Вставить("Организация");
	Параметры.Вставить("ДатаНачала", Дата(1, 1, 1));
	Параметры.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Параметры.Вставить("ЗаполнятьВнешнимиДанными", Ложь);
	Параметры.Вставить("ВнешниеДанные");
	Параметры.Вставить("СсылкаНаСохрРеглОтчет");
	Параметры.Вставить("Ошибки", Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает справки о доходах и суммах налога физических лиц из регламентированных отчетов "6-НДФЛ (с 2021 года)".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск
//                        отчетов "6-НДФЛ (с 2021 года)";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "6-НДФЛ (с 2021 года)";
//     * ИмяФормыОтчета - Строка - имя формы отчета "6-НДФЛ (с 2021 года)", например, "ФормаОтчета2024Кв2"
//                        (необязательное свойство; если отсутствует, значение будет получено автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "6-НДФЛ (с 2021 года)";
//     * КПП - Строка - КПП из отчета "6-НДФЛ (с 2021 года)";
//     * ОКТМО - Строка - код по ОКТМО из отчета "6-НДФЛ (с 2021 года)";
//     * СправкиОДоходахИСуммахНалогаФизическихЛиц - ДеревоЗначений - справки о доходах и
//                            суммах налога физических лиц из отчета "6-НДФЛ (с 2021 года)".
//
Функция СправкиОДоходахИСуммахНалогаФизическихЛицИзОтчетов6_НДФЛ(СтруктураПараметров) Экспорт
	Возврат РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(
		"РегламентированныйОтчет6_НДФЛ").СправкиОДоходахИСуммахНалогаФизическихЛицИзОтчетов6_НДФЛ(СтруктураПараметров);
КонецФункции

// Возвращает персонифицированные сведения о застрахованных лицах из регламентированных отчетов
// "Расчет по страховым взносам".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск отчетов
//                        "Расчет по страховым взносам";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "Расчет по страховым взносам";
//     * ИмяФормыОтчета - Строка - имя формы отчета "Расчет по страховым взносам", например, "ФормаОтчета2025Кв1"
//                        (необязательное свойство; если отсутствует, значение будет получено автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "Расчет по страховым взносам";
//     * ПерсонифицированныеСведенияОЗастрахованныхЛицах - ДеревоЗначений - персонифицированные
//                     сведения о застрахованных лицах из отчета "Расчет по страховым взносам".
//
Функция ПерсонифицированныеСведенияОЗастрахованныхЛицахИзРасчетовПоСтраховымВзносам(СтруктураПараметров) Экспорт
	Возврат РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(
		"РегламентированныйОтчетРасчетПоСтраховымВзносам").ПерсонифицированныеСведенияОЗастрахованныхЛицахИзРасчетовПоСтраховымВзносам(СтруктураПараметров);
КонецФункции

// Возвращает персональные данные физических лиц и сведения о суммах выплат и иных вознаграждений в их пользу
// из регламентированных отчетов "Персонифицированные сведения о физических лицах".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск отчетов
//                        "Персонифицированные сведения о физических лицах";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "Персонифицированные сведения
//                        о физических лицах";
//     * ИмяФормыОтчета - Строка - имя формы отчета "Персонифицированные сведения о физических лицах", например,
//                        "ФормаОтчета2023Кв1" (необязательное свойство; если отсутствует, значение будет получено
//                        автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "Персонифицированные сведения о физических лицах";
//     * ПерсональныеДанныеИВыплаты - ДеревоЗначений - персональные данные физических лиц и сведения о суммах выплат
//                                    и иных вознаграждений в их пользу из из отчета "Персонифицированные сведения о
//                                    физических лицах".
//
Функция ПерсональныеДанныеИВыплатыИзПерсонифицированныхСведенийОФизическихЛицах(СтруктураПараметров) Экспорт
	Возврат РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(
		"РегламентированныйОтчетПерсонифицированныеСведенияОФизическихЛицах").ПерсональныеДанныеИВыплатыИзПерсонифицированныхСведенийОФизическихЛицах(СтруктураПараметров);
КонецФункции

// Рассчитывает значения показателей экземпляра раздела регламентированного отчета.
// Для работы требуется наличие одноименной экспортной процедуры в модуле объекта
// регламентированного отчета, для которой предусмотрена аналогичная параметризация.
//
// Параметры:
//   ПараметрыРасчета - Cтруктура со свойствами:
//     * ИмяОтчета   - Строка - имя регламентированного отчета (обязательное);
//     * ИмяФормы    - Строка - имя формы регламентированного отчета (обязательное);
//     * ИмяРаздела  - Строка - имя раздела регламентированного отчета (обязательное);
//     * Разрядность - Число  - число знаков дробной части, до которых округлять (0 - до целого, 1 - до десятых, т.д.),
//                              значение по умолчанию 0.
//     * Класс       - Число  - соответствует формату отображаемого значения (1 - в единицах, 1000 - в тысячах,
//                     1000000 - в миллионах, т.д.), значение по умолчанию 1.
//   Данные - Структура - немногострочные данные раздела регламентированного отчета: ключ - имя показателя,
//            значение - значение показателя.
//
// Пример параметризации:
//	ПараметрыРасчета = Новый Структура;
//	ПараметрыРасчета.Вставить("ИмяОтчета",  "РегламентированныйОтчетЗемельныйНалог");
//	ПараметрыРасчета.Вставить("ИмяФормы",   "ФормаОтчета2018Кв1");
//	ПараметрыРасчета.Вставить("ИмяРаздела", "Раздел2");
//
Процедура РассчитатьПоказателиРеглОтчета(ПараметрыРасчета, Данные) Экспорт
	
	Если Метаданные.Отчеты.Найти(ПараметрыРасчета.ИмяОтчета) = Неопределено
		ИЛИ Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отч = РегламентированнаяОтчетность.РеглОтчеты(ПараметрыРасчета.ИмяОтчета, , Ложь);
	
	НаименованиеТипа = "ОтчетМенеджер.РегламентированныйОтчетЗемельныйНалог";
	
	Если ТипЗнч(Отч) = Тип(НаименованиеТипа) Тогда
		ОбъектОтчет = Отч.Создать();
	ИначеЕсли ТипЗнч(Отч) = Тип("ОтчетОбъект") Тогда
		ОбъектОтчет = Отч;
	Иначе
		ОбъектОтчет = Отчеты[ПараметрыРасчета.ИмяОтчета].Создать();
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.Свойство("Разрядность") Тогда
		ПараметрыРасчета.Вставить("Разрядность", 0);
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("Класс") Тогда
		ПараметрыРасчета.Вставить("Класс", 1);
	КонецЕсли;
	
	ОбъектОтчет.РассчитатьПоказателиРеглОтчета(ПараметрыРасчета, Данные);
	
КонецПроцедуры

// Машиночитаемые бланки персонифицированных сведений о застрахованных лицах, сформированные алгоритмами печати
// отчета "Расчет по страховым взносам".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация (обязательное) - СправочникСсылка.Организации - организация (см. в форме "Расчет по страховым
//                   взносам");
//     * МассивФизическихЛиц (обязательное) - Массив - произвольные идентификаторы, используемые для отбора сведений,
//                   а также устанавливаемые в качестве Ключей в возвращаемое Соответствие (в случае отсутствия
//                   указанных идентификаторов, в качестве Ключей в возвращаемое Соответствие устанавливаются
//                   сгенерированные значения уникальных идентификаторов);
//     * ДатаПодписи (обязательное) - Дата - дата подписи (см. в форме "Расчет по страховым взносам");
//     * ДатаКонцаПериодаОтчета (обязательное) - Дата - дата конца квартала, определяющая расчетный (отчетный) период
//                   (см. в форме "Расчет по страховым взносам");
//     * ДатаНачалаПериодаОтчета (необязательное) - Дата - дата начала расчетного (отчетного) периода (см. в форме
//                   "Расчет по страховым взносам"; если отсутствует, будет установлена дата начала календарного года,
//                   получанная из ДатаКонцаПериодаОтчета).
//
// Возвращаемое значение:
//  Соответствие или Неопределено. Ключи Соответствия идентифицируют физических лиц, а сопоставляемые с ними Значения -
//  Массивы Табличных документов (бланков). Неопределено будет возвращено, если отсутствует возможность сформировать
//  бланки при заданных параметрах.
//
Функция ПерсонифицированныеСведенияОЗастрахованныхЛицахДляПечати(ПараметрыПечати) Экспорт
	
	ИсточникОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам";
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
	ИсточникОтчета, ПараметрыПечати.ДатаКонцаПериодаОтчета);
	
	Если НЕ ЗначениеЗаполнено(ИмяФормыОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяФормыОтчета);
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыПечати.Вставить("ИсточникОтчета", ИсточникОтчета);
	ПараметрыПечати.Вставить("ИмяФормыОтчета", ИмяФормыОтчета);
	
	Возврат ОтчетОбъект.ПерсонифицированныеСведенияОЗастрахованныхЛицахДляПечати(ПараметрыПечати);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции автозаполнения по данным ИБ конфигурации - потребителя БРО.

// Процедура получает из коллекции раздел отчета и проверяет, что он может быть заполнен в этом модуле
//
// Параметры:
//   Контейнер - Структура - данные регл. отчета.
//   ИмяРазделаБРО - Строка - имя раздела регл. отчета.
//
// Возвращаемое значение:
//   ТаблицаЗначений - разделы отчета.
//
Функция РазделБРО(Контейнер, ИмяРазделаБРО) Экспорт
	
	Если Не Контейнер.Свойство(ИмяРазделаБРО) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазделБРО = Контейнер[ИмяРазделаБРО];
	
	Если ТипЗнч(РазделБРО) <> Тип("ТаблицаЗначений") 
		И ТипЗнч(РазделБРО) <> Тип("ДанныеФормыКоллекция") Тогда
		// Не умеем такие обрабатывать.
		Возврат Неопределено;
	КонецЕсли;
	
	Если РазделБРО.Количество() = 0 Тогда
		// Не можем заполнить - должна быть как минимум одна страница,
		// предоставляющая перечень полей и типы данных в них.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РазделБРО;
	
КонецФункции

// Добавляет новую страницу.
//
Процедура ДобавитьСтраницуБРО(РазделБРО) Экспорт
	
	НоваяСтраница = РазделБРО.Добавить();
	Образец = РазделБРО[0];
	НоваяСтраница.Данные = ОбщегоНазначения.СкопироватьРекурсивно(Образец.Данные);
	
КонецПроцедуры

// Распаковывает показатели.
//
Функция РаспаковатьПоказателиБРО(СтраницаБРО) Экспорт
	
	// Техническая особенность БРО:
	// показатели хранятся внутри списка значений, в котором всегда одна строка.
	ХранилищеПоказателейБРО = СтраницаБРО.Данные;
	Если ХранилищеПоказателейБРО.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиБРО = ХранилищеПоказателейБРО[0].Значение;
	Если ТипЗнч(ПоказателиБРО) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПоказателиБРО;
	
КонецФункции

// Помещает значение показателя на страницу.
//
Процедура ПоместитьЗначениеПоказателяНаСтраницуБРО(СтраницаБРО, НомерЯчейкиБРО, Значение) Экспорт
	
	ПоказателиБРО = РаспаковатьПоказателиБРО(СтраницаБРО);
	Если ПоказателиБРО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// БРО предоставляет контейнер, инициализированный номерами ячеек.
	Если Не ПоказателиБРО.Свойство(НомерЯчейкиБРО) Тогда
		Возврат;
	КонецЕсли;
	
	// В ходе заполнения нельзя менять тип значения в контейнере.
	ТекущееЗначение = ПоказателиБРО[НомерЯчейкиБРО];
	ДопустимыйТип   = ТипЗнч(ТекущееЗначение);
	
	Если ТипЗнч(Значение) = ДопустимыйТип Тогда
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, Значение);
	Иначе
		// Очистка значения.
		ОписаниеТипов = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДопустимыйТип));
		ПоказателиБРО.Вставить(НомерЯчейкиБРО, ОписаниеТипов.ПривестиЗначение(Значение));
	КонецЕсли;
	
КонецПроцедуры

// Определяет вид государственного органа, в который сдается отчет переданного вида.
//
// Параметры:
//   ИмяОтчета - Строка - название регламентированного отчета, см. ИмяРеглОтчета().
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыКонтролирующихОрганов - вид государственного органа.
//
Функция ВидКонтролирующегоОргана(ИмяОтчета) Экспорт
	
	Возврат РегламентированнаяОтчетность.ВидКонтролирующегоОргана(ИмяОтчета);
	
КонецФункции

#Область ПроцедурыИФункцииСпискаЗадачБухгалтера

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с сервисом "Список задач
// бухгалтера".

// Описывает перечень требований, которые могут быть исполнены объектами БРО.
//
// Возвращаемое значение:
//  Соответствие - 
//   Ключ - Строка, имя требования (может содержать точку - ".")
//   Значение - Строка, имя регл. отчета
Функция РеглОтчетыИсполнителиТребований() Экспорт
	Возврат РегламентированнаяОтчетностьПовтИсп.РеглОтчетыИсполнителиТребований();
КонецФункции

// Описывает перечень задач бухгалтера (налогов, отчетов), которые могут быть исполнены объектами БРО.
//
// Возвращаемое значение:
//  Соответствие - 
//   Ключ - Строка, имя задачи (не содержит точку - ".")
//   Значение - Массив строк - имен регл. отчетов
Функция РеглОтчетыИсполнителиЗадачБухгалтера() Экспорт
	
	НалогиОтчеты = Новый Соответствие;
	
	Для Каждого Требование Из РеглОтчетыИсполнителиТребований() Цикл
		ИмяНалогаОтчета = ИмяНалогаОтчета(Требование.Ключ);
		РеглОтчеты = НалогиОтчеты[ИмяНалогаОтчета];
		Если РеглОтчеты = Неопределено Тогда
			РеглОтчеты = Новый Массив;
			НалогиОтчеты.Вставить(ИмяНалогаОтчета, РеглОтчеты);
		КонецЕсли;
		РеглОтчеты.Добавить(Требование.Значение);
	КонецЦикла;
	
	Возврат НалогиОтчеты;
	
КонецФункции

// Определяет, обрабатывает ли БРО указанное требование.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//
// Возвращаемое значение:
//   Булево - признак обработки БРО указанных требований.
//
Функция ТребованиеОбрабатывается(Требование) Экспорт
	
	Возврат ИмяРеглОтчета(Требование) <> Неопределено;
	
КонецФункции

// Описывает форму нового или существующего регл. отчета, который позволяет выполнить требование
//
// Параметры:
//   Требование    - Строка - имя требования (может содержать точку - ".").
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на элемент справочника "РегистрацииВНалоговомОргане".
//   НачалоПериода - Дата - дата начала периода.
//   КонецПериода  - Дата - дата окончания периода.
//   Периодичность - ПеречислениеСсылка.Периодичность - периодичность.
//
// Возвращаемое значение:
//   Структура - содержит ключи:
//     * Имя - Строка - имя формы;
//     * Параметры - Структура - параметры формы.
//
Функция ОписаниеФормыРеглОтчета(Требование, Организация, РегистрацияВНалоговомОргане, Знач НачалоПериода, Знач КонецПериода, Знач Периодичность) Экспорт
	
	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Особые случаи отчетов, которые предоставляются не только по окончанию отчетного периода, но и на отдельные даты.
	Если Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации" Тогда
		
		// Отчет всегда имеет периодичность год, но для вновь созданных организаций также предоставляется на 1 число месяца,
		// следующего за месяцем регистрации организации.
		Периодичность = Перечисления.Периодичность.Год;
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, НачалоПериода);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, КонецПериода);
		
	КонецЕсли;
	
	ОписаниеФормыРеглОтчета = Новый Структура;
	ОписаниеФормыРеглОтчета.Вставить("Имя",       "");
	ОписаниеФормыРеглОтчета.Вставить("Параметры", Новый Структура);
	
	ЭкземплярыРеглОтчета = Новый Массив;
	
	КорректирующиеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		ИмяРеглОтчета,
		Организация,
		НачалоДня(КонецПериода),
		Истина,
		РегистрацияВНалоговомОргане);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭкземплярыРеглОтчета, КорректирующиеОтчеты);
	
	ПервичныеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		ИмяРеглОтчета,
		Организация, 
		НачалоДня(КонецПериода), 
		Ложь,
		РегистрацияВНалоговомОргане);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭкземплярыРеглОтчета, ПервичныеОтчеты);
	
	Если ЭкземплярыРеглОтчета.Количество() > 0
	   И ИмяРеглОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников" Тогда
		
		Для Каждого ЭкземплярРеглОтчета Из ЭкземплярыРеглОтчета Цикл
			
			// При создании новой организации отчетов о среднесписочной численности могут быть несколько:
			//  - по состоянию на 1 число месяца, следующего за месяцем регистрации;
			//  - по состоянию на 1 января за предыдущий календарный год.
			ЭтоМесячныйОтчет = Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации";
			ОтчетПоСостояниюНаДату = ЭкземплярРеглОтчета.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ДатаПериод;
			
			Если (ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) <> 1)
				ИЛИ (НЕ ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) = 1) Тогда
				
				ОписаниеФормыРеглОтчета.Имя = "Документ.РегламентированныйОтчет.ФормаОбъекта";
				
				ОписаниеФормыРеглОтчета.Параметры.Вставить("Ключ", ЭкземплярРеглОтчета);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЭкземплярыРеглОтчета.Количество() > 0
			И ИмяРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
		
		Для Индекс = 0 По ЭкземплярыРеглОтчета.Количество() - 1 Цикл
			ЭкземплярРеглОтчета = ЭкземплярыРеглОтчета[Индекс];
			Если Не Отчеты[ИмяРеглОтчета].ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения(ЭкземплярРеглОтчета) Тогда
				ОписаниеФормыРеглОтчета.Имя = "Документ.РегламентированныйОтчет.ФормаОбъекта";
				ОписаниеФормыРеглОтчета.Параметры.Вставить("Ключ", ЭкземплярРеглОтчета);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭкземплярыРеглОтчета.Количество() > 0 Тогда
		
		ОписаниеФормыРеглОтчета.Имя = "Документ.РегламентированныйОтчет.ФормаОбъекта";
		
		ОписаниеФормыРеглОтчета.Параметры.Вставить("Ключ", ЭкземплярыРеглОтчета[0]);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОписаниеФормыРеглОтчета.Имя) Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыРеглОтчета(
		ИмяРеглОтчета, Организация, РегистрацияВНалоговомОргане, НачалоПериода, КонецПериода, Периодичность);
		
		Если ПараметрыОткрытия = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОписаниеФормыРеглОтчета.Имя = "Отчет." + ИмяРеглОтчета + ".Форма." + ПараметрыОткрытия.мВыбраннаяФорма;
		ОписаниеФормыРеглОтчета.Параметры = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОткрытия);
		
		// Особые случаи.
		//
		Если Требование = "БухгалтерскаяОтчетность.2013_НекоммерческиеОрганизации" Тогда
			
			ОписаниеФормыРеглОтчета.Параметры.Вставить("ЭтоБалансНекоммерческойОрганизации", Истина);
			
		ИначеЕсли Требование = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации" Тогда
			
			ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация, , "ДатаРегистрации");
			
			ОписаниеФормыРеглОтчета.Параметры.Вставить("ДатаРегистрацииОрганизации", ОргСведения.ДатаРегистрации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеФормыРеглОтчета;
	
КонецФункции

// Получает данные, сохраненные в регл. отчете - о суммах, которые следует уплатить по декларации.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//   Организация - СправочникСсылка.Организации - ссылка на организацию.
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - ссылка на элемент справочника "РегистрацииВНалоговомОргане".
//   ПериодДекларации - Дата - дата окончания периода (без времени).
//   ДополнительныеПараметры - Структура - дополнительные параметры, если необходимо уточнение получения данных (необязательный параметр),
//                             при этом функция "ДанныеРеглОтчета" соответствующего регламентированного отчета должна поддерживать работу с этим параметром
//                             (пример см. в модуле менеджера отчета "РегламентированныйОтчетНДС").
//                             Также нужно для поиска декларации по налогу на прибыль, см. АктуальныйОтчет.
//
// Возвращаемое значение:
//   Неопределено,
//   ТаблицаЗначений - описанная в НовыйТаблицаДанныхРеглОтчета().
//
Функция ДанныеРеглОтчетаДляУплатыНалога(Требование, Организация, РегистрацияВНалоговомОргане,
	ПериодДекларации, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭкземплярРеглОтчета = АктуальныйОтчет(ИмяРеглОтчета, Организация, ПериодДекларации, РегистрацияВНалоговомОргане,, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ЭкземплярРеглОтчета) Тогда
		Если ИмяРеглОтчета = "РегламентированныйОтчетНДС" Или ИмяРеглОтчета = "РегламентированныйОтчетПрибыль" Тогда
			Платежи = Отчеты[ИмяРеглОтчета].ДанныеРеглОтчета(ЭкземплярРеглОтчета, ДополнительныеПараметры);
		Иначе
			Платежи = Отчеты[ИмяРеглОтчета].ДанныеРеглОтчета(ЭкземплярРеглОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если Платежи = Неопределено Тогда
		Платежи = НовыйТаблицаДанныхРеглОтчета();
	КонецЕсли;
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("Ссылка",              ЭкземплярРеглОтчета);
	ДанныеРеглОтчета.Вставить("ДатаПодписи",         ЭкземплярРеглОтчета.ДатаПодписи);
	ДанныеРеглОтчета.Вставить("КодНалоговогоОргана", ЭкземплярРеглОтчета.КодНалоговогоОргана);
	ДанныеРеглОтчета.Вставить("Платежи",             Платежи);
	
	Возврат ДанныеРеглОтчета;
	
КонецФункции

// Возвращает последний отчет за налоговый период
//
// Параметры:
//  ИсточникОтчета - Строка - наименование регламентированного отчета (совпадает с именем объекта метаданных)
//  Организация - СправочникСсылка.Организации
//  ПериодДекларации  - Дата - правая граница отчетного периода
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//  ФормаОтчета - Строка
//  ДополнительныеПараметры - Структура
//
// Возвращаемое значение:
//   РегламентированныйОтчетСсылка
//
Функция АктуальныйОтчет(ИсточникОтчета, Организация, ПериодДекларации, РегистрацияВНалоговомОргане = Неопределено, ФормаОтчета = "", ДополнительныеПараметры = Неопределено) Экспорт
	
	АктуальныйОтчет = Документы.РегламентированныйОтчет.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ИсточникОтчета) Тогда
		Возврат АктуальныйОтчет;
	КонецЕсли;
	
	КорректирующиеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
		ИсточникОтчета,
		Организация,
		НачалоДня(ПериодДекларации),
		Истина,
		РегистрацияВНалоговомОргане,
		ФормаОтчета);
	
	ЗаполнитьАктуальныйОтчет(АктуальныйОтчет, КорректирующиеОтчеты, ИсточникОтчета, ДополнительныеПараметры);
	
	Если Не ЗначениеЗаполнено(АктуальныйОтчет) Тогда
		
		ПервичныеОтчеты = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет(
			ИсточникОтчета,
			Организация,
			НачалоДня(ПериодДекларации),
			Ложь,
			РегистрацияВНалоговомОргане,
			ФормаОтчета); 
			
		ЗаполнитьАктуальныйОтчет(АктуальныйОтчет, ПервичныеОтчеты, ИсточникОтчета, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Возврат АктуальныйОтчет;
	
КонецФункции

// Получает данные, сохраненные в уведомлении/уведомлениях - о суммах, которые следует уплатить по декларации.
//
// Параметры:
//   Требование  - Строка - имя требования (может содержать точку - ".").
//   Организация - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   Конец       - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Неопределено,
//   ТаблицаЗначений - описанная в НовыйТаблицаДанныхРеглОтчета().
//
Функция ДанныеУведомленияДляУплатыНалога(Требование, Организация, Конец) Экспорт
	РегНО = Неопределено;
	Платежи = Документы.УведомлениеОСпецрежимахНалогообложения.ДанныеУведомления(Требование, Организация, РегНО, Конец);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("Ссылка",              Неопределено);
	ДанныеРеглОтчета.Вставить("ДатаПодписи",         Неопределено);
	ДанныеРеглОтчета.Вставить("КодНалоговогоОргана", РегНО);
	ДанныеРеглОтчета.Вставить("Платежи",             Платежи);
	
	Возврат ДанныеРеглОтчета;
КонецФункции

// Информирует о необходимости платить торговый сбор в указанном периоде (по наличию/отсутствию уведомлений по форме ТС-1/ТС-2).
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   НачалоПериода - Дата - дата начала периода (без времени).
//   КонецПериода  - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Булево - Истина - организация должно платить торговый сбор в периоде (есть соответствующие уведомления),
//            Ложь - иначе.
//
Функция ПлательщикТорговогоСбора(НачалоПериода, КонецПериода, Организация) Экспорт
	НачалоПериодаПарам = ?(ЗначениеЗаполнено(НачалоПериода), НачалоДня(НачалоПериода), НачалоПериода);
	КонецПериодаПарам = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), КонецПериода);
	Возврат Документы.УведомлениеОСпецрежимахНалогообложения.ПлательщикТорговогоСбора(НачалоПериодаПарам, КонецПериодаПарам, Организация);
КонецФункции 

// Описывает структуру таблицы значений с данными регл. отчета
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные регл. отчета.
//
Функция НовыйТаблицаДанныхРеглОтчета() Экспорт
	
	ТаблицаДанныхРеглОтчета = Новый ТаблицаЗначений;
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Период",	  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("ОКАТО",  	  Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("КБК",       Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Аванс",     Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхРеглОтчета.Колонки.Добавить("Агент",     Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхРеглОтчета;
	
КонецФункции

// Предоставляет пользовательское представление формы регл. отчета.
//
// Параметры:
//   Требование   - Строка - имя требования (может содержать точку - ".").
//   ПериодОтчета - Дата - дата окончания периода (без времени).
//
// Возвращаемое значение:
//   Строка - представление формы регламентированного отчета.
//
Функция ПредставлениеФормыРегламентированногоОтчета(Требование, ПериодОтчета) Экспорт

	ИмяРеглОтчета = ИмяРеглОтчета(Требование);
	
	Если ИмяРеглОтчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФормыРеглОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИмяРеглОтчета, ПериодОтчета);
	
	Возврат Метаданные.Отчеты[ИмяРеглОтчета].Формы[ИмяФормыРеглОтчета].Синоним;
	
КонецФункции

// Определяет список регл. отчетов, которые не предназначены для выполнения каких-либо формализованных требований.
// Служит для проверки, что в календаре бухгалтера внесены все требования, которые может исполнять программа.
// 
// Возвращаемое значение:
//   Массив - массив строк.
//
Функция РеглОтчетыСверхТребований() Экспорт
	
	РеглОтчетыСверхТребований = Новый Массив;
	
	РеглОтчеты = Новый Соответствие;
	// Составим список всех отчетов, затем исключим те, которые участвуют в выполнении тех или иных требований.
	// То, что останется - сверх требований.
	// Исключенными считаем элементы соответствия с значением Ложь.
	
	СписокОтчетов = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов();
	Для Каждого ЭлементСписка Из СписокОтчетов Цикл
		РеглОтчеты.Вставить(ЭлементСписка.Значение, Истина);
	КонецЦикла;
	
	ИсполнителиТребований = РеглОтчетыИсполнителиТребований();
	Для Каждого ЭлементСписка Из ИсполнителиТребований Цикл
		РеглОтчеты.Вставить(ЭлементСписка.Значение, Ложь);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из РеглОтчеты Цикл
		Если ЭлементСписка.Значение = Истина Тогда
			РеглОтчетыСверхТребований.Добавить(ЭлементСписка.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеглОтчетыСверхТребований;
	
КонецФункции

// Определяет имя регл. отчета, который позволяет исполнить требование.
//
// Параметры:
//   Требование - Строка - имя требования (может содержать точку - ".").
//   ИсполнителиТребований - Соответствие - возвращаемое РеглОтчетыИсполнителиТребований().
//                           Следует передавать, если функция используется многократно (в цикле).
//
// Возвращаемое значение:
//   Строка - имя регламентированного отчета.
//
Функция ИмяРеглОтчета(Знач Требование, ИсполнителиТребований = Неопределено) Экспорт
	
	Требование = ВРег(Требование);
	
	Если ИсполнителиТребований = Неопределено Тогда
		ИсполнителиТребований = РеглОтчетыИсполнителиТребований();
	КонецЕсли;
	
	РегламентированныйОтчет = ИсполнителиТребований[Требование];
	
	Если РегламентированныйОтчет = Неопределено Тогда
		
		ИмяНалогаОтчета = ИмяНалогаОтчета(Требование);
		РегламентированныйОтчет = ИсполнителиТребований[ИмяНалогаОтчета];
		
	КонецЕсли;
	
	Возврат РегламентированныйОтчет;
	
КонецФункции

// Описывает регл. отчеты, экземпляры которых присутствуют в информационной базе.
// Такие отчеты должны быть видны в списке экземпляров отчетов, несмотря на настройки конфигурации.
//
// Параметры:
//   Организации - СправочникСсылка.Организации - ссылка на организацию.
//   РеглОтчеты - Массив - массив строк имен регл. отчетов, среди которых надо найти те, которые нельзя скрывать.
//
// Возвращаемое значение:
//   Массив строк - имена объектов метаданных "Отчет".
//
Функция РеглОтчетыКоторыеНельзяСкрыватьНастройкамиКонфигурации(Организации, РеглОтчеты = Неопределено) Экспорт
	
	НельзяСкрыватьОтчеты = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Если РеглОтчеты = Неопределено Тогда
		Запрос.УстановитьПараметр("РеглОтчеты",             Новый Массив);
		Запрос.УстановитьПараметр("НетОтбораПоРеглОтчетам", Истина);
	Иначе
		Запрос.УстановитьПараметр("РеглОтчеты",             РеглОтчеты);
		Запрос.УстановитьПараметр("НетОтбораПоРеглОтчетам", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегламентированныйОтчет.ИсточникОтчета КАК ИмяОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация В(&Организации)
	|	И (&НетОтбораПоРеглОтчетам
	|			ИЛИ РегламентированныйОтчет.ИсточникОтчета В (&РеглОтчеты))";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НельзяСкрыватьОтчеты.Вставить(Выборка.ИмяОтчета);
	КонецЦикла;
	
	Возврат НельзяСкрыватьОтчеты;
	
КонецФункции

// Определяет имя задачи бухгалтера (налога, отчета) по имени требования.
// Имя требования начинается с имени задач. Имя задачи отделено точкой - "."
//
// Параметры:
//   Требование - Строка - имя требования (содержит точку - ".").
//
// Возвращаемое значение:
//   Строка - имя задачи (не содержит точку - ".").
//
Функция ИмяНалогаОтчета(Требование) Экспорт
	
	ПозицияТочки = СтрНайти(Требование, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат Требование;
	Иначе 
		Возврат Лев(Требование, ПозицияТочки - 1);
	КонецЕсли;
	
КонецФункции

// Процедура получает ссылки на сохраненные регламентированные отчеты заданного вида.
// В переданную таблицу ПараметрыРеглОтчетов добавляется колонка Документы с колонками:
//  * Ссылка                   - ДокументСсылка.РегламетированныйОтчет - Ссылка на отчет.
//  * Дата                     - Дата - Дата подписи регламентированного отчета.
//  * Статус                   - Строка - Описание статуса сдачи отчета.
//  * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - Статус отправки через 1С-Отчетность.
//  * НаименованиеОтчета       - Строка - Пользовательское представление отчета.
//  * ФинансовыйПериод         - Строка - Пользовательское представление периода отчета.
//  * ВариантОтчета            - Строка - Описание варианта отчета (П - первичный, К/N - корректировочный).
//  * ПредставлениеКонтролирующегоОргана - Строка - Название контролирующего органа, в который предоставляется отчет.
//  * Комментарий                        - Строка - Пользовательский комментарий к отчету.
//
// Ссылки на регл. отчеты отсортированы в хронологическом порядке по убыванию.
//
//  Параметры:
//   * ПараметрыРеглОтчетов - ТаблицаЗначений - Определяет параметры отбора отчетов:
//   	** ИсточникОтчета      - Строка - Наименование регламентированного отчета (совпадает с именем объекта метаданных).
//   	** Организация         - СправочникСсылка.Организации - Организация отчета.
//   	** ДатаОкончания       - Дата (без времени) - Дата окончания отчетного периода (правая граница отчетного периода).
//   	** РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Налоговый орган.
//   	** Правило                     - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - Может не заполняться, но должна присутствовать в таблице.
//   * ОтборПоВыбраннойФормеРеглОтчета - Булево - Признак, нужно ли, чтобы отчет был по форме, действующей в отчетном периоде.
//
Процедура ЗаполнитьСсылкиНаРеглОтчеты(ПараметрыРеглОтчетов, ОтборПоВыбраннойФормеРеглОтчета = Ложь) Экспорт
	
	// Индекс нужен для группировки нескольких документов по одному набору параметров.
	ПараметрыРеглОтчетов.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	ПараметрыРеглОтчетов.Колонки.Добавить("ВыбраннаяФорма", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		
		ПараметрыРеглОтчета.Индекс = ПараметрыРеглОтчетов.Индекс(ПараметрыРеглОтчета);
		
		Если ОтборПоВыбраннойФормеРеглОтчета Тогда
			// Необходимо найти регл отчеты с актуальной в периоде формой.
			
			ВыбраннаяФорма = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
				ПараметрыРеглОтчета.ИсточникОтчета, ПараметрыРеглОтчета.ДатаОкончания);
			
			ПараметрыРеглОтчета.ВыбраннаяФорма = ?(ВыбраннаяФорма = Неопределено, "", ВыбраннаяФорма);
			
		Иначе
			// Необходимо найти отчеты с любой формой, не обязательно самой актуальной.
			
			ПараметрыРеглОтчета.ВыбраннаяФорма = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПараметрыРеглОтчетов", ПараметрыРеглОтчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ВЫРАЗИТЬ(ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК Справочник.РегистрацииВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ПараметрыРеглОтчетов.Правило КАК Правило
	|ПОМЕСТИТЬ ПараметрыРеглОтчетов
	|ИЗ
	|	&ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ИсточникОтчета,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыРеглОтчетов.Индекс КАК Индекс,
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	РегламентированныйОтчет.Вид КАК Вид,
	|	РегламентированныйОтчет.Дата КАК ДатаОтчета,
	|	РегламентированныйОтчет.ДатаПодписи КАК Дата,
	|	ПараметрыРеглОтчетов.ИсточникОтчета КАК ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация КАК Организация,
	|	РегламентированныйОтчет.ДатаНачала КАК ДатаНачала,
	|	ПараметрыРеглОтчетов.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РегламентированныйОтчет.ВыбраннаяФорма КАК ВыбраннаяФорма,
	|	ПараметрыРеглОтчетов.Правило КАК Правило,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Статус, """""""") КАК Статус,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)) КАК СостояниеСдачиОтчетности,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.НаименованиеОтчета, """") КАК НаименованиеОтчета,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ФинансовыйПериод, """") КАК ФинансовыйПериод,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ВариантОтчета, """") КАК ВариантОтчета,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.ПредставлениеКонтролирующегоОргана, """") КАК ПредставлениеКонтролирующегоОргана,
	|	ЕСТЬNULL(ЖурналОтчетовСтатусы.Комментарий, """") КАК Комментарий
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ПО РегламентированныйОтчет.Организация = ПараметрыРеглОтчетов.Организация
	|			И РегламентированныйОтчет.ИсточникОтчета = ПараметрыРеглОтчетов.ИсточникОтчета
	|			И РегламентированныйОтчет.ДатаОкончания = ПараметрыРеглОтчетов.ДатаОкончания
	|			И (ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|				ИЛИ РегламентированныйОтчет.КодНалоговогоОргана = ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО РегламентированныйОтчет.Организация = ЖурналОтчетовСтатусы.Организация
	|			И РегламентированныйОтчет.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыРеглОтчетов.Индекс,
	|	УведомлениеОСпецрежимахНО.Ссылка,
	|	0,
	|	УведомлениеОСпецрежимахНО.Дата,
	|	УведомлениеОСпецрежимахНО.ДатаПодписи,
	|	ПараметрыРеглОтчетов.ИсточникОтчета,
	|	ПараметрыРеглОтчетов.Организация,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ПараметрыРеглОтчетов.ДатаОкончания,
	|	ПараметрыРеглОтчетов.РегистрацияВНалоговомОргане,
	|	УведомлениеОСпецрежимахНО.ИмяФормы,
	|	ПараметрыРеглОтчетов.Правило,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СтатусОтправки, """"""""),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.СостояниеСдачиОтчетности, ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПустаяСсылка)),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Наименование, """"),
	|	"""",
	|	0,
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.ПредставлениеКонтролирующегоОргана, """"),
	|	ЕСТЬNULL(ЖурналУведомленийСтатусы.Комментарий, """")
	|ИЗ
	|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыРеглОтчетов КАК ПараметрыРеглОтчетов
	|		ПО УведомлениеОСпецрежимахНО.Организация = ПараметрыРеглОтчетов.Организация
	|			И УведомлениеОСпецрежимахНО.ИмяОтчета = ПараметрыРеглОтчетов.ИсточникОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналУведомленийСтатусы
	|		ПО УведомлениеОСпецрежимахНО.Организация = ЖурналУведомленийСтатусы.Организация
	|			И УведомлениеОСпецрежимахНО.Ссылка = ЖурналУведомленийСтатусы.Ссылка
	|			И (ЖурналУведомленийСтатусы.СтраницаЖурнала = ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Уведомления))
	|ГДЕ
	|	НЕ УведомлениеОСпецрежимахНО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Индекс,
	|	ДатаОтчета УБЫВ,
	|	Вид УБЫВ";
	
	ПараметрыРеглОтчетов.Колонки.Добавить("Документы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	МетаданныеЖурналОтчетовСтатусы = Метаданные.РегистрыСведений.ЖурналОтчетовСтатусы;
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка", МетаданныеЖурналОтчетовСтатусы.Измерения.Ссылка.Тип);
	ТаблицаДокументы.Колонки.Добавить("Дата",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументы.Колонки.Добавить("СостояниеСдачиОтчетности",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	ТаблицаДокументы.Колонки.Добавить("ДатаНачала",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("ДатаОкончания",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаДокументы.Колонки.Добавить("НаименованиеОтчета", МетаданныеЖурналОтчетовСтатусы.Реквизиты.НаименованиеОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("ФинансовыйПериод",   МетаданныеЖурналОтчетовСтатусы.Реквизиты.ФинансовыйПериод.Тип);
	ТаблицаДокументы.Колонки.Добавить("ВыбраннаяФорма",     ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаДокументы.Колонки.Добавить("ВариантОтчета",      МетаданныеЖурналОтчетовСтатусы.Реквизиты.ВариантОтчета.Тип);
	ТаблицаДокументы.Колонки.Добавить("РегистрацияВНалоговомОргане",        Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаДокументы.Колонки.Добавить("ПредставлениеКонтролирующегоОргана", МетаданныеЖурналОтчетовСтатусы.Реквизиты.ПредставлениеКонтролирующегоОргана.Тип);
	ТаблицаДокументы.Колонки.Добавить("Комментарий",                        МетаданныеЖурналОтчетовСтатусы.Реквизиты.Комментарий.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Поиск = Новый Структура("Индекс");
	
	Для Каждого ПараметрыРеглОтчета Из ПараметрыРеглОтчетов Цикл
		
		ПараметрыРеглОтчета.Документы = ТаблицаДокументы.СкопироватьКолонки();
		Поиск.Индекс = ПараметрыРеглОтчета.Индекс;
		
		Пока Выборка.НайтиСледующий(Поиск) Цикл
			
			Если ОтборПоВыбраннойФормеРеглОтчета
				И ПараметрыРеглОтчета.ВыбраннаяФорма <> СокрЛП(Выборка.ВыбраннаяФорма) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыРеглОтчета.ИсточникОтчета = "РегламентированныйОтчетПрибыль"
				И Отчеты[ПараметрыРеглОтчета.ИсточникОтчета].ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения(Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыРеглОтчета.Документы.Добавить(), Выборка);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет пользовательское представление состояния передачи в учреждение отчета или иного документа
// - при передаче в электронном виде - состояние отправки;
// - при передаче иным способом - статус, установленный пользователем.
//
// Параметры:
//  Документ - ДокументСсылка, СправочникСсылка - отправляемый документ (отчет или уведомление).
// 
// Возвращаемое значение:
//  Строка - представление состояния передачи в учреждение.
//
Функция ПредставлениеСостоянияДокумента(Документ) Экспорт
	
	Состояние = СостояниеДокумента(Документ);
	Возврат Состояние.Представление;
	
КонецФункции

// Определяет сведения о состоянии передачи в учреждение отчета или иного документа
// - при передаче в электронном виде - состояние отправки;
// - при передаче иным способом - статус, установленный пользователем.
//
// Параметры:
//  Документ - ДокументСсылка, СправочникСсылка - отправляемый документ (отчет или уведомление).
//	КонтролирующийОрган - Строка
// 
// Возвращаемое значение:
//  Структура
//    * Представление - Строка - представление состояния передачи в учреждение.
//    * Сдано         - Булево - Истина, если отчет сдан любым способом.
//    * Отправлено    - Булево - Истина, если отчет отправлен в учреждение в электронном виде.
//
Функция СостояниеДокумента(Документ, КонтролирующийОрган = "ФНС") Экспорт
	
	Состояние = ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента();
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Состояние;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Состояние;
	КонецЕсли;
	
	СостояниеОтправки = КонтекстЭДОСервер.ТекущееСостояниеОтправки(Документ, КонтролирующийОрган);
	
	Если СостояниеОтправки = Неопределено Тогда
		Возврат Состояние;
	КонецЕсли;
	
	Если Не СостояниеОтправки.Свойство("ТекущийЭтапОтправки") Тогда
		Возврат Состояние;
	КонецЕсли;
	
	ЭтапОтправки = СостояниеОтправки.ТекущийЭтапОтправки;
	
	Если ЭтапОтправки.Свойство("ТекстНадписи") Тогда
		Состояние.Представление = ЭтапОтправки.ТекстНадписи;
	КонецЕсли;
	
	Если Не ЭтапОтправки.Свойство("СостояниеСдачиОтчетности") Тогда
		Возврат Состояние;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ЭтапОтправки.СостояниеСдачиОтчетности;
	
	Если ЭтапОтправки.Свойство("ТекстСтатуса") Тогда
		Состояние.Статус = ЭтапОтправки.ТекстСтатуса;
	КонецЕсли;
	
	ДопускаетсяРучнойСтатус = ДопускаетсяРучнойСтатус(Документ, Состояние.Статус, СостояниеСдачиОтчетности);
	Если ДопускаетсяРучнойСтатус И Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой() Тогда
		
		// Статус, установленный вручную
		
		Состояние.ВРаботе       = Истина;
		Состояние.Представление = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаВРаботе();
		
	ИначеЕсли ДопускаетсяРучнойСтатус И Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой() Тогда
		
		// Статус, установленный вручную
		
		Состояние.Сдано         = Истина;
		Состояние.Представление = ИнтерфейсыВзаимодействияБРОКлиентСервер.ПредставлениеСтатусаСдано();
		
	Иначе
		
		// Статус, установленный при автоматической отправке
		Состояние.Сдано      = (СостояниеСдачиОтчетности  = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота);
		Состояние.Отправлено = (СостояниеСдачиОтчетности <> Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат);
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

// Записывает в регистр сведений "Журнал отправок в контролирующие органы" значение статуса отправки,
// установленного вручную для объекта регламентированной отчетности, отображаемого на закладке "Уведомления"
// формы "1С-Отчетность".
//
// Параметры:
//   Документ - ДокументСсылка, СправочникСсылка - ссылка на объект регламентированной отчетности.
//   Статус - Строка - сохраняемый статус.
//
Процедура СохранитьСтатусОтправкиУведомления(Документ, Статус) Экспорт
	
	ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(Новый Структура("Ссылка", Документ));
	
	Если ВыборкаЖОКО.Следующий() Тогда
		
		Если ДопускаетсяРучнойСтатус(Документ, Статус, ВыборкаЖОКО.СостояниеСдачиОтчетности) Тогда
			
			ЗаписьЖОКО = ВыборкаЖОКО.ПолучитьМенеджерЗаписи();
			ЗаписьЖОКО.СтатусОтправки = Статус;
			ЗаписьЖОКО.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет основные сведения о регламентированном отчете или уведомлении.
//
// Параметры:
//   Документ - ДокументСсылка - ссылка на регл. отчет.
//
// Возвращаемое значение:
//   Структура - структура
//				 из ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов()
//               дополненная ключом "ИсточникОтчета" - имя отчета или полное имя объекта метаданных
//				 (для отчетов не обрабатываемых БРО).
//
Функция СвойстваОтчета(Документ) Экспорт
	
	Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыОтображенияВЖурналеОтчетов();
	Результат.Вставить("ИсточникОтчета", "");
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	СвойстваОтчета = КонтекстЭДОСервер.СвойстваОбъектовФормы1СОтчетность(Документ);
	Если СвойстваОтчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, СвойстваОтчета);
	Результат.ДатаОкончанияОП = РелевантнаяДатаОкончанияОтчетногоПериода(Результат);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникРегламентированногоОтчета(Документ);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ВидУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидУведомления");
		ИсточникОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
						 ВидУведомления);
	Иначе
		ИсточникОтчета = Документ.Метаданные().ПолноеИмя();
	КонецЕсли;
	
	Результат.ИсточникОтчета = ИсточникОтчета;
	
	Возврат Результат;
	
КонецФункции

Функция ДопускаетсяРучнойСтатус(Ссылка, Статус, СостояниеСдачиОтчетности) Экспорт
	
	// Параметры - одноименные свойства записи регистра ЖурналОтчетовСтатусы
	
	Если Не РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(СостояниеСдачиОтчетности) Тогда
		// Обрабатывается подсистемой ЭДОсКО
		Возврат Ложь;
	КонецЕсли;
	
	РучныеСтатусы = РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(Ссылка);
	Если РучныеСтатусы.Найти(Статус) = Неопределено Тогда
		// Не обрабатывается подсистемой ручных статусов
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру с параметрами по умолчанию для открытия формы регламентированного отчета.
// 
// Параметры:
//	 ИмяРеглОтчета - Строка - Имя регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация   - СправочникСсылка.Организации - Организации, по которой формируется отчет.
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - Регистрация в налоговом органе. Может быть не заполнена.
//   НачалоПериода - Дата - Дата начала периода.
//   КонецПериода  - Дата - Дата окончания периода.
//   Периодичность - ПеречислениеСсылка.Периодичность - Периодичность предоставления отчета.
//
// Возвращаемое значение:
//	Структура или Неопределено - Параметры открытия формы или Неопределено, если отчет не доступен.
//
Функция ПараметрыОткрытияФормыРеглОтчета(ИмяРеглОтчета, Организация, РегистрацияВНалоговомОргане, НачалоПериода, КонецПериода, Периодичность) Экспорт

	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИмяРеглОтчета);
	
	Если НЕ ПравоДоступаКОтчету = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяФормыРеглОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(
		ИмяРеглОтчета, КонецПериода);
	
	Если НЕ ЗначениеЗаполнено(ИмяФормыРеглОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("мДатаНачалаПериодаОтчета", НачалоПериода);
	Параметры.Вставить("мДатаКонцаПериодаОтчета",  КонецПериода);
	Параметры.Вставить("мПериодичность",           Периодичность);
	Параметры.Вставить("Организация",              Организация);
	Параметры.Вставить("НалоговыйОрган",           РегистрацияВНалоговомОргане);
	Параметры.Вставить("мВыбраннаяФорма",          ИмяФормыРеглОтчета);
	Параметры.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	Параметры.Вставить("БезОткрытияФормы",         Ложь);
	Параметры.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", Истина);

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированныхОтчетов

// Выгружает сохраненный регламентированный отчет без открытия формы в соответствии с форматом выгрузки.
// Выгрузка без открытия формы возможна только при условии, что данный отчет ее поддерживает.
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регл. отчет.
//   ДополнительныеПараметрыВыгрузки - Структура - необязательный параметр, используемый для передачи
//												   дополнительных параметров выгрузки регламентированного отчета:
//	   * РеглОтчетВыгружаетсяВБанк - Булево - признак выгрузки регламентированного отчета в кредитную организацию.
//											  Истина - регламентированный отчет выгружается в кредитную организацию.
//											  Ложь - регламентированный отчет выгружается в гос. орган.
//											  Используется при выгрузке следующих отчетов:
//											  - "РегламентированныйОтчетБухОтчетность",
//											  - "РегламентированныйОтчетБухОтчетностьМП".
//     * КешСхемВыгрузки - Структура - для оптимизации кешированием.
//     * Отбор - Структура - ключ = имя поля отбора; значение = значение отбора.
//
// Возвращаемое значение:
//   Структура - результат выгрузки (см. РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета()).
//
Функция ВыгрузитьРегламентированныйОтчет(СохраненныйОтчет, ДополнительныеПараметрыВыгрузки = Неопределено) Экспорт
	
	Результат = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	Если ТипЗнч(СохраненныйОтчет) <> Тип("ДокументСсылка.РегламентированныйОтчет")
	 ИЛИ СохраненныйОтчет.Пустая() Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
			НСтр("ru = 'Неверное значение сохраненного регламентированного отчета для выгрузки';
				|en = 'Неверное значение сохраненного регламентированного отчета для выгрузки'"));
		
		Возврат Результат;
		
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СохраненныйОтчет,
		"Организация, ИсточникОтчета, ВыбраннаяФорма, КодНалоговогоОргана, ДатаНачала,
		| ДатаОкончания, ДатаПодписи, НаименованиеОтчета, ПредставлениеПериода");
	
	Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(РеквизитыОтчета.ИсточникОтчета,
		 РеквизитыОтчета.ВыбраннаяФорма).ВыгрузкаНаСервере Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выгрузка отчета %1 за %2 возможна только в форме, автоматическая выгрузка не поддерживается';
					|en = 'Выгрузка отчета %1 за %2 возможна только в форме, автоматическая выгрузка не поддерживается'"),
				РеквизитыОтчета.НаименованиеОтчета,
				РеквизитыОтчета.ПредставлениеПериода));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
		РеквизитыОтчета.ИсточникОтчета,
		РеквизитыОтчета.ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("СохраненныйОтчет", СохраненныйОтчет);
	ПараметрыВыгрузки.Вставить("ИсточникОтчета", РеквизитыОтчета.ИсточникОтчета);
	ПараметрыВыгрузки.Вставить("ВыбраннаяФорма", РеквизитыОтчета.ВыбраннаяФорма);
	ПараметрыВыгрузки.Вставить("РезультатВыгрузки", Результат);
	
	Если ТипЗнч(ДополнительныеПараметрыВыгрузки) = Тип("Структура")
	   И ЗначениеЗаполнено(ДополнительныеПараметрыВыгрузки) Тогда
		
		Для Каждого ДополнительныйПараметрВыгрузки Из ДополнительныеПараметрыВыгрузки Цикл
		
			ПараметрыВыгрузки.Вставить(ДополнительныйПараметрВыгрузки.Ключ,
									   ДополнительныйПараметрВыгрузки.Значение);
		
		КонецЦикла;
	
	КонецЕсли;
			
	ТаблицаСообщений = Неопределено;
	
	ДанныеВыгрузки = ОтчетОбъект.УниверсальнаяВыгрузка(ПараметрыВыгрузки);
	
	Если ТипЗнч(ДанныеВыгрузки) = Тип("Структура") Тогда
		
		ДанныеВыгрузки.Свойство("ТаблицаСообщений", ТаблицаСообщений);
		
	ИначеЕсли ТипЗнч(ДанныеВыгрузки) = Тип("Массив") Тогда
		
		Для Каждого ЭлементДанных Из ДанныеВыгрузки Цикл
			
			Если ТипЗнч(ЭлементДанных) = Тип("Структура")
			   И ЭлементДанных.Свойство("ТаблицаСообщений", ТаблицаСообщений) Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаСообщений) <> Тип("ТаблицаЗначений") Тогда
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ШаблонСообщения = НСтр(
			"ru = 'Формат результата выгрузки регламентированного отчета %1 по форме %2 не соответствует ожидаемому';
			|en = 'Формат результата выгрузки регламентированного отчета %1 по форме %2 не соответствует ожидаемому'",
			КодОсновногоЯзыка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка регламентированного отчета без открытия формы.Обработка результата';
				|en = 'Выгрузка регламентированного отчета без открытия формы.Обработка результата'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,
			СохраненныйОтчет,
			СообщениеОбОшибке);
			
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Для Каждого СтрокаОшибки Из ТаблицаСообщений Цикл
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат, СтрокаОшибки.Описание);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для переданного регламентированного отчета получает файлы документооборота с ФНС, в котором участвовал этот отчет.
//
// Параметры:
//  РегламентированныйОтчет - ДокументСсылка.РегламентированныйОтчет - отчет, по которому происходило электронное взаимодействие с ФНС.
//
// Возвращаемое значение:
//   Структура - описание архива с файлами отчета, квитанций и ЭЦП:
//		* ИмяФайла - имя архива с файлами;
//      * Адрес - адрес временного хранилища, куда был помещен файл архива;
//      * Всего - количество файлов в архиве;
//      * ОписаниеОшибки - если заполнено, то содержит текст ошибки, из-за которой не удалось сформировать архив.
//   ВключитьДополнительныеСведения - Булево - Если Истина, то в выгрузку добавляются pdf-файлы квитанций и извещение о вводе
//
Функция ВыгрузитьПакетПоСдачеОтчетностиВФНС(РегламентированныйОтчет, ВключитьДополнительныеСведения = Ложь) Экспорт
	
	СвойстваПакета = Новый Структура();
	СвойстваПакета.Вставить("ОписаниеОшибки", "");
	СвойстваПакета.Вставить("ИмяФайла",       "");
	СвойстваПакета.Вставить("Адрес",          "");
	СвойстваПакета.Вставить("Всего",          0);
	
	Если Не ЗначениеЗаполнено(РегламентированныйОтчет) Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Нет отчета для выгрузки!';
											|en = 'Нет отчета для выгрузки!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	// По ссылке на регламентированный отчет получаем ссылку на набор файлов (документооборот),
	// который участвовал в электронном взаимодействии с ФНС.
	
	СведенияПоОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(РегламентированныйОтчет);
	ВидКонтролирующегоОргана = КонтекстЭДОСервер.ТипКонтролирующегоОргана(СведенияПоОбъекту.ВидКонтролирующегоОргана);
	
	// Определеяем последнюю отправку.
	Отправка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчета(ВидКонтролирующегоОргана, РегламентированныйОтчет);
	
	// Проверяем готовность документооборота к извлечению из базы.
	Если Не ЗначениеЗаполнено(Отправка) Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Нет информации для выгрузки!';
											|en = 'Нет информации для выгрузки!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	ЦиклыОбмена = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Отправка);
	КлючУникальности = Неопределено; // удалять после первого же запроса сервера с клиента
	
	СтатистикаПоЦиклам = КонтекстЭДОСервер.ПолучитьВыгружаемыеПакетыПоДокументооборотамСдачиОтчетностиВФНС(
		ЦиклыОбмена, 
		КлючУникальности, 
		Истина, 
		ВключитьДополнительныеСведения);
		
	РезультатЦО = СтатистикаПоЦиклам.Получить(Отправка);
	Если ТипЗнч(РезультатЦО) = Тип("Строка") Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при получении информации о документообороте!
								|%1';
								|en = 'Ошибка при получении информации о документообороте!
								|%1'");
		СвойстваПакета.ОписаниеОшибки = СтрШаблон(ТекстОшибки, РезультатЦО);
		Возврат СвойстваПакета;
	КонецЕсли;
	
	Если РезультатЦО.ВАрхиве > 0 Тогда
		СвойстваПакета.ОписаниеОшибки = НСтр("ru = 'Часть файлов перемещена в архив. Не могу продолжить выгрузку!';
											|en = 'Часть файлов перемещена в архив. Не могу продолжить выгрузку!'");
		Возврат СвойстваПакета;
	КонецЕсли;
	
	// Извлекаем файлы, относящиеся к документообороту.
	Пакеты = КонтекстЭДОСервер.ПолучитьВыгружаемыеПакетыПоДокументооборотамСдачиОтчетностиВФНС(
		ЦиклыОбмена, 
		КлючУникальности, 
		Ложь, 
		ВключитьДополнительныеСведения);

	Пакет = Пакеты[Отправка]; // Соответствие: Ключ - Цикл обмена, Значение - Структура со свойствами.
	Если ТипЗнч(Пакет) = Тип("Строка")  Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при получении данных из информационной базы!
								|%1';
								|en = 'Ошибка при получении данных из информационной базы!
								|%1'");
		СвойстваПакета.ОписаниеОшибки = СтрШаблон(ТекстОшибки, Пакет);
		Возврат СвойстваПакета;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СвойстваПакета, Пакет);

	Возврат СвойстваПакета;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланкаРегламентированныхОтчетов

// Формирует печатный бланк без штрихкода PDF417 сохраненного регламентированного отчета без открытия формы.
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет.
//   ДополнительныеПараметрыПечати - Структура - необязательный параметр, используемый для передачи
//												 дополнительных параметров печати регламентированного отчета:
//	   * ПечататьЭкраннуюФормуРазделов8_12 - Булево - признак печати разделов 8-12 декларации по НДС в виде экранной формы.
//											 Истина - разделы 8-12 декларации по НДС выводятся на печать в виде экранной формы.
//											 Ложь - разделы 8-12 декларации по НДС выводятся на печать в виде утвержденного печатного бланка.
//											 Используется при печати следующих отчетов:
//											 - "РегламентированныйОтчетНДС".
//
// Возвращаемое значение:
//   Структура - содержит ключи:
//     * АдресПечатногоБланка - Строка - адрес во временном хранилище, в котором располагается в формате
//										 PDF сформированный печатный бланк без штрихкода PDF417;
//     * ИмяФайлаПечатногоБланка - Строка - имя файла сформированного печатного бланка для сохранения.
//	 Если печатный бланк не сформирован, вместо структуры возвращается пустая строка.
//
Функция ПечатныйБланкРегламентированногоОтчета(СохраненныйОтчет, ДополнительныеПараметрыПечати = Неопределено) Экспорт
				
	Если НЕ ТипЗнч(СохраненныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		ИЛИ СохраненныйОтчет.Пустая() Тогда
	
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать печатный бланк отчета.';
													|en = 'Не удалось сформировать печатный бланк отчета.'"));
		Возврат "";
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СохраненныйОтчет,
												 "ИсточникОтчета, ВыбраннаяФорма");
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(РеквизитыОтчета.ИсточникОтчета,
																		   РеквизитыОтчета.ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("СохраненныйОтчет", СохраненныйОтчет);
	ПараметрыПечати.Вставить("ВыбраннаяФорма",   РеквизитыОтчета.ВыбраннаяФорма);
	
	Если ТипЗнч(ДополнительныеПараметрыПечати) = Тип("Структура")
	   И ЗначениеЗаполнено(ДополнительныеПараметрыПечати) Тогда
		
		Для Каждого ДополнительныйПараметрПечати Из ДополнительныеПараметрыПечати Цикл
		
			ПараметрыПечати.Вставить(ДополнительныйПараметрПечати.Ключ,
									 ДополнительныйПараметрПечати.Значение);
		
		КонецЦикла;
	
	КонецЕсли;
				
	Если РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(РеквизитыОтчета.ИсточникОтчета,
		 	РеквизитыОтчета.ВыбраннаяФорма).ПечатьБезШтрихкодаPDF417НаСервере Тогда	
	
		Возврат ОтчетОбъект.ПечатныйБланк(ПараметрыПечати);
		
	КонецЕсли;
	
	Возврат "";
			
КонецФункции

#КонецОбласти

#Область ВыгрузкаДанныхАлгоритмамиРегламентированныхОтчетов

// Выгружает внешние данные алгоритмами выгрузки регламентированного отчета,
// в соответствии с форматом выгрузки, без сохранения регламентированного отчета.
// Такая выгрузка возможна только при условии, что данный отчет ее поддерживает.
//
// Параметры:
//   Контейнер               - Структура - см. СтруктураКонтейнераДанных(Параметры).
//   ДополнительныеПараметры - Структура - необязательный параметр, используемый
//                                         для передачи дополнительных параметров.
//
// Возвращаемое значение:
//   Структура - результат выгрузки (см. РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета()).
//
// Пример реализации:
//   Парам = Новый Структура;
//   Парам.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыОстатки");
//   Парам.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
//   Парам.Вставить("ВерсияФормата",  "5.01");
//   Парам.Вставить("СсылкаНаВнешнийОбъект", СсылкаНаДокумент);
//   Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(Парам);
//   Результат = ИнтерфейсыВзаимодействияБРО.ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер);
//
Функция ВыгрузитьДанныеАлгоритмамиРегламентированногоОтчета(Контейнер, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ИсточникОтчета;
	Перем ВыбраннаяФорма;
	Перем ВерсияФормата;
	Перем СсылкаНаВнешнийОбъект;
	
	Результат = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	Если НЕ (ТипЗнч(Контейнер) = Тип("Структура")
		И Контейнер.Свойство("ИсточникОтчета", ИсточникОтчета) И ЗначениеЗаполнено(ИсточникОтчета)
		И Контейнер.Свойство("ВыбраннаяФорма", ВыбраннаяФорма) И ЗначениеЗаполнено(ВыбраннаяФорма)
		И Контейнер.Свойство("ВерсияФормата", ВерсияФормата) И ЗначениеЗаполнено(ВерсияФормата)
		И Контейнер.Свойство("СсылкаНаВнешнийОбъект", СсылкаНаВнешнийОбъект)
		И ЗначениеЗаполнено(СсылкаНаВнешнийОбъект)) Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат, НСтр(
		"ru = 'Неверное значение контейнера для выгрузки данных алгоритмами регламентированного отчета';
		|en = 'Неверное значение контейнера для выгрузки данных алгоритмами регламентированного отчета'"));
		
		Возврат Результат;
		
	ИначеЕсли НЕ ((ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыВвоз"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыОстатки"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыПеремещение"
		И (ВыбраннаяФорма = "ФормаОтчета2022Кв4" ИЛИ ВыбраннаяФорма = "ФормаОтчета2021Кв3"))) Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Выгрузка данных алгоритмами регламентированного отчета %1 по форме %2 не поддерживается';
		|en = 'Выгрузка данных алгоритмами регламентированного отчета %1 по форме %2 не поддерживается'"),
		ИсточникОтчета, ВыбраннаяФорма));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("СтруктураКонтейнераДанных", Контейнер);
	ПараметрыВыгрузки.Вставить("РезультатВыгрузки", Результат);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметры Цикл
			ПараметрыВыгрузки.Вставить(ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеВыгрузки = ОтчетОбъект.УниверсальнаяВыгрузка(ПараметрыВыгрузки);
	
	ТаблицаСообщений = ДанныеВыгрузки["ТаблицаСообщений"];
	
	Если ТипЗнч(ТаблицаСообщений) <> Тип("ТаблицаЗначений") Тогда
		
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ШаблонСообщения = НСтр(
		"ru = 'Формат результата выгрузки данных алгоритмами регламентированного отчета %1 по форме %2 %3';
		|en = 'Формат результата выгрузки данных алгоритмами регламентированного отчета %1 по форме %2 %3'",
		КодОсновногоЯзыка);
		
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, ИсточникОтчета, ВыбраннаяФорма, "не соответствует ожидаемому");
		
		ЗаписьЖурналаРегистрации(НСтр(
		"ru = 'Выгрузка данных алгоритмами регламентированного отчета. Обработка результата';
		|en = 'Выгрузка данных алгоритмами регламентированного отчета. Обработка результата'",
		КодОсновногоЯзыка), УровеньЖурналаРегистрации.Ошибка, , СсылкаНаВнешнийОбъект, СообщениеОбОшибке);
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецЕсли;
	
	Для Каждого СтрокаОшибки Из ТаблицаСообщений Цикл
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат, СтрокаОшибки.Описание);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланкаАлгоритмамиРегламентированныхОтчетов

// Формирует печатный бланк без штрихкода PDF417 по внешним данным алгоритмами печати регламентированного отчета, без
// сохранения регламентированного отчета. Такая печать возможна только при условии, что данный отчет ее поддерживает.
//
// Параметры:
//   Контейнер - Структура - см. СтруктураКонтейнераДанных(Параметры).
//
// Возвращаемое значение:
//   Массив - адреса во временном хранилище, в котором располагаются табличные документы - страницы сформированного
//            печатного бланка без штрихкода PDF417.
//   Если печатный бланк не сформирован, вместо массива возвращается пустая строка.
//
// Пример реализации:
//   Парам = Новый Структура;
//   Парам.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыОстатки");
//   Парам.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
//   Парам.Вставить("ВерсияФормата",  "5.01");
//   Парам.Вставить("СсылкаНаВнешнийОбъект", СсылкаНаДокумент);
//   Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(Парам);
//   Результат = ИнтерфейсыВзаимодействияБРО.ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер);
//
Функция ПечатныйБланкСформированныйАлгоритмамиРегламентированныхОтчетов(Контейнер) Экспорт
	
	Перем ИсточникОтчета;
	Перем ВыбраннаяФорма;
	Перем ВерсияФормата;
	Перем СсылкаНаВнешнийОбъект;
	
	Если НЕ (ТипЗнч(Контейнер) = Тип("Структура")
		И Контейнер.Свойство("ИсточникОтчета", ИсточникОтчета) И ЗначениеЗаполнено(ИсточникОтчета)
		И Контейнер.Свойство("ВыбраннаяФорма", ВыбраннаяФорма) И ЗначениеЗаполнено(ВыбраннаяФорма)
		И Контейнер.Свойство("ВерсияФормата", ВерсияФормата) И ЗначениеЗаполнено(ВерсияФормата)
		И Контейнер.Свойство("СсылкаНаВнешнийОбъект", СсылкаНаВнешнийОбъект)
		И ЗначениеЗаполнено(СсылкаНаВнешнийОбъект)) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Неверное значение контейнера для печати данных алгоритмами регламентированного отчета';
													|en = 'Неверное значение контейнера для печати данных алгоритмами регламентированного отчета'"));
		Возврат "";
	ИначеЕсли НЕ ((ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыВвоз"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыОстатки"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыПеремещение"
		И (ВыбраннаяФорма = "ФормаОтчета2022Кв4" ИЛИ ВыбраннаяФорма = "ФормаОтчета2021Кв3"))) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Печать данных алгоритмами регламентированного отчета %1 по форме %2 не поддерживается';
			|en = 'Печать данных алгоритмами регламентированного отчета %1 по форме %2 не поддерживается'"),
			ИсточникОтчета, ВыбраннаяФорма));
		Возврат "";
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("СтруктураКонтейнераДанных", Контейнер);
	
	Возврат ОтчетОбъект.ПечатныйБланк(ПараметрыПечати);
	
КонецФункции

#КонецОбласти

// Возвращает контейнер для наполнения внешними данными и последующей передачи в алгоритмы
// выгрузки или печати регламентированного отчета, без сохранения регламентированного отчета.
// Получение такого контейнера возможно только при условии, что данный отчет поддерживает
// выгрузку или печать регламентированного отчета, без сохранения регламентированного отчета.
//
// Параметры:
//   Параметры - Структура - данные, необходимые для получения контейнера:
//     * ИсточникОтчета        - Строка - имя объекта регламентированного отчета.
//     * ВыбраннаяФорма        - Строка - имя формы объекта регламентированного отчета.
//     * ВерсияФормата         - Строка - версия формата выгрузки.
//     * СсылкаНаВнешнийОбъект - Любая ссылка - ссылка на объект данных (например, ссылка на документ,
//                                              для которого выполняется получение контейнера).
//
// Возвращаемое значение:
//   Структура - контейнер для наполнения внешними данными.
//
// Пример реализации:
//   Парам = Новый Структура;
//   Парам.Вставить("ИсточникОтчета", "РегламентированныйОтчетПрослеживаемыеТоварыОстатки");
//   Парам.Вставить("ВыбраннаяФорма", "ФормаОтчета2021Кв3");
//   Парам.Вставить("ВерсияФормата",  "5.01");
//   Парам.Вставить("СсылкаНаВнешнийОбъект", СсылкаНаДокумент);
//   Контейнер = ИнтерфейсыВзаимодействияБРО.СтруктураКонтейнераДанных(Парам);
//
Функция СтруктураКонтейнераДанных(Параметры) Экспорт
	
	Перем ИсточникОтчета;
	Перем ВыбраннаяФорма;
	Перем ВерсияФормата;
	Перем СсылкаНаВнешнийОбъект;
	
	Результат = РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета();
	
	ПодстрокаВСообщении = "для выгрузки алгоритмами регламентированного отчета";
	
	Если НЕ (ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("ИсточникОтчета", ИсточникОтчета) И ЗначениеЗаполнено(ИсточникОтчета)
		И Параметры.Свойство("ВыбраннаяФорма", ВыбраннаяФорма) И ЗначениеЗаполнено(ВыбраннаяФорма)
		И Параметры.Свойство("ВерсияФормата", ВерсияФормата) И ЗначениеЗаполнено(ВерсияФормата)
		И Параметры.Свойство("СсылкаНаВнешнийОбъект", СсылкаНаВнешнийОбъект)
		И ЗначениеЗаполнено(СсылкаНаВнешнийОбъект)) Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Неверное значение параметров получения контейнера данных %1';
		|en = 'Неверное значение параметров получения контейнера данных %1'"), ПодстрокаВСообщении));
		
		Возврат Результат;
		
	ИначеЕсли НЕ ((ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыВвоз"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыОстатки"
		И ВыбраннаяФорма = "ФормаОтчета2021Кв3")
		ИЛИ (ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыПеремещение"
		И (ВыбраннаяФорма = "ФормаОтчета2022Кв4" ИЛИ ВыбраннаяФорма = "ФормаОтчета2021Кв3"))) Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Получение контейнера данных %1 %2 по форме %3 не поддерживается';
		|en = 'Получение контейнера данных %1 %2 по форме %3 не поддерживается'"),
		ПодстрокаВСообщении, ИсточникОтчета, ВыбраннаяФорма));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ВыбраннаяФорма);
	
	ОтчетОбъект = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПутьКФорме);
	
	Контейнер = ОтчетОбъект.СтруктураКонтейнераДанных(Параметры);
	
	Если Контейнер = Неопределено Тогда
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(Результат,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Получение контейнера данных %1 %2 в формате %3 не поддерживается';
		|en = 'Получение контейнера данных %1 %2 в формате %3 не поддерживается'"),
		ПодстрокаВСообщении, ИсточникОтчета, ВерсияФормата));
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Контейнер;
	
КонецФункции

#Область РучнойВводСтатусовОтправки

// Записывает в регистр сведений "Журнал отчетов статусы" значение статуса отправки,
// установленного вручную в экранной форме объекта, отображаемого на закладке "Отчеты"
// формы "1С-Отчетность".
//
// Параметры:
//   СтруктураПараметров - Cтруктура со свойствами:
//     * СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - ссылка на объект, отображаемый
//                        на закладке "Отчеты" формы "1С-Отчетность";
//     * Форма - ФормаКлиентскогоПриложения - экранная форма объекта, отображаемого на закладке "Отчеты"
//                                            формы "1С-Отчетность".
//     * Статус - Строка
//
Процедура СохранитьСтатусОтправки(СтруктураПараметров) Экспорт
	
	ВыборкаЖОС = РегистрыСведений.ЖурналОтчетовСтатусы.Выбрать(
	Новый Структура("Ссылка", СтруктураПараметров.СсылкаНаОбъект));
	
	Если ВыборкаЖОС.Следующий() Тогда
		
		Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(
			ВыборкаЖОС.СостояниеСдачиОтчетности) Тогда
			
			СтатусыОбъектов
			= РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(
			СтруктураПараметров.СсылкаНаОбъект);
			
			Если СтруктураПараметров.Свойство("Форма") Тогда
				ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"), СтруктураПараметров.Форма.Элементы.НаименованиеЭтапа.Заголовок);
			ИначеЕсли СтруктураПараметров.Свойство("Статус") Тогда
				ТекСтатус = СтруктураПараметров.Статус;
			КонецЕсли;
			
			Если СтатусыОбъектов.Найти(ТекСтатус) <> Неопределено Тогда
				
				ЗаписьЖОС = ВыборкаЖОС.ПолучитьМенеджерЗаписи();
				ЗаписьЖОС.Статус = ТекСтатус;
				ЗаписьЖОС.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеНалоговогоПериода

// Определяет дату начала налогового периода с учетом даты регистрации организации (требований ст. 55 НК РФ). Налоговый
// период может быть расширен или отсутствовать, если организация зарегистрирована в конце обычного периода (например,
// 30 декабря). Налоговый период может быть сокращен, если организация зарегистрирована не в конце обычного периода
// (например, 10 января).
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - организация, для которой определяется
//                                             дата начала налогового периода;
//  Период                                   - Дата - дата в периоде, начало которого определяется;
//  ВариантРасширенногоПервогоПериода        - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                             проверяемый вариант требований закона;
//  СтандартнаяДлительностьНалоговогоПериода - ПеречислениеСсылка.Периодичность - длительность налогового периода;
//  СокращатьНалоговыйПериод                 - Булево - Ложь, если для совместимости важно, чтобы дата регистрации
//                                                      возвращалась только для расширенного периода (не сокращенного),
//                                                      при этом ст. 55 будет выполнена в неполном объеме);
//                                                      Истина, если требуется выполнение ст. 55 в части сокращения
//                                                      периода.
//  ДатаРегистрации                          - Дата - дата регистрации организации;
//                                             если не передана, определяется из свойств организации.
//  ДатаПостановкиНаУчет                     - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение (варианты):
//  Дата         - дата начала налогового периода;
//  Неопределено - в этом периоде обязанностей налогоплательщика у организации нет.
// 
Функция НачалоНалоговогоПериода(Организация, Период, ВариантРасширенногоПервогоПериода,
	Знач СтандартнаяДлительностьНалоговогоПериода = Неопределено, СокращатьНалоговыйПериод = Истина,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.НачалоНалоговогоПериода(Организация,
	Период, ВариантРасширенногоПервогоПериода, СтандартнаяДлительностьНалоговогоПериода, СокращатьНалоговыйПериод,
	ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет границы ближайшего налогового периода с учетом даты регистрации (постановки на учет в качестве налогоплательщика).
//
// Параметры:
//  Организация                              - СправочникСсылка.Организации - организация, для которой определяются
//                                             границы ближайшего налогового периода;
//  Период                                   - Дата - дата в периоде, границы которого определяются;
//  ВариантРасширенногоПервогоПериода        - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                             проверяемый вариант требований закона;
//  СтандартнаяДлительностьНалоговогоПериода - ПеречислениеСсылка.Периодичность - длительность налогового периода.
//  ДатаРегистрации                          - Дата - дата регистрации организации;
//                                             если не передана, определяется из свойств организации.
//  ДатаПостановкиНаУчет                     - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало налогового периода (например, 01 июля для третьего квартала);
//    * Начало - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации;
//    * Конец  - Дата - дата с указанием времени.
// 
Функция БлижайшийНалоговыйПериод(Организация, Знач ПроверяемыйПериод, ВариантРасширенногоПервогоПериода,
	Знач СтандартнаяДлительностьНалоговогоПериода = Неопределено,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.БлижайшийНалоговыйПериод(Организация,
		ПроверяемыйПериод, ВариантРасширенногоПервогоПериода, СтандартнаяДлительностьНалоговогоПериода,
		ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет стандартную длительность налогового периода по переданному варианту периода регистрации организации.
//
// Параметры:
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант
//                                      требований закона.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - длительность периода; пустая ссылка, если установить не удалось.
//
Функция СтандартнаяДлительностьНалоговогоПериода(Вариант) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.СтандартнаяДлительностьНалоговогоПериода(Вариант);
	
КонецФункции

// Определяет налоговый период, относящийся к дате регистрации (постановки на учет), пропускаемый для целей уплаты налогов
// (представления отчетов). Требования установлены ст. 55 НК РФ и п. 3 ст. 15 закона "О бухгалтерском учете".
//
// Например, если организация зарегистрирована в конце года, то некоторую отчетность за этот год она не представляет
// (и некоторые налоги не платит), а показатели деятельности за период с даты регистрации до конца следующего года
// включает в отчетность за следующий год. Таким образом, первый налоговый период у организации может быть длинее,
// чем последующие (т.е., может быть "расширенным").
//
// Другими словами, если дата регистрации попадает в определенные периоды, то не требуется представлять отчетность
// и/или уплачивать налоги за эти периоды.
//
// Законом определены несколько вариантов периодов, в зависимости от даты регистрации организации.
//
// Параметры:
//  Вариант         - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//  Организация     - СправочникСсылка.Организации - организация, для которой определяется пропущенный период;
//  ДатаРегистрации - Дата - дата регистрации организации; если не передана, определяется из свойств организации;
//  ДатаПостановкиНаУчет - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение (варианты):
//  Дата         - дата начала пропущенного периода;
//  Неопределено - нет оснований для пропуска периода.
//
Функция ПропущенныйНалоговыйПериод(Вариант, Организация,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.ПропущенныйНалоговыйПериод(Вариант, Организация,
		ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет, что не требуется сдавать отчетность и уплачивать налог за переданный период.
//
// Параметры:
//  Организация                       - СправочникСсылка.Организации - проверяемая организация
//  Период                            - Дата - проверяемый период
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//  ДатаРегистрации                   - Дата - дата регистрации организации; если не передана, определяется из свойств организации;
//  ДатаПостановкиНаУчет              - Дата - дата постановки на учет в качестве налогоплательщика;
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, это пропущенный период
//              (организация зарегистрирована в декабре переданного года, и для нее актуальны требования п.2 статьи 55 НК РФ).
//
Функция НалоговыйПериодПропущен(Организация, Период, ВариантРасширенногоПервогоПериода,
	Знач ДатаРегистрации = Неопределено, Знач ДатаПостановкиНаУчет = Неопределено) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.НалоговыйПериодПропущен(
		Организация, Период, ВариантРасширенногоПервогоПериода, ДатаРегистрации, ДатаПостановкиНаУчет);
	
КонецФункции

// Определяет какой период расширяется в соответствии с выбранным вариантом.
// 
// Параметры:
//  ВариантРасширенногоПервогоПериода - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода - вариант требований закона;
//
// Возвращаемое значение:
//  Истина - расширяемый налоговый период начинается с даты постановки на учет в качестве налогоплательщика;
//  Ложь - расширяемый налоговый период начинается с даты регистрации организации.
//
Функция ПервыйНалоговыйПериодНачинаетсяСДатыПостановкиНаУчет(ВариантРасширенногоПервогоПериода) Экспорт
	
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.ПервыйНалоговыйПериодНачинаетсяСДатыПостановкиНаУчет(ВариантРасширенногоПервогоПериода);
	
КонецФункции

#КонецОбласти

#Область ОбработкаАдресаВФорматеФИАС

// См. РегламентированнаяОтчетность.АдресВФорматеФИАС.
Функция АдресВФорматеФИАС(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетность.АдресВФорматеФИАС(Адрес, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Ранее функция использовалась в функционале "Монитор налогов и отчетности".
// Описывает структуру таблицы значений для получения списка регл. отчетов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - подготовленная таблица для получения списка регл. отчетов по периодам.
//
Функция ПараметрыСпискаРеглОтчетов() Экспорт
	
	ПараметрыРегОтчетности = Новый ТаблицаЗначений;
	ПараметрыРегОтчетности.Колонки.Добавить("ПолноеИмяПравила", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ПараметрыРегОтчетности.Колонки.Добавить("ПериодСобытия",    ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПараметрыРегОтчетности.Колонки.Добавить("ИмяРеглОтчета",    ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ПараметрыРегОтчетности.Колонки.Добавить("ВыбраннаяФорма",   ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Возврат ПараметрыРегОтчетности;
	
КонецФункции

// Устарела. Ранее процедура использовалась в функционале "Монитор налогов и отчетности".
// Помещает в переданный менеджер временных таблиц сформированные сведения о регламентированной отчетности 
// в разрезе запрашиваемых правил и отчетных периодов.
//
// Параметры:
//  МенеджерВТ          - МенеджерВременныхТаблиц - исх. параметр, в менеджер помещается временная таблица "ВТ_РеглОтчеты" со следующими колонками:
//   * Ссылка           - ДокументСсылка.РегламентированныйОтчет - ссылка на отчет;
//   * ПериодСобытия    - Дата - финансовый период, к которому относится отчет;
//   * ПолноеИмяПравила - Строка - скомпонованное имя правила, формируемое как идентификатор(код) задачи-владельца правила + "." + идентификатор(код) самого правила;
//   * Статус           - Строка - состояние отправки отчета в контролирующие органы.
//  Организация                - СправочникСсылка.Организации - организация, по которой запрашивается отчетность.
//  ПараметрыСпискаРеглОтчетов - ТаблицаЗначений - см. функцию ПараметрыСпискаРеглОтчетов().
//
Процедура ПолучитьСписокРеглОтчетовПоПериодам(МенеджерВТ, Организация, ПараметрыСпискаРеглОтчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПараметрыСпискаРеглОтчетов", ПараметрыСпискаРеглОтчетов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыСпискаРеглОтчетов.ИмяРеглОтчета КАК ИмяРеглОтчета,
	|	ВЫРАЗИТЬ(ПараметрыСпискаРеглОтчетов.ВыбраннаяФорма КАК СТРОКА(255)) КАК ВыбраннаяФорма,
	|	ПараметрыСпискаРеглОтчетов.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыСпискаРеглОтчетов.ПолноеИмяПравила КАК ПолноеИмяПравила
	|ПОМЕСТИТЬ ПараметрыРегОтчетности
	|ИЗ
	|	&ПараметрыСпискаРеглОтчетов КАК ПараметрыСпискаРеглОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(РегламентированныйОтчет.ВыбраннаяФорма КАК СТРОКА(255)) КАК ВыбраннаяФорма,
	|	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникОтчета,
	|	РегламентированныйОтчет.Организация,
	|	РегламентированныйОтчет.ДатаНачала КАК ДатаНачала,
	|	РегламентированныйОтчет.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СписокРеглОтчетности
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Вид = 0
	|	И РегламентированныйОтчет.ПометкаУдаления = ЛОЖЬ
	|	И РегламентированныйОтчет.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникОтчета,
	|	ВыбраннаяФорма,
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокРеглОтчетности.Ссылка КАК Ссылка,
	|	ПараметрыРегОтчетности.ПериодСобытия КАК ПериодСобытия,
	|	ПараметрыРегОтчетности.ПолноеИмяПравила КАК ПолноеИмяПравила
	|ПОМЕСТИТЬ ВТ_ЗаписанныеРеглОтчеты
	|ИЗ
	|	ПараметрыРегОтчетности КАК ПараметрыРегОтчетности
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокРеглОтчетности КАК СписокРеглОтчетности
	|		ПО (СписокРеглОтчетности.ИсточникОтчета = ПараметрыРегОтчетности.ИмяРеглОтчета)
	|			И (ПараметрыРегОтчетности.ПериодСобытия МЕЖДУ СписокРеглОтчетности.ДатаНачала И СписокРеглОтчетности.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаписанныеРеглОтчеты.Ссылка КАК Ссылка,
	|	ВТ_ЗаписанныеРеглОтчеты.ПериодСобытия КАК ПериодСобытия,
	|	ВТ_ЗаписанныеРеглОтчеты.ПолноеИмяПравила КАК ПолноеИмяПравила,
	|	ЖурналОтчетовСтатусы.Статус КАК Статус,
	|	ЖурналОтчетовСтатусы.СостояниеСдачиОтчетности КАК СостояниеСдачиОтчетности
	|ИЗ
	|	ВТ_ЗаписанныеРеглОтчеты КАК ВТ_ЗаписанныеРеглОтчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтчетовСтатусы КАК ЖурналОтчетовСтатусы
	|		ПО ВТ_ЗаписанныеРеглОтчеты.Ссылка = ЖурналОтчетовСтатусы.Ссылка
	|			И (ЖурналОтчетовСтатусы.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыРегОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокРеглОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗаписанныеРеглОтчеты";
	
	РеглОтчеты = Запрос.Выполнить().Выгрузить();
	РеглОтчеты.Индексы.Добавить("ПериодСобытия, ПолноеИмяПравила");
			
	Для Каждого РеглОтчет Из РеглОтчеты Цикл
		
		Если НЕ ЗначениеЗаполнено(РеглОтчет.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрНачинаетсяС(РеглОтчет.ПолноеИмяПравила, "СведенияОСреднесписочнойЧисленности") Тогда
			Продолжить;
		КонецЕсли;
		
		// При создании новой организации отчетов о среднесписочной численности может быть несколько:
		//  - по состоянию на 1 число месяца, следующего за месяцем регистрации;
		//  - по состоянию на 1 января за предыдущий календарный год.
		ЭтоМесячныйОтчет = РеглОтчет.ПолноеИмяПравила = "СведенияОСреднесписочнойЧисленности.2016_РегистрацияОрганизации";
		ОтчетПоСостояниюНаДату = РеглОтчет.Ссылка.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ДатаПериод;
		
		Если (ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) = 1)
		 ИЛИ (НЕ ЭтоМесячныйОтчет И Месяц(ОтчетПоСостояниюНаДату) <> 1) Тогда
			
		 	// Очистим ссылки на документ, если такой был найден, т.к. он относится к другому правилу.
			РеглОтчет.Ссылка = NULL;
			РеглОтчет.Статус = NULL;
			РеглОтчет.СостояниеСдачиОтчетности = NULL;
		   
		КонецЕсли;
				
	КонецЦикла;
	
	// По каждому виду отчета за каждый период оставляется одну ссылку 
	// на документ "Регламентированный отчет" и его состояния отправки.
	ИтоговыеРеглОтчеты = РеглОтчеты.СкопироватьКолонки();
	
	ОтчетыПоПериодам = РеглОтчеты.Скопировать(, "ПериодСобытия, ПолноеИмяПравила");
	ОтчетыПоПериодам.Свернуть("ПериодСобытия, ПолноеИмяПравила");
	Отбор = Новый Структура("ПериодСобытия, ПолноеИмяПравила");
	
	Для Каждого СтрокаПериода Из ОтчетыПоПериодам Цикл

		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПериода);

		НайденныеСтроки = РеглОтчеты.НайтиСтроки(Отбор);

		ЕстьОтчетВБазе = Ложь;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.Ссылка) Тогда
				НоваяСтрока = ИтоговыеРеглОтчеты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
				ЕстьОтчетВБазе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьОтчетВБазе Тогда
			// Отчет за период еще не был записан, добавляем пустую строку с именем отчета и периодом события.
			НоваяСтрока = ИтоговыеРеглОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериода);
			// В незаполенные поля записываем NULL как в случае отсутствия данных в результате запроса. 
			НоваяСтрока.Ссылка = NULL;
			НоваяСтрока.Статус = NULL;
			НоваяСтрока.СостояниеСдачиОтчетности = NULL;
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем отфильтрованную таблицу регл.отчетов в запрос.
	Запрос.УстановитьПараметр("ИтоговыеРеглОтчеты", ИтоговыеРеглОтчеты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИтоговыеРеглОтчеты.Ссылка,
	|	ИтоговыеРеглОтчеты.ПериодСобытия,
	|	ИтоговыеРеглОтчеты.Статус,
	|	ИтоговыеРеглОтчеты.СостояниеСдачиОтчетности,
	|	ИтоговыеРеглОтчеты.ПолноеИмяПравила
	|ПОМЕСТИТЬ ВТ_РеглОтчеты
	|ИЗ
	|	&ИтоговыеРеглОтчеты КАК ИтоговыеРеглОтчеты
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолноеИмяПравила,
	|	ПериодСобытия";

	Запрос.Выполнить();
	
КонецПроцедуры

// Устарела. Можно сразу использовать Отчеты[ИмяРеглОтчета].ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения()
Функция ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения(СсылкаНаРеглОтчет) Экспорт
	
	ИмяРеглОтчета = "РегламентированныйОтчетПрибыль";
	Возврат Отчеты[ИмяРеглОтчета].ЭтоДекларацияПоНалогуНаПрибыльОбособленногоПодразделения(СсылкаНаРеглОтчет);
	
КонецФункции

#КонецОбласти

// Проверяет наличие доступа к электронному документообороту.
// 
// Возвращаемое значение:
//  Булево - Истина, если доступ есть
//
Функция УТекущегоПользователяЕстьДоступКЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

// Функция - Получить ответы на запрос ИОН
//
// Параметры:
//  Запрос	 - ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика - ссылка на запрос
// 
// Возвращаемое значение:
//  ТаблицаЗначений или Неопределено. Таблица значений имеет поля: ИмяФайла, Размер, ТипСодержимого, Данные, ВАрхиве.
//		Неопределено будет возвращено если у пользователя нет доступа к ЭДО.
//
Функция ПолучитьОтветыНаЗапросИОН(Запрос) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КонтекстЭДОСервер.ПолучитьОтветыНаЗапросИОН(Запрос, Истина);
	КонецЕсли;

КонецФункции

// Возвращает файлы регламентированного отчета, сохраненного в информационной базе, для передачи в банк
//
// Параметры:
//   СохраненныйОтчет - ДокументСсылка.РегламентированныйОтчет
//   БезБланков - Булево
//
// Возвращаемое значение:
//   Структура:
//     ОписаниеОшибки:
//       Строка - Подробное описание ошибки или пустая строка, если ошибок не было.
//     ФайлыОтчета:
//       Массив - содержит структуры:
//         * ВидФайла - Строка - вид файла отчета
//         * ИмяФайла - Строка - имя файла
//         * СодержимоеФайла - Произвольный - содержимое файла
//
Функция ФайлыРегламентированногоОтчета(СохраненныйОтчет, БезБланков = Ложь) Экспорт
	
	РезультатПолученияФайлов = Новый Структура("ОписаниеОшибки, ФайлыОтчета",
		"", Новый Массив);
	
	Если НЕ ТипЗнч(СохраненныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
	 ИЛИ СохраненныйОтчет.Пустая() Тогда
		РезультатПолученияФайлов.ОписаниеОшибки =
			НСтр("ru = 'Ошибка получения файлов регламентированного отчета из-за неверного аргумента функции';
				|en = 'Ошибка получения файлов регламентированного отчета из-за неверного аргумента функции'");
		Возврат РезультатПолученияФайлов;
	КонецЕсли;
	
	РеквизитыОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СохраненныйОтчет, "ИсточникОтчета, ВыбраннаяФорма");
	
	ПредусмотреноПолучениеФайловОтчета =
		РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(
		РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма).ПолучениеФайловОтчета;
	
	Если НЕ ПредусмотреноПолучениеФайловОтчета Тогда
		РезультатПолученияФайлов.ОписаниеОшибки =
			НСтр("ru = 'Для регламентированного отчета не предусмотрено получение файлов';
				|en = 'Для регламентированного отчета не предусмотрено получение файлов'");
		Возврат РезультатПолученияФайлов;
	КонецЕсли;
	
	ФайлыОтчета = РезультатПолученияФайлов.ФайлыОтчета;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегламентированныйОтчет", СохраненныйОтчет);
	
	Если НЕ БезБланков Тогда
		// Получение печатных бланков отчета
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидФайла,
			|	ДополнительныеФайлыРегламентированныхОтчетов.ИмяФайла КАК ИмяФайла,
			|	ДополнительныеФайлыРегламентированныхОтчетов.СодержимоеФайла КАК СодержимоеФайла
			|ИЗ
			|	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
			|ГДЕ
			|	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
			|	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО ""БланкОтчета.%""";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			РезультатПолученияФайлов.ОписаниеОшибки =
				НСтр("ru = 'Требуется подготовка отчета для отправки в банк. Откройте выбранную форму бухгалтерской отчетности и в меню кнопки «Еще» нажмите пункт «Подготовить для отправки в банк»';
					|en = 'Требуется подготовка отчета для отправки в банк. Откройте выбранную форму бухгалтерской отчетности и в меню кнопки «Еще» нажмите пункт «Подготовить для отправки в банк»'");
			Возврат РезультатПолученияФайлов;
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ФайлОтчета = Новый Структура;
			ФайлОтчета.Вставить("ВидФайла", Выборка.ВидФайла);
			ФайлОтчета.Вставить("ИмяФайла", Выборка.ИмяФайла);
			ФайлОтчета.Вставить("СодержимоеФайла", Выборка.СодержимоеФайла.Получить());
			
			ФайлыОтчета.Добавить(ФайлОтчета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Получение дополнительных файлов, не являющихся печатными бланками отчета
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидФайла,
		|	ДополнительныеФайлыРегламентированныхОтчетов.ИмяФайла КАК ИмяФайла,
		|	ДополнительныеФайлыРегламентированныхОтчетов.СодержимоеФайла КАК СодержимоеФайла
		|ИЗ
		|	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
		|ГДЕ
		|	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
		|	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла В (&ВидыОтчетов)";
	
	ВидыОтчетов = Новый Массив;
	ВидыОтчетов.Добавить("Пояснительная записка");
	ВидыОтчетов.Добавить("Аудиторское заключение");
	ВидыОтчетов.Добавить("Заявление союза сельхозпроизводителей");
	Запрос.УстановитьПараметр("ВидыОтчетов", ВидыОтчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлОтчета = Новый Структура;
		ФайлОтчета.Вставить("ВидФайла", Выборка.ВидФайла);
		ФайлОтчета.Вставить("ИмяФайла", Выборка.ИмяФайла);
		ФайлОтчета.Вставить("СодержимоеФайла", Выборка.СодержимоеФайла.Получить());
		
		ФайлыОтчета.Добавить(ФайлОтчета);
		
	КонецЦикла;
	
	Возврат РезультатПолученияФайлов;
	
КонецФункции

// Конструктор параметров автозаполнения регламентированного отчета.
//
// Параметры:
//   ИсточникОтчета - Строка - наименование регламентированного отчета (совпадает с именем объекта метаданных).
//   ИмяФормыОтчета - Строка - имя формы регламентированного отчета, для которой требуются параметры автозаполнения.
//   ДополнительныеПараметры - Структура - необязательный параметр, используемый для передачи дополнительных параметров.
//
// Возвращаемое значение:
//   Структура - содержит элементы, необходимые для работы процедур автозаполнения отчета.
//
Функция ПараметрыАвтозаполненияРегламентированногоОтчета(ИсточникОтчета, ИмяФормыОтчета,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсточникОтчета = "РегламентированныйОтчетБухОтчетность" Тогда
		МенеджерОтчета = РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект("РегламентированныйОтчетБухОтчетность");
		ОбъектОтчета = МенеджерОтчета.Создать();
		
		Контейнер = ОбъектОтчета.НовыйКонтейнерПоказателей(ИмяФормыОтчета);
		ПараметрыОтчета = ОбъектОтчета.НовыеПараметрыАвтозаполнения(ИмяФормыОтчета);
		
		Возврат Новый Структура("Контейнер, ПараметрыОтчета", Контейнер, ПараметрыОтчета);
		
	Иначе
		ИмяФункции = "ИнтерфейсыВзаимодействияБРО.ПараметрыАвтозаполненияРегламентированногоОтчета";
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Функция %1:
			|Непредусмотренный параметр ""%2""';
			|en = 'Функция %1:
			|Непредусмотренный параметр ""%2""'"), ИмяФункции, ИсточникОтчета);
		
	КонецЕсли;
	
КонецФункции

// Возвращает сведения по зарегистрированным лицам из регламентированных отчетов "ЕФС-1: Сведения о заработной плате
// и условиях осуществления деятельности работников государственных (муниципальных) учреждений".
//
// Параметры:
//  СтруктураПараметров - Структура - свойства:
//     * Организация    - СправочникСсылка.Организации - организация, для которой будет выполняться поиск отчетов
//                        "ЕФС-1: Сведения о заработной плате и условиях осуществления деятельности работников
//                        государственных (муниципальных) учреждений";
//     * ДатаОкончания  - Дата - дата окончания отчетного периода для поиска отчетов "ЕФС-1: Сведения о заработной
//                        плате и условиях осуществления деятельности работников государственных (муниципальных)
//                        учреждений";
//     * ПоискПоИмениФормыОтчета - Булево - признак использования имени формы при поиске отчетов "ЕФС-1: Сведения
//                        о заработной плате и условиях осуществления деятельности работников государственных
//                        (муниципальных) учреждений" (необязательное свойство; если отсутствует или если Истина,
//                        тогда имя формы отчета используется при поиске; если Ложь, тогда имя формы отчета
//                        не используется при поиске);
//     * ИмяФормыОтчета - Строка - имя формы отчета "ЕФС-1: Сведения о заработной плате и условиях осуществления
//                        деятельности работников государственных (муниципальных) учреждений", например,
//                        "ФормаОтчета2024Кв1" (необязательное свойство; не используется при
//                        ПоискПоИмениФормыОтчета = Ложь; если отсутствует, то при ПоискПоИмениФормыОтчета = Истина
//                        значение будет получено автоматически).
//
// Возвращаемое значение:
//  Массив - массив структур с данными отчетов (пустой массив, если отчетов не найдено).
//  Каждая структура (случай непустого массива) - Структура - имеет свойства:
//     * НомерКорректировки - Число - номер корректировки из отчета "ЕФС-1: Сведения о заработной плате и условиях
//                            осуществления деятельности работников государственных (муниципальных) учреждений";
//     * СведенияПоЗЛ - ДеревоЗначений - сведения по зарегистрированным лицам из отчета "ЕФС-1: Сведения о заработной
//                            плате и условиях осуществления деятельности работников государственных (муниципальных)
//                            учреждений".
//
Функция СведенияПоЗарегистрированнымЛицамИзОтчетовЕФС1СЗПГос(СтруктураПараметров) Экспорт
	Возврат РегламентированнаяОтчетностьВызовСервера.ОтчетОбъект(
		"РегламентированныйОтчетЕФС1СЗПГос").СведенияПоЗарегистрированнымЛицамИзОтчетовЕФС1СЗПГос(СтруктураПараметров);
КонецФункции

// Возвращает массив ссылок МЧД ФНС
//
// Параметры:
// 	Отбор - структура:
//   * Доверитель       - ОпределяемыйТип.Организация - Организация предприятия
//   * Сертификат       - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования, СертификатКриптографии -
//                      Сертификат представителя.
//   * ПредставительИНН - Строка - ИНН представителя, используется, если Сертификат равен Неопределено.
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.МашиночитаемыеДоверенностиФНС,
// 	СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр
//
Функция ПолучитьДоверенностиОрганизации(Отбор) Экспорт
	
	Доверитель = Отбор.Доверитель;
	Сертификат = Отбор.Сертификат;
	
	Если Сертификат = Неопределено Тогда
		ПредставительИНН = Отбор.ПредставительИНН;
		
	Иначе
		Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
			ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ДанныеСертификата").Получить();
			Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
		КонецЕсли;
		
		СвойстваСубъекта = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
		
		Если СвойстваСубъекта.Свойство("ИННЮЛ") И ЗначениеЗаполнено(СвойстваСубъекта.ИННЮЛ) Тогда
			ПредставительИНН = СвойстваСубъекта.ИННЮЛ;
		Иначе
			ПредставительИНН = СвойстваСубъекта.ИНН;
		КонецЕсли;
		
		Если СтрДлина(ПредставительИНН) = 12 И Лев(ПредставительИНН, 2) = "00" Тогда
			ПредставительИНН = Прав(ПредставительИНН, 10);
		КонецЕсли;
	КонецЕсли;
	
	СостоянияДействительнойДоверенности = Новый Массив;
	СостоянияДействительнойДоверенности.Добавить(Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат);
	СостоянияДействительнойДоверенности.Добавить(Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота);
	
	СтатусыДействительнойДоверенности = Новый Массив;
	СтатусыДействительнойДоверенности.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.ВРаботе);
	СтатусыДействительнойДоверенности.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано);
	СтатусыДействительнойДоверенности.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.ДатаНачалаДействияНеНаступила);
	СтатусыДействительнойДоверенности.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МашиночитаемыеДоверенностиФНС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФНС КАК МашиночитаемыеДоверенностиФНС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка
		|ГДЕ
		|	МашиночитаемыеДоверенностиФНС.Организация = &Организация
		|	И (МашиночитаемыеДоверенностиФНС.ПредставительФЛ_ИНН = &ПредставительИНН
		|		ИЛИ МашиночитаемыеДоверенностиФНС.ПредставительЮЛ_ИНН = &ПредставительИНН)
		|	И МашиночитаемыеДоверенностиФНС.КоличествоПредставителей <= 1
		|	И НЕ МашиночитаемыеДоверенностиФНС.ПометкаУдаления
		|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (&СостоянияДействительнойДоверенности)
		|	И ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки <> &ИсключаемыйСтатусОтправки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФНС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФНС КАК МашиночитаемыеДоверенностиФНС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиФНС.Представители КАК МашиночитаемыеДоверенностиФНСПредставители
		|		ПО МашиночитаемыеДоверенностиФНСПредставители.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка
		|ГДЕ
		|	МашиночитаемыеДоверенностиФНС.Организация = &Организация
		|	И (МашиночитаемыеДоверенностиФНСПредставители.ПредставительФЛ_ИНН = &ПредставительИНН
		|		ИЛИ МашиночитаемыеДоверенностиФНСПредставители.ПредставительЮЛ_ИНН = &ПредставительИНН)
		|	И МашиночитаемыеДоверенностиФНС.КоличествоПредставителей > 1
		|	И НЕ МашиночитаемыеДоверенностиФНС.ПометкаУдаления
		|	И ЖурналОтправокВКонтролирующиеОрганы.СостояниеСдачиОтчетности В (&СостоянияДействительнойДоверенности)
		|	И ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки <> &ИсключаемыйСтатусОтправки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Организация = &Организация
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительФЛ_ИНН = &ПредставительИНН
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПредставительЮЛ_ИНН = &ПредставительИНН)
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.КоличествоПредставителей <= 1
		|	И НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус В (&СтатусыДействительнойДоверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр.Представители КАК МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители
		|		ПО МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.Ссылка = МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Организация = &Организация
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительФЛ_ИНН = &ПредставительИНН
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестрПредставители.ПредставительЮЛ_ИНН = &ПредставительИНН)
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.КоличествоПредставителей > 1
		|	И НЕ МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус В (&СтатусыДействительнойДоверенности)";
	
	Запрос.УстановитьПараметр("Организация", 							Доверитель);
	Запрос.УстановитьПараметр("СостоянияДействительнойДоверенности", 	СостоянияДействительнойДоверенности);
	Запрос.УстановитьПараметр("ИсключаемыйСтатусОтправки", 				"Отозвано");
	Запрос.УстановитьПараметр("СтатусыДействительнойДоверенности", 		СтатусыДействительнойДоверенности);
	Запрос.УстановитьПараметр("ПредставительИНН", 						ПредставительИНН);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает данные для заполнения регламентированного отчета "Налог на прибыль" в помощнике.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация
//  ДатаКонцаПериода - Дата - дата конца периода отчета
// 
// Возвращаемое значение:
//  Структура:
//    * ОтчетМожноЗаполнитьВПомощнике - Булево - Истина, если отчет можно заполнить в форме помощника
//    * ПараметрыПравила - Структура - параметры правила для списка задач бухгалтера
//
Функция ДанныеДляЗаполненияОтчетаВПомощнике(Организация, ДатаКонцаПериода) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ОтчетМожноЗаполнитьВПомощнике", Ложь);
	ДанныеДляЗаполнения.Вставить("ПараметрыПравила", Неопределено);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПараметрыФормированияДекларацийПоОбособленнымПодразделениямВПомощнике(
		ДанныеДляЗаполнения, Организация, ДатаКонцаПериода);
		
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НормализоватьЗаменуКодовЦЕМПОС(Знач СтрокаXML)
	
	СоответствиеКодов = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ЧтениеXML.Прочитать();
	Исключение
		Возврат СоответствиеКодов;
	КонецПопытки;
	Если ЧтениеXML.Имя = "string" Тогда 
		ЧтениеXML.Прочитать();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			СтрокаXML = ЧтениеXML.Значение;
		КонецЕсли;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("КодРегиона",, "regionCode");
	ТаблицаИзменений.Колонки.Добавить("СтарыйКод",, "oldCode");
	ТаблицаИзменений.Колонки.Добавить("НовыйКод",, "newCode");
	ТаблицаИзменений.Колонки.Добавить("НачалоДействия",, "date");
	ТаблицаИзменений.Колонки.Добавить("НазваниеТОГС",, "recipientName");
	ТаблицаИзменений.Колонки.Добавить("Город",, "city");
			
	Разыменователь = Новый РазыменовательПространствИменDOM(ДокументDOM);
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath("//recipient", ДокументDOM, Разыменователь, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	Узел = РезультатXPath.ПолучитьСледующий();
	Пока Узел <> Неопределено Цикл 
		СтарыйКод = "";
		НовыйКод = "";
		Для Каждого Вложенный Из Узел.ДочерниеУзлы Цикл
			Если Вложенный.ИмяЭлемента = "oldCode" Тогда 
				СтарыйКод = Вложенный.ТекстовоеСодержимое;
			ИначеЕсли Вложенный.ИмяЭлемента = "newCode" Тогда 
				НовыйКод = Вложенный.ТекстовоеСодержимое;
			ИначеЕсли Вложенный.ИмяЭлемента = "date" Тогда 
				Попытка
					НачалоДействия = XMLЗначение(Тип("Дата"), Вложенный.ТекстовоеСодержимое); // +03
					НачалоДействияGMT = УниверсальноеВремя(НачалоДействия, "GMT" + Прав(Вложенный.ТекстовоеСодержимое, 6)); // *00
				Исключение
					СтарыйКод = "";
					Прервать;
				КонецПопытки;
				Если НачалоДействияGMT > ТекущаяУниверсальнаяДата() Тогда 
					СтарыйКод = "";
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтарыйКод <> "" Тогда 
			СоответствиеКодов.Вставить(СтарыйКод, НовыйКод);
		КонецЕсли;
		Узел = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;

	Возврат СоответствиеКодов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции интерфейса взаимодействия с прикладным кодом
// автоматического заполнения данных статистической отчетности.

Функция КлассификаторВидовДеятельности(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okved", "pril_okved_51");
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okved", "pril_okved_51");
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okved", "pril_okved_51");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП2", "Списки2014кв1", "КодыОКВЭД", "ОКВЭД_51");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииОпт(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_7", "okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_7", "s_okp_ei_80");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2014кв1", "s_okp", "okp_7", "okp_ei_80");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииПроизводство(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_50", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_55", "okp_ei_55");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_55", "s_okp_ei_50");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2014кв1", "s_okp", "okp_55", "okp_ei_55");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторПродукцииРозница(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2012кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2010кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2012кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_6", "okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Таб1 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП1", "Списки2014кв1", "s_okp", "pril_okp_6", "s_okp_ei_70");
		Таб2 = ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5м", "Списки2013кв4", "s_okp", "okp_6", "okp_ei_70");
		Возврат ОбъединитьТаблицы(Таб1, Таб2);
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция КлассификаторУслугНаселению(ВерсияКлассификатора)
	
	Если ВерсияКлассификатора = "2010кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2010кв1", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2013кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2013кв1", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2013кв4" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2013кв4", "s_okun");
	ИначеЕсли ВерсияКлассификатора = "2014кв1" Тогда
		Возврат ТаблицаИзМакета("РегламентированныйОтчетСтатистикаФормаП5М", "Списки2014кв1", "s_okun");
	Иначе
		Возврат ПустаяТаблица();
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблица()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Строка64  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(64, ДопустимаяДлина.Переменная));
	Строка512  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код", Строка64);
	Результат.Колонки.Добавить("Наименование", Строка512);
	Результат.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Строка64);
	Результат.Колонки.Добавить("КодЕдиницыИзмерения", Строка64);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИзМакета(ИмяОтчета, ИмяМакета, ИмяОбласти, ИмяОбластиСОтбором = "", ИмяОбластиСЕдиницамиИзмерения = "")
	
	Результат = ПустаяТаблица();
	
	Если Метаданные.Отчеты.Найти(ИмяОтчета) = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	МакетСоставаПоказателей = Отчеты[ИмяОтчета].ПолучитьМакет(ИмяМакета);
	Если ТипЗнч(МакетСоставаПоказателей) <> Тип("ТабличныйДокумент") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Строка16  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(16,  ДопустимаяДлина.Переменная));
	Строка128 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(128, ДопустимаяДлина.Переменная));
	Строка512 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(512, ДопустимаяДлина.Переменная));
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Не (Область.Имя = ИмяОбласти Или Область.Имя = ИмяОбластиСОтбором Или Область.Имя = ИмяОбластиСЕдиницамиИзмерения) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",     Строка16   ,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",Строка512  ,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("НазваниеДоп",Строка128,, МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" И КодПоказателя <> "" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = СокрЛП(КодПоказателя);
					НовСтрока.Название = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.НазваниеДоп = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОбластьСОтбором = ЗначениеЗаполнено(КоллекцияСписковВыбора[ИмяОбластиСОтбором]);
	ЕстьИмяОбластьСЕдиницамиИзмерения = ЗначениеЗаполнено(КоллекцияСписковВыбора[ИмяОбластиСЕдиницамиИзмерения]);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Область", КоллекцияСписковВыбора[ИмяОбласти]);
	Если ЕстьОбластьСОтбором Тогда
		Запрос.УстановитьПараметр("ОбластьСОтбором", КоллекцияСписковВыбора[ИмяОбластиСОтбором]);
	КонецЕсли;
	Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда
		Запрос.УстановитьПараметр("ОбластьСЕдиницамиИзмерения", КоллекцияСписковВыбора[ИмяОбластиСЕдиницамиИзмерения]);
	КонецЕсли;
	
	Если ЕстьОбластьСОтбором Тогда 
		Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда 
			
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название КАК Фильтр,
				|	Таб.НазваниеДоп КАК Название
				|ПОМЕСТИТЬ ВТ_ЕдИзм
				|ИЗ &ОбластьСЕдиницамиИзмерения КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код
				|ПОМЕСТИТЬ ВТ_Отбор
				|ИЗ &ОбластьСОтбором КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование,
				|	ТабЕдИзм.Название КАК НаименованиеЕдиницыИзмерения,
				|	ТабЕдИзм.Код КАК КодЕдиницыИзмерения
				|ИЗ
				|	ВТ_Таб КАК Таб
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдИзм КАК ТабЕдИзм
				|	ПО Таб.Код = ТабЕдИзм.Фильтр
				|ГДЕ
				|	Таб.Код В (ВЫБРАТЬ Отбор.Код ИЗ ВТ_Отбор КАК Отбор)";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код
				|ПОМЕСТИТЬ ВТ_Отбор
				|ИЗ &ОбластьСОтбором КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование
				|ИЗ
				|	ВТ_Таб КАК Таб
				|ГДЕ
				|	Таб.Код В (ВЫБРАТЬ Отбор.Код ИЗ ВТ_Отбор КАК Отбор)";
		КонецЕсли;
	Иначе
		Если ЕстьИмяОбластьСЕдиницамиИзмерения Тогда 
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название КАК Фильтр,
				|	Таб.НазваниеДоп КАК Название
				|ПОМЕСТИТЬ ВТ_ЕдИзм
				|ИЗ &ОбластьСЕдиницамиИзмерения КАК Таб
				|ИНДЕКСИРОВАТЬ ПО Код
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование,
				|	ТабЕдИзм.Название КАК НаименованиеЕдиницыИзмерения,
				|	ТабЕдИзм.Код КАК КодЕдиницыИзмерения
				|ИЗ
				|	ВТ_Таб КАК Таб
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдИзм КАК ТабЕдИзм
				|	ПО Таб.Код = ТабЕдИзм.Фильтр";
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
				|	Таб.Код,
				|	Таб.Название
				|ПОМЕСТИТЬ ВТ_Таб
				|ИЗ &Область КАК Таб
				|;
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Таб.Код КАК Код,
				|	Таб.Название КАК Наименование
				|ИЗ ВТ_Таб КАК Таб";
		КонецЕсли;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из РезультатЗапроса Цикл
		НовСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбъединитьТаблицы(Таб1, Таб2)
	
	Результат = ПустаяТаблица();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таб1", Таб1);
	Запрос.УстановитьПараметр("Таб2", Таб2);
	
	Запрос.Текст = "ВЫБРАТЬ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ПОМЕСТИТЬ ВТ_ТАБ1
		|ИЗ &Таб1 КАК Таб
		|ИНДЕКСИРОВАТЬ ПО Код
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ПОМЕСТИТЬ ВТ_ТАБ2
		|ИЗ &Таб2 КАК Таб
		|ИНДЕКСИРОВАТЬ ПО Код
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Код КАК Код,
		|	Таб.Наименование КАК Наименование,
		|	Таб.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|	Таб.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Таб2.Код КАК Код,
		|		Таб2.Наименование КАК Наименование,
		|		Таб2.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
		|		Таб2.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения
		|	ИЗ
		|		ВТ_ТАБ2 КАК Таб2
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТАБ1 КАК Таб1
		|			ПО Таб2.Код = Таб1.Код
		|	ГДЕ
		|		Таб1.Код ЕСТЬ NULL 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Таб1.Код,
		|		Таб1.Наименование,
		|		ВЫБОР
		|			КОГДА Таб1.НаименованиеЕдиницыИзмерения = """" И НЕ (Таб2.НаименованиеЕдиницыИзмерения ЕСТЬ NULL)
		|				ТОГДА Таб2.НаименованиеЕдиницыИзмерения
		|			ИНАЧЕ Таб1.НаименованиеЕдиницыИзмерения
		|		КОНЕЦ КАК НаименованиеЕдиницыИзмерения,
		|		ВЫБОР
		|			КОГДА Таб1.КодЕдиницыИзмерения = """" И НЕ (Таб2.КодЕдиницыИзмерения ЕСТЬ NULL)
		|				ТОГДА Таб2.КодЕдиницыИзмерения
		|			ИНАЧЕ Таб1.КодЕдиницыИзмерения
		|		КОНЕЦ КАК КодЕдиницыИзмерения
		|	ИЗ
		|		ВТ_ТАБ1 КАК Таб1
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТАБ2 КАК Таб2
		|			ПО Таб1.Код = Таб2.Код) КАК Таб";
		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из РезультатЗапроса Цикл
		НовСтр = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции описания форм статистики.

Функция ЭтоКодПоказателяП(КодПок)
	
	Если СтрДлина(КодПок) < 9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По СтрДлина(КодПок) Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСведенияОПодписантах(Организация, РазделыОтчета, ДатаПодписи, ПереопределяемыеИменаПоказателей = Неопределено) Экспорт 
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	ИмяПоказателяКодНО = "НалоговыйОрган";
	ИмяПоказателяКПП = "КПП";
	Если ТипЗнч(ПереопределяемыеИменаПоказателей) = Тип("Структура") Тогда
		Если ПереопределяемыеИменаПоказателей.Свойство("ИмяПоказателяКодНО") Тогда
			ИмяПоказателяКодНО = ПереопределяемыеИменаПоказателей.ИмяПоказателяКодНО;
		КонецЕсли;
		Если ПереопределяемыеИменаПоказателей.Свойство("ИмяПоказателяКПП") Тогда
			ИмяПоказателяКПП = ПереопределяемыеИменаПоказателей.ИмяПоказателяКПП;
		КонецЕсли;
	КонецЕсли;
	КодНО = СокрЛП(РазделыОтчета.Титульный.Данные[ИмяПоказателяКодНО]);
	КПП = СокрЛП(РазделыОтчета.Титульный.Данные[ИмяПоказателяКПП]);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
			
	Иначе
			
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя  = СведенияОПредставителе.ДокументПредставителя;
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ПрПодп = ТипПодписанта;
	РазделыОтчета.Титульный.Данные.ОргПодписант = Подписант;
	
	Если РазделыОтчета.Титульный.Данные.Свойство("ОргУп") Тогда
		
		РазделыОтчета.Титульный.Данные.ОргУп = НаименованиеОрганизацииПредставителя;
		
	КонецЕсли;
	
	РазделыОтчета.Титульный.Данные.ДокУпПред = ДокументПредставителя;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеНастройки(ИсточникОтчета, ИмяФормыОтчета, ИмяМакета, СтруктураВариантыЗаполнения) Экспорт 
	
	МакетСоставаПоказателей = Отчеты[ИсточникОтчета].ПолучитьМакет(ИмяМакета);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(
				МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ? (НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиОтчета(РазделыОтчета, ПоказателиОтчета) Экспорт 
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруМногострочногоРаздела(ДанныеДопСтрок, ТабличныйДокумент) Экспорт 
	
	Для НомСтр = 1 По ДанныеДопСтрок.Количество() Цикл
		
		ТекСтрокаТаблицы = ДанныеДопСтрок[НомСтр - 1];
		
		Для Каждого Колонка Из ДанныеДопСтрок.Колонки Цикл
			
			ИмяЯчейки     = Колонка.Имя + "_" + НомСтр;
			ОбластьЯчейки = ТабличныйДокумент.Области[ИмяЯчейки];
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			
			ТекСтрокаТаблицы[Колонка.Имя] = ЗначениеЯчейки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(СтруктураПриемник, СтруктураИсточник) Экспорт 
	Если ТипЗнч(СтруктураПриемник) <> Тип("Структура") ИЛИ ТипЗнч(СтруктураИсточник) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементИсточника Из СтруктураИсточник Цикл
		ЗначениеПриемника = Неопределено;
		
		Если СтруктураПриемник.Свойство(ЭлементИсточника.Ключ, ЗначениеПриемника) Тогда
			
			Если ТипЗнч(ЗначениеПриемника) = Тип("Структура") И ТипЗнч(ЭлементИсточника.Значение) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойствСтруктурыПоИсточнику(ЗначениеПриемника, ЭлементИсточника.Значение);
			Иначе
				ЗначениеПриемника = ЭлементИсточника.Значение;
			КонецЕсли;
			
			СтруктураПриемник.Вставить(ЭлементИсточника.Ключ, ЗначениеПриемника);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СобратьДанные(ТабличныйДокумент) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];
		
		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		 ИЛИ НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция РелевантнаяДатаОкончанияОтчетногоПериода(СвойстваОтчета)
	
	Если ТипЗнч(СвойстваОтчета.ДокСсылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
	ИсточникОтчета = РегламентированнаяОтчетностьВызовСервера.ИсточникРегламентированногоОтчета(СвойстваОтчета.ДокСсылка);
	Если СтрНайти(ИсточникОтчета, "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников") = 0 Тогда
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
	ДанныеОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваОтчета.ДокСсылка, "ДанныеОтчета");
	ПоказателиТабличногоДокумента = ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПоказателиТабличногоДокумента, "ДатаПериод") Тогда
		Возврат НачалоДня(НачалоДня(ПоказателиТабличногоДокумента.ДатаПериод) - 1);
	Иначе
		Возврат НачалоДня(СвойстваОтчета.ДатаОкончанияОП);
	КонецЕсли;
	
КонецФункции

Процедура НайтиОбластиТабличногоДокументаПоНачалуИмени(ИменаОбластей, ТабличныйДокумент, Знач НачалоИмени, Исключения = Неопределено)
	
	НачалоИмени = ВРег(НачалоИмени);
	
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Исключения <> Неопределено Тогда
			Если Исключения.Найти(Область.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ВРег(Область.Имя), НачалоИмени) Тогда
			Если ИменаОбластей.Найти(Область.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИменаОбластей.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАктуальныйОтчет(АктуальныйОтчет, РеглОтчеты, ИсточникОтчета, ДополнительныеПараметры)
	
	Если РеглОтчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда 
		ПоОбособленномуПодразделению = ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ОбособленноеПодразделение")
			И ДополнительныеПараметры.ОбособленноеПодразделение;
		Отчеты[ИсточникОтчета].ЗаполнитьАктуальныйОтчет(АктуальныйОтчет, РеглОтчеты, ПоОбособленномуПодразделению);
	Иначе
		АктуальныйОтчет = РеглОтчеты[0];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
