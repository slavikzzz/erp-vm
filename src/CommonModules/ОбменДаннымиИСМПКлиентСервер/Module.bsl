#Область СлужебныеПроцедурыИФункции

// Инициализирует структуру передачи данных
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Ссылка - ОпределяемыйТип.ДокументыИСМП, СправочникСсылка.СтанцииУправленияЗаказамиИСМП - Передаваемый документ
// * Организация - ОпределяемыйТип.Организация - Организация
// * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие
Функция ПараметрыОбработкиДокументов() Экспорт
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("Ссылка");
	ПараметрыОбработки.Вставить("Организация");
	ПараметрыОбработки.Вставить("ДальнейшееДействие");
	ПараметрыОбработки.Вставить("ДополнительныеПараметры");
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбработки;
	
КонецФункции

// Возвращает структуру параметров обновления статуса.
// 
// Параметры:
//  ПараметрыОбновленияСтатуса - Неопределено - Параметры обновления статуса
// 
// Возвращаемое значение:
//  Структура, Неопределено - Параметры обновления статуса:
// * Статус - ПеречислениеСсылка
// * СтатусОбработки - ПеречислениеСсылка
// * ОперацияКвитанции - ПеречислениеСсылка
// * ПротоколОбмена - СправочникСсылка.ИСМППрисоединенныеФайлы
// * ПараметрыЗапроса - Структура
Функция ПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	
	ПараметрыОбновленияСтатуса.Вставить("Статус");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ПротоколОбмена");
	ПараметрыОбновленияСтатуса.Вставить("ПараметрыЗапроса");
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено, HTTPОтветЭмуляция = Неопределено, Соединение = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    "");
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   "");
	
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("ru = 'Скачивание файлов на клиент недоступно при работе в веб-клиенте.';
								|en = 'Скачивание файлов на клиент недоступно при работе в веб-клиенте.'");
	#КонецЕсли
	
	РасширенныеОбработкиОтправкиДанныхВСервис(ПараметрыОтправкиHTTPЗапросов);
	
	ЭтоДвоичныеДанные = ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(ТелоЗапроса) = Тип("Файл");
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено И Не ЭтоДвоичныеДанные И Не ЭтоФайл Тогда
		ТелоЗапросаJSON = ОбщегоНазначенияИСКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
		Иначе
			#Если ВебКлиент Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8);
			#Иначе
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСКлиентСерверПовтИсп.ЗащищенноеСоединение();
		
	Иначе
		
		ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
		
	КонецЕсли;
	
	Если HTTPОтветЭмуляция = Неопределено Тогда
		
		Попытка
			
			Если Соединение = Неопределено Тогда
				
				Соединение = Новый HTTPСоединение(
					ПараметрыОтправкиHTTPЗапросов.Сервер,
					ПараметрыОтправкиHTTPЗапросов.Порт,,,
					ИнтернетПрокси,
					ПараметрыОтправкиHTTPЗапросов.Таймаут,
					ЗащищенноеСоединение);
					
			КонецЕсли;
			
			Если HTTPМетод = "POST" Тогда
				HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
			Иначе
				HTTPОтвет = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ИСМП';
					|en = 'ИСМП'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(
					НСтр("ru = 'Ошибка при выполнении запроса POST %1 в ИС МП %2';
						|en = 'Ошибка при выполнении запроса POST %1 в ИС МП %2'"),
					АдресЗапроса, ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.АдресСервера()) + Символы.ПС +
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			#КонецЕсли
			
		КонецПопытки;
		
	Иначе
		
		HTTPОтвет = HTTPОтветЭмуляция;
		
	КонецЕсли;
	
	ДанныеЛогирования                               = СтруктураДанныхЛогирования();
	ДанныеЛогирования.HTTPЗапросАдресРесурса        = HTTPЗапрос.АдресРесурса;
	ДанныеЛогирования.HTTPЗапросТело                = HTTPЗапрос.ПолучитьТелоКакСтроку();
	ДанныеЛогирования.HTTPЗапросЗаголовки           = HTTPЗапрос.Заголовки;
	ДанныеЛогирования.HTTPМетод                     = HTTPМетод;
	ДанныеЛогирования.ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов;
	ДанныеЛогирования.ТекстОшибки                   = ТекстОшибки;
	ДанныеЛогирования.ЭмуляцияЗапроса               = Не (HTTPОтветЭмуляция = Неопределено);
	
	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
		
		ДанныеЛогирования.HTTPОтветЗаголовки            = HTTPОтвет.Заголовки;
		ДанныеЛогирования.HTTPОтветКодСостояния         = HTTPОтвет.КодСостояния;
		ДанныеЛогирования.HTTPОтветТело                 = HTTPОтвет.Тело;
		
	ИначеЕсли Не HTTPОтвет = Неопределено Тогда
	
		ДанныеЛогирования.HTTPОтветЗаголовки            = HTTPОтвет.Заголовки;
		ДанныеЛогирования.HTTPОтветКодСостояния         = HTTPОтвет.КодСостояния;
		ДанныеЛогирования.HTTPОтветТело                 = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	
	ЛогированиеЗапросовИСМПВызовСервера.ЗаписатьДанныеЛогирования(ДанныеЛогирования);
	
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Конструктор для передачи данных логирования вне зависимости от контекста
// 
// Возвращаемое значение:
//  Структура - Структура данных логирования:
// * ПараметрыОтправкиHTTPЗапросов - Неопределено, Структура - параметры дополнительных свойств
// * HTTPМетод                     - Строка - HTTP-метод
// * HTTPЗапросАдресРесурса        - Строка - адрес
// * HTTPЗапросЗаголовки           - Неопределено, Соответствие - Заголовки запроса HTTP
// * HTTPЗапросТело                - Строка - тело запроса HTTP
// * HTTPОтветЗаголовки            - Неопределено, Соответствие - Заголовки запроса HTTP
// * HTTPОтветТело                 - Строка - тело ответа HTTP
// * HTTPОтветКодСостояния         - Число - код состояния ответа
// * ТекстОшибки                   - Строка - текст ошибки
// * ЭмуляцияЗапроса               - Булево - Истина, если это эмуляция
Функция СтруктураДанныхЛогирования() Экспорт
	
	ДанныеЛогирования = Новый Структура();
	
	ДанныеЛогирования.Вставить("ПараметрыОтправкиHTTPЗапросов", Неопределено);
	ДанныеЛогирования.Вставить("HTTPМетод",                     "");
	ДанныеЛогирования.Вставить("HTTPЗапросАдресРесурса",        "");
	ДанныеЛогирования.Вставить("HTTPЗапросЗаголовки",           Неопределено);
	ДанныеЛогирования.Вставить("HTTPЗапросТело",                "");
	ДанныеЛогирования.Вставить("HTTPОтветЗаголовки",            Неопределено);
	ДанныеЛогирования.Вставить("HTTPОтветТело",                 "");
	ДанныеЛогирования.Вставить("HTTPОтветКодСостояния",         0);
	ДанныеЛогирования.Вставить("ТекстОшибки",                   "");
	ДанныеЛогирования.Вставить("ЭмуляцияЗапроса",               Ложь);
	
	Возврат ДанныеЛогирования;
	
КонецФункции

Функция ЗаголовкиИзHTTPОтвета(Заголовки) Экспорт
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

// Структура результата HTTP запроса
// 
// Возвращаемое значение:
// 	Структура - Результат HTTP-запроса:
// * КодСостояния - Число        - Код состояния HTTP
// * Заголовки    - Соответствие - Заголовки HTTP ответа
// * ТекстОтвета  - Строка       - Текст ответа
// * ТекстОшибки  - Строка       - Текст ошибки
Функция РезультатHTTPЗапроса()
	
	РезультатHTTPЗапроса = Новый Структура;
	РезультатHTTPЗапроса.Вставить("КодСостояния");
	РезультатHTTPЗапроса.Вставить("Заголовки");
	РезультатHTTPЗапроса.Вставить("ТекстОтвета");
	РезультатHTTPЗапроса.Вставить("ТекстОшибки");
	
	Возврат РезультатHTTPЗапроса;
	
КонецФункции

// Обработать результат отправки HTTP-запроса к сервису ИС МОТП.
// 
// Параметры:
//  РезультатЗапроса - (См. РезультатЗапроса) - Результат запроса.
//  ВозможенПустойОтвет - Булево - признак, указывающий, что при наличии пустого ответа, но кода 200 ответ получен положительный
// Возвращаемое значение:
// Структура - Результат отправки HTTP-запроса:
//  * ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//  * ОтветПолучен                - Булево - признак того, что сообщение получено.
//  * КодСостояния                - Число  - Код состояния HTTP-запроса.
//  * ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//  * ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
Функция ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, ВозможенПустойОтвет = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	РезультатОтправкиHTTPЗапроса = РезультатHTTPЗапроса();
	РезультатОтправкиHTTPЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки;
	Если РезультатЗапроса.HTTPОтвет <> Неопределено Тогда
		РезультатОтправкиHTTPЗапроса.КодСостояния = РезультатЗапроса.HTTPОтвет.КодСостояния;
		РезультатОтправкиHTTPЗапроса.Заголовки    = РезультатЗапроса.HTTPОтвет.Заголовки;
		Если ТипЗнч(РезультатЗапроса.HTTPОтвет) = Тип("Структура") Тогда
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.Тело;
		Иначе
			РезультатОтправкиHTTPЗапроса.ТекстОтвета = РезультатЗапроса.HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
	КонецЕсли;
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.';
									|en = 'HTTP-запрос не отправлен.'");
		ИначеЕсли Не ВозможенПустойОтвет Тогда
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.';
											|en = 'Код состояния HTTP: %1.'"), КодСостояния);
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ВозвращаемоеЗначение = HTTPОтветПолучен(ТекстОтвета, КодСостояния, Ложь, РезультатЗапроса);
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		ВозвращаемоеЗначение = HTTPОтветНеПолучен(
			ТекстОшибки,
			ТекстСообщенияXMLОтправлен,
			КодСостояния,
			Ложь, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить из текста JSON структуру.
// 
// Параметры:
// 	ТекстJSON                    - Строка - Текст JSON.
// 	ПреобразовыватьВСоответствие - Булево - Признак преобразования в соответствие.
// Возвращаемое значение:
// 	Структура, Неопределено, Произвольный - Результат преобразования JSON.
Функция ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияИСКлиентСервер.ТекстJSONВОбъект(ТекстJSON, ПреобразовыватьВСоответствие);
	
КонецФункции

// Формирует из структуры текст JSON
// Параметры:
//  ДанныеСтруктура - Структура из КлючИЗначение - Данные для конвертации в текст JSON
//  УдалитьПробелыИПереносыСтрок - Булево - признак, удалять ли пробелы и переносы из конечной строки JSON
// 
// Возвращаемое значение:
// 	Строка - Текст JSON
Функция ОбъектВТекстJSON(ДанныеСтруктура, УдалитьПробелыИПереносыСтрок = Ложь) Экспорт
	
	Возврат ОбщегоНазначенияИСКлиентСервер.ОбъектВТекстJSON(ДанныеСтруктура, УдалитьПробелыИПереносыСтрок);
	
КонецФункции

Процедура РасширенныеОбработкиОтправкиДанныхВСервис(ПараметрыОтправкиHTTPЗапросов) Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Если ОбщегоНазначенияИСМПКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		Модуль.ОбработатьОжиданиеПриОтправкеДанныхВСервис(ПараметрыОтправкиHTTPЗапросов);
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Инициализирует структуру результата обработки HTTP-запроса после получения ответа.
// 
// Параметры:
// 	ТекстВходящегоСообщенияJSON - Строка - Текст входящего сообщения.
// 	КодСостояния                - Число  - Код состояния.
// 
// Возвращаемое значение:
// Структура - Структура со свойствами:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение обработано сервером.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветПолучен(ТекстВходящегоСообщенияJSON, КодСостояния = 200, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         Истина);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  "");
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", ТекстВходящегоСообщенияJSON);
	Иначе
		Попытка
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Ложь);
		Исключение
			ВозвращаемоеЗначение.Объект = ТекстJSONВОбъект(ТекстВходящегоСообщенияJSON, Истина);
		КонецПопытки;
		
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщения", ТекстВходящегоСообщенияJSON);
		Если ВозвращаемоеЗначение.Объект <> Неопределено Тогда
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ОбъектВТекстJSON(ВозвращаемоеЗначение.Объект));
		Иначе
			ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", ТекстВходящегоСообщенияJSON);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата обработки HTTP-запроса после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ЗапросОтправлен             - Булево - признак того, что сообщение отправлено.
//   ОтветПолучен                - Булево - признак того, что сообщение получено.
//   КодСостояния                - Число  - Код состояния HTTP-запроса.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияJSON - Строка - текст ответа, на отправленное сообщение.
//
Функция HTTPОтветНеПолучен(Ошибка, ЗапросОтправлен, КодСостояния = Неопределено, КакФайл = Ложь, ДополнительныеПараметры = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	ВозвращаемоеЗначение.Вставить("ЗапросОтправлен",         ЗапросОтправлен);
	ВозвращаемоеЗначение.Вставить("ОтветПолучен",            Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния", КодСостояния);
	ВозвращаемоеЗначение.Вставить("Объект",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",  Строка(Ошибка));
	
	Если КакФайл Тогда
		ВозвращаемоеЗначение.Вставить("ИмяФайла", "");
	Иначе
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщения",     "");
		ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияJSON", "");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти