////////////////////////////////////////////////////////////////////////////////
// Модуль содержит функционал для раблоты стат.формы учета перемещения товаров
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаписатьПакетПоказателей(Форма, ЗаписьJSON, СписокПоказателей, ИмяПакета = "") Экспорт
	ПоказателиОписания = ПодготовитьПакетПоказателей(Форма, СписокПоказателей);
	Если ПоказателиОписания.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПакета) Тогда 
		ЗаписьJSON.ЗаписатьИмяСвойства(ИмяПакета);
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
	КонецЕсли;
	Для Каждого КЗ Из ПоказателиОписания Цикл 
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства(ПрефиксРеквизита() + КЗ.Ключ);
			ЗаписьJSON.ЗаписатьЗначение(КонвертироватьПоказатель(КЗ.Значение));
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ИмяПакета) Тогда 
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаписатьТаблицуПоказателей(Форма, ЗаписьJSON, ИмяТаблицы) Экспорт
	Если ТипЗнч(Форма) = Тип("Структура") Тогда 
		Таблица = Форма[ИмяТаблицы];
	ИначеЕсли ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Таблица = Форма.РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ПрефиксТаблицы() + ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Таблица Цикл 
		Если Не СтрокаТаблицыЗначенийЗаполнена(Стр) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для Каждого Колонка Из Таблица.Колонки Цикл 
			ЗаписьJSON.ЗаписатьИмяСвойства(Колонка.Имя);
			ЗаписьJSON.ЗаписатьЗначение(КонвертироватьПоказатель(Стр[Колонка.Имя]));
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
КонецПроцедуры

Процедура ЗаписатьИмяЗначениеСвойства(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства) Экспорт
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
	ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
КонецПроцедуры

Процедура ЗагрузитьДанныеВФорму(Форма, Данные) Экспорт 
	РеквизитыФормы = Новый Массив;
	Для Каждого Элт Из Форма.ПолучитьРеквизиты("") Цикл 
		РеквизитыФормы.Добавить(Элт.Имя);
	КонецЦикла;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	СтрокаТаблицы = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл 
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если СтрНачинаетсяС(ИмяСвойства, ПрефиксРеквизита()) Тогда 
				ЧтениеJSON.Прочитать();
				ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
				ИмяРеквизитаНаФорме = СтрЗаменить(ИмяСвойства, ПрефиксРеквизита(), "");
				
				Если ЗначениеЗаполнено(ИмяСвойства) 
					И ЗначениеЗаполнено(ЗначениеСвойства)
					И РеквизитыФормы.Найти(ИмяРеквизитаНаФорме) <> Неопределено Тогда 
					
					ЗагрузитьПоказатель(Форма[ИмяРеквизитаНаФорме], ЗначениеСвойства);
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ИмяСвойства, ПрефиксТаблицы()) Тогда
				СтрокаТаблицы = Неопределено;
				ИмяРеквизитаНаФорме = СтрЗаменить(ИмяСвойства, ПрефиксТаблицы(), "");
				Если РеквизитыФормы.Найти(ИмяРеквизитаНаФорме) = Неопределено Тогда
					СтрокаТаблицы = Неопределено;
					Продолжить;
				КонецЕсли;
				
				ЧтениеJSON.Прочитать();
				Если ЧтениеJSON.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда 
					Продолжить;
				КонецЕсли;
				
				ТаблицФормы = Форма[ИмяРеквизитаНаФорме];
				Пока ЧтениеJSON.Прочитать() Цикл 
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
						Прервать;
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
						СтрокаТаблицы = ТаблицФормы.Добавить();
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
						ЧтениеJSON.Прочитать();
						ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
						ЗагрузитьПоказатель(СтрокаТаблицы[ИмяСвойства], ЗначениеСвойства)
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
КонецПроцедуры

Процедура ЗагрузитьПараметрыДляВыгрузки(ПараметрыВыгрузки, Данные, Префикс) Экспорт 
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Данные);
	СтрокаТаблицы = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл 
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если СтрНачинаетсяС(ИмяСвойства, ПрефиксРеквизита()) Тогда 
				ЧтениеJSON.Прочитать();
				ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
				ИмяСвойстваДляВыгрузки = СтрЗаменить(ИмяСвойства, ПрефиксРеквизита(), "");
				ПараметрыВыгрузки.Вставить(Префикс + "_" + ИмяСвойстваДляВыгрузки, ЗначениеСвойства);
				Если СтрДлина(ЗначениеСвойства) = 8 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеСвойства) Тогда 
					ПараметрыВыгрузки.Вставить(Префикс + "_" + ИмяСвойстваДляВыгрузки + "_Дата",
						ПараметрыВыгрузки.ОТД.ПривестиЗначение(ЗначениеСвойства));
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ИмяСвойства, ПрефиксТаблицы()) Тогда
				СтрокаТаблицы = Неопределено;
				ИмяТаблицыДляВыгрузки = СтрЗаменить(ИмяСвойства, ПрефиксТаблицы(), "");
				ТаблицФормы = Новый ТаблицаЗначений;
				Пока ЧтениеJSON.Прочитать() Цикл 
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
						Прервать;
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
						СтрокаТаблицы = ТаблицФормы.Добавить();
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
						ЧтениеJSON.Прочитать();
						ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
						Если ТаблицФормы.Колонки.Найти(ИмяСвойства) = Неопределено Тогда 
							ТаблицФормы.Колонки.Добавить(ИмяСвойства);
						КонецЕсли;
						СтрокаТаблицы[ИмяСвойства] = ЗначениеСвойства;
						
						Если СтрДлина(ЗначениеСвойства) = 8 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеСвойства) Тогда 
							ИмяСвойства = ИмяСвойства + "_Дата";
							Если ТаблицФормы.Колонки.Найти(ИмяСвойства) = Неопределено Тогда 
								ТаблицФормы.Колонки.Добавить(ИмяСвойства);
							КонецЕсли;
							СтрокаТаблицы[ИмяСвойства] = ПараметрыВыгрузки.ОТД.ПривестиЗначение(ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ПараметрыВыгрузки.Вставить(Префикс + "_" + ИмяТаблицыДляВыгрузки, ТаблицФормы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
КонецПроцедуры

Функция СформироватьСтруктуруГраф123ПриЗагрузке(Показатели, Раздел) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("JSON", СформироватьJSONГрафы123(Показатели, Раздел));
	Результат.Вставить("ФлагОшибки", ПроверитьЗаполнениеГраф123НаНаличиеОшибок(Показатели));
	Результат.Вставить("ТекстовоеОписание", СформироватьОписаниеРезультаГрафы123(Показатели));
	Возврат Результат;
КонецФункции

Функция СформироватьСтруктуруТовараПриЗагрузке(ПоказателиТовар) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Описание", СформироватьОписаниеТовара(ПоказателиТовар));
	Результат.Вставить("Данные", СформироватьJSONТовар(ПоказателиТовар));
	Результат.Вставить("ЕстьОшибка", ПроверитьЗаполнениеПоказателейТовара(ПоказателиТовар));
	Результат.Вставить("InvoicedCost", ПоказателиТовар.InvoicedCost);
	Возврат Результат;
КонецФункции

Функция СоотношениеКурсаДолларРубльКорректно(СтоимостьДоллар, СтоимостьРубль) Экспорт 
	Возврат ЗначениеЗаполнено(СтоимостьДоллар)
		И ЗначениеЗаполнено(СтоимостьРубль)
		И ((1.0*СтоимостьРубль) / СтоимостьДоллар) > 80
		И ((1.0*СтоимостьРубль) / СтоимостьДоллар) < 120;
КонецФункции

Функция ПростыеПоказателиТовара() Экспорт 
	Возврат "MeasureUnitQualifierName,MeasureUnitQualifierCode,GoodsQuantity,StatisticalCostRUB,NetWeightQuantity,"
			+ "CountryCode,CountryName,StatisticalCostUSD,Manufacturer,InvoicedCost,GoodsDescription,GoodsTNVEDCode,"
			+ "TraceMeasureUnitQualifierCode,TraceMeasureUnitQualifierName,TraceGoodsQuantity,"
			+ "RFOGRN,RFINN,RFKPP,RBUNP,RBIdentificationNumber,RKBIN,RKIIN,RAUNN,KGINN,KGOKPO,"
			+ "RASocialServiceNumber,RASocialServiceCertificate,ОКАТО";
КонецФункции

Функция СформироватьJSONТовар(Показатели) Экспорт 
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписатьИмяЗначениеСвойства(ЗаписьJSON, "version", РегламентированнаяОтчетность.ВерсияЛК_ФТС());
	ЗаписатьПакетПоказателей(Показатели, ЗаписьJSON, ПростыеПоказателиТовара());
	ЗаписатьТаблицуПоказателей(Показатели, ЗаписьJSON, "ДекларацияНаТовары");
	ЗаписатьТаблицуПоказателей(Показатели, ЗаписьJSON, "ДополнительнаяИнформация");
	ЗаписатьТаблицуПоказателей(Показатели, ЗаписьJSON, "СредстваИдентификации");
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	Результат = ЗаписьJSON.Закрыть();
	Возврат Результат;
КонецФункции

Функция СформироватьОписаниеТовара(Показатели) Экспорт 
	Описание = Показатели.GoodsTNVEDCode + " / ";
	Описание = Описание + ?(СтрДлина(Показатели.GoodsDescription) > 100,
		Лев(Показатели.GoodsDescription, 98) + "...", Показатели.GoodsDescription);
	Описание = Описание + ?(ЗначениеЗаполнено(Показатели.Manufacturer), "; Производитель: " + Показатели.Manufacturer, "");
	Описание = Описание + ?(ЗначениеЗаполнено(Показатели.InvoicedCost), "; Стоимость: " + Формат(Показатели.InvoicedCost, "ЧДЦ=2"), "");
	Описание = Описание + ?(ЗначениеЗаполнено(Показатели.GoodsQuantity),
		"; Количество: " + Показатели.GoodsQuantity + " " + Показатели.MeasureUnitQualifierName, "");
	Возврат Описание;
КонецФункции

Функция ПроверитьЗаполнениеПоказателейТовара(Показатели) Экспорт 
	Если Не ЗначениеЗаполнено(Показатели.GoodsTNVEDCode) Или Не ЗначениеЗаполнено(Показатели.GoodsDescription)
		Или Не ЗначениеЗаполнено(Показатели.InvoicedCost) Или Не ЗначениеЗаполнено(Показатели.StatisticalCostUSD) 
		Или Не ЗначениеЗаполнено(Показатели.CountryCode) Или Не ЗначениеЗаполнено(Показатели.CountryName) 
		Или Не ЗначениеЗаполнено(Показатели.NetWeightQuantity) Или Не ЗначениеЗаполнено(Показатели.StatisticalCostRUB) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Стр Из Показатели.ДекларацияНаТовары Цикл 
		Если СтрДлина(Стр.CustomsCode) <> 8 
			Или СтрДлина(Стр.GTDNumber) <> 7
			Или Не ЗначениеЗаполнено(Стр.RegistrationDate) Тогда 
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из Показатели.СредстваИдентификации Цикл 
		Если Не ЗначениеЗаполнено(Стр.AggregationKindCode)
			Или Не ЗначениеЗаполнено(Стр.IdentificationMeansKindCode)
			Или Не ЗначениеЗаполнено(Стр.FirstIdentificationMeansItemDetails) Тогда 
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СоотношениеКурсаДолларРубльКорректно(Показатели.StatisticalCostUSD, Показатели.StatisticalCostRUB) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если (Показатели.GoodsQuantity <> Цел(Показатели.GoodsQuantity)) 
		И (Показатели.MeasureUnitQualifierCode = "796" Или Показатели.MeasureUnitQualifierCode = "715") Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Если "RU" = Показатели.CountryCode Тогда 
		Если Не ЗначениеЗаполнено(Показатели.ОКАТО) Или Не ЗначениеЗаполнено(Показатели.Manufacturer) 
			Или Не (СтрПодобнаПоРегулярномуВыражению(Показатели.RFOGRN, "[0-9]{13}") Или СтрПодобнаПоРегулярномуВыражению(Показатели.RFOGRN, "[0-9]{15}"))
			Или Не (СтрПодобнаПоРегулярномуВыражению(Показатели.RFINN, "[0-9]{10}") Или СтрПодобнаПоРегулярномуВыражению(Показатели.RFINN, "[0-9]{12}"))
			Или Не (Не ЗначениеЗаполнено(Показатели.RFKPP) Или СтрПодобнаПоРегулярномуВыражению(Показатели.RFKPP, "[0-9]{9}")) Тогда 
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ТелефонВФорматСтатформы(Телефон) Экспорт
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.ОставитьТолькоЦифрыВСтроке(
		СтрЗаменить(Строка(Телефон), "+7", "8"));
КонецФункции

Функция ОпределитьСсылкуНаСуществующуюСтатформу(Реквизиты) Экспорт
	ОтчетМетаданные = Метаданные.Отчеты.Найти("РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС");
	Если ОтчетМетаданные = Неопределено
		Или НЕ ПравоДоступа("Просмотр", Метаданные.Документы.РегламентированныйОтчет)
		Или Не ПравоДоступа("Использование", ОтчетМетаданные) Тогда 
		
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Реквизиты.Дата));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	РегламентированныйОтчет.ДанныеОтчета КАК ДанныеОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС""
	|	И РегламентированныйОтчет.ВыбраннаяФорма = ""ФормаАналогЛК""
	|	И РегламентированныйОтчет.ДатаНачала = &ДатаНачала
	|	И РегламентированныйОтчет.Организация = &Организация
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();
		Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Или НЕ ДанныеОтчета.Свойство("ОбычныеРеквизитыДляСохранения") Тогда
			Продолжить;
		КонецЕсли;
		
		СписокОснований = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОтчета.ОбычныеРеквизитыДляСохранения, "СписокОснований", Новый СписокЗначений);
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеОтчета.ОбычныеРеквизитыДляСохранения, "Основание") = Реквизиты.Ссылка 
			Или СписокОснований.НайтиПоЗначению(Реквизиты.Ссылка) <> Неопределено Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КонвертироватьПоказатель(Показатель)
	Если ТипЗнч(Показатель) = Тип("Число") Тогда 
		Возврат Формат(Показатель, "ЧГ=");
	ИначеЕсли ТипЗнч(Показатель) = Тип("Дата") Тогда 
		Возврат Формат(Показатель, "ДФ=yyyyMMdd");
	Иначе
		Возврат Строка(Показатель);
	КонецЕсли;
КонецФункции

Процедура ЗагрузитьПоказатель(ФормаПоказатель, Значение)
	Если ТипЗнч(ФормаПоказатель) = Тип("Дата") Тогда 
		КонвертированноеЗначение = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(Значение);
	ИначеЕсли ТипЗнч(ФормаПоказатель) = Тип("Число") Тогда
		ОТЧ = Новый ОписаниеТипов("Число");
		КонвертированноеЗначение = ОТЧ.ПривестиЗначение(Значение);
	Иначе
		КонвертированноеЗначение = Строка(Значение);
	КонецЕсли;
	ФормаПоказатель = КонвертированноеЗначение;
КонецПроцедуры

Функция ПодготовитьПакетПоказателей(Форма, СписокПоказателей)
	Показатели = Новый Соответствие;
	Реквизиты = Новый Массив;
	Если ТипЗнч(Форма) = Тип("Структура") Тогда 
		Для Каждого КЗ Из Форма Цикл 
			Реквизиты.Добавить(КЗ.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Для Каждого Элт Из Форма.ПолучитьРеквизиты("") Цикл 
			Реквизиты.Добавить(Элт.Имя);
		КонецЦикла;
	КонецЕсли;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей, ",", Истина) Цикл 
		Если Реквизиты.Найти(Элт) <> Неопределено И ЗначениеЗаполнено(Форма[Элт]) Тогда 
			Показатели.Вставить(Элт, Форма[Элт]);
		КонецЕсли;
	КонецЦикла;
	Возврат Показатели;
КонецФункции

Функция СтрокаТаблицыЗначенийЗаполнена(Строка)
	Для Каждого Колонка Из Строка.Владелец().Колонки Цикл 
		Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПрефиксТаблицы()
	Возврат "Таблица_";
КонецФункции

Функция ПрефиксРеквизита()
	Возврат "Реквизит_";
КонецФункции

Функция ПроверитьЗаполнениеГраф123НаНаличиеОшибок(Показатели)
	Если Не ЗначениеЗаполнено(Показатели.StreetHouse) Или Не ЗначениеЗаполнено(Показатели.City) Или Не ЗначениеЗаполнено(Показатели.OrganizationName)
		Или Не ЗначениеЗаполнено(Показатели.CountryCode) Или Не ЗначениеЗаполнено(Показатели.CounryName) Тогда 
		Возврат Истина;
	КонецЕсли;
	Если "RU" = Показатели.CountryCode Тогда 
		Если СтрДлина(Показатели.RFINN) = 10 Тогда
			Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Показатели.RFINN, Истина, "") Тогда 
				Возврат Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Показатели.RFKPP) Или Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Показатели.RFKPP, "") Тогда 
				Возврат Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Показатели.RFOGRN) Или Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(Показатели.RFOGRN, Истина, "") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Показатели.BusinessEntityTypeName) 
			Или Не ЗначениеЗаполнено(Показатели.PostalCode)
			Или Не ЗначениеЗаполнено(Показатели.ОКАТО) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатели.IdentityCardOrganizationName) Или ЗначениеЗаполнено(Показатели.IdentityCardDate)
		Или ЗначениеЗаполнено(Показатели.IdentityCardNumber) Или ЗначениеЗаполнено(Показатели.IdentityCardSeries)
		Или ЗначениеЗаполнено(Показатели.IdentityCardName) Или ЗначениеЗаполнено(Показатели.IdentityCardCode) Тогда 
		
		Если Не ЗначениеЗаполнено(Показатели.IdentityCardCode) Или Не ЗначениеЗаполнено(Показатели.IdentityCardName) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Показатели.CommunicationDetails Цикл 
		Если Не ЗначениеЗаполнено(Стр.Phone) Или Не ЗначениеЗаполнено(Стр.E_mail) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция СформироватьОписаниеРезультаГрафы123(Показатели) Экспорт 
	Результат = Показатели.CounryName;
	Если Показатели.CountryCode = "RU" Тогда 
		Результат = Результат + ", " + Показатели.RFOGRN + "/" + Показатели.RFINN + "/" + Показатели.RFKPP + " ";
	ИначеЕсли Показатели.CountryCode = "BY" Тогда 
		Результат = Результат + ", " + Показатели.RBUNP + "/" + Показатели.RBIdentificationNumber + " ";
	ИначеЕсли Показатели.CountryCode = "KZ" Тогда 
		Результат = Результат + ", " + Показатели.RKBIN + "/" + Показатели.RKIIN + " ";
	ИначеЕсли Показатели.CountryCode = "AM" Тогда 
		Результат = Результат + ", " + Показатели.RAUNN + "/" + Показатели.RASocialServiceNumber + "/" + Показатели.RASocialServiceCertificate + " ";
	ИначеЕсли Показатели.CountryCode = "KG" Тогда 
		Результат = Результат + ", " + Показатели.KGINN + "/" + Показатели.KGOKPO + " ";
	КонецЕсли;
	
	ПоказателиОписания = "OrganizationName,BusinessEntityTypeName,AccreditationCertificate,PostalCode,Region,City,StreetHouse,"
		+ "BranchOrganizationName,BranchCounryName,BranchPostalCode,BranchRegion,BranchCity,BranchStreetHouse";
	Для Каждого Элт Из СтрРазделить(ПоказателиОписания, ",", Ложь) Цикл 
		Результат = ?(ЗначениеЗаполнено(Показатели[Элт]), Результат  + ", " + Показатели[Элт], Результат);
	КонецЦикла;
	
	Если Показатели.CommunicationDetails.Количество() > 0 Тогда 
		Результат = Результат + ", " + Показатели.CommunicationDetails[0].Phone + "/" + Показатели.CommunicationDetails[0].E_mail;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СокрЛП(Результат)) Тогда 
		Результат = "<Заполнить>"
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СформироватьJSONГрафы123(Показатели, Раздел) Экспорт 
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписатьИмяЗначениеСвойства(ЗаписьJSON, "version", РегламентированнаяОтчетность.ВерсияЛК_ФТС());
	ЗаписатьИмяЗначениеСвойства(ЗаписьJSON, "chapter", Раздел);
	ЗаписатьПакетПоказателей(Показатели, ЗаписьJSON, ПростыеПоказателиФормыГрафы123());
	ЗаписатьТаблицуПоказателей(Показатели, ЗаписьJSON, "CommunicationDetails");
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	Результат = ЗаписьJSON.Закрыть();
	Возврат Результат;
КонецФункции

Функция ПростыеПоказателиФормыГрафы123()
	Возврат "AccreditationCertificate,BusinessEntityTypeName,City,CounryName,CountryCode,IdentityCardCode,IdentityCardDate,"
		+ "IdentityCardName,IdentityCardNumber,IdentityCardOrganizationName,IdentityCardSeries,"
		+ "OrganizationName,PostalCode,Region,RFINN,RFKPP,RFOGRN,StreetHouse,RBUNP,RBIdentificationNumber,RKBIN,RKIIN,RAUNN,"
		+ "RASocialServiceNumber,RASocialServiceCertificate,KGINN,KGOKPO,ОКАТО";
КонецФункции

Функция ПростыеПоказателиГрафы123() Экспорт 
	Возврат "AccreditationCertificate,BranchCity,BranchCounryName,BranchCountryCode,BranchOrganizationName,BranchPostalCode,"
		+ "BranchRegion,BranchStreetHouse,BusinessEntityTypeName,City,CounryName,CountryCode,IdentityCardCode,IdentityCardDate,"
		+ "IdentityCardName,IdentityCardNumber,IdentityCardOrganizationName,IdentityCardSeries,KGINN,KGINNBranch,KGOKPO,KGOKPOBranch,"
		+ "OrganizationName,PostalCode,RASocialServiceCertificate,RASocialServiceCertificateBranch,RASocialServiceNumber,RASocialServiceNumberBranch,"
		+ "RAUNN,RAUNNBranch,RBIdentificationNumber,RBIdentificationNumberBranch,RBUNP,RBUNPBranch,Region,RFINN,RFINNBranch,RFKPP,"
		+ "RFKPPBranch,RFOGRN,RFOGRNBranch,RKBIN,RKBINBranch,RKIIN,RKIINBranch,StreetHouse,ОКАТО";
КонецФункции

#КонецОбласти
