#Область СлужебныйПрограммныйИнтерфейс

// Для методов служебного API использование не контролируем.
// АПК:581-выкл
// АПК:299-выкл

// Печатает макеты объекта метаданных.
//
// Параметры:
//   МассивОбъектов        - Массив         - Список печатаемых объектов.
//   ПараметрыПечати       - Структура      - Произвольные параметры, переданные при вызове команды печати.
//   КоллекцияПечатныхФорм - Массив         - Сформированные табличные документы и дополнительная информация.
//   ОбъектыПечати         - СписокЗначений - Соответствие между объектами и областями табличного документа.
//       Параметры "МассивОбъектов", "ПараметрыПечати", "КоллекцияПечатныхФорм" и "ОбъектыПечати"
//       передаются из процедуры Печать "как есть".
//       См. описание одноименных параметров в УправлениеПечатьюПереопределяемый.ПриПечати.
//   МенеджерПечати - Произвольный - Модуль менеджера объекта, выполняющего команду печати.
//       В модуле менеджера печати должна быть определена экспортная процедура по шаблону:
//           #Область ПрограммныйИнтерфейс
//           #Область ДляВызоваИзДругихПодсистем
//           // ЗарплатаКадрыПодсистемы
//           
//           // Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//           //
//           // Параметры:
//           //   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//           //
//           Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
//           	
//           	
//           КонецПроцедуры
//           
//           // Конец ЗарплатаКадрыПодсистемы
//           #КонецОбласти
//           #КонецОбласти
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, МенеджерПечати) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерПечати));
	Для Каждого МетаданныеМакета Из ОбъектМетаданных.Макеты Цикл
		Если МетаданныеМакета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТабличныйДокумент
			И УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МетаданныеМакета.Имя) Тогда
			КонтекстПечати = КонтекстПечати(МетаданныеМакета, МассивОбъектов, ОбъектыПечати);
			МенеджерПечати.ПриФормированииПечатнойФормы(КонтекстПечати);
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				МетаданныеМакета.Имя,
				МетаданныеМакета.Представление(),
				КонтекстПечати.ТабличныйДокумент,
				,
				КонтекстПечати.ПолноеИмяМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров печати.
//
// Параметры:
//   МетаданныеМакета  - ОбъектМетаданных: Макет - Метаданные макета печатной формы.
//   МассивОбъектов    - Массив                  - Список печатаемых объектов.
//   ОбъектыПечати     - СписокЗначений          - Соответствие между объектами и областями табличного документа.
//       Параметры "МассивОбъектов" и "ОбъектыПечати" передаются из процедуры Печать "как есть".
//       См. описание одноименных параметров в УправлениеПечатьюПереопределяемый.ПриПечати.
//   ТабличныйДокумент - ТабличныйДокумент       - Табличный документ для вывода печатной формы.
//       Если параметр "ТабличныйДокумент" не указан, то создается новый табличный документ с параметрами:
//       * ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
//       * АвтоМасштаб = Истина;
//       * КлючПараметровПечати = "ПараметрыПечати_<ИмяМакетаБезПрефикса>".
//
// Возвращаемое значение:
//   Структура - Контекст печати.
//       * МассивОбъектов    - Массив            - Соответствует параметру МассивОбъектов.
//       * ОбъектыПечати     - СписокЗначений    - Соответствует параметру ОбъектыПечати.
//       * ТабличныйДокумент - ТабличныйДокумент - Соответствует параметру ТабличныйДокумент.
//       * Макет             - ТабличныйДокумент - Макет печатной формы.
//       * ИменаПараметровОбластей - Структура   - См. УправлениеПечатьюБЗК.ИменаПараметровОбластейСтандартногоМакета.
//       * ПолноеИмяМакета  - Строка             - Полное имя макета печатной формы.
//       * МетаданныеМакета - ОбъектМетаданных: Макет - Метаданные макета печатной формы.
//
Функция КонтекстПечати(МетаданныеМакета, МассивОбъектов = Неопределено, ОбъектыПечати = Неопределено, ТабличныйДокумент = Неопределено) Экспорт
	ПолноеИмяМакета = МетаданныеМакета.Родитель().ПолноеИмя() + "." + МетаданныеМакета.Имя;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	ИменаПараметровОбластей = ИменаПараметровОбластейСтандартногоМакета(ПолноеИмяМакета);
	
	ОтсутствующиеОбласти = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаПараметровОбластей Цикл
		Если Макет.Области.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ОтсутствующиеОбласти.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если ОтсутствующиеОбласти.Количество() > 0 Тогда
		ПолноеИмяКоманды = Метаданные.Обработки.ПанельАдминистрированияБСП.Команды.ПечатныеФормыОтчетыИОбработки.ПолноеИмя();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Пользовательский макет формы ""%1"" не подходит к текущей версии программы.
				|При печати использован типовой макет. Рекомендуется актуализировать или удалить пользовательский макет.
				|
				|В пользовательском макете печати ""%1"" отсутствуют области: ""%3"".
				|
				|Для просмотра настроек макетов печати:
				|- Открыть панель администрирования <a href = ""%4"">""Печатные формы, отчеты и обработки""</a>;
				|- Нажать ""Макеты печатных форм"";
				|- В поле ""Найти"" ввести ""%1"" или ""%2"".
				|
				|Перед актуализацией (или удалением) рекомендуется сделать резервную копию пользовательского макета, например, сохранив его в файл в режиме редактирования (""Еще"" - ""Сохранить"").
				|При актуализации: удалить измененный макет (вернуться к стандартному макету) и точечно внести необходимые изменения (при этом можно копировать ячейки из резервной копии макета).';
				|en = 'User form ""%1"" layout is not supported by the current application version.
				|Typical layout was used for printing. It is recommended to update or delete the user layout.
				|
				|The user print layout ""%1"" does not contain the following areas: ""%3"".
				|
				|To view the print layout settings:
				|- Open administration panel <a href = ""%4"">""Print forms, reports and data processors""</a>;
				|- Click ""Print form layouts"";
				|- In the ""Find"" field enter ""%1"" or ""%2"".
				|
				|Before updating (or deleting) it is recommended to make a backup copy of the user layout, for example, by saving it to a file in edit mode (""More"" - ""Save"").
				|When updating: delete the modified layout (return to the standard layout) and make the necessary changes pointwise (you can copy cells from the layout backup).'"),
			МетаданныеМакета.Представление(),
			МетаданныеМакета.Родитель().Представление(),
			СтрСоединить(ОтсутствующиеОбласти, """, """),
			СтрШаблон("e1cib/command/%1", ПолноеИмяКоманды));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки, , ИдентификаторПредупрежденияВШапкеПечатиДокументов());
		Макет = МакетПоПолномуПути(ПолноеИмяМакета);
	КонецЕсли;
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ЧистоеИмяМакета = МетаданныеМакета.Имя;
		Если СтрНачинаетсяС(ЧистоеИмяМакета, "ПФ_") Тогда
			ЧистоеИмяМакета = Сред(ЧистоеИмяМакета, СтрДлина("ПФ_") + 1);
		КонецЕсли;
		Если СтрНачинаетсяС(ЧистоеИмяМакета, "MXL_") Тогда
			ЧистоеИмяМакета = Сред(ЧистоеИмяМакета, СтрДлина("MXL_") + 1);
		КонецЕсли;
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_" + ЧистоеИмяМакета;
	КонецЕсли;
	
	КонтекстПечати = Новый Структура;
	КонтекстПечати.Вставить("МассивОбъектов", МассивОбъектов);
	КонтекстПечати.Вставить("ОбъектыПечати", ОбъектыПечати);
	КонтекстПечати.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонтекстПечати.Вставить("ПолноеИмяМакета", ПолноеИмяМакета);
	КонтекстПечати.Вставить("Макет", Макет);
	КонтекстПечати.Вставить("МетаданныеМакета", МетаданныеМакета);
	КонтекстПечати.Вставить("ИменаПараметровОбластей", ИменаПараметровОбластей);
	
	Возврат КонтекстПечати;
КонецФункции

// Возвращает структуру параметров макета конфигурации 
// (или указанной области макета).
//
// Параметры:
//  ПутьКМакету - Строка - полный путь к макету в формате:
//                         "Документ.<ИмяДокумента>.<ИмяМакета>"
//                         "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                         "ОбщийМакет.<ИмяМакета>".
//  ИмяОбласти - Строка - Имя области в макете. 
//                        Необязательный. Если не указан, возвращаются все параметры в макете.
//
// Возвращаемое значение:
//  Структура - параметры макета, ключ соответствует имени параметра, значение - Неопределено.
//
Функция ПараметрыСтандартногоМакета(ПутьКМакету, Знач ИмяОбласти = Неопределено) Экспорт
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	Если ЗначениеЗаполнено(ИмяОбласти) Тогда
		ТабличныйДокумент = Макет.ПолучитьОбласть(ИмяОбласти)
	Иначе	
		ТабличныйДокумент = Макет;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначенияБЗК.ПараметрыТабличногоДокумента(ТабличныйДокумент);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры указанных областей макета конфигурации.
//
// Параметры:
//  ПутьКМакету   - Строка - полный путь к макету в формате:
//                           "Документ.<ИмяДокумента>.<ИмяМакета>"
//                           "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                           "ОбщийМакет.<ИмяМакета>".
//  Области - Строка, Массив - области в макете, параметры которых необходимо получить.
//                             Необязательный. Если не указан, возвращаются все области макета.
//
// Возвращаемое значение:
//  Структура - ключ соответствует имени области, значение - Структура -  содержит параметры области.
//
Функция ПараметрыОбластейСтандартногоМакета(ПутьКМакету, Знач Области = Неопределено) Экспорт
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	ИменаОбластей = Новый Массив;
	Если ЗначениеЗаполнено(Области) Тогда
		Если ТипЗнч(Области) = Тип("Строка") Тогда 
			ИменаОбластей = СтроковыеФункцииБЗККлиентСервер.РазделитьИменаСвойств(Области)
		ИначеЕсли ТипЗнч(Области) = Тип("Массив") Тогда
			ИменаОбластей = Области
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый параметр ""ИменаОбластей"".';
									|en = 'Invalid parameter ""ИменаОбластей""'")
		КонецЕсли;	
	Иначе	
		Для Каждого Область Из Макет.Области Цикл
			ИменаОбластей.Добавить(Область.Имя)
		КонецЦикла	
	КонецЕсли;	
	
	Параметры = Новый Структура;
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Параметры.Вставить(
			ИмяОбласти,
			ОбщегоНазначенияБЗК.ПараметрыТабличногоДокумента(Область));
	КонецЦикла;		
	
	Возврат Параметры;
	
КонецФункции

// Возвращает имена параметров всех областей макета конфигурации.
//
// Параметры:
//   ПутьКМакету - Строка - полный путь к макету в формате:
//       "Документ.<ИмяДокумента>.<ИмяМакета>"
//       "Обработка.<ИмяОбработки>.<ИмяМакета>"
//       "ОбщийМакет.<ИмяМакета>".
//
// Возвращаемое значение:
//   Структура - Имена параметров в разрезе имен областей.
//       * Ключ - Строка - Имя области,
//       * Значение - Строка - Имена параметров области через запятую.
//
Функция ИменаПараметровОбластейСтандартногоМакета(ПутьКМакету) Экспорт
	ИменаПараметровОбластей = Новый Структура;
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	Для Каждого Область Из Макет.Области Цикл
		ТабличныйДокумент = Макет.ПолучитьОбласть(Область.Имя);
		
		ИменаПараметровОбласти = ОбщегоНазначенияБЗК.ИменаПараметровТабличногоДокумента(ТабличныйДокумент);
		
		ИменаПараметровОбластей.Вставить(Область.Имя, СтрСоединить(ИменаПараметровОбласти, ","));
	КонецЦикла;
	
	Возврат ИменаПараметровОбластей;
КонецФункции

// Выводит область макета в табличный документ с собственным форматом строк.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Приемник, в который необходимо вывести область.
//   Макет             - ТабличныйДокумент - Источник, из которого необходимо вывести область.
//   ИмяОбласти        - Строка            - Имя области источника, которую необходимо вывести.
//                                           Если не указано, то выводится весь макет.
//
Процедура ВывестиОбластьСФорматомСтрок(ТабличныйДокумент, Макет, ИмяОбласти = Неопределено) Экспорт
	Если ИмяОбласти = Неопределено Тогда
		ТаблицаОбласти = Макет;
	Иначе
		ТаблицаОбласти = Макет.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;
	
	// Вывод области в табличный документ.
	НомерПервойСтрокиПриемника = ТабличныйДокумент.ВысотаТаблицы + 1;
	ТабличныйДокумент.Вывести(ТаблицаОбласти);
	
	// Настройка ширины областей в табличном документе.
	ОбластьПриемник = ТабличныйДокумент.Область(НомерПервойСтрокиПриемника, , ТабличныйДокумент.ВысотаТаблицы);
	ОбластьПриемник.СоздатьФорматСтрок();
	Для Счетчик = 1 По ТаблицаОбласти.ШиринаТаблицы Цикл
		Колонка = ТабличныйДокумент.Область(ОбластьПриемник.Верх, Счетчик, ОбластьПриемник.Низ, Счетчик);
		Колонка.ШиринаКолонки = ТаблицаОбласти.Область(1, Счетчик).ШиринаКолонки;
	КонецЦикла;
КонецПроцедуры

// Получает макет по полному имени.
//
// Параметры:
//   ПутьКМакету - Строка - полный путь к макету в формате:
//       "Документ.<ИмяДокумента>.<ИмяМакета>"
//       "Обработка.<ИмяОбработки>.<ИмяМакета>"
//       "ОбщийМакет.<ИмяМакета>".
//
// Возвращаемое значение:
//    ТабличныйДокумент - Макет.
//
Функция МакетПоПолномуПути(ПутьКМакету) Экспорт
	
	ЧастиПути = СтрРазделить(ПутьКМакету, ".");
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	
	Если ЧастиПути.Количество() = 2 Тогда
		Макет = ПолучитьОбщийМакет(ИмяМакета);
	Иначе
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЧастиПути[0] + "." + ЧастиПути[1]);
		Макет = МенеджерОбъекта.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

// Устанавливает размер полей отступа табличного документа в случае,
//  если величина полей отступа не переопределена пользователем
//  и соответствует умолчаниям табличного документа - 10.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода печатной формы.
//   ПолеСлева         - Число             - См. "ТабличныйДокумент.ПолеСлева"  в синтакс-помощнике.
//   ПолеСверху        - Число             - См. "ТабличныйДокумент.ПолеСверху" в синтакс-помощнике.
//   ПолеСправа        - Число             - См. "ТабличныйДокумент.ПолеСправа" в синтакс-помощнике.
//   ПолеСнизу         - Число             - См. "ТабличныйДокумент.ПолеСнизу"  в синтакс-помощнике.
//
Процедура УстановитьОтступ(ТабличныйДокумент, ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу) Экспорт
	Если  ТабличныйДокумент.ПолеСлева  = 10
		И ТабличныйДокумент.ПолеСверху = 10
		И ТабличныйДокумент.ПолеСправа = 10
		И ТабличныйДокумент.ПолеСнизу  = 10 Тогда
		ТабличныйДокумент.ПолеСлева  = ПолеСлева;
		ТабличныйДокумент.ПолеСверху = ПолеСверху;
		ТабличныйДокумент.ПолеСправа = ПолеСправа;
		ТабличныйДокумент.ПолеСнизу  = ПолеСнизу;
	КонецЕсли;
КонецПроцедуры

// Выводит горизонтальный разделитель страниц в случае, если табличный документ не пустой,
//   и запоминает номер строки табличного документа, с которой начинается фрагмент очередного объекта.
//   См. также УправлениеПечатьюБЗК.ПослеОкончанияПечатиОчередногоОбъекта.
//
// Параметры:
//   КонтекстПечати - Структура - См. описание функции УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПередПечатьюОчередногоОбъекта(КонтекстПечати) Экспорт
	Если КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	КонтекстПечати.Вставить("НачалоОчередногоДокумента", КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы + 1);
КонецПроцедуры

// Задает область печати объекта в табличном документе.
//   Вызывается после УправлениеПечатьюБЗК.ПередНачаломПечатиОчередногоОбъекта.
//
// Параметры:
//   КонтекстПечати - Структура - См. описание функции УправлениеПечатьюБЗК.КонтекстПечати.
//   Ссылка - ЛюбаяСсылка - Объект печати. См. описание одноименного параметра 
//       процедуры УправлениеПечатью.ЗадатьОбластьПечатиДокумента.
//
Процедура ПослеПечатиОчередногоОбъекта(КонтекстПечати, Ссылка) Экспорт
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
		КонтекстПечати.ТабличныйДокумент,
		КонтекстПечати.НачалоОчередногоДокумента,
		КонтекстПечати.ОбъектыПечати,
		Ссылка);
КонецПроцедуры

// Используется для вывода текста сообщения пользователю в виде предупреждения в шапке формы "Печать документов".
//
// Возвращаемое значение:
//   Строка - Значение реквизита Поле объекта СообщениеПользователю.
//       В реквизите Текст объекта СообщениеПользователю может быть как обычный тест,
//       так и шаблон форматированной строки (см. СтроковыеФункции.ФорматированнаяСтрока).
//
Функция ИдентификаторПредупрежденияВШапкеПечатиДокументов() Экспорт
	Возврат "ПредупреждениеВШапкеПечатиДокументов";
КонецФункции

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Предупреждения печатных форм выводятся через сообщения пользователю.
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ИдентификаторПредупреждения = ИдентификаторПредупрежденияВШапкеПечатиДокументов();
	Для Каждого Сообщение Из Сообщения Цикл
		
		// Предупреждения, которые требуют вывода в шапку, маркируются специальным именем поля.
		Если Сообщение.Поле <> ИдентификаторПредупреждения Тогда
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		// Предупреждений может быть несколько, поэтому перед созданием элементов осуществляется подбор свободного имени.
		НомерСуффикса = 0;
		Суффикс = ИдентификаторПредупреждения;
		Пока Форма.Элементы.Найти(Суффикс + Формат(НомерСуффикса, "ЧГ=")) <> Неопределено Цикл
			НомерСуффикса = НомерСуффикса + 1;
		КонецЦикла;
		Если НомерСуффикса <> 0 Тогда
			Суффикс = Суффикс + Формат(НомерСуффикса, "ЧГ=");
		КонецЕсли;
		
		// Если текст объемный (подробный), то из него выделяется краткая часть.
		Позиция = СтрНайти(Сообщение.Текст, Символы.ПС, , , 2);
		Если Позиция > 0 Тогда
			Кратко = СокрЛП(Лев(Сообщение.Текст, Позиция - 1));
			Подробно = Сообщение.Текст;
		Иначе
			Кратко = Сообщение.Текст;
			Подробно = "";
		КонецЕсли;
		
		// Горизонтальная группа.
		Группа = Форма.Элементы.Вставить("Группа" + Суффикс, Тип("ГруппаФормы"), , Форма.Элементы.ГруппаДополнительнаяИнформация);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// Восклицательный знак средних размеров.
		Картинка = Форма.Элементы.Добавить("Картинка" + Суффикс, Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение32;
		
		// Краткий текст предупреждения.
		Надпись = Форма.Элементы.Добавить(Суффикс, Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Кратко);
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		
		Если Подробно <> "" Тогда
			// Гиперссылка "Подробнее...".
			ГруппаПодробнее = Форма.Элементы.Добавить("ГруппаПодробнее" + Суффикс, Тип("ГруппаФормы"), Группа);
			ГруппаПодробнее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПодробнее.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаПодробнее.ОтображатьЗаголовок = Истина;
			ГруппаПодробнее.Заголовок = НСтр("ru = 'Подробнее...';
											|en = 'More...'");
			ГруппаПодробнее.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
			ГруппаПодробнее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаПодробнее.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
			ГруппаПодробнее.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
			ГруппаПодробнее.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			
			// Подробный текст предупреждения.
			Надпись = Форма.Элементы.Добавить("Подробнее" + Суффикс, Тип("ДекорацияФормы"), ГруппаПодробнее);
			Надпись.Вид = ВидДекорацииФормы.Надпись;
			Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Подробно);
			Надпись.АвтоМаксимальнаяШирина = Ложь;
			Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		КонецЕсли;
		
	КонецЦикла;
	
	КадровыйЭДО.ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#Область ПобуквенныйВывод

// Возвращает область печати как табличный документ и его параметры.
//
// Параметры:
//   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//   ИмяОбласти     - Строка    - Имя области или адрес в формате "R1C1:R2C2" (пересечение в формате "<Имя1>|<Имя2>").
//
// Возвращаемое значение:
//   Структура - описание
//       * ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода.
//       * ГруппыОбластей - Соответствие - См. УправлениеПечатьюБЗК.ГруппыОбластей.
//
Функция СекцияПечатнойФормы(КонтекстПечати, ИмяОбласти) Экспорт
	ТабличныйДокумент = КонтекстПечати.Макет.ПолучитьОбласть(ИмяОбласти);
	
	ГруппыОбластей = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КонтекстПечати, "ГруппыОбластей_" + ИмяОбласти);
	Если ГруппыОбластей = Неопределено Тогда
		ГруппыОбластей = ГруппыОбластей(ТабличныйДокумент);
		КонтекстПечати.Вставить("ГруппыОбластей_" + ИмяОбласти, ГруппыОбластей);
	КонецЕсли;
	
	Возврат Новый Структура("ТабличныйДокумент, ГруппыОбластей", ТабличныйДокумент, ГруппыОбластей);
КонецФункции

// Возвращает области табличного документа сгруппированные по именам.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент
//
// Возвращаемое значение:
//   Соответствие - Имена и параметры областей.
//       * Ключ     - Строка    - Имя группы областей табличного документа.
//       * Значение - Структура - Описание группы областей табличного документа.
//           * КоличествоОбластей - Число - Количество областей в группе.
//           * Верхи    - Массив из Число - Варианты верхних координат ячеек области для определения количества строк.
//
Функция ГруппыОбластей(ТабличныйДокумент) Экспорт
	ГруппыОбластей = Новый Соответствие;
	Цифры = "0123456789";
	
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		МассивСтрок = СтрРазделить(Область.Имя, "_", Истина);
		ВГраница = МассивСтрок.ВГраница();
		НомерОбластиСтрокой = МассивСтрок[ВГраница];
		Если ВГраница > 0
			И НомерОбластиСтрокой <> ""
			И СтрРазделить(НомерОбластиСтрокой, Цифры, Ложь).Количество() = 0 Тогда
			НомерОбласти = Число(НомерОбластиСтрокой);
			МассивСтрок.Удалить(ВГраница);
			ИмяГруппы = СтрСоединить(МассивСтрок, "_");
		Иначе
			НомерОбласти = 0;
			ИмяГруппы = Область.Имя;
		КонецЕсли;
		
		Группа = ГруппыОбластей[ИмяГруппы];
		Если Группа = Неопределено Тогда
			Группа = Новый Структура("Верхи, КоличествоОбластей");
			Группа.КоличествоОбластей = 1;
			Группа.Верхи = Новый Массив;
			Группа.Верхи.Добавить(Область.Верх);
			ГруппыОбластей.Вставить(ИмяГруппы, Группа);
		Иначе
			Группа.КоличествоОбластей = Группа.КоличествоОбластей + 1;
			ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(Группа.Верхи, Область.Верх);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГруппыОбластей;
КонецФункции

// Выводит адрес по буквам в секцию табличного документа.
//
// Параметры:
//   Секция     - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы;
//   Адрес      - Строка    - Значение контактной информации типа "Адрес" (строка json или xml).
//   Префикс    - Строка    - Префикс для определения областей вывода полей адреса.
//   ИменаПолей - Строка    - Имена полей адреса, перечисленные через запятую.
//       В табличном документе должны присутствовать области с именами "<Префикс>_<ИмяПоля>_<№>".
//
Процедура ВывестиАдресПоБуквам(Секция, Адрес, Префикс, ИменаПолей) Экспорт
	Структура       = КонтактнаяИнформацияБЗК.СведенияОбАдресеСТипами(Адрес);
	СтруктураАдреса = КонтактнаяИнформацияБЗК.СвернутьСведенияОбАдресе(Структура, ИменаПолей);
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		ВывестиПоБуквам(Секция, ВРег(КлючИЗначение.Значение), Префикс + "_" + КлючИЗначение.Ключ);
	КонецЦикла;
КонецПроцедуры

// Выводит телефон по буквам в секцию табличного документа.
//
// Параметры:
//   Секция           - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы;
//   ЗначениеТелефона - Строка    - Значение контактной информации типа "Телефон" (строка json или xml).
//   ИмяГруппы        - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//
Процедура ВывестиТелефонПоБуквам(Секция, ЗначениеТелефона, ИмяГруппы) Экспорт
	ГруппаОбластей = Секция.ГруппыОбластей[ИмяГруппы];
	Если ГруппаОбластей = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Области с префиксом %1 отсутствуют в макете печатной формы';
									|en = 'Areas with prefix %1 are missing in the print form template'"), ИмяГруппы);
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	КоличествоЯчеек = ГруппаОбластей.КоличествоОбластей;
	ПредставлениеТелефона = КонтактнаяИнформацияБЗК.ПредставлениеТелефона(ЗначениеТелефона, КоличествоЯчеек, Истина);
	
	Точечная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	Длина = Мин(СтрДлина(ПредставлениеТелефона), КоличествоЯчеек);
	Для НомерЯчейки = 1 По Длина Цикл
		Символ = Сред(ПредставлениеТелефона, НомерЯчейки, 1);
		Область = Секция.ТабличныйДокумент.Области[ИмяГруппы + "_" + Формат(НомерЯчейки, "ЧГ=0")];
		Область.Текст = Символ;
		Если Не ПустаяСтрока(Символ) И Символ <> "-" Тогда
			Область.ГраницаСлева  = Точечная;
			Область.ГраницаСверху = Точечная;
			Область.ГраницаСнизу  = Точечная;
			Область.ГраницаСправа = Точечная;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Выводит дату по буквам в секцию табличного документа.
//
// Параметры:
//   Секция    - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы.
//   Дата      - Дата      - Выводимое значение.
//   ИмяГруппы - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//   ФорматнаяСтрока - Строка - См. описание 2го параметра метода глобального контекста "Формат".
//
Процедура ВывестиДатуПоБуквам(Секция, Дата, ИмяГруппы, ФорматнаяСтрока = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат; // Дата пустая - надо оставить возможность вписать дату вручную.
	КонецЕсли;
	Если ФорматнаяСтрока = Неопределено Тогда
		ГруппаОбластей = Секция.ГруппыОбластей[ИмяГруппы];
		Если ГруппаОбластей = Неопределено Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Области с префиксом %1 отсутствуют в макете печатной формы';
										|en = 'Areas with prefix %1 are missing in the print form template'"), ИмяГруппы);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Если ГруппаОбластей.КоличествоОбластей < 8 Тогда
			ФорматнаяСтрока = "ДФ=ddMMyy";
		Иначе
			ФорматнаяСтрока = "ДФ=ddMMyyyy";
		КонецЕсли;
	КонецЕсли;
	ВывестиПоБуквам(Секция, Формат(Дата, ФорматнаяСтрока), ИмяГруппы);
КонецПроцедуры

// Выводит СНИЛС по буквам в секцию табличного документа.
//
// Параметры:
//   Секция    - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы.
//   СНИЛС     - Строка    - Страховой номер индивидуального лицевого счета.
//   ИмяГруппы - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//
Процедура ВывестиСНИЛСПоБуквам(Секция, СНИЛС, ИмяГруппы) Экспорт
	СНИЛСБезРазделителей = СокрЛП(СтрЗаменить(СтрЗаменить(СНИЛС, "-", ""), " ", ""));
	ВывестиПоБуквам(Секция, СНИЛСБезРазделителей, ИмяГруппы);
КонецПроцедуры

// Выводит сумму числом в рублях и копейках по буквам в секцию табличного документа.
//
// Параметры:
//   Секция  - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы.
//   Сумма   - Число     - Выводимое значение.
//   Префикс - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами 
//       "<Префикс>_Рублей_<№>" и "<Префикс>_Копеек_<№>".
//
Процедура ВывестиСуммуПоБуквам(Секция, Сумма, Префикс) Экспорт
	Если ТипЗнч(Сумма) <> Тип("Число") Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Число");
		Сумма = ОписаниеТипов.ПривестиЗначение(Сумма);
	КонецЕсли;
	СуммаРублей = Формат(Цел(Сумма), "ЧДЦ=0; ЧН=; ЧГ=");
	СуммаКопеек = Формат((Сумма - Цел(Сумма))*100, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=; ЧГ=");
	ВывестиПоБуквам(Секция, СуммаРублей, Префикс + "_Рублей", Ложь);
	ВывестиПоБуквам(Секция, СуммаКопеек, Префикс + "_Копеек", Ложь);
КонецПроцедуры

// Выводит число по буквам в секцию табличного документа.
//
// Параметры:
//   Секция    - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы;
//   Текст     - Строка    - Представление выводимого значения.
//   ИмяГруппы - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//   ВыравниваниеПоЛевомуКраю - Булево - Если Истина, то если длина выводимого текста меньше количества областей,
//       то текст прижимается к левому краю (сначала выводятся области слева).
//       Если Ложь - текст прижимается к правому краю (области выводятся с конца).
//
Процедура ВывестиЧислоПоБуквам(Секция, Число, ИмяГруппы, Обязательное = Истина, ФорматнаяСтрока = "ЧДЦ=0; ЧН=0; ЧГ=0") Экспорт
	Если Не Обязательное И Не ЗначениеЗаполнено(Число) Тогда
		Возврат;
	КонецЕсли;
	ВывестиПоБуквам(Секция, Формат(Число, ФорматнаяСтрока), ИмяГруппы, Ложь);
КонецПроцедуры

// Выводит текст по буквам в секцию табличного документа.
//
// Параметры:
//   Секция    - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы;
//   ИмяГруппы - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//
Процедура ВключитьФлажок(Секция, ИмяГруппы) Экспорт
	Секция.ТабличныйДокумент.Области[ИмяГруппы].Текст = "v";
КонецПроцедуры

// Выводит текст по буквам в секцию табличного документа.
//
// Параметры:
//   Секция    - Структура - См. УправлениеПечатьюБЗК.СекцияПечатнойФормы;
//   Текст     - Строка    - Представление выводимого значения.
//   ИмяГруппы - Строка    - Префикс для определения областей вывода полей адреса.
//       В табличном документе должны присутствовать области с именами "<ИмяГруппы>_<№>".
//   ВыравниваниеПоЛевомуКраю - Булево - Если Истина, то если длина выводимого текста меньше количества областей,
//       то текст прижимается к левому краю (сначала выводятся области слева).
//       Если Ложь - текст прижимается к правому краю (области выводятся с конца).
//
Процедура ВывестиПоБуквам(Секция, Текст, ИмяГруппы, ВыравниваниеПоЛевомуКраю = Истина) Экспорт
	ГруппаОбластей = Секция.ГруппыОбластей[ИмяГруппы];
	Если ГруппаОбластей = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Области с префиксом %1 отсутствуют в макете печатной формы';
									|en = 'Areas with prefix %1 are missing in the print form template'"), ИмяГруппы);
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат; // Оптимизация.
	КонецЕсли;
	
	КоличествоСтрок = ГруппаОбластей.Верхи.Количество();
	КоличествоЯчеек = ГруппаОбластей.КоличествоОбластей;
	
	Если КоличествоСтрок > 1 Тогда
		ДлиныСтрок = Новый Массив;
		ДлиныСтрок.Добавить(Цел(КоличествоЯчеек / КоличествоСтрок));
		СтрокиСПробелами = ВРег(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(Текст, ДлиныСтрок));
	Иначе
		СтрокиСПробелами = ВРег(Текст);
	КонецЕсли;
	
	ТабличныйДокумент = Секция.ТабличныйДокумент;
	Если ВыравниваниеПоЛевомуКраю Тогда
		Для НомерЯчейки = 1 По КоличествоЯчеек Цикл
			Область = ТабличныйДокумент.Области[ИмяГруппы + "_" + Формат(НомерЯчейки, "ЧГ=0")];
			Область.Текст = Сред(СтрокиСПробелами, НомерЯчейки, 1);
		КонецЦикла;
	Иначе
		ДлинаСтроки = СтрДлина(СтрокиСПробелами);
		Для НомерЯчейки = 1 По КоличествоЯчеек Цикл
			Область = ТабличныйДокумент.Области[ИмяГруппы + "_" + Формат(КоличествоЯчеек - НомерЯчейки + 1, "ЧГ=0")];
			Область.Текст = ?(НомерЯчейки > ДлинаСтроки, "", Сред(СтрокиСПробелами, ДлинаСтроки - НомерЯчейки + 1, 1));
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// АПК:299-вкл
// АПК:581-вкл

#КонецОбласти
