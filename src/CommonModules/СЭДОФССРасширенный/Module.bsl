#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"3.1.17.8",
		"Роль.ДобавлениеИзменениеСообщенийСЭДОФСС",
		"Роль.ДобавлениеИзменениеУведомленийОбЭЛН",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"3.1.17.8",
		"Роль.ЧтениеСообщенийСЭДОФСС",
		"Роль.ЧтениеУведомленийОбЭЛН",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"3.1.17.8",
		"Роль.ДобавлениеИзменениеНастроекСЭДОФСС",
		"Роль.ДобавлениеИзменениеНастроекПолученияУведомленийОбЭЛН",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"3.1.17.8",
		"Роль.ЧтениеНастроекСЭДОФСС",
		"Роль.ЧтениеНастроекПолученияУведомленийОбЭЛН",
		"ЗарплатаКадрыРасширенная");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.2";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c3688bc8-c767-11ea-80e3-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФССРасширенный.АдаптацияКУчетуВРазрезеСтрахователей";
	Обработчик.Комментарий     = НСтр("ru = 'СЭДО ФСС: Заполнение сведений в разрезе страхователей.';
										|en = 'SSF EDI: Filling in information broken down by insurants.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.60";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("37e53f82-08de-11ed-810b-4cedfb43b11a");
	Обработчик.Процедура       = "РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗаполнитьГоловнуюОрганизацию";
	Обработчик.Комментарий     = НСтр("ru = 'СЭДО ФСС: Заполнение головной организации в списке сообщений ФСС об изменении ЭЛН.';
										|en = 'SSF EDI: Fill a parent company in the list of SSF messages about electronic sick leave record change.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.29.9";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1bf98a4e-9385-11ee-8118-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФССРасширенный.ПровестиВсеДокументыСреднийЗаработокСЭДО";
	Обработчик.Комментарий     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проведение документов ""%1"" для заполнения соответствующих регистров.';
			|en = 'Post the ""%1"" documents to fill corresponding registers.'"),
		Метаданные.Документы.СреднийЗаработокСЭДО.Представление());
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.29.9";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("03343403-beaf-11ee-811a-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФССРасширенный.ДобавитьРолиСреднегоВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей среднего заработка СЭДО в непоставляемые (пользовательские) профили групп доступа.';
										|en = 'Add average EDI earnings roles to non-supplied (user) access group profiles.'");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	СписокОбъектов.Добавить(Документы.ОтзывСогласияНаУведомлениеОбЭЛН);
	СписокОбъектов.Добавить(Документы.СогласиеНаУведомлениеОбЭЛН);
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c89ccf93-44cb-11ea-80d5-4cedfb43b11a", Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "48bc606b-8a2a-11ea-80e1-4cedfb43b11a", Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	Если Не ИспользоватьПроактивныеВыплаты() Тогда
		Обработчики.Добавить(РегистрыСведений.СогласияНаУведомленияОбЭЛН);
	КонецЕсли;
	Обработчики.Добавить(РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН);
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Уведомление Из Уведомления Цикл
		
		ТипСообщения = Число(Уведомление.Тип);
		
		Если ТипСообщения = 5 Тогда
			// Сообщение об изменении состояния ЭЛН.
			РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗагрузитьУведомлениеОНаличииСообщения5(
				Страхователь,
				Уведомление.Идентификатор);
			ОбработанныеУведомления.Добавить(Уведомление);
		ИначеЕсли ТипСообщения = 111 Тогда
			// Уведомление об изменении ЭЛН.
			РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗагрузитьУведомлениеОНаличииСообщения111(
				Страхователь,
				Уведомление.Идентификатор);
			ОбработанныеУведомления.Добавить(Уведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат, Кэш) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипСообщения = Число(Сообщение.Тип);
	
	Если ТипСообщения = 5 Тогда
		// Сообщение об изменении состояния ЭЛН.
		РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗагрузитьСообщение5(
			Страхователь,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 13 Тогда
		// Сообщение о подписке страхователя на уведомления из изменении состояний ЭЛН.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ЗагрузитьСообщение13(
			Страхователь,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат);
	ИначеЕсли ТипСообщения = 111 Тогда
		// Уведомление об изменении ЭЛН.
		РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ЗагрузитьСообщение111(
			Страхователь,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат,
			Кэш);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Ошибки логического контроля приходят только для исходящих сообщений.
	ТипСообщения = Число(ИсходноеСообщение.Тип);
	
	Если ТипСообщения = 3 Тогда
		// Согласие физического лица на уведомление страхователя об изменении состояния ЭЛН по основному месту работы.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ЗагрузитьОшибкуСообщения3(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	ИначеЕсли ТипСообщения = 7 Тогда
		// Согласие страхователя на получение уведомлений об изменении состояния ЭЛН работников.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ЗагрузитьОшибкуСообщения7(
			Страхователь,
			ИсходноеСообщение.Идентификатор,
			ТекстОшибки,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

// См. СЭДОФСС.ЗагрузитьРезультатДоставкиСообщенияСЭДО.
Процедура ЗагрузитьРезультатДоставкиСообщенияСЭДО(Страхователь, Сообщение, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Сообщение.ТипЧислом = 3 Тогда
		// Согласие физического лица на уведомление страхователя об изменении состояния ЭЛН по основному месту работы.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ЗагрузитьРезультатДоставкиСообщения3(
			Страхователь,
			Сообщение,
			Результат);
	ИначеЕсли Сообщение.ТипЧислом = 7 Тогда
		// Согласие страхователя на получение уведомлений об изменении состояния ЭЛН работников.
		РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.ЗагрузитьРезультатДоставкиСообщения7(
			Страхователь,
			Сообщение,
			Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН, Истина);
	Списки.Вставить(Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиПолученияУведомленийОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПодпискиНаУведомленияОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СогласияНаУведомленияОбЭЛН, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН, Истина);
	Списки.Вставить(Метаданные.Справочники.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы, Истина);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО.СреднийЗаработок
	Списки.Вставить(Метаданные.РегистрыСведений.СреднийЗаработокОбщийСЭДО, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СреднийЗаработокСтрахователейСЭДО, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО.СреднийЗаработок
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Чтение.ГруппыФизическихЛиц
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Чтение.Организации
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Изменение.ГруппыФизическихЛиц
	|Документ.ОтзывСогласияНаУведомлениеОбЭЛН.Изменение.Организации
	|Документ.СогласиеНаУведомлениеОбЭЛН.Чтение.ГруппыФизическихЛиц
	|Документ.СогласиеНаУведомлениеОбЭЛН.Чтение.Организации
	|Документ.СогласиеНаУведомлениеОбЭЛН.Изменение.ГруппыФизическихЛиц
	|Документ.СогласиеНаУведомлениеОбЭЛН.Изменение.Организации
	|РегистрСведений.НастройкиПолученияУведомленийОбЭЛН.Чтение.Организации
	|РегистрСведений.НастройкиПолученияУведомленийОбЭЛН.Изменение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Чтение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Изменение.Организации
	|РегистрСведений.ПодпискиНаУведомленияОбЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Чтение.Организации
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СогласияНаУведомленияОбЭЛН.Изменение.Организации
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Чтение.Организации
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.Изменение.Организации
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтзывСогласияНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СогласиеНаУведомлениеОбЭЛНПрисоединенныеФайлы.Изменение.Организации";
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО.СреднийЗаработок
	Описание = Описание + "
	|РегистрСведений.СреднийЗаработокОбщийСЭДО.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СреднийЗаработокОбщийСЭДО.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СреднийЗаработокСтрахователейСЭДО.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СреднийЗаработокСтрахователейСЭДО.Чтение.Организации
	|РегистрСведений.СреднийЗаработокСтрахователейСЭДО.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СреднийЗаработокСтрахователейСЭДО.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.СЭДО.СреднийЗаработок
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН.ПолноеИмя(),
		"Дата",
		"ОбработкаПерсональныхДанных");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН.ПолноеИмя(),
		"Дата",
		"ОбработкаПерсональныхДанных");
	
КонецПроцедуры

#КонецОбласти

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "Документ.СогласиеНаУведомлениеОбЭЛН";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "ФИОСотрудника,АдресСотрудника,ПаспортСотрудника,Дата,СотрудникПодписалСогласие";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СогласияНаУведомленияОбЭЛН";
	НовыеСведения.ПоляРегистрации = "Сотрудник,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Подписано,ДатаСогласия,ДатаОтзываСогласия,Состояние,ОснованиеОтзываСогласия";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.ПодпискиНаУведомленияОбЭЛН";
	НовыеСведения.ПоляРегистрации = "ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "Действует,ДатаОтправки,БудетДействовать";
	НовыеСведения.ОбластьДанных   = "ОбработкаПерсональныхДанных";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект          = "РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН";
	НовыеСведения.ПоляРегистрации = "СНИЛС,ФизическоеЛицо";
	НовыеСведения.ПоляДоступа     = "НомерЛН,СостояниеЭЛН";
	НовыеСведения.ОбластьДанных   = "СостояниеЗдоровья";
	
КонецПроцедуры

// См. ЗащитаПерсональныхДанныхПереопределяемый.ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных.
Процедура ПриЗаполненииСведенийОбУничтожаемыхПерсональныхДанных(ТаблицаСведений) Экспорт

	// Документы.СогласиеНаУведомлениеОбЭЛН
	МетаданныеОбъекта = Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН;
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Реквизиты.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеОбъекта.Реквизиты.ФИОСотрудника.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "ФИО";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Реквизиты.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеОбъекта.Реквизиты.АдресСотрудника.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "МестоРегистрацииПроживания";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Реквизиты.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеОбъекта.Реквизиты.ПаспортСотрудника.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "ПаспортныеДанные";
	
	// РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН;
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект = МетаданныеОбъекта.ПолноеИмя();
	НовыеСведения.ПолеСубъект = МетаданныеОбъекта.Ресурсы.ФизическоеЛицо.ПолноеИмя();
	НовыеСведения.Поля = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		МетаданныеОбъекта.Ресурсы.СНИЛС.ПолноеИмя());
	НовыеСведения.КатегорияДанных = "СНИЛС";
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.СогласиеНаУведомлениеОбЭЛН;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ОтзывСогласияНаУведомлениеОбЭЛН;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаЭЛН

// Обновляет видимость группы и надписи, напоминающей пользователю о необходимости отключения подписки на ЭЛН.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма с группой "ГруппаНапоминаниеОбОтключенииПодпискиНаЭЛН".
//   ПараметрыОбновленияФормы - Структура - Данные формы.
//   ПараметрыПособий - Структура - Кэш формы в части пособий.
//
Процедура ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН(Форма, ПараметрыОбновленияФормы, ПараметрыПособий) Экспорт
	Если ИспользоватьПроактивныеВыплаты() Тогда
		Возврат;
	КонецЕсли;
	Группа = Форма.Элементы.Найти("ГруппаНапоминаниеОбОтключенииПодпискиНаЭЛН");
	Если Группа = Неопределено Тогда
		Группа = ПараметрыОбновленияФормы.Группа;
		Если Группа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыПособий.Свойство("ДоступенОбменЧерезСЭДО") Тогда
		ВключенОбменЧерезСЭДО = ПолучитьФункциональнуюОпцию("ПолучатьУведомленияОбЭЛН");
		ДоступенОбменЧерезСЭДО = ВключенОбменЧерезСЭДО
			И Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь)
			И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН);
		ПараметрыПособий.Вставить("ДоступенОбменЧерезСЭДО", ДоступенОбменЧерезСЭДО);
	КонецЕсли;
	Если Не ПараметрыПособий.ДоступенОбменЧерезСЭДО Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	РежимВыбора = ОбщегоНазначенияБЗК.ЗначениеСвойства(Форма.Элементы, "Список.РежимВыбора");
	Если РежимВыбора = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбновленияФормы.Организация <> Неопределено
		И ПараметрыОбновленияФормы.Сотрудники <> Неопределено
		И ПараметрыОбновленияФормы.ДатаУвольнения <> Неопределено Тогда
		
		ОбновитьНапоминаниеВУвольнении(Форма, Группа, ПараметрыОбновленияФормы);
		
	Иначе
		
		ОбновитьОбщееНапоминание(Форма, Группа, ПараметрыПособий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	Попытка
		РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(
			БольничныйОбъект.Организация,
			БольничныйОбъект.НомерЛисткаНетрудоспособности);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиОтпускаПоУходуЗаРебенком(ОтпускПоУходуОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента(ОтпускПоУходуОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ОтпускПоУходуОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиДокументаПрогулНеявка(ПрогулНеявкаОбъект, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(ПрогулНеявкаОбъект.НомерЛН) Тогда
		Попытка
			РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(
				ПрогулНеявкаОбъект.Организация,
				ПрогулНеявкаОбъект.НомерЛН);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
				"РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
				ПрогулНеявкаОбъект.Ссылка);
		КонецПопытки;
	КонецЕсли;
	
	ЗначенияДоЗаписи = ПрогулНеявкаОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	Если Не ЗначенияДоЗаписи.ЭтоНовый И ЗначениеЗаполнено(ЗначенияДоЗаписи.НомерЛН) Тогда
		Если ПрогулНеявкаОбъект.Организация <> ЗначенияДоЗаписи.Организация
			Или ПрогулНеявкаОбъект.НомерЛН <> ЗначенияДоЗаписи.НомерЛН Тогда
			Попытка
				РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные(
					ЗначенияДоЗаписи.Организация,
					ЗначенияДоЗаписи.НомерЛН);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
					"РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ОбновитьВторичныеДанные",
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
					ПрогулНеявкаОбъект.Ссылка);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

//  Добавляет в список команд создания на основании СведенияОЗастрахованномЛицеФСС.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСведенияОЗастрахованномЛицеФСС(КомандыСозданияНаОсновании) Экспорт
	
	Команда = СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(
		КомандыСозданияНаОсновании, Метаданные.Документы.СведенияОЗастрахованномЛицеФСС);
	Если Команда <> Неопределено Тогда
		Команда.Картинка = БиблиотекаКартинок.ОрганФСС;
		Команда.Обработчик = "СЭДОФССРасширенныйКлиент.СформироватьСведенияОЗастрахованномЛицеФСС";
		Команда.РежимЗаписи = "Проводить";
	КонецЕсли;
	
КонецФункции

Функция СоздатьСведенияОЗастрахованномЛицеФСС(Сведения, Ответственный = Неопределено) Экспорт
	
	Для Каждого СтрокаТЧ Из Сведения Цикл
		
		ДокументСведения = Документы.СведенияОЗастрахованномЛицеФСС.СоздатьДокумент();
		ЗначенияЗаполнения = Новый Структура("ФизическоеЛицо,Организация,Ответственный",
			СтрокаТЧ.ФизическоеЛицо, СтрокаТЧ.Организация, Ответственный);
		ДокументСведения.Заполнить(ЗначенияЗаполнения);
		Попытка
			ДокументСведения.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаТЧ.Документ = ДокументСведения.Ссылка;
			СтрокаТЧ.ДатаСоздания = ДокументСведения.ДатаСоздания;
		Исключение
			Информация = ИнформацияОбОшибке();
			СтрокаТЧ.ОписаниеОшибок = ОбработкаОшибок.КраткоеПредставлениеОшибки(Информация);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Сведения;
	
КонецФункции

Функция ТаблицаСведенияОЗастрахованномЛицеФСС() Экспорт
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСведений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСведений.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.СведенияОЗастрахованномЛицеФСС"));
	ТаблицаСведений.Колонки.Добавить("ОписаниеОшибок", Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ДатаСоздания", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаСведений;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура АдаптацияКУчетуВРазрезеСтрахователей(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	РегистрыСведений.УдалитьПодпискиНаУведомленияОбЭЛН.АдаптацияКУчетуВРазрезеСтрахователей();
	РегистрыСведений.УдалитьСогласияНаУведомленияОбЭЛН.АдаптацияКУчетуВРазрезеСтрахователей();
	Документы.СогласиеНаУведомлениеОбЭЛН.АдаптацияКУчетуВРазрезеСтрахователей(ПараметрыОбновления, ОбработкаЗавершена);
	Документы.ОтзывСогласияНаУведомлениеОбЭЛН.АдаптацияКУчетуВРазрезеСтрахователей(ПараметрыОбновления, ОбработкаЗавершена);
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления,
		"ОбработкаЗавершена",
		ОбработкаЗавершена);
	
КонецПроцедуры

// Проведение всех не помеченных на удаление документов СреднийЗаработокСЭДО для заполнения соответствующих регистров.
Процедура ПровестиВсеДокументыСреднийЗаработокСЭДО(ПараметрыОбновления = Неопределено) Экспорт
	ОбработчикОтложенный = (ПараметрыОбновления <> Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Шапка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СреднийЗаработокСЭДО КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка <= &Ссылка
	|	И НЕ Шапка.ПометкаУдаления
	|	И Шапка.Страхователь <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Шапка.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	// Отключение отбора по количеству записей если обработчик не отложенный.
	Если Не ОбработчикОтложенный Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	// Чтение настроек предшествующей итерации обработчика.
	КлючОбъекта     = "ОбновлениеИнформационнойБазы";
	КлючНастроек    = "ПровестиВсеДокументыСреднийЗаработокСЭДО";
	ИмяПользователя = "";
	Настройки       = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, , , ИмяПользователя);
	
	// Применение отбора по ссылке и дате из предшествующей итерации обработчика.
	Если Настройки = Неопределено Тогда
		Настройки = Новый Структура("Ссылка, ПовторноОбрабатываемые", Неопределено, Новый Массив);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Шапка.Ссылка <= &Ссылка",    "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Шапка.ПометкаУдаления", "НЕ Шапка.ПометкаУдаления");
	Иначе
		Запрос.УстановитьПараметр("Ссылка", Настройки.Ссылка);
	КонецЕсли;
	
	// Получение данных документов.
	СсылкиКОбработке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбработкаЗавершена = Не ОбработчикОтложенный Или СсылкиКОбработке.Количество() < 1000;
	
	// Добавление повторно обрабатываемых.
	Для Каждого Ссылка Из Настройки.ПовторноОбрабатываемые Цикл
		СсылкиКОбработке.Вставить(0, Ссылка);
	КонецЦикла;
	Настройки.ПовторноОбрабатываемые = Новый Массив;
	
	// Проведение документов.
	МетаданныеДокумента  = Метаданные.Документы.СреднийЗаработокСЭДО;
	ПолеБлокировки       = "Ссылка";
	ТаблицаБлокировки    = МетаданныеДокумента.ПолноеИмя();
	Для Каждого Ссылка Из СсылкиКОбработке Цикл
		Если ОбработчикОтложенный Тогда
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
					ПараметрыОбновления,
					ТаблицаБлокировки,
					ПолеБлокировки,
					Ссылка) Тогда
				ОбработкаЗавершена = Ложь;
				Настройки.ПовторноОбрабатываемые.Добавить(Ссылка);
				Текст = НСтр("ru = 'Объект заблокирован, требуется повторная обработка';
							|en = 'The object is locked. Try to process it again'");
				УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(Текст, Ссылка, МетаданныеДокумента);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Настройки.Ссылка = Ссылка;
		Подробно = "";
		Попытка
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			СЭДОФСС.ЗаписатьДокумент(ДокументОбъект, Ложь, "БЗК", РежимЗаписиДокумента.Проведение);
			Если ОбработчикОтложенный Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		Исключение
			Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если ОбработчикОтложенный Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
		КонецПопытки;
		Если Подробно <> "" Тогда
			ОбработкаЗавершена = Ложь;
			Настройки.ПовторноОбрабатываемые.Добавить(Ссылка);
			Текст = НСтр("ru = '%1: При проведении документа возникла ошибка: %2';
						|en = '%1: An error occurred when posting the document: %2'");
			Текст = СтрШаблон(Текст, Ссылка, Подробно);
			УчетПособийСоциальногоСтрахования.ЗаписатьОшибкуВЖурнал(Текст, Ссылка, МетаданныеДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Отметка результата итерации.
	Если ОбработчикОтложенный Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
	Если ОбработкаЗавершена Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта, КлючНастроек, ИмяПользователя);
	ИначеЕсли Настройки.ПовторноОбрабатываемые.Количество() >= 1000 Тогда
		// Остановка окна обрабатываемых данных. При следующей итерации снова будут использованы текущие отборы.
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки, , ИмяПользователя);
	КонецЕсли;
КонецПроцедуры

// Добавляет роли среднего заработка СЭДО в непоставляемые (пользовательские) профили групп доступа.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьРолиСреднегоВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей(
		"СЭДОФССРасширенный.ДобавитьРолиСреднегоВПользовательскиеПрофили");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ДобавлениеИзменениеСреднегоЗаработкаСЭДО");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ЧтениеСреднегоЗаработкаСЭДО");
	
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

Функция ФизическоеЛицоСотрудника(Сотрудник) Экспорт
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо", Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ФизическиеЛицаРегистратора(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗанятостиСотрудников.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
	|ГДЕ
	|	ВидыЗанятостиСотрудников.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Свернуть("ФизическоеЛицо");
	Возврат Таблица.ВыгрузитьКолонку("ФизическоеЛицо");
КонецФункции

Процедура ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС) Экспорт
	
	// Заполнение ссылок физических лиц во входящих документах СФР.
	РегистрыСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ПриИзмененииСНИЛСФизическогоЛица(ФизическоеЛицо, СтарыйСНИЛС, НовыйСНИЛС);
	
КонецПроцедуры

#КонецОбласти

#Область Родственники

Функция КадровыеДанныеРодственника(Родственник, ПолучатьПол = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(Родственник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ОтборКД = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Ссылка", "=", Родственник);
	Возврат КадровыеДанныеРодственников(ОтборКД, ПолучатьПол)[0];
КонецФункции

Функция КадровыеДанныеРодственников(ОтборКД, ПолучатьПол = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтепениРодства.Код КАК Код,
	|	СтепениРодства.Наименование КАК Наименование,
	|	СтепениРодства.Пол КАК Пол
	|ПОМЕСТИТЬ ВТСтепениРодства
	|ИЗ
	|	&СтепениРодства КАК СтепениРодства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РодственникиФизическихЛиц.Ссылка КАК Ссылка,
	|	РодственникиФизическихЛиц.Наименование КАК Наименование,
	|	РодственникиФизическихЛиц.НаименованиеСлужебное КАК НаименованиеСлужебное,
	|	РодственникиФизическихЛиц.ДатаРождения КАК ДатаРождения,
	|	РодственникиФизическихЛиц.СНИЛС КАК СНИЛС,
	|	РодственникиФизическихЛиц.КодСвязи КАК КодСвязи,
	|	РодственникиФизическихЛиц.Фамилия КАК Фамилия,
	|	РодственникиФизическихЛиц.Имя КАК Имя,
	|	РодственникиФизическихЛиц.Отчество КАК Отчество,
	|	ЕСТЬNULL(СтепениРодства1.Пол, ЕСТЬNULL(СтепениРодства2.Пол, НЕОПРЕДЕЛЕНО)) КАК Пол
	|ИЗ
	|	Справочник.РодственникиФизическихЛиц КАК РодственникиФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтепениРодстваФизическихЛиц КАК СтепениРодстваФизическихЛиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепениРодства КАК СтепениРодства1
	|			ПО СтепениРодстваФизическихЛиц.Наименование = СтепениРодства1.Наименование
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепениРодства КАК СтепениРодства2
	|			ПО СтепениРодстваФизическихЛиц.Код = СтепениРодства2.Код
	|		ПО РодственникиФизическихЛиц.СтепеньРодства = СтепениРодстваФизическихЛиц.Ссылка";
	Если ПолучатьПол Тогда
		Запрос.УстановитьПараметр("СтепениРодства", Справочники.СтепениРодстваФизическихЛиц.ТаблицаНачальногоЗаполнения());
	Иначе
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		// Удаление ВТСтепениРодства.
		СхемаЗапроса.ПакетЗапросов.Удалить(0);
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		// Удаление поля "Пол".
		// Индекс необходимо получать в отдельную переменную.
		Индекс = ПоследнийЗапрос.Колонки.Индекс(ПоследнийЗапрос.Колонки.Найти("Пол"));
		ПоследнийЗапрос.Колонки.Удалить(Индекс);
		// Удаление соединений со Справочник.СтепениРодстваФизическихЛиц и ВТСтепениРодства.
		ОператорВыбратьСхемыЗапроса = ПоследнийЗапрос.Операторы[0];
		ОператорВыбратьСхемыЗапроса.Источники.Удалить(1);
		ОператорВыбратьСхемыЗапроса.Источники.Удалить(1);
		ОператорВыбратьСхемыЗапроса.Источники.Удалить(1);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	Если ОтборКД.Элементы.Количество() > 0 Тогда
		ФрагментыУсловий = ЗапросыБЗК.ФрагментыУсловийОтбора(Запрос, ОтборКД, "РодственникиФизическихЛиц");
		Условия = СтрСоединить(ФрагментыУсловий, Символы.ПС + Символы.Таб + "И ");
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ" + Символы.ПС + Символы.Таб + Условия;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Вызывается при получении ЭЛН.
Процедура ЗаполнитьСсылкиРодственников(ФизическоеЛицо, ТаблицаРодственников, Создавать = Истина) Экспорт
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиТаблицыТребующиеЗаполнения = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРодственников Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			СтрокиТаблицыТребующиеЗаполнения.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если СтрокиТаблицыТребующиеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборКД = Новый ОтборКомпоновкиДанных;
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "Владелец", "=", ФизическоеЛицо);
	ЗапросыБЗК.ДобавитьОтбор(ОтборКД, "ПометкаУдаления", "=", Ложь);
	КадровыеДанныеРодственников = КадровыеДанныеРодственников(ОтборКД, Ложь);
	
	БыстрыйПоискРодственников = Новый Соответствие;
	Для Каждого РодственникИБ Из КадровыеДанныеРодственников Цикл
		ДополнитьБыстрыйПоискРодственников(РодственникИБ, БыстрыйПоискРодственников);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыТребующиеЗаполнения Цикл
		Если СтрокаТаблицы.ФИО = "" Тогда
			СтрокаТаблицы.ФИО = СокрП(СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество);
		КонецЕсли;
		Если СтрокаТаблицы.Ключи = Неопределено Тогда
			СтрокаТаблицы.Ключи = ОбменЛисткамиНетрудоспособностиФСС.КлючиПоискаРодственника(СтрокаТаблицы);
		КонецЕсли;
		Для Каждого Ключ Из СтрокаТаблицы.Ключи Цикл
			РодственникИБ = БыстрыйПоискРодственников[Ключ];
			Если РодственникИБ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС)
				И ЗначениеЗаполнено(РодственникИБ.СНИЛС)
				И СтрокаТаблицы.СНИЛС <> РодственникИБ.СНИЛС Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.Ссылка = РодственникИБ.Ссылка;
			ОбновитьРеквизитыРодственникаИБ(СтрокаТаблицы, РодственникИБ, БыстрыйПоискРодственников);
			Прервать;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка)
			И ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС)
			И ЗначениеЗаполнено(СтрокаТаблицы.Фамилия)
			И ЗначениеЗаполнено(СтрокаТаблицы.Имя) Тогда
			РодственникОбъект = СоздатьРодственникаИБ(ФизическоеЛицо, СтрокаТаблицы);
			ДополнитьБыстрыйПоискРодственников(РодственникОбъект, БыстрыйПоискРодственников);
			СтрокаТаблицы.Ссылка = РодственникОбъект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьБыстрыйПоискРодственников(РодственникИБ, БыстрыйПоискРодственников)
	
	Родственник = Новый Структура("ФИО, Фамилия, Имя, Отчество, ДатаРождения, СНИЛС, КодСвязи, РодственникСсылка");
	ЗаполнитьЗначенияСвойств(Родственник, РодственникИБ);
	Родственник.ФИО               = РодственникИБ.Наименование;
	Родственник.РодственникСсылка = РодственникИБ.Ссылка;
	
	Ключи = ОбменЛисткамиНетрудоспособностиФСС.КлючиПоискаРодственника(Родственник);
	Если ЗначениеЗаполнено(Родственник.РодственникСсылка) Тогда
		Ключи.Вставить(0, Родственник.РодственникСсылка);
	КонецЕсли;
	
	Для Каждого Ключ Из Ключи Цикл
		Дубль = БыстрыйПоискРодственников[Ключ];
		Если Дубль <> Неопределено И Дубль.Ссылка <> РодственникИБ.Ссылка Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В базе по ключу %1 обнаружены дубли родственников: %2 и %3';
					|en = 'Relative duplicates were found in the infobase by key %1: %2 and %3'"),
				Ключ,
				Дубль.Ссылка,
				РодственникИБ.Ссылка);
			СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки, РодственникИБ.Ссылка);
			Продолжить;
		КонецЕсли;
		БыстрыйПоискРодственников.Вставить(Ключ, РодственникИБ);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьРодственникаИБ(ФизическоеЛицо, Родственник)
	РодственникОбъект = Справочники.РодственникиФизическихЛиц.СоздатьЭлемент();
	РодственникОбъект.Владелец     = ФизическоеЛицо;
	РодственникОбъект.Фамилия      = Родственник.Фамилия;
	РодственникОбъект.Имя          = Родственник.Имя;
	РодственникОбъект.Отчество     = Родственник.Отчество;
	РодственникОбъект.Наименование = Родственник.ФИО;
	РодственникОбъект.ДатаРождения = Родственник.ДатаРождения;
	РодственникОбъект.СНИЛС        = Родственник.СНИЛС;
	РодственникОбъект.КодСвязи     = Родственник.КодСвязи;
	РодственникОбъект.ЗаполнитьНаименованиеСлужебное();
	РодственникОбъект.ЗаполнитьСтепеньРодства();
	РодственникОбъект.Записать();
	Возврат РодственникОбъект;
КонецФункции

Процедура ОбновитьРеквизитыРодственникаИБ(СтрокаТаблицы, РодственникИБ, БыстрыйПоискРодственников)
	ЗаполнитьФамилию = (Не ЗначениеЗаполнено(РодственникИБ.Фамилия)
		И ЗначениеЗаполнено(СтрокаТаблицы.Фамилия));
	ЗаполнитьИмя = (Не ЗначениеЗаполнено(РодственникИБ.Имя)
		И ЗначениеЗаполнено(СтрокаТаблицы.Имя));
	ЗаполнитьФИО = ЗаполнитьФамилию Или ЗаполнитьИмя;
	ЗаполнитьОтчество = ЗаполнитьФИО
		Или (РодственникИБ.Фамилия = СтрокаТаблицы.Фамилия
			И РодственникИБ.Имя = СтрокаТаблицы.Имя
			И Не ЗначениеЗаполнено(РодственникИБ.Отчество)
			И ЗначениеЗаполнено(СтрокаТаблицы.Отчество));
	ЗаполнитьДатуРождения = (Не ЗначениеЗаполнено(РодственникИБ.ДатаРождения)
		И ЗначениеЗаполнено(СтрокаТаблицы.ДатаРождения));
	ЗаполнитьСНИЛС = (Не ЗначениеЗаполнено(РодственникИБ.СНИЛС)
		И ЗначениеЗаполнено(СтрокаТаблицы.СНИЛС));
	ЗаполнитьКодСвязи = (Не ЗначениеЗаполнено(РодственникИБ.КодСвязи)
		И ЗначениеЗаполнено(СтрокаТаблицы.КодСвязи));
	Если Не ЗаполнитьДатуРождения И Не ЗаполнитьСНИЛС И Не ЗаполнитьКодСвязи И Не ЗаполнитьФИО Тогда
		Возврат;
	КонецЕсли;
	
	РодственникОбъект = РодственникИБ.Ссылка.ПолучитьОбъект();
	
	Если ЗаполнитьФамилию Тогда
		РодственникОбъект.Фамилия = СтрокаТаблицы.Фамилия;
	КонецЕсли;
	Если ЗаполнитьИмя Тогда
		РодственникОбъект.Имя = СтрокаТаблицы.Имя;
	КонецЕсли;
	Если ЗаполнитьОтчество Тогда
		РодственникОбъект.Отчество = СтрокаТаблицы.Отчество;
	КонецЕсли;
	Если ЗаполнитьДатуРождения Тогда
		РодственникОбъект.ДатаРождения = СтрокаТаблицы.ДатаРождения;
	КонецЕсли;
	Если ЗаполнитьСНИЛС Тогда
		РодственникОбъект.СНИЛС = СтрокаТаблицы.СНИЛС;
	КонецЕсли;
	Если ЗаполнитьКодСвязи Тогда
		РодственникОбъект.КодСвязи = СтрокаТаблицы.КодСвязи;
		РодственникОбъект.ЗаполнитьСтепеньРодства();
	КонецЕсли;
	
	РодственникОбъект.Записать();
	
	ДополнитьБыстрыйПоискРодственников(РодственникОбъект, БыстрыйПоискРодственников);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеФорм

// Продолжение процедуры ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН для форм документов Увольнение и УвольнениеСписком.
Процедура ОбновитьНапоминаниеВУвольнении(Форма, Группа, ПараметрыОбновленияФормы)
	СотрудникиСДействующейПодпиской = РегистрыСведений.ПодпискиНаУведомленияОбЭЛН.СотрудникиСДействующейПодпиской(
		ПараметрыОбновленияФормы.Организация,
		ПараметрыОбновленияФормы.Сотрудники);
	Если СотрудникиСДействующейПодпиской.Количество() = 0 Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Надпись = НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа);
	Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ЭлементыПособийОбработкаНавигационнойСсылки");
	Надпись.Заголовок = ЗаголовокНадписиОНеобходимостиОтключенияПодписки(
		СотрудникиСДействующейПодпиской,
		УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.АдресСсылкиДляОтключенияПодпискиНаЭЛН(),
		Формат(ПараметрыОбновленияФормы.ДатаУвольнения + 86400, "ДЛФ=D"),
		Ложь);
КонецПроцедуры

// Продолжение процедуры ОбновитьНапоминаниеОбОтключенииПодписокНаЭЛН для прочих форм.
Процедура ОбновитьОбщееНапоминание(Форма, Группа, ПараметрыПособий)
	ПодпискиТребующиеОтключения = РегистрыСведений.СогласияНаУведомленияОбЭЛН.ТребованияПоОтключениюПодписокНаЭЛН();
	КоличествоСотрудников = ПодпискиТребующиеОтключения.Количество();
	Если КоличествоСотрудников = 0 Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Надпись = НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа);
	
	НесколькоОрганизаций = Неопределено;
	Если Не ПараметрыПособий.Свойство("ИспользоватьНесколькоОрганизаций", НесколькоОрганизаций) Тогда
		НесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыРасширенная");
		ПараметрыПособий.Вставить("ИспользоватьНесколькоОрганизаций", НесколькоОрганизаций);
	КонецЕсли;
	
	Команда = Метаданные.РегистрыСведений.СогласияНаУведомленияОбЭЛН.Команды.ОтключениеЛишнихПодписокНаУведомленияОбЭЛН;
	Надпись.Заголовок = ЗаголовокНадписиОНеобходимостиОтключенияПодписки(
		ПодпискиТребующиеОтключения,
		"e1cib/command/" + Команда.ПолноеИмя(),
		Неопределено,
		НесколькоОрганизаций);
КонецПроцедуры

// Формирует форматированную строку для заголовка декорации о необходимости отключения подписки.
Функция ЗаголовокНадписиОНеобходимостиОтключенияПодписки(ТаблицаСотрудников, НавигационнаяСсылка, ДоКакого, ДобавлятьОрганизацию)
	КоличествоСотрудников = ТаблицаСотрудников.Количество();
	
	Если КоличествоСотрудников = 1 Тогда
		КоличествоОрганизаций = 1;
		ЧтоСделать = СтрШаблон(
			НСтр("ru = 'отключить подписку на уведомления ФСС об изменении состояний ЭЛН %1';
				|en = 'disable subscription to SSF notifications about ESLR status changes %1'"),
			СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(ТаблицаСотрудников[0].ФизическоеЛицо),
				2));
	Иначе
		ТаблицаСотрудников.Свернуть("Страхователь");
		КоличествоОрганизаций = ТаблицаСотрудников.Количество();
		ЧтоСделать = СтрШаблон(
			НСтр("ru = 'отключить подписки на уведомления ФСС об изменении состояний ЭЛН %1 сотрудников';
				|en = 'disable subscriptions to SSF notifications about ESLR status changes for %1 employees'"),
			Формат(КоличествоСотрудников, "ЧГ="));
	КонецЕсли;
	
	Если КоличествоОрганизаций = 1 Тогда
		Если ЗначениеЗаполнено(ДоКакого) Тогда
			Шаблон = СтрШаблон(
				НСтр("ru = 'До <b>%1</b> необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.';
					|en = 'Before <b>%1</b> you need to <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
				ДоКакого);
		ИначеЕсли ДобавлятьОрганизацию Тогда
			Шаблон = СтрШаблон(
				НСтр("ru = '%1 необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.';
					|en = '%1 is required <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
				Строка(ТаблицаСотрудников[0].Страхователь));
		Иначе
			Шаблон = НСтр("ru = 'Необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.';
							|en = 'You need to <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'");
		КонецЕсли;
	Иначе
		Шаблон = СтрШаблон(
			НСтр("ru = '%1 организациям необходимо <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.';
				|en = '%1 companies need to <a href = ""[НавигационнаяСсылка]"">[ЧтоСделать]</a>.'"),
			Строка(КоличествоОрганизаций));
	КонецЕсли;
	
	Шаблон = СтрЗаменить(Шаблон, "[НавигационнаяСсылка]", НавигационнаяСсылка);
	Шаблон = СтрЗаменить(Шаблон, "[ЧтоСделать]", ЧтоСделать);
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(Шаблон);
КонецФункции

// Осуществляет начальную настройку элементов в группе и поиск надписи.
Функция НадписьНапоминанияОбОтключенииПодпискиНаЭЛН(Форма, Группа)
	Группа.Видимость = Истина;
	
	Если Группа.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Группа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		Группа.Заголовок = НСтр("ru = 'Напоминание об отключении подписки на ЭЛН';
								|en = 'Reminder of disabling subscription to ESLR'");
		
		Картинка = Форма.Элементы.Добавить("КартинкаНапоминаниеОбОтключенииПодпискиНаЭЛН", Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение;
		
		Надпись = Форма.Элементы.Добавить("НадписьНапоминаниеОбОтключенииПодпискиНаЭЛН", Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Надпись = Форма.Элементы.НадписьНапоминаниеОбОтключенииПодпискиНаЭЛН;
	КонецЕсли;
	
	Возврат Надпись;
КонецФункции

#КонецОбласти

#Область СогласияНаУведомлениеОбЭЛН

Процедура ПередЗаписьюОснованияОтзываСогласия(ДокументОбъект) Экспорт
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтзывСогласияНаУведомлениеОбЭЛН") Тогда
		Возврат; // См. модуль объекта документа.
	КонецЕсли;
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	Если ДокументОбъект.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	МассивФизическихЛицПередЗаписью = ФизическиеЛицаРегистратора(ДокументОбъект.Ссылка);
	ДокументОбъект.ДополнительныеСвойства.Вставить("МассивФизическихЛицПередЗаписью", МассивФизическихЛицПередЗаписью);
КонецПроцедуры

Процедура ПриЗаписиОснованияОтзываСогласия(ДокументОбъект, Отказ) Экспорт
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтзывСогласияНаУведомлениеОбЭЛН") Тогда
		Возврат; // См. модуль объекта документа.
	КонецЕсли;
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ДокументОбъект) Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Примечание,
			ДокументОбъект.Метаданные(),
			ДокументОбъект.Ссылка,
			НСтр("ru = 'Состав изменений не вычислен, поскольку документ был записан в режиме отключения бизнес логики. Вероятно, он был изменен в другой информационной базе.';
				|en = 'The composition of the changes has not been calculated because the document was written with business logic disabled. It was probably changed in another infobase.'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат;
	КонецЕсли;
	МассивФизическихЛицПередЗаписью = ОбщегоНазначенияБЗК.ЗначениеСвойства(
		ДокументОбъект.ДополнительныеСвойства,
		"МассивФизическихЛицПередЗаписью");
	
	ПредставлениеОперации = НСтр("ru = 'Обновление сведений о согласиях на уведомления об ЭЛН';
								|en = 'Updating information about consents to ESLR notifications'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("МассивФизическихЛицПередЗаписью", МассивФизическихЛицПередЗаписью);
	ПараметрыПроцедуры.Вставить("Ссылка", ДокументОбъект.Ссылка);
	ПараметрыПроцедуры.Вставить("ВерсияДанных", ДокументОбъект.ВерсияДанных);
	ПараметрыПроцедуры.Вставить("ПредставлениеОперации", ПредставлениеОперации);
	ПараметрыЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыЗапуска.ОжидатьЗавершение = 0;
	ПараметрыЗапуска.НаименованиеФоновогоЗадания = ПредставлениеОперации;
	ПараметрыЗапуска.ЗапуститьВФоне = Истина;
	ДлительныеОперации.ВыполнитьВФоне(
		"СЭДОФССРасширенный.ОбновитьСведенияОСогласииВФоне",
		ПараметрыПроцедуры,
		ПараметрыЗапуска);
КонецПроцедуры

Процедура ОбновитьСведенияОСогласииВФоне(Параметры, АдресХранилища) Экспорт
	ДождалисьОкончанияЗаписи = ДождатьсяОкончанияЗаписиОбъекта(
		Параметры.Ссылка,
		Параметры.ВерсияДанных,
		Параметры.ПредставлениеОперации);
	Если Не ДождалисьОкончанияЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	МассивФизическихЛиц = ФизическиеЛицаРегистратора(Параметры.Ссылка);
	
	МассивФизическихЛицПередЗаписью = Параметры.МассивФизическихЛицПередЗаписью;
	Если МассивФизическихЛицПередЗаписью <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивФизическихЛиц,
			МассивФизическихЛицПередЗаписью,
			Истина);
	КонецЕсли;
	
	РегистрыСведений.СогласияНаУведомленияОбЭЛН.ОбновитьПоФизическимЛицам(МассивФизическихЛиц);
	
КонецПроцедуры

Функция ДождатьсяОкончанияЗаписиОбъекта(Ссылка, ВерсияДанных, ПредставлениеОперации)
	Если ВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВерсияДанных") Тогда
		Возврат Истина; // Объект записан.
	КонецЕсли;
	
	ОбъектМетаданных = Ссылка.Метаданные();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Начало';
						|en = '%1: Waiting for object writing: Starting'"), ПредставлениеОперации));
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		ОтменитьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(
			НСтр("ru = '%1: Не удалось дождаться записи объекта по причине: %2';
				|en = '%1: Cannot wait for object writing. Reason: %2'"),
			ПредставлениеОперации,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурнала(),
			УровеньЖурналаРегистрации.Ошибка,
			ОбъектМетаданных,
			Ссылка,
			ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурнала(),
		УровеньЖурналаРегистрации.Примечание,
		ОбъектМетаданных,
		Ссылка,
		СтрШаблон(НСтр("ru = '%1: Ожидание записи объекта: Завершение';
						|en = '%1: Waiting for object writing: Finalizing'"), ПредставлениеОперации));
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ВходящиеЗапросыИОтветыНаЗапросы

Функция ОтветНаЗапросРасширенныеДанные(Документ) Экспорт
	Результат = Новый Структура("ДоговорГПХОблагаетсяВзносамиНС", Ложь);
	
	// Про флажок "ДоговорГПХОблагаетсяВзносамиНС" в xsd схеме написано:
	// "В договоре ГПХ указана обязанность уплаты страховых взносов от НС и ПЗ".
	// Т.е. речь не про фактические выплаты, а про наличие страхования от НС/ПЗ.
	
	МинимальныйГод = Год(УчетСтраховыхВзносов.ДатаОбъединенияВзносов());
	
	ВторойГодОбработан = Ложь;
	Если ЗначениеЗаполнено(Документ.ПервыйРасчетныйГод) И Документ.ПервыйРасчетныйГод >= МинимальныйГод Тогда
		ДатаНачала    = НачалоДня(Дата(Документ.ПервыйРасчетныйГод, 1, 1));
		ДатаОкончания = КонецГода(ДатаНачала);
		Если Документ.ВторойРасчетныйГод = Документ.ПервыйРасчетныйГод + 1 Тогда
			ВторойГодОбработан = Истина;
			ДатаОкончания = КонецДня(Дата(Документ.ВторойРасчетныйГод, 12, 31));
		КонецЕсли;
		СведенияОДоговорахГПХ = СведенияОДоговорахГПХ(Документ.ГоловнаяОрганизация, Документ.ФизическоеЛицо, ДатаНачала, ДатаОкончания);
		Если СведенияОДоговорахГПХ.Найти(Истина, "ОблагаетсяФСС_НС") <> Неопределено Тогда
			Результат.ДоговорГПХОблагаетсяВзносамиНС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат.ДоговорГПХОблагаетсяВзносамиНС
		И Не ВторойГодОбработан
		И ЗначениеЗаполнено(Документ.ВторойРасчетныйГод)
		И Документ.ВторойРасчетныйГод >= МинимальныйГод Тогда
		ДатаНачала    = НачалоДня(Дата(Документ.ВторойРасчетныйГод, 1, 1));
		ДатаОкончания = КонецГода(ДатаНачала);
		СведенияОДоговорахГПХ = СведенияОДоговорахГПХ(Документ.ГоловнаяОрганизация, Документ.ФизическоеЛицо, ДатаНачала, ДатаОкончания);
		Если СведенияОДоговорахГПХ.Найти(Истина, "ОблагаетсяФСС_НС") <> Неопределено Тогда
			Результат.ДоговорГПХОблагаетсяВзносамиНС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ДГПХ

Функция СведенияОДоговорахГПХ(ГоловнаяОрганизация, ФизическоеЛицо, ДатаНачала, ДатаОкончания)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ФильтрОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Ссылка КАК Ссылка,
	|	ДоговорРаботыУслуги.ОблагаетсяФСС_НС КАК ОблагаетсяФСС_НС,
	|	ДоговорРаботыУслуги.Организация КАК Организация,
	|	ДоговорРаботыУслуги.Подразделение КАК Подразделение,
	|	ДоговорРаботыУслуги.Сотрудник КАК Сотрудник,
	|	ДоговорРаботыУслуги.ДатаНачала КАК ДатаНачала,
	|	ДоговорРаботыУслуги.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФильтрОрганизаций КАК ФильтрОрганизаций
	|		ПО ДоговорРаботыУслуги.Организация = ФильтрОрганизаций.Ссылка
	|ГДЕ
	|	ДоговорРаботыУслуги.ФизическоеЛицо = &ФизическоеЛицо
	|	И ДоговорРаботыУслуги.Проведен
	|	И ДоговорРаботыУслуги.ДатаНачала <= &ДатаОкончания
	|	И ДоговорРаботыУслуги.ДатаОкончания >= &ДатаНачала
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорРаботыУслуги.Ссылка,
	|	ЛОЖЬ,
	|	ДоговорРаботыУслуги.Организация,
	|	ДоговорРаботыУслуги.Подразделение,
	|	ДоговорРаботыУслуги.Сотрудник,
	|	ДоговорРаботыУслуги.ДатаНачала,
	|	ДоговорРаботыУслуги.ДатаОкончания
	|ИЗ
	|	Документ.ДоговорАвторскогоЗаказа КАК ДоговорРаботыУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФильтрОрганизаций КАК ФильтрОрганизаций
	|		ПО ДоговорРаботыУслуги.Организация = ФильтрОрганизаций.Ссылка
	|ГДЕ
	|	ДоговорРаботыУслуги.ФизическоеЛицо = &ФизическоеЛицо
	|	И ДоговорРаботыУслуги.Проведен
	|	И ДоговорРаботыУслуги.ДатаНачала <= &ДатаОкончания
	|	И ДоговорРаботыУслуги.ДатаОкончания >= &ДатаНачала";
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ИмяСобытияЖурнала() Экспорт
	Возврат СЭДОФСС.ИмяСобытияЖурнала();
КонецФункции

#КонецОбласти

Функция ИзменитьПометкуУдаления(МассивСсылок, ПометкаУдаления) Экспорт
	Измененные = Новый Массив;
	
	Право = ?(ПометкаУдаления, "ИнтерактивнаяПометкаУдаления", "ИнтерактивноеСнятиеПометкиУдаления");
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Заблокированные = Новый Массив;
		Для Каждого Ссылка Из МассивСсылок Цикл
			ОбъектМетаданных = Ссылка.Метаданные();
			Если Не ПравоДоступа(Право, ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			ЭлементБлокировки = Блокировка.Добавить(ОбъектМетаданных.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Заблокированные.Добавить(Ссылка);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		Для Каждого Ссылка Из Заблокированные Цикл
			ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
			Если ИзменяемыйОбъект = Неопределено
				Или ИзменяемыйОбъект.ПометкаУдаления = ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ИзменяемыйОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			Измененные.Добавить(Ссылка);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Измененные;
КонецФункции

// Возвращает дату вступления в силу Федерального закона от 30.04.2021 № 126-ФЗ.
Функция ИспользоватьПроактивныеВыплаты(Дата = Неопределено) Экспорт
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат Дата >= СЭДОФСС.ДатаНачалаПроактивныхВыплат();
КонецФункции

#КонецОбласти
