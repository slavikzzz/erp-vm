
#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Плановые начисления сотрудников';
															|en = 'Scheduled employee earnings'");
	ГруппаПроверок.Идентификатор				= "КонтрольПлановыхНачисленийСотрудников";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Соответствие начисленного оклада сотрудника плановому.';
													|en = 'Compliance of the employee''s accrued salary with the planned one.'");
	Проверка.Причины						= НСтр("ru = 'Начисленный оклад превышает размер планового';
													|en = 'The accrued salary exceeds the planned one'");
	Проверка.Рекомендация					= НСтр("ru = 'Пересмотреть начисленный оклад сотрудника';
													|en = 'Review the employee''s accrued salary'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаПревышенияПлановогоОкладаСотрудников";
	Проверка.ОбработчикПроверки				= "ПлановыеНачисленияСотрудниковПроверки.ПроверкаПревышенияПлановогоОкладаСотрудников";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Наличие иных начислений у сотрудника в отпуске по уходу за ребенком';
													|en = 'Availability of other accruals of an employee on a child care leave'");
	Проверка.Причины						= НСтр("ru = 'Обнаружены начисления, недопустимые в период отпуска по уходу за ребенком';
													|en = 'Found accruals that are inadmissible during child care leave'");
	Проверка.Рекомендация					= НСтр("ru = 'Пересмотреть начисления сотрудника';
													|en = 'Review employee accruals'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаИныхНачисленийВОтпускеПоУходуЗаРебенком";
	Проверка.ОбработчикПроверки				= "ПлановыеНачисленияСотрудниковПроверки.ПроверкаИныхНачисленийВОтпускеПоУходуЗаРебенком";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

#КонецОбласти

// Метод выполняет обновление записей в регистрах вторичных данных плановых начислений.
// 
// Параметры
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицу
//		ВТПериодыОбновленияВторичныхДанных с полями (данная таблица описывает причины перерасчета вторичных данных)
//			Сотрудник - сотрудник по которому нужно обновить данные ФОТ
//			ДатаНачала - период начисления, с которого нужно обновить ФОТ
//			ИзменениеНачислений - булево, признак того, что изменились плановые начисления сотрудников
//			ДатаИзмененияНачислений - минимальный период изменения плановых начислений
//			ИзменениеЗначенийПоказателей - булево, признак того, что изменились данные периодических показателей сотрудников
//			ДатаИзмененияПоказателей - минимальный период изменения данных периодических показателей сотрудников
//			ИзменениеГрафика  - булево, признак того, что изменился график работы сотрудников
//			ДатаИзмененияГрафика - минимальный период изменения графика
//			ИзменениеКоличестваСтавок  - булево, признак того, что изменилось количество ставок который занимает сотрудник
//			ДатаИзмененияКоличестваСтавок - минимальный период изменения количества ставок
//			ИзменениеДанныхСтажа - булево, признак того, что изменился стаж сотрудников
//			ДатаИзмененияДанныхСтажа - минимальный период, начиная с которого изменился стаж
//			ИзменениеДанныхГрафика - булево, признак того, что изменились данные графиков
//			ДатаИзмененияДанныхГрафика - минимальный период, начиная с которого изменились данные графиков.
//			
Процедура СформироватьДвиженияВторичныхДанных(МенеджерВременныхТаблиц, ИзменившиесяНачисления = Неопределено, ИзменившиесяПоказатели = Неопределено, РассчитанныеДанныеФОТ = Неопределено, ОбновлятьБезусловно = Ложь, ГраницаКонтроляИзмененийСтажа = '00010101') Экспорт
	
	Если ИзменившиесяНачисления = Неопределено Тогда
		ИзменившиесяНачисления = Новый Соответствие;
	КонецЕсли;
	
	Если ИзменившиесяПоказатели = Неопределено Тогда
		ИзменившиесяПоказатели = Новый Соответствие;
	КонецЕсли;
	
	ТекущиеДанныеФОТ = ТекущиеДанныеФОТ(МенеджерВременныхТаблиц);	
	ТекущиеСводныеДанные = ТекущиеСводныеДанные(МенеджерВременныхТаблиц);
		
	ОписаниеТаблицыФильтра = ОписаниеТаблицыФильтраСоздатьВТИнтервалыДействияРесурсов();
	ОписаниеТаблицыФильтра.ИмяТаблицыФильтра = "ВТПериодыОбновленияВторичныхДанных";	
	ОписаниеТаблицыФильтра.ИмяПоляДатаНачала = "ДатаНачала";	
	ОписаниеТаблицыФильтра.СвязьИзмерений.Вставить("Сотрудник", "Сотрудник");	
	
	СоздатьВТИнтервалыДействияРесурсов(МенеджерВременныхТаблиц, "ГрафикРаботыСотрудников", ОписаниеТаблицыФильтра);
	СоздатьВТИнтервалыДействияРесурсов(МенеджерВременныхТаблиц, "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", ОписаниеТаблицыФильтра);	
	СоздатьВТИнтервалыДействияРесурсов(МенеджерВременныхТаблиц, "КадроваяИсторияСотрудников", ОписаниеТаблицыФильтра);	
	СоздатьВТИнтервалыДействияРесурсов(МенеджерВременныхТаблиц, "ПлановыеНачисления", ОписаниеТаблицыФильтра);	
		
	СоздатьВТЗначенияПоказателейСтажаПоПериодам(МенеджерВременныхТаблиц, ГраницаКонтроляИзмененийСтажа);
	СоздатьВТПериодыСменыГодаПоСотрудникам(МенеджерВременныхТаблиц);
	
	СоздатьВТИзмененияИсточниковВторичныхДанныхПоДатам(МенеджерВременныхТаблиц);
	
	ВыборкаНачислений = ВыборкаНачисленийНаДатыИзмененияИсточниковВторичныхДанных(МенеджерВременныхТаблиц);
	ДанныеНачислений = ДанныеНачисленийНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаНачислений, ИзменившиесяНачисления, ИзменившиесяПоказатели);		
	ИзвестныеПоказатели = ИзвестныеПоказателиНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаНачислений);
	
	СотрудникиСУдаляемымиДанными = СотрудникиСУдаляемымиДанными(МенеджерВременныхТаблиц);
	ПараметрыЗаписиНаборов = ПараметрыЗаписиНаборовПоСотрудникам(ДанныеНачислений, ТекущиеДанныеФОТ, ТекущиеСводныеДанные, СотрудникиСУдаляемымиДанными, ОбновлятьБезусловно);
	
	Начисления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеНачислений.ВыгрузитьКолонку("Начисление"));
	СвойстваНачислений = СвойстваНачислений(Начисления); 
	СвойстваПоказателей = СвойстваПоказателейПоСвойствамНачислений(СвойстваНачислений);
	
	ЗаполнитьИзвестныеДанныеФОТ(ДанныеНачислений, ТекущиеДанныеФОТ, РассчитанныеДанныеФОТ, СвойстваНачислений);
		
	ВыборкаКадровыхДанных = ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковВторичныхДанных(МенеджерВременныхТаблиц);
	КадровыеДанныеСотрудников = КадровыеДанныеНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаКадровыхДанных);	
	ДанныеГрафиковСотрудников = ДанныеГрафиковПоТаблицеГрафиковСотрудников(КадровыеДанныеСотрудников);
	
	Если ОбновлятьБезусловно Тогда
		ДанныеНачислений.ЗаполнитьЗначения(Истина, "НеобходимПерерасчетФОТ");
	КонецЕсли;	
	
	ТаблицаНачисленияДляРасчетФОТ = ТаблицаНачисленийДляРасчетФОТПоДаннымНачисленийНаДатыИзмененияИсточниковДанных(ДанныеНачислений, СвойстваНачислений);	
	РассчитатьДанныеПлановогоФОТ(ТаблицаНачисленияДляРасчетФОТ, СвойстваНачислений, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели);
	ЗаполнитьРезультатРасчетаФОТ(ДанныеНачислений, ТаблицаНачисленияДляРасчетФОТ);	
		
	НаборПлановогоФОТ = ТаблицаНабораПлановогоФОТ(ДанныеНачислений, ТекущиеДанныеФОТ, ПараметрыЗаписиНаборов);		
	ЗаписатьНаборРегистраВторичныхДанных(Метаданные.РегистрыСведений.ПлановыйФОТ.Имя, НаборПлановогоФОТ);
	УдалитьНеактуальныеЗаписиВторичныхДанных(Метаданные.РегистрыСведений.ПлановыйФОТ.Имя, ТекущиеДанныеФОТ, НаборПлановогоФОТ);
	
	РассчитанныеСводныеДанные = СводныеДанныеПлановыхНачислений(ДанныеНачислений, СвойстваНачислений, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели); 	
	НаборСводныхДанных = ТаблицаНабораСводныхДанных(РассчитанныеСводныеДанные, ТекущиеСводныеДанные, ПараметрыЗаписиНаборов);
	ЗаписатьНаборРегистраВторичныхДанных(Метаданные.РегистрыСведений.ПлановыйФОТИтоги.Имя, НаборСводныхДанных);
	УдалитьНеактуальныеЗаписиВторичныхДанных(Метаданные.РегистрыСведений.ПлановыйФОТИтоги.Имя, ТекущиеСводныеДанные, НаборСводныхДанных);

	ЗаписатьТекущаяТарифнаяСтавкаСотрудников(НаборСводныхДанных);
КонецПроцедуры

// Выполняет расчет данных плановых начислений
//
// Параметры:
//  ДанныеПлановыхНачислений - см. ТаблицаНачисленийДляРасчетаВторичныхДанных - начисления, которые необходимо рассчитать.
//  ИзвестныеПоказатели      - см. ТаблицаИзвестныеПоказатели - известные значения показателей.
//                             Те показатели, которые не известны, будут получены из базы.
//  КадровыеДанные           - см. СоздатьТаблицаКадровыхДанных - известные кадровые данные.
//					           Те кадровые данные, которые не заполнены, будут получены из базы.
//
// Возвращаемое значение: 
//  Структура - содержит:
//     * ПлановыйФОТ - ТаблицаЗначений - таблица с колонками: 
//        ** Период - дата, на которую задано значение показателя
//        ** Сотрудник
//        ** Начисление
//        ** ДокументОснование 
//        ** ГоловнаяОрганизация
//        ** ВкладВФОТ	
//    
//     * ТарифныеСтавки - ТаблицаЗначений - таблица с колонками: 
//        ** Период - дата, на которую задано значение показателя
//        ** Сотрудник
//        ** ГоловнаяОрганизация
//        ** ВидТарифнойСтавки
//        ** СовокупнаяТарифнаяСтавка
//			
Функция РассчитатьВторичныеДанныеПлановыхНачислений(ДанныеПлановыхНачислений, ИзвестныеПоказатели = Неопределено, КадровыеДанные = Неопределено, ИсключаемыеРегистраторы = Неопределено) Экспорт
	ВторичныеДанныеПлановыхНачислений = Новый Структура("ПлановыйФОТ, ТарифныеСтавки");
		
	Начисления = ДанныеПлановыхНачислений.ВыгрузитьКолонку("Начисление");
	
	ПериодыРасчетаПоСотрудникам = ДанныеПлановыхНачислений.Скопировать(, "Сотрудник, Период");
	ПериодыРасчетаПоСотрудникам.Свернуть("Сотрудник, Период");
	
	СвойстваНачислений = СвойстваНачислений(Начисления);
	СвойстваПоказателей = СвойстваПоказателейПоСвойствамНачислений(СвойстваНачислений);
	
	Для Каждого СтрокаТаблицы Из ДанныеПлановыхНачислений Цикл
		ИнфоОВидеРасчета = СвойстваНачислений[СтрокаТаблицы.Начисление];
		
		Если ИнфоОВидеРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИнфоОВидеРасчета.АвтоматическийРасчетФОТ
			И (ИнфоОВидеРасчета.ВключатьВФОТ 
			Или (ИнфоОВидеРасчета.ЯвляетсяЛьготой И ИнфоОВидеРасчета.ЛьготаУчитываетсяПриРасчетеЗарплаты)) Тогда
			
			СтрокаТаблицы.НеобходимПерерасчетФОТ = Истина;
		ИначеЕсли ИнфоОВидеРасчета.ВключатьВФОТ
			Или (ИнфоОВидеРасчета.ЯвляетсяЛьготой И ИнфоОВидеРасчета.ЛьготаУчитываетсяПриРасчетеЗарплаты) Тогда
			
			СтрокаТаблицы.ВкладВФОТ = СтрокаТаблицы.Размер;
		КонецЕсли;	
	КонецЦикла;
				
	Если КадровыеДанные = Неопределено Тогда
		КадровыеДанные = СоздатьТаблицаКадровыхДанных();
	КонецЕсли;
	
	ЗаполнитьКадровыеДанныеНаПериодыРасчета(ПериодыРасчетаПоСотрудникам, КадровыеДанные);
	
	ДанныеГрафиков = ДанныеГрафиковПоТаблицеГрафиковСотрудников(КадровыеДанные);
	
	РассчитатьДанныеПлановогоФОТ(
		ДанныеПлановыхНачислений,
		СвойстваНачислений,
		СвойстваПоказателей,
		КадровыеДанные,
		ДанныеГрафиков,
		ИзвестныеПоказатели,
		ИсключаемыеРегистраторы);
		
	ДанныеПлановыхНачислений.Колонки.Добавить("Регистратор");	
		
	ТарифныеСтавки = СводныеДанныеПлановыхНачислений(ДанныеПлановыхНачислений, СвойстваНачислений, СвойстваПоказателей, КадровыеДанные, ДанныеГрафиков, ИзвестныеПоказатели);
	
	ВторичныеДанныеПлановыхНачислений.ПлановыйФОТ = ДанныеПлановыхНачислений;
	ВторичныеДанныеПлановыхНачислений.ТарифныеСтавки = ТарифныеСтавки;
	
	Возврат ВторичныеДанныеПлановыхНачислений;
КонецФункции

// Выполняет расчет тарифных ставок
//
// Параметры
//  ДанныеПлановыхНачислений - см. ТаблицаНачисленийДляРасчетаВторичныхДанных - начисления, которые необходимо рассчитать.
//  ИзвестныеПоказатели      - см. ТаблицаИзвестныеПоказатели - известные значения показателей.
//                             Те показатели, которые не известны, будут получены из базы.
//  КадровыеДанные           - см. СоздатьТаблицаКадровыхДанных - известные кадровые данные.
//					           Те кадровые данные, которые не заполнены, будут получены из базы.
//
// Возвращаемое значение: 
//  ТаблицаЗначений  - таблица с колонками: 
//     * Период - Дата - дата, на которую задано значение показателя.
//     * Сотрудник
//     * ГоловнаяОрганизация
//     * ВидТарифнойСтавки
//     * СовокупнаяТарифнаяСтавка
//
Функция РассчитатьТарифныеСтавкиСотрудников(ДанныеПлановыхНачислений, ИзвестныеПоказатели = Неопределено, КадровыеДанные = Неопределено, ИсключаемыеРегистраторы = Неопределено) Экспорт		
	Начисления = ДанныеПлановыхНачислений.ВыгрузитьКолонку("Начисление");
	
	ПериодыРасчетаПоСотрудникам = ДанныеПлановыхНачислений.Скопировать(, "Сотрудник, Период");
	ПериодыРасчетаПоСотрудникам.Свернуть("Сотрудник, Период");
	
	СвойстваНачислений = СвойстваНачислений(Начисления);
	СвойстваПоказателей = СвойстваПоказателейПоСвойствамНачислений(СвойстваНачислений);
	
	Для Каждого СтрокаТаблицы Из ДанныеПлановыхНачислений Цикл
		ИнфоОВидеРасчета = СвойстваНачислений[СтрокаТаблицы.Начисление];
			
		Если ИнфоОВидеРасчета.ВключатьВФОТ Тогда
			СтрокаТаблицы.ВкладВФОТ = СтрокаТаблицы.Размер;
		КонецЕсли;	
	КонецЦикла;
				
	Если КадровыеДанные = Неопределено Тогда
		КадровыеДанные = СоздатьТаблицаКадровыхДанных();
	КонецЕсли;
	
	ЗаполнитьКадровыеДанныеНаПериодыРасчета(ПериодыРасчетаПоСотрудникам, КадровыеДанные);
	
	ДанныеГрафиков = ДанныеГрафиковПоТаблицеГрафиковСотрудников(КадровыеДанные);
	
	ДанныеПлановыхНачислений.Колонки.Добавить("Регистратор");	
		
	ТарифныеСтавки = СводныеДанныеПлановыхНачислений(ДанныеПлановыхНачислений, СвойстваНачислений, СвойстваПоказателей, КадровыеДанные, ДанныеГрафиков, ИзвестныеПоказатели);
		
	Возврат ТарифныеСтавки;
КонецФункции

// Возвращает таблицу значений для метода РассчитатьВторичныеДанныеПлановыхНачислений.
// 
// Возвращаемое значение - Таблица значений с колонками
// 		Период - дата, на которую необходимо рассчитать начисление
//      Сотрудник - по которому рассчитывается начисление
//      Начисление - рассчитываемое начисление
//      ДокументОснование 
//      Размер - заполняется для тех начислений у которых ФОТ задается вручную
//               и используется, в случае если данное начисление входит в базу других начислений 
//		ГоловнаяОрганизация - необязательный. Заполняется в случае если нужно отделить управленческие начисления от обычных.
//
Функция ТаблицаНачисленийДляРасчетаВторичныхДанных() Экспорт
	Возврат ТаблицаНачисленийДляРасчетаФОТ();	
КонецФункции

// Возвращает таблицу значений для метода РассчитатьВторичныеДанныеПлановыхНачислений.
// 
// Возвращаемое значение - Таблица значений с колонками
// 		Период - дата, на которую задано значение показателя
//      Сотрудник
//      Показатель
//      ДокументОснование 
//      Значение 
//		ГоловнаяОрганизация - необязательный. Заполняется в случае если нужно отделить управленческие начисления от обычных.
//
Функция ТаблицаИзвестныеПоказатели() Экспорт
	ИзвестныеПоказатели = Новый ТаблицаЗначений;
	
	ИзвестныеПоказатели.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзвестныеПоказатели.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзвестныеПоказатели.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзвестныеПоказатели.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Измерения.ДокументОснование.Тип);
	ИзвестныеПоказатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));	
	ИзвестныеПоказатели.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

	Возврат ИзвестныеПоказатели;
КонецФункции

// Возвращает таблицу значений для метода РассчитатьВторичныеДанныеПлановыхНачислений.
// 
// Возвращаемое значение - Таблица значений с колонками
// 		Период - дата, на которую заданы кадровые данные
//      Сотрудник
//      Организация
//      Подразделение 
//      ГрафикРаботы 
//		КоличествоСтавок 
//
Функция СоздатьТаблицаКадровыхДанных() Экспорт
	ТаблицаКадровыхДанных = Новый ТаблицаЗначений;
	ТаблицаКадровыхДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаКадровыхДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаКадровыхДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКадровыхДанных.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаКадровыхДанных.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.РежимыРаботыСотрудников"));
	ТаблицаКадровыхДанных.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаКадровыхДанных;	
КонецФункции

// Возвращает таблицу значений показателей с признаком вхождения в совокупную тарифную ставку.
// 
// Возвращаемое значение - Таблица значений с колонками
//      Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//      Выбран - Булево - Истина, когда показатель входит в совокупную тарифную ставку.
Функция СоставПоказателейСовокупнойТарифнойСтавки() Экспорт 
	
	Запрос = Новый Запрос;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДСВ"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНПФ"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентПрофсоюзныхВзносов"));
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
	               |	ВЫБОР
	               |		КОГДА ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Выбран
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	               |		ПО (ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка)
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
	               |	И ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	               |	И НЕ ПоказателиРасчетаЗарплаты.НеИспользуется
	               |	И НЕ ПоказателиРасчетаЗарплаты.ПометкаУдаления
	               |	И НЕ ПоказателиРасчетаЗарплаты.Ссылка В (&МассивПоказателей)
	               |	И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания";
				   
	Возврат Запрос.Выполнить().Выгрузить();			   
	
КонецФункции

Функция ПоказателиНачислений() Экспорт
	
	Запрос = Новый Запрос;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДСВ"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНПФ"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентПрофсоюзныхВзносов"));
	
	СпособыВыполненияНачисления = Новый Массив;
	СпособыВыполненияНачисления.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете"));
	СпособыВыполненияНачисления.Добавить(ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете"));
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	Запрос.УстановитьПараметр("СпособыВыполненияНачисления", СпособыВыполненияНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
		|	ВЫБОР
		|		КОГДА ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяВСовокупнойТарифнойСтавке
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
		|		ПО (ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка)
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
		|	И ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
		|	И НЕ ПоказателиРасчетаЗарплаты.НеИспользуется
		|	И НЕ ПоказателиРасчетаЗарплаты.ПометкаУдаления
		|	И НЕ ПоказателиРасчетаЗарплаты.Ссылка В (&МассивПоказателей)
		|	И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособВыполненияНачисления В(&СпособыВыполненияНачисления)
		|	И НЕ Начисления.ВАрхиве
		|	И НЕ Начисления.Рассчитывается
		|	И НЕ Начисления.ЯвляетсяЛьготой";
				   
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ИнициализироватьНаборыИсточникиВторичныхДанных(ДокументОбъект, РежимЗаписи) Экспорт
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина Тогда
			Набор.ДополнительныеСвойства.Вставить("НеФормироватьВторичныеДанныеПлановыхНачисленийПриЗаписи", Истина);
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры	

Функция РегистрыИсточникиВторичныхДанных() Экспорт
	РегистрыИсточникиВторичныхДанных = Новый Соответствие;
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя, Истина);
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя, Истина);
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя, Истина);
	РегистрыИсточникиВторичныхДанных.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисления.Имя, Истина);
	
	Возврат РегистрыИсточникиВторичныхДанных
КонецФункции	

Процедура ЗарегистрироватьВторичныеДанныеПриПроведенииДокумента(ДокументОбъект) Экспорт
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	
	НаборыИсточникиВторичныхДанных = Новый Массив;
	
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина Тогда
			НаборыИсточникиВторичныхДанных.Добавить(Набор);
			
			Если Набор.Записывать Тогда
				Набор.Записать();
				Набор.Записывать = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РассчитанныеДанныеФОТ = РассчитанныеДанныеФОТПоДокументу(ДокументОбъект);
	
	ЗарегистрироватьВторичныеДанныеПоИзменениямВНаборахИсточников(НаборыИсточникиВторичныхДанных, РассчитанныеДанныеФОТ);
	
КонецПроцедуры	

Процедура ЗарегистрироватьВторичныеДанныеПриЗаписиНабора(НаборЗаписей) Экспорт
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("НеФормироватьВторичныеДанныеПлановыхНачисленийПриЗаписи")
		И НаборЗаписей.ДополнительныеСвойства.НеФормироватьВторичныеДанныеПлановыхНачисленийПриЗаписи = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборыИсточникиВторичныхДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЗаписей);
	ЗарегистрироватьВторичныеДанныеПоИзменениямВНаборахИсточников(НаборыИсточникиВторичныхДанных);
	
КонецПроцедуры	

Процедура ОбновитьЗависимыеДанныеПослеЗагрузкиОбменаДанными(ЗависимыеДанные) Экспорт
	
	Если ЗависимыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборыИсточникиВторичныхДанных = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЗависимыеДанные Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаборыИсточникиВторичныхДанных, СтрокаТаблицы.ВедущиеДанные);
	КонецЦикла;
	
	ЗарегистрироватьВторичныеДанныеПоИзменениямВНаборахИсточников(НаборыИсточникиВторичныхДанных);
	
КонецПроцедуры

Процедура УстановитьРассчитанныеДанныеФОТ(ДокументСсылка, ДвиженияДокумента, РассчитанныеДанныеФОТ) Экспорт
	УстанавливаемыеДанные = РассчитанныеДанныеФОТ.Скопировать();
	УстанавливаемыеДанные.Колонки.Добавить("Период");
	
	ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(ДокументСсылка, РассчитанныеДанныеФОТ);

	Для Каждого СтрокаДанныхФОТ Из УстанавливаемыеДанные Цикл
		Значение = ВремяРегистрацииДокумента[СтрокаДанныхФОТ.ДатаСобытия][СтрокаДанныхФОТ.Сотрудник];
		СтрокаДанныхФОТ.Период = Значение;		
	КонецЦикла;	
	
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	
	Для Каждого Набор Из ДвиженияДокумента Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина Тогда
			Набор.ДополнительныеСвойства.Вставить("РассчитанныеДанныеФОТ", УстанавливаемыеДанные);	
			Прервать;
		КонецЕсли;				
	КонецЦикла;		
КонецПроцедуры	

Процедура ПересчитатьФОТПлановыхНачислений(ПараметрыВыполнения, АдресВоВременномХранилище = Неопределено) Экспорт
	Сотрудник = ПараметрыВыполнения.Сотрудник;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ПараметрыВыполнения.ДатаВыполненияПересчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	&Период КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияНачислений,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияГрафика,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияПоказателей,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияКоличестваСтавок,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ЛОЖЬ КАК ИзменениеКоличестваСтавок,
	|	ЛОЖЬ КАК ИзменениеГрафика,
	|	ЛОЖЬ КАК ИзменениеЗначенийПоказателей,
	|	ЛОЖЬ КАК ИзменениеНачислений,
	|	ЛОЖЬ КАК ИзменениеДанныхГрафика,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхГрафика,
	|	ЛОЖЬ КАК ИзменениеДанныхСтажа,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхСтажа,
	|	ЛОЖЬ КАК УдалениеДанных
	|ПОМЕСТИТЬ ВТПериодыОбновленияВторичныхДанных
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисления.Сотрудник";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Оператор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	Если Сотрудник <> Неопределено Тогда
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Оператор.Отбор.Добавить("ПлановыеНачисления.Сотрудник = &Сотрудник");
	КонецЕсли;
	
	КолонкаДатаНачала = СхемаЗапроса.ПакетЗапросов[0].Колонки.Найти("ДатаНачала");
	ИндексКолонки = СхемаЗапроса.ПакетЗапросов[0].Колонки.Индекс(КолонкаДатаНачала); 
	Если Не ЗначениеЗаполнено(ПараметрыВыполнения.ДатаВыполненияПересчета) Тогда
		Оператор.ВыбираемыеПоля.Установить(ИндексКолонки, Новый ВыражениеСхемыЗапроса("МИНИМУМ(ПлановыеНачисления.Период)"));
	КонецЕсли;	
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СформироватьДвиженияВторичныхДанных(Запрос.МенеджерВременныхТаблиц,,,,Истина); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанныеПлановыхНачислений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаНачала,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияНачислений,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияГрафика,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияПоказателей,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияКоличестваСтавок,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ЛОЖЬ КАК ИзменениеКоличестваСтавок,
	|	ЛОЖЬ КАК ИзменениеГрафика,
	|	ЛОЖЬ КАК ИзменениеЗначенийПоказателей,
	|	ЛОЖЬ КАК ИзменениеНачислений,
	|	ЛОЖЬ КАК ИзменениеДанныхГрафика,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхГрафика,
	|	ЛОЖЬ КАК ИзменениеДанныхСтажа,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхСтажа,
	|	ЛОЖЬ КАК УдалениеДанных
	|ПОМЕСТИТЬ ВТПериодыОбновленияВторичныхДанных
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисления.Сотрудник";
	
	Запрос.Выполнить();
	СформироватьДвиженияВторичныхДанных(Запрос.МенеджерВременныхТаблиц,,,,Истина); 
	
КонецПроцедуры

Процедура ПересчитатьВторичныеДанныеПоСотруднику(Сотрудник) Экспорт
		
КонецПроцедуры	

Функция ТекущиеПоказателиСотрудников(Ссылка, СотрудникиДаты, МассивПоказателей) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Показатель", "В", МассивПоказателей);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление", "В", МассивПоказателей);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателей.Сотрудник КАК Сотрудник,
	|	ЗначенияПериодическихПоказателей.Показатель КАК Показатель,
	|	ЗначенияПериодическихПоказателей.Период КАК Период,
	|	ЗначенияПериодическихПоказателей.Значение КАК Значение
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Сотрудник,
	|	ПлановыеНачисленияСрезПоследних.Начисление,
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.Размер
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция СведенияОПоказателях(ОтображаемыеПоказатели) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
		|	ПоказателиРасчетаЗарплаты.Идентификатор,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчетаЗарплаты.КраткоеНаименование = """"
		|			ТОГДА ПоказателиРасчетаЗарплаты.Наименование
		|		ИНАЧЕ ПоказателиРасчетаЗарплаты.КраткоеНаименование
		|	КОНЕЦ КАК КраткоеНаименование,
		|	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ПоказателиРасчетаЗарплаты.ТипПоказателя
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка В (&Показатели)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВРНачисления.Ссылка,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ПВРНачисления.КраткоеНаименование = """"
		|			ТОГДА ПВРНачисления.Наименование
		|		ИНАЧЕ ПВРНачисления.КраткоеНаименование
		|	КОНЕЦ,
		|	ПВРНачисления.РеквизитДопУпорядочивания,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный)
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ПВРНачисления
		|ГДЕ
		|	НЕ ПВРНачисления.Рассчитывается
		|	И ПВРНачисления.Ссылка В (&Показатели)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Показатели", ОтображаемыеПоказатели);
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	ТаблицаПоказателей.Индексы.Добавить("Показатель"); 
	ЗаполнитьИдентификаторыНачисленийФиксированнойСуммой(ТаблицаПоказателей);
	
	СведенияОПоказателях = Новый Соответствие;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		СведениеОПоказателе = Новый Структура("Идентификатор, КраткоеНаименование, ТипПоказателя");
		ЗаполнитьЗначенияСвойств(СведениеОПоказателе, СтрокаПоказателя);
		СведенияОПоказателях.Вставить(СтрокаПоказателя.Показатель, СведениеОПоказателе);
	
	КонецЦикла; 
	
	Возврат СведенияОПоказателях;
	
КонецФункции

Функция ТекущиеДанныеОплатыТрудаСотрудников(Ссылка, СотрудникиДаты) Экспорт
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			СотрудникиДаты,
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСовокупныхТарифныхСтавок.Сотрудник,
		|	ЗначенияСовокупныхТарифныхСтавок.Период,
		|	ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки,
		|	ЗначенияСовокупныхТарифныхСтавок.ФОТ
		|ИЗ
		|	ВТПлановыйФОТИтогиСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок";
	
	ЗначенияДанныхОплатыТруда = Запрос.Выполнить().Выгрузить();
	
	Возврат ЗначенияДанныхОплатыТруда;
	
КонецФункции

Функция СоздатьТаблицуКадровыхДанныхПоСотруднику(Сотрудник, Период, Организация = Неопределено, Подразделение = Неопределено, КоличествоСтавок = Неопределено, ГрафикРаботы = Неопределено) Экспорт
	КадровыеДанные = СоздатьТаблицаКадровыхДанных();
	
	СтрокаТаблицы = КадровыеДанные.Добавить();
	СтрокаТаблицы.Сотрудник = Сотрудник;
	СтрокаТаблицы.Период = Период;
	
	СтрокаТаблицы.Организация = Организация;
	СтрокаТаблицы.Подразделение = Подразделение;
	СтрокаТаблицы.КоличествоСтавок = КоличествоСтавок;
	СтрокаТаблицы.ГрафикРаботы = ГрафикРаботы;
	
	Возврат КадровыеДанные;	
КонецФункции	

Функция СведенияОВсехПоказателях() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
		|	ПоказателиРасчетаЗарплаты.Идентификатор,
		|	ВЫБОР
		|		КОГДА ПоказателиРасчетаЗарплаты.КраткоеНаименование = """"
		|			ТОГДА ПоказателиРасчетаЗарплаты.Наименование
		|		ИНАЧЕ ПоказателиРасчетаЗарплаты.КраткоеНаименование
		|	КОНЕЦ КАК КраткоеНаименование,
		|	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ПоказателиРасчетаЗарплаты.ТипПоказателя
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПВРНачисления.Ссылка,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ПВРНачисления.КраткоеНаименование = """"
		|			ТОГДА ПВРНачисления.Наименование
		|		ИНАЧЕ ПВРНачисления.КраткоеНаименование
		|	КОНЕЦ,
		|	ПВРНачисления.РеквизитДопУпорядочивания,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный)
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ПВРНачисления
		|ГДЕ
		|	НЕ ПВРНачисления.Рассчитывается
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания";
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	ТаблицаПоказателей.Индексы.Добавить("Показатель"); 
	ЗаполнитьИдентификаторыНачисленийФиксированнойСуммой(ТаблицаПоказателей);
	
	СведенияОПоказателях = Новый Соответствие;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		
		СведениеОПоказателе = Новый Структура("Идентификатор, КраткоеНаименование, ТипПоказателя");
		ЗаполнитьЗначенияСвойств(СведениеОПоказателе, СтрокаПоказателя);
		СведенияОПоказателях.Вставить(СтрокаПоказателя.Показатель, СведениеОПоказателе);
	
	КонецЦикла; 
	
	Возврат СведенияОПоказателях;
	
КонецФункции

#Область МетодыЧтенияРегистровВторичныхДанныхПлановыхНачислений

Процедура ПриПолученииСвойствРегистраВторичныхДанных(ИмяРегистра, СтруктураОписанияРегистра) Экспорт
	Если ИмяРегистра <> Метаданные.РегистрыСведений.ПлановыйФОТ.Имя
		И ИмяРегистра <> Метаданные.РегистрыСведений.ПлановыйФОТИтоги.Имя Тогда
		
		Возврат;
	КонецЕсли;	
	
	СтруктураОписанияРегистра.ВозвратныеРесурсы.Очистить();
	СтруктураОписанияРегистра.ВозвратныеРесурсыДляПоиска.Очистить();
	СтруктураОписанияРегистра.ЕстьВозвратныеСобытия = Ложь;
	
	ТехногенныеИзмерения = Новый Соответствие;
	ТехногенныеИзмерения.Вставить(ВРег("ДатаОкончания"), Истина);
	ТехногенныеИзмерения.Вставить(ВРег("Год"), Истина);
	
	ИзмеренияКУдалению = Новый Массив;
	Для Индекс = 0 По СтруктураОписанияРегистра.Измерения.Количество() -1 Цикл
		Если ТехногенныеИзмерения[ВРег(СтруктураОписанияРегистра.Измерения[Индекс])] = Истина Тогда
			ИзмеренияКУдалению.Добавить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Сдвиг = 0;
	Для Каждого ИндексУдаляемогоЭлемента Из ИзмеренияКУдалению Цикл
		СтруктураОписанияРегистра.Измерения.Удалить(ИндексУдаляемогоЭлемента - Сдвиг);
		Сдвиг = Сдвиг + 1;
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СтруктураОписанияРегистра.ИзмеренияДляПоиска Цикл
		Если ТехногенныеИзмерения[ВРег(КлючЗначение.Ключ)] = Истина Тогда	
			ИзмеренияКУдалению.Добавить(КлючЗначение.Ключ);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого КлючУдаляемогоЭлемента Из ИзмеренияКУдалению Цикл
		СтруктураОписанияРегистра.ИзмеренияДляПоиска.Удалить(КлючУдаляемогоЭлемента);
	КонецЦикла;

КонецПроцедуры	

Процедура ПриПолученииЗапросаВТИмяРегистра(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы) Экспорт
	Если Не ЭтоРегистрСПереопределеннымПолучениемДанных(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ИмяРегистра = "ПлановыйФОТИтоги" Тогда
		Если ПараметрыПостроения = Неопределено Тогда
			ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();	
		Иначе	
			ТекущиеПараметрыПостроения = ПараметрыПостроения;
			ПараметрыПостроения = ОбщегоНазначения.СкопироватьРекурсивно(ТекущиеПараметрыПостроения);
		КонецЕсли;	
		УстановитьОтборПриПолученииСводныхДанныхПлановыхНачислений(ПараметрыПостроения.Отборы);		
		УстановитьОтборПриПолученииСводныхДанныхПлановыхНачислений(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода);	
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено Тогда
		ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	КонецЕсли; 
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ДобавитьЗапросВТДвиженияПлановогоФОТ(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
КонецПроцедуры	

Процедура ПриПолученииЗапросаВТИмяРегистраСрез(Запрос, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, СрезПоследних, ИмяСоздаваемойТаблицы) Экспорт
	Если Не ЭтоРегистрСПереопределеннымПолучениемДанных(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ИмяРегистра = "ПлановыйФОТИтоги" Тогда
		Если ПараметрыПостроения = Неопределено Тогда
			ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
		Иначе	
			ТекущиеПараметрыПостроения = ПараметрыПостроения;
			ПараметрыПостроения = ОбщегоНазначения.СкопироватьРекурсивно(ТекущиеПараметрыПостроения);
		КонецЕсли;	
		УстановитьОтборПриПолученииСводныхДанныхПлановыхНачислений(ПараметрыПостроения.Отборы);	
	КонецЕсли;	
	
	
	Если СрезПоследних Тогда 
		Если ПолучатьСрезРегистровПоИнтервалам(ИмяРегистра, ПараметрыПостроения) Тогда
			Если ПараметрыПостроения = Неопределено Тогда
				ПараметрыПостроения = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();	
			КонецЕсли;	
			
			ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
			ДобавитьЗапросВТПлановыйФОТСрез(ОписаниеПакетаЗапросов, ИмяРегистра, ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, ИмяСоздаваемойТаблицы);
			
			Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
		КонецЕсли;
		Если ПараметрыПостроения <> Неопределено Тогда
			ПараметрыПостроения.ИсключаемыеРегистраторы = Ложь;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

Функция СпособыВыполненияПлановыхНачислений() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете);
	Результат.Добавить(Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете);
	
	Возврат Результат;
	
КонецФункции

#Область ОбменДанными

Процедура ЗаполнитьЗависимыеДанныеПослеСозданияНовогоУзла(ПараметрыОбновления) Экспорт
	ЗаполнитьВторичныеДанныеПлановыхНачислений();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьВторичныеДанныеПриИзмененииМинимальнойОплатыТруда(МенеджерВременныхТаблиц) Экспорт
	ПоказательМРОТ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	Если ПоказательМРОТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоказательМРОТ", ПоказательМРОТ);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	ВТИзменившиесяДанные.Период КАК Период
		|ПОМЕСТИТЬ ВТНачисленияПериоды
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели,
		|	ВТИзменившиесяДанные КАК ВТИзменившиесяДанные
		|ГДЕ
		|	НачисленияПоказатели.Показатель = &ПоказательМРОТ";
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТНачисленияПериоды", "Начисление, Период");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра);
		
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТПлановыеНачисленияСрезПоследних") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник,
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаНачала,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПлановыеНачисления.Период, ГОД)) КАК ДатаНачалаГод,
		|	&МаксимальнаяДата КАК ДатаИзмененияНачислений,
		|	&МаксимальнаяДата КАК ДатаИзмененияГрафика,
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК ДатаИзмененияПоказателей,
		|	&МаксимальнаяДата КАК ДатаИзмененияКоличестваСтавок,
		|	ЛОЖЬ КАК ИзменениеКоличестваСтавок,
		|	ЛОЖЬ КАК ИзменениеГрафика,
		|	ИСТИНА КАК ИзменениеЗначенийПоказателей,
		|	ЛОЖЬ КАК ИзменениеНачислений,
		|	ЛОЖЬ КАК УдалениеДанных,
		|	ЛОЖЬ КАК ИзменениеДанныхГрафика,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхГрафика,
		|	ЛОЖЬ КАК ИзменениеДанныхСтажа,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхСтажа
		|ПОМЕСТИТЬ ВТПериодыОбновленияВторичныхДанных
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник
		|;
		|////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыОбновленияВторичныхДанных.Сотрудник
		|ИЗ
		|	ВТПериодыОбновленияВторичныхДанных КАК ВТПериодыОбновленияВторичныхДанных";
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИзменившиесяПоказатели = Новый Соответствие;
	ИзменилсяПоказательМРОТ = Новый Соответствие;
	ИзменилсяПоказательМРОТ.Вставить(ПоказательМРОТ, Истина);
	Пока Выборка.Следующий() Цикл
		ИзменившиесяПоказатели.Вставить(Выборка.Сотрудник, ИзменилсяПоказательМРОТ);
	КонецЦикла;
	
	СформироватьДвиженияВторичныхДанных(МенеджерВременныхТаблиц,, ИзменившиесяПоказатели);
	
КонецПроцедуры

Процедура ЗарегистрироватьВторичныеДанныеПоИзменениямВНаборахИсточников(НаборыИсточникиВторичныхДанных, РассчитанныеДанныеФОТ = Неопределено)
	
	ИзмененияВНаборахИсточникахДанных = ЗарплатаКадрыПериодическиеРегистры.ИзмененияВНаборахИсточниковВторичныхДанных(НаборыИсточникиВторичныхДанных);
	
	// если интересующие нас регистры не менялись, тогда ничего не делаем
	Если ИзмененияВНаборахИсточникахДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПериодыОбновленияВторичныхДанныхПоИзменениямВНаборах(МенеджерВременныхТаблиц, ИзмененияВНаборахИсточникахДанных);	
	
	ИзменившиесяДанныеНабораПлановыеНачисления = ИзмененияВНаборахИсточникахДанных[Метаданные.РегистрыСведений.ПлановыеНачисления.Имя]; 
	ИзменившиесяНачисленияПоСотрудникам = Неопределено;
	Если ИзменившиесяДанныеНабораПлановыеНачисления <> Неопределено Тогда
		ИзменившиесяНачисленияПоСотрудникам = ИзменившиесяНачисленияПоСотрудникам(ИзменившиесяДанныеНабораПлановыеНачисления);
	КонецЕсли;	
	
	ИзменившиесяДанныеНабораЗначенияПоказателей = ИзмененияВНаборахИсточникахДанных[Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя]; 
	ИзменившиесяПоказателиПоСотрудникам = Неопределено;
	Если ИзменившиесяДанныеНабораЗначенияПоказателей <> Неопределено Тогда
		ИзменившиесяПоказателиПоСотрудникам = ИзменившиесяПоказателиПоСотрудникам(ИзменившиесяДанныеНабораЗначенияПоказателей);
	КонецЕсли;
	
	СформироватьДвиженияВторичныхДанных(МенеджерВременныхТаблиц, ИзменившиесяНачисленияПоСотрудникам, ИзменившиесяПоказателиПоСотрудникам, РассчитанныеДанныеФОТ);
	
КонецПроцедуры	

Функция РассчитанныеДанныеФОТПоДокументу(ДокументОбъект)
	РассчитанныеФОТ = Неопределено;
	
	РегистрыИсточникиВторичныхДанных = РегистрыИсточникиВторичныхДанных();
	
	Для Каждого Набор Из ДокументОбъект.Движения Цикл
		Если РегистрыИсточникиВторичныхДанных[Набор.Метаданные().Имя] = Истина 
			И Набор.ДополнительныеСвойства.Свойство("РассчитанныеДанныеФОТ") Тогда
			
			РассчитанныеФОТ = Набор.ДополнительныеСвойства.РассчитанныеДанныеФОТ;	
		КонецЕсли;				
	КонецЦикла;		
	
	Возврат РассчитанныеФОТ;
КонецФункции	

Процедура СоздатьВТПериодыОбновленияВторичныхДанныхПоИзменениямВНаборах(МенеджерВременныхТаблиц, ИзмененияВНаборах)
	КонтролируемыеРесурсыПоРегистрам = КонтролируемыеРесурсыПоРегистрамИсточникамВторичныхДанных();
	
	ЧастиВложенногоЗапросаВыбораИзменившихсяДанных = Новый Массив;
	
	Запрос = Новый Запрос;
	Для Каждого КлючЗначение Из ИзмененияВНаборах Цикл
		ИмяРегистра = КлючЗначение.Ключ; 
		ТаблицаИзмененийВНаборе = КлючЗначение.Значение;
		
		Если ТаблицаИзмененийВНаборе <> Неопределено
			И ТаблицаИзмененийВНаборе.Количество() > 0 Тогда
			
			ИмяВТИзменений = ИмяТаблицыИзмененийВНаборе(ИмяРегистра); 
			
			ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаИзмененийВНаборе, ИмяВТИзменений);
						
			КонтролируемыеРесурсы = КонтролируемыеРесурсыПоРегистрам[ИмяРегистра];
			
			ЗапросВыбораИзмененийВРегистре = ЗапросВыбораИзмененийНабора(ИмяРегистра, КонтролируемыеРесурсы);
			ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВыбораИзмененийВРегистре);			
			
			ЧастиВложенногоЗапросаВыбораИзменившихсяДанных.Добавить(ЗапросВыбораИзмененийВРегистре.Текст);
		КонецЕсли;	
	КонецЦикла;		
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник,
	|	МИНИМУМ(ВложенныйЗапрос.Период) КАК ДатаНачала,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ГОД)) КАК ДатаНачалаГод,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.ИзменениеНачислений
	|				ТОГДА ВложенныйЗапрос.Период
	|			ИНАЧЕ &МаксимальнаяДата
	|		КОНЕЦ) КАК ДатаИзмененияНачислений,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.ИзменениеГрафика
	|				ТОГДА ВложенныйЗапрос.Период
	|			ИНАЧЕ &МаксимальнаяДата
	|		КОНЕЦ) КАК ДатаИзмененияГрафика,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.ИзменениеЗначенийПоказателей
	|				ТОГДА ВложенныйЗапрос.Период
	|			ИНАЧЕ &МаксимальнаяДата
	|		КОНЕЦ) КАК ДатаИзмененияПоказателей,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.ИзменениеКоличестваСтавок
	|				ТОГДА ВложенныйЗапрос.Период
	|			ИНАЧЕ &МаксимальнаяДата
	|		КОНЕЦ) КАК ДатаИзмененияКоличестваСтавок,
	|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеКоличестваСтавок) КАК ИзменениеКоличестваСтавок,
	|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеГрафика) КАК ИзменениеГрафика,
	|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеЗначенийПоказателей) КАК ИзменениеЗначенийПоказателей,
	|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеНачислений) КАК ИзменениеНачислений,
	|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК УдалениеДанных,
	|	ЛОЖЬ КАК ИзменениеДанныхГрафика,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхГрафика,
	|	ЛОЖЬ КАК ИзменениеДанныхСтажа,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзмененияДанныхСтажа
	|ПОМЕСТИТЬ ВТПериодыОбновленияВторичныхДанных
	|ИЗ
	|	ВТВложенныйЗапрос КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник";
	
	РазделительЧастейЗапроса = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
	
	ТекстВложенногоЗапроса = СтрСоединить(ЧастиВложенногоЗапросаВыбораИзменившихсяДанных, РазделительЧастейЗапроса);
	
	ТекстЗамены = "(" + ТекстВложенногоЗапроса + ")";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВложенныйЗапрос", ТекстЗамены);
	
	Запрос.Выполнить();	

КонецПроцедуры	

Процедура ЗаполнитьИдентификаторыНачисленийФиксированнойСуммой(ИзменяемыеПоказатели)
	Для каждого Строка Из ИзменяемыеПоказатели Цикл
		Если Строка.Идентификатор = Null Тогда
			Строка.Идентификатор = "а" + СтрЗаменить(Строка(Строка.Показатель.УникальныйИдентификатор()), "-", "");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РассчитатьДанныеПлановогоФОТ(ДанныеПлановыхНачислений, СвойстваНачислений, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	Если ДанныеПлановыхНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник, Период");
	ДанныеГрафиковСотрудников.Индексы.Добавить("Сотрудник, Период");
	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация"); 	
	
	ПоказателиСотрудников = ТаблицаПоказателейПоТаблицеНачисления(ДанныеПлановыхНачислений, СвойстваНачислений, СвойстваПоказателей);	
	
	СоответствиеСотрудниковПериодовСсылкам = Новый Соответствие;
	
	ЗаполнитьПоказателейНачисленийСотрудников(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели, ИсключаемыеРегистраторы); 
	ПоказателиСотрудников.Индексы.Добавить("Сотрудник, ГоловнаяОрганизация, Показатель, Период");
	ПоказателиСотрудников.Индексы.Добавить("Сотрудник, ГоловнаяОрганизация, Показатель, ДокументОснование, Период");
	СтруктураПоискаПоказателей = Новый Структура("Сотрудник, ГоловнаяОрганизация, Показатель, Период");
	СтруктураПоискаПоказателейПоОснованию = Новый Структура("Сотрудник, ГоловнаяОрганизация, Показатель, ДокументОснование, Период");
		
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(НачалоМесяца(ТекущаяДатаСеанса()), ДанныеПлановыхНачислений[0].ГоловнаяОрганизация);
	Сч = 0;
	Для Каждого СтрокаТаблицыНачислений Из ДанныеПлановыхНачислений Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицыНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли;	
		
		АвтоматическийРасчетФОТ = СвойстваНачислений[СтрокаТаблицыНачислений.Начисление].АвтоматическийРасчетФОТ;
		
		СтрокаТаблицыРасчета = МенеджерРасчета.СтрокаТаблицыНачислений();
		
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, СтрокаТаблицыНачислений.Сотрудник, СтрокаТаблицыНачислений.Период);
		ДанныеГрафикаСотрудника = ДанныеГрафикаСотрудникаИзТаблицы(ДанныеГрафиковСотрудников, СтрокаТаблицыНачислений.Сотрудник, СтрокаТаблицыНачислений.Период); 
		
		Если СтрокаТаблицыНачислений.ГоловнаяОрганизация = УправленческаяОрганизация Тогда
			СтрокаТаблицыРасчета.Организация = СтрокаТаблицыНачислений.ГоловнаяОрганизация;	
		Иначе	
			СтрокаТаблицыРасчета.Организация = КадровыеДанныеСотрудника.Организация;
		КонецЕсли;	
		
		СсылкиПоСотруднику = СоответствиеСотрудниковПериодовСсылкам[СтрокаТаблицыНачислений.Сотрудник];
		Если СсылкиПоСотруднику = Неопределено Тогда
			СсылкиПоСотруднику = Новый Соответствие;
			СоответствиеСотрудниковПериодовСсылкам.Вставить(СтрокаТаблицыНачислений.Сотрудник, СсылкиПоСотруднику);
		КонецЕсли;
		
		СсылкаЗаПериод = СсылкиПоСотруднику[СтрокаТаблицыНачислений.Период];
		Если СсылкаЗаПериод = Неопределено Тогда
			СсылкаЗаПериод = Справочники.Сотрудники.ПолучитьСсылку();
			СсылкиПоСотруднику.Вставить(СтрокаТаблицыНачислений.Период, СсылкаЗаПериод);
		КонецЕсли;                   
		
		СтрокаТаблицыРасчета.Сотрудник = СсылкаЗаПериод;
		СтрокаТаблицыРасчета.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
		СтрокаТаблицыРасчета.Подразделение = КадровыеДанныеСотрудника.Подразделение;
		СтрокаТаблицыРасчета.Начисление = СтрокаТаблицыНачислений.Начисление;
		СтрокаТаблицыРасчета.ДокументОснование = СтрокаТаблицыНачислений.ДокументОснование;
		СтрокаТаблицыРасчета.ГрафикРаботы = ДанныеГрафикаСотрудника.ГрафикРаботы;
		СтрокаТаблицыРасчета.ОбщийГрафик = ДанныеГрафикаСотрудника.ГрафикРаботы;
		СтрокаТаблицыРасчета.ГрафикРаботыНорма = ДанныеГрафикаСотрудника.ГрафикРаботы;
		СтрокаТаблицыРасчета.Результат = СтрокаТаблицыНачислений.ВкладВФОТ;
		СтрокаТаблицыРасчета.ДатаНачала = НачалоМесяца(СтрокаТаблицыНачислений.Период);
		СтрокаТаблицыРасчета.ДатаОкончания = КонецМесяца(СтрокаТаблицыНачислений.Период);
		СтрокаТаблицыРасчета.ФиксРасчет = Не СтрокаТаблицыНачислений.НеобходимПерерасчетФОТ Или Не АвтоматическийРасчетФОТ;
		СтрокаТаблицыРасчета.ФиксЗаполнение = Не СтрокаТаблицыНачислений.НеобходимПерерасчетФОТ Или Не АвтоматическийРасчетФОТ;
		СтрокаТаблицыРасчета.ФиксРасчетВремени = Истина;
		СтрокаТаблицыРасчета.ИдентификаторСтроки = Сч;
		Сч = Сч + 1;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоказателей, СтрокаТаблицыНачислений);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоказателейПоОснованию, СтрокаТаблицыНачислений);
		Для Каждого ОписаниеПоказателя Из СвойстваНачислений[СтрокаТаблицыРасчета.Начисление].Показатели Цикл
			Если ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				СтруктураПоиска = СтруктураПоискаПоказателейПоОснованию;
			Иначе
				СтруктураПоиска = СтруктураПоискаПоказателей;
			КонецЕсли;	
			
			СтруктураПоиска.Показатель = ОписаниеПоказателя.Показатель;
			СтрокиПоказателей = ПоказателиСотрудников.НайтиСтроки(СтруктураПоиска);	
			
			Если СтрокиПоказателей.Количество() > 0
				И СтрокиПоказателей[0].ЗначениеЗаполнено Тогда
				
				МенеджерРасчета.ДобавитьИзвестноеЗначениеПоказателя(СтрокаТаблицыРасчета, СтрокиПоказателей[0].Показатель, СтрокиПоказателей[0].Значение);
			КонецЕсли;		
		КонецЦикла;	
	КонецЦикла;		
	
	НастройкиЗаполненияНачислений = МенеджерРасчета.ТребованияЗаполненияСведенийНачисленийДляРасчета(Ложь);
	НастройкиЗаполненияНачислений.БазовыйПериод = Истина;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерРасчета.ЗаполнитьСведенияНачисленийДляРасчета(МенеджерРасчета.Зарплата.Начисления, НастройкиЗаполненияНачислений);
	МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(МенеджерРасчета.Зарплата.Начисления);
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;	
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисленияТолькоПоТекущемуДокументу = Истина;
	МенеджерРасчета.НастройкиБухучета.РаспределятьРезультатыРасчета = Ложь;
	МенеджерРасчета.РассчитатьЗарплату();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерРасчета.Зарплата.Начисления.Индексы.Добавить("Сотрудник, Начисление, ДокументОснование");
	СтруктураПоискаРассчитанныхНачислений = Новый Структура("Сотрудник, Начисление, ДокументОснование");
	
	Для Каждого СтрокаПлановыхНачислений Из ДанныеПлановыхНачислений Цикл
		СсылкаНаСотрудника = СоответствиеСотрудниковПериодовСсылкам[СтрокаПлановыхНачислений.Сотрудник][СтрокаПлановыхНачислений.Период];
		
		СтруктураПоискаРассчитанныхНачислений.Начисление = СтрокаПлановыхНачислений.Начисление;
		СтруктураПоискаРассчитанныхНачислений.Сотрудник = СсылкаНаСотрудника;
		СтруктураПоискаРассчитанныхНачислений.ДокументОснование = СтрокаПлановыхНачислений.ДокументОснование;
		
		НайденныеСтроки = МенеджерРасчета.Зарплата.Начисления.НайтиСтроки(СтруктураПоискаРассчитанныхНачислений);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПлановыхНачислений.ВкладВФОТ = НайденныеСтроки[0].Результат;
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры	

Функция ТаблицаНачисленийДляРасчетаФОТ() 
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеНачисления.Измерения.ДокументОснование.Тип);
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));	
	ТаблицаНачислений.Колонки.Добавить("ВкладВФОТ", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимПерерасчетФОТ", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаНачислений;	
КонецФункции	

#Область ПолучениеПериодовПерерасчетаВторичныхДанныхИДанныхПерерасчета

// На основании описания изменившихся данных в наборах, а так же на основании таблиц движения регистров,
// полученных с помощью метода СоздатьВТИнтервалыДействияРесурсов, 
// строит таблицу с датами изменений источников данных. 
// При этом на каждую дату определяется, какие изменились свойства, влияющие на вторичные данные.
//
Процедура СоздатьВТИзмененияИсточниковВторичныхДанныхПоДатам(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.УстановитьПараметр("СпособыВыполненияПлановыхНачислений", СпособыВыполненияПлановыхНачислений());
	Запрос.УстановитьПараметр("КатегорииПособий", УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком());
	Запрос.УстановитьПараметр("ПоказательМРОТ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	|	ПлановыеНачисления.ДатаНачала КАК ДатаНачала,
	|	ПлановыеНачисления.ДатаОкончания КАК ДатаОкончания,
	|	ПлановыеНачисления.ЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	ПлановыеНачисления.ДатаНачалаПредыдущейЗаписи КАК ДатаНачалаПредыдущейЗаписи,
	|	ПлановыеНачисления.РегистраторСобытия КАК РегистраторСобытия,
	|	ИСТИНА КАК ИзменилосьНачисления,
	|	ЛОЖЬ КАК ИзменилсяПоказатель,
	|	ЛОЖЬ КАК ИзменилосьКоличествоСтавок,
	|	ЛОЖЬ КАК ИзменилсяГрафикРаботы,
	|	ЛОЖЬ КАК ИзмениласьСовокупнаяСтавка,
	|	ЛОЖЬ КАК НеобходимПересчетНачисленийЗависимыхОтСтажа,
	|	ЛОЖЬ КАК СменаГода
	|ПОМЕСТИТЬ ВТИзмененияИсточниковВторичныхДанныхДетально
	|ИЗ
	|	ВТПлановыеНачисления КАК ПлановыеНачисления
	|ГДЕ
	|	(ПлановыеНачисления.ИзменилосьЗначениеИспользуется
	|			ИЛИ ПлановыеНачисления.ИзменилосьЗначениеРазмер)
	|	И ПлановыеНачисления.ЭтоДвижение
	|	И ПлановыеНачисления.Начисление.СпособВыполненияНачисления В(&СпособыВыполненияПлановыхНачислений)
	|	И НЕ ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаНачала,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаОкончания,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ЭтоВозвратноеСобытие,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаНачалаПредыдущейЗаписи,
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.РегистраторСобытия,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
	|ГДЕ
	|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ИзменилосьЗначениеЗначение
	|	И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ЭтоДвижение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник,
	|	МинимальнаяОплатаТрудаРФ.Период,
	|	ПлановыеНачисления.ДатаОкончания,
	|	ЛОЖЬ,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТПлановыеНачисления КАК ПлановыеНачисления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|	ПО ПоказателиНачислений.Ссылка = ПлановыеНачисления.Начисление
	|	И ПоказателиНачислений.Показатель = &ПоказательМРОТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
	|	ПО МинимальнаяОплатаТрудаРФ.Период МЕЖДУ ПлановыеНачисления.ДатаНачала И ПлановыеНачисления.ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ГрафикРаботыСотрудников.ДатаНачала,
	|	ГрафикРаботыСотрудников.ДатаОкончания,
	|	ГрафикРаботыСотрудников.ЭтоВозвратноеСобытие,
	|	ГрафикРаботыСотрудников.ДатаНачалаПредыдущейЗаписи,
	|	ГрафикРаботыСотрудников.РегистраторСобытия,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.ИзменилосьЗначениеГрафикРаботы
	|	И ГрафикРаботыСотрудников.ЭтоДвижение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник,
	|	КадроваяИсторияСотрудников.ДатаНачала,
	|	КадроваяИсторияСотрудников.ДатаОкончания,
	|	КадроваяИсторияСотрудников.ЭтоВозвратноеСобытие,
	|	КадроваяИсторияСотрудников.ДатаНачалаПредыдущейЗаписи,
	|	КадроваяИсторияСотрудников.РегистраторСобытия,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.ИзменилосьЗначениеКоличествоСтавок
	|	И КадроваяИсторияСотрудников.ЭтоДвижение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыИзмененияПоказателейЗависящихОтСтажа.Сотрудник,
	|	ПериодыИзмененияПоказателейЗависящихОтСтажа.ПериодИзмененияСтажа,
	|	ПериодыИзмененияПоказателейЗависящихОтСтажа.ПериодИзмененияСтажа,
	|	ЛОЖЬ,
	|	ПериодыИзмененияПоказателейЗависящихОтСтажа.ПериодИзмененияСтажа,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	ВТЗначенияПоказателейСтажаПоПериодам КАК ПериодыИзмененияПоказателейЗависящихОтСтажа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыСменыГодаПоСотрудникам.Сотрудник,
	|	ПериодыСменыГодаПоСотрудникам.Период,
	|	ПериодыСменыГодаПоСотрудникам.Период,
	|	ЛОЖЬ,
	|	ПериодыСменыГодаПоСотрудникам.Период,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТПериодыСменыГодаПоСотрудникам КАК ПериодыСменыГодаПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияИсточниковВторичныхДанных.Сотрудник КАК Сотрудник,
	|	ИзмененияИсточниковВторичныхДанных.ДатаНачала КАК ДатаНачала,
	|	МИНИМУМ(МинимальныеПериодыИзмененияДанных.ДатаНачала) КАК МинимальныйПериодПерерасчетаДанных,
	|	МИНИМУМ(ИзмененияИсточниковВторичныхДанных.ЭтоВозвратноеСобытие) КАК ЭтоВозвратноеСобытие,
	|	МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.РегистраторСобытия) КАК РегистраторСобытия,
	|	МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ИзменилосьНачисления) КАК ИзменилосьНачисления,
	|	МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ИзменилсяПоказатель) КАК ИзменилсяПоказатель,
	|	МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ИзменилосьКоличествоСтавок) КАК ИзменилосьКоличествоСтавок,
	|	МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ИзменилсяГрафикРаботы) КАК ИзменилсяГрафикРаботы,
	|	НАЧАЛОПЕРИОДА(ИзмененияИсточниковВторичныхДанных.ДатаНачала, ГОД) КАК Год,
	|	ВЫБОР
	|		КОГДА ИзмененияИсточниковВторичныхДанных.ЭтоВозвратноеСобытие
	|				И МИНИМУМ(ИзмененияИсточниковВторичныхДанных.ДатаНачалаПредыдущейЗаписи) = МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ДатаНачалаПредыдущейЗаписи)
	|			ТОГДА МАКСИМУМ(ИзмененияИсточниковВторичныхДанных.ДатаНачалаПредыдущейЗаписи)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаНачалаВозвратнойЗаписи,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияНачислений
	|					И МинимальныеПериодыИзмененияДанных.ДатаИзмененияНачислений <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеобходимПерерасчетИзменившихсяНачислений,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияПоказателей
	|					И МинимальныеПериодыИзмененияДанных.ДатаИзмененияПоказателей <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеобходимПерерасчетаНачисленийИспользующихПоказатель,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияГрафика
	|					И МинимальныеПериодыИзмененияДанных.ДатаИзмененияГрафика <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеобходимПерерасчетаНачисленийЗависимыхОтВремени,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияКоличестваСтавок
	|					И МинимальныеПериодыИзмененияДанных.ДатаИзмененияКоличестваСтавок <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НеобходимПерерасчетаНачисленийЗависимыхОтКоличестваСтавок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МинимальныеПериодыИзмененияДанных.ИзменениеДанныхГрафика
	|					И ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияДанныхГрафика
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИзменилисьДанныеГрафика,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МинимальныеПериодыИзмененияДанных.ИзменениеДанныхСтажа
	|					И ИзмененияИсточниковВторичныхДанных.ДатаНачала >= МинимальныеПериодыИзмененияДанных.ДатаИзмененияДанныхСтажа
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИзменилисьДанныеСтажа
	|ПОМЕСТИТЬ ВТИзмененияИсточниковВторичныхДанныхПоДатам
	|ИЗ
	|	ВТИзмененияИсточниковВторичныхДанныхДетально КАК ИзмененияИсточниковВторичныхДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыОбновленияВторичныхДанных КАК МинимальныеПериодыИзмененияДанных
	|		ПО ИзмененияИсточниковВторичныхДанных.Сотрудник = МинимальныеПериодыИзмененияДанных.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененияИсточниковВторичныхДанных.Сотрудник,
	|	ИзмененияИсточниковВторичныхДанных.ДатаНачала,
	|	ИзмененияИсточниковВторичныхДанных.ЭтоВозвратноеСобытие";
	
	Запрос.Выполнить();	
КонецПроцедуры	

// Формирует ВТ, содержащую периоды изменения значений показателей зависимых от стажа.
//
Процедура СоздатьВТЗначенияПоказателейСтажаПоПериодам(МенеджерВременныхТаблиц, ДатаОкончания = '00010101')
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Иначе	
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ПоказательСевернаяНадбавка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|					И НЕ НачисленияПоказатели.Показатель = &ПоказательСевернаяНадбавка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНачисленияОтСтажа,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НачисленияПоказатели.Показатель = &ПоказательСевернаяНадбавка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНачислениеСевернойНадбавки,
	|	МИНИМУМ(ПлановыеНачисления.ДатаНачала) КАК Период,
	|	&ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОтборНачислений
	|ИЗ
	|	ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
	|			И (ПлановыеНачисления.Используется)
	|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|				ИЛИ НачисленияПоказатели.Показатель = &ПоказательСевернаяНадбавка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтборНачислений.Сотрудник,
	|	ВТОтборНачислений.Период,
	|	ВТОтборНачислений.ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыПолученияЗначенийПоказателейОтСтажа
	|ИЗ
	|	ВТОтборНачислений КАК ВТОтборНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОтборНачислений.ЕстьНачисленияОтСтажа) КАК ЕстьНачисленияОтСтажа,
	|	МАКСИМУМ(ОтборНачислений.ЕстьНачислениеСевернойНадбавки) КАК ЕстьНачислениеСевернойНадбавки
	|ИЗ
	|	ВТОтборНачислений КАК ОтборНачислений
	|ГДЕ
	|	(ОтборНачислений.ЕстьНачисленияОтСтажа
	|			ИЛИ ОтборНачислений.ЕстьНачислениеСевернойНадбавки)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() 
		И (Выборка.ЕстьНачисленияОтСтажа <> Null Или Выборка.ЕстьНачислениеСевернойНадбавки <> Null) Тогда
		
		КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц, "ВТПериодыПолученияЗначенийПоказателейОтСтажа");	
		
		ОписательТаблиц = РасчетЗарплатыРасширенный.ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(
			Запрос.МенеджерВременныхТаблиц,
			"ВТОтборНачислений");   
			
		ЧастиЗапроса = Новый Массив;	
		Если Выборка.ЕстьНачисленияОтСтажа = Истина Тогда
			РасчетЗарплатыРасширенный.СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц);
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка.Сотрудник,
			|	ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка.Период КАК ПериодИзмененияСтажа,
			|	ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка.Показатель,
			|	ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка.ЗначениеПоказателя КАК Значение
			|ПОМЕСТИТЬ ВТЗначенияПоказателейСтажаПоПериодам
			|ИЗ
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей КАК ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка";
			
			ЧастиЗапроса.Добавить(ТекстЗапроса);	
		КонецЕсли;	
		
		Если Выборка.ЕстьНачислениеСевернойНадбавки = Истина Тогда
			РасчетЗарплатыРасширенный.СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц);
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей.Сотрудник КАК Сотрудник,
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей.Период КАК ПериодИзмененияСтажа,
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей.Показатель КАК Показатель,
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей.ЗначениеПоказателя КАК Значение
			|ПОМЕСТИТЬ ВТЗначенияПоказателейСтажаПоПериодам
			|ИЗ
			|	ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка КАК ВТПериодыИзмененияЗначенийСтажевыхПоказателей
			|ГДЕ
			|	ВТПериодыИзмененияЗначенийСтажевыхПоказателей.КоэффициентПересчета <> 1";
			
			Если Выборка.ЕстьНачисленияОтСтажа Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТЗначенияПоказателейСтажаПоПериодам", "");
			КонецЕсли;	
			
			ЧастиЗапроса.Добавить(ТекстЗапроса);
		КонецЕсли;	
		
		Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС);
		
		Запрос.Выполнить();			
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) Сотрудник,
		|	ДАТАВРЕМЯ(1,1,1) КАК ПериодИзмененияСтажа,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка) КАК Показатель,
		|	0 КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСтажаПоПериодам";
		
		Запрос.Выполнить();	
	КонецЕсли;		
КонецПроцедуры	

// Формирует ВТ, содержащую периоды изменения данных общих графиков (в текущей реализации это всегда начало года).
// 
//
Процедура СоздатьВТПериодыСменыГодаПоСотрудникам(МенеджерВременныхТаблиц)
	НачалоТекущегоГода = НачалоГода(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.УстановитьПараметр("НачалоТекущегоГода", НачалоТекущегоГода);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыОбновленияВторичныхДанных.Сотрудник,
	|	ПериодыОбновленияВторичныхДанных.ДатаНачала
	|ИЗ
	|	ВТПериодыОбновленияВторичныхДанных КАК ПериодыОбновленияВторичныхДанных
	|ГДЕ
	|	(ПериодыОбновленияВторичныхДанных.ДатаНачала = &НачалоТекущегоГода
	|			ИЛИ НАЧАЛОПЕРИОДА(ПериодыОбновленияВторичныхДанных.ДатаНачала, ГОД) <> &НачалоТекущегоГода)";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	ТаблицаПериодовСменыГода = Новый ТаблицаЗначений;
	ТаблицаПериодовСменыГода.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПериодовСменыГода.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Пока Выборка.Следующий() Цикл
		ОбрабатываемыйГод = НачалоГода(Выборка.ДатаНачала);
		
		Пока ОбрабатываемыйГод <= НачалоТекущегоГода Цикл
			СтрокаТаблицы = ТаблицаПериодовСменыГода.Добавить();
			СтрокаТаблицы.Сотрудник = Выборка.Сотрудник;
			СтрокаТаблицы.Период = ОбрабатываемыйГод;
			
			ОбрабатываемыйГод = КонецГода(ОбрабатываемыйГод) + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("ТаблицаПериодовСменыГода", ТаблицаПериодовСменыГода);
	        
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПериодовСменыГода.Сотрудник,
	|	ТаблицаПериодовСменыГода.Период
	|ПОМЕСТИТЬ ВТПериодыСменыГодаПоСотрудникам
	|ИЗ
	|	&ТаблицаПериодовСменыГода КАК ТаблицаПериодовСменыГода";
	
	Запрос.Выполнить();	
КонецПроцедуры	

// На основании ТИзмененияИсточниковВторичныхДанныхПоДатам (содержащей даты изменений источников данных, описание
// изменившихся свойств) а также таблиц содержащих интервалы действия ресурсов регистров ПлановыеНачисления,ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников,
//  формирует выборку, где на каждую дату изменения источников вторичных данных плановых начислений, получены все
//  действующие плановые начисления значения периодических и стажевых показателей, используемых в плановых
//  начислениях, а также описание того, какие данные изменились на эту дату.
//  
Функция ВыборкаНачисленийНаДатыИзмененияИсточниковВторичныхДанных(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СевернаяНадбавка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	Запрос.УстановитьПараметр("ПоказательМРОТ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ"));
	Запрос.УстановитьПараметр("СпособыВыполненияПлановыхНачислений", СпособыВыполненияПлановыхНачислений());
	Запрос.УстановитьПараметр("КатегорииПособий", УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник КАК Сотрудник,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.МинимальныйПериодПерерасчетаДанных КАК МинимальныйПериодПерерасчетаДанных,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала КАК Период,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ЭтоВозвратноеСобытие КАК ЭтоВозвратноеСобытие,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачалаВозвратнойЗаписи КАК ДатаНачалаВозвратнойЗаписи,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.РегистраторСобытия КАК Регистратор,
	|	ПлановыеНачисления.Начисление КАК Начисление,
	|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
	|	ПлановыеНачисления.Размер КАК Размер,
	|	ПлановыеНачисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПлановыеНачисления.Используется КАК Используется,
	|	НачисленияПоказатели.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение ЕСТЬ NULL
	|			ТОГДА ПериодыИзмененияПоказателейЗависящихОтСтажа.Значение
	|		ИНАЧЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
	|	КОНЕЦ КАК Значение,
	|	ЕСТЬNULL(ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодЗаписиПериодическогоПоказателя,
	|	Начисления.ТребуетсяРасчетВремени КАК ТребуетсяРасчетВремени,
	|	Начисления.ТребуетсяРасчетНормыВремени КАК ТребуетсяРасчетНормыВремени,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.ЭтоДвижение
	|				И ПлановыеНачисления.ДатаНачала = ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала
	|				И (ПлановыеНачисления.ИзменилосьЗначениеИспользуется
	|					ИЛИ ПлановыеНачисления.ИзменилосьЗначениеРазмер)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилосьПлановоеНачисление,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.ЭтоДвижение
	|				И ПлановыеНачисления.ДатаНачала = ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала
	|				И ПлановыеНачисления.ИзменилосьЗначениеИспользуется
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилсяПризнакИспользованияНачисления,
	|	ВЫБОР
	|		КОГДА ПлановыеНачисления.ЭтоДвижение
	|				И ПлановыеНачисления.ДатаНачала = ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала
	|				И ПлановыеНачисления.ИзменилосьЗначениеРазмер
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилсяРазмерПлановогоНачисления,
	|	ВЫБОР
	|		КОГДА ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ЭтоДвижение
	|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаНачала = ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала
	|				И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ИзменилосьЗначениеЗначение
	|			ТОГДА ИСТИНА
	|		КОГДА ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилсяПоказатель
	|				И НачисленияПоказатели.Показатель = &ПоказательМРОТ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилосьЗначениеПоказателя,
	|	ВЫБОР
	|		КОГДА НЕ ПериодыИзмененияПоказателейЗависящихОтСтажа.Показатель ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		КОГДА ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилисьДанныеСтажа
	|				И НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|			ТОГДА ИСТИНА
	|		КОГДА ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилисьДанныеСтажа
	|				И НачисленияПоказатели.Показатель = &СевернаяНадбавка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИзменилосьЗначениеСтажевогоПоказателя,
	|	ВЫБОР
	|		КОГДА Начисления.ВключатьВФОТ
	|				И НЕ Начисления.ФОТНеРедактируется
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФОТЗадаетсяВручную,
	|	ВЫБОР
	|		КОГДА Начисления.ФОТНеРедактируется
	|				И Начисления.Рассчитывается
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоматическийРасчетФОТ,
	|	Начисления.ВключатьВФОТ КАК ВключатьВФОТ,
	|	НачисленияПоказатели.ЗапрашиватьПриВводе КАК ЗапрашиватьПриВводе,
	|	ПлановыйФОТ.ВкладВФОТ КАК ВкладВФОТ,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилисьДанныеСтажа КАК ИзменилисьДанныеСтажа,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилисьДанныеГрафика КАК ИзменилисьДанныеГрафика,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилосьКоличествоСтавок КАК ИзменилосьКоличествоСтавок,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.ИзменилсяГрафикРаботы КАК ИзменилсяГрафикРаботы,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.НеобходимПерерасчетИзменившихсяНачислений КАК НеобходимПерерасчетИзменившихсяНачислений,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.НеобходимПерерасчетаНачисленийИспользующихПоказатель КАК НеобходимПерерасчетаНачисленийИспользующихПоказатель,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.НеобходимПерерасчетаНачисленийЗависимыхОтВремени КАК НеобходимПерерасчетаНачисленийЗависимыхОтВремени,
	|	ИзмененияИсточниковВторичныхДанныхПоДатам.НеобходимПерерасчетаНачисленийЗависимыхОтКоличестваСтавок КАК НеобходимПерерасчетаНачисленийЗависимыхОтКоличестваСтавок,
	|	ПлановыйФОТ.Период КАК ПериодЗаписиПлановогоФОТ,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.Период = ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФОТРассчитанНаДатуСобытия
	|ИЗ
	|	ВТИзмененияИсточниковВторичныхДанныхПоДатам КАК ИзмененияИсточниковВторичныхДанныхПоДатам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ПО ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И (ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала МЕЖДУ ПлановыеНачисления.ДатаНачала И ПлановыеНачисления.ДатаОкончания)
	|			И (ПлановыеНачисления.Начисление.СпособВыполненияНачисления В (&СпособыВыполненияПлановыхНачислений))
	|			И (НЕ ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (ПлановыеНачисления.Начисление = Начисления.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО (ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ПО ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И (ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала МЕЖДУ КадроваяИсторияСотрудников.ДатаНачала И КадроваяИсторияСотрудников.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
	|		ПО ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
	|			И (ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала МЕЖДУ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаНачала И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДатаОкончания)
	|			И (КадроваяИсторияСотрудников.Организация = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация)
	|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель)
	|			И (ПлановыеНачисления.ДокументОснование = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование
	|				ИЛИ НЕ НачисленияПоказатели.ЗапрашиватьПриВводе)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСтажаПоПериодам КАК ПериодыИзмененияПоказателейЗависящихОтСтажа
	|		ПО ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник = ПериодыИзмененияПоказателейЗависящихОтСтажа.Сотрудник
	|			И ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала = ПериодыИзмененияПоказателейЗависящихОтСтажа.ПериодИзмененияСтажа
	|			И (НачисленияПоказатели.Показатель = ПериодыИзмененияПоказателейЗависящихОтСтажа.Показатель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ
	|		ПО ИзмененияИсточниковВторичныхДанныхПоДатам.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И (ИзмененияИсточниковВторичныхДанныхПоДатам.ДатаНачала МЕЖДУ ПлановыйФОТ.Период И ПлановыйФОТ.ДатаОкончания)
	|			И (ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление)
	|			И (ПлановыеНачисления.ГоловнаяОрганизация = ПлановыйФОТ.ГоловнаяОрганизация)
	|			И (ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период,
	|	Начисления.ОчередностьРасчета,
	|	Начисление,
	|	ДокументОснование,
	|	Показатель,
	|	ПериодЗаписиПериодическогоПоказателя УБЫВ";
	
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции	

Функция ПараметрыЗаписиНаборовПоСотрудникам(ДанныеПлановыхНачислений, АктуальныеДанныеФОТ, АктуальныСводныеДанные, СотрудникиСУдаляемымиДанными, ЗаписыватьБезусловно = Ложь)
	ПараметрыЗаписиНаборов = Новый Соответствие;
	ПоляСтруктуры = "ЗаписыватьНаборПлановогоФОТ, ЗаписыватьНаборСводныхДанных";
	
	Для Каждого КлючЗначение Из СотрудникиСУдаляемымиДанными Цикл
		ПараметрыПоСотруднику = Новый Структура(ПоляСтруктуры, Истина, Истина, Истина);
		ПараметрыЗаписиНаборов.Вставить(КлючЗначение.Ключ, ПараметрыПоСотруднику);
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ДанныеПлановыхНачислений Цикл
		ПараметрыПоСотруднику = ПараметрыЗаписиНаборов[СтрокаТаблицы.Сотрудник];
		
		Если ПараметрыПоСотруднику = Неопределено Тогда
			ПараметрыПоСотруднику = Новый Структура(ПоляСтруктуры, ЗаписыватьБезусловно, ЗаписыватьБезусловно);
			ПараметрыЗаписиНаборов.Вставить(СтрокаТаблицы.Сотрудник, ПараметрыПоСотруднику);
		КонецЕсли;
		
		Если СтрокаТаблицы.НеобходимПерерасчетСводныхДанных Тогда 
			ПараметрыПоСотруднику.ЗаписыватьНаборСводныхДанных = Истина;
		КонецЕсли;	
		
		Если СтрокаТаблицы.НеобходимПерерасчетФОТ Или СтрокаТаблицы.НеобходимоОбновлениеПризнакаИспользуется Тогда 
			ПараметрыПоСотруднику.ЗаписыватьНаборПлановогоФОТ = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если АктуальныеДанныеФОТ <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из АктуальныеДанныеФОТ Цикл
			ПараметрыПоСотруднику = ПараметрыЗаписиНаборов[СтрокаТаблицы.Сотрудник];
			
			Если ПараметрыПоСотруднику = Неопределено Тогда
				ПараметрыПоСотруднику = Новый Структура(ПоляСтруктуры);
				ПараметрыПоСотруднику.ЗаписыватьНаборПлановогоФОТ = Истина;
				ПараметрыЗаписиНаборов.Вставить(СтрокаТаблицы.Сотрудник, ПараметрыПоСотруднику);
			Иначе
				ПараметрыПоСотруднику.ЗаписыватьНаборПлановогоФОТ = Истина;			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если АктуальныСводныеДанные <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из АктуальныСводныеДанные Цикл
			ПараметрыПоСотруднику = ПараметрыЗаписиНаборов[СтрокаТаблицы.Сотрудник];
			
			Если ПараметрыПоСотруднику = Неопределено Тогда
				ПараметрыПоСотруднику = Новый Структура(ПоляСтруктуры);
				ПараметрыПоСотруднику.ЗаписыватьНаборСводныхДанных = Истина;
				ПараметрыЗаписиНаборов.Вставить(СтрокаТаблицы.Сотрудник, ПараметрыПоСотруднику);
			Иначе 
				ПараметрыПоСотруднику.ЗаписыватьНаборСводныхДанных = Истина;			
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	

	Возврат ПараметрыЗаписиНаборов;	
КонецФункции	

Функция СотрудникиСУдаляемымиДанными(МенеджерВременныхТаблиц)
	СотрудникиСУдаляемымиДанными = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыОбновленияВторичныхДанных.Сотрудник
	|ИЗ
	|	ВТПериодыОбновленияВторичныхДанных КАК ПериодыОбновленияВторичныхДанных
	|ГДЕ
	|	ПериодыОбновленияВторичныхДанных.УдалениеДанных";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СотрудникиСУдаляемымиДанными.Вставить(Выборка.Сотрудник, Истина);	
	КонецЦикла;	
	
	Возврат СотрудникиСУдаляемымиДанными;
КонецФункции	

Процедура ЗаписатьТекущаяТарифнаяСтавкаСотрудников(РассчитанныеСводныеДанные)
	РассчитанныеСводныеДанные.Сортировать("Сотрудник, Период УБЫВ", Новый СравнениеЗначений);	
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаСводныхДанных Из РассчитанныеСводныеДанные Цикл
		Если СтрокаСводныхДанных.ГоловнаяОрганизация = УправленческаяОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущаяСтрока = Неопределено
			Или ПредыдущаяСтрока.Сотрудник <> СтрокаСводныхДанных.Сотрудник Тогда
			
			Набор = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(СтрокаСводныхДанных.Сотрудник);
			
			СтрокаНабора = Набор.Добавить();
			СтрокаНабора.Сотрудник = СтрокаСводныхДанных.Сотрудник;
			СтрокаНабора.ФизическоеЛицо = СтрокаСводныхДанных.ФизическоеЛицо;
			СтрокаНабора.ГоловнаяОрганизация = СтрокаСводныхДанных.ГоловнаяОрганизация;
			СтрокаНабора.ТекущаяОрганизация = СтрокаСводныхДанных.ГоловнаяОрганизация;
			
			СтрокаНабора.ТекущаяТарифнаяСтавка = СтрокаСводныхДанных.ТарифнаяСтавка;
			СтрокаНабора.ТекущийФОТ = СтрокаСводныхДанных.ФОТ;
			СтрокаНабора.ТекущаяНадбавка = СтрокаСводныхДанных.Надбавка;

			Набор.Записать();	
		КонецЕсли;
		
		ПредыдущаяСтрока = СтрокаСводныхДанных;
	КонецЦикла;	
	
КонецПроцедуры	

Функция СводныеДанныеПлановыхНачислений(ТаблицаПлановыхНачислений, СвойстваНачислений, СвойстваПоказателей, КадровыеДанные, ДанныеГрафиков, ИзвестныеПоказатели = Неопределено)
	СводныеДанные = Новый ТаблицаЗначений;
	СводныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СводныеДанные.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СводныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СводныеДанные.Колонки.Добавить("ОсновноеНачисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	СводныеДанные.Колонки.Добавить("ПоказательТарифнойСтавки", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	СводныеДанные.Колонки.Добавить("ПоказательСовокупнойТарифнойСтавки", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	СводныеДанные.Колонки.Добавить("ФОТ", Новый ОписаниеТипов("Число"));
	СводныеДанные.Колонки.Добавить("ТарифнаяСтавка", Новый ОписаниеТипов("Число"));
	СводныеДанные.Колонки.Добавить("Надбавка", Новый ОписаниеТипов("Число"));
	СводныеДанные.Колонки.Добавить("ВидТарифнойСтавки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТарифныхСтавок"));
	СводныеДанные.Колонки.Добавить("Регистратор");
	СводныеДанные.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("СовокупнаяТарифнаяСтавка", Новый ОписаниеТипов("Число"));
		
	СводныеДанные.Колонки.Добавить("ПоказателиСовокупнойТарифнойСтавки");
	СводныеДанные.Колонки.Добавить("ИспользуетсяПоказательДоляНеполногоВремени", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("ИндексыСтрокНачисленийСовокупныхСтавок");
	СводныеДанные.Колонки.Добавить("ИндексСтрокиПоказателяТарифнойСтавки", Новый ОписаниеТипов("Число"));
	СводныеДанные.Колонки.Добавить("НеобходимоДобавлятьЗаписьСводныхДанных", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("НеобходимПерерасчетСводныхДанных", Новый ОписаниеТипов("Булево"));
	
	
	ТаблицаПлановыхНачислений.Сортировать("Сотрудник, ГоловнаяОрганизация, Период", Новый СравнениеЗначений);
	
	СравниваемыеПоля = Новый Массив;
	СравниваемыеПоля.Добавить("Сотрудник");
	СравниваемыеПоля.Добавить("ГоловнаяОрганизация");
	СравниваемыеПоля.Добавить("Период");
	
	ПредыдущаяСтрока = Неопределено;	
	
	Если ТаблицаПлановыхНачислений.Колонки.Найти("НеобходимоДобавлятьЗаписьСводныхДанных") = Неопределено Тогда
		ТаблицаПлановыхНачислений.Колонки.Добавить("НеобходимоДобавлятьЗаписьСводныхДанных", Новый ОписаниеТипов("Булево"));
	КонецЕсли;	
	
	Если ТаблицаПлановыхНачислений.Колонки.Найти("НеобходимПерерасчетСводныхДанных") = Неопределено Тогда
		ТаблицаПлановыхНачислений.Колонки.Добавить("НеобходимПерерасчетСводныхДанных", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаПлановыхНачислений.Колонки.Найти("Используется") = Неопределено Тогда
		ТаблицаПлановыхНачислений.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
		ТаблицаПлановыхНачислений.ЗаполнитьЗначения(Истина, "Используется");
	КонецЕсли;
	
	ПоказательДоляНеполногоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
	
	Для Каждого СтрокаНачислений Из ТаблицаПлановыхНачислений Цикл				
		Если Не ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, СтрокаНачислений, ПредыдущаяСтрока) Тогда
			СтрокаСводныхДанных = СводныеДанные.Добавить();	
			СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки = Новый Массив;
			СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок = Новый Массив;
			
			СтрокаСводныхДанных.Регистратор = СтрокаНачислений.Регистратор;

			ЗаполнитьЗначенияСвойств(СтрокаСводныхДанных, СтрокаНачислений);
		
			ПредыдущаяСтрока = Неопределено;
		КонецЕсли;		
		
		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли;	
		
		Если СтрокаНачислений.Используется Тогда
			СтрокаСводныхДанных.Используется = Истина;
		КонецЕсли;	
		
		Если СтрокаНачислений.НеобходимоДобавлятьЗаписьСводныхДанных Тогда
			СтрокаСводныхДанных.НеобходимоДобавлятьЗаписьСводныхДанных = Истина;
		КонецЕсли;
		
		Если СтрокаНачислений.НеобходимПерерасчетСводныхДанных Тогда
			СтрокаСводныхДанных.НеобходимПерерасчетСводныхДанных = Истина;
		КонецЕсли;

		СравнениеЗначений = Новый СравнениеЗначений;
		Если СравнениеЗначений.Сравнить(СтрокаНачислений.Регистратор, СтрокаНачислений.Регистратор) < 0 Тогда
			СтрокаСводныхДанных.Регистратор = СтрокаНачислений.Регистратор;
		КонецЕсли;	
				
		Если СтрокаНачислений.Используется И СвойстваНачислений[СтрокаНачислений.Начисление].ВключатьВФОТ Тогда
			СтрокаСводныхДанных.ФОТ = СтрокаСводныхДанных.ФОТ + СтрокаНачислений.ВкладВФОТ;
		КонецЕсли;	
		
		ЗачетНормыВремени = СвойстваНачислений[СтрокаНачислений.Начисление].ЗачетНормыВремени;
		// сначала определим основное начисление
		Если ЗачетНормыВремени 
			И СтрокаНачислений.Используется
			И (Не ЗначениеЗаполнено(СтрокаСводныхДанных.ОсновноеНачисление) 
			Или СвойстваНачислений[СтрокаНачислений.Начисление].РеквизитДопУпорядочивания < СвойстваНачислений[СтрокаСводныхДанных.ОсновноеНачисление].РеквизитДопУпорядочивания) Тогда
				
			СтрокаСводныхДанных.ОсновноеНачисление = СтрокаНачислений.Начисление;	
		КонецЕсли;	
		
		ИспользуетсяПоказательДоляНеполногоВремени = Ложь;
		Для Каждого СтрокаПоказателя Из СвойстваНачислений[СтрокаНачислений.Начисление].Показатели Цикл
			// Определим показатель тарифной ставки
			Если ЗачетНормыВремени  
				И СтрокаНачислений.Используется
				И СтрокаПоказателя.ЗапрашиватьПриВводе
				И ЗначениеЗаполнено(СвойстваПоказателей[СтрокаПоказателя.Показатель].ВидТарифнойСтавки)
				И (Не ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательТарифнойСтавки)
				Или СвойстваПоказателей[СтрокаПоказателя.Показатель].РеквизитДопУпорядочивания < СвойстваПоказателей[СтрокаСводныхДанных.ПоказательТарифнойСтавки].РеквизитДопУпорядочивания) Тогда 
				
				СтрокаСводныхДанных.ПоказательТарифнойСтавки = СтрокаПоказателя.Показатель;	
				СтрокаСводныхДанных.ИндексСтрокиПоказателяТарифнойСтавки = ТаблицаПлановыхНачислений.Индекс(СтрокаНачислений);
			КонецЕсли;		
			
			Если СтрокаНачислений.Используется 
				И СвойстваПоказателей[СтрокаПоказателя.Показатель].ВходитВСоставСовокупнойСтавки 
				И (СтрокаПоказателя.ЗапрашиватьПриВводе
				Или СвойстваПоказателей[СтрокаПоказателя.Показатель].ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа) Тогда 
				
				СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки.Добавить(СтрокаПоказателя.Показатель);
				Если СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок.Найти(ТаблицаПлановыхНачислений.Индекс(СтрокаНачислений)) = Неопределено Тогда
					СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок.Добавить(ТаблицаПлановыхНачислений.Индекс(СтрокаНачислений));
				КонецЕсли;	
			КонецЕсли;	
			
			Если СтрокаНачислений.Используется 
				И СвойстваПоказателей[СтрокаПоказателя.Показатель].ВходитВСоставСовокупнойСтавки
				И СтрокаПоказателя.ЗапрашиватьПриВводе 
				И ЗначениеЗаполнено(СвойстваПоказателей[СтрокаПоказателя.Показатель].ВидТарифнойСтавки) 
				И (Не ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки)
				Или СвойстваПоказателей[СтрокаПоказателя.Показатель].РеквизитДопУпорядочивания < СвойстваПоказателей[СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки].РеквизитДопУпорядочивания) Тогда
				
				СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки = СтрокаПоказателя.Показатель
			КонецЕсли;	
			
			Если СтрокаПоказателя.Показатель = ПоказательДоляНеполногоВремени Тогда 
				ИспользуетсяПоказательДоляНеполногоВремени = Истина; 
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если СтрокаСводныхДанных.ОсновноеНачисление = СтрокаНачислений.Начисление Тогда
			СтрокаСводныхДанных.ИспользуетсяПоказательДоляНеполногоВремени = ИспользуетсяПоказательДоляНеполногоВремени;
		КонецЕсли;	
		
		ПредыдущаяСтрока = СтрокаНачислений;
	КонецЦикла;	
	
	// Теперь рассчитаем значения
	
	// сначала получим показатели ставок
	ТаблицаПоказателей = ТаблицаПоказателей();
		
	Для Каждого СтрокаСводныхДанных Из СводныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательТарифнойСтавки) Тогда
			СтрокаТаблицыПоказателей = ТаблицаПоказателей.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПоказателей, ТаблицаПлановыхНачислений[СтрокаСводныхДанных.ИндексСтрокиПоказателяТарифнойСтавки]);
			СтрокаТаблицыПоказателей.Показатель = СтрокаСводныхДанных.ПоказательТарифнойСтавки;
		КонецЕсли;
		
		Если СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки.Количество() = 1
			И ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки) Тогда 
			
			СтрокаТаблицыПоказателей = ТаблицаПоказателей.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПоказателей, ТаблицаПлановыхНачислений[СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок[0]]);
			СтрокаТаблицыПоказателей.Показатель = СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки;
		КонецЕсли;			
	КонецЦикла;
	
	ЗаполнитьПоказателейНачисленийСотрудников(ТаблицаПоказателей, СвойстваПоказателей, КадровыеДанные, ДанныеГрафиков, ИзвестныеПоказатели);
		
	СтруктураПоискаПоказателей = Новый Структура("Сотрудник, ГоловнаяОрганизация, Период, Показатель, ДокументОснование");
	ТаблицаПоказателей.Индексы.Добавить("Сотрудник, ГоловнаяОрганизация, Период, Показатель, ДокументОснование");
	Для Каждого СтрокаСводныхДанных Из СводныеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки) Тогда 
			СтрокаСводныхДанных.ВидТарифнойСтавки = СвойстваПоказателей[СтрокаСводныхДанных.ПоказательСовокупнойТарифнойСтавки].ВидТарифнойСтавки;
		КонецЕсли;		

		Если ЗначениеЗаполнено(СтрокаСводныхДанных.ПоказательТарифнойСтавки) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПоказателей, ТаблицаПлановыхНачислений[СтрокаСводныхДанных.ИндексСтрокиПоказателяТарифнойСтавки]);
			СтруктураПоискаПоказателей.Показатель = СтрокаСводныхДанных.ПоказательТарифнойСтавки;
			
			СтрокаСводныхДанных.ТарифнаяСтавка = ЗначениеПоказателяИзТаблицы(ТаблицаПоказателей, СтруктураПоискаПоказателей);
				
		КонецЕсли;
		
		Если СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки.Количество() = 1 Тогда 
			СтрокаТаблицыПлановыхНачислений = ТаблицаПлановыхНачислений[СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок[0]];
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПоказателей, СтрокаТаблицыПлановыхНачислений);
			СтруктураПоискаПоказателей.Показатель = СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки[0];
			
			СтрокаСводныхДанных.СовокупнаяТарифнаяСтавка = ЗначениеПоказателяИзТаблицы(ТаблицаПоказателей, СтруктураПоискаПоказателей);
			СтрокаСводныхДанных.Надбавка = СтрокаСводныхДанных.ФОТ - СтрокаТаблицыПлановыхНачислений.ВкладВФОТ;
		ИначеЕсли СтрокаСводныхДанных.ПоказателиСовокупнойТарифнойСтавки.Количество() > 0 Тогда
			ФОТ = 0;
			Для Каждого ИндексСтроки Из СтрокаСводныхДанных.ИндексыСтрокНачисленийСовокупныхСтавок Цикл
				ФОТ = ФОТ + ТаблицаПлановыхНачислений[ИндексСтроки].ВкладВФОТ;		
			КонецЦикла;	
			
			СтрокаСводныхДанных.Надбавка = СтрокаСводныхДанных.ФОТ - ФОТ;
			ДанныеГрафикаСотрудника = ДанныеГрафикаСотрудникаИзТаблицы(ДанныеГрафиков, СтрокаСводныхДанных.Сотрудник, СтрокаСводныхДанных.Период);
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанные, СтрокаСводныхДанных.Сотрудник, СтрокаСводныхДанных.Период);
			
			Если ДанныеГрафикаСотрудника = Неопределено
				Или Не ЗначениеЗаполнено(ДанныеГрафикаСотрудника.СреднемесячноеЧислоЧасов) Тогда
				
				СреднемесячноеЧислоЧасов = 160;
				СреднемесячноеЧислоЧасовНорма = 160;
			Иначе
				СреднемесячноеЧислоЧасов = ДанныеГрафикаСотрудника.СреднемесячноеЧислоЧасов;
				СреднемесячноеЧислоЧасовНорма = ДанныеГрафикаСотрудника.СреднемесячноеЧислоЧасовНорма;
			КонецЕсли;	
			
			Если ДанныеГрафикаСотрудника = Неопределено
				Или Не ЗначениеЗаполнено(ДанныеГрафикаСотрудника.СреднемесячноеЧислоДней) Тогда
				
				СреднемесячноеЧислоДней = 20;
			Иначе
				СреднемесячноеЧислоДней = ДанныеГрафикаСотрудника.СреднемесячноеЧислоДней;
			КонецЕсли;	
			
			Если СтрокаСводныхДанных.ИспользуетсяПоказательДоляНеполногоВремени Тогда
				ДоляНеполногоВремени = ДоляНеполногоВремени(ДанныеГрафикаСотрудника, КадровыеДанныеСотрудника);
			Иначе
				ДоляНеполногоВремени = СреднемесячноеЧислоЧасов/СреднемесячноеЧислоЧасовНорма;
			КонецЕсли;	
			
			Если СтрокаСводныхДанных.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				СтрокаСводныхДанных.СовокупнаяТарифнаяСтавка = ФОТ / СреднемесячноеЧислоЧасов / ДоляНеполногоВремени;
			ИначеЕсли СтрокаСводныхДанных.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				СтрокаСводныхДанных.СовокупнаяТарифнаяСтавка = ФОТ / СреднемесячноеЧислоДней / ДоляНеполногоВремени;
			Иначе
				СтрокаСводныхДанных.СовокупнаяТарифнаяСтавка = Окр(ФОТ / ДоляНеполногоВремени,2);
			КонецЕсли;
		Иначе
			СтрокаСводныхДанных.Надбавка = СтрокаСводныхДанных.ФОТ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СводныеДанные;
КонецФункции	

Процедура ЗаполнитьРезультатРасчетаФОТ(ТаблицаПлановыхНачислений, РезультатРасчетаФОТ)
	РезультатРасчетаФОТ.Индексы.Добавить("Период, Сотрудник, Начисление, ДокументОснование, ГоловнаяОрганизация");
	СтруктураПоиска = Новый Структура("Период, Сотрудник, Начисление, ДокументОснование, ГоловнаяОрганизация");
	
	Для Каждого СтрокаПлановыхНачислений Из ТаблицаПлановыхНачислений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПлановыхНачислений);
		НайденныеСтроки = РезультатРасчетаФОТ.НайтиСтроки(СтруктураПоиска);
		 
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПлановыхНачислений.ВкладВФОТ = НайденныеСтроки[0].ВкладВФОТ;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры		

Процедура ЗаполнитьИзвестныеДанныеФОТ(ДанныеПлановыхНачислений, АктуальныеДанныеФОТ, РассчитанныеДанныеФОТ, СвойстваНачислений)
	
	АктуальныеДанныеФОТ.Индексы.Добавить("Сотрудник, ДатаОкончания, Начисление, ДокументОснование, ГоловнаяОрганизация, АктуальнаяЗапись");
	СтруктураПоискаАктуальныхДанных = Новый Структура("Сотрудник, ДатаОкончания, Начисление, ДокументОснование, ГоловнаяОрганизация, АктуальнаяЗапись");
	
	Если РассчитанныеДанныеФОТ <> Неопределено Тогда
		РассчитанныеДанныеФОТ.Индексы.Добавить("Сотрудник, Период, Начисление, ДокументОснование, ГоловнаяОрганизация");
	КонецЕсли;	
	СтруктураПоискаРассчитанныхДанных = Новый Структура("Сотрудник, Период, Начисление, ДокументОснование, ГоловнаяОрганизация");
	
	Для Каждого СтрокаДанныхНачислений Из ДанныеПлановыхНачислений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаРассчитанныхДанных, СтрокаДанныхНачислений);	
		
		СвойстваНачисления = СвойстваНачислений[СтрокаДанныхНачислений.Начисление];
		
		Если СвойстваНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассчитанныеДанныеФОТ <> Неопределено Тогда
			НайденныеСтроки = РассчитанныеДанныеФОТ.НайтиСтроки(СтруктураПоискаРассчитанныхДанных);
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаДанныхНачислений.ВкладВФОТ = ?(СвойстваНачисления.ВключатьВФОТ, НайденныеСтроки[0].Размер, 0);
				СтрокаДанныхНачислений.НеобходимПерерасчетФОТ = Ложь;
			КонецЕсли;	
		КонецЕсли;
			
		Если СтрокаДанныхНачислений.ПолучатьДанныеФОТНаНачалоВозвратнойЗаписи Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаАктуальныхДанных, СтрокаДанныхНачислений);
			СтруктураПоискаАктуальныхДанных.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
			СтруктураПоискаРассчитанныхДанных.АктуальнаяЗапись = Истина;
			                                
			СтрокиАктуальныхДанныхФОТ = АктуальныеДанныеФОТ.НайтиСтроки(СтруктураПоискаАктуальныхДанных); 
			
			Если СтрокиАктуальныхДанныхФОТ.Количество() = 1 Тогда
				СтрокаДанныхНачислений.ВкладВФОТ = ?(СвойстваНачисления.ВключатьВФОТ, СтрокиАктуальныхДанныхФОТ[0].ВкладВФОТ, 0);
				СтрокаДанныхНачислений.НеобходимПерерасчетФОТ = Ложь;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаписатьНаборРегистраВторичныхДанных(ИмяРегистра, ДанныеНабора, ЗаписыватьПоГодам = Истина, РежимЗагрузкиДанных = Ложь, ИмяПоляРегистратор = "РегистраторСобытия", ПараметрыОбновления = Неопределено)
	СравниваемыеПоля = Новый Массив;
	СравниваемыеПоля.Добавить("Сотрудник");
	Если ЗаписыватьПоГодам Тогда
		СравниваемыеПоля.Добавить("Год");
	КонецЕсли;
	
	ДанныеНабора.Сортировать("Сотрудник, Год", Новый СравнениеЗначений);
	
	НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений." + ИмяРегистра).СоздатьНаборЗаписей();
	Если РежимЗагрузкиДанных Тогда
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
	КонецЕсли;	
		
	ПредыдущаяСтрока = Неопределено;
	НаборИнициализирован = Ложь;
	Для Каждого СтрокаДанных Из ДанныеНабора Цикл
		Если Не ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, СтрокаДанных, ПредыдущаяСтрока) Тогда	
			Если НаборИнициализирован Тогда
				Если ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений." + ИмяРегистра, "Сотрудник", СтрокаДанных.Сотрудник) Тогда
					НаборЗаписей.Записать();
					ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
				КонецЕсли; 
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			Для Каждого Поле Из СравниваемыеПоля Цикл
				НаборЗаписей.Отбор[Поле].Установить(СтрокаДанных[Поле]);
			КонецЦикла;	
			
			НаборИнициализирован = Истина;
		КонецЕсли;	
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаДанных);
		СтрокаНабора[ИмяПоляРегистратор] = СтрокаДанных.РегистраторСобытия;
		
		ПредыдущаяСтрока = СтрокаДанных;
	КонецЦикла;	
	
	Если НаборИнициализирован Тогда
		НаборЗаписей.Записать();		
	КонецЕсли;	
КонецПроцедуры

Процедура УдалитьНеактуальныеЗаписиВторичныхДанных(ИмяРегистра, ТекущиеДанные, ОбновленныеДанные)
	ТекущиеДанные.Свернуть("Сотрудник, Год");
	
	ОбновленныеДанные.Индексы.Добавить("Сотрудник, Год");
	СтруктураПоиска = Новый Структура("Сотрудник, Год");
	
	Набор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрСведений." + ИмяРегистра).СоздатьНаборЗаписей();
	
	Для Каждого СтрокаТекущихДанных Из ТекущиеДанные Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТекущихДанных);
		
		Если ОбновленныеДанные.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Набор.Отбор.Сотрудник.Установить(СтрокаТекущихДанных.Сотрудник);
			Набор.Отбор.Год.Установить(СтрокаТекущихДанных.Год);
			
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

Функция ТаблицаНабораПлановогоФОТ(ДанныеПлановыхНачислений, АктуальныеДанныеФОТ, ПараметрыЗаписиНаборов)
	ТаблицаНабораПлановогоФОТ = РегистрыСведений.ПлановыйФОТ.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для Каждого СтрокаАктуальныхДанных Из АктуальныеДанныеФОТ Цикл
		Если СтрокаАктуальныхДанных.АктуальнаяЗапись Тогда
			СтрокаНабора = ТаблицаНабораПлановогоФОТ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаАктуальныхДанных);
		КонецЕсли;
	КонецЦикла;	
	
	ИзмеренияРегистра = "Сотрудник, Начисление, ДокументОснование, ГоловнаяОрганизация";	
	СравниваемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияРегистра, ",",, Истина);
	СравниваемыеПоля.Добавить("ВкладВФОТ");
	СравниваемыеПоля.Добавить("Используется");
	
	УникальныеСотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПлановыхНачислений.ВыгрузитьКолонку("Сотрудник"));
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(УникальныеСотрудники, "ФизическоеЛицо");
	ДанныеПлановыхНачислений.Сортировать(ИзмеренияРегистра + ", Период", Новый СравнениеЗначений);
	
	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого СтрокаПлановыхНачислений Из ДанныеПлановыхНачислений Цикл
		Если ПараметрыЗаписиНаборов[СтрокаПлановыхНачислений.Сотрудник].ЗаписыватьНаборПлановогоФОТ <> Истина Тогда
			ПредыдущаяСтрока = СтрокаПлановыхНачислений;
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаПлановыхНачислений.НеобходимоДобавлятьЗаписьВФОТ Тогда
			ПредыдущаяСтрока = СтрокаПлановыхНачислений;
			Продолжить;
		КонецЕсли;
		
		Если ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, СтрокаПлановыхНачислений, ПредыдущаяСтрока)
			И Не ЗначениеЗаполнено(СтрокаПлановыхНачислений.Регистратор) Тогда
			
			СтрокаАктуальныхДанных = АктуальныеДанныеФОТ.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаАктуальныхДанных, СтрокаПлановыхНачислений);
			СтрокаАктуальныхДанных.Год = НачалоГода(СтрокаПлановыхНачислений.Период);
			Продолжить;
		КонецЕсли;
		
		Если ФизическиеЛицаСотрудников[СтрокаПлановыхНачислений.Сотрудник] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаНабора = ТаблицаНабораПлановогоФОТ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаПлановыхНачислений);
		
		СтрокаНабора.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНабора.Сотрудник];
		СтрокаНабора.РегистраторСобытия = СтрокаПлановыхНачислений.Регистратор;
		СтрокаНабора.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
		СтрокаНабора.Год = НачалоГода(СтрокаНабора.Период);
		
		ПредыдущаяСтрока = СтрокаПлановыхНачислений;
	КонецЦикла;
	
	ЗаполнитьДополнительныеПоляНабораВторичныхДанных(ТаблицаНабораПлановогоФОТ, ИзмеренияРегистра, "ВкладВФОТ");
		
	Возврат ТаблицаНабораПлановогоФОТ;
	
КонецФункции

Функция ТаблицаНабораСводныхДанных(СводныеДанные, АктуальныеДанныеСводныеДанные, ПараметрыЗаписиНаборов)
	ТаблицаНабораСводныхДанных = РегистрыСведений.ПлановыйФОТИтоги.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Для Каждого СтрокаАктуальныхДанных Из АктуальныеДанныеСводныеДанные Цикл
		Если СтрокаАктуальныхДанных.АктуальнаяЗапись Тогда
			СтрокаНабора = ТаблицаНабораСводныхДанных.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаАктуальныхДанных);
		КонецЕсли;
	КонецЦикла;	
	
	УникальныеСотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СводныеДанные.ВыгрузитьКолонку("Сотрудник"));
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(УникальныеСотрудники, "ФизическоеЛицо");
		
	Для Каждого СтрокаСводныхДанных Из СводныеДанные Цикл		
		Если ПараметрыЗаписиНаборов[СтрокаСводныхДанных.Сотрудник].ЗаписыватьНаборСводныхДанных <> Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не СтрокаСводныхДанных.НеобходимоДобавлятьЗаписьСводныхДанных Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ФизическиеЛицаСотрудников[СтрокаСводныхДанных.Сотрудник] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНабора = ТаблицаНабораСводныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаСводныхДанных);
		
		СтрокаНабора.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНабора.Сотрудник];
		СтрокаНабора.РегистраторСобытия = СтрокаСводныхДанных.Регистратор;
		СтрокаНабора.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();   
		СтрокаНабора.Год = НачалоГода(СтрокаНабора.Период);
	КонецЦикла;
	
	ИзмеренияРегистра = "Сотрудник, ГоловнаяОрганизация";	
	
	ЗаполнитьДополнительныеПоляНабораВторичныхДанных(ТаблицаНабораСводныхДанных, ИзмеренияРегистра, "ОсновноеНачисление, ВидТарифнойСтавки, ТарифнаяСтавка, СовокупнаяТарифнаяСтавка, ФОТ, Надбавка");
	
	Возврат ТаблицаНабораСводныхДанных;
КонецФункции	

Функция ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, Строка1, Строка2)
	Если Строка1 = Неопределено
		Или Строка2 = Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;	
	
	Для Каждого Поле Из СравниваемыеПоля Цикл
		Если Строка1[Поле] <> Строка2[Поле] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьДополнительныеПоляНабораВторичныхДанных(ТаблицаНабораЗаписей, ИзмеренияРегистра, РесурсыРегистра)
	ТаблицаНабораЗаписей.Сортировать(ИзмеренияРегистра + ", Период", Новый СравнениеЗначений);
	
	СравниваемыеПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзмеренияРегистра, ",",, Истина);
	
	ПредыдущаяСтрока = Неопределено;
	ПериодЗаписиПредыдущегоРегистратора = Неопределено;
	ВкладВФОТПредыдущейДействующейЗаписи = 0;
	Для Каждого СтрокаНабора Из ТаблицаНабораЗаписей Цикл		
		СтрокаНабора.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();

		ЗначенияИзмеренийСовпадаютСПредыдущейСтрокой = ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, СтрокаНабора, ПредыдущаяСтрока);			
			
		Если ПредыдущаяСтрока = Неопределено  
			Или Не ЗначенияПолейВСтрокахТаблицыСовпадают(СравниваемыеПоля, СтрокаНабора, ПредыдущаяСтрока) Тогда 
						
			РегистраторПредыдущейЗаписи = СтрокаНабора.РегистраторСобытия;
			ПериодЗаписиПредыдущегоРегистратора = СтрокаНабора.Период; 	
			Если СтрокаНабора.Используется Тогда
				ПредыдущаяДействующаяСтрока = СтрокаНабора;
			Иначе
				ПредыдущаяДействующаяСтрока = Неопределено;
			КонецЕсли;	
		Иначе 
			ПредыдущаяСтрока.ДатаОкончания = СтрокаНабора.Период - 1;

			Если ЗначениеЗаполнено(ПредыдущаяСтрока.РегистраторСобытия) Тогда		
				Если СтрокаНабора.РегистраторСобытия <> ПредыдущаяСтрока.РегистраторСобытия Тогда
					ПериодЗаписиПредыдущегоРегистратора = ПредыдущаяСтрока.Период;
					РегистраторПредыдущейЗаписи = ПредыдущаяСтрока.РегистраторСобытия;
				КонецЕсли;
			КонецЕсли;	
					
			Если Не СтрокаНабора.Используется Тогда
				Если ПредыдущаяДействующаяСтрока <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаНабора, ПредыдущаяДействующаяСтрока, РесурсыРегистра);
				КонецЕсли;			
			Иначе
				ПредыдущаяДействующаяСтрока = СтрокаНабора;	
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(СтрокаНабора.РегистраторСобытия) Тогда
				Если ЗначениеЗаполнено(РегистраторПредыдущейЗаписи) Тогда					
					СтрокаНабора.РегистраторСобытия = РегистраторПредыдущейЗаписи;
				КонецЕсли;
			КонецЕсли;	
			
			Если Не ЗначениеЗаполнено(СтрокаНабора.ПериодПредыдущейЗаписи) Тогда
				Если ЗначениеЗаполнено(ПериодЗаписиПредыдущегоРегистратора) 
					И РегистраторПредыдущейЗаписи <> СтрокаНабора.РегистраторСобытия Тогда
		
					СтрокаНабора.ПериодПредыдущейЗаписи = ПериодЗаписиПредыдущегоРегистратора; 		
				ИначеЕсли ПредыдущаяСтрока <> Неопределено Тогда
					СтрокаНабора.ПериодПредыдущейЗаписи = ПредыдущаяСтрока.ПериодПредыдущейЗаписи;	
				КонецЕсли;					
			КонецЕсли;	

				
		КонецЕсли;
					
		ПредыдущаяСтрока = СтрокаНабора;			
	КонецЦикла;	
	
КонецПроцедуры	

Функция ТаблицаНачисленийДляРасчетФОТПоДаннымНачисленийНаДатыИзмененияИсточниковДанных(ДанныеНачисленийНаПериодыИзменений, СвойстваНачислений)
	ТаблицаНачисленийДляРасчетаФОТ = ТаблицаНачисленийДляРасчетаФОТ();
	
	ПериодыПерерасчетаФОТ = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ДанныеНачисленийНаПериодыИзменений Цикл
		Если СтрокаТаблицы.НеобходимПерерасчетФОТ
			И СвойстваНачислений[СтрокаТаблицы.Начисление].АвтоматическийРасчетФОТ Тогда
			
			ПерерассчитываемыеПериодыПоСотруднику = ПериодыПерерасчетаФОТ[СтрокаТаблицы.Сотрудник];
			
			Если ПерерассчитываемыеПериодыПоСотруднику = Неопределено Тогда
				ПерерассчитываемыеПериодыПоСотруднику = Новый Соответствие;
				ПериодыПерерасчетаФОТ.Вставить(СтрокаТаблицы.Сотрудник, ПерерассчитываемыеПериодыПоСотруднику);
			КонецЕсли;
			
			ПерерассчитываемыеПериодыПоСотруднику.Вставить(СтрокаТаблицы.Период, Истина);	
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого СтрокаТаблицы Из ДанныеНачисленийНаПериодыИзменений Цикл
		ПерерассчитываемыеПериодыПоСотруднику = ПериодыПерерасчетаФОТ[СтрокаТаблицы.Сотрудник];
		
		Если СвойстваНачислений[СтрокаТаблицы.Начисление].ВключатьВФОТ
			И ПерерассчитываемыеПериодыПоСотруднику <> Неопределено 
			И ПерерассчитываемыеПериодыПоСотруднику[СтрокаТаблицы.Период] = Истина 
			И СтрокаТаблицы.Используется Тогда
			
			СтрокаТаблицыДляРасчетаФОТ = ТаблицаНачисленийДляРасчетаФОТ.Добавить(); 
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыДляРасчетаФОТ, СтрокаТаблицы);
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат ТаблицаНачисленийДляРасчетаФОТ;	
КонецФункции	

Функция ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковВторичныхДанных(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыИзмененияИсточниковДанныхФОТ.Сотрудник КАК Сотрудник,
	|	ДатыИзмененияИсточниковДанныхФОТ.ДатаНачала КАК Период,
	|	КадроваяИстория.КоличествоСтавок,
	|	КадроваяИстория.Подразделение,
	|	КадроваяИстория.Организация,
	|	ГрафикиРаботыСотрудниковДвижения.ГрафикРаботы
	|ИЗ
	|	ВТИзмененияИсточниковВторичныхДанныхПоДатам КАК ДатыИзмененияИсточниковДанныхФОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИстория
	|		ПО ДатыИзмененияИсточниковДанныхФОТ.Сотрудник = КадроваяИстория.Сотрудник
	|			И (ДатыИзмененияИсточниковДанныхФОТ.ДатаНачала МЕЖДУ КадроваяИстория.ДатаНачала И КадроваяИстория.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикиРаботыСотрудниковДвижения
	|		ПО (ДатыИзмененияИсточниковДанныхФОТ.ДатаНачала МЕЖДУ ГрафикиРаботыСотрудниковДвижения.ДатаНачала И ГрафикиРаботыСотрудниковДвижения.ДатаОкончания)
	|			И ДатыИзмененияИсточниковДанныхФОТ.Сотрудник = ГрафикиРаботыСотрудниковДвижения.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Функция ДанныеНачисленийНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ИзменившиесяНачисленияНабора, ИзменившиесяПоказателиНабора)
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("ВкладВФОТ", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимоДобавлятьЗаписьВФОТ", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимоДобавлятьЗаписьСводныхДанных", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимПерерасчетСводныхДанных", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимПерерасчетФОТ", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("НеобходимоОбновлениеПризнакаИспользуется", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("ПолучатьДанныеФОТНаНачалоВозвратнойЗаписи", Новый ОписаниеТипов("Булево")); 
	ТаблицаНачислений.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));

	ТаблицаНачислений.Колонки.Добавить("Регистратор");
	
	ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Сбросить();

	КоллекцияУникальныхНачислений = Новый Соответствие;
	Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Следующий() Цикл
		КоллекцияУникальныхНачислений.Вставить(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Начисление);
	КонецЦикла;	
	
	ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Сбросить();
	
	Для Каждого ИзменившиесяНачисленияСотрудника Из ИзменившиесяНачисленияНабора Цикл
		Для Каждого Начисление Из ИзменившиесяНачисленияСотрудника.Значение Цикл
			КоллекцияУникальныхНачислений.Вставить(Начисление.Ключ);
		КонецЦикла;		
	КонецЦикла;	
	
	ЗависимостиНачислений = ЗависимостиНачислений(КоллекцияУникальныхНачислений);
	
	ПоказательДоляНеполногоВремени =  ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
	
	Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПерерассчитываемыеНачисленияСотрудника = Новый Соответствие;
		
		ИзменившиесяНачисленияНабораПоСотруднику = ИзменившиесяНачисленияНабора[ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Сотрудник];
		ИзменившиесяПоказателиНабораПоСотруднику = ИзменившиесяПоказателиНабора[ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Сотрудник];
		
		БылиИзмененияДанных = Ложь;
		
		Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.СледующийПоЗначениюПоля("Период") Цикл
			Если ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Период <> ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.МинимальныйПериодПерерасчетаДанных Тогда  	
				БылиИзмененияДанных = Истина
			КонецЕсли;
			
			ДобавляемыеНачисления = Новый Соответствие;
			
			Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.СледующийПоЗначениюПоля("Начисление") Цикл
				Если Не ЗначениеЗаполнено(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Начисление) Тогда
					Продолжить;
				КонецЕсли;	
				
				Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					СтрокаТаблицыНачислений = ТаблицаНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНачислений, ВыборкаНачисленийНаДатыИзмененияИсточниковДанных);
					СтрокаТаблицыНачислений.НеобходимоОбновлениеПризнакаИспользуется = ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ИзменилсяПризнакИспользованияНачисления;
					
					Если ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.АвтоматическийРасчетФОТ Тогда
						СтрокаТаблицыНачислений.ВкладВФОТ = ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ВкладВФОТ;
					ИначеЕсли ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ВключатьВФОТ Тогда
						СтрокаТаблицыНачислений.ВкладВФОТ = ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Размер;
					КонецЕсли;	
				
					СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ = ДобавлятьЗаписьФОТПриИзмененииДанныхНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ДобавляемыеНачисления, ЗависимостиНачислений);
					
					СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьСводныхДанных = ДобавлятьЗаписьСводныхДанныхПриИзмененииДанныхНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных);
					
					НеобходимПерерасчетФОТ = НеобходимПерерасчетаФОТПриИзмененииДанныхНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ИзменившиесяНачисленияНабораПоСотруднику, ПерерассчитываемыеНачисленияСотрудника, ЗависимостиНачислений); 
					
					СтрокаТаблицыНачислений.НеобходимПерерасчетСводныхДанных = НеобходимПерерасчетаСводныхДанныхПриИзмененииДанныхНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ИзменившиесяНачисленияНабораПоСотруднику);
					
					Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Следующий() Цикл
						Если ДобавлятьЗаписьФОТПриИзмененииДанныхПоказателяНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ПоказательДоляНеполногоВремени) Тогда
							СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ = Истина;
						КонецЕсли;	
						
						Если ДобавлятьЗаписьСводныхДанныхДанныхПоказателяНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ПоказательДоляНеполногоВремени) Тогда
							СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьСводныхДанных = Истина;
						КонецЕсли;	
						
						Если НеобходимПерерасчетаФОТПриИзмененииДанныхПоказателяНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ИзменившиесяПоказателиНабораПоСотруднику, ПоказательДоляНеполногоВремени) Тогда
							НеобходимПерерасчетФОТ = Истина;
						КонецЕсли;	
						
						Если НеобходимПерерасчетаСводныхДанныхПриИзмененииДанныхПоказателяНачисления(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных, ИзменившиесяПоказателиНабораПоСотруднику) Тогда
							СтрокаТаблицыНачислений.НеобходимПерерасчетСводныхДанных = Истина;
						КонецЕсли;
					КонецЦикла;	
					
					Если НеобходимПерерасчетФОТ Тогда
						СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ = Истина;
						
						Если ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ВключатьВФОТ Тогда
							ПерерассчитываемыеНачисленияСотрудника.Вставить(СтрокаТаблицыНачислений.Начисление, Истина);
						КонецЕсли;	
						
						СтрокаТаблицыНачислений.НеобходимПерерасчетФОТ = СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ;	
						
						Если СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ 
							И ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ЭтоВозвратноеСобытие
							И ЗначениеЗаполнено(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ДатаНачалаВозвратнойЗаписи)
							И ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.ДатаНачалаВозвратнойЗаписи = ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.МинимальныйПериодПерерасчетаДанных 
							И Не БылиИзмененияДанных Тогда
									
							СтрокаТаблицыНачислений.ПолучатьДанныеФОТНаНачалоВозвратнойЗаписи = Истина;
						КонецЕсли;	
					КонецЕсли;	
					
					СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьСводныхДанных = СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьСводныхДанных Или СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ;
					СтрокаТаблицыНачислений.НеобходимПерерасчетСводныхДанных = СтрокаТаблицыНачислений.НеобходимПерерасчетСводныхДанных Или СтрокаТаблицыНачислений.НеобходимПерерасчетФОТ;
					
					Если СтрокаТаблицыНачислений.НеобходимоДобавлятьЗаписьВФОТ Тогда
						ДобавляемыеНачисления.Вставить(СтрокаТаблицыНачислений.Начисление, Истина);
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;		
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ТаблицаНачислений;
КонецФункции	

Функция ИзвестныеПоказателиНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаНачисленийНаДатыИзмененияИсточниковДанных)
	ИзвестныеПоказатели = ТаблицаИзвестныеПоказатели();
	
	ПоляПоискаИзвестныхПоказателей = "Сотрудник, Период, ГоловнаяОрганизация, ДокументОснование, Показатель";
	
	ИзвестныеПоказатели.Индексы.Добавить(ПоляПоискаИзвестныхПоказателей);
	
	СтруктураПоиска = Новый Структура(ПоляПоискаИзвестныхПоказателей);
	
	ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Сбросить();
	Пока ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Следующий() Цикл
		Если ВыборкаНачисленийНаДатыИзмененияИсточниковДанных.Значение = Null Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаНачисленийНаДатыИзмененияИсточниковДанных);
		
		СтрокиИзвестныхПоказателей = ИзвестныеПоказатели.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиИзвестныхПоказателей.Количество() = 0 Тогда 
			СтрокаТаблицы = ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаНачисленийНаДатыИзмененияИсточниковДанных);
		КонецЕсли;			
	КонецЦикла;	
	
	Возврат ИзвестныеПоказатели;
КонецФункции	

Функция КадровыеДанныеНаДатыИзмененияИсточниковВторичныхДанных(ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковДанных)
	КадровыеДанные = СоздатьТаблицаКадровыхДанных();
	
	ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковДанных.Сбросить();
	Пока ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковДанных.Следующий() Цикл
		СтрокаТаблицы = КадровыеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаКадровыхДанныхНаДатыИзмененияИсточниковДанных);
	КонецЦикла;		
	
	Возврат КадровыеДанные;
КонецФункции	

Функция ДобавлятьЗаписьФОТПриИзмененииДанныхНачисления(ВыборкаИзменившихсяДанныхНачислений, ДобавляемыеНачисленияСотрудника, ЗависимостиНачислений)
	Если Не ВыборкаИзменившихсяДанныхНачислений.Используется
		И Не ВыборкаИзменившихсяДанныхНачислений.ИзменилосьПлановоеНачисление Тогда
		
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ВыборкаИзменившихсяДанныхНачислений.ВключатьВФОТ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.ИзменилсяГрафикРаботы 
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.Период = НачалоГода(ВыборкаИзменившихсяДанныхНачислений.Период)
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.ИзменилосьПлановоеНачисление Тогда	
		Возврат Истина;
	КонецЕсли;
	
	Если НачислениеЗависимоОтИзменившихсяНачислений(ВыборкаИзменившихсяДанныхНачислений.Начисление, ДобавляемыеНачисленияСотрудника, ЗависимостиНачислений) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	                                             

Функция ДобавлятьЗаписьФОТПриИзмененииДанныхПоказателяНачисления(ВыборкаИзменившихсяДанныхПоказателя, ПоказательДоляНеполногоВремени)
	Если Не ВыборкаИзменившихсяДанныхПоказателя.ВключатьВФОТ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеПоказателя 	
		Или ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеСтажевогоПоказателя Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьКоличествоСтавок
		И ВыборкаИзменившихсяДанныхПоказателя.Показатель = ПоказательДоляНеполногоВремени Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции	

Функция ДобавлятьЗаписьСводныхДанныхПриИзмененииДанныхНачисления(ВыборкаИзменившихсяДанныхНачислений)
	Если Не ВыборкаИзменившихсяДанныхНачислений.Используется
		И Не ВыборкаИзменившихсяДанныхНачислений.ИзменилосьПлановоеНачисление Тогда
		
		Возврат Ложь;
	КонецЕсли;	
				
	Если ВыборкаИзменившихсяДанныхНачислений.ИзменилосьПлановоеНачисление Тогда	
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции	                                             

Функция ДобавлятьЗаписьСводныхДанныхДанныхПоказателяНачисления(ВыборкаИзменившихсяДанныхПоказателя, ПоказательДоляНеполногоВремени)
	Если ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеПоказателя Тогда
		
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции	

Функция НеобходимПерерасчетаФОТПриИзмененииДанныхНачисления(ВыборкаИзменившихсяДанныхНачислений, ИзменившиесяНачисленияНабора, ПерерассчитываемыеНачисления, ЗависимостиНачислений)
	Если НЕ ВыборкаИзменившихсяДанныхНачислений.Используется Тогда  
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ВыборкаИзменившихсяДанныхНачислений.АвтоматическийРасчетФОТ Тогда
		Возврат ВыборкаИзменившихсяДанныхНачислений.ИзменилсяРазмерПлановогоНачисления;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.ВкладВФОТ = Null Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если НачислениеЗависимоОтИзменившихсяНачислений(ВыборкаИзменившихсяДанныхНачислений.Начисление, ПерерассчитываемыеНачисления, ЗависимостиНачислений) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если ИзменившиесяНачисленияНабора <> Неопределено 
		И ВыборкаИзменившихсяДанныхНачислений.НеобходимПерерасчетИзменившихсяНачислений 
		И НачислениеЗависимоОтИзменившихсяНачислений(ВыборкаИзменившихсяДанныхНачислений.Начисление, ИзменившиесяНачисленияНабора, ЗависимостиНачислений) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.НеобходимПерерасчетаНачисленийЗависимыхОтВремени
		И ВыборкаИзменившихсяДанныхНачислений.ИзменилсяГрафикРаботы
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхНачислений.ИзменилисьДанныеГрафика
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
		
	Если ВыборкаИзменившихсяДанныхНачислений.Период = НачалоГода(ВыборкаИзменившихсяДанныхНачислений.Период)
		И Не ВыборкаИзменившихсяДанныхНачислений.ФОТРассчитанНаДатуСобытия
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени) Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВыборкаИзменившихсяДанныхНачислений.ПериодЗаписиПлановогоФОТ)
		И Год(ВыборкаИзменившихсяДанныхНачислений.ПериодЗаписиПлановогоФОТ) <> Год(ВыборкаИзменившихсяДанныхНачислений.Период)
		И (ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетВремени Или ВыборкаИзменившихсяДанныхНачислений.ТребуетсяРасчетНормыВремени)
		И НачалоГода(ВыборкаИзменившихсяДанныхНачислений.Период) <= НачалоГода(ТекущаяДатаСеанса()) Тогда

		
		Возврат Истина;
	КонецЕсли;	
		
	Возврат Ложь;
КонецФункции	

Функция НеобходимПерерасчетаФОТПриИзмененииДанныхПоказателяНачисления(ВыборкаИзменившихсяДанныхПоказателя, ИзменившиесяПоказателиНабора, ПоказательДоляНеполногоВремени)
	Если Не ВыборкаИзменившихсяДанныхПоказателя.Используется Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если Не ВыборкаИзменившихсяДанныхПоказателя.АвтоматическийРасчетФОТ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ИзменившиесяПоказателиНабора <> Неопределено 
		И ВыборкаИзменившихсяДанныхПоказателя.НеобходимПерерасчетаНачисленийИспользующихПоказатель
		И ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеПоказателя
		И ИзменившиесяПоказателиНабора[ВыборкаИзменившихсяДанныхПоказателя.Показатель] = Истина Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ВыборкаИзменившихсяДанныхПоказателя.НеобходимПерерасчетаНачисленийЗависимыхОтКоличестваСтавок
		И ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьКоличествоСтавок 
		И ВыборкаИзменившихсяДанныхПоказателя.Показатель = ПоказательДоляНеполногоВремени Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Если ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеСтажевогоПоказателя
		И ВыборкаИзменившихсяДанныхПоказателя.ИзменилисьДанныеСтажа Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Если ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеСтажевогоПоказателя
		И Не ВыборкаИзменившихсяДанныхПоказателя.ФОТРассчитанНаДатуСобытия Тогда
		
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
КонецФункции

Функция НеобходимПерерасчетаСводныхДанныхПриИзмененииДанныхНачисления(ВыборкаИзменившихсяДанныхНачислений, ИзменившиесяНачисленияНабора)
	Если ИзменившиесяНачисленияНабора <> Неопределено 
		И ВыборкаИзменившихсяДанныхНачислений.НеобходимПерерасчетИзменившихсяНачислений 
		И ВыборкаИзменившихсяДанныхНачислений.ИзменилосьПлановоеНачисление Тогда
		
		Возврат Истина;
	КонецЕсли;	
			
	Возврат Ложь;
КонецФункции	

Функция НеобходимПерерасчетаСводныхДанныхПриИзмененииДанныхПоказателяНачисления(ВыборкаИзменившихсяДанныхПоказателя, ИзменившиесяПоказателиНабора)
	Если ИзменившиесяПоказателиНабора <> Неопределено 
		И ВыборкаИзменившихсяДанныхПоказателя.НеобходимПерерасчетаНачисленийИспользующихПоказатель
		И ВыборкаИзменившихсяДанныхПоказателя.ИзменилосьЗначениеПоказателя
		И ИзменившиесяПоказателиНабора[ВыборкаИзменившихсяДанныхПоказателя.Показатель] = Истина Тогда
		
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции

Функция НачислениеЗависимоОтИзменившихсяНачислений(Начисление, ИзменившиесяНачисления, ЗависимостиНачислений)
	Для Каждого ОбрабатываемоеНачисление Из ИзменившиесяНачисления Цикл
		Если Начисление = ОбрабатываемоеНачисление.Ключ Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ЗависимостиНачислений[ОбрабатываемоеНачисление.Ключ] <> Неопределено
			И ЗависимостиНачислений[ОбрабатываемоеНачисление.Ключ][Начисление] = Истина Тогда
			
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Функция ДоляНеполногоВремени(ДанныеГрафика, КадровыеДанные) Экспорт
	Если КадровыеДанные = Неопределено
		Или Не ЗначениеЗаполнено(КадровыеДанные.КоличествоСтавок) Тогда
		
		КоличествоСтавок = 1;
	Иначе
		КоличествоСтавок = КадровыеДанные.КоличествоСтавок;
	КонецЕсли;	
	
	ДоляНеполногоВремени = 1;
	
	Если ДанныеГрафика <> Неопределено
		И  ЗначениеЗаполнено(ДанныеГрафика.ГрафикРаботы)
		И  ЗначениеЗаполнено(ДанныеГрафика.ГрафикПолногоРабочегоВремени)
		И  ДанныеГрафика.ГрафикРаботы <> ДанныеГрафика.ГрафикПолногоРабочегоВремени
		И  ДанныеГрафика.ДлительностьРабочейНедели <> 0
		И  ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени <> 0
		И  ДанныеГрафика.ДлительностьРабочейНедели <> ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени Тогда
		
		ДоляНеполногоВремени = ДанныеГрафика.ДлительностьРабочейНедели / ДанныеГрафика.ДлительностьРабочейНеделиГрафикаПолногоВремени;
	Иначе 
		ДоляНеполногоВремени = КоличествоСтавок;
	КонецЕсли;	
	
	Возврат ДоляНеполногоВремени;
КонецФункции	

Функция ИзменившиесяПоказателиПоСотрудникам(ИзменившиесяДанныеНабораЗначенияПоказателей)
	ИзменившиесяПоказатели = Новый Соответствие;
	
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеНабораЗначенияПоказателей Цикл
		ИзменившиесяПоказателиСотрудника = ИзменившиесяПоказатели.Получить(СтрокаИзменений.Сотрудник);	
		
		Если ИзменившиесяПоказателиСотрудника = Неопределено Тогда
			ИзменившиесяПоказателиСотрудника = Новый Соответствие;
			ИзменившиесяПоказатели.Вставить(СтрокаИзменений.Сотрудник, ИзменившиесяПоказателиСотрудника);
		КонецЕсли;
		
		ИзменившиесяПоказателиСотрудника.Вставить(СтрокаИзменений.Показатель, Истина);
			
	КонецЦикла;	
	
	Возврат ИзменившиесяПоказатели;
	
КонецФункции

Функция ИзменившиесяНачисленияПоСотрудникам(ИзменившиесяДанныеНабораПлановыеНачисления)
	ИзменившиесяНачисления = Новый Соответствие;
		
	Для Каждого СтрокаИзменений Из ИзменившиесяДанныеНабораПлановыеНачисления Цикл
		ИзменившиесяНачисленияСотрудника = ИзменившиесяНачисления.Получить(СтрокаИзменений.Сотрудник);	
		
		Если ИзменившиесяНачисленияСотрудника = Неопределено Тогда
			ИзменившиесяНачисленияСотрудника = Новый Соответствие;
			ИзменившиесяНачисления.Вставить(СтрокаИзменений.Сотрудник, ИзменившиесяНачисленияСотрудника);
		КонецЕсли;
		
		ИзменившиесяНачисленияСотрудника.Вставить(СтрокаИзменений.Начисление, Истина);
			
	КонецЦикла;	
	
	Возврат ИзменившиесяНачисления;
	
КонецФункции

Функция ТекущиеДанныеФОТ(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыПолученияДвижений.Сотрудник,
	|	МИНИМУМ(ПериодыПолученияДвижений.ДатаНачала) КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ПлановыйФОТ.Год, НАЧАЛОПЕРИОДА(ПериодыПолученияДвижений.ДатаНачала, ГОД))) КАК Год
	|ПОМЕСТИТЬ ВТПериодыПолученияПлановогоФОТ
	|ИЗ
	|	ВТПериодыОбновленияВторичныхДанных КАК ПериодыПолученияДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ
	|		ПО ПериодыПолученияДвижений.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПериодыПолученияДвижений.ДатаНачала >= ПлановыйФОТ.Период
	|			И (ВЫБОР
	|				КОГДА ПериодыПолученияДвижений.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыПолученияДвижений.ДатаНачала, СЕКУНДА, -1) <= ПлановыйФОТ.ДатаОкончания
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПолученияДвижений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыйФОТ.Период,
	|	ПериодыПолученияДвижений.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ДатаОкончания > ПериодыПолученияДвижений.ДатаНачала
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ПлановыйФОТ.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	ПлановыйФОТ.Начисление,
	|	ПлановыйФОТ.ФизическоеЛицо,
	|	ПлановыйФОТ.ДокументОснование,
	|	ПлановыйФОТ.ГоловнаяОрганизация,
	|	ПлановыйФОТ.Год,
	|	ПлановыйФОТ.ВкладВФОТ,
	|	ПлановыйФОТ.ПересчетНеТребуется,
	|	ПлановыйФОТ.ВторичнаяЗапись,
	|	ПлановыйФОТ.РегистраторСобытия КАК РегистраторСобытия,
	|	ПлановыйФОТ.ПериодПредыдущейЗаписи,
	|	ПлановыйФОТ.Используется,
	|	ВЫБОР
	|		КОГДА НЕ ПлановыйФОТ.Период ЕСТЬ NULL
	|				И ПериодыПолученияДвижений.ДатаНачала > ПлановыйФОТ.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АктуальнаяЗапись
	|ИЗ
	|	ВТПериодыПолученияПлановогоФОТ КАК ПериодыПолученияДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ
	|		ПО ПериодыПолученияДвижений.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПериодыПолученияДвижений.Год <= ПлановыйФОТ.Год";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекущиеСводныеДанные(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыПолученияДвижений.Сотрудник,
	|	МИНИМУМ(ПериодыПолученияДвижений.ДатаНачала) КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(ПлановыйФОТИтоги.Год, НАЧАЛОПЕРИОДА(ПериодыПолученияДвижений.ДатаНачала, ГОД))) КАК Год
	|ПОМЕСТИТЬ ВТПериодыПолученияСводныхДанных
	|ИЗ
	|	ВТПериодыОбновленияВторичныхДанных КАК ПериодыПолученияДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТИтоги КАК ПлановыйФОТИтоги
	|		ПО ПериодыПолученияДвижений.Сотрудник = ПлановыйФОТИтоги.Сотрудник
	|			И ПериодыПолученияДвижений.ДатаНачала >= ПлановыйФОТИтоги.Период
	|			И (ВЫБОР
	|				КОГДА ПериодыПолученияДвижений.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыПолученияДвижений.ДатаНачала, СЕКУНДА, -1) <= ПлановыйФОТИтоги.ДатаОкончания
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПолученияДвижений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыйФОТИтоги.Период,
	|	ПлановыйФОТИтоги.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТИтоги.ДатаОкончания > ПериодыПолученияДвижений.ДатаНачала
	|			ТОГДА &МаксимальнаяДата
	|		ИНАЧЕ ПлановыйФОТИтоги.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	ПлановыйФОТИтоги.Год,
	|	ПлановыйФОТИтоги.ГоловнаяОрганизация,
	|	ПлановыйФОТИтоги.ОсновноеНачисление,
	|	ПлановыйФОТИтоги.ВидТарифнойСтавки,
	|	ПлановыйФОТИтоги.ТарифнаяСтавка,
	|	ПлановыйФОТИтоги.СовокупнаяТарифнаяСтавка,
	|	ПлановыйФОТИтоги.ФОТ,
	|	ПлановыйФОТИтоги.Надбавка,
	|	ПлановыйФОТИтоги.Используется,
	|	ПлановыйФОТИтоги.ПоказательТарифнойСтавки,
	|	ПлановыйФОТИтоги.РегистраторСобытия,
	|	ПлановыйФОТИтоги.ПериодПредыдущейЗаписи,
	|	ПлановыйФОТИтоги.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА НЕ ПлановыйФОТИтоги.Период ЕСТЬ NULL
	|				И ПериодыПолученияДвижений.ДатаНачала > ПлановыйФОТИтоги.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АктуальнаяЗапись
	|ИЗ
	|	ВТПериодыПолученияСводныхДанных КАК ПериодыПолученияДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТИтоги КАК ПлановыйФОТИтоги
	|		ПО ПериодыПолученияДвижений.Сотрудник = ПлановыйФОТИтоги.Сотрудник
	|			И ПериодыПолученияДвижений.Год <= ПлановыйФОТИтоги.Год";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции		

Функция ЗапросВыбораИзмененийНабора(ИмяРегистра, КонтролируемыеПоляРегистра)
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеИзменений.Сотрудник КАК Сотрудник,
	|	ДанныеИзменений.Период КАК Период,
	|	ДанныеИзменений.ДействуетДо КАК ДействуетДо,
	|	ЛОЖЬ КАК ИзменениеКоличестваСтавок,
	|	ЛОЖЬ КАК ИзменениеГрафика,
	|	ЛОЖЬ КАК ИзменениеЗначенийПоказателей,
	|	ЛОЖЬ КАК ИзменениеНачислений,
	|	ДанныеИзменений.Удаление
	|ИЗ
	|	ВТИзмененияВНаборе КАК ДанныеИзменений
	|ГДЕ
	|	(ДанныеИзменений.Добавление
	|			ИЛИ ДанныеИзменений.Удаление
	|			ИЛИ &УсловиеИзменениеРесурсов)
	|	И &ДопУсловие";
	
	ИмяТаблицыИзмененийВНаборе = ИмяТаблицыИзмененийВНаборе(ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИзмененияВНаборе", ИмяТаблицыИзмененийВНаборе);
	
	ЧастиУсловияИзменившиесяРесурсы = Новый Массив;
	
	Для Каждого ИмяРесурса Из КонтролируемыеПоляРегистра Цикл
		ЧастиУсловияИзменившиесяРесурсы.Добавить("ДанныеИзменений.ИзменилсяРесурс" + ИмяРесурса)		
	КонецЦикла;	
	
	ТекстУсловияИзменениеРесурсов = СтрСоединить(ЧастиУсловияИзменившиесяРесурсы, " ИЛИ ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеИзменениеРесурсов", ТекстУсловияИзменениеРесурсов);
	
	ТекстДопУсловия = "ИСТИНА";
	Если ИмяРегистра = Метаданные.РегистрыСведений.ПлановыеНачисления.Имя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ИзменениеНачислений", "ИСТИНА КАК ИзменениеНачислений");
		
		ТекстДопУсловия = "ДанныеИзменений.Начисление.СпособВыполненияНачисления В (&СпособыВыполненияПлановыхНачислений)
						  |И НЕ ДанныеИзменений.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий)";
						  
		Запрос.УстановитьПараметр("СпособыВыполненияПлановыхНачислений", СпособыВыполненияПлановыхНачислений());
		Запрос.УстановитьПараметр("КатегорииПособий", УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком());	
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ИзменениеЗначенийПоказателей", "ИСТИНА КАК ИзменениеЗначенийПоказателей");
		
		ТекстДопУсловия = "ДанныеИзменений.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ИзменениеГрафика", "ИСТИНА КАК ИзменениеГрафика");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ КАК ИзменениеКоличестваСтавок", "ИСТИНА КАК ИзменениеКоличестваСтавок");
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", ТекстДопУсловия);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
КонецФункции	

Функция ИмяТаблицыИзмененийВНаборе(ИмяРегистра)
	Возврат "ВТ" + ИмяРегистра + "Изменения";	
КонецФункции	

Функция КонтролируемыеРесурсыПоРегистрамИсточникамВторичныхДанных()
	 КонтролируемыеРесурсы = Новый Соответствие;
	 
	 МетаданныеПлановыеНачисления = Метаданные.РегистрыСведений.ПлановыеНачисления;
	 
	 КонтролируемыеРесурсыПлановыхНачислений = Новый Массив;
	 КонтролируемыеРесурсы.Вставить(МетаданныеПлановыеНачисления.Имя, КонтролируемыеРесурсыПлановыхНачислений);
	 КонтролируемыеРесурсыПлановыхНачислений.Добавить(МетаданныеПлановыеНачисления.Ресурсы.Используется.Имя);
	 КонтролируемыеРесурсыПлановыхНачислений.Добавить(МетаданныеПлановыеНачисления.Ресурсы.Размер.Имя);
	 
	 МетаданныеЗначенияПоказателей = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников;
	 
	 КонтролируемыеРесурсыЗначенийПоказателей = Новый Массив;
	 КонтролируемыеРесурсы.Вставить(МетаданныеЗначенияПоказателей.Имя, КонтролируемыеРесурсыЗначенийПоказателей);
	 КонтролируемыеРесурсыЗначенийПоказателей.Добавить(МетаданныеЗначенияПоказателей.Ресурсы.Значение.Имя);
	 
	 МетаданныеКадроваяИстория = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников;
	 
	 КонтролируемыеРесурсыКадровойИстории = Новый Массив;
	 КонтролируемыеРесурсы.Вставить(МетаданныеКадроваяИстория.Имя, КонтролируемыеРесурсыКадровойИстории);
	 КонтролируемыеРесурсыКадровойИстории.Добавить(МетаданныеКадроваяИстория.Ресурсы.КоличествоСтавок.Имя);
	 
	 МетаданныеГрафикиСотрудников = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников;
	 
	 КонтролируемыеРесурсыГрафиков = Новый Массив;
	 КонтролируемыеРесурсы.Вставить(МетаданныеГрафикиСотрудников.Имя, КонтролируемыеРесурсыГрафиков);
	 КонтролируемыеРесурсыГрафиков.Добавить(МетаданныеГрафикиСотрудников.Ресурсы.ГрафикРаботы.Имя);

	Возврат КонтролируемыеРесурсы;	 
КонецФункции

Процедура СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (ПериодыИзмененияСтажа.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Северный))
		|ГДЕ
		|	ВЫРАЗИТЬ(ОтборНачислений.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
		
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	ИмяВТПроцентСевернойНадбавкиСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПроцентСевернойНадбавкиСотрудников");
	РасчетЗарплатыРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных, ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("ПоказательСевернаяНадбавка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	МАКСИМУМ(ПроцентСевернойНадбавкиПредыдущий.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.Период > ПроцентСевернойНадбавкиПредыдущий.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиПредыдущий.ПроцентСевернойНадбавки КАК ЗначениеПоказателяПредыдущее
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.ПериодПредыдущий = ПроцентСевернойНадбавкиПредыдущий.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	&НачислениеСевернаяНадбавка КАК Начисление,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	&ПоказательСевернаяНадбавка КАК Показатель,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя / ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя1,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее КАК ЗначениеПоказателяПредыдущее
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими КАК ПроцентСевернойНадбавкиСотрудников
		|ГДЕ
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя <> ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПроцентСевернойНадбавкиСотрудников", ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Запрос.Выполнить();
		
КонецПроцедуры

Функция ЗависимостиНачислений(КоллекцияНачислений)
	ЗависимостиНачислений = Новый Соответствие;
		
	МассивНачислений = Новый Массив;
	
	Для Каждого КлючЗначение Из КоллекцияНачислений Цикл
		МассивНачислений.Добавить(КлючЗначение.Ключ);	
	КонецЦикла;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", МассивНачислений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияВедущиеВидыРасчета.Ссылка КАК ЗависимоеНачисление,
	|	НачисленияВедущиеВидыРасчета.ВидРасчета КАК ВедущееНачисление
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК НачисленияВедущиеВидыРасчета
	|ГДЕ
	|	НачисленияВедущиеВидыРасчета.Ссылка В(&Начисления)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗависимыеНачисления = ЗависимостиНачислений[Выборка.ВедущееНачисление];
		Если ЗависимыеНачисления = Неопределено Тогда 
			ЗависимыеНачисления = Новый Соответствие;
			ЗависимостиНачислений.Вставить(Выборка.ВедущееНачисление, ЗависимыеНачисления);
		КонецЕсли;	
		
		ЗависимыеНачисления.Вставить(Выборка.ЗависимоеНачисление, Истина);
		
	КонецЦикла;	
		
	Возврат ЗависимостиНачислений;
КонецФункции

Процедура ЗаполнитьКадровыеДанныеНаПериодыРасчета(ПериодыРасчетаПоСотрудникам, КадровыеДанные)
	КадровыеДанные.Индексы.Добавить("Сотрудник, Период");	
	
	ТаблицаОтбора = ПериодыНезаполненныхКадровыхДанных(ПериодыРасчетаПоСотрудникам, КадровыеДанные);
	
	Если ТаблицаОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
		
	ПолучаемыеПоля = Новый Массив;
		                              
	Если ТаблицаОтбора.НайтиСтроки(Новый Структура("ПолучатьГрафикРаботы", Истина)).Количество() > 0 Тогда
		ПолучаемыеПоля.Добавить("ГрафикРаботы");
	КонецЕсли;	

	Если ТаблицаОтбора.НайтиСтроки(Новый Структура("ПолучатьДанныеКадровойИстории", Истина)).Количество()  > 0 Тогда
		ПолучаемыеПоля.Добавить("Организация");
		ПолучаемыеПоля.Добавить("Подразделение");
		ПолучаемыеПоля.Добавить("КоличествоСтавок");
	КонецЕсли;	
			
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаОтбора, "ВТТаблицаОтбора");
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТТаблицаОтбора");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, ПолучаемыеПоля);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.*
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыКадровыхДанных = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанные, Выборка.Сотрудник, Выборка.Период);
		
		Если СтрокаТаблицыКадровыхДанных = Неопределено Тогда
			СтрокаТаблицыКадровыхДанных = КадровыеДанные.Добавить();
			СтрокаТаблицыКадровыхДанных.Сотрудник = Выборка.Сотрудник;
			СтрокаТаблицыКадровыхДанных.Период = Выборка.Период;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыКадровыхДанных.ГрафикРаботы) Тогда
			СтрокаТаблицыКадровыхДанных.ГрафикРаботы = Выборка.ГрафикРаботы;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыКадровыхДанных.Подразделение) Тогда
			СтрокаТаблицыКадровыхДанных.Подразделение = Выборка.Подразделение;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыКадровыхДанных.Организация) Тогда
			СтрокаТаблицыКадровыхДанных.Организация = Выборка.Организация;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыКадровыхДанных.КоличествоСтавок) Тогда
			СтрокаТаблицыКадровыхДанных.КоличествоСтавок = Выборка.КоличествоСтавок;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПериодыНезаполненныхКадровыхДанных(ПериодыРасчетаПоСотрудникам, ИзвестныеКадровыеДанные)
	ИзвестныеКадровыеДанные.Индексы.Добавить("Сотрудник, Период");	
	
	ПериодыНезаполненныхКадровыхДанных = Новый ТаблицаЗначений;
	ПериодыНезаполненныхКадровыхДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПериодыНезаполненныхКадровыхДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ПериодыНезаполненныхКадровыхДанных.Колонки.Добавить("ПолучатьГрафикРаботы", Новый ОписаниеТипов("Булево")); 
	ПериодыНезаполненныхКадровыхДанных.Колонки.Добавить("ПолучатьДанныеКадровойИстории", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ПериодРасчета Из ПериодыРасчетаПоСотрудникам Цикл
		ПолучатьКадровыеДанныеПоСотруднику = Ложь;
		ПолучатьГрафикРаботы = Ложь;
		ПолучатьДанныеКадровойИстории = Ложь;
			
		СтрокаИзвестныхДанных = КадровыеДанныеСотрудникаИзТаблицы(ИзвестныеКадровыеДанные, ПериодРасчета.Сотрудник,  ПериодРасчета.Период);
		
		Если СтрокаИзвестныхДанных = Неопределено Тогда
			ПолучатьГрафикРаботы = Истина;
			ПолучатьДанныеКадровойИстории = Истина;
			ПолучатьКадровыеДанныеПоСотруднику = Истина;
		Иначе 	
			
			Если Не ЗначениеЗаполнено(СтрокаИзвестныхДанных.Подразделение)
				Или Не ЗначениеЗаполнено(СтрокаИзвестныхДанных.Организация)
				Или Не ЗначениеЗаполнено(СтрокаИзвестныхДанных.КоличествоСтавок) Тогда
				
				ПолучатьКадровыеДанныеПоСотруднику = Истина;
				ПолучатьДанныеКадровойИстории = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаИзвестныхДанных.ГрафикРаботы) Тогда
				ПолучатьКадровыеДанныеПоСотруднику = Истина;
				ПолучатьГрафикРаботы = Истина;
			КонецЕсли;
		КонецЕсли;	
		
		Если ПолучатьКадровыеДанныеПоСотруднику Тогда
			СтрокаТаблицыОтбора = ПериодыНезаполненныхКадровыхДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОтбора, ПериодРасчета);
			СтрокаТаблицыОтбора.ПолучатьГрафикРаботы = ПолучатьГрафикРаботы;
			СтрокаТаблицыОтбора.ПолучатьДанныеКадровойИстории = ПолучатьДанныеКадровойИстории;

		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ПериодыНезаполненныхКадровыхДанных;
КонецФункции	

#КонецОбласти

#Область ЗаполнениеЗначенийПоказателейДляРасчетаВторичныхДанных 	

Процедура ЗаполнитьПоказателейНачисленийСотрудников(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	ЗаполнитьПериодическиеПоказателиСотрудников(ПоказателиСотрудников, СвойстваПоказателей, ИзвестныеПоказатели, ИсключаемыеРегистраторы);	
	ЗаполнитьПериодическиеПоказателиОрганизаций(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели, ИсключаемыеРегистраторы);
	ЗаполнитьПериодическиеПоказателиПодразделений(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели, ИсключаемыеРегистраторы);
	ЗаполнитьСтажевыеПоказателиСотрудников(ПоказателиСотрудников, СвойстваПоказателей, ИзвестныеПоказатели);
	ЗаполнитьПоказателиСевернаяНадбавкаСотрудников(ПоказателиСотрудников, СвойстваПоказателей, ИзвестныеПоказатели);
	ЗаполнитьПоказателиРайонныйКоэффициентСотрудников(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели);
	ЗаполнитьПоказателиУчетаВремениСотрудников(ПоказателиСотрудников, СвойстваПоказателей, ДанныеГрафиковСотрудников, ИзвестныеПоказатели);
	ЗаполнитьПоказателяДоляНеполногоВремениСотрудников(ПоказателиСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели);	
КонецПроцедуры

Процедура ЗаполнитьПериодическиеПоказателиСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, ИзвестныеПоказатели = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, ГоловнаяОрганизация, Показатель, ДокументОснование, Период");
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, ГоловнаяОрганизация, Показатель, Период");
	КонецЕсли;	
	
	ТаблицаОтбораПериодическихПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоискаБезДокументаОснования = Новый Структура("Сотрудник, ГоловнаяОрганизация, Показатель, Период");	
	СтруктураПоискаПоДокументуОснованию = Новый Структура("Сотрудник, ГоловнаяОрганизация, Показатель, ДокументОснование, Период");
	
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл
		Если ЭтоПериодическийПоказательСотрудника(СвойстваПоказателей[СтрокаПоказателя.Показатель]) Тогда 						
			
			Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда	
				СтруктураПоиска = СтруктураПоискаПоДокументуОснованию;
			Иначе
				СтруктураПоиска = СтруктураПоискаБезДокументаОснования;	
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
			
			Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
			Если Значение = Неопределено Тогда
				СтрокаОтбораПериодическихПоказателей = ТаблицаОтбораПериодическихПоказателейСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтбораПериодическихПоказателей, СтруктураПоиска);
			Иначе 
				СтрокаПоказателя.Значение = Значение;
				СтрокаПоказателя.ЗначениеЗаполнено = Истина;
			КонецЕсли;	
				
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаОтбораПериодическихПоказателейСотрудников.Количество() > 0 Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтбораПериодическихПоказателейСотрудников, "Сотрудник, Показатель, Период");	
		
		Если ИсключаемыеРегистраторы <> Неопределено Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОписаниеФильтра.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
		КонецЕсли;	
			
		ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(
			Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя,
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ПериодЗаписи УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаБезДокументаОснования, Выборка);
			НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоискаБезДокументаОснования);
			
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(СтрокаПоказателя.Значение) Тогда
					Продолжить;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(СтрокаПоказателя.ЗапрашиватьПриВводе) Тогда
					Если Выборка.ДокументОснование = СтрокаПоказателя.ДокументОснование Тогда
						СтрокаПоказателя.Значение = Выборка.Значение;
						СтрокаПоказателя.ЗначениеЗаполнено = Истина;
					КонецЕсли;	
				Иначе
		        	СтрокаПоказателя.Значение = Выборка.Значение;
					СтрокаПоказателя.ЗначениеЗаполнено = Истина;
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПериодическийПоказательСотрудника(СвойстваПоказателя)
	Если СвойстваПоказателя.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно 
		И СвойстваПоказателя.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника 
		И СвойстваПоказателя.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Процедура ЗаполнитьПериодическиеПоказателиОрганизаций(ПоказателиНачисленийСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	
	
	КадровыеДанныеСотрудников.Индексы.Добавить("Организация, Период");
	
	ТаблицаОтбораПериодическихПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");		
	
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл
		Если ЭтоПериодическийПоказательОрганизации(СвойстваПоказателей[СтрокаПоказателя.Показатель]) Тогда	
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
			Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
			Если Значение = Неопределено Тогда
				КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
			
				Если КадровыеДанныеСотрудника <> Неопределено Тогда
					СтрокаТаблицыОтбора = ТаблицаОтбораПериодическихПоказателейСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыОтбора, СтрокаПоказателя);
					СтрокаТаблицыОтбора.Организация = КадровыеДанныеСотрудника.Организация;
				КонецЕсли;	
			Иначе 
				СтрокаПоказателя.Значение = Значение;
				СтрокаПоказателя.ЗначениеЗаполнено = Истина;
			КонецЕсли;	
						
		КонецЕсли;		
	КонецЦикла;	
	
	ТаблицаОтбораПериодическихПоказателейСотрудников.Свернуть("Организация, Период, Показатель");
	
	Если ТаблицаОтбораПериодическихПоказателейСотрудников.Количество() > 0 Тогда 
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПоказателиНачисленийСотрудников, "Сотрудник, Показатель, Период");
		
		СтруктураПоискаСотрудников = Новый Структура("Организация, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтбораПериодическихПоказателейСотрудников, "Организация, Период");	
		
		Если ИсключаемыеРегистраторы <> Неопределено Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОписаниеФильтра.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
		КонецЕсли;	
		
		ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(
			Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций.Имя,
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних.Период,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних.Организация,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних.Значение
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСотрудников, Выборка);
			
			СтрокиСотрудниковОрганизации = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураПоискаСотрудников);
			
			Для Каждого СтрокаПоСотруднику Из СтрокиСотрудниковОрганизации Цикл	
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				СтруктураПоиска.Сотрудник = СтрокаПоСотруднику.Сотрудник;
				НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
					СтрокаПоказателя.Значение = Выборка.Значение;
					СтрокаПоказателя.ЗначениеЗаполнено = Истина;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;		
		
	КонецЕсли;	
КонецПроцедуры

Функция ЭтоПериодическийПоказательОрганизации(СвойстваПоказателя)
	Если СвойстваПоказателя.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно 
		И СвойстваПоказателя.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации 
		И СвойстваПоказателя.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьПериодическиеПоказателиПодразделений(ПоказателиНачисленийСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели = Неопределено, ИсключаемыеРегистраторы = Неопределено)
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	
	
	КадровыеДанныеСотрудников.Индексы.Добавить("Подразделение, Период");
	
	ТаблицаОтбораПериодическихПоказателейСотрудников = Новый ТаблицаЗначений;
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаОтбораПериодическихПоказателейСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");	         
	
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл
		Если ЭтоПериодическийПоказательПодразделения(СвойстваПоказателей[СтрокаПоказателя.Показатель]) Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);				
			Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
			Если Значение = Неопределено Тогда
				КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
				Если КадровыеДанныеСотрудника <> Неопределено Тогда
					СтрокаТаблицыОтбора = ТаблицаОтбораПериодическихПоказателейСотрудников.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыОтбора, СтрокаПоказателя);
					СтрокаТаблицыОтбора.Подразделение = КадровыеДанныеСотрудника.Подразделение;
				КонецЕсли;	
			Иначе 
				СтрокаПоказателя.Значение = Значение;
				СтрокаПоказателя.ЗначениеЗаполнено = Истина;
			КонецЕсли;					
		КонецЕсли;		
	КонецЦикла;	
	
	ТаблицаОтбораПериодическихПоказателейСотрудников.Свернуть("Подразделение, Период, Показатель");
	
	Если ТаблицаОтбораПериодическихПоказателейСотрудников.Количество() > 0 Тогда 
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ПоказателиНачисленийСотрудников, "Сотрудник, Показатель, Период");
		
		СтруктураПоискаСотрудников = Новый Структура("Подразделение, Период");
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаОтбораПериодическихПоказателейСотрудников, "Подразделение, Период");	
		
		Если ИсключаемыеРегистраторы <> Неопределено Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ОписаниеФильтра.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
		КонецЕсли;	
		
		ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПоследних(
			Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений.Имя,
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Период,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Подразделение,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних.Значение
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСотрудников, Выборка);
			
			СтрокиСотрудниковОрганизации = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураПоискаСотрудников);	
			Для Каждого СтрокаПоСотруднику Из СтрокиСотрудниковОрганизации Цикл	
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				СтруктураПоиска.Сотрудник = СтрокаПоСотруднику.Сотрудник;
				НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
					СтрокаПоказателя.Значение = Выборка.Значение;	
					СтрокаПоказателя.ЗначениеЗаполнено = Истина;
				КонецЦикла;
			КонецЦикла;	

		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

Функция ЭтоПериодическийПоказательПодразделения(СвойстваПоказателя)
	Если СвойстваПоказателя.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно 
		И СвойстваПоказателя.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения 
		И СвойстваПоказателя.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции

Процедура ЗаполнитьСтажевыеПоказателиСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, ИзвестныеПоказатели = Неопределено)
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	

	
	ТаблицаОтбораПоказателейСтажа = Новый ТаблицаЗначений;	
	ТаблицаОтбораПоказателейСтажа.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбораПоказателейСтажа.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаОтбораПоказателейСтажа.Колонки.Добавить("ВидСтажа", Новый ОписаниеТипов("СправочникСсылка.ВидыСтажа"));
	ТаблицаОтбораПоказателейСтажа.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл				
		Если Не ЭтоПоказательСтажа(СвойстваПоказателей[СтрокаПоказателя.Показатель]) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
		Если Значение = Неопределено Тогда
			СтрокаОтбораСтажевыхПоказателей = ТаблицаОтбораПоказателейСтажа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтбораСтажевыхПоказателей, СтрокаПоказателя);
			СтрокаОтбораСтажевыхПоказателей.ДатаНачала = СтрокаПоказателя.Период;
			СтрокаОтбораСтажевыхПоказателей.ВидСтажа = СвойстваПоказателей[СтрокаОтбораСтажевыхПоказателей.Показатель].ВидСтажа;	
		Иначе 
			СтрокаПоказателя.Значение = Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаОтбораПоказателейСтажа.Количество() > 0 Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РасчетЗарплатыРасширенный.СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(МенеджерВременныхТаблиц, ТаблицаОтбораПоказателейСтажа);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Сотрудник,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДатаНачала КАК Период,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Показатель,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ЗначениеПоказателя КАК Значение
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейТипаЧислоЗависящееОтСтажа";
		
		Выборка = Запрос.Выполнить().Выбрать();
				
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
				СтрокаПоказателя.Значение = Выборка.Значение;	
				СтрокаПоказателя.ЗначениеЗаполнено = Истина;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры	

Функция ЭтоПоказательСтажа(СвойстваПоказателя)
	Возврат СвойстваПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа;	
КонецФункции	

Процедура ЗаполнитьПоказателиСевернаяНадбавкаСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, ИзвестныеПоказатели = Неопределено)
	ПоказательСевернаяНадбавка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	
	
	ТаблицаОтбораПоказателей = Новый ТаблицаЗначений;	
	ТаблицаОтбораПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбораПоказателей.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл				
		Если Не ЭтоПоказательСевернойНадбавки(СтрокаПоказателя.Показатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
		Если Значение = Неопределено Тогда
			СтрокаОтбораПоказателей = ТаблицаОтбораПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтбораПоказателей, СтрокаПоказателя);
			СтрокаОтбораПоказателей.ДатаНачала = СтрокаПоказателя.Период;	
		Иначе 
			СтрокаПоказателя.Значение = Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаОтбораПоказателей.Количество() > 0 Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РасчетЗарплатыРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(МенеджерВременныхТаблиц, ТаблицаОтбораПоказателей);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК Значение
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников";
	
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураПоиска.Показатель = ПоказательСевернаяНадбавка;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
				СтрокаПоказателя.Значение = Выборка.Значение;	
				СтрокаПоказателя.ЗначениеЗаполнено = Истина;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры	

Функция ЭтоПоказательСевернойНадбавки(Показатель)
	ПоказательСевернаяНадбавка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	Если ПоказательСевернаяНадбавка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Показатель = ПоказательСевернаяНадбавка;
	КонецЕсли;		
КонецФункции	

Процедура ЗаполнитьПоказателиРайонныйКоэффициентСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ИзвестныеПоказатели = Неопределено)
	ПоказательРайонныйКоэффициент = ПоказательРайонныйКоэффициент = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	
	
	ТаблицаОтбораПоказателей = Новый ТаблицаЗначений;	
	ТаблицаОтбораПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбораПоказателей.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл				
		Если Не ЭтоПоказательРайонныйКоэффициент(СтрокаПоказателя.Показатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
		Если Значение = Неопределено Тогда
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				СтрокаОтбораПоказателей = ТаблицаОтбораПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтбораПоказателей, СтрокаПоказателя);
				СтрокаОтбораПоказателей.Подразделение = КадровыеДанныеСотрудника.Подразделение;
			КонецЕсли;	
		Иначе 
			СтрокаПоказателя.Значение = Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если ТаблицаОтбораПоказателей.Количество() > 0 Тогда
		УникальныеПодразделения = ТаблицаОтбораПоказателей.Скопировать();
		УникальныеПодразделения.Свернуть("Подразделение");
		Подразделения = УникальныеПодразделения.ВыгрузитьКолонку("Подразделение");
		
		РайонныеКоэффициенты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подразделения, "РайонныйКоэффициент");
		
		СтруктураПоиска = Новый Структура("Сотрудник, Показатель");
		
		Для Каждого СтрокаТаблицыОтбора Из ТаблицаОтбораПоказателей Цикл
			СтруктураПоиска.Сотрудник = СтрокаТаблицыОтбора.Сотрудник;
			СтруктураПоиска.Показатель = ПоказательРайонныйКоэффициент;
			
			НайденныеСтроки = ПоказателиНачисленийСотрудников.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоказателя Из НайденныеСтроки Цикл
				СвойстваПодразделения = РайонныеКоэффициенты[СтрокаТаблицыОтбора.Подразделение];	
				
				Если СвойстваПодразделения <> Неопределено Тогда
					СтрокаПоказателя.Значение = СвойстваПодразделения.РайонныйКоэффициент;	
					СтрокаПоказателя.ЗначениеЗаполнено = Истина;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;		
КонецПроцедуры	

Функция ЭтоПоказательРайонныйКоэффициент(Показатель)
	ПоказательРайонныйКоэффициент = ПоказательРайонныйКоэффициент = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	Если ПоказательРайонныйКоэффициент = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Показатель = ПоказательРайонныйКоэффициент;
	КонецЕсли;		
КонецФункции	

Процедура ЗаполнитьПоказателиУчетаВремениСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, ДанныеГрафиковСотрудников, ИзвестныеПоказатели = Неопределено)
	ПоказателиУчетаВремени = ПоказателиУчетаВремени();                                                          
	
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеПоказатели.Индексы.Добавить("Сотрудник, Показатель, Период");
	КонецЕсли;	
		
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл				
		Если Не ЭтоПоказательУчетаВремени(СтрокаПоказателя.Показатель, ПоказателиУчетаВремени) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
		Если Значение = Неопределено Тогда
			ДанныеГрафикаСотрудника = ДанныеГрафикаСотрудникаИзТаблицы(ДанныеГрафиковСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
			
			СтрокаПоказателя.Значение = ЗначениеПоказателяУчетаВремениПоДаннымГрафика(СтрокаПоказателя.Показатель, ДанныеГрафикаСотрудника, СтрокаПоказателя.Период, ПоказателиУчетаВремени);
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		Иначе 
			СтрокаПоказателя.Значение = Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	

Функция ЭтоПоказательУчетаВремени(Показатель, ПоказателиУчетаВремени)
	Если ПоказателиУчетаВремени[Показатель] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

Процедура ЗаполнитьПоказателяДоляНеполногоВремениСотрудников(ПоказателиНачисленийСотрудников, СвойстваПоказателей, КадровыеДанныеСотрудников, ДанныеГрафиковСотрудников, ИзвестныеПоказатели = Неопределено)
	ПоказательДоляНеполногоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");
	
	Если ПоказательДоляНеполногоВремени = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Сотрудник, Показатель, Период");
	Для Каждого СтрокаПоказателя Из ПоказателиНачисленийСотрудников Цикл				
		Если Не ЭтоПоказательДоляНеполногоВремени(СтрокаПоказателя.Показатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоказателя);
		Значение = ЗначениеПоказателяИзТаблицы(ИзвестныеПоказатели, СтруктураПоиска);
		Если Значение = Неопределено Тогда
			ДанныеГрафикаСотрудника = ДанныеГрафикаСотрудникаИзТаблицы(ДанныеГрафиковСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, СтрокаПоказателя.Сотрудник, СтрокаПоказателя.Период);
			
			СтрокаПоказателя.Значение = ДоляНеполногоВремени(ДанныеГрафикаСотрудника, КадровыеДанныеСотрудника);
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		Иначе 
			СтрокаПоказателя.Значение = Значение;
			СтрокаПоказателя.ЗначениеЗаполнено = Истина;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры	

Функция ЭтоПоказательДоляНеполногоВремени(Показатель)
	ПоказательДоляНеполногоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");

	Если ПоказательДоляНеполногоВремени = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Показатель = ПоказательДоляНеполногоВремени;
	КонецЕсли;		
КонецФункции	

Функция КадровыеДанныеСотрудникаИзТаблицы(КадровыеДанныеСотрудников, Сотрудник, Период)
	Если КадровыеДанныеСотрудников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник, Период", Сотрудник, Период);
	НайденныеСтроки = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции	

Функция ДанныеГрафикаСотрудникаИзТаблицы(ДанныеГрафиковСотрудников, Сотрудник, Период)
	Если ДанныеГрафиковСотрудников = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник, Период", Сотрудник, Период);
	НайденныеСтроки = ДанныеГрафиковСотрудников.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
КонецФункции	

Функция ЗначениеПоказателяУчетаВремениПоДаннымГрафика(Показатель, ДанныеГрафика, Период, ОписаниеПоказателейУчетаВремени)
	ВремяВДняхПоУмолчанию = 20;
	ВремяВЧасахПоУмолчанию = 160;
	
	СвойстваПоказателя = ОписаниеПоказателейУчетаВремени[Показатель];
	
	Если СвойстваПоказателя.КалендарныеДни = Истина Тогда
		Возврат ДеньГода(КонецГода(Период)) / 12;
	ИначеЕсли СвойстваПоказателя.КалендарныеДниМесяца = Истина Тогда	
		Возврат ДеньГода(КонецГода(Период)) / 12;
	ИначеЕсли СвойстваПоказателя.НормаВДняхПолная = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНормаПолногоГрафика;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.НормаВДнях = Истина  Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДнейНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДнейНорма;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.ВремяВДнях = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВДняхПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоДней) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоДней;
		Иначе
			Возврат ВремяВДняхПоУмолчанию;
		КонецЕсли;	
	ИначеЕсли СвойстваПоказателя.ВремяВЧасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасов) Тогда 
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасов;
		Иначе 
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	ИначеЕсли СвойстваПоказателя.НормаВЧасах = Истина Тогда
		Если ДанныеГрафика = Неопределено Тогда
			Возврат ВремяВЧасахПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(ДанныеГрафика.СреднемесячноеЧислоЧасовНорма) Тогда
			Возврат ДанныеГрафика.СреднемесячноеЧислоЧасовНорма;
		Иначе
			Возврат ВремяВЧасахПоУмолчанию;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;		
	
КонецФункции	

Функция ЗначениеПоказателяИзТаблицы(ЗначенияПоказателей, СтруктураПоиска)
	Если ЗначенияПоказателей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции	

Функция ПоказателиУчетаВремени()
	ПоляОписанияПоказателяУчетаВремени = "ВремяВДнях, ВремяВЧасах, НормаВДнях, НормаВДняхПолная, НормаВЧасах, КалендарныеДни, КалендарныеДниМесяца";	
	ПоказателиУчетаВремени = Новый Соответствие;	
	
	ОписаниеПоказателяВремяВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВДнях.ВремяВДнях = Истина;
	
	ОписаниеПоказателяНормаВДнях = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДнях.НормаВДнях = Истина;
	
	ОписаниеПоказателяНормаВДняхПолная = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВДняхПолная.НормаВДняхПолная = Истина;
	
	ОписаниеПоказателяВремяВЧасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяВремяВЧасах.ВремяВЧасах = Истина;

	ОписаниеПоказателяНормаВЧасах = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяНормаВЧасах.НормаВЧасах = Истина;
	
	ОписаниеПоказателяКалендарныеДни = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДни.КалендарныеДни = Истина;
	
	ОписаниеПоказателяКалендарныеДниМесяца = Новый Структура(ПоляОписанияПоказателяУчетаВремени);
	ОписаниеПоказателяКалендарныеДниМесяца.КалендарныеДниМесяца = Истина;
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"), ОписаниеПоказателяВремяВДнях);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"), ОписаниеПоказателяНормаВДняхПолная);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"), ОписаниеПоказателяНормаВДнях);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"), ОписаниеПоказателяВремяВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"), ОписаниеПоказателяНормаВЧасах);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов"), ОписаниеПоказателяНормаВЧасах);
	
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"), ОписаниеПоказателяКалендарныеДниМесяца);
	ПоказателиУчетаВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"), ОписаниеПоказателяКалендарныеДниМесяца);
	
	Возврат ПоказателиУчетаВремени;	
КонецФункции	

Функция СвойстваНачислений(Начисления)
	СвойстваНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	Начисления.ВключатьВФОТ,
	|	Начисления.ЗачетНормыВремени,
	|	Начисления.РеквизитДопУпорядочивания,
	|	ВЫБОР
	|		КОГДА Начисления.ФОТНеРедактируется
	|				И Начисления.Рассчитывается
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвтоматическийРасчетФОТ,
	|	НачисленияПоказатели.Показатель,
	|	НачисленияПоказатели.ЗапрашиватьПриВводе,
	|	Начисления.ЛьготаУчитываетсяПриРасчетеЗарплаты,
	|	Начисления.ЯвляетсяЛьготой
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО (НачисленияПоказатели.Ссылка = Начисления.Ссылка)
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	РеквизитыНачислений = "ВключатьВФОТ, АвтоматическийРасчетФОТ, Показатели, ЗачетНормыВремени, РеквизитДопУпорядочивания, ЯвляетсяЛьготой, ЛьготаУчитываетсяПриРасчетеЗарплаты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		СвойстваНачисления = Новый Структура(РеквизитыНачислений);
		ЗаполнитьЗначенияСвойств(СвойстваНачисления, Выборка);
		
		ТаблицаПоказателей = Новый ТаблицаЗначений;
		ТаблицаПоказателей.Колонки.Добавить("Показатель");
		ТаблицаПоказателей.Колонки.Добавить("ЗапрашиватьПриВводе");
		
		СвойстваНачисления.Показатели = ТаблицаПоказателей;
		
		СвойстваНачислений.Вставить(Выборка.Ссылка, СвойстваНачисления);
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Показатель) Тогда 
				СтрокаТаблицПоказателя = ТаблицаПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицПоказателя, Выборка);
			КонецЕсли;	
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат СвойстваНачислений;	
КонецФункции	

Функция СвойстваПоказателейПоСвойствамНачислений(СвойстваНачислений)
	СвойстваПоказателей = Новый Соответствие;
	
	Показатели = Новый Массив;	
	Для Каждого Начисление Из СвойстваНачислений Цикл
		Для Каждого СтрокаПоказателя Из Начисление.Значение.Показатели Цикл
			Показатели.Добавить(СтрокаПоказателя.Показатель);	
		КонецЦикла;	
	КонецЦикла;	
	
	УникальныеПоказатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Показатели);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатели", УникальныеПоказатели);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка,
	|	ПоказателиРасчетаЗарплаты.НазначениеПоказателя,
	|	ПоказателиРасчетаЗарплаты.ТипПоказателя,
	|	ПоказателиРасчетаЗарплаты.СпособПримененияЗначений,
	|	ПоказателиРасчетаЗарплаты.СпособВводаЗначений,
	|	ПоказателиРасчетаЗарплаты.ВидСтажа,
	|	ПоказателиРасчетаЗарплаты.ВидТарифнойСтавки,
	|	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания,
	|	ВЫБОР
	|		КОГДА ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВходитВСоставСовокупнойСтавки
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
	|		ПО (ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель = ПоказателиРасчетаЗарплаты.Ссылка)
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)";
		
	РеквизитыПоказателей = "НазначениеПоказателя, ТипПоказателя, СпособПримененияЗначений, СпособВводаЗначений, ВидСтажа, ВидТарифнойСтавки, РеквизитДопУпорядочивания, ВходитВСоставСовокупнойСтавки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Свойства = Новый Структура(РеквизитыПоказателей);
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
		
		СвойстваПоказателей.Вставить(Выборка.Ссылка, Свойства);
	КонецЦикла;	
	
	Возврат СвойстваПоказателей; 
КонецФункции	

Функция ТаблицаПоказателей()
	ПоказателейНачислений = Новый ТаблицаЗначений;
	ПоказателейНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ПоказателейНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоказателейНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПоказателейНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ПоказателейНачислений.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеНачисления.Измерения.ДокументОснование.Тип);
	ПоказателейНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ПоказателейНачислений.Колонки.Добавить("ЗначениеЗаполнено", Новый ОписаниеТипов("Булево"));
	ПоказателейНачислений.Колонки.Добавить("ЗапрашиватьПриВводе", Новый ОписаниеТипов("Булево"));
	
	Возврат ПоказателейНачислений;
КонецФункции

Функция ТаблицаПоказателейПоТаблицеНачисления(ТаблицаНачислений, СвойстваНачислений, СвойстваПоказателей)
	ПоказателейНачислений = ТаблицаПоказателей();
	ПоказателиУчетаВремени = ПоказателиУчетаВремени(); 
		
	Для Каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
		СвойстваНачисления = СвойстваНачислений[СтрокаТаблицыНачислений.Начисление];
		
		Если СвойстваНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ДанныеПоказателя Из СвойстваНачисления.Показатели Цикл
			Если Не ЗначениеЗаполнено(ДанныеПоказателя.Показатель) Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ЭтоПериодическийПоказательПодразделения(СвойстваПоказателей[ДанныеПоказателя.Показатель])
				Или ЭтоПериодическийПоказательОрганизации(СвойстваПоказателей[ДанныеПоказателя.Показатель])
				Или ЭтоПериодическийПоказательСотрудника(СвойстваПоказателей[ДанныеПоказателя.Показатель])
				Или ЭтоПоказательДоляНеполногоВремени(ДанныеПоказателя.Показатель)
				Или ЭтоПоказательРайонныйКоэффициент(ДанныеПоказателя.Показатель)
				Или ЭтоПоказательСевернойНадбавки(ДанныеПоказателя.Показатель)
				Или ЭтоПоказательСтажа(ДанныеПоказателя.Показатель)
				Или ЭтоПоказательУчетаВремени(ДанныеПоказателя.Показатель, ПоказателиУчетаВремени) Тогда
			
				СтрокаТаблицыПоказателей = ПоказателейНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПоказателей, СтрокаТаблицыНачислений);
				СтрокаТаблицыПоказателей.Показатель = ДанныеПоказателя.Показатель;	
				СтрокаТаблицыПоказателей.ЗапрашиватьПриВводе = ДанныеПоказателя.ЗапрашиватьПриВводе;
			КонецЕсли;	
		КонецЦикла;		
	КонецЦикла;	
	
	ПоказателейНачислений.Свернуть("Период, Сотрудник, ГоловнаяОрганизация, Показатель, ДокументОснование, Значение, ЗначениеЗаполнено, ЗапрашиватьПриВводе");
	
	Возврат ПоказателейНачислений; 
КонецФункции	

#КонецОбласти

#Область ПолучениеКадровыхДанныхИДанныхГрафиковДляРасчетаФОТ
	
Функция СоздатьТаблицаДанныхГрафиков()
	ТаблицаДанныхГрафиков = Новый ТаблицаЗначений;
	ТаблицаДанныхГрафиков.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников, СправочникСсылка.РежимыРаботыСотрудников"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("ГрафикПолногоРабочегоВремени", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("ДлительностьРабочейНедели", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("ДлительностьРабочейНеделиГрафикаПолногоВремени", Новый ОписаниеТипов("Число"));
	
	ТаблицаДанныхГрафиков.Колонки.Добавить("СреднемесячноеЧислоДнейНормаПолногоГрафика", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("СреднемесячноеЧислоЧасовНорма", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("СреднемесячноеЧислоДнейНорма", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("СреднемесячноеЧислоДней", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафиков.Колонки.Добавить("СреднемесячноеЧислоЧасов", Новый ОписаниеТипов("Число"));

	Возврат ТаблицаДанныхГрафиков;	
КонецФункции	

Функция ДанныеГрафиковПоТаблицеГрафиковСотрудников(ГрафикиСотрудников) Экспорт
	ТаблицаДанныхГрафиков = СоздатьТаблицаДанныхГрафиков();
	ТаблицаДанныхГрафиков.Индексы.Добавить("ГрафикРаботы, Год");
	
	УникальныеГрафикиПоГодам = ГрафикиСотрудников.Скопировать();
	УникальныеГрафикиПоГодам.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТаблицыОтбора Из УникальныеГрафикиПоГодам Цикл
		СтрокаТаблицыОтбора.Год = Год(СтрокаТаблицыОтбора.Период);
		
		СтрокаТаблицыДанныхГрафиков = ТаблицаДанныхГрафиков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыДанныхГрафиков, СтрокаТаблицыОтбора);
	КонецЦикла;
	
	УникальныеГрафикиПоГодам.Свернуть("ГрафикРаботы, Год");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикиПоГодам", УникальныеГрафикиПоГодам);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиПоГодам.ГрафикРаботы,
	|	ГрафикиПоГодам.Год
	|ПОМЕСТИТЬ ВТГрафикиПоГодам
	|ИЗ
	|	&ГрафикиПоГодам КАК ГрафикиПоГодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиПоГодам.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени КАК ГрафикПолногоРабочегоВремени,
	|	ГрафикиПоГодам.Год,
	|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ГрафикиПолногоВремени.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиГрафикаПолногоВремени,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасовНормаПолногоГрафика,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНормаПолногоГрафика,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасов,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДней
	|ИЗ
	|	ВТГрафикиПоГодам КАК ГрафикиПоГодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ГрафикиПоГодам.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиПолногоВремени
	|		ПО (ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ГрафикиПолногоВремени.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|		ПО ГрафикиПоГодам.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
	|			И ГрафикиПоГодам.Год = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковПолногоВремени
	|		ПО (ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафиковПолногоВремени.ГрафикРаботыСотрудников)
	|			И ГрафикиПоГодам.Год = СреднемесячныеНормыВремениГрафиковПолногоВремени.Год";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("ГрафикРаботы, Год");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		
		НайденныеСтроки = ТаблицаДанныхГрафиков.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка)			
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ТаблицаДанныхГрафиков;
КонецФункции	

#КонецОбласти

#Область МетодыЧтенияРегистровВторичныхДанныхПлановыхНачислений

Процедура УстановитьОтборПриПолученииСводныхДанныхПлановыхНачислений(Отборы)
	УправленческаяОрганизация = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если УправленческаяОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Отборы = Неопределено Тогда
		Отборы = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = "ГоловнаяОрганизация" Тогда
			Возврат
		КонецЕсли;
	КонецЦикла;	
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ГоловнаяОрганизация", "<>", УправленческаяОрганизация);	
КонецПроцедуры	

Функция ПолучатьСрезРегистровПоИнтервалам(ИмяРегистра, ПараметрыПостроения)
	Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.Отборы = Неопределено Тогда
		
		Возврат Истина;
	КонецЕсли; 
		
	ИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.ИсключаемыеРегистраторы(ПараметрыПостроения);
		
	Если ИсключаемыеРегистраторы.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.РегистраторСобытия) КАК Регистратор
			|ИЗ
			|	РегистрСведений.#ИмяРегистра КАК РегистрСведений
			|ГДЕ
			|	РегистрСведений.РегистраторСобытия В(&Регистраторы)
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрСведений.РегистраторСобытия) > 0";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяРегистра", ИмяРегистра);
		Запрос.УстановитьПараметр("Регистраторы", ИсключаемыеРегистраторы);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда	
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Истина);
			Если Выборка.Регистратор > 1 Тогда
				Возврат Истина;
			КонецЕсли; 		
		Иначе
			ПараметрыПостроения.Вставить("ИсключаемыеРегистраторы", Ложь);
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат Истина;	
КонецФункции

Функция ЭтоРегистрСПереопределеннымПолучениемДанных(ИмяРегистра)
	Возврат НРег(ИмяРегистра) = НРег(Метаданные.РегистрыСведений.ПлановыйФОТ.Имя)
		Или НРег(ИмяРегистра) = НРег(Метаданные.РегистрыСведений.ПлановыйФОТИтоги.Имя);
КонецФункции	

Процедура ДобавитьЗапросВТДвиженияПлановогоФОТ(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "Движения" + ИмяРегистра;
	КонецЕсли;	
					
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	ВключатьЗаписиНаНачалоПериода = ЗарплатаКадрыПериодическиеРегистры.ВключатьЗаписиНаНачалоПериода(ПараметрыПостроения, ОписаниеРегистра);
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведений.РегистраторСобытия КАК Регистратор,
	|	РегистрСведений.Период КАК ПериодЗаписи,
	|	&ШаблонРегистрДатаНачалаПриведенная КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонИзмерения КАК ШаблонИзмерения,
	|	&ШаблонРесурсы КАК ШаблонРесурсы,
	|	&ШаблонРеквизиты КАК ШаблонРеквизиты
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период >= &ФильтрДатаНачалаПриведенная_)
	|			И (РегистрСведений.Период <= &ФильтрДатаОкончанияПриведенная_)
	|			И (&ШаблонУсловияСвязиПоИзмерениямСФильтром)";
		
	УсловиеПериодичностьДень = "РегистрСведений.ДатаОкончания >= КОНЕЦПЕРИОДА(РегистрСведений.Период, ДЕНЬ)";
			
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра, 
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания", 
		ОператорЗапроса, 
		ПостфиксИменПараметров, 
		Ложь);
		
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	
	РегистрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("Период", "РегистрСведений");
	РегистрДатаНачалаПриведеннаяККонцуДня = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПоляПериода("Период", "РегистрСведений");
	
	ФильтрДатаНачалаПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачалаПриведенная");
	ФильтрДатаОкончанияПриведенная = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончанияПриведенная");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	ФильтрДатаСреза = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСреза");
	ФильтрДатаСрезаПриведенная =  ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаСрезаПриведенная");
	
	ФильтрДатаОкончанияПриведенная.ПустоеЗначениеКакМаксимальное = Истина;
	
	КратностьСдвигаДляПолученияСреза = "СЕКУНДА";
	Если ФормироватьСПериодичностьДень Тогда
		РегистрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаНачалаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаНачалаПриведенная.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаОкончанияПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаОкончанияПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		РегистрДатаНачалаПриведеннаяККонцуДня.Кратность = "ДЕНЬ";	
		РегистрДатаНачалаПриведеннаяККонцуДня.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		ФильтрДатаСреза.Кратность = "ДЕНЬ";	
		ФильтрДатаСреза.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
		
		ФильтрДатаСрезаПриведенная.Кратность = "ДЕНЬ";	
		ФильтрДатаСрезаПриведенная.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";

		КратностьСдвигаДляПолученияСреза = "ДЕНЬ";
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, УсловиеПериодичностьДень);
	КонецЕсли; 		
	
	Если ВключатьЗаписиНаНачалоПериода Тогда
		// Дополним условие соединения соединения по периоду условием получения записей на начало периода
		ШаблонУсловияПолученияЗаписейНаНачалоПериода = 
		"ИЛИ &РегистрДатаНачалаПриведенная_ <= &ФильтрДатаСрезаПриведенная_
		|	И РегистрСведений.ДатаОкончания >= &ФильтрДатаСрезаПриведенная_";
		
		ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = "(" + ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи 
																	+  Символы.ПС + ШаблонУсловияПолученияЗаписейНаНачалоПериода
																	+ ")"; 
		// Для записей полученных на начало периода, значение поля Период будем считать равным параметру фильтра ДатаНачала															
		ТекстПоляПериод = 
		"ВЫБОР
		|	КОГДА РегистрСведений.Период <= &ФильтрДатаСреза_
		|		ТОГДА &ФильтрДатаСреза_      
		|	ИНАЧЕ &РегистрДатаНачалаПриведенная_
		|КОНЕЦ";
				
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&ФильтрДатаСреза_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаСреза));
		ТекстПоляПериод = СтрЗаменить(ТекстПоляПериод, "&РегистрДатаНачалаПриведенная_", ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрДатаНачалаПриведенная));
		
		ФильтрДатаНачалаПриведенная.Сдвиг = 1;	
		ФильтрДатаНачалаПриведенная.КратностьСдвига = КратностьСдвигаДляПолученияСреза;
		
		ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаСрезаПриведенная_", ФильтрДатаСрезаПриведенная);
		ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведенная_", РегистрДатаНачалаПриведенная);
	Иначе
		ТекстПоляПериод = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(РегистрДатаНачалаПриведенная);	
	КонецЕсли;	
			
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачалаПриведенная_", ФильтрДатаНачалаПриведенная);	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончанияПриведенная_", ФильтрДатаОкончанияПриведенная);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&РегистрДатаНачалаПриведеннаяККонцуДня_", РегистрДатаНачалаПриведеннаяККонцуДня);
						
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ТекстПоляПериод, "Период");
	
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		ВыражениеПоляИзмерение = "РегистрСведений." + Измерение;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляИзмерение, Измерение);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = "РегистрСведений." + Ресурс;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
	КонецЦикла;		
	
	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = "РегистрСведений." + Реквизит;
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров);
	
	ПредикатУсловиямНаНачалоПериода = "РегистрСведений.Период > " + ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачалаПриведенная) + " ИЛИ ";
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров, СчПараметров, ПредикатУсловиямНаНачалоПериода);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения); 
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

Процедура ДобавитьЗапросВТПлановыйФОТСрез(ОписаниеПакетаЗапросов, ИмяРегистра, Знач ТолькоРазрешенные, Знач ОписаниеФильтра, Знач ПараметрыПостроения = Неопределено, Знач ИмяСоздаваемойТаблицы = Неопределено)
	ПостфиксИменПараметров = ИмяСоздаваемойТаблицы;
	Если ПостфиксИменПараметров = Неопределено Тогда
		ПостфиксИменПараметров = "СрезПоследних" + ИмяРегистра;
	КонецЕсли;		
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистраСведений(ИмяРегистра, ОписаниеФильтра.ИзмеренияФильтра, ПараметрыПостроения.ИсключатьНеИспользуемыеПоля);
	ФормироватьСПериодичностьДень = ЗарплатаКадрыПериодическиеРегистры.ФормироватьСПериодичностьДень(ПараметрыПостроения, ОписаниеРегистра);	
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ШаблонФильтрПериодИсходный КАК Период,
	|	&ШаблонПериодВозвратногоСобытия КАК ПериодВозвратногоСобытия,
	|	&ШаблонРегистратор КАК Регистратор,
	|	&ШаблонПериодЗаписи КАК ПериодЗаписи,
	|	&ШаблонИзмерения КАК Измерения,
	|	&ШаблонРесурсы КАК Ресурсы,
	|	&ШаблонПустойИнтервал КАК ПустойИнтервал
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= &ФильтрПериодПриведенный_)
	|			И (РегистрСведений.ДатаОкончания >= &ФильтрПериодПриведенный_)
	|			И (&ШаблонСвязьПоИзмерениямФильтра)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ #РегистрСведений КАК РегистрСведенийЗамена
	|		ПО (РегистрСведений.ПериодПредыдущейЗаписи = РегистрСведенийЗамена.Период)
	|			И (&ШаблонСвязьПоИзмерениям)";
	
	
	ШаблонУсловияИсключаемыйРегистратор = 
	"НЕ(РегистрСведенийЗамена.Период ЕСТЬ NULL
	|	И РегистрСведений.РегистраторСобытия В (&ШаблонИсключаемыйРегистратор))";

	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда                 
		ШаблонВыбираемогоРесурса = " 
		|ВЫБОР
		|	КОГДА РегистрСведений.РегистраторСобытия В (&ИсключаемыеРегистраторы)
		|		ТОГДА РегистрСведенийЗамена.Ресурс_
		|	ИНАЧЕ РегистрСведений.Ресурс_
		|КОНЕЦ";
	Иначе
		ШаблонВыбираемогоРесурса = "РегистрСведений.Ресурс_";
	КонецЕсли;	
	
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОписаниеЗапроса.ВыбиратьРазрешенные = ТолькоРазрешенные;
	ОписаниеЗапроса.ТаблицаДляПомещения = ИмяСоздаваемойТаблицы;
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра();
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(ОписаниеИспользованияФильтра, ОписаниеФильтра, ОписаниеРегистра, "Период", ОператорЗапроса, ПостфиксИменПараметров, ПараметрыПостроения.ВсеЗаписи);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведений", "РегистрСведений." + ИмяРегистра);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТаблицуВОператореЗапроса(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений." + ИмяРегистра);
	
	Если Не ОписаниеИспользованияФильтра.ФильтрВВидеВТ Тогда
		ЗарплатаКадрыПериодическиеРегистры.ЗаменитьВедущуюТаблицуВСоединении(ОператорЗапроса, "РегистрСведенийЗамена", "РегистрСведений");
	КонецЕсли;
	
	ФильтрПериодИсходный = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодИсходный");
	ФильтрПериодПриведенный = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "Период", "ПериодПриведенный");
	
	ФильтрПериодПриведенный.ПустоеЗначениеКакМаксимальное = Истина;
	
	Если ФормироватьСПериодичностьДень Тогда
		ФильтрПериодПриведенный.Кратность = "ДЕНЬ";
		ФильтрПериодПриведенный.ВариантПриведенияПериода = "КОНЕЦПЕРИОДА";
		
		Если Не ПараметрыПостроения.ВключаяГраницу Тогда
			ФильтрПериодПриведенный.ВариантПриведенияПериода = "НАЧАЛОПЕРИОДА";
			ФильтрПериодПриведенный.Сдвиг = -1;
			ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";	   
		КонецЕсли; 
	ИначеЕсли Не ПараметрыПостроения.ВключаяГраницу Тогда
		ФильтрПериодПриведенный.Сдвиг = -1;
		ФильтрПериодПриведенный.КратностьСдвига = "СЕКУНДА";
	КонецЕсли; 		
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодПриведенный_", ФильтрПериодПриведенный);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрПериодИсходный_", ФильтрПериодИсходный);
		
	Если ПараметрыПостроения.ВсеЗаписи Тогда
		ЗарплатаКадрыПериодическиеРегистры.УстановитьТипСоединения(ОператорЗапроса, "РегистрСведений", "ЛЕВОЕ");
	КонецЕсли; 
		
	УсловияСвязиПоИзмерениям = Новый Массив;
	Для Каждого Измерение Из ОписаниеРегистра.Измерения Цикл
		Если ПараметрыПостроения.ВсеЗаписи И ОписаниеФильтра.ИзмеренияФильтра.Найти(Измерение) <> Неопределено Тогда
			ВыражениеПоля = ЗарплатаКадрыПериодическиеРегистры.ВыражениеИзмерениеФильтра(ОписаниеИспользованияФильтра, Измерение);
		Иначе
			ВыражениеПоля = "РегистрСведений." + Измерение;
		КонецЕсли;	
			
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоля, Измерение);
		ТекстУсловия = "РегистрСведений." + Измерение + " = РегистрСведенийЗамена." + Измерение;
		УсловияСвязиПоИзмерениям.Добавить(ТекстУсловия);
	КонецЦикла;
	
	Если ПараметрыПостроения.ИсключаемыеРегистраторы Тогда
		ИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.ИсключаемыеРегистраторы(ПараметрыПостроения);
		ИмяПараметраИсключаемыеРегистраторы = ЗарплатаКадрыПериодическиеРегистры.УстановитьПараметрОтбораПоИсключаемомуРегистратору(ОписаниеПакетаЗапросов, ИсключаемыеРегистраторы, ИмяСоздаваемойТаблицы);
		
		ТекстУсловияСоединенияСТаблицейЗамены = ЗарплатаКадрыПериодическиеРегистры.ТекстУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		ТекстУсловияСоединенияСТаблицейЗамены = СтрЗаменить(ТекстУсловияСоединенияСТаблицейЗамены, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
		
		ЗарплатаКадрыПериодическиеРегистры.ОчиститьУсловияСоединения(ОператорЗапроса, "РегистрСведенийЗамена");
		
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", УсловияСвязиПоИзмерениям);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "РегистрСведенийЗамена", ТекстУсловияСоединенияСТаблицейЗамены);
				
		Если Не ПараметрыПостроения.ВсеЗаписи Тогда				
			ТекстУсловияИсключаемыйРегистратор = СтрЗаменить(ШаблонУсловияИсключаемыйРегистратор, "&ШаблонИсключаемыйРегистратор", "&" + ИмяПараметраИсключаемыеРегистраторы);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, ТекстУсловияИсключаемыйРегистратор);
		КонецЕсли;	
		ШаблонВыбираемогоРесурса = СтрЗаменить(ШаблонВыбираемогоРесурса, "&ИсключаемыеРегистраторы", "&" + ИмяПараметраИсключаемыеРегистраторы);		
	Иначе 
		ЗарплатаКадрыПериодическиеРегистры.УдалитьТаблицуИзОператораЗапроса(ОператорЗапроса, "РегистрСведенийЗамена");
	КонецЕсли;
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрПериодИсходный), "Период");
			
	ВыражениеПоляРегистратор = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "РегистраторСобытия");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРегистратор, "Регистратор");	

	
	ВыражениеПоляПериодЗаписи = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", "Период");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодЗаписи, "ПериодЗаписи");	
		
	Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
	КонецЦикла;	
	
	Для Каждого Ресурс Из ОписаниеРегистра.ВозвратныеРесурсы Цикл
		ВыражениеПоляРесурс = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Ресурс);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРесурс, Ресурс);	
	КонецЦикла;	

	Для Каждого Реквизит Из ОписаниеРегистра.Реквизиты Цикл
		ВыражениеПоляРеквизит = СтрЗаменить(ШаблонВыбираемогоРесурса, "Ресурс_", Реквизит);
		ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРеквизит, Реквизит);	
	КонецЦикла;	
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакетаЗапросов, ОписаниеФильтра, ОписаниеИспользованияФильтра, ПараметрыПостроения);
	
	СчПараметров = 1;
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.Отборы, ОписаниеПакетаЗапросов.Параметры, ИмяСоздаваемойТаблицы, СчПараметров, , , Ложь, Истина);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьОтборВОператорЗапросаДанныхРегистра(ОператорЗапроса, ПараметрыПостроения.ОтборыПрименяемыеКСрезу, ОписаниеПакетаЗапросов.Параметры, ПостфиксИменПараметров + "ОтборыКСрезу", СчПараметров,,,,Истина);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьДополнительныеПоляПоОписаниюИспользованияФильтра(ОписаниеЗапроса, 0, ОписаниеИспользованияФильтра);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПостоянныеПоляВОписаниеЗапроса(ОписаниеПакетаЗапросов, ОписаниеЗапроса, ПараметрыПостроения.ПостоянныеПоля, ИмяСоздаваемойТаблицы);
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьПсевдонимыПолей(ОписаниеЗапроса, ПараметрыПостроения);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПоляИндексированияВОписаниеЗапроса(ОписаниеЗапроса, ПараметрыПостроения.ИндексироватьПо);	
КонецПроцедуры

#КонецОбласти

Функция ОписаниеТаблицыФильтраСоздатьВТИнтервалыДействияРесурсов()
	ОписаниеТаблицыФильтра = Новый Структура;
	ОписаниеТаблицыФильтра.Вставить("ИмяТаблицыФильтра");

	ОписаниеТаблицыФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеТаблицыФильтра.Вставить("СвязьИзмерений", Новый Структура);
	
	Возврат ОписаниеТаблицыФильтра;
	
КонецФункции	

Процедура СоздатьВТИнтервалыДействияРесурсов(МенеджерВременныхТаблиц, ИмяРегистра, ОписаниеТаблицыФильтра)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПоляТаблицыФильтра,
	|	ВЫБОР
	|		КОГДА РегистрИсточникДанных.ДатаНачала < ТаблицаФильтр.ДатаНачала
	|			ТОГДА ТаблицаФильтр.ДатаНачала
	|		ИНАЧЕ РегистрИсточникДанных.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	РегистрИсточникДанных.ДатаНачала КАК ПериодЗаписи,
	|	РегистрИсточникДанных.ДатаОкончания,
	|	РегистрИсточникДанных.ДействуетДо,
	|	РегистрИсточникДанныхПредыдущиеЗначения.ДатаНачала КАК ДатаНачалаПредыдущейЗаписи,
	|	РегистрИсточникДанных.РегистраторСобытия,
	|	ВЫБОР
	|		КОГДА ТаблицаФильтр.ДатаНачала <= РегистрИсточникДанных.ДатаНачала
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДвижение,
	|	&ПоляРесурсов,
	|	&ПоляИзмерений,
	|	ВЫБОР
	|		КОГДА РегистрИсточникДанных.ДатаНачала <> РегистрИсточникДанных.ПериодЗаписи
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратноеСобытие
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТаблицаФильтр КАК ТаблицаФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений КАК РегистрИсточникДанных
	|		ПО (&УсловияСвязиПоТаблицыФильтра)
	|			И (ТаблицаФильтр.ДатаНачала >= РегистрИсточникДанных.ДатаНачала
	|					И ТаблицаФильтр.ДатаНачала <= РегистрИсточникДанных.ДатаОкончания
	|					И НЕ РегистрИсточникДанных.ПустойИнтервал
	|				ИЛИ РегистрИсточникДанных.ДатаНачала >= ТаблицаФильтр.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений КАК РегистрИсточникДанныхПредыдущиеЗначения
	|		ПО (&УсловияСвязиСПредыдущимиЗначениями)
	|			И (ДОБАВИТЬКДАТЕ(РегистрИсточникДанных.ДатаНачала, СЕКУНДА, -1) = РегистрИсточникДанныхПредыдущиеЗначения.ДатаОкончания)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаФильтр", ОписаниеТаблицыФильтра.ИмяТаблицыФильтра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений", "РегистрСведений." + ИмяРегистра + "Интервальный");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", "ВТ" + ИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаФильтр.ДатаНачала", "ТаблицаФильтр." + ОписаниеТаблицыФильтра.ИмяПоляДатаНачала);

	
	СтрокиУсловияСвязи = Новый Массив;
	СтрокиПолейТаблицыФильтра = Новый Массив;
	Для Каждого КлючЗначение Из ОписаниеТаблицыФильтра.СвязьИзмерений Цикл
		СтрокиУсловияСвязи.Добавить("ТаблицаФильтр." + КлючЗначение.Ключ + " = РегистрИсточникДанных." + КлючЗначение.Значение);
		
		СтрокиПолейТаблицыФильтра.Добавить("ТаблицаФильтр." + КлючЗначение.Ключ);
	КонецЦикла;
	
	УсловияСвязиПоТаблицыФильтра = СтрСоединить(СтрокиУсловияСвязи, Символы.ПС + " И ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияСвязиПоТаблицыФильтра", УсловияСвязиПоТаблицыФильтра); 
	
	ПоляТаблицыФильтра = СтрСоединить(СтрокиПолейТаблицыФильтра, "," + Символы.ПС);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицыФильтра", ПоляТаблицыФильтра);
	
	Измерения = ИзмеренияРегистра(ИмяРегистра);
	
	СтрокиУсловияСвязи = Новый Массив;
	СтрокиПоляИзмерений = Новый Массив;
	Для Каждого ИзмеренияРегистра Из Измерения Цикл
		СтрокиУсловияСвязи.Добавить("РегистрИсточникДанных." + ИзмеренияРегистра + " = РегистрИсточникДанныхПредыдущиеЗначения." + ИзмеренияРегистра);
		
		СтрокиПоляИзмерений.Добавить("РегистрИсточникДанных." + ИзмеренияРегистра);
	КонецЦикла;
	
	УсловияСвязиСПредыдущимиЗначениями = СтрСоединить(СтрокиУсловияСвязи, Символы.ПС + " И ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияСвязиСПредыдущимиЗначениями", УсловияСвязиСПредыдущимиЗначениями); 
	
	ПоляИзмерений = СтрСоединить(СтрокиПоляИзмерений, "," + Символы.ПС);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляИзмерений", ПоляИзмерений); 
	
	Ресурсы = РесурсыРегистра(ИмяРегистра);
	
	Строки = Новый Массив;
	Для Каждого РесурсРегистра Из Ресурсы Цикл
		Строки.Добавить("РегистрИсточникДанных." + РесурсРегистра);
		
		СтрокаСравненияРесурсов = "ВЫБОР 
								  |		КОГДА РегистрИсточникДанныхПредыдущиеЗначения." + РесурсРегистра + " ЕСТЬ NULL ТОГДА ИСТИНА
								  |	    КОГДА РегистрИсточникДанных." + РесурсРегистра + " <> РегистрИсточникДанныхПредыдущиеЗначения." + РесурсРегистра + " ТОГДА ИСТИНА
								  |		ИНАЧЕ ЛОЖЬ
								  |КОНЕЦ КАК ИзменилосьЗначение" + РесурсРегистра;

		
		Строки.Добавить(СтрокаСравненияРесурсов);	
	КонецЦикла;
	
	ПоляРесурсов = СтрСоединить(Строки, "," + Символы.ПС);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРесурсов", ПоляРесурсов); 
	
	Запрос.Выполнить();	
КонецПроцедуры	

Функция ИзмеренияРегистра(ИмяРегистра)
	ИзмеренияРегистра = Новый Массив;	
	
	Если ИмяРегистра = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя Тогда
		ИзмеренияРегистра.Добавить("Сотрудник");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя Тогда
		ИзмеренияРегистра.Добавить("Сотрудник");
		ИзмеренияРегистра.Добавить("Организация");
		ИзмеренияРегистра.Добавить("Показатель");
		ИзмеренияРегистра.Добавить("ДокументОснование");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя Тогда
		ИзмеренияРегистра.Добавить("Сотрудник");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ПлановыеНачисления.Имя Тогда
		ИзмеренияРегистра.Добавить("Сотрудник");
		ИзмеренияРегистра.Добавить("ГоловнаяОрганизация");
		ИзмеренияРегистра.Добавить("Начисление");
		ИзмеренияРегистра.Добавить("ДокументОснование");
	КонецЕсли;
	
	Возврат ИзмеренияРегистра;
КонецФункции

Функция РесурсыРегистра(ИмяРегистра)
	РесурсыРегистра = Новый Массив;	
	
	Если ИмяРегистра = Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя Тогда
		РесурсыРегистра.Добавить("ГрафикРаботы");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Имя Тогда
		РесурсыРегистра.Добавить("Значение");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.КадроваяИсторияСотрудников.Имя Тогда
		РесурсыРегистра.Добавить("КоличествоСтавок");
		РесурсыРегистра.Добавить("Подразделение");
        РесурсыРегистра.Добавить("Организация");
	ИначеЕсли ИмяРегистра = Метаданные.РегистрыСведений.ПлановыеНачисления.Имя Тогда
		РесурсыРегистра.Добавить("Используется");
		РесурсыРегистра.Добавить("Размер");
	КонецЕсли;
	
	Возврат РесурсыРегистра;	
КонецФункции

#КонецОбласти
