////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность БРО".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
//
Процедура ОбработчикиИнициализацииПараметровСеанса(Обработчики) Экспорт
	
	ДокументооборотСКО.ОбработчикиИнициализацииПараметровСеанса(Обработчики);
	
	Обработчики.Вставить("ПараметрыВнешнихРегламентированныхОтчетов", "РегламентированнаяОтчетностьВызовСервера.УстановитьПараметрыВнешнихРегламентированныхОтчетов");
	
	// ЕдиныйНалоговыйСчетИнтеграция
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЕдиныйНалоговыйСчет") Тогда
		МодульЕдиныйНалоговыйСчетИнтеграция = ОбщегоНазначения.ОбщийМодуль("ЕдиныйНалоговыйСчетИнтеграция");
		МодульЕдиныйНалоговыйСчетИнтеграция.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ЕдиныйНалоговыйСчетИнтеграция
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию программных интерфейсов,
// используя в качестве ключей имена программных интерфейсов.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
//   СтруктураПоддерживаемыхВерсий - Структура - структура поддерживаемых версий:
//     * Ключ - Строка - имя программного интерфейса,
//     * Значение - Массив(Строка) - поддерживаемые версии программного интерфейса.
//
// Пример:
//   // СервисПередачиФайлов
//   МассивВерсий = Новый Массив;
//   МассивВерсий.Добавить("1.0.1.1");
//   МассивВерсий.Добавить("1.0.2.1"); 
//   СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//   // Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СервисФормированияМЧБсPDF417
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	МассивВерсий.Добавить("1.0.1.2");
	СтруктураПоддерживаемыхВерсий.Вставить("СервисФормированияМЧБсPDF417", МассивВерсий);
	// Конец СервисФормированияМЧБсPDF417
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументооборотСКО.ПараметрыРаботыКлиентаПриЗапуске(Параметры);

КонецПроцедуры

// Позволяет задать значения параметров, необходимых для работы клиентского кода
// конфигурации без дополнительных серверных вызовов.
// Для получения этих параметров из клиентского кода
// см. СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента.
//
// Параметры:
//   Параметры - Структура - имена и значения параметров работы клиента, которые необходимо задать.
//                           Для установки параметров работы клиента:
//                           Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ДокументооборотСКО.ПриДобавленииПараметровРаботыКлиента(Параметры);
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
//
// Параметры:
//   СоответствиеИменПсевдонимам - Соответствие - соответствие имен:
//     * Ключ - Строка - псевдоним метода, например, "ОчиститьОбластьДанных".
//     * Значение - Строка - имя метода для вызова, например, РаботаВМоделиСервиса.ОчиститьОбластьДанных.
//                           В качестве значения можно указать Неопределено, в этом случае считается,
//                           что имя совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	ДокументооборотСКО.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	ЭлектронныйДокументооборотСФСС.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьВБанки") Тогда
		МодульОтчетностьВБанкиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОтчетностьВБанкиСлужебный");
		МодульОтчетностьВБанкиСлужебный.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЛьготныеКредиты2020") Тогда
		МодульЛьготныеКредиты = ОбщегоНазначения.ОбщийМодуль("ЛьготныеКредиты");
		МодульЛьготныеКредиты.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	// ЕдиныйНалоговыйСчетИнтеграция
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЕдиныйНалоговыйСчет") Тогда
		МодульЕдиныйНалоговыйСчетИнтеграция = ОбщегоНазначения.ОбщийМодуль("ЕдиныйНалоговыйСчетИнтеграция");
		МодульЕдиныйНалоговыйСчетИнтеграция.ЗарегистрироватьМетодОчередиЗаданий(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЕдиныйНалоговыйСчетИнтеграция
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	ДокументооборотСКО.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	ОнлайнСервисыРегламентированнойОтчетности.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	ЭлектронныйДокументооборотСФСС.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьВБанки") Тогда
		МодульОтчетностьВБанкиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОтчетностьВБанкиСлужебный");
		МодульОтчетностьВБанкиСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// ЕдиныйНалоговыйСчетИнтеграция
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЕдиныйНалоговыйСчет") Тогда
		МодульЕдиныйНалоговыйСчетИнтеграция = ОбщегоНазначения.ОбщийМодуль("ЕдиныйНалоговыйСчетИнтеграция");
		МодульЕдиныйНалоговыйСчетИнтеграция.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	// Конец ЕдиныйНалоговыйСчетИнтеграция
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("РегламентированнаяОтчетность.ЛьготныеКредиты2020") Тогда
		МодульЛьготныеКредиты = ОбщегоНазначения.ОбщийМодуль("ЛьготныеКредиты");
		МодульЛьготныеКредиты.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет есть ли реквизит у справочника Организации - ВАрхиве. Этот реквизит применяется для обозначения неактуальной организации.
// 
// Возвращаемое значение:
//   Булево - признак наличия реквизита ВАрхиве
//
Функция ИспользуетсяАрхив() Экспорт
	
	ВерсияБСП_3_1_11 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "3.1.11.0") > 0;
	Если ВерсияБСП_3_1_11 Тогда
		МодульОрганизацииСервер = ОбщегоНазначения.ОбщийМодуль("ОрганизацииСервер");
		Возврат МодульОрганизацииСервер.ИспользуетсяАрхив();
	Иначе
		МетаданныеОрганизации = Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0]);
		Если МетаданныеОрганизации = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Результат = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВАрхиве", МетаданныеОрганизации);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт

	ЭлектронныйДокументооборотСФСС.СобратьПоказателиБизнесСтатистикиПоСЭДО();
	
КонецПроцедуры

#КонецОбласти
