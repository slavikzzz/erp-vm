
#Область СлужебныйПрограммныйИнтерфейс

// Проверяет наличие права на интерактивную работу с данными учета в многофункциональном документе.
//
// Параметры:
// 	ВидПрава - Строка - одно из значения связанных с ключом структуры, определяет проверяемое право
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных)
// 	РазделДанных - Строка - одно из значения связанных с ключом структуры, определяет раздел данных,
// 				на данные которого проверяются права
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных).
// 	ЗначенияДоступа - (см. МногофункциональныеДокументыБЗК.ЗначенияДоступа, Неопределено) - данные по которым
// 						будут определяться права на раздел (физические лица документа,  организации документа).
// 						Если не передана, то проверка будет осуществляться только по наличию ролей, семантически 
// 						дающие права на раздел, проверка с учетом ограничений на уровне записей выполняться не будет.
//
// Возвращаемое значение:
// 	Булево
//
Функция ЕстьПравоНаРаздел(ВидПрава, РазделДанных, ЗначенияДоступа = Неопределено) Экспорт 	
	Если ПривилегированныйРежим() И ОбщегоНазначения.РежимОтладки() Тогда
		ВызватьИсключение НСтр("ru = 'Проверка доступа на уровне записей производится в привилегированном режиме';
								|en = 'Access on record level is checked in the privileged mode'");
	КонецЕсли; 	
	
	ВидыПрав = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных();
	РазделыДанных = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	
	// Для рабочего времени не проверяем ограничения на уровне записей.
	// достаточно наличия роли-флага
	Если РазделДанных = РазделыДанных.РабочееВремя 
		И УправлениеДоступом.ЕстьРоль(Метаданные.Роли.УтверждениеДокументовУчетаВремени.Имя) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// Просмотр кадровых данных доступен всегда, считаем что если доступен документ (определяется отдельной ролью),
	// то доступны и кадровые данные
	Если ВидПрава = ВидыПрав.Просмотр
		И РазделДанных = РазделыДанных.КадровыеДанные Тогда
			
		Возврат Истина;
	КонецЕсли;	
	
	Если ЗначенияДоступа = Неопределено Тогда
		ЗначенияДоступа = НовыйЗначенияДоступа();
	КонецЕсли;	
	
	ЕстьПравоПоОрганизации = ЕстьПраваНаДоступПоОрганизации(ВидПрава, РазделДанных, ЗначенияДоступа.Организации); 
	ЕстьПравоПоФизическимЛицам = ЕстьПраваНаДоступПоФизическимЛицам(
		ВидПрава, 
		РазделДанных, 
		ЗначенияДоступа.ФизическиеЛица); 
		
	Возврат ЕстьПравоПоОрганизации И ЕстьПравоПоФизическимЛицам;
КонецФункции

// Возвращает структуру содердащую права на работу с разделом документа
// 
// 	РазделДанных - Строка - одно из значения связанных с ключом структуры, определяет раздел данных,
// 				на данные которого проверяются права
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных).
// 	ЗначенияДоступа - (см. МногофункциональныеДокументыБЗК.ЗначенияДоступа, Неопределено) - данные по которым
// 						будут определяться права на раздел (физические лица документа,  организации документа).
// 						Если не передана, то проверка будет осуществляться только по наличию ролей, семантически 
// 						дающие права на раздел, проверка с учетом ограничений на уровне записей выполняться не будет.
// 						
// Возвращаемое значение:
// 	см. НовыйПраваНаРаздел - описание раздела
//
Функция ПраваНаРаздел(РазделДанных, ЗначенияДоступа = Неопределено) Экспорт
	ВидыПрав = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных();
	
	Права = НовыйПраваНаРаздел();
	
	Если ЕстьПравоНаРаздел(ВидыПрав.Редактирование, РазделДанных, ЗначенияДоступа) Тогда
		Права.Просмотр = Истина;
		Права.Редактирование = Истина;
	ИначеЕсли ЕстьПравоНаРаздел(ВидыПрав.Просмотр, РазделДанных, ЗначенияДоступа) Тогда 
		Права.Просмотр = Истина;
		Права.Редактирование = Ложь;
	КонецЕсли;	
	
	Возврат Права;	
КонецФункции	

// Возвращает структуру с информацией о правах на раздел многофункционального документа
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * Редактирование - Булево - право на редактирование раздела
//   * Просмотр - Булево - право на просмотр раздела
//
Функция НовыйПраваНаРаздел() Экспорт
	ПраваНаРаздел = Новый Структура();
	ПраваНаРаздел.Вставить("Просмотр", Ложь);
	ПраваНаРаздел.Вставить("Редактирование", Ложь);
	
	Возврат ПраваНаРаздел;
КонецФункции

// Возвращает соответствие ключом которого является имя раздела данных, значением структура описывающая
// 			  права на раздел переданного документа
// 
// Параметры:
// 	ДокументОбъект - ОпределяемыйТип.МногофункциональныйДокументОбъектБЗК, ДанныеФормыСтруктура - документ или данные 
// 					 формы отображающие данные документа для которого нужно проверить права
// 					 
// Возвращаемое значение:
// 	Соответствие - прав на разделы данных документа -
//	 *Ключ - Строка - имя раздела. Одно из значений структуры 
//		возвращаемой методом см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных
//   *Значение - см. НовыйПраваНаРаздел - описание раздела
//
Функция ПраваНаДокумент(ДокументОбъект) Экспорт
	ПраваНаДокумент = Новый Соответствие();
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);	
	ОписаниеРазделов = МенеджерДокумента.ОписаниеРазделовДанных();
	ЗначенияДоступа = МенеджерДокумента.ЗначенияДоступа(ДокументОбъект);
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Права = ПраваНаРаздел(Раздел.Ключ, ЗначенияДоступа);
		ПраваНаДокумент.Вставить(Раздел.Ключ, Права);
	КонецЦикла;	
	
	Возврат ПраваНаДокумент;	
КонецФункции	

// Проверяет наличие права на интерактивную работу с данными раздела документа.
//
// Параметры:
// 	ДокументОбъект - ОпределяемыйТип.МногофункциональныйДокументОбъектБЗК, ДанныеФормыСтруктура - документ или данные 
// 					 формы отображающие данные документа для которого нужно проверить права
// 	ВидПрава - Строка - одно из значения связанных с ключом структуры, определяет проверяемое право
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных)
// 	РазделДанных - Строка - одно из значения связанных с ключом структуры, определяет раздел данных,
// 				на данные которого проверяются права
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных).
//
// Возвращаемое значение:
// 	Булево
//
Функция ЕстьПравоНаДокумент(ДокументОбъект, ВидПрава, РазделДанных) Экспорт 	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);	
	ЗначенияДоступа = МенеджерДокумента.ЗначенияДоступа(ДокументОбъект);
	
	Возврат ЕстьПравоНаРаздел(ВидПрава, РазделДанных, ЗначенияДоступа);
КонецФункции


// Отключает проверку утверждения при проведении документа
// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект - документ для которого нужно отключить проверку
//
Процедура ОтключитьПроверкуУтверждения(ДокументОбъект) Экспорт
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаУтвержденияОтключена", Истина);
КонецПроцедуры	

// Конструктор структуры, в которую помещаются данные документа, по которым будет
// 				выполняться проверка наличия прав на разделы данных документов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * Организации - Массив из СправочникСсылка.Организации - массив организаций, по которым
// 							будет выполняться проверка прав. 
//   * ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица -  массив физических лиц, по котоырм
// 							будет выполняться проверка прав.
// 
Функция НовыйЗначенияДоступа() Экспорт 
	Возврат Новый Структура("Организации, ФизическиеЛица", Новый Массив(), Новый Массив());
КонецФункции

// Конструктор структуры, в которую помещаются данные документа, по которым будет
// 				выполняться проверка наличия прав на разделы данных документов.
// 				Для получения физических лиц документа используется подсистема СоставДокументовЗарплатаКадры.
// 				Если документ не подключен к данной подсистеме, то использовать данный метод нельзя.
// 				
//  
// Параметры:
//  ДокументОбъект - ДокументОбъект, ДанныеФормыКоллекция - объект или данные формы отображающие данные документа,
//                   для которого нужно получить данные
// 	Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации  - массив организаций
// 					или одна организация, по которым будет выполняться проверка прав.
//
// Возвращаемое значение:
// 	- Структура - см. НовыйЗначенияДоступа - значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступаПоСоставуДокумента(ДокументОбъект, Организации = Неопределено) Экспорт 
	ЗначенияДоступа = НовыйЗначенияДоступа();
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		ЗначенияДоступа.Организации = Организации;
	ИначеЕсли ЗначениеЗаполнено(Организации) Тогда 
		ЗначенияДоступа.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	Иначе
		ЗначенияДоступа.Организации = Новый Массив;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей")
		И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда
	
		Если ТипЗнч(ДокументОбъект) = Тип("ДанныеФормыСтруктура") Тогда
			СоставДокумента = ЗарплатаКадрыСоставДокументов.СоставОбъектаПоДаннымФормы(ДокументОбъект);
		Иначе
			СоставДокумента = ЗарплатаКадрыСоставДокументов.СоставОбъекта(ДокументОбъект);	
		КонецЕсли;
			
		ЗначенияДоступа.ФизическиеЛица = СоставДокумента.ФизическиеЛица;
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ЗначенияДоступа.ФизическиеЛица, Неопределено);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
			ЗначенияДоступа.ФизическиеЛица, 
			Справочники.ФизическиеЛица.ПустаяСсылка());
			
	КонецЕсли;
	
	Возврат ЗначенияДоступа;
КонецФункции

// Добавляет записи в регистры предназначенные для определения прав на 
// 				многофункциональные документы по каждому из переданных физических лиц.
// 
// Параметры:
// 	ФизическиеЛица - Массив из СправочникСсылка.физическиеЛица - массив физических лиц, по которым будут 
//                добавлены записи в регистры
//	РежимОбновления - Булево - выставляется в Истина если метод вызывается в процесс обновления ИБ                
//
Процедура ДобавитьЗаписиРегистровПравПоФизическимЛицам(ФизическиеЛица, РежимОбновления = Ложь) Экспорт
	НаборыРегистров = Новый Массив();
	НаборыРегистров.Добавить(РегистрыСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.НачисленнаяЗарплатаПросмотрФизическиеЛица.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.ПлановыеНачисленияРедактированиеФизическиеЛица.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.ПлановыеНачисленияПросмотрФизическиеЛица.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.КадровыеДанныеРедактированиеФизическиеЛица.СоздатьНаборЗаписей());
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекущееФизическоеЛицо Из ФизическиеЛица Цикл
		НачатьТранзакцию();
		
		Для Каждого НаборТекущегоРегистра Из НаборыРегистров Цикл
			НаборТекущегоРегистра.Очистить();
			
			НаборТекущегоРегистра.Отбор.ФизическоеЛицо.Установить(ТекущееФизическоеЛицо);
			СтрокаНабора = НаборТекущегоРегистра.Добавить();
			СтрокаНабора.ФизическоеЛицо = ТекущееФизическоеЛицо;
			СтрокаНабора.ЕстьПраво = Истина;
			
			Если РежимОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборТекущегоРегистра);
			Иначе
				НаборТекущегоРегистра.Записать();
			КонецЕсли;
		КонецЦикла;		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры 

// Возвращает массив физических лиц, по которым еще не заполнены данные регистров прав
// 
// Параметры:
// 	КоличествоФизическихЛиц - Число, Неопределено - максимальное количество физических лиц, кооторые вернет данный метод
// 	                                  если не передан то количество полученных физических лиц не будет ограничено
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ФизическиеЛица - физические лица для обновления
//
Функция ФизическиеЛицаДляОбновленияРегистровПрав(КоличествоФизическихЛиц = Неопределено) Экспорт
	ФизическиеЛицаДляОбновления = Новый Массив;
	
	ТекстЗапрос = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица КАК РегистрПрав
	|		ПРАВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО РегистрПрав.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	РегистрПрав.ФизическоеЛицо ЕСТЬ NULL";
	
	Если КоличествоФизическихЛиц <> 0 Тогда
		Схема = Новый СхемаЗапроса();
		Схема.УстановитьТекстЗапроса(ТекстЗапрос);
		Схема.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = КоличествоФизическихЛиц;
		ТекстЗапрос = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапрос);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаДляОбновления.Добавить(Выборка.ФизическоеЛицо);
	КонецЦикла;	
		
	Возврат ФизическиеЛицаДляОбновления;	
КонецФункции	

// Проверяет по всем ли физическим лицам заполнены регистры прав. Если не по всем возвращает Истина
// 
// Параметры:
// 	ФизическиеЛица - Массив из СправочникСсылка.ФизическиеЛица, Неопределено - физические лица для которых нужно
// 						проверить заполненность регистров. Если не передан то будет проверка для всех физических лиц
// Возвращаемое значение:
// 	Булево -
//
Функция РегистрыПравПоФизическимЛицамЗаполнены(ФизическиеЛица = Неопределено) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РегистрПрав.ФизическоеЛицо) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица КАК РегистрПрав
	|ГДЕ
	|	&УсловиеФизическиеЛица";
	
	Если ФизическиеЛица = Неопределено Тогда
		ТекстУсловия = "ИСТИНА";
		
		ЗапросКоличества = Новый Запрос();
		ЗапросКоличества.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ФизическиеЛица.Ссылка) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = ЗапросКоличества.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		КоличествоПроверямыхФизическихЛиц = 0;
		Если Выборка.Следующий() Тогда
			КоличествоПроверямыхФизическихЛиц = Выборка.КоличествоЗаписей;
		КонецЕсли;
	Иначе
		ТекстУсловия = "РегистрПрав.ФизическоеЛицо  В (&ФизическиеЛица)";
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		КоличествоПроверямыхФизическихЛиц = ФизическиеЛица.Количество();	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическиеЛица", ТекстУсловия);
	
	КоличествоЗаписейВРегистрах = 0;
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		КоличествоЗаписейВРегистрах = Выборка.КоличествоЗаписей;
	КонецЕсли;	
	
	Возврат КоличествоЗаписейВРегистрах = КоличествоПроверямыхФизическихЛиц;
КонецФункции	 

// Добавляет записи в регистры предназначенные для определения прав на 
// 				многофункциональные документы по каждой из переданных организаций.
// 
// Параметры:
// 	Организации - Массив из СправочникСсылка.Организации - массив организаций, по которым будут 
//                добавлены записи в регистры
//	РежимОбновления - Булево - выставляется в Истина если метод вызывается в процесс обновления ИБ                
//
Процедура ДобавитьЗаписиРегистровПравПоОрганизациям(Организации, РежимОбновления = Ложь) Экспорт
	НаборыРегистров = Новый Массив();
	НаборыРегистров.Добавить(РегистрыСведений.НачисленнаяЗарплатаРедактированиеОрганизации.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.НачисленнаяЗарплатаПросмотрОрганизации.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.ПлановыеНачисленияРедактированиеОрганизации.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.ПлановыеНачисленияПросмотрОрганизации.СоздатьНаборЗаписей());
	НаборыРегистров.Добавить(РегистрыСведений.КадровыеДанныеРедактированиеОрганизации.СоздатьНаборЗаписей());
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекущаяОрганизация Из Организации Цикл
		НачатьТранзакцию();
		
		Для Каждого НаборТекущегоРегистра Из НаборыРегистров Цикл
			НаборТекущегоРегистра.Очистить();
			
			НаборТекущегоРегистра.Отбор.Организация.Установить(ТекущаяОрганизация);
			СтрокаНабора = НаборТекущегоРегистра.Добавить();
			СтрокаНабора.Организация = ТекущаяОрганизация;
			СтрокаНабора.ЕстьПраво = Истина;
			
			Если РежимОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборТекущегоРегистра);
			Иначе
				НаборТекущегоРегистра.Записать();
			КонецЕсли;
		КонецЦикла;	
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры 

// Возвращает массив организаций, по которым еще не заполнены данные регистров прав
// 
// Параметры:
// 	КоличествоОрганизаций - Число, Неопределено - максимальное количество форганизаций, кооторые вернет данный метод
// 	                                  если не передан то количество полученных организаций не будет ограничено
// Возвращаемое значение:
// 	Массив из СправочникСсылка.Организации - организации для обновления
//
Функция ОрганизацииДляОбновленияРегистровПрав(КоличествоОрганизаций = Неопределено) Экспорт
	ОрганизацииДляОбновления = Новый Массив;
	
	ТекстЗапрос = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачисленнаяЗарплатаРедактированиеОрганизации КАК РегистрПрав
	|		ПО Организации.Ссылка = РегистрПрав.Организация
	|ГДЕ
	|	РегистрПрав.Организация ЕСТЬ NULL";
	
	Если КоличествоОрганизаций <> 0 Тогда
		Схема = Новый СхемаЗапроса();
		Схема.УстановитьТекстЗапроса(ТекстЗапрос);
		Схема.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = КоличествоОрганизаций;
		ТекстЗапрос = Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапрос);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ОрганизацииДляОбновления.Добавить(Выборка.Организация);
	КонецЦикла;	
		
	Возврат ОрганизацииДляОбновления;	
КонецФункции	

// Проверяет по всем ли организациям заполнены регистры прав. Если не по всем возвращает Истина
// 
// Параметры:
// 	Организации - Массив из СправочникСсылка.Организации, Неопределено - организации для которых нужно
// 						проверить заполненность регистров. Если не передан то будет проверка для всехорганизаций
// Возвращаемое значение:
// 	Булево -
//
Функция РегистрыПравПоОрганизациямЗаполнены(Организации = Неопределено) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РегистрПрав.Организация) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.НачисленнаяЗарплатаРедактированиеОрганизации КАК РегистрПрав
	|ГДЕ
	|	&УсловиеОрганизации";
	
	Если Организации = Неопределено Тогда
		ТекстУсловия = "ИСТИНА";
		
		ЗапросКоличества = Новый Запрос();
		ЗапросКоличества.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Организации.Ссылка) КАК КоличествоЗаписей
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = ЗапросКоличества.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		КоличествоПроверямыхОрганизаций = 0;
		Если Выборка.Следующий() Тогда
			КоличествоПроверямыхОрганизаций = Выборка.КоличествоЗаписей;
		КонецЕсли;
	Иначе
		КоличествоПроверямыхОрганизаций = Организации.Количество();	
		Запрос.УстановитьПараметр("Организации", Организации);
		ТекстУсловия = "РегистрПрав.Организация  В (&Организации)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОрганизации", ТекстУсловия);
	
	КоличествоЗаписейВРегистрах = 0;
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		КоличествоЗаписейВРегистрах = Выборка.КоличествоЗаписей;
	КонецЕсли;	
	
	Возврат КоличествоЗаписейВРегистрах = КоличествоПроверямыхОрганизаций;
КонецФункции	 

// Заполняет вспомогаетльные регистры прав для многофункциональных документов,
// 			  в зависимсоти от настроек системы. Можно использовать для реализации асинхронного
// 			  изменения настроек на уровне представления
// 
// Параметры:
// 	ИспользуетсяОграничениеПоОрганизации - Булево - признак использования ограничения по организациям
// 	ИспользуетсяОграничениеПоФизическимЛицам - Булево - признак использования ограничения по физическим лицам
//
Процедура ЗаполнитьРегистрыПравФизическихЛицПриИзмененииНастроек(ИспользуетсяОграничениеПоФизическимЛицам) Экспорт
	 Если ИспользуетсяОграничениеПоФизическимЛицам
	 	И Не РегистрыПравПоФизическимЛицамЗаполнены() Тогда
			
		ФизическиеЛицаДляЗаполнения = ФизическиеЛицаДляОбновленияРегистровПрав();
		ДобавитьЗаписиРегистровПравПоФизическимЛицам(ФизическиеЛицаДляЗаполнения);
	КонецЕсли;		
КонецПроцедуры	


// Адаптер для механизмов формы обслуживающих многофункциональные документы. Возвращает описание многофункционального
// документа в предыдущем формате.
// 
// Параметры:
// 	Ссылка - ДокументСсылка - ссылка на документ. Если передан не многофункциональный документ, то в результате будет 
// 								возвращено Неопределено
// Возвращаемое значение:
//   См. ЗарплатаКадрыРасширенныйКлиентСервер.ОписаниеМногофункциональногоДокумента, Неопределено - описание документы 
//
Функция ОписаниеМногофункциональногоДокументаПредыдущийФормат(Ссылка) Экспорт
	ВсеРазделы = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	
	МетаданныеДокумента = Ссылка.Метаданные();
	Тип = Тип("ДокументОбъект." + МетаданныеДокумента.Имя);
	Если Не Метаданные.ОпределяемыеТипы.МногофункциональныйДокументОбъектБЗК.Тип.СодержитТип(Тип) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Описание = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ОписаниеРазделовДанных();
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		Описание.Количество() = 2,
		Нстр("ru = 'Получение описания многофункционального документа поддерживается только для документов имеющих 2 раздела. ';
			|en = 'Getting a multifunctional document details is only supported for documents with 2 sections. '"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		Описание[ВсеРазделы.КадровыеДанные] <> Неопределено,
		Нстр("ru = 'Получение описания многофункционального документа поддерживается только для документов содержащих раздел ""Кадровые данные""';
			|en = 'Getting a multifunctional document details is only supported for documents containing the ""HR data"" section'"));
		
	ОписаниеСтарыйФормат = ЗарплатаКадрыРасширенныйКлиентСервер.ОписаниеМногофункциональногоДокумента();	
	Для Каждого Раздел Из Описание Цикл
		Если Раздел.Ключ = ВсеРазделы.КадровыеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если Раздел.Ключ = ВсеРазделы.НачисленнаяЗарплата Тогда
			ОписаниеСтарыйФормат.ВидУчета = "НачисленнаяЗарплата";	
		ИначеЕсли Раздел.Ключ = ВсеРазделы.ПлановыеНачисления Тогда
			ОписаниеСтарыйФормат.ВидУчета = "ПлановыеНачисления";		 
		ИначеЕсли Раздел.Ключ = ВсеРазделы.РабочееВремя Тогда
			ОписаниеСтарыйФормат.ВидУчета = "РабочееВремя";	
		Иначе
			ВызватьИсключение НСтр("ru = 'Получение описания многофункционального документа поддерживается только для 	
			|документов вторым разделов является один из следующих: ""НачисленнаяЗарплата"", ""ПлановыеНачисления"", ""РабочееВремя"".';
			|en = 'Getting a multifunctional document details is only supported for 	
			|documents with one of the following second sections: ""НачисленнаяЗарплата"", ""ПлановыеНачисления"", ""РабочееВремя"".'")
		КонецЕсли;
				
		ОписаниеСтарыйФормат.ВторойОтветственный = Раздел.Значение.РеквизитОтветсвенный;
		ОписаниеСтарыйФормат.РеквизитСостояние = Раздел.Значение.РеквизитСостояние;
		ОписаниеСтарыйФормат.СообщениеДокументНеУтвержден = Раздел.Значение.СообщениеДокументНеУтвержден;
	КонецЦикла;	
	
	Возврат ОписаниеСтарыйФормат;
КонецФункции	

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт	
	Списки.Вставить(Метаданные.РегистрыСведений.КадровыеДанныеРедактированиеОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КадровыеДанныеРедактированиеФизическиеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияПросмотрОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияПросмотрФизическиеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияРедактированиеОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияРедактированиеФизическиеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НачисленнаяЗарплатаПросмотрОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НачисленнаяЗарплатаПросмотрФизическиеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НачисленнаяЗарплатаРедактированиеОрганизации, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
// 
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления - таблица обработчиков
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.12";
	Обработчик.Процедура = "МногофункциональныеДокументыБЗК.ДобавитьРолиНаДокументы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.22.15";
	Обработчик.Процедура = "МногофункциональныеДокументыБЗК.ЗаполнитьРегистрыПравПриОбновлении";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.124";
	Обработчик.Процедура = "МногофункциональныеДокументыБЗК.ОбновитьФлагИспользованияМногофункциональности";
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
#Область ОбработчикиПодписокНаСобытия	
		
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 	
		Возврат;	
	КонецЕсли;
	
	ПроверитьПраваНаУтверждениеДокумента(Источник, Отказ);
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
		И ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда 
		
		СброситьРеквизитыУтвержденияДокумента(Источник);
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокумента(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	Если ПривилегированныйРежим() Тогда
		Возврат;	
	КонецЕсли;	
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Источник.Ссылка);
	ОписаниеРазделов = МенеджерДокумента.ОписаниеРазделовДанных();
	ПраваНаДокумента = ПраваНаДокумент(Источник);
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Если Не ЗначениеЗаполнено(Раздел.Значение.РеквизитСостояние) 
			Или Раздел.Значение.РеквизитСостояние = "Проведен" Тогда
			
			Продолжить;
		КонецЕсли;
		Источник[Раздел.Значение.РеквизитСостояние] = ПраваНаДокумента[Раздел.Ключ].Редактирование;
	КонецЦикла;	
КонецПроцедуры

Процедура МногофункциональныеДокументыБЗКПроверкаЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	ПроверитьПроведениеНеУтвержденногоДокумента(Источник, Отказ);
КонецПроцедуры

Процедура ПриКопированииДокумента(Источник, ОбъектКопирования) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;	
	Если ПривилегированныйРежим() Или Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Источник.Ссылка);
	ОписаниеРазделов = МенеджерДокумента.ОписаниеРазделовДанных();
	ПраваНаДокумент = ПраваНаДокумент(Источник);
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Если ЗначениеЗаполнено(Раздел.Значение.РеквизитСостояние)
			И Раздел.Значение.РеквизитСостояние <> "Проведен" 
			И Не ПраваНаДокумент[Раздел.Ключ].Редактирование Тогда
				
			Источник[Раздел.Значение.РеквизитСостояние] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрыПравФизическогоЛицаПриЗаписи(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	Если ИспользуютсяРегистрыПравПоФизическимЛицам() 
		И Не РегистрыПравПоФизическимЛицамЗаполнены(ФизическиеЛица) Тогда
		
		ФизическиеЛицаДляЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
		ДобавитьЗаписиРегистровПравПоФизическимЛицам(ФизическиеЛицаДляЗаписи);
	КонецЕсли;		
КонецПроцедуры

Процедура ЗаполнитьРегистрыПравОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
	Если ИспользуютсяРегистрыПравПоОрганизациям() 
		И Не РегистрыПравПоОрганизациямЗаполнены(Организации) Тогда
	
		ОрганизацииДляЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
		ДобавитьЗаписиРегистровПравПоОрганизациям(ОрганизацииДляЗаписи);
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьРегистрыПравФизическихЛицПриЗаписи(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРегистрыПравФизическихЛицПриИзмененииНастроек(Источник.Значение);
КонецПроцедуры

Процедура ЗаполнитьРегистрыПравОрганизацийПриЗаписи(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ОграничиватьДоступНаУровнеЗаписей.Получить()
		И Константы.ИспользоватьМногофункциональностьДокументов.Получить()
		И Не РегистрыПравПоОрганизациямЗаполнены() Тогда
		
		ОрганизацииДляОбновления = ОрганизацииДляОбновленияРегистровПрав();
		ДобавитьЗаписиРегистровПравПоОрганизациям(ОрганизацииДляОбновления);				
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
	
#Область РеализацияОбработчиковОбновления
	
Процедура ДобавитьРолиНаДокументы() Экспорт
	ПравилаДобавленияРолей = Новый Соответствие();
	
	ДополняемаяРоль = "ДобавлениеИзменениеНачисленнойЗарплатыРасширенная";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("РедактированиеНачисленнойЗарплатыВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ДобавлениеИзменениеНачисленнойЗарплаты";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("РедактированиеНачисленнойЗарплатыВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ЧтениеНачисленнойЗарплатыРасширенная";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("ПросмотрНачисленнойЗарплатыВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ЧтениеНачисленнойЗарплаты";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("ПросмотрНачисленнойЗарплатыВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("РедактированиеПлановыхНачисленийВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ЧтениеДанныхДляНачисленияЗарплатыРасширенная";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("ПросмотрПлановыхНачисленийВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ДобавлениеИзменениеРабочегоВремени";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("УтверждениеДокументовУчетаВремени");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	ДополняемаяРоль = "ДобавлениеИзменениеДанныхСотрудников";
	НовыеРоли = Новый Массив();
	НовыеРоли.Добавить(ДополняемаяРоль);
	НовыеРоли.Добавить("РедактированиеКадровыхДанныхВДокументах");
	ПравилаДобавленияРолей.Вставить(ДополняемаяРоль, НовыеРоли);
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ПравилаДобавленияРолей);	
КонецПроцедуры		

Процедура ЗаполнитьРегистрыПравПриОбновлении() Экспорт
	Если ИспользуютсяРегистрыПравПоФизическимЛицам() Тогда
		ФизическиеЛицаДляОбновления = ФизическиеЛицаДляОбновленияРегистровПрав();
		ДобавитьЗаписиРегистровПравПоФизическимЛицам(ФизическиеЛицаДляОбновления, Истина);
	КонецЕсли;
			
	Если ИспользуютсяРегистрыПравПоОрганизациям() Тогда
		ОрганизацииДляОбновления = ОрганизацииДляОбновленияРегистровПрав();
		ДобавитьЗаписиРегистровПравПоОрганизациям(ОрганизацииДляОбновления, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьФлагИспользованияМногофункциональности() Экспорт 
	Если Не Константы.ИспользоватьМногофункциональностьДокументов.Получить() Тогда
		ЗарплатаКадрыРасширенный.УстановитьИспользованиеМногофункциональностиВДокументах();
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

// Описание - возвращает регистр по которому будет осуществляться проверка доступа по физическим лицам.
//
// Параметры:
// 	ВидПрава - Строка - одно из значения связанных с ключом структуры, определяет проверяемое право
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных)
// 	РазделДанных - Строка - одно из значения связанных с ключом структуры, определяет раздел данных,
// 				на данные которого проверяются права
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных).
// 				
// Возвращаемое значение:
// 		- ОбъектМетаданныхРегистрСведений - метаданные регистра сведений
// 		- Неопределено - в случае если для запрашиваемого права на запрашиваемый раздел нет регистра
//
Функция РегистрДляПроверкиДоступаПоФизическимЛицам(ВидПрава, РазделДанных)
	ВидыПрав = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных();
	РазделыДанных = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	
	Если РазделДанных = РазделыДанных.КадровыеДанные
		И ВидПрава = ВидыПрав.Редактирование Тогда
			
		Возврат Метаданные.РегистрыСведений.КадровыеДанныеРедактированиеФизическиеЛица;
	ИначеЕсли РазделДанных = РазделыДанных.НачисленнаяЗарплата
		И ВидПрава = ВидыПрав.Редактирование Тогда	
		
		Возврат Метаданные.РегистрыСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица;
	ИначеЕсли РазделДанных = РазделыДанных.НачисленнаяЗарплата
		И ВидПрава = ВидыПрав.Просмотр Тогда	
		
		Возврат Метаданные.РегистрыСведений.НачисленнаяЗарплатаПросмотрФизическиеЛица;
	ИначеЕсли РазделДанных = РазделыДанных.ПлановыеНачисления
		И ВидПрава = ВидыПрав.Редактирование Тогда	
		
		Возврат Метаданные.РегистрыСведений.ПлановыеНачисленияРедактированиеФизическиеЛица;
	ИначеЕсли РазделДанных = РазделыДанных.ПлановыеНачисления
		И ВидПрава = ВидыПрав.Просмотр Тогда	
		
		Возврат Метаданные.РегистрыСведений.ПлановыеНачисленияПросмотрФизическиеЛица;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

// Описание - возвращает регистр по которому будет осуществляться проверка доступа по организации.
//
// Параметры:
// 	ВидПрава - Строка - одно из значения связанных с ключом структуры, определяет проверяемое право
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных)
// 	РазделДанных - Строка - одно из значения связанных с ключом структуры, определяет раздел данных,
// 				на данные которого проверяются права
// 				(см. МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных).
// 				
// Возвращаемое значение:
// 		- ОбъектМетаданныхРегистрСведений - метаданные регистра сведений
// 		- Неопределено - в случае если для запрашиваемого права на запрашиваемый раздел нет регистра
//
Функция РегистрДляПроверкиДоступаПоОрганизации(ВидПрава, РазделДанных)
	ВидыПрав = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных();
	РазделыДанных = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	
	Если РазделДанных = РазделыДанных.КадровыеДанные
		И ВидПрава = ВидыПрав.Редактирование Тогда
			
		Возврат Метаданные.РегистрыСведений.КадровыеДанныеРедактированиеОрганизации
	ИначеЕсли РазделДанных = РазделыДанных.НачисленнаяЗарплата
		И ВидПрава = ВидыПрав.Редактирование Тогда	
		
		Возврат Метаданные.РегистрыСведений.НачисленнаяЗарплатаРедактированиеОрганизации;
	ИначеЕсли РазделДанных = РазделыДанных.НачисленнаяЗарплата
		И ВидПрава = ВидыПрав.Просмотр Тогда	
		
		Возврат Метаданные.РегистрыСведений.НачисленнаяЗарплатаПросмотрОрганизации;
	ИначеЕсли РазделДанных = РазделыДанных.ПлановыеНачисления
		И ВидПрава = ВидыПрав.Редактирование Тогда	
		
		Возврат Метаданные.РегистрыСведений.ПлановыеНачисленияРедактированиеОрганизации;
	ИначеЕсли РазделДанных = РазделыДанных.ПлановыеНачисления
		И ВидПрава = ВидыПрав.Просмотр Тогда	
		
		Возврат Метаданные.РегистрыСведений.ПлановыеНачисленияПросмотрОрганизации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	
	
Функция ЕстьПраваНаДоступПоОрганизации(ВидПрава, РазделДанных, Организации)
	РегистрПравПоОрганизации = РегистрДляПроверкиДоступаПоОрганизации(ВидПрава, РазделДанных);
	
	Если РегистрПравПоОрганизации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ПараметрыДоступа = ПараметрыДоступа("Чтение", РегистрПравПоОрганизации, "Организация, ЕстьПраво");	
	
	Если Не ПараметрыДоступа.Доступность Тогда
		Возврат Ложь;
	ИначеЕсли Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() 
		Или Не ПараметрыДоступа.ОграничениеУсловием Тогда 
		
		Возврат Истина;
	КонецЕсли;	
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		Организации, 
		Справочники.Организации.ПустаяСсылка());		
		
	Если Организации.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат ДанныеРегистраПравДоступны(РегистрПравПоОрганизации, Организации);		
КонецФункции	
		
Функция ЕстьПраваНаДоступПоФизическимЛицам(ВидПрава, РазделДанных, ФизическиеЛица)
	
	РегистрПравПоФизическимЛицам = РегистрДляПроверкиДоступаПоФизическимЛицам(ВидПрава, РазделДанных);
	
	Если РегистрПравПоФизическимЛицам = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДоступа = ПараметрыДоступа("Чтение", РегистрПравПоФизическимЛицам, "ФизическоеЛицо, ЕстьПраво");	
	
	Если Не ПараметрыДоступа.Доступность Тогда
		Возврат Ложь;
	ИначеЕсли Не ПараметрыДоступа.ОграничениеУсловием 
		Или Не ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица") Тогда 
			
		Возврат Истина;
	КонецЕсли;	
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ФизическиеЛица, 
		Справочники.ФизическиеЛица.ПустаяСсылка());		
		
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
			
	Возврат ДанныеРегистраПравДоступны(РегистрПравПоФизическимЛицам, ФизическиеЛица);		
КонецФункции	

Функция ДанныеРегистраПравДоступны(РегистрПрав, КоллекцияЗначенийДоступа)
	Если ПривилегированныйРежим() И ОбщегоНазначения.РежимОтладки() Тогда
		ВызватьИсключение НСтр("ru = 'Проверка доступа на уровне записей производится в привилегированном режиме';
								|en = 'Access on record level is checked in the privileged mode'");
	КонецЕсли; 	
		
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ИСТИНА КАК ЕстьДоступ
	|ИЗ
	|   #Регистр КАК Регистр
	|ГДЕ
	|   Регистр.ЗначениеДоступа_ В(&ЗначенияДоступа)
	|
	|ИМЕЮЩИЕ
	|   КОЛИЧЕСТВО(Регистр.ЕстьПраво) = &КоличествоЗначенийДоступа";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Регистр", РегистрПрав.ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗначениеДоступа_", РегистрПрав.Измерения[0].Имя);
		
	Запрос.УстановитьПараметр("ЗначенияДоступа", КоллекцияЗначенийДоступа);
	Запрос.УстановитьПараметр("КоличествоЗначенийДоступа", КоллекцияЗначенийДоступа.Количество());
		
	Возврат Не Запрос.Выполнить().Пустой();		
КонецФункции
	
Функция ИспользуютсяРегистрыПравПоФизическимЛицам()
	Возврат ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписейФизическиеЛица");	
КонецФункции

Функция ИспользуютсяРегистрыПравПоОрганизациям()
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") 
		И ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей");	
КонецФункции
	
Функция СостоянияРазделовДокументаВИБ(ДокументСсылка, ОписаниеРазделов)
	ПолучаемыеРеквизита = Новый Массив();
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Если Раздел.Значение.РеквизитСостояние <> Неопределено Тогда
			ПолучаемыеРеквизита.Добавить(Раздел.Значение.РеквизитСостояние);
		КонецЕсли;
	КонецЦикла;		
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		СостоянияРазделов = Новый Структура();
		Для Каждого Реквизит Из ПолучаемыеРеквизита Цикл
			СостоянияРазделов.Вставить(Реквизит, Ложь);
		КонецЦикла;		
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		СостоянияРазделов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ПолучаемыеРеквизита);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СостоянияРазделов;
КонецФункции
		
Процедура ПроверитьПраваНаУтверждениеДокумента(ДокументОбъект, Отказ)
	Если ПривилегированныйРежим() Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ОписаниеРазделовДанных = МенеджерДокумента.ОписаниеРазделовДанных(); 

	ПравоРедактирование = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных().Редактирование;	
	ПредыдущееСостояниеДокумента = Неопределено;
	ЗначенияДоступа = Неопределено;
		
	Для Каждого ОписаниеРаздела Из ОписаниеРазделовДанных Цикл
		Если ОписаниеРаздела.Значение.РеквизитСостояние = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		ТребуетсяПроверка = Ложь;	
		Если ОписаниеРаздела.Значение.РеквизитСостояние = "Проведен" 
			Или ДокументОбъект[ОписаниеРаздела.Значение.РеквизитСостояние] Тогда
			
			ТребуетсяПроверка = Истина;
		ИначеЕсли Не ДокументОбъект[ОписаниеРаздела.Значение.РеквизитСостояние]Тогда
			Если ПредыдущееСостояниеДокумента = Неопределено Тогда
				ПредыдущееСостояниеДокумента = СостоянияРазделовДокументаВИБ(ДокументОбъект.Ссылка, ОписаниеРазделовДанных);
			КонецЕсли;
			ТребуетсяПроверка = ПредыдущееСостояниеДокумента[ОписаниеРаздела.Значение.РеквизитСостояние];
		КонецЕсли;	
			
		Если ТребуетсяПроверка Тогда
			Если ЗначенияДоступа = Неопределено Тогда
				ЗначенияДоступа	= МенеджерДокумента.ЗначенияДоступа(ДокументОбъект);
			КонецЕсли;	
			
			Если Не ЕстьПравоНаРаздел(ПравоРедактирование, ОписаниеРаздела.Ключ, ЗначенияДоступа) Тогда
				ТекстСообщения = НСтр("ru = '%1 - недостаточно прав для работы с утвержденным документом.';
										|en = '%1 - insufficient rights to work with the confirmed document.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект);
				ВызватьИсключение(ТекстСообщения);	
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПроверкаУтвержденияОтключена(ДокументОбъект)
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаУтвержденияОтключена")
		И ДокументОбъект.ДополнительныеСвойства.ПроверкаУтвержденияОтключена Тогда
			
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	
	

Процедура ПроверитьПроведениеНеУтвержденногоДокумента(ДокументОбъект, Отказ)
	Если ПривилегированныйРежим() 
		Или ПроверкаУтвержденияОтключена(ДокументОбъект) Тогда
		
		Возврат;
	КонецЕсли;	
	
	ПравоРедактирование = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных().Редактирование;	
	
	ЗначенияДоступа = Неопределено;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ОписаниеРазделовДанных = МенеджерДокумента.ОписаниеРазделовДанных();	
	Для Каждого ОписаниеРаздела Из ОписаниеРазделовДанных Цикл
		Если ОписаниеРаздела.Значение.ТребуетсяУтверждениеПриПроведении 
			И Не ДокументОбъект[ОписаниеРаздела.Значение.РеквизитСостояние] Тогда
				
			Если ЗначенияДоступа = Неопределено Тогда
				ЗначенияДоступа = МенеджерДокумента.ЗначенияДоступа(ДокументОбъект);
			КонецЕсли;
				
			Если ЕстьПравоНаРаздел(ПравоРедактирование, ОписаниеРаздела.Ключ, ЗначенияДоступа) Тогда	
				ТекстСообщения = ОписаниеРаздела.Значение.СообщениеДокументНеУтвержден;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект, ОписаниеРаздела.Значение.РеквизитСостояние, , Отказ);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	
	
Процедура СброситьРеквизитыУтвержденияДокумента(ДокументОбъект)
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
	ОписаниеРазделов = МенеджерДокумента.ОписаниеРазделовДанных();
	
	Для Каждого Раздел Из ОписаниеРазделов Цикл
		Если ЗначениеЗаполнено(Раздел.Значение.РеквизитСостояние)
			И Раздел.Значение.РеквизитСостояние <> "Проведен" Тогда
				
			ДокументОбъект[Раздел.Значение.РеквизитСостояние] = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

