
#Область СлужебныйПрограммныйИнтерфейс

Процедура СоздатьВТНастройкиРасчетаРезервовОтпусков(МенеджерВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Организация КАК Организация,
	|	Настройки.НачалоПериода КАК НачалоПериода,
	|	Настройки.КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВТНастройкиРасчетаРезервовПоОплатеТруда
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК Настройки
	|ГДЕ
	|	НЕ Настройки.ПометкаУдаления
	|	И Настройки.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск)";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзДругихПодсистем

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	РезервыПоОплатеТрудаБазовый.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "065def23-4783-45a9-81a0-fd531458035e", Метаданные.Документы.РезервыПоОплатеТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0410336e-bddb-4ec2-a329-61dd1de5dba2", Метаданные.Справочники.НастройкиРасчетаРезервовПоОплатеТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "bd36cd62-1a0e-4528-bb58-3cc0688cdbc2", Метаданные.Справочники.ВидыРасчетовРезервовПоОплатеТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "b910b00b-3904-4d67-beee-5203aa92a90d", Метаданные.Справочники.ПоказателиРасчетаРезервовПоОплатеТруда);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	РезервыПоОплатеТрудаБазовый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	Списки.Вставить(Метаданные.Документы.РезервыПоОплатеТруда, Истина);
	Списки.Вставить(Метаданные.Справочники.НастройкиРасчетаРезервовПоОплатеТруда, Истина);
	Списки.Вставить(Метаданные.Справочники.ВидыРасчетовРезервовПоОплатеТруда, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НазначениеПоказателейРасчетаРезервов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПоказателейРасчетаРезервов, Истина);
	
КонецПроцедуры

#КонецОбласти

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	РезервыПоОплатеТрудаБазовый.НастроитьВариантыОтчетов(Настройки);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СправкаРасчетРезервыОтпусков);
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовРезервовПоОплатеТрудаВБухучете);
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВБюджетномУчреждении");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовРезервовПоОплатеТрудаВБухучете, "ОтражениеВБухучетеРезервовПоОплатеТрудаПоИсточникам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВХозрасчетнойОрганизации");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ДанныеДляОтраженияРасчетовРезервовПоОплатеТрудаВБухучете, "ОтражениеВБухучетеРезервовПоОплатеТруда");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
КонецПроцедуры

Процедура ДополнитьФормуЭлементаСправочникаОрганизации(Форма, ИмяГруппыДляВставки = "ГруппаНастройкиРасчетаРезервовПоОплатеТруда") Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиРасчетаРезервовОтпусков) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРезервыПоОплатеТруда") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЮридическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	Если Не ЭтоЮридическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "НастройкиРасчетаРезервовПоОплатеТруда";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru = 'Резервы по оплате труда';
										|en = 'Payroll funds'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппыДляВставки);
	Если Форма.Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФормы);
		Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРедактированияСреднегоЗаработка(ОписаниеОбъекта) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВидВремени", Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное);
	Отбор.Вставить("ВидОтпуска", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеОбъекта.ВидРасчетаРезерва, "ВидРасчета"));
	
	Начисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
		Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска,
		Отбор);
		
	Если Начисления.Количество() <> 0 Тогда
		ВидРасчетаОсновногоОтпуска = Начисления[0];
	КонецЕсли;
	
	ДатаНачалаСобытия = КонецМесяца(ОписаниеОбъекта.ПериодРегистрации)+1;
	
	ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
	ПараметрыРедактирования.ДокументСсылка          = ОписаниеОбъекта.Ссылка;
	ПараметрыРедактирования.Сотрудник               = ОписаниеОбъекта.Сотрудник;
	ПараметрыРедактирования.Организация             = ОписаниеОбъекта.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия       = ДатаНачалаСобытия;
	ПараметрыРедактирования.Начисление              = ВидРасчетаОсновногоОтпуска;
	ПараметрыРедактирования.НачалоПериодаРасчета    = ОписаниеОбъекта.ДатаНачала;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = ОписаниеОбъекта.ДатаОкончания;
	
	СпособыРасчета = Новый Массив;
	Если ОстаткиОтпусков.ОтпускСотрудникаВРабочихДняхПоДоговору(ОписаниеОбъекта.Сотрудник, ДатаНачалаСобытия) Тогда
		ОписаниеОбъекта.Вставить("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке);
		СпособыРасчета.Добавить(Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке);
	Иначе
		ОписаниеОбъекта.Вставить("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням);
		СпособыРасчета.Добавить(Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням);
	КонецЕсли;
	
	ПараметрыРедактирования.СпособыРасчета = СпособыРасчета;
	
	ПараметрыРедактирования.ФиксПериодРасчета = ЗначениеЗаполнено(ОписаниеОбъекта.ДатаНачала)
													ИЛИ ЗначениеЗаполнено(ОписаниеОбъекта.ДатаОкончания);
		
	Возврат ПараметрыРедактирования;
	
КонецФункции

Функция ПараметрыРедактированияСохраняемогоДенежногоСодержания(Сотрудник, ДатаРасчета, Ссылка, Организация) Экспорт
	
	СтруктураОбъекта = Новый Структура();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		СтруктураОбъекта = Модуль.ПодготовитьСтруктуруОбъектаДляРасчетаРезервовОтпусков(Сотрудник, Организация, ДатаРасчета);
		СтруктураОбъекта.Вставить("Ссылка", 	 Ссылка);
		СтруктураОбъекта.Вставить("РасчетРезерваОтпусков", 	Истина);
		СтруктураОбъекта.Вставить("ДенежноеСодержание", Неопределено);
		СтруктураОбъекта.Вставить("ДенежноеСодержаниеФактическиеНачисления", Неопределено);
		СтруктураОбъекта.Вставить("КоэффициентыРаспределения", Неопределено);
		СтруктураОбъекта.Вставить("КоэффициентыРаспределенияДенежногоСодержания", Неопределено);
	КонецЕсли;

	Возврат СтруктураОбъекта;
	
КонецФункции

Функция ЗапрашиваемыеДанныеВидаРасчетаРезерва() Экспорт 
	
	ЗапрашиваемыеДанныеСтрока = 
		"Резерв,
		|ВидРасчета,
		|ФормулаРасчета,
		|ФормулаРасчетаДляВыполнения,
		|ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|КоличествоМесяцевРасчетаСреднегоЗаработка,
		|Рассчитывается,
		|СпособРасчета,
		|ИспользоватьСобственнуюФормулуРасчета,
		|НазначениеПоказателя,
		|ИспользованиеПериода,
		|ТребуетсяРасчетБазы,
		|ЭтоРасчетОтпуска,
		|КоличествоПостоянныхПоказателей,
		|КоличествоПоказателейИспользуемыхПриРасчете,
		|КоличествоОтображаемыхПоказателей";
		
	Возврат ЗапрашиваемыеДанныеСтрока;
	
КонецФункции

// Получает информацию о показателях расчета резервов.
//
// Параметры:
//	- Показатели - массив показателей расчета резервов.
//
// Возвращаемое значение - соответствие, ключ - показатель, 
//	значение - структура сведений о показателе с полями:
//	- СпособВвода - способ ввода показателя (Перечисление СпособыВводаЗначенийПоказателейРасчетаЗарплаты).
//	- ТипПоказателя - Описание типов. "Настоящий" тип показателя, используемый при вводе 
//							значений показателя в кадровых документах, штатном расписании и других 
//							документах ввода значений.
//	- ТипПоказателяПриРасчете - Описание типов. Тип при вводе/редактировании числовых 
//								значения показателя в документах начисления.
//	- Валюта
//	- ЗначениеРассчитываетсяАвтоматически
//	- СпособПримененияЗначений
//	- СпособВводаЗначений
//	- Наименование
//	- ОтображатьВДокументахНачисления.
//
Функция СведенияОПоказателяхРасчетаРезервов(Показатели) Экспорт
	
	СведенияОПоказателях = Новый Соответствие;
	
	ОписаниеСтруктурыПараметров = 
	"ЗначениеРассчитываетсяАвтоматически,
	|Идентификатор,
	|НазначениеПоказателя,
	|СпособПримененияЗначений,
	|СпособВводаЗначений,
	|Предопределенный,
	|ТипПоказателя,
	|Точность,
	|Наименование,
	|КраткоеНаименование,
	|ОтображатьВДокументахНачисления,
	|ВводитсяНепосредственноПриРасчете,
	|ТипПоказателяПриРасчете,
	|ЗначениеПоУмолчанию,
	|ВидТарифнойСтавки,
	|ДопускаетсяНулевоеЗначение,
	|НеИспользуется,
	|ЭтоПоказательЗависящийОтСтажа";
	
	СтруктураШаблон = Новый Структура(ОписаниеСтруктурыПараметров);
	СтруктураШаблон.НазначениеПоказателя              = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ПустаяСсылка();
	СтруктураШаблон.СпособПримененияЗначений          = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.ПустаяСсылка();
	СтруктураШаблон.СпособВводаЗначений               = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ПустаяСсылка();
	СтруктураШаблон.ОтображатьВДокументахНачисления   = Истина;
	СтруктураШаблон.ВводитсяНепосредственноПриРасчете = Истина;
	СтруктураШаблон.ВидТарифнойСтавки                 = Перечисления.ВидыТарифныхСтавок.ПустаяСсылка();
	СтруктураШаблон.ТипПоказателяПриРасчете           = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	СтруктураШаблон.ДопускаетсяНулевоеЗначение        = Ложь;
	СтруктураШаблон.ЗначениеПоУмолчанию               = 0;
	СтруктураШаблон.ЭтоПоказательЗависящийОтСтажа     = Ложь;
	
	МассивПоказателейРасчетаЗарплаты = Новый Массив;
	МассивПоказателейРасчетаРезервов = Новый Массив;
	Для Каждого Показатель Из Показатели Цикл
		Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			МассивПоказателейРасчетаЗарплаты.Добавить(Показатель);
		Иначе
			МассивПоказателейРасчетаРезервов.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ИменаРеквизитов = 
	"Идентификатор,
	|Предопределенный,
	|ТипПоказателя,
	|Точность,
	|Наименование,
	|КраткоеНаименование,
	|НеИспользуется";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПоказателейРасчетаРезервов, ИменаРеквизитов);
	
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		ЗначенияПоказателя = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураШаблон);
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателя, КлючИЗначение.Значение);
		ЗначенияПоказателя.ТипПоказателяПриРасчете = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, ЗначенияПоказателя.Точность));
		ЗначенияПоказателя.ВводитсяНепосредственноПриРасчете = Не (ЗначенияПоказателя.Предопределенный);
		СведенияОПоказателях.Вставить(КлючИЗначение.Ключ, ЗначенияПоказателя);
	КонецЦикла;
	
	СведенияОПоказателяхЗарплаты = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателейРасчетаЗарплаты);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СведенияОПоказателях, СведенияОПоказателяхЗарплаты);
	
	Возврат СведенияОПоказателях;
	
КонецФункции

// Получает информацию о показателях расчета резервов
Функция СведенияОПоказателеРасчетаРезервов(Показатель) Экспорт
	
	Возврат РезервыПоОплатеТрудаРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(Показатель);
	
КонецФункции

Функция ИнформацияОВидахРасчетаРезервов(ВидыРасчета) Экспорт
	
	ВидыРасчетаИнфо = Новый Соответствие;
	
	Если ВидыРасчета.Количество() = 0 Тогда 
		Возврат ВидыРасчетаИнфо;
	КонецЕсли;
	
	ИмяТаблицы = ВидыРасчета[0].Метаданные().ПолноеИмя();
	
	// Получим сведения о показателях.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Показатели.Показатель
	               |ИЗ
	               |	#ИмяТаблицы.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Ссылка В(&ВидыРасчета)";
			  
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПоказателей = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		МассивПоказателей.Добавить(Выборка.Показатель);
	КонецЦикла;
	
	СведенияОПоказателях = СведенияОПоказателяхРасчетаРезервов(МассивПоказателей);
	
	// Получим реквизиты видов расчета
	ЗапрашиваемыеДанныеСтрока = ЗапрашиваемыеДанныеВидаРасчетаРезерва();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	#ЗапрашиваемыеДанные,
	|	Показатели
	|ИЗ
	|	#ИмяТаблицы
	|ГДЕ
	|	Ссылка В (&ВидыРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Показатели.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗапрашиваемыеДанные", ЗапрашиваемыеДанныеСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Создаем структуру с необходимым набором полей.
		ЗначенияРеквизитов = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		ЗначенияРеквизитов.ВидРасчета = НачислениеВидаРасчетаРезерва(Выборка.Ссылка);
		
		// Заполним также и сведения о самих показателях.
		МассивОписаний = Новый Массив;
		
		ИменаПолей = 
		"Показатель,
		|ЗапрашиватьПриВводе,
		|ОтменяемыйПоказатель,
		|ИспользоватьПриРасчете,
		|ОсновнойПоказатель";
		
		Если Выборка.Показатели <> Неопределено Тогда
			ВыборкаПоказателей = Выборка.Показатели.Выбрать();
			Пока ВыборкаПоказателей.Следующий() Цикл
				Описание = Новый Структура(ИменаПолей);
				ЗаполнитьЗначенияСвойств(Описание, ВыборкаПоказателей);
				СведенияОПоказателе = СведенияОПоказателях[Описание.Показатель];
				Для Каждого КлючИЗначение Из СведенияОПоказателе Цикл
					Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				МассивОписаний.Добавить(Описание);
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить("Показатели", МассивОписаний);
		
		ВидыРасчетаИнфо.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат ВидыРасчетаИнфо;
	
КонецФункции

Функция ПолучитьИнформациюОВидеРасчета(ВидРасчета) Экспорт
	
	ВидыРасчетаИнфо = Новый Соответствие;
	
	ИмяТаблицы = ВидРасчета.Метаданные().ПолноеИмя();
	
	// Получим сведения о показателях.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Показатели.Показатель
	               |ИЗ
	               |	#ИмяТаблицы.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Ссылка = &ВидРасчета";
			  
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПоказателей = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		МассивПоказателей.Добавить(Выборка.Показатель);
	КонецЦикла;
	
	СведенияОПоказателях = СведенияОПоказателяхРасчетаРезервов(МассивПоказателей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	Показатели
	|ИЗ
	|	#ИмяТаблицы
	|ГДЕ
	|	Ссылка = &ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Показатели.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Создаем структуру с необходимым набором полей.
		ЗначенияРеквизитов = Новый Структура();
		
		// Заполним также и сведения о самих показателях.
		МассивОписаний = Новый Массив;
		
		ИменаПолей = 
		"Показатель,
		|ЗапрашиватьПриВводе,
		|ОтменяемыйПоказатель,
		|ИспользоватьПриРасчете,
		|ОсновнойПоказатель";
		
		Если Выборка.Показатели <> Неопределено Тогда
			ВыборкаПоказателей = Выборка.Показатели.Выбрать();
			Пока ВыборкаПоказателей.Следующий() Цикл
				Описание = Новый Структура(ИменаПолей);
				ЗаполнитьЗначенияСвойств(Описание, ВыборкаПоказателей);
				СведенияОПоказателе = СведенияОПоказателях[Описание.Показатель];
				Для Каждого КлючИЗначение Из СведенияОПоказателе Цикл
					Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				МассивОписаний.Добавить(Описание);
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить("Показатели", МассивОписаний);
		
		ВидыРасчетаИнфо.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат ВидыРасчетаИнфо;
	
КонецФункции

Функция ИнформацияОВидахРасчетаРезервовОтпуск(ВидыРасчета) Экспорт
	
	ВидыРасчетаИнфо = Новый Соответствие;
	
	Если ВидыРасчета.Количество() = 0 Тогда 
		Возврат ВидыРасчетаИнфо;
	КонецЕсли;
	
	ИмяТаблицы = ВидыРасчета[0].Метаданные().ПолноеИмя();
	
	ВидРасчетаОсновнойОтпуск = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	
	ПоказателиРасчетаРезервовПоОплатеТруда = Новый Массив;
	ПоказателиРасчетаРезервовПоОплатеТруда.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок"));
	ПоказателиРасчетаРезервовПоОплатеТруда.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска"));
	
	// Получим сведения о показателях.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
	Запрос.УстановитьПараметр("ПоказателиРасчетаРезервовПоОплатеТруда", ПоказателиРасчетаРезервовПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка КАК Показатель,
	|	НЕ ПоказателиРасчетаРезервовПоОплатеТруда.Предопределенный КАК ЗапрашиватьПриВводе,
	|	ЛОЖЬ КАК ОтменяемыйПоказатель,
	|	ИСТИНА КАК ИспользоватьПриРасчете,
	|	ИСТИНА КАК ОсновнойПоказатель
	|ИЗ
	|	Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК ПоказателиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка В(&ПоказателиРасчетаРезервовПоОплатеТруда)";
	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	МассивПоказателей = Новый Массив;
	Пока ВыборкаПоказателей.Следующий() Цикл 
		МассивПоказателей.Добавить(ВыборкаПоказателей.Показатель);
	КонецЦикла;
	
	СведенияОПоказателях = СведенияОПоказателяхРасчетаРезервов(МассивПоказателей);
	
	// Получим реквизиты видов расчета
	ЗапрашиваемыеДанныеСтрока = ЗапрашиваемыеДанныеВидаРасчетаРезерва();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	#ЗапрашиваемыеДанные
	|ИЗ
	|	#ИмяТаблицы
	|ГДЕ
	|	Ссылка В (&ВидыРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Показатели.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗапрашиваемыеДанные", ЗапрашиваемыеДанныеСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Создаем структуру с необходимым набором полей.
		ЗначенияРеквизитов = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		ЗначенияРеквизитов.ФормулаРасчета              = ФормулаРасчетаРезерваОтпусков(Ложь);
		ЗначенияРеквизитов.ФормулаРасчетаДляВыполнения = ФормулаРасчетаРезерваОтпусков(Истина);
		ЗначенияРеквизитов.ВидРасчета                  = ВидРасчетаОсновнойОтпуск;
		
		// Заполним также и сведения о самих показателях.
		МассивОписаний = Новый Массив;
		
		ИменаПолей = 
		"Показатель,
		|ЗапрашиватьПриВводе,
		|ОтменяемыйПоказатель,
		|ИспользоватьПриРасчете,
		|ОсновнойПоказатель";
		
		ВыборкаПоказателей.Сбросить();
		
		Пока ВыборкаПоказателей.Следующий() Цикл
			Описание = Новый Структура(ИменаПолей);
			ЗаполнитьЗначенияСвойств(Описание, ВыборкаПоказателей);
			СведенияОПоказателе = СведенияОПоказателях[Описание.Показатель];
			Для Каждого КлючИЗначение Из СведенияОПоказателе Цикл
				Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			МассивОписаний.Добавить(Описание);
		КонецЦикла;
		
		ЗначенияРеквизитов.Вставить("Показатели", МассивОписаний);
		
		ВидыРасчетаИнфо.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	Возврат ВидыРасчетаИнфо;
	
КонецФункции

Функция ФормулаРасчетаРезерваОтпусков(ДляВыполнения = Ложь) Экспорт
	
	Возврат РезервыПоОплатеТруда.ФормулаРасчетаРезерваОтпусков(ДляВыполнения);
	
КонецФункции

// Расчет вторичных данных о показателях.
// Выполняется перед записью вида расчета.
//
// Параметры:
// - ВидРасчетаОбъект - записываемый вид расчета.
//
Процедура ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	ПоказателиОбъекта =  ВидРасчетаОбъект.Показатели.Выгрузить();
	ПоказателиЗарплаты = ПоказателиОбъекта.СкопироватьКолонки();
	ПоказателиРезервов = ПоказателиОбъекта.СкопироватьКолонки();
	
	Для Каждого СтрокаПоказателя Из ПоказателиОбъекта Цикл
		Если ТипЗнч(СтрокаПоказателя.Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
			ЗаполнитьЗначенияСвойств(ПоказателиЗарплаты.Добавить(), СтрокаПоказателя);
		Иначе
			ЗаполнитьЗначенияСвойств(ПоказателиРезервов.Добавить(), СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	ВременныйОбъект = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
	ВременныйОбъект.Показатели.Загрузить(ПоказателиЗарплаты);
	
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВременныйОбъект);
	
	ВидРасчетаОбъект.Показатели.Очистить();
	
	Для Каждого СтрокаПоказателя Из ВременныйОбъект.Показатели Цикл
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект.Показатели.Добавить(), СтрокаПоказателя);
	КонецЦикла;
	Для Каждого СтрокаПоказателя Из ПоказателиРезервов Цикл
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект.Показатели.Добавить(), СтрокаПоказателя);
		ВременныйОбъект.КоличествоПостоянныхПоказателей             = ВременныйОбъект.КоличествоПостоянныхПоказателей + 1;
		ВременныйОбъект.КоличествоПоказателейИспользуемыхПриРасчете = ВременныйОбъект.КоличествоПоказателейИспользуемыхПриРасчете + 1;
		ВременныйОбъект.КоличествоОтображаемыхПоказателей           = ВременныйОбъект.КоличествоОтображаемыхПоказателей + 1;
	КонецЦикла;
	
	ВидРасчетаОбъект.КоличествоПостоянныхПоказателей             = ВременныйОбъект.КоличествоПостоянныхПоказателей;
	ВидРасчетаОбъект.КоличествоПоказателейИспользуемыхПриРасчете = ВременныйОбъект.КоличествоПоказателейИспользуемыхПриРасчете;
	ВидРасчетаОбъект.КоличествоОтображаемыхПоказателей           = ВременныйОбъект.КоличествоОтображаемыхПоказателей;
	
	// Эти значения могут сохранятся среди повторно используемых значений.
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Функция определяет наличие предопределенных показателей 
// в табличной части вида расчета.
//
// Параметры:
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- ИмяПредопределенныхДанных - строковое имя предопределенного показателя.
//
Функция ЕстьПоказательВКоллекции(Коллекция, ИмяПредопределенныхДанных) Экспорт
	
	Возврат РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(Коллекция, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда." + ИмяПредопределенныхДанных)));
	
КонецФункции

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	ДоступныеПоказатели = ДоступныеПоказателиРасчетаРезервовПоОплатеТруда(ИдентификаторыПоказателей);
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Строка = ДоступныеПоказатели.Найти(Идентификатор);
		Если Строка = Неопределено Тогда
			Строка = ДоступныеПоказатели.Найти(Врег(Идентификатор));
		КонецЕсли;
		Если Строка = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти показатель по идентификатору %1';
				|en = 'Cannot find indicator by ID %1'"), Идентификатор);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		Показатели.Добавить(Строка.Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции 

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена';
								|en = 'Formula is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых показателей.
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	// Проверим существование показателей.
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Внесем изменения, связанные с базовыми показателями.
	РасчетЗарплатыРасширенный.ДополнитьФормулуБазовымиПоказателями(Формула, ПоказателиФормулы, ИдентификаторыПоказателейФормулы);
	
	ФормулаДляВыполнения = РасчетЗарплатыРасширенный.ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		РасчетЗарплатыРасширенный.ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
		РасчетЗарплатыРасширенный.ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	
КонецФункции

Процедура ЗаполнитьДанныеТекущегоНабораНачисления(КэшДанныеТекущегоНабораНачисления, Начисления) Экспорт
	
	КэшДанныеТекущегоНабораНачисления.ТаблицаНабора.Колонки.ВидРасчета.Имя = "ВидРасчетаДанных";
	КэшДанныеТекущегоНабораНачисления.ТаблицаНабора.Колонки.Добавить("ВидРасчета",  Новый ОписаниеТипов("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда"));
	
	Для Каждого Строка Из КэшДанныеТекущегоНабораНачисления.ТаблицаНабора Цикл
		СтрокаТаблицыНачисления = Начисления.Найти(Строка.ИдентификаторСтроки, "ИдентификаторСтроки");
		Строка.ВидРасчета = СтрокаТаблицыНачисления.Начисление;
		Строка.ВидРасчетаДанных = СтрокаТаблицыНачисления.ВидРасчета;
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступныеПоказателиРасчетаРезервовПоОплатеТруда(ИдентификаторыПоказателей) Экспорт
	
	ИдентификаторыСлужебные = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		ИдентификаторыСлужебные.Добавить(ВРег(Идентификатор));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыПоказателей", ИдентификаторыПоказателей);
	Запрос.УстановитьПараметр("ИдентификаторыСлужебные",   ИдентификаторыСлужебные);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка КАК Показатель,
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Идентификатор КАК Идентификатор,
	|	ПоказателиРасчетаРезервовПоОплатеТруда.ИдентификаторСлужебный КАК ИдентификаторСлужебный
	|ИЗ
	|	Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК ПоказателиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	(ПоказателиРасчетаРезервовПоОплатеТруда.Идентификатор В (&ИдентификаторыПоказателей)
	|			ИЛИ ПоказателиРасчетаРезервовПоОплатеТруда.ИдентификаторСлужебный В (&ИдентификаторыСлужебные))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка,
	|	ПоказателиРасчетаЗарплаты.Идентификатор,
	|	ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	(ПоказателиРасчетаЗарплаты.Идентификатор В (&ИдентификаторыПоказателей)
	|			ИЛИ ПоказателиРасчетаЗарплаты.ИдентификаторСлужебный В (&ИдентификаторыСлужебные))";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьНаличиеБазовыхВидовРасчета(ВидРасчетаРезерваОбъект, ВидРасчетаОбъект = Неопределено, Отказ) Экспорт
	
	// Проверяем, что если в формуле присутствует показатель Расчетная база, список базовых начислений не пуст.
	
	РасчетнаяБаза = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	Если ВидРасчетаОбъект = Неопределено Тогда
		ВидРасчетаОбъект = ВидРасчетаРезерваОбъект.ВидРасчета.ПолучитьОбъект();
	КонецЕсли;
	Если ВидРасчетаРезерваОбъект.Показатели.Найти(РасчетнаяБаза, "Показатель") <> Неопределено
		И (ВидРасчетаРезерваОбъект.БазовыеВидыРасчета.Количество() = 0
			И ВидРасчетаОбъект.БазовыеВидыРасчета.Количество() = 0) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заполнен список базовых начислений.';
				|en = 'Basic accrual list is not filled in.'"), , "БазовыеВидыРасчета", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция НачислениеВыполняетсяВЦеломЗаМесяц(ВидРасчетаРезерваОбъект, НачислениеОбъект = Неопределено) Экспорт
	
	Если НачислениеОбъект = Неопределено Тогда
		НачислениеОбъект = ВидРасчетаРезерваОбъект;
	КонецЕсли;
	
	ЕстьПоказателиУчетаВремени = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
		
	ЕстьПоказателиРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект, ЕстьПоказателиУчетаВремени, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели);
	
КонецФункции

Процедура ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	
	ВыборкаСвойствВидовРасчета = ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	
	УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц);
	
	КонтролируемыеПоля = Неопределено;
	ДополнительныеПараметры.КонтролируемыеПоля.Свойство(ОписаниеТаблицы.ИмяТаблицы, КонтролируемыеПоля);
	
	ФизическиеЛицаСотрудников = Неопределено;
	Если ОписаниеТаблицы.СодержитПолеСотрудник Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник);
		Если Сотрудники.Количество() > 0
			И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники, "ФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Если ВыборкаСвойствВидовРасчета <> Неопределено Тогда
			ВыборкаСвойствВидовРасчета.Следующий();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаСвойствВидовРасчета);
		КонецЕсли;
		
		Если ФизическиеЛицаСотрудников <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ФизическиеЛицаСотрудников[СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]]);
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, ДополнительныеПараметры) Экспорт 
	
	КонтролируемыеПоля = ДополнительныеПараметры.КонтролируемыеПоля;
	
	ФизическиеЛицаСотрудников = Неопределено;
	Если ОписаниеТаблицы.СодержитПолеСотрудник Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник);
		Если Сотрудники.Количество() > 0
			И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники, "ФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Если ФизическиеЛицаСотрудников <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ФизическиеЛицаСотрудников[СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]]);
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных.Свойство(ИмяПоля) И СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоПоказателей = 0;
	ТаблицаСвойствВидовРасчета = ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
		|	СвойстваВидовРасчета.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
		|	СвойстваВидовРасчета.ВидВремени КАК ВидВремени,
		|	СвойстваВидовРасчета.ДоступенВыборОснования КАК ДоступенВыборОснования,
		|	СвойстваВидовРасчета.КатегорияУдержания КАК КатегорияУдержания
		|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
		|ИЗ
		|	&ТаблицаСвойствВидовРасчета КАК СвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	ДанныеОсновнойТаблицы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ВидВремени КАК ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования КАК ДоступенВыборОснования,
		|	СвойстваВидовРасчета.КатегорияУдержания КАК КатегорияУдержания
		|ПОМЕСТИТЬ ВТОсновнаяТаблицаСПоказателями
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|		ПО ДанныеОсновнойТаблицы.ВидРасчета = СвойстваВидовРасчета.ВидРасчета
		|			И ДанныеОсновнойТаблицы.ВидРасчетаРезерва = СвойстваВидовРасчета.ВидРасчетаРезерва
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,
		|	&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,
		|	ДанныеОсновнойТаблицы.ВидВремени КАК ВидВремени,
		|	ДанныеОсновнойТаблицы.ИспользуетсяПериод КАК ИспользуетсяПериод,
		|	ДанныеОсновнойТаблицы.ИспользованиеПериода КАК ИспользованиеПериода,
		|	ДанныеОсновнойТаблицы.ДоступенВыборОснования КАК ДоступенВыборОснования,
		|	ДанныеОсновнойТаблицы.КатегорияУдержания КАК КатегорияУдержания
		|ИЗ
		|	ВТОсновнаяТаблицаСПоказателями КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновнаяТаблицаСПоказателями";
	
	ШаблонПолейСвойствПоказателей = "
		|	СвойстваВидовРасчета.Показатель1 КАК Показатель1,
		|	СвойстваВидовРасчета.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	СвойстваВидовРасчета.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	СвойстваВидовРасчета.КомандаРасшифровки1 КАК КомандаРасшифровки1,";
	
	ШаблонПолейСвойствПоказателейОсновнойТаблицы = "
		|	ДанныеОсновнойТаблицы.Показатель1 КАК Показатель1,
		|	ДанныеОсновнойТаблицы.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	ДанныеОсновнойТаблицы.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	ДанныеОсновнойТаблицы.КомандаРасшифровки1 КАК КомандаРасшифровки1,";

	
	ШаблонПолейЗначенийПоказателей = "
		|	Показатели1.Значение КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
		|		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = Показатели1.ИдентификаторСтрокиВидаРасчета
		|			И (ДанныеОсновнойТаблицы.Показатель1 = Показатели1.Показатель)
		|			И ДанныеОсновнойТаблицы.Показатель1 <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
		
	ПоляСвойствПоказателей = "";
	ПоляСвойствПоказателейОсновнойТаблицы = "";
	ПоляЗначенийПоказателя = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));	
		ПоляСвойствПоказателейОсновнойТаблицы = ПоляСвойствПоказателейОсновнойТаблицы + СтрЗаменить(ШаблонПолейСвойствПоказателейОсновнойТаблицы, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
		ПоляЗначенийПоказателя = ПоляЗначенийПоказателя + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
	КонецЦикла;	
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателейОсновнойТаблицы); 
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателя); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
					  |		ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСвойствВидовРасчета", ТаблицаСвойствВидовРасчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ПоказателиРезерваОтпусковПоУмолчанию() Экспорт
	
	СохраняемыйЗаработок = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок");
	ОстатокОтпуска       = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	
	Если СохраняемыйЗаработок = Неопределено Или ОстатокОтпуска = Неопределено Тогда
		Справочники.ПоказателиРасчетаРезервовПоОплатеТруда.СоздатьПоказатели();
		
		СохраняемыйЗаработок = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок");
		ОстатокОтпуска       = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(СохраняемыйЗаработок);
	МассивПоказателей.Добавить(ОстатокОтпуска);
	
	Возврат МассивПоказателей;
	
КонецФункции

Функция ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей)
	
	ДанныеТаблицы = ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы];
	
	МаксимальноеКоличествоПоказателей = МаксимальноеКоличествоПоказателей();
	
	СписокПоказателейОтпуск = ПоказателиРезерваОтпусковПоУмолчанию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инвентаризация",                    ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация);
	Запрос.УстановитьПараметр("ВидРасчетаОсновнойОтпуск",          РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск());
	Запрос.УстановитьПараметр("СписокПоказателейОтпуск",           СписокПоказателейОтпуск);
	Запрос.УстановитьПараметр("МаксимальноеКоличествоПоказателей", МаксимальноеКоличествоПоказателей);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОсновнойТаблицы.ВидРасчета КАК ВидРасчета,
		|	ДанныеОсновнойТаблицы.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
		|	ВЫБОР
		|		КОГДА &Инвентаризация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
		|	КОНЕЦ КАК ИспользоватьСобственнуюФормулуРасчета,
		|	ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска КАК ЭтоРасчетОтпуска
		|ПОМЕСТИТЬ ВТВидыРасчетаОсновнойТаблицы
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
		|		ПО ДанныеОсновнойТаблицы.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТруда.Ссылка";
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК ВидРасчета,
		|	Начисления.ВидВремени КАК ВидВремени,
		|	ВЫБОР
		|		КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ИспользуетсяПериод,
		|	Начисления.ИспользованиеПериода КАК ИспользованиеПериода,
		|	&МаксимальноеКоличествоПоказателей КАК КоличествоОтображаемыхПоказателей,
		|	Начисления.ПоддерживаетНесколькоПлановыхНачислений КАК ДоступенВыборОснования,
		|	ВидыРасчетаОсновнойТаблицы.ЭтоРасчетОтпуска КАК ЭтоРасчетОтпуска,
		|	ВидыРасчетаОсновнойТаблицы.ИспользоватьСобственнуюФормулуРасчета КАК ИспользоватьСобственнуюФормулуРасчета,
		|	ВидыРасчетаОсновнойТаблицы.ВидРасчетаРезерва КАК ВидРасчетаРезерва
		|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
		|ИЗ
		|	ВТВидыРасчетаОсновнойТаблицы КАК ВидыРасчетаОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ВидыРасчетаОсновнойТаблицы.ВидРасчета = Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Ссылка,
		|	ПоказателиРасчетаЗарплаты.Наименование КАК Наименование,
		|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК КраткоеНаименование,
		|	ПоказателиРасчетаЗарплаты.Точность КАК Точность,
		|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления
		|ПОМЕСТИТЬ ВТПоказателиРасчетаОтпуск
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка В(&СписокПоказателейОтпуск)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка,
		|	ПоказателиРасчетаРезервовПоОплатеТруда.Наименование,
		|	ПоказателиРасчетаРезервовПоОплатеТруда.КраткоеНаименование,
		|	ПоказателиРасчетаРезервовПоОплатеТруда.Точность,
		|	ИСТИНА
		|ИЗ
		|	Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК ПоказателиРасчетаРезервовПоОплатеТруда
		|ГДЕ
		|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка В(&СписокПоказателейОтпуск)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СвойстваВидовРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
		|ИЗ
		|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
		|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
		|	СвойстваВидовРасчета.ВидВремени КАК ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования КАК ДоступенВыборОснования,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	НачисленияПоказатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
		|	НачисленияПоказатели.Показатель.Наименование КАК Наименование,
		|	НачисленияПоказатели.Показатель.КраткоеНаименование КАК КраткоеНаименование,
		|	НачисленияПоказатели.Показатель.Точность КАК Точность,
		|	НачисленияПоказатели.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления,
		|	СвойстваВидовРасчета.ВидРасчетаРезерва КАК ВидРасчетаРезерва
		|ИЗ
		|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО СвойстваВидовРасчета.ВидРасчета = НачисленияПоказатели.Ссылка
		|ГДЕ
		|	НЕ СвойстваВидовРасчета.ИспользоватьСобственнуюФормулуРасчета
		|	И НЕ СвойстваВидовРасчета.ЭтоРасчетОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СвойстваВидовРасчета.ЭтоРасчетОтпуска
		|			ТОГДА &ВидРасчетаОсновнойОтпуск
		|		ИНАЧЕ СвойстваВидовРасчета.ВидРасчета
		|	КОНЕЦ,
		|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.НомерСтроки,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования,
		|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель,
		|	ВЫБОР
		|		КОГДА ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
		|			ТОГДА ВидыРасчетовРезервовПоОплатеТрудаПоказатели.ИспользоватьПриРасчете
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель.Наименование,
		|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель.КраткоеНаименование,
		|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель.Точность,
		|	ВЫБОР
		|		КОГДА ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
		|			ТОГДА ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель.ОтображатьВДокументахНачисления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	СвойстваВидовРасчета.ВидРасчетаРезерва
		|ИЗ
		|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК ВидыРасчетовРезервовПоОплатеТрудаПоказатели
		|		ПО СвойстваВидовРасчета.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Ссылка
		|ГДЕ
		|	(СвойстваВидовРасчета.ИспользоватьСобственнуюФормулуРасчета
		|			ИЛИ СвойстваВидовРасчета.ЭтоРасчетОтпуска)
		|	И НЕ &Инвентаризация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ВидРасчетаОсновнойОтпуск,
		|	0,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования,
		|	ВТПоказателиРасчетаОтпуск.Ссылка,
		|	ИСТИНА,
		|	ВТПоказателиРасчетаОтпуск.Наименование,
		|	ВТПоказателиРасчетаОтпуск.КраткоеНаименование,
		|	ВТПоказателиРасчетаОтпуск.Точность,
		|	ВТПоказателиРасчетаОтпуск.ОтображатьВДокументахНачисления,
		|	СвойстваВидовРасчета.ВидРасчетаРезерва
		|ИЗ
		|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета,
		|	ВТПоказателиРасчетаОтпуск КАК ВТПоказателиРасчетаОтпуск
		|ГДЕ
		|	СвойстваВидовРасчета.ЭтоРасчетОтпуска
		|	И &Инвентаризация
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидРасчетаРезерва,
		|	ВидРасчета,
		|	НомерСтроки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТВидыРасчетаОсновнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПоказателиРасчетаОтпуск";
	Запрос.Выполнить();
	
	КвалификаторСтроки20 = Новый КвалификаторыСтроки(20);
	КвалификаторСтроки5 = Новый КвалификаторыСтроки(5);

	ТаблицаВидовРасчета = Новый ТаблицаЗначений;
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчетаРезерва", Новый ОписаниеТипов("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда"));
	ТаблицаВидовРасчета.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаВидовРасчета.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	ТаблицаВидовРасчета.Колонки.Добавить("КоличествоПоказателей", Новый ОписаниеТипов("Число"));
	ТаблицаВидовРасчета.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовРасчета.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	
	МассивТиповПоказателей = Новый Массив;
	МассивТиповПоказателей.Добавить(Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	МассивТиповПоказателей.Добавить(Тип("СправочникСсылка.ПоказателиРасчетаРезервовПоОплатеТруда"));
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПоказателей = ?(ЗначениеЗаполнено(Выборка.КоличествоОтображаемыхПоказателей), Выборка.КоличествоОтображаемыхПоказателей, МаксимальноеКоличествоПоказателей);
		Для Сч = 1 По КоличествоПоказателей Цикл 
			ТаблицаВидовРасчета.Колонки.Добавить("Показатель" + Сч,  Новый ОписаниеТипов(МассивТиповПоказателей));
			ТаблицаВидовРасчета.Колонки.Добавить("ПредставлениеПоказателя" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки20));
			ТаблицаВидовРасчета.Колонки.Добавить("ТочностьПоказателя" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки5));
			ТаблицаВидовРасчета.Колонки.Добавить("КомандаРасшифровки" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки20));
		КонецЦикла;
	КонецЕсли;
	
	ПоказателиСреднегоЗаработка = Новый Соответствие;
	ПоказателиСреднегоЗаработка.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"), Истина);
	ПоказателиОбщегоСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиОбщегоСреднегоЗаработка();
	Для Каждого ПоказательСреднегоЗаработка Из ПоказателиОбщегоСреднегоЗаработка Цикл
		ПоказателиСреднегоЗаработка.Вставить(ПоказательСреднегоЗаработка, Истина);
	КонецЦикла;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	ПоказательОстатокОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчетаРезерва") Цикл	
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл	
			НоваяСтрока = ТаблицаВидовРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			Сч = 1;
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.Показатель) Тогда
					Продолжить;
				КонецЕсли;	
				ОтображатьПоказатель = Выборка.ИспользоватьПриРасчете И Выборка.ОтображатьВДокументахНачисления;
				Если Не ОтображатьПоказатель Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока["Показатель" + Сч] 				= Выборка.Показатель;
				НоваяСтрока["ТочностьПоказателя" + Сч] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", Выборка.Точность);
				НоваяСтрока["ПредставлениеПоказателя" + Сч] = ?(ЗначениеЗаполнено(Выборка.КраткоеНаименование), Выборка.КраткоеНаименование, Выборка.Наименование);
				Если ПоказателиСреднегоЗаработка.Получить(Выборка.Показатель) <> Неопределено Тогда
					НоваяСтрока["КомандаРасшифровки" + Сч] = УчетСреднегоЗаработкаКлиентСервер.ПредставлениеКомандыРасшифровки();
				КонецЕсли;
				Если Выборка.Показатель = ПоказательСдельногоЗаработка Тогда
					НоваяСтрока["КомандаРасшифровки" + Сч] = НСтр("ru = 'Подробнее';
																	|en = 'Details'");
				КонецЕсли;
				Если Выборка.Показатель = ПоказательОстатокОтпуска Тогда
					НоваяСтрока["КомандаРасшифровки" + Сч] = НСтр("ru = 'Подробнее';
																	|en = 'Details'");
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаВидовРасчета;
	
КонецФункции

Функция МаксимальноеКоличествоПоказателей() Экспорт
	Возврат 5;
КонецФункции

Процедура СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Таблица",                  ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы]);
	Запрос.УстановитьПараметр("ВидРасчетаОсновнойОтпуск", ВидРасчетаОсновнойОтпуск());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Сотрудник КАК Сотрудник,
	|	Таблица.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	Таблица.Результат КАК Результат,
	|	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеОсновнойТаблицыВременная
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОсновнойТаблицыВременная.НомерСтроки КАК НомерСтроки,
	|	ВТДанныеОсновнойТаблицыВременная.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска
	|			ТОГДА &ВидРасчетаОсновнойОтпуск
	|		ИНАЧЕ ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета
	|	КОНЕЦ КАК ВидРасчета,
	|	ВТДанныеОсновнойТаблицыВременная.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТДанныеОсновнойТаблицыВременная.Результат КАК Результат,
	|	ВТДанныеОсновнойТаблицыВременная.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	|ИЗ
	|	ВТДанныеОсновнойТаблицыВременная КАК ВТДанныеОсновнойТаблицыВременная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|		ПО ВТДанныеОсновнойТаблицыВременная.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТруда.Ссылка";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТДанныеОсновнойТаблицы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ВидРасчетаОсновнойОтпуск() Экспорт
	
	ВидОтпуска    = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	ОплатаОтпуска = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ВидОтпуска", ВидОтпуска);
	
	Начисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
		ОплатаОтпуска,
		Отбор);
		
	Если Начисления.Количество() <> 0 Тогда
		ВидРасчетаОсновногоОтпуска = Начисления[0];
	Иначе
		ПланыВидовРасчета.Начисления.СоздатьНачислениеОтпуска(ВидОтпуска,
			НСтр("ru = 'Отпуск основной';
				|en = 'Basic leave'"),
			,
			,
			,
			,
			НСтр("ru = 'Отпуск';
				|en = 'Leave'"));
		
		
		Начисления = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(
			ОплатаОтпуска,
			Отбор);
			
			Если Начисления.Количество() <> 0 Тогда
				ВидРасчетаОсновногоОтпуска = Начисления[0];
			Иначе
				ВидРасчетаОсновногоОтпуска = Неопределено;
			КонецЕсли;
			
	КонецЕсли;
	
	Возврат ВидРасчетаОсновногоОтпуска;
	
КонецФункции

Функция НачислениеВидаРасчетаРезерва(ВидРасчетаРезерва) Экспорт
	
	Если ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
		РеквизитыВидаРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидРасчетаРезерва, "ВидРасчета, ЭтоРасчетОтпуска");
		Если РеквизитыВидаРасчета.ЭтоРасчетОтпуска Тогда
			ВидРасчета = ВидРасчетаОсновнойОтпуск();
		Иначе
			ВидРасчета = РеквизитыВидаРасчета.ВидРасчета;
		КонецЕсли;
	Иначе
		ВидРасчета = ПланыВидовРасчета.Начисления.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидРасчета;
	
КонецФункции

Функция ЗначенияПоказателейПоНастройке(Организация, Резерв, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Резерв",      Резерв);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск) КАК ЭтоРезервОтпусков
	|ПОМЕСТИТЬ ВТ_НастройкиРасчетаРезервовПоОплатеТруда
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
	|	И НастройкиРасчетаРезервовПоОплатеТруда.Резерв = &Резерв
	|	И &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК ПараметрыРасчетаРезерва,
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.ВидРасчетаРезерва КАК ВидРасчетаРезерва
	|ПОМЕСТИТЬ ВТ_ВидыРасчетаРезерва
	|ИЗ
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда КАК ВТ_НастройкиРасчетаРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовРезерва КАК НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва
	|		ПО ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Ссылка = НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыРасчетаРезерва.Организация КАК Организация,
	|	ВТ_ВидыРасчетаРезерва.Резерв КАК Резерв,
	|	ВТ_ВидыРасчетаРезерва.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ЗначенияПоказателейРасчетаРезервов.ВладелецВидаРасчета КАК ВладелецВидаРасчета,
	|	ЗначенияПоказателейРасчетаРезервов.ПоказательРасчета КАК ПоказательРасчета,
	|	ЗначенияПоказателейРасчетаРезервов.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_ПоказателиРасчетаВременная
	|ИЗ
	|	ВТ_ВидыРасчетаРезерва КАК ВТ_ВидыРасчетаРезерва
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейРасчетаРезервов КАК ЗначенияПоказателейРасчетаРезервов
	|		ПО ВТ_ВидыРасчетаРезерва.ПараметрыРасчетаРезерва = ЗначенияПоказателейРасчетаРезервов.ПараметрыРасчетаРезерва
	|			И ВТ_ВидыРасчетаРезерва.Организация = ЗначенияПоказателейРасчетаРезервов.Организация
	|			И ВТ_ВидыРасчетаРезерва.ВидРасчетаРезерва = ЗначенияПоказателейРасчетаРезервов.ВидРасчетаРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоказателиРасчетаВременная.Организация КАК Организация,
	|	ВТ_ПоказателиРасчетаВременная.Резерв КАК Резерв,
	|	ВТ_ПоказателиРасчетаВременная.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТ_ПоказателиРасчетаВременная.ВладелецВидаРасчета КАК ВладелецВидаРасчета,
	|	ВТ_ПоказателиРасчетаВременная.ПоказательРасчета КАК Показатель,
	|	ВТ_ПоказателиРасчетаВременная.Значение КАК Значение
	|ИЗ
	|	ВТ_ПоказателиРасчетаВременная КАК ВТ_ПоказателиРасчетаВременная
	|ГДЕ
	|	ЕСТЬNULL(ВТ_ПоказателиРасчетаВременная.Значение, 0) <> 0";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	Возврат РезервыПоОплатеТрудаРасширенныйПовтИсп.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр);
	
КонецФункции

Функция УчитыватьВоеннуюСлужбу(Организация, Резерв) Экспорт
	
	ИспользоватьВоеннуюСлужбу = Ложь;
	Если Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва(Организация, Резерв) = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			НастройкиПриложения = Новый Структура;
			НастройкиПриложения.Вставить("ИспользоватьВоеннуюСлужбу", Ложь);
			НастройкиПриложения.Вставить("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", Ложь);
			НастройкиПриложения.Вставить("ИспользоватьРасчетСохраняемогоДенежногоСодержания", Ложь);  
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПриложения);
			ИспользоватьВоеннуюСлужбу = НастройкиПриложения.ИспользоватьВоеннуюСлужбу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИспользоватьВоеннуюСлужбу;
	
КонецФункции

// Перезаполняет (и пересчитывает) данные формы документа-начисления 
// по переданным сотрудникам.
//
// Параметры:
//	Форма
//	ОписаниеДокумента - структура, описывающая документ-начисление 
//		(см. ОписаниеРасчетногоДокумента).
//	Сотрудники - ссылка или массив ссылок на сотрудников.
// 	СохранятьИсправления - если Истина, перезаполнены не будут строки, 
//		для которых в наборах по определенному ключу содержатся исправления.
//		Например, для таблицы Начислений состав ключа Сотрудник и Начисление, 
//		это значит, что если хотя бы одна строка с таким начислением сотрудника содержит исправления, 
//		то все строки этого начисления этому сотруднику не будут перезаполнены
// 	ИспользоватьДлительнуюОперацию.
//
Функция ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица = Неопределено, СохранятьИсправления = Истина, ИспользоватьДлительнуюОперацию = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	
	Организация    = Объект.Организация;
	Подразделение  = Объект.Подразделение;
	ДокументСсылка = Объект.Ссылка;
	ВидОперации    = Объект.ВидОперации;
	Резерв         = Объект.Резерв;
	
	ФизическиеЛица = Неопределено;
	ПозицииВставки = Неопределено;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		ВедущиеОбъекты = РасчетЗарплатыРасширенный.СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
		Если ВедущиеОбъекты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сотрудники = ВедущиеОбъекты.Сотрудники;
		ФизическиеЛица = ВедущиеОбъекты.ФизическиеЛица;
		ПозицииВставки = Новый Структура;
	КонецЕсли;
	
	// Период заполнения данных определяем по месяцу начисления, 
	// если он не определяется отдельными полями.
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеДокумента.Окончание) Тогда
		ОкончаниеПериода = КонецДня(Объект[ОписаниеДокумента.Окончание]);
	КонецЕсли;
	
	СтруктураПараметров = РезервыПоОплатеТрудаКлиентСерверРасширенный.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация               = Организация;
	СтруктураПараметров.Подразделение             = Подразделение;
	СтруктураПараметров.ДокументСсылка            = ДокументСсылка;
	СтруктураПараметров.ВидОперации               = ВидОперации;
	СтруктураПараметров.Резерв                    = Резерв;
	СтруктураПараметров.МесяцНачисления           = МесяцНачисления;
	СтруктураПараметров.Сотрудники                = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода          = ОкончаниеПериода;
	СтруктураПараметров.ОписаниеДокумента         = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления      = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента       = СодержимоеДокументаРасчетаРезервов(Объект, ОписаниеДокумента, ПозицииВставки, ФизическиеЛица);
	СтруктураПараметров.КонтролируемыеПоля        = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.ПозицииВставки            = ПозицииВставки;
	СтруктураПараметров.ИспользоватьВоеннуюСлужбу = УчитыватьВоеннуюСлужбу(Организация, Резерв);
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		Возврат Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение документа ""Резервы по оплате труда""';
								|en = 'Fill the ""Payroll funds"" document'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"РезервыПоОплатеТрудаРасширенный.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйСодержимоеДокументаРасчетаРезервов() Экспорт
	
	СодержимоеДокумента = РасчетЗарплатыРасширенный.НовыйСодержимоеДокументаРасчетаЗарплаты();
	СодержимоеДокумента.Вставить("Начисления",                          ТаблицаНачисления(СодержимоеДокумента.Начисления));
	СодержимоеДокумента.Вставить("Взносы",                              РезервыПоОплатеТруда.ТаблицаВзносы());
	СодержимоеДокумента.Вставить("РасчетРезервов",                      РезервыПоОплатеТруда.ТаблицаРасчетРезервов());
	СодержимоеДокумента.Вставить("ОценочныеОбязательстваПоСотрудникам", РезервыПоОплатеТруда.ТаблицаОценочныеОбязательстваПоСотрудникам());
	СодержимоеДокумента.Вставить("ОценочныеОбязательства",              РезервыПоОплатеТруда.ТаблицаОценочныеОбязательства());
	
	Возврат СодержимоеДокумента;
	
КонецФункции

Функция ТаблицаНачисления(Начисления = Неопределено) Экспорт
	
	МассивТиповВидаРасчета = Новый Массив;
	МассивТиповВидаРасчета.Добавить(Тип("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда"));
	МассивТиповВидаРасчета.Добавить(Тип("ПланВидовРасчетаСсылка.Начисления"));
	
	Если Начисления = Неопределено Тогда
		Начисления = Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	КонецЕсли;
	
	Начисления.Колонки.Добавить("ВидРасчетаРезерва", Новый ОписаниеТипов("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда"));
	Начисления.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	Начисления.Колонки.Добавить("ФондОплатыТруда", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Начисления.Колонки.Добавить("НормативОтчисленийВРезерв", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	Начисления.Колонки.Добавить("НормативОтчисленийВРезервНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4, 2)));
	Начисления.Колонки.Добавить("РезультатНУ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	Начисления.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов(МассивТиповВидаРасчета));
	Начисления.Колонки.Добавить("РасчетПоСохраняемомуЗаработку", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("СпособРасчетаОтпуска", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаНачислений"));
	
	Начисления.Колонки.Добавить("ПериодРасчетаСреднегоЗаработкаНачало", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	Начисления.Колонки.Добавить("ПериодРасчетаСреднегоЗаработкаОкончание", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Начисления.Колонки.Добавить("Зачислен", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Перемещен", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Уволен", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Зарезервирован", Новый ОписаниеТипов("Булево"));
	
	Возврат Начисления;
	
КонецФункции

Функция СодержимоеДокументаРасчетаРезервов(Объект, ОписаниеДокумента, ПозицииВставки, ФизическиеЛица = Неопределено) Экспорт 
	
	СодержимоеДокумента 	= НовыйСодержимоеДокументаРасчетаРезервов();
	
	СтрокиПримененныеВычеты = Новый Массив;
	ДокументыКУдалению 		= Новый Массив;
	ПроверятьФизическоеЛицо = ФизическиеЛица <> Неопределено;
	СтрокиВычетовПоИдентификаторам = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СодержимоеДокумента Цикл
		ИмяТаблицы = КлючИЗначение.Ключ + "Имя";
		
		Если Не ОписаниеДокумента.Свойство(ИмяТаблицы)
			Или ОписаниеДокумента[ИмяТаблицы] = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
			
		ТаблицаДокумента = Объект[ОписаниеДокумента[ИмяТаблицы]];
		Если ТаблицаДокумента.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяПоляСотрудник 				= "";
		ФизическиеЛицаСотрудников 		= Новый Соответствие;
		Если ПроверятьФизическоеЛицо Тогда
			ИдентификаторыСтрокСотрудников 	= Новый Соответствие;
			ПозицииВставки.Вставить(ОписаниеДокумента[ИмяТаблицы], ИдентификаторыСтрокСотрудников);
		КонецЕсли;
		
		Если ОписаниеДокумента.ОписанияТаблиц.Свойство(КлючИЗначение.Ключ)
			И ОписаниеДокумента.ОписанияТаблиц[КлючИЗначение.Ключ].СодержитПолеСотрудник Тогда
			
			ИмяПоляСотрудник = ОписаниеДокумента.ОписанияТаблиц[КлючИЗначение.Ключ].ИмяРеквизитаСотрудник;
		ИначеЕсли ТаблицаДокумента[0].Свойство("Сотрудник") Тогда
			ИмяПоляСотрудник = "Сотрудник";
		ИначеЕсли ТаблицаДокумента[0].Свойство("ФизическоеЛицо") Тогда
			ИмяПоляСотрудник = "ФизическоеЛицо";
		Иначе
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ТаблицаДокумента[0][ИмяПоляСотрудник]) = Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДокумента, ИмяПоляСотрудник);
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если ПроверятьФизическоеЛицо Тогда
				ФизическоеЛицо = СтрокаТаблицы.ФизическоеЛицо;
				Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
					ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаТаблицы[ИмяПоляСотрудник]];
				КонецЕсли;
				
				Если ФизическиеЛица.Найти(ФизическоеЛицо) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				РасчетЗарплатыРасширенныйКлиентСервер.ДобавитьИдентификаторСтрокиСотрудника(ИдентификаторыСтрокСотрудников, СтрокаТаблицы[ИмяПоляСотрудник], СтрокаТаблицы.ПолучитьИдентификатор());
			КонецЕсли;
			
			НоваяСтрока = КлючИЗначение.Значение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СодержимоеДокумента;
	
КонецФункции

// Подготавливает данные формы документа-начисления для перезаполнения документа
// по переданным параметрам.
// Используется фоновым заданием, если БД серверная.
//
// Параметры:
//		СтруктураПараметров - структура с параметрам
//				(см. ПерезаполнитьДанныеФормы и ОписаниеРасчетногоДокумента).
//		АдресХранилища - адрес, куда будет помещен результат выполнения.
//
Процедура ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеЗаполнения = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация                      = СтруктураПараметров.Организация; 
	ДокументСсылка                   = СтруктураПараметров.ДокументСсылка;
	Подразделение                    = СтруктураПараметров.Подразделение;
	МесяцНачисления                  = СтруктураПараметров.МесяцНачисления;
	Сотрудники                       = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода                 = СтруктураПараметров.ОкончаниеПериода;
	СохранятьИсправления             = СтруктураПараметров.СохранятьИсправления;
	СодержимоеДокумента              = СтруктураПараметров.СодержимоеДокумента;
	КонтролируемыеПоля               = СтруктураПараметров.КонтролируемыеПоля;
	ПозицииВставки                   = СтруктураПараметров.ПозицииВставки;
	НастройкиРасчетаЗарплаты         = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	НачислениеЗарплатыВоеннослужащим = СтруктураПараметров.НачислениеЗарплатыВоеннослужащим;
	ИспользоватьВоеннуюСлужбу        = СтруктураПараметров.ИспользоватьВоеннуюСлужбу;
	Резерв                           = ОписаниеДокумента.Резерв;
	ВидОперации                      = ОписаниеДокумента.ВидОперации;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	// Флаги выполняемых действия при заполнении
	РассчитыватьНачисления = Истина;
	РассчитыватьВзносы     = Истина;
	
	ЗаполнениеДокумента = Сотрудники = Неопределено;
	ИмяДанныхЗаполнения = ?(ЗаполнениеДокумента, "ДанныеДляЗаполненияТаблицДокумента", "ДанныеДляПерезаполненияТаблицДокумента");
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация       = Организация;
		ПараметрыПолученияСотрудников.Подразделение     = Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода     = МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		
		СтруктураПараметров.Сотрудники = Сотрудники;
	КонецЕсли;
	
	ПолучатьДанныеУчета = Истина;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, Резерв, МесяцНачисления, ДокументСсылка, ВидОперации);
	
	МенеджерРасчетаРезервовПоОплатеТруда = СоздатьМенеджерРасчетаРезервовПоОплатеТруда(МесяцНачисления, Организация);
	МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РассчитыватьВзносы     = РассчитыватьВзносы;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.Сотрудники             = Сотрудники;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РасчетРезервов         = Истина;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.НастройкаРезервов      = НастройкаРезервов;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
		
	МенеджерРасчетаЗарплаты = СоздатьМенеджерРасчетаЗарплаты(МесяцНачисления, Организация);
	ЗаполнитьЗначенияСвойств(МенеджерРасчетаЗарплаты.НастройкиРасчета, МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета);
	МенеджерРасчетаЗарплаты.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчетаЗарплаты.НастройкиРасчета.РассчитыватьВзносы     = Ложь;
	
	Если ПолучатьДанныеУчета Тогда
		
		МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		
		СотрудникиДляНачислений = МенеджерРасчетаЗарплаты.ТаблицаСотрудников();
		
		// Сотрудники начислений
		Для Каждого Сотрудник Из Сотрудники Цикл
			НоваяСтрока = СотрудникиДляНачислений.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ДатаНачала = МесяцНачисления;
			НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
		КонецЦикла;
		
		Если СохранятьИсправления Тогда
			ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчетаРезервовПоОплатеТруда, Сотрудники, СтруктураПараметров);
		КонецЕсли;
		
		ОтборМенеджераРасчета = МенеджерРасчетаРезервовПоОплатеТруда.СоздатьОтборы();
		ОтборМенеджераРасчета.Подразделение = Подразделение;
		ОтборМенеджераРасчета.Резерв        = Резерв;
		
		// Заполняем показатели расчета по формуле
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, ОтборМенеджераРасчета);
		Если (Не НастройкаРезервов.НормативныйМетодБУ И ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление)
			Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
			МенеджерРасчетаЗарплаты = МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты;
			МенеджерРасчетаЗарплаты.РассчитатьЗарплату();
			МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		КонецЕсли;
		МенеджерРасчетаРезервовПоОплатеТруда.РассчитатьРезервы();
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
			
		РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
			
		РезервыПоОплатеТруда.РассчитатьСуммыРезерва(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательстваПоСотрудникам;
		ДанныеЗаполнения.ОценочныеОбязательства
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательства;
		
	Иначе
		ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчетаРезервовПоОплатеТруда, Сотрудники, СтруктураПараметров);
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
		ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательстваПоСотрудникам;
		ДанныеЗаполнения.ОценочныеОбязательства
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательства;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление
		Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
	КонецЕсли;
	
	РезультатЗаполнения = Новый Структура;
	
	РезультатЗаполнения.Вставить(ИмяДанныхЗаполнения, ДанныеЗаполнения);
	РезультатЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	//Начисления
	ЗаполнитьМенеджерРасчетаИсправленнымиСтрокамиНачислений(МенеджерРасчета, Сотрудники, СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаИсправленнымиСтрокамиНачислений(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	//Начисления
	Если ОписаниеДокумента.НачисленияИмя <> Неопределено Тогда
		КлючевыеПоля = "Сотрудник, ВидРасчетаРезерва, Начисление";
		СтруктураПоиска = Новый Структура(КлючевыеПоля);
		СочетанияСтрок = РасчетЗарплатыРасширенный.СочетанияИсправленныхСтрок(СодержимоеДокумента.Начисления, СтруктураПараметров.КонтролируемыеПоля["Начисления"], КлючевыеПоля);
		Если СочетанияСтрок.Количество() > 0 Тогда
			Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
				Если Не РасчетЗарплатыРасширенный.ЕстьИсправленияСтрок(Строка, СочетанияСтрок, СтруктураПоиска)
					Или Не ЗначениеЗаполнено(Строка.Начисление) Тогда
					
					Продолжить;
				КонецЕсли;
				ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
				РезервыПоОплатеТрудаФормыРасширенный.СтрокаНачисленияВДанныеМенеджераРасчета(
					МенеджерРасчета,
					Строка,
					Организация,
					ФизическоеЛицо);
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМенеджерРасчетаСтроками(МенеджерРасчета, Сотрудники, СтруктураПараметров)
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	// Начисления
	Для Каждого Строка Из СодержимоеДокумента.Начисления Цикл
		ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		РезервыПоОплатеТрудаФормыРасширенный.СтрокаНачисленияВДанныеМенеджераРасчета(
			МенеджерРасчета,
			Строка,
			Организация,
			ФизическоеЛицо);
	КонецЦикла;
	
	//Взносы
	МенеджерРасчета.Зарплата.Взносы = СодержимоеДокумента.Взносы.Скопировать();
	
КонецПроцедуры

Процедура ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(Форма, МассивОписанийТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	ПустойПоказатель = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
	
	Для Каждого ОписаниеТаблицы Из МассивОписанийТаблицФормы Цикл
		ИмяТаблицы = ОписаниеТаблицы.Ключ;
		ПутьКДанным = ОписаниеТаблицы.Значение.ПутьКДанным;
		СодержитПолеСотрудник = ОписаниеТаблицы.Значение.СодержитПолеСотрудник;
		ИмяРеквизитаСотрудник = ОписаниеТаблицы.Значение.ИмяРеквизитаСотрудник;
		
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		МаксимальноеКоличествоПоказателей = МаксимальноеКоличествоПоказателей();
		
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета, Истина);
		ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
		
		Если Форма.Объект.ВидОперации <> Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
			
			ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "ВидРасчетаРезерва", Истина);
			ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервов(ВидыРасчетаРезервов);
			
			Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервовИнфо Цикл
				Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
					Продолжить;
				КонецЕсли;
				Если ВидРасчетаРезерва.Значение.ЭтоРасчетОтпуска Тогда
					Для Каждого ВидРасчета Из ВидыРасчетаИнфо Цикл
						ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидРасчета.Значение);
						ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ], "Показатели");
						Прервать;
					КонецЦикла;
				Иначе
					ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфо[ВидРасчетаРезерва.Значение.ВидРасчета]);
				КонецЕсли;
				Если ВидРасчетаРезерва.Значение.ИспользоватьСобственнуюФормулуРасчета
					Или ВидРасчетаРезерва.Значение.ЭтоРасчетОтпуска Тогда
					ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ]);
				КонецЕсли;
				ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфоВрем);
			КонецЦикла;
		Иначе
			ВидыРасчетаРезервовИнфо = Новый Соответствие;
			ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "ВидРасчетаРезерва", Истина);
			
			ЭтоРасчетОтпуска = Ложь;
			Для Каждого СтрокаяМассива Из ВидыРасчетаРезервов Цикл
				Если ЗначениеЗаполнено(СтрокаяМассива) Тогда
					ЭтоРасчетОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаяМассива,"ЭтоРасчетОтпуска");
				КонецЕсли;
				Если ЭтоРасчетОтпуска Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоРасчетОтпуска Тогда
				ВидыРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчетаОсновнойОтпуск());
				ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
				ВидыРасчетаРезервов = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "ВидРасчетаРезерва", Истина);
				ВидыРасчетаРезервовИнфо = РезервыПоОплатеТрудаРасширенный.ИнформацияОВидахРасчетаРезервовОтпуск(ВидыРасчетаРезервов);
				
				Для Каждого ВидРасчетаРезерва Из ВидыРасчетаРезервовИнфо Цикл
					Если НЕ ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
						Продолжить;
					КонецЕсли;
					ВидыРасчетаИнфоВрем = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфо[ВидыРасчета[0]]);
					ЗаполнитьЗначенияСвойств(ВидыРасчетаИнфоВрем, ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ]);
					ВидыРасчетаРезервовИнфо[ВидРасчетаРезерва.Ключ] = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВидыРасчетаИнфоВрем);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		УчитыватьОсобенностиПредприятия = Ложь;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
		КонецЕсли;
		
		СотрудникиДляРасчета = Новый Массив;
		Для Каждого СтрокаНачислений Из Начисления Цикл
			Если ЗначениеЗаполнено(СтрокаНачислений.Сотрудник) Тогда
				СотрудникиДляРасчета.Добавить(СтрокаНачислений.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		Если УчитыватьОсобенностиПредприятия Тогда
			СотрудникиПоСпособамРасчета = ОтражениеЗарплатыВБухучетеРасширенный.СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляРасчета, КонецМесяца(Форма.Объект.МесяцНачисления));
			СотрудникиДляРасчета = СотрудникиПоСпособамРасчета.ВыгрузитьКолонку("Сотрудник");
		КонецЕсли;
		
		Если УчитыватьОсобенностиПредприятия Тогда
			СотрудникиПоСреднемуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСреднемуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Иначе
			СотрудникиПоСреднемуЗаработку = СотрудникиДляРасчета;
		КонецЕсли;
		СпособыРасчетаОтпусковСотрудников = ОстаткиОтпусков.СпособыРасчетаОтпусковСотрудников(СотрудникиПоСреднемуЗаработку, КонецМесяца(Форма.Объект.МесяцНачисления));
	
		Для Каждого СтрокаНачислений Из Начисления Цикл
			
			Если СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
				Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
				Если Не ЗначениеЗаполнено(Показатель) Тогда
					СтрокаНачислений["Показатель" + НомерПоказателя] = ПустойПоказатель;
					Продолжить;
				КонецЕсли;
				ПоказательИнфо = РезервыПоОплатеТрудаРасширенный.СведенияОПоказателеРасчетаРезервов(Показатель);
				СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо.Точность);
				СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] 	= ?(ЗначениеЗаполнено(ПоказательИнфо.КраткоеНаименование), ПоказательИнфо.КраткоеНаименование, ПоказательИнфо.Наименование);
			КонецЦикла;
			
			ВидРасчета = ?(ОписаниеТаблицы.Значение.СодержитПолеВидРасчета,
				СтрокаНачислений[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета],
				Форма.Объект[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета]);
			
			Если ВидРасчета.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ВидРасчетаИнфо = ВидыРасчетаРезервовИнфо[СтрокаНачислений.ВидРасчетаРезерва];
			Если ВидРасчетаИнфо = Неопределено Тогда
				ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];
			КонецЕсли;
			
			УчетСреднегоЗаработка.ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2, , Форма.Объект.Ссылка);
			ЗарплатаКадрыРасширенный.ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			ЗаполнитьДанныеПоказателейОстаткаОтпуска(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			ЗаполнитьДанныеПоказателейСохраняемогоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			СтрокаНачислений.СпособРасчетаОтпуска = СпособыРасчетаОтпусковСотрудников[СтрокаНачислений.Сотрудник];
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
				Модуль.ЗаполнитьДанныеПоказателейДенежногоДовольствия(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			КонецЕсли;
			РасчетЗарплатыРасширенныйПереопределяемый.ПоместитьДанныеДополнительныхПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоказателейОстаткаОтпуска(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, ДокументСсылка = Неопределено)
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательОстатокОтпуска = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	
	Если ПоказательОстатокОтпуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если СтрокаПоказателя.Показатель = ПоказательОстатокОтпуска Тогда
			СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = НСтр("ru = 'Подробнее';
																				|en = 'Details'");
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоказателейСохраняемогоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, ДокументСсылка = Неопределено)
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСохраняемыйЗаработок = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок");
	
	Если ПоказательСохраняемыйЗаработок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если СтрокаПоказателя.Показатель = ПоказательСохраняемыйЗаработок Тогда
			СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = НСтр("ru = 'Подробнее';
																				|en = 'Details'");
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВводНачисленийЗаполнитьВторичныеДанныеРасчетаСохраняемогоЗаработка(Форма, Сотрудники = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Начисления = Объект.Начисления;
	Период     = Объект.МесяцНачисления;
	
	Если Начисления.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник");
	КонецЕсли;
	
	УчитыватьОсобенностиПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
	КонецЕсли;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		СотрудникиПоСпособамРасчета = ОтражениеЗарплатыВБухучетеРасширенный.СотрудникиПоСпособамРасчетаОбязательствОтпусков(Сотрудники, Период);
	
		СотрудникиПоСохраняемомуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСохраняемомуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Для Каждого СтрокаТаблицы Из Начисления Цикл
			СтрокаТаблицы.РасчетПоСохраняемомуЗаработку =
				СотрудникиПоСохраняемомуЗаработку.Найти(СтрокаТаблицы.Сотрудник) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Создание и инициализация менеджера расчета резервов.
//
// Параметры
//	МесяцНачисления - тип Дата, месяц начисления зарплаты.
//	Организация - тип СправочникСсылка.Организации.
//
// Возвращаемое значение - обработка менеджера расчета.
//
Функция СоздатьМенеджерРасчетаРезервовПоОплатеТруда(МесяцНачисления, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерРасчетаРезервовПоОплатеТруда = Обработки.МенеджерРасчетаРезервовПоОплатеТруда.Создать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПериодРасчета = Новый СтандартныйПериод;
	ПериодРасчета.ДатаНачала = НачалоМесяца(МесяцНачисления);
	ПериодРасчета.ДатаОкончания = КонецМесяца(МесяцНачисления);
	МенеджерРасчетаРезервовПоОплатеТруда.Инициализировать(ПериодРасчета, Организация);
	
	Возврат МенеджерРасчетаРезервовПоОплатеТруда;
	
КонецФункции

// Создание и инициализация менеджера расчета зарплаты.
//
// Параметры
//	МесяцНачисления - тип Дата, месяц начисления зарплаты.
//	Организация - тип СправочникСсылка.Организации.
//
// Возвращаемое значение - обработка менеджера расчета.
//
Функция СоздатьМенеджерРасчетаЗарплаты(МесяцНачисления, Организация) Экспорт
	
	МенеджерРасчетаЗарплаты = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(МесяцНачисления, Организация);
	МенеджерРасчетаЗарплаты.НастройкиРасчета.РассчитыватьВзносы     = Ложь;
	МенеджерРасчетаЗарплаты.НастройкиРасчета.ОкончательныйРасчет    = Истина;
	МенеджерРасчетаЗарплаты.НастройкиРасчета.РассчитыватьНачисленияТолькоПоТекущемуДокументу = Истина;
	МенеджерРасчетаЗарплаты.НастройкиНачислений.РассчитыватьНачисления = Истина;
	
	Возврат МенеджерРасчетаЗарплаты;
	
КонецФункции

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыЗаполненияТаблицДокумента();
	ДополнениеСтруктуры = Новый Структура("Резерв,ВидОперации,ДопПараметрыОтбора");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметры, ДополнениеСтруктуры);
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Получает данные для заполнения табличных частей документа, выполняющего начисление резервов.
//
Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, Резерв, Знач МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт	
	
	ЗамерПодготовкаДанныхЗаполненияДокумента = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка                   = ДополнительныеПараметры.ДокументСсылка;
	Подразделение                    = ДополнительныеПараметры.Подразделение;
	ВидОперации                      = ДополнительныеПараметры.ВидОперации;
	ОкончаниеПериода                 = ДополнительныеПараметры.ОкончаниеПериода;
	ИспользоватьВоеннуюСлужбу        = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	МногопотоковоеЗаполнение         = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	СотрудникиДополнительныйДоход    = ДополнительныеПараметры.СотрудникиДополнительныйДоход;
	АдресХранилища                   = ДополнительныеПараметры.АдресХранилища;
	НастройкиРасчетаЗарплаты         = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ДанныеЗаполнения                 = РезервыПоОплатеТруда.ОписаниеДанныхДляЗаполненияТаблицДокумента();
	ДопПараметрыОтбора               = ДополнительныеПараметры.ДопПараметрыОтбора;
	
	Если Не ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	// Флаги выполняемых действия при заполнении
	РассчитыватьНачисления = Истина;
	РассчитыватьВзносы     = Истина;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыСотрудников(ИменаВТ, МенеджерВременныхТаблиц, Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
	КонецЕсли;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	ЗамерВыявленияСотрудников = ОценкаПроизводительности.НачатьЗамерВремени();
	Если Сотрудники = Неопределено Тогда
		ПараметрыСотрудников = РасчетЗарплатыРасширенный.ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
		ПараметрыСотрудников.ОкончаниеПериода                       = ОкончаниеПериода;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоТрудовымДоговорам = Истина;
		ПараметрыСотрудников.ЗаполнятьНачисленияПоДоговорамПодряда  = Ложь;
		ПараметрыСотрудников.ИспользоватьВоеннуюСлужбу              = ИспользоватьВоеннуюСлужбу;
		ПараметрыСотрудников.НачислениеЗарплатыВоеннослужащим       = НачислениеЗарплатыВоеннослужащим;
		ПараметрыСотрудников.РежимДоначисления                      = Ложь;
		ПараметрыСотрудников.МенеджерВременныхТаблиц                = МенеджерВременныхТаблиц;
		
		Сотрудники = РасчетЗарплатыРасширенный.СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ПараметрыСотрудников);
		
		Если ДопПараметрыОтбора <> Неопределено Тогда
			УточнитьСписокСотрудников(Организация, Сотрудники, ОкончаниеПериода, ДопПараметрыОтбора.ИмяПоказателяДопОтбора);
		КонецЕсли;
		Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
			Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
			ДополнитьСписокСотрудниковРанеееУволенными(Сотрудники, Организация, Подразделение, Резерв, ОкончаниеПериода, ДокументСсылка);
		КонецЕсли;
		
		ИменаВТ.Добавить("ВТВсеСотрудникиОрганизации");
		
		Если Сотрудники.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ВыявлениеСотрудников", ЗамерВыявленияСотрудников);
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРасчетаРезервов(Организация, Резерв, МесяцНачисления, ДокументСсылка, ВидОперации);
	
	МенеджерРасчетаРезервовПоОплатеТруда = СоздатьМенеджерРасчетаРезервовПоОплатеТруда(МесяцНачисления, Организация);
	МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РассчитыватьНачисления = РассчитыватьНачисления;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РассчитыватьВзносы     = РассчитыватьВзносы;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.Сотрудники             = Сотрудники;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.РасчетРезервов         = Истина;
	МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета.НастройкаРезервов      = НастройкаРезервов;
	
	МенеджерРасчетаЗарплаты = СоздатьМенеджерРасчетаЗарплаты(МесяцНачисления, Организация);
	ЗаполнитьЗначенияСвойств(МенеджерРасчетаЗарплаты.НастройкиРасчета, МенеджерРасчетаРезервовПоОплатеТруда.НастройкиРасчета);
	МенеджерРасчетаЗарплаты.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчетаЗарплаты.НастройкиРасчета.РассчитыватьВзносы     = Ложь;
	
	СотрудникиДляНачислений = МенеджерРасчетаЗарплаты.ТаблицаСотрудников();
	
	// Сотрудники начислений
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = СотрудникиДляНачислений.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = МесяцНачисления;
		НоваяСтрока.ДатаОкончания = ОкончаниеПериода;
	КонецЦикла;
	
	МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
	
	ОтборМенеджераРасчета = МенеджерРасчетаРезервовПоОплатеТруда.СоздатьОтборы();
	ОтборМенеджераРасчета.Подразделение = Подразделение;
	ОтборМенеджераРасчета.Резерв        = Резерв;
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление Тогда
		// Расчет текущего месяца
		
		// Заполняем показатели расчета по формуле
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, ОтборМенеджераРасчета);
		Если Не НастройкаРезервов.НормативныйМетодБУ Тогда
			МенеджерРасчетаЗарплаты = МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты;
			МенеджерРасчетаЗарплаты.РассчитатьЗарплату();
			МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		КонецЕсли;
		МенеджерРасчетаРезервовПоОплатеТруда.РассчитатьРезервы();
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		// Расчет инвентаризации
		
		// Заполняем показатели расчета по формуле
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, ОтборМенеджераРасчета);
		МенеджерРасчетаЗарплаты = МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты;
		МенеджерРасчетаЗарплаты.РассчитатьЗарплату();
		МенеджерРасчетаРезервовПоОплатеТруда.МенеджерРасчетаЗарплаты = МенеджерРасчетаЗарплаты;
		МенеджерРасчетаРезервовПоОплатеТруда.РассчитатьРезервы();
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
		
		ДанныеЗаполнения.Начисления
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Начисления;
		ДанныеЗаполнения.Взносы
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.Взносы;
		ДанныеЗаполнения.РасчетРезервов
			= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.РасчетРезервов;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Списание
		Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Корректировка Тогда
		// Заполняем остатками
		
		МенеджерРасчетаРезервовПоОплатеТруда.ЗаполнитьРезервыПоОплатеТруда(СотрудникиДляНачислений, ОтборМенеджераРасчета);
		МенеджерРасчетаРезервовПоОплатеТруда.РассчитатьРезервы();
		
		РезервыПоОплатеТруда.РассчитатьТекущийМесяц(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
			Организация,
			Резерв,
			МесяцНачисления,
			МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
			ВидОперации);
		
	КонецЕсли;
	
	РезервыПоОплатеТруда.РассчитатьСуммыРезерваПоСотрудникам(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
		Организация,
		Резерв,
		МесяцНачисления,
		МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
		ВидОперации);
		
	РезервыПоОплатеТруда.РассчитатьСуммыРезерва(МенеджерРасчетаРезервовПоОплатеТруда.Зарплата,
		Организация,
		Резерв,
		МесяцНачисления,
		МенеджерРасчетаРезервовПоОплатеТруда.ИсключаемыйРегистратор,
		ВидОперации);
	
	ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам
		= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательстваПоСотрудникам;
	ДанныеЗаполнения.ОценочныеОбязательства
		= МенеджерРасчетаРезервовПоОплатеТруда.Зарплата.ОценочныеОбязательства;
		
	Если ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Начисление
		Или ВидОперации = Перечисления.ВидыОперацийРезервовПоОплатеТруда.Инвентаризация Тогда
		РезервыПоОплатеТруда.СвернутьТаблицуРасчетаРезервов(ДанныеЗаполнения.РасчетРезервов);
	КонецЕсли;
		
	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремениТехнологический("НачислениеЗарплаты.ПодготовкаДанныхЗаполненияДокумента", ЗамерПодготовкаДанныхЗаполненияДокумента);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура УточнитьСписокСотрудников(Организация, МассивСотрудников, Период, ИмяПоказателя)
	
	ТаблицаСостоянияСотрудников = РезервыПоОплатеТруда.СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация, МассивСотрудников, Период);
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянияСотрудников Цикл
		Если СтрокаТаблицы[ИмяПоказателя] Тогда
			МассивСотрудников.Добавить(СтрокаТаблицы.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СортироватьДанныеДляЗаполнения(ДанныеЗаполнения, Организация, МесяцНачисления, ИспользоватьСортировкуПоУмолчанию) Экспорт
	СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию);
	СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения, Организация, МесяцНачисления);
КонецПроцедуры	

Процедура СортироватьРезультатРасчетаНачислений(ДанныеЗаполнения, ИспользоватьСортировкуПоУмолчанию = Истина)
	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения.Начисления);
	Коллекция.ОписаниеКоллекции.Псевдоним            = "Начисления";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник     = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение = "Подразделение";
	Коллекция.ОписаниеКоллекции.ИмяПоляПериод        = "ДатаНачала";
	СортируемыеКоллекции.Добавить(Коллекция);
		
	МетаданныеРеквизитов = Метаданные.Документы.РезервыПоОплатеТруда.ТабличныеЧасти.Начисления.Реквизиты;
	Если ИспользоватьСортировкуПоУмолчанию Тогда
		НастройкиСортировки = СотрудникиФормыРасширенный.НастройкиСортировкиПоУмолчанию();
	Иначе
		НастройкиСортировки = СотрудникиФормыРасширенный.НастройкиСортировки();
	КонецЕсли;
	
	СотрудникиФормыРасширенный.ДобавитьДополнительноеПолеСортировки(Коллекция, "ДатаНачала", МетаданныеРеквизитов.ДатаНачала.Тип);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения.РасчетРезервов);
	Коллекция.ОписаниеКоллекции.Псевдоним        = "РасчетРезервов";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник = "Сотрудник";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияСотрудников(ДанныеЗаполнения.ОценочныеОбязательстваПоСотрудникам);
	Коллекция.ОписаниеКоллекции.Псевдоним            = "ОценочныеОбязательстваПоСотрудникам";
	Коллекция.ОписаниеКоллекции.ИмяПоляСотрудник     = "Сотрудник";
	Коллекция.ОписаниеКоллекции.ИмяПоляПодразделение = "Подразделение";
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
	    ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		Если ТаблицаИсходныхДанных.Колонки.Найти("Порядок") = Неопределено Тогда
			ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;
		
КонецПроцедуры	

Процедура СортироватьРезультатыРасчетаПоФизическимЛицам(ДанныеЗаполнения, Организация, МесяцНачисления)	
	СортируемыеКоллекции = Новый Массив;
	
	Коллекция = СотрудникиФормыРасширенный.СортируемаяКоллекцияФизическихЛиц(ДанныеЗаполнения.Взносы);
	Коллекция.ОписаниеКоллекции.Псевдоним             = "Взносы";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	УстановитьПривилегированныйРежим(Истина);
	ПорядокСортировки = СотрудникиФормыРасширенный.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Организация, КонецМесяца(МесяцНачисления));
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого КлючЗначение Из ПорядокСортировки Цикл
	    ТаблицаИсходныхДанных = ДанныеЗаполнения[КлючЗначение.Ключ];
		ТаблицаИсходныхДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
			
		Для Каждого СтрокаПорядка Из КлючЗначение.Значение Цикл
			СтрокаТаблицы = ТаблицаИсходныхДанных[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;	
		КонецЦикла;	
		
		ТаблицаИсходныхДанных.Сортировать("Порядок");
		ТаблицаИсходныхДанных.Колонки.Удалить("Порядок");
	КонецЦикла;	
		
КонецПроцедуры

Процедура ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы) Экспорт
	
	СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	
	НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	НачисленнаяЗарплатаИВзносы.Колонки.Добавить("КомпенсацияОтпуска", Новый ОписаниеТипов("Булево"));
	НачисленнаяЗарплатаИВзносы.Колонки.Добавить("ОтпускАвансом", Новый ОписаниеТипов("Булево"));
	
	НачисленнаяЗарплатаИВзносы.Индексы.Добавить("Начисление");
	
	ЗначенияКолонкиНачисление = ОбщегоНазначения.ВыгрузитьКолонку(НачисленнаяЗарплатаИВзносы, "Начисление", Истина);
	МассивНачислений = Новый Массив;
	Для Каждого ЗаписьМассива Из ЗначенияКолонкиНачисление Цикл
		Если ЗначениеЗаполнено(ЗаписьМассива)
			И ТипЗнч(ЗаписьМассива) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			МассивНачислений.Добавить(ЗаписьМассива);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНачислений, "ОсновнойВидРасчета,КатегорияНачисленияИлиНеоплаченногоВремени, ВидОтпуска");
	Для Каждого ЗначениеДанныхНачислений Из МассивНачислений Цикл
		
		ОсновнойВидРасчета = ДанныеНачислений[ЗначениеДанныхНачислений].ОсновнойВидРасчета;
		Если ЗначениеЗаполнено(ОсновнойВидРасчета) Тогда
			ДанныеОсновногоНачисления = ДанныеНачислений[ОсновнойВидРасчета];
			Если ДанныеОсновногоНачисления = Неопределено Тогда
				ДанныеОсновногоНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнойВидРасчета, "ОсновнойВидРасчета,КатегорияНачисленияИлиНеоплаченногоВремени, ВидОтпуска");
				ДанныеНачислений.Вставить(ОсновнойВидРасчета, ДанныеОсновногоНачисления);
			КонецЕсли;
			НачислениеДляАнализа = ОсновнойВидРасчета;
		Иначе
			НачислениеДляАнализа = ЗначениеДанныхНачислений;
		КонецЕсли;
		
		СвойстваНачисления = СвойстваПоКатегориям[ДанныеНачислений[НачислениеДляАнализа].КатегорияНачисленияИлиНеоплаченногоВремени];
		Если СвойстваНачисления <> Неопределено
			И СвойстваНачисления.НедоступныеСвойства.Найти("ВидОтпуска") = Неопределено Тогда
			
			ВидОтпуска = ДанныеНачислений[НачислениеДляАнализа].ВидОтпуска;
			КомпенсацияОтпуска = ДанныеНачислений[НачислениеДляАнализа].КатегорияНачисленияИлиНеоплаченногоВремени =
				Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
			
			МассивОтобранныхНачислений = НачисленнаяЗарплатаИВзносы.НайтиСтроки(Новый Структура("Начисление", ЗначениеДанныхНачислений));
			Для Каждого ЗначениеМассива Из МассивОтобранныхНачислений Цикл
				ЗначениеМассива.ВидОтпуска         = ВидОтпуска;
				ЗначениеМассива.КомпенсацияОтпуска = КомпенсацияОтпуска;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивОтобранныхНачислений = НачисленнаяЗарплатаИВзносы.НайтиСтроки(Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускАвансом));
	Для Каждого ЗначениеМассива Из МассивОтобранныхНачислений Цикл
		ЗначениеМассива.ОтпускАвансом = Истина;
	КонецЦикла;
	
	РезервыПоОплатеТрудаПереопределяемый.ДополнитьТаблицуСведениямиОбОсобенностяхОтпусков(НачисленнаяЗарплатаИВзносы);
	
	НачисленнаяЗарплатаИВзносы.Индексы.Удалить(0);
	
КонецПроцедуры

Функция СостоянияСотрудниковДляРасчетаОценочныхОбязательств(Организация, Сотрудники, Период) Экспорт
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период",    Новый ОписаниеТипов("Дата"));
	Для Каждого Сотрудник ИЗ Сотрудники Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период    = КонецМесяца(Период);
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период    = КонецМесяца(НачалоМесяца(Период-1));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
	|	ТаблицаСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
									Запрос.МенеджерВременныхТаблиц,
									"ВТСотрудникиИПериод");
									
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация, ДатаУвольнения, Состояние");
									
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ТекущийПериод",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("ИсключаемыеСостояния", Перечисления.СостоянияСотрудника.СостоянияПрерывающиеПравоНаОтпуск());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ) <= &ТекущийПериод
	|	КОНЕЦ КАК Уволен,
	|	КадровыеДанныеСотрудников.Организация <> &Организация КАК Перемещен,
	|	КОНЕЦПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ) <> &ТекущийПериод
	|		И КадровыеДанныеСотрудников.Организация = &Организация
	|		И КадровыеДанныеСотрудников.Организация <> ЕСТЬNULL(КадровыеДанныеСотрудниковПрежние.Организация, КадровыеДанныеСотрудников.Организация) КАК Зачислен,
	|	КадровыеДанныеСотрудников.Состояние В (&ИсключаемыеСостояния) КАК Зарезервирован
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковПрежние
	|		ПО КадровыеДанныеСотрудников.Сотрудник = КадровыеДанныеСотрудниковПрежние.Сотрудник
	|			И КадровыеДанныеСотрудников.Период > КадровыеДанныеСотрудниковПрежние.Период
	|ГДЕ
	|	КадровыеДанныеСотрудников.Период = &ТекущийПериод";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	
	// Получение данных для заполнения табличных частей документа.
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента;
	Организация       = СтруктураПараметров.Организация;
	Резерв            = СтруктураПараметров.Резерв;
	МесяцНачисления   = СтруктураПараметров.МесяцНачисления;
	
	ДополнительныеПараметры = РезервыПоОплатеТруда.ДополнительныеПараметрыЗаполненияТаблицДокумента();
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, СтруктураПараметров);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
		Если Не РегистрыРасчета.Начисления.ЕстьДвиженияПоРегистратору(СтруктураПараметров.ДокументСсылка) И Модуль.ИспользоватьМногопотоковоеЗаполнениеДокументов() Тогда
			ДополнительныеПараметры.АдресХранилища = АдресХранилища;
			Модуль.ПодготовитьДанныеДляЗаполнения(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = РезервыПоОплатеТрудаРасширенный.ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, Резерв, МесяцНачисления, ДополнительныеПараметры);
	
	РезультатЗаполнения.Вставить("ДанныеДляЗаполненияТаблицДокумента", ДанныеЗаполнения);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	РезервыПоОплатеТрудаБазовый.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СправкаПоОтпускамСотрудника") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_СправкаПоОтпускамСотрудника", НСтр("ru = 'Справка по отпускам';
																	|en = 'Leave statement'"),
						ПечатьСправкаПоОтпускамСотрудника(МассивОбъектов, ОбъектыПечати, ПараметрыПечати), ,);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьСправкаПоОтпускамСотрудника(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") 
		И ПараметрыПечати.Свойство("ПериодРегистрации") Тогда
		ДатаОтчета = КонецМесяца(ПараметрыПечати.ПериодРегистрации);
	Иначе
		ДатаОтчета = ТекущаяДатаСеанса();
	КонецЕсли;

	ОтчетСправкаПоОтпускамСотрудника = Отчеты["СправкаПоОтпускам"].Создать();
	ОтчетСправкаПоОтпускамСотрудника.ИнициализироватьОтчет();
	КомпоновщикНастроек = ОтчетСправкаПоОтпускамСотрудника.КомпоновщикНастроек;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ДатаОстатков = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ДатаОстатков");
	ДатаОстатков.Значение = Новый СтандартнаяДатаНачала(ДатаОтчета);
	ДатаОстатков.Использование = Истина;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	
	ОтчетСправкаПоОтпускамСотрудника.СкомпоноватьРезультат(ДокументРезультат);
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ЗапросДанныеПечатиДокументов(Запрос) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезервыПоОплатеТруда.Ссылка КАК Документ,
	|	РезервыПоОплатеТруда.Организация КАК Организация,
	|	РезервыПоОплатеТруда.МесяцНачисления КАК МесяцНачисления,
	|	РезервыПоОплатеТруда.Резерв КАК Резерв,
	|	РезервыПоОплатеТруда.Дата КАК Дата,
	|	РезервыПоОплатеТруда.Номер КАК Номер,
	|	РезервыПоОплатеТруда.Подразделение КАК Подразделение,
	|	РезервыПоОплатеТруда.Исполнитель.ФИО КАК Исполнитель,
	|	РезервыПоОплатеТруда.ДолжностьИсполнителя КАК ДолжностьИсполнителя,
	|	РезервыПоОплатеТруда.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	Документ.РезервыПоОплатеТруда КАК РезервыПоОплатеТруда
	|ГДЕ
	|	РезервыПоОплатеТруда.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва КАК ВидРезерва,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода КАК НачалоПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода КАК КонецПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ФормироватьРезервНУ КАК ФормироватьРезервНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ КАК МетодНачисленияРезерваБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ КАК МетодНачисленияРезерваНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ <> ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.МетодОбязательств) КАК НормативныйМетодБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ <> ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.МетодОбязательств) КАК НормативныйМетодНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОграничиватьНачислениеПредельнойСуммойБУ КАК ОграничиватьНачислениеПредельнойСуммойБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОграничиватьНачислениеПредельнойСуммойНУ КАК ОграничиватьНачислениеПредельнойСуммойНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПредельнаяВеличинаОтчисленийВРезервБУ КАК ПредельнаяВеличинаОтчисленийВРезервБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПредельнаяВеличинаОтчисленийВРезервНУ КАК ПредельнаяВеличинаОтчисленийВРезервНУ
	|ПОМЕСТИТЬ ВТ_НастройкаРасчета
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|		ПО ВТ_Документ.Организация = НастройкиРасчетаРезервовПоОплатеТруда.Организация
	|			И ВТ_Документ.Резерв = НастройкиРасчетаРезервовПоОплатеТруда.Резерв
	|			И (ВТ_Документ.МесяцНачисления МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	ВТ_Документ.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Документ.Резерв КАК Резерв,
	|	РезервыПоОплатеТрудаНачисления.Сотрудник КАК Сотрудник,
	|	РезервыПоОплатеТрудаНачисления.Подразделение КАК Подразделение,
	|	РезервыПоОплатеТрудаНачисления.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
	|	РезервыПоОплатеТрудаНачисления.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	Начисления.Ссылка КАК ВидРасчета,
	|	СУММА(РезервыПоОплатеТрудаНачисления.Результат) КАК Результат,
	|	СУММА(РезервыПоОплатеТрудаНачисления.РезультатНУ) КАК РезультатНУ,
	|	РезервыПоОплатеТрудаНачисления.ФондОплатыТруда КАК ФондОплатыТруда,
	|	РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезерв КАК НормативОтчисленийВРезерв,
	|	РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезервНУ КАК НормативОтчисленийВРезервНУ,
	|	РезервыПоОплатеТрудаНачисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|					ИЛИ ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска
	|				ТОГДА ВидыРасчетовРезервовПоОплатеТруда.ФормулаРасчета
	|			ИНАЧЕ Начисления.ФормулаРасчета
	|		КОНЕЦ КАК СТРОКА(300)) КАК ФормулаРасчета,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Наименование КАК ФизическоеЛицоНаименование
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.Начисления КАК РезервыПоОплатеТрудаНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|				ПО ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета = Начисления.Ссылка
	|			ПО РезервыПоОплатеТрудаНачисления.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТруда.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|				ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|			ПО РезервыПоОплатеТрудаНачисления.Сотрудник = Сотрудники.Ссылка
	|		ПО ВТ_Документ.Документ = РезервыПоОплатеТрудаНачисления.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Документ,
	|	ВТ_Документ.Организация,
	|	ВТ_Документ.МесяцНачисления,
	|	ВТ_Документ.Резерв,
	|	РезервыПоОплатеТрудаНачисления.Сотрудник,
	|	Сотрудники.ФизическоеЛицо,
	|	РезервыПоОплатеТрудаНачисления.Подразделение,
	|	РезервыПоОплатеТрудаНачисления.ДолжностьПоШтатномуРасписанию,
	|	РезервыПоОплатеТрудаНачисления.ФондОплатыТруда,
	|	РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезерв,
	|	РезервыПоОплатеТрудаНачисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Ссылка,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|					ИЛИ ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска
	|				ТОГДА ВидыРасчетовРезервовПоОплатеТруда.ФормулаРасчета
	|			ИНАЧЕ Начисления.ФормулаРасчета
	|		КОНЕЦ КАК СТРОКА(300)),
	|	РезервыПоОплатеТрудаНачисления.ВидРасчетаРезерва,
	|	ФизическиеЛица.Наименование,
	|	РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезервНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	ВТ_Документ.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Документ.Резерв КАК Резерв,
	|	РезервыПоОплатеТрудаПоказатели.НомерСтроки КАК НомерСтроки,
	|	РезервыПоОплатеТрудаПоказатели.Показатель КАК Показатель,
	|	РезервыПоОплатеТрудаПоказатели.Значение КАК Значение,
	|	РезервыПоОплатеТрудаПоказатели.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
	|	КОЛИЧЕСТВО(РезервыПоОплатеТрудаПоказатели1.ИдентификаторСтрокиВидаРасчета) КАК КоличествоПоказателей,
	|	ВТ_Начисления.ВидРасчетаРезерва КАК ВидРасчетаРезерва
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.Показатели КАК РезервыПоОплатеТрудаПоказатели
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.Показатели КАК РезервыПоОплатеТрудаПоказатели1
	|			ПО РезервыПоОплатеТрудаПоказатели.Ссылка = РезервыПоОплатеТрудаПоказатели1.Ссылка
	|				И РезервыПоОплатеТрудаПоказатели.ИдентификаторСтрокиВидаРасчета = РезервыПоОплатеТрудаПоказатели1.ИдентификаторСтрокиВидаРасчета
	|		ПО ВТ_Документ.Документ = РезервыПоОплатеТрудаПоказатели.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Начисления КАК ВТ_Начисления
	|		ПО (РезервыПоОплатеТрудаПоказатели.ИдентификаторСтрокиВидаРасчета = ВТ_Начисления.ИдентификаторСтрокиВидаРасчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Документ,
	|	ВТ_Документ.Организация,
	|	ВТ_Документ.МесяцНачисления,
	|	ВТ_Документ.Резерв,
	|	РезервыПоОплатеТрудаПоказатели.Показатель,
	|	РезервыПоОплатеТрудаПоказатели.Значение,
	|	РезервыПоОплатеТрудаПоказатели.ИдентификаторСтрокиВидаРасчета,
	|	РезервыПоОплатеТрудаПоказатели.НомерСтроки,
	|	ВТ_Начисления.ВидРасчетаРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Начисления.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТ_Начисления.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТ_ВидыРасчетов
	|ИЗ
	|	ВТ_Начисления КАК ВТ_Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Начисления.ВидРасчета,
	|	ВТ_Начисления.ВидРасчетаРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка КАК Ссылка,
	|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК КраткоеНаименование,
	|	ПоказателиРасчетаЗарплаты.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_СвойстваПоказателей
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Показатели.Показатель
	|			ИЗ
	|				ВТ_Показатели)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка,
	|	ПоказателиРасчетаРезервовПоОплатеТруда.КраткоеНаименование,
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Идентификатор
	|ИЗ
	|	Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК ПоказателиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Показатели.Показатель
	|			ИЗ
	|				ВТ_Показатели)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыРасчетов.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.НомерСтроки КАК НомерСтроки,
	|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель КАК Показатель,
	|	КОЛИЧЕСТВО(ВидыРасчетовРезервовПоОплатеТрудаПоказатели1.Ссылка) КАК КоличествоПоказателей,
	|	ВТ_СвойстваПоказателей.КраткоеНаименование КАК КраткоеНаименование,
	|	ВТ_СвойстваПоказателей.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_НастройкаПоказателей
	|ИЗ
	|	ВТ_ВидыРасчетов КАК ВТ_ВидыРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК ВидыРасчетовРезервовПоОплатеТрудаПоказатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваПоказателей КАК ВТ_СвойстваПоказателей
	|			ПО ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель = ВТ_СвойстваПоказателей.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК ВидыРасчетовРезервовПоОплатеТрудаПоказатели1
	|			ПО ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Ссылка = ВидыРасчетовРезервовПоОплатеТрудаПоказатели1.Ссылка
	|		ПО ВТ_ВидыРасчетов.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВидыРасчетов.ВидРасчетаРезерва,
	|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.Показатель,
	|	ВидыРасчетовРезервовПоОплатеТрудаПоказатели.НомерСтроки,
	|	ВТ_СвойстваПоказателей.КраткоеНаименование,
	|	ВТ_СвойстваПоказателей.Идентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ВидыРасчетов.ВидРасчетаРезерва,
	|	НачисленияПоказатели.НомерСтроки,
	|	НачисленияПоказатели.Показатель,
	|	КОЛИЧЕСТВО(НачисленияПоказатели1.Ссылка),
	|	ВТ_СвойстваПоказателей.КраткоеНаименование,
	|	ВТ_СвойстваПоказателей.Идентификатор
	|ИЗ
	|	ВТ_ВидыРасчетов КАК ВТ_ВидыРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваПоказателей КАК ВТ_СвойстваПоказателей
	|			ПО НачисленияПоказатели.Показатель = ВТ_СвойстваПоказателей.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели1
	|			ПО НачисленияПоказатели.Ссылка = НачисленияПоказатели1.Ссылка
	|		ПО ВТ_ВидыРасчетов.ВидРасчета = НачисленияПоказатели.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ВидыРасчетов.ВидРасчетаРезерва,
	|	НачисленияПоказатели.НомерСтроки,
	|	НачисленияПоказатели.Показатель,
	|	ВТ_СвойстваПоказателей.КраткоеНаименование,
	|	ВТ_СвойстваПоказателей.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документ.Документ КАК Документ,
	|	ВТ_Документ.Организация КАК Организация,
	|	ВТ_Документ.МесяцНачисления КАК МесяцНачисления,
	|	ВТ_Документ.Резерв КАК Резерв,
	|	РезервыПоОплатеТрудаВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РезервыПоОплатеТрудаВзносы.СтраховыеВзносы КАК СтраховыеВзносы,
	|	РезервыПоОплатеТрудаВзносы.ТекущаяСтавкаСтраховыхВзносов КАК ТекущаяСтавкаСтраховыхВзносов,
	|	РезервыПоОплатеТрудаВзносы.ФССНесчастныеСлучаи КАК ФССНесчастныеСлучаи,
	|	РезервыПоОплатеТрудаВзносы.ТекущаяСтавкаФССНесчастныеСлучаи КАК ТекущаяСтавкаФССНесчастныеСлучаи,
	|	СУММА(РезервыПоОплатеТрудаВзносы.СуммаСтраховыхВзносов) КАК СуммаСтраховыхВзносов,
	|	СУММА(РезервыПоОплатеТрудаВзносы.СуммаСтраховыхВзносовНУ) КАК СуммаСтраховыхВзносовНУ,
	|	СУММА(РезервыПоОплатеТрудаВзносы.СуммаФССНесчастныеСлучаи) КАК СуммаФССНесчастныеСлучаи,
	|	СУММА(РезервыПоОплатеТрудаВзносы.СуммаФССНесчастныеСлучаиНУ) КАК СуммаФССНесчастныеСлучаиНУ,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервСтраховыеВзносы КАК НормативОтчисленийВРезервСтраховыеВзносы,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервФССНесчастныеСлучаи КАК НормативОтчисленийВРезервФССНесчастныеСлучаи,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервСтраховыеВзносыНУ КАК НормативОтчисленийВРезервСтраховыеВзносыНУ,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ КАК НормативОтчисленийВРезервФССНесчастныеСлучаиНУ
	|ПОМЕСТИТЬ ВТ_Взносы
	|ИЗ
	|	ВТ_Документ КАК ВТ_Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РезервыПоОплатеТруда.Взносы КАК РезервыПоОплатеТрудаВзносы
	|		ПО ВТ_Документ.Документ = РезервыПоОплатеТрудаВзносы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Документ.Документ,
	|	ВТ_Документ.Организация,
	|	ВТ_Документ.МесяцНачисления,
	|	ВТ_Документ.Резерв,
	|	РезервыПоОплатеТрудаВзносы.ФизическоеЛицо,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервФССНесчастныеСлучаи,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервСтраховыеВзносы,
	|	РезервыПоОплатеТрудаВзносы.ТекущаяСтавкаСтраховыхВзносов,
	|	РезервыПоОплатеТрудаВзносы.ТекущаяСтавкаФССНесчастныеСлучаи,
	|	РезервыПоОплатеТрудаВзносы.ФССНесчастныеСлучаи,
	|	РезервыПоОплатеТрудаВзносы.СтраховыеВзносы,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервСтраховыеВзносыНУ,
	|	РезервыПоОплатеТрудаВзносы.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьИспользованиеОбмена(ОбменИспользуется, Организация) Экспорт
	
	РезервыПоОплатеТрудаБазовый.ПроверитьИспользованиеОбмена(ОбменИспользуется, Организация);
	
Конецпроцедуры

#Область ВидыРасчетовРезервовПоОплатеТруда

Функция ВидыРасчетовРезервовПоОплатеТрудаЭлементПоОписанию(ОписаниеЭлемента) Экспорт
	
	ВидРасчетаРезерваОбъект = РезервыПоОплатеТруда.ВидыРасчетовРезервовПоОплатеТрудаНовыйЭлементПоОписанию(ОписаниеЭлемента);
	
	Если ОписаниеЭлемента.Свойство("НазначениеПоказателя")
		И ЗначениеЗаполнено(ОписаниеЭлемента.НазначениеПоказателя) Тогда
		ВидРасчетаРезерваОбъект.НазначениеПоказателя = ОписаниеЭлемента.НазначениеПоказателя;
	Иначе
		ВидРасчетаРезерваОбъект.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации;
	КонецЕсли;
	
	ЗаполнитьПоказателиВидаРасчетаПоНачислению(ВидРасчетаРезерваОбъект);
	
	ВидРасчетаРезерваОбъект.Записать();
	
	Возврат ВидРасчетаРезерваОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьПоказателиВидаРасчетаПоНачислению(Объект, ВидРасчета = Неопределено) Экспорт
	
	Если ВидРасчета = Неопределено Тогда
		Если Объект.ЭтоРасчетОтпуска Тогда
			ВидРасчета = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
			ВидРасчета = ВидРасчета.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
		
	Если ВидРасчета = Неопределено Тогда
		ВидРасчета = Объект.ВидРасчета.ПолучитьОбъект();
	КонецЕсли;
	
	Если Объект.ЭтоРасчетОтпуска Тогда
		Объект.ФормулаРасчета                                       = РезервыПоОплатеТрудаРасширенный.ФормулаРасчетаРезерваОтпусков(Ложь);
		Объект.ФормулаРасчетаДляВыполнения                          = РезервыПоОплатеТрудаРасширенный.ФормулаРасчетаРезерваОтпусков(Истина);
		Объект.Рассчитывается                                       = Истина;
		Объект.СпособРасчета                                        = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Иначе
		Объект.ФормулаРасчета                                       = ВидРасчета.ФормулаРасчета;
		Объект.ФормулаРасчетаДляВыполнения                          = ВидРасчета.ФормулаРасчетаДляВыполнения;
		Объект.Рассчитывается                                       = ВидРасчета.Рассчитывается;
		Объект.СпособРасчета                                        = ВидРасчета.СпособРасчета;
	КонецЕсли;
	
	Объект.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц       = ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц;
	Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка;
	Объект.КоличествоМесяцевРасчетаСреднегоЗаработка            = ВидРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка;
	Объект.ПериодРасчетаБазовыхНачислений                       = ВидРасчета.ПериодРасчетаБазовыхНачислений;
	Объект.КоличествоМесяцевБазовогоПериода                     = ВидРасчета.КоличествоМесяцевБазовогоПериода;
	Объект.СдвигБазовогоПериода                                 = ВидРасчета.СдвигБазовогоПериода;
	Объект.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде = ВидРасчета.УчитыватьИзменениеЗначенийПоказателейВБазовомПериоде;
	Объект.СпособВыполненияНачисления                           = ВидРасчета.СпособВыполненияНачисления;
	Объект.ВидВремени                                           = ВидРасчета.ВидВремени;
	Объект.ОчередностьРасчета                                   = ВидРасчета.ОчередностьРасчета;
	Объект.НачисляетсяВЦеломЗаМесяц                             = ВидРасчета.НачисляетсяВЦеломЗаМесяц;
	
	Объект.Показатели.Очистить();
	Если Объект.ЭтоРасчетОтпуска Тогда
		СписокПоказателей = РезервыПоОплатеТрудаРасширенный.ПоказателиРезерваОтпусковПоУмолчанию();
		Для Каждого ПоказательВидаРасчета Из СписокПоказателей Цикл
			НоваяСтрока = Объект.Показатели.Добавить();
			НоваяСтрока.Показатель             = ПоказательВидаРасчета;
			НоваяСтрока.ИспользоватьПриРасчете = Истина;
		КонецЦикла;
	Иначе
		Для Каждого ПоказательВидаРасчета Из ВидРасчета.Показатели Цикл
			ЗаполнитьЗначенияСвойств(Объект.Показатели.Добавить(), ПоказательВидаРасчета);
		КонецЦикла;
	КонецЕсли;
	
	Объект.БазовыеВидыРасчета.Очистить();
	Для Каждого БазовыйВидРасчета Из ВидРасчета.БазовыеВидыРасчета Цикл
		ЗаполнитьЗначенияСвойств(Объект.БазовыеВидыРасчета.Добавить(), БазовыйВидРасчета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВидыРасчетовРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Объект.ЭтоРасчетОтпуска Тогда
		ВидРасчетаОбъект = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск().ПолучитьОбъект();
	Иначе
		ВидРасчетаОбъект = Объект.ВидРасчета.ПолучитьОбъект();
	КонецЕсли;
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
		ПроверятьФормулуРасчета = Истина;
		Если ПроверятьФормулуРасчета Тогда
			Если Не ЗначениеЗаполнено(Объект.ФормулаРасчета) И Объект.Рассчитывается Тогда 
				ТекстСообщения = НСтр("ru = 'Поле ""Формула расчета"" не заполнено';
										|en = 'The ""Calculation formula"" field is not filled in'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ФормулаНеЗаполненаТекст", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КатегорияНачисленияИлиНеоплаченногоВремени = ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
	
	// Проверка показателей в формуле расчета.
	Если КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда
		ЕстьРазмерДоплатыЗаСовмещение = Ложь;
		РазмерДоплатыЗаСовмещение = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаСовмещение");
		Если РазмерДоплатыЗаСовмещение <> Неопределено Тогда
			ЕстьРазмерДоплатыЗаСовмещение = Объект.Показатели.Найти(РазмерДоплатыЗаСовмещение, "Показатель") <> Неопределено;
		КонецЕсли;
		Если Не ЕстьРазмерДоплатыЗаСовмещение Тогда
			ТекстОшибки = НСтр("ru = 'Формула вида расчета с назначением «Доплата за совмещение» должна содержать показатель «РазмерДоплатыЗаСовмещение».';
								|en = 'Calculation kind formula with the ""Extra pay for secondary employment"" purpose should contain the ""РазмерДоплатыЗаСовмещение"" indicator.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	СвойстваНачисления = СвойстваНачислений[КатегорияНачисленияИлиНеоплаченногоВремени];
	
	// Если есть показатель расчета времени, то должен быть заполнен вид времени.
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
		Если СвойстваНачисления.НедоступныеСвойства.Найти("ОбозначениеВТабелеУчетаРабочегоВремени") = Неопределено 
			И Не ЗначениеЗаполнено(ВидРасчетаОбъект.ОбозначениеВТабелеУчетаРабочегоВремени) Тогда
			ПоказателиРасчетаВремени = Новый Массив;
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
			ПоказателиРасчетаВремени.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
			Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
				Если ПоказателиРасчетаВремени.Найти(СтрокаПоказателя.Показатель) <> Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнен вид по классификатору рабочего времени.';
										|en = 'Kind is not specified by the pay code classifier.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени", , Отказ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваНачисления.НедоступныеСвойства.Найти("ВидДоходаИсполнительногоПроизводства") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоходаИсполнительногоПроизводства");
	КонецЕсли;
	Если СвойстваНачисления.НедоступныеСвойства.Найти("ВидОтпуска") <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОтпуска");
	КонецЕсли;
	
	КатегорииПоСвойствам = ПланыВидовРасчета.Начисления.КатегорииПоСвойствамНачислений();
	
	// Базовые начисления этих категорий недоступны для редактирования пользователю, 
	// поэтому не проверяем.
	БазовыеНачисленияНеПроверяются = Новый Массив;
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	БазовыеНачисленияНеПроверяются.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
	Если БазовыеНачисленияНеПроверяются.Найти(КатегорияНачисленияИлиНеоплаченногоВремени) = Неопределено Тогда
		РезервыПоОплатеТрудаРасширенный.ПроверитьНаличиеБазовыхВидовРасчета(Объект, ВидРасчетаОбъект, Отказ);
	КонецЕсли;
	
	// Если есть показатель отпусков, то должен быть заполнен вид отпуска.
	Если РезервыПоОплатеТрудаРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "ОстатокОтпуска") Тогда
		Если Не КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска Тогда
			ТекстОшибки = НСтр("ru = 'Формула вида расчета с показателем ""Остаток отпуска"" применима только для вида расчета с назначением «Оплата отпуска»';
								|en = 'You can apply the calculation type formula with the ""Remaining leave"" indicator only for the calculation type with the ""Leave payment"" purpose'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.КатегорияНачисленияИлиНеоплаченногоВремени", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не РезервыПоОплатеТрудаРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(Объект, ВидРасчетаОбъект)  
		И РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "РасчетнаяБазаСтраховыеВзносы") Тогда 
		ТекстСообщения = НСтр("ru = 'Показатель РасчетнаяБазаСтраховыеВзносы допустимо использовать только в начислениях, выполняемых в целом за месяц.';
								|en = 'Indicator РасчетнаяБазаСтраховыеВзносы can be used only in the accruals executed for a month totally.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ФормулаРасчета", , Отказ);
	КонецЕсли;
	
	Если ВидРасчетаОбъект.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете Тогда 
		СтрокаОпределяющийПоказатель = Объект.Показатели.Найти(Истина, "ОпределяющийПоказатель");
		Если СтрокаОпределяющийПоказатель = Неопределено Тогда 
			ТекстСообщения = НСтр("ru = 'Не отмечено ни одного показателя.';
									|en = 'No indicator is marked.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "СписокОпределяющихПоказателей", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СдвигБазовогоПериода");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыРасчетовРезервовПоОплатеТрудаПередЗаписью(Объект, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Объект) 
		И Не Объект.ДополнительныеСвойства.Свойство("ИзменениеПланаВидовРасчетаПоНастройкам") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение вторичных данных объекта выполняется всегда.
	ОбновитьПоказателиФормулыРасчета(Объект, Отказ);
	РезервыПоОплатеТрудаРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(Объект);
	
	НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(Объект);
	ТребуетсяРасчетБазы      = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(Объект.Показатели, "РасчетнаяБаза");
	
КонецПроцедуры

Процедура ОбновитьПоказателиФормулыРасчета(ВидРасчетаОбъект, Отказ, НедопустимыеПоказатели = Неопределено) Экспорт
	
	ВидРасчетаОбъект.ИспользуетФормулу = РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета);
	Если ВидРасчетаОбъект.ИспользуетФормулу Тогда
		ПроверятьФормулуРасчета = Истина;
		Если ПроверятьФормулуРасчета Тогда
			Если ВидРасчетаОбъект.Рассчитывается Тогда 
				ПараметрыВыполненияФормулы = РезервыПоОплатеТрудаРасширенный.ПараметрыВыполненияФормулы(ВидРасчетаОбъект.ФормулаРасчета, Истина, НедопустимыеПоказатели);
				Если ПараметрыВыполненияФормулы = Неопределено Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				СведенияОПоказателях = РезервыПоОплатеТрудаРасширенный.СведенияОПоказателяхРасчетаРезервов(ПараметрыВыполненияФормулы.ПоказателиФормулы);
				ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
				// Если формула прошла проверку - запишем ее в вид расчета.
				ВидРасчетаОбъект.ФормулаРасчетаДляВыполнения = ПараметрыВыполненияФормулы.ФормулаДляВыполнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Удаляем строки с незаполненными показателями.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.Показатель) Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ВидРасчетаОбъект.Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ТребованияНачислений(Начисления, НастройкаРезервов) Экспорт
	
	ТребованияНачислений = Новый Соответствие;
	
	НачисленияОтбор = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина);
	ТребованияВидаРасчетаРезервов = ТребованияВидаРасчетаРезервовТаблица(НачисленияОтбор);
	
	Если НастройкаРезервов.Инвентаризация Тогда
		ЭтоРезервОтпусков = НастройкаРезервов.ВидРезерва = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
		
		ВидыРасчетаОтбор = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "ВидРасчета", Истина);
		ТребованияВидовРасчета = ПланыВидовРасчета.Начисления.ТребованияНачисленийТаблица(ВидыРасчетаОтбор);
		
		Для Каждого ПоказательВидаРасчетаРезервов Из ТребованияВидаРасчетаРезервов Цикл
			ПоказательНачислений = ТребованияВидовРасчета.Получить(ПоказательВидаРасчетаРезервов.Значение.ВидРасчета);
			ПоказательНачисленийВременный = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПоказательНачислений);
			Если ЭтоРезервОтпусков Тогда
				ПоказательНачисленийВременный.ВидОтпуска = ПоказательВидаРасчетаРезервов.Значение.ВидОтпуска;
			КонецЕсли;
			ТребованияНачислений.Вставить(ПоказательВидаРасчетаРезервов.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПоказательНачисленийВременный));
		КонецЦикла;
	Иначе
		ТребованияНачислений = ТребованияВидаРасчетаРезервов;
	КонецЕсли;
	
	Возврат ТребованияНачислений;
	
КонецФункции

Функция ПоказателиНачислений(Начисления, НастройкаРезервов) Экспорт
	
	ПоказателиНачислений  = Новый Соответствие;
	
	ВидыРасчетаОтбор      = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "ВидРасчета", Истина);
	ПоказателиВидаРасчета = ПланыВидовРасчета.Начисления.ПоказателиНачислений(ВидыРасчетаОтбор);
	
	НачисленияОтбор = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НачисленияОтбор, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НачисленияОтбор, Справочники.ВидыРасчетовРезервовПоОплатеТруда.ПустаяСсылка());
	
	Если НачисленияОтбор.Количество() <> 0 Тогда
		ЭтоРасчетОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НачисленияОтбор[0],"ЭтоРасчетОтпуска");
		Если НастройкаРезервов.Инвентаризация Тогда
			Если ЭтоРасчетОтпуска Тогда
				ПоказателиНачислений = ПоказателиВидаРасчетаРезервов(НачисленияОтбор, Истина, Истина);
			Иначе
				РеквизитыВидаРасчетаРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НачисленияОтбор,"ВидРасчета");
				Для Каждого ПоказательВидаРасчетаРезервов Из РеквизитыВидаРасчетаРезервов Цикл
					ПоказательНачислений = ПоказателиВидаРасчета.Получить(ПоказательВидаРасчетаРезервов.Значение.ВидРасчета);
					Если ЗначениеЗаполнено(ПоказательНачислений) Тогда
						ПоказателиНачислений.Вставить(ПоказательВидаРасчетаРезервов.Ключ, ПоказательНачислений);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПоказателиНачислений = ПоказателиВидаРасчетаРезервов(НачисленияОтбор, ЭтоРасчетОтпуска, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоказателиНачислений;
	
КонецФункции

Функция ФормулыНачислений(РассчитываемыеСтроки, НастройкаРезервов) Экспорт
	
	Формулы = Новый Соответствие;
	
	Инвентаризация   = НастройкаРезервов.Инвентаризация;
	ЭтоРасчетОтпуска = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва(НастройкаРезервов.Организация, НастройкаРезервов.Резерв)
		= Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
	
	ВидыРасчетаОтбор         = ОбщегоНазначения.ВыгрузитьКолонку(РассчитываемыеСтроки, "ВидРасчета", Истина);
	ФормулыВидовРасчета      = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетаОтбор, "ФормулаРасчета, ФормулаРасчетаДляВыполнения");
	
	НачисленияОтбор          = ОбщегоНазначения.ВыгрузитьКолонку(РассчитываемыеСтроки, "Начисление", Истина);
	ФормулыНачислений        = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НачисленияОтбор, "ВидРасчета, ИспользоватьСобственнуюФормулуРасчета,ФормулаРасчета,ФормулаРасчетаДляВыполнения");
	ФормулыРезервовОтпусков  = ФормулыРезервовОтпусков(НачисленияОтбор);
	Для Каждого ФормулаНачисления Из ФормулыНачислений Цикл
		Если ФормулаНачисления.Значение.ИспользоватьСобственнуюФормулуРасчета И Не Инвентаризация Тогда
			ФормулыРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ФормулаНачисления.Значение);
		ИначеЕсли ЭтоРасчетОтпуска Тогда
			ФормулыРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ФормулаНачисления.Значение);
			ЗаполнитьЗначенияСвойств(ФормулыРасчета, ФормулыРезервовОтпусков[ФормулаНачисления.Ключ]);
		Иначе
			ФормулыРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ФормулыВидовРасчета[ФормулаНачисления.Значение.ВидРасчета]);
		КонецЕсли;
		Формулы.Вставить(ФормулаНачисления.Ключ, ФормулыРасчета);
	КонецЦикла;
	
	Возврат Формулы;
	
КонецФункции

Функция ФормулыРезервовОтпусков(ВидыОтпусков) Экспорт
	
	ФормулыРасчета = Новый Соответствие;
	
	Формулы = Новый Структура();
	Формулы.Вставить("ФормулаРасчета",              РезервыПоОплатеТрудаРасширенный.ФормулаРасчетаРезерваОтпусков(Ложь));
	Формулы.Вставить("ФормулаРасчетаДляВыполнения", РезервыПоОплатеТрудаРасширенный.ФормулаРасчетаРезерваОтпусков(Истина));
	
	Для Каждого ЗначениеМассива Из ВидыОтпусков Цикл
		Если ЗначениеЗаполнено(ЗначениеМассива) Тогда
			ФормулыРасчета.Вставить(ЗначениеМассива, Формулы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФормулыРасчета;
	
КонецФункции

Процедура ЗаполнитьБазовыйПериодСтрокиНачисления(Строка, СвойстваНачисления, НастройкаРезервов) Экспорт
	
	Если НастройкаРезервов.Инвентаризация Тогда
		// Требуется корректировка периода расчета
		Если СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц
			Или СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
			СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
			Строка.НачалоБазовогоПериода                      = НачалоМесяца(Строка.ДатаНачала);
			Строка.ОкончаниеБазовогоПериода                   = КонецМесяца(Строка.ДатаОкончания);
			СвойстваНачисления.СдвигБазовогоПериода           = 0;
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал
			Или СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал Тогда
			СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал;
			Строка.НачалоБазовогоПериода                      = НачалоКвартала(Строка.ДатаНачала);
			Строка.ОкончаниеБазовогоПериода                   = Мин(КонецМесяца(Строка.ДатаОкончания), КонецКвартала(Строка.НачалоБазовогоПериода));
			СвойстваНачисления.СдвигБазовогоПериода           = 0;
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод
			Или СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод Тогда
			СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод;
			Строка.НачалоБазовогоПериода                      = НачалоГода(Строка.ДатаНачала);
			Строка.ОкончаниеБазовогоПериода                   = Мин(КонецМесяца(Строка.ДатаОкончания), КонецГода(Строка.НачалоБазовогоПериода));
			СвойстваНачисления.СдвигБазовогоПериода           = 0;
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
			Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоМесяца(Строка.ДатаНачала), -СвойстваНачисления.КоличествоМесяцевБазовогоПериода - СвойстваНачисления.СдвигБазовогоПериода + 1);
			Строка.ОкончаниеБазовогоПериода = Мин(КонецМесяца(Строка.ДатаОкончания), КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -СвойстваНачисления.СдвигБазовогоПериода)));
		КонецЕсли;
	Иначе
		Если СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц Тогда
			Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоМесяца(Строка.ДатаНачала), -1);
			Строка.ОкончаниеБазовогоПериода = КонецМесяца(Строка.НачалоБазовогоПериода);
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал Тогда
			Строка.НачалоБазовогоПериода = НачалоКвартала(Строка.ДатаНачала);
			Строка.ОкончаниеБазовогоПериода = КонецКвартала(Строка.НачалоБазовогоПериода);
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал Тогда
			Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоКвартала(Строка.ДатаНачала), -3);
			Строка.ОкончаниеБазовогоПериода = КонецКвартала(Строка.НачалоБазовогоПериода);	
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод Тогда
			Строка.НачалоБазовогоПериода = НачалоГода(Строка.ДатаНачала);
			Строка.ОкончаниеБазовогоПериода = КонецГода(Строка.НачалоБазовогоПериода);
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод Тогда
			Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоГода(Строка.ДатаНачала), -12);
			Строка.ОкончаниеБазовогоПериода = КонецГода(Строка.НачалоБазовогоПериода);
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
			Строка.НачалоБазовогоПериода = ДобавитьМесяц(НачалоМесяца(Строка.ДатаНачала), -СвойстваНачисления.КоличествоМесяцевБазовогоПериода - СвойстваНачисления.СдвигБазовогоПериода + 1);
			Строка.ОкончаниеБазовогоПериода = КонецМесяца(ДобавитьМесяц(Строка.ДатаНачала, -СвойстваНачисления.СдвигБазовогоПериода));
		ИначеЕсли СвойстваНачисления.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
			Строка.НачалоБазовогоПериода    = Строка.ДатаНачала;
			Строка.ОкончаниеБазовогоПериода = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваНачислений(МассивЗначений, СписокСвойств = Неопределено) Экспорт
	
	МассивЗначений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗначений);
	
	СписокВидовРасчетовРезерва = Новый Массив;
	Для Каждого ЗначениеМассива Из МассивЗначений Цикл 
		Если ТипЗнч(ЗначениеМассива) = Тип("СправочникСсылка.ВидыРасчетовРезервовПоОплатеТруда") Тогда
			СписокВидовРасчетовРезерва.Добавить(ЗначениеМассива);
		КонецЕсли;
	КонецЦикла;
	
	ПолучаемыеСвойстваШапки = 
		"ВидРасчета,
		|СпособВыполненияНачисления,
		|НачисляетсяВЦеломЗаМесяц,
		|ПериодРасчетаБазовыхНачислений,
		|СдвигБазовогоПериода,
		|КоличествоМесяцевБазовогоПериода,
		|ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|ЭтоРасчетОтпуска";
	
	СвойстваВидовРасчетовРезервов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокВидовРасчетовРезерва, ПолучаемыеСвойстваШапки);
	
	ВидРасчетаОсновнойОтпуск = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	
	СписокНачислений = Новый Массив;
	Для Каждого КлючЗначение Из СвойстваВидовРасчетовРезервов Цикл
		Если КлючЗначение.Значение.ЭтоРасчетОтпуска Тогда
			СписокНачислений.Добавить(ВидРасчетаОсновнойОтпуск);
			Прервать;
		Иначе
			СписокНачислений.Добавить(КлючЗначение.Значение.ВидРасчета);
		КонецЕсли;
		КлючЗначение.Значение.Вставить("МесяцыВыполнения", Неопределено);
	КонецЦикла;
	СписокНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокНачислений);
	СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачислений(СписокНачислений, СписокСвойств);
	
	СвойстваВидовРасчетаРезервов = Новый Соответствие;
	Для Каждого КлючИЗначение Из СвойстваВидовРасчетовРезервов Цикл
		Если КлючЗначение.Значение.ЭтоРасчетОтпуска Тогда
			ЗначенияНачисления = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачислений[ВидРасчетаОсновнойОтпуск]);
		Иначе
			ЗначенияНачисления = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачислений[КлючИЗначение.Значение.ВидРасчета]);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗначенияНачисления, КлючИЗначение.Значение);
		СвойстваВидовРасчетаРезервов.Вставить(КлючИЗначение.Ключ, ЗначенияНачисления);
	КонецЦикла;
	
	Возврат СвойстваВидовРасчетаРезервов;
	
КонецФункции

Функция СвойстваНачисленийНабора(ТаблицаНабораНачислений) Экспорт
	
	ВидРасчетаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНабораНачислений, "ВидРасчета", Истина);
	ВидРасчетаДанныхМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНабораНачислений, "ВидРасчетаДанных", Истина);
	
	СвойстваНачисленийНабора = Новый Соответствие;
	
	СвойстваНачисленийВидРасчетаДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидРасчетаДанныхМассив, "ТребуетсяРасчетБазы, ПериодДействияБазовый, ОчередностьРасчета, ЕстьВытесняющиеНачисления, НачисляетсяВЦеломЗаМесяц, ВидОтпуска");
	СвойстваНачисленийВидРасчета       = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидРасчетаМассив, "ВидРасчета, ПериодДействияБазовый, ОчередностьРасчета, НачисляетсяВЦеломЗаМесяц");
	
	Для Каждого СвойствоНачисленияВидРасчета Из СвойстваНачисленийВидРасчета Цикл
		ЗначениеВидРасчета = СвойствоНачисленияВидРасчета.Значение.ВидРасчета;
		ЗначениеВидРасчетаСвойства = СвойстваНачисленийВидРасчетаДанных[ЗначениеВидРасчета];
		Если ЗначениеВидРасчетаСвойства = Неопределено Тогда
			Для Каждого СвойстваЗначенияВидаРасчета Из СвойстваНачисленийВидРасчетаДанных Цикл
				Если ЗначениеВидРасчета = СвойстваЗначенияВидаРасчета.Значение.ВидОтпуска Тогда
					ЗначениеВидРасчетаСвойства = СвойстваЗначенияВидаРасчета.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеВидРасчетаСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СвойствоНачисленияВидРасчетаДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЗначениеВидРасчетаСвойства);
		ЗаполнитьЗначенияСвойств(СвойствоНачисленияВидРасчетаДанных, СвойствоНачисленияВидРасчета.Значение);
		СвойстваНачисленийНабора.Вставить(СвойствоНачисленияВидРасчета.Ключ, СвойствоНачисленияВидРасчетаДанных);
	КонецЦикла;
	
	Возврат СвойстваНачисленийНабора;
	
КонецФункции

Функция ЗависимостиВидовРасчета(ИмяТаблицыЗависимыеВидыРасчета, ОтборЗависимыхВидовРасчета = Неопределено, ОтборВедущихВидовРасчета = Неопределено) Экспорт
	
	ЗависимостиНачислений = Новый Соответствие;		
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.Ссылка КАК ВидРасчета,
	|	ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.ВидРасчета КАК ВедущийВидРасчета,
	|	ВидыРасчетовРезервовПоОплатеТруда.ПериодДействияБазовый КАК НормироватьКаскадно
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.БазовыеВидыРасчета КАК ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета
	|		ПО ВидыРасчетовРезервовПоОплатеТруда.Ссылка = ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.Ссылка
	|ГДЕ
	|	ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета,
	|	Начисления.ПериодДействияБазовый
	|		И Начисления.ТребуетсяРасчетБазы
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|			ПО Начисления.Ссылка = НачисленияБазовыеВидыРасчета.Ссылка
	|		ПО ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета = Начисления.Ссылка
	|ГДЕ
	|	НЕ ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРасчета";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВедущиеВидыРасчета", ИмяТаблицыЗависимыеВидыРасчета);
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если ОтборЗависимыхВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ВидыРасчетовРезервовПоОплатеТруда.Ссылка В(&ОтборЗависимыхВидовРасчета)");
		Схема.ПакетЗапросов[0].Операторы[1].Отбор.Добавить("ВидыРасчетовРезервовПоОплатеТруда.Ссылка В(&ОтборЗависимыхВидовРасчета)");
		Запрос.УстановитьПараметр("ОтборЗависимыхВидовРасчета", ОтборЗависимыхВидовРасчета);
	КонецЕсли;
	
	Если ОтборВедущихВидовРасчета <> Неопределено Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.ВидРасчета В(&ОтборВедущихНачислений)");
		Схема.ПакетЗапросов[0].Операторы[1].Отбор.Добавить("НачисленияБазовыеВидыРасчета.ВидРасчета В(&ОтборВедущихНачислений)");
		Запрос.УстановитьПараметр("ОтборВедущихНачислений", ОтборВедущихВидовРасчета);
	КонецЕсли;
	
	Запрос.Текст = Схема.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
		ВедущиеВидыРасчета = Новый Соответствие();
		ЗависимостиНачислений.Вставить(Выборка.ВидРасчета, ВедущиеВидыРасчета);
		
		Пока Выборка.Следующий() Цикл
			ОписаниеВедущегоВидаРасчета = Новый Структура("ВидРасчета, НормироватьКаскадно");
			ОписаниеВедущегоВидаРасчета.ВидРасчета = Выборка.ВедущийВидРасчета;
			ОписаниеВедущегоВидаРасчета.НормироватьКаскадно = Выборка.НормироватьКаскадно;
			ВедущиеВидыРасчета.Вставить(Выборка.ВедущийВидРасчета, ОписаниеВедущегоВидаРасчета);
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ЗависимостиНачислений;
КонецФункции	

Функция ЗапросВТБазовыеВидыРасчетов(ИмяВТРассчитываемыйНабор, НастройкаРезервов) Экспорт
	
	Запрос = Новый Запрос;
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК Ссылка,
	|	ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета КАК ИспользоватьСобственнуюФормулуРасчета,
	|	ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета КАК ВидРасчета,
	|	ВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска КАК ЭтоРасчетОтпуска
	|ПОМЕСТИТЬ ВТВидыРасчетовРезервовПоОплатеТруда
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|ГДЕ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТОсновныеЗаписи.ВидРасчета
	|			ИЗ
	|				#ИмяВТРассчитываемыйНабор Как ВТОсновныеЗаписи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.НомерСтроки КАК НомерСтроки,
	|	ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета,
	|	ВТВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТБазовыеВидыРасчетов
	|ИЗ
	|	ВТВидыРасчетовРезервовПоОплатеТруда КАК ВТВидыРасчетовРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.БазовыеВидыРасчета КАК ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета
	|		ПО ВТВидыРасчетовРезервовПоОплатеТруда.Ссылка = ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.Ссылка
	|ГДЕ
	|	(ВТВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|			ИЛИ ВТВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияБазовыеВидыРасчета.НомерСтроки,
	|	НачисленияБазовыеВидыРасчета.ВидРасчета,
	|	ВТВидыРасчетовРезервовПоОплатеТруда.Ссылка
	|ИЗ
	|	ВТВидыРасчетовРезервовПоОплатеТруда КАК ВТВидыРасчетовРезервовПоОплатеТруда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
	|		ПО ВТВидыРасчетовРезервовПоОплатеТруда.ВидРасчета = НачисленияБазовыеВидыРасчета.Ссылка
	|ГДЕ
	|	НЕ ВТВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета
	|	И НЕ(ВТВидыРасчетовРезервовПоОплатеТруда.ЭтоРасчетОтпуска
	|				И &Инвентаризация)";
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "#ИмяВТРассчитываемыйНабор", ИмяВТРассчитываемыйНабор);
	Запрос.Текст = ШаблонЗапроса;
	Запрос.УстановитьПараметр("Инвентаризация", НастройкаРезервов.Инвентаризация);
	
	Возврат Запрос;
КонецФункции

Процедура СтрокиНачисленийПоТребованиям(ПоказателиНачислений, ТребованияНачислений, Начисления, СтрокиНачисленийПоТребованиям) Экспорт
	
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиОстатокОтпуска", Новый Массив);
	СтрокиНачисленийПоТребованиям.Вставить("ПоказателиСохраняемыйЗаработок", Новый Массив);
	
	ПоказательОстатокОтпуска        = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	ПоказательСохраняемогоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок");
	
	Для Каждого СтрокаНабора Из Начисления Цикл
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.Начисление];
		ПоказателиТекущегоНачисления = ПоказателиНачислений[СтрокаНабора.Начисление];
		
		Для Каждого ДанныеИзвестногоПоказателя Из СтрокаНабора.ИзвестныеПоказатели Цикл
			СтрокаПоказателей = СтрокиНачисленийПоТребованиям.ИзвестныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателей, СтрокаНабора);
			СтрокаПоказателей.Показатель = ДанныеИзвестногоПоказателя.Показатель;
			СтрокаПоказателей.Значение = ДанныеИзвестногоПоказателя.Значение;
			СтрокаПоказателей.СтрокаТаблицыРасчета = СтрокаНабора;
		КонецЦикла;
		
		Если ПоказателиТекущегоНачисления = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПоказательОстатокОтпуска       = Ложь;
		ЕстьПоказательСохраняемыйЗаработок = Ложь;
		
		Для Каждого СвойстваПоказателя Из ПоказателиТекущегоНачисления Цикл
			Если СтрокаНабора.ИзвестныеПоказатели.Количество() > 0 Тогда
				ДанныеИзвестногоПоказателя = СтрокаНабора.ИзвестныеПоказатели.Найти(СвойстваПоказателя.Показатель, "Показатель");
				Если ДанныеИзвестногоПоказателя <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СвойстваПоказателя.Показатель = ПоказательОстатокОтпуска
				И Не ЕстьПоказательОстатокОтпуска
				И Не СтрокаНабора.ФиксЗаполнение Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиОстатокОтпуска.Добавить(СтрокаНабора);
				ЕстьПоказательОстатокОтпуска = Истина;
				
			ИначеЕсли СвойстваПоказателя.Показатель = ПоказательСохраняемогоЗаработка
				И Не ЕстьПоказательСохраняемыйЗаработок
				И Не СтрокаНабора.ФиксЗаполнение Тогда
				
				СтрокиНачисленийПоТребованиям.ПоказателиСохраняемыйЗаработок.Добавить(СтрокаНабора);
				ЕстьПоказательСохраняемыйЗаработок = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейНачислений(СтрокиНачисленийКРасчету, МенеджерРасчетаЗарплаты) Экспорт
	
	РассчитатьЗначенияПоказателейОстатокОтпуска(СтрокиНачисленийКРасчету.ПоказателиОстатокОтпуска, МенеджерРасчетаЗарплаты);
	РассчитатьЗначенияПоказателейСохраняемыйЗаработок(СтрокиНачисленийКРасчету.ПоказателиСохраняемыйЗаработок, МенеджерРасчетаЗарплаты);
	
КонецПроцедуры

Функция ТребованияВидаРасчетаРезервовТаблица(НачисленияОтбор)
	
	ТребованияВидаРасчетаРезервов = Новый Соответствие();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НачисленияОтбор, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НачисленияОтбор, Справочники.ВидыРасчетовРезервовПоОплатеТруда.ПустаяСсылка());
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НачисленияОтбор, "ВидРасчета, ЭтоРасчетОтпуска");
	
	Если ЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат ТребованияВидаРасчетаРезервов;
	КонецЕсли;
	
	ВидРасчетаОсновногоОтпуска = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	
	МассивНачислений = Новый Массив;
	Для Каждого СтрокаЗначения Из ЗначенияРеквизитов Цикл
		Если СтрокаЗначения.Значение.ЭтоРасчетОтпуска Тогда
			МассивНачислений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчетаОсновногоОтпуска);
			Прервать;
		Иначе
			МассивНачислений.Добавить(СтрокаЗначения.Значение.ВидРасчета);
		КонецЕсли;
	КонецЦикла;
	МассивНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНачислений);
	
	ТребованияНачислений = ПланыВидовРасчета.Начисления.ТребованияНачисленийТаблица(МассивНачислений);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновнойОтпуск",  ВидРасчетаОсновногоОтпуска);
	Запрос.УстановитьПараметр("НачисленияОтбор", НачисленияОтбор);
	Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы);
	Запрос.УстановитьПараметр("ПоказателиТерриторийУсловийТруда", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда());
	Запрос.УстановитьПараметр("ПоказательРайонныйКоэффициент", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
	Запрос.УстановитьПараметр("ПоказательНадбавкаЗаВредность", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
	Запрос.УстановитьПараметр("КалендарныеДни", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	Запрос.УстановитьПараметр("НормаДнейЧасов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДнейЧасов"));
	Запрос.УстановитьПараметр("НормаВремениВДнях", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаВремениВЧасах", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ВремяВДняхЧасах", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах"));
	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноСверхурочно", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно"));
	Запрос.УстановитьПараметр("ОтработаноСверхурочноВПределах2Часов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов"));
	Запрос.УстановитьПараметр("КалендарныеДниБезПраздников", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("КоличествоДнейОтпуска", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска"));
	Запрос.УстановитьПараметр("СдельныйЗаработок", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок"));
	Запрос.УстановитьПараметр("КоэффициентИндексацииСреднегоЗаработка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка"));
	Запрос.УстановитьПараметр("КоэффициентИндексацииСохраняемогоДенежногоСодержания", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания"));
	Запрос.УстановитьПараметр("КоэффициентИндексацииСохраняемогоДенежногоДовольствия", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоДовольствия"));
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	Запрос.УстановитьПараметр("СтоимостьДня", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	Запрос.УстановитьПараметр("СтоимостьДняЧаса", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	Запрос.УстановитьПараметр("РазмерПособияДоТрехЛет", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет"));
	Запрос.УстановитьПараметр("ПроцентСевернойНадбавки", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	Запрос.УстановитьПараметр("РайонныйКоэффициентРФ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициентРФ"));
	Запрос.УстановитьПараметр("ПроцентДоплатыЗаНочные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя"));
	Запрос.УстановитьПараметр("ПроцентДоплатыЗаВечерние", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя"));
	Запрос.УстановитьПараметр("БазовыйТарифГруппы", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы"));
	Запрос.УстановитьПараметр("ОтработаноСмен", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСмен"));
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПериодическийПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияПериодическихПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.РазовыйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияРазовыхПоказателейПодразделений,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательСотрудника, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейСотрудников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательОрганизации, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейОрганизаций,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ОперативныйПоказательПодразделения, ЛОЖЬ)) КАК ТребуютсяЗначенияОперативныхПоказателейПодразделений,
		|	МАКСИМУМ(ПоказателиРасчета.ТребуютсяФиксированныеСуммы) КАК ТребуютсяФиксированныеСуммы,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКалендарныеДни, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДни,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательРайонныйКоэффициент, ЛОЖЬ)) КАК ТребуетсяПоказательРайонныйКоэффициент,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательНадбавкаЗаВредность, ЛОЖЬ)) КАК ТребуетсяПоказательНадбавкаЗаВредность,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательНормаВремени, ЛОЖЬ)) КАК ТребуетсяПоказательНормаВремени,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательНормаДнейЧасов, ЛОЖЬ)) КАК ТребуетсяПоказательНормаДнейЧасов,
		|	МАКСИМУМ(ПоказателиРасчета.ПоказательРабочегоВремени) КАК ТребуетсяПоказательРабочегоВремени,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноСверхурочно, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноСверхурочно,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКалендарныеДниБезПраздников, ЛОЖЬ)) КАК ТребуетсяПоказательКалендарныеДниБезПраздников,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноВсего, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноВсего,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоличествоДнейОтпуска, ЛОЖЬ)) КАК ТребуетсяПоказательКоличествоДнейОтпуска,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательСдельныйЗаработок, ЛОЖЬ)) КАК ТребуетсяПоказательСдельныйЗаработок,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоэффициентИндексации, ЛОЖЬ)) КАК ТребуетсяПоказательКоэффициентИндексации,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоэффициентИндексацииСреднегоЗаработка, ЛОЖЬ)) КАК ТребуетсяПоказательКоэффициентИндексацииСреднегоЗаработка,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания, ЛОЖЬ)) КАК ТребуетсяПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательКоэффициентИндексацииСохраняемогоДенежногоДовольствия, ЛОЖЬ)) КАК ТребуетсяПоказательКоэффициентИндексацииСохраняемогоДенежногоДовольствия,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательДоляНеполногоРабочегоВремени, ЛОЖЬ)) КАК ТребуетсяПоказательДоляНеполногоРабочегоВремени,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательСтоимостьЧаса, ЛОЖЬ)) КАК ТребуетсяПоказательСтоимостьЧаса,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательРазмерПособияДоТрехЛет, ЛОЖЬ)) КАК ТребуетсяПоказательРазмерПособияДоТрехЛет,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентСевернойНадбавки, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентСевернойНадбавки,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательРайонныйКоэффициентРФ, ЛОЖЬ)) КАК ТребуетсяПоказательРайонныйКоэффициентРФ,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентДоплатыЗаНочные, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентДоплатыЗаНочные,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательПроцентДоплатыЗаВечерние, ЛОЖЬ)) КАК ТребуетсяПоказательПроцентДоплатыЗаВечерние,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательБазовыйТарифГруппы, ЛОЖЬ)) КАК ТребуетсяПоказательБазовыйТарифГруппы,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательЧисловойЗависящийОтСтажа, ЛОЖЬ)) КАК ТребуетсяПоказательЧисловойЗависящийОтСтажа,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчета.ПоказательОтработаноСмен, ЛОЖЬ)) КАК ТребуетсяПоказательОтработаноСмен,
		|	ПоказателиРасчета.ВидРасчета КАК ВидРасчета,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ПоказателиРасчета.ПоказательДоляНеполногоРабочегоВремени, ЛОЖЬ)
		|					ИЛИ ЕСТЬNULL(ПоказателиРасчета.ПоказательСтоимостьЧаса, ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК НеобходимыДанныеОбщегоГрафика,
		|	НЕ МАКСИМУМ(ПоказателиРасчета.НачисляетсяВЦеломЗаМесяц) КАК Разбивать,
		|	МАКСИМУМ(ПоказателиРасчета.НачисляетсяВЦеломЗаМесяц) КАК НачисляетсяВЦеломЗаМесяц,
		|	МАКСИМУМ(ПоказателиРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц) КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	МАКСИМУМ(ПоказателиРасчета.ИспользуетФормулу) КАК ИспользуетФормулу,
		|	МАКСИМУМ(ПоказателиРасчета.НулеваяСумма) КАК НулеваяСумма,
		|	МАКСИМУМ(ПоказателиРасчета.ВидВремени) КАК ВидВремени,
		|	МАКСИМУМ(ПоказателиРасчета.ПоказательНормаВремениВДнях) КАК ТребуетсяНормаВДняхПолная,
		|	МАКСИМУМ(ПоказателиРасчета.ПоказательНормаДней) КАК ТребуетсяНормаДней,
		|	МАКСИМУМ(ПоказателиРасчета.ПериодДействияБазовый) КАК ПериодДействияБазовый,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоказателиРасчета.ПоказательКоличествоДнейОтпуска
		|					ИЛИ ПоказателиРасчета.ПоказательКалендарныеДни
		|					ИЛИ ПоказателиРасчета.ПоказательКалендарныеДниБезПраздников
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК РаспределятьПоКалендарнымДням,
		|	МИНИМУМ(ПоказателиРасчета.ОчередностьРасчета) КАК ОчередностьРасчета,
		|	МАКСИМУМ(ПоказателиРасчета.ПоказательТерриторийУсловийТруда) КАК ТребуетсяРаспределениеПоказателей,
		|	МАКСИМУМ(ПоказателиРасчета.СпособРасчета) КАК СпособРасчета,
		|	МАКСИМУМ(ПоказателиРасчета.ПериодРасчетаБазовыхНачислений) КАК ПериодРасчетаБазовыхНачислений,
		|	МАКСИМУМ(ПоказателиРасчета.Рассчитывается) КАК Рассчитывается,
		|	МАКСИМУМ(ПоказателиРасчета.КоличествоМесяцевБазовогоПериода) КАК КоличествоМесяцевБазовогоПериода,
		|	МАКСИМУМ(ПоказателиРасчета.СдвигБазовогоПериода) КАК СдвигБазовогоПериода,
		|	ПоказателиРасчета.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
		|	ПоказателиРасчета.ЭтоРасчетОтпуска КАК ЭтоРасчетОтпуска,
		|	ПоказателиРасчета.ВидОтпускаРезерва КАК ВидОтпускаРезерва,
		|	ПоказателиРасчета.ИспользоватьСобственнуюФормулуРасчета КАК ИспользоватьСобственнуюФормулуРасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВидыРасчета.Ссылка КАК ВидРасчетаРезерва,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|				ТОГДА &ОсновнойОтпуск
		|			ИНАЧЕ ВидыРасчета.ВидРасчета
		|		КОНЕЦ КАК ВидРасчета,
		|		ВидыРасчета.Резерв КАК Резерв,
		|		ВидыРасчета.СпособРасчета КАК СпособРасчета,
		|		ВидыРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|		&ВидВремени КАК ВидВремени,
		|		ПоказателиРасчета.Показатель КАК Показатель,
		|		ПоказателиРасчета.ЗапрашиватьПриВводе КАК ЗапрашиваетсяПриВводеНачисления,
		|		СправочникПоказатели.ЗначениеРассчитываетсяАвтоматически КАК ЗначениеРассчитываетсяАвтоматически,
		|		ВЫБОР
		|			КОГДА СправочникПоказатели.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ВводитсяПриРасчете,
		|		СправочникПоказатели.ПериодическийПоказательСотрудника КАК ПериодическийПоказательСотрудника,
		|		СправочникПоказатели.ПериодическийПоказательОрганизации КАК ПериодическийПоказательОрганизации,
		|		СправочникПоказатели.ПериодическийПоказательПодразделения КАК ПериодическийПоказательПодразделения,
		|		СправочникПоказатели.РазовыйПоказательСотрудника КАК РазовыйПоказательСотрудника,
		|		СправочникПоказатели.РазовыйПоказательОрганизации КАК РазовыйПоказательОрганизации,
		|		СправочникПоказатели.РазовыйПоказательПодразделения КАК РазовыйПоказательПодразделения,
		|		СправочникПоказатели.ОперативныйПоказательСотрудника КАК ОперативныйПоказательСотрудника,
		|		СправочникПоказатели.ОперативныйПоказательОрганизации КАК ОперативныйПоказательОрганизации,
		|		СправочникПоказатели.ОперативныйПоказательПодразделения КАК ОперативныйПоказательПодразделения,
		|		ВЫБОР
		|			КОГДА СправочникПоказатели.Ссылка В (&ПоказателиТерриторийУсловийТруда)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательТерриторийУсловийТруда,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательВремени,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКалендарныеДни,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательНормаВремени,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательНормаДнейЧасов,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательНормаВремениВДнях,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательНормаДней,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательРабочегоВремени,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательОтработаноСверхурочно,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКалендарныеДниБезПраздников,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательОтработаноВсего,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКоличествоДнейОтпуска,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &СдельныйЗаработок
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательСдельныйЗаработок,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСреднегоЗаработка
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоДовольствия
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКоэффициентИндексации,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСреднегоЗаработка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКоэффициентИндексацииСреднегоЗаработка,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоДовольствия
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательКоэффициентИндексацииСохраняемогоДенежногоДовольствия,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ДоляНеполногоРабочегоВремени
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательДоляНеполногоРабочегоВремени,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьЧаса
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьДня
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьДняЧаса
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательСтоимостьЧаса,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &РазмерПособияДоТрехЛет
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательРазмерПособияДоТрехЛет,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентСевернойНадбавки
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательПроцентСевернойНадбавки,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &РайонныйКоэффициентРФ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательРайонныйКоэффициентРФ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаНочные
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательПроцентДоплатыЗаНочные,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаВечерние
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательПроцентДоплатыЗаВечерние,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &БазовыйТарифГруппы
		|					И НЕ ПоказателиРасчета.ЗапрашиватьПриВводе
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательБазовыйТарифГруппы,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСмен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательОтработаноСмен,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательЧисловойЗависящийОтСтажа,
		|		НЕ ВидыРасчета.Рассчитывается КАК ТребуютсяФиксированныеСуммы,
		|		ВидыРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|		ВидыРасчета.ИспользуетФормулу КАК ИспользуетФормулу,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ФормулаРасчета ПОДОБНО ""0""
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НулеваяСумма,
		|		ВидыРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПоказательРайонныйКоэффициент
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательРайонныйКоэффициент,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПоказательНадбавкаЗаВредность
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПоказательНадбавкаЗаВредность,
		|		ВидыРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
		|		ВидыРасчета.ПериодРасчетаБазовыхНачислений КАК ПериодРасчетаБазовыхНачислений,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|					И НЕ ВидыРасчета.ИспользоватьСобственнуюФормулуРасчета
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыРасчета.Рассчитывается
		|		КОНЕЦ КАК Рассчитывается,
		|		ВидыРасчета.КоличествоМесяцевБазовогоПериода КАК КоличествоМесяцевБазовогоПериода,
		|		ВидыРасчета.СдвигБазовогоПериода КАК СдвигБазовогоПериода,
		|		ВидыРасчета.ЭтоРасчетОтпуска КАК ЭтоРасчетОтпуска,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|				ТОГДА ВидыРасчета.ВидРасчета
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
		|		КОНЕЦ КАК ВидОтпускаРезерва,
		|		ВидыРасчета.ИспользоватьСобственнуюФормулуРасчета КАК ИспользоватьСобственнуюФормулуРасчета
		|	ИЗ
		|		Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК ПоказателиРасчета
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК СправочникПоказатели
		|				ПО (СправочникПоказатели.Ссылка = ПоказателиРасчета.Показатель)
		|			ПО (ПоказателиРасчета.Ссылка = ВидыРасчета.Ссылка)
		|	ГДЕ
		|		ВидыРасчета.Ссылка В(&НачисленияОтбор)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВидыРасчета.Ссылка,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|				ТОГДА &ОсновнойОтпуск
		|			ИНАЧЕ ВидыРасчета.ВидРасчета
		|		КОНЕЦ,
		|		ВидыРасчета.Резерв,
		|		ВидыРасчета.СпособРасчета,
		|		ВидыРасчета.НачисляетсяВЦеломЗаМесяц,
		|		&ВидВремени,
		|		ПоказателиРасчета.Показатель,
		|		ПоказателиРасчета.ЗапрашиватьПриВводе,
		|		ИСТИНА,
		|		ВЫБОР
		|			КОГДА СправочникПоказатели.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ВЫБОР
		|			КОГДА СправочникПоказатели.Ссылка В (&ПоказателиТерриторийУсловийТруда)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДни
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниМесяца
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВЧасах
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДнейЧасов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаВремениВДнях
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &НормаДней
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДнях
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВДняхЧасах
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ВремяВЧасах
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочно
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСверхурочноВПределах2Часов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КалендарныеДниБезПраздников
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноДней
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноЧасов
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоличествоДнейОтпуска
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &СдельныйЗаработок
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСреднегоЗаработка
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоДовольствия
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСреднегоЗаработка
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоСодержания
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &КоэффициентИндексацииСохраняемогоДенежногоДовольствия
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ДоляНеполногоРабочегоВремени
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьЧаса
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьДня
		|				ТОГДА ИСТИНА
		|			КОГДА ПоказателиРасчета.Показатель = &СтоимостьДняЧаса
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &РазмерПособияДоТрехЛет
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентСевернойНадбавки
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &РайонныйКоэффициентРФ
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаНочные
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПроцентДоплатыЗаВечерние
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &БазовыйТарифГруппы
		|					И НЕ ПоказателиРасчета.ЗапрашиватьПриВводе
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ОтработаноСмен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		НЕ ВидыРасчета.Рассчитывается,
		|		ВидыРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|		ВидыРасчета.ИспользуетФормулу,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ФормулаРасчета ПОДОБНО ""0""
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВидыРасчета.ПериодДействияБазовый,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПоказательРайонныйКоэффициент
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПоказателиРасчета.Показатель = &ПоказательНадбавкаЗаВредность
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВидыРасчета.ОчередностьРасчета,
		|		ВидыРасчета.ПериодРасчетаБазовыхНачислений,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|					И НЕ ВидыРасчета.ИспользоватьСобственнуюФормулуРасчета
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыРасчета.Рассчитывается
		|		КОНЕЦ,
		|		ВидыРасчета.КоличествоМесяцевБазовогоПериода,
		|		ВидыРасчета.СдвигБазовогоПериода,
		|		ВидыРасчета.ЭтоРасчетОтпуска,
		|		ВЫБОР
		|			КОГДА ВидыРасчета.ЭтоРасчетОтпуска
		|				ТОГДА ВидыРасчета.ВидРасчета
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВидыРасчета.ИспользоватьСобственнуюФормулуРасчета
		|	ИЗ
		|		Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК ПоказателиРасчета
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК СправочникПоказатели
		|				ПО (СправочникПоказатели.Ссылка = ПоказателиРасчета.Показатель)
		|			ПО (ПоказателиРасчета.Ссылка = ВидыРасчета.Ссылка)
		|	ГДЕ
		|		ВидыРасчета.Ссылка В(&НачисленияОтбор)) КАК ПоказателиРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчета.ВидРасчета,
		|	ПоказателиРасчета.ВидРасчетаРезерва,
		|	ПоказателиРасчета.ЭтоРасчетОтпуска,
		|	ПоказателиРасчета.ВидОтпускаРезерва,
		|	ПоказателиРасчета.ИспользоватьСобственнуюФормулуРасчета";
	
	РезультатЗапроса = Запрос.Выполнить();
			
	ПоляСтруктуры = Новый Массив;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя <> "ВидРасчетаРезерва" Тогда
			ПоляСтруктуры.Добавить(Колонка.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоляСтруктурыСтрокой = СтрСоединить(ПоляСтруктуры, ",");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТребованияТекущегоНачисления = Новый Структура(ПоляСтруктурыСтрокой);
		ЗаполнитьЗначенияСвойств(ТребованияТекущегоНачисления, Выборка);
		ТребованияВидаРасчетаРезервов.Вставить(Выборка.ВидРасчетаРезерва, ТребованияТекущегоНачисления);
	КонецЦикла;
	
	Для Каждого ПоказательВидаРасчетаРезервов Из ТребованияВидаРасчетаРезервов Цикл
		ПоказательНачислений = ТребованияНачислений.Получить(ПоказательВидаРасчетаРезервов.Значение.ВидРасчета);
		ПоказательНачисленийВременный = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПоказательНачислений);
		Для Каждого ЗначениеПоля Из ПоляСтруктуры Цикл
			ПоказательНачисленийВременный.Вставить(ЗначениеПоля, ПоказательВидаРасчетаРезервов.Значение[ЗначениеПоля]);
		КонецЦикла;
		Если ЗначениеЗаполнено(ПоказательНачисленийВременный.ВидОтпускаРезерва) Тогда
			ПоказательНачисленийВременный.ВидОтпуска = ПоказательНачисленийВременный.ВидОтпускаРезерва;
		КонецЕсли;
		ТребованияВидаРасчетаРезервов.Вставить(ПоказательВидаРасчетаРезервов.Ключ, ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПоказательНачисленийВременный));
	КонецЦикла;
	
	Возврат ТребованияВидаРасчетаРезервов;
	
КонецФункции

Функция ПоказателиВидаРасчетаРезервов(ОтборНачислений, ЭтоРасчетОтпуска = Ложь, Инвентаризация = Ложь)
	
	ПоказателиНачислений  = Новый Соответствие;
	
	ПоляСвойствПоказателя = "ВидРасчета, Показатель, ЗапрашиватьПриВводе, ОперативныйПоказательСотрудника,
	|ОперативныйПоказательОрганизации, ОперативныйПоказательПодразделения, ИдентификаторПоказателя,
	|ОтображатьВДокументахНачисления, ОпределяющийПоказатель, ПериодическийПоказательСотрудника,
	|ПериодическийПоказательОрганизации, ПериодическийПоказательПодразделения, РазовыйПоказательСотрудника,
	|РазовыйПоказательОрганизации, РазовыйПоказательПодразделения,СчитатьКакПремиюЗаДИДОНаНачалоМесяца";
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.Оклад"));
	СписокПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоДолжности"));		
	СписокПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладЗаКлассныйЧин"));		
	СписокПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоВоинскомуЗванию"));		
	СписокПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоСпециальномуЗванию"));		
	
	СписокПоказателейОтпуск = Новый Массив;
	Если ЭтоРасчетОтпуска Тогда
		Если Инвентаризация Тогда
			СписокПоказателейОтпуск = РезервыПоОплатеТрудаРасширенный.ПоказателиРезерваОтпусковПоУмолчанию();
		КонецЕсли;
		СписокПоказателейОтпуск.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.УчитыватьМРОТ"));
		СписокПоказателейОтпуск.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяцаБезПраздников"));
		СписокПоказателейОтпуск.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	РасчетЗарплаты.СоздатьВТДополнительныеСвойстваНачислений(Запрос.МенеджерВременныхТаблиц);
	Запрос.УстановитьПараметр("ПоказателиНаНачалоМесяца", СписокПоказателей);
	Запрос.УстановитьПараметр("ОтборНачислений",          ОтборНачислений);
	Запрос.УстановитьПараметр("СписокПоказателейОтпуск",  СписокПоказателейОтпуск);
	Запрос.УстановитьПараметр("ЭтоРасчетОтпуска",         ЭтоРасчетОтпуска);
	Запрос.УстановитьПараметр("Инвентаризация",           Инвентаризация);
	Запрос.УстановитьПараметр("ВидРасчетаОсновнойОтпуск", РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка КАК Ссылка,
	|	ПоказателиРасчетаЗарплаты.ОперативныйПоказательСотрудника КАК ОперативныйПоказательСотрудника,
	|	ПоказателиРасчетаЗарплаты.ОперативныйПоказательОрганизации КАК ОперативныйПоказательОрганизации,
	|	ПоказателиРасчетаЗарплаты.ОперативныйПоказательПодразделения КАК ОперативныйПоказательПодразделения,
	|	ПоказателиРасчетаЗарплаты.Идентификатор КАК Идентификатор,
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления,
	|	ПоказателиРасчетаЗарплаты.РазовыйПоказательСотрудника КАК РазовыйПоказательСотрудника,
	|	ПоказателиРасчетаЗарплаты.РазовыйПоказательОрганизации КАК РазовыйПоказательОрганизации,
	|	ПоказателиРасчетаЗарплаты.РазовыйПоказательПодразделения КАК РазовыйПоказательПодразделения,
	|	ПоказателиРасчетаЗарплаты.ПериодическийПоказательСотрудника КАК ПериодическийПоказательСотрудника,
	|	ПоказателиРасчетаЗарплаты.ПериодическийПоказательОрганизации КАК ПериодическийПоказательОрганизации,
	|	ПоказателиРасчетаЗарплаты.ПериодическийПоказательПодразделения КАК ПериодическийПоказательПодразделения
	|ПОМЕСТИТЬ ВТПоказателиРасчетаОтпуск
	|ИЗ
	|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	ПоказателиРасчетаЗарплаты.Ссылка В(&СписокПоказателейОтпуск)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Идентификатор,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПоказателиРасчетаРезервовПоОплатеТруда КАК ПоказателиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	ПоказателиРасчетаРезервовПоОплатеТруда.Ссылка В(&СписокПоказателейОтпуск)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоказатели.Ссылка КАК Ссылка,
	|	НачисленияПоказатели.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.ЗапрашиватьПриВводе
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗапрашиватьПриВводе,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ОперативныйПоказательСотрудника
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОперативныйПоказательСотрудника,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ОперативныйПоказательОрганизации
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОперативныйПоказательОрганизации,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ОперативныйПоказательПодразделения
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОперативныйПоказательПодразделения,
	|	НачисленияПоказатели.Показатель.Идентификатор КАК ИдентификаторПоказателя,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ОтображатьВДокументахНачисления
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОтображатьВДокументахНачисления,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.ОпределяющийПоказатель
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОпределяющийПоказатель,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ПериодическийПоказательСотрудника
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодическийПоказательСотрудника,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ПериодическийПоказательОрганизации
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодическийПоказательОрганизации,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.ПериодическийПоказательПодразделения
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодическийПоказательПодразделения,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.РазовыйПоказательСотрудника
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазовыйПоказательСотрудника,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.РазовыйПоказательОрганизации
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазовыйПоказательОрганизации,
	|	ВЫБОР
	|		КОГДА НачисленияПоказатели.Показатель ССЫЛКА Справочник.ПоказателиРасчетаЗарплаты
	|			ТОГДА НачисленияПоказатели.Показатель.РазовыйПоказательПодразделения
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазовыйПоказательПодразделения,
	|	ЛОЖЬ КАК СчитатьКакПремиюЗаДИДОНаНачалоМесяца,
	|	НачисленияПоказатели.Ссылка КАК ВидРасчета
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда.Показатели КАК НачисленияПоказатели
	|ГДЕ
	|	НачисленияПоказатели.Ссылка В(&ОтборНачислений)
	|	И НЕ(&ЭтоРасчетОтпуска
	|				И &Инвентаризация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка,
	|	ВТПоказателиРасчетаОтпуск.Ссылка,
	|	ЛОЖЬ,
	|	ВТПоказателиРасчетаОтпуск.ОперативныйПоказательСотрудника,
	|	ВТПоказателиРасчетаОтпуск.ОперативныйПоказательОрганизации,
	|	ВТПоказателиРасчетаОтпуск.ОперативныйПоказательПодразделения,
	|	ВТПоказателиРасчетаОтпуск.Идентификатор,
	|	ВТПоказателиРасчетаОтпуск.ОтображатьВДокументахНачисления,
	|	ЛОЖЬ,
	|	ВТПоказателиРасчетаОтпуск.ПериодическийПоказательСотрудника,
	|	ВТПоказателиРасчетаОтпуск.ПериодическийПоказательОрганизации,
	|	ВТПоказателиРасчетаОтпуск.ПериодическийПоказательПодразделения,
	|	ВТПоказателиРасчетаОтпуск.РазовыйПоказательСотрудника,
	|	ВТПоказателиРасчетаОтпуск.РазовыйПоказательОрганизации,
	|	ВТПоказателиРасчетаОтпуск.РазовыйПоказательПодразделения,
	|	ЛОЖЬ,
	|	&ВидРасчетаОсновнойОтпуск
	|ИЗ
	|	Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда,
	|	ВТПоказателиРасчетаОтпуск КАК ВТПоказателиРасчетаОтпуск
	|ГДЕ
	|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка В(&ОтборНачислений)
	|	И &ЭтоРасчетОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Показатели = Новый Массив;
		ПоказателиНачислений.Вставить(Выборка.Ссылка, Показатели);
		Пока Выборка.Следующий() Цикл
			СвойстваПоказателя = Новый Структура(ПоляСвойствПоказателя);
			ЗаполнитьЗначенияСвойств(СвойстваПоказателя, Выборка);
			Показатели.Добавить(СвойстваПоказателя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПоказателиНачислений;
	
КонецФункции	

Процедура РассчитатьЗначенияПоказателейОстатокОтпуска(СтрокиНачисленийКРасчету, МенеджерРасчетаЗарплаты)
	
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = МенеджерРасчетаЗарплаты.ДанныеТекущегоНабораНачисления();
	СтрокиНабора = МенеджерРасчетаЗарплаты.СтрокиНабораНачисленияПоИдентификаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.ОстатокОтпуска");
	
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ДанныеНабора.ФПД, "Регистратор, НомерСтроки");
	СтруктураПоискаФПД = Новый Структура("Регистратор, НомерСтроки");
	
	ТребованияНачислений = МенеджерРасчетаЗарплаты.ТребованияНачисленийТаблица();
	
	ВидыЕжегодныхОплачиваемыхОтпусков = Справочники.ВидыОтпусков.ВидыЕжегодныхОплачиваемыхОтпусков();
	
	СтрокиПоИдентификатору = Новый Соответствие();
	СтрокиТребующиеЗаполненияПоказателя = Новый Массив;
	ВидыРасчетовОтпусков = Новый Соответствие;
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		
		Если СтрокаТаблицыНачислений.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТребованияТекущегоНачисления.ВидОтпуска) Тогда 
			Продолжить;
		КонецЕсли;
		Если ВидыЕжегодныхОплачиваемыхОтпусков.Найти(ТребованияТекущегоНачисления.ВидОтпуска) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТребующиеЗаполненияПоказателя.Добавить(СтрокаНабора);
		
		ВидыРасчетовОтпусков.Вставить(СтрокаНабора.ВидРасчета, ТребованияТекущегоНачисления.ВидОтпуска);
	КонецЦикла;
	
	ПараметрыОтбора = ОстаткиОтпусков.ОписаниеПараметровДляОстаткиОтпусков();
	ПараметрыОтбора.ДатаОстатков			= КонецМесяца(ДанныеНабора.ТаблицаНабора[0].ПериодРегистрации);
	ПараметрыОтбора.Сотрудники 				= ДанныеНабора.ТаблицаНабора.ВыгрузитьКолонку("Сотрудник");
	
	ТаблицаОстатковОтпусков = ОстаткиОтпусков.ОстаткиОтпусков(ПараметрыОтбора);
	ТаблицаОстатковОтпусков.Свернуть("Сотрудник, ВидОтпуска", "Дни");
	
	// Исключим дни, полученные авансом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",       ПараметрыОтбора.Сотрудники);
	Запрос.УстановитьПараметр("ПериодНачисления", НачалоМесяца(ПараметрыОтбора.ДатаОстатков));
	Запрос.УстановитьПараметр("КонецМесяца",      КонецМесяца(ПараметрыОтбора.ДатаОстатков));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	СУММА(ФактическиеОтпуска.Количество) КАК ОтпускАвансом,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.Сотрудник В(&Сотрудники)
	|	И НАЧАЛОПЕРИОДА(ФактическиеОтпуска.ПериодНачисления, МЕСЯЦ) = &ПериодНачисления
	|	И ФактическиеОтпуска.Период > &КонецМесяца
	|	И НЕ ФактическиеОтпуска.ВидЕжегодногоОтпуска.ОтпускБезОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска
	|
	|ИМЕЮЩИЕ
	|	СУММА(ФактическиеОтпуска.Количество) > 0";
	
	ВыборкаОтпускаАвансом = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОтпускаАвансом.Следующий() Цикл
		СтруктурОтбора = Новый Структура("Сотрудник, ВидОтпуска", ВыборкаОтпускаАвансом.Сотрудник, ВыборкаОтпускаАвансом.ВидОтпуска);
		ПраваНаОтпускСотрудника = ТаблицаОстатковОтпусков.НайтиСтроки(СтруктурОтбора);
		Если ПраваНаОтпускСотрудника.Количество() <> 0 Тогда
			ПраваНаОтпускСотрудника[0].Дни = ПраваНаОтпускСотрудника[0].Дни - ВыборкаОтпускаАвансом.ОтпускАвансом;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНабора Из СтрокиТребующиеЗаполненияПоказателя Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаФПД, СтрокаНабора);
		СтрокиФПД = ДанныеНабора.ФПД.НайтиСтроки(СтруктураПоискаФПД);	
		
		Если СтрокиФПД.Количество() = 0 Тогда
			СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
			ЗаполнитьЗначениеПоказателяОстатокОтпускаВСтрокеРасчета(СтрокаТаблицыНачисления, Показатель, 0, МенеджерРасчетаЗарплаты);
			Продолжить;
		КонецЕсли;
		
		Значение = 0;
		
		МассивСтрок = ТаблицаОстатковОтпусков.НайтиСтроки(Новый Структура("Сотрудник, ВидОтпуска", СтрокаНабора.Сотрудник, ВидыРасчетовОтпусков[СтрокаНабора.ВидРасчета]));
		Для Каждого СтрокаМассива Из МассивСтрок Цикл
			Если ВидыЕжегодныхОплачиваемыхОтпусков.Найти(СтрокаМассива.ВидОтпуска) <> Неопределено Тогда
				Значение = Значение + СтрокаМассива.Дни;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицыНачисления = СтрокиПоИдентификатору[СтрокаНабора.ИдентификаторСтроки];
		ЗаполнитьЗначениеПоказателяОстатокОтпускаВСтрокеРасчета(СтрокаТаблицыНачисления, Показатель, Значение, МенеджерРасчетаЗарплаты);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоказателяОстатокОтпускаВСтрокеРасчета(СтрокаРасчета, Показатель, Значение, МенеджерРасчетаЗарплаты)
	
	МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаРасчета, Показатель, Значение, Истина);
	
	Если ТипЗнч(СтрокаРасчета.Категория) <> Тип("ПеречислениеСсылка.КатегорииУдержаний") Тогда
		СтрокаРасчета.ОплаченоДней = Значение;
		СтрокаРасчета.ОплаченоЧасов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗначенияПоказателейСохраняемыйЗаработок(СтрокиНачисленийКРасчету, МенеджерРасчетаЗарплаты)
	
	// Что есть "СохраняемыйЗаработок"
	// Для гражданского персонала это ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий
	// Для госслужащих это ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание
	
	Если СтрокиНачисленийКРасчету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНабора = МенеджерРасчетаЗарплаты.ДанныеТекущегоНабораНачисления();
	СтрокиНабора = МенеджерРасчетаЗарплаты.СтрокиНабораНачисленияПоИдентификаторам();
	Если ДанныеНабора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребованияНачислений = МенеджерРасчетаЗарплаты.ТребованияНачисленийТаблица();
	
	Период      = МенеджерРасчетаЗарплаты.НастройкиРасчета.НастройкаРезервов.Период;
	Организация = МенеджерРасчетаЗарплаты.НастройкиРасчета.НастройкаРезервов.Организация;
	
	ПоказательУчитыватьМРОТ =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.УчитыватьМРОТ");
	ПоказательМРОТ =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	ПоказательКалендарныеДниМесяцаБезПраздников =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяцаБезПраздников");
	ПоказательСохраняемыйЗаработок =
		ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаРезервовПоОплатеТруда.СохраняемыйЗаработок");
	
	СтрокиПоИдентификатору = Новый Соответствие();
	СтрокиТребующиеЗаполненияПоказателя = Новый Массив;
	Для Каждого СтрокаТаблицыНачислений Из СтрокиНачисленийКРасчету Цикл
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицыНачислений.ИдентификаторСтроки, СтрокаТаблицыНачислений);
		СтрокаНабора = СтрокиНабора[СтрокаТаблицыНачислений.ИдентификаторСтроки];
		ТребованияТекущегоНачисления = ТребованияНачислений[СтрокаНабора.ВидРасчета];
		
		Если СтрокаТаблицыНачислений.ФиксЗаполнение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТребующиеЗаполненияПоказателя.Добавить(СтрокаНабора);
	КонецЦикла;
	
	УчитыватьОсобенностиПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		УчитыватьОсобенностиПредприятия = МодульГосударственнаяСлужба.УчитыватьОсобенностиПредприятияПриРасчетеОценочныхОбязательствОтпусков();
	КонецЕсли;
	
	СотрудникиДляРасчета = Новый Массив;
	СотрудникиПоИдентификаторам = Новый Соответствие;
	Для Каждого СтрокаМассива Из СтрокиТребующиеЗаполненияПоказателя Цикл
		СотрудникиДляРасчета.Добавить(СтрокаМассива.Сотрудник);
		МассивИдентификаторовСтроки = СотрудникиПоИдентификаторам[СтрокаМассива.Сотрудник];
		Если МассивИдентификаторовСтроки = Неопределено Тогда
			МассивИдентификаторовСтроки = Новый Массив;
		КонецЕсли;
		МассивИдентификаторовСтроки.Добавить(СтрокаМассива.ИдентификаторСтроки);
		СотрудникиПоИдентификаторам.Вставить(СтрокаМассива.Сотрудник, МассивИдентификаторовСтроки);
	КонецЦикла;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		СотрудникиПоСпособамРасчета = ОтражениеЗарплатыВБухучетеРасширенный.СотрудникиПоСпособамРасчетаОбязательствОтпусков(СотрудникиДляРасчета, Период);
		СотрудникиДляРасчета = СотрудникиПоСпособамРасчета.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		СотрудникиПоСреднемуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСреднемуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиПоСреднемуЗаработку = СотрудникиДляРасчета;
	КонецЕсли;
	СпособыРасчетаОтпусковСотрудников = ОстаткиОтпусков.СпособыРасчетаОтпусковСотрудников(СотрудникиПоСреднемуЗаработку, КонецМесяца(Период));
	
	ДатаСобытия = НачалоМесяца(ДобавитьМесяц(Период, 1));
	
	СотрудникиДляУточнения = Новый Массив;
	Если СотрудникиПоСреднемуЗаработку.Количество() > 0 Тогда
		Для Каждого Сотрудник Из СотрудникиПоСреднемуЗаработку Цикл
			
			СтрокиТаблицыНачисления = СотрудникиПоИдентификаторам[Сотрудник];
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.СпособРасчетаОтпуска = СпособыРасчетаОтпусковСотрудников[Сотрудник];
			
			СреднийЗаработок = УчетСреднегоЗаработка.СреднийЗаработок(Сотрудник, ДатаСобытия, ДополнительныеПараметры);
			Если СреднийЗаработок = 0 Тогда
				СотрудникиДляУточнения.Добавить(Сотрудник);
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИдентификаторСтроки Из СтрокиТаблицыНачисления Цикл
				СтрокаТаблицыНачисления = СтрокиПоИдентификатору[ИдентификаторСтроки];
				МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ПоказательСохраняемыйЗаработок, СреднийЗаработок, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СотрудникиДляУточнения.Количество() > 0 Тогда
		
		ПериодыПоСотрудникам = СостоянияСотрудников.СостоянияСотрудников(СотрудникиДляУточнения,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.СостоянияСотрудника.Работа));
		Для Каждого Сотрудник Из СотрудникиДляУточнения Цикл
			
			СреднийЗаработок = 0;
			
			СтрокиТаблицыНачисления = СотрудникиПоИдентификаторам[Сотрудник];
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.СпособРасчетаОтпуска = СпособыРасчетаОтпусковСотрудников[Сотрудник];
			
			ПериодыПоСотруднику = ПериодыПоСотрудникам.Скопировать(Новый Структура("Сотрудник", Сотрудник));
			ПериодыПоСотруднику.Сортировать("Начало УБЫВ");
			Для Каждого СтрокаПоСотруднику Из ПериодыПоСотруднику Цикл
				Если ЗначениеЗаполнено(СтрокаПоСотруднику.Окончание) И НачалоМесяца(СтрокаПоСотруднику.Окончание) <= НачалоМесяца(Период) Тогда
					СдвигПериода = ? (КонецДня(СтрокаПоСотруднику.Окончание) = КонецМесяца(СтрокаПоСотруднику.Окончание), 0, -1);
					ДополнительныеПараметры.ОкончаниеПериода =  НачалоМесяца(ДобавитьМесяц(СтрокаПоСотруднику.Окончание, СдвигПериода));
					ДополнительныеПараметры.НачалоПериода    = НачалоМесяца(ДобавитьМесяц(ДополнительныеПараметры.ОкончаниеПериода, -11));
					СреднийЗаработок = УчетСреднегоЗаработка.СреднийЗаработок(Сотрудник, ДатаСобытия, ДополнительныеПараметры);
					Если СреднийЗаработок <> 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ИдентификаторСтроки Из СтрокиТаблицыНачисления Цикл
				СтрокаТаблицыНачисления = СтрокиПоИдентификатору[ИдентификаторСтроки];
				СтрокаТаблицыНачисления.ПериодРасчетаСреднегоЗаработкаНачало    = ДополнительныеПараметры.НачалоПериода;
				СтрокаТаблицыНачисления.ПериодРасчетаСреднегоЗаработкаОкончание = ДополнительныеПараметры.ОкончаниеПериода;
				МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ПоказательСохраняемыйЗаработок, СреднийЗаработок, Истина);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если УчитыватьОсобенностиПредприятия Тогда
		
		СохраняемыйЗаработок = Новый Соответствие;
		СотрудникиПоСохраняемомуЗаработку = СотрудникиПоСпособамРасчета.Скопировать(Новый Структура("РасчетПоСохраняемомуЗаработку", Истина)).ВыгрузитьКолонку("Сотрудник");
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			МодульРасчетДенежногоСодержания = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			СохраняемыйЗаработок = МодульРасчетДенежногоСодержания.СохраняемыйЗаработокСотрудниковДляОбязательствПоОтпускам(СотрудникиПоСохраняемомуЗаработку, Организация, Период);
		КонецЕсли;
		
		Для каждого Сотрудник Из СотрудникиПоСохраняемомуЗаработку Цикл
			СреднийЗаработок = СохраняемыйЗаработок[Сотрудник];
			
			СтрокиТаблицыНачисления = СотрудникиПоИдентификаторам[Сотрудник];
			Для Каждого ИдентификаторСтроки Из СтрокиТаблицыНачисления Цикл
				СтрокаТаблицыНачисления = СтрокиПоИдентификатору[ИдентификаторСтроки];
				МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ПоказательСохраняемыйЗаработок, СреднийЗаработок, Истина);
			КонецЦикла;
			МенеджерРасчетаЗарплаты.ЗаполнитьЗначениеПоказателяСтрокиРасчета(СтрокаТаблицыНачисления, ПоказательСохраняемыйЗаработок, СреднийЗаработок, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	// Из МРОТ
	Для Каждого СтрокаМассива Из СтрокиНачисленийКРасчету Цикл
		СтрокаПоказателяСреднийЗаработок = СтрокаМассива.Показатели.Найти(ПоказательСохраняемыйЗаработок);
		Если СтрокаПоказателяСреднийЗаработок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПоказателяКалендарныеДниМесяцаБезПраздников = СтрокаМассива.Показатели.Найти(ПоказательКалендарныеДниМесяцаБезПраздников);
		Если СтрокаПоказателяКалендарныеДниМесяцаБезПраздников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПоказателяКалендарныеДниМесяцаБезПраздников.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПоказателяМРОТ = СтрокаМассива.Показатели.Найти(ПоказательМРОТ);
		Если СтрокаПоказателяМРОТ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПоказателяСреднийЗаработок.Значение * СтрокаПоказателяКалендарныеДниМесяцаБезПраздников.Значение < СтрокаПоказателяМРОТ.Значение Тогда
			СтрокаПоказателяСреднийЗаработок.Значение = Окр(СтрокаПоказателяМРОТ.Значение / СтрокаПоказателяКалендарныеДниМесяцаБезПраздников.Значение, 2);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиРасчетаРезервовПоОплатеТруда

Функция ПлановыеНачисленияРезервов(Организация, Резерв, Период) Экспорт
	
	ВидРасчетаОсновногоОтпуска = РезервыПоОплатеТрудаРасширенный.ВидРасчетаОсновнойОтпуск();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Резерв",         Резерв);
	Запрос.УстановитьПараметр("Период",         Период);
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ВидРасчетаОсновногоОтпуска);
	Запрос.Текст = СтрЗаменить(ТекстЗапросаПлановыеНачисленияРезервов(), "&Условие", "Истина");
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаПлановыеНачисленияРезервов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск) КАК ЭтоРезервОтпусков
	|ПОМЕСТИТЬ ВТ_НастройкиРасчетаРезервовПоОплатеТруда
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
	|	И НастройкиРасчетаРезервовПоОплатеТруда.Резерв = &Резерв
	|	И &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка,
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда.ЭтоРезервОтпусков КАК ЭтоРезервОтпусков
	|ПОМЕСТИТЬ ВТ_ВидыРасчетаРезерва
	|ИЗ
	|	ВТ_НастройкиРасчетаРезервовПоОплатеТруда КАК ВТ_НастройкиРасчетаРезервовПоОплатеТруда
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовРезерва КАК НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва
	|		ПО ВТ_НастройкиРасчетаРезервовПоОплатеТруда.Ссылка = НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыРасчетаРезерва.Ссылка КАК Ссылка,
	|	ВТ_ВидыРасчетаРезерва.Организация КАК Организация,
	|	ВТ_ВидыРасчетаРезерва.Резерв КАК Резерв,
	|	ВТ_ВидыРасчетаРезерва.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВЫБОР
	|		КОГДА ВТ_ВидыРасчетаРезерва.ЭтоРезервОтпусков
	|			ТОГДА ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|	КОНЕЦ КАК ВидОтпуска,
	|	ВЫБОР
	|		КОГДА ВТ_ВидыРасчетаРезерва.ЭтоРезервОтпусков
	|			ТОГДА &ОсновнойОтпуск
	|		ИНАЧЕ ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета
	|	КОНЕЦ КАК Начисление,
	|	ВидыРасчетовРезервовПоОплатеТруда.НазначениеПоказателя КАК НазначениеПоказателя,
	|	ВТ_ВидыРасчетаРезерва.ЭтоРезервОтпусков КАК ЭтоРезервОтпусков
	|ПОМЕСТИТЬ ВТ_ВидыРасчетовПромежуточная
	|ИЗ
	|	ВТ_ВидыРасчетаРезерва КАК ВТ_ВидыРасчетаРезерва
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
	|		ПО ВТ_ВидыРасчетаРезерва.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТруда.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыРасчетовПромежуточная.Ссылка КАК Ссылка,
	|	ВТ_ВидыРасчетовПромежуточная.Организация КАК Организация,
	|	ВТ_ВидыРасчетовПромежуточная.Резерв КАК Резерв,
	|	ВТ_ВидыРасчетовПромежуточная.ВидРасчетаРезерва КАК ВидРасчетаРезерва,
	|	ВТ_ВидыРасчетовПромежуточная.ВидОтпуска КАК ВидОтпуска,
	|	ВТ_ВидыРасчетовПромежуточная.Начисление КАК ВидРасчета,
	|	ВТ_ВидыРасчетовПромежуточная.ВидРасчетаРезерва КАК Начисление,
	|	ВТ_ВидыРасчетовПромежуточная.НазначениеПоказателя КАК НазначениеПоказателя,
	|	ВТ_ВидыРасчетовПромежуточная.ЭтоРезервОтпусков КАК ЭтоРезервОтпусков,
	|	ЕСТЬNULL(НазначениеПоказателейРасчетаРезервов.ВладелецВидаРасчета, &Организация) КАК ВладелецВидаРасчета
	|ИЗ
	|	ВТ_ВидыРасчетовПромежуточная КАК ВТ_ВидыРасчетовПромежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеПоказателейРасчетаРезервов КАК НазначениеПоказателейРасчетаРезервов
	|		ПО ВТ_ВидыРасчетовПромежуточная.Ссылка = НазначениеПоказателейРасчетаРезервов.ПараметрыРасчетаРезерва
	|			И ВТ_ВидыРасчетовПромежуточная.Организация = НазначениеПоказателейРасчетаРезервов.Организация
	|			И ВТ_ВидыРасчетовПромежуточная.ВидРасчетаРезерва = НазначениеПоказателейРасчетаРезервов.ВидРасчетаРезерва
	|			И (ВТ_ВидыРасчетовПромежуточная.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляОрганизации)
	|				ИЛИ ВТ_ВидыРасчетовПромежуточная.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПодразделения)
	|					И НазначениеПоказателейРасчетаРезервов.ВладелецВидаРасчета ССЫЛКА Справочник.ПодразделенияОрганизаций
	|				ИЛИ ВТ_ВидыРасчетовПромежуточная.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаРезервовПоОплатеТруда.ДляПозицииШтатногоРасписания)
	|					И НазначениеПоказателейРасчетаРезервов.ВладелецВидаРасчета ССЫЛКА Справочник.ШтатноеРасписание)
	|ГДЕ
	|	&Условие";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНастройкаРезервов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВерсияДанных КАК ВерсияДанных,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПометкаУдаления КАК ПометкаУдаления,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Наименование КАК Наименование,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва КАК ВидРезерва,
	|	ВЫБОР
	|		КОГДА НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, ГОД) = НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты, ГОД)
	|	КОНЕЦ КАК ВыплатаВРасчетномПериоде,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода КАК НачалоПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода КАК КонецПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПолноеНаименование КАК ПолноеНаименование,
	|	ИСТИНА КАК ФормироватьРезервБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ФормироватьРезервНУ КАК ФормироватьРезервНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ КАК МетодНачисленияРезерваБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ КАК МетодНачисленияРезерваНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НормативОтчисленийВРезервБУ КАК НормативОтчисленийВРезерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НормативОтчисленийВРезервБУ КАК НормативОтчисленийВРезервБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НормативОтчисленийВРезервНУ КАК НормативОтчисленийВРезервНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПредельнаяВеличинаОтчисленийВРезервБУ КАК ПредельнаяВеличинаОтчисленийВРезервБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПредельнаяВеличинаОтчисленийВРезервНУ КАК ПредельнаяВеличинаОтчисленийВРезервНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ПредельнаяВеличинаОтчисленийВРезервНУ КАК ПредельнаяВеличинаОтчисленийВРезерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОграничиватьНачислениеПредельнойСуммойБУ КАК ОграничиватьНачислениеПредельнойСуммойБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОграничиватьНачислениеПредельнойСуммойНУ КАК ОграничиватьНачислениеПредельнойСуммойНУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НалоговыйУчетПоНастройкамБухгалтерскогоУчета КАК НалоговыйУчетПоНастройкамБухгалтерскогоУчета,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ИспользоватьНастройкиГоловнойОрганизации КАК ИспользоватьНастройкиГоловнойОрганизации,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОпределятьИзлишкиЕжемесячноБУ КАК ОпределятьИзлишкиЕжемесячно,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОпределятьИзлишкиЕжемесячноБУ КАК ОпределятьИзлишкиЕжемесячноБУ,
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОпределятьИзлишкиЕжемесячноНУ КАК ОпределятьИзлишкиЕжемесячноНУ,
	|	НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, ГОД) КАК Период,
	|	НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.ПериодВыплаты, ГОД) КАК ПериодВыплаты
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
	|	И НастройкиРасчетаРезервовПоОплатеТруда.Резерв = &Резерв
	|	И &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОписаниеНастройкиДействующихРезервов() Экспорт
	
	ОписаниеНастройкиДействующихРезервов = РезервыПоОплатеТрудаБазовый.ОписаниеНастройкиДействующихРезервов();
	ОписаниеНастройкиДействующихРезервов.Вставить("СоответствиеВидовОтпусков", Новый Соответствие);
	
	Возврат ОписаниеНастройкиДействующихРезервов;
	
КонецФункции

Функция НастройкиДействующихРезервов(Организация, Период, УчитыватьПериодВыплаты = Ложь) Экспорт
	
	НастройкиДействующихРезервов = ОписаниеНастройкиДействующихРезервов();
	НастройкиДействующихРезервов.Вставить("Организация", Организация);
	
	Выборка = РезервыПоОплатеТруда.ВыборкаДействующихНастроек(Организация, Период, УчитыватьПериодВыплаты);
	
	СтруктураНастроекРезервов = РезервыПоОплатеТруда.СтруктураНастроекРезервов();
	Пока Выборка.Следующий() Цикл
		
		НастройкиДействующихРезервов.СоответствиеНастроек.Вставить(Выборка.Резерв, РезервыПоОплатеТруда.НастройкаРезервов(Организация, Выборка.Резерв, Период));
		
		ПлановыеНачисленияРезервов = РезервыПоОплатеТруда.ПлановыеНачисленияРезервов(Организация, Выборка.Резерв, Период);
		
		МассивНачисленийРезерва  = Новый Массив;
		МассивПлановыхНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПлановыеНачисленияРезервов.ВыгрузитьКолонку("Начисление"));
		Для Каждого ЗначениеМассива Из МассивПлановыхНачислений Цикл
			Если ЗначениеЗаполнено(ЗначениеМассива) Тогда
				МассивНачисленийРезерва.Добавить(ЗначениеМассива);
			КонецЕсли;
		КонецЦикла;
		
		МассивВидовОтпусковРезерва  = Новый Массив;
		МассивПлановыхВидовОтпусков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПлановыеНачисленияРезервов.ВыгрузитьКолонку("ВидОтпуска"));
		Для Каждого ЗначениеМассива Из МассивПлановыхВидовОтпусков Цикл
			Если ЗначениеЗаполнено(ЗначениеМассива) Тогда
				МассивВидовОтпусковРезерва.Добавить(ЗначениеМассива);
			КонецЕсли;
		КонецЦикла;
		
		НастройкиДействующихРезервов.СоответствиеНачислений.Вставить(Выборка.Резерв, МассивНачисленийРезерва);
		НастройкиДействующихРезервов.СоответствиеВидовОтпусков.Вставить(Выборка.Резерв, МассивВидовОтпусковРезерва);
		
	КонецЦикла;
	
	Возврат НастройкиДействующихРезервов;
	
КонецФункции

Функция БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период) Экспорт
	
	БазовыеНачисления = Неопределено;
	
	НастройкаРезервов = РезервыПоОплатеТруда.НастройкиРезерва(Организация, Резерв, Период);
	Если НастройкаРезервов.НормативныйМетодБУ Тогда
		БазовыеНачисления = РезервыПоОплатеТрудаБазовый.БазовыеНачисленияРезерваПоОплатеТруда(Организация, Резерв, Период);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Резерв",      Резерв);
		Запрос.УстановитьПараметр("Период",      Период);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Настройка,
		|	ВидыРасчетовРезервовПоОплатеТруда.Ссылка КАК ВидРасчетаРезерва,
		|	Начисления.Ссылка КАК Начисление,
		|	ВидыРасчетовРезервовПоОплатеТруда.ИспользоватьСобственнуюФормулуРасчета КАК ИспользоватьСобственнуюФормулуРасчета
		|ПОМЕСТИТЬ ВТ_НастройкаРасчетнойБазы
		|ИЗ
		|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРасчетаРезервовПоОплатеТруда.ВидыРасчетовРезерва КАК НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРасчетовРезервовПоОплатеТруда КАК ВидыРасчетовРезервовПоОплатеТруда
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|				ПО ВидыРасчетовРезервовПоОплатеТруда.ВидРасчета = Начисления.Ссылка
		|			ПО НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.ВидРасчетаРезерва = ВидыРасчетовРезервовПоОплатеТруда.Ссылка
		|		ПО НастройкиРасчетаРезервовПоОплатеТруда.Ссылка = НастройкиРасчетаРезервовПоОплатеТрудаВидыРасчетовРезерва.Ссылка
		|ГДЕ
		|	НастройкиРасчетаРезервовПоОплатеТруда.Организация = &Организация
		|	И НастройкиРасчетаРезервовПоОплатеТруда.Резерв = &Резерв
		|	И &Период МЕЖДУ НАЧАЛОПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияБазовыеВидыРасчета.ВидРасчета КАК Ссылка
		|ИЗ
		|	ВТ_НастройкаРасчетнойБазы КАК ВТ_НастройкаРасчетнойБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК НачисленияБазовыеВидыРасчета
		|		ПО ВТ_НастройкаРасчетнойБазы.Начисление = НачисленияБазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	НЕ ВТ_НастройкаРасчетнойБазы.ИспользоватьСобственнуюФормулуРасчета
		|	И НЕ НачисленияБазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.ВидРасчета
		|ИЗ
		|	ВТ_НастройкаРасчетнойБазы КАК ВТ_НастройкаРасчетнойБазы,
		|	Справочник.ВидыРасчетовРезервовПоОплатеТруда.БазовыеВидыРасчета КАК ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета
		|ГДЕ
		|	ВТ_НастройкаРасчетнойБазы.ИспользоватьСобственнуюФормулуРасчета
		|	И НЕ ВидыРасчетовРезервовПоОплатеТрудаБазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			БазовыеНачисления = Новый Массив;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				БазовыеНачисления.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат БазовыеНачисления;
	
КонецФункции

Процедура НастройкиРасчетаРезервовПоОплатеТрудаОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Объект.МетодНачисленияРезерваБУ <> Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НормативОтчисленийВРезервБУ");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПредельнаяВеличинаОтчисленийВРезервБУ");
	ИначеЕсли Не Объект.ОграничиватьНачислениеПредельнойСуммойБУ Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПредельнаяВеличинаОтчисленийВРезервБУ");
	КонецЕсли;
	
	Если Не Объект.ФормироватьРезервНУ Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НормативОтчисленийВРезервНУ");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПредельнаяВеличинаОтчисленийВРезервНУ");
	ИначеЕсли Объект.МетодНачисленияРезерваНУ <> Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НормативОтчисленийВРезервНУ");
	КонецЕсли;
	Если Не Объект.ОграничиватьНачислениеПредельнойСуммойНУ Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПредельнаяВеличинаОтчисленийВРезервНУ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	// Этот обработчик должен выполняться до вызова базовых методом
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаРезервовПоОплатеТруда.СоздатьПоказатели";
	Обработчик.НачальноеЗаполнение = Истина;
	
	РезервыПоОплатеТрудаБазовый.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.126";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РезервыПоОплатеТрудаРасширенный.ЗаполнитьПараметрыОграниченийРасчетаРезервовПоОплатеТруда";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.30.126";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "РезервыПоОплатеТрудаРасширенный.ЗаполнитьРеквизитыНУДокументаРезервыПоОплатеТруда";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1bfcc57-8d4d-49cf-a0dc-eee3cda05e9b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение новых реквиизтов документа ""Резервы по оплате труда""';
									|en = 'Заполнение новых реквиизтов документа ""Резервы по оплате труда""'");
	
КонецПроцедуры

Процедура СоздатьНовуюНастройкуУчетаРезервовОтпусков() Экспорт
	
	РезервЕжегодныхОтпусков = Справочники.Резервы.РезервЕжегодныхОтпусков();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И НЕ ВидыОтпусков.ОтпускБезОплаты
	|	И НЕ ВидыОтпусков.Недействителен";
	
	ВидыОтпусков = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Организация КАК Организация,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.Период КАК Период,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ФормироватьРезервОтпусковБУ КАК ФормироватьРезервОтпусковБУ,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ФормироватьРезервОтпусковНУ КАК ФормироватьРезервОтпусковНУ,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.МетодНачисленияРезерваОтпусков КАК МетодНачисленияРезерваОтпусков,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.НормативОтчисленийВРезервОтпусков КАК НормативОтчисленийВРезервОтпусков,
	|	НастройкиРасчетаРезервовОтпусковСрезПоследних.ПредельнаяВеличинаОтчисленийВРезервОтпусков КАК ПредельнаяВеличинаОтчисленийВРезервОтпусков
	|ПОМЕСТИТЬ ВТ_НастройкаРезервовОтпусков
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаРезервовОтпусков.СрезПоследних КАК НастройкиРасчетаРезервовОтпусковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода КАК Период
	|ПОМЕСТИТЬ ВТ_НастройкиРезервовПоОплатеТруда
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.ВидРезерва = ЗНАЧЕНИЕ(Перечисление.ВидыРезервовПоОплатеТруда.Отпуск)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НастройкаРезервовОтпусков.Организация КАК Организация,
	|	ВТ_НастройкаРезервовОтпусков.Период КАК Период,
	|	ВТ_НастройкаРезервовОтпусков.ФормироватьРезервОтпусковБУ КАК ФормироватьРезервОтпусковБУ,
	|	ВТ_НастройкаРезервовОтпусков.ФормироватьРезервОтпусковНУ КАК ФормироватьРезервОтпусковНУ,
	|	ВТ_НастройкаРезервовОтпусков.МетодНачисленияРезерваОтпусков КАК МетодНачисленияРезерваОтпусков,
	|	ВТ_НастройкаРезервовОтпусков.НормативОтчисленийВРезервОтпусков КАК НормативОтчисленийВРезервОтпусков,
	|	ВТ_НастройкаРезервовОтпусков.ПредельнаяВеличинаОтчисленийВРезервОтпусков КАК ПредельнаяВеличинаОтчисленийВРезервОтпусков,
	|	ВТ_НастройкиРезервовПоОплатеТруда.Организация КАК ОрганизацияНовойНастройки
	|ИЗ
	|	ВТ_НастройкаРезервовОтпусков КАК ВТ_НастройкаРезервовОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиРезервовПоОплатеТруда КАК ВТ_НастройкиРезервовПоОплатеТруда
	|		ПО ВТ_НастройкаРезервовОтпусков.Организация = ВТ_НастройкиРезервовПоОплатеТруда.Организация
	|			И ВТ_НастройкаРезервовОтпусков.Период < ВТ_НастройкиРезервовПоОплатеТруда.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийПериод = ТекущаяДатаСеанса();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ОрганизацияНовойНастройки) Тогда
			Продолжить;
		КонецЕсли;
		Если Не Выборка.ФормироватьРезервОтпусковБУ Тогда
			Продолжить;
		КонецЕсли;
		ПоследнийПериодТекущейНастройки = Выборка.Период;
		Если Год(ПоследнийПериодТекущейНастройки) < Год(ТекущийПериод) Тогда
			ПоследнийПериодТекущейНастройки = НачалоГода(ТекущийПериод);
		КонецЕсли;
		
		СправочникОбъект = Справочники.НастройкиРасчетаРезервовПоОплатеТруда.СоздатьЭлемент();
		СправочникОбъект.Организация                              = Выборка.Организация;
		СправочникОбъект.ВидРезерва                               = Перечисления.ВидыРезервовПоОплатеТруда.Отпуск;
		СправочникОбъект.Резерв                                   = РезервЕжегодныхОтпусков;
		СправочникОбъект.НачалоПериода                            = НачалоГода(ДобавитьМесяц(ПоследнийПериодТекущейНастройки, 12));
		СправочникОбъект.КонецПериода                             = КонецГода(СправочникОбъект.НачалоПериода);
		СправочникОбъект.МетодНачисленияРезерваБУ                 = Выборка.МетодНачисленияРезерваОтпусков;
		СправочникОбъект.ФормироватьРезервНУ                      = Выборка.ФормироватьРезервОтпусковНУ;
		СправочникОбъект.МетодНачисленияРезерваНУ                 = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод;
		СправочникОбъект.НормативОтчисленийВРезервБУ              = Выборка.НормативОтчисленийВРезервОтпусков;
		Если СправочникОбъект.ФормироватьРезервНУ Тогда
			СправочникОбъект.НормативОтчисленийВРезервНУ              = Выборка.НормативОтчисленийВРезервОтпусков;
			СправочникОбъект.ПредельнаяВеличинаОтчисленийВРезервНУ    = Выборка.ПредельнаяВеличинаОтчисленийВРезервОтпусков;
			СправочникОбъект.ОграничиватьНачислениеПредельнойСуммойНУ = Истина;
		КонецЕсли;
		СправочникОбъект.ИспользоватьНастройкиГоловнойОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Организация, "ОбособленноеПодразделение");
		СправочникОбъект.Наименование                             = РезервыПоОплатеТруда.НаименованиеНастройки(СправочникОбъект);
		СправочникОбъект.ПолноеНаименование                       = РезервыПоОплатеТруда.ПолноеНаименованиеНастройки(СправочникОбъект);
		СправочникОбъект.ПериодВыплаты                            = НачалоГода(СправочникОбъект.НачалоПериода);
		
		Для Каждого СтрокаТаблицы Из ВидыОтпусков Цикл
			
			ОписаниеЭлемента = Новый Структура();
			ОписаниеЭлемента.Вставить("Организация",          Выборка.Организация);
			ОписаниеЭлемента.Вставить("Резерв",               РезервЕжегодныхОтпусков);
			ОписаниеЭлемента.Вставить("ВидРасчета",           СтрокаТаблицы.Ссылка);
			ОписаниеЭлемента.Вставить("ЭтоРасчетОтпуска",     Истина);
			
			ВидРасчетаРезерва = Справочники.ВидыРасчетовРезервовПоОплатеТруда.СоздатьЭлементПоОписанию(ОписаниеЭлемента);
			
			НоваяСтрока = СправочникОбъект.ВидыРасчетовРезерва.Добавить();
			НоваяСтрока.ВидРасчетаРезерва = ВидРасчетаРезерва;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИсключенияИзРасчетнойБазы() Экспорт
	
	БазовыеНачисления = ОтражениеЗарплатыВБухучетеРасширенный.БазовыеНачисленияОплатаТруда();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазовыеНачисления", БазовыеНачисления);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.Ссылка В (&БазовыеНачисления)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыОграниченийРасчетаРезервовПоОплатеТруда() Экспорт
	
	Запрос = Новый Запрос;
	
	// 1. Настройка переоценки
	// Старое поведение - переоценка постоянно включена. Новое - переоценка опциональная.
	// Т.к. ранее всегда переоценка была включена - при обновлении во всех настройках включаем.
	// Контроль - если есть хоть одна настройка, которая говорит что текущее обновление выполнялось.
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.ОпределятьИзлишкиЕжемесячноБУ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.НормативОтчисленийВРезервНУ <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезервыПоОплатеТрудаНачисления.Ссылка
	|ИЗ
	|	Документ.РезервыПоОплатеТруда.Начисления КАК РезервыПоОплатеТрудаНачисления
	|ГДЕ
	|	РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезервНУ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НЕ НастройкиРасчетаРезервовПоОплатеТруда.ОпределятьИзлишкиЕжемесячноБУ
	|	И НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.МетодОбязательств)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[0].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ОпределятьИзлишкиЕжемесячноБУ = Истина;
				Если СправочникОбъект.МетодНачисленияРезерваБУ = СправочникОбъект.МетодНачисленияРезерваНУ Тогда
					СправочникОбъект.ОпределятьИзлишкиЕжемесячноНУ = Истина;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонСообщения = НСтр("ru = 'Не удалось обработать настройку расчета резервов ""%1"" (переоценка) по причине:
				|%2';
				|en = 'Не удалось обработать настройку расчета резервов ""%1"" (переоценка) по причине:
				|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Настройка нормативного метода
	// Исходный реквизит НормативОтчисленийВРезерв переименован в НормативОтчисленийВРезервБУ
	// поэтому его значения надо скопировать в НормативОтчисленийВРезервНУ.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.ФормироватьРезервНУ
	|	И НастройкиРасчетаРезервовПоОплатеТруда.НормативОтчисленийВРезервНУ = 0
	|	И НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ <> ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.МетодОбязательств)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.НормативОтчисленийВРезервНУ = СправочникОбъект.НормативОтчисленийВРезервБУ;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонСообщения = НСтр("ru = 'Не удалось обработать настройку расчета резервов ""%1"" (норматив) по причине:
				|%2';
				|en = 'Не удалось обработать настройку расчета резервов ""%1"" (норматив) по причине:
				|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	// 3. Настройка НУ как БУ
	// Исправляется возможная ошибочна синхронизация настроек.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.НалоговыйУчетПоНастройкамБухгалтерскогоУчета
	|	И НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ <> НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Если СправочникОбъект.ФормироватьРезервНУ Тогда
					СправочникОбъект.НалоговыйУчетПоНастройкамБухгалтерскогоУчета = Ложь;
					СправочникОбъект.МетодНачисленияРезерваНУ = Перечисления.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод;
				Иначе
					СправочникОбъект.МетодНачисленияРезерваНУ = СправочникОбъект.МетодНачисленияРезерваБУ;
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонСообщения = НСтр("ru = 'Не удалось обработать настройку расчета резервов ""%1"" (НУ как БУ) по причине:
				|%2';
				|en = 'Не удалось обработать настройку расчета резервов ""%1"" (НУ как БУ) по причине:
				|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					Выборка.Ссылка,
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНУДокументаРезервыПоОплатеТруда(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаРезервовПоОплатеТруда.Организация КАК Организация,
	|	НастройкиРасчетаРезервовПоОплатеТруда.Резерв КАК Резерв,
	|	НастройкиРасчетаРезервовПоОплатеТруда.НачалоПериода КАК НачалоПериода,
	|	НастройкиРасчетаРезервовПоОплатеТруда.КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	Справочник.НастройкиРасчетаРезервовПоОплатеТруда КАК НастройкиРасчетаРезервовПоОплатеТруда
	|ГДЕ
	|	НастройкиРасчетаРезервовПоОплатеТруда.ФормироватьРезервНУ
	|	И (НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваНУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод)
	|			ИЛИ НастройкиРасчетаРезервовПоОплатеТруда.НалоговыйУчетПоНастройкамБухгалтерскогоУчета
	|				И НастройкиРасчетаРезервовПоОплатеТруда.МетодНачисленияРезерваБУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияРезервовПоОплатеТруда.НормативныйМетод))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыПоОплатеТруда.Ссылка КАК Ссылка,
	|	ВТ_Настройки.Резерв КАК Резерв
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.РезервыПоОплатеТруда КАК РезервыПоОплатеТруда
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Настройки КАК ВТ_Настройки
	|		ПО РезервыПоОплатеТруда.Организация = ВТ_Настройки.Организация
	|			И РезервыПоОплатеТруда.Резерв = ВТ_Настройки.Резерв
	|			И (НАЧАЛОПЕРИОДА(РезервыПоОплатеТруда.МесяцНачисления, ГОД) = НАЧАЛОПЕРИОДА(ВТ_Настройки.НачалоПериода, ГОД))
	|ГДЕ
	|	РезервыПоОплатеТруда.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРезервовПоОплатеТруда.Начисление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыПоОплатеТрудаНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыДляОбработки
	|ИЗ
	|	Документ.РезервыПоОплатеТруда.Начисления КАК РезервыПоОплатеТрудаНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РезервыПоОплатеТрудаНачисления.Ссылка = ВТ_Документы.Ссылка
	|ГДЕ
	|	РезервыПоОплатеТрудаНачисления.РезультатНУ <> 0
	|	И РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезервНУ = 0
	|	И РезервыПоОплатеТрудаНачисления.НормативОтчисленийВРезерв <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыПоОплатеТрудаНачисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ВТ_ДокументыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ДокументыДляОбработки КАК ВТ_ДокументыДляОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.РезервыПоОплатеТруда", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаДокумента Из ДокументОбъект.Начисления Цикл
			Если СтрокаДокумента.НормативОтчисленийВРезервНУ = 0 Тогда
				СтрокаДокумента.НормативОтчисленийВРезервНУ = СтрокаДокумента.НормативОтчисленийВРезерв;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаДокумента Из ДокументОбъект.Взносы Цикл
			Если СтрокаДокумента.НормативОтчисленийВРезервСтраховыеВзносыНУ = 0 Тогда
				СтрокаДокумента.НормативОтчисленийВРезервСтраховыеВзносыНУ = СтрокаДокумента.НормативОтчисленийВРезервСтраховыеВзносы;
			КонецЕсли;
			Если СтрокаДокумента.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ = 0 Тогда
				СтрокаДокумента.НормативОтчисленийВРезервФССНесчастныеСлучаиНУ = СтрокаДокумента.НормативОтчисленийВРезервФССНесчастныеСлучаи;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаПроверкиЗаполненияРезервовПоОплатеТруда(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	РезервыПоОплатеТрудаБазовый.ОбработкаПроверкиЗаполненияРезервовПоОплатеТруда(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверятьМестоВСтруктуреПредприятия = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		ПроверятьМестоВСтруктуреПредприятия = МодульОрганизационнаяСтруктура.СтруктураПредприятияИспользуетсяДляОтраженияЗарплатыВРегламентированномУчете();
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ОценочныеОбязательстваПоСотрудникам.МестоВСтруктуреПредприятия");
	Если НЕ ПроверятьМестоВСтруктуреПредприятия Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ОценочныеОбязательства.МестоВСтруктуреПредприятия");
	Иначе
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ОценочныеОбязательстваПоСотрудникам Цикл
			Если НЕ СтрокаТаблицы.КорректировкаОбязательств
				И НЕ ЗначениеЗаполнено(СтрокаТаблицы.МестоВСтруктуреПредприятия) Тогда
				
				Префикс = "ОценочныеОбязательстваПоСотрудникам[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Место в структуре предприятия"" в строке %1 списка "" Обязательства и резервы по сотрудникам""';
						|en = 'Не заполнена колонка ""Место в структуре предприятия"" в строке %1 списка "" Обязательства и резервы по сотрудникам""'"),
				СтрокаТаблицы.НомерСтроки);
				Поле = Префикс + "МестоВСтруктуреПредприятия";
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокСотрудниковРанеееУволенными(СотрудникиДляНачислений, Организация, Подразделение, Резерв, Период, ДокументСсылка) Экспорт
	
	КонецПериода = КонецМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Резерв",         Резерв);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период",         Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("Регистратор",    ДокументСсылка);
	Запрос.УстановитьПараметр("Сотрудники",     СотрудникиДляНачислений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОстатки.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Резерв = &Резерв
	|				И НЕ Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Сотрудник
	|ИЗ
	|	РегистрНакопления.ОценочныеОбязательстваПоСотрудникам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И Резерв = &Резерв
	|				И НЕ Сотрудник В (&Сотрудники)) КАК ОценочныеОбязательстваПоСотрудникамОбороты
	|ГДЕ
	|	ОценочныеОбязательстваПоСотрудникамОбороты.Регистратор = &Регистратор";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь,
		ОбщегоНазначения.ВыгрузитьКолонку(Результат.Выгрузить(), "Сотрудник", Истина),
		"ГоловнаяОрганизация,Организация,Подразделение,ДатаУвольнения");
		
	Для Каждого СтрокаТаблицы Из КадровыеДанныеСотрудников Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаУвольнения)
			Или (ЗначениеЗаполнено(СтрокаТаблицы.ДатаУвольнения)
			И КонецМесяца(СтрокаТаблицы.ДатаУвольнения) > КонецПериода) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Подразделение)
			И СтрокаТаблицы.Подразделение <> Подразделение Тогда
			Продолжить;
		КонецЕсли;
		СотрудникиДляНачислений.Добавить(СтрокаТаблицы.Сотрудник);
	КонецЦикла;
	
	СотрудникиДляНачислений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиДляНачислений);
	
КонецПроцедуры

#КонецОбласти
