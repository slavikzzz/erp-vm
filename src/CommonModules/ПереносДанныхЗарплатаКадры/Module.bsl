
#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

Процедура УстановитьДоступенПереносДанныхИзПрежнихПрограмм(НеВыполнятьНачальнуюНастройкуПрограммы = Неопределено) Экспорт
	
	ДоступенПереносДанныхИзПрежнихПрограмм = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		ДоступенПереносДанныхИзПрежнихПрограмм = Модуль.ДоступенПереносДанныхИзПрежнихПрограмм(НеВыполнятьНачальнуюНастройкуПрограммы);
	КонецЕсли;
	Константы.ДоступенПереносДанныхИзПрежнихПрограмм.Установить(ДоступенПереносДанныхИзПрежнихПрограмм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Методы, вызываемые из обработчиков событий конвертации

Процедура Конвертация_ПередЗагрузкойДанных(Параметры, ОбработкаОбъект) Экспорт

	// Инициализируем параметры, которые используются при загрузке данных и не передаются из ИБ источника.
	
	Параметры.Вставить("ТипыОбъектовСНастраиваемымПорядком", Метаданные.ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип.Типы());
	
	// Используются только при переносе из ЗУП, ЗБУ и V7.
	Параметры.Вставить("ОчередностьРасчетаВидовРасчетаУстановлена", Ложь);
	
	// Используются только при переносе из БП3.
	Параметры.Вставить("ОбновитьПВРПоНастройкам", Истина);
	Параметры.Вставить("ИспользованиеШтатногоРасписанияВыключено", Ложь);
	Параметры.Вставить("ВключитьИспользованиеШтатногоРасписания",  Ложь);
	
	// Обслуживание загрузки присоединенных файлов.
	Параметры.Вставить("ПутьКПрисоединеннымФайлам", "");
	Если ТипЗнч(ОбработкаОбъект.Данные) = Тип("Структура") И ОбработкаОбъект.Данные.Свойство("ПутьКПрисоединеннымФайлам") Тогда
		Параметры.ПутьКПрисоединеннымФайлам = ОбработкаОбъект.Данные.ПутьКПрисоединеннымФайлам;
	КонецЕсли;
	
	// Параметры для хранения загруженных объектов.
	Параметры.Вставить("ЗагруженныеФизическиеЛица", Новый Массив);
	Параметры.Вставить("ЗагруженныеСотрудники", 	Новый Массив);
	Параметры.Вставить("ЗагруженныеДолжности", 		Новый Массив);
	Параметры.Вставить("ЗагруженныеПодразделения", 	Новый Массив);
	Параметры.Вставить("ЗагруженныеПозиции", 		Новый Массив);
	Параметры.Вставить("ЗагруженныеЧерновики", 		Новый Массив);
	Параметры.Вставить("ЗагруженныеОбъекты", 		Новый Массив);
	
	ЗагруженныеЛицевыеСчетаСотрудников = Новый ТаблицаЗначений;
	ЗагруженныеЛицевыеСчетаСотрудников.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗагруженныеЛицевыеСчетаСотрудников.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗагруженныеЛицевыеСчетаСотрудников.Колонки.Добавить("МестоВыплаты", 	Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты"));
	Параметры.Вставить("ЗагруженныеЛицевыеСчетаСотрудников", ЗагруженныеЛицевыеСчетаСотрудников);
	
	// При загрузке сотрудников контроль уникальности ТН выключается, после загрузки
	// необходимо вернуть настройку в первоначальное значение.
	Параметры.Вставить("ВключитьУникальностьТабельныхНомеров", Ложь);  //Истина - при выгрузке сотрудников.
	Параметры.Вставить("КонтрольУникальностьТабельныхНомеровВыключен", Ложь);
	
	
	// Инициализируем параметры, которые могут передаваться из ИБ источника.
	// Значения переданных параметров будут установлены как Параметры.Вставить(Имя, Значение).
	
	// Используются только при переносе из ЗУП, ЗБУ и V7.
	Параметры.Вставить("ЗаполнитьДанныеУчетаСтажаПФР", 					Ложь);  // Истина - При выгрузке сведений о доходах для страховых взносов.
	Параметры.Вставить("ОбновитьДанныеСтажа", 							Ложь);  // Истина - При выгрузке стажа физических лиц.
	Параметры.Вставить("ОбновитьНастройкиШтатногоРасписания", 			Ложь);  // Истина - При выгрузке кадровых документов, включает ШР после загрузки.
	Параметры.Вставить("ОбновитьНастройкуПВР", 							Ложь);  // Истина - При выгрузке начислений, удержаний старой программы.
	Параметры.Вставить("ОбновитьСтруктуруШтатногоРасписания", 			Ложь);  // Истина - При выгрузке начальной штатной расстановки или "черновиков".
	Параметры.Вставить("ОбновитьТочностьПоказателей", 					Ложь);  // Истина - При выгрузке кадровых данных.
	Параметры.Вставить("ОбновитьУчетНДФЛ", 								Ложь);  // Истина - После выгрузки данных учета НДФЛ.
	Параметры.Вставить("ОбновитьУчетСтраховыхВзносов", 					Ложь);  // Истина - После переноса учета по страховым взносам.
	Параметры.Вставить("ПеренестиДанныеУчетаВремениВНовыеРегистры", 	Ложь);  // Истина - при выгрузке ДанныеУчетаРабочегоВремениВыгрузка.
	
	// Используются только при переносе из ЗУП, ЗБУ, БП и V7.
	Параметры.Вставить("СоздатьГрафикРаботыПятидневка", 				Ложь);  // Истина - После выгрузки Организаций.
	Параметры.Вставить("ОбновитьНастройкиПрограммы", 						0); // После выгрузки настроек программы, 2 - для РежимВыгрузки = 1, иначе 1.
	
	// Используются только при переносе из ЗУП, ЗБУ.
	Параметры.Вставить("ОбновитьУчетИсполнительныеДокументы", 			Ложь);  // Истина - При выгрузке исполнительных листов.
	Параметры.Вставить("ЗаполнитьМестаВыплатыЗарплатыСотрудников", 		Ложь);  // Истина - После выгрузки Сотрудников.
	Параметры.Вставить("ОбновитьВторичныеДанные",						Ложь);  // Истина - После загрузки всех данных.
	Параметры.Вставить("РежимВыгрузки");                                        // Число, соответствует режиму выгрузки из V8.
	
	// Используются только при переносе из ЗУП, ЗБУ, БП.
	Параметры.Вставить("ОбновитьВидыКонтактнойИнформации", 				Ложь);  // Истина - При выгрузке Организаций или Физических лиц.
	
	// Используются только при переносе из V7.
	Параметры.Вставить("ЗаполнитьРеквизитыПодчиненныхПодразделений", 	Ложь);
	Параметры.Вставить("ОбновитьГрафикиРаботыПоВидамВремени", 			Ложь);
	
	// Используются только при переносе из БП3.
	Параметры.Вставить("ЗаполнитьДанныеПослеКонвертации", Ложь);
	
	// Используются только при переносе из ЗУП КОРП.
	Параметры.Вставить("НовыеПозицииСотрудников", Новый Соответствие);
	Параметры.Вставить("ЗагруженныеКандидаты", Новый Массив);
	Параметры.Вставить("ОбновитьЭтапыРаботыКандидатов", Ложь);
	Параметры.Вставить("ОбновитьДанныеПоПодборуПерсонала", Ложь);
	Параметры.Вставить("ОбновитьНастройкиОхраныТруда", Ложь);
	
КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных(Параметры) Экспорт

	Если Параметры.ОбновитьВидыКонтактнойИнформации Тогда
		ОбновитьВидыКонтактнойИнформации();
	КонецЕсли;
	Если Параметры.ЗаполнитьДанныеУчетаСтажаПФР Тогда
		УчетСтажаПФРРасширенный.ЗаполнитьПервоначальныеДанныеУчета();
	КонецЕсли;
	Если Параметры.ОбновитьДанныеСтажа Тогда
		ОбновитьДанныеСтажа();	
	КонецЕсли;
	Если Параметры.ОбновитьНастройкиШтатногоРасписания Тогда
		ЗаписатьНастройкиШтатногоРасписания();
	КонецЕсли;
	Если Параметры.ОбновитьУчетИсполнительныеДокументы Тогда
		РасчетЗарплатыРасширенный.УточнитьРасходПоРегиструУдержанияДоПределаПоСотрудникам();
	КонецЕсли;
	Если Параметры.ОбновитьНастройкуПВР Тогда
		ОбновитьНастройкуПВР();
	КонецЕсли;
	Если Параметры.ОбновитьСтруктуруШтатногоРасписания Тогда
		ОбновитьКлассыУсловийТрудаВШтатномРасписании();
		Справочники.ШтатноеРасписание.ОбновитьСтруктуруШтатногоРасписанияПослеОбменаДанными();
	КонецЕсли;
	Если Параметры.ОбновитьТочностьПоказателей Тогда
		ОбновитьТочностьПоказателей();
	КонецЕсли;
	Если Параметры.ОбновитьУчетНДФЛ Тогда
		// не выполняем действия	
	КонецЕсли;
	Если Параметры.ОбновитьУчетСтраховыхВзносов Тогда
		ЗаполнитьСтраховыеВзносыПоФизическимЛицам();
		УчетСтраховыхВзносов.УстановитьФункциональныеОпцииИспользованияСтраховыхВзносовПоКлассамУсловийТруда();
	КонецЕсли;
	Если Параметры.ПеренестиДанныеУчетаВремениВНовыеРегистры Тогда
		УчетРабочегоВремениРасширенный.ПеренестиДанныеУчетаВремениВНовыеРегистры();
	КонецЕсли;
	Если Параметры.СоздатьГрафикРаботыПятидневка Тогда
		УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();
	КонецЕсли;
	Если Параметры.ВключитьУникальностьТабельныхНомеров Тогда
		ВключитьКонтрольУникальностиТабельныхНомеров();
	КонецЕсли;
	Если Параметры.ЗаполнитьМестаВыплатыЗарплатыСотрудников Тогда
		ЗаполнитьМестаВыплатыЗарплатыСотрудников(Параметры);
	КонецЕсли;
	Если Параметры.ОбновитьНастройкиПрограммы <> 0 Тогда
		ВыполнитьОбновлениеНастроекПрограммы(Параметры.ОбновитьНастройкиПрограммы);
	КонецЕсли;
	Если Параметры.ОбновитьВторичныеДанные Тогда
		ОбновитьВторичныеДанные();
	КонецЕсли;
	
	// V7
	Если Параметры.ЗаполнитьРеквизитыПодчиненныхПодразделений Тогда
		ЗаполнитьРеквизитыПодчиненныхПодразделений();
	КонецЕсли;
	Если Параметры.ОбновитьГрафикиРаботыПоВидамВремени Тогда
		ГрафикиРаботыПоВидамВремениОбновитьДанные();
	КонецЕсли;
	
	// БП3
	Если Параметры.ВключитьИспользованиеШтатногоРасписания Тогда
		ЗаписатьНастройкиШтатногоРасписания();
	КонецЕсли;
	Если Параметры.ЗаполнитьДанныеПослеКонвертации Тогда
		ЗаполнитьДанныеПослеКонвертации(Параметры);
	КонецЕсли;
	
	Если Параметры.РежимВыгрузки = 3 Тогда
		ЗаполнитьКоллекциюЗагруженныхОбъектов(Параметры);
	КонецЕсли;
	
	// КОРП
	Если Параметры.ОбновитьДанныеПоПодборуПерсонала Тогда
		ОбновитьДанныеПоПодборуПерсонала(Параметры);
	КонецЕсли;
	
	Если Параметры.ОбновитьЭтапыРаботыКандидатов Тогда
		ОбновитьЭтапыРаботыКандидатов(Параметры);
	КонецЕсли;
	
	Если Параметры.ОбновитьНастройкиОхраныТруда Тогда
		ОбновитьНастройкиОхраныТруда(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура Конвертация_ПередЗагрузкойДанных_БП(Параметры) Экспорт

	УчетРабочегоВремениРасширенный.СоздатьГрафикРаботыПятидневка();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Методы, вызываемые из обработчиков правил: "После загрузки", "При загрузке" и т.д..

Процедура Объект_ПослеЗагрузки(Объект, Параметры) Экспорт
	
	Если Параметры.ТипыОбъектовСНастраиваемымПорядком.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		ЗаполнитьРеквизитУпорядочивания(Объект);
	КонецЕсли;
	Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	
КонецПроцедуры

Процедура Начисления_ПослеЗагрузки(Объект) Экспорт
	
	СвойстваПоКатегориям	= ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	СвойстваНачисления		= СвойстваПоКатегориям.Получить(Объект.КатегорияНачисленияИлиНеоплаченногоВремени);
	
	ВыполнятьАлгоритм = Истина;
	
	Если СвойстваНачисления = Неопределено Тогда
		// если не нашлось для соответствующей категории используем свойства по умолчанию
		СвойстваНачисления = СвойстваПоКатегориям.Получить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(Объект, СвойстваНачисления, , "СреднийЗаработокОбщий");
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	// Если категория определена, то свойства, которые она определяет недоступны для изменения пользователем.
	Если ВыполнятьАлгоритм И Не ЗначениеЗаполнено(Объект.КатегорияНачисленияИлиНеоплаченногоВремени) Тогда
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	// Поля структуры свойств, которые не являются непосредственно свойствами ПВР, 
	// но содержат инструкции и/или другие сведения о категории начисления.
	Если ВыполнятьАлгоритм Тогда
		
		Инструкции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваНачисления.ИменаИнструкций);
		НедоступныеСвойства = СвойстваНачисления.НедоступныеСвойства;
		
		Если Объект.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда") Тогда 
			Если Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета") Тогда 
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "СреднийЗаработокОбщий");
			Иначе 
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НедоступныеСвойства, "ВидВремени");
			КонецЕсли;
		КонецЕсли;
		
		Объект.СреднийЗаработокФСС.Очистить();
		
		Для Каждого КлючИЗначение Из СвойстваНачисления Цикл
			ИмяСвойства = КлючИЗначение.Ключ;
			Если Инструкции.Найти(ИмяСвойства) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ИмяСвойства = "СреднийЗаработокОбщий" Тогда
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокОбщий" Тогда
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокФСС" Тогда
				
				Если КлючИЗначение.Значение Тогда
					НоваяСтрока = Объект.СреднийЗаработокФСС.Добавить();
					НоваяСтрока.ПорядокРасчета	= Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
					НоваяСтрока.Значение		= Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "ВключатьВСреднийЗаработокФСС2010" Тогда
				
				ВключатьВСреднийЗаработокФСС = КлючИЗначение.Значение;
				Если ВключатьВСреднийЗаработокФСС = Неопределено Тогда
					ВключатьВСреднийЗаработокФСС = СвойстваНачисления.ВключатьВСреднийЗаработокФСС;	
				КонецЕсли;
				
				Если ВключатьВСреднийЗаработокФСС Тогда
					НоваяСтрока = Объект.СреднийЗаработокФСС.Добавить();
					НоваяСтрока.ПорядокРасчета	= Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010;
					НоваяСтрока.Значение		= Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
				КонецЕсли
				
			ИначеЕсли ИмяСвойства = "ПериодРасчетаБазовыхНачислений" Тогда
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
				КонецЕсли;
				
			ИначеЕсли ИмяСвойства = "ИндексируетсяСреднийЗаработокОбщий" Тогда
				
			ИначеЕсли НедоступныеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
				// Недоступные свойства пользователь изменять не может
				Объект[ИмяСвойства] = КлючИЗначение.Значение;
				
			ИначеЕсли (ИмяСвойства = "КодДоходаНДФЛ") И (ИмяСвойства = "ВидНачисленияДляНУ") Тогда
				// Эти свойства всегда переносятся, если они не находятся в списке недоступных
				
			Иначе
				// Остальные заполняются только если не заполнены в старой программе
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если (Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете")
		Или Объект.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете"))
		И Объект.КатегорияНачисленияИлиНеоплаченногоВремени <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет
		И Объект.КатегорияНачисленияИлиНеоплаченногоВремени <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет Тогда
		Объект.ВключатьВФОТ = Истина;
	КонецЕсли;
	
	ФОТНеРедактируется = РасчетЗарплатыРасширенный.ФОТРассчитываетсяАвтоматически(Объект);
	Если ФОТНеРедактируется <> Объект.ФОТНеРедактируется Тогда
		Если ФОТНеРедактируется = Неопределено Тогда
			Объект.ФОТНеРедактируется = Ложь;
		Иначе
			Объект.ФОТНеРедактируется = ФОТНеРедактируется;	
		КонецЕсли;	
	КонецЕсли;
	
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если Не СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеПоказатели.Добавить(СтрокаПоказателя.Показатель.Идентификатор);
	КонецЦикла;
	
	Объект.Показатели.Очистить();
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Неопределено);
	
	БазовыеВидыРасчета = Объект.БазовыеВидыРасчета.Выгрузить();
	БазовыеВидыРасчета.Свернуть("ВидРасчета");
	Объект.БазовыеВидыРасчета.Загрузить(БазовыеВидыРасчета);
	
	Если ЗапрашиваемыеПоказатели.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(Объект, ЗапрашиваемыеПоказатели);
		
	Иначе
		Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
			ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(Объект.ФормулаРасчета);
		Иначе
			ПоказателиФормулы = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(Объект.СпособРасчета);
		КонецЕсли;
		ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(Объект.Ссылка, ПоказателиФормулы);
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Объект.Показатели);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КатегорияДохода) Тогда
		Объект.КатегорияДохода = УчетНДФЛПовтИсп.КатегорияДоходаПоЕгоКоду(Объект.КодДоходаНДФЛ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура Удержания_ПослеЗагрузки(Объект) Экспорт
	
	БР = Объект.БазовыеВидыРасчета.Выгрузить();
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаТЗ Из БР Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидРасчета) Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		ИначеЕсли СтрокаТЗ.ВидРасчета.ПолучитьОбъект() = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
		БР.Удалить(СтрокаТЗ);
	КонецЦикла;
	Объект.БазовыеВидыРасчета.Загрузить(БР);
	
	СвойстваПоКатегориям	= ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	СвойстваУдержания		= СвойстваПоКатегориям.Получить(Объект.КатегорияУдержания);
	
	ВыполнятьАлгоритм = Истина;
	
	Если СвойстваУдержания = Неопределено Тогда
		// если не нашлось для соответствующей категории используем свойства по умолчанию
		СвойстваУдержания = СвойстваПоКатегориям.Получить(Перечисления.КатегорииУдержаний.ПустаяСсылка());
		ВыполнятьАлгоритм = Ложь;
	КонецЕсли;
	
	Если ВыполнятьАлгоритм Тогда
		
		Инструкции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваУдержания.ИменаИнструкций);
		НедоступныеСвойства = СвойстваУдержания.НедоступныеСвойства;
		
		Для Каждого КлючИЗначение Из СвойстваУдержания Цикл
			ИмяСвойства = КлючИЗначение.Ключ;
			Если Инструкции.Найти(ИмяСвойства) <> Неопределено Тогда
				Если ИмяСвойства = "ДополнениеРасчетнойБазы" И КлючИЗначение.Значение Тогда 
					ПланыВидовРасчета.Удержания.ЗаполнитьПрочиеБазовыеДоходыУдержания(Объект);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если НедоступныеСвойства.Найти(ИмяСвойства) <> Неопределено Тогда
				// Недоступные свойства пользователь изменять не может
				Объект[ИмяСвойства] = КлючИЗначение.Значение;
				
			Иначе
				// Остальные заполняются только если не заполнены в старой программе
				Если Не ЗначениеЗаполнено(Объект[ИмяСвойства]) Тогда
					Объект[ИмяСвойства] = КлючИЗначение.Значение;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	Для Каждого СтрокаПоказателя Из Объект.Показатели Цикл
		Если Не СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
			Продолжить;
		КонецЕсли;
		ЗапрашиваемыеПоказатели.Добавить(СтрокаПоказателя.Показатель.Идентификатор);
	КонецЦикла;
	
	Объект.Показатели.Очистить();
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Неопределено);
	
	// Определяем нужна ли сама настройка (есть ли показатель среднего заработка)
	ЕстьПоказателиСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ЕстьПоказателиОбщегоСреднегоЗаработка(Объект.Показатели);
	Если ЕстьПоказателиСреднегоЗаработка Тогда
		Если Не ЗначениеЗаполнено(Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка) Тогда
			Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
		КонецЕсли;
		
		// Определяем доступность ввода произвольного периода
		ДоступностьВвода = Объект.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору;
		
		Если Не ДоступностьВвода Тогда
			Объект.КоличествоМесяцевРасчетаСреднегоЗаработка = 12;
		КонецЕсли;
	КонецЕсли;
	
	БазовыеВидыРасчета = Объект.БазовыеВидыРасчета.Выгрузить();
	БазовыеВидыРасчета.Свернуть("ВидРасчета");
	Объект.БазовыеВидыРасчета.Загрузить(БазовыеВидыРасчета);
	
	Если ЗапрашиваемыеПоказатели.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(Объект, ЗапрашиваемыеПоказатели);
		
	Иначе
		Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(Объект.СпособРасчета) Тогда
			ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(Объект.ФормулаРасчета);
		Иначе
			ПоказателиФормулы = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(Объект.СпособРасчета);
		КонецЕсли;
		ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(Объект.Ссылка, ПоказателиФормулы);
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, Объект.Показатели);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура Регистр_ПослеЗагрузки(НаборЗаписей, ОбъектМодифицирован) Экспорт
	
	ОбъектМодифицирован = Ложь;
	НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	
КонецПроцедуры

Процедура ДокументПереносДанных_ПриЗагрузке(Объект, СписокРегистров) Экспорт
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	
	Для Каждого ИмяРегистра Из СписокРегистров Цикл
		Если Объект.ТаблицаРегистров.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
			Объект.ТаблицаРегистров.Добавить().Имя = ИмяРегистра;
		КонецЕсли;
		Объект.Движения[ИмяРегистра].ОбменДанными.Загрузка	= Истина;
		Если ИмяРегистра = "ПлановыеНачисленияПоДоговорам" Или ИмяРегистра = "Начисления" Или ИмяРегистра = "ДанныеТабельногоУчетаРабочегоВремениСотрудников" Тогда
		Иначе	
			Объект.Движения[ИмяРегистра].ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		КонецЕсли;
	КонецЦикла;
	
	Объект.Заполнить(Неопределено);
	
КонецПроцедуры

Процедура ДокументПереносДанных_ПослеЗагрузки(ПараметрыОбъекта, Объект, СписокРегистров) Экспорт
	
	Если ПараметрыОбъекта <> Неопределено И ПараметрыОбъекта.Получить("ИмяРегистра") <> Неопределено Тогда
		ИмяРегистра = ПараметрыОбъекта["ИмяРегистра"];
		СписокРегистров = Новый Массив;
		СписокРегистров.Добавить(ИмяРегистра);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДатаСеанса();
	Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	
	Для Каждого ИмяРегистра Из СписокРегистров Цикл
		Если Объект.ТаблицаРегистров.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
			Объект.ТаблицаРегистров.Добавить().Имя = ИмяРегистра;
		КонецЕсли;
		Объект.Движения[ИмяРегистра].ОбменДанными.Загрузка	= Истина;
		Если ИмяРегистра = "ПлановыеНачисленияПоДоговорам" Или ИмяРегистра = "Начисления" Или ИмяРегистра = "ДанныеТабельногоУчетаРабочегоВремениСотрудников" Тогда
		Иначе	
			Объект.Движения[ИмяРегистра].ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		КонецЕсли;
	КонецЦикла;
	Объект.Заполнить(Неопределено);
	
КонецПроцедуры

Процедура ЗагрузитьФотографиюФизическогоЛица(Объект, ПараметрыОбъекта, Параметры) Экспорт
	
	Если БезопасныйРежим() <> Ложь Тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЕсли;
	
	ИмяВременногоФайла 		= ПараметрыОбъекта["ИмяВременногоФайла"];
	ХешСуммаФайла 			= ПараметрыОбъекта["ХешСуммаФайла"];
	
	ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Параметры.ПутьКПрисоединеннымФайлам, ИмяВременногоФайла);
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.ДобавитьФайл(ПолноеИмяВременногоФайла);
	
	Если ХешСуммаФайла = ХешированиеДанных.ХешСумма Тогда
		
		НаборЗаписей = РегистрыСведений.ФотографииФизическихЛиц.СоздатьНаборЗаписей();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ФизическоеЛицо = Объект.Ссылка;
		НоваяЗапись.Фотография = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяВременногоФайла));
		
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Объект.Ссылка);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьФайлыОбъекта(Объект, ПараметрыОбъекта, Параметры) Экспорт
	
	Если БезопасныйРежим() <> Ложь Тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЕсли;
	
	ФайлыОбъекта = Новый Массив;
	ХешФайловОбъекта = Новый Соответствие();
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, ФайлыОбъекта);
	Для каждого ПрисоединенныйФайл Из ФайлыОбъекта Цикл
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
		ХешФайловОбъекта.Вставить(ХешированиеДанных.ХешСумма, ПрисоединенныйФайл);
	КонецЦикла;
	
	ТаблицаФайлов = ПараметрыОбъекта["ДополнительныеРеквизитыТабличнаяЧасть"];
	Для каждого СтрокаТЗ Из ТаблицаФайлов Цикл
		
		ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Параметры.ПутьКПрисоединеннымФайлам, СтрокаТЗ.ИмяВременногоФайла);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешированиеДанных.ДобавитьФайл(ПолноеИмяВременногоФайла);
		
		Если СтрокаТЗ.ХешСуммаФайла = ХешированиеДанных.ХешСумма Тогда
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяВременногоФайла);
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
			ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
			Если ХешФайловОбъекта[ХешированиеДанных.ХешСумма]<> Неопределено Тогда
				// файл уже загружен
				Продолжить;
			КонецЕсли;
			
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор",     Неопределено);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Дата(0001,1,1));
			ПараметрыФайла.Вставить("ВладелецФайлов",     Объект.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения",   СтрокаТЗ.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", СтрокаТЗ.РасширениеБезТочки);
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
			
			УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВходящийФайлИзвещениеФСС(Объект, ПараметрыОбъекта, Параметры) Экспорт
	
	Если БезопасныйРежим() <> Ложь Тогда
		УстановитьОтключениеБезопасногоРежима(Истина);
	КонецЕсли;
	
	ФайлыОбъекта = Новый Массив;
	ХешФайловОбъекта = Новый Соответствие();
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, ФайлыОбъекта);
	Для каждого ПрисоединенныйФайл Из ФайлыОбъекта Цикл
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
		ХешФайловОбъекта.Вставить(ХешированиеДанных.ХешСумма, ПрисоединенныйФайл);
	КонецЦикла;
	
	ТаблицаФайлов = ПараметрыОбъекта["ДополнительныеРеквизитыТабличнаяЧасть"];
	Для каждого СтрокаТЗ Из ТаблицаФайлов Цикл
		
		ПолноеИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Параметры.ПутьКПрисоединеннымФайлам, СтрокаТЗ.ИмяВременногоФайла);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
		ХешированиеДанных.ДобавитьФайл(ПолноеИмяВременногоФайла);
		
		Если СтрокаТЗ.ХешСуммаФайла = ХешированиеДанных.ХешСумма Тогда
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяВременногоФайла);
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
			ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
			Если ХешФайловОбъекта[ХешированиеДанных.ХешСумма]<> Неопределено Тогда
				// файл уже загружен
				Продолжить;
			КонецЕсли;
			
			АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор",     Неопределено);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Дата(0001,1,1));
			ПараметрыФайла.Вставить("ВладелецФайлов",     Объект.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения",   СтрокаТЗ.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", СтрокаТЗ.РасширениеБезТочки);
			
			ВходящийФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
			Объект.ВходящийФайл = ВходящийФайл;
			
			УдалитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиПрограммыКонстанты_ПослеЗагрузки(Объект, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.НастройкиПрограммыКонстанты_ПослеЗагрузки(Объект);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТекущиеКадровыеДанныеСотрудников_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт

	Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.ГоловнаяОрганизация.Установить(НаборЗаписей[0].ГоловнаяОрганизация);
	Набор.Отбор.ФизическоеЛицо.Установить(НаборЗаписей[0].ФизическоеЛицо);
	Набор.Отбор.Сотрудник.Установить(НаборЗаписей[0].Сотрудник);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Тогда
		Набор[0].ДатаПриема = НаборЗаписей[0].ДатаПриема;
		Набор.Записать();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроцентыСевернойНадбавкиФЛ_Преобразовать(ПараметрыОбъекта, Объект) Экспорт
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		
		ФизическоеЛицо			= Объект.ФизическоеЛицо;
		ТаблицаПроцентовСН		= ЗначениеИзСтрокиВнутр(ПараметрыОбъекта.Получить("ТаблицаПроцентовСН"));
		
		// Создаем набор записей СН по Физлицу.
		НаборЗаписейДанныхОПроцентеСН = РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписейДанныхОПроцентеСН.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицо);
		
		Для каждого СтрокаТП Из ТаблицаПроцентовСН Цикл
			
			// Удаляем все записи с периодом больше текущего
			МассивУдаляемыхЗаписей = Новый Массив;
			Для Каждого Запись Из НаборЗаписейДанныхОПроцентеСН Цикл
				Если Запись.Период >= СтрокаТП.Период  Тогда
					МассивУдаляемыхЗаписей.Добавить(Запись);
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Запись Из МассивУдаляемыхЗаписей Цикл
				НаборЗаписейДанныхОПроцентеСН.Удалить(Запись);
			КонецЦикла;
			
			// Формируем текущую запись регистра
			НоваяЗапись = НаборЗаписейДанныхОПроцентеСН.Добавить();
			НоваяЗапись.ФизическоеЛицо 						= ФизическоеЛицо;
			НоваяЗапись.Период 								= СтрокаТП.Период;
			НоваяЗапись.ПроцентСевернойНадбавки 			= СтрокаТП.Процент;
			
			// Получаем массив изменений процента СевернойНадбавки.
			ПорядокНачисления 		= СтрокаТП.ПорядокИсчисленияПроцентаСевернойНадбавки;
			ПроцентНадбавки 		= СтрокаТП.Процент; 
			Период 					= СтрокаТП.Период;
			
			МассивПериодов = Новый Массив;
			
			// Рассчитываем проценты северного стажа
			ОписаниеШкалы = Перечисления.ПорядокНачисленияСеверныхНадбавок.ОписаниеШкалыПоПорядкуНачисления(ПорядокНачисления);
			Для каждого УчастокШкалы Из ОписаниеШкалы Цикл
				Пока ПроцентНадбавки < УчастокШкалы.Ограничение Цикл
					Период = ДобавитьМесяц(Период, УчастокШкалы.РазмерПериода);
					ПроцентНадбавки = Мин(ПроцентНадбавки + УчастокШкалы.РазмерПрироста, УчастокШкалы.Ограничение);
					Элемент = Новый Структура("Период, Процент", Период, ПроцентНадбавки);
					МассивПериодов.Добавить(Элемент);
				КонецЦикла;
			КонецЦикла;
			МассивИзмененийПроцента = МассивПериодов;
			
			// Формируем новые записи регистра.								
			Для каждого Элемент Из МассивИзмененийПроцента Цикл
				НоваяЗапись = НаборЗаписейДанныхОПроцентеСН.Добавить();
				НоваяЗапись.ФизическоеЛицо 						= ФизическоеЛицо;
				НоваяЗапись.Период 								= Элемент.Период;
				НоваяЗапись.ПроцентСевернойНадбавки 			= Элемент.Процент;
			КонецЦикла;
		КонецЦикла;
		
		// Записываем набор.
		НаборЗаписейДанныхОПроцентеСН.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПоказателиПоследовательностьПолейПоиска(СвойстваПоиска, СсылкаНаОбъект) Экспорт
	
	Идентификатор = СвойстваПоиска.Получить("Идентификатор");
	ЗаписыватьПоказатель = Ложь;
	ОписаниеПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеПоказателя();
	
	Если Идентификатор = "НормаЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаЧасов";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма часов';
												|en = 'Normal working hours'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма (час.)';
														|en = 'Standard (h)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВДнях" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВДнях";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в днях';
												|en = 'Time in days'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "КалендарныеДни" Тогда
		
		ОписаниеПоказателя.Идентификатор = "КалендарныеДни";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Календарные дни';
												|en = 'Calendar days'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Календ. дн.';
														|en = 'Calend. days'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВЧасах" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в часах';
												|en = 'Time in hours'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "КалендарныеДниМесяца" Тогда
		
		ОписаниеПоказателя.Идентификатор = "КалендарныеДниМесяца";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Календарные дни месяца';
												|en = 'Calendar days of the month'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Календ. дн. (мес)';
														|en = 'Calend. days (months)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "НормаДнейПоГрафикуПолногоРабочегоВремени" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаДнейПоГрафикуПолногоРабочегоВремени";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВДнях";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма дней по графику полного рабочего времени';
												|en = 'Normal workdays according to full-time work schedule '");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма дн. полн.граф.';
														|en = 'Normal workdays complete schedule'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "НормаЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "НормаЧасов";
		ОписаниеПоказателя.ИмяПредопределенныхДанных = "НормаВремениВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Норма часов';
												|en = 'Normal working hours'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Норма (час.)';
														|en = 'Standard (h)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "Оклад" Тогда
		
		ОписаниеПоказателя.Идентификатор = "Оклад";
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладЗаКлассныйЧин" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладЗаКлассныйЧин";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад за классный чин';
												|en = 'Base salary for civil service grade'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. классн. чин';
														|en = 'Base salary for civil service grade'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОтработаноДней" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОтработаноДней";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Отработано дней, в т.ч. сверхурочно';
												|en = 'Days worked (including overtime)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Отраб. (дни)';
														|en = 'Worked (d)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОтработаноЧасов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОтработаноЧасов";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Отработано часов, в т.ч. сверхурочно';
												|en = 'Hours worked (including overtime)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Отраб. (час.)';
														|en = 'Worked (h)'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РасчетнаяБаза" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РасчетнаяБаза";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Расчетная база';
												|en = 'Base'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Расч. база';
														|en = 'Calc. base'");
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ТарифнаяСтавкаДневная" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ТарифнаяСтавкаДневная";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Тарифная ставка (дневная)';
												|en = 'Tariff rate (daily)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Дневн. тариф';
														|en = 'Daily tariff'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ВремяВЧасах" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ВремяВЧасах";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Время в часах';
												|en = 'Time in hours'");
		ОписаниеПоказателя.ОтображатьВДокументахНачисления = Ложь;
		ОписаниеПоказателя.Точность = 3;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ТарифнаяСтавкаЧасовая" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ТарифнаяСтавкаЧасовая";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Тарифная ставка (часовая)';
												|en = 'Tariff rate (hourly)'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Час. тариф';
														|en = 'H. tariff'");
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "СдельныйЗаработок" Тогда
		
		ОписаниеПоказателя.Идентификатор = "СдельныйЗаработок";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Сдельный заработок';
												|en = 'Piecework earnings'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Сдельно';
														|en = 'By piece'");
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентНадбавкиЗаВредность" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентНадбавкиЗаВредность";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент надбавки за вредность';
												|en = 'Hazard pay percent'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% надб.';
														|en = 'stand. bonus %'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РайонныйКоэффициент" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РайонныйКоэффициент";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Районный коэффициент';
												|en = 'Regional factor'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Районн. коэфф.';
														|en = 'Regional. coeff.'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		ОписаниеПоказателя.Точность = 2;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "СевернаяНадбавка" Тогда
		
		ОписаниеПоказателя.Идентификатор = "СевернаяНадбавка";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Северная надбавка';
												|en = 'Northern allowance'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% сев. надб.';
														|en = 'North. allow. %'");
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладПоВоинскомуЗванию" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладПоВоинскомуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по воинскому званию';
												|en = 'Base salary by military rank'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'ОВЗ';
														|en = 'MRBS'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ОкладПоСпециальномуЗванию" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ОкладПоСпециальномуЗванию";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Оклад по специальному званию';
												|en = 'Base salary by special rank '");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Окл. по званию';
														|en = 'Base salary by rank'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.Денежный;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентДСВ" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентДСВ";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент добровольных страховых взносов';
												|en = 'Percent of voluntary insurance contributions'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% ДСВ';
														|en = 'DSV % '");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "ПроцентПрофсоюзныхВзносов" Тогда
		
		ОписаниеПоказателя.Идентификатор = "ПроцентПрофсоюзныхВзносов";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Процент профсоюзных взносов';
												|en = 'Percent of labor union contributions'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = '% профвзносов';
														|en = 'Union contribution %'");
		ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически = Ложь;
		ОписаниеПоказателя.Точность = 2;
		ОписаниеПоказателя.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		
		ЗаписыватьПоказатель = Истина;
		
	ИначеЕсли Идентификатор = "РасчетнаяБазаСтраховыеВзносы" Тогда
		
		ОписаниеПоказателя.Идентификатор = "РасчетнаяБазаСтраховыеВзносы";
		ОписаниеПоказателя.Наименование = НСтр("ru = 'Расчетная база страховых взносов';
												|en = 'Insurance contribution base'");
		ОписаниеПоказателя.КраткоеНаименование = НСтр("ru = 'Расч. база ДСВ';
														|en = 'DSV calculation base'");
		
		ЗаписыватьПоказатель = Истина;	
		
	КонецЕсли;
	
	Если ЗаписыватьПоказатель Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		СсылкаНаОбъект = Справочники.ПоказателиРасчетаЗарплаты.ЗаписатьПоказатель(ОписаниеПоказателя);
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ШтатноеРасписание_ПослеЗагрузки(Объект, ОбъектМодифицирован, Параметры) Экспорт

	Если Не Параметры.ОчередностьРасчетаВидовРасчетаУстановлена Тогда
		ОбновитьНастройкуПВР();
		Параметры.ОчередностьРасчетаВидовРасчетаУстановлена = Истина;	
	КонецЕсли;
	
	Справочники.ШтатноеРасписание.РассчитатьФОТПозиции(Объект);
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеСтруктурыШтатногоРасписания(Объект);
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(Объект);
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеНастройкиПубликации(Объект);

КонецПроцедуры

Процедура ГрафикиРаботыСотрудников_ПриЗагрузке(Объект) Экспорт
	
	Если Объект <> Неопределено Тогда
		НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(Объект.Ссылка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыФизическихЛиц_ПослеЗагрузки(НаборЗаписей, Отказ, Параметры) Экспорт
	
	Если Параметры.РежимВыгрузки = 3 И Параметры.ЗагруженныеФизическиеЛица.Найти(НаборЗаписей[0].Физлицо) = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		Если Не ЗаписьНабора.ЯвляетсяДокументомУдостоверяющимЛичность Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийНаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
		ТекущийНаборЗаписей.Отбор.Физлицо.Установить(ЗаписьНабора.Физлицо);
		ТекущийНаборЗаписей.Отбор.Период.Установить(ЗаписьНабора.Период);
		ТекущийНаборЗаписей.Прочитать();
		
		ЗаписиКУдалению = Новый Массив;
		Для каждого ЗаписьТекущегоНабора Из ТекущийНаборЗаписей Цикл
			Если ЗаписьТекущегоНабора.ЯвляетсяДокументомУдостоверяющимЛичность Тогда
				ЗаписиКУдалению.Добавить(ЗаписьТекущегоНабора);
			КонецЕсли;
		КонецЦикла;
		Если ЗаписиКУдалению.Количество()>0 Тогда
			Для каждого ЗаписьТекущегоНабора Из ЗаписиКУдалению Цикл
				ТекущийНаборЗаписей.Удалить(ЗаписьТекущегоНабора);
			КонецЦикла;
			ТекущийНаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Регистр_ПослеЗагрузки(НаборЗаписей, Истина);

КонецПроцедуры

Процедура ЗаполнитьМестаВыплатыЗарплатыСотрудников(Параметры) Экспорт
	
	Если Параметры.ЗагруженныеЛицевыеСчетаСотрудников.Количество() > 0 И Параметры.ЗагруженныеСотрудники.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЛицевыеСчетаСотрудников", Параметры.ЗагруженныеЛицевыеСчетаСотрудников);
		Запрос.УстановитьПараметр("ЗагруженныеСотрудники", Параметры.ЗагруженныеСотрудники);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛицевыеСчетаСотрудников.Организация КАК Организация,
		|	ЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЛицевыеСчетаСотрудников.МестоВыплаты КАК МестоВыплаты
		|ПОМЕСТИТЬ ВТЛицевыеСчетаСотрудников
		|ИЗ
		|	&ЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТГоловныеОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЛицевыеСчетаСотрудников.МестоВыплаты КАК МестоВыплаты,
		|	ГоловныеОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТЛицевыеСчета
		|ИЗ
		|	ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГоловныеОрганизации КАК ГоловныеОрганизации
		|		ПО ЛицевыеСчетаСотрудников.Организация = ГоловныеОрганизации.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ЛицевыеСчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЛицевыеСчета.МестоВыплаты КАК МестоВыплаты,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект) КАК Вид
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчета КАК ЛицевыеСчета
		|		ПО Сотрудники.ФизическоеЛицо = ЛицевыеСчета.ФизическоеЛицо
		|			И Сотрудники.ГоловнаяОрганизация = ЛицевыеСчета.ГоловнаяОрганизация";
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		НаборЗаписей = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Очистить();
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛицевыеСчетаСотрудников_ПослеЗагрузки(НаборЗаписей, Параметры) Экспорт
	
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		НоваяСтрока = Параметры.ЗагруженныеЛицевыеСчетаСотрудников.Добавить();
		НоваяСтрока.ФизическоеЛицо 	= СтрокаНабора.ФизическоеЛицо;
		НоваяСтрока.Организация 	= СтрокаНабора.Организация;
		НоваяСтрока.МестоВыплаты 	= СтрокаНабора.ЗарплатныйПроект;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтветФСКН_ПриЗагрузке(Объект, ОбъектНайден) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ОтветФСКН_ПриЗагрузке(Объект, ОбъектНайден);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОстаткиОтпусковВведенныеВручную_ПослеЗагрузки(Объект) Экспорт
	
	Таб = Объект.Движения["НачальныеОстаткиОтпусков"].Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОстаткиОтпусков", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиОтпусков.Сотрудник КАК Сотрудник,
	|	ОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ОстаткиОтпусков.КоличествоДней КАК КоличествоДней,
	|	ОстаткиОтпусков.РабочийГодНачало КАК РабочийГодНачало,
	|	ОстаткиОтпусков.РабочийГодОкончание КАК РабочийГодОкончание,
	|	ОстаткиОтпусков.ДатаОстатка КАК ДатаОстатка
	|ПОМЕСТИТЬ ВТОстаткиОтпусков
	|ИЗ
	|	&ОстаткиОтпусков КАК ОстаткиОтпусков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОтпусков.Сотрудник КАК Сотрудник,
	|	ОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ОстаткиОтпусков.ДатаОстатка) КАК ДатаОстатка
	|ПОМЕСТИТЬ ВТДатыОстатков
	|ИЗ
	|	ВТОстаткиОтпусков КАК ОстаткиОтпусков
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиОтпусков.Сотрудник,
	|	ОстаткиОтпусков.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиОтпусков.Сотрудник КАК Сотрудник,
	|	ОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ОстаткиОтпусков.КоличествоДней КАК КоличествоДней,
	|	ОстаткиОтпусков.РабочийГодНачало КАК РабочийГодНачало,
	|	ОстаткиОтпусков.РабочийГодОкончание КАК РабочийГодОкончание,
	|	ДатыОстатков.ДатаОстатка КАК ДатаОстатка
	|ИЗ
	|	ВТОстаткиОтпусков КАК ОстаткиОтпусков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОстатков КАК ДатыОстатков
	|		ПО ОстаткиОтпусков.Сотрудник = ДатыОстатков.Сотрудник
	|			И ОстаткиОтпусков.ВидЕжегодногоОтпуска = ДатыОстатков.ВидЕжегодногоОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	
	Таб = Запрос.Выполнить().Выгрузить();
	Объект.Движения["НачальныеОстаткиОтпусков"].Очистить();
	Для каждого СтрокаТЗ Из Таб Цикл
		ЗаполнитьЗначенияСвойств(Объект.Движения["НачальныеОстаткиОтпусков"].Добавить(), СтрокаТЗ);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ФизическиеЛица_ПослеЗагрузки(Объект, ОбъектНайден, Отказ, Параметры) Экспорт
	
	Если Параметры.РежимВыгрузки = 3 Тогда
		
		Если ОбъектНайден Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СсылкаНаОбъект = Объект.Ссылка;
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
			Если СсылкаНаОбъект.Пустая() Тогда
				СсылкаНаОбъект = Справочники.ФизическиеЛица.ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
			КонецЕсли;
		КонецЕсли;
		Параметры.ЗагруженныеФизическиеЛица.Добавить(СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Сотрудники_ПослеЗагрузки(Объект, ОбъектНайден, Отказ, Параметры) Экспорт
	
	Если Параметры.РежимВыгрузки = 3 И ОбъектНайден Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.КонтрольУникальностьТабельныхНомеровВыключен Тогда
		ВыключитьКонтрольУникальностиТабельныхНомеров(Параметры);
	КонецЕсли;
		
	СсылкаНаОбъект = Объект.Ссылка;
	Если СсылкаНаОбъект.Пустая() Тогда
		СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Справочники.Сотрудники.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
		// Всегда передаем ссылку на объект, для обеспечения правильного заполнения поля - ГоловнойСотрудник.
		Объект.ДополнительныеСвойства.Вставить("СсылкаНового", СсылкаНаОбъект);
	КонецЕсли;
		
	Параметры.ЗагруженныеСотрудники.Добавить(СсылкаНаОбъект);
	
	Объект.ДополнительныеСвойства.Вставить("ОбновитьДанныеДляПодбораНового");
	
КонецПроцедуры

Процедура ДолжностиОрганизаций_ПослеЗагрузки(Объект, ОбъектНайден, Отказ, Параметры) Экспорт

	Если Параметры.РежимВыгрузки = 3 Тогда
		
		Если ОбъектНайден Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СсылкаНаОбъект = Объект.Ссылка;
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
			Если СсылкаНаОбъект.Пустая() Тогда
				СсылкаНаОбъект = Справочники.Должности.ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
			КонецЕсли;
		КонецЕсли;
		Параметры.ЗагруженныеДолжности.Добавить(СсылкаНаОбъект);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПодразделенияОрганизаций_ПослеЗагрузки(Объект, ОбъектНайден, Отказ, Параметры) Экспорт
	
	Если Параметры.РежимВыгрузки = 3 Тогда
		
		Если ОбъектНайден Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		СсылкаНаОбъект = Объект.Ссылка;
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
			Если СсылкаНаОбъект.Пустая() Тогда
				СсылкаНаОбъект = Справочники.ПодразделенияОрганизаций.ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
			КонецЕсли;
		КонецЕсли;
		Параметры.ЗагруженныеПодразделения.Добавить(СсылкаНаОбъект);
		
	Иначе
		
		БылРежимЗагрузки = Объект.ОбменДанными.Загрузка;
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		Объект.ОбменДанными.Загрузка = БылРежимЗагрузки;
		
	КонецЕсли;
	
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеСтруктурыШтатногоРасписания(Объект);
	Объект.ДополнительныеСвойства.Вставить("ОбновитьПодчиненностьПодразделенийОрганизаций", Истина);

КонецПроцедуры

Процедура ДоговорГПХ_ПослеЗагрузки(Объект) Экспорт

	КадровыйУчетРасширенный.УстановитьРольДоговорникСотруднику(Объект.Сотрудник);
	
КонецПроцедуры

Процедура ЗаписатьПровестиДокумент(Объект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("НеФормироватьПредварительныеПерерасчетыПриЗаписи", Истина);
	
	Объект.ПометкаУдаления = Ложь;
	Объект.Проведен = Ложь;
	Объект.Записать(РежимЗаписиДокумента.Запись);
	Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
	Попытка
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		СтрокаСообщения = НСтр("ru = 'Не удалось провести документ при переносе данных.
			|Описание ошибки: %1';
			|en = 'Cannot post the document when transferring data.
			|Error details: %1'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Перенос данных.Документ не проведен';
										|en = 'Data transfer.Document is not posted'",
			ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Объект.Метаданные(),
			Объект.Ссылка, СтрокаСообщения);
	КонецПопытки;
	Отказ = Истина;
	
КонецПроцедуры

Процедура ВидыОтпусков_ПослеЗагрузки(Объект) Экспорт

	Объект.ДополнительныеСвойства.Вставить("СоздаватьНачислениеОтпуска", Истина);
	Объект.ДополнительныеСвойства.Вставить("СоздаватьНачислениеКомпенсацииОтпуска", Истина);	

КонецПроцедуры

Процедура УтверждениеТарифнойСетки_ПослеЗагрузки(Объект, ОбъектНайден, Отказ) Экспорт

	Если Объект.Тарифы.Количество()=0 Тогда
		Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		
		Если Объект.Проведен Тогда
			Если Не ОбъектНайден Тогда
				Объект.Проведен = Ложь; 
			КонецЕсли;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЕсли;	
	
	Отказ = Истина;

КонецПроцедуры

Процедура НастройкиГосударственнойСлужбы_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастройкиГосударственнойСлужбы_ПослеЗагрузки(НаборЗаписей);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура НастройкиКадровогоУчета_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт

	Если НаборЗаписей.Количество() > 0 Тогда
		
		Настройка = РегистрыСведений.НастройкиКадровогоУчета.СоздатьНаборЗаписей();
		Настройка.Прочитать();
		Если Настройка.Количество() > 0 Тогда
			Настройка[0].ИспользоватьРаботуНаНеполнуюСтавку = НаборЗаписей[0].ИспользоватьРаботуНаНеполнуюСтавку;
			Настройка.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Иначе
			НоваяЗапись = Настройка.Добавить();
			НоваяЗапись.ИспользоватьРаботуНаНеполнуюСтавку = НаборЗаписей[0].ИспользоватьРаботуНаНеполнуюСтавку;
		КонецЕсли;
		
		Настройка.Записать();
		
	КонецЕсли;
	
	Отказ = Истина;	

КонецПроцедуры

Процедура НастройкиРасчетаЗарплаты_ПослеЗагрузки(НаборЗаписей, Отказ, ПараметрыОбъекта) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Настройка = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();  
		Настройка.Прочитать();
		Если Настройка.Количество() > 0 Тогда
			Настройка[0].ИспользоватьУчетВремениСотрудниковВЧасах = Настройка[0].ИспользоватьУчетВремениСотрудниковВЧасах Или НаборЗаписей[0].ИспользоватьУчетВремениСотрудниковВЧасах;
			Настройка[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = Настройка[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплаты Или НаборЗаписей[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
			Настройка[0].ИспользоватьКвалификационнуюНадбавку = Настройка[0].ИспользоватьКвалификационнуюНадбавку Или НаборЗаписей[0].ИспользоватьКвалификационнуюНадбавку;
			Настройка[0].ИспользоватьИндексациюЗаработка = Настройка[0].ИспользоватьИндексациюЗаработка Или НаборЗаписей[0].ИспользоватьИндексациюЗаработка;
		Иначе
			НоваяЗапись = Настройка.Добавить();
			НоваяЗапись.ИспользоватьУчетВремениСотрудниковВЧасах = НаборЗаписей[0].ИспользоватьУчетВремениСотрудниковВЧасах;
			НоваяЗапись.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты = НаборЗаписей[0].ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
			НоваяЗапись.ИспользоватьКвалификационнуюНадбавку = НаборЗаписей[0].ИспользоватьКвалификационнуюНадбавку;
			НоваяЗапись.ИспользоватьИндексациюЗаработка = НаборЗаписей[0].ИспользоватьИндексациюЗаработка;
		КонецЕсли;
		Настройка.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Настройка.Записать();
		
	КонецЕсли;
	
	ИспользоватьНачисленияПоДоговорам = Неопределено;
	Если ПараметрыОбъекта <> Неопределено Тогда
		ИспользоватьНачисленияПоДоговорам = ПараметрыОбъекта.Получить("ИспользоватьНачисленияПоДоговорам");
	КонецЕсли;
	
	Если ИспользоватьНачисленияПоДоговорам <> Неопределено Тогда
		
		Настройка = РегистрыСведений.НастройкиРасчетаЗарплаты.СоздатьНаборЗаписей();  
		Настройка.Прочитать();
		Если Настройка.Количество() > 0 Тогда
			Настройка[0].ИспользоватьНачисленияПоДоговорам = Настройка[0].ИспользоватьНачисленияПоДоговорам Или ИспользоватьНачисленияПоДоговорам;
		Иначе
			НоваяЗапись = Настройка.Добавить();
			НоваяЗапись.ИспользоватьНачисленияПоДоговорам = ИспользоватьНачисленияПоДоговорам;
		КонецЕсли;
		Настройка.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Настройка.Записать();
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура НастройкиУчетаВремени_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт

	Если НаборЗаписей.Количество() > 0 Тогда
		
		Настройка = РегистрыСведений.НастройкиУчетаВремени.СоздатьНаборЗаписей();  
		Настройка.Прочитать();
		Если Настройка.Количество() > 0 Тогда
			Настройка[0].УчитыватьНочныеЧасы = Настройка[0].УчитыватьНочныеЧасы Или НаборЗаписей[0].УчитыватьНочныеЧасы;
			Настройка[0].УчитыватьВечерниеЧасы = Настройка[0].УчитыватьВечерниеЧасы Или НаборЗаписей[0].УчитыватьВечерниеЧасы;
		Иначе
			НоваяЗапись = Настройка.Добавить();
			НоваяЗапись.УчитыватьНочныеЧасы = НаборЗаписей[0].УчитыватьНочныеЧасы;
			НоваяЗапись.УчитыватьВечерниеЧасы = НаборЗаписей[0].УчитыватьВечерниеЧасы;
		КонецЕсли;
		Настройка.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Настройка.Записать();
		
	КонецЕсли;
	
	Отказ = Истина;	

КонецПроцедуры

Процедура ОтпускПоУходуЗаРебенком_ПослеЗагрузки(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ОсновнойСотрудник) И Не Объект.РасчетПоПравилам2010Года И Объект.ВыплачиватьПособиеДоПолутораЛет И ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаНачало) И ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		
		Объект.СреднийЗаработокФСС.Очистить();
		Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
		Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
		
		ДополнительныеПараметры = УчетПособийСоциальногоСтрахованияРасширенный.ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода    = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
		ДополнительныеПараметры.ПорядокРасчета   = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011");   
		ДополнительныеПараметры.ДокументСсылка   = Объект.Ссылка; 
		ДополнительныеПараметры.УчитыватьКорректировки   = Ложь;
		
		ДанныеДляРасчета = УчетПособийСоциальногоСтрахованияРасширенный.ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(Объект.ОсновнойСотрудник, ДополнительныеПараметры);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОНачислениях, Объект.СреднийЗаработокФСС);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОВремени, Объект.ОтработанноеВремяДляСреднегоФСС);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеСтрахователей, Объект.СреднийЗаработокДанныеСтрахователей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтпускПоУходуЗаРебенкомВоеннослужащего_ПослеЗагрузки(Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ОтпускПоУходуЗаРебенкомВоеннослужащего_ПослеЗагрузки(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерерасчетЗарплаты_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НовыйНаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Организация.Установить(НаборЗаписей[0].Организация);
		НовыйНаборЗаписей.Записать();
	КонецЕсли;
	
	Отказ = Истина;	
	
КонецПроцедуры

Процедура ПерерасчетСреднегоЗаработка_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НовыйНаборЗаписей = РегистрыСведений.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Организация.Установить(НаборЗаписей[0].Организация);
		НовыйНаборЗаписей.Записать();
	КонецЕсли;
	
	Отказ = Истина;	
	
КонецПроцедуры

Процедура ПерерасчетУдержаний_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НовыйНаборЗаписей = РегистрыСведений.ПерерасчетУдержаний.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Организация.Установить(НаборЗаписей[0].Организация);
		НовыйНаборЗаписей.Записать();
	КонецЕсли;
	
	Отказ = Истина;	
	
КонецПроцедуры

Процедура ПрисвоениеВоинскогоЗвания_ПослеЗагрузки(Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаПрисвоения);
		Документы[Объект.Метаданные().Имя].ЗаполнитьНачисленияСотрудника(Объект, ВремяРегистрации);
		Документы[Объект.Метаданные().Имя].РассчитатьФОТПоДокументу(Объект, ВремяРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрисвоениеКлассногоЧинаРанга_ПослеЗагрузки(Объект) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаПрисвоения);
		Документы[Объект.Метаданные().Имя].ЗаполнитьНачисленияСотрудника(Объект, ВремяРегистрации);
		Документы[Объект.Метаданные().Имя].РассчитатьФОТПоДокументу(Объект, ВремяРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтажиФизическихЛиц_ПослеЗагрузки(НаборЗаписей) Экспорт

	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	КонецЦикла;	

КонецПроцедуры

Процедура Увольнение_ПослеЗагрузки(Объект) Экспорт

	ПериодРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ПериодРасчетаОбщегоСреднегоЗаработка(Объект.ДатаУвольнения, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
	Объект.ПериодРасчетаСреднегоЗаработкаНачало		= ПериодРасчетаСреднего.ДатаНачала;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание	= ПериодРасчетаСреднего.ДатаОкончания;	

КонецПроцедуры

Процедура УтверждениеОкладовЗаВоинскиеЗвания_ПриЗагрузке(Объект, Отказ) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УтверждениеОкладовЗаВоинскиеЗвания_ПриЗагрузке(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УтверждениеОкладовЗаКлассныеЧины_ПриЗагрузке(Объект, Отказ) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УтверждениеОкладовЗаКлассныеЧины_ПриЗагрузке(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТрудоваяДеятельностьФизическихЛиц_ПослеЗагрузки(НаборЗаписей) Экспорт

	НаборЗаписей.ДополнительныеСвойства.Вставить("НеПроверятьЗаписиДанныхФизическихЛиц");

КонецПроцедуры

Процедура УченыеЗванияФизическихЛиц_ПослеЗагрузки(НаборЗаписей) Экспорт

	НаборЗаписей.ДополнительныеСвойства.Вставить("НеПроверятьЗаписиДанныхФизическихЛиц");

КонецПроцедуры

Процедура УченыеСтепениФизическихЛиц_ПослеЗагрузки(НаборЗаписей) Экспорт

	НаборЗаписей.ДополнительныеСвойства.Вставить("НеПроверятьЗаписиДанныхФизическихЛиц");

КонецПроцедуры

Процедура ОбновитьКонтактнуюИнформациюПослеЗагрузкиОбъекта(Объект, ОбъектМодифицирован) Экспорт
	
	ОбъектМодифицирован = Истина;
	
	Для Каждого КИ Из Объект.КонтактнаяИнформация Цикл
		КИ.ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(КИ.ЗначенияПолей, КИ.Представление,КИ.Вид);
	КонецЦикла;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюОбъекта(Объект);
	
КонецПроцедуры

Процедура Документ_РассчитатьФОТ(Объект) Экспорт
	
	Попытка
		Документы[Объект.Метаданные().Имя].РассчитатьФОТПоДокументу(Объект);
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

Процедура ВидыОтпусков_ПоляПоиска(ПараметрыОбъекта, СтрокаИменСвойствПоиска, СвойстваПоиска, СсылкаНаОбъект) Экспорт
	
	ОписаниеВидаОтпускаСтрока = 
	"Наименование,
	|НаименованиеПолное,
	|ОтпускБезОплаты,
	|ОтпускЯвляетсяЕжегодным,
	|ПредоставлятьОтпускВсемСотрудникам,
	|КоличествоДнейВГод,
	|СпособРасчетаОтпуска,
	|ПредопределенныйВидОтпуска,
	|ИмяПредопределенныхДанных,
	|ОсновнойОтпуск";
	
	СтрокаИменСвойствПоиска	= "Наименование";
	
	ИмяПредопределенныхДанных = "";
	Если ПараметрыОбъекта["ПредопределенныйПараметр"] Тогда
		ИмяПредопределенныхДанных = СвойстваПоиска.Получить("Наименование");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
		
		Если ИмяПредопределенныхДанных = "ОтпускБезОплатыПоТКРФ"
			Или ИмяПредопределенныхДанных = "ОтпускЗаСвойСчет"
			Или ИмяПредопределенныхДанных = "ОтпускБезОплатыУчебный" Тогда
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= "ОтпускБезОплатыПоТКРФ";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ';
																	|en = 'Unpaid leave according to the Labor Code of the Russian Federation'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ';
																	|en = 'Unpaid leave according to the Labor Code of the Russian Federation'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= "ОтпускЗаСвойСчет";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Отпуск за свой счет';
																	|en = 'Unpaid leave'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Отпуск за свой счет';
																	|en = 'Unpaid leave'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= "ОтпускБезОплатыУчебный";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Дополнительный учебный отпуск без оплаты';
																	|en = 'Excess study leave (unpaid)'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Дополнительный учебный отпуск без оплаты';
																	|en = 'Excess study leave (unpaid)'");
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
		ИначеЕсли ИмяПредопределенныхДанных = "ОтпускУчебный" Тогда
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= "ОтпускУчебный";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)';
																	|en = 'Excess study leave (paid)'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Дополнительный учебный отпуск (оплачиваемый)';
																	|en = 'Excess study leave (paid)'");
			ОписаниеВидаОтпуска.СпособРасчетаОтпуска		= Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях;
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Ложь;
			ОписаниеВидаОтпуска.ОтпускЯвляетсяЕжегодным		= Ложь;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
		ИначеЕсли ИмяПредопределенныхДанных = "ОтпускПострадавшимВАварииЧАЭС" Тогда
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= "ОтпускПострадавшимВАварииЧАЭС";
			ОписаниеВидаОтпуска.Наименование				= НСтр("ru = 'Дополнительный отпуск пострадавшим на ЧАЭС';
																	|en = 'Excess leaves for citizens exposed to radiation at the Chernobyl NPP'");
			ОписаниеВидаОтпуска.НаименованиеПолное			= НСтр("ru = 'Дополнительный отпуск пострадавшим в аварии на ЧАЭС';
																	|en = 'Excess leaves for citizens exposed to radiation at the Chernobyl NPP'");
			ОписаниеВидаОтпуска.СпособРасчетаОтпуска		= Перечисления.СпособыРасчетаОтпуска.ВКалендарныхДнях;
			ОписаниеВидаОтпуска.ОтпускБезОплаты				= Истина;
			ОписаниеВидаОтпуска.ОтпускЯвляетсяЕжегодным		= Истина;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
		Иначе
			ОписаниеВидаОтпуска = Новый Структура(ОписаниеВидаОтпускаСтрока);
			ОписаниеВидаОтпуска.ПредопределенныйВидОтпуска	= Истина;
			ОписаниеВидаОтпуска.ИмяПредопределенныхДанных	= ИмяПредопределенныхДанных;
			ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВидыИспользованияРабочегоВремени_ПоляПоиска(СтрокаИменСвойствПоиска, СвойстваПоиска, СсылкаНаОбъект) Экспорт
	
	ИмяПредопределенныхДанных = "";
	Наименование = СвойстваПоиска.Получить("Наименование");
	Если Найти(Наименование, "{ИмяПредопределенныхДанных}") = 1 Тогда
		Наименование = Сред(Наименование, 28);
		СвойстваПоиска.Вставить("Наименование", Наименование);
		ИмяПредопределенныхДанных	= Наименование;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
		ОписаниеВидаВремени = Новый Структура("ИмяПредопределенныхДанных, БуквенныйКод, Наименование, ЦифровойКод, ПолноеНаименование, РабочееВремя, Целосменное, ОсновноеВремя");
		
		Если ИмяПредопределенныхДанных = "РаботаНочныеЧасы" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "РаботаНочныеЧасы";
			ОписаниеВидаВремени.Наименование				= "Ночные часы";
			ОписаниеВидаВремени.БуквенныйКод				= "Н";
			ОписаниеВидаВремени.ЦифровойКод					= "02";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Ночные часы';
																	|en = 'Night hours'");
			ОписаниеВидаВремени.РабочееВремя				= Истина;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "Праздники" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "Праздники";
			ОписаниеВидаВремени.Наименование				= "Праздники";
			ОписаниеВидаВремени.БуквенныйКод				= "РВ";
			ОписаниеВидаВремени.ЦифровойКод					= "03";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Праздники';
																	|en = 'Holidays'");
			ОписаниеВидаВремени.РабочееВремя				= Истина;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "Сверхурочные" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "Сверхурочные";
			ОписаниеВидаВремени.Наименование				= "Сверхурочно";
			ОписаниеВидаВремени.БуквенныйКод				= "С";
			ОписаниеВидаВремени.ЦифровойКод					= "04";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Продолжительность сверхурочной работы';
																	|en = 'Overtime duration'");
			ОписаниеВидаВремени.РабочееВремя				= Истина;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "ОтпускНаОбучениеНеоплачиваемый" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "ОтпускНаОбучениеНеоплачиваемый";
			ОписаниеВидаВремени.Наименование				= "Отпуск дополнительный (неоплачиваемый учебный)";
			ОписаниеВидаВремени.БуквенныйКод				= "УД";
			ОписаниеВидаВремени.ЦифровойКод					= "13";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Отпуск дополнительный (неоплачиваемый учебный)';
																	|en = 'Excess leave (unpaid study)'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "НеоплачиваемыйОтпускПоРазрешениюРаботодателя" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "НеоплачиваемыйОтпускПоРазрешениюРаботодателя";
			ОписаниеВидаВремени.Наименование				= "Отпуск неоплачиваемый с разрешения работодателя";
			ОписаниеВидаВремени.БуквенныйКод				= "ДО";
			ОписаниеВидаВремени.ЦифровойКод					= "16";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Отпуск неоплачиваемый с разрешения работодателя';
																	|en = 'Unpaid leave with employer''s permission'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "НеоплачиваемыйОтпускПоЗаконодательству" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "НеоплачиваемыйОтпускПоЗаконодательству";
			ОписаниеВидаВремени.Наименование				= "Отпуск неоплачиваемый в соответствии с законом";
			ОписаниеВидаВремени.БуквенныйКод				= "ОЗ";
			ОписаниеВидаВремени.ЦифровойКод					= "17";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Отпуск неоплачиваемый в соответствии с законом';
																	|en = 'Unpaid leave according to the law'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "НеоплачиваемыйДополнительныйОтпуск" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "НеоплачиваемыйДополнительныйОтпуск";
			ОписаниеВидаВремени.Наименование				= "Доп. отпуск без сохранения заработной платы";
			ОписаниеВидаВремени.БуквенныйКод				= "ДБ";
			ОписаниеВидаВремени.ЦифровойКод					= "18";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Доп. отпуск без сохранения заработной платы';
																	|en = 'Unpaid excess leave'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "Прогулы" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "Прогулы";
			ОписаниеВидаВремени.Наименование				= "Прогул";
			ОписаниеВидаВремени.БуквенныйКод				= "ПР";
			ОписаниеВидаВремени.ЦифровойКод					= "24";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Прогул';
																	|en = 'Absenteeism'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "НеявкиПоНевыясненнымПричинам" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "НеявкиПоНевыясненнымПричинам";
			ОписаниеВидаВремени.Наименование				= "Неявки по невыясненным причинам";
			ОписаниеВидаВремени.БуквенныйКод				= "НН";
			ОписаниеВидаВремени.ЦифровойКод					= "30";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Неявки по невыясненным причинам';
																	|en = 'Non-attendances for unknown reasons'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "ПростойПоВинеРаботодателя" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "ПростойПоВинеРаботодателя";
			ОписаниеВидаВремени.Наименование				= "Время простоя по вине работодателя";
			ОписаниеВидаВремени.БуквенныйКод				= "РП";
			ОписаниеВидаВремени.ЦифровойКод					= "31";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Время простоя по вине работодателя';
																	|en = 'Downtime due to the employer fault'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "Простой" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "Простой";
			ОписаниеВидаВремени.Наименование				= "Простой, не зависящий от работодателя и работника";
			ОписаниеВидаВремени.БуквенныйКод				= "НП";
			ОписаниеВидаВремени.ЦифровойКод					= "32";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Простой, не зависящий от работодателя и работника';
																	|en = 'Downtime beyond control of employer and employee'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "ПростойПоВинеРаботника" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "ПростойПоВинеРаботника";
			ОписаниеВидаВремени.Наименование				= "Простой по вине работника";
			ОписаниеВидаВремени.БуквенныйКод				= "ВП";
			ОписаниеВидаВремени.ЦифровойКод					= "33";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Простой по вине работника';
																	|en = 'Downtime due to the employee fault'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "КормлениеРебенка" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "КормлениеРебенка";
			ОписаниеВидаВремени.Наименование				= "Перерывы для кормления ребенка";
			ОписаниеВидаВремени.БуквенныйКод				= "КР";
			ОписаниеВидаВремени.ЦифровойКод					= "37";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Перерывы для кормления ребенка, предоставляемые работающим женщинам, имеющим детей в возрасте до полутора лет';
																	|en = 'Breaks for breastfeeding provided for female employees with children under one and a half years old'");
			ОписаниеВидаВремени.РабочееВремя				= Ложь;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		ИначеЕсли ИмяПредопределенныхДанных = "РаботаВечерниеЧасы" Тогда
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= "РаботаВечерниеЧасы";
			ОписаниеВидаВремени.Наименование				= "Вечерние часы";
			ОписаниеВидаВремени.БуквенныйКод				= "ВЧ";
			ОписаниеВидаВремени.ЦифровойКод					= "41";
			ОписаниеВидаВремени.ПолноеНаименование			= НСтр("ru = 'Вечерние часы';
																	|en = 'Evening hours'");
			ОписаниеВидаВремени.РабочееВремя				= Истина;
			ОписаниеВидаВремени.Целосменное					= Ложь;
			
		Иначе
			ОписаниеВидаВремени.ИмяПредопределенныхДанных	= ИмяПредопределенныхДанных;
			
		КонецЕсли;
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		СсылкаНаОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + ОписаниеВидаВремени.ИмяПредопределенныхДанных);
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ВидВремениОбъект = Справочники.ВидыИспользованияРабочегоВремени.СоздатьЭлемент();
			ВидВремениСсылка = Справочники.ВидыИспользованияРабочегоВремени.ПолучитьСсылку();
			ВидВремениОбъект.УстановитьСсылкуНового(ВидВремениСсылка);
			
			ЗаполнитьЗначенияСвойств(ВидВремениОбъект, ОписаниеВидаВремени);
			
			Если Не ЗначениеЗаполнено(ВидВремениОбъект.ОсновноеВремя) Тогда
				ВидВремениОбъект.ОсновноеВремя = ВидВремениСсылка;
			КонецЕсли;
			
			ВидВремениОбъект.Записать();
			
			ОбновитьПовторноИспользуемыеЗначения();
			
			СсылкаНаОбъект = ВидВремениСсылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтпускПоУходуЗаРебенкомV7_ПослеЗагрузки(Объект) Экспорт
	
	ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2010");
	Если Не Объект.РасчетПоПравилам2010Года И Объект.ДатаНачала >= Дата(2011, 1, 1) Тогда
		ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаНачало) Или Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачала, ПорядокРасчета);
		Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
		Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
		Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
	КонецЕсли;
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), Истина, Объект.Организация, Объект.ДатаНачала);
	Если ОсновныеСотрудники.Количество() > 0 Тогда
		
		ОсновнойСотрудникФизЛица = ОсновныеСотрудники[0].Сотрудник;
		
		Объект.СреднийЗаработокФСС.Очистить();
		Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
		Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
		
		ДополнительныеПараметры = УчетПособийСоциальногоСтрахованияРасширенный.ДополнительныеПараметрыДанныхДляРасчетаСреднегоЗаработкаФСС();
		ДополнительныеПараметры.НачалоПериода    = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
		ДополнительныеПараметры.ПорядокРасчета   = ПорядокРасчета;   
		ДополнительныеПараметры.ДокументСсылка   = Объект.Ссылка; 
		ДополнительныеПараметры.УчитыватьКорректировки   = Ложь;
		
		ДанныеДляРасчета = УчетПособийСоциальногоСтрахованияРасширенный.ДанныеДляРасчетаСреднегоЗаработкаФСССотрудникаСлужебный(ОсновнойСотрудникФизЛица, ДополнительныеПараметры);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОНачислениях, Объект.СреднийЗаработокФСС);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеОВремени, Объект.ОтработанноеВремяДляСреднегоФСС);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляРасчета.ДанныеСтрахователей, Объект.СреднийЗаработокДанныеСтрахователей);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЯзыкиНародовМира_ПоляПоиска(Параметры, НомерВариантаПоиска, СтрокаИменСвойствПоиска, СвойстваПоиска, СсылкаНаОбъект) Экспорт
	
	Если НомерВариантаПоиска = 1 Тогда
		СтрокаИменСвойствПоиска = "Наименование";
	ИначеЕсли НомерВариантаПоиска = 2 И ЗначениеЗаполнено(СвойстваПоиска["Код"]) Тогда
		СтрокаИменСвойствПоиска = "Код";
	Иначе
		
		Если Не Параметры.Свойство("КлассификаторЯзыкиНародовМираТаблица") Тогда
			КлассификаторXML = Справочники.ЯзыкиНародовМира.ПолучитьМакет("КлассификаторЯзыковНародовМира").ПолучитьТекст();
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			Параметры.Вставить("КлассификаторЯзыкиНародовМираТаблица",КлассификаторТаблица);
		КонецЕсли;
		КлассификаторТаблица = Параметры.КлассификаторЯзыкиНародовМираТаблица;
		
		НайденнаяСтрока = КлассификаторТаблица.Найти(СвойстваПоиска["Наименование"], "Name");
		Если НайденнаяСтрока = Неопределено И ЗначениеЗаполнено(СвойстваПоиска["Код"]) Тогда
			НайденнаяСтрока = КлассификаторТаблица.Найти(СвойстваПоиска["Код"], "Code");
		КонецЕсли;
		
		Если НайденнаяСтрока <> Неопределено Тогда
			НовыйОбъект = Справочники.ЯзыкиНародовМира.СоздатьЭлемент();
			НовыйОбъект.Код = НайденнаяСтрока.Code;
			НовыйОбъект.Наименование = НайденнаяСтрока.Name;
			НовыйОбъект.ДополнительныеСвойства.Вставить("ПодборИзКлассификатора");
			Попытка
				НовыйОбъект.Записать();
				СсылкаНаОбъект = НовыйОбъект.Ссылка;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НДФЛКЗачету_ПослеЗагрузки(Объект) Экспорт

	НДФЛКЗачету = Объект.Движения.ВзаиморасчетыССотрудниками;
	
	СтатьяРасходов = Неопределено;
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		СтатьяРасходов = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяОплатаТруда();
	КонецЕсли;
	
	Если НДФЛКЗачету.Количество() > 0 Тогда
		
		МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НДФЛКЗачету.ВыгрузитьКолонку("ФизическоеЛицо"));
		ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(МассивФизическихЛиц, Ложь, Объект.Организация, Объект.ПериодРегистрации);
		
		СотрудникиФизическихЛиц = Новый Соответствие;
		СписокСотрудников = Новый Массив;
		Для каждого СтрокаТЗ Из ОсновныеСотрудникиФизическихЛиц Цикл
			СотрудникиФизическихЛиц.Вставить(СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.Сотрудник);
			СписокСотрудников.Добавить(СтрокаТЗ.Сотрудник);
		КонецЦикла;
		
		Подразделения = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СписокСотрудников, "Подразделение", Объект.ПериодРегистрации);
		ПодразделенияСотрудников = Новый Соответствие;
		Для каждого СтрокаТЗ Из Подразделения Цикл
			ПодразделенияСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаДвижений Из НДФЛКЗачету Цикл
			СтрокаДвижений.Сотрудник = СотрудникиФизическихЛиц[СтрокаДвижений.ФизическоеЛицо];
			СтрокаДвижений.Подразделение = ПодразделенияСотрудников[СтрокаДвижений.Сотрудник];
			СтрокаДвижений.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			Если СтатьяРасходов <> Неопределено Тогда
				СтрокаДвижений.СтатьяРасходов = СтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриемНаРаботуСпискомЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт
	
	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПозиций = ПозицииШРПоКоллекцииДолжностейПодразделений(Объект.Сотрудники, Параметры);
	
	Отбор = Новый Структура("Подразделение,Должность");
	Для каждого СтрокаТЧ Из Объект.Сотрудники Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		НайденныеСтроки = ТаблицаПозиций.НайтиСтроки(Отбор);
		СтрокаТЧ.ДолжностьПоШтатномуРасписанию = НайденныеСтроки[0].ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ПриемНаРаботуЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт
	
	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПозиции = Новый Структура("Подразделение,Должность");
	ЗаполнитьЗначенияСвойств(ОписаниеПозиции, Объект);
	Коллекция = Новый Массив;
	Коллекция.Добавить(ОписаниеПозиции);
	
	ТаблицаПозиций = ПозицииШРПоКоллекцииДолжностейПодразделений(Коллекция, Параметры);
	Объект.ДолжностьПоШтатномуРасписанию = ТаблицаПозиций[0].ДолжностьПоШтатномуРасписанию;
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура КадровыйПереводСпискомЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПозиций = ПозицииШРПоКоллекцииДолжностейПодразделений(Объект.Сотрудники, Параметры);
	
	Отбор = Новый Структура("Подразделение,Должность");
	Для каждого СтрокаТЧ Из Объект.Сотрудники Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
		НайденныеСтроки = ТаблицаПозиций.НайтиСтроки(Отбор);
		СтрокаТЧ.ДолжностьПоШтатномуРасписанию = НайденныеСтроки[0].ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура КадровыйПереводЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") 
		Или ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПозиции = Новый Структура("Подразделение,Должность");
	ЗаполнитьЗначенияСвойств(ОписаниеПозиции, Объект);
	Коллекция = Новый Массив;
	Коллекция.Добавить(ОписаниеПозиции);
	
	ТаблицаПозиций = ПозицииШРПоКоллекцииДолжностейПодразделений(Коллекция, Параметры);
	Объект.ДолжностьПоШтатномуРасписанию = ТаблицаПозиций[0].ДолжностьПоШтатномуРасписанию;
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);

КонецПроцедуры

Процедура УвольнениеСпискомЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура УвольнениеЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	МногофункциональныеДокументыБЗК.ОбработкаЗаполненияДокумента(Объект, Неопределено, "", Истина);
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ОтпускЧерновик_ПослеЗагрузки(Отказ, Объект, ПараметрыОбъекта, Параметры) Экспорт
	
	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие", "ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);

КонецПроцедуры

Процедура КомандировкаЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);

КонецПроцедуры

Процедура ОплатаДнейУходаЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);	

КонецПроцедуры

Процедура ОплатаПоСреднемуЗаработкуЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);	

КонецПроцедуры

Процедура БольничныйЛистЧерновик_ПослеЗагрузки(Отказ,Объект,ПараметрыОбъекта,Параметры) Экспорт

	Параметры.ЗагруженныеЧерновики.Добавить(Объект);
	
	ПараметрыЗаполнения = Новый Структура("Действие","ЗаполнитьПослеПереноса");
	Объект.Заполнить(ПараметрыЗаполнения);

КонецПроцедуры

Процедура НаборыДополнительныхРеквизитовИСведений_ПоляПоиска(Параметры, НомерВариантаПоиска, СтрокаИменСвойствПоиска, СвойстваПоиска, СсылкаНаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СвойстваПоиска["ИмяПредопределенногоНабора"]) Тогда
		СсылкаНаОбъект = УправлениеСвойствами.НаборСвойствПоИмени(СвойстваПоиска["ИмяПредопределенногоНабора"]);
	КонецЕсли;
	ПрекратитьПоиск = Истина;
	
КонецПроцедуры

Процедура ДополнительныеРеквизитыИСведения_ПослеЗагрузки(ПараметрыОбъекта,Объект,Отказ) Экспорт
	
	Если ПараметрыОбъекта <> Неопределено И ПараметрыОбъекта.Получить("ТипЗначенияСтрока") <> Неопределено Тогда
		ТипЗначенияСтрока = ПараметрыОбъекта["ТипЗначенияСтрока"];
		Если ЗначениеЗаполнено(ТипЗначенияСтрока) Тогда
			Объект.ТипЗначения = Новый ОписаниеТипов(ТипЗначенияСтрока);	
		КонецЕсли;
	Иначе
		Если Найти(Объект.Наименование, "Дата") > 0 Тогда
			Объект.ТипЗначения = Новый ОписаниеТипов("Дата");
		Иначе
			Объект.ТипЗначения = Новый ОписаниеТипов("Строка");
		КонецЕсли;
	КонецЕсли;
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Если ЗначениеЗаполнено(Объект.НаборСвойств) Тогда
		ОбъектНабора = Объект.НаборСвойств.ПолучитьОбъект();
		Если ОбъектНабора.ДополнительныеСведения.Найти(Объект.Ссылка, "Свойство") = Неопределено Тогда
			ОбъектНабора.ДополнительныеСведения.Добавить().Свойство = Объект.Ссылка;
			ОбъектНабора.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчики для КОРП
Процедура УточнениеПозицииШРСотрудниковПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Параметры, Отказ) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.УточнениеПозицииШРСотрудниковПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Параметры, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура МестоПозицииВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.МестоПозицииВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеМестоВСтруктуреПредприятия_ПоляПоиска(СвойстваПоиска, ПараметрыОбъекта, СсылкаНаОбъект, ПрекратитьПоиск, СтрокаИменСвойствПоиска) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ШтатноеРасписаниеМестоВСтруктуреПредприятия_ПоляПоиска(СвойстваПоиска, ПараметрыОбъекта, СсылкаНаОбъект, ПрекратитьПоиск, СтрокаИменСвойствПоиска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтатноеРасписаниеМестоВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ШтатноеРасписаниеМестоВСтруктуреПредприятияПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта);
	КонецЕсли;	

КонецПроцедуры

Процедура ПозицииРуководителейПодразделенийПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Параметры, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РуководителиПодразделений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РуководителиПодразделений");
		Модуль.ПозицииРуководителейПодразделенийПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Параметры, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросыДляАнкетированияПослеЗагрузки(ПараметрыОбъекта, Объект, Отказ) Экспорт
	
	Если ПараметрыОбъекта = Неопределено Или ПараметрыОбъекта.Получить("ТипЗначенияСтрока") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияСтрока = ПараметрыОбъекта["ТипЗначенияСтрока"];
	Если ЗначениеЗаполнено(ТипЗначенияСтрока) Тогда
		
		Если ТипЗначенияСтрока = "Строка" Тогда
			Объект.ТипЗначения = ОбщегоНазначения.ОписаниеТипаСтрока(1024);
		ИначеЕсли ТипЗначенияСтрока = "Число" Тогда
			Объект.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(15,3);
		ИначеЕсли ТипЗначенияСтрока = "Дата" Тогда
			Объект.ТипЗначения = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
		Иначе
			Объект.ТипЗначения = Новый ОписаниеТипов(ТипЗначенияСтрока);
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ГрейдыПозицийПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ГрейдыПозицийПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СхемыМотивацииПоГрейдамПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.СхемыМотивацииПоГрейдамПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыйРезерв_ПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.КадровыйРезерв_ПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключениеВКадровыйРезервПослеЗагрузки(Объект, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ВключениеВКадровыйРезервПослеЗагрузки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключениеИзКадровогоРезерваПослеЗагрузки(Объект, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ИсключениеИзКадровогоРезерваПослеЗагрузки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаявкаНаОбучениеРазвитиеПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ЗаявкаНаОбучениеРазвитиеПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбучениеРазвитиеСотрудниковПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ОбучениеРазвитиеСотрудниковПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыИнструктажейПоОхранеТрудаПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ВидыИнструктажейПоОхранеТрудаПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НаправлениеНаМедицинскийОсмотрПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.НаправлениеНаМедицинскийОсмотрПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НесчастныйСлучайНаПроизводствеПослеЗагрузки(Объект, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.НесчастныйСлучайНаПроизводствеПослеЗагрузки(Объект, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриказОбАттестацииСотрудниковПослеЗагрузки(Объект, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ПриказОбАттестацииСотрудниковПослеЗагрузки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатыАттестацииСотрудниковПослеЗагрузки(Объект, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.РезультатыАттестацииСотрудниковПослеЗагрузки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаключениеМедицинскогоОсмотраПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаключениеМедицинскогоОсмотраПослеЗагрузки(Объект, ОбъектНайден, ПараметрыОбъекта, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура НазначениеРабочихМестСотрудникамПослеЗагрузки(Объект, Отказ) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.НазначениеРабочихМестСотрудникамПослеЗагрузки(Объект, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПредметыПапкиВзаимодействийПослеЗагрузки(НаборЗаписей) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		ИмяСправочника = "ПапкиЭлектронныхПисем";
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Предмет", Неопределено);
		СтруктураЗаписи.Вставить("Папка", Справочники[ИмяСправочника].ПустаяСсылка());
		СтруктураЗаписи.Вставить("Рассмотрено", Неопределено);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("СтруктураЗаписи", СтруктураЗаписи);
	КонецЕсли;

КонецПроцедуры

// Обработчики для БП3
Процедура КадровыйДокументБП_ПередЗагрузкой(Параметры) Экспорт

	Если Не Параметры.ИспользованиеШтатногоРасписанияВыключено Тогда
		ВыключитьИспользованиеШтатногоРасписания(Параметры);
	КонецЕсли;
	
	Если Параметры.ОбновитьПВРПоНастройкам Тогда
		РасчетЗарплатыРасширенный.СформироватьПланВидовРасчетаПоНастройкам();
		Параметры.ОбновитьПВРПоНастройкам = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура Документ_ПланируемаяДатаВыплаты(Объект) Экспорт

	Объект.ПланируемаяДатаВыплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Объект.Организация, Объект.ПериодРегистрации);

КонецПроцедуры

Процедура ЗаписатьПровестиКадровыйДокументБП(Объект, Отказ) Экспорт
	
	Если НЕ Отказ Тогда
		
		Объект.ДополнительныеСвойства.Вставить("НеФормироватьПредварительныеПерерасчетыПриЗаписи", Истина);
		
		ЗначениеОтразитьВТрудовойКнижке = Объект.ОтразитьВТрудовойКнижке;
		Если ЗначениеОтразитьВТрудовойКнижке Тогда
			Объект.ОтразитьВТрудовойКнижке = Ложь;
			МероприятияТрудовойДеятельности = Объект.Движения.МероприятияТрудовойДеятельности.Выгрузить();
			Объект.Движения.МероприятияТрудовойДеятельности.Очистить();
		КонецЕсли;
		
		Объект.ПометкаУдаления = Ложь;
		Объект.Записать(РежимЗаписиДокумента.Запись);
		Объект.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			Если ЗначениеОтразитьВТрудовойКнижке Тогда
				Объект.ОтразитьВТрудовойКнижке = Истина;
				Объект.ДополнительныеСвойства.Удалить("ПроверятьБизнесЛогикуПриЗаписи");
				Объект.Записать(РежимЗаписиДокумента.Запись);
				Если МероприятияТрудовойДеятельности.Количество() > 0 Тогда
					НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельности.СоздатьНаборЗаписей();
					Для каждого СтрокаТЗ Из МероприятияТрудовойДеятельности Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТЗ);
						НоваяЗапись.Регистратор = Объект.Ссылка;
					КонецЦикла;
					НаборЗаписей.Отбор.Регистратор.Установить(Объект.Ссылка);
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиРасчетаЗарплатыБП_ПослеЗагрузки(НаборЗаписей, Отказ) Экспорт
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Настройка = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();  
		Настройка.Прочитать();
		Если Настройка.Количество() > 0 Тогда
			Настройка[0].ИспользоватьОтпускаБезОплаты = Настройка[0].ИспользоватьОтпускаБезОплаты Или НаборЗаписей[0].ИспользоватьОтпускаБезОплаты;
			Настройка[0].ИспользоватьДоходыВНатуральнойФорме = Настройка[0].ИспользоватьДоходыВНатуральнойФорме Или НаборЗаписей[0].ИспользоватьДоходыВНатуральнойФорме;
			Настройка[0].ИспользоватьМатериальнуюПомощь = Настройка[0].ИспользоватьМатериальнуюПомощь Или НаборЗаписей[0].ИспользоватьМатериальнуюПомощь;
			Настройка[0].ИспользоватьИсполнительныеЛисты = Настройка[0].ИспользоватьИсполнительныеЛисты Или НаборЗаписей[0].ИспользоватьИсполнительныеЛисты;
			Настройка[0].ИспользоватьПрофсоюзныеВзносы = Настройка[0].ИспользоватьПрофсоюзныеВзносы Или НаборЗаписей[0].ИспользоватьПрофсоюзныеВзносы;
			Настройка[0].ИспользоватьДобровольныеВзносыВНПФ = Настройка[0].ИспользоватьДобровольныеВзносыВНПФ Или НаборЗаписей[0].ИспользоватьДобровольныеВзносыВНПФ;
			Настройка[0].ИспользоватьДСВ = Настройка[0].ИспользоватьДСВ Или НаборЗаписей[0].ИспользоватьДСВ;
		Иначе
			НоваяЗапись = Настройка.Добавить();
			НоваяЗапись.ИспользоватьОтпускаБезОплаты = НаборЗаписей[0].ИспользоватьОтпускаБезОплаты;
			НоваяЗапись.ИспользоватьДоходыВНатуральнойФорме = НаборЗаписей[0].ИспользоватьДоходыВНатуральнойФорме;
			НоваяЗапись.ИспользоватьМатериальнуюПомощь = НаборЗаписей[0].ИспользоватьМатериальнуюПомощь;
			НоваяЗапись.ИспользоватьИсполнительныеЛисты = НаборЗаписей[0].ИспользоватьИсполнительныеЛисты;
			НоваяЗапись.ИспользоватьПрофсоюзныеВзносы = НаборЗаписей[0].ИспользоватьПрофсоюзныеВзносы;
			НоваяЗапись.ИспользоватьДобровольныеВзносыВНПФ = НаборЗаписей[0].ИспользоватьДобровольныеВзносыВНПФ;
			НоваяЗапись.ИспользоватьДСВ = НаборЗаписей[0].ИспользоватьДСВ;
		КонецЕсли;
		Настройка.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		Настройка.Записать();
		
	КонецЕсли;
	
	Отказ = Истина;	
	
КонецПроцедуры

Процедура НачислениеЗарплатыБП_ПослеЗагрузки(Объект) Экспорт
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудники, "ДатаПриема,ДатаУвольнения");
	КадровыеДанные.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	
	ИдентификаторСтроки = 1;
	Для каждого СтрокаТЧ Из Объект.Начисления Цикл
		СтрокаТЧ.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		Отбор.Сотрудник = СтрокаТЧ.Сотрудник;
		НайденныеСтроки = КадровыеДанные.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Если НайденныеСтроки[0].ДатаПриема > СтрокаТЧ.ДатаНачала И НайденныеСтроки[0].ДатаПриема <= СтрокаТЧ.ДатаОкончания Тогда
				СтрокаТЧ.ДатаНачала = НайденныеСтроки[0].ДатаПриема;
			КонецЕсли;
			Если НайденныеСтроки[0].ДатаУвольнения >= СтрокаТЧ.ДатаНачала И НайденныеСтроки[0].ДатаУвольнения < СтрокаТЧ.ДатаОкончания Тогда
				СтрокаТЧ.ДатаОкончания = НайденныеСтроки[0].ДатаУвольнения;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.НачислениеЗарплаты") Тогда
		ИдентификаторСтроки = 1000000 + 1;
		Для каждого СтрокаТЧ Из Объект.НачисленияПоДоговорам Цикл
			СтрокаТЧ.ИдентификаторСтроки = ИдентификаторСтроки;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторСтроки = 2000000 + 1;
	Для каждого СтрокаТЧ Из Объект.Удержания Цикл
		СтрокаТЧ.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Методы, вызываемые из обработчиков конвертации

Функция ОписаниеПараметровЗагрузкиДанных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗаполнитьДанныеУчетаСтажаПФР", Ложь);
	Параметры.Вставить("ОбновитьВидыКонтактнойИнформации", Ложь);
	Параметры.Вставить("ОбновитьДанныеСтажа", Ложь);
	Параметры.Вставить("ОбновитьНастройкиШтатногоРасписания", Ложь);
	Параметры.Вставить("ОбновитьУчетИсполнительныеДокументы", Ложь);
	Параметры.Вставить("ОбновитьНастройкуПВР", Ложь);
	Параметры.Вставить("ОбновитьСтруктуруШтатногоРасписания", Ложь);
	Параметры.Вставить("ОбновитьТочностьПоказателей", Ложь);
	Параметры.Вставить("ОбновитьУчетНДФЛ", Ложь);
	Параметры.Вставить("ОбновитьУчетСтраховыхВзносов", Ложь);
	Параметры.Вставить("ПеренестиДанныеУчетаВремениВНовыеРегистры", Ложь);
	Параметры.Вставить("СоздатьГрафикРаботыПятидневка", Ложь);
	Параметры.Вставить("ОбновитьНастройкиПрограммы", 0);
	Параметры.Вставить("ИзменитьНастройкуУникальностьТабельныхНомеров",Ложь); 
	Параметры.Вставить("ЗаполнитьРеквизитыПодчиненныхПодразделений",Ложь); // V7
	Параметры.Вставить("ОбновитьГрафикиРаботыПоВидамВремени",Ложь); // V7
	Параметры.Вставить("ЗаполнитьМестаВыплатыЗарплатыСотрудников",Ложь);
	Параметры.Вставить("ЗагруженныеЛицевыеСчетаСотрудников", Новый Массив);
	Параметры.Вставить("ЗагруженныеСотрудники", Новый Массив);
	Параметры.Вставить("ОбновитьВторичныеДанные", Ложь);
	
	ТипыОбъектовСНастраиваемымПорядком = Метаданные.ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип.Типы();
	Параметры.Вставить("ТипыОбъектовСНастраиваемымПорядком", ТипыОбъектовСНастраиваемымПорядком);
	
	Возврат Параметры;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЗаполнитьПозициюШтатногоРасписания(СтрокаТЗ, Параметры)

	Реквизиты = "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией,ОснованиеДосрочногоНазначенияПенсии,ОсобыеУсловияТрудаПФР,КодПозицииСпискаПФР";
	СвойстваДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЗ.Должность, Реквизиты);
	
	НоваяПозиция = Справочники.ШтатноеРасписание.СоздатьЭлемент();
	НоваяПозиция.Владелец 		= СтрокаТЗ.Организация;
	НоваяПозиция.Подразделение 	= СтрокаТЗ.Подразделение;
	НоваяПозиция.Должность 		= СтрокаТЗ.Должность;
	НоваяПозиция.КоличествоСтавок = 1;
	
	ЗаполнитьЗначенияСвойств(НоваяПозиция, СвойстваДолжности);
	НоваяПозиция.Наименование = Строка(НоваяПозиция.Должность) + " /" + Строка(НоваяПозиция.Подразделение) + "/";
	
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеСтруктурыШтатногоРасписания(НоваяПозиция);
	УправлениеШтатнымРасписанием.ОтключитьОбновлениеНастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда(НоваяПозиция);
	
	НоваяПозиция.Записать();
	СтрокаТЗ.ДолжностьПоШтатномуРасписанию = НоваяПозиция.Ссылка;
	
	Параметры.ЗагруженныеПозиции.Добавить(НоваяПозиция.Ссылка);

КонецПроцедуры

Процедура ЗаполнитьРеквизитУпорядочивания(Объект)

	НастройкаПорядкаЭлементов.УстановитьЗначениеРеквизитаУпорядочивания(Объект);

КонецПроцедуры

Процедура ЗаполнитьСтраховыеВзносыПоФизическимЛицам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТВсеРегистраторы
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор ССЫЛКА Документ.ПереносДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.Регистратор КАК Регистратор,
	|	Регистраторы.Месяц КАК Месяц,
	|	Регистраторы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТРегистраторыКОбработке
	|ИЗ
	|	ВТВсеРегистраторы КАК Регистраторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыПоФизическимЛицам КАК СтраховыеВзносыПоФизическимЛицам
	|		ПО Регистраторы.Регистратор = СтраховыеВзносыПоФизическимЛицам.Регистратор
	|ГДЕ
	|	СтраховыеВзносыПоФизическимЛицам.ОблагаетсяЕНВД ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	ИсчисленныеСтраховыеВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсчисленныеСтраховыеВзносы.Период КАК Период,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация
	|ПОМЕСТИТЬ ВТФизическиеЛицаКОбработке
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторыКОбработке.Регистратор
	|			ИЗ
	|				ВТРегистраторыКОбработке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсчисленныеСтраховыеВзносы.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(ИсчисленныеСтраховыеВзносы.Период, МЕСЯЦ) КАК Месяц,
	|	ИсчисленныеСтраховыеВзносы.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК ИсчисленныеСтраховыеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаКОбработке КАК ФизическиеЛицаКОбработке
	|		ПО ИсчисленныеСтраховыеВзносы.Период = ФизическиеЛицаКОбработке.Период
	|			И ИсчисленныеСтраховыеВзносы.ФизическоеЛицо = ФизическиеЛицаКОбработке.ФизическоеЛицо
	|			И (НЕ ИсчисленныеСтраховыеВзносы.Регистратор В
	|					(ВЫБРАТЬ
	|						ВТРегистраторыКОбработке.Регистратор
	|					ИЗ
	|						ВТРегистраторыКОбработке))
	|			И ИсчисленныеСтраховыеВзносы.Организация = ФизическиеЛицаКОбработке.Организация
	|ГДЕ
	|	НЕ ФизическиеЛицаКОбработке.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РегистраторыКОбработке.Регистратор,
	|	РегистраторыКОбработке.Месяц,
	|	РегистраторыКОбработке.Организация
	|ИЗ
	|	ВТРегистраторыКОбработке КАК РегистраторыКОбработке
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Месяц,
	|	Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Организация = Выборка.Организация;
		
		Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
			
			ПериодРегистрации = Выборка.Месяц;
			
			Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
				
				Регистратор = Выборка.Регистратор;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("Ссылка", Регистратор);
				
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТФизическиеЛица
				|ИЗ
				|	РегистрНакопления.ИсчисленныеСтраховыеВзносы КАК Начисления
				|ГДЕ
				|	Начисления.Регистратор = &Ссылка";
				Запрос.Выполнить();
				
				УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОВзносах(Организация, ПериодРегистрации, Запрос.МенеджерВременныхТаблиц);
				СтраховыеВзносыПоФизическимЛицам = УчетСтраховыхВзносов.СтраховыеВзносыПоФизическимЛицам(Организация, ПериодРегистрации, Регистратор, Запрос.МенеджерВременныхТаблиц);
				
				НаборЗаписей = РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				Для каждого СтрокаДанных Из СтраховыеВзносыПоФизическимЛицам Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					НоваяСтрока.Организация = Организация;
					НоваяСтрока.Период = ПериодРегистрации;
				КонецЦикла;
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьНастройкиШтатногоРасписания()
	
	НастройкиШтатногоРасписания = Новый Структура("ИспользоватьШтатноеРасписание,НеИспользоватьШтатноеРасписание");
	НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = Истина;
	НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание = Ложь;
	
	Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, НастройкиШтатногоРасписания);
	УправлениеШтатнымРасписанием.ЗаписатьНастройкиШтатногоРасписания(Настройки);
	
КонецПроцедуры

Процедура ОбновитьКлассыУсловийТрудаВШтатномРасписании()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассыУсловийТрудаПоДолжностям.Должность КАК Должность
	|ПОМЕСТИТЬ ВТДолжности
	|ИЗ
	|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Ссылка КАК Ссылка,
	|	Должности.Должность КАК Должность
	|ПОМЕСТИТЬ ВТПозиции
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДолжности КАК Должности
	|		ПО ШтатноеРасписание.Должность = Должности.Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассыУсловийТрудаПоДолжностям.Период КАК Период,
	|	Позиции.Ссылка КАК Должность,
	|	КлассыУсловийТрудаПоДолжностям.КлассУсловийТруда КАК КлассУсловийТруда,
	|	КлассыУсловийТрудаПоДолжностям.ДатаРегистрацииИзменений КАК ДатаРегистрацииИзменений,
	|	КлассыУсловийТрудаПоДолжностям.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.КлассыУсловийТрудаПоДолжностям КАК КлассыУсловийТрудаПоДолжностям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозиции КАК Позиции
	|		ПО КлассыУсловийТрудаПоДолжностям.Должность = Позиции.Должность
	|ГДЕ
	|	КлассыУсловийТрудаПоДолжностям.Должность ССЫЛКА Справочник.Должности";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = РегистрыСведений.КлассыУсловийТрудаПоДолжностям.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.Должность.Установить(Выборка.Должность);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;      
	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.РеквизитДопУпорядочивания = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель,
	|	ВидыКонтактнойИнформации.Тип.Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкаПорядкаЭлементов.УстановитьЗначениеРеквизитаУпорядочивания(СправочникОбъект);
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеНастроекПрограммы(ВариантОбновления)
	
	Обновить = Ложь;
	
	ПараметрыНастроекЗК = ЗарплатаКадрыРасширенный.ПараметрыНастройкиЗарплатаКадрыПоУмолчанию();
	
	Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Если Настройки.Выбран() Тогда
		СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиВоинскогоУчета);
		ПараметрыНастроекЗК.НастройкиВоинскогоУчета = СтруктураНастроек;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Если Настройки.Выбран() Тогда
		СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиУчетаВремени);
		ПараметрыНастроекЗК.НастройкиУчетаВремени = СтруктураНастроек;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Если Настройки.Выбран() Тогда
		СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(Настройки, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
		ПараметрыНастроекЗК.НастройкиРасчетаЗарплаты = СтруктураНастроек;
	КонецЕсли;
	
	Если ВариантОбновления = 1 Тогда
		
		ПараметрыНастроекЗК.НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание = Ложь;
		Обновить = Истина;
		
	ИначеЕсли ВариантОбновления = 2 Тогда  
		
		Обновить = Истина;
		
	КонецЕсли;
	
	Если Обновить Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
			Модуль.ВыполнитьОбновлениеНастроекПрограммыПослеПереносаДанных(ПараметрыНастроекЗК);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьТочностьПоказателей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателей.Показатель КАК Показатель
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Показатель.Точность = 0
	|	И ЗначенияПоказателей.Значение - (ВЫРАЗИТЬ(ЗначенияПоказателей.Значение КАК ЧИСЛО(15, 0))) <> 0
	|	И ЗначенияПоказателей.Показатель.ТипПоказателя В (ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Денежный), ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.Числовой))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПоказательОбъект = Выборка.Показатель.ПолучитьОбъект();
		ПоказательОбъект.Точность = 2;
		ПоказательОбъект.ОбменДанными.Загрузка = Истина;
		ПоказательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеСтажа()
	
	КадровыйУчетРасширенный.ПеренестиПроцентыСевернойНадбавки();
	РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.ЗаполнитьДействуетДоРегистраСведений();
	КадровыйУчетРасширенный.ЗаполнитьНакопленныеСтажиФизическихЛиц();	
	
КонецПроцедуры

Процедура ВидОтпуска_Записать(ОписаниеВидаОтпуска, ИмяПредопределенныхДанных, СсылкаНаОбъект)
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВидОтпускаСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыОтпусков." + ОписаниеВидаОтпуска.ИмяПредопределенныхДанных);
	
	Если Не ЗначениеЗаполнено(ВидОтпускаСсылка) Тогда 
		ВидОтпускаОбъект = Справочники.ВидыОтпусков.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ВидОтпускаОбъект, ОписаниеВидаОтпуска);
		ВидОтпускаОбъект.Записать();
		ОбновитьПовторноИспользуемыеЗначения();
		ВидОтпускаСсылка = ВидОтпускаОбъект.Ссылка;
	КонецЕсли;
	
	Если ИмяПредопределенныхДанных = ОписаниеВидаОтпуска.ИмяПредопределенныхДанных Тогда
		СсылкаНаОбъект = ВидОтпускаСсылка;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьНастройкуПВР()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК ВидРасчета,
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	НЕ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЗаработокНаВремяТрудоустройства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Ссылка КАК ВидРасчета,
	|	Удержания.КатегорияУдержания
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		
		СвойстваНачислений = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
		
		КоллекторНачислений = Новый Соответствие;
		Выборка = Результат[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание =  СвойстваНачислений[Выборка.КатегорияНачисленияИлиНеоплаченногоВремени];
			ВРОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
			Если Описание.ОтборБазовых <> Неопределено Тогда
				ВРОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
			КонецЕсли;
			КоллекторНачислений.Вставить(Выборка.ВидРасчета, ВРОбъект);
			
		КонецЦикла;
		
		СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
		КоллекторУдержаний = Новый Соответствие;
		Выборка = Результат[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Описание =  СвойстваУдержаний[Выборка.КатегорияУдержания];
			ВРОбъект = Выборка.ВидРасчета.ПолучитьОбъект();
			Если Описание.ОтборБазовых <> Неопределено Тогда
				ВРОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
			КонецЕсли;
			КоллекторУдержаний.Вставить(Выборка.ВидРасчета, ВРОбъект);
			
		КонецЦикла;
		
		ПланыВидовРасчета.Начисления.ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГрафикиРаботыПоВидамВремениОбновитьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Ссылка,
	|	ГрафикиРаботыСотрудников.ДатаОтсчета
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонечныйГод = Год(ТекущаяДатаСеанса());
	
	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.Ссылка;
		ДатаОтсчета = Выборка.ДатаОтсчета;
		Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ПервыйГод = Год(ДатаОтсчета);
			ГрафикОбъект = Ссылка.ПолучитьОбъект();
			Для НомерГода = ПервыйГод По КонечныйГод Цикл
				ДанныеГрафика = ГрафикОбъект.ДанныеГрафикаПоНастройкам(НомерГода);
				Попытка
					УчетРабочегоВремениРасширенный.ЗаписатьДанныеГрафика(Ссылка, ДанныеГрафика, НомерГода);
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьВторичныеДанные()

	ЗарплатаКадрыРасширенный.ЗаполнитьРолиСотрудников();
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников();
	ЗарплатаКадры.УстановитьРеквизитыВПодчиненныхПодразделениях(Неопределено);
	ЗарплатаКадрыРасширенный.ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям();

КонецПроцедуры

Процедура ЗаполнитьДанныеПослеКонвертации(Параметры)

	Если Параметры.ЗагруженныеСотрудники.Количество() > 0 Тогда
		КадровыйУчетРасширенный.ОбновитьТекущиеТарифныеСтавки(Параметры.ЗагруженныеСотрудники);
		ОстаткиОтпусков.РассчитатьЗаработанныеОтпускаСпискуСотрудников(Параметры.ЗагруженныеСотрудники, ТекущаяДатаСеанса());
	КонецЕсли;
	
	СостоянияСотрудников.ЗаполнитьСостоянияСотрудников();
	ЗарплатаКадрыРасширенный.ЗаполнитьРолиСотрудников();
	КадровыйУчетРасширенный.ЗаполнитьДанныеДляПодбораСотрудников();
	ЗарплатаКадры.УстановитьРеквизитыВПодчиненныхПодразделениях(Неопределено);
	ЗарплатаКадрыРасширенный.ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям();
	УчетСтажаПФРРасширенный.ЗаполнитьПервоначальныеДанныеУчета();
	
	КадровыйУчетРасширенный.ПеренестиПроцентыСевернойНадбавки();
	РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.ЗаполнитьДействуетДоРегистраСведений();
	КадровыйУчетРасширенный.ЗаполнитьНакопленныеСтажиФизическихЛиц();
	
	// После загрузки всех данных, вызываем методы ЗУП для заполнения сведений
	УчетСтраховыхВзносов.УстановитьФункциональныеОпцииИспользованияСтраховыхВзносовПоКлассамУсловийТруда();
	
КонецПроцедуры

Процедура ВыключитьКонтрольУникальностиТабельныхНомеров(Параметры)

	Настройка = РегистрыСведений.НастройкиКадровогоУчета.СоздатьНаборЗаписей();
	Настройка.Прочитать();
	Записывать = Истина;
	Если Настройка.Количество() > 0 Тогда
		Если Настройка[0].КонтролироватьУникальностьТабельныхНомеров Тогда
			// Выключим контроль уникальности.
			Настройка[0].КонтролироватьУникальностьТабельныхНомеров = Ложь;
			Параметры.ВключитьУникальностьТабельныхНомеров = Истина;
		Иначе
			Записывать = Ложь;
		КонецЕсли;
	Иначе
		Параметры.ВключитьУникальностьТабельныхНомеров = Истина;
		НоваяЗапись = Настройка.Добавить();
		НоваяЗапись.КонтролироватьУникальностьТабельныхНомеров = Ложь;
	КонецЕсли;
	
	Параметры.КонтрольУникальностьТабельныхНомеровВыключен = Истина;
	
	Если Записывать Тогда
		Настройка.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ВключитьКонтрольУникальностиТабельныхНомеров()

	Настройка = РегистрыСведений.НастройкиКадровогоУчета.СоздатьНаборЗаписей();
	Настройка.Прочитать();
	Если Настройка.Количество() > 0 Тогда
		Настройка[0].КонтролироватьУникальностьТабельныхНомеров = Истина;
	Иначе
		НоваяЗапись = Настройка.Добавить();
		НоваяЗапись.КонтролироватьУникальностьТабельныхНомеров = Истина;
	КонецЕсли;
	
	Настройка.Записать();	

КонецПроцедуры

Функция ПозицииШРПоКоллекцииДолжностейПодразделений(КоллекцияДолжностейПодразделений, Параметры)

	ТаблицаПозиций = Новый ТаблицаЗначений;
	ТаблицаПозиций.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПозиций.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Для каждого ЭлементКоллекции Из КоллекцияДолжностейПодразделений Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПозиций.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	ТаблицаПозиций.Свернуть("Подразделение,Должность",);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПозиций", ТаблицаПозиций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПозиций.Подразделение КАК Подразделение,
	|	ТаблицаПозиций.Должность КАК Должность
	|ПОМЕСТИТЬ ВТНовыеПозиции
	|ИЗ
	|	&ТаблицаПозиций КАК ТаблицаПозиций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию,
	|	НовыеПозиции.Подразделение КАК Подразделение,
	|	НовыеПозиции.Должность КАК Должность,
	|	ПодразделенияОрганизаций.Владелец КАК Организация
	|ИЗ
	|	ВТНовыеПозиции КАК НовыеПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|		ПО (ШтатноеРасписание.Подразделение = НовыеПозиции.Подразделение)
	|			И (ШтатноеРасписание.Должность = НовыеПозиции.Должность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО НовыеПозиции.Подразделение = ПодразделенияОрганизаций.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШтатноеРасписание.Ссылка";
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
		Если СтрокаТЗ.ДолжностьПоШтатномуРасписанию = NULL Тогда
			СоздатьЗаполнитьПозициюШтатногоРасписания(СтрокаТЗ, Параметры);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПозиций;

КонецФункции

Процедура ЗаполнитьКоллекциюЗагруженныхОбъектов(Параметры)

	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого Ссылка Из Параметры.ЗагруженныеСотрудники Цикл
		ЗагруженныеОбъекты.Добавить(Ссылка);
	КонецЦикла;
	
	Для каждого Ссылка Из Параметры.ЗагруженныеФизическиеЛица Цикл
		ЗагруженныеОбъекты.Добавить(Ссылка);
	КонецЦикла;
	
	Для каждого Ссылка Из Параметры.ЗагруженныеДолжности Цикл
		ЗагруженныеОбъекты.Добавить(Ссылка);
	КонецЦикла;
	
	Для каждого Ссылка Из Параметры.ЗагруженныеПодразделения Цикл
		ЗагруженныеОбъекты.Добавить(Ссылка);
	КонецЦикла;
	
	Для каждого Ссылка Из Параметры.ЗагруженныеПозиции Цикл
		ЗагруженныеОбъекты.Добавить(Ссылка);
	КонецЦикла;
	
	Для каждого Объект Из Параметры.ЗагруженныеЧерновики Цикл
		ЗагруженныеОбъекты.Добавить(Объект.Ссылка);
	КонецЦикла;
	
	Параметры.Вставить("ЗагруженныеОбъекты", ЗагруженныеОбъекты);

КонецПроцедуры

Процедура ВыключитьИспользованиеШтатногоРасписания(Параметры)
	
	Настройка = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьНаборЗаписей();
	Настройка.Прочитать();
	
	Если Настройка.Количество() > 0 Тогда
		Если Настройка[0].ИспользоватьШтатноеРасписание Тогда
			
			НастройкиШтатногоРасписания = Новый Структура("ИспользоватьШтатноеРасписание,НеИспользоватьШтатноеРасписание");
			НастройкиШтатногоРасписания.ИспользоватьШтатноеРасписание   = Ложь;
			НастройкиШтатногоРасписания.НеИспользоватьШтатноеРасписание = Истина;
			
			Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Настройки, НастройкиШтатногоРасписания);
			Настройки.Записать();
			
			Параметры.ВключитьИспользованиеШтатногоРасписания  = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ИспользованиеШтатногоРасписанияВыключено = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодчиненныхПодразделений()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка КАК Подчиненное,
	|	ОбособленныеПодразделения.Ссылка КАК Вышестоящее
	|ПОМЕСТИТЬ ВТПодразделенияПодчиненныеОбособленным
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ОбособленныеПодразделения
	|		ПО (ОбособленныеПодразделения.ОбособленноеПодразделение)
	|			И (Подразделения.Ссылка В (ОбособленныеПодразделения.Ссылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПодразделенияПодчиненныеОбособленным.Вышестоящее ЕСТЬ NULL 
	|			ТОГДА Подразделения.Владелец
	|		ИНАЧЕ ПодразделенияПодчиненныеОбособленным.Вышестоящее
	|	КОНЕЦ КАК ВышестоящееПодразделение,
	|	ВЫБОР
	|		КОГДА ПодразделенияПодчиненныеОбособленным.Вышестоящее ЕСТЬ NULL 
	|			ТОГДА Подразделения.Владелец.ОбособленноеПодразделение
	|		ИНАЧЕ ПодразделенияПодчиненныеОбособленным.Вышестоящее.ОбособленноеПодразделение
	|	КОНЕЦ КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияПодчиненныеОбособленным КАК ПодразделенияПодчиненныеОбособленным
	|		ПО Подразделения.Ссылка = ПодразделенияПодчиненныеОбособленным.Подчиненное
	|ГДЕ
	|	(Подразделения.РайонныйКоэффициент <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РайонныйКоэффициент
	|				ИНАЧЕ Подразделения.Родитель.РайонныйКоэффициент
	|			КОНЕЦ
	|			ИЛИ Подразделения.РайонныйКоэффициент <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РайонныйКоэффициент
	|				ИНАЧЕ Подразделения.Родитель.РайонныйКоэффициент
	|			КОНЕЦ
	|			ИЛИ Подразделения.РегистрацияВНалоговомОргане <> ВЫБОР
	|				КОГДА Подразделения.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|					ТОГДА Подразделения.Владелец.РегистрацияВНалоговомОргане
	|				ИНАЧЕ Подразделения.Родитель.РегистрацияВНалоговомОргане
	|			КОНЕЦ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИсточникДанных = Выборка.ВышестоящееПодразделение.ПолучитьОбъект();
		ИсточникДанных.ДополнительныеСвойства.Вставить("ОбособленноеПодразделение", Выборка.ОбособленноеПодразделение);
		ЗарплатаКадры.УстановитьРеквизитыВПодчиненныхПодразделениях(ИсточникДанных);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеПоПодборуПерсонала(Параметры) 

	Если Параметры.Свойство("ЗагруженныеКандидаты") И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ОбновитьТекущийЭтапРаботыКандидатов(Параметры.ЗагруженныеКандидаты);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
		Модуль.НастройкиДействийХарактеристикШтатногоРасписания();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.ЗаменитьПозицииСотрудниковПослеЗагрузки(Параметры);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЭтапыРаботыКандидатов(Параметры) 

	Если Параметры.Свойство("ЗагруженныеКандидаты")
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ДобавитьЭтапыРаботыСКандидатамиПослеПереноса();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНастройкиОхраныТруда(Параметры) 

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаполнитьИспользованиеРабочихМестВНастройкахОхраныТруда();
		МодульОхранаТруда.ЗаполнитьПрименениеУсловийТрудаРабочихМестОхраныТрудаВНастройкахОхраныТруда();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
