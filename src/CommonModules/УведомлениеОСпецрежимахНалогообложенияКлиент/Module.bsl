
#Область СлужебныйПрограмныйИнтерфейс

Процедура ОткрытьФормуВыбораКБК(Форма, Область, ЕстьМногостраничность, СтандартнаяОбработка, ОповещениеОВыборе = Неопределено) Экспорт 
	Если Не СтандартнаяОбработка Или Область.Защита = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Форма.СтруктураРеквизитовФормы.Свойство("КодыКБКЗагружены") Тогда 
		СписокКБК = УведомлениеОСпецрежимахНалогообложенияВызовСервера.СпискиКБКИзМакета();
		Для Каждого Элемент Из СписокКБК Цикл 
			НовСтр = Форма.СпискиВыбора.Добавить();
			НовСтр.Код = Элемент.Значение;
			НовСтр.Наименование = Элемент.Представление;
			НовСтр.ИмяПоля = "__ПолеДляКБК__";
		КонецЦикла;
		Форма.СтруктураРеквизитовФормы.Вставить("КодыКБКЗагружены", Истина);
	КонецЕсли;
	
	Строки = Форма.СпискиВыбора.НайтиСтроки(Новый Структура("ИмяПоля", "__ПолеДляКБК__"));
	СтандартнаяОбработка = Ложь;
	Форма.ЗагружаемыеКоды.Очистить();
	Для Каждого Стр Из Строки Цикл 
		НовСтр = Форма.ЗагружаемыеКоды.Добавить();
		НовСтр.Код = Стр.Код;
		НовСтр.Название = Стр.Наименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    Форма.ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
	
	ДополнительныеПараметры = Новый Структура("Область, Форма, ЕстьМногостраничность, ОписаниеОповещения", 
		Область, Форма, ЕстьМногостраничность, ОповещениеОВыборе);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Функция ВидКонтактнойИнформацииАдресСПроверкой() Экспорт 
	Возврат Новый Структура("ПроверятьКорректность, Тип",
		Истина, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФормуКонтактнойИнформации(Форма, СтандартнаяОбработка) Экспорт 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", "Ввод адреса");
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	ПараметрыФормы.Вставить("КонтактнаяИнформация", Форма.ПредставлениеУведомления.Области.АдресJSON.Значение);
	ПараметрыФормы.Вставить("ЗначенияПолей", Форма.ПредставлениеУведомления.Области.АдресJSON.Значение);
	
	ПараметрыКонструктора = Новый Массив(2);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = Форма;
	
	Оповещение = Новый (Тип("ОписаниеОповещения"), ПараметрыКонструктора);
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ОткрытьФормуВыбораКБКЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Результат.Свойство("Значение", ДополнительныеПараметры.Область.Значение);
		ПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.Область, 
			ДополнительныеПараметры.ЕстьМногостраничность);
			
		Если ТипЗнч(ДополнительныеПараметры.ОповещениеОВыборе) = Тип("ОписаниеОповещения") Тогда 
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Результат);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииСодержимогоОбласти(Форма, Область, ЕстьМногостраничность = Ложь) Экспорт
	ОбластьИмя = Область.Имя;
	Форма.Модифицированность = Истина;
	
	Если Форма.ДанныеУведомления.Свойство(Форма.ТекущееИДНаименования) Тогда 
		Форма.ДанныеУведомления[Форма.ТекущееИДНаименования].Вставить(ОбластьИмя, Область.Значение);
		Форма.Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЕстьМногостраничность И Форма.ДанныеМногостраничныхРазделов.Свойство(Форма.ТекущееИДНаименования) Тогда 
		Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[Форма.ТекущееИДНаименования] Цикл 
			Если Элт.Значение.УИД = Форма.УИДТекущаяСтраница Тогда 
				Элт.Значение.Вставить(ОбластьИмя, Область.Значение);
				Форма.Модифицированность = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ОбластьИмя, "_") > 0 Тогда
		МнгЧ = Форма.ОпределитьПринадлежностьОбластиКМногострочномуРазделу(ОбластьИмя);
		Если ЗначениеЗаполнено(МнгЧ) Тогда 
			База = Лев(Область.Имя, СтрНайти(ОбластьИмя, "_") - 1);
			Номер = Число(Сред(ОбластьИмя, СтрНайти(ОбластьИмя, "_") + 1));
			Форма[МнгЧ][Номер-1][База] = Область.Значение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьФормуВыбораПодписантаЗавершение(Форма, Результат) Экспорт
	Если Результат <> Неопределено И Результат <> КодВозвратаДиалога.Нет Тогда
		Результат.Свойство("Фамилия", Форма.Объект.ПодписантФамилия);
		Результат.Свойство("Имя", Форма.Объект.ПодписантИмя);
		Результат.Свойство("Отчество", Форма.Объект.ПодписантОтчество);
		Представление = СокрЛП(Форма.Объект.ПодписантФамилия + " " 
			+ Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		Область = Форма.ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ");
		Область.Значение = Представление;
		ПриИзмененииСодержимогоОбласти(Форма, Область, Истина);
		Форма.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(Форма) = Тип("Структура") И Форма.Свойство("Форма") Тогда 
		ФормаУведомления = Форма.Форма;
		Форма.Свойство("Фамилия", ФормаУведомления.Объект.ПодписантФамилия);
		Форма.Свойство("Имя", ФормаУведомления.Объект.ПодписантИмя);
		Форма.Свойство("Отчество", ФормаУведомления.Объект.ПодписантОтчество);
		Представление = СокрЛП(ФормаУведомления.Объект.ПодписантФамилия + " " 
			+ ФормаУведомления.Объект.ПодписантИмя + " " + ФормаУведомления.Объект.ПодписантОтчество);
		Область = ФормаУведомления.ПредставлениеУведомления.Области.Найти("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ");
		Область.Значение = Представление;
		ПриИзмененииСодержимогоОбласти(ФормаУведомления, Область, Истина);
		ФормаУведомления.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПредставлениеУведомленияВыбор(Форма, Область, СтандартнаяОбработка, ЕстьМногостраничность = Ложь, ЕстьМногострочность = Ложь, ОписаниеОповещения = Неопределено) Экспорт 
	Если Область.Защита = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Строки = Форма.СпискиВыбора.НайтиСтроки(Новый Структура("ИДНаименования,ИмяПоля", Форма.ТекущееИДНаименования, Область.Имя));
	Если Строки.Количество() = 0 Тогда 
		Если ЕстьМногострочность И СтрНайти(Область.Имя, Форма.РазделительНомераСтроки) > 0 Тогда
			Строки = Форма.СпискиВыбора.НайтиСтроки(Новый Структура("ИДНаименования,ИмяПоля", Форма.ТекущееИДНаименования, Лев(Область.Имя, СтрНайти(Область.Имя, Форма.РазделительНомераСтроки) - 1)));
			Если Строки.Количество() = 0 Тогда 
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Форма.ЗагружаемыеКоды.Очистить();
	Для Каждого Стр Из Строки Цикл 
		НовСтр = Форма.ЗагружаемыеКоды.Добавить();
		НовСтр.Код = Стр.Код;
		НовСтр.Название = Стр.Наименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Выбор кода");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    Форма.ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", 
		Новый Структура("Код", ?(ТипЗнч(Область.Значение) = Тип("Число"), Формат(Область.Значение, "ЧГ="), Область.Значение)));
	
	ДополнительныеПараметры = Новый Структура("Область, Форма, ЕстьМногостраничность, ОписаниеОповещения", 
		Область, Форма, ЕстьМногостраничность, ОписаниеОповещения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", 
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОбработкаСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область = ДополнительныеПараметры.Область;
	Форма = ДополнительныеПараметры.Форма;
	ЕстьМногостраничность = ДополнительныеПараметры.ЕстьМногостраничность;
	Область.Значение = РезультатВыбора.Код;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	ПриИзмененииСодержимогоОбласти(Форма, Область, ЕстьМногостраничность);
	Если ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаАдреса(Форма, Область, РоссийскийАдрес, ЗначенияПолей, ПредставлениеАдреса, СтандартнаяОбработка) Экспорт
	РоссийскийАдрес = Новый Соответствие;
	
	РоссийскийАдрес.Вставить("Индекс", Истина);
	РоссийскийАдрес.Вставить("КодРегиона", Истина);
	РоссийскийАдрес.Вставить("Район", Истина);
	РоссийскийАдрес.Вставить("РайонСокращение", Истина);
	РоссийскийАдрес.Вставить("Город", Истина);
	РоссийскийАдрес.Вставить("ГородСокращение", Истина);
	РоссийскийАдрес.Вставить("НаселенныйПункт", Истина);
	РоссийскийАдрес.Вставить("НаселенныйПунктСокращение", Истина);
	РоссийскийАдрес.Вставить("Улица", Истина);
	РоссийскийАдрес.Вставить("УлицаСокращение", Истина);
	РоссийскийАдрес.Вставить("Дом", Истина);
	РоссийскийАдрес.Вставить("ТипДома", Истина);
	РоссийскийАдрес.Вставить("Корпус", Истина);
	РоссийскийАдрес.Вставить("ТипКорпуса", Истина);
	РоссийскийАдрес.Вставить("Квартира", Истина);
	РоссийскийАдрес.Вставить("ТипКвартиры", Истина);
	
	Регионы = Форма.Регионы;
	Префикс = "";
	ОблИмя = Область.Имя;
	Если СтрНачинаетсяС(ОблИмя, "АДДР") Тогда 
		Префикс = Лев(ОблИмя, 6);
		ОблИмя = Сред(ОблИмя, 7);
	КонецЕсли;
	
	Если РоссийскийАдрес.Получить(ОблИмя) = Истина Тогда 
		СтандартнаяОбработка = Ложь;
		Если Регионы.Количество() = 0 Тогда
			УведомлениеОСпецрежимахНалогообложенияВызовСервера.ЗаполнитьРегионы(Регионы);
		КонецЕсли;
		
		Для Каждого КЗ Из РоссийскийАдрес Цикл 
			РоссийскийАдрес[КЗ.Ключ] = Форма.ПредставлениеУведомления.Области[Префикс + КЗ.Ключ].Значение;
		КонецЦикла;
		
		Регион = Регионы.НайтиСтроки(Новый Структура("Код", СокрЛП(РоссийскийАдрес["КодРегиона"])));
		Если Регион.Количество() > 0 Тогда
			РоссийскийАдрес["Регион"] = Регион[0].Наим;
		КонецЕсли;
		
		ЗначенияПолей = Новый СписокЗначений;
		
		ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],						"Индекс");
		ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],					"КодРегиона");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],						"Район");
		ЗначенияПолей.Добавить(РоссийскийАдрес["РайонСокращение"],				"РайонСокращение");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],						"Город");
		ЗначенияПолей.Добавить(РоссийскийАдрес["ГородСокращение"],				"ГородСокращение");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"],				"НаселенныйПункт");
		ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПунктСокращение"],	"НаселенныйПунктСокращение");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],						"Улица");
		ЗначенияПолей.Добавить(РоссийскийАдрес["УлицаСокращение"],				"УлицаСокращение");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],							"Дом");
		ЗначенияПолей.Добавить(РоссийскийАдрес["ТипДома"],						"ТипДома");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],						"Корпус");
		ЗначенияПолей.Добавить(РоссийскийАдрес["ТипКорпуса"],					"ТипКорпуса");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],						"Квартира");
		ЗначенияПолей.Добавить(РоссийскийАдрес["ТипКвартиры"],					"ТипКвартиры");
		ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],						"Регион");
		
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
		+ РоссийскийАдрес["Регион"] + ","
		+ РоссийскийАдрес["КодРегиона"] + ","
		+ РоссийскийАдрес["Район"] + ","
		+ РоссийскийАдрес["Город"] + ","
		+ РоссийскийАдрес["НаселенныйПункт"] + ","
		+ РоссийскийАдрес["Улица"] + ","
		+ РоссийскийАдрес["Дом"] + ","
		+ РоссийскийАдрес["Корпус"] + ","
		+ РоссийскийАдрес["Квартира"]);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьАдресВТабличномДокументе(Форма, Результат, Параметры, ЕстьМногостраничность = Ложь) Экспорт 
	Префикс = ?(Параметры.Свойство("Префикс"), Параметры.Префикс, "");
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		РоссийскийАдрес = Параметры.РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес);
		
		Для Каждого КЗ Из РоссийскийАдрес Цикл 
			Если Прав(КЗ.Ключ, СтрДлина("Сокращение")) = "Сокращение" Тогда 
				БезСокр = СтрЗаменить(КЗ.Ключ, "Сокращение", "");
				
				Если Прав(РоссийскийАдрес[БезСокр], СтрДлина(КЗ.Значение)) = КЗ.Значение Тогда
					РоссийскийАдрес[БезСокр] = СокрЛП(Лев(РоссийскийАдрес[БезСокр], СтрДлина(РоссийскийАдрес[БезСокр]) - СтрДлина(КЗ.Значение)));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			Если Не ЗначениеЗаполнено(РоссийскийАдрес["Дом"])
				И ЗначениеЗаполнено(РоссийскийАдрес["ТипДома"]) Тогда 
				
				РоссийскийАдрес["ТипДома"] = "";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(РоссийскийАдрес["Корпус"])
				И ЗначениеЗаполнено(РоссийскийАдрес["ТипКорпуса"]) Тогда 
				
				РоссийскийАдрес["ТипКорпуса"] = "";
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(РоссийскийАдрес["Квартира"])
				И ЗначениеЗаполнено(РоссийскийАдрес["ТипКвартиры"]) Тогда 
				
				РоссийскийАдрес["ТипКвартиры"] = "";
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Элт = Неопределено;
		Для Каждого КЗ Из РоссийскийАдрес Цикл 
			Обл = Форма.ПредставлениеУведомления.Области.Найти(Префикс + КЗ.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = РоссийскийАдрес[КЗ.Ключ];
				Если Форма.ДанныеУведомления.Свойство(Форма.ТекущееИДНаименования) Тогда 
					Форма.ДанныеУведомления[Форма.ТекущееИДНаименования].Вставить(Префикс + КЗ.Ключ, РоссийскийАдрес[КЗ.Ключ]);
				ИначеЕсли ЕстьМногостраничность И Форма.ДанныеМногостраничныхРазделов.Свойство(Форма.ТекущееИДНаименования) Тогда
					Если Элт = Неопределено Тогда 
						Для Каждого Элт Из Форма.ДанныеМногостраничныхРазделов[Форма.ТекущееИДНаименования] Цикл
							Если Элт.Значение.УИД = Форма.УИДТекущаяСтраница Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Элт.Значение.Вставить(Префикс + КЗ.Ключ, РоссийскийАдрес[КЗ.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ПредставлениеУведомленияВыборКодЗнач(Форма, Область, СтандартнаяОбработка, ЕстьМногостраничность = Ложь) Экспорт 
	Строки = Форма.СпискиВыбора.НайтиСтроки(Новый Структура("ИДНаименования", Форма.ТекущееИДНаименования));
	Если Строки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.ЗагружаемыеКоды.Очистить();
	ОблКодИмя = "";
	ОблЗначИмя = "";
	Для Каждого Стр Из Строки Цикл
		Если СтрНайти(Стр.ИмяПоля, "/") Тогда 
			ПоляКодЗнач = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.ИмяПоля, "/");
			Если ПоляКодЗнач[0] = Область.Имя Или ПоляКодЗнач[1] = Область.Имя Тогда 
				НовСтр = Форма.ЗагружаемыеКоды.Добавить();
				НовСтр.Код = Стр.Код;
				НовСтр.Название = Стр.Наименование;
				ОблКодИмя = ПоляКодЗнач[0];
				ОблЗначИмя = ПоляКодЗнач[1];
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          "Выберете соответствующий код");
	ПараметрыФормы.Вставить("ТаблицаЗначений",    Форма.ЗагружаемыеКоды);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
	
	ДополнительныеПараметры = Новый Структура("ОблКодИмя, ОблЗначИмя, Форма, ЕстьМногостраничность", ОблКодИмя, ОблЗначИмя, Форма, ЕстьМногостраничность);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСпискаКодЗначЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОбработкаСпискаКодЗначЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОблКодИмя = ДополнительныеПараметры.ОблКодИмя;
	ОблЗначИмя = ДополнительныеПараметры.ОблЗначИмя;
	Форма = ДополнительныеПараметры.Форма;
	ЕстьМногостраничность = ДополнительныеПараметры.ЕстьМногостраничность;
	ОблКод = Форма.ПредставлениеУведомления.Области.Найти(ОблКодИмя);
	ОблЗнач = Форма.ПредставлениеУведомления.Области.Найти(ОблЗначИмя);
	Если ЗначениеЗаполнено(РезультатВыбора.Код) Тогда 
		ОблКод.Значение = РезультатВыбора.Код;
		ОблЗнач.Значение = РезультатВыбора.Название;
	Иначе
		ОблКод.Значение = Неопределено;
		ОблЗнач.Значение = Неопределено;
	КонецЕсли;
	ПриИзмененииСодержимогоОбласти(Форма, ОблКод, ЕстьМногостраничность);
	ПриИзмененииСодержимогоОбласти(Форма, ОблЗнач, ЕстьМногостраничность);
КонецПроцедуры

Процедура ПозиционироватьНаОшибочномПоле(НовИд, Форма, Параметр)
	Если НовИд <> Неопределено Тогда 
		ПараметрыПозиционирования = Форма["ПараметрыПозиционирования"];
		ЗаполнитьЗначенияСвойств(ПараметрыПозиционирования, Форма);
		ЗаполнитьЗначенияСвойств(ПараметрыПозиционирования, Параметр);
		Если Форма.Элементы.ДеревоСтраниц.ТекущаяСтрока <> НовИд Тогда 
			Форма.Элементы.ДеревоСтраниц.ТекущаяСтрока = НовИд;
		КонецЕсли;
		Если Форма.ТекущийЭлемент <> Форма.Элементы.ПредставлениеУведомления Тогда 
			Форма.ТекущийЭлемент = Форма.Элементы.ПредставлениеУведомления;
		КонецЕсли;
		Форма.Элементы.ПредставлениеУведомления.ТекущаяОбласть = Форма.ПредставлениеУведомления.Области.Найти(Параметр.ИмяОбласти);
		Если ПараметрыПозиционирования.УИДСтраницы = ПараметрыПозиционирования.УИДТекущаяСтраница Тогда 
			ПараметрыПозиционирования.ИмяОбласти = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Параметр.Владелец) = Тип("ФормаКлиентскогоПриложения") И Параметр.Владелец.Открыта() Тогда 
		Параметр.Владелец.Активизировать();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещенияНавигацииПоОшибкам(Форма, Параметр, Источник) Экспорт 
	Если Не ЗначениеЗаполнено(Параметр.ИмяСтраницы) Тогда 
		Параметр.Владелец.Активизировать();
	ИначеЕсли Форма.ДанныеУведомления.Свойство(Параметр.ИмяСтраницы) Тогда 
		НовИд = НайтиИдПростойСтраницы(Форма.ДеревоСтраниц, Параметр.ИмяСтраницы);
		ПозиционироватьНаОшибочномПоле(НовИд, Форма, Параметр);
	ИначеЕсли ТипЗнч(Форма.ДанныеМногостраничныхРазделов) = Тип("Структура")
		И Форма.ДанныеМногостраничныхРазделов.Свойство(Параметр.ИмяСтраницы) Тогда 
		НовИд = НайтиЭлементПоУИДВДереве(Форма.ДеревоСтраниц.ПолучитьЭлементы(), Параметр.УИДСтраницы);
		ПозиционироватьНаОшибочномПоле(НовИд, Форма, Параметр);
	КонецЕсли;
	Если Источник.Открыта() Тогда 
		Источник.Закрыть();
	КонецЕсли;
КонецПроцедуры

Функция НайтиИдПростойСтраницы(ДеревоСтраниц, ИмяСтраницы)
	Для Каждого Стр Из ДеревоСтраниц.ПолучитьЭлементы() Цикл 
		Если Стр.ИДНаименования = ИмяСтраницы Тогда 
			Возврат Стр.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПодчИд = НайтиИдПростойСтраницы(Стр, ИмяСтраницы);
		Если ПодчИд <> Неопределено Тогда 
			Возврат ПодчИд;
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция НайтиЭлементПоУИДВДереве(Элементы, УИД)
	Для Каждого Элт Из Элементы Цикл 
		Рез = НайтиЭлементПоУИДВДереве(Элт.ПолучитьЭлементы(), УИД);
		Если Рез <> Неопределено Тогда 
			Возврат Рез;
		КонецЕсли;
		Если Элт.УИД = УИД Тогда 
			Возврат Элт.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
КонецФункции

Процедура ОткрытьФормуВыбораФИО(Форма, СтандартнаяОбработка, ИмяПоля, ИмяСтраницы, ОповещениеОбОкончании = Неопределено) Экспорт 
	Если ТипЗнч(ОповещениеОбОкончании) = Тип("ОписаниеОповещения") Тогда 
		ВыборФИО = ОповещениеОбОкончании;
	Иначе
		ВыборФИО = Новый ОписаниеОповещения("ВыборФИОЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыВыборФИО = Новый Структура;
	ПараметрыВыборФИО.Вставить("Фамилия", Форма.Объект.ПодписантФамилия);
	ПараметрыВыборФИО.Вставить("Имя", Форма.Объект.ПодписантИмя);
	ПараметрыВыборФИО.Вставить("Отчество", Форма.Объект.ПодписантОтчество);
	ПараметрыВыборФИО.Вставить("ИмяПоля", ИмяПоля);
	ПараметрыВыборФИО.Вставить("ИмяСтраницы", ИмяСтраницы);
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФИО", ПараметрыВыборФИО, Форма, , , , ВыборФИО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ВыборФИОЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда 
		Форма = Неопределено;
		ИмяПоля = Неопределено;
		ИмяСтраницы = Неопределено;
		Ответ.Свойство("Форма", Форма);
		Ответ.Свойство("ИмяПоля", ИмяПоля);
		Ответ.Свойство("ИмяСтраницы", ИмяСтраницы);
		Ответ.Свойство("Фамилия", Форма.Объект.ПодписантФамилия);
		Ответ.Свойство("Имя", Форма.Объект.ПодписантИмя);
		Ответ.Свойство("Отчество", Форма.Объект.ПодписантОтчество);
		Представление = СокрЛП(Форма.Объект.ПодписантФамилия + " " + Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		Если ЗначениеЗаполнено(ИмяПоля) Тогда 
			Форма[ИмяПоля].Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = Представление;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
			Форма[ИмяСтраницы][0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = Представление;
		КонецЕсли;
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура СвернутьРек(Форма, ИдДляСвор, ТекСтр) Экспорт 
	Если ИдДляСвор.Найти(ТекСтр.ПолучитьИдентификатор()) = Неопределено Тогда 
		Форма.Элементы.ДеревоСтраниц.Развернуть(ТекСтр.ПолучитьИдентификатор(), Ложь);
		Для Каждого Стр Из ТекСтр.ПолучитьЭлементы() Цикл 
			СвернутьРек(Форма, ИдДляСвор, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии(Форма, Отказ) Экспорт 
	Если ТипЗнч(Форма.Элементы.Найти("ДеревоСтраниц")) = Тип("ТаблицаФормы") И ЭтоАдресВременногоХранилища(Форма.СворачиваемыеЭлементы) Тогда 
		ИдДляСвор = ПолучитьИзВременногоХранилища(Форма.СворачиваемыеЭлементы);
		ТекущийЭлемент = Форма.Элементы.ДеревоСтраниц;
		ВидимостьТаблицы = ТекущийЭлемент.Видимость;
		Пока ВидимостьТаблицы 
			И ТекущийЭлемент.Родитель <> Неопределено 
			И ТипЗнч(ТекущийЭлемент.Родитель) <> Тип("ФормаКлиентскогоПриложения") Цикл 
			ТекущийЭлемент = ТекущийЭлемент.Родитель;
			ВидимостьТаблицы = ВидимостьТаблицы И ТекущийЭлемент.Видимость;
		КонецЦикла;
		
		Если ВидимостьТаблицы Тогда 
			Для Каждого Стр Из Форма.ДеревоСтраниц.ПолучитьЭлементы() Цикл
				СвернутьРек(Форма, ИдДляСвор, Стр);
			КонецЦикла;
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Неопределено, Форма.СворачиваемыеЭлементы);
	КонецЕсли;
	Если Форма.Элементы.Найти("ФормаРучнойВвод") <> Неопределено Тогда 
		Форма.Элементы.ФормаРучнойВвод.Пометка = Форма.РучнойВвод;
	КонецЕсли;
	Если Форма.Элементы.Найти("ФормаРазрешитьВыгружатьСОшибками") <> Неопределено Тогда 
		Форма.Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Форма.РазрешитьВыгружатьСОшибками;
	КонецЕсли;
КонецПроцедуры

Асинх Процедура УдалитьСтраницу(Форма) Экспорт
	Если ЗначениеЗаполнено(Форма.Элементы.Найти("ПредставлениеУведомления").ТекущаяОбласть.Текст)
		И КодВозвратаДиалога.Да = Ждать ВопросАсинх("Операция удаления страницы не может быть отменена. Удалить страницу?", РежимДиалогаВопрос.ДаНет) Тогда 
		Форма.УдалитьСтраницу();
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ПерейтиПоНомеру(Форма)
	Если Не ЗначениеЗаполнено(Форма.Элементы.Найти("ПредставлениеУведомления").ТекущаяОбласть.Текст) Тогда 
		Возврат;
	КонецЕсли;
	НомерСтраницы = Ждать ВвестиЧислоАсинх(, "Введите номер страницы текущего раздела", 5, 0);
	Если Не ЗначениеЗаполнено(НомерСтраницы) Или НомерСтраницы < 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = УведомлениеОСпецрежимахНалогообложенияКлиентСервер.НайтиСтрокуВДеревеПоУИД(
		Форма.ДеревоСтраниц.ПолучитьЭлементы(), Форма.УИДТекущаяСтраница);
	Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда 
		Элементы = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		Если НомерСтраницы <= Элементы.Количество() Тогда 
			Форма.Элементы.ДеревоСтраниц.ТекущаяСтрока = Элементы[НомерСтраницы - 1].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ОчиститьУведомление(Форма) Экспорт
	Если КодВозвратаДиалога.Да = Ждать ВопросАсинх("Операция очистки отчета не может быть отменена. Продолжить?", РежимДиалогаВопрос.ДаНет) Тогда
		Форма.ОчисткаОтчета();
		Форма.Модифицированность = Истина;
		Если Форма.Элементы.Найти("ДеревоСтраниц") <> Неопределено Тогда 
			ДеревоСтраницРекв = "ДеревоСтраниц";
		ИначеЕсли Форма.Элементы.Найти("Разделы") <> Неопределено Тогда  
			ДеревоСтраницРекв = "Разделы";
		Иначе
			Возврат;
		КонецЕсли;
		Форма.Элементы[ДеревоСтраницРекв].ТекущаяСтрока = Форма[ДеревоСтраницРекв].ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ЗагрузитьИзФайлаУведомление(Форма) Экспорт
	ПараметрыXML = Неопределено;
	Если СтрНайти(Форма.ИмяФормы, "Отчет.РегламентированноеУведомление") > 0 Тогда 
		Попытка
			ПараметрыXML = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ПолучитьПараметрыЗагружаемогоXML(Форма.ИмяФормы);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда
		ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДВФ.Заголовок = НСтр("ru = 'Выберите файл для загрузки';
							|en = 'Выберите файл для загрузки'");
		ДВФ.МножественныйВыбор = Ложь;
		ДВФ.ПроверятьСуществованиеФайла = Истина;
		ДВФ.Фильтр = НСтр("ru = 'Файлы xml';
							|en = 'Файлы xml'") + " (*.xml)|*.xml";
		
		ВыбранныеФайлы = Ждать ДВФ.ВыбратьАсинх();
		Если ВыбранныеФайлы <> Неопределено Тогда
			ТД = Новый ТекстовыйДокумент;
			Ждать ТД.ПрочитатьАсинх(ВыбранныеФайлы[0], "windows-1251"); 
			ПерваяСтрока = НРег(ТД.ПолучитьСтроку(1));
			НачалоКодировки = СтрНайти(ПерваяСтрока, "encoding=""");
			Если ЗначениеЗаполнено(НачалоКодировки) Тогда 
				ПерваяСтрока = Сред(ПерваяСтрока, НачалоКодировки + СтрДлина("encoding="""));
				ПерваяСтрока = Лев(ПерваяСтрока, СтрНайти(ПерваяСтрока, """") - 1);
				Если ЗначениеЗаполнено(ПерваяСтрока) И ПерваяСтрока <> "windows-1251" Тогда 
					Ждать ТД.ПрочитатьАсинх(ВыбранныеФайлы[0], ПерваяСтрока);
				КонецЕсли;
			КонецЕсли;
			Параметры = Новый Структура("ТекстВыгрузки", ТД.ПолучитьТекст());
			Если ТипЗнч(ПараметрыXML)  = Тип("Структура") Тогда 
				Параметры.Вставить("ПараметрыXML", ПараметрыXML);
			КонецЕсли;
			ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаЗагрузкиИзФайла",
				Параметры, Форма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось подключить расширение работы с файлами!
		|Загрузка из xml-представления невозможна.';
		|en = 'Не удалось подключить расширение работы с файлами!
		|Загрузка из xml-представления невозможна.'"));
	КонецЕсли;
КонецПроцедуры

Функция УровеньГруппировкиВДереве(ТекущиеДанные) Экспорт 
	Возврат ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, 0, 1 + УровеньГруппировкиВДереве(ТекущиеДанные.ПолучитьРодителя()));
КонецФункции

Функция ПолучитьИмяВыводимогоМакета(ТекущиеДанные) Экспорт 
	Если ЗначениеЗаполнено(ТекущиеДанные.ИмяМакета) Тогда 
		Возврат ТекущиеДанные.ИмяМакета;
	Иначе
		Возврат ТекущиеДанные.ПолучитьЭлементы()[0].ИмяМакета;
	КонецЕсли;
КонецФункции

Процедура ЗащитаОбласти(Форма, ИмяОбласти) Экспорт 
	Область = Форма.ПредставлениеУведомления.Области[ИмяОбласти];
	Область.Защита = Истина;
	Область.ЦветФона = Форма.ЦФБ;
КонецПроцедуры

Функция НеобходимоФормированиеТабличногоДокумента(Форма, Элемент, ПредУИД) Экспорт 
	Если Элемент.ТекущиеДанные <> Неопределено 
		И Форма.УИДТекущаяСтраница <> Элемент.ТекущиеДанные.УИД Тогда 
		
		ПредУИД = Форма.УИДТекущаяСтраница;
		Форма.УИДТекущаяСтраница = Элемент.ТекущиеДанные.УИД;
		Форма.ТекущееИДНаименования = Элемент.ТекущиеДанные.ИДНаименования;
		Если Не ЗначениеЗаполнено(Форма.ТекущееИДНаименования) Тогда 
			Форма.ТекущееИДНаименования = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].ИДНаименования;
			Форма.УИДТекущаяСтраница = Элемент.ТекущиеДанные.ПолучитьЭлементы()[0].УИД;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ТиповойВыбор(Форма, Область, СтандартнаяОбработка) Экспорт 
	Если СтандартнаяОбработка = Ложь Тогда 
		Возврат Ложь;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 Тогда
		Форма.ДобавитьСтраницу(Неопределено);
		Форма.Модифицированность = Истина;
		Возврат Истина;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СкопироватьСтраницу") > 0 Тогда
		Форма.СкопироватьСтраницуНаКлиенте();
		Форма.Модифицированность = Истина;
		Возврат Истина;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
		УдалитьСтраницу(Форма);
		Форма.Модифицированность = Истина;
		Возврат Истина;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ПерейтиПоНомеру") > 0 Тогда
		ПерейтиПоНомеру(Форма);
		Возврат Истина;
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "AddStr_") Или СтрНачинаетсяС(Область.Имя, "AddStrLabel_") Тогда
		Форма.ДобавитьСтрокуНаКлиенте(Область.Имя);
		Форма.Модифицированность = Истина;
		Возврат Истина;
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "Del_") И Область.Гиперссылка = Истина Тогда
		Форма.УдалитьСтрокуНаКлиенте(Область.Имя);
		Форма.Модифицированность = Истина;
		Возврат Истина;
	ИначеЕсли Область.Имя = "ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ" Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораПодписантаЗавершение", ЭтотОбъект, Неопределено);
		ОткрытьФормуВыбораФИО(Форма, СтандартнаяОбработка, "ПредставлениеУведомления",
			"ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ОписаниеОповещения);
		Возврат Истина;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	Возврат Ложь;
КонецФункции

Процедура ПроверитьВыгрузку(Форма, ТаблицаОшибок) Экспорт 
	Если ТаблицаОшибок.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
	Иначе
		ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.НавигацияПоОшибкам", Новый Структура("ТаблицаОшибок", ТаблицаОшибок), Форма, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ВыборКодаСтраныИзСправочника(Форма, Область, СтандартнаяОбработка) Экспорт 
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Область, СтандартнаяОбработка, Форма", Область, СтандартнаяОбработка, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКодаСтраныИзСправочникаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), 
			Форма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

Процедура ВыборКодаСтраныИзСправочникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		КодЭлементаСправочника = УведомлениеОСпецрежимахНалогообложенияВызовСервера.РеквизитЭлементаСправочника(Результат, "Код");
		Если ДополнительныеПараметры.Область.Значение <> КодЭлементаСправочника Тогда
			ДополнительныеПараметры.Область.Значение = КодЭлементаСправочника;
			ПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Форма, ДополнительныеПараметры.Область, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМногострочныеЧасти(ТекущиеДанные) Экспорт 
	Если ТекущиеДанные.МногострочныеЧасти.Количество() > 0 Тогда 
		Возврат ТекущиеДанные.МногострочныеЧасти;
	ИначеЕсли ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда 
		Возврат ТекущиеДанные.ПолучитьЭлементы()[0].МногострочныеЧасти;
	Иначе
		Возврат ТекущиеДанные.МногострочныеЧасти;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область РаботаСТребованиями

Процедура ВыбратьОтветНаТребование(Форма) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьОтветНаТребованиеЗавершение", 
		ЭтотОбъект,
		Форма);
		
	Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Письма");
		
	ВыбратьОбъект1СОтчетности(
		ОписаниеОповещения, 
		Форма, 
		Раздел);
	
КонецПроцедуры

Процедура ВыбратьОтветНаТребованиеЗавершение(ОтветНаТребование, Форма) Экспорт 
	
	Если ЗначениеЗаполнено(ОтветНаТребование) Тогда
		
		ДанныеОтветаНаТребование = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ДанныеОтветаНаТребование(ОтветНаТребование);
		Форма.ЗаполнитьФормуПоОтветуНаТребование(ДанныеОтветаНаТребование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьТребование(Форма) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоздатьНаОснованииТребованияЗавершение", 
		ЭтотОбъект,
		Форма);
		
	Раздел = ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Входящие");
		
	ВыбратьОбъект1СОтчетности(
		ОписаниеОповещения, 
		Форма, 
		Раздел);
	
КонецПроцедуры

Процедура СоздатьНаОснованииТребованияЗавершение(Требование, Форма) Экспорт 
	
	Если ЗначениеЗаполнено(Требование) Тогда 
		Форма.ЗаполнитьДаннымиТребования(Требование);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьОбъект1СОтчетности(ВыполняемоеОповещение, Форма, Раздел) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Раздел", Раздел);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьОбъект1СОтчетности_ПослеВыбора", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОтборПоОрганизации = Новый Структура("Объект, Организация");
	ЗаполнитьЗначенияСвойств(ОтборПоОрганизации, Форма);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ЭтоРежимВыбора", Истина);
	ДополнительныеПараметры.Вставить("ОтборОрган", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ДополнительныеПараметры.Вставить("Организация", ?(ЗначениеЗаполнено(ОтборПоОрганизации.Организация), Форма.Организация, Форма.Объект.Организация));
	ДополнительныеПараметры.Вставить("Раздел", Раздел);
	
	ОткрытьФорму(
		"ОбщаяФорма.РегламентированнаяОтчетность", 
		ДополнительныеПараметры,
		,
		Новый УникальныйИдентификатор,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ВыбратьОбъект1СОтчетности_ПослеВыбора(ВыбранныйОбъект, ВходящийКонтекст) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранаПодходящаяСсылка = ВыбранаПодходящаяСсылка(ВыбранныйОбъект, ВходящийКонтекст);
	
	Если ВыбранаПодходящаяСсылка Тогда
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ВыполняемоеОповещение,
			ВыбранныйОбъект);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьОбъект1СОтчетности_ПослеПредупреждения", 
			ЭтотОбъект, 
			ВходящийКонтекст);
			
		ПоказатьПредупреждение(, НСтр("ru = 'Могут быть выбраны только требование или ответ на требование';
										|en = 'Могут быть выбраны только требование или ответ на требование'"));
		
	Конецесли;
	
КонецПроцедуры

Функция ВыбранаПодходящаяСсылка(ВыбранныйОбъект, ВходящийКонтекст) 
	
	ВыбранаПодходящаяСсылка = Ложь;
	Если ЗначениеЗаполнено(ВыбранныйОбъект) Тогда 
		
		ЭтоТребование = ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов");
		ЭтоОтвет      = ТипЗнч(ВыбранныйОбъект) = Тип("СправочникСсылка.ОписиИсходящихДокументовВНалоговыеОрганы");
		
		Если ЭтоТребование ИЛИ ЭтоОтвет Тогда
		
			ВыбранаПодходящаяСсылка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыбранаПодходящаяСсылка;
	
КонецФункции

Процедура ВыбратьОбъект1СОтчетности_ПослеПредупреждения(ВходящийКонтекст) Экспорт 
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение);
		
КонецПроцедуры

Процедура СоздатьПояснениеКИзвещениюОбИсчисленныхНалогах(Форма, Ссылка) Экспорт 
	ОткрытьФорму("Отчет.РегламентированноеУведомлениеПоясненияПоСуммамНалогов.Форма.ФормаВыбораОбъектовИзВходящегоИзвещения",
		Новый Структура("ИзвещениеОСуммах", Ссылка),Форма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОбработкаРучнойВвод(Форма) Экспорт 
	Форма["РучнойВвод"] = Не Форма["РучнойВвод"];
	Форма.Элементы.ФормаРучнойВвод.Пометка = Форма["РучнойВвод"];
КонецПроцедуры

Процедура ОбработкаРазрешитьВыгружатьСОшибками(Форма) Экспорт 
	Форма.РазрешитьВыгружатьСОшибками = Не Форма.РазрешитьВыгружатьСОшибками;
	Форма.Элементы.ФормаРазрешитьВыгружатьСОшибками.Пометка = Форма.РазрешитьВыгружатьСОшибками;
	Форма.Модифицированность = Истина;
КонецПроцедуры

Процедура ОбработкаКопироватьСПодчиненными(Форма) Экспорт
	Форма["СПодчиненными"] = Не Форма["СПодчиненными"];
	Форма.Элементы.ФормаКопироватьСПодчиненными.Пометка = Форма["СПодчиненными"];
КонецПроцедуры

Асинх Процедура ВыгрузитьФайлы(Форма) Экспорт
	РезультатВыгрузки = ПолучитьИзВременногоХранилища(Форма["АдресХранилища"]);
	Если РезультатВыгрузки.Выполнено Тогда 
		Если Не Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда 
			Возврат;
		КонецЕсли;
		
		ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ВыбранныйКаталог = Ждать ДВФ.ВыбратьАсинх();
		Если Не ЗначениеЗаполнено(ВыбранныйКаталог) Тогда 
			Возврат;
		КонецЕсли;
		
		Попытка
			Ждать РезультатВыгрузки.ДвоичныеДанныеАрхива.ЗаписатьАсинх(
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВыбранныйКаталог[0]) + РезультатВыгрузки.ИмяФайла);
			ОбщегоНазначенияКлиент.СообщитьПользователю("Файл сохранен в папку " + ВыбранныйКаталог[0]);
		Исключение
			ТекстСообщения = "Не удалось записать файл """ + РезультатВыгрузки.ИмяФайла 
						   + """! Возможно, нет прав для записи в выбранный каталог, нет доступа к файлу, т. к. файл открыт"
						   + " в другой программе, недостаточно места на диске или не подключено расширение для работы с файлами.";
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																													|en = '%1'"), ТекстСообщения));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЖурналыСправок

Асинх Процедура ЗагрузитьИзФайлаСправку(Форма) Экспорт 
	Если Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда
		ДВФ = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДВФ.Заголовок = НСтр("ru = 'Выберите файл для загрузки';
							|en = 'Выберите файл для загрузки'");
		ДВФ.МножественныйВыбор = Ложь;
		ДВФ.ПроверятьСуществованиеФайла = Истина;
		ДВФ.Фильтр = НСтр("ru = 'Файлы xml';
							|en = 'Файлы xml'") + " (*.xml)|*.xml";
		ВыбранныеФайлы = Ждать ДВФ.ВыбратьАсинх();
		
		Если ВыбранныеФайлы <> Неопределено Тогда
			ТД = Новый ТекстовыйДокумент;
			Ждать ТД.ПрочитатьАсинх(ВыбранныеФайлы[0], "windows-1251");
			ПерваяСтрока = НРег(ТД.ПолучитьСтроку(1));
			НачалоКодировки = СтрНайти(ПерваяСтрока, "encoding=""");
			Если ЗначениеЗаполнено(НачалоКодировки) Тогда 
				ПерваяСтрока = Сред(ПерваяСтрока, НачалоКодировки + СтрДлина("encoding="""));
				ПерваяСтрока = Лев(ПерваяСтрока, СтрНайти(ПерваяСтрока, """") - 1);
				Если ЗначениеЗаполнено(ПерваяСтрока) И ПерваяСтрока <> "windows-1251" Тогда 
					Ждать ТД.ПрочитатьАсинх(ВыбранныеФайлы[0], ПерваяСтрока);
				КонецЕсли;
			КонецЕсли;
			Форма.ЗагрузитьСправкуИзXMLНаКлиенте(Новый Структура("ТД", ТД));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось подключить расширение работы с файлами!
		|Загрузка из xml-представления невозможна.';
		|en = 'Не удалось подключить расширение работы с файлами!
		|Загрузка из xml-представления невозможна.'"));
	КонецЕсли;
КонецПроцедуры

Функция ТиповойВыборЖурналСправок(Форма, Область, СтандартнаяОбработка) Экспорт 
	Если Область.Имя = "ПечатьСправки" Тогда
		Форма.ПечатьСправкиНаСервере();
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
			Форма, "Открыть", Ложь, Форма.СтруктураРеквизитовУведомления.СписокПечатаемыхЛистов);
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	ИначеЕсли Область.Имя = "ПроверитьВыгрузкуСправки" Тогда
		ПроверитьВыгрузку(Форма, Форма.ПроверитьВыгрузкуСправкиНаСервере());
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	ИначеЕсли Область.Имя = "ВыгрузитьСправку" Тогда
		ВыгружаемыеДанные = Форма.СформироватьСправкуXMLНаСервере(Форма.УникальныйИдентификатор);
		Если ВыгружаемыеДанные <> Неопределено Тогда 
			РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	ИначеЕсли Область.Имя = "ЗагрузитьИзФайла" Тогда
		ЗагрузитьИзФайлаСправку(Форма);
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	ИначеЕсли Область.Имя = "ПечатьPDF417" Тогда 
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(Форма);
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Процедура ОбработкаКомандыРаботыСоСправкамиЗаблокированногоОбъекта(Команда, Форма) Экспорт
	Область = Форма.ПредставлениеУведомления.Области.Найти(Команда.Имя);
	Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда 
		ТиповойВыборЖурналСправок(Форма, Область, Ложь);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Для выполнения операции необходимо выбрать налогоплательщика в дереве разделов");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если ВебКлиент Тогда

Асинх Процедура ПоказатьПрисоединенныйФайлВВебКлиенте(ПрисоединенныйФайл, РасширениеФайла = "") Экспорт 
	Если Ждать РегламентированнаяОтчетностьКлиент.РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда
		Каталог = Ждать РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузкиАсинх();
		Если ЗначениеЗаполнено(Каталог) Тогда 
			ДанныеФайла = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ДанныеФайлаДляОткрытия(ПрисоединенныйФайл);
			ИмяВременногоФайла = Каталог + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + "." 
				+ ?(ЗначениеЗаполнено(РасширениеФайла), РасширениеФайла, ДанныеФайла.Расширение);
			Ждать ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла).ЗаписатьАсинх(ИмяВременногоФайла);
			Ждать ЗапуститьПриложениеАсинх(ИмяВременногоФайла);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецЕсли

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать
// УведомлениеОСпецрежимахНалогообложенияИнтеграцияКлиент.ОткрытьИЗаполнитьФормуУведомленияККТ().
//
Процедура ОткрытьИЗаполнитьФормуУведомленияККТ(ДанныеЗаполнения, ИмяФормы = "Форма2018_1") Экспорт
	
	УведомлениеОСпецрежимахНалогообложенияИнтеграцияКлиент.ОткрытьИЗаполнитьФормуУведомленияККТ(ДанныеЗаполнения, ИмяФормы);
	
КонецПроцедуры

#КонецОбласти

