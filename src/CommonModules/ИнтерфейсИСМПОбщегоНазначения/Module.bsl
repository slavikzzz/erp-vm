
#Область ПрограммныйИнтерфейс

#Область РазрешительныйРежимРозничныхПродаж

// Получить сокращенную информацию по КМ с крипточастью.
// 
// Параметры:
//  ДанныеПроверкиКМ - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  Организация - ОпределяемыйТип.Организация - Организация
//  ИдентификаторФискальногоНакопителя - Строка - идентификатор фискального накопителя
//  ТаймаутНаПродажу - Булево - использовать таймаут на розничную продажу. Если за таймаут не был получен ответ,
//   продажа разрешена
//  ЭтоОперацияПробития - Булево - флаг устанавливается, если процедура вызывается длительной операцией при пробитии
// 
// Возвращаемое значение:
//  Структура - Получить информацию по КМ от ККТ:
//  * АварийныйРежим - Булево - Истина, если действует аварийный режим или в ходе проверки он был объявлен
//  * ТребуетсяОбновлениеКлючаСессии - Булево - признак необходимости обновления ключа сессии
//  * ТребуетсяОбновлениеCDNПлощадок - Булево - признак необходимости обновления списка CDN-площадок
//  * ОтсутствуютCDNПлощадки - Булево - возвращает признак отсутствия CDN площадок, запросы не были отправлены
//  * РезультатыОтправкиЗапросов - Массив из см. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
//  * СтатусыКодовМаркировкиГИСМТ - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - см. ПараметрыКодаМаркировкиМОТП
//  * КодыМаркировкиБезДанныхГИСМТ - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - Булево - Истина, если можно продавать товар в отсутствие ответа ГИС МТ - например, истек таймер на ожидание ответа,
//			или получены ошибки 500 по молочной продукции из Беларуси
//			Если от ГИС МТ был получен ответ - он пишется в СтатусыКодовМаркировкиГИСМТ, и опираться следует на полученные от него данные
//  * ТекстОшибки - Строка - текст ошибки, полученной от ГИС МТ
// 		Общий текст ошибки, ошибки запросов по всем кодам
Функция СокращеннаяИнформацияПоКМПриРозничнойПродаже(ДанныеПроверкиКМ, Организация, ИдентификаторФискальногоНакопителя, ТаймаутНаПродажу = Истина, ЭтоОперацияПробития = Ложь) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АварийныйРежим",                  Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",  КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеCDNПлощадок",  Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствуютCDNПлощадки",          Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",      Новый Массив);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировкиГИСМТ",     Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("КодыМаркировкиБезДанныхГИСМТ",    Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                     "");
	
	МассивКМ                  = Новый Массив;
	СоответствиеПолногоКодаКМ = Новый Соответствие();
	МассивПлощадокКБлокировке = Новый Массив;
	
	Для Каждого СтрокаДанныхПроверкиКМ Из ДанныеПроверкиКМ Цикл
		
		ПолныйКодКМ = СтрокаДанныхПроверкиКМ.ПолныйКодМаркировки;
		
		Если Не ЗначениеЗаполнено(ПолныйКодКМ) Тогда
			Продолжить;
		КонецЕсли;
		
		КодМаркировкиНаПроверку = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(ПолныйКодКМ);
		МассивКМ.Добавить(КодМаркировкиНаПроверку);
		
		СоответствиеПолногоКодаКМ.Вставить(КодМаркировкиНаПроверку, СтрокаДанныхПроверкиКМ);
		
	КонецЦикла;
	
	Если МассивКМ.Количество() = 0 Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ВозвращаемоеЗначение.АварийныйРежим = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	
	Если ВозвращаемоеЗначение.АварийныйРежим Тогда
		
		// на срок действия аварийного режима разрешена продажа без разрешительного режима
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	ЛогироватьУспешныеПроверки = (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПередПробитиемЧека)
		И ОбщегоНазначенияИСМППовтИсп.ХранитьУспешныеОперацииПриПроверкеКМ()
		И Не ЭтоОперацияПробития;
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураДополнительныхПараметров.Вставить("Организация",                Организация);
	СтруктураДополнительныхПараметров.Вставить("ИННОрганизации",             "");
	СтруктураДополнительныхПараметров.Вставить("НомерФН",                    ИдентификаторФискальногоНакопителя);
	СтруктураДополнительныхПараметров.Вставить("КешОрганизаций",             Новый Соответствие());
	СтруктураДополнительныхПараметров.Вставить("ЛогироватьУспешныеПроверки", ЛогироватьУспешныеПроверки);
	
	СтруктураДополнительныхПараметров.ИННОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
	СтруктураДополнительныхПараметров.КешОрганизаций.Вставить(Организация, СтруктураДополнительныхПараметров.ИННОрганизации);
	
	ДанныеCDNПлощадок = ОбщегоНазначенияИСМП.СортированнаяТаблицаCDNПлощадок();
	ВозвращаемоеЗначение.ТребуетсяОбновлениеCDNПлощадок = ДанныеCDNПлощадок.ТребуетсяОбновлениеПлощадок;
	
	Если ДанныеCDNПлощадок.ТаблицаПлощадок.Количество() = 0 Тогда
		
		// если список площадок отсутствует вовсе - вернуть ошибку
		ВозвращаемоеЗначение.ОтсутствуютCDNПлощадки = Истина;
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	КешСоединений = Новый Соответствие();
	
	Для Каждого КодМаркировки Из МассивКМ Цикл
		
		ДанныеШтрихкода = СоответствиеПолногоКодаКМ.Получить(КодМаркировки);
		
		РезультатОбработкиКМ = ОбработатьКодМаркировкиНаCDNПлощадках(КодМаркировки,
			ДанныеШтрихкода,
			ДанныеCDNПлощадок.ТаблицаПлощадок,
			КлючСессии,
			МассивПлощадокКБлокировке,
			СтруктураДополнительныхПараметров,
			КешСоединений,
			ТаймаутНаПродажу);
		
		ВозвращаемоеЗначение.АварийныйРежим                 = РезультатОбработкиКМ.АварийныйРежим;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатОбработкиКМ.ТребуетсяОбновлениеКлючаСессии;
		
		Для Каждого РезультатОтправкиЗапросаНаПлощадку Из РезультатОбработкиКМ.РезультатыОтправкиЗапросов Цикл
			ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиЗапросаНаПлощадку);
		КонецЦикла;
		
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
			+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
			+ РезультатОбработкиКМ.ТекстОшибки;
		
		Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
			
			// если была получена ошибка 401 хотя бы по одному КМ - прервать обработку,
			// необходимо обновление ключа сессии
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.АварийныйРежим Тогда
			
			// если был получен код 203 хотя бы по одному КМ - прервать обработку,
			// действует аварийный режим
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		Если Не РезультатОбработкиКМ.ПараметрыКодаМаркировки = Неопределено Тогда
			
			// по КМ был получен ответ из ГИС МТ
			ВозвращаемоеЗначение.СтатусыКодовМаркировкиГИСМТ.Вставить(ДанныеШтрихкода, РезультатОбработкиКМ.ПараметрыКодаМаркировки);
			
		КонецЕсли;
		
		Если РезультатОбработкиКМ.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
			
			// продажа разрешена по таймауту или как молочка из Беларуси
			ВозвращаемоеЗначение.КодыМаркировкиБезДанныхГИСМТ.Вставить(ДанныеШтрихкода, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПлощадокКБлокировке.Количество() > 0 Тогда
		
		ОбщегоНазначенияИСМП.ЗаблокироватьСписокПлощадок(МассивПлощадокКБлокировке);
		
		// все блокировки перенесены в регистр, надо убрать заблокированные площадки из массива Параметра сеанса
		ПлощадкиСОшибкамиОбмена       = ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП.Получить();
		
		Для Каждого ПлощадкаСОшибками Из ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки Цикл
			
			Если МассивПлощадокКБлокировке.Найти(ПлощадкаСОшибками.Ключ) <> Неопределено Тогда
				ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки.Удалить(ПлощадкаСОшибками.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ПлощадкаСТаймаутами Из ПлощадкиСОшибкамиОбмена.НетОтветаПоПлощадке Цикл
			
			Если МассивПлощадокКБлокировке.Найти(ПлощадкаСТаймаутами.Ключ) <> Неопределено Тогда
				ПлощадкиСОшибкамиОбмена.НетОтветаПоПлощадке.Удалить(ПлощадкаСТаймаутами.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП = Новый ХранилищеЗначения(ПлощадкиСОшибкамиОбмена);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Актуализация списка CDN-площадок для обращения в ГИС МТ методом розничной продажи.
//  При своевременной актуализации списка гарантируется максимально быстрое получение идентификаторов
//  разрешительного режима для ускорения розничной продажи.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
// 
// Возвращаемое значение:
//  Структура - результат обновления площадок:
// * ТребуетсяОбновлениеКлючаСессииРозница - Булево - признак необходимости обновления ключа сессии
// * РезультатОтправкиЗапроса - (См. ОбщегоНазначенияИСМП.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON).
// * СписокПлощадок - Соответствие Из КлючИЗначение - полученные CDN-площадки:
//		** Ключ - Строка - Адрес площадки.
//		** Значение - (см. ЗамерыСкоростиCDNПлощадок)
// * ТекстОшибки - Строка - текст ошибки, полученной от ГИС МТ
Функция АктуализацияСпискаCDNПлощадок(Организация) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",              Неопределено);
	ВозвращаемоеЗначение.Вставить("СписокПлощадок",                        Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("X-API-KEY",      КлючСессии);
	
	URLЗапроса = "api/v4/true-api/cdn/info";
	
	ПараметрыЗапросов         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОтправкиHTTPЗапросов(, Истина, Истина);
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		,
		КлючСессии,
		"GET",
		ПараметрыЗапросов,
		ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	КоличествоЗапросовПоОднойПлощадкеДляУсредненияРезультата = 3;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			КодОтвета       = ДанныеОбработки.Получить("code") <> 0;
			
			Если КодОтвета <> 0 Тогда
				
				ШаблонОтвета = НСтр("ru = 'Получен неверный запрос. Код ответа - %1: %2';
									|en = 'Получен неверный запрос. Код ответа - %1: %2'");
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(ШаблонОтвета, КодОтвета, ДанныеОбработки.Получить("description"));
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
			СписокПлощадок = ДанныеОбработки.Получить("hosts");
			
			Для Каждого Площадка Из СписокПлощадок Цикл
				
				АдресПлощадки = Площадка.Получить("host");
				URLЗапроса    = "api/v4/true-api/cdn/health/check";
				
				СтруктураАдреса = РегистрыСведений.СостоянияCDNПлощадокИСМП.РазобратьАдресПлощадкиНаСерверИПорт(АдресПлощадки);
				
				ПараметрыЗапросов = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОтправкиHTTPЗапросов(, Истина);
				ПараметрыЗапросов.Сервер                           = СтруктураАдреса.Сервер;
				ПараметрыЗапросов.Порт                             = СтруктураАдреса.Порт;
				ПараметрыЗапросов.ИспользоватьЗащищенноеСоединение = СтруктураАдреса.ЗащищенноеСоединение;
				
				ЗамерыПоПлощадке               = Новый Массив();
				
				Для Индекс = 1 По КоличествоЗапросовПоОднойПлощадкеДляУсредненияРезультата Цикл
					
					НачалоЗамеровУниверсальнаяДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
					
					РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
						URLЗапроса,
						,
						КлючСессии,
						"GET",
						ПараметрыЗапросов,
						ЗаголовокHTTP);
					
					РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
					
					Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
						
						Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
							
							ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
							СреднееВремяОбработкиКМ = 0;
							
							Если ДанныеОбработки.Получить("avgTimeMs") <> Неопределено Тогда
								СреднееВремяОбработкиКМ = ДанныеОбработки.Получить("avgTimeMs");
							КонецЕсли;
							
							ЗамерПоПлощадке = Новый Структура("НачалоЗамера, КонецЗамера, СреднееВремяОбработкиКМ",
								НачалоЗамеровУниверсальнаяДата,
								ТекущаяУниверсальнаяДатаВМиллисекундах(),
								СреднееВремяОбработкиКМ);
								
							ЗамерыПоПлощадке.Добавить(ЗамерПоПлощадке);
							
						Иначе
							
							Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
								
								ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
								Возврат ВозвращаемоеЗначение;
								
							КонецЕсли;
							
							ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
								АдресПлощадки + "/" + URLЗапроса,
								РезультатОтправкиЗапроса);
							// вернулась ошибка в ответе по площадке
							// такую площадку не записываем, переходим к следующей
							Прервать;
							
						КонецЕсли;
						
					Иначе
						
						ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
							+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС + Символы.ПС, "")
							+ ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
								АдресПлощадки + "/" + URLЗапроса,
								РезультатОтправкиЗапроса);
						// не получен ответ от площадки
						// такую площадку не записываем, переходим к следующей
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОбщееВремяПроверкиКМ = 0;
				ОбщееВремяОтвета     = 0;
				
				Для Каждого ЗамерВремени Из ЗамерыПоПлощадке Цикл
					
					ОбщееВремяПроверкиКМ = ОбщееВремяПроверкиКМ + ЗамерВремени.СреднееВремяОбработкиКМ;
					ОбщееВремяОтвета     = ОбщееВремяОтвета + (ЗамерВремени.КонецЗамера - ЗамерВремени.НачалоЗамера);
					
				КонецЦикла;
				
				СтруктураЗамеров = ЗамерыСкоростиCDNПлощадок();
				
				Если ЗамерыПоПлощадке.Количество() = 0 Тогда
					
					// ответа от площадок не получено, площадка получает минимальный рейтинг в списке
					СтруктураЗамеров.СреднееВремяПроверкиКМ = -1;
					СтруктураЗамеров.СреднееВремяОтвета     = -1;
					
				Иначе
					
					СтруктураЗамеров.СреднееВремяПроверкиКМ = ОбщееВремяПроверкиКМ / КоличествоЗапросовПоОднойПлощадкеДляУсредненияРезультата;
					СтруктураЗамеров.СреднееВремяОтвета     = ОбщееВремяОтвета / КоличествоЗапросовПоОднойПлощадкеДляУсредненияРезультата;
					
				КонецЕсли;
				
				ВозвращаемоеЗначение.СписокПлощадок.Вставить(АдресПлощадки, СтруктураЗамеров);
				
			КонецЦикла;
			
		Иначе
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
				
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
			
		КонецЕсли;
		
		// не получен список площадок, таймаут или иные проблемы
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// 	Организация   - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - см. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON - Результат
//	отправки запроса.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ     - Строка - Штрихкод EAN.
// 	 ** Значение - см. ИнициализироватьДанныеПродукции - Реквизиты продукции:
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение, ВидПродукции = Неопределено, Организация = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТелоЗапроса                   = Новый Структура("gtins", Новый Массив);
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	ИсходныеЗначенияЗапроса       = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(Значение);
		ИсходныеЗначенияЗапроса.Вставить(GTIN, Значение);
		
		ТелоЗапроса.gtins.Добавить(GTIN);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Для Каждого ШтрихкодEAN Из Значение Цикл
			GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(ШтрихкодEAN);
			ИсходныеЗначенияЗапроса.Вставить(GTIN, ШтрихкодEAN);
			ТелоЗапроса.gtins.Добавить(GTIN);
		КонецЦикла;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка';
								|en = 'Внутренняя ошибка'");
	КонецЕсли;
	
	ПараметрыОтправкиHTTPЗапросов = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
	
	URLЗапроса = "api/v4/true-api/product/info";
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии,
		"POST", ПараметрыОтправкиHTTPЗапросов);
		
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.results Цикл
					
					ДанныеПродукции = ИнициализироватьДанныеПродукции(ЭлементДанных);
					
					КлючРезультата = ИсходныеЗначенияЗапроса.Получить(ДанныеПродукции.GTIN);
					Если КлючРезультата = Неопределено Тогда
						КлючРезультата = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(ДанныеПродукции.GTIN)
					КонецЕсли;
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(КлючРезультата, ДанныеПродукции);
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОтправкиЗапроса.КодСостояния <> 404 Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить места осуществления деятельности.
// 
// Параметры:
// 	Организация   - ОпределяемыйТип.Организация - Организация.
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - см. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON - Результат
//	отправки запроса.
// 	* МестаОсуществленияДеятельности - Неопределено - Если при получении данных возникла ошибка.
// 	                                - Соответствие Из КлючИЗначение - 
// 	 ** Ключ     - Строка - КодФИАС
// 	 ** Значение - Строка - Код ФИАС
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция МестаОсуществленияДеятельности(Организация, ВидПродукции) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("МестаОсуществленияДеятельности", Новый Массив());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТелоЗапроса                   = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
	
	ТелоЗапроса.Вставить("pg", Новый Массив());
	ТелоЗапроса.pg.Добавить(ТоварнаяГруппа(ВидПродукции));
	
	URLЗапроса = "api/v3/true-api/mods/info";
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапроса, КлючСессии,
		"POST", ПараметрыОтправкиHTTPЗапросов);
		
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.mods Цикл
					
					Если ЭлементДанных.isBlocked Тогда
						Продолжить;
					КонецЕсли;
					
					КодФИАС = Неопределено;
					ЭлементДанных.Свойство("fiasId", КодФИАС);
					
					Если ЗначениеЗаполнено(КодФИАС) Тогда
						
						СтрокаРезультат = Новый Структура();
						СтрокаРезультат.Вставить("КодФИАС", КодФИАС);
						
						ВозвращаемоеЗначение.МестаОсуществленияДеятельности.Добавить(СтрокаРезультат);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОтправкиЗапроса.КодСостояния <> 404 Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Метод возвращает список МОД, которые соответствуют товарной группе «Пиво, напитки, 
// изготавливаемые на основе пива, слабоалкогольные напитки» и принадлежат участнику оборота 
// товаров, выполняющему запрос.
// 
// Параметры:
// 	Организация   - ОпределяемыйТип.Организация - Организация
// 	ИННУчастника  - Строка                      - необязательный отбор по ИНН участника оборота
// 	КППУчастника  - Строка                      - необязательный отбор по КПП участника оборота
// 	КодФИАС       - Строка                      - необязательный отбор по коду ФИАС конкретного проверяемого МОДа
// Возвращаемое значение:
// 	Структура:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса - Неопределено,
// 	                             См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON() - результат.
// 	* МестаОсуществленияДеятельности - Неопределено - Если при получении данных возникла ошибка.
// 	                                 - Массив Из Структура: 
// 	 ** КодФИАС     - Строка - КодФИАС.
// 	 ** Адрес       - Строка - представление адреса
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СписокМестОсуществленияДеятельности(Организация, ИННУчастника = "", КППУчастника = "", КодФИАС = "") Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("МестаОсуществленияДеятельности", Новый Массив());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив();
	
	Если ЗначениеЗаполнено(ИННУчастника) Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("inns=%1", ИННУчастника));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КППУчастника) Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("kpp=%1", КППУчастника));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодФИАС) Тогда
		ПараметрыЗапроса.Добавить(СтрШаблон("fiasId=%1", КодФИАС));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон("api/v3/true-api/mods/list%1",
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Для Каждого ЭлементДанных Из ДанныеОбработки.result Цикл
					
					Если ЭлементДанных.Свойство("isBlockedEgais") И ЭлементДанных.isBlockedEgais Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураДанных = Новый Структура("fiasId, address", Неопределено, Неопределено);
					ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭлементДанных);
					
					Если ЗначениеЗаполнено(СтруктураДанных.fiasId) Или ЗначениеЗаполнено(СтруктураДанных.address) Тогда
						
						СтрокаРезультат = Новый Структура();
						СтрокаРезультат.Вставить("КодФИАС", СтруктураДанных.fiasId);
						СтрокаРезультат.Вставить("Адрес",   СтруктураДанных.address);
						
						ВозвращаемоеЗначение.МестаОсуществленияДеятельности.Добавить(СтрокаРезультат);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОтправкиЗапроса.КодСостояния <> 404 Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных кода маркировки.
// Параметры:
// 	ЭлементДанных - Соответствие из КлючИЗначение, Структура, Неопределено - Данные ГИС МТ
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции.
// 	ДополнительныеПараметры - Структура:
// 		* НастройкиРазбора - см. РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки.
// 		* Организация - ОпределяемыйТип.Организация
// 		* КешОрганизаций - Соответствие из КлючИЗначение - кеш для получения ИНН организаций-владельцев кода:
// 			** Ключ - ОпределяемыйТип.Организация - организация
// 			** Значение - Строка - ИНН организации
//
// Возвращаемое значение:
//  см. ИнициализироватьПараметрыКодаМаркировкиМОТП
Функция ПараметрыКодаМаркировкиМОТП(ЭлементДанных = Неопределено, ВидПродукции = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыКодаМаркировки = ИнициализироватьПараметрыКодаМаркировкиМОТП();
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат ПараметрыКодаМаркировки;
	КонецЕсли;
	
	ТипЭлементаДанных = ТипЗнч(ЭлементДанных);
	Если ТипЭлементаДанных = Тип("Соответствие") Тогда
		ИсточникДанных = ЭлементДанных;
	ИначеЕсли ТипЭлементаДанных = Тип("КлючИЗначение") Тогда	
		ИсточникДанных = ЭлементДанных.Значение;
	ИначеЕсли ТипЭлементаДанных = Тип("Структура") Тогда
		ИсточникДанных = Новый Соответствие();
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИсточникДанных, ЭлементДанных);
	КонецЕсли;
	
	Значение = ИсточникДанных["productGroup"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ВидПродукции = ТоварнаяГруппа(Значение, ВидПродукции);
	Иначе
		
		Значение = ИсточникДанных["groupIds"];
		
		Если Значение <> Неопределено И Значение.Количество() Тогда
			ПараметрыКодаМаркировки.ВидПродукции = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ТоварнаяГруппаЧислом(Значение[0], ВидПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидПродукцииДляРазбораКода = ВидПродукции;
	Если ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции) Тогда
		ВидПродукцииДляРазбораКода = ПараметрыКодаМаркировки.ВидПродукции;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииДляРазбораКода) Тогда
		ВызватьИсключение НСтр("ru = 'Вид продукции определить не удалось';
								|en = 'Вид продукции определить не удалось'");
	КонецЕсли;
	
	Статус = ИсточникДанных["status"];
	Если Статус <> Неопределено Тогда
	
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукцииДляРазбораКода) Тогда
			
			ПараметрыКодаМаркировки.Статус = СтатусКодаМаркировкиМОТП(Статус);
			
			Если ЗначениеЗаполнено(ИсточникДанных["statusEx"]) Тогда
				ПараметрыКодаМаркировки.ОсобоеСостояние = СтатусКодаМаркировкиМОТП(ИсточникДанных["statusEx"]);
			КонецЕсли;
			
		Иначе
			
			ПараметрыКодаМаркировки.Статус          = СтатусКодаМаркировкиИСМП(Статус);
			
			Если ЗначениеЗаполнено(ИсточникДанных["statusEx"]) Тогда
				ПараметрыКодаМаркировки.ОсобоеСостояние = СтатусКодаМаркировкиИСМП(ИсточникДанных["statusEx"]);
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		СтруктураДанныхСтатуса = Новый Структура();
		СтруктураДанныхСтатуса.Вставить("Валидность",                    Ложь);
		СтруктураДанныхСтатуса.Вставить("Наличие",                       Ложь);
		СтруктураДанныхСтатуса.Вставить("УспешнаяПроверкаКриптоподписи", Ложь);
		СтруктураДанныхСтатуса.Вставить("Нанесен",                       Ложь);
		СтруктураДанныхСтатуса.Вставить("ВозможностьРеализации",         Ложь);
		СтруктураДанныхСтатуса.Вставить("Продано",                       Ложь);
		
		Валидность                    = ИсточникДанных["valid"];
		Наличие                       = ИсточникДанных["found"];
		УспешнаяПроверкаКриптоподписи = ИсточникДанных["verified"];
		Нанесен                       = ИсточникДанных["utilised"];
		ВозможностьРеализации         = ИсточникДанных["realizable"];
		Продано                       = ИсточникДанных["sold"];
		
		Если Валидность <> Неопределено Тогда
			СтруктураДанныхСтатуса.Валидность = Валидность;
		КонецЕсли;
		
		Если Наличие <> Неопределено Тогда
			СтруктураДанныхСтатуса.Наличие = Наличие;
		КонецЕсли;
		
		Если УспешнаяПроверкаКриптоподписи <> Неопределено Тогда
			СтруктураДанныхСтатуса.УспешнаяПроверкаКриптоподписи = УспешнаяПроверкаКриптоподписи;
		КонецЕсли;
		
		Если Нанесен <> Неопределено Тогда
			СтруктураДанныхСтатуса.Нанесен = Нанесен;
		КонецЕсли;
		
		Если ВозможностьРеализации <> Неопределено Тогда
			СтруктураДанныхСтатуса.ВозможностьРеализации = ВозможностьРеализации;
		КонецЕсли;
		
		Если Продано <> Неопределено Тогда
			СтруктураДанныхСтатуса.Продано = Продано;
		КонецЕсли;
		
		ПараметрыКодаМаркировки.Статус = СтатусКодаМаркировкиПоДаннымГИСМТ(СтруктураДанныхСтатуса, ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукцииДляРазбораКода));
		
	КонецЕсли;
	
	Значение    = ИсточникДанных["packageType"];
	ЗначениеДоп = ИсточникДанных["generalPackageType"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ВидУпаковки = ВидУпаковки(Значение, ВидПродукцииДляРазбораКода, ЗначениеДоп);
	КонецЕсли;
	
	Значение = ИсточникДанных["ownerInn"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ИННВладельца = Значение;
	Иначе
		
		Значение = ИсточникДанных["isOwner"];
		Если Значение <> Неопределено И (Значение Или ИсточникДанных["isTracking"] = Ложь) Тогда
			
			Если ДополнительныеПараметры.Свойство("Организация") Тогда
				
				Организация    = ДополнительныеПараметры.Организация;
				ИННОрганизации = Неопределено;
				
				Если ДополнительныеПараметры.Свойство("КешОрганизаций") Тогда
					ИННОрганизации = ДополнительныеПараметры.КешОрганизаций.Получить(Организация);
				КонецЕсли;
				
				Если ИННОрганизации = Неопределено Тогда
					ИННОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
				КонецЕсли;
				
				ПараметрыКодаМаркировки.ИННВладельца = ИННОрганизации;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = ИсточникДанных["gtin"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.GTIN = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["lastDocId"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ИдентификаторДокумента = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["producerInn"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ИННПроизводителя = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["productName"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ПредставлениеНоменклатуры = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["producerName"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.НаименованиеПроизводителя = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["grayZone"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ВСеройЗоне = Значение;
	Иначе
		ПараметрыКодаМаркировки.ВСеройЗоне = Ложь;
	КонецЕсли;
	
	Значение = ИсточникДанных["innerUnitCount"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.КоличествоВПотребительскойУпаковке = Значение;
	КонецЕсли;
	
	Значение = ИсточникДанных["maxRetailPrice"];
	Если Значение <> Неопределено Тогда
		
		ПараметрыКодаМаркировки.МРЦ = Значение;
		ПривестиЗначениеМРЦ(ПараметрыКодаМаркировки);
		
	Иначе
		
		Значение = ИсточникДанных["mrp"];
		Если Значение <> Неопределено Тогда
			
			ПараметрыКодаМаркировки.МРЦ = Значение;
			ПривестиЗначениеМРЦ(ПараметрыКодаМаркировки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Значение = ИсточникДанных["expirationDate"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ГоденДо = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
	Иначе
		Значение = ИсточникДанных["expireDate"];
		Если Значение <> Неопределено Тогда
			ПараметрыКодаМаркировки.ГоденДо = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Значение = ИсточникДанных["emissionDate"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаЭмиссии = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
	КонецЕсли;
	
	Значение = ИсточникДанных["emissionType"];
	Если Значение <> Неопределено И ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		//@skip-check wrong-string-literal-content
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсИСМПСлужебный");
		ПараметрыКодаМаркировки.СпособВводаВОборот = Модуль.СпособВыпускаВОборот(Значение);
		
	КонецЕсли;
	
	Значение = ИсточникДанных["producedDate"];
	Если Значение <> Неопределено Тогда
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ПараметрыКодаМаркировки.ВидПродукции) Тогда
			ПараметрыКодаМаркировки.ДатаПроизводства = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
		Иначе
			ПараметрыКодаМаркировки.ДатаВводаВОборот = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
		КонецЕсли;
		
	Иначе
		
		Значение = ИсточникДанных["productionDate"];
		Если Значение <> Неопределено Тогда
			
			ПараметрыКодаМаркировки.ДатаПроизводства = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Значение = ИсточникДанных["introducedDate"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаВводаВОборот = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
	КонецЕсли;
	
	Значение = ИсточникДанных["connectDate"];
	Если Значение <> Неопределено Тогда
		ПараметрыКодаМаркировки.ДатаПодключения = ОбщегоНазначенияИС.ДатаИзСтроки(Значение);
	КонецЕсли;
	
	ДанныеЧастичногоВыбытия = ИсточникДанных["partialSaleInfo"];
	Если ДанныеЧастичногоВыбытия <> Неопределено Тогда
		ПараметрыКодаМаркировки.ЕмкостьПотребительскойУпаковки = ДанныеЧастичногоВыбытия["innerUnitCount"];
		ПараметрыКодаМаркировки.ЧастичноеВыбытиеВыведено       = ДанныеЧастичногоВыбытия["soldUnitCount"];
		ПараметрыКодаМаркировки.ЧастичноеВыбытиеОстатокГИСМТ   = ДанныеЧастичногоВыбытия["rest"];
		КорректностьОстатка                                    = ДанныеЧастичногоВыбытия["correctRest"];
		Если КорректностьОстатка <> Неопределено Тогда
			ПараметрыКодаМаркировки.ЧастичноеВыбытиеНеКорректно = Не (КорректностьОстатка);
		КонецЕсли;
	Иначе
		
		ДанныеЧастичногоВыбытия = Новый Структура();
		ДанныеЧастичногоВыбытия.Вставить("ЕмкостьПотребительскойУпаковки", 0);
		ДанныеЧастичногоВыбытия.Вставить("ЧастичноеВыбытиеВыведено",       0);
		ДанныеЧастичногоВыбытия.Вставить("ЧастичноеВыбытиеОстатокГИСМТ",   0);
		ДанныеЧастичногоВыбытия.Вставить("ЕстьДанныеЧастичногоВыбытия",    Ложь);
			
		Если ИсточникДанных["innerUnitCount"] <> Неопределено Тогда
			
			ДанныеЧастичногоВыбытия.ЕмкостьПотребительскойУпаковки = ИсточникДанных["innerUnitCount"];
			ДанныеЧастичногоВыбытия.ЕстьДанныеЧастичногоВыбытия    = Истина;
			
		КонецЕсли;
		
		Если ИсточникДанных["soldUnitCount"] <> Неопределено Тогда
			
			ДанныеЧастичногоВыбытия.ЧастичноеВыбытиеВыведено       = ИсточникДанных["soldUnitCount"];
			ДанныеЧастичногоВыбытия.ЕстьДанныеЧастичногоВыбытия    = Истина;
			
		КонецЕсли;
		
		Если ДанныеЧастичногоВыбытия.ЕстьДанныеЧастичногоВыбытия Тогда
			
			Если ПараметрыКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
				Или ПараметрыКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
				Или ПараметрыКодаМаркировки.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
				КоэффициентПересчета = 0.001;
			Иначе
				КоэффициентПересчета = 1;
			КонецЕсли;
			
			ПараметрыКодаМаркировки.ЕмкостьПотребительскойУпаковки = ДанныеЧастичногоВыбытия.ЕмкостьПотребительскойУпаковки * КоэффициентПересчета;
			ПараметрыКодаМаркировки.ЧастичноеВыбытиеВыведено       = ДанныеЧастичногоВыбытия.ЧастичноеВыбытиеВыведено * КоэффициентПересчета;
			ДанныеЧастичногоВыбытия.ЧастичноеВыбытиеОстатокГИСМТ   = ПараметрыКодаМаркировки.ЕмкостьПотребительскойУпаковки - ПараметрыКодаМаркировки.ЧастичноеВыбытиеВыведено;
			ПараметрыКодаМаркировки.ЧастичноеВыбытиеОстатокГИСМТ   = ДанныеЧастичногоВыбытия.ЧастичноеВыбытиеОстатокГИСМТ;
			КорректностьОстатка                                    = ПараметрыКодаМаркировки.ЧастичноеВыбытиеОстатокГИСМТ > 0;
			Если КорректностьОстатка <> Неопределено Тогда
				ПараметрыКодаМаркировки.ЧастичноеВыбытиеНеКорректно = Не (КорректностьОстатка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсточникДанных["parent"] <> Неопределено Тогда
		ПараметрыКодаМаркировки.РодительскаяУпаковка = ИсточникДанных["parent"];
	КонецЕсли;
	
	ПараметрыКодаМаркировки.СписокОрганизацийБлокировкиКМ = Новый Массив;
	
	Если ИсточникДанных["isBlocked"] <> Неопределено Тогда
		
		ПараметрыКодаМаркировки.ПродажаЗаблокирована = ИсточникДанных["isBlocked"];
		
		Значение = ИсточникДанных["ogvs"];
		
		Если Значение <> Неопределено Тогда
			ПараметрыКодаМаркировки.СписокОрганизацийБлокировкиКМ = Значение;
		КонецЕсли;
		
	Иначе
		ПараметрыКодаМаркировки.ПродажаЗаблокирована = Ложь;
	КонецЕсли;
	
	Если ИсточникДанных["child"] <> Неопределено
		И ИсточникДанных["child"].Количество() > 0 Тогда
		
		Если ДополнительныеПараметры.Свойство("НастройкиРазбора")
			И Не ДополнительныеПараметры.НастройкиРазбора = Неопределено Тогда
			НастройкиРазбораКодаМаркировки = ДополнительныеПараметры.НастройкиРазбора;
		Иначе
			ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
			ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
			
			НастройкиРазбораКодаМаркировки = Новый Структура;
			НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
			НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(, Ложь));
			НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

		КонецЕсли;
		
		ПараметрыКодаМаркировки.ВложенныеУпаковки = Новый Соответствие();
		Для Каждого ВложенныйКодМаркировки Из ИсточникДанных["child"] Цикл
			
			СтрокаКодаМаркировки = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаУпрощенныйРазбор(
				ВложенныйКодМаркировки, ВидПродукцииДляРазбораКода, НастройкиРазбораКодаМаркировки);
			
			Если ПараметрыКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				И Не ЗначениеЗаполнено(СтрокаКодаМаркировки.ВидУпаковки)
				И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
					ВидПродукции,
					Перечисления.ВидыУпаковокИС.Потребительская,
					СтрокаКодаМаркировки.ДанныеРазбора) Тогда
				СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
			
			Если ПараметрыКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И Не ЗначениеЗаполнено(СтрокаКодаМаркировки.ВидУпаковки)
				И РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
					ВидПродукции,
					Перечисления.ВидыУпаковокИС.Потребительская,
					СтрокаКодаМаркировки.ДанныеРазбора) Тогда
				СтрокаКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
			КонецЕсли;
			
			СтрокаКодаМаркировки.Вставить("РодительскаяУпаковка", ИсточникДанных["cis"]);
			ШтрихкодированиеОбщегоНазначенияМОТП.РассчитатьХэшСуммуНормализации(
				СтрокаКодаМаркировки,
				СтрокаКодаМаркировки.ДанныеРазбора);
			
			ПараметрыКодаМаркировки.ВложенныеУпаковки.Вставить(
				ВложенныйКодМаркировки,
				СтрокаКодаМаркировки);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыКодаМаркировки.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		ПараметрыКодаМаркировки.ВложенныеУпаковки = Новый Соответствие;
	КонецЕсли;
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

Функция ИнициализироватьПараметрыКодаМаркировкиМОТП() Экспорт
	
	ПараметрыКодаМаркировки = Новый Структура;
	ПараметрыКодаМаркировки.Вставить("РезультатРазбора");
	
	ПараметрыКодаМаркировки.Вставить("Статус");
	ПараметрыКодаМаркировки.Вставить("ОсобоеСостояние");
	
	ПараметрыКодаМаркировки.Вставить("ИННВладельца");
	ПараметрыКодаМаркировки.Вставить("НаименованиеВладельца");
	ПараметрыКодаМаркировки.Вставить("НаименованиеПроизводителя");
	ПараметрыКодаМаркировки.Вставить("ИННПроизводителя");
	ПараметрыКодаМаркировки.Вставить("GTIN");
	ПараметрыКодаМаркировки.Вставить("ПредставлениеНоменклатуры");
	
	ПараметрыКодаМаркировки.Вставить("ИдентификаторДокумента");
	
	ПараметрыКодаМаркировки.Вставить("ДатаЭмиссии",      '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаПроизводства", '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаВводаВОборот", '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаСписания",     '00010101');
	ПараметрыКодаМаркировки.Вставить("ГоденДо",          '00010101');
	ПараметрыКодаМаркировки.Вставить("ДатаПодключения",  '00010101');
	
	ПараметрыКодаМаркировки.Вставить("РодительскаяУпаковка");
	ПараметрыКодаМаркировки.Вставить("ВложенныеУпаковки");
	ПараметрыКодаМаркировки.Вставить("ВидУпаковки");
	ПараметрыКодаМаркировки.Вставить("ВидПродукции");
	ПараметрыКодаМаркировки.Вставить("СпособВводаВОборот");
	
	ПараметрыКодаМаркировки.Вставить("МРЦ");
	ПараметрыКодаМаркировки.Вставить("ДатаПроизводства");
	
	ПараметрыКодаМаркировки.Вставить("ЕмкостьПотребительскойУпаковки");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеВыведено");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеОстатокГИСМТ");
	ПараметрыКодаМаркировки.Вставить("ЧастичноеВыбытиеНеКорректно");
	
	ПараметрыКодаМаркировки.Вставить("ПродажаЗаблокирована");
	ПараметрыКодаМаркировки.Вставить("СписокОрганизацийБлокировкиКМ");
	ПараметрыКодаМаркировки.Вставить("ВСеройЗоне");
	ПараметрыКодаМаркировки.Вставить("КоличествоВПотребительскойУпаковке");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимИдентификаторЗапросаГИСМТ");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимДатаЗапросаГИСМТ");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимАдресСервера");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоЗапросаJSON");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимТелоОтветаJSON");
	ПараметрыКодаМаркировки.Вставить("РазрешительныйРежимКодОтвета");
	
	Возврат ПараметрыКодаМаркировки;
	
КонецФункции

// Преобразовывает текстовое представление товарной группы в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ВидыПродукцииИС, Строка - значение для перекодировки
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции для уточнения неоднозначности 
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, Строка - Товарная группа.
Функция ТоварнаяГруппа(Знач ЗначениеПоиска, ВидПродукции = Неопределено) Экспорт
	
	Если ЗначениеПоиска = Неопределено Тогда
		Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = НРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "lp" Или ЗначениеПоиска = "clothes" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность2025 Тогда
				Возврат Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность2025;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "shoes" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Обувь;
		ИначеЕсли ЗначениеПоиска = "perfumery" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Духи;
		ИначеЕсли ЗначениеПоиска = "tires" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Шины;
		ИначеЕсли ЗначениеПоиска = "electronics" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Фотоаппараты;
		ИначеЕсли ЗначениеПоиска = "milk" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
				Возврат Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "bicycle" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Велосипеды;
		ИначеЕсли ЗначениеПоиска = "wheelchairs" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации Тогда
				Возврат Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия Тогда
				Возврат Перечисления.ВидыПродукцииИС.МедицинскиеИзделия;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия20 Тогда
				Возврат Перечисления.ВидыПродукцииИС.МедицинскиеИзделия20;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.КреслаКоляски;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "otp" Тогда
			Возврат Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
		ИначеЕсли ЗначениеПоиска = "water" Тогда
			Возврат Перечисления.ВидыПродукцииИС.УпакованнаяВода;
		ИначеЕсли ЗначениеПоиска = "tobacco" Тогда
			Возврат Перечисления.ВидыПродукцииИС.Табак;
		ИначеЕсли ЗначениеПоиска = "beer" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
				Возврат Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.Пиво;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "ncp" Тогда
			Возврат Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
		ИначеЕсли ЗначениеПоиска = "bio" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы2025 Тогда
				Возврат Перечисления.ВидыПродукцииИС.БАДы2025;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.БАДы;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "antiseptic" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.ДезинфицирующиеСредства Тогда
				Возврат Перечисления.ВидыПродукцииИС.ДезинфицирующиеСредства;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.Антисептики;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "seafood" Тогда
			Возврат Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС;
		ИначеЕсли ЗначениеПоиска = "furs" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
		ИначеЕсли ЗначениеПоиска = "softdrinks" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки Тогда
				Возврат Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.СоковаяПродукция;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "nabeer" Тогда
			Возврат Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
		ИначеЕсли ЗначениеПоиска = "petfood" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС Тогда
				Возврат Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС Тогда
				Возврат Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС Тогда
				Возврат Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "meat" Тогда
			Возврат Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС;
		ИначеЕсли ЗначениеПоиска = "vetpharma" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты;
		ИначеЕсли ЗначениеПоиска = "toys" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей;
		ИначеЕсли ЗначениеПоиска = "radio" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки Тогда
				Возврат Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки;
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПечатныеПлаты Тогда
				Возврат Перечисления.ВидыПродукцииИС.ПечатныеПлаты;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "titan" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция;
		ИначеЕсли ЗначениеПоиска = "conserve" Тогда
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
				Возврат Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС;
			Иначе
				Возврат Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС;
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = "vegetableoil" Тогда
			Возврат Перечисления.ВидыПродукцииИС.РастительныеМасла;
		ИначеЕсли ЗначениеПоиска = "opticfiber" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция;
		ИначеЕсли ЗначениеПоиска = "chemistry" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия;
		ИначеЕсли ЗначениеПоиска = ПечатнаяПродукцияИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.ПечатнаяПродукция;
		ИначеЕсли ЗначениеПоиска = СтроительныеМатериалыИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.СтроительныеМатериалы;
		ИначеЕсли ЗначениеПоиска = ОтопительныеПриборыИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.ОтопительныеПриборы;
		ИначеЕсли ЗначениеПоиска = БакалеяИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.Бакалея;
		ИначеЕсли ЗначениеПоиска = АлкогольнаяПродукцияДо9ПроцентовИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов;
		ИначеЕсли ЗначениеПоиска = ПиротехническиеИзделияИСредстваПожарнойБезопасностиИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности;
		ИначеЕсли ЗначениеПоиска = КабельнаяПродукцияИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.КабельнаяПродукция;
		ИначеЕсли ЗначениеПоиска = МоторныеМаслаИмяТоварнойГруппы() Тогда
			Возврат Перечисления.ВидыПродукцииИС.МоторныеМасла;
		ИначеЕсли ЗначениеПоиска = "polymer" Тогда
			Возврат Перечисления.ВидыПродукцииИС.ПолимерныеТрубы;
		ИначеЕсли ЗначениеПоиска = "sweets" Тогда
			Возврат Перечисления.ВидыПродукцииИС.СладостиИКондитерскиеИзделия;
		Иначе
			Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеПоиска) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Если ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность2025 Тогда
			Возврат "lp";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Обувь Тогда
			Возврат "shoes";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Духи Тогда
			Возврат "perfumery";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Шины Тогда
			Возврат "tires";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
			Возврат "electronics";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
				Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
			Возврат "milk";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
			Возврат "bicycle";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КреслаКоляски
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия20 Тогда
			Возврат "wheelchairs";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			Возврат "otp";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
			Возврат "water";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Табак Тогда
			Возврат "tobacco";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Пиво
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			Возврат "beer";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
			Возврат "ncp";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.БАДы
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.БАДы2025 Тогда
			Возврат "bio";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Антисептики
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ДезинфицирующиеСредства Тогда
			Возврат "antiseptic";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
			Возврат "seafood";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			Возврат "furs";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.СоковаяПродукция
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки Тогда
			Возврат "softdrinks";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
			Возврат "nabeer";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КормаДляЖивотныхВлажныеБезВЕТИС Тогда
			Возврат "petfood";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС Тогда
			Возврат "meat";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты Тогда
			Возврат "vetpharma";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей Тогда
			Возврат "toys";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПечатныеПлаты Тогда
			Возврат "radio";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция Тогда
			Возврат "titan";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС
			Или ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС Тогда
			Возврат "conserve";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.РастительныеМасла Тогда
			Возврат "vegetableoil";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция Тогда
			Возврат "opticfiber";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
			Возврат "chemistry";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПечатнаяПродукция Тогда
			Возврат ПечатнаяПродукцияИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.СтроительныеМатериалы Тогда
			Возврат СтроительныеМатериалыИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ОтопительныеПриборы Тогда
			Возврат ОтопительныеПриборыИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.Бакалея Тогда
			Возврат БакалеяИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов Тогда
			Возврат АлкогольнаяПродукцияДо9ПроцентовИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
			Возврат ПиротехническиеИзделияИСредстваПожарнойБезопасностиИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.КабельнаяПродукция Тогда
			Возврат КабельнаяПродукцияИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.МоторныеМасла Тогда
			Возврат МоторныеМаслаИмяТоварнойГруппы();
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.ПолимерныеТрубы Тогда
			Возврат "polymer";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыПродукцииИС.СладостиИКондитерскиеИзделия Тогда
			Возврат "sweets";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Перечисления.ВидыПродукцииИС.ПустаяСсылка();
	
КонецФункции

// Преобразовывает текстовое представление статуса кода маркировки ИСМП в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП, Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП, Строка - статус кода маркировки.
Функция СтатусКодаМаркировкиИСМП(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Неопределено Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "EMITTED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован;
		ИначеЕсли ЗначениеПоиска = "APPLIED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен;
		ИначеЕсли ЗначениеПоиска = "INTRODUCED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот;
		ИначеЕсли ЗначениеПоиска = "RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота;
		ИначеЕсли ЗначениеПоиска = "DISAGGREGATED" Или ЗначениеПоиска = "DISAGGREGATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован;
		ИначеЕсли ЗначениеПоиска = "WRITTEN_OFF" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Списан;
			
		// Расширенные статусы
		ИначеЕсли ЗначениеПоиска = "RESERVED_NOT_USED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		ИначеЕсли ЗначениеПоиска = "INTRODUCED_RETURNED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате;
		ИначеЕсли ЗначениеПоиска = "EXPORTED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован;
		ИначеЕсли ЗначениеПоиска = "WAIT_REMARK" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки;
		ИначеЕсли ЗначениеПоиска = "WAIT_SHIPMENT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки;
		ИначеЕсли ЗначениеПоиска = "WAIT_TRANSFER_TO_OWNER" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику;
		ИначеЕсли ЗначениеПоиска = "EMPTY" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		
		ИначеЕсли ЗначениеПоиска = "REMARK_RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке;
		ИначеЕсли ЗначениеПоиска = "LOAN_RETIRED" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки;
		ИначеЕсли ЗначениеПоиска = "RETIRED_CANCELLATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания;
		ИначеЕсли ЗначениеПоиска = "RETIRED_EEC_EXPORT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС;
		ИначеЕсли ЗначениеПоиска = "RETIRED_BEYOND_EEC_EXPORT" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС;
		ИначеЕсли ЗначениеПоиска = "RETIRED_RETURN" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу;
		ИначеЕсли ЗначениеПоиска = "RETIRED_DAMAGE_LOSS" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении;
		ИначеЕсли ЗначениеПоиска = "RETIRED_DESTRUCTION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении;
		ИначеЕсли ЗначениеПоиска = "RETIRED_CONFISCATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация;
		ИначеЕсли ЗначениеПоиска = "RETIRED_LIQUIDATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия;
		ИначеЕсли ЗначениеПоиска = "RETIRED_ENTERPRISE_USE" Или ЗначениеПоиска = "RETIRED_NO_RETAIL_USE" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия;
		ИначеЕсли ЗначениеПоиска = "RETIRED_DONATION" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаБезвозмезднаяПередача;
		ИначеЕсли ЗначениеПоиска = "RETIRED_STATE_ENTERPRISE" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриобретенГосударственнымПредприятием;
		ИначеЕсли ЗначениеПоиска = "RETIRED_REMOTE_SALE" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриДистанционнойПродаже;
		
		ИначеЕсли ЗначениеПоиска = "FTS_RESPOND_NOT_OK" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОтрицательноеРешениеФТС;
		ИначеЕсли ЗначениеПоиска = "FTS_RESPOND_WAITING" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС;
		ИначеЕсли ЗначениеПоиска = "FTS_CONTROL" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.НаКонтролеФТС;
		ИначеЕсли ЗначениеПоиска = "IN_GRAY_ZONE" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.НаходитсяВСеройЗоне;
		ИначеЕсли ЗначениеПоиска = "NON_INDIVIDUAL" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.НеИндивидуализирован;
		ИначеЕсли ЗначениеПоиска = "INDIVIDUAL" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Индивидуализирован;
		ИначеЕсли ЗначениеПоиска = "CONNECT_TAP" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ПодключенКОборудованиюРозлива;
		ИначеЕсли ЗначениеПоиска = "PRIM_RESPONSE_WAITING" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетОтветОтВЕТИС;
		ИначеЕсли ЗначениеПоиска = "LOST_INVENTORY" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОтсутствуетПоИтогуИнвентаризации;
		ИначеЕсли ЗначениеПоиска = "MOVING_BY_UD" Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПеремещенияМеждуМОД;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован Тогда
			Возврат "EMITTED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен Тогда
			Возврат "APPLIED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот Тогда
			Возврат "INTRODUCED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота Тогда
			Возврат "RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Разагрегирован Тогда
			Возврат "DISAGGREGATED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Списан Тогда
			Возврат "WRITTEN_OFF";
		
		// Расширенные статусы
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен Тогда
			Возврат "RESERVED_NOT_USED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборотПриВозврате Тогда
			Возврат "INTRODUCED_RETURNED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Экспортирован Тогда
			Возврат "EXPORTED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПовторнойМаркировки Тогда
			Возврат "WAIT_REMARK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетДоставки Тогда
			Возврат "WAIT_SHIPMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПередачуСобственнику Тогда
			Возврат "WAIT_TRANSFER_TO_OWNER";
		
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриПеремаркировке Тогда
			Возврат "REMARK_RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПоДоговоруРассрочки Тогда
			Возврат "LOAN_RETIRED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВРезультатеСписания Тогда
			Возврат "RETIRED_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа Тогда
			Возврат "RETIRED_RETAIL";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированВСтраныЕАЭС Тогда
			Возврат "RETIRED_EEC_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЭкспортированЗаПределыСтранЕАЭС Тогда
			Возврат "RETIRED_BEYOND_EEC_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаВозвращенФизическомуЛицу Тогда
			Возврат "RETIRED_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУтратеИлиПовреждении Тогда
			Возврат "RETIRED_DAMAGE_LOSS";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриУничтожении Тогда
			Возврат "RETIRED_DESTRUCTION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаКонфискация Тогда
			Возврат "RETIRED_CONFISCATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаЛиквидацияПредприятия Тогда
			Возврат "RETIRED_LIQUIDATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаИспользованДляСобственныхНуждПредприятия Тогда
			Возврат "RETIRED_ENTERPRISE_USE";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаБезвозмезднаяПередача Тогда
			Возврат "RETIRED_DONATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриобретенГосударственнымПредприятием Тогда
			Возврат "RETIRED_STATE_ENTERPRISE";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаПриДистанционнойПродаже Тогда
			Возврат "RETIRED_REMOTE_SALE";
		
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОтрицательноеРешениеФТС Тогда
			Возврат "FTS_RESPOND_NOT_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПодтверждениеФТС Тогда
			Возврат "FTS_RESPOND_WAITING";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.НаКонтролеФТС Тогда
			Возврат "FTS_CONTROL";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.НаходитсяВСеройЗоне Тогда
			Возврат "IN_GRAY_ZONE";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.НеИндивидуализирован Тогда
			Возврат "NON_INDIVIDUAL";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.Индивидуализирован Тогда
			Возврат "INDIVIDUAL";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ПодключенКОборудованиюРозлива Тогда
			Возврат "CONNECT_TAP";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетОтветОтВЕТИС Тогда
			Возврат "PRIM_RESPONSE_WAITING";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОтсутствуетПоИтогуИнвентаризации Тогда
			Возврат "LOST_INVENTORY";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыКодовМаркировкиИСМП.ОжидаетПеремещенияМеждуМОД Тогда
			Возврат "MOVING_BY_UD";
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус кода маркировки: %1';
				|en = 'Неизвестный статус кода маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление вида упаковки в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
//  ВидПродукции   - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
//  ЗначениеПоискаДополнительное - Строка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки.
//
Функция ВидУпаковки(Знач ЗначениеПоиска, ВидПродукции, ЗначениеПоискаДополнительное = Неопределено) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			
			Если ЗначениеПоиска = "UNIT" Тогда
				Возврат Перечисления.ВидыУпаковокИС.Потребительская;
			ИначеЕсли ЗначениеПоиска = "GROUP" Или ЗначениеПоискаДополнительное = "GROUP" Тогда
				Возврат Перечисления.ВидыУпаковокИС.Групповая;
			ИначеЕсли ЗначениеПоиска = "SET" Или ЗначениеПоискаДополнительное = "SET" Или ЗначениеПоиска = "PRODUCT_SET" Тогда
				Возврат Перечисления.ВидыУпаковокИС.Набор;
			ИначеЕсли ЗначениеПоиска = "LEVEL1" Тогда
				Возврат Перечисления.ВидыУпаковокИС.Групповая;
			ИначеЕсли СтрНайти(ЗначениеПоиска, "LEVEL") > 0 Тогда
				Возврат Перечисления.ВидыУпаковокИС.Логистическая;
			ИначеЕсли ЗначениеПоиска = "BOX" Тогда
				Возврат Перечисления.ВидыУпаковокИС.Логистическая;
			КонецЕсли;
			
			ВызватьИсключение
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид упаковки: %1';
						|en = 'Неизвестный вид упаковки: %1'"),
					ЗначениеПоиска);
			
		КонецЕсли;
		
		Если ЗначениеПоиска = "UNIT" Тогда
			Возврат Перечисления.ВидыУпаковокИС.Потребительская;
		ИначеЕсли ЗначениеПоиска = "GROUP" Или ЗначениеПоискаДополнительное = "GROUP" Тогда
			Возврат Перечисления.ВидыУпаковокИС.Групповая;
		ИначеЕсли ЗначениеПоиска = "SET" Или ЗначениеПоискаДополнительное = "SET" Или ЗначениеПоиска = "PRODUCT_SET" Тогда
			Возврат Перечисления.ВидыУпаковокИС.Набор;
		ИначеЕсли СтрНайти(ЗначениеПоиска, "LEVEL") > 0 Тогда
			Возврат Перечисления.ВидыУпаковокИС.Логистическая;
		ИначеЕсли ЗначениеПоиска = "BUNDLE" Или ЗначениеПоиска = "KIT"Тогда
			Возврат Перечисления.ВидыУпаковокИС.Потребительская;
		ИначеЕсли ЗначениеПоиска = "ATK" Тогда
			Возврат Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод;
		ИначеЕсли ЗначениеПоиска = "BOX" Тогда
			Возврат Перечисления.ВидыУпаковокИС.Логистическая;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеПоиска = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Возврат "UNIT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Возврат "GROUP";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыУпаковокИС.Набор Тогда
			Возврат "SET";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
			Возврат "АТК";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			Возврат "BOX";
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид упаковки: %1';
				|en = 'Неизвестный вид упаковки: %1'"),
			ЗначениеПоиска);

КонецФункции

// Преобразовывает текстовое представление статуса кода маркировки МОТП в значение перечисления.
//
// Параметры:
//  ЗначениеПоиска - Строка - значение для перекодировки
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - статус кода маркировки.
//
Функция СтатусКодаМаркировкиМОТП(Знач ЗначениеПоиска) Экспорт
	
	Если ЗначениеПоиска = Неопределено Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
	КонецЕсли;
	
	ЗначениеПоиска = ВРег(ЗначениеПоиска);
	
	Если ЗначениеПоиска = "EMITTED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Эмитирован;
	ИначеЕсли ЗначениеПоиска = "APPLIED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен;
	ИначеЕсли ЗначениеПоиска = "APPLIED_PAID" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.НанесенОплачен;
	ИначеЕсли ЗначениеПоиска = "APPLIED_NOT_PAID" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен;
	ИначеЕсли ЗначениеПоиска = "INTRODUCED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборот;
	ИначеЕсли ЗначениеПоиска = "RECYCLED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Утилизирован;
	ИначеЕсли ЗначениеПоиска = "RETIRED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборота;
	ИначеЕсли ЗначениеПоиска = "RESERVED_NOT_USED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
	ИначеЕсли ЗначениеПоиска = "WRITTEN_OFF" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Списан;
	ИначеЕсли ЗначениеПоиска = "WITHDRAWN" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Продан;
	ИначеЕсли ЗначениеПоиска = "INTRODUCED_RETURNED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен;
	ИначеЕсли ЗначениеПоиска = "DISAGGREGATED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Разагрегирован;
	ИначеЕсли ЗначениеПоиска = "WAIT_SHIPMENT" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ОжидаетДоставки;
	ИначеЕсли ЗначениеПоиска = "EXPORTED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Экспортирован;
	ИначеЕсли ЗначениеПоиска = "LOAN_RETIRED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПоДоговоруРассрочки;
	ИначеЕсли ЗначениеПоиска = "REMARK_RETIRED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВыведенИзОборотаПриПеремаркировке;
	ИначеЕсли ЗначениеПоиска = "UNDEFINED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
	ИначеЕсли ЗначениеПоиска = "EMPTY" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
	ИначеЕсли ЗначениеПоиска = "ELIMINATED" Тогда
		Возврат Перечисления.СтатусыКодовМаркировкиМОТП.НеИспользован;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус кода маркировки: %1';
				|en = 'Неизвестный статус кода маркировки: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Статус кода маркировки по структуре данных ГИС МТ - признаков продажи, нанесения, возможности реализации
// 
// Параметры:
//  СтруктураКода - Структура - Структура признаков:
//  	* Продано - Булево
//  	* ВозможностьРеализации - Булево
//  	* Нанесен - Булево
//  	* Валидность - Булево
//  ЭтоПродукцияМОТП - Булево - признак, что продукция является МОТП
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - Статус кода маркировки по данным ГИС МТ
Функция СтатусКодаМаркировкиПоДаннымГИСМТ(Знач СтруктураКода, ЭтоПродукцияМОТП = Ложь) Экспорт
	
	Если ЭтоПродукцияМОТП Тогда
		
		Если СтруктураКода.Продано Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Продан;
		ИначеЕсли СтруктураКода.ВозможностьРеализации Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиМОТП.ВведенВОборот;
		ИначеЕсли Не СтруктураКода.ВозможностьРеализации
			И СтруктураКода.Нанесен Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Нанесен;
		ИначеЕсли Не СтруктураКода.Нанесен
			И СтруктураКода.Валидность Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Эмитирован;
		Иначе
			Возврат Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен;
		КонецЕсли;
		
	Иначе
	
		Если СтруктураКода.Продано Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВыведенИзОборота;
		ИначеЕсли СтруктураКода.ВозможностьРеализации Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.ВведенВОборот;
		ИначеЕсли Не СтруктураКода.ВозможностьРеализации
			И СтруктураКода.Нанесен Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Нанесен;
		ИначеЕсли Не СтруктураКода.Нанесен
			И СтруктураКода.Валидность Тогда
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Эмитирован;
		Иначе
			Возврат Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

// Инициализировать структуру данных продукции.
//
// Возвращаемое значение:
//  Структура - Реквизиты продукции:
//   * Идентификатор             - Строка - Идентификатор продукции.
//   * Наименование              - Строка - Наименование продукции.
//   * НаименованиеПолное        - Строка - Наименование продукции.
//   * GTIN                      - Строка - GTIN.
//   * ТорговаяМарка             - Строка - Торговая марка.
//   * ТипУпаковки               - Строка - Тип упаковки.
//   * КоличествоПотребительскихУпаковок - Строка - Количество вложенных единиц.
//   * Модель                    - Строка - Модель производителя.
//   * ДатаПубликации            - Дата   - Дата публикации.
//   * ИННПроизводителя          - Строка - ИНН производителя (импортера).
//   * СтранаПроизводства        - Строка - Страна производства.
//   * ТипПродукции              - Строка - Вид обуви (код).
//   * ТипПродукцииНаименование  - Строка - Вид обуви (наименование).
//   * Цвет              - Строка - Цвет.
//   * Размер            - Строка - Размер.
//   * МатериалВерха     - Строка - Материал верха.
//   * МатериалНиза      - Строка - Материал низа.
//   * МатериалПодкладки - Строка - Материал подкладки.
Функция ИнициализироватьДанныеПродукции(ДанныеОбработки = Неопределено) Экспорт
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ДанныеПродукции = Новый Структура;
		ДанныеПродукции.Вставить("Идентификатор");
		ДанныеПродукции.Вставить("Наименование");
		ДанныеПродукции.Вставить("НаименованиеПолное");
		ДанныеПродукции.Вставить("ВидПродукции");
		ДанныеПродукции.Вставить("GTIN");
		ДанныеПродукции.Вставить("ТорговаяМарка");
		ДанныеПродукции.Вставить("ТипУпаковки");
		ДанныеПродукции.Вставить("КоличествоПотребительскихУпаковок");
		
		ДанныеПродукции.Вставить("Модель");
		ДанныеПродукции.Вставить("ДатаПубликации");
		ДанныеПродукции.Вставить("ИННПроизводителя");
		ДанныеПродукции.Вставить("СтранаПроизводства");
		
		ДанныеПродукции.Вставить("ТипПродукции");
		ДанныеПродукции.Вставить("ТипПродукцииНаименование");
		ДанныеПродукции.Вставить("Цвет");
		ДанныеПродукции.Вставить("Размер");
		ДанныеПродукции.Вставить("МатериалВерха");
		ДанныеПродукции.Вставить("МатериалНиза");
		ДанныеПродукции.Вставить("МатериалПодкладки");
		ДанныеПродукции.Вставить("КодТНВЭД");
		ДанныеПродукции.Вставить("ЕмкостьУпаковки");
		
	Иначе
		
		ДанныеПродукции = ИнициализироватьДанныеПродукции();
		
		Если ТипЗнч(ДанныеОбработки) = Тип("Структура") Тогда
			
			ДанныеОбработки.Свойство("id",              ДанныеПродукции.Идентификатор);
			ДанныеОбработки.Свойство("name",            ДанныеПродукции.Наименование);
			ДанныеОбработки.Свойство("name",            ДанныеПродукции.НаименованиеПолное);
			ДанныеОбработки.Свойство("gtin",            ДанныеПродукции.GTIN);
			ДанныеОбработки.Свойство("brand",           ДанныеПродукции.ТорговаяМарка);
			ДанныеОбработки.Свойство("packageType",     ДанныеПродукции.ТипУпаковки);
			ДанныеОбработки.Свойство("innerUnitCount",  ДанныеПродукции.КоличествоПотребительскихУпаковок);
			ДанныеОбработки.Свойство("model",           ДанныеПродукции.Модель);
			ДанныеОбработки.Свойство("inn",             ДанныеПродукции.ИННПроизводителя);
			ДанныеОбработки.Свойство("country",         ДанныеПродукции.СтранаПроизводства);
			ДанныеОбработки.Свойство("productType",     ДанныеПродукции.ТипПродукции);
			ДанныеОбработки.Свойство("productTypeDesc", ДанныеПродукции.ТипПродукцииНаименование);
			ДанныеОбработки.Свойство("color",           ДанныеПродукции.Цвет);
			ДанныеОбработки.Свойство("productSize",     ДанныеПродукции.Размер);
			ДанныеОбработки.Свойство("materialUpper",   ДанныеПродукции.МатериалВерха);
			ДанныеОбработки.Свойство("materialDown",    ДанныеПродукции.МатериалНиза);
			ДанныеОбработки.Свойство("materialLining",  ДанныеПродукции.МатериалПодкладки);
			ДанныеОбработки.Свойство("quantityInPack",  ДанныеПродукции.ЕмкостьУпаковки);
			
			Если ДанныеОбработки.Свойство("tnVedCode") Тогда
				ДанныеПродукции.КодТНВЭД = ДанныеОбработки.tnVedCode;
			ИначеЕсли ДанныеОбработки.Свойство("tnved") Тогда
				ДанныеПродукции.КодТНВЭД = ДанныеОбработки.tnved;
			КонецЕсли;
			
			Если ДанныеОбработки.Свойство("publicationDate") Тогда
				Если Прав(ДанныеОбработки.publicationDate, 1) = "Z" Тогда
					ДанныеПродукции.ДатаПубликации = ПрочитатьДатуJSON(
						ДанныеОбработки.publicationDate, ФорматДатыJSON.ISO);
				Иначе
					ДанныеПродукции.ДатаПубликации = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ДанныеОбработки.publicationDate);
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеОбработки.Свойство("productGroupId") Тогда
				ДанныеПродукции.ВидПродукции = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ТоварнаяГруппаЧислом(ДанныеОбработки.productGroupId);
			КонецЕсли;
			
			Если ДанныеОбработки.Свойство("isSet")
				И ДанныеОбработки.isSet = Истина Тогда
				ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Набор;
			ИначеЕсли ДанныеОбработки.Свойство("level") Тогда
				Если ДанныеОбработки.level = "inner-pack" Тогда
					ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				ИначеЕсли ДанныеОбработки.level = "trade-unit" Тогда
					ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ДанныеПродукции.Идентификатор                     = ДанныеОбработки["id"];
			ДанныеПродукции.Наименование                      = ДанныеОбработки["name"];
			ДанныеПродукции.НаименованиеПолное                = ДанныеОбработки["name"];
			ДанныеПродукции.GTIN                              = ДанныеОбработки["gtin"];
			ДанныеПродукции.ТорговаяМарка                     = ДанныеОбработки["brand"];
			ДанныеПродукции.ТипУпаковки                       = ДанныеОбработки["packageType"];
			ДанныеПродукции.КоличествоПотребительскихУпаковок = ДанныеОбработки["innerUnitCount"];
			ДанныеПродукции.Модель                            = ДанныеОбработки["model"];
			ДанныеПродукции.ИННПроизводителя                  = ДанныеОбработки["inn"];
			ДанныеПродукции.СтранаПроизводства                = ДанныеОбработки["country"];
			ДанныеПродукции.ТипПродукции                      = ДанныеОбработки["productType"];
			ДанныеПродукции.ТипПродукцииНаименование          = ДанныеОбработки["productTypeDesc"];
			ДанныеПродукции.Цвет                              = ДанныеОбработки["color"];
			ДанныеПродукции.Размер                            = ДанныеОбработки["productSize"];
			ДанныеПродукции.МатериалВерха                     = ДанныеОбработки["materialUpper"];
			ДанныеПродукции.МатериалНиза                      = ДанныеОбработки["materialDown"];
			ДанныеПродукции.МатериалПодкладки                 = ДанныеОбработки["materialLining"];
			ДанныеПродукции.ЕмкостьУпаковки                   = ДанныеОбработки["quantityInPack"];
			
			Если ДанныеОбработки["tnVedCode"] <> Неопределено Тогда
				ДанныеПродукции.КодТНВЭД = ДанныеОбработки["tnVedCode"];
			ИначеЕсли ДанныеОбработки["tnved"] <> Неопределено Тогда
				ДанныеПродукции.КодТНВЭД = ДанныеОбработки["tnved"];
			КонецЕсли;
			
			Если ДанныеОбработки["publicationDate"] <> Неопределено Тогда
				ДанныеПродукции.ДатаПубликации = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ДанныеОбработки["publicationDate"]);
			КонецЕсли;
			
			Если ДанныеОбработки["productGroupId"]  <> Неопределено Тогда
				ДанныеПродукции.ВидПродукции = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ТоварнаяГруппаЧислом(ДанныеОбработки.productGroupId);
			КонецЕсли;
			
			Если ДанныеОбработки["isSet"] <> Неопределено
				И ДанныеОбработки["isSet"] = Истина Тогда
				ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Набор;
			ИначеЕсли ДанныеОбработки["level"] <> Неопределено Тогда
				Если ДанныеОбработки["level"] = "inner-pack" Тогда
					ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
				ИначеЕсли ДанныеОбработки["level"] = "trade-unit" Тогда
					ДанныеПродукции.ТипУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПродукции;
	
КонецФункции

// Получить документ по идентификатору.
// 
// Параметры:
// 	Идентификатор - Строка                              - Идентификатор документа.
// 	Организация   - ОпределяемыйТип.Организация         - Организация
// 	ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// 	Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* РезультатОтправкиЗапроса       - см. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON.
// 	* ДанныеДокумента - Структура - Данные документа.
// 	                  - Неопределено - Если при получении данных возникла ошибка.
// 	* ТекстОшибки - Строка - Текст ошибки.
Функция СтатусОбработкиДокументаПоИдентификатору(Идентификатор, Организация = Неопределено, ВидПродукции = Неопределено, Операция = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("Статус",                         Перечисления.СтатусыДокументовИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ВидПродукции) Тогда
		ПараметрыЗапроса.Добавить(
			СтрШаблон(
				"pg=%1",
				ТоварнаяГруппа(ВидПродукции)));
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
		ПараметрыЗапроса.Добавить("body=true");
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"api/v4/true-api/doc/%1/info%2",
		Идентификатор,
		ПараметрыЗапроса(ПараметрыЗапроса));
	
	РезультатЗапроса = ОбщегоНазначенияИСМП.ПолучитьДанныеИзСервиса(
		URLЗапроса,
		КлючСессии,
		ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина));
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				// ТАПИ v4 возвращает массив, содержащий результат получения данных по id документа.
				Для Каждого ЭлементДанных Из ДанныеОбработки Цикл
					
					Статус = СтатусДокумента(ЭлементДанных["status"]);
					
					Если Статус = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки 
						Или Статус = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
						
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
						
						Если ЭлементДанных["errors"] <> Неопределено И ЭлементДанных["errors"].Количество() Тогда
							ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ЭлементДанных["errors"], Символы.ПС);
						ИначеЕсли ЭлементДанных["commonErrors"] <> Неопределено
							И ЭлементДанных["commonErrors"].Количество() Тогда
							ТекстыОшибок = Новый Массив;
							Для Каждого СтрокаОшибки Из ЭлементДанных["commonErrors"] Цикл
								Если ЗначениеЗаполнено(СтрокаОшибки["errorCode"]) Тогда
									ТекстыОшибок.Добавить(
										СтрШаблон("%1. %2",
										СтрокаОшибки["errorCode"],
										СтрокаОшибки["errorMessage"]));
								Иначе
									ТекстыОшибок.Добавить(СтрокаОшибки["errorMessage"]);
								КонецЕсли;
							КонецЦикла;
							ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
						Иначе
							ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = '<Описание ошибки отсутствует>';
																	|en = '<Описание ошибки отсутствует>'");
						КонецЕсли;
					
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Обрабатывается
						Или Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Проверен
						Или Статус = Перечисления.СтатусыДокументовИСМП.Принят Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетПодтверждения;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ;
					ИначеЕсли Статус = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
						СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована;
					КонецЕсли;
					
					ВозвращаемоеЗначение.Статус          = Статус;
					ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
				
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьДокументПоСообщению(Организация, Операция, ВидПродукции, ТекстСообщения, Подпись, ПараметрыЗапросаИсходящегоСообщения, ТекстДополнительногоСообщения = "", ДополнительнаяПодпись = "") Экспорт
	
	ПараметрыЗапроса = Новый Массив;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции)
		И (Операция = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление) Тогда
		
		Если Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
			Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			URLЗапроса = "api/v3/true-api/documents/aggregation/create";
		Иначе
			URLЗапроса = "api/v3/true-api/documents/dropped-out/create";
		КонецЕсли;
		
		ПолеФормы = Новый Структура;
		ПолеФормы.Вставить("ИмяПоля",  "xmlFile");
		ПолеФормы.Вставить("ИмяФайла", "data.xml");
		ПолеФормы.Вставить("Тип",      "application/xml");
		ПолеФормы.Вставить("Тело",     ТекстСообщения);
		
		ПоляФормы = Новый Массив;
		ПоляФормы.Добавить(ПолеФормы);
		
		ДанныеПреобразования = ОбменДаннымиИСКлиентСервер.ДвоичныеДанныеPOSTЗапросаКакФорма(ПоляФормы);
		ТелоЗапроса = ДанныеПреобразования.ДвоичныеДанные;
		Размер      = ДанныеПреобразования.Размер;
		
		ЗаголовкиHTTP = Новый Соответствие;
		ЗаголовкиHTTP.Вставить("Content-Type",   "multipart/form-data; boundary=" + ДанныеПреобразования.Разделитель);
		ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовкиHTTP.Вставить("Content-Lenght", Формат(Размер, "ЧН=0; ЧГ=0;"));
		
		Если Подпись <> Неопределено Тогда
			ЗаголовкиHTTP.Вставить("X-Signature", ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
		КонецЕсли;
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса       = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса      = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация      = Организация;
		ПараметрыСозданияДокумента.Операция         = Операция;
		ПараметрыСозданияДокумента.ЗаголовкиHTTP    = ЗаголовкиHTTP;
		ПараметрыСозданияДокумента.ПараметрыЗапроса = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписание
		Или Операция = Перечисления.ВидыОперацийИСМП.СогласиеОПредоставлениеИнформацииПодписаниеАннулирования Тогда
		
		МодульСогласиеОПредоставленииИнформацииГИСМТ = ОбщегоНазначения.ОбщийМодуль("СогласиеОПредоставленииИнформацииГИСМТ");

		Возврат МодульСогласиеОПредоставленииИнформацииГИСМТ.ПодписатьДокументСогласияИлиДокументАнулированияОПредоставленииИнформации(
			Организация, Операция, Подпись, ПараметрыЗапросаИсходящегоСообщения);
		
	Иначе
		
		ТребуетсяПередачаВКодировке1251 = (Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД
			Или Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
			Или Операция = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузку);
		
		ДокументBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(ТекстСообщения, ТребуетсяПередачаВКодировке1251);
		
		ОбъемноСортовойУчет = Ложь;
		Если ПараметрыЗапросаИсходящегоСообщения <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ПараметрыЗапросаИсходящегоСообщения, "ОбъемноСортовойУчет") Тогда
			ОбъемноСортовойУчет = ПараметрыЗапросаИсходящегоСообщения.ОбъемноСортовойУчет;
		КонецЕсли;
		
		ТипДокумента = "MANUAL";
		Если ПараметрыЗапросаИсходящегоСообщения <> Неопределено
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ПараметрыЗапросаИсходящегоСообщения, "ТипДокумента") Тогда
			ТипДокумента = ПараметрыЗапросаИсходящегоСообщения.ТипДокумента;
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("document_format",  ТипДокумента);
		ТелоЗапроса.Вставить("type",             ВидОперации(Операция, ВидПродукции, ОбъемноСортовойУчет));
		
		Если Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД 
			И ПараметрыЗапросаИсходящегоСообщения <> Неопределено 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ПараметрыЗапросаИсходящегоСообщения, "ТекстДополнительногоСообщения")
			Тогда
			
			ТелоЗапроса.Вставить("second_product_document", ДокументBase64);
			ТелоЗапроса.Вставить("second_signature",        ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
			ТелоЗапроса.Вставить(
				"signature",
				ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(
					ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(
						ПараметрыЗапросаИсходящегоСообщения.СвойстваДополнительнойПодписи)));
			ТелоЗапроса.Вставить("product_document",
				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(
					ПараметрыЗапросаИсходящегоСообщения.ТекстДополнительногоСообщения,
					ТребуетсяПередачаВКодировке1251));
			
		Иначе
			
			ТелоЗапроса.Вставить("product_document", ДокументBase64);
			ТелоЗапроса.Вставить("signature",        ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
			
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Массив;
		Если ЗначениеЗаполнено(ВидПродукции) Тогда
			ПараметрыЗапроса.Добавить(
				СтрШаблон(
					"pg=%1",
					ТоварнаяГруппа(ВидПродукции)));
		КонецЕсли;
		
		URLЗапроса = СтрШаблон(
			"api/v3/true-api/lk/documents/create%1",
			ПараметрыЗапроса(ПараметрыЗапроса));
		
		ПараметрыСозданияДокумента = НовыеПараметрыСозданияДокумента();
		ПараметрыСозданияДокумента.URLЗапроса       = URLЗапроса;
		ПараметрыСозданияДокумента.ТелоЗапроса      = ТелоЗапроса;
		ПараметрыСозданияДокумента.Организация      = Организация;
		ПараметрыСозданияДокумента.Операция         = Операция;
		ПараметрыСозданияДокумента.ПараметрыЗапроса = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов("", Истина);
		
		Возврат СоздатьДокумент(ПараметрыСозданияДокумента);
		
	КонецЕсли;
	
КонецФункции

// Создает документ в ИС МП.
// 
// Параметры:
// 	Параметры - Структура - Описание:
// * URLЗапроса    - Строка - адрес на сервере.
// * ТелоЗапроса   - Структура - Данные тела запроса.
// * Организация   - ОпределяемыйТип.Организация - Организация.
// * Операция      - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
// * ВидПродукции  - ПеречислениеСсылка.ВидыПродукцииИС  - Вид продукции.
// * ЗаголовкиHTTP - Соответствие из КлючИЗначение, Неопределено - Заголовки HTTP запроса.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка -
// * ИдентификаторЗаявки - Неопределено -
// * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП -
// * РезультатОтправкиЗапроса - См. ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
// * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
Функция СоздатьДокумент(Параметры)
	
	URLЗапроса          = Параметры.URLЗапроса;
	ТелоЗапроса         = Параметры.ТелоЗапроса;
	Организация         = Параметры.Организация;
	Операция            = Параметры.Операция;
	ЗаголовкиHTTP       = Параметры.ЗаголовкиHTTP;
	ПараметрыЗапроса    = Параметры.ПараметрыЗапроса;
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация));
	
	Если ЗаголовкиHTTP <> Неопределено Тогда
		ЗаголовкиHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		URLЗапроса,
		ТелоЗапроса,
		КлючСессии,
		"POST",
		ПараметрыЗапроса,
		ЗаголовкиHTTP);
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200
			Или РезультатОтправкиЗапроса.КодСостояния = 201 Тогда
			
			ИдентификаторЗаявки = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			Если РезультатОтправкиЗапроса.Объект <> Неопределено
				И РезультатОтправкиЗапроса.Объект.Свойство("id") Тогда
				ИдентификаторЗаявки = РезультатОтправкиЗапроса.Объект.id;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗаявки)
				Или Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторЗаявки)
					И Не (Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ
					      Или Операция = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
						  Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
						  Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот
						  Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании
						  Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
						  Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
						  Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
						  Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес
						  Или Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
						  Или Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД
						  Или Операция = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузку
						  Или Операция = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузкуАннулирование) Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки     = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ИдентификаторЗаявки;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
				ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			ИначеЕсли СтрНайти(ВозвращаемоеЗначение.ТекстОшибки, НСтр("ru = 'Некорректный тип документа: FIXATION_CANCEL';
																		|en = 'Некорректный тип документа: FIXATION_CANCEL'")) > 0 Тогда
				ВозвращаемоеЗначение.ТекстОшибки = НСтр(
					"ru = 'Отмена разрешения на отгрузку еще не поддерживается ФГИС ""Честный Знак"".
					      |Для отмены разрешения на отгрузку необходимо обратиться в поддержку ФГИС ""Честный Знак"".
					      |После отмены поддержкой ФГИС ""Честный Знак"" выполните команду Еще - Архивировать документ';
					      |en = 'Отмена разрешения на отгрузку еще не поддерживается ФГИС ""Честный Знак"".
					      |Для отмены разрешения на отгрузку необходимо обратиться в поддержку ФГИС ""Честный Знак"".
					      |После отмены поддержкой ФГИС ""Честный Знак"" выполните команду Еще - Архивировать документ'");
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НовыеПараметрыСозданияДокумента()
	
	ПараметрыСозданияДокумента = Новый Структура();
	
	ПараметрыСозданияДокумента.Вставить("URLЗапроса");
	ПараметрыСозданияДокумента.Вставить("ТелоЗапроса");
	ПараметрыСозданияДокумента.Вставить("Организация");
	ПараметрыСозданияДокумента.Вставить("Операция");
	ПараметрыСозданияДокумента.Вставить("ЗаголовкиHTTP");
	ПараметрыСозданияДокумента.Вставить("ПараметрыЗапроса");
	
	Возврат ПараметрыСозданияДокумента;
	
КонецФункции

Процедура ПривестиЗначениеМРЦ(СтрокаДанных)
	
	Если ТипЗнч(СтрокаДанных.МРЦ) = Тип("Число") Тогда
		СтрокаДанных.МРЦ = СтрокаДанных.МРЦ / 100;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗамерыСкоростиCDNПлощадок()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СреднееВремяПроверкиКМ", 0);
	СтруктураВозврата.Вставить("СреднееВремяОтвета",     0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПараметрыОтправкиЗапросовНаCDNПлощадку()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("URLЗапроса",           "");
	СтруктураПараметров.Вставить("ТелоЗапросаJSON",      "");
	СтруктураПараметров.Вставить("КлючСессии",           Неопределено);
	СтруктураПараметров.Вставить("ПараметрыЗапроса",     Неопределено);
	СтруктураПараметров.Вставить("ПараметрыЗапросов",    Неопределено);
	СтруктураПараметров.Вставить("ЗаголовокHTTP",        Неопределено);
	СтруктураПараметров.Вставить("АдресПлощадки",        "");
	СтруктураПараметров.Вставить("Сервер",               "");
	СтруктураПараметров.Вставить("Порт",                 0);
	СтруктураПараметров.Вставить("ЗащищенноеСоединение", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ОбработатьКодМаркировкиНаCDNПлощадках(КодМаркировки, ДанныеШтрихкода, ТаблицаCDNПлощадок, КлючСессии, МассивПлощадокКБлокировке, СтруктураДополнительныхПараметров, КешСоединений = Неопределено, ТаймаутНаПродажу = Истина)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("АварийныйРежим",                         Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",         Ложь);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ПродажаРазрешенаВОтсутствиеОтветаГИСМТ", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                            "");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("X-API-KEY",      КлючСессии);

	URLЗапроса = "api/v4/true-api/codes/check";
	
	МассивКодовМаркировкиДляОтправки = Новый Массив;
	МассивКодовМаркировкиДляОтправки.Добавить(КодМаркировки);
	
	// молочная продукция из Беларуси, серийный номер из 8 символов и начинается с цифры 2
	ЭтоМолочкаИзБеларуси = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ДанныеШтрихкода.ВидПродукции)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "СоставКодаМаркировки")
		И СтрНачинаетсяС(ДанныеШтрихкода.СоставКодаМаркировки.СерийныйНомер, "2")
		И СтрДлина(ДанныеШтрихкода.СоставКодаМаркировки.СерийныйНомер) = 8;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("codes",             МассивКодовМаркировкиДляОтправки);
	ПараметрыЗапроса.Вставить("inn",               СтруктураДополнительныхПараметров.ИННОрганизации);
	ПараметрыЗапроса.Вставить("fiscalDriveNumber", СтруктураДополнительныхПараметров.НомерФН);
	
	ПараметрыЗапросов         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОтправкиHTTPЗапросов(, Истина);
	
	ТелоЗапросаJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ПараметрыЗапроса, Истина);
	
	ОтправленЗапрос                      = Ложь;
	ПолученОтвет                         = Ложь;
	ВремяОжиданияОтветаГИСМТ             = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВремяОтветаCDNПлощадокПриПробитииЧека();
	ТаймерНачалоЗапросаВМиллисекундах    = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТаймерОкончаниеЗапросаВМиллисекундах = ТаймерНачалоЗапросаВМиллисекундах + ВремяОжиданияОтветаГИСМТ * 1000;
	
	ЗапросыДляЛогирования = Новый Массив();
	
	Для Каждого СтрокаПлощадок Из ТаблицаCDNПлощадок Цикл
		
		// если площадка уже в списке к блокировке, и мы уже выполнили формальный запрос, не надо к ней обращаться
		Если МассивПлощадокКБлокировке.Найти(СтрокаПлощадок.АдресПлощадки) <> Неопределено И ОтправленЗапрос Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаймаутНаПродажу И ТаймерОкончаниеЗапросаВМиллисекундах < ТекущаяУниверсальнаяДатаВМиллисекундах() Тогда
			
			ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если Не СтрокаПлощадок.ПлощадкаДоступна И ОтправленЗапрос Тогда
			
			// либо все площадки доступные уже перебрали, и остались недоступные,
			// либо все были недоступные, но мы уже отправили один обязательный запрос, можно продавать
			// переход к следующему КМ, по нему тоже надо отправить хотя бы один запрос
			ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
			Прервать;
			
		КонецЕсли;
		
		ПараметрыЗапросов.ИспользоватьЗащищенноеСоединение = СтрокаПлощадок.ЗащищенноеСоединение;
		ПараметрыЗапросов.Порт                             = СтрокаПлощадок.Порт;
		ПараметрыЗапросов.Сервер                           = СтрокаПлощадок.Сервер;
		
		ДанныеДляОтправкиЗапросаНаПлощадку = ПараметрыОтправкиЗапросовНаCDNПлощадку();
		ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса           = URLЗапроса;
		ДанныеДляОтправкиЗапросаНаПлощадку.ЗаголовокHTTP        = ЗаголовокHTTP;
		ДанныеДляОтправкиЗапросаНаПлощадку.КлючСессии           = КлючСессии;
		ДанныеДляОтправкиЗапросаНаПлощадку.ПараметрыЗапроса     = ПараметрыЗапроса;
		ДанныеДляОтправкиЗапросаНаПлощадку.ПараметрыЗапросов    = ПараметрыЗапросов;
		ДанныеДляОтправкиЗапросаНаПлощадку.ТелоЗапросаJSON      = ТелоЗапросаJSON;
		ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки        = СтрокаПлощадок.АдресПлощадки;
		ДанныеДляОтправкиЗапросаНаПлощадку.Сервер               = СтрокаПлощадок.Сервер;
		ДанныеДляОтправкиЗапросаНаПлощадку.Порт                 = СтрокаПлощадок.Порт;
		ДанныеДляОтправкиЗапросаНаПлощадку.ЗащищенноеСоединение = СтрокаПлощадок.ЗащищенноеСоединение;
		
		// таймаут на запрос соответствует оставшемуся времени на получение ответа от площадок
		Если ТаймаутНаПродажу Тогда
			ДанныеДляОтправкиЗапросаНаПлощадку.ПараметрыЗапросов.Таймаут = (ТаймерОкончаниеЗапросаВМиллисекундах - ТекущаяУниверсальнаяДатаВМиллисекундах()) / 1000;
		Иначе
			ДанныеДляОтправкиЗапросаНаПлощадку.ПараметрыЗапросов.Таймаут = 60;
		КонецЕсли;
		
		РезультатОтправкиНаПлощадку = ОтправитьЗапросПоКодуМаркировкиНаПлощадку(ДанныеДляОтправкиЗапросаНаПлощадку,
			МассивПлощадокКБлокировке,
			ДанныеШтрихкода,
			СтруктураДополнительныхПараметров,
			КешСоединений,
			ЭтоМолочкаИзБеларуси,,
			ТаймаутНаПродажу);
			
		ОтправленЗапрос             = Истина;
		
		ВозвращаемоеЗначение.АварийныйРежим                 = РезультатОтправкиНаПлощадку.АварийныйРежим;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатОтправкиНаПлощадку.ТребуетсяОбновлениеКлючаСессии;
		
		ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиНаПлощадку.РезультатОтправкиЗапроса);
		
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
			+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
			+ РезультатОтправкиНаПлощадку.ТекстОшибки;
			
		Для Каждого Запрос Из РезультатОтправкиНаПлощадку.ЗапросыДляЛогирования Цикл
			ЗапросыДляЛогирования.Добавить(Запрос);
		КонецЦикла;
		
		Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ШтрихкодированиеОбщегоНазначенияИСМП.ЛогироватьРезультатыОперацийПроверкиКМ(ЗапросыДляЛогирования);
			
			// если была получена ошибка 401 хотя бы по одной площадке - прервать обработку,
			// необходимо обновление ключа сессии
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.АварийныйРежим Тогда
			
			ШтрихкодированиеОбщегоНазначенияИСМП.ЛогироватьРезультатыОперацийПроверкиКМ(ЗапросыДляЛогирования);
			
			// если был получен код 203 хотя бы по одной площадке - прервать обработку,
			// действует аварийный режим
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		Если Не РезультатОтправкиНаПлощадку.ПараметрыКодаМаркировки = Неопределено Тогда
			
			// по КМ по площадке был получен ответ из ГИС МТ
			ВозвращаемоеЗначение.ПараметрыКодаМаркировки = РезультатОтправкиНаПлощадку.ПараметрыКодаМаркировки;
			
		КонецЕсли;
		
		Если РезультатОтправкиНаПлощадку.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ Тогда
			
			// продажа разрешена как молочка из Беларуси
			ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
			
		КонецЕсли;
		
		Если Не ПолученОтвет Тогда
			ПолученОтвет = РезультатОтправкиНаПлощадку.ПолученОтветОтГИСМТ;
		КонецЕсли;
		
		Если РезультатОтправкиНаПлощадку.ПерейтиКСледующейПлощадке Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезультатОтправкиНаПлощадку.ПерейтиКСледующемуКМ Тогда
			Прервать;
		КонецЕсли;
		
		Если ПолученОтвет Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтправленЗапрос И Не ПолученОтвет Тогда
		ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСМП.ЛогироватьРезультатыОперацийПроверкиКМ(ЗапросыДляЛогирования);
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ОтправитьЗапросПоКодуМаркировкиНаПлощадку(ДанныеДляОтправкиЗапросаНаПлощадку, МассивПлощадокКБлокировке, ДанныеШтрихкода, СтруктураДополнительныхПараметров, КешСоединений = Неопределено, ЭтоМолочкаИзБеларуси = Ложь, КешОбработаннойМолочкиИзБеларуси = Неопределено, ТаймаутНаПродажу = Истина)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("АварийныйРежим",                         Ложь);
	ВозвращаемоеЗначение.Вставить("ПерейтиКСледующейПлощадке",              Ложь);
	ВозвращаемоеЗначение.Вставить("ПерейтиКСледующемуКМ",                   Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",         Ложь);
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ПродажаРазрешенаВОтсутствиеОтветаГИСМТ", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗапросыДляЛогирования",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                            "");
	ВозвращаемоеЗначение.Вставить("ПолученОтветОтГИСМТ",                    Ложь);
	
	Если КешСоединений = Неопределено Тогда
		Соединение = Неопределено;
	Иначе
		Соединение = КешСоединений.Получить(ДанныеДляОтправкиЗапросаНаПлощадку);
	КонецЕсли;
	
	РезультатЗапроса = ОбменДаннымиИСМПКлиентСервер.ОтправитьДанныеВСервис(
		ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
		ДанныеДляОтправкиЗапросаНаПлощадку.ТелоЗапросаJSON,
		ДанныеДляОтправкиЗапросаНаПлощадку.КлючСессии,
		"POST",
		ДанныеДляОтправкиЗапросаНаПлощадку.ПараметрыЗапросов,
		ДанныеДляОтправкиЗапросаНаПлощадку.ЗаголовокHTTP,
		,
		Соединение);
	
	Если Не Соединение = Неопределено Тогда
		КешСоединений.Вставить(ДанныеДляОтправкиЗапросаНаПлощадку, Соединение);
	КонецЕсли;
	
	АдресСервера = ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки;
	
	РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	ПлощадкиСОшибкамиОбмена = ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП.Получить();
	
	Если ПлощадкиСОшибкамиОбмена = Неопределено Тогда
		
		ПлощадкиСОшибкамиОбмена = Новый Структура();
		ПлощадкиСОшибкамиОбмена.Вставить("ОшибкиПлощадки",      Новый Соответствие);
		ПлощадкиСОшибкамиОбмена.Вставить("НетОтветаПоПлощадке", Новый Соответствие);
		
	ИначеЕсли ТипЗнч(ПлощадкиСОшибкамиОбмена) = Тип("Массив") Тогда
		
		// обратная совместимость - до изменения методических рекомендаций 15.11.2024 в площадках с ошибками обмена
		// был массив с площадками первых ошибок 500
		ТекущийСписок = ОбщегоНазначения.СкопироватьРекурсивно(ПлощадкиСОшибкамиОбмена);
		
		ПлощадкиСОшибкамиОбмена = Новый Структура();
		ПлощадкиСОшибкамиОбмена.Вставить("ОшибкиПлощадки",      Новый Соответствие);
		ПлощадкиСОшибкамиОбмена.Вставить("НетОтветаПоПлощадке", Новый Соответствие);
		
		Для Каждого ТекущаяОшибочнаяПлощадка Из ТекущийСписок Цикл
			ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки.Вставить(ТекущаяОшибочнаяПлощадка, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	МаксимальноеКоличествоОшибокПоПлощадкеДляБлокировки    = 2;
	МаксимальноеКоличествоТаймаутовПоПлощадкеДляБлокировки = 3;
	
	Если Не РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		// ответ не получен, либо таймаут, либо иные проблемы, продолжить в рамках исходного таймера проход по площадкам
		ВозвращаемоеЗначение.ПерейтиКСледующейПлощадке = Истина;
		
		Если Не ТаймаутНаПродажу Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
		КоличествоТаймаутовПоПлощадке = ПлощадкиСОшибкамиОбмена.НетОтветаПоПлощадке.Получить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки);
		
		Если КоличествоТаймаутовПоПлощадке = Неопределено Тогда
			
			// первый таймаут по площадке
			КоличествоТаймаутовПоПлощадке = 1;
			ПлощадкиСОшибкамиОбмена.НетОтветаПоПлощадке.Вставить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки, КоличествоТаймаутовПоПлощадке);
			
		Иначе
			
			// повторное получение таймаута по площадке
			КоличествоТаймаутовПоПлощадке = КоличествоТаймаутовПоПлощадке + 1;
			ПлощадкиСОшибкамиОбмена.НетОтветаПоПлощадке.Вставить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки, КоличествоТаймаутовПоПлощадке);
			
			Если КоличествоТаймаутовПоПлощадке >= МаксимальноеКоличествоТаймаутовПоПлощадкеДляБлокировки Тогда
				МассивПлощадокКБлокировке.Добавить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки);
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП = Новый ХранилищеЗначения(ПлощадкиСОшибкамиОбмена);
		
		ПараметрыЗаписиВЛог = ЗаписатьВЛогОтветРазрешительногоРежимаГИСМТ(АдресСервера, "Таймаут", ДанныеШтрихкода, РезультатОтправкиЗапроса.ТекстОшибки, РезультатЗапроса.HTTPЗапрос.ПолучитьТелоКакСтроку());
		ВозвращаемоеЗначение.ЗапросыДляЛогирования.Добавить(ПараметрыЗаписиВЛог);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	Если Не РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
		
		ПараметрыЗаписиВЛог = ЗаписатьВЛогОтветРазрешительногоРежимаГИСМТ(АдресСервера, Формат(РезультатЗапроса.HTTPОтвет.КодСостояния, "ЧГ=0;"), ДанныеШтрихкода, РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, РезультатЗапроса.HTTPЗапрос.ПолучитьТелоКакСтроку());
		ВозвращаемоеЗначение.ЗапросыДляЛогирования.Добавить(ПараметрыЗаписиВЛог);
		
		Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			// если нет ключа сессии, остальные коды можно не проверять
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 429
			Или Лев(Строка(РезультатОтправкиЗапроса.КодСостояния), 1) = "5" Тогда
			
			Если ЭтоМолочкаИзБеларуси Тогда
				
				// получение первого ответа 500 по коду молочки из Беларуси
				Если КешОбработаннойМолочкиИзБеларуси = Неопределено Тогда
					
					КешОбработаннойМолочкиИзБеларуси = Новый Массив;
					КешОбработаннойМолочкиИзБеларуси.Добавить(ДанныеШтрихкода);
				
					РезультатОтправкиНаПлощадку = ОтправитьЗапросПоКодуМаркировкиНаПлощадку(ДанныеДляОтправкиЗапросаНаПлощадку, МассивПлощадокКБлокировке, ДанныеШтрихкода, СтруктураДополнительныхПараметров, КешСоединений, ЭтоМолочкаИзБеларуси, КешОбработаннойМолочкиИзБеларуси, ТаймаутНаПродажу);
					
					ВозвращаемоеЗначение.АварийныйРежим                 = РезультатОтправкиНаПлощадку.АварийныйРежим;
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатОтправкиНаПлощадку.ТребуетсяОбновлениеКлючаСессии;
					
					Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
					
					Если ВозвращаемоеЗначение.АварийныйРежим Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
					
					// если повторный запрос по молочке вернул ответ, то он будет действующим
					ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = РезультатОтправкиНаПлощадку.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ;
					ВозвращаемоеЗначение.ПараметрыКодаМаркировки                = РезультатОтправкиНаПлощадку.ПараметрыКодаМаркировки;
					
					ВозвращаемоеЗначение.ПерейтиКСледующейПлощадке = РезультатОтправкиНаПлощадку.ПерейтиКСледующейПлощадке;
					ВозвращаемоеЗначение.ПерейтиКСледующемуКМ      = РезультатОтправкиНаПлощадку.ПерейтиКСледующемуКМ;
					ВозвращаемоеЗначение.ПолученОтветОтГИСМТ       = РезультатОтправкиНаПлощадку.ПолученОтветОтГИСМТ;
					
				Иначе
					
					// получение повторной ошибки 500 по молочке из Беларуси,
					// разрешить продажу
					Если КешОбработаннойМолочкиИзБеларуси.Найти(ДанныеШтрихкода) <> Неопределено Тогда
						
						ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
						ВозвращаемоеЗначение.ПерейтиКСледующемуКМ                   = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ТаймаутНаПродажу Тогда
			
					ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
						РезультатОтправкиЗапроса);
					
				КонецЕсли;
				
				Возврат ВозвращаемоеЗначение;
				
			Иначе
			
				// если ошибки обмена, запомнить ошибку и перейти к следующей площадке
				КоличествоОшибокПоПлощадке = ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки.Получить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки);
		
				Если КоличествоОшибокПоПлощадке = Неопределено Тогда
					
					// первая ошибка 5хх или 429 по площадке
					КоличествоОшибокПоПлощадке = 1;
					ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки.Вставить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки, КоличествоОшибокПоПлощадке);
					
					ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП = Новый ХранилищеЗначения(ПлощадкиСОшибкамиОбмена);
					
					РезультатОтправкиНаПлощадку = ОтправитьЗапросПоКодуМаркировкиНаПлощадку(ДанныеДляОтправкиЗапросаНаПлощадку, МассивПлощадокКБлокировке, ДанныеШтрихкода, СтруктураДополнительныхПараметров, КешСоединений, ЭтоМолочкаИзБеларуси,, ТаймаутНаПродажу);
					
					ВозвращаемоеЗначение.АварийныйРежим                 = РезультатОтправкиНаПлощадку.АварийныйРежим;
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатОтправкиНаПлощадку.ТребуетсяОбновлениеКлючаСессии;
					ВозвращаемоеЗначение.ЗапросыДляЛогирования          = РезультатОтправкиНаПлощадку.ЗапросыДляЛогирования;
					
					Если РезультатОтправкиНаПлощадку.ТребуетсяОбновлениеКлючаСессии Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
					
					Если ВозвращаемоеЗначение.АварийныйРежим Тогда
						Возврат ВозвращаемоеЗначение;
					КонецЕсли;
					
					ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = РезультатОтправкиНаПлощадку.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ;
					ВозвращаемоеЗначение.ПараметрыКодаМаркировки                = РезультатОтправкиНаПлощадку.ПараметрыКодаМаркировки;
					
					ВозвращаемоеЗначение.ПерейтиКСледующейПлощадке = РезультатОтправкиНаПлощадку.ПерейтиКСледующейПлощадке;
					ВозвращаемоеЗначение.ПерейтиКСледующемуКМ      = РезультатОтправкиНаПлощадку.ПерейтиКСледующемуКМ;
					ВозвращаемоеЗначение.ПолученОтветОтГИСМТ       = РезультатОтправкиНаПлощадку.ПолученОтветОтГИСМТ;
					
				Иначе
					
					// повторное получение ошибок по площадке
					КоличествоОшибокПоПлощадке = КоличествоОшибокПоПлощадке + 1;
					ПлощадкиСОшибкамиОбмена.ОшибкиПлощадки.Вставить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки, КоличествоОшибокПоПлощадке);
					
					Если КоличествоОшибокПоПлощадке >= МаксимальноеКоличествоОшибокПоПлощадкеДляБлокировки Тогда
						МассивПлощадокКБлокировке.Добавить(ДанныеДляОтправкиЗапросаНаПлощадку.АдресПлощадки);
					КонецЕсли;
					
					ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП = Новый ХранилищеЗначения(ПлощадкиСОшибкамиОбмена);
					
					ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
					ВозвращаемоеЗначение.ПерейтиКСледующейПлощадке              = Истина;
					
				КонецЕсли;
				
				Если Не ТаймаутНаПродажу Тогда
			
					ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
						РезультатОтправкиЗапроса);
					
				КонецЕсли;
				
				Возврат ВозвращаемоеЗначение;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.АварийныйРежимКодОтветаСервисаГИСМТ() Тогда
			
			// если аварийный режим, остальные коды можно не проверять
			ОбщегоНазначенияИСМП.ВключитьАварийныйРежимРазрешительнойСистемы();
			
			ВозвращаемоеЗначение.АварийныйРежим                         = Истина;
			ВозвращаемоеЗначение.ПродажаРазрешенаВОтсутствиеОтветаГИСМТ = Истина;
			ВозвращаемоеЗначение.ПерейтиКСледующемуКМ                   = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
				РезультатОтправкиЗапроса);
				
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОбработки = ОбщегоНазначенияИСКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
	
	Если ДанныеОбработки = Неопределено Тогда
		
		ВозвращаемоеЗначение.ТекстОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			ДанныеДляОтправкиЗапросаНаПлощадку.URLЗапроса,
			РезультатОтправкиЗапроса);
			
		ВозвращаемоеЗначение.ПерейтиКСледующейПлощадке = Истина;
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ДанныеПоКодамМаркировки = ДанныеОбработки.Получить("codes");
		Если ТипЗнч(ДанныеПоКодамМаркировки) = Тип("Массив") Тогда
			
			Для Каждого ЭлементДанных Из ДанныеПоКодамМаркировки Цикл
				
				КодОшибки         = ЭлементДанных["errorCode"];
				СообщениеОбОшибке = ЭлементДанных["message"];
				ТекстОшибки       = "";
				
				Если ЗначениеЗаполнено(КодОшибки) Тогда
					
					Если КодОшибки = 1 Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка валидации КМ в ГИС МТ.';
											|en = 'Ошибка валидации КМ в ГИС МТ.'");
					ИначеЕсли КодОшибки = 2 Тогда
						ТекстОшибки = НСтр("ru = 'КМ не содержит GTIN.';
											|en = 'КМ не содержит GTIN.'");
					ИначеЕсли КодОшибки = 3 Тогда
						ТекстОшибки = НСтр("ru = 'КМ не содержит серийный номер.';
											|en = 'КМ не содержит серийный номер.'");
					ИначеЕсли КодОшибки = 4 Тогда
						ТекстОшибки = НСтр("ru = 'КМ содержит недопустимые символы.';
											|en = 'КМ содержит недопустимые символы.'");
					ИначеЕсли КодОшибки = 5 Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (формат крипто-подписи не соответствует типу КМ).';
											|en = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (формат крипто-подписи не соответствует типу КМ).'");
					ИначеЕсли КодОшибки = 6 Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (крипто-подпись не валидная).';
											|en = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (крипто-подпись не валидная).'");
					ИначеЕсли КодОшибки = 7 Тогда
						ТекстОшибки = НСтр("ru = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (крипто-ключ не валиден).';
											|en = 'Ошибка верификации крипто-подписи КМ в ГИС МТ (крипто-ключ не валиден).'");
					ИначеЕсли КодОшибки = 8 Тогда
						ТекстОшибки = НСтр("ru = 'КМ не прошел верификацию в стране эмитента.';
											|en = 'КМ не прошел верификацию в стране эмитента.'");
					ИначеЕсли КодОшибки = 9 Тогда
						ТекстОшибки = НСтр("ru = 'Найденные AI в КМ не поддерживаются.';
											|en = 'Найденные AI в КМ не поддерживаются.'");
					ИначеЕсли КодОшибки = 10 Тогда
						ТекстОшибки = НСтр("ru = 'КМ не найден в ГИС МТ.';
											|en = 'КМ не найден в ГИС МТ.'");
					Иначе
						
						ШаблонПодсказки   = НСтр("ru = 'Неклассифицированная ошибка отправки запроса по КМ в ГИС МТ.
						|Описание из сервиса: %1.';
						|en = 'Неклассифицированная ошибка отправки запроса по КМ в ГИС МТ.
						|Описание из сервиса: %1.'");
						
						Если СообщениеОбОшибке <> Неопределено Тогда
							ТекстИзГИСМТ = СтрЗаменить(СообщениеОбОшибке, Символ(29), "");
						Иначе
							ТекстИзГИСМТ = "отсутствует";
						КонецЕсли;
						
						ТекстОшибки = СтрШаблон(ШаблонПодсказки, ТекстИзГИСМТ);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекстОшибки) И ТаймаутНаПродажу Тогда
						
						ДанныеШтрихкода.ТекстОшибки               = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.ПерейтиКСледующемуКМ = Истина;
					ВозвращаемоеЗначение.ПолученОтветОтГИСМТ  = Истина;
					
				Иначе
					
					ПараметрыКодаМаркировки = ПараметрыКодаМаркировкиМОТП(ЭлементДанных, ДанныеШтрихкода.ВидПродукции, СтруктураДополнительныхПараметров);
					ТекстОшибки = "";
					
					Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидПродукции)
						И ЗначениеЗаполнено(ПараметрыКодаМаркировки.ВидПродукции) Тогда
						ДанныеШтрихкода.ВидПродукции = ПараметрыКодаМаркировки.ВидПродукции;
					КонецЕсли;
					
					Если ЭлементДанных["valid"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Структура данных кода маркировки некорректна.';
											|en = 'Структура данных кода маркировки некорректна.'");
						
					ИначеЕсли ЭлементДанных["verified"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Проверка крипто-подписи кода маркировки в ГИС МТ завершилась с ошибкой.';
											|en = 'Проверка крипто-подписи кода маркировки в ГИС МТ завершилась с ошибкой.'");
						
					ИначеЕсли ЭлементДанных["found"] = Ложь Тогда
						
						ТекстОшибки = НСтр("ru = 'Код маркировки не найден в ГИС МТ.';
											|en = 'Код маркировки не найден в ГИС МТ.'");
						
					ИначеЕсли СообщениеОбОшибке <> Неопределено Тогда
						
						ШаблонПодсказки   = НСтр("ru = 'Неклассифицированная ошибка отправки запроса по КМ в ГИС МТ.
						|Описание из сервиса: %1.';
						|en = 'Неклассифицированная ошибка отправки запроса по КМ в ГИС МТ.
						|Описание из сервиса: %1.'");
						
						ТекстОшибки = СтрШаблон(ШаблонПодсказки, СтрЗаменить(СообщениеОбОшибке, Символ(29), ""));
						
					КонецЕсли;
					
					Если ПараметрыКодаМаркировки.ПродажаЗаблокирована
						И ПараметрыКодаМаркировки.СписокОрганизацийБлокировкиКМ.Количество() Тогда
						
						ШаблонОшибки = НСтр("ru = 'Оборот товара был заблокирован.
											|
											|Организации, принявшие решение о блокировке товара: 
											|%1.';
											|en = 'Оборот товара был заблокирован.
											|
											|Организации, принявшие решение о блокировке товара: 
											|%1.'");
						
						МассивПредставленийОрганизацийПоИдентификаторам = 
							ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ОрганыВластиУстанавливающиеБлокировкуНаКМПоДаннымГИСМТ(ПараметрыКодаМаркировки.СписокОрганизацийБлокировкиКМ);
					
						ТекстОшибки = СтрШаблон(ШаблонОшибки,
							СтрСоединить(МассивПредставленийОрганизацийПоИдентификаторам, ", "));
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекстОшибки) И ТаймаутНаПродажу Тогда
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					РазрешительныйРежимДатаЗапросаГИСМТ = ДанныеОбработки.Получить("reqTimestamp");
					ПараметрыКодаМаркировки.РазрешительныйРежимДатаЗапросаГИСМТ          = Формат(РазрешительныйРежимДатаЗапросаГИСМТ, "ЧГ=;"); 
					
					ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеОбработки.Получить("reqId");
					ПараметрыКодаМаркировки.РазрешительныйРежимАдресСервера              = АдресСервера;
					ПараметрыКодаМаркировки.РазрешительныйРежимТелоЗапросаJSON           = РезультатЗапроса.HTTPЗапрос.ПолучитьТелоКакСтроку();
					ПараметрыКодаМаркировки.РазрешительныйРежимТелоОтветаJSON            = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
					ПараметрыКодаМаркировки.РазрешительныйРежимКодОтвета                 = Формат(РезультатЗапроса.HTTPОтвет.КодСостояния, "ЧГ=0;");
					
					ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ПараметрыКодаМаркировки;
					ВозвращаемоеЗначение.ПерейтиКСледующемуКМ    = Истина;
					ВозвращаемоеЗначение.ПолученОтветОтГИСМТ     = Истина;
					
					Если СтруктураДополнительныхПараметров.ЛогироватьУспешныеПроверки Тогда
						
						ПараметрыЗаписиВЛог = ЗаписатьВЛогОтветРазрешительногоРежимаГИСМТ(АдресСервера,
							РезультатОтправкиЗапроса.КодСостояния, ДанныеШтрихкода, ПараметрыКодаМаркировки.РазрешительныйРежимТелоОтветаJSON, 
							ПараметрыКодаМаркировки.РазрешительныйРежимТелоЗапросаJSON, ПараметрыКодаМаркировки.РазрешительныйРежимДатаЗапросаГИСМТ,
							ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ);
						
						ВозвращаемоеЗначение.ЗапросыДляЛогирования.Добавить(ПараметрыЗаписиВЛог);
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует дополнение строки параметров URL.
// 
// Параметры:
// 	ПараметрыЗапроса - Массив из Строка, Неопределено - Данные параметров запроса
// Возвращаемое значение:
// 	Строка - Срока дополнения.
Функция ПараметрыЗапроса(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса <> Неопределено
		И ПараметрыЗапроса.Количество() > 0 Тогда
		Возврат "?" + СтрСоединить(ПараметрыЗапроса, "&");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗаписатьВЛогОтветРазрешительногоРежимаГИСМТ(АдресСервера, КодОшибки, ДанныеШтрихкода, ТекстОтвета, ТекстЗапроса, ДатаПолученияЗапроса = Неопределено, ИдентификаторЗапросаРазрешения = "")
	
	ПараметрыЗаписиВЛог = ШтрихкодированиеОбщегоНазначенияИСМП.ПараметрыЗаписиОперацииПроверкиКМ();
	
	Если ДатаПолученияЗапроса = Неопределено Тогда
		ДатаПолученияЗапроса = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ПараметрыЗаписиВЛог.АдресСервераЗапросаРазрешения  = АдресСервера;
	ПараметрыЗаписиВЛог.ИдентификаторЗапросаРазрешения = ИдентификаторЗапросаРазрешения;
	ПараметрыЗаписиВЛог.ВремяЗапросаРазрешения         = ДатаПолученияЗапроса;
	ПараметрыЗаписиВЛог.ЗапросРазрешенияПродажиКМ      = Истина;
	ПараметрыЗаписиВЛог.КодОтветаРазрешения            = КодОшибки;
	ПараметрыЗаписиВЛог.КонтрольнаяМарка               = ДанныеШтрихкода.ПолныйКодМаркировки;
	ПараметрыЗаписиВЛог.НормализованныйШтрихкод        = ДанныеШтрихкода.НормализованныйШтрихкод;
	ПараметрыЗаписиВЛог.Наименование                   = ДанныеШтрихкода.ПредставлениеНоменклатуры;
	ПараметрыЗаписиВЛог.РезультатЗапросаРазрешения     = ТекстОтвета;
	ПараметрыЗаписиВЛог.ТекстЗапросаРазрешения         = ТекстЗапроса;
	
	Возврат ПараметрыЗаписиВЛог;
	
КонецФункции

// Преобразовывает текстовое представление статуса документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыДокументовИСМП, Строка - статус документа.
Функция СтатусДокумента(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "CHECKED_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Проверен;
		ИначеЕсли ЗначениеПоиска = "CHECKED_NOT_OK" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ЕстьОшибки;
		ИначеЕсли ЗначениеПоиска = "IN_PROGRESS" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Обрабатывается;
		ИначеЕсли ЗначениеПоиска = "PROCESSING_ERROR" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Ошибка;
		ИначеЕсли ЗначениеПоиска = "UNDEFINED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Неопределен;
		ИначеЕсли ЗначениеПоиска = "WAIT_ACCEPTANCE" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления;
		ИначеЕсли ЗначениеПоиска = "WAIT_PARTICIPANT_REGISTRATION" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ;
		ИначеЕсли ЗначениеПоиска = "CANCELLED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Отменен;
		ИначеЕсли ЗначениеПоиска = "ACCEPTED" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Принят;
		ИначеЕсли ЗначениеПоиска = "WAIT_FOR_CONTINUATION" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента;
		ИначеЕсли ЗначениеПоиска = "PARSE_ERROR" Тогда
			Возврат Перечисления.СтатусыДокументовИСМП.Ошибка;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Проверен Тогда
			Возврат "CHECKED_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ЕстьОшибки Тогда
			Возврат "CHECKED_NOT_OK";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Обрабатывается Тогда
			Возврат "IN_PROGRESS";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Ошибка Тогда
			Возврат "PROCESSING_ERROR";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Неопределен Тогда
			Возврат "UNDEFINED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления Тогда
			Возврат "WAIT_ACCEPTANCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			Возврат "WAIT_PARTICIPANT_REGISTRATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Отменен Тогда
			Возврат "CANCELLED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.Принят Тогда
			Возврат "ACCEPTED";
		ИначеЕсли ЗначениеПоиска = Перечисления.СтатусыДокументовИСМП.ОжидаетПродолженияПроцессингаДокумента Тогда
			Возврат "WAIT_FOR_CONTINUATION";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный статус документа: %1';
				|en = 'Неизвестный статус документа: %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Преобразовывает текстовое представление типа документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска      - ПеречислениеСсылка.ВидыОперацийИСМП, Строка - значение для перекодировки.
//	ВидПродукции        - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
//	ОбъемноСортовойУчет - Булево - Признак объемно-сортового учета.
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыОперацийИСМП, Строка - Тип документа.
Функция ВидОперации(Знач ЗначениеПоиска, ВидПродукции = Неопределено, ОбъемноСортовойУчет = Ложь) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		ЗначениеПоиска = ВРег(ЗначениеПоиска);
		Если ЗначениеПоиска = "LP_INTRODUCE_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ;
		ИначеЕсли ЗначениеПоиска = "LP_GOODS_IMPORT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС;
		ИначеЕсли ЗначениеПоиска = "LP_FTS_INTRODUCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
		ИначеЕсли ЗначениеПоиска = "FURS_FTS_INTRODUCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех;
		ИначеЕсли ЗначениеПоиска = "LK_CONTRACT_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору;
		ИначеЕсли ЗначениеПоиска = "LK_INDI_COMMISSIONING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц;
		ИначеЕсли ЗначениеПоиска = "LP_INTRODUCE_OST" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков;
		ИначеЕсли ЗначениеПоиска = "CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля;
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_GOODS_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "EAS_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "EAS_GTIN_CROSSBORDER_ACCEPTANCE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_SHIP_RECEIPT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_CANCEL_SHIPMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_CANCEL_SHIPMENT_CROSSBORDER" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LP_ACCEPT_GOODS" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПустаяСсылка();
		ИначеЕсли ЗначениеПоиска = "LK_REMARK" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.Перемаркировка;
		ИначеЕсли ЗначениеПоиска = "LK_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "LK_APPLIED_KM_CANCELLATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки;
		ИначеЕсли ЗначениеПоиска = "AGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияСоздание;
		ИначеЕсли ЗначениеПоиска = "SETS_AGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора;
		ИначеЕсли ЗначениеПоиска = "DISAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияУдаление;
		ИначеЕсли ЗначениеПоиска = "REAGGREGATION_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АгрегацияИзменение;
		ИначеЕсли ЗначениеПоиска = "OST_DESCRIPTION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки;
		ИначеЕсли ЗначениеПоиска = "LP_RETURN" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи;
		ИначеЕсли ЗначениеПоиска = "ATK_AGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКСоздание;
		ИначеЕсли ЗначениеПоиска = "ATK_TRANSFORMATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКИзменение;
		ИначеЕсли ЗначениеПоиска = "ATK_DISAGGREGATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.АТКУдаление;
		ИначеЕсли ЗначениеПоиска = "LK_GTIN_RECEIPT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборота;
		ИначеЕсли ЗначениеПоиска = "LK_GTIN_RECEIPT_CANCEL" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование;
		ИначеЕсли ЗначениеПоиска = "LK_INDIVIDUALIZATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ;
		ИначеЕсли ЗначениеПоиска = "CIRCULATION_INFORMATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот;
		ИначеЕсли ЗначениеПоиска = "CIRCULATION_INFORMATION_2" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот;
		ИначеЕсли ЗначениеПоиска = "REPORT_REWEIGHING" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании;
		ИначеЕсли ЗначениеПоиска = "CIS_INFORMATION_CHANGE" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ;
		ИначеЕсли ЗначениеПоиска = "CONNECT_TAP" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки;
		ИначеЕсли ЗначениеПоиска = "WRITE_OFF" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки;
		ИначеЕсли ЗначениеПоиска = "FIXATION" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка;
		ИначеЕсли ЗначениеПоиска = "UNIVERSAL_TRANSFER_DOCUMENT" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД;
		ИначеЕсли ЗначениеПоиска = "UNIVERSAL_TRANSFER_DOCUMENT_FIX" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДИсправление;
		ИначеЕсли ЗначениеПоиска = "FIXATION_CANCEL" Тогда
			Возврат Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			Возврат "LP_INTRODUCE_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			Возврат "LP_GOODS_IMPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
			Возврат "LP_FTS_INTRODUCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех Тогда
			Возврат "FURS_FTS_INTRODUCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			Возврат "LK_CONTRACT_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			Возврат "LK_INDI_COMMISSIONING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			Возврат "CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
			Возврат "LK_INDIVIDUALIZATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент Тогда
			Возврат "LP_SHIP_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием Тогда
			Возврат "LP_SHIP_RECEIPT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
			Возврат "EAS_CROSSBORDER_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
			Возврат "EAS_GTIN_CROSSBORDER_EXPORT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаТрансграничнаяТорговля Тогда
			Возврат "LP_SHIP_GOODS_CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование Тогда
			Возврат "LP_CANCEL_SHIPMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтгрузкаТрансграничнаяТорговляАннулирование Тогда
			Возврат "LP_CANCEL_SHIPMENT_CROSSBORDER";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен // ОСУ
			И ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ Тогда
			Возврат "EAS_GTIN_CROSSBORDER_ACCEPTANCE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаАгент
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ Тогда
			Возврат "LP_ACCEPT_GOODS";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.Перемаркировка Тогда
			Возврат "LK_REMARK";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении Тогда
			Возврат "LK_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки Тогда
			Возврат "LK_APPLIED_KM_CANCELLATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание Тогда
			Возврат "AGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора Тогда
			Возврат "SETS_AGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
			Возврат "DISAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение Тогда
			Возврат "REAGGREGATION_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки Тогда
			Возврат "OST_DESCRIPTION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			Возврат "LP_INTRODUCE_OST";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДляЦелейВРозницу
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПересортицаПоКодам
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ Тогда
			Если ОбъемноСортовойУчет Тогда
				Возврат "LK_GTIN_RECEIPT";
			Иначе
				Возврат "LK_RECEIPT";
			КонецЕсли;
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование Тогда
			Возврат "LK_GTIN_RECEIPT_CANCEL";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоИзОборотаВЦеляхНеСвязанныхСРеализацией
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратТовараВОборотПоСделкеСГосТайной
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат Тогда
			Возврат "LP_RETURN";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
			Возврат "ATK_AGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКИзменение Тогда
			Возврат "ATK_TRANSFORMATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
			Возврат "ATK_DISAGGREGATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот Тогда
			Возврат "CIRCULATION_INFORMATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот Тогда
			Возврат "CIRCULATION_INFORMATION_2";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
			Возврат "REPORT_REWEIGHING";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
			Возврат "CIS_INFORMATION_CHANGE";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
			Возврат "CONNECT_TAP";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки Тогда
			Возврат "WRITE_OFF";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузку Тогда
			Возврат "FIXATION";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД Тогда
			Возврат "UNIVERSAL_TRANSFER_DOCUMENT";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДИсправление Тогда
			Возврат "UNIVERSAL_TRANSFER_DOCUMENT_FIX";
		ИначеЕсли ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки
			Или ЗначениеПоиска = Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузкуАннулирование Тогда
			Возврат "FIXATION_CANCEL";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестный вид операции: %1';
				|en = 'Неизвестный вид операции: %1'"),
			ЗначениеПоиска);
	
КонецФункции

#Область НовыеТоварныеГруппыВнедрение

#Область ИмяТоварнойГруппы

Функция ПечатнаяПродукцияИмяТоварнойГруппы()
	Возврат "books";
КонецФункции

Функция СтроительныеМатериалыИмяТоварнойГруппы()
	Возврат "construction";
КонецФункции

Функция ОтопительныеПриборыИмяТоварнойГруппы()
	Возврат "heater";
КонецФункции

Функция БакалеяИмяТоварнойГруппы()
	Возврат "grocery";
КонецФункции

Функция АлкогольнаяПродукцияДо9ПроцентовИмяТоварнойГруппы()
	Возврат "";
КонецФункции

Функция ПиротехническиеИзделияИСредстваПожарнойБезопасностиИмяТоварнойГруппы()
	Возврат "fire";
КонецФункции

Функция КабельнаяПродукцияИмяТоварнойГруппы()
	Возврат "cableraw";
КонецФункции

Функция МоторныеМаслаИмяТоварнойГруппы()
	Возврат "autofluids";
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
