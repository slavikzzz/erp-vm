//++ НЕ УТ
#Область ПрограммныйИнтерфейс

// Определяет начало последней части отчетного периода по налогу на прибыль, в зависимости от периодичности,
// с которой должна отчитываться организация в данном налоговом периоде.
//
// Параметры:
//  Период		- Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - налогоплательщик
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность (продолжительность первого отчетного периода)
//
Функция НачалоПоследнейЧастиОтчетногоПериодаПрибыль(Период, Организация) Экспорт

	ПериодичностьОтчетногоПериода = НалоговыйУчет.ПериодичностьОтчетногоПериода(Период, Организация);
	
	Если ПериодичностьОтчетногоПериода = Перечисления.Периодичность.Квартал Тогда
		НачалоПоследнегоКварталаМесяца = НачалоКвартала(Период);
	Иначе	
		НачалоПоследнегоКварталаМесяца = НачалоМесяца(Период);
	КонецЕсли;
	
	Если НачалоПоследнегоКварталаМесяца = НачалоГода(Период) Тогда
		ДатаНачалаПериодаОтчета = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
	Иначе
		ДатаНачалаПериодаОтчета = НачалоПоследнегоКварталаМесяца;
	КонецЕсли;
	
	Возврат ДатаНачалаПериодаОтчета;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияРегистратора(ДокументОбъект, Отказ, РучнаяКорректировка = Ложь) Экспорт

	Если РучнаяКорректировка Тогда
		ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ, Ложь);
		Возврат;
	КонецЕсли;

	ПропуститьПроверкуЗапретаИзменения = ДокументОбъект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("РегистрыТребующиеОчистки") Тогда
		
		НаборыДвиженийДокумента = Новый Массив;
		Для Каждого Набор Из ДокументОбъект.ДополнительныеСвойства.РегистрыТребующиеОчистки.ПроверяемыеРегистры Цикл
			НаборыДвиженийДокумента.Добавить(ДокументОбъект.Движения[Набор.ИмяРегистра]);
		КонецЦикла;
		
	Иначе
		
		НаборыДвиженийДокумента = ДокументОбъект.Движения;
		
	КонецЕсли;
	
	//Запись пустых наборов движений в ИБ(очистка старых движений)
	Для Каждого Набор Из НаборыДвиженийДокумента Цикл
		
		Набор.Очистить();

		Если ПропуститьПроверкуЗапретаИзменения Тогда
			Набор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		Попытка
			Набор.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				СобытиеОбработкаДвижений(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ДокументОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Процедура включения активности движений при проведении документа, движения которого
// заданы вручную
Процедура ИзменитьАктивностьПоРегистратору(ДокументОбъект, Отказ,ВключитьАктивность = Истина) Экспорт
	
	ПропуститьПроверкуЗапретаИзменения = ДокументОбъект.ДополнительныеСвойства.Свойство("ПропуститьПроверкуЗапретаИзменения");
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("РегистрыТребующиеОчистки") Тогда
		
		НаборыДвиженийДокумента = Новый Массив;
		Для Каждого Набор Из ДокументОбъект.ДополнительныеСвойства.РегистрыТребующиеОчистки.ПроверяемыеРегистры Цикл
			НаборыДвиженийДокумента.Добавить(ДокументОбъект.Движения[Набор.ИмяРегистра]);
		КонецЦикла;
		
	Иначе
		
		НаборыДвиженийДокумента = ДокументОбъект.Движения;
		
	КонецЕсли;
	
	Для Каждого Набор Из НаборыДвиженийДокумента Цикл
		
		Набор.Прочитать();
		Набор.УстановитьАктивность(ВключитьАктивность);
		
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			Набор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		ОбщегоНазначенияБП.ПропуститьБизнесЛогикуПриЗаписи(Набор);
		
		Попытка
			Набор.Записать();
		Исключение
			// возможно, "сработал" RLS или механизм даты запрета изменения
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				СобытиеОбработкаДвижений(),
				УровеньЖурналаРегистрации.Ошибка,
				ДокументОбъект.Метаданные(),
				ДокументОбъект.Ссылка,
				ПодробноеПредставлениеОшибки(ОписаниеОшибки));
				
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

//++ НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ

// Функция формирует представление заголовка документа.
//
// Возвращаемое значение:
//  Строка - представление номера документа.
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "", ВыводитьИдентификаторГосконтракта = Ложь) Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		
		
		Если ВыводитьИдентификаторГосконтракта И ЗначениеЗаполнено(ДокументОбъект.ГосударственныйКонтракт) Тогда
			ПрефиксНомера = ДокументОбъект.ГосударственныйКонтракт + "/";
		Иначе
			ПрефиксНомера = "";
		КонецЕсли;
		
		Возврат СтрШаблон(
			"%1 № %2 от %3 г.",
			?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента),
			ПрефиксНомера + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.Номер, Истина, Ложь),
			Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'"));
	КонецЕсли;
	
КонецФункции

// Функция формирует представление суммы прописью в указанной валюте.
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Возврат РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта);

КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры:
//  Сумма  - Число - которое мы хотим форматировать,
//  Валюта - СправочникСсылка.Валюты - на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты.
//  ЧН - Строка - представляющая нулевое значение числа.
//  ЧРГ - Строка - разделитель групп целой части числа.
//
// Возвращаемое значение:
//  - Строка - Отформатированная должным образом строковое представление суммы.
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2"
					+ ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
					+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;
	
	Возврат РезультирующаяСтрока;
	
КонецФункции

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью.
// Проверяется также видимость элемента.
//
// Параметры:
//   Форма                - ФормаДокумента - форма документа, который открывается.
//   СписокТабличныхПолей - СписокЗначений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных).
//
// Возвращаемое значение:
//  Строка - Получить первую непустую видимую табличную часть.
Функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт

	Для Каждого Элемент Из СписокТабличныхПолей Цикл
		Если Форма.Объект[Элемент.Представление].Количество() > 0 Тогда
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				// Эта табличная часть - первая видимая, у которой есть данные
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТАБЛИЦАМИ

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты, Направление = "Возр") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты);
	
	СписокКолонок = КолонкаДаты + " " + Направление + ", " + КолонкаДокумента + " " + Направление;
	ТаблицаЗначений.Сортировать(СписокКолонок, Новый СравнениеЗначений);
	
КонецПроцедуры

Процедура ДобавитьДатуДокументаКРезультатуЗапроса(Результат, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый запрос;
	
	Для Каждого КлючИЗначение Из КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "",
			"",
			"
			|Объединить Все
			|");
			
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата
		|ИЗ
		|	Документ."+ИмяМетаданных+" КАК Док
		|ГДЕ
		|	Док.Ссылка В(&ДокументыТипа_"+ИмяМетаданных+")";
		
		УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Результат.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого строка Из НайденныеСтроки Цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПронумероватьТаблицу(ТаблицаЗначений, ИмяКолонкиНомера = "НомерСтроки") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонкиНомера) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиНомера, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;

	Ном = 1;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы[ИмяКолонкиНомера] = Ном;
		Ном = Ном + 1;
	КонецЦикла;

КонецПроцедуры

Функция ПустаяТаблицаРегистраНакопления(ИмяРегистра) Экспорт

	ПустаяТаблица = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	ПустаяТаблица.Колонки.Удалить("Активность");
	Если ПустаяТаблица.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		ПустаяТаблица.Колонки.Удалить("ВидДвижения");
	КонецЕсли;

	Возврат ПустаяТаблица;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НОМЕРАМИ ДОКУМЕНТОВ

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  - ЭлементСправочника  - Элемент справочника, для которого ищется родитель.
//
// Возвращаемое значение:
//  Массив - Получить список выше стоящих групп.
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				РодительЭлемента = Выборка["Родитель" + Индекс];
				Если РодительЭлемента = ТекущийЭлемент Тогда
					// Иногда из-за ошибок данных в базе может оказаться ситуация, 
					// когда у элемента справочника в качестве родителя указана ссылка на самого себя.
					// Это приведет к образованию бесконечного цикла, поэтому дальше не ищем.
					// Т.к. чаще всего функция вызывается при определении счетов учета в момент ввода данных,
					// то исключение не вызываем, считаем просто, что у элемента нет вышестоящих групп.
					// Сообщим пользователю об этом, чтобы он мог исправить.
					СообщитьОЦиклическойСсылкеВОбъекте(МетаданныеСправочника, ТекущийЭлемент);
					ТекущийЭлемент = Неопределено;
					Прервать;
				КонецЕсли;
				ТекущийЭлемент = РодительЭлемента;
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры:
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение:
//  - Строка - представление документа.
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента) Тогда
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проведение документа: %1 (%2)';
					|en = 'Document posting: %1 (%2)'"), СокрЛП(Документ), Документ.ВидОперации);
	Иначе
		ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проведение документа: %1';
					|en = 'Document posting: %1'"), СокрЛП(Документ));
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;

КонецФункции // ПредставлениеДокументаПриПроведении()

//-- НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УПРАВЛЯЕМЫМИ БЛОКИРОВКАМИ

// Устарела.
// Устанавливает управляемую блокировку таблицы.
//
// Параметры:
//  СтруктураПараметров 		- <Структура>. Структура параметров блокировки. Обязательный параметр.
//								Обязательно должна содержать свойства:
//								"ИмяТаблицы" - <Строка> - имя таблицы, на которую накладывается блокировка.
//									Например: "АвансовыйОтчет"
//								Необязательные свойства:
//								"ТипТаблицы" - <Строка> - тип таблицы, на которую накладывается блокировка.
//									Пространство блокировки состоит из типа таблицы и имени таблицы.
//									Например: "Документ"
//									Значение по умолчанию: "РегистрНакопления"
//								"РежимБлокировки" - <РежимБлокировкиДанных> - режим накладываемой блокировки.
//									Значение по умолчанию: РежимБлокировкиДанных.Исключительный
//								"ИсточникДанных" - источник данных для блокировки.
//									Может передаваться значение любого типа, поддерживаемого свойством ИсточникДанных элемента блокировки,
//									а также типа "Менеджер временных таблиц".
//									Если в структуре нет этого свойства - блокировки через ИспользоватьИзИсточникаДанных() не накладываются.
//								"ИмяВременнойТаблицы" - <Строка> - имя временной таблицы менеджера временных таблиц, которая служит источником данных для блокировки.
//									Обязательно должно указываться, если в качестве источника данных процедуре передан менеджер временных таблиц.
//  КоллекцияЗначенийБлокировки	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью УстановитьЗначение().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - блокируемое значение - <Произвольный тип>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом УстановитьЗначение() не накладываются.
//  КоллекцияОписанияИсточника	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью ИспользоватьИзИсточникаДанных().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - поле таблицы источника данных - <Строка>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом ИспользоватьИзИсточникаДанных() не накладываются.
//  Отказ 						- <Булево> - при ошибке в процессе установки блокировки в этот параметр процедура возвращает значение Истина.
//  Заголовок 					- <Строка> - заголовок сообщения об ошибке при установке блокировки.
//
Процедура УстановитьУправляемуюБлокировку(СтруктураПараметров, КоллекцияЗначенийБлокировки = Неопределено, КоллекцияОписанияИсточника = Неопределено, Отказ = Ложь, Заголовок = "") Экспорт

	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьЗначенияБлокировки = КоллекцияЗначенийБлокировки <> Неопределено
		И (ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Соответствие"))
		И КоллекцияЗначенийБлокировки.Количество() > 0;

	ИспользоватьИсточникДанных     = КоллекцияОписанияИсточника <> Неопределено
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И СтруктураПараметров.Свойство("ИсточникДанных");

	Если НЕ ИспользоватьЗначенияБлокировки И НЕ ИспользоватьИсточникДанных Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;

	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	ПространствоБлокировки = ТипТаблицы  + "." + ИмяТаблицы;
	ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);

	РежимБлокировки = ?(СтруктураПараметров.Свойство("РежимБлокировки"), СтруктураПараметров.РежимБлокировки, РежимБлокировкиДанных.Исключительный);
	ЭлементБлокировки.Режим = РежимБлокировки;

	Если ИспользоватьЗначенияБлокировки Тогда

		Для каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл

			ЭлементБлокировки.УстановитьЗначение(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Если ИспользоватьИсточникДанных Тогда

		ИсточникДанных = СтруктураПараметров.ИсточникДанных;

		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ТекстЗапроса = "";
			Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	Таб." + ЭлементКоллекции.Значение;
			КонецЦикла;
			ТекстЗапроса = Сред(ТекстЗапроса, 2);
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|ИЗ
			|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
			Запрос.Текст = ТекстЗапроса;
			Результат    = Запрос.Выполнить();

			ЭлементБлокировки.ИсточникДанных = Результат;

		Иначе

			ЭлементБлокировки.ИсточникДанных = ИсточникДанных;

		КонецЕсли;

		Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл

			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Блокировка.Заблокировать();

КонецПроцедуры

//++ НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

Функция ПолучитьФункциональнуюОпциюОбъекта(Имя, Объект) Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Объект.Организация, НачалоМесяца(Объект.Дата));

	Возврат ПолучитьФункциональнуюОпцию(Имя, ПараметрыФО);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Возвращает отборы динамического списка как значения заполнения при программном вводе новой строки в список.
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекДинамическогоСписка - компоновщик настроек списка.
//
// Возвращаемое значение:
//   Структура   - значения отборов для заполнения нового элемента списка.
//
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

Процедура ЗаменитьСвязьПараметровВыбора(Элемент, Имя, НоваяСвязьПараметровВыбора) Экспорт


	МассивСвязей = Новый Массив;
	Для Каждого СвязьПараметровВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если ВРег(СвязьПараметровВыбора.Имя) <> ВРег(Имя) Тогда
			МассивСвязей.Добавить(СвязьПараметровВыбора);
		КонецЕсли;
	КонецЦикла;

	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	МассивСвязей.Добавить(НоваяСвязьПараметровВыбора);
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

КонецПроцедуры

Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если Не (ЗначениеЗаполнено(Подразделение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация)) Тогда
		
		Если ПодразделениеПоУмолчанию = Неопределено Тогда
			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
				Подразделение = ПодразделениеПоУмолчанию;
			Иначе
				Подразделение = Неопределено;
			КонецЕсли;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Подразделение;

КонецФункции

//-- НЕ УТ

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - ФормаКлиентскогоПриложения  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем.
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции
 
// Возвращает структуру данных со сводным описанием контрагента.
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации.
//   СписокСведений формируется функцией СведенияОЮрФизЛице.
//  Список         - список запрашиваемых параметров организации.
//  СПрефиксом     - Признак выводить или нет префикс параметра организации.
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);

КонецФункции

// Устарела. Следует использовать ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке)
// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры:
//  ТабДокумент       - ТабличныйДокумент - Табличный документ.
//  ВыводимыеОбласти  - Массив - Массив из проверяемых таблиц или табличный документ.
//  РезультатПриОшибке - Булево - Какой возвращать результат при возникновении ошибки.
//
// Возвращаемое значение:
//   Булево - умещаются или нет переданные документы.
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ШаблонСообщения = НСТр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)
                                |%1';
                                |en = 'Cannot receive information about the current printer (printers may not be installed in the system)
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка вывода на печать';
				|en = 'Print output check'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

Процедура ЗаполнитьСписокОрганизаций(ЭлементПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	СоответствиеОрганизаций = Новый Структура;
	
	ИспользоватьУправленческуюОрганизацию = БухгалтерскийУчетПереопределяемый.ИспользоватьУправленческуюОрганизацию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ИспользоватьУправленческуюОрганизацию);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		НЕ Организации.Предопределенный ИЛИ &ИспользоватьУправленческуюОрганизацию
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Организации.ГоловнаяОрганизация,
	|		Организации.ГоловнаяОрганизация.Наименование,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|	ГДЕ
	|		Организации.ОбособленноеПодразделение) КАК НаборОрганизаций
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементПолеОрганизация.СписокВыбора.Очистить();
	МаксКоличествоСимволов = 40;
	Пока Выборка.Следующий() Цикл
		Ключ     = СтрЗаменить(Строка(Выборка.ВключатьОбособленныеПодразделения) + Выборка.Организация.УникальныйИдентификатор(), "-", "");
		Значение = Новый Структура("Организация,ВключатьОбособленныеПодразделения", Выборка.Организация, Выборка.ВключатьОбособленныеПодразделения);
		СоответствиеОрганизаций.Вставить(Ключ, Значение);
		
		ОрганизацияПредставление = Выборка.ОрганизацияПредставление;
		
		Если Выборка.ВключатьОбособленныеПодразделения Тогда
			ОрганизацияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 с обособленными подразделениями';
					|en = '%1 with branch offices'"),
				Выборка.ОрганизацияПредставление);
		Иначе
			ОрганизацияПредставление = Выборка.ОрганизацияПредставление;
		КонецЕсли;
		
		ЭлементПолеОрганизация.СписокВыбора.Добавить(Ключ, ОрганизацияПредставление);
		
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(ОрганизацияПредставление));
	КонецЦикла;
	
	ЭлементПолеОрганизация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ЭлементПолеОрганизация.ВысотаСпискаВыбора = ?(ЭлементПолеОрганизация.СписокВыбора.Количество() > 15, 15, ЭлементПолеОрганизация.СписокВыбора.Количество());

КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив - элементы произвольных типов, из которых удаляются неуникальные.
//  НеИспользоватьНеопределено - Булево - если Истина, то все значения Неопределено удаляются из массива.
//  АнализироватьСсылкиКакИдентификаторы - Булево - если Истина, то для ссылок вызывается функция УникальныйИдентификатор()
//                                                  и уникальность определяется по строкам-идентификаторам.
//
// Возвращаемое значение:
//   Массив      - элементы ОбрабатываемыйМассив после удаления лишних.
//
Функция УдалитьПовторяющиесяЭлементыМассива(ОбрабатываемыйМассив, НеИспользоватьНеопределено = Ложь, АнализироватьСсылкиКакИдентификаторы = Ложь) Экспорт

	Если ТипЗнч(ОбрабатываемыйМассив) <> Тип("Массив") Тогда
		Возврат ОбрабатываемыйМассив;
	КонецЕсли;
	
	УжеВМассиве = Новый Соответствие;
	Если АнализироватьСсылкиКакИдентификаторы Тогда   // сравниваем ссылки как строки-уникальные идентификаторы
		
		ОписаниеСсылочныхТипов = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		
	 	БылоНеопределено = Ложь;
		КоличествоЭлементовВМассиве = ОбрабатываемыйМассив.Количество();

		Для ОбратныйИндекс = 1 По КоличествоЭлементовВМассиве Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[КоличествоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					ОбрабатываемыйМассив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеСсылочныхТипов.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				ОбрабатываемыйМассив.Удалить(КоличествоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		ИндексЭлемента = 0;
		КоличествоЭлементов = ОбрабатываемыйМассив.Количество();
		Пока ИндексЭлемента < КоличествоЭлементов Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[ИндексЭлемента];
			Если НеИспользоватьНеопределено И ЭлементМассива = Неопределено
			 Или УжеВМассиве[ЭлементМассива] = Истина Тогда      // удаляем, переходя к следующему
			 
				ОбрабатываемыйМассив.Удалить(ИндексЭлемента);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				
			Иначе   // запоминаем, переходя к следующему
				
				УжеВМассиве.Вставить(ЭлементМассива, Истина);
				ИндексЭлемента = ИндексЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ОбрабатываемыйМассив;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Для вызова с клиента. Возвращает строковое имя значения перечисления по его ссылке.
//
// Параметры:
//  Значение     - ПеречислениеСсылка - значение, для которого необходимо получить имя перечисления.
//
// Возвращаемое значение:
//  Строка       - см. ОбщегоНазначения.ИмяЗначенияПеречисления()
//
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(Значение);
	
КонецФункции

//++ НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();

	// Запасы
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();

	ПараметрыУчета.ВестиПартионныйУчет = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") <> Неопределено;
	ВестиСкладскойУчет  = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;
	Если ВестиСкладскойУчет Тогда
		ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладам = Ложь;
	КонецЕсли;

	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);

	// Розница
	БУ = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ.ПолучитьОбъект();
	ПараметрыУчета.ИспользоватьОборотнуюНоменклатуру = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, "ВидСубконто") <> Неопределено;
	ПараметрыУчета.РазделятьПоСтавкамНДС = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС, "ВидСубконто") <> Неопределено;

	// Работники
	ПараметрыУчета.ВестиУчетПоРаботникам = ?(БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно(),0,1);
	ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме();
	ПараметрыУчета.КадровыйУчет = БухгалтерскийУчетПереопределяемый.ВедетсяКадровыйУчет();

	Возврат ПараметрыУчета;

КонецФункции

Функция ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ = Ложь) Экспорт

	// Структура параметров.

	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров.
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов.
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов,
		// которые не должны обрабатываться при обработке подчиненных счетов.
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто.
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров.

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета.

	// Имя параметра, константа типа Булево или строка "ПоСчету" (только для признаков учета Количественный и Валютный).
	// Неопределено - не менять.
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто.
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета.
	// Имя параметра учета.
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); 	// Счета, для которых будут
																								// использоваться константные значения вместо значений параметров.

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	////////////////////////////////////////////////////////////////
	// Учет МПЗ.
	СтрокаРезультата = Результат.Добавить();

	// Счета.
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	СтрокаСчета.СПодчиненными = Истина;

	// В УП2 счет 08.04 разбит на субсчета, в БП3 - счет один.
	Если НЕ ЗначениеЗаполнено(ПланыСчетов.Хозрасчетный.НайтиПоКоду("08.04.1")) Тогда 
		СтрокаСчета = Счета.Добавить();
		СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств;
		СтрокаСчета.СПодчиненными = Истина;
	КонецЕсли;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Материалы;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Исключения иерархии.
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	
	// В УП2 добавлены 10.ДР и 41.ДР для нераспределенных доп.расходов.
	Счет10ДР = ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.ДР");
	Если ЗначениеЗаполнено(Счет10ДР) Тогда
		ИсключенияИерархии.Добавить(Счет10ДР);
	КонецЕсли;
	
	Счет41ДР = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.ДР");
	Если ЗначениеЗаполнено(Счет41ДР) Тогда
		ИсключенияИерархии.Добавить(Счет41ДР);
	КонецЕсли;
	
	Счет07ДР = ПланыСчетов.Хозрасчетный.НайтиПоКоду("07.ДР");
	Если ЗначениеЗаполнено(Счет07ДР) Тогда
		ИсключенияИерархии.Добавить(Счет07ДР);
	КонецЕсли;
	
	// Субконто.
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = "ВестиПартионныйУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры.
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиПартионныйУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено; // По умолчанию партионный учет отключен.

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		Если ЗначениеЗаполнено(Счет10ДР) Тогда
			СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
			СтрокаИсключения.Счет = Счет10ДР;
			СтрокаИсключения.СПодчиненными = Ложь;
			СтрокаИсключения.Значение = Неопределено;
		КонецЕсли;

		Если ЗначениеЗаполнено(Счет41ДР) Тогда
			СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
			СтрокаИсключения.Счет = Счет41ДР;
			СтрокаИсключения.СПодчиненными = Ложь;
			СтрокаИсключения.Значение = Неопределено;
		КонецЕсли;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСкладскойУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		Если ЗначениеЗаполнено(Счет10ДР) Тогда
			СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
			СтрокаИсключения.Счет = Счет10ДР;
			СтрокаИсключения.СПодчиненными = Ложь;
			СтрокаИсключения.Значение = Неопределено;
		КонецЕсли;

		Если ЗначениеЗаполнено(Счет41ДР) Тогда
			СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
			СтрокаИсключения.Счет = Счет41ДР;
			СтрокаИсключения.СПодчиненными = Ложь;
			СтрокаИсключения.Значение = Неопределено;
		КонецЕсли;


	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Истина;

	Если ТолькоМПЗ Тогда
		Возврат Результат;
	КонецЕсли;

	////////////////////////////////////////////////////////////////
	// Розничная торговля.
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
	СтрокаСчета.СПодчиненными = Ложь;

	// Субконто.
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
	СтрокаСубконто.Параметр = "РазделятьПоСтавкамНДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	СтрокаСубконто.Параметр = Ложь;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры.
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ИспользоватьОборотнуюНоменклатуру";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Ложь;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "РазделятьПоСтавкамНДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Денежные средства.
	СтрокаРезультата = Результат.Добавить();

	// Счета.
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Касса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ОперационнаяКасса;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.СпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Аккредитивы;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ЧековыеКнижки;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.АккредитивыВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПути;
	СтрокаСчета.СПодчиненными = Ложь;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПереводыВПутиВал;
	СтрокаСчета.СПодчиненными = Ложь;
	
	// Субконто.
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
	СтрокаСубконто.Параметр = "ВестиУчетПоСтатьямДДС";
	СтрокаСубконто.Количественный = Ложь;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Истина;
	СтрокаСубконто.Валютный = Истина;

	// Параметры.
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоСтатьямДДС";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	////////////////////////////////////////////////////////////////
	// Зарплата.

	СтрокаРезультата = Результат.Добавить();

	// Счета.
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов;
	СтрокаСчета.СПодчиненными = Истина;

	// Субконто.
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	СтрокаСубконто.Параметр = "ВестиУчетПоРаботникам";
	СтрокаСубконто.Количественный = "Количественный";
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Ложь;

	// Параметры.
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;

	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиУчетПоРаботникам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

	Возврат Результат;

КонецФункции

Функция ПолучитьДействияИзмененияСубконто(ПараметрыУчетаФормы, ТолькоМПЗ = Ложь) Экспорт

	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ПараметрыУчетаФормы Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// Учет МПЗ
	Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
		ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
	КонецЕсли;
	Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
		ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
	КонецЕсли;

	ПараметрыСубконто = ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ);

	ПризнакиУчета = ПолучитьСтруктуруПризнаковУчетаСубконто();

	ТипДействия = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	// -1 удалить; 0 - не менять; 1 - установить

	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДействий.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаДействий.Колонки.Добавить("Действие", ТипДействия);
	Для каждого ПризнакУчета Из ПризнакиУчета Цикл
		ТаблицаДействий.Колонки.Добавить(ПризнакУчета.Ключ, ТипДействия);
	КонецЦикла;

	Для каждого ОписаниеГруппыСчетов Из ПараметрыСубконто Цикл

		СчетаВСписке = Новый Массив;
		СчетаВИерархии = Новый Массив;
		СчетаНеВИерархии = ОписаниеГруппыСчетов.ИсключенияИерархии;

		Для каждого ОписаниеСчета Из ОписаниеГруппыСчетов.Счета Цикл
			Если ОписаниеСчета.СПодчиненными Тогда
				СчетаВИерархии.Добавить(ОписаниеСчета.Счет);
			Иначе
				СчетаВСписке.Добавить(ОписаниеСчета.Счет);
			КонецЕсли;
		КонецЦикла;

		// Получим список счетов для обработки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаВСписке", СчетаВСписке);
		Запрос.УстановитьПараметр("СчетаВИерархии", СчетаВИерархии);
		Запрос.УстановитьПараметр("СчетаНеВИерархии", СчетаНеВИерархии);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Порядок КАК Порядок,
		|	Хозрасчетный.Код,
		|	Хозрасчетный.Валютный,
		|	Хозрасчетный.Количественный,
		|	Хозрасчетный.ВидыСубконто.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСубконто,
		|		ТолькоОбороты,
		|		Суммовой,
		|		Валютный,
		|		Количественный
		|	)
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В (&СчетаВСписке)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаВИерархии)
		|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаНеВИерархии)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Счет,
		|	НомерСтроки";

		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл

			ПараметрыСчета = ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета,
				ОписаниеГруппыСчетов.Параметры, ВыборкаСчетов.Счет);

			ВидыСубконто = ВыборкаСчетов.ВидыСубконто.Выгрузить();

			Для каждого ОписаниеСубконто Из ОписаниеГруппыСчетов.Субконто Цикл
				СтрокаДействия = Неопределено;

				ИспользованиеСубконто = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто.Параметр,
					ПараметрыСчета, ВыборкаСчетов);

				Если ИспользованиеСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСубконто = ВидыСубконто.Найти(ОписаниеСубконто.Вид, "ВидСубконто");
				Если ИспользованиеСубконто Тогда
					Если СтрокаСубконто = Неопределено Тогда
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = 1;						
					КонецЕсли;

					// проверим признаки учета
					Для каждого ПризнакУчета Из ПризнакиУчета Цикл
						ЗначениеПризнака = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто[ПризнакУчета.Ключ],
							ПараметрыСчета, ВыборкаСчетов);
						Если ЗначениеПризнака = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если СтрокаСубконто = Неопределено
							ИЛИ СтрокаСубконто[ПризнакУчета.Ключ] <> ЗначениеПризнака Тогда

							Если СтрокаДействия = Неопределено Тогда
								СтрокаДействия = ТаблицаДействий.Добавить();
								СтрокаДействия.Счет = ВыборкаСчетов.Счет;
								СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
							КонецЕсли;
							Если ЗначениеПризнака Тогда
								СтрокаДействия[ПризнакУчета.Ключ] = 1;
							Иначе
								СтрокаДействия[ПризнакУчета.Ключ] = -1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если СтрокаСубконто = Неопределено Тогда
						Продолжить;
					Иначе
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = -1;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДействий;

КонецФункции

Функция СобытиеЖурналаРегистрацииПараметрыУчета() Экспорт

	Возврат НСтр("ru = 'Настройка параметров учета';
				|en = 'Accounting parameters setup'", ОбщегоНазначения.КодОсновногоЯзыка())

КонецФункции

Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто, Отказ, ТолькоМПЗ, ВестиУчетЗатратПоПодразделениям) Экспорт
	
	ПризнакиУчета             = ПолучитьСтруктуруПризнаковУчетаСубконто();
	ДействияИзмененияСубконто = ПолучитьДействияИзмененияСубконто(ПараметрыУчета); // Иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов, на втором - действия с признаками учета.
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет
	СчетаКИзменению = ОбщегоНазначения.ВыгрузитьКолонку(ДействияИзмененияСубконто, "Счет", Истина);
	ДействияИзмененияСубконто.Индексы.Добавить("Счет");
	Отбор = Новый Структура("Счет");
	
	НачатьТранзакцию();

	Попытка

		Для Каждого Счет Из СчетаКИзменению Цикл
			
			Отбор.Счет = Счет;
			ДействияДляСчета = ДействияИзмененияСубконто.НайтиСтроки(Отбор);
			
			Объект = Счет.ПолучитьОбъект();
			
			ПротоколИзменений = Новый Массив;
			
			Для Каждого Действие Из ДействияДляСчета Цикл
				
				// Действие: -1 удалить; 0 - не менять; 1 - установить
				
				// Действия с видом субконто
				Если Действие.Действие = 1 Тогда
					
					// Добавить субконто
					
					Если Счет = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда Тогда
						ВидыСубконтоСтрока = Объект.ВидыСубконто.Вставить(0);
					Иначе				
						ВидыСубконтоСтрока = Объект.ВидыСубконто.Добавить();
					КонецЕсли;
				
					ВидыСубконтоСтрока.ВидСубконто = Действие.Субконто;
					
					ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
					
				Иначе
					
					ВидыСубконтоСтрока = Объект.ВидыСубконто.Найти(Действие.Субконто, "ВидСубконто");
					Если ВидыСубконтоСтрока = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Действие.Действие = -1 Тогда
					
					ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
					
					Объект.ВидыСубконто.Удалить(ВидыСубконтоСтрока);
					
					Продолжить;
					
				КонецЕсли;
				
				// Действия с признаками учета
				
				Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
					
					ДействиеСПризнаком = Действие[ПризнакУчета.Ключ];

					Если ДействиеСПризнаком = 1 Тогда
						ЗначениеПризнака = Истина;
					ИначеЕсли ДействиеСПризнаком = -1 Тогда
						ЗначениеПризнака = Ложь;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака Тогда
						Продолжить;
					КонецЕсли;
					
					ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака;
					
					ДобавитьВПротоколИзменениеПризнакаУчета(
						ПротоколИзменений, 
						ВидыСубконтоСтрока.ВидСубконто, 
						ПризнакУчета.Значение, 
						ДействиеСПризнаком);
					
				КонецЦикла; // По признакам учета
				
			КонецЦикла; // По ДействияДляСчета
			
			Если Не Объект.Модифицированность() Тогда
				Продолжить;
			КонецЕсли;
			
			ПротоколИзмененийСтрокой = СтрСоединить(ПротоколИзменений, Символы.ПС);
			
			Попытка
				Объект.Записать();
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				Отказ = Истина;
				
				ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]:
					|[ОписаниеОшибки]
					|Ошибка произошла при попытке выполнить следующие изменения:
					|[ПротоколИзменений]';
					|en = 'An error occurred while writing account [КодСчета]:
					|[ОписаниеОшибки]
					|An error occurred while trying to perform the following changes:
					|[ПротоколИзменений]'");
					
				ПараметрыТекста = Новый Структура;
				ПараметрыТекста.Вставить("КодСчета",          Объект.Код);
				ПараметрыТекста.Вставить("ПротоколИзменений", ПротоколИзмененийСтрокой);
				
				// В журнал регистрации выведем подробную информацию
				ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
				
				Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрацииПараметрыУчета(),
					УровеньЖурналаРегистрации.Ошибка,
					Счет.Метаданные(),
					Счет, // Данные
					Текст);
					
				// Пользователю выведем краткое сообщение
				ШаблонТекста = НСтр("ru = 'Ошибка при записи счета [КодСчета]
					|Подробности см. в Журнале регистрации.';
					|en = 'An error occurred while writing account [КодСчета] 
					|For more information, see the Event log.'");
				Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
				ОбщегоНазначения.СообщитьПользователю(Текст);
				
			КонецПопытки;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
			// Запишем в журнал регистрации подробную информацию об изменениях
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Информация, 
				Счет.Метаданные(),
				Счет,
				ПротоколИзмененийСтрокой,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		КонецЦикла; // По СчетаКИзменению

		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе

			БухгалтерскийУчетПереопределяемый.УстановитьПараметрыУчетаРасчетовПоЗарплате(?(ПараметрыУчета.ВестиУчетПоРаботникам = 1, Ложь, Истина));
			БухгалтерскийУчетПереопределяемый.УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 1, Истина, Ложь));
			БухгалтерскийУчетПереопределяемый.УстановитьНастройкиКадровогоУчета(?(ПараметрыУчета.КадровыйУчет = 1, Истина, Ложь), ?(ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = 0, Истина, Ложь));	
		
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение

		ОтменитьТранзакцию();

		ОписаниеОшибки = ИнформацияОбОшибке();
		
		Отказ = Истина;
		
		ШаблонТекста = НСтр("ru = 'Ошибка при изменении параметров учета:
			|[ОписаниеОшибки]';
			|en = 'An error occurred when changing accounting parameters:
			|[ОписаниеОшибки]'");
			
		ПараметрыТекста = Новый Структура;
		// В журнал регистрации выведем подробную информацию.
		ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Текст);
			
		// Пользователю выведем краткое сообщение.
		Текст = НСтр("ru = 'Ошибка при изменении параметров учета.
			|Подробности см. в Журнале регистрации.';
			|en = 'An error occurred when changing accounting parameters.
			|For more information, see the event log.'");
		ОбщегоНазначения.СообщитьПользователю(Текст);
	
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНайти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ТипГруппы <> ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			
			ДобавитьЗначенияЗаполнения(ЭлементОтбора.Элементы, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Функция СобытиеОбработкаДвижений()

	Возврат НСТр("ru = 'Обработка движений';
				|en = 'Action processing'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

//++ НЕ УТ

// Выводит пользователю и записывает в журнал регистрации сообщение о том, 
// что в элементе справочнике или плана видов характеристик обнаружена 
// циклическая ссылка на самого себя в поле Родитель.
//
Процедура СообщитьОЦиклическойСсылкеВОбъекте(МетаданныеОбъекта, ЭлементДанных)

	ВидОбъекта = "";
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
		ВидОбъекта = НСтр("ru = 'В справочнике';
							|en = 'In catalog'");
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
		ВидОбъекта = НСтр("ru = 'В плане видов характеристик';
							|en = 'In chart of characteristic types'");
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2 элемент ""%3"" в поле ""%4"" содержит циклическую ссылку на самого себя. Необходимо указать правильную группу.';
			|en = '%1 %2 item ""%3"" in the ""%4"" field contains a circular reference to itself. Specify the correct group.'"),
		ВидОбъекта,
		МетаданныеОбъекта.Синоним,
		ЭлементДанных,
		МетаданныеОбъекта.СтандартныеРеквизиты.Родитель.Синоним);
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ЦиклическаяСсылка';
			|en = 'ЦиклическаяСсылка'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеОбъекта,
		ЭлементДанных,
		ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭлементДанных, "Родитель", "Объект");

КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'Добавлено субконто ""%1""';
							|en = 'Extra dimension ""%1"" is added'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'Удалено субконто ""%1""';
							|en = 'Extra dimension ""%1"" is deleted'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Изменено субконто ""%1""';
							|en = 'Extra dimension ""%1"" is changed'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Изменение)
	
	// В интерфейсе признаки учета называем "видами"
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" установлен вид учета %2';
							|en = 'Accounting kind %2 is set for extra dimension ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" снят вид учета %2';
							|en = 'Accounting kind %2 is removed for extra dimension ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru = 'У субконто ""%1"" изменен вид учета %2';
							|en = 'Accounting kind %2 is changed for extra dimension ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто, ПризнакУчета);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Функция ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета, ПараметрыГруппыСчетов, Счет)

	Результат = Новый Структура;

	Для каждого СтрокаПараметра Из ПараметрыГруппыСчетов Цикл
		ЗначениеУстановлено = Ложь;
		Для каждого СтрокаИсключения Из СтрокаПараметра.Исключения Цикл
			Если СтрокаИсключения.Счет = Счет Тогда
				ЗначениеПараметра = СтрокаИсключения.Значение;
				ЗначениеУстановлено = Истина;
				Прервать;
			Иначе
				Если СтрокаИсключения.СПодчиненными
					И БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, СтрокаИсключения.Счет) Тогда

					ЗначениеПараметра = СтрокаИсключения.Значение;
					ЗначениеУстановлено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеУстановлено Тогда
			ЗначениеПараметра = ПараметрыУчета[СтрокаПараметра.Имя];
		КонецЕсли;
		Результат.Вставить(СтрокаПараметра.Имя, ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьЗначениеПараметраУчетаСубконто(Параметр, ЗначенияПараметровУчетаДляСчета, СтрокаСчета)

	Если Параметр = Неопределено ИЛИ ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат Параметр;
	Иначе
		Если ЗначенияПараметровУчетаДляСчета.Свойство(Параметр) Тогда
			Возврат ЗначенияПараметровУчетаДляСчета[Параметр];
		Иначе
			Возврат СтрокаСчета[Параметр];
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ПолучитьСтруктуруПризнаковУчетаСубконто()

	ПризнакиУчета = Новый Структура;
	ПризнакиУчета.Вставить("Количественный", НСтр("ru = 'Количественный';
													|en = 'Quantitative'"));
	ПризнакиУчета.Вставить("Суммовой", НСтр("ru = 'Суммовой';
											|en = 'Amount '"));
	ПризнакиУчета.Вставить("ТолькоОбороты", НСтр("ru = 'Только обороты';
												|en = 'Only turnovers'"));
	ПризнакиУчета.Вставить("Валютный", НСтр("ru = 'Валютный';
											|en = 'Currency'"));

	Возврат ПризнакиУчета;

КонецФункции

//-- НЕ УТ

#КонецОбласти
