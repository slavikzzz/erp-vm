////////////////////////////////////////////////////////////////////////////////
// Электронный документооборот с ФСС.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Получение от веб-сервису СФР и расшифровка, проверка подписи листка нетрудоспособности.
//
// Параметры:
//  ВыполняемоеОповещение       - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат                            - Структура:
//      * ПодписьВалидна                     - Булево - результат проверки подписи.
//      * АдресРасшифрованногоОтветаSOAP     - Строка - адрес во временном хранилище незашифрованного ответа SOAP от веб-сервиса СФР.
//                                         - Неопределено - при ошибке.
//
//  ЗапросДляПолученияЭЛН - Структура:
//    * Организация                - СправочникСсылка.Организации - организация, сертификатом которой для ФСС подписывать.
//    * РегистрационныйНомерФСС    - Строка - регистрационный номер СФР или регистрационный номер ФСС организации.
//    * ЭтоРегистрационныйНомерСФР - Булево или Неопределено - необязательный ключ, указывает на передачу в ключе
//                                   "РегистрационныйНомерФСС" регистрационного номера СФР.
//    * ТекстXML                   - Строка - XML запроса SOAP операции с листком нетрудоспособности без подписи.
//
Процедура ПолучитьДанныеЭЛНИзФСС(ВыполняемоеОповещение, ЗапросДляПолученияЭЛН) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ЗапросДляПолученияЭЛН", 	ЗапросДляПолученияЭЛН);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьДанныеЭЛНИзФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Подписание, шифрование, отправка на веб-сервису ФСС реестра электронных листков нетрудоспособности и получение результатов.
//
// Параметры:
//  ВыполняемоеОповещение   - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат                            - Структура:
//      * ПодписьВалидна                     - Булево - результат проверки подписи.
//      * АдресРасшифрованногоОтветаSOAP     - Строка - адрес во временном хранилище незашифрованного ответа SOAP от веб-сервиса ФСС.
//                                         - Неопределено - при ошибке.
//
//  ВыгрузкаРеестраДанныхЭЛН - Структура:
//    * Организация             - СправочникСсылка.Организации - организация, сертификатом которой для ФСС подписывать.
//    * РегистрационныйНомерФСС - Строка - регистрационный номер организации в ФСС.
//    * ТекстXML                - Строка - XML выгрузки реестра ЭЛН.
//
Процедура ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС(
		ВыполняемоеОповещение,
		ВыгрузкаРеестраДанныхЭЛН) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 		ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ВыгрузкаРеестраДанныхЭЛН", 	ВыгрузкаРеестраДанныхЭЛН);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Устарела. Используется в составе ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС.
// Получение адреса подписанного, зашифрованного запроса к веб-сервису ФСС для отправки реестра листков нетрудоспособности.
//
// Параметры:
//  ВыполняемоеОповещение   - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат               - Строка - адрес во временном хранилище подписанного или подписанного и зашифрованного запроса SOAP
//                                       к веб-сервису ФСС.
//                              Неопределено - при ошибке.
//
//  ОрганизацияСсылка       - СправочникСсылка.Организации - организация, сертификатом которой для ФСС подписывать.
//
//  РегистрационныйНомерФСС - Строка - регистрационный номер ФСС.
//
//  ВыгрузкаЭЛН             - Строка - XML выгрузки ЭЛН.
//
//  ЗашифроватьSOAP         - Булево - если Истина, запрос будет подписан и зашифрован, иначе только подписан.
//
Процедура АдресПодписанногоSOAPЗагрузкиЭЛНВФСС(
		ВыполняемоеОповещение,
		ОрганизацияСсылка,
		РегистрационныйНомерФСС,
		ВыгрузкаЭЛН,
		ЗашифроватьSOAP = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ОрганизацияСсылка", 		ОрганизацияСсылка);
	ДополнительныеПараметры.Вставить("РегистрационныйНомерФСС", РегистрационныйНомерФСС);
	ДополнительныеПараметры.Вставить("ВыгрузкаЭЛН", 			ВыгрузкаЭЛН);
	ДополнительныеПараметры.Вставить("ЗашифроватьSOAP", 		ЗашифроватьSOAP);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"АдресПодписанногоSOAPЗагрузкиЭЛНВФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Устарела. Используется в составе ПолучитьДанныеЭЛНИзФСС.
// Получение адреса подписанного, зашифрованного запроса к веб-сервису ФСС для выполнения операции с листком нетрудоспособности
// (получения ЭЛН, прекращения действия ЭЛН).
//
// Параметры:
//  ВыполняемоеОповещение       - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат                   - Строка - адрес во временном хранилище подписанного или подписанного и зашифрованного запроса SOAP
//                                           к веб-сервису ФСС.
//                                  Неопределено - при ошибке.
//
//  ОрганизацияСсылка           - СправочникСсылка.Организации - организация, сертификатом которой для ФСС подписывать.
//
//  ВыгрузкаЗапросаОперацииСЭЛН - Строка - XML запроса SOAP операции с листком нетрудоспособности без подписи.
//
//  ЗашифроватьSOAP             - Булево - если Истина, запрос будет подписан и зашифрован, иначе только подписан.
//
Процедура АдресПодписанногоSOAPОперацииСЭЛНВФСС(
		ВыполняемоеОповещение,
		ВыгрузкаЗапросаОперацииСЭЛН,
		ЗашифроватьSOAP = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ВыгрузкаЗапросаОперацииСЭЛН", 	ВыгрузкаЗапросаОперацииСЭЛН);
	ДополнительныеПараметры.Вставить("ЗашифроватьSOAP", 				ЗашифроватьSOAP);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"АдресПодписанногоSOAPОперацииСЭЛНВФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Устарела. Используется в составе ПолучитьДанныеЭЛНИзФСС и ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС.
// Получение адреса расшифрованного ответа веб-сервиса ФСС на запрос операции с листком нетрудоспособности, а также результатов
// проверки подписи ответа.
//
// Параметры:
//  ВыполняемоеОповещение                - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат                            - Структура:
//      * ПодписьВалидна                     - Булево - результат проверки подписи.
//      * АдресРасшифрованногоОтветаSOAP     - Строка - адрес во временном хранилище незашифрованного ответа SOAP от веб-сервиса ФСС.
//                                         - Неопределено - при ошибке.
//
//  ОрганизацияСсылка                    - СправочникСсылка.Организации - организация, сертификатом которой для ФСС расшифровывать.
//
//  АдресПодписанногоОтветаSOAP          - Строка - адрес во временном хранилище SOAP подписанного или подписанного и зашифрованного
//                                                  ответа SOAP от веб-сервиса ФСС.
//
//  РасшифроватьSOAP                     - Булево - если Истина, будет выполнена дешифрация и проверка подписи, иначе только проверка
//                                                  подписи.
//
Процедура ПроверитьПодписьSOAPОтветаЭЛНВФСС(
		ВыполняемоеОповещение,
		ОрганизацияСсылка,
		АдресПодписанногоОтветаSOAP,
		РасшифроватьSOAP = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ОрганизацияСсылка", 				ОрганизацияСсылка);
	ДополнительныеПараметры.Вставить("АдресПодписанногоОтветаSOAP", 	АдресПодписанногоОтветаSOAP);
	ДополнительныеПараметры.Вставить("РасшифроватьSOAP", 				РасшифроватьSOAP);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодписьSOAPОтветаЭЛНВФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПоказатьИнформациюоСроках() Экспорт
	
	ОткрытьФорму(
		"Документ.ВходящийДокументСЭДОФСС.Форма.ФормаСрокиПредставления"
		,
		,
		,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область СЭДОФСС

// Получает данные входящих сообщений СЭДО ФСС.
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                     -  Структура:
//      * БылиОшибки           - Булево - если Истина, то при выполнении операции возникали ошибки.
//      * ОшибкиПоОрганизациям - Соответствие - возвращаются массивы описаний ошибок в разрезе по организациям.
//      * ДанныеСообщенийПоОрганизациям - Соответствие - ключ соответствия организация, значение - массив структур с полями:
//        * Идентификатор           - Строка - идентификатор сообщения.
//        * Тип                     - Число  - тип сообщения согласно спецификации.
//        * Получатель              - Строка - идентификатор получателя.
//        * ТребуетсяПодтверждение  - Булево - требуется подтверждение о прочтении сообщения.
//        * Содержимое              - Строка - текстовое содержимое сообщения.
//        * Новое                   - Булево - признак того, что это это новое сообщение, данные которого ещё не были загружены.
//        * РегистрационныйНомерСФР - Строка - регистрационный номер СФР организации страхователя.
//      * РезультатыПоОрганизациям - Соответствие - ключ соответствия организация, значение - массив структур с полями:
//        * Выполнено            - Булево - признак успешного выполнения операции.
//        * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//        * ДанныеСообщения      - Структура - см. описание структуры ДанныеСообщенийПоОрганизациям.
//        * Идентификатор        - Строка - идентификатор сообщения.
//  Организации                     - Массив - массив организаций, по которым нужно получить сообщения.
//  ЗадаватьВопросОТестовомСервере  - Булево.
//  ПоказыватьДлительнуюОперацию    - Булево.
//  ТипВзаимодействия               - Число - Неопределено или 2 - обмен для страхователя, 3 - для организации (МЧД).
//
Процедура ПолучитьВходящиеСообщенияСЭДОФСС(
		ОповещениеОбратногоВызова,
		Организации,
		ЗадаватьВопросОТестовомСервере = Истина,
		ПоказыватьДлительнуюОперацию = Истина,
		ТипВзаимодействия = Неопределено) Экспорт
		
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияВходящихСообщенийСЭДОФСС", ЭтотОбъект, ПараметрыОбработчика);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", 		Обработчик);
	ДополнительныеПараметры.Вставить("Организации", 					Организации);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере", 	ЗадаватьВопросОТестовомСервере);
	ДополнительныеПараметры.Вставить("ПоказыватьДлительнуюОперацию", 	ПоказыватьДлительнуюОперацию);
	ДополнительныеПараметры.Вставить("ТипВзаимодействия", 				ТипВзаимодействия);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьВходящиеСообщенияСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПослеПолученияВходящихСообщенийСЭДОФСС(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат.Свойство("ОшибкиПоОрганизациям") = Ложь Тогда
		ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;                                 
	
	Если Результат.ОшибкиПоОрганизациям.Количество() > 0 Тогда                             
		СведенияПоОшибкам = ДлительнаяОтправкаКлиентСервер.НовыеПараметрыСохранения(Ложь);  
		
		ОшибкиМассив = Новый Массив;
		Для Каждого КиЗ Из Результат.ОшибкиПоОрганизациям Цикл    
			Для Каждого ТекстОшибки Из КиЗ.Значение Цикл   
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("Организация", КиЗ.Ключ);
				СтруктураОшибки.Вставить("ОписаниеОшибки", ТекстОшибки);
				ОшибкиМассив.Добавить(СтруктураОшибки);
			КонецЦикла;
		КонецЦикла;
		СведенияПоОшибкам.Ошибки					= Новый ФиксированныйМассив(ОшибкиМассив);
		СведенияПоОшибкам.ЕстьОшибки				= Истина;
		СведенияПоОшибкам.ЭтоОбмен					= Истина;
		СведенияПоОшибкам.ВидКонтролирующегоОргана	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		
		ДлительнаяОтправкаКлиент.ПоказатьОшибки("Обработка.ДокументооборотСКонтролирующимиОрганами", СведенияПоОшибкам);
	КонецЕсли;
	Результат.ОшибкиПоОрганизациям.Очистить();
	ВыполнитьОбработкуОповещения(ПараметрыОбработчика.ОповещениеОбратногоВызова, Результат);  
	
КонецПроцедуры

// Получает список входящих сообщений для организаций-страхователей с сервера СЭДО ФСС.
//
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат.
//    Результат                            - Структура:
//      * Выполнено         - Булево - признак успешного выполнения операции.
//      * ОписаниеОшибки    - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ДанныеСообщенийПоОрганизациям   - Соответствие - соответствие организаций данным сообщений.
//        * Ключ     - СправочникСсылка.Организации - организация, для который были получены данные сообщений. 
//        * Значение - Массив - массив структур с данными сообщений:
//          * Идентификатор          - Строка - идентификатор сообщения.
//          * Тип                    - Число  - тип сообщения согласно спецификации.
//          * Получатель             - Строка - идентификатор получателя.
//          * ТребуетсяПодтверждение - Булево - требуется подтверждение о прочтении сообщения.
//          * Новое                  - Булево - признак того, что это новое сообщение, данные которого ещё не были загружены.
//          * РегистрационныйНомерСФР - Строка - регистрационный номер СФР организации страхователя.
//  Организации     - Массив - список организаций, для которых будет запрошен список сообщений.
//  ДатаСообщений  - Дата - дата, за которую будет возвращен список входящих сообщений.
//
Процедура ПолучитьМетаданныеВходящихСообщенийСЭДО(ОповещениеОбратногоВызова,
		Организации,
		ДатаСообщений = Неопределено) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организации", Организации);
	ДополнительныеПараметры.Вставить("ДатаСообщений", ДатаСообщений);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"МетаданныеВходящихСообщенийСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Получает содержимое входящих сообщений для страхователя с сервера СЭДО ФСС.
//
// Параметры:
//  ОповещениеОбратногоВызова        - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат  - Структура:
//      * БылиОшибки           - Булево - если Истина, то при выполнении операции возникали ошибки.
//      * Ошибки               - Массив - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ДанныеСообщений   - Массив - массив структур с данными сообщений:
//          * Идентификатор           - Строка - идентификатор сообщения.
//          * Тип                     - Число - тип сообщения согласно спецификации.
//          * Получатель              - Строка - идентификатор получателя.
//          * Содержимое              - Строка - текстовое содержимое сообщения.
//          * ТребуетсяПодтверждение  - Булево - требуется подтверждение о прочтении сообщения
//          * РегистрационныйНомерСФР - Строка - регистрационный номер СФР организации страхователя.
//      * РезультатыПолучения    - Массив - массив структур с полями:
//          * Выполнено            - Булево - признак успешного выполнения операции.
//          * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//          * ДанныеСообщения      - Структура - см. описание структуры ДанныеСообщений.
//          * Идентификатор        - Строка - идентификатор сообщения.
//  Организация                      - СправочникСсылка.Организации - организация страхователь.
//  Идентификаторы                   - Массив - массив строковых идентификаторов сообщений, которые требуется получить.
//  ОткрыватьФормуДлительнойОперации - Булево
//  ЗадаватьВопросОТестовомСервере   - Булево
//  ТипыВзаимодействий               - Массив - типы взаимодействий по идентификаторам сообщений
//                                              при значении Неопределено берутся типы взаимодействия по умолчанию
//                                              ДокументооборотСФССКлиентСервер.ТипВзаимодействияСтраховательСЭДО(),
//                                              для МЧД использовать тип взаимодействия
//                                              ДокументооборотСФССКлиентСервер.ТипВзаимодействияОрганизацияСЭДО().
//
Процедура ПолучитьСообщенияСЭДО(
		ОповещениеОбратногоВызова,
		Организация,
		Идентификаторы,
		ОткрыватьФормуДлительнойОперации = Истина,
		ЗадаватьВопросОТестовомСервере = Истина,
		ТипыВзаимодействий = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", 			ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организация", 						Организация);
	ДополнительныеПараметры.Вставить("Идентификаторы", 						Идентификаторы);
	ДополнительныеПараметры.Вставить("ОткрыватьФормуДлительнойОперации", 	ОткрыватьФормуДлительнойОперации);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере", 		ЗадаватьВопросОТестовомСервере);
	ДополнительныеПараметры.Вставить("ТипыВзаимодействий", 					ТипыВзаимодействий);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСообщенияСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Подписывает сотрудников на уведомления об изменении статусов ЭЛН в ФСС.
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                     -  Структура:
//      * БылиОшибки           - Булево - если Истина, то при выполнении операции возникали ошибки.
//      * Ошибки               - Массив - содержит описания ошибок.
//      * РезультатыОперации   - Соответствие - результаты операции в разрезе организаций. Поля значения:
//         * Выполнено            - Булево - признак успешного выполнения операции.
//         * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//         * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//  СНИЛСыСотрудниковОрганизаций - Соответствие - СНИЛСы сотрудников в разрезе организаций.
//    * Ключ     - СправочникСсылка.Организации - организация.
//    * Значение - Массив - массив строк со СНИЛС сотрудников, значения СНИЛС должны содержать только цифры.
//  ПринудительноОткрепить - Булево - признак принудительно открепления сотрудников от предыдущего работодателя.
//
Процедура ПодписатьСотрудниковОрганизацийНаУведомленияПоЭЛН(ОповещениеОбратногоВызова,
		СНИЛСыСотрудниковОрганизаций,
		ПринудительноОткрепить = Истина) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("СНИЛСыСотрудниковОрганизаций", СНИЛСыСотрудниковОрганизаций);
	ДополнительныеПараметры.Вставить("ПринудительноОткрепить", ПринудительноОткрепить);
	ДополнительныеПараметры.Вставить("Операция",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВидОперацииСЭДОФССПодписать());
	ДополнительныеПараметры.Вставить("ТипСобытия",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ТипСобытияСЭДОФССИзменениеСостоянияЭЛН());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьОтписатьСписокСНИСЛСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Отписывает сотрудников от уведомлений об изменении статусов ЭЛН в ФСС.
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                     -  Структура:
//      * БылиОшибки           - Булево - если Истина, то при выполнении операции возникали ошибки.
//      * Ошибки               - Массив - содержит описания ошибок.
//      * РезультатыОперации   - Соответствие - результаты операции в разрезе организаций. Поля значения:
//         * Выполнено            - Булево - признак успешного выполнения операции.
//         * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//         * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//  СНИЛСыСотрудниковОрганизаций - Соответствие - СНИЛСы сотрудников в разрезе организаций.
//    * Ключ     - СправочникСсылка.Организации - организация.
//    * Значение - Массив - массив строк со СНИЛС сотрудников, значения СНИЛС должны содержать только цифры.
//
Процедура ОтписатьСотрудниковОрганизацийОтУведомленийПоЭЛН(ОповещениеОбратногоВызова,
		СНИЛСыСотрудниковОрганизаций) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("СНИЛСыСотрудниковОрганизаций", СНИЛСыСотрудниковОрганизаций);
	ДополнительныеПараметры.Вставить("ПринудительноОткрепить", Ложь);
	ДополнительныеПараметры.Вставить("Операция",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВидОперацииСЭДОФССОтписать());
	ДополнительныеПараметры.Вставить("ТипСобытия",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ТипСобытияСЭДОФССИзменениеСостоянияЭЛН());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьОтписатьСписокСНИСЛСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Подписывает страхователя на уведомления об изменения статусов ЭЛН в ФСС.
// Для получения уведомлений требуется также подписка сотрудников (см. ПодписатьСотрудниковНаУведомленияПоЭЛН).
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                     -  Структура:
//      * Выполнено            - Булево - признак успешного выполнения операции.
//      * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//  Организация             - СправочникСсылка.Организации - организация страхователь.
//
Процедура ПодписатьСтрахователяНаУведомленияПоЭЛН(ОповещениеОбратногоВызова,
		Организация) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Операция",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВидОперацииСЭДОФССПодписать());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьОтписатьСтрахователяСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Отписывает страхователя от уведомлений об изменении статусов ЭЛН в ФСС.
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                     -  Структура:
//      * Выполнено            - Булево - признак успешного выполнения операции.
//      * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//  Организация             - СправочникСсылка.Организации - организация страхователь.
//
Процедура ОтписатьСтрахователяОтУведомленийПоЭЛН(ОповещениеОбратногоВызова,
		Организация) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Операция", "Отписать");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьОтписатьСтрахователяСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Отправляет подтверждение о получении сообщений на сервер СЭДО ФСС.
//
// Параметры:
//  ОповещениеОбратногоВызова       - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат  - Структура:
//      * Выполнено           - Булево - признак успешного выполнения операции.
//      * ОписаниеОшибки      - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//  Организация             - СправочникСсылка.Организации - организация страхователь.
//  ИдентификаторыСообщений  - Массив, Строка, УникальныйИдентификатор - идентификаторы сообщений, на которые будет отправлено подтверждение.
//  ПослеОтправкиПолучитьВходящие - Булево - если Истина, то после отправки подтверждений будут получены входящие сообщения.
//
Процедура ОтправитьПодтверждениеОПолученииСообщенийСЭДО(ОповещениеОбратногоВызова,
		Организация,
		ИдентификаторыСообщений,
		ПослеОтправкиПолучитьВходящие = Ложь) Экспорт
		
	Если ТипЗнч(ИдентификаторыСообщений) <> Тип("Массив") Тогда
		Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСообщений);
	Иначе
		Идентификаторы = ИдентификаторыСообщений;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("ИдентификаторыСообщений", Идентификаторы);
	ДополнительныеПараметры.Вставить("ПослеОтправкиПолучитьВходящие", ПослеОтправкиПолучитьВходящие);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодтверждениеПрочтенияСообщенийСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Отправляет произвольное сообщение на сервер СЭДО ФСС.
//
// Параметры:
//  ОповещениеОбратногоВызова - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат                    - Структура:
//      * Выполнено            - Булево - признак успешного выполнения операции.
//      * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ИдентификаторЗапроса - Строка - идентификатор отправленного запроса.
//      * ИдентификаторПакета  - Строка - идентификатор отправленного пакета (пустая строка при отправке напрямую).
//      * ОбменЧерезОператора  - Булево.
//  ПараметрыСообщения             - Структура - параметры отправки сообщения со структурой, как формируется функцией
//                                               "ЭлектронныйДокументооборотСФСС.ПараметрыОтправитьСообщениеСЭДО"
//  ЗадаватьВопросОТестовомСервере - Булево    - показывать вопрос, если установлен тестовый режим,
//                                               по умолчанию Истина, в случае серии вызовов для непервого вызова
//                                               стоит задавать Ложь.
//
Процедура ОтправитьСообщениеСЭДО(
		ОповещениеОбратногоВызова,
		ПараметрыСообщения,
		ЗадаватьВопросОТестовомСервере = Истина) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", 		ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ПараметрыСообщения", 				ПараметрыСообщения);
	ДополнительныеПараметры.Вставить("ЗадаватьВопросОТестовомСервере", 	ЗадаватьВопросОТестовомСервере);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьСообщениеСЭДОФССПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Получет сообщений СЭДО СФР за период.
// Параметры:
//  ОповещениеОбратногоВызова        - ОписаниеОповещения - описание процедуры, принимающей результат:
//    Результат  - Структура:
//      * БылиОшибки           - Булево - если Истина, то при выполнении операции возникали ошибки.
//      * Ошибки               - Массив - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//      * ДанныеСообщений   - Массив - массив структур с данными сообщений:
//          * Идентификатор          - Строка - идентификатор сообщения.
//          * Тип                    - Строка - тип сообщения согласно спецификации.
//          * Получатель             - Строка - идентификатор получателя.
//          * Содержимое             - Строка - текстовое содержимое сообщения.
//          * ТребуетсяПодтверждение - Булево - требуется подтверждение о прочтении сообщения.
//      * РезультатыПолучения    - Массив - массив структур с полями:
//          * Выполнено            - Булево - признак успешного выполнения операции.
//          * ОписаниеОшибки       - Строка - содержит описание ошибки в случае, если Выполнено установлено в Ложь.
//          * ДанныеСообщения      - Структура - см. описание структуры ДанныеСообщений.
//          * Идентификатор        - Строка - идентификатор сообщения.
//  Организации                      - Массив из СправочникСсылка.Организации - организации страхователи.
//  ДатаНачала                       - Дата - дата и время начала периода.
//  ДатаОкончания                    - Дата - дата и время окончания периода.
//  ПараметрыПолучения               - Структура - см. ПараметрыПолучитьСообщенияСЭДОЗаПериод.
Процедура ПолучитьСообщенияСЭДОЗаПериод(ОповещениеОбратногоВызова,
		Организации,
		ДатаНачала,
		ДатаОкончания,
		ПараметрыПолучения) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", 	ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Организации", 				Организации);
	ДополнительныеПараметры.Вставить("ДатаНачала", 					ДатаНачала);
	ДополнительныеПараметры.Вставить("ДатаОкончания", 				ДатаОкончания);
	ДополнительныеПараметры.Вставить("ПараметрыПолучения", 			ПараметрыПолучения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСообщенияСЭДОЗаПериодПослеПолученияКонтекста",
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент,
		ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

// Параметры метода ПолучитьСообщенияСЭДОЗаПериод. 
//
// Возвращаемое значение:
//  ОткрыватьФормуДлительнойОперации - Булево - по умолчанию Истина.
//  ЗадаватьВопросОТестовомСервере   - Булево - по умолчанию Истина.
//  ТипВзаимодействия                - Число  - тип взаимодействия с сервером СЭДО (2 - страхователь,
//                                              3 - организация, используется для МЧД).
//  СброситьСвойстваОбменаПоСЭДОЧерезОператора - Булево - по умолчанию Истина.
//  ПринудительноПовторноПолучитьСообщения - Булево - если Истина, то сообщения за период будут загружены,
//                                                    даже если у сообщения снят признак Новое.
Функция ПараметрыПолучитьСообщенияСЭДОЗаПериод() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОткрыватьФормуДлительнойОперации", Истина);
	Результат.Вставить("ЗадаватьВопросОТестовомСервере", Истина);
	Результат.Вставить("ТипВзаимодействия", 2);
	Результат.Вставить("СброситьСвойстваОбменаПоСЭДОЧерезОператора", Истина);
	Результат.Вставить("ПринудительноПовторноПолучитьСообщения", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает имя события оповещения, которое вызывается при завершении получения сообщений из СЭДО.
// Возвращаемое значение:
//   Строка
Функция ИмяСобытияОповещенияЗавершенияПолученияСообщенийИзСЭДО() Экспорт
	
	Возврат "ЗавершениеПолученияСообщенийИзСЭДО";
	
КонецФункции

// Возвращает имя события оповещения, которое вызывается при завершении отвправки сообщений в СЭДО.
// Возвращаемое значение:
//   Строка
Функция ИмяСобытияОповещенияЗавершенияОтправкиСообщенийВСЭДО() Экспорт
	
	Возврат "ЗавершениеОтправкиСообщенийВСЭДО";
	
КонецФункции

#КонецОбласти

// Метод отрабатывает нажатие на элементы в информационной панели БРО для ЗУП
//
// Параметры:
//  Форма	 - УправляемаяФорма - Форма, в которой располагается элемент.
//  Ссылка	 - Строка - Значение, которое пришло в метод формы Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки 
//             в парамете НавигационнаяСсылкаФорматированнойСтроки. 
//  СтандартнаяОбработка - Булево - Значение, которое пришло в метод формы
//             Подключаемый_ИнформационнаяПанельБРООбработкаНавигационнойСсылки в парамете ОбработкаНавигационнойСсылки. 
//
Процедура ИнформационнаяПанельБРОНажатие(Форма, Ссылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Ссылка = НСтр("ru = 'Подробнее...';
						|en = 'Подробнее...'") Тогда
		Организация = Форма.ИнформационнаяПанельБРОКэш.Организация;
		ДокументооборотСКОКлиент.ПоказатьРекламуАкцииКадровыеРешения(Организация);
	КонецЕсли;
	
	Если Ссылка = НСтр("ru = 'Закрыть';
						|en = 'Закрыть'") Тогда
		ДокументооборотСКОВызовСервера.СохранитьНастройку("КадровыеРешенияНапоминать", Ложь);
		ИмяГруппы = Форма.ИнформационнаяПанельБРОКэш.ИмяГруппы;
		Группа = Форма.Элементы[ИмяГруппы];
		Группа.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьУведомлениеИзПанелиСтатуса(Форма) Экспорт
	
	// Получаем КонтекстЭДОКлиент
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьУведомлениеИзПанелиСтатусаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьУведомлениеИзПанелиСтатусаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// По форме получаем ссылку
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Ссылка") Тогда
		Ссылка = Форма.Объект.Ссылка;
	КонецЕсли;
	
	ТабДокументУведомленияФСС =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ТабДокументУведомленияФСС(Ссылка);
	Если НЕ ТабДокументУведомленияФСС = Неопределено Тогда
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
				Ссылка, "ТипСообщенияОтвета") = 313 Тогда
				
			Заголовок = НСтр("ru = 'Уведомление о приеме (отказе в приеме) документов по камеральной проверке';
							|en = 'Уведомление о приеме (отказе в приеме) документов по камеральной проверке'");
		Иначе
			Заголовок = НСтр("ru = 'Уведомление о приеме (отказе в приеме) документов по выездной проверке';
							|en = 'Уведомление о приеме (отказе в приеме) документов по выездной проверке'");
		КонецЕсли;
		КонтекстЭДОКлиент.НапечататьДокумент(ТабДокументУведомленияФСС, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьУведомлениеИзСписка(Элемент) Экспорт
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("Ссылка", ТекущиеДанные.Ссылка);
	Иначе
		Возврат;
	КонецЕсли;
	
	// Получаем КонтекстЭДОКлиент
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьУведомлениеИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьУведомлениеИзСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТабДокументУведомленияФСС =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ТабДокументУведомленияФСС(Ссылка);
	Если НЕ ТабДокументУведомленияФСС = Неопределено Тогда
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(
				Ссылка, "ТипСообщенияОтвета") = 313 Тогда
				
			Заголовок = НСтр("ru = 'Уведомление о приеме (отказе в приеме) документов по камеральной проверке';
							|en = 'Уведомление о приеме (отказе в приеме) документов по камеральной проверке'");
		Иначе
			Заголовок = НСтр("ru = 'Уведомление о приеме (отказе в приеме) документов по выездной проверке';
							|en = 'Уведомление о приеме (отказе в приеме) документов по выездной проверке'");
		КонецЕсли;
		КонтекстЭДОКлиент.НапечататьДокумент(ТабДокументУведомленияФСС, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Функция ЭтоФайлPDF(ДанныеФайла) Экспорт
	
	//необходимо проверить, что вместо файла не пришла ошибка от сервера СФР
	//пример ошибки:
	//{
	//  "msg": "502 Bad Gateway",
	//  "type": "org.springframework.web.client.HttpServerErrorException$BadGateway",
	//  "reference": 1709184112514,
	//  "errorCode": null,
	//  "errorMessage": null,
	//  "procedureCallInfo": null,
	//  "newId": null,
	//  "success": false
	//}
	
	Результат = Истина;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеВВидеСтроки = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла);
	
	Позиция1 = СтрНайти(ДанныеВВидеСтроки, "%PDF-");
	Позиция2 = СтрНайти(ДанныеВВидеСтроки, "%%EOF");
	Если Позиция1 = 0 ИЛИ Позиция2 = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Открыть файл вложения невозможно. С сервера СФР получен некорректный файл pdf.';
							|en = 'Открыть файл вложения невозможно. С сервера СФР получен некорректный файл pdf.'")
			+ Символы.ПС + НСтр("ru = 'Содержимое файла:';
								|en = 'Содержимое файла:'")
			+ Символы.ПС + Лев(ДанныеВВидеСтроки, 1024);
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Открытие файла вложения документа СФР';
							|en = 'Электронный документооборот с контролирующими органами. Открытие файла вложения документа СФР'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ИмяСобытия,
			"Ошибка",
			ТекстОшибки,,
			Истина);
		Результат = Ложь;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
