#Область ПрограммныйИнтерфейс

// Дополняет параметры отражения необходимыми для формирования проводок по регистрам оперативного учета.
// 
// Параметры:
// 	 ПараметрыФормированияПроводок - см. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
//
Процедура ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормированияПроводок.Вставить("НастройкиОтражения", НастройкиОтраженияВМеждународномУчете());
	ПараметрыФормированияПроводок.Вставить("ТекстыЗапросовПоРегистрам", ТекстыЗапросовПоРегистрам());
	ПараметрыФормированияПроводок.Вставить("ТаблицаУточненияСчетов", ТаблицаУточненияСчетов());
	ИнициализироватьТаблицуНастройкиОпераций(ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Выполняет формирование проводок международного учета по данным регистров оперативного учета.
// 
// Параметры:
// 	ПараметрыФормированияПроводок - Структура - Параметры формирования проводок.
// 	ТаблицаПроводок - ТаблицаЗначений - Таблица, в которую добавляются сформированные проводки.
//
Процедура Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ГДЕ
	|	ДокументыКОтражению.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Организация,
	|	ДокументыКОтражению.ПланСчетов
	|";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Используется настройка формирования проводок со способом корректировки реверсивными проводками:';
								|en = 'The posting schema with correction by reversing entries is used:'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон(
				НСтр("ru = 'Организация ""%1"", план счетов ""%2"";';
					|en = 'Company %1, chart of accounts %2'"),
				Выборка.Организация, Выборка.ПланСчетов)
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Измените настройку формирования проводок перед отражением в международном учете.';
															|en = 'Change the posting schema before recognition in financial accounting.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ПараметрыФормированияПроводок.ТекстыЗапросовПоРегистрам Цикл
		ИмяРегистра = ЭлементКоллекции.Ключ;
		ТекстЗапроса = ЭлементКоллекции.Значение;
		ОтразитьДанныеРегистра(ИмяРегистра, ТекстЗапроса, ПараметрыФормированияПроводок, ТаблицаПроводок);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицы регистрации документа к отражению в международном учете по данным движений в оперативном.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, который проводится.
// 	ДополнительныеСвойства - Структура - Дополнительные свойства РС ОтражениеДокументовВМеждународномУчете.
// 	ТаблицаРегистрации - ТаблицаЗначений - Таблица с данными регистрации к отражению, которую необходимо дополнить:
// 	                      * Период - Дата - период регистрации (дата документа)
// 	                      * Организация - СправочникСсылка.Организации - организация по которой документ формирует проводки
// 	                      * ДатаОтражения - Дата - дата, на которую документ формирует проводки;
// 	                      * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - отражаемая хозяйственная операция.
//
Процедура ДополнитьТаблицыРегистрацииКОтражению(Объект, ДополнительныеСвойства, ТаблицаРегистрации) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям") Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьТаблицуРегистрацииПоДаннымОборотныхРегистров(Объект, ТаблицаРегистрации);
	
	ТаблицаОтражениеДокументовВМеждународномУчете = Неопределено;
	ПереданаТаблицаОтражениеДокументовВМеждународномУчете = 
		ДополнительныеСвойства.Свойство("ТаблицаОтражениеДокументовВМеждународномУчете", ТаблицаОтражениеДокументовВМеждународномУчете);
	
	Если ПереданаТаблицаОтражениеДокументовВМеждународномУчете  Тогда 
		Для каждого СтрокаТаблицы Из ТаблицаОтражениеДокументовВМеждународномУчете Цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Организация", СтрокаТаблицы.Организация);
			Отбор.Вставить("ДатаОтражения", СтрокаТаблицы.ДатаОтражения);
			Если ТаблицаРегистрации.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтрокаРегистрации = ТаблицаРегистрации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРегистрации, СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку наличия шаблонов проводок по хозяйственным операциям документов, требующих отражения.
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ДокументыКОтражению:
// 	              * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - 
// 	              * Документ - ДокументСсылка - 
// 	              * Организация - СправочникСсылка.Организации -
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета
// 	ПараметрыПроверки - См. Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица необходимых настроек:
// 	              * Операция - СправочникСсылка.НастройкиХозяйственныхОпераций -
// 	              * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета -
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - 
// 	              * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации -
// 	              * ИсточникДанных - Строка - Имя источника данных (регистра).
//
Функция ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки) Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям") Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
		
	ТаблицаОшибок.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.НастройкиХозяйственныхОпераций"));
	ТаблицаОшибок.Колонки.Добавить("ПланСчетов", Новый ОписаниеТипов("СправочникСсылка.ПланыСчетовМеждународногоУчета"));
	ТаблицаОшибок.Колонки.Добавить("НастройкаФормированияПроводок", Новый ОписаниеТипов("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета"));
	ТаблицаОшибок.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаОшибок.Колонки.Добавить("ИсточникДанных", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.ПланСчетов КАК ПланСчетов,
	|	ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НастройкиХозяйственныхОпераций.Ссылка КАК Операция,
	|	НастройкиХозяйственныхОпераций.ИсточникДанных КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.ШаблоныПроводокМеждународногоУчетаТребующиеНастройки КАК ШаблоныПроводокМеждународногоУчетаТребующиеНастройки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО
	|		ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	(ПланСчетов, НастройкаФормированияПроводок, Документ) В
	|		(ВЫБРАТЬ
	|			ДокументыКОтражению.ПланСчетов,
	|			ДокументыКОтражению.НастройкаФормированияПроводок,
	|			ДокументыКОтражению.Регистратор
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		)
	|";
	
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	ТаблицаОшибок.Индексы.Добавить("Операция, НастройкаФормированияПроводок");
	ТаблицаОшибок.Сортировать("Операция, НастройкаФормированияПроводок");
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Заполняет таблицу документами, требующими отражения и формирующими  движения в опер. учете по определенной хоз. операции.
// 
// Параметры:
// 	ТаблицаДокументов - ТаблицаЗначений - Заполняемая таблица значений:
// 		* Документ - ДокументСсылка - Ссылка на документ;
// 		* Дата - Дата - Дата отражения;
// 		* Организация - СправочникСсылка.Организации - Организация, по которой документ формирует движения;
// 		* Комментарий - Строка - Комментарий к статусу отражения документа в международном учете;
// 	ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - Операция, по которой необходимо выполнить отбор.
// 	ИсточникДанных - Строка - Имя источник данных (регистра).
// 	НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - Настройка для отбора документов.
// 	Организация - СправочникСсылка.Организации - Организация для отбора документов.
//
Процедура ЗаполнитьТаблицуДокументовПоОперации(ТаблицаДокументов, ХозяйственнаяОперация, ИсточникДанных, НастройкаФормированияПроводок, Организация) Экспорт
	
	ТекстыЗапросов = ТекстыЗапросовПоРегистрам();
	ТекстЗапросаДанныеРегистра = ТекстыЗапросов[ИсточникДанных];
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапросаДанныеРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДокументыКОтражению.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДокументыКОтражению
	|	
	|ГДЕ
	|	ДокументыКОтражению.Организация = &Организация
	|	И ДокументыКОтражению.НастройкаФормированияПроводок = &НастройкаФормированияПроводок
	|	И ДокументыКОтражению.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаОтражения,
	|	Регистратор
	|;
	|
	|/////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Документ,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ 
	|	&ТекстЗапросаДанныеРегистра КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Организация
	|;
	|
	|/////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Документ КАК Документ,
	|	ДанныеРегистра.Период КАК Дата,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДокументыКОтражению.Комментарий КАК Комментарий
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Документ = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И ДанныеРегистра.НастройкаФормированияПроводок = ДокументыКОтражению.НастройкаФормированияПроводок
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДанныеРегистра", "(" + ТекстЗапросаДанныеРегистра + ")");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИнициализироватьТаблицуНастройкиОпераций(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НастройкаФормированияПроводок", НастройкаФормированияПроводок);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Выполняет проверку правил отражения перед их записью в регистр ПравилаОтраженияВМеждународномУчете.
//
// Параметры:
// 	ПравилаОтраженияВМеждународномУчете - ТаблицаЗначений - Выгрузка набора записей регистра ПравилаОтраженияВМеждународномУчете.
// 	Отказ - Булево - Признак отказа записи, устанавливается в случае ошибки.
//
Процедура ПередЗаписьюПравилОтражения(ПравилаОтраженияВМеждународномУчете, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ШаблоныПроводок.ШаблонПроводки КАК ШаблонПроводки
	|ПОМЕСТИТЬ ШаблоныПроводок
	|ИЗ
	|	&ШаблоныПроводок КАК ШаблоныПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШаблоныПроводок.ШаблонПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныПроводок.НастройкаФормированияПроводок.Владелец КАК ПланСчетов,
	|	ШаблоныПроводок.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ШаблоныПроводок.ШаблонПроводки КАК ШаблонПроводки,
	|	ДанныеСправочника.Операция КАК Операция
	|ПОМЕСТИТЬ ХозяйственныеОперации
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ДанныеСправочника
	|	ПО
	|		ШаблоныПроводок.ШаблонПроводки = ДанныеСправочника.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеСправочника.Операция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.ШаблонПроводки КАК ШаблонПроводки,
	|	ХозяйственныеОперации.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	ХозяйственныеОперации КАК ХозяйственныеОперации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ХозяйственныеОперацииНеОтражаемыеВМеждународномУчете КАК НеОтражаемыеХозоперации
	|	ПО
	|		ХозяйственныеОперации.НастройкаФормированияПроводок = НеОтражаемыеХозоперации.НастройкаФормированияПроводок
	|		И ХозяйственныеОперации.Операция = НеОтражаемыеХозоперации.Операция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозяйственныеОперации.ПланСчетов КАК ПланСчетов,
	|	ХозяйственныеОперации.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ХозяйственныеОперации.Операция.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ХозяйственныеОперации КАК ХозяйственныеОперации
	|";
	
	Запрос.УстановитьПараметр("ШаблоныПроводок", ПравилаОтраженияВМеждународномУчете);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоНеОтражаемымОперациям = РезультатыЗапроса[2].Выбрать();
	Пока ВыборкаПоНеОтражаемымОперациям.Следующий() Цикл
		ТекстСообщения = 
			СтрШаблон(НСтр("ru = 'Хозяйственная операция, используемая в шаблоне проводки ""%1"", исключена из применяемой настройки ""%2"".';
							|en = 'Business transaction used in posting template ""%1"" is excluded from the applied settings ""%2"".'"),
				ВыборкаПоНеОтражаемымОперациям.ШаблонПроводки, 
				ВыборкаПоНеОтражаемымОперациям.НастройкаФормированияПроводок);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
	Если Не Отказ Тогда
		ВыборкаПравилаОтражения =  РезультатыЗапроса[3].Выбрать();
		Пока ВыборкаПравилаОтражения.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПланСчетов.Установить(ВыборкаПравилаОтражения.ПланСчетов);
			НаборЗаписей.Отбор.НастройкаФормированияПроводок.Установить(ВыборкаПравилаОтражения.НастройкаФормированияПроводок);
			НаборЗаписей.Отбор.ХозяйственнаяОперация.Установить(ВыборкаПравилаОтражения.ХозяйственнаяОперация);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	#Область ОшибкиНастройкиШаблоновПроводок
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОшибкиНастройкиШаблоновПроводок);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
	#Область ОшибкиУточненияСчетов
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОшибкиУточненияСчетов);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТекстыЗапросовДанныхРегистров

Функция ТекстыЗапросовПоРегистрам() Экспорт

	ТекстыЗапросов = Новый Структура();
	ТекстыЗапросов.Вставить("АмортизацияНМА", ТекстЗапросаАмортизацияНМА());
	ТекстыЗапросов.Вставить("АмортизацияОС", ТекстЗапросаАмортизацияОС());
	ТекстыЗапросов.Вставить("ВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж());
	ТекстыЗапросов.Вставить("ДвиженияДенежныеСредстваДоходыРасходы", ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияДенежныеСредстваКонтрагент", ТекстЗапросаДвиженияДенежныеСредстваКонтрагент());
	ТекстыЗапросов.Вставить("ДвиженияДенежныхСредств", ТекстЗапросаДвиженияДенежныхСредств());
	ТекстыЗапросов.Вставить("ДвиженияДоходыРасходыПрочиеАктивыПассивы", ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы());
	ТекстыЗапросов.Вставить("ДвиженияКонтрагентДоходыРасходы", ТекстЗапросаДвиженияКонтрагентДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияКонтрагентКонтрагент", ТекстЗапросаДвиженияКонтрагентКонтрагент());
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураДоходыРасходы", ТекстЗапросаДвиженияНоменклатураДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураНоменклатура", ТекстЗапросаДвиженияНоменклатураНоменклатура());
	ТекстыЗапросов.Вставить("Закупки", ТекстЗапросаЗакупки());
	ТекстыЗапросов.Вставить("ПрочиеРасходы", ТекстЗапросаПрочиеРасходы());
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ТекстыЗапросов.Вставить("РасчетыСКлиентамиПоСрокам", ТекстЗапросаРасчетыСКлиентамиПоСрокам());
		ТекстыЗапросов.Вставить("РасчетыСПоставщикамиПоСрокам", ТекстЗапросаРасчетыСПоставщикамиПоСрокам());
	Иначе
		ТекстыЗапросов.Вставить("РасчетыСКлиентамиПоДокументам", ТекстЗапросаРасчетыСКлиентамиПоДокументам());
		ТекстыЗапросов.Вставить("РасчетыСПоставщикамиПоДокументам", ТекстЗапросаРасчетыСПоставщикамиПоДокументам());
	КонецЕсли;
	ТекстыЗапросов.Вставить("СтоимостьНМА", ТекстЗапросаСтоимостьНМА());
	ТекстыЗапросов.Вставить("СтоимостьОС", ТекстЗапросаСтоимостьОС());
	ТекстыЗапросов.Вставить("НДСАвансыПолученные", ТекстЗапросаНДСАвансыПолученные());
	ТекстыЗапросов.Вставить("НДСАвансыВыданные", ТекстЗапросаНДСАвансыВыданные());
	ТекстыЗапросов.Вставить("ДвиженияПоНДС", ТекстЗапросаДвиженияПоНДС());
	
	Возврат ТекстыЗапросов;

КонецФункции

Функция ТекстЗапросаВыручкаИСебестоимостьПродаж()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|	ДанныеРегистра.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Контрагент КАК Хранитель,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.АналитикаУчетаНаборов КАК АналитикаУчетаНаборов,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПартий.Поставщик КАК Поставщик,
	|	ДанныеРегистра.АналитикаУчетаПартий.Контрагент КАК КонтрагентПоставщика,
	|	ДанныеРегистра.Соглашение КАК Соглашение,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК ЗаказКлиента,
	|	
	|	СУММА(ДанныеРегистра.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ДанныеРегистра.СуммаВыручкиБезНДС) КАК СуммаВыручкиБезНДС,
	|	СУММА(ДанныеРегистра.СуммаВыручки - ДанныеРегистра.СуммаВыручкиБезНДС) КАК СуммаНДС,
	|	СУММА(ДанныеРегистра.СуммаВыручкиСНДСРегл) КАК СуммаВыручкиСНДСРегл,
	|	СУММА(ДанныеРегистра.СуммаВыручкиРегл) КАК СуммаВыручкиРегл,
	|	СУММА(ДанныеРегистра.СуммаВыручкиСНДСРегл - ДанныеРегистра.СуммаВыручкиРегл) КАК СуммаНДСРегл,
	|	
	|	СУММА(ДанныеРегистра.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьУпр) КАК СтоимостьУпр,
	|	СУММА(ДанныеРегистра.СтоимостьРегл) КАК СтоимостьРегл,
	|	
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансовая) КАК СтоимостьЗабалансовая,
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансоваяРегл) КАК СтоимостьЗабалансоваяРегл,
	|
	|	СУММА(ДанныеРегистра.ДопРасходы) КАК ДопРасходы,
	|	СУММА(ДанныеРегистра.ДопРасходыБезНДС) КАК ДопРасходыБезНДС,
	|	СУММА(ДанныеРегистра.ДопРасходыУпр) КАК ДопРасходыУпр,
	|	СУММА(ДанныеРегистра.ДопРасходыРегл) КАК ДопРасходыРегл,
	|	СУММА(ДанныеРегистра.ДопРасходы - ДанныеРегистра.ДопРасходыБезНДС) КАК СуммаНДСДополнительныхРасходов,
	|	
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеСНДС) КАК ПостатейныеПостоянныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеБезНДС) КАК ПостатейныеПостоянныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеУпр) КАК ПостатейныеПостоянныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеРегл) КАК ПостатейныеПостоянныеРегл,
	|	
	|	СУММА(ДанныеРегистра.Трудозатраты) КАК Трудозатраты,
	|	СУММА(ДанныеРегистра.ТрудозатратыУпр) КАК ТрудозатратыУпр,
	|	СУММА(ДанныеРегистра.ТрудозатратыРегл) КАК ТрудозатратыРегл,
	|	
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеСНДС) КАК ПостатейныеПеременныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеБезНДС) КАК ПостатейныеПеременныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеУпр) КАК ПостатейныеПеременныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеРегл) КАК ПостатейныеПеременныеРегл,
	|
	|	СУММА(ДанныеРегистра.РасходыНаПродажуСНДС) КАК РасходыНаПродажуСНДС,
	|	СУММА(ДанныеРегистра.РасходыНаПродажуБезНДС) КАК РасходыНаПродажуБезНДС,
	|	СУММА(ДанныеРегистра.РасходыНаПродажуУпр) КАК РасходыНаПродажуУпр,
	|	СУММА(ДанныеРегистра.РасходыНаПродажуРегл) КАК РасходыНаПродажуРегл,
	|
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеРегл) КАК РезервПодОбесценениеРегл,
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеУпр) КАК РезервПодОбесценениеУпр,
	|	
	|	СУММА(ВЫБОР КОГДА ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр = 0
	|			ТОГДА ДанныеРегистра.Стоимость + ДанныеРегистра.ДопРасходы + ДанныеРегистра.ПостатейныеПостоянныеСНДС + ДанныеРегистра.Трудозатраты + ДанныеРегистра.ПостатейныеПеременныеСНДС
	|			ИНАЧЕ ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр
	|		КОНЕЦ) КАК СебестоимостьУпр,
	|	СУММА(ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.ДопРасходыРегл + ДанныеРегистра.ПостатейныеПостоянныеРегл + ДанныеРегистра.ТрудозатратыРегл + ДанныеРегистра.ПостатейныеПеременныеРегл) КАК СебестоимостьРегл,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС + ДанныеРегистра.ДопРасходыБезНДС + ДанныеРегистра.ПостатейныеПостоянныеБезНДС + ДанныеРегистра.Трудозатраты + ДанныеРегистра.ПостатейныеПеременныеБезНДС) КАК СебестоимостьБезНДС,
	|	
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаВВалютеВзаиморасчетов) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов) КАК СуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(ДанныеРегистра.СуммаВВалютеДокумента) КАК СуммаВВалютеДокумента,
	|	СУММА(ДанныеРегистра.СуммаБезНДСВВалютеДокумента) КАК СуммаБезНДСВВалютеДокумента,
	|	СУММА(ДанныеРегистра.СуммаВВалютеДокумента - ДанныеРегистра.СуммаБезНДСВВалютеДокумента) КАК СуммаНДСВВалютеДокумента,
	|	
	|	СУММА(ДанныеРегистра.Количество) КАК Количество,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор),
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиНоменклатуры,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.АналитикаУчетаНаборов,
	|	ДанныеРегистра.АналитикаУчетаПартий,
	|	ДанныеРегистра.Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.Соглашение,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ЗаказКлиента,
	|	ДанныеРегистра.ВалютаВзаиморасчетов,
	|	ДанныеРегистра.ВалютаДокумента,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета,
	|	ДанныеРегистра.Сторно,
	|	ДокументыКОтражению.ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ПодразделениеДоходовРасходов КАК ПодразделениеДоходовРасходов,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиДС КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДанныеРегистра.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаНДСРегл КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаВВалюте - ДанныеРегистра.СуммаНДСВВалютеПлатежа КАК СуммаБезНДСВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаНДСРегл КАК СуммаНДСРегл,
	|	ДанныеРегистра.СуммаНДСВВалютеПлатежа КАК СуммаНДСВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваКонтрагент()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.НаправлениеДеятельностиДС КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДанныеРегистра.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ДанныеРегистра.ВалютаПлатежа КАК ВалютаПлатежа,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	
	|	ДанныеРегистра.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеРегистра.СуммаОплатыРегл КАК СуммаОплатыРегл,
	|	ДанныеРегистра.СуммаОплатыВВалютеПлатежа КАК СуммаОплатыВВалютеПлатежа,
	|	ДанныеРегистра.СуммаПостоплаты КАК СуммаПостоплаты,
	|	ДанныеРегистра.СуммаПостоплатыРегл КАК СуммаПостоплатыРегл,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеПлатежа КАК СуммаПостоплатыВВалютеПлатежа,
	|	ДанныеРегистра.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ДанныеРегистра.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеПлатежа КАК СуммаПредоплатыВВалютеПлатежа,
	|	
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаОплатыВВалютеВзаиморасчетов КАК СуммаОплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеВзаиморасчетов КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеВзаиморасчетов КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаНДСРегл КАК СуммаНДСРегл,
	|	ДанныеРегистра.СуммаНДСВВалютеПлатежа КАК СуммаНДСВВалютеПлатежа,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныхСредств()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ДанныеРегистра.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорДенежныеСредства КАК КорДенежныеСредства,
	|	ДанныеРегистра.КорДенежныеСредства.Подразделение КАК КорДенежныеСредстваПодразделение,
	|	ДанныеРегистра.КорТипДенежныхСредств КАК КорТипДенежныхСредств,
	|	ДанныеРегистра.КорВалюта КАК КорВалюта,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаВКорВалюте КАК СуммаВКорВалюте,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникКорГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникКорГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникКорГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК КорГФУДенежныхСредств,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.Статья КАК Статья,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Статья ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|	ДанныеРегистра.Статья.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорПодразделение КАК КорПодразделение,
	|	ДанныеРегистра.КорСтатья КАК КорСтатья,
	|	ДанныеРегистра.КорАналитикаДоходов КАК КорАналитикаДоходов,
	|	ДанныеРегистра.КорАналитикаРасходов КАК КорАналитикаРасходов,
	|	ДанныеРегистра.КорАналитикаАктивовПассивов КАК КорАналитикаАктивовПассивов,
	|	ДанныеРегистра.КорСтатья.ГруппаФинансовогоУчета КАК КорГФУДоходовРасходов,
	|	ДанныеРегистра.КорГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаУпр = 0
	|		ТОГДА ДанныеРегистра.Сумма
	|		ИНАЧЕ ДанныеРегистра.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|
	|	ДанныеРегистра.ВидОперацииПоЗарплате КАК ВидОперацииПоЗарплате,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаБезНДСВВалюте,
	|	ДанныеРегистра.СуммаВВалюте - ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаНДСВВалюте,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.СтатьяДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентКонтрагент()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорПартнер КАК КорПартнер,
	|	ДанныеРегистра.КорКонтрагент КАК КорКонтрагент,
	|	ДанныеРегистра.КорДоговор КАК КорДоговор,
	|	ДанныеРегистра.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.КорОбъектРасчетов.Подразделение КАК КорОбъектРасчетовПодразделение,
	|	ДанныеРегистра.КорТипСуммы КАК КорТипСуммы,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаБезНДСВВалюте,
	|	ДанныеРегистра.СуммаВВалюте - ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаНДСВВалюте,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.КорВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаВВалютеВзаиморасчетов КАК КорСуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаБезНДСВВалютеВзаиморасчетов КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаВВалютеВзаиморасчетов - ДанныеРегистра.КорСуммаБезНДСВВалютеВзаиморасчетов КАК КорСуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.КорИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК КорГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.ОбъектРасчетов.Организация КАК Организация,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.КорОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.КорОбъектРасчетов.Партнер КАК Партнер,
	|	ДанныеРегистра.КорОбъектРасчетов.Контрагент КАК Контрагент,
	|	ДанныеРегистра.КорОбъектРасчетов.Договор КАК Договор,
	|	ДанныеРегистра.КорОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.КорОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный) КАК ТипСуммы,
	|	
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.ОбъектРасчетов.Партнер КАК КорПартнер,
	|	ДанныеРегистра.ОбъектРасчетов.Контрагент КАК КорКонтрагент,
	|	ДанныеРегистра.ОбъектРасчетов.Договор КАК КорДоговор,
	|	ДанныеРегистра.ОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК КорОбъектРасчетовПодразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммЗадолженности.АвансВыданный) КАК КорТипСуммы,
	|
	|	ДанныеРегистра.ПредоплатаУпр  КАК Сумма,
	|	ДанныеРегистра.ПредоплатаУпр  КАК СуммаБезНДС,
	|	ДанныеРегистра.ПредоплатаУпр  КАК СуммаНДС,
	|	ДанныеРегистра.ПредоплатаРегл КАК СуммаРегл,
	|	ДанныеРегистра.ПредоплатаРегл КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.ПредоплатаРегл КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Валюта         КАК Валюта,
	|	ДанныеРегистра.Предоплата     КАК СуммаВВалюте,
	|	ДанныеРегистра.Предоплата     КАК СуммаБезНДСВВалюте,
	|	ДанныеРегистра.Предоплата     КАК СуммаНДСВВалюте,
	|
	|	ДанныеРегистра.Валюта         КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК СуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.Валюта         КАК КорВалютаВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК КорСуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.Предоплата     КАК КорСуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.КорОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК КорГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.ОбъектРасчетов.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	ДанныеРегистра.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.Характеристика КАК Характеристика,
	|	ДанныеРегистра.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Склад) КАК ТипСклада,
	|	ДанныеРегистра.СкладПодразделение КАК СкладПодразделение,
	|	ДанныеРегистра.Хранитель КАК Хранитель,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|
	|	СУММА(ДанныеРегистра.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.Стоимость - ДанныеРегистра.СтоимостьБезНДС) КАК СуммаНДС,
	|	СУММА(ДанныеРегистра.СтоимостьУпр) КАК СтоимостьУпр,
	|	СУММА(ДанныеРегистра.СтоимостьРегл) КАК СтоимостьРегл,
	|
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансовая) КАК СтоимостьЗабалансовая,
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансоваяРегл) КАК СтоимостьЗабалансоваяРегл,
	|
	|	СУММА(ДанныеРегистра.ДопРасходы) КАК ДопРасходы,
	|	СУММА(ДанныеРегистра.ДопРасходыБезНДС) КАК ДопРасходыБезНДС,
	|	СУММА(ДанныеРегистра.ДопРасходыУпр) КАК ДопРасходыУпр,
	|	СУММА(ДанныеРегистра.ДопРасходыРегл) КАК ДопРасходыРегл,
	|
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеСНДС) КАК ПостатейныеПостоянныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеБезНДС) КАК ПостатейныеПостоянныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеУпр) КАК ПостатейныеПостоянныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеРегл) КАК ПостатейныеПостоянныеРегл,
	|
	|	СУММА(ДанныеРегистра.Трудозатраты) КАК Трудозатраты,
	|	СУММА(ДанныеРегистра.ТрудозатратыУпр) КАК ТрудозатратыУпр,
	|	СУММА(ДанныеРегистра.ТрудозатратыРегл) КАК ТрудозатратыРегл,
	|
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеСНДС) КАК ПостатейныеПеременныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеБезНДС) КАК ПостатейныеПеременныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеУпр) КАК ПостатейныеПеременныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеРегл) КАК ПостатейныеПеременныеРегл,
	|
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеРегл) КАК РезервПодОбесценениеРегл,
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеУпр) КАК РезервПодОбесценениеУпр,
	|
	|	СУММА(ДанныеРегистра.Количество) КАК Количество,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ГФУНоменклатуры КАК ГФУНоменклатуры,
	|	ДанныеРегистра.ГФУДоходовРасходов КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|		ДанныеРегистра.НаправлениеДеятельностиСтатьи КАК НаправлениеДеятельностиСтатьи,
	|		ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|		ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|		ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|		ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|		ДанныеРегистра.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Контрагент КАК Хранитель,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|				ТОГДА ДанныеРегистра.Склад.Подразделение
	|			ИНАЧЕ ДанныеРегистра.Склад
	|		КОНЕЦ КАК СкладПодразделение,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ВЫБОР КОГДА ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр = 0
	|			ТОГДА ДанныеРегистра.Стоимость + ДанныеРегистра.ДопРасходы + ДанныеРегистра.ПостатейныеПостоянныеСНДС + ДанныеРегистра.Трудозатраты + ДанныеРегистра.ПостатейныеПеременныеСНДС
	|			ИНАЧЕ ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр
	|		КОНЕЦ КАК СтоимостьУпр,
	|		ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.ДопРасходыРегл + ДанныеРегистра.ПостатейныеПостоянныеРегл + ДанныеРегистра.ТрудозатратыРегл + ДанныеРегистра.ПостатейныеПеременныеРегл КАК СтоимостьРегл,
	|
	|		ДанныеРегистра.СтоимостьЗабалансовая КАК СтоимостьЗабалансовая,
	|		ДанныеРегистра.СтоимостьЗабалансоваяРегл КАК СтоимостьЗабалансоваяРегл,
	|
	|		ДанныеРегистра.Количество КАК Количество,
	|
	|		ДанныеРегистра.ДопРасходы КАК ДопРасходы,
	|		ДанныеРегистра.ДопРасходыБезНДС КАК ДопРасходыБезНДС,
	|		ДанныеРегистра.ДопРасходыУпр КАК ДопРасходыУпр,
	|		ДанныеРегистра.ДопРасходыРегл КАК ДопРасходыРегл,
	|
	|		ДанныеРегистра.ПостатейныеПостоянныеСНДС КАК ПостатейныеПостоянныеСНДС,
	|		ДанныеРегистра.ПостатейныеПостоянныеБезНДС КАК ПостатейныеПостоянныеБезНДС,
	|		ДанныеРегистра.ПостатейныеПостоянныеУпр КАК ПостатейныеПостоянныеУпр,
	|		ДанныеРегистра.ПостатейныеПостоянныеРегл КАК ПостатейныеПостоянныеРегл,
	|
	|		ДанныеРегистра.Трудозатраты КАК Трудозатраты,
	|		ДанныеРегистра.ТрудозатратыУпр КАК ТрудозатратыУпр,
	|		ДанныеРегистра.ТрудозатратыРегл КАК ТрудозатратыРегл,
	|
	|		ДанныеРегистра.ПостатейныеПеременныеСНДС КАК ПостатейныеПеременныеСНДС,
	|		ДанныеРегистра.ПостатейныеПеременныеБезНДС КАК ПостатейныеПеременныеБезНДС,
	|		ДанныеРегистра.ПостатейныеПеременныеУпр КАК ПостатейныеПеременныеУпр,
	|		ДанныеРегистра.ПостатейныеПеременныеРегл КАК ПостатейныеПеременныеРегл,
	|
	|		ДанныеРегистра.РезервПодОбесценениеРегл КАК РезервПодОбесценениеРегл,
	|		ДанныеРегистра.РезервПодОбесценениеУпр КАК РезервПодОбесценениеУпр,
	|
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|		ДанныеРегистра.СтатьяДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|		ДанныеРегистра.Сторно КАК Сторно,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|			И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|		И НЕ ДанныеРегистра.Сторно
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор),
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов,
	|	ДанныеРегистра.НаправлениеДеятельностиНоменклатуры,
	|	ДанныеРегистра.АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ,
	|	ДанныеРегистра.Номенклатура,
	|	ДанныеРегистра.Характеристика,
	|	ДанныеРегистра.ТипНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Склад),
	|	ДанныеРегистра.СкладПодразделение,
	|	ДанныеРегистра.Хранитель,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ГФУНоменклатуры,
	|	ДанныеРегистра.ГФУДоходовРасходов,
	|	ДанныеРегистра.ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок,
	|	ДанныеРегистра.Сторно
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость - ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.РезервПодОбесценениеРегл) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.РезервПодОбесценениеУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Количество) <> 0
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураНоменклатура()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.Номенклатура КАК Номенклатура,
	|	ДанныеРегистра.Характеристика КАК Характеристика,
	|	ДанныеРегистра.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Склад) КАК ТипСклада,
	|	ДанныеРегистра.СкладПодразделение КАК СкладПодразделение,
	|	ДанныеРегистра.Хранитель КАК Хранитель,
	|
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорНоменклатура КАК КорНоменклатура,
	|	ДанныеРегистра.КорХарактеристика КАК КорХарактеристика,
	|	ДанныеРегистра.КорТипНоменклатуры КАК КорТипНоменклатуры,
	|	ДанныеРегистра.КорСклад КАК КорСклад,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.КорСклад) КАК ТипКорСклада,
	|	ДанныеРегистра.КорСкладПодразделение КАК КорСкладПодразделение,
	|	ДанныеРегистра.КорХранитель КАК КорХранитель,
	|	ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|	ДанныеРегистра.КорВидЗапасов.Контрагент КАК КорПоставщик,
	|
	|	СУММА(ДанныеРегистра.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьУпр) КАК СтоимостьУпр,
	|	СУММА(ДанныеРегистра.СтоимостьРегл) КАК СтоимостьРегл,
	|
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансовая) КАК СтоимостьЗабалансовая,
	|	СУММА(ДанныеРегистра.СтоимостьЗабалансоваяРегл) КАК СтоимостьЗабалансоваяРегл,
	|
	|	СУММА(ДанныеРегистра.Количество) КАК Количество,
	|	СУММА(ДанныеРегистра.КорКоличество) КАК КорКоличество,
	|
	|	СУММА(ДанныеРегистра.ДопРасходы) КАК ДопРасходы,
	|	СУММА(ДанныеРегистра.ДопРасходыБезНДС) КАК ДопРасходыБезНДС,
	|	СУММА(ДанныеРегистра.ДопРасходыУпр) КАК ДопРасходыУпр,
	|	СУММА(ДанныеРегистра.ДопРасходыРегл) КАК ДопРасходыРегл,
	|
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеСНДС) КАК ПостатейныеПостоянныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеБезНДС) КАК ПостатейныеПостоянныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеУпр) КАК ПостатейныеПостоянныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПостоянныеРегл) КАК ПостатейныеПостоянныеРегл,
	|
	|	СУММА(ДанныеРегистра.Трудозатраты) КАК Трудозатраты,
	|	СУММА(ДанныеРегистра.ТрудозатратыУпр) КАК ТрудозатратыУпр,
	|	СУММА(ДанныеРегистра.ТрудозатратыРегл) КАК ТрудозатратыРегл,
	|
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеСНДС) КАК ПостатейныеПеременныеСНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеБезНДС) КАК ПостатейныеПеременныеБезНДС,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеУпр) КАК ПостатейныеПеременныеУпр,
	|	СУММА(ДанныеРегистра.ПостатейныеПеременныеРегл) КАК ПостатейныеПеременныеРегл,
	|
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеРегл) КАК РезервПодОбесценениеРегл,
	|	СУММА(ДанныеРегистра.РезервПодОбесценениеУпр) КАК РезервПодОбесценениеУпр,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ГФУНоменклатуры КАК ГФУНоменклатуры,
	|	ДанныеРегистра.КорГФУНоменклатуры КАК КорГФУНоменклатуры,
	|	ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|		ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|				ТОГДА ДанныеРегистра.Склад.Подразделение
	|			ИНАЧЕ ДанныеРегистра.Склад
	|		КОНЕЦ КАК СкладПодразделение,
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры.Контрагент КАК Хранитель,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|
	|		ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Номенклатура КАК КорНоменклатура,
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Характеристика КАК КорХарактеристика,
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры КАК КорТипНоменклатуры,
	|		ДанныеРегистра.КорСклад КАК КорСклад,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|				ТОГДА ДанныеРегистра.КорСклад.Подразделение
	|			ИНАЧЕ ДанныеРегистра.КорСклад
	|		КОНЕЦ КАК КорСкладПодразделение,  
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры.Контрагент КАК КорХранитель,
	|		ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|		ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ВЫБОР КОГДА ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр = 0
	|			ТОГДА ДанныеРегистра.Стоимость + ДанныеРегистра.ДопРасходы + ДанныеРегистра.ПостатейныеПостоянныеСНДС + ДанныеРегистра.Трудозатраты + ДанныеРегистра.ПостатейныеПеременныеСНДС
	|			ИНАЧЕ ДанныеРегистра.СтоимостьУпр + ДанныеРегистра.ДопРасходыУпр + ДанныеРегистра.ПостатейныеПостоянныеУпр + ДанныеРегистра.ТрудозатратыУпр + ДанныеРегистра.ПостатейныеПеременныеУпр
	|		КОНЕЦ КАК СтоимостьУпр,
	|		ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.ДопРасходыРегл + ДанныеРегистра.ПостатейныеПостоянныеРегл + ДанныеРегистра.ТрудозатратыРегл + ДанныеРегистра.ПостатейныеПеременныеРегл КАК СтоимостьРегл,
	|
	|		ДанныеРегистра.СтоимостьЗабалансовая КАК СтоимостьЗабалансовая,
	|		ДанныеРегистра.СтоимостьЗабалансоваяРегл КАК СтоимостьЗабалансоваяРегл,
	|
	|		ДанныеРегистра.Количество КАК Количество,
	|		ДанныеРегистра.КорКоличество КАК КорКоличество,
	|
	|		ДанныеРегистра.ДопРасходы КАК ДопРасходы,
	|		ДанныеРегистра.ДопРасходыБезНДС КАК ДопРасходыБезНДС,
	|		ДанныеРегистра.ДопРасходыУпр КАК ДопРасходыУпр,
	|		ДанныеРегистра.ДопРасходыРегл КАК ДопРасходыРегл,
	|
	|		ДанныеРегистра.ПостатейныеПостоянныеСНДС КАК ПостатейныеПостоянныеСНДС,
	|		ДанныеРегистра.ПостатейныеПостоянныеБезНДС КАК ПостатейныеПостоянныеБезНДС,
	|		ДанныеРегистра.ПостатейныеПостоянныеУпр КАК ПостатейныеПостоянныеУпр,
	|		ДанныеРегистра.ПостатейныеПостоянныеРегл КАК ПостатейныеПостоянныеРегл,
	|
	|		ДанныеРегистра.Трудозатраты КАК Трудозатраты,
	|		ДанныеРегистра.ТрудозатратыУпр КАК ТрудозатратыУпр,
	|		ДанныеРегистра.ТрудозатратыРегл КАК ТрудозатратыРегл,
	|
	|		ДанныеРегистра.ПостатейныеПеременныеСНДС КАК ПостатейныеПеременныеСНДС,
	|		ДанныеРегистра.ПостатейныеПеременныеБезНДС КАК ПостатейныеПеременныеБезНДС,
	|		ДанныеРегистра.ПостатейныеПеременныеУпр КАК ПостатейныеПеременныеУпр,
	|		ДанныеРегистра.ПостатейныеПеременныеРегл КАК ПостатейныеПеременныеРегл,
	|
	|		ДанныеРегистра.РезервПодОбесценениеРегл КАК РезервПодОбесценениеРегл,
	|		ДанныеРегистра.РезервПодОбесценениеУпр КАК РезервПодОбесценениеУпр,
	|
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|		ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|		ДанныеРегистра.КорИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК КорГФУНоменклатуры,
	|		ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|		ДанныеРегистра.Сторно КАК Сторно,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|			И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|		И НЕ ДанныеРегистра.Сторно
	|	) ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор),
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности,
	|	ДанныеРегистра.Номенклатура,
	|	ДанныеРегистра.Характеристика,
	|	ДанныеРегистра.ТипНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Склад),
	|	ДанныеРегистра.КорСкладПодразделение,
	|	ДанныеРегистра.СкладПодразделение, 
	|	ДанныеРегистра.Хранитель,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорНоменклатура,
	|	ДанныеРегистра.КорХарактеристика,
	|	ДанныеРегистра.КорТипНоменклатуры,
	|	ДанныеРегистра.КорСклад,  
	|	ДанныеРегистра.КорХранитель,  
	|	ДанныеРегистра.КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов,
	|	ДанныеРегистра.КорВидЗапасов.Контрагент,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ГФУНоменклатуры,
	|	ДанныеРегистра.КорГФУНоменклатуры,
	|	ДанныеРегистра.КорОрганизация,
	|	ДанныеРегистра.Сторно,
	|	ДанныеРегистра.ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.РезервПодОбесценениеРегл) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.РезервПодОбесценениеУпр) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Количество) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.КорКоличество) <> 0";
	
	Возврат ТекстЗапроса;

КонецФункции


Функция ТекстЗапросаЗакупки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиНоменклатуры КАК НаправлениеДеятельностиНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|	ДанныеРегистра.Соглашение КАК Соглашение,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.Заказ КАК Заказ,
	|	ДанныеРегистра.Заказ.Подразделение КАК ЗаказПодразделение,
	|	ДанныеРегистра.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|	ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента - ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаНДСВВалютеДокумента,
	|
	|	ДанныеРегистра.Количество КАК Количество,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам()

	#Область ЗачетАвансаКлиента
	ТекстЗапросаЗачетАвансаКлиента = 
	"// ЗачетАвансаКлиента, ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ОтчетКомиссионера)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияАвансомКомиссионера)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ДанныеРегистра.ЗаказКлиента.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ВосстановлениеАвансаКлиента
	ТекстЗапросаВосстановлениеАвансаКлиента = 
	"// ВосстановлениеАвансаКлиента
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеАвансаКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ДанныеРегистра.ЗаказКлиента.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.ВозвратТоваровОтКлиента),
	|			ТИП(Документ.КорректировкаРеализации))
	|	И ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомиссионера
	ТекстЗапросаЗачетВознагражденияОплатойКомиссионера = 
	"// ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ДанныеРегистра.ЗаказКлиента.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор)  В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомиссионера))
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаВосстановлениеАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомиссионера);
	
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам()

	#Область ЗачетАвансаПоставщику
	
	ТекстЗапросаЗачетАвансаПоставщику = 
	"// ЗачетАвансаПоставщику
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ДанныеРегистра.ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность
	|";
	#КонецОбласти

	#Область ПереносПретензииНаАвансы
	ТекстЗапросаПереносПретензииНаАвансы = 
	"// ПереносПретензииНаАвансы
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаАвансы) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ДанныеРегистра.ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра

	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В (ТИП(Документ.КорректировкаПриобретения),
	|			ТИП(Документ.ВозвратТоваровПоставщику))
	|	И (ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказПоставщику.Объект) <> ТИП(Документ.ВозвратТоваровПоставщику)
	|		 ИЛИ ДанныеРегистра.ЗаказПоставщику = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|	И ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ПереносПретензииНаРасчеты
	ТекстЗапросаПереносПретензииНаРасчеты = 
	"// ПереносПретензииНаРасчеты
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаРасчеты) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ДанныеРегистра.ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомитенту
	ТекстЗапросаЗачетВознагражденияОплатойКомитенту = 
	"// ЗачетВознагражденияОплатойКомитенту
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ДанныеРегистра.ЗаказПоставщику.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомитенту))
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаПоставщику);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаАвансы);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаРасчеты);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомитенту);
	
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСКлиентамиПоСрокам()

	#Область ЗачетАвансаКлиента
	ТекстЗапросаЗачетАвансаКлиента = 
	"// ЗачетАвансаКлиента, ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.ОтчетКомиссионера)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияАвансомКомиссионера)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И (ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация)
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И НЕ ДанныеРегистра.Сторно";
	#КонецОбласти

	#Область ВосстановлениеАвансаКлиента
	ТекстЗапросаВосстановлениеАвансаКлиента = 
	"// ВосстановлениеАвансаКлиента
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеАвансаКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ВЫБОР 
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДанныеРегистра.Предоплата
	|		ИНАЧЕ -ДанныеРегистра.Предоплата
	|	КОНЕЦ КАК Предоплата,
	|	ВЫБОР 
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДанныеРегистра.ПредоплатаУпр
	|		ИНАЧЕ -ДанныеРегистра.ПредоплатаУпр
	|	КОНЕЦ КАК ПредоплатаУпр,
	|	ВЫБОР 
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ДанныеРегистра.ПредоплатаРегл
	|		ИНАЧЕ -ДанныеРегистра.ПредоплатаРегл
	|	КОНЕЦ КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация В(
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|	И ДанныеРегистра.ПредоплатаРегл <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеАвансаКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Валюта КАК Валюта,
	|
	|	СУММА(ДанныеРегистра.Предоплата) КАК Предоплата,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыКОтражению.Регистратор КАК Регистратор,
	|		ДокументыКОтражению.Период КАК Период,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО
	|			ДокументыКОтражению.Регистратор = РеестрДокументов.Ссылка
	|			И РеестрДокументов.СторноИсправление
	|			И НЕ РеестрДокументов.ДополнительнаяЗапись
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ПО
	|			РеестрДокументов.СторнируемыйДокумент = РасчетыСКлиентамиПоСрокам.ДокументРегистратор
	|			И ДокументыКОтражению.Организация = РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация
	|			И НЕ РасчетыСКлиентамиПоСрокам.Сторно
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументыКОтражению.Регистратор КАК Регистратор,
	|		ДокументыКОтражению.Период КАК Период,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ПО
	|			ДокументыКОтражению.Регистратор = РасчетыСКлиентамиПоСрокам.ДокументРегистратор
	|			И ДокументыКОтражению.Организация = РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация
	|			И РасчетыСКлиентамиПоСрокам.Сторно) КАК ДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомиссионера
	ТекстЗапросаЗачетВознагражденияОплатойКомиссионера = 
	"// ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор)  В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомиссионера))
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера)
	|	И ДанныеРегистра.ДолгРегл > 0
	|	И НЕ ДанныеРегистра.Сторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	-ДанныеРегистра.Долг КАК Предоплата,
	|	-ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	-ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор)  В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомиссионера))
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера)
	|	И ДанныеРегистра.ДолгРегл > 0
	|	И НЕ ДанныеРегистра.Сторно";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаВосстановлениеАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомиссионера);
	
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоСрокам()

	#Область ЗачетАвансаПоставщику
	
	ТекстЗапросаЗачетАвансаПоставщику = 
	"// ЗачетАвансаПоставщику
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|	И НЕ ДанныеРегистра.Сторно
	|";
	#КонецОбласти
	
	#Область ВосстановлениеАвансаПоставщику
	ТекстЗапросаВосстановлениеАвансаПоставщику = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеАвансаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Валюта КАК Валюта,
	|
	|	СУММА(ДанныеРегистра.Предоплата) КАК Предоплата,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ЛОЖЬ КАК Сторно,
	|
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыКОтражению.Регистратор КАК Регистратор,
	|		ДокументыКОтражению.Период КАК Период,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО
	|			ДокументыКОтражению.Регистратор = РеестрДокументов.Ссылка
	|			И РеестрДокументов.СторноИсправление
	|			И НЕ РеестрДокументов.ДополнительнаяЗапись
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ПО
	|			РеестрДокументов.СторнируемыйДокумент = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
	|			И ДокументыКОтражению.Организация = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация
	|			И НЕ РасчетыСПоставщикамиПоСрокам.Сторно
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументыКОтражению.Регистратор КАК Регистратор,
	|		ДокументыКОтражению.Период КАК Период,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр,
	|		ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|		ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|	ИЗ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|			
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ПО
	|			ДокументыКОтражению.Регистратор = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
	|			И ДокументыКОтражению.Организация = РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация
	|			И РасчетыСПоставщикамиПоСрокам.Сторно) КАК ДанныеРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.ПланСчетов,
	|	ДанныеРегистра.НастройкаФормированияПроводок
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	#КонецОбласти
	
	#Область ПереносПретензииНаАвансы
	ТекстЗапросаПереносПретензииНаАвансы = 
	"// ПереносПретензииНаАвансы
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаАвансы) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) В (
	|			ТИП(Документ.КорректировкаПриобретения),
	|			ТИП(Документ.ВозвратТоваровПоставщику),
	|			ТИП(Документ.ПриобретениеТоваровУслуг),
	|			ТИП(Документ.ПриобретениеУслугПрочихАктивов))
	|	И (ТИПЗНАЧЕНИЯ(ДанныеРегистра.ОбъектРасчетов.Объект) <> ТИП(Документ.ВозвратТоваровПоставщику)
	|			ИЛИ ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка))
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ПредоплатаРегл > 0
	|	И НЕ ДанныеРегистра.Сторно";
	#КонецОбласти

	#Область ПереносПретензииНаРасчеты
	ТекстЗапросаПереносПретензииНаРасчеты = 
	"// ПереносПретензииНаРасчеты
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаРасчеты) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ДолгРегл > 0
	|	И НЕ ДанныеРегистра.Сторно";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомитенту
	ТекстЗапросаЗачетВознагражденияОплатойКомитенту = 
	"// ЗачетВознагражденияОплатойКомитенту
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ДокументРегистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) КАК ТипДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту) КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|
	|	ДанныеРегистра.ОбъектРасчетов КАК Заказ,
	|
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ОбъектРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументРегистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомитенту))
	|	И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ДолгРегл > 0
	|	И НЕ ДанныеРегистра.Сторно";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаПоставщику);
	ТекстыТаблиц.Добавить(ТекстЗапросаВосстановлениеАвансаПоставщику);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаАвансы);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаРасчеты);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомитенту);
		
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаАмортизацияОС()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГФУВнеоборотныеАктивы,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|	ДанныеРегистра.КорПодразделение КАК КорПодразделение,
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорСтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов КАК КорСтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|	
	|	ДанныеРегистра.Амортизация,
	|	ДанныеРегистра.АмортизацияРегл + ДанныеРегистра.АмортизацияЦФ КАК АмортизацияРегл,
	|
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.ХозяйственнаяОперация = НастройкиОпераций.Операция
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""АмортизацияОС""
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И (ДанныеРегистра.Амортизация <> 0 ИЛИ ДанныеРегистра.АмортизацияРегл + ДанныеРегистра.АмортизацияЦФ <> 0)
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаАмортизацияНМА()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.НематериальныйАктив КАК НематериальныйАктив,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГФУВнеоборотныеАктивы,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|	ДанныеРегистра.КорПодразделение КАК КорПодразделение,
	|	ДанныеРегистра.КорНаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ДанныеРегистра.КорСтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов КАК КорСтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|	
	|	ДанныеРегистра.Амортизация КАК Амортизация,
	|	ДанныеРегистра.АмортизацияРегл + ДанныеРегистра.АмортизацияЦФ КАК АмортизацияРегл,
	|
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.ХозяйственнаяОперация = НастройкиОпераций.Операция
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""АмортизацияНМА""
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И (ДанныеРегистра.Амортизация <> 0 ИЛИ ДанныеРегистра.АмортизацияРегл + ДанныеРегистра.АмортизацияЦФ <> 0)
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСтоимостьОС()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГФУВнеоборотныеАктивы,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.КорСтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов КАК КорСтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|	ДанныеРегистра.КорКонтрагент КАК Контрагент,
	|	
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.СтоимостьЦФ КАК СтоимостьРегл,
	|
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.ХозяйственнаяОперация = НастройкиОпераций.Операция
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""СтоимостьОС""
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И (ДанныеРегистра.Стоимость <> 0 ИЛИ ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.СтоимостьЦФ <> 0)
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСтоимостьНМА()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.НематериальныйАктив КАК НематериальныйАктив,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГФУВнеоборотныеАктивы,
	|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеРегистра.КорСтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов КАК КорСтатьяРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.КорСтатьяРасходов.ГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|	
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.СтоимостьЦФ КАК СтоимостьРегл,
	|
	|	ЛОЖЬ КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.ХозяйственнаяОперация = НастройкиОпераций.Операция
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""СтоимостьНМА""
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И (ДанныеРегистра.Стоимость <> 0 ИЛИ ДанныеРегистра.СтоимостьРегл + ДанныеРегистра.СтоимостьЦФ <> 0)
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаПрочиеРасходы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.СтатьяРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.ХозяйственнаяОперация = НастройкиОпераций.Операция
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""ПрочиеРасходы""
	|	И ДанныеРегистра.Активность
	|	И ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И (ДанныеРегистра.Сумма <> 0 ИЛИ ДанныеРегистра.СуммаРегл <> 0)
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДСАвансыПолученные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.НастройкаХозяйственнойОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРегистра.ДокументОплаты,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.НДСУпр КАК НДСУпр,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.НДСАвансыПолученные КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.НастройкаХозяйственнойОперации = НастройкиОпераций.Ссылка
	|
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""НДСАвансыПолученные""
	|	И ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно
	|";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаНДСАвансыВыданные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.НастройкаХозяйственнойОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРегистра.ДокументОплаты,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.НДСУпр КАК НДСУпр,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.НДСАвансыВыданные КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|			И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.НастройкаХозяйственнойОперации = НастройкиОпераций.Ссылка
	|
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""НДСАвансыВыданные""
	|	И ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияПоНДС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) КАК ТипДокумента,
	|	ДанныеРегистра.НастройкаХозяйственнойОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ТипЗаписи КАК ТипЗаписи,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.СчетФактура КАК СчетФактура,
	|	ДанныеРегистра.ВидЦенности КАК ВидЦенности,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	
	|	ДанныеРегистра.НДС КАК НДС,
	|	ДанныеРегистра.НДСУпр КАК НДСУпр,
	|	ДанныеРегистра.Сторно КАК Сторно,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрНакопления.ДвиженияПоНДС КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|			И НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		НастройкиОпераций КАК НастройкиОпераций
	|	ПО
	|		ДанныеРегистра.НастройкаХозяйственнойОперации = НастройкиОпераций.Ссылка
	|
	|ГДЕ
	|	НастройкиОпераций.ИсточникДанных = ""ДвиженияПоНДС""
	|	И ДанныеРегистра.Активность
	|	И НЕ ДанныеРегистра.Сторно";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Транслятор

Процедура ИнициализироватьТаблицуНастройкиОпераций(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.Ссылка КАК Ссылка,
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Операция,
	|	НастройкиХозяйственныхОпераций.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ НастройкиОпераций
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.ИспользоватьВМеждународномУчете = ИСТИНА
	|	И НастройкиХозяйственныхОпераций.ЭтоГруппа = ЛОЖЬ
	|	И НастройкиХозяйственныхОпераций.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиХозяйственныхОпераций.ИсточникДанных <> """"
	|";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТаблицаУточненияСчетов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОтражения.ШаблонПроводки КАК ШаблонПроводки,
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ПравилаУточненияСчетов.ВидДвижения КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|		ПО ПравилаОтражения.ШаблонПроводки = ПравилаУточненияСчетов.ШаблонПроводки
	|";
	
	ТаблицаУточненияСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаУточненияСчетов.Индексы.Добавить("ШаблонПроводки, ГруппаФинансовогоУчета, ВидДвижения");

	Возврат ТаблицаУточненияСчетов;

КонецФункции


Функция НастройкиОтраженияВМеждународномУчете()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ШаблоныПроводок.ЭтоГруппаШаблонов КАК ЭтоГруппаШаблонов,
	|	ШаблоныПроводок.Операция КАК Операция,
	|	ШаблоныПроводок.Операция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ШаблоныПроводок.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	ШаблоныПроводок.СчетДебетаПоУмолчанию КАК СчетДебетаПоУмолчанию,
	|	ШаблоныПроводок.СчетКредитаПоУмолчанию КАК СчетКредитаПоУмолчанию,
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт КАК ИсточникУточненияСчетаДт,
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт КАК ИсточникУточненияСчетаКт,
	|	ШаблоныПроводок.ИсточникПодразделенияДт КАК ИсточникПодразделенияДт,
	|	ШаблоныПроводок.ИсточникПодразделенияКт КАК ИсточникПодразделенияКт,
	|	ШаблоныПроводок.ИсточникНаправленияДт КАК ИсточникНаправленияДт,
	|	ШаблоныПроводок.ИсточникНаправленияКт КАК ИсточникНаправленияКт,
	|	ШаблоныПроводок.ИсточникСуммыВВалютеДт КАК ИсточникСуммыВВалютеДт,
	|	ШаблоныПроводок.ИсточникСуммыВВалютеКт КАК ИсточникСуммыВВалютеКт,
	|	ШаблоныПроводок.ИсточникБалансовойСуммы КАК ИсточникБалансовойСуммы,
	|	ШаблоныПроводок.ИзменятьЗнакОперацииПриОтраженииВУчете КАК ИзменятьЗнакОперации,
	|	ШаблоныПроводок.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ШаблоныПроводок.ДополнительныйОтбор КАК ДополнительныйОтбор,
	|	ШаблоныПроводок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ШаблоныПроводок.Игнорировать КАК Игнорировать,
	|	ШаблоныПроводок.ЗаполнениеСубконтоПоСоответствию КАК ЗаполнениеСубконтоПоСоответствию,
	|	ПравилаОтражения.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР 
	|		КОГДА &НоваяАрхитектураРасчетов И НастройкиОпераций.ИсточникДанных = ""РасчетыСКлиентамиПоДокументам""
	|			ТОГДА ""РасчетыСКлиентамиПоСрокам""
	|		КОГДА &НоваяАрхитектураРасчетов И НастройкиОпераций.ИсточникДанных = ""РасчетыСПоставщикамиПоДокументам""
	|			ТОГДА ""РасчетыСПоставщикамиПоСрокам""
	|		ИНАЧЕ
	|	    	НастройкиОпераций.ИсточникДанных
	|	КОНЕЦ КАК ИсточникДанных,
	|	НастройкиОпераций.Приход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.Номенклатура) КАК ДвижениеНоменклатурыДт,
	|	НастройкиОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.Номенклатура) КАК ДвижениеНоменклатурыКт,
	|	ШаблоныПроводок.Родитель КАК РодительскийШаблонПроводки,
	|	ШаблоныПроводок.Родитель.Родитель КАК РодительскийШаблонПроводки2,
	|	ШаблоныПроводок.Родитель.Родитель.ВариантСовместногоПрименения КАК ВариантСовместногоПримененияУровня2,
	|	ШаблоныПроводок.ИсточникКоличестваДт КАК ИсточникКоличестваДт,
	|	ШаблоныПроводок.ИсточникКоличестваКт КАК ИсточникКоличестваКт
	|
	|ИЗ 
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО
	|		ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиОпераций
	|	ПО
	|		ШаблоныПроводок.Операция = НастройкиОпераций.Ссылка
	|ГДЕ
	|	НЕ ШаблоныПроводок.ПометкаУдаления
	|	И (НЕ ПравилаОтражения.НастройкаФормированияПроводок ЕСТЬ NULL ИЛИ ШаблоныПроводок.ЭтоГруппаШаблонов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныПроводок.РеквизитДопУпорядочивания ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаполнения.Ссылка КАК ШаблонПроводки,
	|	НастройкиЗаполнения.ПоложениеСубконто КАК ПоложениеСубконто,
	|	НастройкиЗаполнения.ВидСубконто КАК ВидСубконто,
	|	НастройкиЗаполнения.ЗаполнятьИзИсточника КАК ЗаполнятьИзИсточника,
	|	НастройкиЗаполнения.УказанноеЗначение КАК УказанноеЗначение,
	|	НастройкиЗаполнения.Выражение КАК Выражение,
	|	НастройкиОпераций.ИсточникДанных КАК ИсточникДанных
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполнения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиОпераций
	|	ПО НастройкиЗаполнения.Ссылка.Операция = НастройкиОпераций.Ссылка
	|ГДЕ
	|	НЕ НастройкиЗаполнения.Ссылка.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("НоваяАрхитектураРасчетов", Константы.НоваяАрхитектураВзаиморасчетов.Получить());
	Результаты = Запрос.ВыполнитьПакет();
	
	Настройки = Новый Структура;
	Настройки.Вставить("ШаблоныПроводок", Результаты[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией));
	Настройки.Вставить("СоответствиеСубконто", Результаты[1].Выгрузить());
	
	Возврат Настройки;
	
КонецФункции

Процедура ОтразитьДанныеРегистра(ИмяРегистра, ТекстЗапроса, ПараметрыФормированияПроводок, ТаблицаПроводок);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОперативногоУчета = Результат.Выгрузить();
	
	// Добавление ключевого поля
	ДанныеОперативногоУчета.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	ДанныеОперативногоУчета.Индексы.Добавить("КлючСтроки");
	КлючСтроки = 1;
	Для каждого Строка Из ДанныеОперативногоУчета Цикл
		Строка.КлючСтроки = КлючСтроки;
		КлючСтроки = КлючСтроки + 1;
	КонецЦикла;
	
	ДанныеОперативногоУчета.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	ДанныеОперативногоУчета.Колонки.Добавить("ГруппаВытеснения", Новый ОписаниеТипов("СправочникСсылка.ШаблоныПроводокДляМеждународногоУчета"));
	
	НеОтражаемыеХозяйственныеОперации = НеОтражаемыеХозяйственныеОперации(ДанныеОперативногоУчета, ТаблицаПроводок, ПараметрыФормированияПроводок.СтруктураПроводки);
	Для каждого НеОтражаемаяХозяйственнаяОперация Из НеОтражаемыеХозяйственныеОперации Цикл
		ДанныеОперативногоУчета.Удалить(НеОтражаемаяХозяйственнаяОперация);
	КонецЦикла;
	
	ПараметрыФормированияПроводок.Вставить("ИмяРегистра", ИмяРегистра);
	ПараметрыРегистра = МеждународныйУчетСерверПовтИсп.ПараметрыРегистра(ИмяРегистра);
	Если Не ПроверитьКорректностьПоказателей(Результат, ИмяРегистра, ПараметрыРегистра) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормированияПроводок.Вставить("ПараметрыРегистра", ПараметрыРегистра);
	
	Отбор = Новый Структура("ИсточникДанных", ИмяРегистра);
	ШаблоныРегистра = ПараметрыФормированияПроводок.НастройкиОтражения.ШаблоныПроводок.Строки.НайтиСтроки(Отбор);
	ПараметрыФормированияПроводок.Вставить("ШаблоныПроводок", ШаблоныРегистра);
	ПараметрыФормированияПроводок.Вставить("СоответствиеСубконто", ПараметрыФормированияПроводок.НастройкиОтражения.СоответствиеСубконто);
	ПараметрыФормированияПроводок.Вставить("ВариантСовместногоПрименения", Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все);
	ПараметрыФормированияПроводок.Вставить("ДополнительныйОтборГруппы", Неопределено);
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхОперативногоУчета(ДанныеОперативногоУчета);
	
	ОтразитьДанныеОперативногоУчетаРекурсивно(СхемаКомпоновкиДанных,
		ДанныеОперативногоУчета,
		ПараметрыФормированияПроводок,
		ТаблицаПроводок);
		
	ДанныеОперативногоУчета.Свернуть("Регистратор, ХозяйственнаяОперация, ПланСчетов, НастройкаФормированияПроводок, Организация, Период", "Обработан");
	Для каждого Данные Из ДанныеОперативногоУчета Цикл
		Если Не Данные.Обработан Тогда
			Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
			ЗаполнитьЗначенияСвойств(Проводка, Данные);
			МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
			ТекстОшибки = НСтр("ru = 'Для хозяйственной операции ""%ХозяйственнаяОперация%"" отсутствуют шаблоны проводок.';
								|en = 'Posting templates are missing for the ""%ХозяйственнаяОперация%"" business transaction.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", Данные.ХозяйственнаяОперация);
			МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
			МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
			
			МенеджерЗаписи = РегистрыСведений.ШаблоныПроводокМеждународногоУчетаТребующиеНастройки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
			МенеджерЗаписи.Документ = Данные.Регистратор;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НеОтражаемыеХозяйственныеОперации(ДанныеОперативногоУчета, ТаблицаПроводок, СтруктураПроводки)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеОперативногоУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ДанныеОперативногоУчета
	|ИЗ
	|	&ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозяйственнаяОперация,
	|	НастройкаФормированияПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ИСТИНА КАК ИспользоватьВМеждународномУчете
	|ИЗ
	|	ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозопераций
	|	ПО
	|		ДанныеОперативногоУчета.ХозяйственнаяОперация = НастройкиХозопераций.ХозяйственнаяОперация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ХозяйственныеОперацииНеОтражаемыеВМеждународномУчете КАК НеОтражаемыеХозоперации
	|	ПО
	|		ДанныеОперативногоУчета.НастройкаФормированияПроводок = НеОтражаемыеХозоперации.НастройкаФормированияПроводок
	|		И НастройкиХозопераций.Ссылка = НеОтражаемыеХозоперации.Операция
	|ГДЕ
	|	 НастройкиХозОпераций.ИспользоватьВМеждународномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НастройкиХозОпераций.ИспользоватьВМеждународномУчете КАК ИспользоватьВМеждународномУчете
	|ИЗ
	|	ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозОпераций
	|	ПО
	|		ДанныеОперативногоУчета.ХозяйственнаяОперация = НастройкиХозопераций.ХозяйственнаяОперация
	|ГДЕ
	|	НЕ НастройкиХозОпераций.ИспользоватьВМеждународномУчете
	|";
	
	Запрос.УстановитьПараметр("ДанныеОперативногоУчета", ДанныеОперативногоУчета);
	ВыборкаНеОтражаемыеХозоперации = Запрос.Выполнить().Выбрать();
	НеОтражаемыеХозяйственныеОперации = Новый Массив;
	Пока ВыборкаНеОтражаемыеХозоперации.Следующий() Цикл
		ЗаписьРегистра = ДанныеОперативногоУчета.Найти(ВыборкаНеОтражаемыеХозоперации.КлючСтроки, "КлючСтроки");
		НеОтражаемыеХозяйственныеОперации.Добавить(ЗаписьРегистра);
		Проводка = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПроводки);
		Проводка.Регистратор = ЗаписьРегистра.Регистратор;
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаНеОтражаемыеХозоперации);
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
		ТекстОшибки = НСтр("ru = 'Хозяйственная операция ""%ХозяйственнаяОперация%"" игнорируется применяемой настройкой формирования проводок';
							|en = 'The ""%ХозяйственнаяОперация%"" business transaction is ignored by the applied posting schema'");
		Если НЕ ВыборкаНеОтражаемыеХозОперации.ИспользоватьВМеждународномУчете Тогда
			ТекстОшибки = НСтр("ru = 'Хозяйственная операция ""%ХозяйственнаяОперация%"" не используется в международном учете.';
								|en = 'Business transaction ""%ХозяйственнаяОперация%"" is not used in financial accounting.'");
		КонецЕсли;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", ВыборкаНеОтражаемыеХозоперации.ХозяйственнаяОперация);
		МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
	Возврат НеОтражаемыеХозяйственныеОперации;

КонецФункции

Функция СхемаКомпоновкиДанныхОперативногоУчета(ДанныеОперативногоУчета)

	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхемаНаборОбъект("ДанныеОперативногоУчета");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ДанныеОперативногоУчета");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Для Каждого Колонка Из ДанныеОперативногоУчета.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	Возврат СхемаКомпоновкиДанных;

КонецФункции

Процедура ОтразитьДанныеОперативногоУчетаРекурсивно(СхемаКомпоновкиДанных, ДанныеОперативногоУчета, ПараметрыФормированияПроводок, ТаблицаПроводок)

	ШаблоныПроводок = ПараметрыФормированияПроводок.ШаблоныПроводок;
	СоответствиеСубконто = ПараметрыФормированияПроводок.СоответствиеСубконто;
	ВариантСовместногоПрименения = ПараметрыФормированияПроводок.ВариантСовместногоПрименения;
	ДополнительныйОтборГруппы = ПараметрыФормированияПроводок.ДополнительныйОтборГруппы;
	СтруктураПроводки = ПараметрыФормированияПроводок.СтруктураПроводки;
	
	Вытеснение = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение;
	МассивВытесненныхСтрок = Новый Массив;
	Для каждого ШаблонПроводки Из ШаблоныПроводок Цикл
		
		Если ШаблонПроводки.ЭтоГруппаШаблонов Тогда
			Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
				ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
				ЗначениеОтбора = ШаблонПроводки.ДополнительныйОтбор; //ХранилищеЗначения
				НастройкиОтбора = ЗначениеОтбора.Получить();
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиОтбора.Отбор, ДополнительныйОтбор.Отбор); 
				Если ДополнительныйОтборГруппы <> Неопределено Тогда
					ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтборГруппы.Отбор, ДополнительныйОтбор.Отбор); 
				КонецЕсли;
			КонецЕсли;
			ПараметрыОтраженияГруппы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок);
			ПараметрыОтраженияГруппы.Вставить("ШаблоныПроводок", ШаблонПроводки.Строки);
			ПараметрыОтраженияГруппы.Вставить("ВариантСовместногоПрименения", ШаблонПроводки.ВариантСовместногоПрименения);
			ПараметрыОтраженияГруппы.Вставить("ДополнительныйОтборГруппы", ДополнительныйОтбор);
			ПараметрыОтраженияГруппы.Вставить("СтруктураПроводки", СтруктураПроводки);
			
			ОтразитьДанныеОперативногоУчетаРекурсивно(
				СхемаКомпоновкиДанных, 
				ДанныеОперативногоУчета, 
				ПараметрыОтраженияГруппы, 
				ТаблицаПроводок);
		Иначе
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "КлючСтроки");
			
			ТаблицаУточненияСчетов  = ПараметрыФормированияПроводок.ТаблицаУточненияСчетов;
			
			Показатели              = ПараметрыФормированияПроводок.ПараметрыРегистра.Показатели;
			ПоказателиВВалюте       = ПараметрыФормированияПроводок.ПараметрыРегистра.ПоказателиВВалюте;
			ПоказателиКоличества    = ПараметрыФормированияПроводок.ПараметрыРегистра.ПоказателиКоличества;
			ИсточникиУточненияСчета = ПараметрыФормированияПроводок.ПараметрыРегистра.ИсточникиУточненияСчета;
			ИсточникиПодразделений  = ПараметрыФормированияПроводок.ПараметрыРегистра.ИсточникиПодразделений;
			ИсточникиНаправлений    = ПараметрыФормированияПроводок.ПараметрыРегистра.ИсточникиНаправлений;
			ИсточникиСубконто       = ПараметрыФормированияПроводок.ПараметрыРегистра.ИсточникиСубконто;
			
			ЗаполнениеСубконтоПоСоответствию = ШаблонПроводки.ЗаполнениеСубконтоПоСоответствию;
			Если ЗаполнениеСубконтоПоСоответствию Тогда
				ИсточникиСубконто = УстановитьЗаполнениеСубконтоПоСоответствиюПользователя(
										СхемаКомпоновкиДанных, 
										Настройки, 
										ШаблонПроводки, 
										СоответствиеСубконто);
			КонецЕсли;
			
			УстановитьОтборДанныхПоШаблонуПроводки(
				СхемаКомпоновкиДанных, 
				Настройки, 
				ШаблонПроводки, 
				ДополнительныйОтборГруппы,
				ВариантСовместногоПрименения);
				
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ДанныеОперативногоУчета", ДанныеОперативногоУчета);
			
			Попытка
				Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
			Исключение
				ТекстСообщения = Символы.ПС + НСтр("ru = 'Не удалось получить данные для отражения хозяйственной операции ""%ХозОперация%""
											|по шаблону проводки ""%ШаблонПроводки%""
											|по причине';
											|en = 'Cannot retrieve data to record the business transaction ""%ХозОперация%""
											|using the ""%ШаблонПроводки%"" posting template.
											|Reason:'") + ":" + Символы.ПС + Символы.Таб + "%Причина%";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХозОперация%", ШаблонПроводки.ХозяйственнаяОперация);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонПроводки%", ШаблонПроводки.ШаблонПроводки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'Возможно в шаблоне проводки установлены некорректные настройки дополнительного отбора или заполнения субконто.';
							|en = 'Additional filter settings or extra dimension population settings may have been set incorrectly in the posting template.'");
				ВызватьИсключение ТекстСообщения;
			КонецПопытки;
			
			Для каждого Строка Из Результат Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("КлючСтроки", Строка.КлючСтроки);
				Данные = ДанныеОперативногоУчета.НайтиСтроки(Отбор)[0];
				
				Данные.Обработан = Истина;
				
				Если ШаблонПроводки.Игнорировать Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВариантСовместногоПрименения = Вытеснение Тогда
					Данные.ГруппаВытеснения = ШаблонПроводки.РодительскийШаблонПроводки;
				КонецЕсли;
				
				Если ШаблонПроводки.Уровень() = 2
					И ШаблонПроводки.ВариантСовместногоПримененияУровня2 = Вытеснение Тогда
					МассивВытесненныхСтрок.Добавить(Данные);
				КонецЕсли;
				
				Проводка = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПроводки);
				ЗаполнитьЗначенияСвойств(Проводка, Данные, "Период, Регистратор, ПланСчетов, Организация, Сторно");
				
				Если ШаблонПроводки.РучноеУточнениеПроводки Тогда
					МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
				КонецЕсли;
				
				Проводка.ШаблонПроводки = ШаблонПроводки.ШаблонПроводки;
				
				ИсточникБалансовойСуммы = ШаблонПроводки.ИсточникБалансовойСуммы;
				Если Не ЗначениеЗаполнено(ИсточникБалансовойСуммы) Тогда
					МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
					ТекстОшибки = НСтр("ru = 'Не выбран источник балансовой суммы.';
										|en = 'Book amount source is not selected.'");
					МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
				Иначе
					Ресурсы = Показатели.Получить(ИсточникБалансовойСуммы).Ресурсы;
					
					УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(Данные.ПланСчетов, Данные.Организация);
					
					ФункциональнаяСумма = ФункциональнаяСумма(Данные, ШаблонПроводки, Ресурсы, УчетныеВалютыНаПланеСчетов); 
					Проводка.Сумма = ФункциональнаяСумма.Сумма;
					Проводка.ВалютаХраненияСуммыФункциональной = ФункциональнаяСумма.Валюта;
					Проводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
					
					СуммаПредставления = СуммаПредставления(Данные, ШаблонПроводки, Ресурсы, УчетныеВалютыНаПланеСчетов);
					Проводка.СуммаПредставления = СуммаПредставления.Сумма;
					Проводка.ВалютаХраненияСуммыПредставления = СуммаПредставления.Валюта;
					Если СуммаПредставления.Сумма = 0 Тогда
						Проводка.СуммаПредставления = ФункциональнаяСумма.Сумма;
						Проводка.ВалютаХраненияСуммыПредставления = ФункциональнаяСумма.Валюта;
					КонецЕсли;
					Проводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
				КонецЕсли;
					
				Проводка.СчетДт = СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, "Дт");
				Проводка.СчетКт = СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, "Кт");
				
				СвойстваСчетаДт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.Валютный Тогда
					ИсточникСуммыВВалютеДт = ШаблонПроводки.ИсточникСуммыВВалютеДт;
					Если Не ЗначениеЗаполнено(ИсточникСуммыВВалютеДт) Тогда
						МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
						ТекстОшибки = НСтр("ru = 'Не выбран источник валютной суммы Дт.';
											|en = 'Dr currency amount source is not selected.'");
						МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
					Иначе
						ИсточникВалютыДт = ПоказателиВВалюте.Получить(ИсточникСуммыВВалютеДт).ИсточникВалюты;
						Проводка.ВалютаДт = Данные[ИсточникВалютыДт];
						Проводка.ВалютнаяСуммаДт = СуммаВВалюте(Данные, ШаблонПроводки, Ресурсы, ИсточникВалютыДт);
					КонецЕсли;
				Иначе
					Проводка.ВалютаДт = Справочники.Валюты.ПустаяСсылка();
					Проводка.ВалютнаяСуммаДт = 0;
				КонецЕсли;
				
				СвойстваСчетаКт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.Валютный Тогда
					ИсточникСуммыВВалютеКт = ШаблонПроводки.ИсточникСуммыВВалютеКт;
					Если Не ЗначениеЗаполнено(ИсточникСуммыВВалютеКт) Тогда
						МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
						ТекстОшибки = НСтр("ru = 'Не выбран источник валютной суммы Кт.';
											|en = 'Cr currency amount source is not selected.'");
						МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
					Иначе
						ИсточникВалютыКт = ПоказателиВВалюте.Получить(ИсточникСуммыВВалютеКт).ИсточникВалюты;
						Проводка.ВалютаКт = Данные[ИсточникВалютыКт];
						Проводка.ВалютнаяСуммаКт = СуммаВВалюте(Данные, ШаблонПроводки, Ресурсы, ИсточникВалютыКт);
					КонецЕсли;
				Иначе
					Проводка.ВалютаКт = Справочники.Валюты.ПустаяСсылка();
					Проводка.ВалютнаяСуммаКт = 0;
				КонецЕсли;
				
				Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеДт = ЗначениеИзмерения(Данные, ИсточникиПодразделений, ШаблонПроводки.ИсточникПодразделенияДт);
				КонецЕсли;
				Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
					Проводка.ПодразделениеКт = ЗначениеИзмерения(Данные, ИсточникиПодразделений, ШаблонПроводки.ИсточникПодразделенияКт);
				КонецЕсли;
				
				Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
					Проводка.НаправлениеДеятельностиДт = ЗначениеИзмерения(Данные, ИсточникиНаправлений, ШаблонПроводки.ИсточникНаправленияДт);
				КонецЕсли;
				Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
					Проводка.НаправлениеДеятельностиКт = ЗначениеИзмерения(Данные, ИсточникиНаправлений, ШаблонПроводки.ИсточникНаправленияКт);
				КонецЕсли;
				
				СвойстваСчетаДт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Проводка.СчетДт);
				Если СвойстваСчетаДт.Количественный И ЗначениеЗаполнено(ШаблонПроводки.ИсточникКоличестваДт) Тогда
					КоличествоДт = ЗначениеИзмерения(Данные, ПоказателиКоличества, ШаблонПроводки.ИсточникКоличестваДт);
					Проводка.КоличествоДт = ?(ШаблонПроводки.ИзменятьЗнакОперации, -КоличествоДт, КоличествоДт);
				КонецЕсли;
				
				СвойстваСчетаКт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Проводка.СчетКт);
				Если СвойстваСчетаКт.Количественный И ЗначениеЗаполнено(ШаблонПроводки.ИсточникКоличестваКт) Тогда
					КоличествоКт = ЗначениеИзмерения(Данные, ПоказателиКоличества, ШаблонПроводки.ИсточникКоличестваКт);
					Проводка.КоличествоКт = ?(ШаблонПроводки.ИзменятьЗнакОперации, -КоличествоКт, КоличествоКт);
				КонецЕсли;
				
				Проводка.Вставить("ДанныеШаблонаПроводки", ШаблонПроводки);
				
				ДанныеЗаполненияСубконто = Новый Структура;
				ДанныеЗаполненияСубконто.Вставить("Проводка", Проводка);
				ДанныеЗаполненияСубконто.Вставить("Данные", Данные);
				ДанныеЗаполненияСубконто.Вставить("ИсточникиСубконто", ИсточникиСубконто);
				ДанныеЗаполненияСубконто.Вставить("СвойстваСчетаДт", СвойстваСчетаДт);
				ДанныеЗаполненияСубконто.Вставить("СвойстваСчетаКт", СвойстваСчетаКт);
				ДанныеЗаполненияСубконто.Вставить("ИмяРегистра", ПараметрыФормированияПроводок.ИмяРегистра);
				ДанныеЗаполненияСубконто.Вставить("СинонимРегистра", ШаблонПроводки.Операция.ПредставлениеИсточникаДанных);
				Если ЗаполнениеСубконтоПоСоответствию Тогда
					ДанныеЗаполненияСубконто.Данные = Строка;
				КонецЕсли;
				ЗаполнитьСубконто("Дт", ДанныеЗаполненияСубконто);
				ЗаполнитьСубконто("Кт", ДанныеЗаполненияСубконто);
				
				ПроверитьЗаполнениеПроводки(Проводка, ШаблонПроводки, ПараметрыФормированияПроводок.ПараметрыРегистра);
				
				МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ВытесненнаяСтрока Из МассивВытесненныхСтрок Цикл
		ВытесненнаяСтрока.ГруппаВытеснения = ШаблоныПроводок.Родитель.Родитель.ШаблонПроводки
	КонецЦикла;

КонецПроцедуры

Функция УстановитьЗаполнениеСубконтоПоСоответствиюПользователя(СхемаКомпоновкиДанных, Настройки, ШаблонПроводки, СоответствиеСубконто)
	
	СхемаКомпоновкиДанных.ВычисляемыеПоля.Очистить();
	
	УточняемыеВычисляемыеПоля = Новый Массив; // Массив из ВычисляемоеПолеСхемыКомпоновкиДанных - 
	
	Отбор = Новый Структура;
	Отбор.Вставить("ШаблонПроводки", ШаблонПроводки.ШаблонПроводки);
	Отбор.Вставить("ПоложениеСубконто");
	
	ПоложенияСубконто = Новый Массив;
	ПоложенияСубконто.Добавить("Дт");
	ПоложенияСубконто.Добавить("Кт");
	
	ИсточникиСубконто = Новый Структура;
	ИсточникиСубконто.Вставить("СубконтоДт", Новый Массив);
	ИсточникиСубконто.Вставить("СубконтоКт", Новый Массив);
	Для каждого ПоложениеСубконто Из ПоложенияСубконто Цикл
		Отбор.ПоложениеСубконто = ПоложениеСубконто;
		НастройкиЗаполнения = СоответствиеСубконто.НайтиСтроки(Отбор);
		
		НомерНастройки = 1;
		ПоляИсточника = ИсточникиСубконто["Субконто"+ПоложениеСубконто]; // Массив -
		Для Каждого Настройка Из НастройкиЗаполнения Цикл
			ПутьКДанным = "СубконтоМеждународный" + ПоложениеСубконто + "_Н" + НомерНастройки;
			Выражение = МеждународныйУчетПроведениеСервер.ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, Настройка);
			
			ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение); 
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ПутьКДанным);
			
			Если Настройка.ЗаполнятьИзИсточника
				И СтрНайти(Выражение, "{") > 0 Тогда
				// Есть характеристики
				УточняемыеВычисляемыеПоля.Добавить(ВычисляемоеПоле);
			КонецЕсли;
			
			ПоляИсточника.Добавить(ПутьКДанным);
			НомерНастройки = НомерНастройки + 1;
		КонецЦикла;
	КонецЦикла;
	
	Если УточняемыеВычисляемыеПоля.Количество() > 0 Тогда
		ИсходныеВыражения = Новый Массив;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			Если ИсходныеВыражения.Найти(ВычисляемоеПоле.Выражение) = Неопределено Тогда
				ИсходныеВыражения.Добавить(ВычисляемоеПоле.Выражение);
			КонецЕсли;
		КонецЦикла;
		РезультатПреобразования = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
			ИсходныеВыражения);
		Если РезультатПреобразования.ЕстьОшибки Тогда
			ТекстыОшибок = Новый Массив;
			Для Каждого ИсходноеВыражениеИТекстОшибки Из РезультатПреобразования.СообщенияОшибокПреобразования Цикл
				ТекстыОшибок.Добавить(ИсходноеВыражениеИТекстОшибки.Значение);
			КонецЦикла;
			ТекстВсехОшибок = СтрСоединить(ТекстыОшибок, Символы.ПС);
			ТекстСообщения = НСтр("ru = 'Не удалось получить данные для отражения хозяйственной операции ""%1""
											|по шаблону проводки ""%2""
											|по причине:
											|	%3';
											|en = 'Cannot get data to record the business transaction ""%1""
											|using posting template ""%2""
											|. Reason:
											|	%3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ШаблонПроводки.ХозяйственнаяОперация,
				ШаблонПроводки.ШаблонПроводки,
				ТекстВсехОшибок);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПреобразованныеВыражения = РезультатПреобразования.ПреобразованныеВыражения;
		Для Каждого ВычисляемоеПоле Из УточняемыеВычисляемыеПоля Цикл
			ЗаменаВыражения = ПреобразованныеВыражения.Получить(ВычисляемоеПоле.Выражение);
			ВычисляемоеПоле.Выражение = ЗаменаВыражения;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИсточникиСубконто;
	
КонецФункции

Процедура УстановитьОтборДанныхПоШаблонуПроводки(СхемаКомпоновкиДанных, Настройки, ШаблонПроводки, ДополнительныйОтборГруппы, ВариантСовместногоПрименения)
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "ХозяйственнаяОперация", ШаблонПроводки.ХозяйственнаяОперация);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "НастройкаФормированияПроводок", ШаблонПроводки.НастройкаФормированияПроводок);
	
	Если ДополнительныйОтборГруппы <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтборГруппы.Отбор, Настройки.Отбор);
	КонецЕсли;
	
	Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
		ЗначениеОтбора = ШаблонПроводки.ДополнительныйОтбор; //ХранилищеЗначения
		НастройкиОтбора = ЗначениеОтбора.Получить();
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиОтбора.Отбор, Настройки.Отбор);
	КонецЕсли;
	
	Уровень = ШаблонПроводки.Уровень();
	
	Если Уровень = 1 И ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
		ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
			"Обработан",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
			"ГруппаВытеснения",
			ШаблонПроводки.РодительскийШаблонПроводки,
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	Если Уровень = 2 Тогда
		Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все Тогда
			ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"Обработан",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"ГруппаВытеснения",
				ШаблонПроводки.РодительскийШаблонПроводки2,
				ВидСравненияКомпоновкиДанных.НеРавно);
		Иначе
			ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"Обработан",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			ГруппаЭлементовОтбораИ = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИ,
				"ГруппаВытеснения",
				ШаблонПроводки.РодительскийШаблонПроводки,
				ВидСравненияКомпоновкиДанных.НеРавно);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИ,
				"ГруппаВытеснения",
				ШаблонПроводки.РодительскийШаблонПроводки2,
				ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	РезультатЗапроса - РезультатЗапроса, Неопределено - Описание
// 	ИмяРегистра - Строка -
// 	ПараметрыРегистра - см. МеждународныйУчетСерверПовтИсп.ПараметрыРегистра
// Возвращаемое значение:
// 	Булево - Описание
Функция ПроверитьКорректностьПоказателей(РезультатЗапроса, ИмяРегистра, ПараметрыРегистра)

	Показатели				= ПараметрыРегистра.Показатели; // см. МеждународныйУчетСерверПовтИсп.Показатели
	ПоказателиВВалюте		= ПараметрыРегистра.ПоказателиВВалюте;

	КолонкиРезультата = РезультатЗапроса.Колонки;
	МассивОшибок = Новый Массив;
	Для каждого Показатель Из Показатели Цикл
		МассивРесурсов = Показатель.Значение.Ресурсы; // см. ОписаниеРесурсов
		Для Каждого Ресурс Из МассивРесурсов Цикл
			ИмяРесурса = Ресурс.Имя;
			Если КолонкиРезультата.Найти(ИмяРесурса) = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не найден ресурс ""%ИмяРесурса%"" показателя ""%Показатель%"".';
									|en = 'Resource ""%ИмяРесурса%"" of indicator ""%Показатель%"" is not found.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяРесурса%", ИмяРесурса);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			ИсточникВалюты = Ресурс.ИсточникВалюты;
			Если ИсточникВалюты <> "ВалютаУпр" И ИсточникВалюты <> "ВалютаРегл"
				И КолонкиРезультата.Найти(ИсточникВалюты) = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не найден источник валюты ""%ИсточникВалюты%"" показателя ""%Показатель%"".';
									|en = 'Currency source ""%ИсточникВалюты%"" of indicator ""%Показатель%"" is not found.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсточникВалюты%", ИсточникВалюты);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Показатель Из ПоказателиВВалюте Цикл
		ИсточникВалюты = Показатель.Значение.ИсточникВалюты;
		Если ИсточникВалюты <> "ВалютаУпр" И ИсточникВалюты <> "ВалютаРегл"
			И КолонкиРезультата.Найти(ИсточникВалюты) = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не найден источник валюты ""%ИсточникВалюты%"" показателя в валюте ""%Показатель%"".';
								|en = 'Currency source ""%ИсточникВалюты%"" of indicator ""%Показатель%"" in currency is not found.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсточникВалюты%", ИсточникВалюты);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
			МассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = НСтр("ru = 'Обнаружены ошибки показателей регистра ""%ИмяРегистра%"":';
							|en = 'Register ""%ИмяРегистра%"" indicator errors are detected:'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяРегистра%", ИмяРегистра);
		Для каждого Ошибка Из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + Ошибка;
		КонецЦикла;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат Истина;

КонецФункции


// Счет учета.
// 
// Параметры:
//  Данные - СтрокаТаблицыЗначений - Данные
//  ШаблонПроводки - СтрокаТаблицыЗначений - Данные шаблона проводок международного учета
//  ТаблицаУточненияСчетов - ТаблицаЗначений
//  ИсточникиУточненияСчета - Соответствие, Неопределено - Источники уточнения счета
//  ВидДвижения - Строка - Вид движения
// 
// Возвращаемое значение:
//   ПланСчетовСсылка
//  
Функция СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, ВидДвижения)

	Попытка
		Если ВидДвижения = "Дт" Тогда
			ИсточникУточненияСчетаШаблонаПроводки = ШаблонПроводки.ИсточникУточненияСчетаДт;
			ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Дебет;
			СчетПоУмолчанию = ШаблонПроводки.СчетДебетаПоУмолчанию;
		ИначеЕсли ВидДвижения = "Кт" Тогда
			ИсточникУточненияСчетаШаблонаПроводки = ШаблонПроводки.ИсточникУточненияСчетаКт;
			ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит;
			СчетПоУмолчанию = ШаблонПроводки.СчетКредитаПоУмолчанию;
		КонецЕсли;
		
		СчетУчета = СчетПоУмолчанию;
		Если ЗначениеЗаполнено(ИсточникУточненияСчетаШаблонаПроводки) Тогда
			ИсточникУточненияСчета = ИсточникиУточненияСчета.Получить(ИсточникУточненияСчетаШаблонаПроводки);
			ГруппаФинансовогоУчета = Данные[ИсточникУточненияСчета.ИмяПоля];
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);
			ПараметрыОтбора.Вставить("ШаблонПроводки", ШаблонПроводки.ШаблонПроводки);
			ПараметрыОтбора.Вставить("ВидДвижения", ВидДвижения);
			МассивНайденныхСтрок = ТаблицаУточненияСчетов.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				СчетУчета = МассивНайденныхСтрок[0].СчетУчета;
			КонецЕсли;
		КонецЕсли;
	
	Исключение
		ТекстСообщения = Символы.ПС + НСтр("ru = 'При формировании проводки для хозяйственной операции ""%ХозОперация%""
									|по шаблону ""%ШаблонПроводки%""
									|не удалось получить уточнение счета ""%ВидСчета%""
									|по причине';
									|en = 'When generating an accounting entry for the business transaction ""%ХозОперация%""
									|from the ""%ШаблонПроводки%"" template,
									|the ""%ВидСчета%"" account specification was not received.
									|Reason:'") + ":" + Символы.ПС + Символы.Таб + "%Причина%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХозОперация%", ШаблонПроводки.ХозяйственнаяОперация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонПроводки%", ШаблонПроводки.ШаблонПроводки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСчета%", ВидДвижения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru = 'Возможно в шаблоне проводки установлены некорректные настройки уточнения счета.';
					|en = 'Incorrect settings of account specification might have been set in the posting template.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

	Возврат СчетУчета;
	
КонецФункции

// Параметры:
// 	Данные - СтрокаТаблицыЗначений - 
// 	ШаблонПроводки - СтрокаТаблицыЗначений - 
// 	РесурсыРегистра - см. ОписаниеРесурсов
// 	ВалютыМеждународногоУчета - См. МеждународныйУчетОбщегоНазначения.УчетныеВалюты
// Возвращаемое значение:
// 	Структура - Содержит поля:
// 		* Сумма - Число -
// 		* Валюта - СправочникСсылка.Валюты -
Функция ФункциональнаяСумма(Данные, ШаблонПроводки, РесурсыРегистра, ВалютыМеждународногоУчета) Экспорт
	
	Сумма = 0;
	ИмяРесурсаУпр = "";
	ИмяРесурсаРегл = "";
	ОбаРесурсаНайдены = Ложь;
	
	// найдем ресурсы содержащие суммы в валюте упр. и регл.
	Для каждого Ресурс Из РесурсыРегистра Цикл
		Если Ресурс.ИсточникВалюты = "ВалютаУпр" Тогда
			ИмяРесурсаУпр = Ресурс.Имя;
		ИначеЕсли Ресурс.ИсточникВалюты = "ВалютаРегл" Тогда
			ИмяРесурсаРегл = Ресурс.Имя;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяРесурсаУпр) И ЗначениеЗаполнено(ИмяРесурсаРегл) Тогда
			Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
				Сумма = Данные[ИмяРесурсаУпр];
				ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
			Иначе
				Сумма = Данные[ИмяРесурсаРегл];
				ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
			КонецЕсли;
			ОбаРесурсаНайдены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбаРесурсаНайдены Тогда
		Если ЗначениеЗаполнено(ИмяРесурсаУпр) Тогда
			Сумма = Данные[ИмяРесурсаУпр];
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
		ИначеЕсли ЗначениеЗаполнено(ИмяРесурсаРегл) Тогда
			Сумма = Данные[ИмяРесурсаРегл];
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", ?(ШаблонПроводки.ИзменятьЗнакОперации, -Сумма, Сумма));
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Данные - СтрокаТаблицыЗначений - 
// 	ШаблонПроводки - СтрокаТаблицыЗначений - 
// 	РесурсыРегистра - см. ОписаниеРесурсов
// 	ВалютыМеждународногоУчета - См. МеждународныйУчетОбщегоНазначения.УчетныеВалюты
// Возвращаемое значение:
// 	Структура - Содержит поля:
// 		* Сумма - Число -
// 		* Валюта - СправочникСсылка.Валюты -
Функция СуммаПредставления(Данные, ШаблонПроводки, РесурсыРегистра, ВалютыМеждународногоУчета)

	Сумма = 0;
	ИмяРесурсаУпр = "";
	ИмяРесурсаРегл = "";
	РесурсВВалютеНайден = Ложь;
	
	Для каждого Ресурс Из РесурсыРегистра Цикл
		Если Ресурс.ИсточникВалюты = "ВалютаУпр" Тогда
			ИмяРесурсаУпр = Ресурс.Имя;
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
		ИначеЕсли Ресурс.ИсточникВалюты = "ВалютаРегл" Тогда
			ИмяРесурсаРегл = Ресурс.Имя;
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
		Иначе
			ВалютаРесурса = Данные[Ресурс.ИсточникВалюты];
		КонецЕсли;
		Если ВалютаРесурса = ВалютыМеждународногоУчета.Представления Тогда
			Сумма = Данные[Ресурс.Имя];
			РесурсВВалютеНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РесурсВВалютеНайден Тогда
		Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр
			 И ЗначениеЗаполнено(ИмяРесурсаУпр)Тогда
			Сумма = Данные[ИмяРесурсаУпр];
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
		ИначеЕсли ЗначениеЗаполнено(ИмяРесурсаРегл)Тогда
			Сумма = Данные[ИмяРесурсаРегл];
			ВалютаРесурса = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Данные.Организация);
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", ?(ШаблонПроводки.ИзменятьЗнакОперации, -Сумма, Сумма));
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
// 	Данные - СтрокаТаблицыЗначений - 
// 	ШаблонПроводки - СтрокаТаблицыЗначений - 
// 	РесурсыРегистра - см. ОписаниеРесурсов
// 	ИсточникВалюты - Строка - 
// Возвращаемое значение:
// 	Число - Описание
Функция СуммаВВалюте(Данные, ШаблонПроводки, РесурсыРегистра, ИсточникВалюты)

	Сумма = 0;
	Для каждого Ресурс Из РесурсыРегистра Цикл
		Если Ресурс.ИсточникВалюты = ИсточникВалюты Тогда
			Сумма = Данные[Ресурс.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ШаблонПроводки.ИзменятьЗнакОперации, -Сумма, Сумма);

КонецФункции

Функция ЗначениеИзмерения(Данные, ИсточникиИзмерения, ИсточникИзмеренияВШаблонеПроводки)

	ИсточникИзмерения = ИсточникиИзмерения.Получить(ИсточникИзмеренияВШаблонеПроводки);
	Если ИсточникИзмерения <> Неопределено Тогда
		Результат = Данные[ИсточникИзмерения];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСубконто(ВидДвижения, Параметры)
	
	ИмяРегистра = Параметры.ИмяРегистра;
	Данные = Параметры.Данные;
	Проводка = Параметры.Проводка;
	ИсточникиСубконто = Параметры.ИсточникиСубконто;
	СвойстваСчета = Параметры["СвойстваСчета" + ВидДвижения];
	ЗаполнениеСубконтоПоСоответствию = Проводка.ДанныеШаблонаПроводки.ЗаполнениеСубконтоПоСоответствию;
	
	Счет = Проводка["Счет" + ВидДвижения];
	ПоляИсточникаСубконто = ИсточникиСубконто["Субконто" + ВидДвижения];
	ДвижениеНоменклатуры = Проводка.ДанныеШаблонаПроводки["ДвижениеНоменклатуры"+ВидДвижения];
	
	ТипыЗаполненныхПолей = Новый Соответствие;
	ТипыДоступныхПолей = Новый Соответствие;
	Для каждого ПолеИсточникаСубконто Из ПоляИсточникаСубконто Цикл
		Значение = Данные[ПолеИсточникаСубконто];
		Если Значение <> Неопределено Тогда
			ТипыЗаполненныхПолей.Вставить(ПолеИсточникаСубконто, ТипЗнч(Значение));
		Иначе
			МассивТипов = МеждународныйУчетСерверПовтИсп.ТипыАтрибутаРегистра(ИмяРегистра, ПолеИсточникаСубконто);
			ТипыДоступныхПолей.Вставить(ПолеИсточникаСубконто, МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	// Субконто с типом Контрагент на номенклатурных счетах заполняем контрагентом из вида запасов.
	Если НЕ ЗаполнениеСубконтоПоСоответствию Тогда
		Если ИмяРегистра = "ВыручкаИСебестоимостьПродаж"
			ИЛИ ИмяРегистра = "Закупки"
			ИЛИ ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы"
			ИЛИ ИмяРегистра = "ДвиженияНоменклатураНоменклатура" Тогда
			Если ДвижениеНоменклатуры Тогда// подменить значение поля "Контрагент"
					
				Если ТипыЗаполненныхПолей["Хранитель"] <> Неопределено И ЗначениеЗаполнено(Данные.Хранитель) Тогда
					Если ТипыЗаполненныхПолей["Поставщик"] <> Неопределено Тогда
						ТипыЗаполненныхПолей.Удалить("Поставщик");
					КонецЕсли;
					Если ТипыЗаполненныхПолей["Контрагент"] <> Неопределено Тогда
						ТипыЗаполненныхПолей.Удалить("Контрагент");
					КонецЕсли;
					
				ИначеЕсли ТипыЗаполненныхПолей["Поставщик"] <> Неопределено И ЗначениеЗаполнено(Данные.Поставщик) Тогда
					
					Если ТипыЗаполненныхПолей["Хранитель"] <> Неопределено Тогда
						ТипыЗаполненныхПолей.Удалить("Хранитель");
					КонецЕсли;
					Если ТипыЗаполненныхПолей["Контрагент"] <> Неопределено Тогда
						ТипыЗаполненныхПолей.Удалить("Контрагент");
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе// удалить поле "Поставщик"
				Если ТипыЗаполненныхПолей["Поставщик"] <> Неопределено Тогда
					ТипыЗаполненныхПолей.Удалить("Поставщик");
				КонецЕсли;
				Если ТипыЗаполненныхПолей["Хранитель"] <> Неопределено Тогда
					ТипыЗаполненныхПолей.Удалить("Хранитель");
				КонецЕсли;
			КонецЕсли;// ДвижениеНоменклатуры = Истина
		КонецЕсли;// ИмяРегистра = "ВыручкаИСебестоимостьПродаж" ИЛИ ИмяРегистра = "Закупки"
	КонецЕсли;
	
	Для К = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ВидСубконто = СвойстваСчета["ВидСубконто" + К];
		Проводка["ВидСубконто" + ВидДвижения + К] = ВидСубконто;
		ТипСубконто = СвойстваСчета["ВидСубконто" + К + "ТипЗначения"];
		ТипНайден = Ложь;
		Для каждого ТипПоля Из ТипыЗаполненныхПолей Цикл
			Если ТипСубконто.СодержитТип(ТипПоля.Значение) Тогда
				Проводка["Субконто" + ВидДвижения + К] = ?(
					ЗначениеЗаполнено(Данные[ТипПоля.Ключ]),
					Данные[ТипПоля.Ключ],
					ТипСубконто.ПривестиЗначение(Неопределено));
				ТипНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ТипНайден Тогда
			Для каждого ТипПоля Из ТипыДоступныхПолей Цикл
				Для каждого Тип Из ТипПоля.Значение Цикл
					Если ТипСубконто.СодержитТип(Тип) Тогда
						Проводка["Субконто" + ВидДвижения + К] = ?(
							ЗначениеЗаполнено(Данные[ТипПоля.Ключ]),
							Данные[ТипПоля.Ключ],
							ТипСубконто.ПривестиЗначение(Неопределено));
						ТипНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТипНайден Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПроводки(Проводка, ШаблонПроводки, ПараметрыРегистра)

	Если Не ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить счет Дт.';
							|en = 'Cannot fill in Dr account.'");
		МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
		ТекстОшибки = НСтр("ru = 'Не удалось заполнить счет Кт.';
							|en = 'Cannot fill in Cr account.'");
		МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область РегистрацияКОтражению

Процедура ДополнитьТаблицуРегистрацииПоДаннымОборотныхРегистров(Документ, ТаблицаРегистрации)

	ТекстыЗапросов = ТекстыЗапросовПоРегистрам();
	Для каждого КлючИЗначение Из ТекстыЗапросов Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		ДобавитьНаборЗаписейВТаблицу(ТаблицаРегистрации, Документ, ИмяРегистра);
	КонецЦикла;

КонецПроцедуры


Процедура ДобавитьНаборЗаписейВТаблицу(ТаблицаНаборовЗаписей, Документ, ИмяРегистра)
	
	Если ТипЗнч(Документ.Движения) = Тип("Структура")
		И НЕ Документ.Движения.Свойство(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Документ.Движения) = Тип("КоллекцияДвижений")
		И Документ.Движения.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Документ.Движения[ИмяРегистра];
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	ЕстьХозяйственнаяОперация = МетаданныеРегистра.Реквизиты.Найти("ХозяйственнаяОперация") <> Неопределено;
	ЕстьНастройкаХозяйственнойОперации = МетаданныеРегистра.Реквизиты.Найти("НастройкаХозяйственнойОперации") <> Неопределено;
	
	Если ИмяРегистра = "ВыручкаИСебестоимостьПродаж" Тогда
		ДобавитьНаборЗаписейПоРегиструВыручкаИСебестоимостьПродаж(ТаблицаНаборовЗаписей, Документ);
	Иначе
		Для каждого Запись Из НаборЗаписей Цикл
			Если ЕстьХозяйственнаяОперация И НЕ ЗначениеЗаполнено(Запись.ХозяйственнаяОперация) Тогда
				Продолжить;
			КонецЕсли;
			Если ЕстьНастройкаХозяйственнойОперации И НЕ ЗначениеЗаполнено(Запись.НастройкаХозяйственнойОперации) Тогда
				Продолжить;
			КонецЕсли;
			НоваяЗапись = ТаблицаНаборовЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.ДатаОтражения = Запись.Период;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьНаборЗаписейПоРегиструВыручкаИСебестоимостьПродаж(ТаблицаНаборовЗаписей, Документ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДвижений.Период КАК Период,
	|	ДанныеДвижений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ДанныеДвижений
	|ИЗ
	|	&ТаблицаДвижений КАК ДанныеДвижений
	|;
	|ВЫБРАТЬ
	|	ДанныеДвижений.Период КАК Период,
	|	ДанныеДвижений.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ДанныеДвижений.Период КАК ДатаОтражения
	|ИЗ
	|	ДанныеДвижений КАК ДанныеДвижений
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДвижений", Документ.Движения.ВыручкаИСебестоимостьПродаж);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = ТаблицаНаборовЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
	КонецЦикла;

КонецПроцедуры

// Возвращаемое значение:
// 	Массив Из Структура - Описание:
// 	 *Имя - Строка -
//
Функция ОписаниеРесурсов() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Имя"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
