#Область ПрограммныйИнтерфейс

Процедура ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Используются = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемки");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Используются = ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеПриемки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСкладДокументаОснования(Склад, ДокументОснование) Экспорт
	
	СкладОснования      = Справочники.Склады.ПустаяСсылка();
	МетаданныеОснования = ДокументОснование.Метаданные();
	
	Если МетаданныеОснования.Реквизиты.Найти("Склад") <> Неопределено Тогда
		СкладОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладОснования)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОснования, "ЭтоГруппа") Тогда
		
		ИменаТабличныхЧастей = Новый Массив();
		ИменаТабличныхЧастей.Добавить("Товары");
		ИменаТабличныхЧастей.Добавить("Продукция");
		
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МетаданныеТабличнойЧасти = МетаданныеОснования.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда
				Если МетаданныеТабличнойЧасти.Реквизиты.Найти("Склад") <> Неопределено Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Склад
					|ИЗ
					|	Документ." + МетаданныеОснования.Имя + "." + ИмяТабличнойЧасти + "
					|ГДЕ
					|	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|	И НЕ Склад.ЭтоГруппа";
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СкладОснования = Выборка.Склад;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладОснования) Тогда
		Склад = СкладОснования;
	КонецЕсли;
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияПроверки) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияПроверки.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")  Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияПроверки);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ОтборРазмещениеТоваров")
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			
		ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияПроверки, ТипПроверяемогоДокумента);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
//++ НЕ УТ
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
//-- НЕ УТ

//++ НЕ УТКА
		ИЛИ ТипПроверяемогоДокумента = Тип("ДокументСсылка.ЭтапПроизводства2_2")
//-- НЕ УТКА
		Тогда
			
		ОтразитьРезультатыПроверкиИПодбораВДокументеПроизводства(ПараметрыОкончанияПроверки, ТипПроверяемогоДокумента);
		
	КонецЕсли; 
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСверкиКодовМаркировкиТОРГ2ВДокументе(ПараметрыОкончанияПроверки) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияПроверки.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки")Тогда
		
		ОтразитьРезультатыСверкиКодовМаркировкиВАктеПослеОтгрузки(ПараметрыОкончанияПроверки);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпределитьДокументОснованиеСверкиКодов(ДокументСсылка) Экспорт

	ТипПроверямогоДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипПроверямогоДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеОтгрузки") Тогда
		Возврат ОпределитьДокументОснованиеСверкиКодовАктОРасхождениях(ДокументСсылка);
	ИначеЕсли ТипПроверямогоДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		Возврат ОпределитьДокументОснованиеСверкиКодовАктОРасхожденияхПослеПриемки(ДокументСсылка);
	ИначеЕсли ТипПроверямогоДокумента = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		Возврат ОпределитьДокументОснованиеСверкиКодовКорректировкаПриобретения(ДокументСсылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Заполняет товары, принятые без расхождений при загрузке формы результатов сверки по кодам маркировки.
// 
// Параметры:
//  ДокументОснование - ДокументСсылка - документ основание, с которым производится сверка кодов из входящего электронного документа.
//  НоменклатураПоДаннымЭДО - Массив - массив из ОпределяемыйТип.Номенклатура, полученный из входящего электронного документа.
//  ВидыМаркируемойПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС - виды продукции
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//  * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура.
//
Функция ПриОпределенииТаблицыПродукцииПринятойБезРасхождений(ДокументОснование, НоменклатураПоДаннымЭДО, ВидыМаркируемойПродукции) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Документ.%1.Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &ДокументОснование
		|	И &УсловиеМаркируемаяПродукция
		|	И НЕ Товары.Номенклатура В (&НоменклатураПоДаннымЭДО)
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ДокументОснование.Метаданные().Имя);
	УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НоменклатураПоДаннымЭДО", НоменклатураПоДаннымЭДО);
	Запрос.УстановитьПараметр("ДокументОснование",             ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет в переданной таблице данные из документа по значениям штрихкодов в разрезе продукции.
// Используется для получения данных по документу, содержащему расхождения кодов маркировки (акты о расхождениях). 
// 
// Параметры:
// ДокументСсылка - ДокументСсылка - ссылка на документ.
// ТаблицаТоваровЗначенийШтрихкодов - См. СверкаКодовМаркировкиИСМП.ИнициализироватьТаблицуТоваровЗначенийШтрихкодов.
//
Процедура ПриЗаполненииЗначенияШтрихкодовПродукцииПоДокументу(ДокументСсылка, ТаблицаТоваровЗначенийШтрихкодов) Экспорт
	
	ТипПроверямогоДокумента = ТипЗнч(ДокументСсылка);
	Если ТипПроверямогоДокумента = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	АктОРасхожденияхШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		               |	АктОРасхожденияхШтрихкодыУпаковок.Номенклатура КАК Номенклатура,
		               |	АктОРасхожденияхШтрихкодыУпаковок.Характеристика КАК Характеристика,
		               |	&ОпределениеВидаПродукции               КАК ВидПродукции
		               |ИЗ
		               |	Документ.АктОРасхожденияхПослеПриемки КАК ДокументыОснованияАкта
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.ШтрихкодыУпаковокФактЭДО КАК АктОРасхожденияхШтрихкодыУпаковок
		               |		ПО ДокументыОснованияАкта.Ссылка = АктОРасхожденияхШтрихкодыУпаковок.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		               |		ПО АктОРасхожденияхШтрихкодыУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
		               |ГДЕ
		               |	ДокументыОснованияАкта.Ссылка В (&МассивОбъектов)
		               |	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)";
		
		ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(Запрос.Текст, "СправочникНоменклатура");
		
		ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
		ОсобенностьУчета   = Новый Массив;
		Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
		Запрос.УстановитьПараметр("МассивОбъектов", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаТоваровЗначенийШтрихкодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает виды маркируемой продукции по товарам, содержащимся в документе
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, виды маркируемой продукции которого необходимо получить.
//
// Возвращаемое значение:
//   Массив - Массив видов продукции.
Функция ВидыПродукцииДокумента(ДокументСсылка) Экспорт
	
	Если ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "КорректировкаПриобретения")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "АктОРасхожденияхПослеОтгрузки")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "ПриходныйОрдерНаТовары")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "ПриобретениеТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаВидыПродукцииДокумента(ДокументСсылка);
	ИначеЕсли ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "ПриходныйОрдерНаТовары")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "РасходныйОрдерНаТовары") Тогда
		ТекстЗапроса = ТекстЗапросаВидыПродукцииДокумента(ДокументСсылка, "ТоварыПоРаспоряжениям");
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
КонецФункции

// Заполняет переданную таблицу товарами переданного документа с указанием вида продукции.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  ТаблицаМаркируемойПродукции - ТаблицаЗначений - таблица маркируемой продукции документа. (См. ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента())
//
Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ДокументСсылка, ТаблицаМаркируемойПродукции) Экспорт
	
	Если ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "КорректировкаПриобретения")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "АктОРасхожденияхПослеОтгрузки")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "АктОРасхожденияхПослеПриемки")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(ДокументСсылка, "РеализацияТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаМаркируемаяПродукцияДокумента(ДокументСсылка);
	Иначе
		Возврат;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	ТаблицаМаркируемойПродукции = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
//
//Параметры:
//   ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях.
//
//Возвращаемое значение:
//   ДокументСсылка.АктОРасхожденияхПослеПриемки, Неопределено - Акт о расхождениях (если он есть).
//
Функция СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ТипДокументаОснования <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипДокументаОснования <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОРасхождениях.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхождениях
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхТовары
	|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
	|ГДЕ
	|	НЕ АктОРасхождениях.ПометкаУдаления
	|	И АктОРасхожденияхТовары.ДокументОснование = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхождениях.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	АктОРасхождениях.Дата УБЫВ
	|";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

// Заполняет таблицу маркированный товаров по выбранным документам. Требуется обеспечить формирование временной таблицы
//   "МаркированныеТоварыОснований" с колонками по порядку:
//   ДокументОснование,Номенклатура,Характеристика,Шаблон,СпособВводаВОборот,Количество.
// Текст запроса уже содержит выбираемые данные во временную таблицу "ТоварыПредварительно",
// поэтому должен начинаться с конструкции: ОБЪЕДИНИТЬ ВСЕ и для присоединения к существующему тексту запроса.
// Параметры:
//  Запрос - Запрос - запрос, в котором требуется сформировать временную таблицу.
//  ИсточникОснований - Строка - Имя временной таблицы с колонкой "ДокументОснование".
Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИсточникОснований) Экспорт
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	НЕ Товары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Заказ.Ссылка,
	|	Заказ.Организация,
	|	Заказ.Номенклатура,
	|	Заказ.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство),
	|	Заказ.Количество
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Заказ.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Заказ.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Заказ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
//++ НЕ УТ

//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
//-- Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
//-- НЕ УТ

//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	&ОпределениеВидаПродукции,
	|	&ОпределениеШаблонаКодаМаркировкиСУЗ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство),
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|
//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
	|	ТоварыПредварительно.Организация        КАК Организация,
	|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
	|	ТоварыПредварительно.Характеристика     КАК Характеристика,
	|	ТоварыПредварительно.ВидПродукции       КАК ВидПродукции,
	|	ТоварыПредварительно.Шаблон             КАК Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ МаркированныеТоварыОснований
	|ИЗ
	|	ТоварыПредварительно КАК ТоварыПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПредварительно.Ссылка,
	|	ТоварыПредварительно.Организация,
	|	ТоварыПредварительно.Номенклатура,
	|	ТоварыПредварительно.Характеристика,
	|	ТоварыПредварительно.ВидПродукции,
	|	ТоварыПредварительно.Шаблон,
	|	ТоварыПредварительно.СпособВводаВОборот
	|";

	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	ИнтеграцияИСУТ.ОпределитьШаблоныКодовМаркировкиСУЗТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Запрос.Текст = Запрос.Текст + СтрШаблон(ТекстЗапроса, ИсточникОснований);
	
КонецПроцедуры

// Таблица товары для ЭДО.
// 
// Параметры:
//  ИсходнаяТаблица - ТаблицаЗначений - Исходная таблица
//  ИмяКолонкиКоличество - Строка - Имя колонки с учетным количеством
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимоеИКодыОСУ.ТаблицаТоваров
Функция ТаблицаТоварыДляЭДО(ИсходнаяТаблица, ИмяКолонкиКоличество) Экспорт
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Ссылка",         Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	Товары.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЧ Из ИсходнаяТаблица Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.Количество = СтрокаТЧ[ИмяКолонкиКоличество];
		КонецЕсли;
	КонецЦикла;
	Возврат Товары;
	
КонецФункции
// Заполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//   КакДокументаОснования - Булево - в случае использования документа как документа-основания
//
Процедура СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции, КакДокументаОснования = Ложь) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения")
		Или ТипДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ВнутреннееПотребление")
		Или ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров")

//++ НЕ УТ

//++ Устарело_Переработка24
		Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
//-- Устарело_Переработка24
		Или ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя")
//-- НЕ УТ

		Или ТипДокумента = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ);

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СборкаТоваров") Тогда

		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ)
		+"
		|
		|;
		|
		|"
		+ ТекстЗапросаМаркируемойПродукции(Документ, "")
		+ "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	&ТребуетВзвешивания             КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета       КАК ПроизвольнаяЕдиницаУчета,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	ТаблицаТоварыТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	&УсловиеМаркируемаяПродукция
		|	И &УсловиеНефасованнаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	&ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > 0
		|";
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ТаблицаТовары.Номенклатура");

//++ НЕ УТ

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПроизводствоБезЗаказа")

//++ НЕ УТКА

		Или ТипДокумента = Тип("ДокументСсылка.ЭтапПроизводства2_2")

//-- НЕ УТКА

	Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ, "ВыходныеИзделия", "ВыходныеИзделияСерии", "Получатель")
		+"
		|
		|;
		|
		|"
		+ ТекстЗапросаМаркируемойПродукции(Документ, "ПобочныеИзделия", "ПобочныеИзделияСерии", "Получатель")
		+ "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	&ТребуетВзвешивания             КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета       КАК ПроизвольнаяЕдиницаУчета,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	ТаблицаТоварыВыходныеИзделия КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	&УсловиеМаркируемаяПродукция
		|	И &УсловиеНефасованнаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	&ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > 0
		|";
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеИС", "ТаблицаТовары.Номенклатура");
		
//-- НЕ УТ
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЧекККМ")
		Или ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ,,,"Помещение");
	
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		
		ТекстЗапроса = ТекстЗапросаМаркируемойПродукции(Документ,,, "Склад", "КоличествоФакт");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено';
								|en = 'Generation of table of marked products of specified document is not define'");
		
	КонецЕсли;
	
	УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
//++ НЕ УТ
		Или ТипДокумента = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
//-- НЕ УТ

//++ НЕ УТКА
		Или ТипДокумента = Тип("ДокументСсылка.ЭтапПроизводства2_2")
//-- НЕ УТКА
	Тогда
		УстановитьУсловиеПоНефасованнойПродукции(ТекстЗапроса, "ТаблицаТовары", КакДокументаОснования);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("УсловиеНефасованнаяПродукция", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
//   ПутьКПолюНоменклатура - Строка - имя таблицы или поля запроса, содержащее номенклатуру
//   ЗаменяемыйПараметр - Строка - подстрока (параметр) в тексте запроса, которая будет заменена сформированным условием
//
Процедура УстановитьУсловиеПоВидуМаркируемойПродукции(ТекстЗапроса,
	ВидМаркируемойПродукции,
	ПутьКПолюНоменклатура = "СправочникНоменклатура",
	ЗаменяемыйПараметр = "&УсловиеМаркируемаяПродукция") Экспорт
	
	Если ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив")
		Или ТипЗнч(ВидМаркируемойПродукции) = Тип("ФиксированныйМассив") Тогда
		ВидыМаркируемойПродукции = ВидМаркируемойПродукции;
	Иначе
		ВидыМаркируемойПродукции = Новый Массив();
		Если ЗначениеЗаполнено(ВидМаркируемойПродукции) Тогда
			ВидыМаркируемойПродукции.Добавить(ВидМаркируемойПродукции);
		КонецЕсли;
	КонецЕсли;

	ЗначенияОсобенностейУчета = Новый Массив();
	
	Для Каждого ВидПродукции Из ВидыМаркируемойПродукции Цикл
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции);
		Если ОсобенностьУчета <> Неопределено Тогда
			ЗначенияОсобенностейУчета.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.%1)", XMLСтрока(ОсобенностьУчета)));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияОсобенностейУчета.Количество() > 0 Тогда
		УсловиеМаркируемаяПродукция = СтрШаблон("%1.ОсобенностьУчета В (%2)", ПутьКПолюНоменклатура, СтрСоединить(ЗначенияОсобенностейУчета, ","));
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

Процедура УстановитьУсловиеПоНефасованнойПродукции(ТекстЗапроса, ИмяТаблицыТовары = "Товары", КакДокументаОснования = Ложь) Экспорт
	
	ЗаменяемыйПараметр = "&УсловиеНефасованнаяПродукция";
	Если КакДокументаОснования Тогда
		ТекстЗамены =
		СтрШаблон(
			"ВЫБОР
			|	КОГДА НЕ ОписаниеИС.КоличествоВПотребительскойУпаковке ЕСТЬ NULL
			|		ТОГДА ОписаниеИС.КоличествоВПотребительскойУпаковке <> 0
			|	ИНАЧЕ НЕ %1.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
			|	КОНЕЦ", ИмяТаблицыТовары);
	Иначе
		ТекстЗамены =
		СтрШаблон(
			"ОписаниеИС.КоличествоВПотребительскойУпаковке ЕСТЬ NULL
			|	И %1.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В(
			|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
			|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина),
			|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
			|		ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь))
			|	", ИмяТаблицыТовары);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемыйПараметр, ТекстЗамены);
	
КонецПроцедуры

// Дополняет текст запроса для выбора связанных оснований
// Использутеся для определения связанных документов оснований, например:
// 	Формируем заказ поставщику, на основании Заказа на эмиссию, заказываем коды.
// 	На основании заказа поставщику вводим документ Приобритение товара.
// 	На основании Приобритения товара вводим документ Маркировка товаров и печатем новый код маркировки.
// 	Так как основания у документов Заказ на эмиссию и Маркировка товаров разные, - то определение связи между документами
// 	Заказ поставщику и Приобритение.
//
// 	Запрос содержит:
// - Установленный параметр Документ - исходныйй документ
// - Временную таблицу ДокументыОснования - исходный документ основания
// - Временную таблицу ОснованияДляПоискаСвязи - Выбранные документы оснований из исходного документа.
// 	Результат должен содержать одно поле создаваемой временной таблицы СвязанныеОснования,
//	значение которого присутсвует в определяемом типе ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП
//
// Параметры:
// 	ТекстЗапроса - Строка - Текст запроса.
// 	СтандартнаяОбработка - Булево - Призна включения переопределения.
Процедура ДополнитьТекстЗапросаСвязанныхДокументовОснований(ТекстЗапроса, СтандартнаяОбработка) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику КАК ДокументОснование
	|ПОМЕСТИТЬ СвязанныеОснования
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СборкаТоваров.ЗаказНаСборку
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО СборкаТоваров.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	СборкаТоваров.ЗаказНаСборку <> ЗНАЧЕНИЕ(Документ.ЗаказНаСборку.ПустаяСсылка)
//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭтапПроизводства2_2.Распоряжение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияДляПоискаСвязи КАК ДокументыОснования
	|		ПО ЭтапПроизводства2_2.Ссылка = ДокументыОснования.Ссылка
	|ГДЕ
	|	ЭтапПроизводства2_2.Распоряжение <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство2_2.ПустаяСсылка)
//-- НЕ УТКА
	|";
	
КонецПроцедуры

Функция ТекстНадписиПоляРасхожденияПоРезультатамСверкиКодовМаркировкиИСМП(ДокументСсылка) Экспорт
	
	ТекстНадписи = "";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		АктОРасхождениях = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "АктОРасхожденияхПослеПриемкиОснование");
		Если ЗначениеЗаполнено(АктОРасхождениях) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			Запрос.УстановитьПараметр("ПустаяСтрока", "");
			Запрос.Текст = "ВЫБРАТЬ
							|	АктОРасхожденияхПослеПриемкиШтрихкодыУпаковокФактЭДО.ЗначениеШтрихкода КАК ЗначениеШтрихкода
							|ПОМЕСТИТЬ ШтрихкодыАкт
							|ИЗ
							|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.ШтрихкодыУпаковокФактЭДО КАК
							|			АктОРасхожденияхПослеПриемкиШтрихкодыУпаковокФактЭДО
							|		ПО КорректировкаПриобретения.АктОРасхожденияхПослеПриемкиОснование = АктОРасхожденияхПослеПриемкиШтрихкодыУпаковокФактЭДО.Ссылка
							|ГДЕ
							|	КорректировкаПриобретения.Ссылка = &Ссылка
							|
							|ИНДЕКСИРОВАТЬ ПО
							|	ЗначениеШтрихкода
							|;
							|
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ
							|	КорректировкаПриобретенияШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода
							|ПОМЕСТИТЬ ШтрихкодыКорректировка
							|ИЗ
							|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
							|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.ШтрихкодыУпаковок КАК
							|			КорректировкаПриобретенияШтрихкодыУпаковок
							|		ПО КорректировкаПриобретения.Ссылка = КорректировкаПриобретенияШтрихкодыУпаковок.Ссылка
							|ГДЕ
							|	КорректировкаПриобретения.Ссылка = &Ссылка
							|	И КорректировкаПриобретенияШтрихкодыУпаковок.ЗначениеШтрихкода <> &ПустаяСтрока
							|
							|ИНДЕКСИРОВАТЬ ПО
							|	ЗначениеШтрихкода
							|;
							|
							|
							|////////////////////////////////////////////////////////////////////////////////
							|ВЫБРАТЬ ПЕРВЫЕ 1
							|	ЕСТЬNULL(ШтрихкодыКорректировка.ЗначениеШтрихкода, ШтрихкодыАкт.ЗначениеШтрихкода) КАК ЗначениеШтрихкода
							|ИЗ
							|	ШтрихкодыКорректировка КАК ШтрихкодыКорректировка
							|		ПОЛНОЕ СОЕДИНЕНИЕ ШтрихкодыАкт КАК ШтрихкодыАкт
							|		ПО ШтрихкодыКорректировка.ЗначениеШтрихкода = ШтрихкодыАкт.ЗначениеШтрихкода
							|ГДЕ
							|	(ШтрихкодыКорректировка.ЗначениеШтрихкода ЕСТЬ NULL
							|	ИЛИ ШтрихкодыКорректировка.ЗначениеШтрихкода <> &ПустаяСтрока
							|	И ШтрихкодыАкт.ЗначениеШтрихкода ЕСТЬ NULL)";
			
			Результат = Запрос.Выполнить();
			Если Не Результат.Пустой() Тогда
				ТекстНадписи = "Есть расхождения с ТОРГ-2";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

// Возвращает истина, если в табличной части расхождений вариант действий не заполнен (реквизит табличной части "Признан").
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ объект, в котором необходимо проверить обработку пользователем варинатов действий по расхождениям.
//  ИмяТабличнойЧастиШтрихкодыУпаковокРасхождения - Строка - имя табличной части, содержащей данные о расхождениях по кодам маркировки.
//  
// Возвращаемое значение:
//  Булево - Истина, если колонка "Признан" в табличной части расхождений не заполнена.
//
Функция ПриОпределенииНеобходимостиОбработкиКодовМаркировкиВДокументе(ДокументОбъект, ИмяТабличнойЧастиШтрихкодыУпаковокРасхождения) Экспорт
	
	ТребуетсяОбработка = Ложь;
	ПустоеЗначениеПризнан = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ВариантДействийПоРасхождениямКодовМаркировкиИСМП");
	СтруктураОтбора       = Новый Структура("Признан", ПустоеЗначениеПризнан);
	
	Если ДокументОбъект[ИмяТабличнойЧастиШтрихкодыУпаковокРасхождения].НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
		ТребуетсяОбработка = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяОбработка;
	
КонецФункции

// Требуется определить массив ссылок организаций, исключаемых из отображаемого списка в общей форме "ФормаВыбораСпискаОрганизацийИСМП".
// 
// Параметры:
//  СписокОрганизаций - Массив из ОпределяемыйТип.Организация - переопределяемый параметр, массив организаций, исключаемых из списка отбора.
Процедура ПриОпределенииСпискаОрганизацийНедоступныхДляВыбора(СписокОрганизаций) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию") Тогда
		СписокОрганизаций.Добавить(Справочники.Организации.УправленческаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры

#Область Серии

Функция ПараметрыУказанияСерийОтгрузкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ОтгрузкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийПриемкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ПриемкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийВыводИзОборотаИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ВыводИзОборотаИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийВозвратВОборотИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.ВозвратВОборотИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийСписаниеКодовМаркировки(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.СписаниеКодовМаркировкиИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Ложь;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПараметрыУказанияСерийУточнениеСведенийОКодахМаркировкиИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.УточнениеСведенийОКодахМаркировкиИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ПарамерыУказанияСерийПеремещениеМеждуМОДИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий                  = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПеремещениеМеждуМОДИСМП";
	ПараметрыУказанияСерий.ИмяТЧСерии       = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад     = "Отправитель";
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	Если ЗначениеЗаполнено(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]) Тогда
		
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект[ПараметрыУказанияСерий.ИмяПоляСклад], Ложь);
		
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
																		Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
		ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	КонецЕсли;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ТаблицаДанныхДляГенерацииСерий = ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции);
	
	Для Каждого ЭлементМассива Из ДанныеДляГенерации Цикл
		НоваяСтрока = ТаблицаДанныхДляГенерацииСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.Серия = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из ТаблицаДанныхДляГенерацииСерий.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|Таблица." + Колонка.Имя + " КАК " + Колонка.Имя + ",";
	КонецЦикла;
	
	ТекстЗапроса = Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ
	|	ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтТовары.Номенклатура                                    КАК Номенклатура,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)       КАК ИспользоватьСерии,
	|	ЕСТЬNULL(ВладельцыСерии.Ссылка, ВидыНоменклатуры.Ссылка) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ВладельцыСерии.АвтоматическиГенерироватьСерии,
	|		ВидыНоменклатуры.АвтоматическиГенерироватьСерии)      КАК АвтоматическиГенерироватьСерии
	|	//ДополнительныеПоляВидаНоменклатуры
	|ПОМЕСТИТЬ
	|	ВтВидыНоменклатуры
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВладельцыСерии
	|		ПО СправочникНоменклатура.ВладелецСерий = ВладельцыСерии.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ВтТовары.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура                             КАК Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры                КАК ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии              КАК ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии КАК АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование               КАК НоменклатураНаименование,
	|	//ДополнительныеПоляВыборки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.Ссылка,
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ)                                            КАК Серия
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыНоменклатуры
	|		ПО ВтТовары.Номенклатура = ВтВидыНоменклатуры.Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО СерииНоменклатуры.ВидНоменклатуры = ВтВидыНоменклатуры.ВидНоменклатуры
	|		И ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|		//ДополнительныеПоляСвязи
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование
	|	//ДополнительныеПоляГруппировки
	|";
	
	ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаДанныхДляГенерацииСерий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляГенерации = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСерии = ИнтеграцияИСМПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции); 
		ЗаполнитьЗначенияСвойств(ДанныеСерии, Выборка);
		
		Если Не Выборка.ИспользоватьСерии Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 серии не используются.';
													|en = 'Series are not used for the %1 products.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли НЕ Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не предусмотрена автоматическая генерация серий.';
													|en = 'Automatic series generation is not available for the %1 products.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
				
			Попытка
				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Заполнить(Выборка);
				НоваяСерия.Записать();
				
				ДанныеСерии.Серия = НоваяСерия.Ссылка;
				
			Исключение
				
				ДанныеСерии.ЕстьОшибка = Истина;
				ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сгенерировать серию для номенклатуры %1 по причине: %2';
														|en = 'Cannot generate series for the %1 products due to: %2'"),
					Выборка.НоменклатураНаименование,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

			КонецПопытки;
		 
		КонецЕсли;
		
		ДанныеДляГенерации.Добавить(ДанныеСерии); 
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";

	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
	//++ НЕ УТ
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства);
	//-- НЕ УТ
	
	Если ЗначениеЗаполнено(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]) Тогда
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект[ПараметрыУказанияСерий.ИмяПоляСклад], Ложь);
	
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
																		Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
		ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	КонецЕсли;
	
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура ДополнитьПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий, Форма) Экспорт
	
	Если ТипЗнч(ПараметрыУказанияСерий) = Тип("ФиксированнаяСтруктура") Тогда
		ПараметрыУказанияСерий = Новый Структура(ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("ВыходныеИзделия") Тогда
		
		ДополнитьПараметрыУказанияСерийПроизводстваПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий, Форма);
		Возврат;
	КонецЕсли;
	
	//Сборка
	Если ПараметрыУказанияСерий.Свойство("ТЧ") Тогда
		ПараметрыУказанияСерий = ПараметрыУказанияСерий.ТЧ;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.Свойство("Товары") Тогда
		ПараметрыУказанияСерий = ПараметрыУказанияСерий.Товары;
	КонецЕсли;
	
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "";
	ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	ПараметрыУказанияСерий.ИмяПоляПомещение  = Неопределено;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Серия");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерий);
	
	ДобавляемыеРеквизиты = Новый Массив;

	НовыйРеквизит = Новый РеквизитФормы("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Отправитель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладОтправитель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СкладПолучатель", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НазначениеОтправителя", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("НазначениеПолучателя", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов, "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("НоменклатураОприходование", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("ХарактеристикаОприходование", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийНаСкладах", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПереданныхТоваров", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);

	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РасходныйОрдерНаТовары" Тогда
		НовыйРеквизит = Новый РеквизитФормы(
			"Действие", 
			Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку"), "ПодобраннаяМаркируемаяПродукция");
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЕсли;

	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДополнитьПараметрыУказанияСерийПроизводстваПроверкаИПодборПродукцииИСМП(СтруктураПараметрыУказанияСерий, Форма) Экспорт
	
	Для Каждого КлючИЗначение Из СтруктураПараметрыУказанияСерий Цикл
		ПараметрыУказанияСерий = КлючИЗначение.Значение;
		
		ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "";
		ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
		ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
		ПараметрыУказанияСерий.ИмяПоляПомещение  = Неопределено;
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Серия");
		ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
		
		ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения = Новый Массив;
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	НовыйРеквизит = Новый РеквизитФормы("Получатель", Новый ОписаниеТипов("СправочникСсылка.Склады"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Произведено", Новый ОписаниеТипов("Булево"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Отменено", Новый ОписаниеТипов("Булево"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("ДатаПроизводства", Новый ОписаниеТипов("Дата"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов, "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийОтправитель", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы("СтатусУказанияСерийПолучатель", Новый ОписаниеТипов("Число"), "ПодобраннаяМаркируемаяПродукция");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Функция ПараметрыУказанияСерийМаркировкаТоваровИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий        = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ПараметрыУказанияСерий.ПолноеИмяОбъекта               = "Документ.МаркировкаТоваровИСМП";
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ИмяТЧСерии                     = "Товары";
	ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	ПараметрыУказанияСерий.ПодготовкаОрдера               = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Формирует текст запроса для расчета статусов указания серий в обработках проверки и подбора товаров
//
//Параметры:
//   ПараметрыУказанияСерий - Структура - (См. НоменклатураКлиентСервер.ПараметрыУказанияСерий).
//
//Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий) Экспорт
	
	Проверяемыйдокумент = Неопределено;
	ПараметрыУказанияСерий.Свойство("ПроверяемыйДокумент", Проверяемыйдокумент);

	ДопУсловиеКоличество = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары." + ПараметрыУказанияСерий.ИмяПоляКоличество + " КАК Количество,";
	
	Для Каждого ИмяПоля Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	Товары." + ИмяПоля + " КАК " + ИмяПоля + ",";
		ДопУсловиеКоличество = ДопУсловиеКоличество + ?(ПустаяСтрока(ДопУсловиеКоличество), "", " ИЛИ ") + "Товары." + ИмяПоля + " <> 0";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ИЛИ &Склад = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|				КОГДА ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|					ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|					ТОГДА 0
	|				КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 21
	|			КОНЕЦ";
	
	Если ПроверяемыйДокумент = "ЧекККМ" Или ПроверяемыйДокумент = "ЧекККМВозврат" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 14
		|				ИНАЧЕ 13
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 10
		|				ИНАЧЕ 9
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 6
		|						ИНАЧЕ 5
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 8
		|					ИНАЧЕ 7
		|				КОНЕЦ
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|			И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 4
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 2
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|				ТОГДА ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|							КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|								ТОГДА 14
		|							ИНАЧЕ 10
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|							ТОГДА 13
		|						ИНАЧЕ 9
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 6
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 8
		|						ИНАЧЕ 7
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
		|					И &ПриемкаОтПоставщика
		//++ НЕ УТ
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПродукцииИзПроизводства
		|					И &ПриемкаПродукцииИзПроизводства
		//-- НЕ УТ
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
		|					И &ПриемкаПоВозвратуОтКлиента
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
		|					И &ПриемкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
		|					И &ПриемкаПоПрочемуОприходованию
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
		|					И &ПриемкаКомплектующихПослеРазборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
		|					И &ПриемкаСобранныхКомплектов)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
		|					И &ОтгрузкаКлиенту
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
		|					И &ОтгрузкаНаВнутренниеНужды
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
		|					И &ОтгрузкаПоВозвратуПоставщику
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
		|					И &ОтгрузкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
		|					И &ОтгрузкаКомплектующихДляСборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
		|					И &ОтгрузкаКомплектовДляРазборки)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусУказанияСерий";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|		 И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Если ПустаяСтрока(ДопУсловиеКоличество) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", "ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", ДопУсловиеКоличество);
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийБезАнализаСклада(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|		ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА 14
	|		ИНАЧЕ 21
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Проверка при формировании УПД формата 5_02: если участник обмена ИП, то в документе должен быть выбран склад,
// 	по которому может быть получен адрес и код ФИАС/ГАР. Запрет на выбор группы складов.
// 	
// Параметры:
//  Склад - СправочникСсылка.Склады - проверяемый склад
//  УчастникОбмена - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - участник обмена по ЭДО\
//  Источник - ДокументСсылка - ссылка на формируемый документ
//  Отказ - Булево - признак отказа от дальнейшего формирования документа
//  ВыводитьСообщение - Булево - признак вывода сообщения пользователю.
//
Процедура ПроверкаПриФормированииУПД_5_02_НаГруппуСкладов(Склад, УчастникОбмена, Источник, Отказ, ВыводитьСообщение = Истина) Экспорт
	
	ЭтоГруппаСкладов = ТипЗнч(Склад) = Тип("СправочникСсылка.Склады")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа");
	
	ЭтоИндивидуальныйПредприниматель = ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(УчастникОбмена);
	
	Если ЭтоИндивидуальныйПредприниматель И ЭтоГруппаСкладов Тогда
		
		Если ВыводитьСообщение Тогда
			
			ШаблонТекстСообщения = НСтр("ru = 'При отгрузке пивной продукции от индивидуального предпринимателя недопустимо использование группы складов.
									|Текущее значение - %1, требуется указание конкретного склада.';
									|en = 'При отгрузке пивной продукции от индивидуального предпринимателя недопустимо использование группы складов.
									|Текущее значение - %1, требуется указание конкретного склада.'");
			ТекстОшибки = СтрШаблон(ШаблонТекстСообщения, Склад);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник,,, Отказ);
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполнения

#Область ПрикладныеДокументы

#Область МаркировкаТоваровИСМП

//++ НЕ УТ

Процедура ЗаполнитьПроизводствоБезЗаказаНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ГруппировкаЗатрат", Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу);
		ДанныеЗаполнения.Вставить("Организация",       Реквизиты.Организация);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	
	КонецЕсли;
	
	ДокументОбъект.ВыходныеИзделия.Очистить();
	ДокументОбъект.ВыходныеИзделияСерии.Очистить();
	
	ДокументОбъект.ПобочныеИзделия.Очистить();
	ДокументОбъект.ПобочныеИзделияСерии.Очистить();
	
	ДокументОбъект.МатериалыИРаботы.Очистить();
	ДокументОбъект.Трудозатраты.Очистить();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	
	// ВыходныеИзделия
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		
		Если ИспользоватьСерииНоменклатуры И ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.ВыходныеИзделияСерии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПроизводствоБезЗаказа);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ЗаполнитьПрочееОприходованиеТоваровНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСборкуТоваровНаОснованииМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборотаИСМП

Процедура ЗаполнитьСборкуТоваровНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,Выборка);
	
КонецПроцедуры

Процедура ЗаполнитьСписаниеНедостачТоваровНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВнутреннееПотреблениеНаОснованииВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ПакетРезультатовЗапроса = ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДанныеЗаполнения);
	Реквизиты = ПакетРезультатовЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Выборка = ПакетРезультатовЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП

Процедура ЗаполнитьПриобретениеТоваровУслугНаОснованииПриемкиТовароИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Очистить();
	
	Выборка = Реквизиты.ШтрихкодыУпаковок.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВозвратТоваровОтКлиентаНаОснованииПриемкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	Реквизиты = ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДанныеЗаполнения,
			,
			Реквизиты.ЕстьОшибкиПроведен,,);
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты, , "Товары, ХозяйственнаяОперация");
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Очистить();
	
	Выборка = Реквизиты.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ОбработкаЗаполненияДокументаВыводИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВнутреннееПотребление") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииВнутреннегоПотребленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияНедостачТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	//++ НЕ УТ
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	//-- НЕ УТ
	
	//++ НЕ УТКА
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ЗаполнитьВыводИзОборотаИСМПНаОснованииЭтапаПроизводства(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
		
	//-- НЕ УТКА
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаЗаказНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаСборку")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаСборку(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//++ НЕ УТ

	//++ Устарело_Переработка24
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//-- Устарело_Переработка24
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику2_5")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику2_5(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТ

//++ НЕ УТКА
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказНаПроизводство2_2")Тогда
		ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаПроизводство2_2(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТКА
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.МаркировкаТоваровИСМП") Тогда
		ДополнитьЗаказНаЭмиссиюКодовМаркировкиСУЗДаннымиМаркировкиТоваров(ДокументОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаМаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.СборкаТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриобретенияТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПрочегоОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетаТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//++ Устарело_Переработка24
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияОтПереработчика(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	//-- Устарело_Переработка24
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияТоваровОтХранителя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТ

//++ НЕ УТКА
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ЗаполнитьМаркировкаТоваровИСМПНаОснованииЭтапаПроизводства2_2(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
//-- НЕ УТКА
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции)
		И ДокументОбъект.ОперацияНанесенияТолькоДляНаборов
		И Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ДокументОбъект.ВидПродукции) Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
		ДокументОбъект.ОперацияНанесенияТолькоДляНаборов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаВозвратВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЗаполнитьВозвратВОборотИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхВозвратах") Тогда
		ЗаполнитьВозвратВОборотИСМПНаОснованииОтчетаОРозничныхВозвратах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЗаполнитьВозвратВОборотИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремаркировкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПеремаркировкуИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОРозничныхВозвратах") Тогда
		ЗаполнитьПеремаркировкуИСМПНаОснованииОтчетаОРозничныхВозвратах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаОтгрузкаТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаСписаниеКодовМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаУточнениеСведенийОКодахМаркировкиИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДокументаПеремещениеМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОснования = ОпределитьТипОснования(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ЗаполнитьПеремещениеМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#Область МаркировкаОстатков

Процедура ЯвляетсяОснованиемДляМаркировкиОстатков(СсылкаНаДокумент, ЯвляетсяОснованием) Экспорт
	
	Если ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(СсылкаНаДокумент, "ПересчетТоваров")
		Или ИнтеграцияИСУТКлиентСервер.ЭтоДокументПоНаименованию(СсылкаНаДокумент, "ПрочееОприходованиеТоваров") Тогда
		ЯвляетсяОснованием = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Функция ТипРасхожденияИСМПБрак() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Брак;

КонецФункции

Функция ТипРасхожденияИСМПИзлишек() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Излишек;

КонецФункции

Функция ТипРасхожденияИСМПНедостача() Экспорт
	
	Возврат Перечисления.ТипыРасхожденийИСМП.Недостача;

КонецФункции

#Область ЗаполнениеКолонкиРасхожденияПоКодамМаркировки

// Заполняет данные по расхождениям кодов маркировки в переданной коллекции.
//
// Параметры:
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить реквизиты. Обязательные колонки:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры
//    * ИмяКолонкиЗаполнения - ФорматированнаяСтрока - колонка для заполнения данных о расхождениях. Имя определяется в 3м параметре процедуры.
//  ДанныеПоРасхождениям - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, содержащая данные по расхождениям.
//    * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика номенклатуры.
//    * ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения кодов маркировки.
//    * Количество - Число - количество единиц.
//    * Признан - ОпределяемыйТип.ВариантДействийПоРасхождениямКодовМаркировкиИСМП - Обязательная колонка, если 4й параметр Истина. Вариант действия для строки расхождения.
//  ИмяКолонкиЗаполнения - Строка - Имя колонки для заполнения данных о расхождениях.
//  ДоступноСогласованиеРасхождений  -Булево - Истина, если заполняются данные в документе, загруженном по  данным ЭДО ТОРГ-2.
// 
Процедура ЗаполнитьКолонкуРасхожденияПоКодамМаркировки(Товары, ДанныеПоРасхождениям,
													   ИмяКолонкиЗаполнения, ДоступноСогласованиеРасхождений) Экспорт
	
	Если ДоступноСогласованиеРасхождений Тогда
		
		// Акт о расхождениях после реализации
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.ТипРасхождения КАК ТипРасхождения,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.Признан        КАК Признан
		|ПОМЕСТИТЬ Расхождения
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Входящие.Номенклатура   КАК Номенклатура,
		|	Входящие.Характеристика КАК Характеристика,
		|	Входящие.Признан КАК Признан,
		|	СУММА(ВЫБОР
		|			КОГДА Входящие.ТипРасхождения = &ТипРасхожденияИзлишек
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ)              КАК Излишек,
		|	СУММА(ВЫБОР
		|			КОГДА Входящие.ТипРасхождения = &ТипРасхожденияНедостача
		|				ИЛИ Входящие.ТипРасхождения = &ТипРасхожденияБрак
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ)              КАК Недостача
		|ИЗ
		|	Расхождения КАК Входящие
		|
		|СГРУППИРОВАТЬ ПО
		|	Входящие.Номенклатура,
		|	Входящие.Характеристика,
		|	Входящие.Признан";
		
		Запрос.УстановитьПараметр("Таблица", ДанныеПоРасхождениям.Выгрузить());
		
		Запрос.УстановитьПараметр("ТипРасхожденияНедостача", ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача());
		Запрос.УстановитьПараметр("ТипРасхожденияИзлишек",   ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек());
		Запрос.УстановитьПараметр("ТипРасхожденияБрак",      ИнтеграцияИСМП.ТипРасхожденияИСМПБрак());
		
		ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать();
		ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать = ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать();
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		Иначе
			Выборка = Результат.Выбрать();
			
			Для Каждого СтрокаКоллекции из Товары Цикл
				СтрокаКоллекции[ИмяКолонкиЗаполнения] = "";
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика"); 
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("УчитыватьРасхожденияПоСтроке", Истина);
			ПараметрыЗаполнения.Вставить("ЭтоОСУ", Ложь);
			
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
				СтрокиТоваров = Товары.НайтиСтроки(ПараметрыОтбора);
				
				КоличествоИзлишек   = Выборка.Излишек;
				КоличествоНедостача = Выборка.Недостача;
				
				Для Каждого ЗаполняемаяСтрока Из СтрокиТоваров Цикл
					
					Если ЗначениеЗаполнено(ЗаполняемаяСтрока[ИмяКолонкиЗаполнения]) Тогда
						Продолжить;
					КонецЕсли;
					
					ПредставлениеРасхождения = "";
					РасхождениеПоСтроке = ЗаполняемаяСтрока.КоличествоУпаковок - ЗаполняемаяСтрока.КоличествоУпаковокПоДокументу;
					
					Если ЗначениеЗаполнено(Выборка.Признан) Тогда
						Если (Выборка.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
							  И ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана)
							Или (Выборка.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
							     И (ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется
							        Или (ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка
							             И РасхождениеПоСтроке < 0))) Тогда
							
							ПредставлениеРасхождения = СформироватьПредставлениеНедостача(КоличествоНедостача, РасхождениеПоСтроке, ПараметрыЗаполнения);
						ИначеЕсли
							    (Выборка.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
							     И ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится)
							Или (Выборка.Признан = ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
							     И (ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного
							        Или (ЗаполняемаяСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ТребуетсяДопоставка
							             И РасхождениеПоСтроке > 0))) Тогда
							
							ПредставлениеРасхождения = СформироватьПредставлениеИзлишек(КоличествоИзлишек, РасхождениеПоСтроке, ПараметрыЗаполнения);
							
						КонецЕсли;
						
					Иначе
						
						Если ЗаполняемаяСтрока.Действие <> Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана
							И ЗаполняемаяСтрока.Действие <> Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится
							Или Не ДоступноСогласованиеРасхождений Тогда
							ПредставлениеРасхождения = Новый ФорматированнаяСтрока(
								НСтр("ru = '<требуется обработка КМ>.';
									|en = '<process marking codes>.'"),,
								ЦветаСтиля.ЦветТекстаПроблемаГосИС);
						КонецЕсли;
						
					КонецЕсли;
					
					ЗаполняемаяСтрока[ИмяКолонкиЗаполнения] = ПредставлениеРасхождения;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе // Акт о расхождениях после поступления
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура   КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.ТипРасхождения КАК ТипРасхождения,
		|	Таблица.Количество     КАК Количество,
		|	Таблица.ВидУпаковки    КАК ВидУпаковки
		|ПОМЕСТИТЬ Расхождения
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Входящие.Номенклатура   КАК Номенклатура,
		|	Входящие.Характеристика КАК Характеристика,
		|	СУММА(ВЫБОР
		|			КОГДА Входящие.ТипРасхождения = &ТипРасхожденияИзлишек
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Излишек,
		|	СУММА(ВЫБОР
		|			КОГДА Входящие.ТипРасхождения = &ТипРасхожденияНедостача
		|					ИЛИ Входящие.ТипРасхождения = &ТипРасхожденияБрак
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Недостача
		|ИЗ
		|	Расхождения КАК Входящие
		|ГДЕ
		|	Входящие.ВидУпаковки <> ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет)
		|
		|СГРУППИРОВАТЬ ПО
		|	Входящие.Номенклатура,
		|	Входящие.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расхождения.Номенклатура   КАК Номенклатура,
		|	Расхождения.Характеристика КАК Характеристика
		|ИЗ
		|	Расхождения КАК Расхождения
		|ГДЕ
		|	Расхождения.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет)";
		
		Запрос.УстановитьПараметр("Таблица", ДанныеПоРасхождениям.Выгрузить());
		
		Запрос.УстановитьПараметр("ТипРасхожденияНедостача", ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача());
		Запрос.УстановитьПараметр("ТипРасхожденияИзлишек",   ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек());
		Запрос.УстановитьПараметр("ТипРасхожденияБрак",      ИнтеграцияИСМП.ТипРасхожденияИСМПБрак());
		
		Результат = Запрос.ВыполнитьПакет();
		Если Результат[1].Пустой() И  Результат[2].Пустой() Тогда
			Возврат;
		Иначе
			
			Выборка = Результат[1].Выбрать();
			ТоварыОСУ = Результат[2].Выгрузить();
			
			Для Каждого СтрокаКоллекции из Товары Цикл
				СтрокаКоллекции[ИмяКолонкиЗаполнения] = "";
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика");
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("УчитыватьРасхожденияПоСтроке", Истина);
			ПараметрыЗаполнения.Вставить("ЭтоОСУ", Ложь);
			
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Выборка);
				СтрокиТоваров = Товары.НайтиСтроки(ПараметрыОтбора);
				
				КоличествоИзлишек   = Выборка.Излишек;
				КоличествоНедостача = Выборка.Недостача;
				
				КоличествоСтрокКОбработке = СтрокиТоваров.Количество();
				КоличествоСтрокОбработано = 0;
				
				НайденныеСтрокиОСУ = ТоварыОСУ.НайтиСтроки(ПараметрыОтбора);
				ПараметрыЗаполнения.ЭтоОСУ = НайденныеСтрокиОСУ.Количество() > 0;
				
				Для Каждого ЗаполняемаяСтрока Из СтрокиТоваров Цикл
					
					КоличествоСтрокОбработано = КоличествоСтрокОбработано + 1;
					
					Если ЗначениеЗаполнено(ЗаполняемаяСтрока[ИмяКолонкиЗаполнения]) Тогда
						Продолжить;
					КонецЕсли;
					
					ПредставлениеРасхождения = "";
					РасхождениеПоСтроке = ЗаполняемаяСтрока.КоличествоУпаковок - ЗаполняемаяСтрока.КоличествоУпаковокПоДокументу;
					ПараметрыЗаполнения.УчитыватьРасхожденияПоСтроке = КоличествоСтрокОбработано < КоличествоСтрокКОбработке;
					
					Если КоличествоНедостача И КоличествоИзлишек Тогда
						ПредставлениеРасхождения = СформироватьПредставлениеПересорт(КоличествоИзлишек, КоличествоНедостача, РасхождениеПоСтроке, ЗаполняемаяСтрока, ПараметрыЗаполнения);
					ИначеЕсли РасхождениеПоСтроке > 0 Тогда
						ПредставлениеРасхождения = СформироватьПредставлениеИзлишек(КоличествоИзлишек, РасхождениеПоСтроке, ПараметрыЗаполнения);
					Иначе
						ПредставлениеРасхождения = СформироватьПредставлениеНедостача(КоличествоНедостача, РасхождениеПоСтроке, ПараметрыЗаполнения);
					КонецЕсли;
					
					ЗаполняемаяСтрока[ИмяКолонкиЗаполнения] = ПредставлениеРасхождения;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого СтрокаТоварыОСУ Из ТоварыОСУ Цикл
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТоварыОСУ);
			СтрокиТоваров = Товары.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого ЗаполняемаяСтрока Из СтрокиТоваров Цикл
				
				Если ЗначениеЗаполнено(ЗаполняемаяСтрока[ИмяКолонкиЗаполнения])
					Или ((ЗаполняемаяСтрока.КоличествоУпаковок - ЗаполняемаяСтрока.КоличествоУпаковокПоДокументу) = 0
						И СтрокиТоваров.Количество() > 1) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполняемаяСтрока[ИмяКолонкиЗаполнения] = Новый ФорматированнаяСтрока(НСтр("ru = 'ОСУ';
																							|en = 'Volume and grade accounting'"));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли
	
КонецПроцедуры

// Возвращает массив особенностей учета номенклатуры подсистемы
//
// Возвращаемое значение:
//   Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
Функция ОсобенностиУчетаНоменклатуры() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность2025);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхВлажныеБезВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхВлажныеПодконтрольныеВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.РастительныеМасла);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Бакалея);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МоторныеМасла);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия20);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПолимерныеТрубы);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.СладостиИКондитерскиеИзделия);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПечатныеПлаты);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ДезинфицирующиеСредства);
	Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы2025);
	Если ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
		Массив.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Функция ищет по коду элементы в справочнике Классификатор ТН ВЭД.
// Если их нет, то создает элементы справочника в соответствии с классификатором ТН ВЭД ЕАЭС.
// Если кода нет в классификаторе, то создает элемент справочника по данным ГИС МТ.
//
// Параметры:
//  Код - Строка - Строка с кодом классификатора ТН ВЭД.
//  Наименование - Строка - Наименование элемента классификатора ТН ВЭД по данным ГИС МТ.
//
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторТНВЭД - ссылка на элемент классификатора или Неопределено,
//                                        если не удалось определить единицу измерения для нового элемента.
Функция ПриОпределенииСопоставленногоКлассификатораТНВЭД(КодТНВЭД, Наименование) Экспорт
	
	ЭлементСправочника = Справочники.КлассификаторТНВЭД.НайтиСоздатьЭлементКлассификатораТНВЭД(КодТНВЭД);
	
	Если ЭлементСправочника <> Неопределено Тогда
		Возврат ЭлементСправочника;
	КонецЕсли;
	
	ДлинаКода = СтрДлина(КодТНВЭД);
	ЕдиницаИзмеренияКод = Неопределено;
	
	МассивКодовДляОпределенияЕдиницыИзмерения = Новый Массив;
	
	Для Счетчик = 1 По ДлинаКода-1 Цикл
		МассивКодовДляОпределенияЕдиницыИзмерения.Добавить(Лев(КодТНВЭД, Счетчик));
	КонецЦикла;
	
	ТаблицаКлассификатора = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатора(1);
	ТаблицаКлассификатора.Сортировать("Код");
	
	// Определить единицу измерения по данным подобных кодов.
	НачальныйИндекс = 0;
	Для Каждого СтрокаКлассификатора Из ТаблицаКлассификатора Цикл
		
		НайденыСовпаденияВСтроке = Ложь;
		Для Индекс = НачальныйИндекс По МассивКодовДляОпределенияЕдиницыИзмерения.ВГраница() Цикл
			
			Если Лев(СтрокаКлассификатора.Код, Индекс + 1) = МассивКодовДляОпределенияЕдиницыИзмерения[Индекс] Тогда
				ЕдиницаИзмеренияКод = СтрокаКлассификатора.ЕдиницаИзмеренияКод;
				НайденыСовпаденияВСтроке = Истина;
				Если Индекс > НачальныйИндекс Тогда
					НачальныйИндекс = Индекс;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НачальныйИндекс > 0 И Не НайденыСовпаденияВСтроке Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕдиницаИзмеренияКод = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СправочникОбъект = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
		
		СправочникОбъект.Наименование       = Наименование;
		СправочникОбъект.НаименованиеПолное = Наименование;
		СправочникОбъект.Код                = КодТНВЭД;
		
		Соответствие = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ЕдиницаИзмеренияКод);
		
		Если Соответствие <> Неопределено Тогда
			СправочникОбъект.ЕдиницаИзмерения = Соответствие[ЕдиницаИзмеренияКод];
		КонецЕсли;
		
		СправочникОбъект.Записать();
		
		Возврат СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПанельАдминистрированияИСМП

// Предназначения для управления признаком возможности включения / отключения ведения учета МРЦ табачной продукции.
// При заполнении причины - соответствующая доступность изменяется, на форме отображатеся указанная причина.
// Например, можно запретить отключение функции, если ведется учет МРЦ в составе серий или характеристик.
// 
//Параметры:
//  ВозможноВключение              - Булево - Признак возможности включения.
//  ПричинаНевозможностиВключения  - Строка - Причина, по которой невозможно включить учет МРЦ.
//  ВозможноОтключение             - Булево - Признак возможности отключения.
//  ПричинаНевозможностиОтключения - Строка - Причина, по которой невозможно выключить учет МРЦ.
Процедура ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(ВозможноВключение, ПричинаНевозможностиВключения, ВозможноОтключение, ПричинаНевозможностиОтключения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии
		|	И ВидыНоменклатуры.ИспользоватьСерии";
	
	ВидыНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ВидыНоменклатуры.Количество() Тогда
		
		ВозможноОтключение = Ложь;
		
		ДанныеФорматированнойСтроки = Новый Массив();
		ДанныеФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(БиблиотекаКартинок.ИнформацияПоНедоступнымПолям));
		ДанныеФорматированнойСтроки.Добавить(" ");
		ДанныеФорматированнойСтроки.Добавить(НСтр("ru = 'Отключение невозможно.';
													|en = 'Cannot disable.'"));
		ДанныеФорматированнойСтроки.Добавить(" ");
		ДанныеФорматированнойСтроки.Добавить(НСтр("ru = 'Используется в:';
													|en = 'Used in:'"));
		
		Для Каждого ВидНоменклатуры Из ВидыНоменклатуры Цикл
			
			ДанныеФорматированнойСтроки.Добавить(" ");
			ДанныеФорматированнойСтроки.Добавить(
				Новый ФорматированнаяСтрока(Строка(ВидНоменклатуры),,,,
				ПолучитьНавигационнуюСсылку(ВидНоменклатуры)));
			
		КонецЦикла;
		
		ПричинаНевозможностиОтключения = Новый ФорматированнаяСтрока(ДанныеФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

Функция ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Серия",        Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("ЕстьОшибка",   Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции)
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ОписаниеТипаМРЦ = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
		ТаблицаДанных.Колонки.Добавить("МРЦ", ОписаниеТипаМРЦ);
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ТаблицаДанных.Колонки.Добавить("ГоденДо", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции)
	
	ДополнительныеПоляВидаНоменклатуры = "";
	ДополнительныеПоляВыборки          = "";
	ДополнительныеПоляСвязи            = "";
	ДополнительныеПоляГруппировки      = "";
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьМРЦМОТПСерии,
		|		ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии) КАК ИспользоватьМРЦМОТПСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.МРЦ КАК МаксимальнаяРозничнаяЦенаМОТП,
		|	ВтТовары.МРЦ КАК МРЦ,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьМРЦМОТПСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.МаксимальнаяРозничнаяЦенаМОТП = ВтТовары.МРЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.МРЦ";
	
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
	
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьСрокГодностиСерии,
		|		ВидыНоменклатуры.ИспользоватьСрокГодностиСерии) КАК ИспользоватьСрокГодностиСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.ГоденДо КАК ГоденДо,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьСрокГодностиСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.ГоденДо = ВтТовары.ГоденДо
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.ГоденДо";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВидаНоменклатуры", ДополнительныеПоляВидаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВыборки",          ДополнительныеПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляСвязи",            ДополнительныеПоляСвязи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляГруппировки",      ДополнительныеПоляГруппировки);
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеРезультатаПроверкиИПодбораВДокументе

#Область ВходящиеДокументы

// Переносит результат проверки и подбора маркируемой продукции во входящий документ.
//   Общая схема:
//    * Заполняет серии номенклатуры в документе, при необходимости создавая их,
//    * При использовании актов расхождений - создает акт, иначе
//    * Обновляет табличные части "Товары" и "Штрихкоды упаковок" актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияПроверки)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	Если ИспользоватьСерииНоменклатуры Тогда 
		ЗаполнитьСерииВДокументе(ПараметрыОкончанияПроверки, ДокументОбъект);
	КонецЕсли;
	
	Если Не ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях Тогда
		
		ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
			ДокументОбъект,
			ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
			ПараметрыОкончанияПроверки.ВидПродукцииИС);
		
		ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораИСМП(ДокументОбъект, ПараметрыОкончанияПроверки);
		
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ВызватьИсключение ОписаниеОшибки;
			КонецПопытки;
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
	Если ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях Тогда
		
		АктОРасхожденияхПослеПриемкиЛокализация.СоздатьПоРезультатамПроверкиИПодбораИСМП(
			ПараметрыОкончанияПроверки, ДокументОбъект.Проведен);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при заверешении проверки и подбора для отражения данных в документе.
// Предназначена для сохранения связей номенклатуры с GTIN, с учетом коэффициентов групповых упаковок.
// 
// Параметры:
//  ТаблицаОписанияGTIN - см. ПроверкаИПодборПродукцииИСМП.ПустаяТаблицаОписанияGTIN.
Процедура ЗафиксироватьОписаниеGTIN(ТаблицаОписанияGTIN) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаДляЗапроса = ТаблицаОписанияGTIN.Скопировать();
	
	ТаблицаДляЗапроса.Колонки.Добавить("EAN", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры.Измерения.Штрихкод.Тип);
	
	Для Каждого СтрокаТаблицы Из ТаблицаДляЗапроса Цикл
		
		СтрокаТаблицы.EAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТаблицы.GTIN);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN,
	|	ИсходнаяТаблица.GTIN,
	|	ИсходнаяТаблица.Номенклатура,
	|	ИсходнаяТаблица.Характеристика,
	|	ИсходнаяТаблица.Упаковка
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.EAN            КАК Штрихкод,
	|	ИсходнаяТаблица.Номенклатура   КАК Номенклатура,
	|	ИсходнаяТаблица.Характеристика КАК Характеристика,
	|	ИсходнаяТаблица.Упаковка       КАК Упаковка
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ИсходнаяТаблица.EAN = ШтрихкодыНоменклатуры.Штрихкод
	|		ИЛИ ИсходнаяТаблица.GTIN = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ТаблицаДляЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСерииВДокументе(ПараметрыОкончанияСканирования, ДокументОбъект)
	
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	МенеджерДокумента   = Документы[ИмяДокумента];
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, МенеджерДокумента);
	ОсобенностьУчета    = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияСканирования.ВидПродукцииИС);
	
	ЕстьСклад = ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.Серии.Реквизиты.Найти("Склад") <> Неопределено;
	
	ИмяТабличнойЧасти = СтрШаблон("Документ.%1.Серии", ИмяДокумента);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика,
	|	ТаблицаПодобраннойПродукции.Серия,
	|	ТаблицаПодобраннойПродукции.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ ТаблицаПодобраннойПродукции
	|ИЗ
	|	&ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика КАК Характеристика,
	|	ТаблицаПодобраннойПродукции.Количество КАК Количество,
	|	ТаблицаПодобраннойПродукции.Серия КАК Серия
	|ИЗ
	|	ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|ИТОГИ
	|ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьСерии.Серия            КАК Серия,
	|	ТабличнаяЧастьСерии.Количество       КАК Количество,
	|	ТабличнаяЧастьСерии.Номенклатура     КАК Номенклатура,
	|	ТабличнаяЧастьСерии.Характеристика   КАК Характеристика,
	|	&Склад                               КАК Склад,
	|	ТабличнаяЧастьСерии.Назначение       КАК Назначение
	|ИЗ
	|	&ТабличнаяЧастьСерии  КАК ТабличнаяЧастьСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧастьСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|			И СправочникНоменклатура.ОсобенностьУчета <> &ОсобенностьУчета
	|ГДЕ
	|	ТабличнаяЧастьСерии.Ссылка = &ПроверяемыйДокумент";
	
	Если ЕстьСклад Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ТабличнаяЧастьСерии.Склад");
	Иначе
		Запрос.УстановитьПараметр("Склад", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТабличнаяЧастьСерии", ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ТаблицаПодобраннойПродукции", ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ОсобенностьУчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокументОбъект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПоляСвязи = Новый Структура("Склад,Назначение");
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   ВыборкаХарактеристика.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ВыборкаХарактеристика.Характеристика);
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);		
			
			Если НайденныеСтроки.Количество() Тогда
				
				СерияВСтрокеТовары = НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(НайденныеСтроки[0].СтатусУказанияСерий, ПараметрыУказанияСерий);
			Иначе 
				СерияВСтрокеТовары = Истина;
			КонецЕсли;
			
			ТекущаяСтрока = 0;
			МаксимальнаяСтрока = НайденныеСтроки.ВГраница();
			ИспользованоКоличествоПоТекущейСтроке = 0;
			
			ВыборкаДетали = ВыборкаХарактеристика.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
						
				Распределить = ВыборкаДетали.Количество;
				Пока ТекущаяСтрока <= МаксимальнаяСтрока И Распределить > 0 Цикл
					
					СтрокаДополнения = НайденныеСтроки[ТекущаяСтрока];
					Количество = Мин(ВыборкаДетали.Количество, СтрокаДополнения.Количество - ИспользованоКоличествоПоТекущейСтроке);
					
					НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаДополнения);
					НоваяСтрокаСерии.Количество     = Количество;
					НоваяСтрокаСерии.Серия          = ВыборкаДетали.Серия;
					
					ЗаполнитьЗначенияСвойств(ПоляСвязи, СтрокаДополнения);
					
					ИспользованоКоличествоПоТекущейСтроке = ИспользованоКоличествоПоТекущейСтроке + Количество;
					Распределить = Распределить - Количество;
					
					//Разбить строку
					Если СерияВСтрокеТовары Тогда
						Если ИспользованоКоличествоПоТекущейСтроке < СтрокаДополнения.Количество
							И (ЗначениеЗаполнено(ВыборкаДетали.Серия)
								Или ВыборкаДетали.Серия <> СтрокаДополнения.Серия)Тогда
							
							НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,СтрокаДополнения);
							НоваяСтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
							
							Коэффициент = Количество / СтрокаДополнения.Количество;
							СтрокаДополнения.Серия = ВыборкаДетали.Серия;
							СтрокаДополнения.Количество = Количество;
							СтрокаДополнения.КоличествоУпаковок = Коэффициент * СтрокаДополнения.КоличествоУпаковок;
							СтрокаДополнения.СуммаРучнойСкидки = Коэффициент * СтрокаДополнения.СуммаРучнойСкидки;
							СтрокаДополнения.Сумма = Коэффициент * СтрокаДополнения.Сумма;
							СтрокаДополнения.СуммаНДС = Коэффициент * СтрокаДополнения.СуммаНДС;
							СтрокаДополнения.СуммаСНДС = Коэффициент * СтрокаДополнения.СуммаСНДС;
							СтрокаДополнения.СуммаВзаиморасчетов = Коэффициент * СтрокаДополнения.СуммаВзаиморасчетов;
							СтрокаДополнения.СуммаНДСВзаиморасчетов = Коэффициент * СтрокаДополнения.СуммаНДСВзаиморасчетов;
							
							НоваяСтрокаТовары.Количество = НоваяСтрокаТовары.Количество - СтрокаДополнения.Количество;
							НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.КоличествоУпаковок - СтрокаДополнения.КоличествоУпаковок;
							НоваяСтрокаТовары.СуммаРучнойСкидки = НоваяСтрокаТовары.СуммаРучнойСкидки - СтрокаДополнения.СуммаРучнойСкидки;
							НоваяСтрокаТовары.Сумма = НоваяСтрокаТовары.Сумма - СтрокаДополнения.Сумма;
							НоваяСтрокаТовары.СуммаНДС = НоваяСтрокаТовары.СуммаНДС - СтрокаДополнения.СуммаНДС;
							НоваяСтрокаТовары.СуммаСНДС = НоваяСтрокаТовары.СуммаСНДС - СтрокаДополнения.СуммаСНДС;
							НоваяСтрокаТовары.СуммаВзаиморасчетов = НоваяСтрокаТовары.СуммаВзаиморасчетов - СтрокаДополнения.СуммаВзаиморасчетов;
							НоваяСтрокаТовары.СуммаНДСВзаиморасчетов = НоваяСтрокаТовары.СуммаНДСВзаиморасчетов - СтрокаДополнения.СуммаНДСВзаиморасчетов;
							МаксимальнаяСтрока = МаксимальнаяСтрока + 1;
							НайденныеСтроки.Добавить(НоваяСтрокаТовары);
							
						Иначе 
							СтрокаДополнения.Серия = ВыборкаДетали.Серия;
						КонецЕсли;
					ИначеЕсли СтрокаДополнения.Количество = Распределить И СтрокаДополнения.Количество = ВыборкаДетали.Количество Тогда
						СтрокаДополнения.Серия = ВыборкаДетали.Серия;
					КонецЕсли;
					
					Если ИспользованоКоличествоПоТекущейСтроке = СтрокаДополнения.Количество Тогда 
						ТекущаяСтрока = ТекущаяСтрока + 1;
						ИспользованоКоличествоПоТекущейСтроке = 0;
					КонецЕсли;
				КонецЦикла;
				
				Если Распределить > 0 И Не ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
					
					НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, ПоляСвязи);
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, ВыборкаДетали);
					НоваяСтрокаСерии.Количество     = Распределить;
					
					Если СерияВСтрокеТовары Тогда
						Если МаксимальнаяСтрока >= 0 Тогда
							
							СтрокаДополнения = НайденныеСтроки[0];
							
							НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,СтрокаДополнения);
							НоваяСтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
							Коэффициент = Распределить / СтрокаДополнения.Количество;
							НоваяСтрокаТовары.Серия = ВыборкаДетали.Серия;
							НоваяСтрокаТовары.Количество = Распределить;
							НоваяСтрокаТовары.КоличествоУпаковок = Коэффициент * СтрокаДополнения.КоличествоУпаковок;
							НоваяСтрокаТовары.СуммаРучнойСкидки = Коэффициент * СтрокаДополнения.СуммаРучнойСкидки;
							НоваяСтрокаТовары.Сумма = Коэффициент * СтрокаДополнения.Сумма;
							НоваяСтрокаТовары.СуммаНДС = Коэффициент * СтрокаДополнения.СуммаНДС;
							НоваяСтрокаТовары.СуммаСНДС = Коэффициент * СтрокаДополнения.СуммаСНДС;
							НоваяСтрокаТовары.СуммаВзаиморасчетов = Коэффициент * СтрокаДополнения.СуммаВзаиморасчетов;
							НоваяСтрокаТовары.СуммаНДСВзаиморасчетов = Коэффициент * СтрокаДополнения.СуммаНДСВзаиморасчетов;
							
						Иначе
							НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары,НоваяСтрокаСерии);
							НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
							НоваяСтрокаТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ИзменитьДокументПоступленияПоРезультатамПроверкиИПодбораИСМП(ДокументОбъект, ПараметрыОкончанияСканирования) Экспорт
	
	ПровереннаяИПодобраннаяПродукция = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	МенеджерДокумента = Документы[МетаданныеДокумента.Имя];
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, МенеджерДокумента);
	ЕстьСкладВТЧ = МетаданныеДокумента.ТабличныеЧасти.Товары.Реквизиты.Найти("Склад") <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура        КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика      КАК Характеристика,
	|	ПодобраннаяПродукция.КоличествоПодобрано КАК КоличествоПодобрано,
	|	ПодобраннаяПродукция.GTIN                КАК GTIN
	|ПОМЕСТИТЬ ПодобраннаяПродукция
	|ИЗ
	|	&ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|;
	|
	|///////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура               КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика             КАК Характеристика,
	|	СУММА(ПодобраннаяПродукция.КоличествоПодобрано) КАК КоличествоПодобрано
	|ИЗ
	|	ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	ПодобраннаяПродукция.Номенклатура,
	|	ПодобраннаяПродукция.Характеристика
	|;
	|
	|///////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ПодобраннаяПродукция.GTIN        КАК GTIN,
	|	Штрихкоды.Упаковка               КАК Упаковка,
	|	ЕСТЬNULL(&КоэффициентУпаковки,1) КАК Коэффициент
	|ИЗ
	|	ПодобраннаяПродукция КАК ПодобраннаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура  = ПодобраннаяПродукция.Номенклатура
	|		И Штрихкоды.Характеристика = ПодобраннаяПродукция.Характеристика
	|		И (ПодобраннаяПродукция.GTIN = Штрихкоды.Штрихкод
	|			Или ПодобраннаяПродукция.GTIN = ""0"" + Штрихкоды.Штрихкод
	|			Или ПодобраннаяПродукция.GTIN = ""00"" + Штрихкоды.Штрихкод
	|			Или ПодобраннаяПродукция.GTIN = ""000000"" + Штрихкоды.Штрихкод)
	|;
	|
	|///////////////////////////////////////////////////////////////////////////3
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка", "Штрихкоды.Номенклатура"));
	
	ТекстЗапросаОпределениеСклада = ТекстЗапросаОпределениеСклада(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаОпределениеСклада;
	
	Запрос.УстановитьПараметр("ПроверяемыйДокумент",  ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	Запрос.УстановитьПараметр("ПодобраннаяПродукция", ПровереннаяИПодобраннаяПродукция);
	
	Результат = Запрос.ВыполнитьПакет();
	
	МаркируемаяПродукция = Результат[1].Выгрузить();
	УпаковкиПоGTIN       = Результат[2].Выгрузить();
	УпаковкиПоGTIN.Индексы.Добавить("GTIN");
	СкладыДокумента      = Результат[3].Выгрузить().ВыгрузитьКолонку("Склад");
	Склад                = СкладыДокумента[0];
	
	СтруктураДействийОпределениеФактическогоКоличества = СтруктураДействийПриИзмененииСтрокиПоступления(ДокументОбъект);
	СтруктураДействийНоваяСтрока                       = СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект);
	
	Для Каждого СтрокаПодобраннойПродукции Из МаркируемаяПродукция Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",       СтрокаПодобраннойПродукции.Номенклатура);
		Отбор.Вставить("Характеристика",     СтрокаПодобраннойПродукции.Характеристика);
		
		НайденныеСтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(Отбор);
		НайденныеСтрокиПродукция = ПровереннаяИПодобраннаяПродукция.НайтиСтроки(Отбор);
		
		Если НайденныеСтрокиДокумента.Количество() > 0 Тогда
			
			РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект,
			                                            НайденныеСтрокиДокумента,
			                                            НайденныеСтрокиПродукция, 
			                                            СтруктураДействийОпределениеФактическогоКоличества);
			
		ИначеЕсли СтрокаПодобраннойПродукции.КоличествоПодобрано > 0 Тогда
			
			ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект,
				НайденныеСтрокиПродукция,
				УпаковкиПоGTIN,
				ПараметрыОкончанияСканирования.ПроверяемыйДокумент,
				СтруктураДействийНоваяСтрока,
				Склад,
				ЕстьСкладВТЧ);
			
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий);
	
	ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект);
	
КонецПроцедуры

Функция ТекстЗапросаОпределениеСклада(ПроверяемыйДокумент) Экспорт
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслугТовары.Склад КАК Склад
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ ПриобретениеТоваровУслугТовары.Ссылка = &ПроверяемыйДокумент";
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Возврат "ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Склад КАК Склад
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &ПроверяемыйДокумент";
		
	КонецЕсли;
	
КонецФункции

Процедура РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект, НайденныеСтрокиДокумента, 
                                                      НайденныеСтрокиПродукция, СтруктураДействийОпределениеФактическогоКоличества)
	
	ТребуетсяРаспределениеПоСериям = Ложь;
	СерииВОтдельнойТабличнойЧасти  = Ложь;
	КоличествоКРаспределению = 0;
	
	СерииАкта      = Новый Массив;
	СерииПродукции = Новый Массив;
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		Если ЗначениеЗаполнено(НайденнаяСтрокаПродукция.Серия)
			И СерииПродукции.Найти(НайденнаяСтрокаПродукция.Серия) = Неопределено Тогда
			СерииПродукции.Добавить(НайденнаяСтрокаПродукция.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НайденнаяСтрокаДокумент Из НайденныеСтрокиДокумента Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрокаДокумент.Серия)
			И СерииАкта.Найти(НайденнаяСтрокаДокумент.Серия) = Неопределено Тогда
			СерииАкта.Добавить(НайденнаяСтрокаДокумент.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Если СерииПродукции.Количество() > 1 Тогда
		ТребуетсяРаспределениеПоСериям = Истина;
	КонецЕсли;
	
	Если СерииПродукции.Количество() > 0 
		И СерииАкта.Количество() = 0 Тогда
		СерииВОтдельнойТабличнойЧасти = Истина;
	КонецЕсли;
		
	Если Не ТребуетсяРаспределениеПоСериям Тогда
		
		РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
		                                 СерииПродукции, КоличествоКРаспределению, СтруктураДействийОпределениеФактическогоКоличества, 
		                                 СерииВОтдельнойТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

Процедура РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
                                           СерииПродукции, КоличествоКРаспределению, СтруктураДействий, СерииВОтдельнойТабличнойЧасти)
	
	НомерСтроки = 1;
	КоличествоСтрок = НайденныеСтрокиДокумента.Количество();
	
	Для Каждого НайденнаяСтрокаДокумента Из НайденныеСтрокиДокумента Цикл
		
		Если НайденнаяСтрокаДокумента.КоличествоУпаковок < КоличествоКРаспределению Тогда
			
			Если КоличествоСтрок <> НомерСтроки Тогда
				КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаДокумента.КоличествоУпаковок;
			Иначе
				НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
			
				ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			КонецЕсли;
			
		ИначеЕсли НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению Тогда
			
			КоличествоКРаспределению = 0;
			
		Иначе
			
			НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
			КоличествоКРаспределению = 0;
			
			ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
			
	КонецЦикла;
	
	Если СерииВОтдельнойТабличнойЧасти Тогда
		
		КоличествоКРаспределению = 0;
		Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
			КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		КонецЦикла;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",   НайденныеСтрокиПродукция[0].Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", НайденныеСтрокиПродукция[0].Характеристика);
		ПараметрыПоиска.Вставить("Количество",     НайденныеСтрокиПродукция[0].Количество);
		ПараметрыПоиска.Вставить("Серия",          СерииПродукции[0]);
		
		НайденныеСтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(ПараметрыПоиска);
		
		НомерСтроки = 1;
		
		Для Каждого НайденнаяСтрокаСерия Из НайденныеСтрокиСерии Цикл
		
			Если НайденнаяСтрокаСерия.Количество < КоличествоКРаспределению Тогда
				
				Если КоличествоСтрок <> НомерСтроки Тогда
					
					КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаСерия.Количество;
					
				Иначе
					
					НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
					КоличествоКРаспределению = 0;

				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект)
	
	ПараметрыПоиска  = Новый Структура;
	МетаданныеТовары = ДокументОбъект.Метаданные().ТабличныеЧасти["Товары"];
	
	Если МетаданныеТовары.Реквизиты.Найти("Количество") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Количество", 0);
	КонецЕсли;
	
	Если МетаданныеТовары.Реквизиты.Найти("КоличествоУпаковок") <> Неопределено Тогда
		ПараметрыПоиска.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДокументОбъект.Товары.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, НайденныеСтрокиПродукция, УпаковкиПоGTIN,
                                                    ПроверяемыйДокумент, СтруктураДействий, Склад, ЕстьСкладВТЧ)
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
		НоваяСтрока.Номенклатура   = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрока.Характеристика = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрока.Серия          = НайденнаяСтрокаПродукция.Серия;
		НоваяСтрока.Количество     = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		Упаковки = УпаковкиПоGTIN.НайтиСтроки(Новый Структура("GTIN", НайденнаяСтрокаПродукция.GTIN));
		Если Упаковки.Количество() Тогда
			НоваяСтрока.Упаковка = Упаковки[0].Упаковка;
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество / Упаковки[0].Коэффициент;
		Иначе
			НоваяСтрока.КоличествоУпаковок = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий);
		
		Если ЕстьСкладВТЧ Тогда
			НоваяСтрока.Склад = Склад;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяСтрокаПродукция.Серия) Тогда
			НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
			НоваяСтрокаСерии.Номенклатура   = НайденнаяСтрокаПродукция.Номенклатура;
			НоваяСтрокаСерии.Характеристика = НайденнаяСтрокаПродукция.Характеристика;
			НоваяСтрокаСерии.Серия          = НайденнаяСтрокаПродукция.Серия;
			НоваяСтрокаСерии.Количество     = НайденнаяСтрокаПродукция.КоличествоПодобрано;
			
			Если ЕстьСкладВТЧ Тогда
				НоваяСтрокаСерии.Склад      = Склад;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
#Область ДокументыПроизводства

// Переносит результат проверки и подбора маркируемой продукции в документ производства.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок маркируемой продукции,
//    * Обновляет табличную часть "Товары" (при наличии - также "Серии") актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//   Недостача маркируемой продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика / серия).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
//   ТипОбъекта                     - Тип       - Тип проверяемого документа
//
Процедура ОтразитьРезультатыПроверкиИПодбораВДокументеПроизводства(ПараметрыОкончанияПроверки, ТипОбъекта)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
		ПараметрыОкончанияПроверки.ВидПродукцииИС);
	
	Если ТипОбъекта = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииПрочегоОприходованияТоваров(ДокументОбъект, ПараметрыОкончанияПроверки);
//++ НЕ УТ
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхПродукцияСерииПроизводства(ДокументОбъект, ПараметрыОкончанияПроверки);
//-- НЕ УТ

//++ НЕ УТКА
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхПродукцияСерииПроизводства(ДокументОбъект, ПараметрыОкончанияПроверки);
//-- НЕ УТКА
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
				"ИнтеграцияИСМПУТ",УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
					"ИнтеграцияИСМПУТ",УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ВызватьИсключение ОписаниеОшибки;
			КонецПопытки;
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Прочее оприходование товаров
//   * Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ПрочееОприходованиеТоваров - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииПрочегоОприходованияТоваров(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаСерии  = ДокументОбъект.Серии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерии);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Склад = Серии.Склад
	|		И Товары.Назначение = Серии.Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|			И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|			ПО (ОписаниеИС.Номенклатура = Товары.Номенклатура
	|				Или ОписаниеИС.Номенклатура = Товары.Номенклатура.НаборУпаковок)
	|ГДЕ &УсловиеНефасованнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	УстановитьУсловиеПоНефасованнойПродукции(ТекстЗапроса);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Назначение";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиПрочееОприходованиеТоваров(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиПрочееОприходованиеТоваров(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПрочееОприходованиеТоваров);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		ЕстьСтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоиска).Количество()>0;
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
				
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						СтрокаСерии = ТаблицаСерии.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если НЕ СтруктураЗаполнения.Добавление.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", НоваяСтрокаТовары.Склад, ПараметрыУказанияСерий));
					ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	ДокументОбъект.Серии.Загрузить(ТаблицаСерии);
	
КонецПроцедуры

//++ НЕ УТ

// Переносит маркируемую продукцию из формы проверки и подбора в документ Производство без заказа
//   * Удаляет из табличных частей ВыходныеИзделия, ВыходныеИзделияСерии, ПобочныеИзделия, ПобочныеИзделияСерии 
//   отсутствующую в данных проверки маркируемую продукцию.
//   * Добавляет не найденную продукцию в табличные части ВыходныеИзделия, ВыходныеИзделияСерии
//   * Не меняет прочие товарные строки.
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ПроизводствоБезЗаказа - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхПродукцияСерииПроизводства(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары1 = ДокументОбъект.ВыходныеИзделия.Выгрузить();
	ТаблицаСерии1  = ДокументОбъект.ВыходныеИзделияСерии.Выгрузить();
	ТаблицаТовары2 = ДокументОбъект.ПобочныеИзделия.Выгрузить();
	ТаблицаСерии2 = ДокументОбъект.ПобочныеИзделияСерии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары1", ТаблицаТовары1);
	Запрос.УстановитьПараметр("Серии1", ТаблицаСерии1);
	Запрос.УстановитьПараметр("Товары2", ТаблицаТовары2);
	Запрос.УстановитьПараметр("Серии2", ТаблицаСерии2);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Получатель,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары1
	|ИЗ
	|	&Товары1 КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Получатель,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии1
	|ИЗ
	|	&Серии1 КАК Серии
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Получатель,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары2
	|ИЗ
	|	&Товары2 КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Получатель,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии2
	|ИЗ
	|	&Серии2 КАК Серии
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество,
	|	1 КАК НомерТабличнойЧасти
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары1 КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии1 КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Получатель = Серии.Получатель
	|		И Товары.Назначение = Серии.Назначение
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия),
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество),
	|	2
	|ИЗ
	|	Товары2 КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии2 КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Получатель = Серии.Получатель
	|		И Товары.Назначение = Серии.Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.НомерТабличнойЧасти
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|			И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|			ПО (ОписаниеИС.Номенклатура = Товары.Номенклатура
	|				Или ОписаниеИС.Номенклатура = Товары.Номенклатура.НаборУпаковок)
	|ГДЕ
	|	&УсловиеНефасованнаяПродукция
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество,
	|	1
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача,
	|	МАКСИМУМ(Товары.НомерТабличнойЧасти) КАК НомерТабличнойЧасти
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	УстановитьУсловиеПоНефасованнойПродукции(ТекстЗапроса);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Назначение, Получатель";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары1.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары1.Индексы.Добавить(КлючПоиска);
	ТаблицаТовары2.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары2.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии1.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии1.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии1.Индексы.Добавить(КлючСтрокиСерий);
	ТаблицаСерии2.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии2.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии2.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиПроизводство(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиПроизводство(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПрочееОприходованиеТоваров);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;
		НомерТабличнойЧасти = ВыборкаРасхождения.НомерТабличнойЧасти;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		
		Если НомерТабличнойЧасти = 1 Тогда
			ЕстьСтрокиСерий = ТаблицаСерии1.НайтиСтроки(СтруктураПоиска).Количество()>0;
		Иначе
			ЕстьСтрокиСерий = ТаблицаСерии2.НайтиСтроки(СтруктураПоиска).Количество()>0;
		КонецЕсли;
		
		Если НомерТабличнойЧасти = 1 Тогда
			СтрокиТовары = ТаблицаТовары1.НайтиСтроки(СтруктураПоиска);
		Иначе
			СтрокиТовары = ТаблицаТовары2.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			Если НомерТабличнойЧасти = 1 Тогда
				СтрокиТовары = ТаблицаТовары1.НайтиСтроки(СтруктураПоиска);
			Иначе
				СтрокиТовары = ТаблицаТовары2.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				Если НомерТабличнойЧасти = 1 Тогда
					СтрокиСерий = ТаблицаСерии1.НайтиСтроки(СтруктураПоискаСерий);
				Иначе
					СтрокиСерий = ТаблицаСерии2.НайтиСтроки(СтруктураПоискаСерий);
				КонецЕсли;
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					Если НомерТабличнойЧасти = 1 Тогда
						СтрокиСерий = ТаблицаСерии1.НайтиСтроки(СтруктураПоискаСерий);
					Иначе
						СтрокиСерий = ТаблицаСерии2.НайтиСтроки(СтруктураПоискаСерий);
					КонецЕсли;
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						Если НомерТабличнойЧасти = 1 Тогда
							СтрокаСерии = ТаблицаСерии1.Добавить();
						Иначе
							СтрокаСерии = ТаблицаСерии2.Добавить();
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары1.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если НЕ СтруктураЗаполнения.Добавление.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", НоваяСтрокаТовары.Получатель, ПараметрыУказанияСерий));
					ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии1.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары1.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии1.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.ВыходныеИзделия.Загрузить(ТаблицаТовары);
	ДокументОбъект.ВыходныеИзделияСерии.Загрузить(ТаблицаСерии);
	
	ТаблицаТовары = ТаблицаТовары2.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии2.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.ПобочныеИзделия.Загрузить(ТаблицаТовары);
	ДокументОбъект.ПобочныеИзделияСерии.Загрузить(ТаблицаСерии);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область ИсходящиеДокументы

// Переносит результат проверки и подбора маркируемой продукции в исходящий документ.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок маркируемой продукции,
//    * Обновляет табличную часть "Товары" (при наличии - также "Серии") актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//   Недостача маркируемой продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика / серия).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора)
//   ТипОбъекта                     - Тип       - Тип проверяемого документа
//
Процедура ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияПроверки, ТипОбъекта)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
		ПараметрыОкончанияПроверки.ВидПродукцииИС);
	
	Если ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваровУслуг(ДокументОбъект, ПараметрыОкончанияПроверки);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ПараметрыОкончанияПроверки);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыКорректировкиРеализации(ДокументОбъект, ПараметрыОкончанияПроверки);
		ДокументОбъект.ЗаполнитьРасхождения();
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
	 	ОтразитьИзменениеКоличестваВТабличныхЧастяхТоваровСкладскогоДокумента(ДокументОбъект, ПараметрыОкончанияПроверки);
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;

		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ВызватьИсключение ОписаниеОшибки;
			КонецПопытки;
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Реализация товаров услуг
//   * Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.РеализацияТоваровУслуг - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииРеализацииТоваровУслуг(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаСерии  = ДокументОбъект.Серии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерии);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Склад,
	|	Товары.Количество
	|ПОМЕСТИТЬ ТоварыПредварительно
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Склад,
	|	Серии.Количество
	|ПОМЕСТИТЬ СерииПредварительно
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Склад,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительно КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Склад,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	СерииПредварительно КАК Серии
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	Серии.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Склад = Серии.Склад
	|		И Товары.Назначение = Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура   КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика КАК Характеристика,
	|	Упаковки.Ссылка                     КАК Упаковка,
	|	ЕСТЬNULL(&КоэффициентУпаковки,1)    КАК Коэффициент
	|ИЗ
	|	Подобрано КАК ПодобраннаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО (Упаковки.Владелец  = ПодобраннаяПродукция.Номенклатура
	|			Или Упаковки.Владелец  = ПодобраннаяПродукция.Номенклатура.НаборУпаковок)
	|ГДЕ
	|	Упаковки.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент Убыв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Упаковки.Ссылка", "ПодобраннаяПродукция.Номенклатура"));
	
	Пакет = Запрос.ВыполнитьПакет();
	Количество = Пакет.ВГраница();
	
	ВыборкаРасхождения = Пакет[Количество].Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкиТоваров = Пакет[Количество-1].Выгрузить();
	УпаковкиТоваров.Индексы.Добавить("Номенклатура,Характеристика");
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Склад, Назначение";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиРеализацияТоваровУслуг(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиРеализацияТоваровУслуг(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		ЕстьСтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоиска).Количество()>0;
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
				
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						СтрокаСерии = ТаблицаСерии.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				НоваяСтрокаТовары.КоличествоУпаковок = - Недостача;
				
				КлючПоискаУпаковки = Новый Структура("Номенклатура,Характеристика", СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика);
				ВозможныеУпаковки  = УпаковкиТоваров.НайтиСтроки(КлючПоискаУпаковки);
				Количество = - Недостача;
				Для Каждого ВозможнаяУпаковка Из ВозможныеУпаковки Цикл
					Если ВозможнаяУпаковка.Коэффициент > 1 Тогда
						КоличествоУпаковок = Окр(Количество / ВозможнаяУпаковка.Коэффициент, 3);
						Если КоличествоУпаковок = Окр(КоличествоУпаковок) Тогда
							НоваяСтрокаТовары.Упаковка           = ВозможнаяУпаковка.Упаковка;
							НоваяСтрокаТовары.КоличествоУпаковок = КоличествоУпаковок;
							Прервать;
						КонецЕсли;
					ИначеЕсли ВозможнаяУпаковка.Коэффициент < 1 Тогда
						Если Количество = Цел(Количество) Тогда
							Прервать;
						КонецЕсли;
						КоличествоУпаковок = Окр(Количество / ВозможнаяУпаковка.Коэффициент);
						Если Окр(Количество,3) = Окр(КоличествоУпаковок * ВозможнаяУпаковка.Коэффициент, 3) Тогда
							НоваяСтрокаТовары.Упаковка           = ВозможнаяУпаковка.Упаковка;
							НоваяСтрокаТовары.КоличествоУпаковок = КоличествоУпаковок;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	ДокументОбъект.Серии.Загрузить(ТаблицаСерии);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Возврат товаров поставщику.
// Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
// Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект           - ДокументОбъект.ВозвратТоваровПоставщику - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоварыСерииВозвратаТоваровПоставщику(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	ТаблицаСерии  = ДокументОбъект.Серии.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаСерии);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Количество
	|ПОМЕСТИТЬ ТоварыПредварительно
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	Товары.Количество
	|ПОМЕСТИТЬ СерииПредварительно
	|ИЗ
	|	&Серии КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительно КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	СерииПредварительно КАК Серии
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Серия,
	|	Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия) КАК Серия,
	|	ЕСТЬNULL(Серии.Количество, Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСерии
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Назначение = Серии.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	ТоварыСерии КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура   КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка                  КАК Упаковка,
	|	ЕСТЬNULL(&КоэффициентУпаковки,1)    КАК Коэффициент
	|ИЗ
	|	Подобрано КАК ПодобраннаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура  = ПодобраннаяПродукция.Номенклатура
	|		И Штрихкоды.Характеристика = ПодобраннаяПродукция.Характеристика
	|		И Штрихкоды.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент Убыв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка", "Штрихкоды.Номенклатура"));
	
	Пакет = Запрос.ВыполнитьПакет();
	Количество = Пакет.ВГраница();
	
	ВыборкаРасхождения = Пакет[Количество].Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УпаковкиТоваров = Пакет[Количество - 1].Выгрузить();
	УпаковкиТоваров.Индексы.Добавить("Номенклатура,Характеристика");
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	ДополнениеСерий = "Назначение";
	КлючСтрокиСерий = СтрШаблон("%1, %2", КлючПоиска, ДополнениеСерий);

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	ТаблицаСерии.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаСерии.Индексы.Добавить(КлючПоиска);
	ТаблицаСерии.Индексы.Добавить(КлючСтрокиСерий);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	СтруктураПоискаСерий = Новый Структура(КлючСтрокиСерий);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровПоставщику(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиВозвратТоваровПоставщику(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ВозвратТоваровПоставщику);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтруктураПоиска);
		ЕстьСтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоиска).Количество()>0;
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
				СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
				
				Списать = 0;
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						Списать = Списать + СтрокаСерии.Количество;
					КонецЦикла;
				Иначе
					Списать = СтрокаТаблицыТовары.Количество;
				КонецЕсли;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
				Если ЕстьСтрокиСерий Тогда
					Для Каждого СтрокаСерии Из СтрокиСерий Цикл
						СписатьПоСтрокеСерии = Мин(Списать,СтрокаСерии.Количество);
						СтрокаСерии.Количество = СтрокаСерии.Количество - СписатьПоСтрокеСерии;
						СтрокаСерии.Удалить = СтрокаСерии.Количество = 0;
						Списать = Списать - СписатьПоСтрокеСерии;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия) Тогда
					ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТаблицыТовары, ДополнениеСерий);
					СтрокиСерий = ТаблицаСерии.НайтиСтроки(СтруктураПоискаСерий);
					Если СтрокиСерий.Количество() > 0 Тогда
						СтрокаСерии = СтрокиСерий[0];
					Иначе
						СтрокаСерии = ТаблицаСерии.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТаблицыТовары,,"Количество");
					КонецЕсли;
					СтрокаСерии.Количество = СтрокаСерии.Количество - Недостача;
				КонецЕсли;
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				
				КлючПоискаУпаковки = Новый Структура("Номенклатура,Характеристика", СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика);
				ВозможныеУпаковки  = УпаковкиТоваров.НайтиСтроки(КлючПоискаУпаковки);
				Для Каждого ВозможнаяУпаковка Из ВозможныеУпаковки Цикл
					КоличествоУпаковок = Окр(- Недостача / ВозможнаяУпаковка.Коэффициент,3);
					Если КоличествоУпаковок = Окр(КоличествоУпаковок) Тогда
						НоваяСтрокаТовары.Упаковка           = ВозможнаяУпаковка.Упаковка;
						НоваяСтрокаТовары.КоличествоУпаковок = КоличествоУпаковок;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если ЗначениеЗаполнено(НоваяСтрокаТовары.Серия) Тогда
					НоваяСтрокаСерии = ТаблицаСерии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, НоваяСтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	ТаблицаСерии = ТаблицаСерии.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	ДокументОбъект.Серии.Загрузить(ТаблицаСерии);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	СуммаТоваров = ?(ДокументОбъект.ПредусмотренЗалогЗаТару ИЛИ Не ДокументОбъект.ВозвратПринятойМногооборотнойТары,
	ДокументОбъект.Товары.Итог("СуммаСНДС"),
	ДокументОбъект.Товары.Итог("СуммаСНДСБезВозвратнойТары"));
	
	ФинансыКлиентСервер.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(ДокументОбъект, СуммаТоваров);
	
КонецПроцедуры

// Переносит маркируемую продукцию из формы проверки и подбора в документ Корректировка реализации
//   * Удаляет из табличной части Товары отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
//
// Параметры:
//  ДокументОбъект             - ДокументОбъект.КорректировкаРеализации - документ к изменению
//  ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборИСМП.ЗафиксироватьРезультатПроверкиИПодбора).
//
Процедура ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыКорректировкиРеализации(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ПодобраннаяПродукция.Номенклатура   КАК Номенклатура,
	|	ПодобраннаяПродукция.Характеристика КАК Характеристика,
	|	Штрихкоды.Упаковка                  КАК Упаковка,
	|	ЕСТЬNULL(&КоэффициентУпаковки,1)    КАК Коэффициент
	|ИЗ
	|	Подобрано КАК ПодобраннаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО Штрихкоды.Номенклатура  = ПодобраннаяПродукция.Номенклатура
	|		И Штрихкоды.Характеристика = ПодобраннаяПродукция.Характеристика
	|		И Штрихкоды.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент Убыв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка", "Штрихкоды.Номенклатура"));
	
	Пакет = Запрос.ВыполнитьПакет();
	
	УпаковкиТоваров = Пакет[3].Выгрузить();
	УпаковкиТоваров.Индексы.Добавить("Номенклатура,Характеристика");
	ВыборкаРасхождения = Пакет[4].Выбрать();
	
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиКорректировкаРеализации(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиКорректировкаРеализации(ДокументОбъект));
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.КорректировкаРеализации);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = Мин(СтрокаТаблицыТовары.Количество, Недостача);
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
			Иначе
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				
				КлючПоискаУпаковки = Новый Структура("Номенклатура,Характеристика", СтруктураПоиска.Номенклатура, СтруктураПоиска.Характеристика);
				ВозможныеУпаковки  = УпаковкиТоваров.НайтиСтроки(КлючПоискаУпаковки);
				Для Каждого ВозможнаяУпаковка Из ВозможныеУпаковки Цикл
					КоличествоУпаковок = Окр(- Недостача / ВозможнаяУпаковка.Коэффициент,3);
					Если КоличествоУпаковок = Окр(КоличествоУпаковок) Тогда
						НоваяСтрокаТовары.Упаковка           = ВозможнаяУпаковка.Упаковка;
						НоваяСтрокаТовары.КоличествоУпаковок = КоличествоУпаковок;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область АктОРасхождениях

// Переносит результат сверки кодов маркировки продукции в исходящий документ.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок маркируемой продукции,
//    * Обновляет табличную часть "Товары" (при наличии - также "Серии") актуальной маркируемой продукцией,
//    * Перезаписывает документ.
//   Недостача маркируемой продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе или расхождения не признаны - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияПроверки - Структура - (См. СверкаКодовМаркировкиИСМП.ЗафиксироватьРезультатСверки).
//
Процедура ОтразитьРезультатыСверкиКодовМаркировкиВАктеПослеОтгрузки(ПараметрыОкончанияПроверки)
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня,
		Неопределено);
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковокРасхождения(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаРасхожденийКодовМаркировки);
	
	ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыАктОРасхожденияхПриОтгрузке(
		ДокументОбъект,
		ПараметрыОкончанияПроверки.ТаблицаРасхожденийКодовМаркировки);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьИзменениеКоличестваВТабличнойЧастиТоварыАктОРасхожденияхПриОтгрузке(ДокументОбъект, ТаблицаРасхожденийКодовМаркировки)
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Товары.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	МассивДействийНеПризнавать = Новый Массив;
	МассивДействийНеПризнавать.Добавить(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится);
	МассивДействийНеПризнавать.Добавить(Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана);
	Запрос.УстановитьПараметр("НеПризнавать", МассивДействийНеПризнавать);
	
	Запрос.УстановитьПараметр("Подобрано", ТаблицаРасхожденийКодовМаркировки);
	Запрос.УстановитьПараметр("ТипРасхожденияНедостача", ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача());
	Запрос.УстановитьПараметр("ТипРасхожденияИзлишек",   ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек());
	Запрос.УстановитьПараметр("ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать", ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМППризнать());
	Запрос.УстановитьПараметр("ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать", ИнтеграцияИСМПКлиентСервер.ВариантДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать());
		
	Запрос.Текст = "ВЫБРАТЬ
				|	Подобрано.Номенклатура КАК Номенклатура,
				|	Подобрано.Характеристика КАК Характеристика,
				|	Подобрано.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
				|	Подобрано.ТипРасхождения КАК ТипРасхождения,
				|	Подобрано.Признан КАК Признан,
				|	Подобрано.Количество КАК Количество
				|ПОМЕСТИТЬ Подобрано
				|ИЗ
				|	&Подобрано КАК Подобрано
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////1
				|ВЫБРАТЬ
				|	Товары.Номенклатура КАК Номенклатура,
				|	Товары.Характеристика КАК Характеристика,
				|	Товары.Серия КАК Серия,
				|	Товары.Цена КАК Цена,
				|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	Товары.КоличествоУпаковокПоДокументу КАК КоличествоУпаковокПоДокументу,
				|	Товары.Действие КАК Действие
				|ПОМЕСТИТЬ Товары
				|ИЗ
				|	&Товары КАК Товары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////2
				|ВЫБРАТЬ
				|	ТоварыПодобрано.Номенклатура КАК Номенклатура,
				|	ТоварыПодобрано.Характеристика КАК Характеристика,
				|	СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияНедостача
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК КоличествоНедостачаНеПризнать,
				|	СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияНедостача
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК КоличествоНедостачаПризнать,
				|	СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияИзлишек
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК КоличествоИзлишекНеПризнать,
				|	СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияИзлишек
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) КАК КоличествоИзлишекПризнать
				|ИЗ
				|	Подобрано КАК ТоварыПодобрано
				|СГРУППИРОВАТЬ ПО
				|	ТоварыПодобрано.Номенклатура,
				|	ТоварыПодобрано.Характеристика
				|ИМЕЮЩИЕ
				|	СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияНедостача
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) <> 0
				|	ИЛИ СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияНедостача
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) <> 0
				|	ИЛИ СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияИзлишек
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМПНеПризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) <> 0
				|	ИЛИ СУММА(ВЫБОР
				|		КОГДА ТоварыПодобрано.ТипРасхождения = &ТипРасхожденияИзлишек
				|		И ТоварыПодобрано.Признан = &ВариантыДействийПоРасхождениямКодовМаркировкиИСМППризнать
				|			ТОГДА ТоварыПодобрано.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ) <> 0
				|УПОРЯДОЧИТЬ ПО
				|	Номенклатура,
				|	Характеристика
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////3
				|ВЫБРАТЬ
				|	Товары.Номенклатура КАК Номенклатура,
				|	Товары.Характеристика КАК Характеристика,
				|	Товары.Серия КАК Серия,
				|	Товары.Цена КАК Цена,
				|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
				|	Товары.КоличествоУпаковокПоДокументу КАК КоличествоУпаковокПоДокументу,
				|	Товары.Действие КАК Действие
				|ИЗ
				|	Товары КАК Товары
				|ГДЕ
				|	Товары.Действие В (&НеПризнавать)
				|	И &УсловиеМаркируемаяПродукция";
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	УстановитьУсловиеПоВидуМаркируемойПродукции(Запрос.Текст, ВидыПродукцииИСМП, "Товары.Номенклатура");
	
	Результат = Запрос.ВыполнитьПакет();
	ТоварыНеПризнавать = Результат[3].Выгрузить();
	
	СтруктураЗаполнения = Новый Структура("Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиАктОРасхождениях(ДокументОбъект));
		
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.АктОРасхожденияхПослеОтгрузки);
	
	//СвернутьТовары не признавать
	КлючПоиска      = "Номенклатура, Характеристика, Серия, Цена";
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТоварыНеПризнать Из ТоварыНеПризнавать Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоварыНеПризнать);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Обработано = Ложь;
		ТекСтрока = Неопределено;
		Для Каждого СтрокаТовара Из СтрокиТовары Цикл
			Если СтрокаТовара.Действие = СтрокаТоварыНеПризнать.Действие Тогда
				
				ТекСтрока = СтрокаТовара;
				Если Обработано Тогда
					Прервать;
				КонецЕсли;
				
			ИначеЕсли Не Обработано
				И СтрокаТовара.Действие <> Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится
				И СтрокаТовара.Действие <> Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана Тогда
				
				СтрокаТовара.КоличествоУпаковокПоДокументу = СтрокаТовара.КоличествоУпаковокПоДокументу + СтрокаТоварыНеПризнать.КоличествоУпаковокПоДокументу;
				СтрокаТовара.КоличествоПоДокументу = СтрокаТовара.КоличествоУпаковокПоДокументу;
				СтрокаТовара.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок + СтрокаТоварыНеПризнать.КоличествоУпаковок;
				СтрокаТовара.Количество = СтрокаТовара.КоличествоУпаковок;
				
				СтруктураЗаполнения.Изменение.ПроверитьСериюРассчитатьСтатус = Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТовара.Склад, ПараметрыУказанияСерий);
				
				ОбработатьСтрокуТабличнойЧасти(СтрокаТовара, СтруктураЗаполнения.Изменение);
				Обработано = Истина;
				Если ТекСтрока <> Неопределено Тогда 
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		Если ТекСтрока <> Неопределено Тогда
			Если Обработано Тогда
				МассивСтрокКУдалению.Добавить(ТекСтрока);
			Иначе
				ТекСтрока.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка();
				Если ТекСтрока.КоличествоУпаковокПоДокументу > 0 Тогда
					ТекСтрока.ЗаполненоПоРеализации = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаУдалить Из МассивСтрокКУдалению Цикл
		ТаблицаТовары.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	ВыборкаРасхождения = Результат[2].Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
		Возврат;
	КонецЕсли;
	
	//свернуть ранее разбитые строки
	ТаблицаТовары.Свернуть("ТекстовоеОписание, Номенклатура,Характеристика,Серия, Назначение, Упаковка, ВидЦены, Цена,
	                       |СтавкаНДС, ЗаказКлиента, Склад, СтатусУказанияСерий, Реализация, НомерПаспорта,
	                       |КомментарийКлиента, КомментарийМенеджера, ДокументПоступления,Подразделение",
	                       "КоличествоУпаковок, Количество, КоличествоУпаковокПоДокументу, КоличествоПоДокументу,
	                       |Сумма,СуммаНДС,СуммаСНДС, СуммаПоДокументу,СуммаНДСПоДокументу, СуммаСНДСПоДокументу, Действие, ЗаполненоПоРеализации");
	
	КлючПоиска      = "Номенклатура, Характеристика";
	ТаблицаТовары.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		КоличествоИзлишекПризнать     = ВыборкаРасхождения.КоличествоИзлишекПризнать;
		КоличествоИзлишекНеПризнать   = ВыборкаРасхождения.КоличествоИзлишекНеПризнать;
		КоличествоНедостачаПризнать   = ВыборкаРасхождения.КоличествоНедостачаПризнать;
		КоличествоНедостачаНеПризнать = ВыборкаРасхождения.КоличествоНедостачаНеПризнать;
		
		ЕстьПересорт = (КоличествоИзлишекПризнать + КоличествоИзлишекНеПризнать) > 0 И
		               (КоличествоНедостачаПризнать + КоличествоНедостачаНеПризнать) > 0;
		
		Если КоличествоИзлишекПризнать > 0 Или КоличествоИзлишекНеПризнать > 0 Тогда
		
			СтруктураПоискаИзлишек = Новый Структура("Номенклатура, Характеристика, КоличествоПоДокументу");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаИзлишек, ВыборкаРасхождения);
			СтруктураПоискаИзлишек.КоличествоПоДокументу = 0;
			СтрокиТоварыИзлишек = ТаблицаТовары.НайтиСтроки(СтруктураПоискаИзлишек);
			
			РаспределитьСтрокиИзлишекВАктеОРасхождениях(СтрокиТоварыИзлишек, ТаблицаТовары,
				КоличествоИзлишекПризнать, КоличествоИзлишекНеПризнать,
				СтруктураЗаполнения, ПараметрыУказанияСерий, ЕстьПересорт);
			
			Если КоличествоИзлишекПризнать > 0 Или КоличествоИзлишекНеПризнать > 0 Тогда
				//СтруктураПоискаИзлишек = Новый Структура("Номенклатура, Характеристика, Действие");
				//ЗаполнитьЗначенияСвойств(СтруктураПоискаИзлишек, ВыборкаРасхождения);
				//СтруктураПоискаИзлишек.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка();
				СтруктураПоискаИзлишек = Новый Структура("Номенклатура, Характеристика, Обработано");
				ЗаполнитьЗначенияСвойств(СтруктураПоискаИзлишек, ВыборкаРасхождения);
				СтруктураПоискаИзлишек.Обработано = Ложь;
				
				СтрокиТоварыИзлишек = ТаблицаТовары.НайтиСтроки(СтруктураПоискаИзлишек);
				
				РаспределитьСтрокиИзлишекВАктеОРасхождениях(СтрокиТоварыИзлишек, ТаблицаТовары, 
					КоличествоИзлишекПризнать, КоличествоИзлишекНеПризнать, 
					СтруктураЗаполнения, ПараметрыУказанияСерий, ЕстьПересорт);
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоНедостачаПризнать > 0 Или КоличествоНедостачаНеПризнать > 0 Тогда
			СтруктураПоискаНедстача = Новый Структура("Номенклатура, Характеристика, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураПоискаНедстача, ВыборкаРасхождения);
			СтруктураПоискаНедстача.Количество = 0;
			СтрокиТоварыНедостача = ТаблицаТовары.НайтиСтроки(СтруктураПоискаНедстача);
			
			РаспределитьСтрокиНедостачаВАктеОРасхождениях(СтрокиТоварыНедостача, ТаблицаТовары, 
				КоличествоНедостачаПризнать, КоличествоНедостачаНеПризнать, 
				СтруктураЗаполнения, ПараметрыУказанияСерий);
			
			Если КоличествоНедостачаПризнать > 0 Или КоличествоНедостачаНеПризнать > 0 Тогда
				//СтруктураПоискаНедстача = Новый Структура("Номенклатура, Характеристика, Действие");
				//ЗаполнитьЗначенияСвойств(СтруктураПоискаНедстача, ВыборкаРасхождения);
				//СтруктураПоискаНедстача.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка();
				СтруктураПоискаНедстача = Новый Структура("Номенклатура, Характеристика, Обработано");
				ЗаполнитьЗначенияСвойств(СтруктураПоискаНедстача, ВыборкаРасхождения);
				СтруктураПоискаНедстача.Обработано = Ложь;
			
				СтрокиТоварыНедостача = ТаблицаТовары.НайтиСтроки(СтруктураПоискаНедстача);
				
				РаспределитьСтрокиНедостачаВАктеОРасхождениях(СтрокиТоварыНедостача, ТаблицаТовары, 
					КоличествоНедостачаПризнать, КоличествоНедостачаНеПризнать, 
					СтруктураЗаполнения, ПараметрыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоНедостачаНеПризнать > 0 Или КоличествоНедостачаПризнать > 0
			Или КоличествоИзлишекНеПризнать > 0 Или КоличествоИзлишекПризнать > 0 Тогда
			Сообщить("При распределении произошла ошибка, сгруппируйте состав строк в исходном документе");
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ТаблицаТовары);
	
КонецПроцедуры

Процедура РаспределитьСтрокиНедостачаВАктеОРасхождениях(МассивСтрок, ТаблицаТовары,
	КоличествоНедостачаПризнать, КоличествоНедостачаНеПризнать, СтруктураЗаполнения, ПараметрыУказанияСерий)
	
	Для Каждого СтрокаТаблицыТовары Из МассивСтрок Цикл
		СтруктураЗаполнения.Изменение.ПроверитьСериюРассчитатьСтатус = Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТаблицыТовары.Склад, ПараметрыУказанияСерий);
		Если КоличествоНедостачаПризнать > 0 И КоличествоНедостачаНеПризнать > 0 Тогда
			//сначала выделить непризнанные недостачи в новые строки 
			Если СтрокаТаблицыТовары.Количество = 0
				И КоличествоНедостачаНеПризнать >= СтрокаТаблицыТовары.КоличествоПоДокументу Тогда
				//нечего уменьшать в строке, нужно не принимать ее целиком
				СтрокаТаблицыТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоНедостачаНеПризнать = КоличествоНедостачаНеПризнать - СтрокаТаблицыТовары.КоличествоПоДокументу;
				Продолжить;
			Иначе
				УменьшитьКоличествоНедостача(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоНедостачаНеПризнать);
			КонецЕсли;
			//потом признать недостачу
			Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется;
			Если СтрокаТаблицыТовары.Количество = 0
				И КоличествоНедостачаПризнать >= СтрокаТаблицыТовары.КоличествоПоДокументу
				Или (СтрокаТаблицыТовары.КоличествоПоДокументу - СтрокаТаблицыТовары.Количество) = КоличествоНедостачаПризнать Тогда  
				//нечего уменьшать в строке, нужно не принимать ее целиком
				СтрокаТаблицыТовары.Действие = Действие;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоНедостачаПризнать = КоличествоНедостачаПризнать - СтрокаТаблицыТовары.КоличествоПоДокументу;
			Иначе
				УменьшитьКоличествоНедостача(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоНедостачаПризнать, Действие);
			КонецЕсли;

		ИначеЕсли КоличествоНедостачаНеПризнать > 0 Тогда //не признаем
			Если СтрокаТаблицыТовары.Количество = 0
				И КоличествоНедостачаНеПризнать >= СтрокаТаблицыТовары.КоличествоПоДокументу
				Или (СтрокаТаблицыТовары.КоличествоПоДокументу - СтрокаТаблицыТовары.Количество) = КоличествоНедостачаНеПризнать Тогда 
				//нечего уменьшать в строке, нужно не принимать ее целиком
				СтрокаТаблицыТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоНедостачаНеПризнать = КоличествоНедостачаНеПризнать - СтрокаТаблицыТовары.КоличествоПоДокументу;
			Иначе
				УменьшитьКоличествоНедостача(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоНедостачаНеПризнать);
			КонецЕсли;
			
		ИначеЕсли КоличествоНедостачаПризнать > 0 Тогда //признаем
			Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ДопоставкаНеТребуется;
			Если СтрокаТаблицыТовары.Количество = 0
				И КоличествоНедостачаПризнать >= СтрокаТаблицыТовары.КоличествоПоДокументу
				Или (СтрокаТаблицыТовары.КоличествоПоДокументу - СтрокаТаблицыТовары.Количество) = КоличествоНедостачаПризнать Тогда 
				СтрокаТаблицыТовары.Действие = Действие;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоНедостачаПризнать = КоличествоНедостачаПризнать - СтрокаТаблицыТовары.КоличествоПоДокументу;
			Иначе
				УменьшитьКоличествоНедостача(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоНедостачаПризнать, Действие);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура РаспределитьСтрокиИзлишекВАктеОРасхождениях(МассивСтрок, ТаблицаТовары,
	КоличествоИзлишекПризнать, КоличествоИзлишекНеПризнать, СтруктураЗаполнения, ПараметрыУказанияСерий, ЕстьПересорт)
	
	Для Каждого СтрокаТаблицыТовары Из МассивСтрок Цикл
		СтруктураЗаполнения.Изменение.ПроверитьСериюРассчитатьСтатус = Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТаблицыТовары.Склад, ПараметрыУказанияСерий);
		Если КоличествоИзлишекПризнать > 0 И КоличествоИзлишекНеПризнать > 0 Тогда
			//сначала выделить непризнанный излишек в новые строки 
			Если СтрокаТаблицыТовары.КоличествоПоДокументу = 0
				И КоличествоИзлишекНеПризнать >= СтрокаТаблицыТовары.Количество Тогда
				//нечего уменьшать в строке, нужно не принимать ее целиком
				СтрокаТаблицыТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоИзлишекНеПризнать = КоличествоИзлишекНеПризнать - СтрокаТаблицыТовары.Количество;
				Продолжить;
			Иначе
				УменьшитьКоличествоИзлишек(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоИзлишекНеПризнать);
			КонецЕсли;
			//потом признать излишек
			Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного;
			Если СтрокаТаблицыТовары.КоличествоПоДокументу = 0
				И КоличествоИзлишекПризнать >= СтрокаТаблицыТовары.Количество
				Или (НЕ ЕстьПересорт
					И (СтрокаТаблицыТовары.Количество - СтрокаТаблицыТовары.КоличествоПоДокументу) = КоличествоИзлишекПризнать) Тогда 
				СтрокаТаблицыТовары.Действие = Действие;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоИзлишекПризнать = КоличествоИзлишекПризнать - СтрокаТаблицыТовары.Количество;
			Иначе
				УменьшитьКоличествоИзлишек(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоИзлишекПризнать, Действие);
			КонецЕсли;

		ИначеЕсли КоличествоИзлишекНеПризнать > 0 Тогда //не признаем
			Если СтрокаТаблицыТовары.КоличествоПоДокументу = 0
				И КоличествоИзлишекНеПризнать >= СтрокаТаблицыТовары.Количество
				ИЛИ (НЕ ЕстьПересорт
					 И (СтрокаТаблицыТовары.Количество - СтрокаТаблицыТовары.КоличествоПоДокументу) = КоличествоИзлишекНеПризнать) Тогда 
				//нечего уменьшать в строке, нужно не принимать ее целиком
				СтрокаТаблицыТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоИзлишекНеПризнать = КоличествоИзлишекНеПризнать - СтрокаТаблицыТовары.Количество;
			Иначе
				УменьшитьКоличествоИзлишек(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоИзлишекНеПризнать);
			КонецЕсли;
			
		ИначеЕсли КоличествоИзлишекПризнать > 0 Тогда //признаем
			Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПокупкаПерепоставленного;
			Если СтрокаТаблицыТовары.КоличествоПоДокументу = 0
				И КоличествоИзлишекПризнать >= СтрокаТаблицыТовары.Количество
				Или (НЕ ЕстьПересорт
					 И (СтрокаТаблицыТовары.Количество - СтрокаТаблицыТовары.КоличествоПоДокументу) = КоличествоИзлишекПризнать) Тогда 
				СтрокаТаблицыТовары.Действие = Действие;
				СтрокаТаблицыТовары.Обработано = Истина;
				КоличествоИзлишекПризнать = КоличествоИзлишекПризнать - СтрокаТаблицыТовары.Количество;
			Иначе
				УменьшитьКоличествоИзлишек(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоИзлишекПризнать, Действие);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УменьшитьКоличествоНедостача(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоНедостача, Действие = Неопределено)
	КоличествоУменьшить = Мин(СтрокаТаблицыТовары.КоличествоПоДокументу, КоличествоНедостача);
	
	СтрокаТаблицыТовары.КоличествоПоДокументу = СтрокаТаблицыТовары.КоличествоПоДокументу - КоличествоУменьшить;
	СтрокаТаблицыТовары.КоличествоУпаковокПоДокументу = СтрокаТаблицыТовары.КоличествоУпаковокПоДокументу - КоличествоУменьшить;
	
	НоваяСтрокаТовары = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицыТовары);
	НоваяСтрокаТовары.КоличествоПоДокументу = КоличествоУменьшить;
	НоваяСтрокаТовары.КоличествоУпаковокПоДокументу = КоличествоУменьшить;
	НоваяСтрокаТовары.Количество = 0;
	НоваяСтрокаТовары.КоличествоУпаковок = 0;
	
	ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Изменение);
	Если Действие = Неопределено Тогда
		НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.НедостачаНеПризнана;
	Иначе
		НоваяСтрокаТовары.Действие = Действие;
	КонецЕсли;
	НоваяСтрокаТовары.Обработано = Истина;
	
	ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
	КоличествоНедостача = КоличествоНедостача - КоличествоУменьшить;
	
КонецПроцедуры

Процедура УменьшитьКоличествоИзлишек(СтрокаТаблицыТовары, ТаблицаТовары, СтруктураЗаполнения, КоличествоИзлишек, Действие = Неопределено)
	КоличествоУменьшить = Мин(СтрокаТаблицыТовары.Количество, КоличествоИзлишек);
	
	СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - КоличествоУменьшить;
	СтрокаТаблицыТовары.КоличествоУпаковок = СтрокаТаблицыТовары.КоличествоУпаковок - КоличествоУменьшить;
	
	НоваяСтрокаТовары = ТаблицаТовары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицыТовары);
	ЗаполнитьСвойстваНовойСтрокиАкт(НоваяСтрокаТовары);
	НоваяСтрокаТовары.Количество = КоличествоУменьшить;
	НоваяСтрокаТовары.КоличествоУпаковок = КоличествоУменьшить;
	
	НоваяСтрокаТовары.КоличествоПоДокументу = 0;
	НоваяСтрокаТовары.КоличествоУпаковокПоДокументу = 0;
	
	ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Изменение);
	Если Действие = Неопределено Тогда
		НоваяСтрокаТовары.Действие = Перечисления.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПерепоставленноеДарится;
	Иначе
		НоваяСтрокаТовары.Действие = Действие;
	КонецЕсли;
	НоваяСтрокаТовары.Обработано = Истина;
	
	ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
	КоличествоИзлишек = КоличествоИзлишек - КоличествоУменьшить;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваНовойСтрокиАкт(НоваяСтрока)
	
	НоваяСтрока.СуммаНДСПоДокументу           = 0;
	НоваяСтрока.СуммаПоДокументу              = 0;
	НоваяСтрока.СуммаСНДСПоДокументу          = 0;
	НоваяСтрока.Действие                      = ПредопределенноеЗначение("Перечисление.ВариантыДействийПоРасхождениямВАктеПослеОтгрузки.ПустаяСсылка");
	НоваяСтрока.КомментарийКлиента            = "";
	НоваяСтрока.КомментарийМенеджера          = "";
	НоваяСтрока.ЗаполненоПоРеализации         = Ложь;
	НоваяСтрока.Назначение                    = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
КонецПроцедуры

#КонецОбласти

#Область ТабличнаяЧастьШтрихкодыУпаковок

// Переносит таблицу штрихкодов верхнего уровня в документ
//   * Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие (содержащие внутри хотя бы 1 шт 
//   маркируемой продукции) штрихкоды верхнего уровня.
//   * Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды.
//   * Не меняет прочие штрихкоды.
// 
// Параметры:
//   ДокументОбъект                  - ДокументОбъект  - документ для изменения
//   ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
//   ВидПродукцииИС                  - ПеречислениеСсылка.ВидыПродукцииИС - обрабатываемый вид продукции
//
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня, ВидПродукцииИС) Экспорт
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Штрихкод.Имя = "ЗначениеШтрихкода";
	НайденныеСтроки              = Новый Соответствие();
	МетаданныеОбъекта            = ДокументОбъект.Метаданные();
	ПродолжитьПоискПоЗначению    = Ложь;
	ПоляИсключенийПриЗаполнении  = Новый Соответствие();
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукцииИС, Истина)
		И (МетаданныеОбъекта.ТабличныеЧасти.ШтрихкодыУпаковок.Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено) Тогда
		ПродолжитьПоискПоЗначению = Истина
	КонецЕсли;
	
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ШтрихкодУпаковки", ЭлементВНаличии.ШтрихкодУпаковки);
		ПоискСтрок = ДокументОбъект.ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискСтрок.Количество() Тогда
			НайденныеСтроки.Вставить(ЭлементВНаличии, ПоискСтрок[0]);
			Если ПродолжитьПоискПоЗначению Тогда
				ПоляИсключенийПриЗаполнении.Вставить(ЭлементВНаличии, "ЗначениеШтрихкода");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ПродолжитьПоискПоЗначению Тогда
			
			НормализованныйКодМаркировки = ЭлектронноеВзаимодействиеИСМП.КодМаркировкиДляПередачиУПД(
				Строка(ЭлементВНаличии.ШтрихкодУпаковки), ВидПродукцииИС);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЗначениеШтрихкода", НормализованныйКодМаркировки);
			ПоискСтрок = ДокументОбъект.ШтрихкодыУпаковок.НайтиСтроки(СтруктураПоиска);
			
			Если ПоискСтрок.Количество() Тогда
				НайденныеСтроки.Вставить(ЭлементВНаличии, ПоискСтрок[0]);
				ПоляИсключенийПриЗаполнении.Вставить(ЭлементВНаличии, "ЗначениеШтрихкода");
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаШтрихкодДокумента = ДокументОбъект.ШтрихкодыУпаковок.Добавить();
		НайденныеСтроки.Вставить(ЭлементВНаличии, СтрокаШтрихкодДокумента);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НайденныеСтроки Цикл
		
		ЭлементВНаличии         = КлючИЗначение.Ключ;
		СтрокаШтрихкодДокумента = КлючИЗначение.Значение;
		
		ЗаполнитьЗначенияСвойств(СтрокаШтрихкодДокумента, ЭлементВНаличии,, ПоляИсключенийПриЗаполнении[ЭлементВНаличии]);
		
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива <> Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодыСодержащиеМаркируемуюПродукцию = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, ВидПродукцииИС);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеМаркируемуюПродукцию Цикл
		СтрокаТЧ = ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки");
		Если СтрокаТЧ <> Неопределено Тогда
			ДокументОбъект.ШтрихкодыУпаковок.Удалить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковокРасхождения(ДокументОбъект, ШтрихкодыУпаковокРасхождения)
	
	ДокументОбъект.ШтрихкодыУпаковокРасхождения.Загрузить(ШтрихкодыУпаковокРасхождения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаМаркируемойПродукции(ДокументСсылка,
	ИмяТабЧастиТовары = Неопределено,
	ИмяТабЧастиСерии = Неопределено,
	ИмяПоляСклад = Неопределено,
	ИмяПоляКоличество = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	Если ИмяТабЧастиСерии = Неопределено Тогда
		ИмяТабЧастиСерии = "Серии";
	КонецЕсли;
	
	Если ИмяПоляСклад = Неопределено Тогда
		ИмяПоляСклад = "Склад";
	КонецЕсли;
	
	Если ИмяПоляКоличество = Неопределено Тогда
		ИмяПоляКоличество = "Количество";
	КонецЕсли;
	
	Если ИмяТабЧастиТовары = "" Тогда
		СкладВТабличнойЧастиТовары = Ложь;
	ИначеЕсли МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
		СкладВТабличнойЧастиТовары = Ложь;
	Иначе
		СкладВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если ИмяТабЧастиТовары = "" Тогда
		НазначениеВТабличнойЧастиТовары = Ложь;
	ИначеЕсли МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти("Назначение") = Неопределено Тогда
		НазначениеВТабличнойЧастиТовары = Ложь;
	Иначе
		НазначениеВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиСерии) = Неопределено Тогда
		ЕстьТабличнаяЧастьСерии        = Ложь;
		СкладВТабличнойЧастиСерии      = Ложь;
		НазначениеВТабличнойЧастиСерии = Ложь;
	Иначе
		ЕстьТабличнаяЧастьСерии = Истина;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
			СкладВТабличнойЧастиСерии = Ложь;
		Иначе
			СкладВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти("Назначение") = Неопределено Тогда
			НазначениеВТабличнойЧастиСерии = Ложь;
		Иначе
			НазначениеВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСвязьПоСкладуТабличнойЧасти = СкладВТабличнойЧастиТовары И СкладВТабличнойЧастиСерии;
	ДобавитьСвязьПоНазначению           = НазначениеВТабличнойЧастиТовары И НазначениеВТабличнойЧастиСерии;
	
	Если ЕстьТабличнаяЧастьСерии Тогда
		
		ТекстЗапросаШаблон =
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	%4                              КАК ПолеСвязи1,
		|	%5                              КАК ПолеСвязи2,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ Товары%2
		|ИЗ
		|	Документ.%1.%2 КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Документ
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	%4,
		|	%5
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура      КАК Номенклатура,
		|	ТаблицаСерии.Характеристика    КАК Характеристика,
		|	ТаблицаСерии.Серия             КАК Серия,
		|	%4                             КАК ПолеСвязи1,
		|	%5                             КАК ПолеСвязи2,
		|	СУММА(ТаблицаСерии.Количество) КАК Количество
		|ПОМЕСТИТЬ Серии%2
		|ИЗ
		|	Документ.%1.%3 КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Документ
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ТаблицаСерии.Серия,
		|	%4,
		|	%5
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура                               КАК Номенклатура,
		|	Серии.Характеристика                             КАК Характеристика,
		|	Серии.Серия                                      КАК Серия,
		|	Серии.ПолеСвязи1                                 КАК ПолеСвязи1,
		|	Серии.ПолеСвязи2                                 КАК ПолеСвязи2,
		|	Серии.Количество - ЕСТЬNULL(Товары.Количество,0) КАК Количество
		|ПОМЕСТИТЬ СерииИзТЧСерии%2
		|ИЗ
		|	Серии%2 КАК Серии
		|	ЛЕВОЕ СОЕДИНЕНИЕ Товары%2 КАК Товары
		|	ПО Товары.Номенклатура = Серии.Номенклатура
		|	И Товары.Характеристика = Серии.Характеристика
		|	И Товары.Серия = Серии.Серия
		|	И Товары.ПолеСвязи1 = Серии.ПолеСвязи1
		|	И Товары.ПолеСвязи2 = Серии.ПолеСвязи2
		|ГДЕ
		|	Серии.Количество > ЕСТЬNULL(Товары.Количество,0)
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия          КАК Серия,
		|	Товары.Количество     КАК Количество
		|ПОМЕСТИТЬ ТаблицаТовары%2
		|ИЗ
		|	Товары%2 КАК Товары
		|ГДЕ
		|	Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииИзТЧСерии.Номенклатура   КАК Номенклатура,
		|	СерииИзТЧСерии.Характеристика КАК Характеристика,
		|	СерииИзТЧСерии.Серия          КАК Серия,
		|	СерииИзТЧСерии.Количество     КАК Количество
		|ИЗ
		|	СерииИзТЧСерии%2 КАК СерииИзТЧСерии
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура   КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия          КАК Серия,
		|	Товары.Количество     КАК Количество
		|ИЗ
		|	Товары%2 КАК Товары
		|ГДЕ
		|	Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СерииИзТЧСерии.Номенклатура,
		|	СерииИзТЧСерии.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
		|	-СерииИзТЧСерии.Количество
		|ИЗ
		|	СерииИзТЧСерии%2 КАК СерииИзТЧСерии
		|;
		|
		|/////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	&ТребуетВзвешивания             КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета       КАК ПроизвольнаяЕдиницаУчета,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ИЗ
		|	ТаблицаТовары%2 КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	&УсловиеМаркируемаяПродукция
		|	И &УсловиеНефасованнаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	&ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаТовары.Количество) > 0
		|";
		
		СвязьПоСкладу = "ИСТИНА";
		Если ДобавитьСвязьПоСкладуТабличнойЧасти Тогда
			СвязьПоСкладу = ИмяПоляСклад;
		КонецЕсли;
		
		СвязьПоНазначению = "ИСТИНА";
		Если ДобавитьСвязьПоНазначению Тогда
			СвязьПоНазначению = "Назначение";
		КонецЕсли;
		
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапросаШаблон, "ОписаниеИС", "ТаблицаТовары.Номенклатура");
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары, ИмяТабЧастиСерии, СвязьПоСкладу, СвязьПоНазначению);
		
	Иначе
		
		ТекстЗапросаШаблон = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура       КАК Номенклатура,
		|	Товары.Характеристика     КАК Характеристика,
		|	Товары.Серия              КАК Серия,
		|	&ТребуетВзвешивания       КАК ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета КАК ПроизвольнаяЕдиницаУчета,
		|	СУММА(Товары.%3)          КАК Количество
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
		|		ПО &ТоварыОписаниеНоменклатурыИС
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|	И &УсловиеМаркируемаяПродукция
		|	И &УсловиеНефасованнаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия,
		|	&ТребуетВзвешивания,
		|	&ПроизвольнаяЕдиницаУчета
		|";
		
		ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапросаШаблон, "ОписаниеИС", "Товары.Номенклатура");
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары, ИмяПоляКоличество);
		
	КонецЕсли;
	
	Если ИмяТабЧастиТовары = "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ". ", " ")
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбработкаЗаполнения

#Область ОбщиеПроцедуры

Функция ОпределитьТипОснования(Знач ДанныеЗаполнения)
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") И ОснованиеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ОснованиеЗаполнения.Основание;
	КонецЕсли;
	Возврат ТипЗнч(ОснованиеЗаполнения);
	
КонецФункции

Функция ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти)
	
	МассивУсловийИ = Новый Массив;
	
	Если ИмяДокумента = "ЗаказПоставщику" Тогда
		МассивУсловийИ.Добавить("И НЕ ТаблицаДокумента.Отменено");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивУсловийИ);
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТабличнаяЧасть, РезультатЗапроса, ДанныеЗаполнения, ДополнительныеПараметры = Неопределено)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаполнениеНеобязательно = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ВозможноПустая");
		
	ОтборПриЗаполненииПоПолям = ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОтборПоПолям");
	
	Если Выборка.Количество() = 0 И Не ЗаполнениеНеобязательно Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'В %1 отсутствует продукция для заполнения.';
				|en = 'No products for filling in %1.'"),
			Основание);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ОтборПриЗаполненииПоПолям Тогда
			
			СтруктураОтбора = ДополнительныеПараметры.ОтборПоПолям;
			
			Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
			
				СвойстваДляПроверки = Новый Структура;
				
				Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
					СвойстваДляПроверки.Вставить(КлючИЗначение.Ключ, Неопределено);
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(СвойстваДляПроверки, Выборка);
				
				Если Не ОбщегоНазначения.ДанныеСовпадают(СвойстваДляПроверки, СтруктураОтбора) Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьШапку") Тогда
		Возврат;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	РеквизитыДокумента = Запрос.Выполнить().Выгрузить();
	Реквизиты = РеквизитыДокумента[0];
	
	ЭтоПерезаполнение = ЗначениеЗаполнено(ДокументОбъект.Ссылка);
	
	Если Не ЭтоПерезаполнение Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			Реквизиты.ДокументОснование,,
			Реквизиты.ЕстьОшибкиПроведен,,);
			
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Реквизиты);
		
	Иначе
		
		Для Каждого Колонка Из РеквизитыДокумента.Колонки Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, Колонка.Имя)
					И Не ЗначениеЗаполнено(ДокументОбъект[Колонка.Имя]) Тогда
				ДокументОбъект[Колонка.Имя] = Реквизиты[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента)
	
	Возврат СтрШаблон(
	"ВЫБРАТЬ
	|	Таблица.ШтрихкодУпаковки,
	|	Таблица.ЗначениеШтрихкода
	|ИЗ
	|	Документ.%1.ШтрихкодыУпаковок КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка",
	ИмяДокумента);
	
КонецФункции

// Функция возвращает шаблон запроса оформленных документов
//
Функция ШаблонОформленныеДокументы()
	
	Шаблон =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы%1
	|ИЗ
	|	Документ.%1 КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &ЭтаСсылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовИСМП.Статус НЕ В(&КонечныеСтатусы)
	|;
	|";
	
	Возврат Шаблон;
	
КонецФункции

Функция ОписаниеТабличнойЧастиССуммамиИНДС(ИмяТабличнойЧастиСерии = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Товары",         "Товары");
	Результат.Вставить("Серии",          ИмяТабличнойЧастиСерии);
	Результат.Вставить("ПолеКоличество", "ТаблицаТовары.Количество");
	Результат.Вставить("ПолеСумма",      "ТаблицаТовары.Сумма");
	Результат.Вставить("ПолеСуммаСНДС",  "ТаблицаТовары.СуммаСНДС");
	Результат.Вставить("ПолеСуммаНДС",   "ТаблицаТовары.СуммаНДС");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

Процедура ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ИмяТабличнойЧасти = "Товары")
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ФильтрВидПродукции, ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Запрос.Выполнить(), Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗИзПрикладногоДокумента(ИмяДокумента, ВидПродукции, ИмяТабличнойЧасти)
	
	УсловиеОтбораТабличнойЧасти = ДополнитьУсловиеТабличнойЧасти(ИмяДокумента, ИмяТабличнойЧасти);
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура      КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика    КАК Характеристика,
		|	СУММА(ТаблицаДокумента.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	Документ.%1%2 КАК ТаблицаДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаДокумента.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	 %3
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|",
			ИмяДокумента,
			?(ИмяТабличнойЧасти = "","","."+ИмяТабличнойЧасти),
			УсловиеОтбораТабличнойЧасти)
	+"
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке,1)) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|ГДЕ
	|	НЕ (&ТребуетВзвешивания)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСерии.Номенклатура   КАК Номенклатура,
	|	ТоварыСерии.Характеристика КАК Характеристика,
	|	ТоварыСерии.Количество / КоэффициентыПересчета.КоэффициентПересчета КАК Количество
	|ПОМЕСТИТЬ Товары
	|	ИЗ ТоварыСерии КАК ТоварыСерии
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО ТоварыСерии.Номенклатура = КоэффициентыПересчета.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакБлок)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияБлок)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИСГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИСГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПивоГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВодаГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковка)
	|	И ОформленныеТовары.Шаблон <> ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыГрупповаяУпаковкаСтандартныйКМ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|";
	
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка", "Штрихкоды.Номенклатура"));
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ

//++ Устарело_Переработка24

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                        КАК ДокументОснование,
	|	ДокументСсылка.Организация                                   КАК Организация,
	|	ДокументСсылка.Подразделение                                 КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПереработчику", "Продукция");
	
КонецПроцедуры
//-- Устарело_Переработка24

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПереработчику2_5(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                        КАК ДокументОснование,
	|	ДокументСсылка.Организация                                   КАК Организация,
	|	ДокументСсылка.Подразделение                                 КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПереработчику2_5 КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПереработчику2_5", "ВыходныеИзделия");
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТКА

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаПроизводство2_2(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                        КАК ДокументОснование,
	|	ДокументСсылка.Организация                                   КАК Организация,
	|	ДокументСсылка.Подразделение                                 КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказНаПроизводство2_2", "Продукция");
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                КАК ДокументОснование,
	|	ДокументСсылка.Организация                           КАК Организация,
	|	ДокументСсылка.Подразделение                         КАК ПроизводственныйОбъект,
	|	ДокументСсылка.Контрагент                            КАК Контрагент,
	|	ВЫБОР 
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
	|	КОНЕЦ КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказПоставщику");
	
КонецПроцедуры

Процедура ЗаполнитьЗаказНаЭмиссиюКодовМаркировкиСУЗНаОснованииЗаказаНаСборку(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОбрабатыватьНаборы", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                КАК ДокументОснование,
	|	ДокументСсылка.Организация                           КАК Организация,
	|	ДокументСсылка.Подразделение                         КАК ПроизводственныйОбъект,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство) КАК СпособВводаВОборот,
	|	НЕ ДокументСсылка.Проведен   КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказНаСборку КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|	И ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|");
	
	ЗаполнитьШапкуЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьЗаказаНаЭмиссиюКодовМаркировкиСУЗ(ДокументОбъект, ДанныеЗаполнения, "ЗаказНаСборку", "");
	
КонецПроцедуры

Процедура ДополнитьЗаказНаЭмиссиюКодовМаркировкиСУЗДаннымиМаркировкиТоваров(ДокументОбъект, ДанныеЗаполнения)
	
	//@skip-warning
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ДокументОснование");
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	//Способ ввода в оборот
	Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ДанныеЗаполнения = Новый Структура();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
		|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
		|			ИЛИ ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка)
		|			ИЛИ ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути)
		|			ИЛИ ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
		|			ИЛИ ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка)
		|	КОНЕЦ КАК СпособВводаВОборот
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДокументСсылка
		|ГДЕ
		|	ДокументСсылка.Ссылка = &ДокументОснование
		|");
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.СпособВводаВОборот)Тогда
				ДокументОбъект.СпособВводаВОборот = Выборка.СпособВводаВОборот;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаТоваровИСМП

Функция ДанныеПрикладныхДокументовИзМаркировкиТоваровИСМП(ДокументСсылка)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Организация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ЗначенияРеквизитов.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ЗначенияРеквизитов.Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМП.Организация КАК Организация,
	|	МаркировкаТоваровИСМП.Комментарий КАК Комментарий,
	|	МаркировкаТоваровИСМП.Дата        КАК Дата,
	|	НЕ МаркировкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК МаркировкаТоваровИСМП
	|ГДЕ
	|	МаркировкаТоваровИСМП.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркировкаТоваровИСМПТовары.Номенклатура           КАК Номенклатура,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))  КАК СтавкаНДС,
	|	МаркировкаТоваровИСМПТовары.Характеристика         КАК Характеристика,
	|	МаркировкаТоваровИСМПТовары.Серия                  КАК Серия,
	|	МаркировкаТоваровИСМПТовары.Упаковка               КАК Упаковка,
	|	МаркировкаТоваровИСМПТовары.Количество             КАК Количество,
	|	МаркировкаТоваровИСМПТовары.КоличествоУпаковок     КАК КоличествоУпаковок,
	|	МаркировкаТоваровИСМПТовары.СтатусУказанияСерий    КАК СтатусУказанияСерий
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|	ПО МаркировкаТоваровИСМПТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|	ПО (ИСТИНА)
	|ГДЕ
	|	МаркировкаТоваровИСМПТовары.Ссылка = &Ссылка";
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, ЕстьШтрихкодыУпаковок = Ложь)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание          = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
			ИмяДокумента, ТоварыСерии);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.МаркировкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	Запрос.УстановитьПараметр("Период",            ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ДокументОбъект.Организация));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ОтчетПроизводственнойЛинии") Тогда
		ВыборкаШапка = МассивРезультатов[МассивРезультатов.Количество() - 1].Выбрать();
		Если ВыборкаШапка.Следующий() Тогда
			ДокументОбъект.Номенклатура   = ВыборкаШапка.Номенклатура;
			ДокументОбъект.Характеристика = ВыборкаШапка.Характеристика;
			ДокументОбъект.Серия          = ВыборкаШапка.Серия;
		КонецЕсли;
	Иначе
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, МассивРезультатов[МассивРезультатов.Количество() - 2], Основание);
		Если ЕстьШтрихкодыУпаковок Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаТабличнойЧастиШтрихкодыУпаковок(ИмяДокумента);
			Запрос.УстановитьПараметр("Ссылка", Основание);
			ДокументОбъект.ШтрихкодыУпаковок.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДокументОбъект.ВидПродукции)
		И ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(ДокументОбъект.Операция) = Неопределено Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	ИначеЕсли ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
		И Не ЗначениеЗаполнено(ДокументОбъект.ОперацияНанесения) Тогда
		ДокументОбъект.ОперацияНанесения = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияМаркировкиТоваровИСМПИзПрикладногоДокумента(
	ИмяДокумента, ТабличныеЧастиТоварыСерии = Неопределено)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС("Серии"));
	ИначеЕсли ТипЗнч(ТабличныеЧастиТоварыСерии) = Тип("Структура") Тогда
		ТоварыСерии = ТабличныеЧастиТоварыСерии;
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ТоварыСерии);
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ТаблицаТовары.Характеристика       КАК Характеристика,
		|	ТаблицаТовары.Серия                КАК Серия,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|ИМЕЮЩИЕ
		|	СУММА(&ПолеКоличество) > 0
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия          КАК Серия,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Серия
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура    КАК Номенклатура,
			|			ТаблицаТовары.Характеристика  КАК Характеристика,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество", ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",   ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",  ТоварыСерии.ПолеСуммаСНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",      ТоварыСерии.ПолеСумма);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке,1)) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|ГДЕ
	|	Не (&ТребуетВзвешивания)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	Товары.Количество          КАК Количество,
	|	Товары.Сумма               КАК Сумма,
	|	Товары.СуммаНДС            КАК СуммаНДС,
	|	Товары.СуммаСНДС           КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 1
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество / КоэффициентыПересчета.КоэффициентПересчета
	|	КОНЕЦ КАК КоличествоПотребительскихУпаковок
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО Товары.Номенклатура = КоэффициентыПересчета.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО Товары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС,
	|	-ОформленныеТовары.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И (ОформленныеТовары.Ссылка.ВидПродукции В(
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция))
	|	ИЛИ ОформленныеТовары.Ссылка.Операция В(
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	МАКСИМУМ(ТоварыКОформлению.СтавкаНДС) КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.КоличествоПотребительскихУпаковок) КАК КоличествоПотребительскихУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ПОМЕСТИТЬ СгруппированныеТоварыКОформлению
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СгруппированныеТоварыКОформлению.Номенклатура       КАК Номенклатура,
	|	СгруппированныеТоварыКОформлению.Характеристика     КАК Характеристика,
	|	СгруппированныеТоварыКОформлению.Серия              КАК Серия,
	|	СгруппированныеТоварыКОформлению.СтавкаНДС          КАК СтавкаНДС,
	|	СгруппированныеТоварыКОформлению.Количество         КАК Количество,
	|	СгруппированныеТоварыКОформлению.КоличествоУпаковок КАК КоличествоУпаковок,
	|	СгруппированныеТоварыКОформлению.Сумма              КАК Сумма,
	|	СгруппированныеТоварыКОформлению.СуммаНДС           КАК СуммаНДС,
	|	СгруппированныеТоварыКОформлению.СуммаСНДС          КАК СуммаСНДС,
	|	СгруппированныеТоварыКОформлению.Цена               КАК Цена
	|ИЗ
	|	СгруппированныеТоварыКОформлению КАК СгруппированныеТоварыКОформлению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Номенклатура) > 1
	|			ТОГДА Неопределено
	|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Номенклатура)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Характеристика) > 1
	|			ТОГДА Неопределено
	|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Характеристика)
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СгруппированныеТоварыКОформлению.Серия) > 1
	|			ТОГДА Неопределено
	|		ИНАЧЕ МАКСИМУМ(СгруппированныеТоварыКОформлению.Серия)
	|	КОНЕЦ КАК Серия
	|ИЗ
	|	СгруппированныеТоварыКОформлению КАК СгруппированныеТоварыКОформлению
	|";
	
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Штрихкоды.Упаковка", "Штрихкоды.Номенклатура"));
	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПрочегоОприходованияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Склад            КАК Склад,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "ТаблицаТовары.Сумма";
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ПрочееОприходованиеТоваров",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПрочееОприходованиеТоваров", ТабличныеЧасти);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПересчетаТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	ДокументСсылка.Склад       КАК Склад,
	|	&Операция                  КАК Операция,
	|	&ВидПродукции              КАК ВидПродукции,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПересчетТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	Запрос.УстановитьПараметр("Операция",     Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	Запрос.УстановитьПараметр("ВидПродукции", ДокументОбъект.ВидПродукции);
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС();
	ОписаниеТабличнойЧасти.ПолеКоличество = "ТаблицаТовары.КоличествоФакт";
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
		Новый Структура(
			"Основание,ИмяФильтра,ЗначениеФильтра",
			ДанныеЗаполнения,
			"ЗаполнениеСВидомПродукции",
			ДокументОбъект.ВидПродукции),
		"ПересчетТоваров",
		ТабличныеЧасти);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииЭтапаПроизводства2_2(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.ДатаПроизводства КАК ДатаПроизводства,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.ПроизводствоНаСтороне
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика)
	|		КОГДА ДокументСсылка.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ)
	|	КОНЕЦ КАК Операция,
	|	1 В (ВЫБРАТЬ 1
	|		ИЗ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|				ПО Штрихкоды.Номенклатура = ВыходныеИзделия.Номенклатура
	|				И  Штрихкоды.Характеристика = ВыходныеИзделия.Характеристика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС
	|				ПО  ОписаниеGTINИС.GTIN = Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""0""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""00""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""000000""+Штрихкоды.Штрихкод
	|		ГДЕ
	|			ВыходныеИзделия.Ссылка = &ДокументОснование
	|			И ОписаниеGTINИС.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.Набор)
	|			И ОписаниеGTINИС.КоличествоПотребительскихУпаковок < 2)
	|	КАК ОперацияНанесенияТолькоДляНаборов,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТабличныеЧасти = Новый Массив;
	
	Если ДокументОбъект.ОперацияНанесенияТолькоДляНаборов
			Или ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС();
		ОписаниеТабличнойЧасти.Товары = "РасходМатериаловИРабот";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
	Иначе
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("ВыходныеИзделияСерии");
		ОписаниеТабличнойЧасти.Товары = "ВыходныеИзделия";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("ПобочныеИзделияСерии");
		ОписаниеТабличнойЧасти.Товары = "ПобочныеИзделия";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ЭтапПроизводства2_2",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ЭтапПроизводства2_2", ТабличныеЧасти);
	КонецЕсли;
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДокументОбъект.ВидПродукции) Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТКА

//++ НЕ УТ

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	1 В
	|		(ВЫБРАТЬ 1
	|		ИЗ
	|		Документ.ПроизводствоБезЗаказа.ВыходныеИзделия КАК ВыходныеИзделия
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|				ПО Штрихкоды.Номенклатура = ВыходныеИзделия.Номенклатура
	|				И  Штрихкоды.Характеристика = ВыходныеИзделия.Характеристика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС
	|				ПО  ОписаниеGTINИС.GTIN = Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""0""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""00""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""000000""+Штрихкоды.Штрихкод
	|		ГДЕ
	|			ВыходныеИзделия.Ссылка = &ДокументОснование
	|			И ОписаниеGTINИС.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.Набор)
	|			И ОписаниеGTINИС.КоличествоПотребительскихУпаковок < 2) КАК ОперацияНанесенияТолькоДляНаборов
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТабличныеЧасти = Новый Массив;
	
	Если ДокументОбъект.ОперацияНанесенияТолькоДляНаборов
			Или ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС();
		ОписаниеТабличнойЧасти.Товары = "МатериалыИРаботы";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
	Иначе
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("ВыходныеИзделияСерии");
		ОписаниеТабличнойЧасти.Товары = "ВыходныеИзделия";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
		ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("ПобочныеИзделияСерии");
		ОписаниеТабличнойЧасти.Товары = "ПобочныеИзделия";
		ОписаниеТабличнойЧасти.ПолеСумма = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
		ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
		ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ПроизводствоБезЗаказа",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПроизводствоБезЗаказа", ТабличныеЧасти);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДокументОбъект.ВидПродукции) Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	КонецЕсли;
	
КонецПроцедуры

//++ Устарело_Переработка24
Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияОтпереработчика(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                             КАК ДокументОснование,
	|	ДокументСсылка.Организация                                        КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                                        КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеОтПереработчика КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТабличныеЧасти = Новый Массив;
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("ТоварыСерии");
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "ТаблицаТовары.Сумма";
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ПоступлениеОтПереработчика",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПоступлениеОтПереработчика", ТабличныеЧасти);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДокументОбъект.ВидПродукции) Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	КонецЕсли;
	
КонецПроцедуры
//-- Устарело_Переработка24
Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПоступленияТоваровОтХранителя(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                             КАК ДокументОснование,
	|	ДокументСсылка.Организация                                        КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	НЕ ДокументСсылка.Проведен                                        КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТабличныеЧасти = Новый Массив;
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "ТаблицаТовары.Сумма";
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ПоступлениеТоваровОтХранителя",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПоступлениеТоваровОтХранителя", ТабличныеЧасти);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДокументОбъект.ВидПродукции) Тогда
		ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ;
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииПриобретенияТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц)
	|		КОГДА &ТекущаяОперацияИмпортСФТС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС)
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)
	|	КОНЕЦ                      КАК Операция
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	Запрос.УстановитьПараметр("ТекущаяОперацияИмпортСФТС", ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"ПриобретениеТоваровУслуг",
			,
			Истина);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПриобретениеТоваровУслуг",, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаркировкаТоваровИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 В
	|		(ВЫБРАТЬ 1
	|		ИЗ
	|		РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеGTINИС КАК ОписаниеGTINИС
	|				ПО  ОписаниеGTINИС.GTIN = Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""0""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""00""+Штрихкоды.Штрихкод
	|				Или ОписаниеGTINИС.GTIN = ""000000""+Штрихкоды.Штрихкод
	|		ГДЕ
	|			Штрихкоды.Номенклатура = ДокументСсылка.Номенклатура
	|			И Штрихкоды.Характеристика = ДокументСсылка.Характеристика
	|			И ОписаниеGTINИС.ВидУпаковки = ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.Набор)
	|			И ОписаниеGTINИС.КоличествоПотребительскихУпаковок < 2) КАК ОперацияНанесенияТолькоДляНаборов,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ) КАК Операция,
	|	ДокументСсылка.Ссылка      КАК ДокументОснование,
	|	ДокументСсылка.Организация КАК Организация,
	|	НЕ ДокументСсылка.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ТабличныеЧасти = Новый Массив;
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС();
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	
	Если Не ДокументОбъект.ОперацияНанесенияТолькоДляНаборов
			Или ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
		ОписаниеТабличнойЧасти.Товары = "";
	КонецЕсли;
	
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти);
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект,
			Новый Структура(
				"Основание,ИмяФильтра,ЗначениеФильтра",
				ДанныеЗаполнения,
				"ЗаполнениеСВидомПродукции",
				ДокументОбъект.ВидПродукции),
			"СборкаТоваров",
			ТабличныеЧасти);
	Иначе
		ЗаполнитьТабличныеЧастиМаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаТоваров", ТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборотаИСМП

Функция ДанныеПрикладныхДокументовИзВыводаИзОборотаИСМП(ДокументСсылка)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Организация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",            ДокументСсылка);
	Запрос.УстановитьПараметр("Период",            ЗначенияРеквизитов.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ЗначенияРеквизитов.Организация));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыводИзОборотаИСМП.Организация КАК Организация,
	|	ВыводИзОборотаИСМП.Комментарий КАК Комментарий,
	|	ВыводИзОборотаИСМП.Дата        КАК Дата,
	|	НЕ ВыводИзОборотаИСМП.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК ВыводИзОборотаИСМП
	|ГДЕ
	|	ВыводИзОборотаИСМП.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыводИзОборотаИСМПТовары.Номенклатура           КАК Номенклатура,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	ВыводИзОборотаИСМПТовары.Характеристика         КАК Характеристика,
	|	ВыводИзОборотаИСМПТовары.Серия                  КАК Серия,
	|	ВыводИзОборотаИСМПТовары.Упаковка               КАК Упаковка,
	|	ВыводИзОборотаИСМПТовары.Количество             КАК Количество,
	|	ВыводИзОборотаИСМПТовары.КоличествоУпаковок     КАК КоличествоУпаковок,
	|	ВыводИзОборотаИСМПТовары.СтатусУказанияСерий    КАК СтатусУказанияСерий
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ВыводИзОборотаИСМПТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|		Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|	ПО ВыводИзОборотаИСМПТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|	ПО (ИСТИНА)
	|ГДЕ
	|	ВыводИзОборотаИСМПТовары.Ссылка = &Ссылка";
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ИмяДокумента = "СписаниеНедостачТоваров" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзСписаниеНедостачТоваров(ИмяДокумента, ТоварыСерии, Штрихкоды);
	Иначе
		Запрос.Текст = ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВыводИзОборотаИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	Запрос.УстановитьПараметр("Период",            ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ДокументОбъект.Организация));
	
	Пакет = Запрос.ВыполнитьПакет();
	ИндексТовары    = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		ИндексШтрихкоды = Пакет.Количество() - 1;
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.ШтрихкодыУпаковок, Пакет[ИндексШтрихкоды], ДанныеЗаполнения, Новый Структура("ВозможноПустая"));
	КонецЕсли;
	
	Если (ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы
		Или ДокументОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики)
			И ДокументОбъект.ШтрихкодыУпаковок.Количество() Тогда
		УдалитьКодыОСУИзТабличнойЧасти(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Удалить коды ОСУ из табличной части.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ВыводИзОборотаИСМП, ДокументОбъект.ПеремещениеМеждуМОДИСМП - Документ объект
Процедура УдалитьКодыОСУИзТабличнойЧасти(ДокументОбъект)
	
	ШтрихкодыУпаковок = ДокументОбъект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	ЗначенияШтрихкодов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ШтрихкодыУпаковок, "ЗначениеШтрихкода");
	
	Общие = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки();
	Пользовательские = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	Кеш = РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов();
	
	Для Каждого КлючИЗначение Из ЗначенияШтрихкодов Цикл

		ШтрихкодУпаковки = КлючИЗначение.Ключ;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеМеждуМОДИСМП") Тогда
			
			ОсобенностьУчетаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШтрихкодУпаковки, "Номенклатура.ОсобенностьУчета");
			ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчетаНоменклатуры);
			
		Иначе
			ВидПродукции = ДокументОбъект.ВидПродукции;
		КонецЕсли;

		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировкиИспользуяПредыдущиеРезультаты(
			КлючИЗначение.Значение, Кеш, ВидПродукции, "", Общие, Пользовательские);
		Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ШтрихкодУпаковки, "ШтрихкодУпаковки"));
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзСписаниеНедостачТоваров(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС());
	ИначеЕсли ТипЗнч(ТабличныеЧастиТоварыСерии) = Тип("Структура") Тогда
		ТоварыСерии = ТабличныеЧастиТоварыСерии;
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ТоварыСерии);
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(&ПолеКоличество)            КАК Количество
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|";
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке,1)) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	ВЫБОР
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 1
	|			ТОГДА 0
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество / КоэффициентыПересчета.КоэффициентПересчета
	|	КОНЕЦ КАК КоличествоПотребительскихУпаковок
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО Товары.Номенклатура = КоэффициентыПересчета.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.КоличествоПотребительскихУпаковок) КАК КоличествоПотребительскихУпаковок,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияВыводаИзОборотаИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС("Серии"));
	ИначеЕсли ТипЗнч(ТабличныеЧастиТоварыСерии) = Тип("Структура") Тогда
		ТоварыСерии = ТабличныеЧастиТоварыСерии;
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ТоварыСерии);
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура      КАК Номенклатура,
		|	ТаблицаТовары.Характеристика    КАК Характеристика,
		|	ТаблицаТовары.Серия             КАК Серия,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
			|	ТаблицаТовары.Характеристика КАК Характеристика,
			|	ТаблицаТовары.Серия          КАК Серия,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Серия
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура      КАК Номенклатура,
			|			ТаблицаТовары.Характеристика    КАК Характеристика,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",           ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",          ТоварыСерии.ПолеСуммаСНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",              ТоварыСерии.ПолеСумма);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(
	|		ВЫБОР
	|			КОГДА &ТребуетВзвешивания
	|				ТОГДА 1
	|			КОГДА ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке
	|		КОНЕЦ) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	Товары.Количество          КАК Количество,
	|	Товары.Сумма               КАК Сумма,
	|	Товары.СуммаНДС            КАК СуммаНДС,
	|	Товары.СуммаСНДС           КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 1
	|			ТОГДА 0
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 0
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество / КоэффициентыПересчета.КоэффициентПересчета
	|	КОНЕЦ КАК КоличествоПотребительскихУпаковок
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО Товары.Номенклатура = КоэффициентыПересчета.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО Товары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС,
	|	-ОформленныеТовары.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка.Проведен
	|	И ОформленныеТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеТовары.Ссылка <> &ЭтаСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.КоличествоПотребительскихУпаковок) КАК КоличествоПотребительскихУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.СтавкаНДС
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Штрихкоды.%3.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
		|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|		И ОформленныеШтрихкоды.Ссылка.Проведен
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииЧекаККМ(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ФискальныеОперации.НомерЧекаККМ КАК НомерПервичногоДокумента,
	|	ФискальныеОперации.Дата         КАК ДатаПервичногоДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаДляЦелейВРозницу)        КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента
	|ИЗ
	|	Документ.ЧекККМ КАК ДокументСсылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = &ДокументОснование
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "ВЫБОР
	|	КОГДА ТаблицаТовары.Ссылка.ЦенаВключаетНДС
	|		ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ";
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ЧекККМ", ОписаниеТабличнойЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЕСТЬNULL(ФискальныеОперации.НомерЧекаККМ, ДокументСсылка.Номер) КАК НомерПервичногоДокумента,
	|	ЕСТЬNULL(ФискальныеОперации.Дата        , ДокументСсылка.Дата)  КАК ДатаПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА Не ФискальныеОперации.НомерЧекаККМ ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаДляЦелейВРозницу)
	|		КОГДА Контрагенты.Ссылка = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа)
	|		КОГДА Контрагенты.СтранаРегистрации ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия)
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия)
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия)
	|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС) 
	|	КОНЕЦ КАК Операция,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Контрагенты.СтранаРегистрации.УчастникЕАЭС, ИСТИНА)
	|			ТОГДА ДокументСсылка.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Не ФискальныеОперации.НомерЧекаККМ ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек)
	|		КОГДА Контрагенты.Ссылка = ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.ТоварнаяНакладная)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)
	|	КОНЕЦ КАК ВидПервичногоДокумента,
	|	""Реализация товаров"" КАК НаименованиеПервичногоДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|		ПО ФискальныеОперации.ДокументОснование = &ДокументОснование
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = ДокументСсылка.Контрагент
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг",, ТабличнаяЧастьШтрихкоды);
	ЗаполнитьВыводИзОборотаПриОбъемноСортовомУчете(ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииОтчетаОРозничныхПродажах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаДляЦелейВРозницу)        КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "ВЫБОР
	|	КОГДА ТаблицаТовары.Ссылка.ЦенаВключаетНДС
	|		ТОГДА ТаблицаТовары.Сумма
	|		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
	|	КОНЕЦ";
	
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхПродажах", ОписаниеТабличнойЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииВнутреннегоПотребленияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)                         КАК ВидПервичногоДокумента,
	|	""Внутреннее потребление""      КАК НаименованиеПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ВнутреннееПотребление КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ВнутреннееПотребление", ОписаниеТабличнойЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСписанияНедостачТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента,
	|	""Списание недостач товаров""   КАК НаименованиеПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС();
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СписаниеНедостачТоваров", ОписаниеТабличнойЧасти);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу)  КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.УПД) КАК ВидПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику",, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииСборкиТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ЭтоСборка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента,
	|	""Сборка товаров""              КАК НаименованиеПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	Если Не РеквизитыДокумента.ЭтоСборка Тогда
		ОписаниеТабличнойЧасти.Товары = "";
		ОписаниеТабличнойЧасти.ПолеКоличество = "ТаблицаТовары.Ссылка.Количество";
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "СборкаТоваров", ОписаниеТабличнойЧасти);
	
КонецПроцедуры

//++ НЕ УТ

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииПроизводстваБезЗаказа(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента,
	|	""Производство товаров""        КАК НаименованиеПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("");
	ОписаниеТабличнойЧасти.Товары = "МатериалыИРаботы";
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ПроизводствоБезЗаказа", ОписаниеТабличнойЧасти);
	
КонецПроцедуры

//-- НЕ УТ

//++ НЕ УТКА

Процедура ЗаполнитьВыводИзОборотаИСМПНаОснованииЭтапаПроизводства(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей) КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПервичныхДокументовИСМП.Прочее)      КАК ВидПервичногоДокумента,
	|	""Производство товаров""        КАК НаименованиеПервичногоДокумента,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	РеквизитыДокумента = Запрос.Выполнить().Выбрать();
	РеквизитыДокумента.Следующий();
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("");
	ОписаниеТабличнойЧасти.Товары = "РасходМатериаловИРабот";
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ЗаполнитьТабличныеЧастиВыводаИзОборотаИСМП(ДокументОбъект, ДанныеЗаполнения, "ЭтапПроизводства2_2", ОписаниеТабличнойЧасти);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ЗаполнитьВыводИзОборотаПриОбъемноСортовомУчете(ДокументОбъект)
	
	Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ДокументОбъект.ВидПродукции) Тогда
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки"));
		ДанныеПоШтрихкодам.МаркированныеТовары.Индексы.Добавить("Номенклатура,Характеристика");
		ДанныеПоШтрихкодам.МаркированныеТовары.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
		ЕстьОбъемноСортовойУчет = Ложь;
		ЗаполнитьТаблицуТоваровОСУПоДеревуУпаковок(
			ДанныеПоШтрихкодам.МаркированныеТовары,
			ДанныеПоШтрихкодам.ДеревоУпаковок,
			ЕстьОбъемноСортовойУчет);
		
		Если ДанныеПоШтрихкодам.МаркированныеТовары.Количество() = 0
			Или ЕстьОбъемноСортовойУчет Тогда
			
			ДокументОбъект.ОбъемноСортовойУчет = Истина;
			
			Для Каждого СтрокаТовары Из ДокументОбъект.Товары Цикл
				СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
				ПоискСтрок = ДанныеПоШтрихкодам.МаркированныеТовары.НайтиСтроки(СтруктураПоиска);
				Если ПоискСтрок.Количество() Тогда
					СтрокаТовары.GTIN = ПоискСтрок[0].GTIN;
				КонецЕсли;
			КонецЦикла;
			
			Документы.ВыводИзОборотаИСМП.ЗаполнитьДоступныеGTIN(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуТоваровОСУПоДеревуУпаковок(МаркированныеТовары, ДеревоУпаковок, ЕстьОбъемноСортовойУчет)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			ЗаполнитьТаблицуТоваровОСУПоДеревуУпаковок(МаркированныеТовары, СтрокаДерева, ЕстьОбъемноСортовойУчет);
			Продолжить;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ЗаполнитьТаблицуТоваровОСУПоДеревуУпаковок(МаркированныеТовары, СтрокаДерева, ЕстьОбъемноСортовойУчет);
			Продолжить;
		ИначеЕсли СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.АкцизнаяМаркаСНомеромИСерией
			Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.АгрегированныйТаможенныйКод Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			ЕстьОбъемноСортовойУчет = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДерева);
		ПоискСтрок = МаркированныеТовары.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискСтрок.Количество() = 0 Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПеремаркировкаТоваровИСМП

Процедура ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Структура;
		Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "ШтрихкодыУпаковок");
		Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "ШтрихкодУпаковки");
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
		Основание          = ДанныеЗаполнения.Основание;
		ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	Иначе
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Основание = ДанныеЗаполнения.Основание;
		Иначе
			Основание = ДанныеЗаполнения;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
			ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		Иначе
			ФильтрВидПродукции = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Ложь);
			ОсобенностьУчета   = Новый Массив;
			Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
				ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Для Счетчик = 1 По Выборка.Количество Цикл
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;

	КонецЦикла;
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияПеремаркировкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличнаяЧастьШтрихкоды)
	
	Если ИмяДокумента = "ОтчетОРозничныхВозвратах" Тогда
		ПолеПричинаПеремаркировки =
			"ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)";
	Иначе
		ПолеПричинаПеремаркировки =
			"ВЫБОР КОГДА Документ.Партнер = Значение(Справочник.Партнеры.РозничныйПокупатель)
			|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтРозничногоПокупателя)
			|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПричиныПеремаркировкиТоваровИСМП.ВозвратОтЮридическогоЛица)
			|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ
	|	Товары.Номенклатура              КАК Номенклатура,
	|	Товары.Характеристика            КАК Характеристика,
	|	СУММА(Товары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.%1.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|ГДЕ
	|	Товары.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика,
	|	-СУММА(ВЫБОР КОГДА ШтрихкодыУпаковокТоваров.Количество = 0 ТОГДА 1 ИНАЧЕ ШтрихкодыУпаковокТоваров.Количество КОНЕЦ)
	|ИЗ
	|	Документ.%1.%2 КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО ШтрихкодыУпаковок.%3 = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеШтрихкоды.Номенклатура,
	|	ОформленныеШтрихкоды.Характеристика,
	|	-СУММА(1)
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК ОформленныеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОформленныеШтрихкоды.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|ГДЕ
	|	ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
	|	И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|	И ОформленныеШтрихкоды.Ссылка.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ОформленныеШтрихкоды.Номенклатура,
	|	ОформленныеШтрихкоды.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	%4                                        КАК ПричинаПеремаркировки,
	|	ТоварыДокумента.Номенклатура              КАК Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД     КАК КодТНВЭД,
	|	ТоварыДокумента.Характеристика            КАК Характеристика,
	|	ТоварыДокумента.Номенклатура              КАК НоваяНоменклатура,
	|	ТоварыДокумента.Характеристика            КАК НоваяХарактеристика,
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) КАК Количество
	|ИЗ
	|	Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК Документ
	|		ПО Документ.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	%4,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Номенклатура.КодТНВЭД,
	|	ТоварыДокумента.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыДокумента.КоличествоУпаковок) > 0",
	ИмяДокумента,
	ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
	ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
	ПолеПричинаПеремаркировки);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПеремаркировкуИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровОтКлиента");
	
КонецПроцедуры

Процедура ЗаполнитьПеремаркировкуИСМПНаОснованииОтчетаОРозничныхВозвратах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Перемаркировка) КАК Операция
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличнуюЧастьПеремаркировкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхВозвратах", ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратВОборотИСМП

Процедура ЗаполнитьШапкуВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьВозвратаВОборотИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если Штрихкоды = Неопределено Тогда
		Штрихкоды = Новый Структура;
		Штрихкоды.Вставить("ИмяТаблицыШтрихкодыУпаковок", "ШтрихкодыУпаковок");
		Штрихкоды.Вставить("ИмяКолонкиШтрихкодУпаковки",  "ШтрихкодУпаковки");
	КонецЕсли;
	
	ФильтрВидПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	ОсобенностьУчета   = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитВозвратуВОборот(ВидПродукции) Тогда
			ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ИмяДокумента = "КорректировкаРеализации" Тогда
		Запрос.Текст = ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзКорректировкиРеализации();
	Иначе
		Запрос.Текст = ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзПрикладногоДокумента(ИмяДокумента, Штрихкоды);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ВозвратВОборотИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, РезультатЗапроса, Основание, Новый Структура("ВозможноПустая"));
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если ДокументОбъект.Товары.Количество() = 0 И ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В документе возврата не были указаны коды маркировки.
													|Отсканируйте фактически возвращаемые в оборот коды.';
													|en = 'Marking codes were not specified in the return document. 
													|Scan the codes actually being returned.'"));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличнаяЧастьШтрихкоды)
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка         КАК КодМаркировки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия          КАК Серия,
	|	Истина КАК Оплачен
	|ИЗ
	|	Документ.%1.%2 КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.%3 = ШтрихкодыУпаковокТоваров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратВОборотИСМП.Товары КАК ОформленныеШтрихкоды
	|		ПО ОформленныеШтрихкоды.Ссылка.ДокументОснование = &ДокументОснование
	|		И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|		И ОформленныеШтрихкоды.КодМаркировки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	Штрихкоды.Ссылка = &ДокументОснование
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|	И ОформленныеШтрихкоды.КодМаркировки ЕСТЬ NULL",
	ИмяДокумента,
	ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
	ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияВозвратаВОборотИСМПИзКорректировкиРеализации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.ДокументОснование КАК ДокументРеализации
	|ПОМЕСТИТЬ Основание
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|	И КорректировкаРеализации.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ НевозвращенныеИлиОформленныеШтрихкоды
	|ИЗ
	|	Документ.КорректировкаРеализации.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеШтрихкоды.КодМаркировки
	|ИЗ
	|	Документ.ВозвратВОборотИСМП.Товары КАК ОформленныеШтрихкоды
	|ГДЕ
	|	ВЫРАЗИТЬ(ОформленныеШтрихкоды.Ссылка.ДокументОснование КАК Документ.КорректировкаРеализации) = &ДокументОснование
	|	И ОформленныеШтрихкоды.Ссылка <> &ЭтаСсылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка         КАК КодМаркировки,
	|	ШтрихкодыУпаковокТоваров.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия          КАК Серия,
	|	Истина КАК Оплачен
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ШтрихкодыУпаковок КАК Штрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ПО Штрихкоды.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НевозвращенныеИлиОформленныеШтрихкоды КАК НевозвращенныеИлиОформленныеШтрихкоды
	|		ПО НевозвращенныеИлиОформленныеШтрихкоды.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваров.Ссылка
	|ГДЕ
	|	Штрихкоды.Ссылка В(ВЫБРАТЬ ДокументРеализации ИЗ Основание)
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|	И НевозвращенныеИлиОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьВозвратВОборотИСМПНаОснованииВозвратаТоваровОтКлиента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ДокументСсылка.Контрагент.ЮрФизлицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи)
	|		КОГДА ДокументСсылка.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоИзОборотаВЦеляхНеСвязанныхСРеализацией)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации)
	|	КОНЕЦ КАК Операция
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровОтКлиента");
	
КонецПроцедуры

Процедура ЗаполнитьВозвратВОборотИСМПНаОснованииОтчетаОРозничныхВозвратах(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации) КАК Операция
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "АкцизныеМарки", "АкцизнаяМарка");
	ЗаполнитьТабличнуюЧастьВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, "ОтчетОРозничныхВозвратах", ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьВозвратВОборотИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.ЮрФизлицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоИзОборотаВЦеляхНеСвязанныхСРеализацией)
	|	КОНЕЦ КАК Операция
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличнуюЧастьВозвратаВОборотИСМП(ДокументОбъект, ДанныеЗаполнения, "КорректировкаРеализации");
	
КонецПроцедуры

#КонецОбласти

#Область ОтгрузкаТоваровИСМП

Процедура ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Основание, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'По текущему документу уже оформлен электронный документ с информацией о маркируемых товарах';
								|en = 'An electronic document with information on marked goods has already been generated for the current document'");
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтгрузкаЕАЭСПриОСУ = (ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	ЭтоОтгрузкаЕАЭС = (ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	ФильтрВидПродукции    = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(Истина, Ложь);
	ОсобенностьУчета      = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво Тогда
			Продолжить;
		ИначеЕсли (ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
				И Не ЭтоОтгрузкаЕАЭСПриОСУ) Тогда
			Продолжить;
		ИначеЕсли ЭтоОтгрузкаЕАЭС
				И ВидПродукции <> Перечисления.ВидыПродукцииИС.Обувь
				И ВидПродукции <> Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность
				И ВидПродукции <> Перечисления.ВидыПродукцииИС.Шины Тогда
			Продолжить;
		КонецЕсли;
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ФильтрВидПродукции = ДокументОбъект.ВидПродукции;
		ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	Если ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Основание, Истина)
			И Не ЗначениеЗаполнено(ДокументОбъект.ВидПродукции) Тогда
		ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ОтгрузкаТоваровИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	Запрос.УстановитьПараметр("Период",            ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ДокументОбъект.Организация));
	
	Пакет        = Запрос.ВыполнитьПакет();
	ИндексТовары = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание);
	
	Если ТипЗнч(ОсобенностьУчета) = Тип("Массив") Тогда
		ИнтеграцияИС.ЗаполнитьВидПродукцииПоТабличнойЧасти(ДокументОбъект);
	Иначе
		ДокументОбъект.ВидПродукции = ФильтрВидПродукции;
	КонецЕсли;
	
	Если Штрихкоды <> Неопределено Тогда
		
		Если Не ЭтоОтгрузкаЕАЭСПриОСУ Тогда
			ШтрихкодыОснования = Пакет[ИндексТовары+1].Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
			ШтрихкодыПоВидуПродукции = ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыОснования, ДокументОбъект.ВидПродукции);
			Для Каждого ЭлементМассива Из ШтрихкодыПоВидуПродукции Цикл
				ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементМассива;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияОтгрузкиТоваровИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС());
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика      КАК Характеристика,
		|	ТаблицаТовары.Серия               КАК Серия,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ТаблицаТовары.Характеристика      КАК Характеристика,
			|	ТаблицаТовары.Серия               КАК Серия,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Серия
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура    КАК Номенклатура,
			|			ТаблицаТовары.Характеристика  КАК Характеристика,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",           ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",          ТоварыСерии.ПолеСуммаСНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",              ТоварыСерии.ПолеСумма);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ТекстЗапроса = ТекстЗапроса
		+ ИнтеграцияИС.РазделительЗапросовВПакете()
		+ СтрШаблон(ШаблонОформленныеДокументы(),"ОтгрузкаТоваровИСМП");
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке,1)) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|ГДЕ
	|	Не (&ТребуетВзвешивания)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	Товары.Количество     КАК Количество,
	|	Товары.Сумма          КАК Сумма,
	|	Товары.СуммаНДС       КАК СуммаНДС,
	|	Товары.СуммаСНДС      КАК СуммаСНДС,
	|	ВЫБОР
	|		КОГДА КоэффициентыПересчета.КоэффициентПересчета = 1
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество / КоэффициентыПересчета.КоэффициентПересчета
	|	КОНЕЦ КАК КоличествоПотребительскихУпаковок
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов КАК КоэффициентыПересчета
	|		ПО Товары.Номенклатура = КоэффициентыПересчета.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО Товары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ОформленныеТовары.СтавкаНДС,
	|	-ОформленныеТовары.Количество,
	|	-ОформленныеТовары.Сумма,
	|	-ОформленныеТовары.СуммаНДС,
	|	-ОформленныеТовары.СуммаСНДС,
	|	-ОформленныеТовары.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ТоварыКОформлению.Серия             КАК Серия,
	|	ТоварыКОформлению.СтавкаНДС         КАК СтавкаНДС,
	|	СУММА(ТоварыКОформлению.Количество) КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество) КАК КоличествоУпаковок,
	|	СУММА(ТоварыКОформлению.КоличествоПотребительскихУпаковок) КАК КоличествоПотребительскихУпаковок,
	|	СУММА(ТоварыКОформлению.Сумма)      КАК Сумма,
	|	СУММА(ТоварыКОформлению.СуммаНДС)   КАК СуммаНДС,
	|	СУММА(ТоварыКОформлению.СуммаСНДС)  КАК СуммаСНДС,
	|	ВЫБОР КОГДА СУММА(ТоварыКОформлению.Количество) > 0 И СУММА(ТоварыКОформлению.Сумма) > 0
	|		ТОГДА СУММА(ТоварыКОформлению.Сумма) / СУММА(ТоварыКОформлению.Количество)
	|	ИНАЧЕ 0 КОНЕЦ                       КАК Цена
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) > 0
	|;
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");
	
	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыОтгрузкаТоваровИСМП КАК Т)
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	ИСТИНА                              КАК ЕстьМолочнаяПродукция
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В
	|		(ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС))
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеТабличнойЧастиТовары.ЕстьМолочнаяПродукция, ЛОЖЬ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ)
	|			КОНЕЦ
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаКомиссия)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа)
	|	КОНЕЦ                           КАК Операция,
	|	ДокументСсылка.Контрагент.СтранаРегистрации КАК СтранаНазначения,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС("Серии"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "РеализацияТоваровУслуг", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка КАК Ссылка,
	|	ИСТИНА                                КАК ЕстьМолочнаяПродукция
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВозвратТоваровПоставщикуТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В
	|		(ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС))
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеТабличнойЧастиТовары.ЕстьМолочнаяПродукция, ЛОЖЬ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ)
	|			КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа)
	|	КОНЕЦ                                       КАК Операция,
	|	ДокументСсылка.Контрагент.СтранаРегистрации КАК СтранаНазначения,
	|	ДокументСсылка.Номер                        КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС("Серии"));
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровПоставщику", ТабличныеЧасти, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииКорректировкиРеализации(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаРеализацииТовары.Ссылка КАК Ссылка,
	|	ИСТИНА                               КАК ЕстьМолочнаяПродукция
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО КорректировкаРеализацииТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В
	|		(ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|			ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС))
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка           КАК ДокументОснование,
	|	ДокументСсылка.Организация      КАК Организация,
	|	ДокументСсылка.Контрагент       КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеТабличнойЧастиТовары.ЕстьМолочнаяПродукция, ЛОЖЬ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ)
	|			КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа)
	|	КОНЕЦ                           КАК Операция,
	|	ДокументСсылка.Номер            КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата             КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий      КАК Комментарий,
	|	ДокументСсылка.Дата             КАК ДатаОтгрузки
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ТабличнаяЧастьШтрихкоды = Новый Структура("ИмяТаблицыШтрихкодыУпаковок, ИмяКолонкиШтрихкодУпаковки", "ШтрихкодыУпаковок", "ШтрихкодУпаковки");
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "КорректировкаРеализации",, ТабличнаяЧастьШтрихкоды);
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.ОрганизацияПолучатель КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен           КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаКомиссия)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа)
	|	КОНЕЦ КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПередачаТоваровМеждуОрганизациями");
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.ОрганизацияПолучатель КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ВозвратТоваровМеждуОрганизациями");
	
КонецПроцедуры

Процедура ЗаполнитьОтгрузкуТоваровИСМПНаОснованииПеремещенияТоваров(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	ДокументСсылка.ОрганизацияПолучатель КАК Контрагент,
	|	НЕ ДокументСсылка.Проведен
	|		Или ДокументСсылка.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.Пустаяссылка)
	|		Или ДокументСсылка.Организация = ДокументСсылка.ОрганизацияПолучатель           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ОтгрузкаПродажа) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.Комментарий           КАК Комментарий,
	|	ДокументСсылка.Дата                  КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументСсылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ЗаполнитьТабличныеЧастиОтгрузкиТоваровИСМП(ДокументОбъект, ДанныеЗаполнения, "ПеремещениеТоваров");
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП

Функция ДанныеПрикладныхДокументовИзПриемкиТоваровИСМП(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемкаТоваровИСМП.Организация КАК Организация,
	|	ПриемкаТоваровИСМП.Контрагент  КАК Контрагент,
	|	ПриемкаТоваровИСМП.Контрагент.Партнер КАК Партнер,
	|	ПриемкаТоваровИСМП.Комментарий КАК Комментарий,
	|	ПриемкаТоваровИСМП.Дата        КАК Дата,
	|
	|	Не ПриемкаТоваровИСМП.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР 
	|		КОГДА ПриемкаТоваровИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля)
	|			Или ПриемкаТоваровИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ)
	|			Или ПриемкаТоваровИСМП.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
    |	ПриемкаТоваровИСМП.ШтрихкодыУпаковок.(
    |		Ссылка,
    |		НомерСтроки,
    |		ШтрихкодУпаковки,
    |		ЗначениеШтрихкода,
    |		КоличествоУпаковок,
    |		Цена,
    |		СуммаНДС
    |	) КАК ШтрихкодыУпаковок,
	|	ПриемкаТоваровИСМП.Товары.(
	|		Номенклатура           КАК Номенклатура,
	|		Характеристика         КАК Характеристика,
	|		Серия                  КАК Серия,
	|		Количество             КАК Количество,
	|		КоличествоУпаковок     КАК КоличествоУпаковок,
	|		СтатусУказанияСерий    КАК СтатусУказанияСерий
	|	) КАК Товары
	|ИЗ
	|	Документ.ПриемкаТоваровИСМП КАК ПриемкаТоваровИСМП
	|ГДЕ
	|	ПриемкаТоваровИСМП.Ссылка = &Ссылка";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область РазрешениеНаОтгрузкуИСМП

Процедура ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииРеализацииТоваровУслуг(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ВидыПродукцииРазрешенияНаОтгрузку)
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                       КАК ДокументОснование,
	|	ДокументСсылка.Организация                                  КАК Организация,
	|	НЕ ДокументСсылка.Проведен                                  КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.Комментарий                                  КАК Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииВозвратаТоваровПоставщику(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровПоставщику.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВозвратТоваровПоставщику.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ВидыПродукцииРазрешенияНаОтгрузку)
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                       КАК ДокументОснование,
	|	ДокументСсылка.Организация                                  КАК Организация,
	|	НЕ ДокументСсылка.Проведен                                  КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.Комментарий                                  КАК Комментарий
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииВозвратаТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВозвратТоваровМеждуОрганизациями.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ВозвратТоваровМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВозвратТоваровМеждуОрганизациями.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ВидыПродукцииРазрешенияНаОтгрузку)
	|ГДЕ
	|	ВозвратТоваровМеждуОрганизациями.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                       КАК ДокументОснование,
	|	ДокументСсылка.Организация                                  КАК Организация,
	|	НЕ ДокументСсылка.Проведен                                  КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.Комментарий                                  КАК Комментарий
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьРазрешениеНаОтгрузкуИСМПНаОснованииПередачиТоваровМеждуОрганизациями(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДанныеТабличнойЧастиТовары
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ПередачаТоваровМеждуОрганизациями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПередачаТоваровМеждуОрганизациями.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ОсобенностьУчета В (&ВидыПродукцииРазрешенияНаОтгрузку)
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                                       КАК ДокументОснование,
	|	ДокументСсылка.Организация                                  КАК Организация,
	|	НЕ ДокументСсылка.Проведен                                  КАК ЕстьОшибкиПроведен,
	|	ДокументСсылка.Комментарий                                  КАК Комментарий
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДокументСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТабличнойЧастиТовары КАК ДанныеТабличнойЧастиТовары
	|		ПО ДокументСсылка.Ссылка = ДанныеТабличнойЧастиТовары.Ссылка
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|");
	
	ЗаполнитьШапкуРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуРазрешениеНаОтгрузкуИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Запрос.УстановитьПараметр(
		"ВидыПродукцииРазрешенияНаОтгрузку",
		ИнтеграцияИСМПКлиентСервер.ВидыПродукцииТребующиеРазрешенияНаОтгрузку());
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеМеждуМОДИСМП

Процедура ЗаполнитьПеремещениеМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументСсылка.Ссылка                КАК ДокументОснование,
	|	ДокументСсылка.Организация           КАК Организация,
	|	НЕ ДокументСсылка.Проведен           КАК ЕстьОшибкиПроведен,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПеремещениеМеждуМОД) КАК Операция,
	|	ДокументСсылка.Номер                 КАК НомерПервичногоДокумента,
	|	ДокументСсылка.Дата                  КАК ДатаПервичногоДокумента,
	|	ДокументСсылка.СкладОтправитель      КАК Отправитель,
	|	ДокументСсылка.СкладПолучатель       КАК Получатель,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров)
	|				И ДокументСсылка.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДокументСсылка.СкладОтправитель
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ОтправительОбъект,
	|	ВЫБОР
	|		КОГДА ДокументСсылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеТоваров)
	|				И ДокументСсылка.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ДокументСсылка.СкладПолучатель
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ПолучательОбъект,
	|	ЕСТЬNULL(ДанныеРегистрацииОтправителя.КПП, СправочникОрганизации.КПП) КАК КППОбособленногоПодразделенияОтправителя,
	|	ЕСТЬNULL(ДанныеРегистрацииПолучателя.КПП, СправочникОрганизации.КПП)  КАК КППОбособленногоПодразделенияПолучателя,
	|	ДокументСсылка.Комментарий                       КАК Комментарий,
	|	ДокументСсылка.Дата                              КАК ДатаОтгрузки
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокументСсылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
	|		ПО ДокументСсылка.Организация = СправочникОрганизации.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОрганеСкладаОтправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК ДанныеРегистрацииОтправителя
	|			ПО РегистрацииВНалоговомОрганеСкладаОтправителя.РегистрацияВНалоговомОргане = ДанныеРегистрацииОтправителя.Ссылка
	|		ПО ДокументСсылка.Организация = РегистрацииВНалоговомОрганеСкладаОтправителя.Организация
	|			И ДокументСсылка.СкладОтправитель.Подразделение = РегистрацииВНалоговомОрганеСкладаОтправителя.Подразделение
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОрганеСкладаПолучателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК ДанныеРегистрацииПолучателя
	|			ПО РегистрацииВНалоговомОрганеСкладаПолучателя.РегистрацияВНалоговомОргане = ДанныеРегистрацииПолучателя.Ссылка
	|		ПО ДокументСсылка.Организация = РегистрацииВНалоговомОрганеСкладаПолучателя.Организация
	|			И ДокументСсылка.СкладПолучатель.Подразделение = РегистрацииВНалоговомОрганеСкладаПолучателя.Подразделение
	|ГДЕ
	|	ДокументСсылка.Ссылка = &ДокументОснование
	|	И (СправочникОрганизации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|		ИЛИ (ЕСТЬNULL(ДанныеРегистрацииОтправителя.КПП, СправочникОрганизации.КПП) <> ЕСТЬNULL(ДанныеРегистрацииПолучателя.КПП, СправочникОрганизации.КПП)));
	|");
	
	ЗаполнитьШапкуПеремещенияМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	ОписаниеТабличнойЧасти = ОписаниеТабличнойЧастиССуммамиИНДС("Серии");
	ОписаниеТабличнойЧасти.ПолеСумма = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаНДС = "0";
	ОписаниеТабличнойЧасти.ПолеСуммаСНДС = "0";
	
	ТоварыСерии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеТабличнойЧасти);
	
	ЗаполнитьТабличныеЧастиПеремещенияМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, "ПеремещениеТоваров", ТоварыСерии);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПеремещенияМеждуМОДИСМП(ДокументОбъект, ДанныеЗаполнения, Запрос)
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		Основание = Основание.Основание;
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Основание, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'По текущему документу уже оформлен электронный документ с информацией о маркируемых товарах';
								|en = 'По текущему документу уже оформлен электронный документ с информацией о маркируемых товарах'");
	КонецЕсли;
	
	ЗаполнитьШапкуДокумента(ДокументОбъект, ДанныеЗаполнения, Запрос);
	
	Если Не ОбщегоНазначенияИСВызовСервера.ПартнерОрганизацияЭтоИндивидуальныйПредприниматель(ДокументОбъект.Организация) Тогда
		// перемещение между двумя МОД юридического лица
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Отправитель) И Не ЗначениеЗаполнено(ДокументОбъект.Получатель) Тогда
			// оба склада перемещения относятся к одному юридическому лицу, не требуется перемещение
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'По документу %1 не требуется перемещение между МОД.';
					|en = 'По документу %1 не требуется перемещение между МОД.'"),
				Основание);
		ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Отправитель) Тогда
			ДокументОбъект.Отправитель = ДокументОбъект.Организация;
		ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Получатель) Тогда
			ДокументОбъект.Получатель = ДокументОбъект.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	ТранспортныеНакладные = Документы.ТранспортнаяНакладная.ТранспортныеНакладныеДокументовОснований(Основание);
	ТранспортнаяНакладная = Неопределено;
	
	Если ТранспортныеНакладные.Количество() = 0 Тогда 
		
		Если ЗначениеЗаполнено(ДокументОбъект.НомерПеревозочногоДокумента) Тогда 
			ДокументОбъект.НомерПеревозочногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументОбъект.НомерПеревозочногоДокумента);
		КонецЕсли;
		
	ИначеЕсли ТранспортныеНакладные.Количество() = 1 Тогда
		
		ДокументОбъект.НомерПеревозочногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ТранспортныеНакладные[0].Номер);
		ДокументОбъект.ДатаПеревозочногоДокумента  = ТранспортныеНакладные[0].Дата;
		ТранспортнаяНакладная                      = ТранспортныеНакладные[0].ТранспортнаяНакладная;
		
		ЗаполнитьТранспортныеРеквизитыПеремещенияМеждуМОДИСМП(ДокументОбъект, ТранспортнаяНакладная);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = Обработки.ЭлектронныеПеревозочныеДокументы.ЗапросПоДокументуОснования();
		
		Обработки.ЭлектронныеПеревозочныеДокументы.ЗаполнитьОбязательныеПараметрыЗапроса(Запрос.Параметры);
		
		Запрос.УстановитьПараметр("ДокументОснование", Основание);
		Запрос.УстановитьПараметр("НачалоПериода",     Дата(1, 1, 1));
		Запрос.УстановитьПараметр("КонецПериода",      Дата(1, 1, 1));
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаЭПД = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ВыборкаЭПД.Следующий() Тогда
			
			ДанныеФормирования                        = ОбменСГИСЭПД.ДанныеРеквизитовЭПД(ВыборкаЭПД.Ссылка);
			ДокументОбъект.НомерТранспортногоСредства = ДанныеФормирования.ТитулГрузоотправителяТранспортноеСредствоРегистрационныйНомер;
			
			РеквизитыДокументаЭПД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаЭПД.Ссылка, "УИДМинтранс, ТитулГрузоотправителяИдентификаторФайла");
			
			Если ЗначениеЗаполнено(РеквизитыДокументаЭПД.УИДМинтранс) Тогда
				ИдентификаторДокумента = РеквизитыДокументаЭПД.УИДМинтранс;
			Иначе
				ИдентификаторДокумента = РеквизитыДокументаЭПД.ТитулГрузоотправителяИдентификаторФайла;
			КонецЕсли;
			
			ДокументОбъект.ИдентификаторЭПД = ИдентификаторДокумента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаСведений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Дата");
	ЗаполнитьДанныеАдресовПеремещенияМеждуМОДИСМП(ДокументОбъект, ДатаСведений);
	
КонецПроцедуры

Процедура ЗаполнитьТранспортныеРеквизитыПеремещенияМеждуМОДИСМП(ДокументОбъект, ТранспортнаяНакладная = Неопределено)
	
	ДанныеПеревозки = ИнтеграцияИСУТ.ДанныеПеревозки(ДокументОбъект.ДокументОснование, ТранспортнаяНакладная);
	
	ДокументОбъект.ТранспортноеСредство = ДанныеПеревозки.ТранспортноеСредство;
	
	Если ЗначениеЗаполнено(ДанныеПеревозки.АвтомобильГосударственныйНомер) Тогда
		ДокументОбъект.НомерТранспортногоСредства = СокрЛП(СтрШаблон("%1 %2", ДанныеПеревозки.АвтомобильМарка, ДанныеПеревозки.АвтомобильГосударственныйНомер));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеАдресовПеремещенияМеждуМОДИСМП(ДокументОбъект, ДатаСведений)
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресСклада;
	МассивСсылок            = Новый Массив;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ОтправительОбъект) И МассивСсылок.Найти(ДокументОбъект.ОтправительОбъект) = Неопределено Тогда
		МассивСсылок.Добавить(ДокументОбъект.ОтправительОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПолучательОбъект) И МассивСсылок.Найти(ДокументОбъект.ПолучательОбъект) = Неопределено Тогда
		МассивСсылок.Добавить(ДокументОбъект.ПолучательОбъект);
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивСсылок, Перечисления.ТипыКонтактнойИнформации.Адрес, ВидКонтактнойИнформации, ДатаСведений);
		
	Если ЗначениеЗаполнено(ДокументОбъект.ОтправительОбъект) Тогда
	
		СтруктураОтбора = Новый Структура("Объект", ДокументОбъект.ОтправительОбъект);
		ДанныеЗаполненияОтправителя = КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если ДанныеЗаполненияОтправителя.Количество() Тогда
		
			ДокументОбъект.ОтправительАдрес        = ДанныеЗаполненияОтправителя[0].Значение;
			ДокументОбъект.ОтправительАдресСтрокой = ДанныеЗаполненияОтправителя[0].Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПолучательОбъект) Тогда
	
		СтруктураОтбора = Новый Структура("Объект", ДокументОбъект.ПолучательОбъект);
		ДанныеЗаполненияПолучателя = КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если ДанныеЗаполненияПолучателя.Количество() Тогда
		
			ДокументОбъект.ПолучательАдрес        = ДанныеЗаполненияПолучателя[0].Значение;
			ДокументОбъект.ПолучательАдресСтрокой = ДанныеЗаполненияПолучателя[0].Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьКодыФИАСПоАдресамОтправителяПолучателя(ДокументОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьКодыФИАСПоАдресамОтправителяПолучателя(ДокументОбъект)
	
	Если ЗначениеЗаполнено(ДокументОбъект.ОтправительАдрес) Тогда
		
		ДокументОбъект.ОтправительКодФИАС =
			ОбщегоНазначенияИСМП.ИдентификаторФИАСПоДаннымАдреса(ДокументОбъект.ОтправительАдрес).Идентификатор;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПолучательАдрес) Тогда
		
		ДокументОбъект.ПолучательКодФИАС =
			ОбщегоНазначенияИСМП.ИдентификаторФИАСПоДаннымАдреса(ДокументОбъект.ПолучательАдрес).Идентификатор;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиПеремещенияМеждуМОДИСМП(
	ДокументОбъект, ДанныеЗаполнения, ИмяДокумента, ТоварыСерии = Неопределено, Штрихкоды = Неопределено)
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("НеЗаполнятьТабличнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрВидПродукции    = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВидыПродукцииВнутреннегоПеремещенияМеждуМОД();
	ОсобенностьУчета      = Новый Массив;
	Для Каждого ВидПродукции Из ФильтрВидПродукции Цикл
		ОсобенностьУчета.Добавить(ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукции));
	КонецЦикла;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ИмяФильтра")
			И ДанныеЗаполнения.ИмяФильтра = "ЗаполнениеСВидомПродукции" Тогда
			ФильтрВидПродукции = ДанныеЗаполнения.ЗначениеФильтра;
			ОсобенностьУчета   = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ФильтрВидПродукции);
		КонецЕсли;
		Основание = ДанныеЗаполнения.Основание;
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияПеремещенияМеждуМОДИСМПИзПрикладногоДокумента(ИмяДокумента, ТоварыСерии, Штрихкоды);
	
	Запрос.УстановитьПараметр("ЭтаСсылка",         ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("КонечныеСтатусы",   Документы.ПеремещениеМеждуМОДИСМП.КонечныеСтатусы());
	Запрос.УстановитьПараметр("ОсобенностьУчета",  ОсобенностьУчета);
	Запрос.УстановитьПараметр("Период",            ДокументОбъект.Дата);
	
	Пакет        = Запрос.ВыполнитьПакет();
	ИндексТовары = Пакет.Количество() - ?(Штрихкоды = Неопределено, 1, 2);
	
	ДополнительныеПараметры = Новый Структура("ОтборПоПолям, ВозможноПустая", Новый Структура("Сторно", Ложь), Истина);
	ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание, ДополнительныеПараметры);
	
	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ОтборПоПолям", Новый Структура("Сторно", Истина));
		ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект.Товары, Пакет[ИндексТовары], Основание, ДополнительныеПараметры);
		
		СтрокаРеквизитов = "Отправитель, Получатель, ОтправительОбъект, ПолучательОбъект, ОтправительАдрес, ПолучательАдрес, ОтправительАдресСтрокой, ПолучательАдресСтрокой, ОтправительКодФИАС, ПолучательКодФИАС";
		РеквизитыШапкиДокумента = Новый Структура(СтрокаРеквизитов);
		
		ЗаполнитьЗначенияСвойств(РеквизитыШапкиДокумента, ДокументОбъект);
		
		ДокументОбъект.Отправитель             = РеквизитыШапкиДокумента.Получатель;
		ДокументОбъект.Получатель              = РеквизитыШапкиДокумента.Отправитель;
		ДокументОбъект.ОтправительОбъект       = РеквизитыШапкиДокумента.ПолучательОбъект;
		ДокументОбъект.ПолучательОбъект        = РеквизитыШапкиДокумента.ОтправительОбъект;
		ДокументОбъект.ОтправительАдрес        = РеквизитыШапкиДокумента.ПолучательАдрес;
		ДокументОбъект.ПолучательАдрес         = РеквизитыШапкиДокумента.ОтправительАдрес;
		ДокументОбъект.ОтправительАдресСтрокой = РеквизитыШапкиДокумента.ПолучательАдресСтрокой;
		ДокументОбъект.ПолучательАдресСтрокой  = РеквизитыШапкиДокумента.ОтправительАдресСтрокой;
		ДокументОбъект.ОтправительКодФИАС      = РеквизитыШапкиДокумента.ПолучательКодФИАС;
		ДокументОбъект.ПолучательКодФИАС       = РеквизитыШапкиДокумента.ОтправительКодФИАС;
		
		ДокументОбъект.Сторно = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияПеремещенияМеждуМОДИСМПИзПрикладногоДокумента(ИмяДокумента, ТабличныеЧастиТоварыСерии, ТабличнаяЧастьШтрихкоды)
	
	Если ТабличныеЧастиТоварыСерии = Неопределено Тогда
		ТабличныеЧастиТоварыСерии = Новый Массив;
		ТабличныеЧастиТоварыСерии.Добавить(ОписаниеТабличнойЧастиССуммамиИНДС());
	КонецЕсли;
	
	ТоварыСерииПоТабличнымЧастям = Новый Массив;
	ЭтоПервыйЭлемент = Истина;
	Для Каждого ТоварыСерии Из ТабличныеЧастиТоварыСерии Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика      КАК Характеристика,
		|	ТаблицаТовары.Серия               КАК Серия,
		|	СУММА(&ПолеКоличество)            КАК Количество,
		|	СУММА(&ПолеСумма)                 КАК Сумма,
		|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
		|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
		|ПОМЕСТИТЬ ТоварыСерии
		|ИЗ
		|	&ОписаниеДокументаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &ДокументОснование
		|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия
		|";
		Если ТоварыСерии.Серии <> "" Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаТовары.Номенклатура        КАК Номенклатура,
			|	ТаблицаТовары.Характеристика      КАК Характеристика,
			|	ТаблицаТовары.Серия               КАК Серия,
			|	СУММА(&ПолеКоличество)            КАК Количество,
			|	СУММА(&ПолеСумма)                 КАК Сумма,
			|	СУММА(&ПолеСуммаНДС)              КАК СуммаНДС,
			|	СУММА(&ПолеСуммаСНДС)             КАК СуммаСНДС
			|ПОМЕСТИТЬ ТоварыСерии
			|ИЗ
			|	&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ &ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		И ТаблицаСерии.Ссылка = &ДокументОснование
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &ДокументОснование
			|	И ТаблицаСерии.Ссылка ЕСТЬ NULL
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаТовары.Номенклатура,
			|	ТаблицаТовары.Характеристика,
			|	ТаблицаТовары.Серия
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия,
			|	СУММА(ТаблицаСерии.Количество),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.Сумма),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаНДС),
			|	СУММА(ВЫБОР КОГДА ТаблицаТовары.Количество = 0 ТОГДА 0
			|		ИНАЧЕ ТаблицаСерии.Количество / ТаблицаТовары.Количество КОНЕЦ * ТаблицаТовары.СуммаСНДС)
			|ИЗ
			|	&ОписаниеДокументаСерии КАК ТаблицаСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		(ВЫБРАТЬ
			|			ТаблицаТовары.Номенклатура    КАК Номенклатура,
			|			ТаблицаТовары.Характеристика  КАК Характеристика,
			|			СУММА(&ПолеКоличество)        КАК Количество,
			|			СУММА(&ПолеСумма)             КАК Сумма,
			|			СУММА(&ПолеСуммаНДС)          КАК СуммаНДС,
			|			СУММА(&ПолеСуммаСНДС)         КАК СуммаСНДС
			|		ИЗ
			|			&ОписаниеДокументаТовары КАК ТаблицаТовары
			|		ГДЕ
			|			ТаблицаТовары.Ссылка = &ДокументОснование
			|		СГРУППИРОВАТЬ ПО
			|			ТаблицаТовары.Номенклатура,
			|			ТаблицаТовары.Характеристика) КАК ТаблицаТовары
			|		ПО ТаблицаТовары.Номенклатура = ТаблицаСерии.Номенклатура
			|		И ТаблицаТовары.Характеристика = ТаблицаСерии.Характеристика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО ТаблицаСерии.Номенклатура = СправочникНоменклатура.Ссылка
			|ГДЕ
			|	ТаблицаСерии.Ссылка = &ДокументОснование
			|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаСерии.Номенклатура,
			|	ТаблицаСерии.Характеристика,
			|	ТаблицаСерии.Серия
			|";
		КонецЕсли;
		
		Если ЭтоПервыйЭлемент Тогда
			ЭтоПервыйЭлемент = Ложь;
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТоварыСерии", "");
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон("Документ.%1", ИмяДокумента);
		Если ЗначениеЗаполнено(ТоварыСерии.Товары) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Товары));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОписаниеДокументаТовары", ОписаниеДокумента);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОписаниеДокументаСерии", СтрШаблон("%1.%2", ОписаниеДокумента,ТоварыСерии.Серии));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеКоличество",         ТоварыСерии.ПолеКоличество);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаНДС",           ТоварыСерии.ПолеСуммаНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСуммаСНДС",          ТоварыСерии.ПолеСуммаСНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма",              ТоварыСерии.ПолеСумма);
		
		ТоварыСерииПоТабличнымЧастям.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТоварыСерииПоТабличнымЧастям, "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|");
	
	ТекстЗапроса = ТекстЗапроса
		+ ИнтеграцияИС.РазделительЗапросовВПакете()
		+ СтрШаблон(ШаблонОформленныеДокументы(), "ПеремещениеМеждуМОДИСМП");
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1)) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаИзЕдиницУчетаККоличествуКодов
	|ИЗ ТоварыСерии КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|ГДЕ
	|	Не (&ТребуетВзвешивания)
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Количество         КАК Количество
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	ТоварыСерии КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОформленныеТовары.Номенклатура,
	|	ОформленныеТовары.Характеристика,
	|	ОформленныеТовары.Серия,
	|	ВЫБОР
	|		КОГДА ОформленныеДокументы.Сторно
	|			ТОГДА ОформленныеТовары.Количество
	|		ИНАЧЕ
	|			-ОформленныеТовары.Количество
	|	КОНЕЦ
	|ИЗ
	|	Документ.ПеремещениеМеждуМОДИСМП.Товары КАК ОформленныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеМеждуМОДИСМП КАК ОформленныеДокументы
	|		ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыПеремещениеМеждуМОДИСМП КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.Номенклатура              КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика            КАК Характеристика,
	|	ТоварыКОформлению.Серия                     КАК Серия,
	|	СУММА(ТоварыКОформлению.Количество)         КАК Количество,
	|	СУММА(ТоварыКОформлению.Количество)         КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_ИтоговыеТоварыКОформлению
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОформлению.Количество) <> 0
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТ_ИтоговыеТоварыКОформлению.Номенклатура      КАК Номенклатура,
	|	ВТ_ИтоговыеТоварыКОформлению.Характеристика    КАК Характеристика,
	|	ВТ_ИтоговыеТоварыКОформлению.Серия             КАК Серия,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговыеТоварыКОформлению.Количество < 0
	|			ТОГДА -ВТ_ИтоговыеТоварыКОформлению.Количество
	|		ИНАЧЕ
	|			ВТ_ИтоговыеТоварыКОформлению.Количество
	|	КОНЕЦ                                          КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_ИтоговыеТоварыКОформлению.Количество < 0
	|			ТОГДА -ВТ_ИтоговыеТоварыКОформлению.Количество
	|		ИНАЧЕ
	|			ВТ_ИтоговыеТоварыКОформлению.Количество
	|	КОНЕЦ                                          КАК КоличествоУпаковок,
	|	ВТ_ИтоговыеТоварыКОформлению.Количество < 0    КАК Сторно
	|ИЗ
	|	ВТ_ИтоговыеТоварыКОформлению КАК ВТ_ИтоговыеТоварыКОформлению
	|;
	|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(ТекстЗапроса, "ОписаниеНоменклатурыИС", "Товары.Номенклатура");

	Если ТабличнаяЧастьШтрихкоды <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(
		"ВЫБРАТЬ
		|	Штрихкоды.%3 КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.%1.%2 КАК Штрихкоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеМеждуМОДИСМП.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
		|		ПО ОформленныеШтрихкоды.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументыПеремещениеМеждуМОДИСМП КАК Т)
		|		И ОформленныеШтрихкоды.ШтрихкодУпаковки = Штрихкоды.%3
		|ГДЕ
		|	Штрихкоды.Ссылка = &ДокументОснование
		|	И ОформленныеШтрихкоды.ШтрихкодУпаковки ЕСТЬ NULL
		|",
		ИмяДокумента,
		ТабличнаяЧастьШтрихкоды.ИмяТаблицыШтрихкодыУпаковок,
		ТабличнаяЧастьШтрихкоды.ИмяКолонкиШтрихкодУпаковки,
		);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийПеремещениеМеждуМОДИСМП(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= СкладОтправитель.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|									ТОГДА 6
	|								ИНАЧЕ 8
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|								ТОГДА 5
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|				И &ФактОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество > 0
	|							ИЛИ Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПолитикиУчетаСерийОтправитель.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ТоварыДляЗапроса.Номенклатура = Товары.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = Товары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерийОтправитель
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладОтправитель
	|			ПО (СкладОтправитель.Ссылка = &Склад)
	|				И (ПолитикиУчетаСерийОтправитель.Склад = &Склад)
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерийОтправитель.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статусы.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Функция СтруктураДействийПриДобавленииНовойСтрокиПрочееОприходованиеТоваров(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", Новый Структура("Дата, Валюта, ВидЦены", Объект.Дата, Объект.Валюта, Объект.ВидЦены));
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначение");
	
	Возврат СтруктураДействий;
	
КонецФункции

//++ НЕ УТ
Функция СтруктураДействийПриДобавленииНовойСтрокиПроизводство(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Возврат СтруктураДействий;
	
КонецФункции
//-- НЕ УТ

Функция СтруктураДействийПриДобавленииНовойСтрокиРеализацияТоваровУслуг(Объект)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиРасходныйОрдерНаТовары(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровПоставщику(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыУказанияСерий  = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВозвратТоваровПоставщику);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПринятойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиКорректировкаРеализации(Объект)
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	ДатаОснования = Объект.Дата;
	ИспользуетсяКоличествоУпаковок = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДатаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Дата");
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИспользуетсяКоличествоУпаковок = Истина;
		КонецЕсли;
	КонецЕсли;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	ПараметрыДействия.Дата = ДатаОснования;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьВариантОтраженияКорректировкиРеализации", Объект.ВидКорректировки);
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиПриобретениеТоваровУслуг(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровОтКлиента(Объект)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Возврат СтруктураДействий;
	
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиПоступления(ДокументПоступления)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументПоступления);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтроки(ДокументОбъект)

	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииНовойСтрокиПриобретениеТоваровУслуг(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		
		СтруктураДействий = СтруктураДействийПриДобавленииНовойСтрокиВозвратТоваровОтКлиента(ДокументОбъект);
		
	Иначе
		
		СтруктураДействий = Новый Структура;
		
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиРеализацияТоваровУслуг(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиРасходныйОрдерНаТовары(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Возврат СтруктураДействий;
	
КонецФункции
	
Функция СтруктураДействийПриИзмененииСтрокиПрочееОприходованиеТоваров(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Возврат СтруктураДействий;
	
КонецФункции

//++ НЕ УТ
Функция СтруктураДействийПриИзмененииСтрокиПроизводство(Объект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	Возврат СтруктураДействий;
	
КонецФункции
//-- НЕ УТ

Функция СтруктураДействийПриИзмененииСтрокиВозвратТоваровПоставщику(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриИзмененииСтрокиКорректировкаРеализации(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Возврат СтруктураДействий;
	
КонецФункции

Функция СтруктураДействийПриДобавленииНовойСтрокиАктОРасхождениях(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураПересчетаСуммыСуффикс = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураПересчетаСуммыСуффикс.Вставить("Суффикс","ПоДокументу"); 
	СтруктураДействий.Вставить("ПересчитатьСуммуНДССуффикс", СтруктураПересчетаСуммыСуффикс);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДССуффикс", СтруктураПересчетаСуммыСуффикс);
	СтруктураДействий.Вставить("ПересчитатьСуммуСуффикс", "ПоДокументу");
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус");
	
	Возврат СтруктураДействий;
	
КонецФункции

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий)

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

#КонецОбласти

#Область ЗапросВидПродукцииМаркируемойПродукцииПоДокумента

Функция ТекстЗапросаВидыПродукцииДокумента(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ Различные
	|	&ОпределениеВидаПродукции               КАК ВидПродукции
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка В (&ДокументСсылка)
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|";
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
	
	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаМаркируемаяПродукцияДокумента(ДокументСсылка, ИмяТабЧастиТовары = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	&ОпределениеВидаПродукции               КАК ВидПродукции
	|ИЗ
	|	Документ.%1.%2 КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка
	|	И СправочникНоменклатура.ОсобенностьУчета В (&ОсобенностьУчета)
	|";
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
	
	ИнтеграцияИСУТ.ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "СправочникНоменклатура");
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

#Область ОпределитьДокументОснованиеДляСверкиКодовМаркировки

Функция ОпределитьДокументОснованиеСверкиКодовАктОРасхождениях(ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	АктОРасхожденияхТовары.Реализация КАК ДокументОснование
				|ИЗ
				|	Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхождениях
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхТовары
				|		ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
				|ГДЕ
				|	АктОРасхождениях.Ссылка = &ДокументСсылка
				|	И НЕ АктОРасхождениях.ПометкаУдаления
				|";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДокументОснованиеСверкиКодовАктОРасхожденияхПослеПриемки(ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	АктОРасхожденияхТовары.ДокументОснование КАК ДокументОснование
				|ИЗ
				|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхождениях
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхТовары
				|		ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
				|ГДЕ
				|	АктОРасхождениях.Ссылка = &ДокументСсылка
				|	И НЕ АктОРасхождениях.ПометкаУдаления
				|";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДокументОснованиеСверкиКодовКорректировкаПриобретения(ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ
				|	КорректировкаПриобретения.АктОРасхожденияхПослеПриемкиОснование КАК ДокументОснование
				|ИЗ
				|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
				|ГДЕ
				|	КорректировкаПриобретения.Ссылка = &ДокументСсылка
				|";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			Возврат Выборка.ДокументОснование;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПредставлениеКолонкиРасхожденияПоКодамМаркировки

// Формирует представление для колонки Расхождения по кодам маркировки с типом расхождения недостача
// Параметры:
//   КоличествоНедостача - Число - расхождение по кодам маркировки.
//   РасхождениеПоСтроке - Число - расхождение в строке товары
//   ПараметрыЗаполнения - Структура - со свойствами:
//    * ЭтоОСУ - Булево - есть коды ОСУ
//    * УчитыватьРасхожденияПоСтроке - Булево - Истина, если есть необработанные строки с расхождениями
//
// Возвращаемое значение:
//   ФорматированнаяСтрока - представление расхождения по кодам маркировки.
//
Функция СформироватьПредставлениеНедостача(КоличествоНедостача, РасхождениеПоСтроке, ПараметрыЗаполнения) Экспорт
	
	ЭтоОСУ                       = ПараметрыЗаполнения.ЭтоОСУ;
	УчитыватьРасхожденияПоСтроке = ПараметрыЗаполнения.УчитыватьРасхожденияПоСтроке;
	
	ПредставлениеНедостача = "";
	Недостача = КоличествоНедостача;
	
	Если УчитыватьРасхожденияПоСтроке Тогда
		Недостача = Мин(КоличествоНедостача, -РасхождениеПоСтроке);
	КонецЕсли;
	
	Если Недостача > 0 Тогда
		
		ПредставлениеНедостача = СтрШаблон("-%1", Строка(Недостача));
		
		Если ЭтоОСУ Тогда
			ПредставлениеНедостача = СтрШаблон(
				"%1, %2",
				ПредставлениеНедостача,
				НСтр("ru = 'ОСУ';
					|en = 'Volume and grade accounting'"));
		КонецЕсли;
	
		КоличествоНедостача = КоличествоНедостача - Недостача;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеНедостача);
	
КонецФункции

// Формирует представление для колонки Расхождения по кодам маркировки с типом расхождения излишек
// Параметры:
//   КоличествоИзлишек - Число - расхождение по кодам маркировки.
//   РасхождениеПоСтроке - Число - расхождение в строке товары
//   ПараметрыЗаполнения - Структура - со свойствами:
//    * ЭтоОСУ - Булево - есть коды ОСУ
//    * УчитыватьРасхожденияПоСтроке - Булево - Истина, если есть необработанные строки с расхождениями
//    
// Возвращаемое значение:
//   ФорматированнаяСтрока - представление расхождения по кодам маркировки.
//
Функция СформироватьПредставлениеИзлишек(КоличествоИзлишек, РасхождениеПоСтроке, ПараметрыЗаполнения) Экспорт
	
	ЭтоОСУ                       = ПараметрыЗаполнения.ЭтоОСУ;
	УчитыватьРасхожденияПоСтроке = ПараметрыЗаполнения.УчитыватьРасхожденияПоСтроке;
	
	ПредставлениеИзлишек = "";
	Излишек = КоличествоИзлишек;
	
	Если УчитыватьРасхожденияПоСтроке Тогда
		Излишек = Мин(КоличествоИзлишек, РасхождениеПоСтроке);
	КонецЕсли;
	
	Если Излишек > 0 Тогда
		
		ПредставлениеИзлишек = СтрШаблон("+%1", Строка(Излишек));
		
		Если ЭтоОСУ Тогда
			ПредставлениеИзлишек = СтрШаблон(
				"%1, %2",
				ПредставлениеИзлишек,
				НСтр("ru = 'ОСУ';
					|en = 'Volume and grade accounting'"));
		КонецЕсли;
		
		КоличествоИзлишек = КоличествоИзлишек - Излишек;
	КонецЕсли;   
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеИзлишек);
	
КонецФункции

// Формирует представление для колонки Расхождения по кодам маркировки для строки без расхождений по товарам (пересорт по кодам маркировки)
// Параметры:
//   КоличествоИзлишек - Число - расхождение по кодам маркировки, излишек
//   КоличествоНедостача - Число - расхождение в кодам маркировки, недостача
//   РасхождениеПоСтроке - Число - расхождение упаковок по строке товары
//   ЗаполняемаяСтрока - ДанныеФормыЭлементКоллекции, СтрокаТаблицыЗначений - заполняемая строка коллекции товары
//   ПараметрыЗаполнения - Структура - со свойствами:
//    * ЭтоОСУ - Булево - есть коды ОСУ
//    * УчитыватьРасхожденияПоСтроке - Булево - Истина, если есть необработанные строки с расхождениями
//
// Возвращаемое значение:
//   ФорматированнаяСтрока - представление расхождения по кодам маркировки.
//
Функция СформироватьПредставлениеПересорт(КоличествоИзлишек, КоличествоНедостача,
	РасхождениеПоСтроке, ЗаполняемаяСтрока, ПараметрыЗаполнения) Экспорт
	
	ЭтоОСУ                       = ПараметрыЗаполнения.ЭтоОСУ;
	УчитыватьРасхожденияПоСтроке = ПараметрыЗаполнения.УчитыватьРасхожденияПоСтроке;
	
	Излишек = Мин(КоличествоИзлишек, ЗаполняемаяСтрока.КоличествоУпаковок);
	Недостача = Мин(КоличествоНедостача, ЗаполняемаяСтрока.КоличествоУпаковокПоДокументу);
	
	Если УчитыватьРасхожденияПоСтроке И РасхождениеПоСтроке <> 0 Тогда // Излишек
		ДоступноеРасхождениеПоКодам = Излишек - Недостача;
		Если ДоступноеРасхождениеПоКодам < РасхождениеПоСтроке Тогда // в ТЧ товары есть доп. строка с недостачей
			Недостача = Излишек - РасхождениеПоСтроке;
		ИначеЕсли ДоступноеРасхождениеПоКодам > РасхождениеПоСтроке Тогда // в ТЧ товары есть доп. строка с излишком
			Излишек = Недостача + РасхождениеПоСтроке;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеПересорт = "";
	
	Если Излишек > 0 Тогда
		ПредставлениеПересорт = СтрШаблон("+%1",Строка(Излишек));
		КоличествоИзлишек = КоличествоИзлишек - Излишек;
	КонецЕсли;
	
	Если Недостача > 0 Тогда
		Если Излишек > 0 Тогда
			ПредставлениеПересорт = СтрШаблон("%1 / -%2",ПредставлениеПересорт, Строка(Недостача));
		Иначе
			ПредставлениеПересорт =  СтрШаблон("-%1", Строка(Недостача));
		КонецЕсли;
		КоличествоНедостача = КоличествоНедостача - Недостача;
	КонецЕсли;
	
	Если ЭтоОСУ Тогда
		ПредставлениеПересорт = СтрШаблон(
			"%1, %2",
			ПредставлениеПересорт,
			НСтр("ru = 'ОСУ';
				|en = 'Volume and grade accounting'"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПересорт);
	
КонецФункции

#КонецОбласти

#Область ОтражениеРезультатаПроверкиИПодбораВДокументе

// Переносит маркируемую продукцию из формы проверки и подбора в документ Расходный ордер на товары
//   * Удаляет из табличных частей Товары, Серии отсутствующую в данных проверки маркируемую продукцию.
//   * Не меняет прочие товарные строки.
// 
// Параметры:
//  ДокументОбъект           - ДокументОбъект.РасходныйОрдерНаТовары, ДокументОбъект.ПриходныйОрдерНаТовары - документ к изменению.
//  ПараметрыОкончанияПроверки - cм. ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
//
Процедура ОтразитьИзменениеКоличестваВТабличныхЧастяхТоваровСкладскогоДокумента(ДокументОбъект, ПараметрыОкончанияПроверки)
	
	МультиПараметрыУказанияСерий = Истина;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		ИмяТаблицыТоваровОбъекта = "ОтгружаемыеТовары";
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтборРазмещениеТоваров") Тогда
		ИмяТаблицыТоваровОбъекта = "ТоварыОтбор";
	Иначе 
		ИмяТаблицыТоваровОбъекта = "Товары";
		МультиПараметрыУказанияСерий = Ложь;
	КонецЕсли; 
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект[ИмяТаблицыТоваровОбъекта].Выгрузить();	//ТаблицаЗначений
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);
	
	Запрос.УстановитьПараметр("Подобрано", ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ОсобенностьУчета", ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ПараметрыОкончанияПроверки.ВидПродукцииИС));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	&ОтборПоДействию
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура,
	|	Подобрано.Характеристика,
	|	Подобрано.Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество
	|ПОМЕСТИТЬ МаркируемыеТовары
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Товары.Номенклатура
	|		И СправочникНоменклатура.ОсобенностьУчета = &ОсобенностьУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	МаркируемыеТовары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|УПОРЯДОЧИТЬ ПО
	|	Недостача Убыв";
	
	Если ИмяТаблицыТоваровОбъекта = "ОтгружаемыеТовары" Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборПоДействию",
			"Товары.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.НеОтгружать)");
		Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&ОтборПоДействию",
			"ИСТИНА");
	КонецЕсли; 
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Серия";

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	СтруктураЗаполнения = Новый Структура("Добавление, Изменение",
		СтруктураДействийПриДобавленииНовойСтрокиРасходныйОрдерНаТовары(ДокументОбъект),
		СтруктураДействийПриИзмененииСтрокиРасходныйОрдерНаТовары(ДокументОбъект));
	
	Если МультиПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы[ИмяДокумента])[ИмяТаблицыТоваровОбъекта];
	Иначе
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы[ИмяДокумента]);
	КонецЕсли;
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = СтрокаТаблицыТовары.Количество;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				Если НЕ СтрокаТаблицыТовары.Удалить Тогда
					ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				ОбработатьСтрокуТабличнойЧасти(СтрокаТаблицыТовары, СтруктураЗаполнения.Изменение);
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				
				Если ИмяТаблицыТоваровОбъекта = "ОтгружаемыеТовары" Тогда
					Если ЗначениеЗаполнено(НоваяСтрокаТовары.УпаковочныйЛистРодитель) Тогда
						НоваяСтрокаТовары.Действие = ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить");
					ИначеЕсли ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")
						Или ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Подготовлен") Тогда
						НоваяСтрокаТовары.Действие = ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отобрать");
					ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.Действие)
						И (ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Проверен")
							ИЛИ ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке")
							ИЛИ ДокументОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке")) Тогда
						НоваяСтрокаТовары.Действие = ПредопределенноеЗначение("Перечисление.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить");
					КонецЕсли;
				КонецЕсли;
				
				ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураЗаполнения.Добавление);
				
				Если НЕ СтруктураЗаполнения.Добавление.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ДокументОбъект.Склад, ПараметрыУказанияСерий));
					ОбработатьСтрокуТабличнойЧасти(НоваяСтрокаТовары, СтруктураДействий);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект[ИмяТаблицыТоваровОбъекта].Загрузить(ТаблицаТовары);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ДобавитьЭлементСостояниеГИСМТПриСоздании(Форма) Экспорт
	
	СостояниеЭДО = "ПредставлениеСостояния";
	
	Если Форма.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаСписка" Тогда
		ИмяСписка = "СписокВозвратыТоваровОтКлиентов";
	ИначеЕсли Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаСписка" Тогда
		ИмяСписка = "СписокКорректировкиРеализации";
		СостояниеЭДО = "СписокКорректировкиРеализацииСостояниеВерсииЭД";
	ИначеЕсли Форма.ИмяФормы = "Документ.КорректировкаПриобретения.Форма.ФормаСписка" Тогда
		ИмяСписка = "СписокКорректировкиПриобретений";
		СостояниеЭДО = "СписокКорректировкиПриобретенийСостояниеВерсииЭД";
	ИначеЕсли Форма.ИмяФормы = "Обработка.ЖурналДокументовЗакупки.Форма.СписокДокументов" Тогда
		ИмяСписка = "СписокДокументыЗакупки";
		СостояниеЭДО = "СостояниеЭДО";
	ИначеЕсли Форма.ИмяФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов" Тогда
		ИмяСписка = "СписокДокументыПродажи";
	ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаСписка" Тогда
		ИмяСписка = "СписокРеализацииТоваровУслуг";
	ИначеЕсли Форма.ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаСписка" Тогда
		ИмяСписка = "СписокДокументыПоступления";
	КонецЕсли;
	
	ГруппаСостояниеЭДО = Форма.Элементы.Добавить("ГруппаСостояниеЭДО", Тип("ГруппаФормы"), Форма.Элементы[ИмяСписка]);
	ГруппаСостояниеЭДО.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	Форма.Элементы.Переместить(Форма.Элементы[СостояниеЭДО], ГруппаСостояниеЭДО);
	
	НовыйЭлемент = Форма.Элементы.Добавить("СписокСостояниеГИСМТ", Тип("ПолеФормы"), ГруппаСостояниеЭДО);
	НовыйЭлемент.ПутьКДанным = ИмяСписка + ".СостояниеГИСМТ";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
