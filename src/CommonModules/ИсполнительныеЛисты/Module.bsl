
#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4db-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ТарифыПлатежныхАгентов);
	
КонецПроцедуры

#КонецОбласти

// Заполняет движения условиями удержания по исполнительному документу.
//
// Параметры:
//	Движения
//	ДатаДействия
//	ИсполнительныйДокумент
//	УсловияИсполнительногоЛиста - структура с полями
//		СпособРасчета
//		ВидБазы.
//		Процент
//		Сумма
//		Числитель
//		Знаменатель
//		ПрожиточныйМинимум
//		Предел
//		УчитыватьБольничныеЛисты
//		ПлатежныйАгент
//		ТарифПлатежногоАгента
//
Процедура ЗарегистрироватьУсловияИсполнительногоЛиста(Движения, ДатаДействия, ИсполнительныйДокумент, УсловияИсполнительногоЛиста) Экспорт
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсполнительныйДокумент, "ФизическоеЛицо,Организация");
	
	// Условия удержания
	НоваяСтрока = Движения.УсловияУдержанияПоИсполнительномуДокументу.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, УсловияИсполнительногоЛиста);
	НоваяСтрока.Период = ДатаДействия;
	НоваяСтрока.ИсполнительныйДокумент = ИсполнительныйДокумент;
	НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
	НоваяСтрока.Организация = ДанныеДокумента.Организация;
	
	Движения.УсловияУдержанияПоИсполнительномуДокументу.Записывать = Истина;
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Исполнительный лист».
//
Процедура РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор, МесяцНачисления, ПогашениеЗадолженности = Неопределено) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл		
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;	
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.БазовыйПериодНачало КАК Период,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК Месяц,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	УсловияУдержания.СпособРасчета,
		|	УсловияУдержания.ВидБазы,
		|	УсловияУдержания.Процент,
		|	УсловияУдержания.Сумма,
		|	УсловияУдержания.Числитель,
		|	УсловияУдержания.Знаменатель,
		|	УсловияУдержания.Предел,
		|	УсловияУдержания.ПрожиточныйМинимум,
		|	УсловияУдержания.УчитыватьБольничныеЛисты,
		|	УсловияУдержания.ПлатежныйАгент,
		|	УсловияУдержания.Получатель,
		|	УсловияУдержания.ВеличинаПрожиточногоМинимума
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержания
		|		ПО (УсловияУдержания.ИсполнительныйДокумент = ДанныеДляРасчета.ИсполнительныйДокумент)
		|			И (УсловияУдержания.Период = ДанныеДляРасчета.Период)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
		
	КатегорииБольничного = ПланыВидовРасчета.Начисления.КатегорииОплатыБольничного();
	ПоказательРасчетнаяБазаИсполнительногоЛиста = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	ПоказательИсчисленныйПоИсполнительномуЛистуНДФЛ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ИсчисленныйПоИсполнительномуЛистуНДФЛ");
	
	Если ПогашениеЗадолженности = Неопределено Тогда
		ПогашениеЗадолженности = Обработки.МенеджерРасчетаЗарплаты.ОснованияПогашенияЗадолженности(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля("ИсполнительныйДокумент") Цикл
		ТолькоЗадолженность = ПогашениеЗадолженности.Найти(Выборка.ИсполнительныйДокумент) <> Неопределено;
		Пока Выборка.Следующий() Цикл
			Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
			Если Строка.ФиксЗаполнение Тогда 
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБазаИсполнительногоЛиста");
				РасчетнаяБазаИсполнительногоЛиста = СтрокаПоказателя.Значение;
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "ИсчисленныйПоИсполнительномуЛистуНДФЛ");
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = СтрокаПоказателя.Значение;
			ИначеЕсли ТолькоЗадолженность Тогда 
				РасчетнаяБазаИсполнительногоЛиста = 0;
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
			Иначе 
				РасчетнаяБазаИсполнительногоЛиста = Строка.Дополнительно.СуммаДополнения;
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = Строка.Дополнительно.СуммаНДФЛ;
				Для Каждого СтрокаРасшифровки Из Строка.Дополнительно.РасшифровкаРасчетнойБазы Цикл
					РасчетнаяБазаИсполнительногоЛиста = РасчетнаяБазаИсполнительногоЛиста + СтрокаРасшифровки.Сумма + СтрокаРасшифровки.СуммаДополнения;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = ИсчисленныйПоИсполнительномуЛистуНДФЛ + СтрокаРасшифровки.СуммаНДФЛ;
					Если Не Выборка.УчитыватьБольничныеЛисты И КатегорииБольничного.Найти(СтрокаРасшифровки.КатегорияБазовогоНачисления) <> Неопределено Тогда
						// Больничный не учитывается, исключаем его сумму и долю пришедшегося на него НДФЛ, но дополнение оставляем.
						РасчетнаяБазаИсполнительногоЛиста = РасчетнаяБазаИсполнительногоЛиста - СтрокаРасшифровки.Сумма;
						ИсчисленныйПоИсполнительномуЛистуНДФЛ = ИсчисленныйПоИсполнительномуЛистуНДФЛ - СтрокаРасшифровки.СуммаНДФЛ;
					КонецЕсли;
				КонецЦикла;
				Если Выборка.ВидБазы = Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум Тогда
					// Расчетная база по данным прожиточного минимума.
					РасчетнаяБазаИсполнительногоЛиста = Выборка.ВеличинаПрожиточногоМинимума;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
					Строка.УдерживатьВЦеломЗаМесяц = Истина;
				КонецЕсли;
				Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
					// Показатели не используются.
					РасчетнаяБазаИсполнительногоЛиста = 0;
					ИсчисленныйПоИсполнительномуЛистуНДФЛ = 0;
					Строка.УдерживатьВЦеломЗаМесяц = Истина;
				КонецЕсли;
				// Расчетная база
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "РасчетнаяБазаИсполнительногоЛиста");
				Если СтрокаПоказателя = Неопределено Тогда 
					СтрокаПоказателя = Строка.Показатели.Добавить();
					СтрокаПоказателя.Показатель = ПоказательРасчетнаяБазаИсполнительногоЛиста;
				КонецЕсли;
				СтрокаПоказателя.Значение = РасчетнаяБазаИсполнительногоЛиста;
				// НДФЛ
				СтрокаПоказателя = РасчетЗарплатыРасширенный.СтрокаЗначенияПоказателяПоИдентификатору(Строка.Показатели, "ИсчисленныйПоИсполнительномуЛистуНДФЛ");
				Если СтрокаПоказателя = Неопределено Тогда 
					СтрокаПоказателя = Строка.Показатели.Добавить();
					СтрокаПоказателя.Показатель = ПоказательИсчисленныйПоИсполнительномуЛистуНДФЛ;
				КонецЕсли;
				СтрокаПоказателя.Значение = ИсчисленныйПоИсполнительномуЛистуНДФЛ;
			КонецЕсли;
			Если НачалоМесяца(Строка.ДатаНачала) < НачалоМесяца(НачалоДействияПостановленияПравительства1908()) Тогда
				ИсчисленныйПоИсполнительномуЛистуНДФЛ = Макс(ИсчисленныйПоИсполнительномуЛистуНДФЛ, 0);
			КонецЕсли;
			РасчетнаяБаза = РасчетнаяБазаИсполнительногоЛиста - ИсчисленныйПоИсполнительномуЛистуНДФЛ;
			Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
				Строка.Результат = Выборка.Сумма;
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
				Строка.Результат = РасчетнаяБаза * Выборка.Процент / 100;
			ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
				Строка.Результат = РасчетнаяБаза * Выборка.Числитель / Выборка.Знаменатель;
			КонецЕсли;
			// Если исполнительный лист добавлен только для погашения задолженности - обнуляем результат.
			Если ТолькоЗадолженность Тогда
				Строка.Результат = 0;
			КонецЕсли;
			Строка.Результат = Строка.Результат + Строка.Задолженность;
			Строка.Получатель = Выборка.Получатель;
			Строка.ЗаписьРасчета.Получатель = Выборка.Получатель;
			Строка.ПлатежныйАгент = Выборка.ПлатежныйАгент;
			Строка.ЗаписьРасчета.ПлатежныйАгент = Выборка.ПлатежныйАгент;
		КонецЦикла;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры	

// Заполняет набор записей регистра УдержанийПоИсполнительнымДокументам при расчете для того, 
// чтобы учесть результаты расчета удержаний по исполнительным документам при расчете вознаграждения платежным агентам.
//
Процедура ЗарегистрироватьРасчетУдержанийПоИсполнительнымДокументам(ОчередностьРасчета, НаборыЗаписей, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.Получатель,
		|	Удержания.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания,
		|	СУММА(Удержания.Результат) КАК СуммаУдержания
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержаний.ИсполнительныйЛист)
		|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	Удержания.Получатель,
		|	Удержания.ДокументОснование,
		|	Удержания.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	СУММА(Удержания.Результат) <> 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	УдержанияПоДокументам = ПустаяТаблицаУдержанияПоДокументам();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(УдержанияПоДокументам.Добавить(), Выборка);
	КонецЦикла;
	
	СформироватьУдержанияПоИсполнительнымДокументам(НаборыЗаписей, УдержанияПоДокументам);
	ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, НаборыЗаписей.УдержанияПоИсполнительнымДокументам);
	
КонецПроцедуры

// Выполняет расчет записей, если способ расчета - «Вознаграждение платежного агента».
//
Процедура РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиРасчета, МенеджерВременныхТаблиц, ИсключаемыйРегистратор) Экспорт
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ВознаграждениеПлатежногоАгента Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СтрокиРасчета Цикл		
		ИдентификаторыСтрок.Добавить(СтрокаТаблицы.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаТаблицы.ИдентификаторСтроки, СтрокаТаблицы);
	КонецЦикла;	
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ИдентификаторСтроки,
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.БазовыйПериодНачало КАК Период,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.БазовыйПериодКонец,
		|	Удержания.Получатель,
		|	Удержания.ПлатежныйАгент
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТРегистрРасчета_Удержания КАК Удержания
		|ГДЕ
		|	Удержания.ИдентификаторСтроки В(&ИдентификаторыСтрок)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТДанныеДляРасчета");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТДанныеДляРасчета";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.БазовыйПериодНачало) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.БазовыйПериодКонец) КАК ОкончаниеПериода
		|ИЗ
		|	ВТДанныеДляРасчета КАК Удержания";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	УсловияУдержания.Получатель,
		|	УсловияУдержания.ПлатежныйАгент
		|ПОМЕСТИТЬ ВТФильтрУдержаний
		|ИЗ
		|	ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО УсловияУдержания.ИсполнительныйДокумент = ДанныеДляРасчета.ИсполнительныйДокумент
		|			И УсловияУдержания.Период = ДанныеДляРасчета.Период";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТФильтрУдержаний");
	
	ЗарплатаКадры.СоздатьПустуюВТ(МенеджерВременныхТаблиц, "РегистрНакопления.УдержанияПоИсполнительнымДокументам");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("Регистратор", ИсключаемыйРегистратор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ) КАК Месяц,
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|	УдержанияПоИсполнительнымДокументам.Получатель КАК Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент КАК ПлатежныйАгент,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаУдержанияОборот) КАК СуммаУдержанияОборот,
		|	СУММА(УдержанияПоИсполнительнымДокументам.СуммаВознагражденияПлатежногоАгентаОборот) КАК СуммаВознагражденияПлатежногоАгентаОборот
		|ПОМЕСТИТЬ ВТСуммыУдержаний
		|ИЗ
		|	(ВЫБРАТЬ
		|		УдержанияОбороты.Период КАК Период,
		|		УдержанияОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|		УдержанияОбороты.Получатель КАК Получатель,
		|		УдержанияОбороты.ПлатежныйАгент КАК ПлатежныйАгент,
		|		УдержанияОбороты.СуммаУдержания КАК СуммаУдержанияОборот,
		|		УдержанияОбороты.СуммаВознагражденияПлатежногоАгента КАК СуммаВознагражденияПлатежногоАгентаОборот,
		|		УдержанияОбороты.ИсполнительныйДокумент КАК ИсполнительныйДокумент
		|	ИЗ
		|		РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияОбороты
		|	ГДЕ
		|		УдержанияОбороты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (УдержанияОбороты.ФизическоеЛицо, УдержанияОбороты.Получатель, УдержанияОбороты.ПлатежныйАгент) В
		|				(ВЫБРАТЬ
		|					Условия.ФизическоеЛицо,
		|					Условия.Получатель,
		|					Условия.ПлатежныйАгент
		|				ИЗ
		|					ВТФильтрУдержаний КАК Условия)
		|		И УдержанияОбороты.Регистратор <> &Регистратор
		|		И НЕ УдержанияОбороты.ОграничениеВзыскания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияОбороты.Период,
		|		УдержанияОбороты.ФизическоеЛицо,
		|		УдержанияОбороты.Получатель,
		|		УдержанияОбороты.ПлатежныйАгент,
		|		УдержанияОбороты.СуммаУдержания,
		|		УдержанияОбороты.СуммаВознагражденияПлатежногоАгента,
		|		УдержанияОбороты.ИсполнительныйДокумент
		|	ИЗ
		|		ВТРегистрНакопления_УдержанияПоИсполнительнымДокументам КАК УдержанияОбороты
		|	ГДЕ
		|		УдержанияОбороты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|		И (УдержанияОбороты.ФизическоеЛицо, УдержанияОбороты.Получатель, УдержанияОбороты.ПлатежныйАгент) В
		|				(ВЫБРАТЬ
		|					Условия.ФизическоеЛицо,
		|					Условия.Получатель,
		|					Условия.ПлатежныйАгент
		|				ИЗ
		|					ВТФильтрУдержаний КАК Условия)) КАК УдержанияПоИсполнительнымДокументам
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияПоИсполнительнымДокументам.ФизическоеЛицо,
		|	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент,
		|	УдержанияПоИсполнительнымДокументам.Получатель,
		|	УдержанияПоИсполнительнымДокументам.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(УдержанияПоИсполнительнымДокументам.Период, МЕСЯЦ)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТСуммыУдержаний");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ПрименяемыеТарифы.Получатель КАК Получатель,
		|	ПрименяемыеТарифы.ПлатежныйАгент КАК ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ПрименяемыеТарифы.Период, МЕСЯЦ) КАК Период,
		|	СуммыУдержаний.СуммаУдержанияОборот,
		|	ШкалаТарифа.Ссылка КАК Тариф,
		|	ВЫБОР
		|		КОГДА ШкалаТарифа.Порог = 0
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ПриоритетПорога,
		|	ШкалаТарифа.Порог КАК Порог,
		|	ШкалаТарифа.Процент,
		|	ШкалаТарифа.Сумма,
		|	ШкалаТарифа.МинимальнаяСумма,
		|	ШкалаТарифа.МаксимальнаяСумма
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК ПрименяемыеТарифы
		|		ПО ДанныеДляРасчета.ИсполнительныйДокумент = ПрименяемыеТарифы.ИсполнительныйДокумент
		|			И ДанныеДляРасчета.Период = ПрименяемыеТарифы.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТарифыПлатежныхАгентов.Шкала КАК ШкалаТарифа
		|		ПО (ПрименяемыеТарифы.ТарифПлатежногоАгента = ШкалаТарифа.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыУдержаний КАК СуммыУдержаний
		|		ПО (СуммыУдержаний.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
		|			И (СуммыУдержаний.ИсполнительныйДокумент = ПрименяемыеТарифы.ИсполнительныйДокумент)
		|			И (СуммыУдержаний.Получатель = ПрименяемыеТарифы.Получатель)
		|			И (СуммыУдержаний.ПлатежныйАгент = ПрименяемыеТарифы.ПлатежныйАгент)
		|			И (СуммыУдержаний.Месяц = НАЧАЛОПЕРИОДА(ДанныеДляРасчета.Период, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Получатель,
		|	ПлатежныйАгент,
		|	Период,
		|	ДанныеДляРасчета.ИсполнительныйДокумент,
		|	ДанныеДляРасчета.ИдентификаторСтроки,
		|	Тариф,
		|	ПриоритетПорога,
		|	Порог";
	
	РаспределяемыеСуммы = Новый ТаблицаЗначений;
	РаспределяемыеСуммы.Колонки.Добавить("Строка");
	РаспределяемыеСуммы.Колонки.Добавить("СуммаУдержанияОборот");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ПлатежныйАгент") Цикл
				Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
					Тариф = Неопределено;
					СуммаУдержанияОборот = 0;
					РаспределяемыеСуммы.Очистить();
					Пока Выборка.СледующийПоЗначениюПоля("ИсполнительныйДокумент") Цикл
						СуммаУдержанияОборот = СуммаУдержанияОборот + Выборка.СуммаУдержанияОборот;
						Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
							Строка = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
							Строка.Получатель = Выборка.Получатель;
							Строка.ПлатежныйАгент = Выборка.ПлатежныйАгент;
							
							СтрокаРаспределения = РаспределяемыеСуммы.Добавить();
							СтрокаРаспределения.Строка = Строка;
							СтрокаРаспределения.СуммаУдержанияОборот = Выборка.СуммаУдержанияОборот;
							
							Пока Выборка.Следующий() Цикл
								Тариф = Новый Структура("Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма");
								ЗаполнитьЗначенияСвойств(Тариф, Выборка);
								Если СуммаУдержанияОборот <= Выборка.Порог Или Выборка.Порог = 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					
					Если Тариф = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаВознагражденияПлатежногоАгента = РазмерВознагражденияПлатежногоАгента(
						СуммаУдержанияОборот, Тариф.Процент, Тариф.Сумма, Тариф.МинимальнаяСумма, Тариф.МаксимальнаяСумма);
						
					Суммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
						СуммаВознагражденияПлатежногоАгента,
						ОбщегоНазначения.ВыгрузитьКолонку(РаспределяемыеСуммы, "СуммаУдержанияОборот"));
						
					Если Суммы = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Индекс = 0;
					Для Каждого РаспределяемаяСтрока Из РаспределяемыеСуммы Цикл
						РаспределяемаяСтрока.Строка.Результат = Суммы[Индекс];
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);

КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Удержания - таблица значений с колонками
//			ИсполнительныйДокумент.
//			Получатель
//			ПлатежныйАгент
//			МесяцУдержания
//			СуммаУдержания
//			СуммаВознагражденияПлатежногоАгента.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьУдержанияПоИсполнительнымДокументам(Движения, Удержания, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Суммы в строках, где не заполнен исполнительный документ (это вознаграждения агента), 
	// распределяем пропорционально по получателю и платежному агенту.
	
	РаспределяемыеСуммы = Новый ТаблицаЗначений;
	РаспределяемыеСуммы.Колонки.Добавить("Получатель");
	РаспределяемыеСуммы.Колонки.Добавить("ПлатежныйАгент");
	РаспределяемыеСуммы.Колонки.Добавить("Сумма");
	
	ОтборСтрок = Новый Структура("Получатель, ПлатежныйАгент");
	
	// Переносим строки вознаграждения в таблицу распределяемых сумм.
	ИсполнительныеДокументы = Новый Массив;
	УдаляемыеСтроки = Новый Массив;
	Для Каждого Строка Из Удержания Цикл
		Если ЗначениеЗаполнено(Строка.ИсполнительныйДокумент) Тогда
			ИсполнительныеДокументы.Добавить(Строка.ИсполнительныйДокумент);
		Иначе
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Строка);
			НайденныеСтроки = Удержания.НайтиСтроки(ОтборСтрок);
			Если Строка.СуммаВознагражденияПлатежногоАгента <> 0 Тогда
				Суммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(
					Строка.СуммаВознагражденияПлатежногоАгента,
					ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "СуммаУдержания"));
				Если Суммы <> Неопределено Тогда
					Индекс = 0;	
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента = НайденнаяСтрока.СуммаВознагражденияПлатежногоАгента + Суммы[Индекс];
						Индекс = Индекс + 1;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			УдаляемыеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем строки с не заполненным документом, эти суммы мы распределим по оставшимся строкам.
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Удержания.Удалить(Строка);
	КонецЦикла;
	
	ДанныеДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ИсполнительныеДокументы, "ФизическоеЛицо, Организация");
	
	Для Каждого Строка Из Удержания Цикл
		ДанныеДокумента = ДанныеДокументов[Строка.ИсполнительныйДокумент];
		НоваяСтрока = Движения.УдержанияПоИсполнительнымДокументам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период = Строка.МесяцУдержания;
		НоваяСтрока.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо;
		НоваяСтрока.Организация = ДанныеДокумента.Организация;
	КонецЦикла;
	Движения.УдержанияПоИсполнительнымДокументам.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		УстановитьПривилегированныйРежим(Истина);
		Движения.УдержанияПоИсполнительнымДокументам.Записать();
		Движения.УдержанияПоИсполнительнымДокументам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Составляет временную таблицу с условиями удержаний по исполнительным листам
// ВТПоказателиУдержанийПоИсполнительнымДокументам.
//
Процедура СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ) Экспорт
	
	Если СозданныеВТ.Найти("ВТПоказателиУдержанийПоИсполнительнымДокументам") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдержанияЗаПериод.ДатаНачала КАК Период,
	|	УдержанияЗаПериод.ДокументОснование КАК ИсполнительныйДокумент
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"УсловияУдержанияПоИсполнительномуДокументу",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"ИсполнительныйДокумент"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	УсловияУдержания.Период,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.ПлатежныйАгент,
	|	УсловияУдержания.ТарифПлатежногоАгента,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТУсловияУдержанияПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	МАКСИМУМ(ПлатежныеАгенты.Период) КАК Период
	|ПОМЕСТИТЬ ВТПлатежныеАгентыМаксимальныеПериоды
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныеАгенты.ИсполнительныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеАгенты.ИсполнительныйДокумент,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента
	|ПОМЕСТИТЬ ВТПлатежныеАгенты
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК ПлатежныеАгенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгентыМаксимальныеПериоды КАК МаксимальныеПериоды
	|		ПО (МаксимальныеПериоды.ИсполнительныйДокумент = ПлатежныеАгенты.ИсполнительныйДокумент)
	|			И (МаксимальныеПериоды.Период = ПлатежныеАгенты.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	УсловияУдержания.ИсполнительныйДокумент КАК ДокументОснование,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) КАК КатегорияУдержания,
	|	УсловияУдержания.Получатель КАК Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	УсловияУдержания.СпособРасчета,
	|	УсловияУдержания.ВидБазы,
	|	УсловияУдержания.Процент,
	|	УсловияУдержания.Сумма,
	|	УсловияУдержания.Числитель,
	|	УсловияУдержания.Знаменатель,
	|	УсловияУдержания.Предел,
	|	УсловияУдержания.ПрожиточныйМинимум,
	|	УсловияУдержания.УчитыватьБольничныеЛисты
	|ПОМЕСТИТЬ ВТПоказателиУдержанийПоИсполнительнымДокументам
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияУдержания.ИсполнительныйДокумент,
	|	NULL,
	|	УсловияУдержания.Период,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента),
	|	УсловияУдержания.Получатель,
	|	ПлатежныеАгенты.ПлатежныйАгент,
	|	ПлатежныеАгенты.ТарифПлатежногоАгента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТУсловияУдержанияПоИсполнительнымДокументам КАК УсловияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеАгенты КАК ПлатежныеАгенты
	|		ПО (ПлатежныеАгенты.ИсполнительныйДокумент = УсловияУдержания.ИсполнительныйДокумент)";
	
	Запрос.Выполнить();
	
	СозданныеВТ.Добавить("ВТПоказателиУдержанийПоИсполнительнымДокументам");
	
КонецПроцедуры

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей) Экспорт
	
	// Исполнительные листы
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаИсполнительногоЛиста");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ИсполнительныйЛист;
	НоваяСтрока.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ИсчисленныйПоИсполнительномуЛистуНДФЛ");
	
КонецПроцедуры

// Конструирует таблицу значений для регистрации движений при помощи
//	метода СформироватьУдержанияПоИсполнительнымДокументам.
//
Функция ПустаяТаблицаУдержанияПоДокументам() Экспорт
	
	УдержанияПоДокументам = Новый ТаблицаЗначений;
	УдержанияПоДокументам.Колонки.Добавить("ИсполнительныйДокумент", Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
	УдержанияПоДокументам.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияПоДокументам.Колонки.Добавить("МесяцУдержания", Новый ОписаниеТипов("Дата"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаУдержания", Новый ОписаниеТипов("Число"));
	УдержанияПоДокументам.Колонки.Добавить("СуммаВознагражденияПлатежногоАгента", Новый ОписаниеТипов("Число"));
	
	Возврат УдержанияПоДокументам;
	
КонецФункции

Процедура ДополнитьЦеломесячнымиЗаписямиУдержаний(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИскусственныйРегистратор", Документы.НачислениеЗарплаты.ПолучитьСсылку());
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ЗаписиУдержаний
		|ГДЕ
		|	ЗаписиУдержаний.ВидРасчета.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// Нет исполнительных листов.
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	МИНИМУМ(ЗаписиУдержаний.БазовыйПериодНачало) КАК Начало,
		|	МАКСИМУМ(ЗаписиУдержаний.БазовыйПериодКонец) КАК Окончание
		|ПОМЕСТИТЬ ВТИзмеренияЗаписейНеполныйМесяц
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ЗаписиУдержаний
		|ГДЕ
		|	(ЗаписиУдержаний.Начинается
		|			ИЛИ ЗаписиУдержаний.Заканчивается)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.МесяцУдержания
		|
		|ИМЕЮЩИЕ
		|	(МИНИМУМ(ЗаписиУдержаний.БазовыйПериодНачало) > НАЧАЛОПЕРИОДА(ЗаписиУдержаний.МесяцУдержания, МЕСЯЦ)
		|		ИЛИ МАКСИМУМ(ЗаписиУдержаний.БазовыйПериодКонец) < КОНЕЦПЕРИОДА(ЗаписиУдержаний.МесяцУдержания, МЕСЯЦ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеЗаписи.ПериодРегистрации,
		|	ОсновныеЗаписи.Регистратор,
		|	ОсновныеЗаписи.НомерСтроки,
		|	ОсновныеЗаписи.ФизическоеЛицо,
		|	ОсновныеЗаписи.Организация,
		|	ОсновныеЗаписи.ВидРасчета,
		|	ОсновныеЗаписи.Сотрудник,
		|	ОсновныеЗаписи.ДокументОснование,
		|	ОсновныеЗаписи.БазовыйПериодНачало,
		|	ОсновныеЗаписи.БазовыйПериодКонец,
		|	ОсновныеЗаписи.ИдентификаторСтроки,
		|	ОсновныеЗаписи.МесяцУдержания,
		|	ОсновныеЗаписи.Начинается,
		|	ОсновныеЗаписи.Заканчивается,
		|	ОсновныеЗаписи.ОригинальнаяЗапись
		|ПОМЕСТИТЬ ВТВсеОсновныеЗаписи
		|ИЗ
		|	ВТОсновныеЗаписиУдержаний КАК ОсновныеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновныеЗаписиУдержаний
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	ЗаписиУдержаний.Регистратор,
		|	ЗаписиУдержаний.НомерСтроки,
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.Сотрудник,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.БазовыйПериодНачало,
		|	ЗаписиУдержаний.БазовыйПериодКонец,
		|	ЗаписиУдержаний.ИдентификаторСтроки,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	ЗаписиУдержаний.Начинается,
		|	ЗаписиУдержаний.Заканчивается,
		|	ЗаписиУдержаний.ОригинальнаяЗапись
		|ПОМЕСТИТЬ ВТОсновныеЗаписиУдержаний
		|ИЗ
		|	ВТВсеОсновныеЗаписи КАК ЗаписиУдержаний
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиУдержаний.ПериодРегистрации,
		|	&ИскусственныйРегистратор,
		|	ЗаписиУдержаний.НомерСтроки,
		|	ЗаписиУдержаний.ФизическоеЛицо,
		|	ЗаписиУдержаний.Организация,
		|	ЗаписиУдержаний.Сотрудник,
		|	ЗаписиУдержаний.ВидРасчета,
		|	ЗаписиУдержаний.ДокументОснование,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.БазовыйПериодНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(ЗаписиУдержаний.БазовыйПериодКонец, МЕСЯЦ),
		|	ЗаписиУдержаний.ИдентификаторСтроки,
		|	ЗаписиУдержаний.МесяцУдержания,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ВТВсеОсновныеЗаписи КАК ЗаписиУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмеренияЗаписейНеполныйМесяц КАК ЗаписиНеполныйМесяц
		|		ПО ЗаписиУдержаний.ФизическоеЛицо = ЗаписиНеполныйМесяц.ФизическоеЛицо
		|			И ЗаписиУдержаний.Организация = ЗаписиНеполныйМесяц.Организация
		|			И ЗаписиУдержаний.ВидРасчета = ЗаписиНеполныйМесяц.ВидРасчета
		|			И ЗаписиУдержаний.ДокументОснование = ЗаписиНеполныйМесяц.ДокументОснование
		|			И ЗаписиУдержаний.ПериодРегистрации = ЗаписиНеполныйМесяц.ПериодРегистрации
		|			И ЗаписиУдержаний.МесяцУдержания = ЗаписиНеполныйМесяц.МесяцУдержания";
		
	Запрос.Выполнить();	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТИзмеренияЗаписейНеполныйМесяц");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТВсеОсновныеЗаписи");
	
КонецПроцедуры

Процедура ЗаполнитьПризнакУдерживаетсяВЦеломЗаМесяц(МенеджерВременныхТаблиц) Экспорт
	
	УдалитьВТ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ДокументОснование КАК ИсполнительныйДокумент,
		|	Удержания.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	ВТУдержания КАК Удержания
		|ГДЕ
		|	Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)";
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТИсходныеДанные");
	
	Если Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТИсходныеДанные") Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
		Возврат;
	КонецЕсли;
	
	// Запрашиваем условия удержаний.
	ОписаниеВТ = ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам();
	ОписаниеВТ.ИмяВТ = "ВТИсходныеДанные";
	СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ);
	
	ПоляИсключения = Новый Массив;
	ПоляИсключения.Добавить("ДокументОснование");
	ПоляИсключения.Добавить("УдерживаетсяВЦеломЗаМесяц");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	Удержания.ДокументОснование,
		|	Удержания.УдерживаетсяВЦеломЗаМесяц
		|ПОМЕСТИТЬ ВТВсеУдержания
		|ИЗ
		|	ВТУдержания КАК Удержания";
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(Запрос.Текст, МенеджерВременныхТаблиц, "ВТУдержания", "Удержания", ПоляИсключения);
	Запрос.Выполнить();
	УдалитьВТ.Добавить("ВТВсеУдержания");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТУдержания");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ИменаПолей,
		|	Удержания.ДокументОснование,
		|	ВЫБОР
		|		КОГДА УсловияУдержаний.ИсполнительныйДокумент ЕСТЬ NULL 
		|			ТОГДА Удержания.УдерживаетсяВЦеломЗаМесяц
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УсловияУдержаний.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой)
		|						ИЛИ УсловияУдержаний.ВидБазы = ЗНАЧЕНИЕ(Перечисление.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|	КОНЕЦ КАК УдерживаетсяВЦеломЗаМесяц
		|ПОМЕСТИТЬ ВТУдержания
		|ИЗ
		|	ВТВсеУдержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияУдержанийПоИсполнительнымДокументам КАК УсловияУдержаний
		|		ПО (УсловияУдержаний.ИсполнительныйДокумент = Удержания.ДокументОснование)
		|			И (УсловияУдержаний.Период = Удержания.ДатаНачала)";
	ЗарплатаКадры.ЗаполнитьИменаПолейВТ(Запрос.Текст, МенеджерВременныхТаблиц, "ВТВсеУдержания", "Удержания", ПоляИсключения);
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

// Возвращает суммы, удержанные по исполнительным листам 
// с переданных физических лиц по доходам указанных документов
//
// Параметры:
//   ФизлицаДокументы - ТаблицаЗначений - таблица с колонками:
//     * ФизическоеЛицо    - СправочникСсылка.ФизическиеЛица
//     * ДокументОснование - ДокументСсылка - документ, зарегистрировавший доход 
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ФизическоеЛицо    - СправочникСсылка.ФизическиеЛица
//     * ДокументОснование - ДокументСсылка
//     * Сумма             - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//
Функция УдержанныеСуммыФизическихЛицПоДокументам(ФизлицаДокументы, ОкончательныйРасчет = Ложь, УчитыватьСторно = Истина) Экспорт
	
	Если ОкончательныйРасчет И ПолучитьФункциональнуюОпцию("ОграничиватьСуммуУдержанийПроцентомОтЗаработнойПлаты") Тогда
		Возврат УдержанныеСуммыФизическихЛицСУчетомОграничений(ФизлицаДокументы, УчитыватьСторно)
	Иначе
		Возврат УдержанныеСуммыФизическихЛицБезУчетаОграничений(ФизлицаДокументы, УчитыватьСторно)
	КонецЕсли;
	
КонецФункции

// Возвращает суммы, удержанные авансом по исполнительным листам 
// с переданных физических лиц по доходам указанных документов
//
// Параметры:
//   ФизлицаДокументы - ТаблицаЗначений - таблица с колонками:
//     * ФизическоеЛицо    - СправочникСсылка.ФизическиеЛица
//     * ДокументОснование - ДокументСсылка - документ, зарегистрировавший доход 
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с колонками:
//     * ФизическоеЛицо    - СправочникСсылка.ФизическиеЛица
//     * ДокументОснование - ДокументСсылка
//     * Сумма             - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//
Функция УдержанныеСуммыФизическихЛицПоДокументамАвансом(ФизлицаДокументы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизлицаДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТФизлицаДокументы
		|ИЗ
		|	&ФизлицаДокументы КАК ФизлицаДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизлицаДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование КАК ДокументОснование,
		|	СУММА(ЕСТЬNULL(НачисленияУдержанияПоСотрудникамАвансом.Сумма, 0)) КАК Сумма
		|ИЗ
		|	ВТФизлицаДокументы КАК ФизлицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
		|		ПО (НачисленияУдержанияПоСотрудникамАвансом.Регистратор = ФизлицаДокументы.ДокументОснование)
		|			И (НачисленияУдержанияПоСотрудникамАвансом.ФизическоеЛицо = ФизлицаДокументы.ФизическоеЛицо)
		|			И (ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание КАК ПланВидовРасчета.Удержания).КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизлицаДокументы.ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование";
	
	Запрос.УстановитьПараметр("ФизлицаДокументы", ФизлицаДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Возвращает сведения о зарегистрированных удержаниях по исполнительным документам в заданном месяце.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по которым получаются данные.
//		МесяцНачисления - Дата, определяет месяц в котором зарегистрированы удержания.
//
// Возвращаемое значение: 
//  Структура - содержит две таблицы:
//		* Удержания  - ТаблицаЗначений - с колонками
//			** Организация 				- СправочникСсылка.Организации
//			** СтатьяФинансирования 	- СправочникСсылка.СтатьиФинансированияЗарплата
//			** СтатьяРасходов 			- СправочникСсылка.СтатьиРасходовЗарплата
//			** Получатель 				- СправочникСсылка.Контрагенты
//			** ПлатежныйАгент 			- СправочникСсылка.Контрагенты
//			** БанкПолучателя 			- СправочникСсылка.КлассификаторБанков
//			** СчетПолучателя 			- Строка
//			** ИсполнительныйДокумент 	- ДокументСсылка.ИсполнительныйЛист
//			** ВознаграждениеАгента 	- Число
//			** Сумма 					- Число.
//		* ИсполнительныеДокументы - ТаблицаЗначений - с колонками
//			** ИсполнительныйДокумент 	- ДокументСсылка.ИсполнительныйЛист
//			** АдресПолучателя 			- Строка
//			** Номер 					- Строка - номер документа
//			** Дата 					- Дата - дата документа.
//
Функция УдержанияПоИсполнительнымДокументамДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.Организация КАК Организация,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	Удержания.Получатель КАК Получатель,
	|	Удержания.ПлатежныйАгент КАК ПлатежныйАгент,
	|	СУММА(Удержания.СуммаУдержания) КАК Сумма,
	|	СУММА(Удержания.СуммаВознагражденияПлатежногоАгента) КАК ВознаграждениеАгента,
	|	Удержания.ИсполнительныйДокумент КАК ИсполнительныйДокумент
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК Удержания
	|ГДЕ
	|	Удержания.Период МЕЖДУ &ПериодРегистрации И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И Удержания.Организация В(&Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.Организация,
	|	Удержания.СтатьяФинансирования,
	|	Удержания.Получатель,
	|	Удержания.СтатьяРасходов,
	|	Удержания.ПлатежныйАгент,
	|	Удержания.ИсполнительныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Получатель КАК Получатель,
	|	МИНИМУМ(БанковскиеСчетаКонтрагентов.Ссылка) КАК БанковскийСчет
	|ПОМЕСТИТЬ ВТБанковскиеСчетаПолучателей
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ПО Удержания.Получатель = БанковскиеСчетаКонтрагентов.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Организация КАК Организация,
	|	Удержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Удержания.СтатьяРасходов КАК СтатьяРасходов,
	|	Удержания.Получатель КАК Получатель,
	|	Удержания.ПлатежныйАгент КАК ПлатежныйАгент,
	|	Удержания.Сумма КАК Сумма,
	|	Удержания.ВознаграждениеАгента КАК ВознаграждениеАгента,
	|	Удержания.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
	|	БанковскиеСчетаКонтрагентов.Банк КАК БанкПолучателя,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК СчетПолучателя
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБанковскиеСчетаПолучателей КАК БанковскиеСчетаПолучателей
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|			ПО БанковскиеСчетаПолучателей.БанковскийСчет = БанковскиеСчетаКонтрагентов.Ссылка
	|		ПО Удержания.Получатель = БанковскиеСчетаПолучателей.Получатель";
	
	Удержания = Запрос.Выполнить().Выгрузить();
	ОснованияУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ИсполнительныйДокумент", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсполнительныеДокументы", ОснованияУдержаний);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнительныйЛист.Ссылка КАК ИсполнительныйДокумент,
	|	ИсполнительныйЛист.АдресПолучателяПредставление КАК АдресПолучателя,
	|	ИсполнительныйЛист.Номер КАК Номер,
	|	ИсполнительныйЛист.Дата КАК Дата
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|ГДЕ
	|	ИсполнительныйЛист.Ссылка В(&ИсполнительныеДокументы)";
	ОснованияУдержаний = Запрос.Выполнить().Выгрузить();
	
	УдержанияПоИД = Новый Структура;
	УдержанияПоИД.Вставить("Удержания", Удержания);
	УдержанияПоИД.Вставить("ИсполнительныеДокументы", ОснованияУдержаний);
	
	Возврат УдержанияПоИД;

КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазмерВознагражденияПлатежногоАгента(СуммаПлатежа, Процент, Сумма, МинимальнаяСумма, МаксимальнаяСумма)
	
	Вознаграждение = 0;
	
	Если СуммаПлатежа = 0 Тогда 
		Возврат Вознаграждение;
	КонецЕсли;
	
	// Рассчитываем процентом
	Если Процент > 0 Тогда
		Вознаграждение = СуммаПлатежа * Процент / 100;
	КонецЕсли;
	
	// Если указана сумма, то она взимается в дополнение к проценту.
	Вознаграждение = Вознаграждение + Сумма;
	
	// Обрабатываем ограничения
	Если Вознаграждение < МинимальнаяСумма Тогда
		Вознаграждение = МинимальнаяСумма;
	КонецЕсли;
	
	Если Вознаграждение > МаксимальнаяСумма И МаксимальнаяСумма > 0 Тогда
		Вознаграждение = МаксимальнаяСумма;
	КонецЕсли;
	
	Возврат Вознаграждение;
	
КонецФункции

Функция ОписаниеВТУсловияУдержанийПоИсполнительнымДокументам()
	
	ОписаниеВТ = Новый Структура(
		"ИмяВТ");
	
	Возврат ОписаниеВТ;
	
КонецФункции

// Ожидается ВТ с полями
//	- ИсполнительныйДокумент
//	- Период
//
Процедура СоздатьВТУсловияУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, ОписаниеВТ)
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТУсловияУдержанийПоИсполнительнымДокументам") Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВТ = Новый Массив;
	
	// Запрашиваем условия удержаний.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеВТ.ИмяВТ, "ИсполнительныйДокумент");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("УсловияУдержанияПоИсполнительномуДокументу", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних");
	
	// Запрашиваем величину прожиточных минимумов.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних", "ПрожиточныйМинимум");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ВеличинаПрожиточногоМинимума", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	УдалитьВТ.Добавить("ВТВеличинаПрожиточногоМинимумаСрезПоследних");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УсловияУдержания.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|	УсловияУдержания.Период КАК Период,
		|	УсловияУдержания.СпособРасчета КАК СпособРасчета,
		|	УсловияУдержания.ВидБазы КАК ВидБазы,
		|	УсловияУдержания.Процент КАК Процент,
		|	УсловияУдержания.Сумма КАК Сумма,
		|	УсловияУдержания.Числитель КАК Числитель,
		|	УсловияУдержания.Знаменатель КАК Знаменатель,
		|	УсловияУдержания.Предел КАК Предел,
		|	УсловияУдержания.ПрожиточныйМинимум КАК ПрожиточныйМинимум,
		|	УсловияУдержания.УчитыватьБольничныеЛисты КАК УчитыватьБольничныеЛисты,
		|	УсловияУдержания.Получатель КАК Получатель,
		|	УсловияУдержания.ПлатежныйАгент КАК ПлатежныйАгент,
		|	УсловияУдержания.ТарифПлатежногоАгента КАК ТарифПлатежногоАгента,
		|	ЕСТЬNULL(ВеличинаПрожиточногоМинимума.Размер, 0) КАК ВеличинаПрожиточногоМинимума
		|ПОМЕСТИТЬ ВТУсловияУдержанийПоИсполнительнымДокументам
		|ИЗ
		|	ВТУсловияУдержанияПоИсполнительномуДокументуСрезПоследних КАК УсловияУдержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВеличинаПрожиточногоМинимумаСрезПоследних КАК ВеличинаПрожиточногоМинимума
		|		ПО УсловияУдержания.ПрожиточныйМинимум = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|			И УсловияУдержания.Период = ВеличинаПрожиточногоМинимума.Период";
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
КонецПроцедуры

Процедура ПроверитьДатуИсполнительногоЛиста(ИсполнительныйЛист, ДатаСобытия, Регистратор, ИмяРеквизитаДатаСобытия, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период", ДатаСобытия);
	Запрос.УстановитьПараметр("ИсполнительныйЛист", ИсполнительныйЛист);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияУдержанияПоИсполнительномуДокументу.Период,
	               |	УсловияУдержанияПоИсполнительномуДокументу.Регистратор
	               |ИЗ
	               |	РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу КАК УсловияУдержанияПоИсполнительномуДокументу
	               |ГДЕ
	               |	УсловияУдержанияПоИсполнительномуДокументу.Регистратор <> &Регистратор
	               |	И УсловияУдержанияПоИсполнительномуДокументу.ИсполнительныйДокумент = &ИсполнительныйЛист
	               |	И УсловияУдержанияПоИсполнительномуДокументу.Период = &Период";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ШаблонСообщения = НСтр("ru = 'На дату %1 уже проведен документ %2.';
								|en = 'Document %2 is already posted on date %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(Выборка.Период, "ДЛФ=Д"), Выборка.Регистратор);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ИмяРеквизитаДатаСобытия, "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ИсчисленныйПоДоходамНалог(МенеджерВременныхТаблиц, ОписаниеВТ, МесяцНачисления, ПогашениеЗаймов, ИсключаемыйРегистратор, НастройкиУдержаний, ОчередностьРасчета = Неопределено, ЭтоИсправлениеТекущимПериодом = Ложь) Экспорт 
	
	НалогПоДоходам = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей().Выгрузить(, "Период,ФизическоеЛицо,Начисление,СуммаДохода");
	НалогПоДоходам.Колонки.СуммаДохода.Имя = "Налог";
	НалогПоДоходам.Колонки.Период.Имя = "Месяц";
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Удержания.НачалоПериода) КАК НачалоПериода,
		|	МАКСИМУМ(Удержания.ОкончаниеПериода) КАК ОкончаниеПериода
		|ИЗ
		|	ВТУдержания КАК Удержания";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТУдержания", ОписаниеВТ.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.НачалоПериода", "Удержания." + ОписаниеВТ.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Удержания.ОкончаниеПериода", "Удержания." + ОписаниеВТ.ИмяПоляОкончаниеПериода);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Выборка.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Выборка.ОкончаниеПериода));
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	Запрос.УстановитьПараметр("ВидыНДФЛ", Обработки.МенеджерРасчетаЗарплаты.ВидыНДФЛДополненияРасчетнойБазыУдержаний());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеУдержаний.НомерСтроки КАК НомерСтроки,
	               |	ДанныеУдержаний.Организация КАК Организация,
	               |	ДанныеУдержаний.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	ДанныеУдержаний.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДанныеУдержаний.ВидРасчета КАК ВидРасчета,
	               |	ДанныеУдержаний.ДокументОснование КАК ИсполнительныйДокумент
	               |ПОМЕСТИТЬ ВТУдержанияПоИсполнительнымЛистам
	               |ИЗ
	               |	ВТРегистрРасчета_Удержания КАК ДанныеУдержаний
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	               |		ПО ДанныеУдержаний.ВидРасчета = Удержания.Ссылка
	               |			И (Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист))
	               |			И (&УсловиеОчередностьРасчета)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ВТУдержанияПоИсполнительнымЛистам КАК УдержанияПоИсполнительнымЛистам";
	
	Если ОчередностьРасчета = Неопределено Тогда
		ТекстУсловияОчередность = "ИСТИНА";
	Иначе
		ТекстУсловияОчередность = "Удержания.ОчередностьРасчета = &ОчередностьРасчета";
		Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОчередностьРасчета", ТекстУсловияОчередность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИменаВТ = Новый Массив;
	ИменаВТ.Добавить("ВТУдержанияПоИсполнительнымЛистам");
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		Возврат НалогПоДоходам;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдержанияПоИсполнительнымЛистам.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	               |	УдержанияПоИсполнительнымЛистам.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТФизическиеЛицаИсполнительныеЛисты
	               |ИЗ
	               |	ВТУдержанияПоИсполнительнымЛистам КАК УдержанияПоИсполнительнымЛистам
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ) КАК Месяц,
	               |	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК Ставка,
	               |	ВЫБОР
	               |		КОГДА Начисления.НачислениеУдержание В (&ВидыНДФЛ)
	               |			ТОГДА Начисления.Сумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Налог
	               |ИЗ
	               |	ВТРегистрНакопления_НачисленияУдержанияПоСотрудникам КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И Начисления.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(Начисления.Период, МЕСЯЦ),
	               |	Начисления.ФизическоеЛицо,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13),
	               |	ВЫБОР
	               |		КОГДА Начисления.НачислениеУдержание В (&ВидыНДФЛ)
	               |			ТОГДА Начисления.Сумма
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	ВТРегистрНакопления_НачисленияУдержанияПоКонтрагентамАкционерам КАК Начисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И Начисления.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ИменаВТ.Добавить("ВТФизическиеЛицаИсполнительныеЛисты");
	
	НалогПоСтавкам = РезультатыЗапроса[1].Выгрузить();
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда 
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, МЕСЯЦ) КАК Месяц,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК Ставка,
		               |	&Сумма - РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогНаПрибыльДляДивидендов - РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогСДивидендовУплаченныйЗаРубежом КАК Налог
		               |ИЗ
		               |	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
		               |		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
		               |			И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор)
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)";
		
		Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрНакопления_РасчетыНалогоплательщиковСБюджетомПоНДФЛ") Тогда
			ТекстЗапроса = ТекстЗапроса + "
					   |
					   |ОБЪЕДИНИТЬ ВСЕ
					   |
					   |ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период, МЕСЯЦ) КАК Месяц,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента КАК Ставка,
		               |	&Сумма - РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогНаПрибыльДляДивидендов - РасчетыНалогоплательщиковСБюджетомПоНДФЛ.НалогСДивидендовУплаченныйЗаРубежом КАК Налог
		               |ИЗ
		               |	ВТРегистрНакопления_РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
		               |		ПО РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
		               |			И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &ИсключаемыйРегистратор)
		               |			И (РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)";
		КонецЕсли;
		
		ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма");
		ТекстНалогов = "";
		Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
			ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "+ ", "") + ИмяРесурса + " ";
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&Сумма", ТекстНалогов);
		
		РанееИсчисленныйНалог = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РанееИсчисленныйНалог, НалогПоСтавкам);
		
	КонецЕсли;
	
	ФизическиеЛица = Новый Соответствие;
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Для Каждого СтрокаЗаймов Из ПогашениеЗаймов Цикл 
		Если СтрокаЗаймов.НалогНаМатериальнуюВыгоду <> 0 И ФизическиеЛица[СтрокаЗаймов.ФизическоеЛицо] <> Неопределено Тогда 
			СтрокаНДФЛ = НалогПоСтавкам.Добавить();
			СтрокаНДФЛ.Месяц = МесяцНачисления;
			СтрокаНДФЛ.ФизическоеЛицо = СтрокаЗаймов.ФизическоеЛицо;
			СтрокаНДФЛ.Ставка = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
			СтрокаНДФЛ.Налог = -СтрокаЗаймов.НалогНаМатериальнуюВыгоду;
		КонецЕсли;
	КонецЦикла;
	
	НалогПоСтавкам.Свернуть("Месяц,ФизическоеЛицо,Ставка", "Налог");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ) КАК Месяц,
	               |	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
	               |	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13) КАК Ставка,
	               |	СведенияОДоходахНДФЛ.ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов КАК ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов,
	               |	СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета КАК Результат
	               |ИЗ
	               |	ВТРегистрНакопления_СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
	               |		ПО (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
	               |			И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
	               |			И СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
	               |			И (&УсловиеСторно)
	               |ГДЕ
	               |	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1)
	               |	И &УсловиеОблагаемостиУНалоговогоАгента";     
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОблагаемостиУНалоговогоАгента", УчетНДФЛ.УсловиеОблагаемостиУНалоговогоАгента());
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ТекстУсловияСторно = "НЕ СведенияОДоходахНДФЛ.Сторно";
	Иначе
		ТекстУсловияСторно = "ИСТИНА";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", ТекстУсловияСторно);
	
	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТРегистрНакопления_СведенияОДоходахНДФЛ") Тогда 
		ОблагаемыеНалогомДоходы = Запрос.Выполнить().Выгрузить();
	Иначе 
		ОблагаемыеНалогомДоходы = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей().Выгрузить(, "Период,ФизическоеЛицо,Начисление,СуммаДохода,ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов");
		ОблагаемыеНалогомДоходы.Колонки.СуммаДохода.Имя = "Результат";
		ОблагаемыеНалогомДоходы.Колонки.Период.Имя = "Месяц";
		ОблагаемыеНалогомДоходы.Колонки.Добавить("Ставка", Новый ОписаниеТипов("ПеречислениеСсылка.НДФЛСтавкиНалогообложенияРезидента"));
	КонецЕсли;
	
	Если Не НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ) КАК Месяц,
		               |	СведенияОДоходахНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		               |	СведенияОДоходахНДФЛ.Начисление КАК Начисление,
		               |	СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента КАК Ставка,
		               |	СведенияОДоходахНДФЛ.ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов КАК ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов,
		               |	СведенияОДоходахНДФЛ.СуммаДохода - СведенияОДоходахНДФЛ.СуммаВычета КАК Результат
		               |ИЗ
		               |	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаИсполнительныеЛисты КАК ФизическиеЛица
		               |		ПО (СведенияОДоходахНДФЛ.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		               |			И (СведенияОДоходахНДФЛ.Регистратор <> &ИсключаемыйРегистратор)
		               |			И СведенияОДоходахНДФЛ.ГоловнаяОрганизация = ФизическиеЛица.ГоловнаяОрганизация
		               |			И СведенияОДоходахНДФЛ.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		               |ГДЕ
		               |	СведенияОДоходахНДФЛ.ЗарегистрированоПриНачисленииАванса = ДАТАВРЕМЯ(1, 1, 1)
		               |	И &УсловиеОблагаемостиУНалоговогоАгента";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОблагаемостиУНалоговогоАгента", УчетНДФЛ.УсловиеОблагаемостиУНалоговогоАгента());
		СведенияОДоходахНДФЛ = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОДоходахНДФЛ, ОблагаемыеНалогомДоходы);
		
	КонецЕсли;	
	
	ОблагаемыеНалогомДоходы.Свернуть("Месяц,ФизическоеЛицо,Начисление,Ставка,ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов", "Результат");
	ОблагаемыеНалогомДоходы.Индексы.Добавить("Месяц,ФизическоеЛицо,Ставка");
	
	Для Каждого СтрокаНалога Из НалогПоСтавкам Цикл 
		КоэффициентыРаспределения = Новый Массив;
		Отбор = Новый Структура("Месяц,ФизическоеЛицо,Ставка", СтрокаНалога.Месяц, СтрокаНалога.ФизическоеЛицо, СтрокаНалога.Ставка);
		ДоходыФизическогоЛица = ОблагаемыеНалогомДоходы.НайтиСтроки(Отбор);
		Если ДоходыФизическогоЛица.Количество() = 0 Тогда
			// Отсутствуют доходы в текущем месяце, но есть отрицательный НДФЛ
			НоваяСтрока = НалогПоДоходам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНалога);
		Иначе
			Для Каждого СтрокаДохода Из ДоходыФизическогоЛица Цикл 
				КоэффициентыРаспределения.Добавить(СтрокаДохода.Результат);
			КонецЦикла;
			РезультатРаспределения = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СтрокаНалога.Налог, КоэффициентыРаспределения);
			Если РезультатРаспределения <> Неопределено Тогда 
				Индекс = 0;
				Для Каждого СтрокаДохода Из ДоходыФизическогоЛица Цикл 
					Если СтрокаДохода.ИсключаетсяИзРасчетнойБазыИсполнительныхЛистов Тогда 
						Индекс = Индекс + 1;
						Продолжить;
					КонецЕсли;
					НоваяСтрока = НалогПоДоходам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДохода);
					НоваяСтрока.Налог = РезультатРаспределения[Индекс];
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НалогПоДоходам.Свернуть("Месяц,ФизическоеЛицо,Начисление", "Налог");
	НалогПоДоходам.Индексы.Добавить("Месяц,ФизическоеЛицо,Начисление");
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
	
	Возврат НалогПоДоходам;
	
КонецФункции

Функция УдержанныеСуммыФизическихЛицСУчетомОграничений(ФизлицаДокументы, УчитыватьСторно = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ФизлицаДокументы, "ВТФизлицаДокументы");

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизлицаДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование КАК ДокументОснование,
		|	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент КАК ИсполнительныйДокумент,
		|	СУММА(ЕСТЬNULL(УдержанияПоИсполнительнымДокументам.СуммаУдержания, 0)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(ОграниченияВзысканий.СуммаУдержания, 0)) КАК СуммаОграничения
		|ИЗ
		|	ВТФизлицаДокументы КАК ФизлицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияПоИсполнительнымДокументам
		|		ПО (УдержанияПоИсполнительнымДокументам.Регистратор = ФизлицаДокументы.ДокументОснование)
		|			И (УдержанияПоИсполнительнымДокументам.ФизическоеЛицо = ФизлицаДокументы.ФизическоеЛицо)
		|			И (УдержанияПоИсполнительнымДокументам.Сторно = ЛОЖЬ)
		|			И (НЕ УдержанияПоИсполнительнымДокументам.ОграничениеВзыскания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК ОграниченияВзысканий
		|		ПО (УдержанияПоИсполнительнымДокументам.ФизическоеЛицо = ОграниченияВзысканий.ФизическоеЛицо)
		|			И (УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент = ОграниченияВзысканий.ИсполнительныйДокумент)
		|			И (УдержанияПоИсполнительнымДокументам.Организация = ОграниченияВзысканий.Организация)
		|			И (УдержанияПоИсполнительнымДокументам.Получатель = ОграниченияВзысканий.Получатель)
		|			И (УдержанияПоИсполнительнымДокументам.ПлатежныйАгент = ОграниченияВзысканий.ПлатежныйАгент)
		|			И (&УсловиеПоСтатьямФинансирования)
		|			И (УдержанияПоИсполнительнымДокументам.Период = ОграниченияВзысканий.Период)
		|			И (ОграниченияВзысканий.ОграничениеВзыскания)
		|			И (&УсловиеСторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизлицаДокументы.ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование,
		|	УдержанияПоИсполнительнымДокументам.ИсполнительныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ИсполнительныйДокумент";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		УсловиеПоСтатьямФинансирования = "(УдержанияПоИсполнительнымДокументам.СтатьяФинансирования = ОграниченияВзысканий.СтатьяФинансирования)
		|			И (УдержанияПоИсполнительнымДокументам.СтатьяРасходов = ОграниченияВзысканий.СтатьяРасходов)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатьямФинансирования", УсловиеПоСтатьямФинансирования);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСтатьямФинансирования", "ИСТИНА");
	КонецЕсли;
	
	Если УчитыватьСторно Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", "ИСТИНА");
	Иначе
		УсловиеСторно = "(УдержанияПоИсполнительнымДокументам.Сторно = ЛОЖЬ)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", УсловиеСторно);
	КонецЕсли;
	
	Результат = ФизлицаДокументы.Скопировать(, "ФизическоеЛицо, ДокументОснование");
	Результат.Колонки.Добавить("Сумма", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ИсполнительныйДокумент") Цикл 
			Коэффициенты = Новый Массив;
			ДокументыОснования = Новый Массив;
			ФизическоеЛицо = Выборка.ФизическоеЛицо; 
			СуммаОграничения = 0;
			Пока Выборка.Следующий() Цикл
				Коэффициенты.Добавить(Выборка.Сумма);
				ДокументыОснования.Добавить(Выборка.ДокументОснование);
				СуммаОграничения = СуммаОграничения + Выборка.СуммаОграничения;
			КонецЦикла;
			Суммы = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(СуммаОграничения, Коэффициенты);
			Сч = 0;
			Для Каждого ДокументОснование Из ДокументыОснования Цикл
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.ДокументОснование = ДокументОснование;
				НоваяСтрока.Сумма = Коэффициенты[Сч] + ?(Суммы = Неопределено, 0, Суммы[Сч]);
				Сч = Сч + 1;  
			КонецЦикла;
		КонецЦикла
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УдержанныеСуммыФизическихЛицБезУчетаОграничений(ФизлицаДокументы, УчитыватьСторно = Истина)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, ФизлицаДокументы, "ВТФизлицаДокументы");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизлицаДокументы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование КАК ДокументОснование,
		|	СУММА(ЕСТЬNULL(УдержанияПоИсполнительнымДокументам.СуммаУдержания, 0)) КАК Сумма
		|ИЗ
		|	ВТФизлицаДокументы КАК ФизлицаДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдержанияПоИсполнительнымДокументам КАК УдержанияПоИсполнительнымДокументам
		|		ПО (УдержанияПоИсполнительнымДокументам.Регистратор = ФизлицаДокументы.ДокументОснование)
		|			И (УдержанияПоИсполнительнымДокументам.ФизическоеЛицо = ФизлицаДокументы.ФизическоеЛицо)
		|			И (&УсловиеСторно)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизлицаДокументы.ФизическоеЛицо,
		|	ФизлицаДокументы.ДокументОснование";
	
		Если УчитыватьСторно Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", "ИСТИНА");
		Иначе
			УсловиеСторно = "(УдержанияПоИсполнительнымДокументам.Сторно = ЛОЖЬ)";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСторно", УсловиеСторно);
		КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НачалоДействияПостановленияПравительства1908() Экспорт
	Возврат '20211111';
КонецФункции

#КонецОбласти
