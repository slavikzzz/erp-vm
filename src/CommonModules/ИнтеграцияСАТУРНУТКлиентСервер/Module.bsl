#Область ПрограммныйИнтерфейс

#Область НакладнаяСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыНакладнаяСАТУРН(Команды) Экспорт
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																												|en = 'Vendor invoice'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента';
																												|en = 'Sales return'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",             НСтр("ru = 'Внутреннее потребление';
																												|en = 'Inventory consumption'"),               "ИспользоватьВнутреннееПотребление");	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровМеждуОрганизациями",  НСтр("ru = 'Возврат товаров между организациями';
																												|en = 'Goods return — Intercompany'"),  "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровОтКлиента",           НСтр("ru = 'Возврат товаров от клиента';
																												|en = 'Sales return'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВозвратТоваровПоставщику",          НСтр("ru = 'Возврат товаров поставщику';
																												|en = 'Return of goods to vendor'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВыкупТоваровХранителем",            НСтр("ru = 'Выкуп товаров хранителем';
																												|en = 'Sales invoice — VMI sold'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "КорректировкаПриобретения",         НСтр("ru = 'Корректировка приобретения';
																												|en = 'Purchase adjustment'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтгрузкаТоваровСХранения",          НСтр("ru = 'Отгрузку товаров с хранения';
																												|en = 'VMI pick-up request from vendor'"),          "ИспользоватьОтветственноеХранениеВПроцессеЗакупки");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОРозничныхПродажах",           НСтр("ru = 'Отчет о розничных продажах';
																												|en = 'Retail sales report'"),           "ИспользоватьРозничныеПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровМеждуОрганизациями", НСтр("ru = 'Передачу товаров между организациями';
																												|en = 'Goods transfer between companies'"), "ИспользоватьПередачиТоваровМеждуОрганизациями");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПередачаТоваровХранителю",          НСтр("ru = 'Передачу товаров';
																												|en = 'Transfer of goods'"),                     "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи,ИспользоватьКомиссиюПриПродажах" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПеремещениеТоваров",                НСтр("ru = 'Перемещение товаров';
																												|en = 'Goods transfer.'"),                  "ИспользоватьПеремещениеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПоступлениеТоваровОтХранителя",     НСтр("ru = 'Поступление товаров от хранителя';
																												|en = 'VMI return'"),     "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПоступлениеТоваровНаСклад",         НСтр("ru = 'Поступление товаров на склад';
																												|en = 'Warehouse receipt'"),         "ИспользоватьТоварыВПутиОтПоставщиков,ИспользоватьНеотфактурованныеПоставки");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																												|en = 'Vendor invoice'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг",            НСтр("ru = 'Реализацию товаров услуг';
																												|en = 'Sales of goods services'"));
	
	//++ НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ДвижениеПродукцииИМатериалов", НСтр("ru = 'Движение продукции и материалов';
																											|en = 'Movement of products and materials'"), "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетПереработчика2_5",        НСтр("ru = 'Отчет переработчика';
																											|en = 'Subcontracting services notification received'"),             "ИспользуетсяПередачаВПереработку24и25,ИспользуетсяТолькоПередачаВПереработку2_5");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПроизводствоБезЗаказа",        НСтр("ru = 'Производство без заказа';
																											|en = 'Backflush production'"),         "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТ
	
	//++ НЕ УТКА
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЭтапПроизводства2_2",    НСтр("ru = 'Этап производства';
																									|en = 'Production stage'"),         "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТКА
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - ФормаКлиентскогоПриложения - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандНакладнаяСАТУРН(Форма, Команды) Экспорт
	
	Операция = Форма.Объект.Операция;
	Входящая = Не Форма.ГрузоотправительСопоставленСОрганизацией;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Элемент       = Форма.Элементы[КлючИЗначение.Ключ];
		
		Если ИмяМетаданных = "ПриобретениеТоваровУслуг"
			Или ИмяМетаданных = "ВозвратТоваровОтКлиента"
			Или ИмяМетаданных = "КорректировкаПриобретения"
			Или ИмяМетаданных = "ПоступлениеТоваровНаСклад"
			Или ИмяМетаданных = "ПоступлениеТоваровОтХранителя" Тогда
			Элемент.Видимость = Входящая И Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка");
		ИначеЕсли ИмяМетаданных = "РеализацияТоваровУслуг"
			Или ИмяМетаданных = "ВозвратТоваровПоставщику" Тогда
			Элемент.Видимость = 
				(Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспорт")
				Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля"));
		ИначеЕсли ИмяМетаданных = "ОтчетОРозничныхПродажах" Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля");
		ИначеЕсли ИмяМетаданных = "ПередачаТоваровМеждуОрганизациями"
			Или ИмяМетаданных = "ВозвратТоваровМеждуОрганизациями"
			Или ИмяМетаданных = "ПеремещениеТоваров"
			Или ИмяМетаданных = "ОтгрузкаТоваровСХранения"
			Или ИмяМетаданных = "ВыкупТоваровХранителем"
			Или ИмяМетаданных = "ПередачаТоваровХранителю"
			
//++ НЕ УТ
			
			Или ИмяМетаданных = "ДвижениеПродукцииИМатериалов"
			
//-- НЕ УТ
			
		Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка");
		ИначеЕсли ИмяМетаданных = "ВнутреннееПотребление"
			
//++ НЕ УТ
			
			Или ИмяМетаданных = "ПроизводствоБезЗаказа"
			Или ИмяМетаданных = "ОтчетПереработчика2_5"
			
//-- НЕ УТ
			
//++ НЕ УТКА
			
			Или ИмяМетаданных = "ЭтапПроизводства2_2"
			
//-- НЕ УТКА
			
		Тогда
			Элемент.Видимость = Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство");
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область АктИнвентаризацииСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыАктИнвентаризацииСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ОприходованиеИзлишковТоваров", НСтр("ru = 'Оприходование излишков товаров';
																											|en = 'Stock surplus recognition'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "СписаниеНедостачТоваров",      НСтр("ru = 'Списание недостач товаров';
																											|en = 'Stock shortage recognition'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваров",    НСтр("ru = 'Оприходование излишков товаров';
																												|en = 'Stock surplus recognition'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СписаниеНедостачТоваров",         НСтр("ru = 'Списание недостач товаров';
																												|en = 'Stock shortage recognition'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваров",              НСтр("ru = 'Пересортицу товаров';
																												|en = 'Stock reclass'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПорчаТоваров",                    НСтр("ru = 'Порчу товаров';
																												|en = 'Stock quality change'"),                   "ИспользоватьКачествоТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров",      НСтр("ru = 'Прочее оприходование товаров';
																												|en = 'Other receipt of goods'"),    "ИспользоватьПрочееОприходованиеТоваров");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОприходованиеИзлишковТоваровУХранителя", НСтр("ru = 'Оприходование излишков товаров у хранителя/комиссионера';
																													|en = 'Recognize inventory surplus at custodian/consignee'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетОСписанииТоваровУХранителя",        НСтр("ru = 'Отчет о списании товаров у хранителя';
																													|en = 'Customer stock adjustment'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПересортицаТоваровУХранителя",           НСтр("ru = 'Пересортицу товаров у хранителя';
																													|en = 'Stock reclass at custodian'"), "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи" + ИнтеграцияИСУТКлиентСервер.ИмяФункицональнойОпцииИспользоватьПроизводствоНаСтороне25());
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПорчаТоваровУХранителя",                 НСтр("ru = 'Порчу товаров у хранителя';
																													|en = 'VMI quality change'"),       "ИспользоватьПорчуТоваровУХранителей,ИспользоватьКачествоТоваров");
	
КонецПроцедуры

// Устанавливает видимость команд динамически формируемых для создания документов на основании.
// 
// Параметры:
// 	Форма   - ФормаКлиентскогоПриложения - Форма на которой находятся вызова команд.
// 	Команды - Структура - структура команд динамически формируемых для создания документов на основании.
//
Процедура УправлениеВидимостьюКомандАктИнвентаризацииСАТУРН(Форма, Команды) Экспорт
	
	ЕстьРасход = Ложь;
	ЕстьПриход = Ложь;
	Для Каждого СтрокаТЧ Из Форма.Объект.Товары Цикл
		Если СтрокаТЧ.КоличествоУпаковок<0 Тогда 
			ЕстьРасход = Истина;
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок>0 Тогда 
			ЕстьПриход = Истина;
		КонецЕсли;
	КонецЦикла;
	Пересорт = ЕстьПриход И ЕстьРасход;
	Приход = ЕстьПриход И Не Пересорт;
	Расход = ЕстьРасход И Не Пересорт;
	
	Для Каждого КлючИЗначение Из Форма.НастройкиВыполненияПодключаемыхКомандИС.Команды Цикл
		ИмяМетаданных = КлючИЗначение.Значение.ИмяМетаданных;
		Если ИмяМетаданных = "ОприходованиеИзлишковТоваров"
			Или ИмяМетаданных = "ПрочееОприходованиеТоваров"
			Или ИмяМетаданных = "ОприходованиеИзлишковТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Приход;
		ИначеЕсли ИмяМетаданных = "СписаниеНедостачТоваров"
			Или ИмяМетаданных = "ОтчетОСписанииТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Расход;
		ИначеЕсли ИмяМетаданных = "ПересортицаТоваров"
			Или ИмяМетаданных = "ПорчаТоваров"
			Или ИмяМетаданных = "ПересортицаТоваровУХранителя"
			Или ИмяМетаданных = "ПорчаТоваровУХранителя" Тогда
			Форма.Элементы[КлючИЗначение.Ключ].Видимость = Пересорт;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область АктПримененияСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыАктПримененияСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление';
																									|en = 'Inventory consumption'"),    "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "РеализацияТоваровУслуг", НСтр("ru = 'Реализацию товаров услуг';
																									|en = 'Sales of goods services'"));
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление",  НСтр("ru = 'Внутреннее потребление';
																									|en = 'Inventory consumption'"),    "ИспользоватьВнутреннееПотребление");
	
	//++ НЕ УТКА
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЭтапПроизводства2_2",    НСтр("ru = 'Этап производства';
																									|en = 'Production stage'"),         "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ИмпортПродукцииСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыИмпортПродукцииСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																												|en = 'Vendor invoice'"));
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПриобретениеТоваровУслуг",          НСтр("ru = 'Приобретение товаров и услуг';
																												|en = 'Vendor invoice'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводственнаяОперацияСАТУРН

// Заполняет структуру команд для динамического формирования доступных для создания документов на основании.
// 
// Параметры:
// 	Команды - Структура - Исходящий, структура команд динамически формируемых для создания документов на основании.
//
Процедура КомандыПроизводственнаяОперацияСАТУРН(Команды) Экспорт 
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуОформить(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление';
																									|en = 'Inventory consumption'"), "ИспользоватьВнутреннееПотребление");
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ВнутреннееПотребление", НСтр("ru = 'Внутреннее потребление';
																									|en = 'Inventory consumption'"),   "ИспользоватьВнутреннееПотребление");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "СборкаТоваров",         НСтр("ru = 'Сборку товаров';
																									|en = 'Goods kitting'"),           "ИспользоватьСборкуРазборку");
	
	//++ НЕ УТКА
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ЭтапПроизводства2_2",    НСтр("ru = 'Этап производства';
																									|en = 'Production stage'"),         "ИспользоватьУправлениеПроизводством2_2");
	
	//-- НЕ УТКА
	
	//++ НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПроизводствоБезЗаказа",  НСтр("ru = 'Производство без заказа';
																									|en = 'Backflush production'"), "ИспользоватьУправлениеПроизводством2_2");
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ОтчетПереработчика2_5",  НСтр("ru = 'Отчет переработчика';
																									|en = 'Subcontracting services notification received'"),     "ИспользуетсяПередачаВПереработку24и25,ИспользуетсяТолькоПередачаВПереработку2_5");
	Возврат;
	
	//-- НЕ УТ
	
	ПодключаемыеКомандыИСКлиентСервер.ДобавитьКомандуВыбрать(Команды, "ПрочееОприходованиеТоваров", НСтр("ru = 'Прочее оприходование товаров';
																										|en = 'Other receipt of goods'"), "ИспользоватьПрочееОприходованиеТоваров");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти