////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления подсистемы регламентированного учета 
// в информационной базе при смене версии конфигурации.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = ОбновлениеИнформационнойБазыБППереопределяемый.ИмяПодсистемы();
	Описание.Версия = "1.1.5.8";
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

 	// Обработчики, выполняемые при заполнении пустой ИБ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина; 

	// Обработчики, выполняемые при каждом обновлении ИБ
 
	//++ НЕ УТ

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.14.1";
	Обработчик.Процедура           = "РегистрыСведений.РасчетНалогаНаИмущество.ПеренестиЛьготыИзРесурсовВИзмерения";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.14.3";
	Обработчик.Процедура           = "Справочники.ОбщероссийскийКлассификаторОсновныхФондов.ОбновитьОКОФ_94";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.19.3";
	Обработчик.Процедура           = "РегистрыСведений.ПараметрыТорговыхТочек.ОбновитьСтавкиТорговогоСбора";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("ad8397b8-d3cd-470d-887c-17d5a6328157");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь; // В 2.0 торгового сбора не было, поэтому при переходе ставки обновлять не нужно
	Обработчик.Комментарий = НСтр("ru = 'Обновляет ставки торгового сбора';
									|en = 'Updates sales charge rates'");

	//-- НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.20.6";
	Обработчик.Процедура           = "РегистрыСведений.ПараметрыТорговыхТочек.ОбновитьСтавкиТорговыеАвтоматы";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("8d316278-33c9-4905-b4bb-3a0ae355049f");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.НачальноеЗаполнение = Ложь; // В 2.0 торгового сбора не было, поэтому при переходе ставки обновлять не нужно
	Обработчик.Комментарий = НСтр("ru = 'Обновляет ставки торгового сбора для торговых автоматов';
									|en = 'Updates sales charge rates for vending machines'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.1";
	Обработчик.Процедура           = "ОрганизацииЛокализация.ОбновитьНаименованияОКВЭД2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	//++ НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.2";
	Обработчик.Процедура           = "РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки.ЗаполнитьОтчетыВБанкиОтложенно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("ccea9312-be7a-4e74-b688-ca603b0283e9");
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет регистр ""1С:ФинОтчетность"".';
											|en = 'Fills in the 1C: Financial Reporting register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.2";
	Обработчик.Процедура           = "УниверсальныйОбменСБанками.СброситьВерсиюБанков";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.2";
	Обработчик.Процедура           = "Справочники.ТипыДокументов.УстановитьПолноеНаименование";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	
	//-- НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.6";
	Обработчик.Процедура           = "Справочники.КодыОперацийПрослеживаемости.ЗаполнитьНачальныеЗначения";
	Обработчик.НачальноеЗаполнение = Истина;
	
	//++ НЕ УТ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.2.5";
	Обработчик.Процедура           = "Документы.ФинОтчетВБанк.ЗаполнитьНедостающиеРеквизитыПериодОтложенно";
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает новые реквизиты в документах ""Пакет 1С:ФинОтчетности""';
											|en = 'Sets new attributes in the ""1C:Financial Reporting batch"" documents'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("c41e3344-59da-4710-9658-7766de655335");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.2.5";
	Обработчик.Процедура           = "РегистрыСведений.ЖурналСтатусовФинОтчетностиВБанки.ЗаполнитьФинансовыйПериодОтложенно";
	Обработчик.Комментарий         = НСтр("ru = 'Устанавливает новые реквизиты в документах ""Пакет 1С:ФинОтчетности""';
											|en = 'Sets new attributes in the ""1C:Financial Reporting batch"" documents'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("7cfe2394-285d-46ff-8f7d-f2db87539528");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.3.2";
	Обработчик.Процедура           = "Документы.ФормированиеЗаписейРаздела7ДекларацииНДС.ЗаполнитьПредставлениеПодтверждающихДокументов";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет ссылку-представление подтверждающих документов, которая для оптимизации открытия формы хранится в документе.';
											|en = 'Fills a presentation reference of justification documents. The reference is stored in the document to optimize the form opening.'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0bad9c09-06ca-4905-a678-1c1395620151");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       		= "1.1.3.6";
	Обработчик.Процедура    		= "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение 	= Истина; // Надо выполнять при первом запуске
	Обработчик.ОбщиеДанные  		= Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.3.7";
	Обработчик.Процедура           = "ФинОтчетностьВБанки.СброситьВерсиюУслугБанка";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.3.10";
	Обработчик.Процедура           = "УниверсальныйОбменСБанками.СброситьВерсиюБанковИУслуг";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.4.5";
	Обработчик.Процедура           = "Справочники.КлассификаторПродукцииПоВидамДеятельности.ЗаполнитьПредопределенныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий 		   = НСтр("ru = 'Заполняет предопределенные элементы справочника ""Классификатор продукции по видам деятельности (ОКПД)"".';
											|en = 'Fills the predefined items of the ""Product classifier by activity categories (RNCPA)"" catalog.'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор 	   = Новый УникальныйИдентификатор("463046df-f589-4374-80e1-8984edd31519");
	
	// При изменении поставляемых данных следует переносить обработчик на новую версию, а не копировать,
	// за исключением ситуаций, когда обработчик важно выполнить заведомо до обработчика разделенных данных
	// (о таких исключениях должно быть написано в комментарии к обработчику).
	// При переносе обработчика следует переносить и этот комментарий.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.5.6";
	Обработчик.Процедура           = "Справочники.СтатистическиеПоказатели.ЗаполнитьПоставляемымиПравилами";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;

	//-- НЕ УТ
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
// 
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
 
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ИтерацииОбновления - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
  Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
 
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	

КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик первого запуска.
//
Процедура ПервыйЗапуск() Экспорт
 
	ЗаполнитьПустуюИБ();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Процедура выполняет начальное заполнение информационной базы.
//
Процедура ЗаполнитьПустуюИБ() Экспорт
	
	// Вызов функций заполнения данных для пустой информационной базы

	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		ВалютаРегламентированногоУчета = НайтиСоздатьВалюту(
			"643", 
			НСтр("ru = 'руб.';
				|en = 'rub.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			НСтр("ru = 'Российский рубль';
				|en = 'Russian ruble'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
		Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	КонецЕсли;
			
	УстановитьФорматСохраненияРегистровУчета();
	
	УстановитьПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС();
	
	// Заполнение реквизита "Запретить использовать в проводках" в планах счетов
	УстановитьПараметрыСчетовБУ();
	// Заполнение кодов быстрого выбора в планах счетов
	ЗаполнениеКодовБыстрогоВыбора();

	УстановитьУчетНаСчетахУчетаЗарплаты();

	УстановитьСуммовойУчетНаСкладах();
	УстановитьУчетНаСчетахТоваровВРознице();
	УстановитьСубконтоСтатьиДвиженияДенежныхСредств();
	ОбновлениеИнформационнойБазыБППереопределяемый.УстановитьУчетПоДокументамНаСчетахРасчетов();
	ОбновлениеИнформационнойБазыБППереопределяемый.УстановитьУчетПоРаботникам();
	
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьАналитикуНаСчетах();
	ОбновлениеИнформационнойБазыБППереопределяемый.ЗаполнитьСчетаУчетаПоУмолчанию();
	ОбновлениеИнформационнойБазыБППереопределяемый.КонтактнаяИнформацияОбновлениеИБ();
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
    	
КонецПроцедуры // ЗаполнитьПустуюИБ()

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи          = ПараметрыПрописиНаРусском;
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	Иначе
		
		// Рубль может быть создан из классификатора, где он имеет наименование RUB,
		// нам это не подходит, т.к. это поле выводится в печатных формах.
		Если Ссылка.Наименование <> Наименование Тогда
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = Наименование;
			
			ЗаписатьСправочникОбъект(СправочникОбъект);
			Ссылка = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.* - объект, который требуется записать.
//	Сообщать - Булево - Признак необходимости вывода сообщений.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';
								|en = 'Group of catalog ""%1"" is created, code: ""%2"", name: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';
								|en = 'Item of catalog ""%1"" is created, code: ""%2"", name: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';
								|en = 'Catalog group ""%1"" is processed, code: ""%2"", name: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';
								|en = 'Catalog item ""%1"" is processed, code: ""%2"", name: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>';
						|en = '<without code>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru = 'Не удалось завершить действие: %1';
								|en = 'Cannot finish action: %1'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам. 
//
Процедура УстановитьПараметрыСчетовБУ()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется.
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	
	Попытка

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
		Пока ВыборкаСчетов.Следующий() Цикл

			СсылкаНаРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСчетов.Ссылка, "Родитель");

			Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
				Продолжить;
			КонецЕсли;

			Объект = СсылкаНаРодителя.ПолучитьОбъект();
			Если Объект.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить;
			КонецЕсли;

			Объект.ЗапретитьИспользоватьВПроводках = Истина;
			Объект.Записать();

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при установке параметров счетов бухгалтерского учета';
				|en = 'An error occurred while setting bookkeeping account parameters '", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

// Заполнение кодов быстрого выбора в планах счетов.
//
// Параметры:
//	ТолькоНезаполненные - Булево - Признак необходимости заполнения только у элементов с пустым кодом.
// 
Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь) Экспорт
	
	МассивПлановСчетов = Новый Массив;
	МассивПлановСчетов.Добавить(ПланыСчетов.Хозрасчетный);
	
	Для Каждого ЭлементПланСчетов Из МассивПлановСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
				
			КонецЦикла;
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось установить код быстрого выбора по счету
                                   |%1';
                                   |en = 'Cannot set a quick selection code by account
                                   |%1 '");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыСчетов.Хозрасчетный,
				Объект.Ссылка, 
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Заполнение только незаполненных.
//
Процедура ДозаполнениеКодовБыстрогоВыбора() Экспорт
	
	ЗаполнениеКодовБыстрогоВыбора(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ АНАЛИТИКИ НА СЧЕТАХ УЧЕТА

// Процедура устанавливает признак суммового учета по субконто Склады.
//
Процедура УстановитьСуммовойУчетНаСкладах()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Счета = Новый СписокЗначений();
	Счета.Добавить("ОборудованиеКУстановке");
	Счета.Добавить("ПриобретениеОбъектовОсновныхСредств");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("Товары");
	Счета.Добавить("ТорговаяНаценкаАТТ");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Материалы");
	Счета.Добавить("ТоварыПринятыеНаКомиссию");

	НачатьТранзакцию();

	Попытка

		Для каждого Счет Из Счета Цикл
			УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
		КонецЦикла;

		Счета = Новый СписокЗначений();
		Счета.Добавить("МатериалыПереданныеВПереработку");
		Счета.Добавить("ТоварыОтгруженные");

		Для каждого Счет Из Счета Цикл
			УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка при установке суммового учета на складах';
				|en = 'An error occurred while setting value accounting in warehouses'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

// Процедура устанавливает аналитику на счета учета товаров в рознице.
//
Процедура УстановитьУчетНаСчетахТоваровВРознице()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется

		Возврат;
	КонецЕсли;
	
	// На счетах 41.11, 41.12, 42.01, 42.02 субконто Склад должно присутствовать всегда.
	// Настройки суммового и количественного учета по субконто на счете должны быть такие же как и в процедуре 
	// ОбщегоНазначенияБПВызовСервера.ПолучитьСоответствиеСубконтоПараметрамУчета().
	Счета = Новый Соответствие;
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, Истина); // 41.11
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, Истина); // 41.12
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ, Истина); // 42.01
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ, Ложь); // 42.02
	
	Для каждого КлючЗначение Из Счета Цикл
		
		Счет = КлючЗначение.Ключ;
		
		Если Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) = Неопределено Тогда
			Попытка
				СчетОбъект = Счет.ПолучитьОбъект();
				
				НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
				НоваяСтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
				НоваяСтрокаСубконто.Суммовой 		= Истина;
				НоваяСтрокаСубконто.Количественный 	= Счета[Счет];
				СчетОбъект.Записать();
				
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установка субконто Склад на счете %1 не выполнена.';
						|en = 'Extra dimension Warehouse is not set for account %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Счет);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
					,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Установка субконто "Статьи движения денежных средств" на 50-55 счетах.
//
Процедура УстановитьСубконтоСтатьиДвиженияДенежныхСредств()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбрабатываемыеСчета = Новый Массив;
	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.Аккредитивы);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ЧековыеКнижки);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);

	Для Каждого Счет Из ОбрабатываемыеСчета Цикл

		Попытка
			СчетОбъект    = Счет.ПолучитьОбъект();
			Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
			НетСтатьиДДС = (Субконто = Неопределено);
			ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
			Если НетСтатьиДДС И ВсегоСубконто < 3 Тогда

				НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой       = Истина;
				НовыйВид.Валютный       = Истина;
				НовыйВид.Количественный = Истина;

				СчетОбъект.Записать();
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru = 'Установка субконто ""Статьи движения денежных средств"" для счета %1 не выполнена';
									|en = 'Extra dimension ""Cash flow items"" is not set for account %1'", 
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Счет.Код);
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			Счета.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();
			
			Если Объект.Код = "41.12" ИЛИ Объект.Код = "45.04" ИЛИ Объект.Код = "41.ДР" ИЛИ Объект.Код = "10.ДР" ИЛИ Объект.Код = "08.04.2" ИЛИ Объект.Код = "08.04" Тогда
				Продолжить;
			КонецЕсли;

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();

				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();

			КонецЕсли;

		КонецЦикла;

	Исключение
		ТекстСообщения = НСтр("ru = 'Операция не выполнена';
								|en = 'Transaction is not executed'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Устанавливает субконто расчетные документы у указанного счета.
//
Процедура ПрименитьПараметрыРасчетовССотрудниками(ИмяСчета, ИмяПланаСчетов, ВестиУчетПоРаботникам) Экспорт

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");

			Если НЕ (Субконто = Неопределено) Тогда
				Если Субконто.Предопределенное Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если ВестиУчетПоРаботникам = Истина Тогда // Добавляем 

				Если Субконто = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Добавить();

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
					НовыйВид.Суммовой    = Истина;
					
					Если Объект.Количественный Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;
					
					Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК, "ВидСубконто");
					Если Субконто <> Неопределено Тогда
						Объект.ВидыСубконто.Сдвинуть(1,-1);						
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли ВестиУчетПоРаботникам = Ложь Тогда // Удаляем.

				Если Субконто = Неопределено Тогда // Кто-то удалил вид субконто вручную.
					Возврат;
				КонецЕсли;

				Объект.ВидыСубконто.Удалить(Субконто);
				
			КонецЕсли;
			
			Объект.Записать();

		КонецЦикла;

	Исключение

		ТекстСообщения = НСтр("ru = 'Операция не выполнена';
								|en = 'Transaction is not executed'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки

КонецПроцедуры

// Установка субконто "Виды начислений оплаты труда по статье 255 НК РФ" на счетах зарплаты (70).
Процедура УстановитьУчетНаСчетахУчетаЗарплаты()

	// Предопределенные элементы обрабатываются только в главном узле РИБ.
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Объект = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();

	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК, "ВидСубконто");
	Если Субконто = Неопределено Тогда
		НовыйВид = Объект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
		НовыйВид.Суммовой    = Истина;
		НовыйВид.ТолькоОбороты    = Истина;
		Объект.Записать();
	КонецЕсли;

	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");
	Если Субконто <> Неопределено
		И Объект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций Тогда
		Объект.ВидыСубконто.Сдвинуть(1,-1);
		Объект.Записать();
	КонецЕсли;

КонецПроцедуры

// Включает режим разделения итогов для регистров бухгалтерии и регистров накопления.
//
Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии()
	
	Для Каждого Регистр Из РегистрыНакопления Цикл
		Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
	Для Каждого Регистр Из РегистрыБухгалтерии Цикл
		Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;

КонецПроцедуры //ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии

// Записывает константу "Формат сохранения регистров учета" значение по умолчанию.
//
Процедура УстановитьФорматСохраненияРегистровУчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ФорматСохраненияРегистровУчета.Получить()) Тогда
		Константы.ФорматСохраненияРегистровУчета.Установить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение константы "ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС"
// в значение по умолчанию 10000.
Процедура УстановитьПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС() Экспорт
	
	Константы.ПредельноеКоличествоЗаписейВРазделеДекларацииПоНДС.Установить(10000);
	
КонецПроцедуры

#КонецОбласти
