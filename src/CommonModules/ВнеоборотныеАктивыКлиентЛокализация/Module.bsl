////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы", предназначенные для локализации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Описание
// 
// Параметры:
// 	Команда - КомандаФормы - 
// 	Форма - ФормаКлиентскогоПриложения - 
Процедура ПриВыполненииКоманды(Команда, Форма) Экспорт

	ДополнительныеПараметры = Неопределено;
	ТребуетсяВызовСервера = Ложь;
	ПродолжитьВыполнениеКоманды = Истина;
	
	//++ Локализация
	
	Элементы = Форма.Элементы;

	Если Команда.Имя = Элементы.ФормаПроводкиРеглУчета.ИмяКоманды Тогда
		ВыполнитьКомандуОткрытьПроводкиРегламентированногоУчета(Форма, ДополнительныеПараметры);
	КонецЕсли; 
	
	//-- Локализация
	
	Если ПродолжитьВыполнениеКоманды Тогда
		
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(
			Форма, 
			Команда.Имя, 
			ТребуетсяВызовСервера,
			ДополнительныеПараметры);
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьДействиеПослеРасчета(Форма, ДействиеПослеРасчета) Экспорт

	//++ Локализация
	
	Если ДействиеПослеРасчета = "ОткрытьПроводкиРегламентированногоУчета" Тогда
		ОткрытьПроводкиРегламентированногоУчета(Форма.Объект.Ссылка);
	КонецЕсли; 
	
	//-- Локализация

КонецПроцедуры

Функция ИмяФормыДокументыПоОсновномуСредству() Экспорт

	ИмяФормы = Неопределено;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.ИспользуетсяУправлениеВНА_2_4() Тогда
		ИмяФормы = "Обработка.ЖурналДокументовОС2_4.Форма";
	Иначе
		ИмяФормы = "Обработка.ЖурналДокументовОС.Форма";
	КонецЕсли;
	//-- Локализация
	
	Возврат ИмяФормы;
	
КонецФункции

Функция ИмяФормыДокументыПоНематериальномуАктиву() Экспорт

	ИмяФормы = Неопределено;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.ИспользуетсяУправлениеВНА_2_4() Тогда
		ИмяФормы = "Обработка.ЖурналДокументовНМА2_4.Форма";
	Иначе
		ИмяФормы = "Обработка.ЖурналДокументовНМА.Форма";
	КонецЕсли;
	//-- Локализация
	
	Возврат ИмяФормы;
	
КонецФункции

Процедура ПриИзмененииРеквизитаПринятияКУчетуОС(Элемент, Форма, ДополнительныеПараметры, ТребуетсяВызовСервера) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСИзДокумента.Имя
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСРаспределяется.Имя
		ИЛИ Элемент.Имя = Элементы.ПорядокУчетаНУ.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.СрокИспользованияНУ.Имя Тогда
		
		СрокИспользованияНУПриИзменении(ДополнительныеПараметры);
		
	ИначеЕсли Элемент.Имя = Элементы.СтатьяРасходовНалог.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяРасходовАмортизационнойПремии.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяДоходовЦФ.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяДоходовПоИнвентаризации.Имя Тогда
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
	ИначеЕсли Элемент.Имя = Элементы.СтатьяРасходовНУ.Имя Тогда
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.ПередаватьРасходыВДругуюОрганизацию.Имя Тогда
		
		ПередаватьРасходыВДругуюОрганизациюПриИзменении(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитаОбъединениеОС(Элемент, Форма, ДополнительныеПараметры, ТребуетсяВызовСервера) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСИзДокумента.Имя
		ИЛИ Элемент.Имя = Элементы.ВариантРаздельногоУчетаНДСРаспределяется.Имя
		ИЛИ Элемент.Имя = Элементы.ПорядокУчетаНУ.Имя Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", Элемент.Имя);
		
	ИначеЕсли Элемент.Имя = Элементы.СрокИспользованияНУ.Имя Тогда
		
		СрокИспользованияНУПриИзменении(ДополнительныеПараметры);
		
	ИначеЕсли Элемент.Имя = Элементы.СтатьяРасходовНалог.Имя
		ИЛИ Элемент.Имя = Элементы.СтатьяДоходов.Имя Тогда
		
		ДоходыИРасходыКлиентСервер.СтатьяПриИзменении(Форма, Элемент);
		
	ИначеЕсли Элемент.Имя = Элементы.ПередаватьРасходыВДругуюОрганизацию.Имя Тогда
		
		ПередаватьРасходыВДругуюОрганизациюПриИзменении(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#Область ПанельСправочниковВнеоборотныеАктивы

Процедура ПриВыполненииКоманды_ПанельСправочниковВнеоборотныеАктивы(Команда, Форма) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = Элементы.ОткрытьГодовыеГрафикиАмортизацииОС.ИмяКоманды Тогда
		ОткрытьФорму("Справочник.ГодовыеГрафикиАмортизацииОС.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьКлассификаторОКОФ.ИмяКоманды Тогда
		ОткрытьФорму("Справочник.ОбщероссийскийКлассификаторОсновныхФондов.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьКлассификаторЕНАОФ.ИмяКоманды Тогда
		ОткрытьФорму("Справочник.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьСтавкиТранспортногоНалога.Имя Тогда
		ОткрытьФорму("РегистрСведений.СтавкиТранспортногоНалога.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьНастройкуПереходаНаФСБУ5.Имя Тогда
		ОткрытьФорму("РегистрСведений.НастройкаПереходаНаФСБУ5.ФормаСписка", , Форма);
	//++ НЕ УТКА
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыОС.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыОСМеждународныйУчет.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыНМА.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыНМА.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыОС.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыОСМеждународныйУчет.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьГруппыНМА.Имя Тогда
		ОткрытьФорму("Справочник.ГруппыНМА.ФормаСписка", , Форма);
	ИначеЕсли Команда.Имя = Элементы.ОткрытьОснованияЛьготПоИмущественнымНалогам.Имя Тогда
		ОткрытьФорму("Справочник.ОснованияЛьготПоИмущественнымНалогам.ФормаСписка", , Форма);
	//-- НЕ УТКА
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

//  Функция возвращает ОС выбранное в текущей строке таблицы ОС документа для дальнейшей передачи
// в функцию ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию. В случае невозможности
// определения ОС выдает сообщение об ошибке.
//
// Параметры:
//  ПараметрыФормы   - Структура с параметрами заполнения, ключи структуры:
//  	Форма             - форма заполняемого документа
//  	Объект            - Значение основного реквизита формы - документа для заполнения
//  	ИмяТабличнойЧасти - Имя табличной части основных средств документа, значение по умолчанию "ОС".
//
// Возвращаемое значение:
//   СправочникСсылка.ОбъектыЭксплуатации, Неопределено - В случае невозможности определения ОС функция
//   	возвращает Неопределено, в противном случае функция возвращает значение ОС.
//
Функция ПолучитьОСДляЗаполнениеПоНаименованию(Параметры) Экспорт
	
	ОчиститьСообщения();
	
	Форма = Параметры.Форма;
	Объект = Параметры.Объект;
	Если Параметры.Свойство("ИмяТабличнойЧасти") Тогда
		ИмяТабличнойЧасти = Параметры.ИмяТабличнойЧасти;
	Иначе
		ИмяТабличнойЧасти = "ОС";
	КонецЕсли;
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Данные для заполнения отсутствуют.';
								|en = 'Data for population is missing.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяТабличнойЧасти);
		Возврат Неопределено;
	КонецЕсли;
	
	ОсновноеСредство = Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные.ОсновноеСредство;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано основное средство';
								|en = 'Fixed asset is not selected'");
		ИндексСтроки = Формат(Объект[ИмяТабличнойЧасти].Индекс(Форма.Элементы[ИмяТабличнойЧасти].ТекущиеДанные), "ЧН=0; ЧГ=");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяТабличнойЧасти + "[" + ИндексСтроки + "].ОсновноеСредство");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОсновноеСредство;
	
КонецФункции // ПолучитьОСДляЗаполнениеПоНаименованию()

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииОС(Параметры) Экспорт

	ОбработкаВыполнена = Ложь;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.НеВедетсяУчетВнеоборотныхАктивов2_4(Параметры.Период) Тогда
		
		ОбработкаВыполнена = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Период", Параметры.Период);
		ПараметрыФормы.Вставить("МассивОрганизаций", Параметры.МассивОрганизаций);
		ОткрытьФорму("Документ.АмортизацияОС.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбработкаВыполнена;
	
КонецФункции

Функция ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииНМА(Параметры) Экспорт

	ОбработкаВыполнена = Ложь;
	
	//++ Локализация
	Если ВнеоборотныеАктивыВызовСервера.НеВедетсяУчетВнеоборотныхАктивов2_4(Параметры.Период) Тогда
		
		ОбработкаВыполнена = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Период", Параметры.Период);
		ПараметрыФормы.Вставить("МассивОрганизаций", Параметры.МассивОрганизаций);
		ОткрытьФорму("Документ.АмортизацияНМА.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбработкаВыполнена;
	
КонецФункции

//++ Локализация

// Открывает список взаимозависимых документов по исправлению имущественных налогов.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации -
// 	НачалоПериодаИсправления - Дата -
// 	КонецПериодаИсправления - Дата -
// 	СписокОС - Массив из СправочникСсылка.ОбъектыЭксплуатации -
Процедура ОткрытьВзаимозависимыеИсправленияИмущественныхНалогов(Организация, НачалоПериодаИсправления, КонецПериодаИсправления, СписокОС) Экспорт
	
	КлючУникальности = "ВзаимозависимыеИсправленияИмущественныхНалогов";

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборОрганизация", Организация);
	ПараметрыФормы.Вставить("ОтборОсновноеСредство", СписокОС);
	ПараметрыФормы.Вставить("ОтборНачалоПериодаИсправления", НачалоПериодаИсправления);
	ПараметрыФормы.Вставить("КлючНазначенияФормы", КлючУникальности);
	
	Если КонецПериодаИсправления < НачалоПериодаИсправления
		И КонецПериодаИсправления <> '000101010000'
		И НачалоПериодаИсправления <> '000101010000'Тогда
		ПараметрыФормы.Вставить("ОтборКонецПериодаИсправления", НачалоПериодаИсправления);
	Иначе
		ПараметрыФормы.Вставить("ОтборКонецПериодаИсправления", КонецПериодаИсправления);
	КонецЕсли;

	ОткрытьФорму("Обработка.ЖурналДокументовИсправлениеИмущественныхНалогов.Форма", ПараметрыФормы,, КлючУникальности);
	
	Оповестить("ОткрытьВзаимозависимыеИсправленияИмущественныхНалогов", ПараметрыФормы);
	
КонецПроцедуры

Процедура ВыполнитьКомандуОткрытьПроводкиРегламентированногоУчета(Форма, ДополнительныеПараметры)
	
	Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ЗаголовокДействия", НСтр("ru = 'Проводки регламентированного учета';
															|en = 'Local accounting entries'"));
		ПараметрыДействия.Вставить("ДействиеПослеРасчета", "ОткрытьПроводкиРегламентированногоУчета");
		ДополнительныеПараметры.Вставить("Выполнить_ЗаписатьИВыполнитьДействие", ПараметрыДействия);
		
	Иначе
		ОткрытьПроводкиРегламентированногоУчета(Форма.Объект.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьПроводкиРегламентированногоУчета(Ссылка)

	Отбор = Новый Структура("Регистратор", Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	ОткрытьФорму("Обработка.ОтражениеДокументовВРеглУчете.Форма.ПроводкиРегламентированногоУчета", ПараметрыФормы,, Ссылка);

КонецПроцедуры

Процедура СрокИспользованияНУПриИзменении(ДополнительныеПараметры)
	
	ДополнительныеПараметры = Новый Структура;
	
	ПараметрыДействия = Новый Структура("ИмяРеквизита,ОбновитьЕслиСовпадают", "СрокИспользованияНУ", Ложь);
	ДополнительныеПараметры.Вставить("Выполнить_ПриИзмененииСрокаИспользования", ПараметрыДействия);
	
КонецПроцедуры

Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Форма, ДополнительныеПараметры)
	
	Объект = Форма.Объект;
	
	Если Не Объект.ПередаватьРасходыВДругуюОрганизацию Тогда
		Объект.ОрганизацияПолучательРасходов = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Выполнить_НастроитьЗависимыеЭлементыФормы", "ПередаватьРасходыВДругуюОрганизацию");
	
КонецПроцедуры

//-- Локализация

#КонецОбласти
