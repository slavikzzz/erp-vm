//////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы "Переработка на стороне"
// связанные с хозяйственной операцией "Поступление от переработчика".
// 
//////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область УнифицированныеМетоды

#Область Заполнение

// Возвращает условию продаж
//
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами, Неопределено - 
//
// Возвращаемое значение:
//  Неопределено -
//
Функция ПолучитьУсловияПродаж(Соглашение = Неопределено) Экспорт

	Возврат Неопределено;

КонецФункции

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одной накладной.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	КлючевыеПоля = "Организация, Партнер, Контрагент, Договор, СкладПродукции, Сделка,
			|Подразделение, НаправлениеДеятельности, ВариантПриемкиТоваров";
	
	Возврат КлючевыеПоля;
	
КонецФункции

// Возвращает список реквизитов, по которым происходит сопоставление таблиц при заполнении по заказам/ордерам
// 
// Возвращаемое значение:
// 	Строка
//
Функция КлючевыеПоляТаблицыТоваровРаспоряжения() Экспорт
	
	Возврат "Распоряжение, Номенклатура, Характеристика, Назначение";
	
КонецФункции

// Возвращает параметры заполнения документа по заявкам на возврат и ордерам поступления.
//
// Возвращаемое значение:
//	Структура - параметры заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	Возврат Документы.ПоступлениеТоваровОтХранителя.ПараметрыЗаполненияДокумента();
	
КонецФункции

// Выполняет инициализацию параметров заполнения документа по данным документа.
//
// Параметры:
//	ПараметрыЗаполнения	 - Структура	 - параметры заполнения документа по умолчанию.
//	РеквизитыШапки		 - Структура	 - данные документа, на основании которых будет выполняться заполнение параметров.
//	МассивЗаказов		 - Массив		 - ссылки на заявки, по которым будет выполняться заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов		  = МассивЗаказов;
	ПараметрыЗаполнения.РеквизитыШапки		  = РеквизитыШапки;
	ПараметрыЗаполнения.Организация			  = РеквизитыШапки.Организация;
	ПараметрыЗаполнения.ХозяйственнаяОперация = РеквизитыШапки.ХозяйственнаяОперация;
	ПараметрыЗаполнения.Подразделение		  = РеквизитыШапки.Подразделение;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаполнения.Склад) Тогда
		ПараметрыЗаполнения.Склад = РеквизитыШапки.Склад;
	КонецЕсли;
	
	Обработчик = Документы.ПоступлениеТоваровОтХранителя.ОбработчикДействий(РеквизитыШапки.ХозяйственнаяОперация);
	ПараметрыЗаполнения.КлючевыеПоля = Обработчик.КлючевыеПоляТаблицыТоваровРаспоряжения();
	
КонецПроцедуры

// Формирует структуру для создания поступления товаров от хранителя.
//
// Параметры:
//  МассивСсылок - Массив - содержит ссылку на заявку на возврат товаров от клиента
//  СвойстваЗаказов - Структура - служебная структура для общих механизмов
//
// Возвращаемое значение:
//  Структура - Реквизиты шапки для заполнения поступления товаров от хранителя.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, Знач СвойстваЗаказов = Неопределено) Экспорт
	
	Если СвойстваЗаказов = Неопределено Тогда
		СвойстваЗаказов = Новый Структура;
	КонецЕсли;
	
	СвойстваЗаказов.Вставить(
		"ХозяйственнаяОперацияОформляемойНакладной",
		Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5);
	
	РеквизитыШапки = Документы.ПоступлениеТоваровОтХранителя.ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов);
	
	Возврат РеквизитыШапки;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Возвращает параметры заполнения видов запасов для документа "Поступление товаров от хранителя".
//
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровОтХранителя
//
// Возвращаемое значение:
//  см. ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов
//
Функция ПараметрыЗаполненияВидовЗапасов(Объект) Экспорт
	
	Перем ПараметрыЗаполнения;
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	ПараметрыЗаполнения.СторнируемыйДокумент = Объект.СторнируемыйДокумент;
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.Организация = Объект.Организация;
	
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов  = Новый Массив;
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияПереработчика);
	//++ НЕ УТКА
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПолуфабрикатДавальца);
	ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
	//-- НЕ УТКА
	
	ПараметрыЗаполнения.ВладелецТовараВШапке = Ложь;
	ПараметрыЗаполнения.ПриНехваткеТоваровОрганизацииЗаполнятьВидамиЗапасовПоУмолчанию =
		ПраваПользователяПовтИсп.ОтключитьКонтрольПередачиПродукцииПереработчиком();
	
	ПараметрыЗаполнения.ТаблицаРеквизитовВидовЗапасовПоУмолчанию = ТаблицаРеквизитовВидовЗапасовПоУмолчанию(Объект);
	
	Возврат ПараметрыЗаполнения;

КонецФункции

// Добавляет дополнительное свойство для контроля при проведении
// 
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровОтХранителя - 
//
Процедура ДобавитьДополнительноеСвойствоДляКонтроляПриПроведении(Объект) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Округление

// Заполняет признаки ЦеховаяКладовая и НужноОкруглять в строках таблицы
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//  ПересчитатьКоличествоЕдиниц - Булево - 
//  
Процедура ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект, ПересчитатьКоличествоЕдиниц) Экспорт
	
	ПроизводствоСервер.ЗаполнитьПризнакЦеховаяКладоваяВТаблице(Объект.Товары,, Объект.Склад);
	
	Если ПересчитатьКоличествоЕдиниц Тогда
		ПересчитатьКоличествоЕдиниц(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает количество единиц
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
Процедура ПересчитатьКоличествоЕдиниц(Объект) Экспорт
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

// Добавляет действия "ЗаполнитьПризнакЦеховаяКладовая"
//
// Параметры:
//  СтруктураДействий - Структура - 
//  Склад - СправочникСсылка.Склады - 
//
Процедура ДобавитьДействиеЗаполнитьПризнакЦеховаяКладовая(СтруктураДействий, Склад) Экспорт
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая", Новый Структура("ЗначениеСклада", Склад));
	
КонецПроцедуры

// Добавляет действие "ПересчитатьКоличествоЕдиниц"
//
// Параметры:
//  СтруктураДействий - Структура - 
//
Процедура ДобавитьДействиеПересчитатьКоличествоЕдиниц(СтруктураДействий) Экспорт
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц());
	
КонецПроцедуры

// Возвращает параметры перерасчета клиента единиц
//
// Возвращаемое значение:
//  Структура - см. ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц
//
Функция ПараметрыПересчетаКоличестваЕдиниц() Экспорт
	
	Возврат ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц();
	
КонецФункции

// Признак необходимости пересчета количество единиц
//
// Возвращаемое значение:
//  Булево - 
//
Функция НеобходимПересчетКоличествоЕдиниц() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает параметры для округления
// 
// Параметры:
//  Склад - СправочникСсылка.Склады - 
// 
// Возвращаемое значение:
// 	Структура - элементы содержат структуру параметров округления:
//   *Товары - см. НоменклатураСервер.ПараметрыОкругленияКоличестваШтучныхТоваров.
//
Функция ПараметрыТЧДляОкругления(Склад) Экспорт
	
	ПараметрыТЧ = Новый Структура;
	
	ИмяТЧ = "Товары";
	ИмяПоляСклад = "Склад";
	ПараметрыТЧ.Вставить(ИмяТЧ, НоменклатураСервер.ПараметрыПроверкиЗаполненияКоличества());
	ПараметрыТЧ[ИмяТЧ].ИмяТЧ = ИмяТЧ;
	ПараметрыТЧ[ИмяТЧ].ДополнительныеПоля.Вставить(ИмяПоляСклад, "&" + ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].УсловиеОтбораСтрокПоДополнительнымПолям = 
			ПроизводствоСервер.УсловиеОтбораСтрокДляОкругления(ИмяТЧ, ИмяПоляСклад);
	ПараметрыТЧ[ИмяТЧ].ПараметрыЗапроса.Вставить(ИмяПоляСклад, Склад);
	
	Возврат ПараметрыТЧ;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

#Область ТекстыЗапросовЗаполненияСпискаРаспоряжений

// Возвращает текст запроса распоряжений доступных в накладной.
// 
// Параметры:
//  ПараметрыТекстаЗапроса - см. ОбщегоНазначенияУТ.ПараметрыТекстаЗапросаРаспоряженийНакладных
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияНакладной(ПараметрыТекстаЗапроса) Экспорт
	
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ПараметрыТекстаЗапроса.Отбор,
		"ИСТИНА",
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
		|ГДЕ
		|	ТаблицаВыходныеИзделия.Ссылка = ТаблицаРаспоряжений.Ссылка
		|	И ТаблицаВыходныеИзделия.Получатель В ИЕРАРХИИ (&Склад)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ТаблицаПобочныеИзделия
		|ГДЕ
		|	ТаблицаПобочныеИзделия.Ссылка = ТаблицаРаспоряжений.Ссылка
		|	И ТаблицаПобочныеИзделия.Получатель В ИЕРАРХИИ (&Склад)
		//++ НЕ УТКА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
		|ГДЕ
		|	ТаблицаВыходныеИзделия.Ссылка.ЗаказПереработчику = ТаблицаРаспоряжений.Ссылка
		|	И ТаблицаВыходныеИзделия.Получатель В ИЕРАРХИИ (&Склад)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаПобочныеИзделия
		|ГДЕ
		|	ТаблицаПобочныеИзделия.Ссылка.ЗаказПереработчику = ТаблицаРаспоряжений.Ссылка
		|	И ТаблицаПобочныеИзделия.Получатель В ИЕРАРХИИ (&Склад)
		//-- НЕ УТКА
		|",
		"В");
	
	Возврат Документы.ЗаказПереработчику2_5.ТекстЗапросаРаспоряженийНакладных(ПараметрыТекстаЗапроса);
	
КонецФункции

// Возвращает текст запроса распоряжений к оформлению
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаРаспоряженияКОформлению() Экспорт

	Возврат РегистрыНакопления.ЗаказыПоставщикам.ТекстЗапросаРаспоряженияКОформлению("КПоступлению");

КонецФункции

// Возвращает текст запроса товаров распоряжений к оформлению
//
// Параметры:
//  ИмяВременнойТаблицы - Строка -
//  ОтборПоИзмерениям   - Соответствие -
//
// Возвращаемое значение:
//  Строка - текст запрос
//
Функция ТекстЗапросаОстаткиТоваровКОформлению(ИмяВременнойТаблицы, ОтборПоИзмерениям = Неопределено) Экспорт
	
	Если ОтборПоИзмерениям = Неопределено Тогда
		ОтборПоИзмерениям = Новый Соответствие;
	КонецЕсли;
	
	ТекстЗапроса =
		РегистрыНакопления.ЗаказыПоставщикам.ТекстЗапросаОстатки(
			ИмяВременнойТаблицы,
			ОтборПоИзмерениям,
			"КПоступлению > 0");
	
	ОписаниеТаблицы = 
		СхемыЗапросов.ОписаниеТаблицы(
			Тип("ТаблицаСхемыЗапроса"),
			"Документ.ЗаказПереработчику2_5.ВыходныеИзделия",
			"ЗаказыПереработчикамВыходныеИзделия",
			"Ссылка, КодСтроки");
	
	ОписаниеСоединения =
		СхемыЗапросов.ОписаниеСоединения(
			ОписаниеТаблицы,
			"Набор.ЗаказПоставщику = ЗаказыПереработчикамВыходныеИзделия.Ссылка
			|И Набор.КодСтроки = ЗаказыПереработчикамВыходныеИзделия.КодСтроки");
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьСоединениеВЗапрос(
			ТекстЗапроса,
			"Набор",
			ОписаниеСоединения);
	
	ОписаниеТаблицы = 
		СхемыЗапросов.ОписаниеТаблицы(
			Тип("ТаблицаСхемыЗапроса"),
			"Документ.ЗаказПереработчику2_5.ПобочныеИзделия",
			"ЗаказыПереработчикамПобочныеИзделия",
			"Ссылка, КодСтроки");
	
	ОписаниеСоединения =
		СхемыЗапросов.ОписаниеСоединения(
			ОписаниеТаблицы,
			"Набор.ЗаказПоставщику = ЗаказыПереработчикамПобочныеИзделия.Ссылка
			|И Набор.КодСтроки = ЗаказыПереработчикамПобочныеИзделия.КодСтроки");
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьСоединениеВЗапрос(
			ТекстЗапроса,
			"Набор",
			ОписаниеСоединения);
	
	//++ НЕ УТКА
	ОписаниеТаблицы = 
		СхемыЗапросов.ОписаниеТаблицы(
			Тип("ТаблицаСхемыЗапроса"),
			"Документ.ЭтапПроизводства2_2.ВыходныеИзделия",
			"ЭтапыПроизводства2_2ВыходныеИзделия",
			"Ссылка, КодСтроки");
	
	ОписаниеСоединения =
		СхемыЗапросов.ОписаниеСоединения(
			ОписаниеТаблицы,
			"Набор.ЗаказПоставщику = ЭтапыПроизводства2_2ВыходныеИзделия.Ссылка.ЗаказПереработчику
			|И Набор.КодСтроки = ЭтапыПроизводства2_2ВыходныеИзделия.КодСтроки");
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьСоединениеВЗапрос(
			ТекстЗапроса,
			"Набор",
			ОписаниеСоединения);
	
	ОписаниеТаблицы = 
		СхемыЗапросов.ОписаниеТаблицы(
			Тип("ТаблицаСхемыЗапроса"),
			"Документ.ЭтапПроизводства2_2.ПобочныеИзделия",
			"ЭтапыПроизводства2_2ПобочныеИзделия",
			"Ссылка, КодСтроки");
	
	ОписаниеСоединения =
		СхемыЗапросов.ОписаниеСоединения(
			ОписаниеТаблицы,
			"Набор.ЗаказПоставщику = ЭтапыПроизводства2_2ПобочныеИзделия.Ссылка.ЗаказПереработчику
			|И Набор.КодСтроки = ЭтапыПроизводства2_2ПобочныеИзделия.КодСтроки");
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьСоединениеВЗапрос(
			ТекстЗапроса,
			"Набор",
			ОписаниеСоединения);
	//-- НЕ УТКА
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ТекстЗапроса,
			"ВЫБОР
			|	КОГДА ЗаказыПереработчикамВыходныеИзделия.Назначение ЕСТЬ НЕ NULL
			|		ТОГДА ЗаказыПереработчикамВыходныеИзделия.Назначение
			|	КОГДА ЗаказыПереработчикамПобочныеИзделия.Назначение ЕСТЬ НЕ NULL
			|		ТОГДА ЗаказыПереработчикамПобочныеИзделия.Назначение
			//++ НЕ УТКА
			|	КОГДА ЭтапыПроизводства2_2ВыходныеИзделия.Назначение ЕСТЬ НЕ NULL
			|		ТОГДА ЭтапыПроизводства2_2ВыходныеИзделия.Назначение
			|	КОГДА ЭтапыПроизводства2_2ПобочныеИзделия.Назначение ЕСТЬ НЕ NULL
			|		ТОГДА ЭтапыПроизводства2_2ПобочныеИзделия.Назначение
			//-- НЕ УТКА
			|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|КОНЕЦ",
			"Назначение");
	
	ТекстЗапроса =
		СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ТекстЗапроса,
			"ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)",
			"Серия");
	
	ТекстЗапроса = СхемыЗапросов.ИзменитьПсевдонимПоляВыборкиВЗапросе(ТекстЗапроса, "ЗаказПоставщику", "Распоряжение");
	ТекстЗапроса = СхемыЗапросов.ИзменитьПсевдонимПоляВыборкиВЗапросе(ТекстЗапроса, "КПоступлению",    "КОформлению");
	
	ТекстЗапроса = СхемыЗапросов.УстановитьИндексациюПолейЗапроса(ТекстЗапроса, "Номенклатура, Характеристика");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

//Возвращает текст запроса данные для проверки ввода на основании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаДанныеДляПроверкиВводаНаОсновании() Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеРаспоряжение.Основание             КАК Основание,
	|	ДанныеРаспоряжение.Статус                КАК Статус,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРаспоряжение.Склад) > 1 КАК ОформлениеЧерезРМ,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеРаспоряжение.Склад) = 1
	|			ТОГДА МАКСИМУМ(ДанныеРаспоряжение.Склад)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                    КАК Склад,
	|	ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка                КАК Основание,
	|		ДанныеРаспоряжение.ГруппировкаЗатрат     КАК ГруппировкаЗатрат,
	|		ДанныеРаспоряжение.Статус                КАК Статус,
	|		ТаблицаИзделий.Получатель                КАК Склад,
	|		ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ДанныеРаспоряжение.Ссылка
	
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.СписатьНаРасходы
	|		И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|		И НЕ ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка                КАК Основание,
	|		ДанныеРаспоряжение.ГруппировкаЗатрат     КАК ГруппировкаЗатрат,
	|		ДанныеРаспоряжение.Статус                КАК Статус,
	|		ТаблицаИзделий.Получатель                КАК Склад,
	|		ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ДанныеРаспоряжение.Ссылка
	
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.СписатьНаРасходы
	|		И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|		И НЕ ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка                КАК Основание,
	|		ДанныеРаспоряжение.ГруппировкаЗатрат     КАК ГруппировкаЗатрат,
	|		ДанныеРаспоряжение.Статус                КАК Статус,
	|		ТаблицаИзделий.Получатель                КАК Склад,
	|		ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|		ПО ЭтапыПроизводства.ЗаказПереработчику = ДанныеРаспоряжение.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.СписатьНаРасходы
	|		И НЕ ТаблицаИзделий.Отменено
	|		И ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка                КАК Основание,
	|		ДанныеРаспоряжение.ГруппировкаЗатрат     КАК ГруппировкаЗатрат,
	|		ДанныеРаспоряжение.Статус                КАК Статус,
	|		ТаблицаИзделий.Получатель                КАК Склад,
	|		ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|		ПО ЭтапыПроизводства.ЗаказПереработчику = ДанныеРаспоряжение.Ссылка
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И НЕ ТаблицаИзделий.СписатьНаРасходы
	|		И НЕ ТаблицаИзделий.Отменено
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДанныеРаспоряжение.ПоЗаказам
	|				ТОГДА ДанныеРаспоряжение.ЗаказПереработчику
	|			ИНАЧЕ ДанныеРаспоряжение.Ссылка
	|		КОНЕЦ                                    КАК Основание,
	|		ДанныеРаспоряжение.ГруппировкаЗатрат     КАК ГруппировкаЗатрат,
	|		ВЫБОР
	|			КОГДА ДанныеРаспоряжение.ПоЗаказам
	|				ТОГДА ДанныеРаспоряжение.ЗаказПереработчику.Статус
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ                                    КАК Статус,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|		ДанныеРаспоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|	ИЗ
	|		Документ.ОтчетПереработчика2_5 КАК ДанныеРаспоряжение
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|	) КАК ДанныеРаспоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаспоряжение.Основание,
	|	ДанныеРаспоряжение.Статус,
	|	ДанныеРаспоряжение.ХозяйственнаяОперация
	|");
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ТаблицаИзделий
	|ГДЕ
	|	ТаблицаИзделий.Ссылка В(&Распоряжения)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|	И НЕ ТаблицаИзделий.Ссылка.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ТаблицаИзделий
	|ГДЕ
	|	ТаблицаИзделий.Ссылка В(&Распоряжения)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|	И НЕ ТаблицаИзделий.Ссылка.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5 КАК ОтчетыПереработчика
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ОтчетыПереработчика.ЗаказПереработчику
	|
	|ГДЕ
	|	ОтчетыПереработчика.Ссылка В(&Распоряжения)
	|	И ОтчетыПереработчика.ПоЗаказам
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|	И НЕ ТаблицаИзделий.Ссылка.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5 КАК ОтчетыПереработчика
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ОтчетыПереработчика.ЗаказПереработчику
	|
	|ГДЕ
	|	ОтчетыПереработчика.Ссылка В(&Распоряжения)
	|	И ОтчетыПереработчика.ПоЗаказам
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|	И НЕ ТаблицаИзделий.Ссылка.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.ЗаказПереработчику = ДанныеРаспоряжение.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|ГДЕ
	|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	|	И ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.ЗаказПереработчику = ДанныеРаспоряжение.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|ГДЕ
	|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И ДанныеРаспоряжение.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5 КАК ОтчетыПереработчика
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.ЗаказПереработчику = ОтчетыПереработчика.ЗаказПереработчику
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|ГДЕ
	|	ОтчетыПереработчика.Ссылка В(&Распоряжения)
	|	И ОтчетыПереработчика.ПоЗаказам
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	|	И ОтчетыПереработчика.ЗаказПереработчику.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5 КАК ОтчетыПереработчика
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПроизводства
	|	ПО ЭтапыПроизводства.ЗаказПереработчику = ОтчетыПереработчика.ЗаказПереработчику
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаИзделий
	|	ПО ТаблицаИзделий.Ссылка = ЭтапыПроизводства.Ссылка
	|	
	|ГДЕ
	|	ОтчетыПереработчика.Ссылка В(&Распоряжения)
	|	И ОтчетыПереработчика.ПоЗаказам
	|	И НЕ ТаблицаИзделий.СписатьНаРасходы
	|	И НЕ ТаблицаИзделий.Отменено
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|	И ОтчетыПереработчика.ЗаказПереработчику.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ДанныеРаспоряжение
	|ГДЕ
	|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|	И ДанныеРаспоряжение.КодСтроки = 0
	|	И НЕ ДанныеРаспоряжение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ДанныеРаспоряжение.СписатьНаРасходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Документ.ОтчетПереработчика2_5.ПобочныеИзделия КАК ДанныеРаспоряжение
	|ГДЕ
	|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|	И ДанныеРаспоряжение.КодСтроки = 0
	|	И НЕ ДанныеРаспоряжение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ДанныеРаспоряжение.СписатьНаРасходы
	|");
	
	ОтборПоИзмерениям = Новый Соответствие;
	ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(
		ОтборПоИзмерениям,
		"ЗаказПоставщику",
		"ВЫБРАТЬ
		|	ДанныеРаспоряжение.Ссылка
		|ИЗ
		|	Документ.ЗаказПереработчику2_5 КАК ДанныеРаспоряжение
		|ГДЕ
		|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеРаспоряжение.ЗаказПереработчику
		|ИЗ
		|	Документ.ОтчетПереработчика2_5 КАК ДанныеРаспоряжение
		|ГДЕ
		|	ДанныеРаспоряжение.Ссылка В(&Распоряжения)
		|	И ДанныеРаспоряжение.ПоЗаказам
		|",
		"В");
	
	ТекстыЗапросов.Добавить(
		ТекстЗапросаОстаткиТоваровКОформлению("ВтОстаткиКОформлению", ОтборПоИзмерениям));
	
	ТекстыЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Набор.Распоряжение КАК РаспоряженияКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиКОформлению.Распоряжение КАК Распоряжение
	|	ИЗ
	|		ВтОстаткиКОформлению КАК ОстаткиКОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка КАК Распоряжение
	|	ИЗ
	|		Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ДанныеРаспоряжение
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И ДанныеРаспоряжение.КодСтроки = 0
	|		И НЕ ДанныеРаспоряжение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И НЕ ДанныеРаспоряжение.СписатьНаРасходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРаспоряжение.Ссылка КАК Распоряжение
	|	ИЗ
	|		Документ.ОтчетПереработчика2_5.ПобочныеИзделия КАК ДанныеРаспоряжение
	|	ГДЕ
	|		ДанныеРаспоряжение.Ссылка В(&Распоряжения)
	|		И ДанныеРаспоряжение.КодСтроки = 0
	|		И НЕ ДанныеРаспоряжение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|		И НЕ ДанныеРаспоряжение.СписатьНаРасходы
	|	) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Распоряжение
	|");
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());

КонецФункции

//Возвращает текст запроса данные заполнения накладной
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаДанныеЗаполненияНакладной() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ХозяйственнаяОперация                                 КАК ХозяйственнаяОперация,
	|	Заказ.Организация                                      КАК Организация,
	|	Заказ.Подразделение                                    КАК Подразделение,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ.Склад) = 1
	|			ТОГДА МАКСИМУМ(Заказ.Склад)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                                  КАК Склад,
	|	Заказ.Сделка                                           КАК Сделка,
	|	Заказ.Партнер                                          КАК Партнер,
	|	Заказ.Контрагент                                       КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|	Заказ.Договор                                          КАК Договор,
	|	Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|	Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|	Заказ.Валюта                                           КАК Валюта,
	|	Заказ.ВидЦены                                          КАК ВидЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказ.Организация                                      КАК Организация,
	|		Заказ.Подразделение                                    КАК Подразделение,
	|		ТаблицаИзделий.Получатель                              КАК Склад,
	|		Заказ.Сделка                                           КАК Сделка,
	|		Заказ.Партнер                                          КАК Партнер,
	|		Заказ.Контрагент                                       КАК Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|		Заказ.Договор                                          КАК Договор,
	|		Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|		Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|		Заказ.Валюта                                           КАК Валюта,
	|		Заказ.ВидЦены                                          КАК ВидЦены
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК Заказ
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ВыходныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = Заказ.Ссылка
	|		
	|	ГДЕ
	|		Заказ.Ссылка = &Заказ
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|		И НЕ Заказ.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказ.Организация                                      КАК Организация,
	|		Заказ.Подразделение                                    КАК Подразделение,
	|		ТаблицаИзделий.Получатель                              КАК Склад,
	|		Заказ.Сделка                                           КАК Сделка,
	|		Заказ.Партнер                                          КАК Партнер,
	|		Заказ.Контрагент                                       КАК Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|		Заказ.Договор                                          КАК Договор,
	|		Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|		Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|		Заказ.Валюта                                           КАК Валюта,
	|		Заказ.ВидЦены                                          КАК ВидЦены
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК Заказ
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5.ПобочныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = Заказ.Ссылка
	|		
	|	ГДЕ
	|		Заказ.Ссылка = &Заказ
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.Отменено
	//++ НЕ УТКА
	|		И НЕ Заказ.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказ.Организация                                      КАК Организация,
	|		Заказ.Подразделение                                    КАК Подразделение,
	|		ТаблицаИзделий.Получатель                              КАК Склад,
	|		Заказ.Сделка                                           КАК Сделка,
	|		Заказ.Партнер                                          КАК Партнер,
	|		Заказ.Контрагент                                       КАК Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|		Заказ.Договор                                          КАК Договор,
	|		Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|		Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|		Заказ.Валюта                                           КАК Валюта,
	|		Заказ.ВидЦены                                          КАК ВидЦены
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК Заказ
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|		ПО ЭтапПроизводства.ЗаказПереработчику = Заказ.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ЭтапПроизводства.Ссылка
	|		
	|	ГДЕ
	|		Заказ.Ссылка = &Заказ
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.Отменено
	|		И Заказ.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказ.Организация                                      КАК Организация,
	|		Заказ.Подразделение                                    КАК Подразделение,
	|		ТаблицаИзделий.Получатель                              КАК Склад,
	|		Заказ.Сделка                                           КАК Сделка,
	|		Заказ.Партнер                                          КАК Партнер,
	|		Заказ.Контрагент                                       КАК Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|		Заказ.Договор                                          КАК Договор,
	|		Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|		Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|		Заказ.Валюта                                           КАК Валюта,
	|		Заказ.ВидЦены                                          КАК ВидЦены
	|	ИЗ
	|		Документ.ЗаказПереработчику2_5 КАК Заказ
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства
	|		ПО ЭтапПроизводства.ЗаказПереработчику = Заказ.Ссылка
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаИзделий
	|		ПО ТаблицаИзделий.Ссылка = ЭтапПроизводства.Ссылка
	|		
	|	ГДЕ
	|		Заказ.Ссылка = &Заказ
	|		И ТИПЗНАЧЕНИЯ(ТаблицаИзделий.Получатель) = ТИП(Справочник.Склады)
	|		И НЕ ТаблицаИзделий.Отменено
	|		И Заказ.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	//-- НЕ УТКА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказ.Организация                                      КАК Организация,
	|		Заказ.Подразделение                                    КАК Подразделение,
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)               КАК Склад,
	|		Заказ.Сделка                                           КАК Сделка,
	|		Заказ.Партнер                                          КАК Партнер,
	|		Заказ.Контрагент                                       КАК Контрагент,
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка) КАК Соглашение,
	|		Заказ.Договор                                          КАК Договор,
	|		Заказ.НаправлениеДеятельности                          КАК НаправлениеДеятельности,
	|		Заказ.ЦенаВключаетНДС                                  КАК ЦенаВключаетНДС,
	|		Заказ.Валюта                                           КАК Валюта,
	|		Заказ.ВидЦены                                          КАК ВидЦены
	|	ИЗ
	|		Документ.ОтчетПереработчика2_5 КАК Заказ
	|	ГДЕ
	|		Заказ.Ссылка = &Заказ
	|	) КАК Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Организация,
	|	Заказ.Подразделение,
	|	Заказ.Сделка,
	|	Заказ.Партнер,
	|	Заказ.Контрагент,
	|	Заказ.Договор,
	|	Заказ.НаправлениеДеятельности,
	|	Заказ.ЦенаВключаетНДС,
	|	Заказ.Валюта,
	|	Заказ.ВидЦены
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

//Возвращает текст запроса товаров документа заказ
//
// Параметры:
//  Отбор - Соответствие - 
//  ДополнятьПоТаблицеСерий - Булево -
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаТоварыДокументаЗаказа(Отбор, ДополнятьПоТаблицеСерий = Ложь) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(Документы.ЗаказПереработчику2_5.ТекстЗапросаТоварыДокумента(Отбор, "ВыходныеИзделия"));
	ТекстыЗапросов.Добавить(Документы.ЗаказПереработчику2_5.ТекстЗапросаТоварыДокумента(Отбор, "ПобочныеИзделия"));
	
	Возврат СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

//Возвращает текст запроса переданных товаров
//
// Возвращаемое значение:
//  Строка - 
//
Функция ТекстЗапросаТоварыПереданные() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючиАналитики.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КлючиАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|ГДЕ
	|	КлючиАналитики.МестоХранения = &Договор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЗапасов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияПереработчика),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыПереданные.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыПереданные.НомерГТД                   КАК НомерГТД,
	|	ТоварыПереданные.КоличествоОстаток          КАК КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыПереданные
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Период, АналитикаУчетаНоменклатуры В
	|		(ВЫБРАТЬ
	|			КлючиАналитики.Ссылка КАК Ссылка
	|		ИЗ
	|			КлючиАналитики КАК КлючиАналитики)
	|	И Организация = &Организация
	|	И ВидЗапасов В
	|		(ВЫБРАТЬ
	|			ВидыЗапасов.Ссылка КАК Ссылка
	|		ИЗ
	|			ВидыЗапасов КАК ВидыЗапасов)) КАК ТоварыПереданные
	|ГДЕ
	|	ТоварыПереданные.КоличествоОстаток > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючиАналитики.Номенклатура                   КАК Номенклатура,
	|	КлючиАналитики.Характеристика                 КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ КлючиАналитики.Назначение
	|	КОНЕЦ                                         КАК Назначение,
	|	КлючиАналитики.Серия                          КАК Серия,
	|	ТоварыПереданные.НомерГТД                     КАК НомерГТД,
	|	ТоварыПереданные.НомерГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	СУММА(ТоварыПереданные.КоличествоОстаток)     КАК КоличествоОсталосьПодобрать,
	|	СУММА(ТоварыПереданные.КоличествоОстаток)     КАК КоличествоОстаток
	|ИЗ
	|	ТоварыПереданные КАК ТоварыПереданные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
	|		ПО ТоварыПереданные.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО КлючиАналитики.Номенклатура = Товары.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	КлючиАналитики.Номенклатура,
	|	КлючиАналитики.Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ КлючиАналитики.Назначение
	|	КОНЕЦ,
	|	КлючиАналитики.Серия,
	|	ТоварыПереданные.НомерГТД
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ВЫБОР
	|		КОГДА Товары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ КлючиАналитики.Назначение
	|	КОНЕЦ,
	|	НомерГТД
	|";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Распоряжение

// Возвращает массив типов распоряжение
//
// Возвращаемое значение:
//  Массив из Тип -
//
Функция ТипыРаспоряжение() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПереработчику2_5"));
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает имя регистра заказ
//
// Возвращаемое значение:
//  Строка - 
//
Функция ИмяРегистраЗаказ() Экспорт
	
	Возврат "ЗаказыПоставщикам";
	
КонецФункции

// Возвращает имя измерение регистра остатков, который используется в качестве распоряжение
//
// Возвращаемое значение:
//  Строка - 
//
Функция ИмяИзмерениеЗаказ() Экспорт
	
	Возврат "ЗаказПоставщику";
	
КонецФункции

// Возвращает признак использование кода строки
//
// Возвращаемое значение:
//  Булево - 
//
Функция ИспользоватьКодСтроки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает синоним заказа.
//
// Возвращаемое значение:
//  Строка - синоним заказа.
//
Функция СинонимЗаказа() Экспорт
	
	Возврат НСтр("ru = 'Заказ переработчику';
				|en = 'Subcontracting purchase order'");
	
КонецФункции

#КонецОбласти

#Область АктОРасхождениях

// Возвращает тип основания акта о расхождении
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОснованияАктаОРасхождении
//
Функция ТипОснованияАкта() Экспорт
	
	Возврат Перечисления.ТипыОснованияАктаОРасхождении.ПоступлениеТоваровОтПереработчика;
	
КонецФункции

// Возвращает постфикс имени акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПостфиксИмениАкта() Экспорт
	
	Возврат НСтр("ru = 'после поступления от переработчика';
				|en = 'after ""Goods receipt — Subcontracting services received""'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении при создании
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыСозданияАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после поступления от переработчика (Создание)';
				|en = 'Discrepancy report following ""Goods receipt — Subcontracting services received"" (Create)'");
	
КонецФункции

// Возвращает заголовок формы акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыАкта() Экспорт
	
	Возврат НСтр("ru = 'Акт о расхождениях после поступления от переработчика';
				|en = 'Discrepancy report following ""Goods receipt — Subcontracting services received""'");
	
КонецФункции

// Возвращает подсказку договора акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаДоговораАкта() Экспорт
	
	Возврат НСтр("ru = 'Договор, в рамках которого оформлено поступление';
				|en = 'Contract under which the receiving is registered'");
	
КонецФункции

// Возвращает подсказку соглашения акта о расхождении
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПодсказкаСоглашенияАкта() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает заголовок документа основание
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокДокументаОснованияАкта() Экспорт
	
	Возврат НСтр("ru = 'Поступление от переработчика';
				|en = 'Goods receipt — External subcontracting'");
	
КонецФункции

// Возвращает заголовок по основаниям
//
// Параметры:
//  ДополнитьПартнером - Булево -
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокПоОснованиям(ДополнитьПартнером = Истина) Экспорт
	
	Если ДополнитьПартнером Тогда
		Возврат НСтр("ru = 'По поступлениям от переработчика';
					|en = 'By Goods receipts — Subcontracting services received'");
	Иначе
		Возврат НСтр("ru = 'По поступлениям';
					|en = 'By receipts'");
	КонецЕсли;
	
КонецФункции

//Возвращает описание поля с комментариями
//
// Возвращаемое значение:
//  Строка - 
//
Функция КомментарийПоставщикаПодвал() Экспорт
	
	Возврат НСтр("ru = 'Комментарии переработчика по расхождениям в строке';
				|en = 'Subcontractor comments on line discrepancies'");
	
КонецФункции

//Возвращает наименование колонки, кто даёт комментарий
//
// Возвращаемое значение:
//  Строка - 
//
Функция КомментарийКлиента() Экспорт
	
	Возврат НСтр("ru = 'переработчика';
				|en = 'subcontractor'");
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперация() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5;
	
КонецФункции

// Возвращает хозяйственную операцию договора см. ПереработкаНаСтороне.ХозяйственнаяОперацияДоговора.
//
// Возвращаемое значение:
//  см. ПереработкаНаСтороне.ХозяйственнаяОперацияДоговора
// 
Функция ХозяйственнаяОперацияДоговора() Экспорт
	
	Возврат ПереработкаНаСтороне.ХозяйственнаяОперацияДоговора();
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с поставщиками
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСПоставщикамиПрименимы() Экспорт
	
	Возврат ПереработкаНаСтороне.СоглашенияСПоставщикамиПрименимы();
	
КонецФункции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат ПереработкаНаСтороне.СоглашенияСКлиентамиПрименимы();
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат ПереработкаНаСтороне.ИспользоватьСоглашенияСКлиентами();

КонецФункции

// Возвращает признак использование заявки на возврат товаров от клиентов
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРаспоряжения() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПереработчикам2_5");

КонецФункции

// Возвращает признак использование поступления по нескольким заказов.
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьПоступлениеПоНесколькимЗаказам() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает признак использование расширенных возможностей заказа клиента
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьРасширенныеВозможностиЗаказаКлиента() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Форма

//Получает договор по умолчанию.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - 
//  ОтборПоВалюте - Булево - 
//  ОтборПоНаправлениюДеятельности - Булево - 
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - 
//
Функция ПолучитьДоговорПоУмолчанию(Объект, ОтборПоВалюте = Истина, ОтборПоНаправлениюДеятельности = Истина) Экспорт
	
	Возврат ПереработкаНаСтороне.ПолучитьДоговорПоУмолчанию(Объект);
	
КонецФункции

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	ПереработкаНаСтороне.УстановитьДоступностьДоговора(Форма, Объект, Договор);
	
КонецПроцедуры

// Настраивает форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - содержит:
//           * Элементы - ВсеЭлементыФормы - содержит:
//              ** Партнер - ПолеВвода - содержит:
//                  *** Заголовок - Строка -
//              ** ТоварыПодобратьПереданныеТовары - КомандаФормы - содержит:
//                  *** Заголовок - Строка -
//              ** ЗакрытьЗаявку - КомандаФормы - содержит:
//                  *** Заголовок - Строка -
//  Номер - Число - 
//  Дата  - Дата - 
//
Процедура НастроитьФорму(Форма, Номер, Дата) Экспорт
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок     = ЗаголовокФормыДокумента(Не ЗначениеЗаполнено(Параметры.Ключ), Номер, Дата);
	
	Форма.ЗаголовокФормыПодбораПереданныхТоваров = НСтр("ru = 'Подбор продукции, произведенной переработчиком';
														|en = 'Pick products produced by subcontractor'");
	
	Элементы.Партнер.Заголовок                         = НСтр("ru = 'Переработчик';
																|en = 'Subcontractor'");
	
	Элементы.ТоварыПодобратьПереданныеТовары.Заголовок = НСтр("ru = 'Подобрать продукцию переработчика';
																|en = 'Pick subcontractor products'");
	Элементы.СтраницыЗаказ.Видимость                   = Истина;
	Элементы.ПоРаспоряжению.Заголовок                  = НСтр("ru = 'По заказу';
																|en = 'Against order'");
	Элементы.ПоРаспоряжениям.Заголовок                 = НСтр("ru = 'По заказам';
																|en = 'Order for prepayment and invoice'");
	Элементы.ЗакрытьЗаявку.Заголовок                   = НСтр("ru = 'Закрыть заказ';
																|en = 'Close order'");
	Элементы.ЗакрытьЗаявки.Заголовок                   = НСтр("ru = 'Закрыть заказы';
																|en = 'Close orders'");
	
	Элементы.Соглашение.Видимость = ИспользоватьСоглашенияСКлиентами();
	
	Элементы.ВидЦены.Видимость                      = Ложь;
	Элементы.ТоварыИндексНабора.Видимость           = Ложь;
	Элементы.ТоварыГруппаНабор.Видимость            = Ложь;
	Элементы.ТоварыЦена.Видимость                   = Ложь;
	Элементы.ТоварыСумма.Видимость                  = Ложь;
	Элементы.ТоварыЗаполнитьЦеныПоВидуЦен.Видимость = Ложь;
	Элементы.ГруппаИтого.Видимость                  = Ложь;
	Элементы.ТоварыСоставНабора.Видимость           = Ложь;
	Элементы.ТоварыЗаполнитьНомераГТД.Видимость     = Ложь;
	Элементы.ВозвратПереданнойМногооборотнойТары.Видимость = Ложь;
	Элементы.ТоварыДополнитьМногооборотнойТарой.Видимость  = Ложь;
	
	Элементы.ТоварыЗаполнитьЦеныПоДоговору.Видимость = Ложь;
	
КонецПроцедуры

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	ПереработкаНаСтороне.НастроитьПараметрыВыбораЭлементов(Форма, Объект);
	
	Элементы = Форма.Элементы;
	
	// Вид цены
	Если Не Элементы.Найти("ВидЦены") = Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИспользоватьПриВыпускеПродукции", Истина));
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
		
		Элементы.ВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заголовок формы документа передача товаров хранителю.
//
// Параметры:
//  НовыйДокумент - Булево - 
//  Номер - Число - 
//  Дата - Дата - 
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыДокумента(НовыйДокумент, Номер, Дата) Экспорт
	
	Если НовыйДокумент Тогда
		Заголовок = СтрШаблон(НСтр("ru = '%1 (создание)';
									|en = '%1 (Create)'"), ПредставлениеОбъекта());
	Иначе
		Заголовок = СтрШаблон(НСтр("ru = '%1 %2 от %3';
									|en = '%1 %2 dated %3'"), ПредставлениеОбъекта(), Номер, Дата);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает представление документа поступление товаров от хранителя.
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПредставлениеОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Поступление от переработчика';
				|en = 'Goods receipt — External subcontracting'");
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурнале

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления.
//
// Параметры:
//  Параметры - Структура - параметры формирования текста гиперссылки.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - текст гиперссылки перехода в рабочее место оформления передач.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПраваНаЧтение = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКПоступлению);
	
	Если Не ЕстьПраваНаЧтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Поступление продукции';
							|en = 'Product receipt'");
	ТекстСсылки = "Обработка.ЖурналДокументовПередачиВПереработку2_5.Форма.КОформлениюНакладных/СтраницаПоступления";
	
	ЕстьДокументыКОформлению =
		Обработки.ЖурналДокументовПередачиВПереработку2_5.ЕстьДокументыКОформлению(
			Параметры,
			Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5);
	
	ЦветГиперссылки = ?(ЕстьДокументыКОформлению, Неопределено, ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветГиперссылки,, ТекстСсылки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу реквизитов видов запасов по умолчанию
//
// Параметры:
//  Объект - ДокументОбъект.ПоступлениеТоваровОтХранителя - 
//
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ТаблицаРеквизитовВидовЗапасовПоУмолчанию(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение                 КАК Назначение
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                  КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)   КАК НомерГТД,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА СпрНазначения.ТипНазначения В (
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|			ТОГДА СпрНазначения.Партнер
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА &Организация
	|	КОНЕЦ                                         КАК ВладелецТовара,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА СпрНазначения.Договор ЕСТЬ НЕ NULL
	|			ТОГДА СпрНазначения.Договор.Контрагент
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Контрагент,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА СпрНазначения.Договор ЕСТЬ НЕ NULL
	|			ТОГДА СпрНазначения.Договор
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Договор,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА СпрНазначения.ТипНазначения В (
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца)
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияПереработчика)
	|	КОНЕЦ                                         КАК ТипЗапасов
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
	|	ПО СпрНазначения.Ссылка = ТаблицаТоваров.Назначение
	|";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр(
		"ТаблицаТоваров", Объект.Товары.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, Назначение"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти