////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы управления ремонтами.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция УстановитьСтатусОбъектовЭксплуатации(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыОбъектовЭксплуатации[ЗначениеСтатуса];
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыЭксплуатации.Ссылка,
	|	ОбъектыЭксплуатации.Наименование,
	|	ОбъектыЭксплуатации.ПометкаУдаления
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	ОбъектыЭксплуатации.Статус <> &НовыйСтатус
	|	И ОбъектыЭксплуатации.Ссылка В(&ВыделенныеСсылки)
	|	И НЕ ОбъектыЭксплуатации.ЭтоГруппа";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус", НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	ЕстьОшибкиПроверкиЗаполнения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать(); 
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОбъектыЭксплуатации - 
			СпрОбъект.Статус = НовыйСтатус;
			
			ПараметрыПроверки = Справочники.ОбъектыЭксплуатации.ПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.СообщатьОшибки = Ложь;
			
			ЕстьОшибки = Ложь;
			
			Если СпрОбъект.Статус = Перечисления.СтатусыОбъектовЭксплуатации.ВЭксплуатации
				ИЛИ СпрОбъект.Статус = Перечисления.СтатусыОбъектовЭксплуатации.Ликвидирован Тогда
				
				Справочники.ОбъектыЭксплуатации.ПроверитьЗаполнениеОбъектаЭксплуатации(СпрОбъект, ПараметрыПроверки, ЕстьОшибки);
			КонецЕсли;

			Если СпрОбъект.ПроверитьЗаполнение() И НЕ ЕстьОшибки Тогда
				СпрОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Иначе
				ЕстьОшибкиПроверкиЗаполнения = Истина;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиПроверкиЗаполнения", ЕстьОшибкиПроверкиЗаполнения);
	Результат.Вставить("КоличествоОбработанных", КоличествоОбработанных);
	
	Возврат Результат;

КонецФункции

Функция ИзменитьКлассОбъектовЭксплуатации(ВыделенныеСсылки, Класс, Подкласс) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&ВыделенныеСсылки)
	|	И НЕ ОбъектыЭксплуатации.ЭтоГруппа
	|	И (ОбъектыЭксплуатации.Класс <> &Класс
	|		ИЛИ ОбъектыЭксплуатации.Подкласс <> &Подкласс)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("Класс", Класс);
	Запрос.УстановитьПараметр("Подкласс", Подкласс);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	ЕстьОшибкиПроверкиЗаполнения = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ОбъектыЭксплуатации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать(); 
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОбъектыЭксплуатации -
			 
			Если СпрОбъект.Класс <> Класс Тогда
				СпрОбъект.Класс = Класс;
				Справочники.ОбъектыЭксплуатации.ПриИзмененииКласса(СпрОбъект);
			КонецЕсли;
			
			СпрОбъект.Подкласс = Подкласс;

			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Иначе
				ЕстьОшибкиПроверкиЗаполнения = Истина;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиПроверкиЗаполнения", ЕстьОшибкиПроверкиЗаполнения);
	Результат.Вставить("КоличествоОбработанных", КоличествоОбработанных);
	Результат.Вставить("КлассПредставление", Строка(Класс));
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуютсяПодклассы(КлассОбъектаЭксплуатации) Экспорт
	
	Если ЗначениеЗаполнено(КлассОбъектаЭксплуатации) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлассОбъектаЭксплуатации, "ИспользуютсяПодклассы");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// 
// Параметры:
// 	СписокУзлов - Массив из СправочникСсылка.УзлыОбъектовЭксплуатации -
// 	ТолькоНовый - Булево - Генерировать штрихкод, только если он не указан
// 	 
// Возвращаемое значение:
// 	Число - количество узлов, для которых был сгенерирован штрихкод
Функция СгенерироватьШтрихкодыУзлов(СписокУзлов, ТолькоНовый = Ложь) Экспорт

	КоличествоОбработанных = 0;
	
	НачатьТранзакцию();
		
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		
		Блокировка.Добавить("Справочник.УзлыОбъектовЭксплуатации");
		Блокировка.Заблокировать(); 
		
		Штрихкод = УправлениеРемонтами.ТекущийМаксимальныйШтрихкодУзла() + 1;
		Для Каждого УзелСсылка Из СписокУзлов Цикл
			
			УзелОбъект = УзелСсылка.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(УзелОбъект.Штрихкод) И ТолькоНовый Тогда
				Продолжить;
			КонецЕсли;
			
			УзелОбъект.Штрихкод = УправлениеРемонтами.ПолучитьШтрихкодУзлаПоКоду(Штрихкод);
			УзелОбъект.Записать();
			
			Штрихкод = Штрихкод + 1;
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		КоличествоОбработанных = 0;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;

	Возврат КоличествоОбработанных;
	
КонецФункции

// Находит узлы объектов эксплуатации по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  ПараметрыПодбора - см. ОбщегоНазначенияУТКлиентСервер.ПараметрыПодбора
// 
// Возвращаемое значение:
//  см. УправлениеРемонтами.НайтиУзлыПоШтрихкодам
//
Функция НайтиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Возврат УправлениеРемонтами.НайтиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
КонецФункции

// Находит объекты эксплуатации или узлы по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  ПараметрыПодбора - см. ОбщегоНазначенияУТКлиентСервер.ПараметрыПодбора
// 
// Возвращаемое значение:
//  см. УправлениеРемонтами.НайтиОбъектыЭксплуатацииИлиУзлыПоШтрихкодам
//
Функция НайтиОбъектыЭксплуатацииИлиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Возврат УправлениеРемонтами.НайтиОбъектыЭксплуатацииИлиУзлыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
КонецФункции

#КонецОбласти
