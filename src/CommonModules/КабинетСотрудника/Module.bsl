#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.165";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.206";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("bf0e44ef-e92b-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ИнициализироватьРолиИсполнителейЗадач";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление ролей исполнителей задач.';
										|en = 'Updating the task assignees roles.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.15.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("5295d003-f66e-11ea-8103-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьПубликациюПравНаВычеты";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление публикации прав на вычеты.';
										|en = 'Updating deduction rights publication.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.16.9";
	Обработчик.Процедура = "КабинетСотрудника.УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.16.42";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a518af76-0896-11eb-8108-4cedfb95099a");
	Обработчик.Процедура       = "КабинетСотрудника.НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника";
	Обработчик.Комментарий     = НСтр("ru = 'Настройка регламентного задания Проверка состояния сервиса ""1С:Кабинет сотрудника"".';
										|en = 'Setting up a scheduled job Checking the status of the ""1C:Employee account"" service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.17.85";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.УстановитьВерсияИзмененийКабинетСотрудника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.18.7";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("f0f899de-ffd3-4f35-8dda-017425bd0e67");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.';
										|en = 'Update settings of 1C:Employee Account service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.19.32";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("1a994315-b6ba-4fad-857b-c43cb900ddaf");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеНастроекСервисаВерсии303";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление настроек сервиса 1С:Кабинет сотрудника.';
										|en = 'Update settings of 1C:Employee Account service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.61";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("a6ae4155-996e-40bb-b4ee-7854d960aba3");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение события в ""Сотрудники для обновления публикуемых объектов"".';
										|en = 'Fill in the event in ""Employees to update the published objects"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.20.91";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("ec985970-fd7d-4382-ba93-be8ae07623de");
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьФункциональностьСервисаПриИспользованииКЭДО";
	Обработчик.Комментарий     = НСтр("ru = 'Обновление используемой функциональности сервиса 1С:Кабинет сотрудника.';
										|en = 'Update the used functionality of 1C:Employee Account service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.21.63";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("92fc10bf-5ec9-422c-b73e-75f148786586");
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по расчетным листкам.';
										|en = 'Fill the details of the HR EDI document content by payslips.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.22.21";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("4a4010a6-0de3-47c1-9395-856281e05ae1");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация проверки ознакомления с расчетными листками.';
										|en = 'Registration of review check of payslips.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.23.57";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("96515a13-fec5-405f-9da2-fefeb3aa0db5");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУволенныхСотрудников";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления физических лиц в сервисе 1С:Кабинет сотрудника.';
										|en = 'Register the update of persons in 1C:Employee Account.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия		   = "3.1.24.8";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура	   = "КабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.24.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ЗаполнитьОбъектыСОшибкамиЗаполнения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.13";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c843cd59-a9cd-4677-b342-69f8bb754f07");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеФункциональностиСервиса";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления функциональности сервиса 1С:Кабинет сотрудника.';
										|en = 'Register the update of 1C:Employee Account functionality.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.14";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("9b76b382-ba92-4154-8b2a-7bc684798633");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбработчикОбновленияФизическихЛиц";
	Обработчик.Комментарий     = НСтр("ru = 'Проверка заполнения данных физических лиц, публикуемых в сервисе.';
										|en = 'Check of filling in the individuals'' data published in the service.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.18";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ПроверитьВерсиюФормата";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.25.133";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("dd585e79-82f5-4402-b08d-d4393a1c2710");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбновлениеУровеньДоступаКИ";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация обновления уровней доступа к контактной информации в сервисе 1С:Кабинет сотрудника.';
										|en = 'Register the update of levels of access to contact details in 1C:Employee Account.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура       = "КабинетСотрудника.ОбновитьИсключенияИзПравил"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.27.8";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("81df590d-aff6-4c30-b04f-b041119f55da");
	Обработчик.Процедура       = "КабинетСотрудника.ЗарегистрироватьОбработчикОбновленияРуководителей";
	Обработчик.Комментарий     = НСтр("ru = 'Регистрация  обновления руководителей в сервисе 1С:Кабинет сотрудника.';
										|en = 'Register the update of supervisors in 1C:Employee account.'");
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника";
	
КонецПроцедуры

#КонецОбласти

// Возвращает текущую версию формата обмена.
//
// 	Возвращаемое значение:
// 		Строка - строка формата х.х
//
Функция ВерсияФормата() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ВерсияDTO;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКлючамиПриложения

Функция ЕстьКлючиПриложения() Экспорт
	
	Возврат (КлючиПриложенияИзБезопасногоХранилища() <> Неопределено);
	
КонецФункции

Функция КлючиПриложенияИзБезопасногоХранилища()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ИнтеграцияУправлениеПерсоналом.КлючиПриложения(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);

КонецФункции

Функция КлючиПриложенияАктуальные() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Ответ.НеактуальныеКлючи Тогда
		// ключи не актуальны, удаляем токен, если он сохранен
		ИнтеграцияУправлениеПерсоналом.УдалитьТокенПриложения(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не Ответ.НеактуальныеКлючи;

КонецФункции

#КонецОбласти

#Область РегистрацияПубликуемыхОбъектов

Процедура РегистрацияПовторнойПубликацииДокументовКЭДО(ИдентификаторыДокументов) Экспорт
	
	Если Не ИспользоватьФормат503() Или Не ЗначениеЗаполнено(ИдентификаторыДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись) КАК ТипОбъекта
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторДокумента В(&ИдентификаторыДокументов)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл 
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
				МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
				МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуРегистрацииИзменений(Выборка.Ссылка, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЛокальнымСервисом

Процедура ПодключениеКСервисуЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ИдентификаторПриложения = "";
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 		= Параметры.АдресПриложения;
	Настройки.ТребуетсяОбновитьНастройкиФункциональности 	= Истина;
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ИнтеграцияУправлениеПерсоналом.СохранитьКлючиПриложения(Приложение, Параметры);
	УстановитьПривилегированныйРежим(Ложь);
	
	ШаблонСообщения = НСтр("ru = 'Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.';
							|en = 'Connection is not available. Invalid connection settings are specified or the application at ""%1"" is not available. Please contact your administrator.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, Параметры.АдресПриложения);
	
	// Проверка правильности ввода данных настройки сервиса.
	Ответ = КабинетСотрудникаМенеджерОбмена.ПроверкаАвторизации();
	Если Не Ответ.ТокенПолучен Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина
	КонецЕсли;
	
	// Идентификатор приложения.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.ИнформацияОПриложении();
		Если Ответ = Неопределено Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			ИдентификаторПриложения = Ответ.ИдентификаторПриложения;
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.';
										|en = 'Connection is not available. The application has not been registered yet, contact your administrator.'");
				Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Версии формата и API.
	Если Не Отказ Тогда
		ИнтеграцияКабинетСотрудника.ПолучитьВерсииФорматаПриложения();
	КонецЕсли;
	
	// Установка адреса приложения.
	Если Не Отказ Тогда
		
		Если Не КабинетСотрудникаМенеджерОбмена.УстановитьАдресЛокальногоПриложения(Параметры.АдресПриложения) Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного.
	Если Не Отказ Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось опубликовать ответственное лицо.';
												|en = 'Cannot publish the responsible person.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установка администратора.
	Если Не Отказ Тогда
		
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			Результат.СсылкаДляАдминистратора = Ответ.СсылкаДляАдминистратора;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияУправлениеПерсоналом.ОчиститьКлючиТокенПриложения(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Настройки.ИдентификаторПриложения 	= ИдентификаторПриложения;
		Настройки.Идентификатор 			= "local";
		Настройки.Ответственный 			= Параметры.Ответственный;
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
		Если ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.0") Тогда
			Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
			МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
			ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьНастройкиПриложения(МенеджерОбмена);
		Иначе
			КабинетСотрудникаМенеджерОбмена.ОбновитьНастройкиФункциональностиСервиса();
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось изменить ответственное лицо.';
									|en = 'Cannot change the responsible person.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	БылиОшибки = ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(Параметры.Ответственный);
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Ответ = КабинетСотрудникаМенеджерОбмена.УстановитьАдминистратораЛокальногоПриложения(Параметры.ОписаниеАдминистратора);
		Если Ответ.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Иначе
			Результат.НовыйОтветственный = Параметры.Ответственный;
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Настройки.Ответственный = Параметры.Ответственный;
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииСервиса

// Сравнивает текущую версию сервиса с переданным значением.
//
// Параметры:
// 	ПроверяемаяВерсия - Строка - сравниваемая версия.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ВерсияПриложенияМеньшеВерсии(ПроверяемаяВерсия)

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияПриложения) Тогда
		Возврат Истина;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Настройки.ВерсияПриложения, ПроверяемаяВерсия) < 0;
	КонецЕсли;

КонецФункции

Функция ИспользоватьФормат202() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("2.0.2.1");

КонецФункции

Функция ИспользоватьФормат301() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.1.1");

КонецФункции

Функция ИспользоватьФормат302() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.2.19");

КонецФункции

Функция ИспользоватьФормат303() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.1");

КонецФункции

Функция ИспользоватьФормат30396() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("3.0.3.96");

КонецФункции

Функция ИспользоватьФормат401() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("4.0.1.31");

КонецФункции

Функция ИспользоватьФормат503() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.1");

КонецФункции

Функция ИспользоватьФормат50366() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.66");
	
КонецФункции

Функция ИспользоватьРасширениеФайлаВЗаголовке() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ПовторнаяЗагрузкаОбъектовДоступна() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.72");

КонецФункции

Функция ИспользоватьФормат502() Экспорт

	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.2.1");

КонецФункции

Функция ИспользоватьФормат50375() Экспорт
	
	Возврат ВерсионированиеИспользуется() Или Не ВерсияПриложенияМеньшеВерсии("5.0.3.75");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбменаКабинетСотрудника

Процедура ВыполнитьОбработчикиОбмена(ПараметрыОбмена = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбменаКабинетСотрудника.Обработчик КАК Обработчик,
	|	ОбработчикиОбменаКабинетСотрудника.НомерИтерации КАК НомерИтерации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаРегистрации КАК ДатаРегистрации,
	|	ОбработчикиОбменаКабинетСотрудника.ДатаВыполнения КАК ДатаВыполнения
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбменаКабинетСотрудника
	|ГДЕ
	|	НЕ ОбработчикиОбменаКабинетСотрудника.Выполнено";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками() Тогда
			Если Выборка.НомерИтерации > 10 Тогда
				ОтключитьОбработчикОбмена(ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками());
			ИначеЕсли Выборка.ДатаВыполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
				Если ПараметрыОбмена = Неопределено Тогда
					ПараметрыОбмена = КабинетСотрудникаМенеджерОбмена.ПараметрыОбмена(Ложь);
				КонецЕсли;
				ПроверкаОзнакомленияСРасчетнымиЛистками(Выборка.НомерИтерации, Выборка.ДатаРегистрации, ПараметрыОбмена);
			КонецЕсли;
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеУволенныхСотрудников() Тогда
			ЗарегистрироватьПубликациюУволенныхСотрудников();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Тогда
			ЗарегистрироватьПубликациюВидовСправок();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеФизическихЛиц() Тогда
			ЗарегистрироватьОбновлениеФизическихЛиц();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеРуководителей() Тогда
			ЗарегистрироватьОбновлениеРуководителей();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаЗарегистрироватьОбновлениеУровнейДоступаКИ() Тогда
			ЗарегистрироватьОбновлениеУровнейДоступаКИ();
		ИначеЕсли Выборка.Обработчик = ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников() Тогда
			ЗарегистрироватьОбновлениеНевыгружаемыхСотрудников();
		КонецЕсли;
	КонецЦикла;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников();
	Запрос.УстановитьПараметр("Обработчик", ИмяОбработчика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Обработчики.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК Обработчики
	|ГДЕ
	|	Обработчики.Обработчик = &Обработчик";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчика);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками()

	Возврат "ПроверкаОзнакомленияСРасчетнымиЛистками";

КонецФункции

Процедура ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками()

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик 		= ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками(); 
	МенеджерЗаписи.Выполнено 		= Ложь;
	МенеджерЗаписи.НомерИтерации 	= 1;
	МенеджерЗаписи.ДатаРегистрации 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.НомерИтерации 	= НомерИтерации;
	МенеджерЗаписи.ДатаВыполнения 	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ИмяОбработчикаОбновлениеУволенныхСотрудников()

	Возврат "ОбновлениеУволенныхСотрудников";

КонецФункции

Процедура ЗарегистрироватьПубликациюУволенныхСотрудников()

	ОпубликованныеФизическиеЛица = ОпубликованныеФизическиеЛица();
	Если ОпубликованныеФизическиеЛица = Неопределено Тогда
		// не удалось получить данные
		Возврат;
	ИначеЕсли ОпубликованныеФизическиеЛица.Количество() = 0 Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ОпубликованныеФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО ФизическиеЛица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
	|	И ВыгружаемыеОбъекты.ОкончаниеВыгрузки ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник) КАК ТипОбъекта
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
	|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Сотрудники.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 				= Выборка.Ссылка;
			МенеджерЗаписи.УсловноВыгружается 	= Истина;
			МенеджерЗаписи.Записать();
			
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
				
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеУволенныхСотрудников());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

#Область ОзнакомлениеСРасчетнымиЛистками

Процедура ПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации, ДатаРегистрации, ПараметрыОбмена)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	Запрос.УстановитьПараметр("ДатаПубликации", ДатаРегистрации + 86400);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|ГДЕ
	|	РасчетныеЛистки.СостояниеПубликации = ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован)
	|	И РасчетныеЛистки.ДатаПубликации < &ДатаПубликации
	|	И РасчетныеЛистки.НомерИтерации < &НомерИтерации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновитьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками(НомерИтерации+1);
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультатов.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаРезультатов.Колонки.Добавить("Ознакомлен", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		
		ТаблицаРезультатов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			Ознакомлен = КабинетСотрудникаМенеджерОбмена.РезультатОзнакомленияСРасчетнымЛистком(ПараметрыОбмена, Выборка.ФизическоеЛицо, Выборка.Месяц);
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Ознакомлен = Ознакомлен;
		КонецЦикла;
		
		ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьОзнакомлениеСРасчетнымиЛистками(ТаблицаРезультатов, НомерИтерации)
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРезультатов", ТаблицаРезультатов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезультатыОбработки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РезультатыОбработки.Месяц КАК Месяц,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ПОМЕСТИТЬ ВТРезультатОбработки
	|ИЗ
	|	&ТаблицаРезультатов КАК РезультатыОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеЛистки.Организация КАК Организация,
	|	РасчетныеЛистки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеЛистки.Месяц КАК Месяц,
	|	РасчетныеЛистки.ПерваяПоловинаМесяца КАК ПерваяПоловинаМесяца,
	|	РасчетныеЛистки.ДатаПубликации КАК ДатаПубликации,
	|	РасчетныеЛистки.Ответственный КАК Ответственный,
	|	ВЫБОР
	|		КОГДА РезультатыОбработки.Ознакомлен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился)
	|		КОГДА ПубликуемыеФизическиеЛица.ОкончаниеВыгрузки ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)
	|		ИНАЧЕ РасчетныеЛистки.СостояниеПубликации
	|	КОНЕЦ КАК СостояниеПубликации,
	|	РасчетныеЛистки.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО,
	|	РезультатыОбработки.Ознакомлен КАК Ознакомлен
	|ИЗ
	|	РегистрСведений.РасчетныеЛисткиКабинетСотрудника КАК РасчетныеЛистки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРезультатОбработки КАК РезультатыОбработки
	|		ПО РасчетныеЛистки.ФизическоеЛицо = РезультатыОбработки.ФизическоеЛицо
	|			И РасчетныеЛистки.Месяц = РезультатыОбработки.Месяц
	|			И (НЕ РасчетныеЛистки.СостояниеПубликации В (ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.СотрудникОзнакомился), ЗНАЧЕНИЕ(Перечисление.СостоянияРасчетныхЛистковКабинетСотрудника.ОпубликованНеПроверятьОзнакомление)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО РасчетныеЛистки.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "ДокументКадровогоЭДО");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Запись = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			Запись.НомерИтерации = НомерИтерации;
			Запись.Записать();
			
			Если Выборка.Ознакомлен И ЗначениеЗаполнено(Выборка.ДокументКадровогоЭДО) Тогда
				Запись = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
				Запись.Объект 			= Выборка.ДокументКадровогоЭДО;
				Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
				Запись.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр(
		"ru = 'Проверка ознакомления с расчетными листками
		|Описание ошибки:
		|%1';
		|en = 'Check review of payslips
		|Error description:
		|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Процедура ОтключитьОбработчикОбмена(ИмяОбработчика)

	МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Обработчик = ИмяОбработчика;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Выполнено = Истина;
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбмена(ИмяОбработчика) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Обработчик = ИмяОбработчика; 
	ЗаписьНабора.Выполнено = Ложь;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок() Экспорт

	Возврат "ЗарегистрироватьПубликациюВидовСправок";

КонецФункции

Функция ИмяОбработчикаОбновлениеФизическихЛиц() Экспорт

	Возврат "ЗарегистрироватьОбновлениеФизическихЛиц";

КонецФункции

Процедура ЗарегистрироватьОбновлениеФизическихЛиц()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеРуководителей()

	Возврат "ЗарегистрироватьОбновлениеРуководителей";

КонецФункции

Процедура ЗарегистрироватьОбновлениеРуководителей()
	
	ПубликоватьСтруктуруЮридическихЛиц = ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц();
	
	ТипПодразделений = "";
	Если Не ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТипПодразделений = "Справочник.СтруктураПредприятия";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение) КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций";
	Если Не ПустаяСтрока(ТипПодразделений) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник.ПодразделенияОрганизаций",ТипПодразделений);
	КонецЕсли;
	Подразделения = Запрос.Выполнить().Выгрузить();
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение) КАК ТипОбъекта
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка ССЫЛКА Справочник.Организации";
		Организации = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Организации, Подразделения);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = Подразделения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из Подразделения Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= СтрокаТЗ.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= СтрокаТЗ.ТипОбъекта;
			МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеРуководителей());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьПубликациюВидовСправок()
	
	ИнтеграцияКабинетСотрудника.ЗарегистрироватьПубликациюВидовСправок();
	
КонецПроцедуры

Функция ИмяОбработчикаЗарегистрироватьОбновлениеУровнейДоступаКИ() Экспорт

	Возврат "ЗарегистрироватьОбновлениеУровнейДоступаКИ";

КонецФункции

Процедура ЗарегистрироватьОбновлениеУровнейДоступаКИ()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	ФизическиеЛица = Запрос.Выполнить().Выгрузить();
	
	ТипОбъектаОграничениеДоступа = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ФизическиеЛица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъектаОграничениеДоступа);
		Блокировка.Заблокировать();
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъектаОграничениеДоступа);
		Для каждого СтрокаТЗ Из ФизическиеЛица Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Ссылка 		= СтрокаТЗ.Ссылка;
			ЗаписьНабора.ТипОбъекта 	= ТипОбъектаОграничениеДоступа;
			ЗаписьНабора.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		НаборЗаписей.Записать();
		ОтключитьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьОбновлениеУровнейДоступаКИ());
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

Функция ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников()

	Возврат "ОбновлениеНевыгружаемыхСотрудников";

КонецФункции

Процедура ЗарегистрироватьОбновлениеНевыгружаемыхСотрудников()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО ВыгруженныеОбъекты.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|			И (НЕ ВыгружаемыеОбъекты.УсловноВыгружается)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
	|		ПО ВыгруженныеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (НЕ ИзмененияДляОбмена.ВыгружатьУдаление)
	|			И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник))
	|ГДЕ
	|	ВыгруженныеОбъекты.Выгружался
	|	И ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника)
	|	И ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник)
	|	И ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|	И ИзмененияДляОбмена.ВыгружатьУдаление ЕСТЬ NULL";
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Не ЗначениеЗаполнено(Сотрудники) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников());
		Возврат;
	КонецЕсли;
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	КадровыеДанныеСтрока = "Организация,ВидСобытия";
	УстановитьПривилегированныйРежим(Истина);
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудники, КадровыеДанныеСтрока, ДатаАктуальности);
	УстановитьПривилегированныйРежим(Ложь);
	
	СотрудникиДляРегистрации = Новый Массив;
	Для каждого СтрокаТЗ Из КадровыеДанные Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ВидСобытия) Тогда
			Продолжить;
		КонецЕсли;
		СотрудникиДляРегистрации.Добавить(СтрокаТЗ.Сотрудник);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СотрудникиДляРегистрации) Тогда
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников());
		Возврат;
	КонецЕсли;
	
	ВыгружаемыеОбъекты = ИнтеграцияКабинетСотрудника.НоваяТаблицаВыгружаемыеОбъекты();
	ИзмененияДляОбмена = ИнтеграцияКабинетСотрудника.НоваяТаблицаИзмененияДляОбмена(); 
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	Для каждого Сотрудник Из СотрудникиДляРегистрации Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка = Сотрудник;
		НоваяСтрока.УсловноВыгружается = Истина;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= Сотрудник;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбмена;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ВыгружаемыеОбъекты Цикл
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		ОтключитьОбработчикОбмена(ИмяОбработчикаОбновлениеНевыгружаемыхСотрудников());
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры


#КонецОбласти

#Область РаботаСКабинетами

Функция ОтключитьКабинетыНепубликуемыхСотрудников() Экспорт

	// Привилегированный режим устанавливается для обработки всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал отключение кабинетов.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыАктивныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка получения данных из сервиса.';
								|en = 'An error occurred while receiving data from service.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаФизическихЛиц.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаФизическихЛиц.Добавить();
		НоваяСтрока.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор));
		НоваяСтрока.Идентификатор = Идентификатор;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ФизическиеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛица.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ПубликуемыеФизическиеЛица
	|		ПО ФизическиеЛица.ФизическоеЛицо = ПубликуемыеФизическиеЛица.Ссылка
	|ГДЕ
	|	ПубликуемыеФизическиеЛица.ОкончаниеВыгрузки ЕСТЬ NULL";
	НепубликуемыеФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
	Если НепубликуемыеФизическиеЛица.Количество() > 0 Тогда
		Результат = ОтключитьКабинетыПоИдентификаторам(НепубликуемыеФизическиеЛица);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОпубликованныеФизическиеЛица()

	Идентификаторы = КабинетСотрудникаМенеджерОбмена.ИдентификаторыОпубликованныхФизическихЛиц();
	Если Идентификаторы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СписокФизическихЛицПоИдентификаторам(Идентификаторы);

КонецФункции

Функция СписокФизическихЛицПоИдентификаторам(Идентификаторы)

	СписокФизическихЛиц = Новый Массив;
	Для каждого Идентификатор Из Идентификаторы Цикл
		СписокФизическихЛиц.Добавить(Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	КонецЦикла;
	
	Возврат СписокФизическихЛиц;

КонецФункции

Функция ОтключитьКабинетыПоИдентификаторам(Идентификаторы) Экспорт
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	Если Не КабинетСотрудникаМенеджерОбмена.ДеактивироватьФизическихЛиц(Идентификаторы) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Ошибка получения данных из сервиса.';
								|en = 'An error occurred while receiving data from service.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЖурналаРегистрации

#Область ИменаСобытийЖурналаРегистрации

Функция ИмяСобытияПротоколЗапрос() Экспорт
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Запрос;

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Ответ;

КонецФункции

Функция ИмяСобытияПрочиеСобытия() Экспорт
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().ПрочиеСобытия;
	
КонецФункции

Функция ИмяСобытияОбсуждения() Экспорт
	
	Возврат ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Обсуждения;
	
КонецФункции

#КонецОбласти

#Область ЗаписьВЖурналРегистрации

Процедура ЗаписатьОшибкуРегистрацииИзменений(ДанныеСсылка, ОписаниеОшибки) Экспорт
	
	ТекстОшибки = НСтр(
	"ru = 'Произошла ошибка при регистрации изменений %1
	|Описание ошибки:
	|%2';
	|en = 'An error occurred upon registering the changes %1
	|Error description:
	|%2'");
	ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ДанныеСсылка), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,, ДанныеСсылка, ТекстОшибки);
	
КонецПроцедуры

Функция ПодробностиВЖурналеРегистрации() Экспорт

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.';
				|en = 'See the event log for details.'");

КонецФункции

Процедура ЗаписатьОшибкуЧтенияJSON(ОтветСтрока, ОписаниеОшибки) Экспорт

	ШаблонОписания = НСтр(
	"ru = 'Ошибка чтения JSON:
	|Описание ошибки:
	|%1
	|Строка JSON:
	|%2';
	|en = 'JSON read error:
	|Error description:
	|%1
	|JSON line:
	|%2'");
	
	ОтветСтрокаПустой = НСтр("ru = '<пустая строка>';
							|en = '<empty string>'");
	ОтветСтрока = ?(Не ЗначениеЗаполнено(ОтветСтрока), ОтветСтрокаПустой, ОтветСтрока);
	Комментарий = СтрШаблон(ШаблонОписания, ОписаниеОшибки, ОтветСтрока);
	ЗаписьЖурналаРегистрации(ИмяСобытияПрочиеСобытия(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ИнициализироватьРолиИсполнителейЗадач(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьБизнесПроцессыИЗадачи.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников"));
	
	// См. БизнесПроцессыИЗадачиПереопределяемый.ПриНачальномЗаполненииРолейИсполнителей.
	Отбор = ОбновлениеИнформационнойБазы.ПараметрыОбновленияПредопределенныхЭлементов();
	Отбор.Элементы = РолиИсполнителей;
	ОбновлениеИнформационнойБазы.ОбновитьПредопределенныеЭлементы(Метаданные.Справочники.РолиИсполнителей, Отбор);
	
КонецПроцедуры

Процедура ОбновитьПубликациюПравНаВычеты(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ КАК ФизическиеЛицаДляОбновления
	|		ПО ФизическиеЛица.ФизическоеЛицо = ФизическиеЛицаДляОбновления.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаДляОбновления.БылаОшибкаПриПубликации ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			ОбработкаВыполнена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УдалитьФизическиеЛицаДляОбновленияПубликацииВычетовНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ЗаписьНабора.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура НастроитьРегламентноеЗаданиеПроверкаСостоянияСервисаКабинетСотрудника(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", "ПроверкаСостоянияСервисаКабинетСотрудника");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Если Не ЗначениеЗаполнено(Задания) Или Задания[0].Использование Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Метаданные.РегламентныеЗадания.ПроверкаСостоянияСервисаКабинетСотрудника);
	ПараметрыЗадания = Новый Структура("Использование", Истина);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

Процедура УстановитьВерсияИзмененийКабинетСотрудника() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УдалитьВерсииЗаявокКабинетСотрудника.ВерсияИзменений) КАК ВерсияИзменений
	|ИЗ
	|	РегистрСведений.УдалитьВерсииЗаявокКабинетСотрудника КАК УдалитьВерсииЗаявокКабинетСотрудника";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Константы.УдалитьВерсияИзмененийКабинетСотрудника.Получить() <> Выборка.ВерсияИзменений Тогда
			Константы.УдалитьВерсияИзмененийКабинетСотрудника.Установить(Выборка.ВерсияИзменений);
		КонецЕсли;
		РегистрыСведений.УдалитьВерсииЗаявокКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеНастроекСервисаВерсии303(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат301() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаВыполнена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Получить() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Константа.КонтролироватьОзнакомлениеСРасчетнымиЛистками", "", "") Тогда
			ОбработкаВыполнена = Ложь;
		Иначе
			МенеджерКонстанты = Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.СоздатьМенеджерЗначения();
			МенеджерКонстанты.Значение = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаВыполнена);

КонецПроцедуры

Процедура ЗаполнитьСобытиеСотрудникиДляОбновленияПубликуемыхОбъектов(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДляОбновления.Сотрудник КАК Сотрудник,
	|	СотрудникиДляОбновления.ДатаСобытия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.КадровыеДанные)
	|		ИНАЧЕ СотрудникиДляОбновления.Событие
	|	КОНЕЦ КАК Событие
	|ИЗ
	|	РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СотрудникиДляОбновления.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов КАК СотрудникиДляОбновления
	|		ГДЕ
	|			СотрудникиДляОбновления.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияОбновленияОбъектовКабинетСотрудника.ПустаяСсылка)) КАК Сотрудники
	|		ПО СотрудникиДляОбновления.Сотрудник = Сотрудники.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов", "Сотрудник", Выборка.Сотрудник) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УдалитьСотрудникиДляОбновленияПубликуемыхОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		
		Пока Выборка.Следующий() Цикл
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Сотрудник 		= Выборка.Сотрудник;
			ЗаписьНабора.ДатаСобытия 	= Выборка.ДатаСобытия;
			ЗаписьНабора.Событие 		= Выборка.Событие;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ОбновитьФункциональностьСервисаПриИспользованииКЭДО(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Настройки.ТребуетсяОбновитьНастройкиФункциональности Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	ОбработкаЗавершена = Истина;
	Если Выборка.Следующий() Тогда
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
			ОбработкаЗавершена = Ложь;
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
			ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьСодержимоеДокументаКЭДОРасчетныхЛистков(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.СодержимоеДокумента = ЗНАЧЕНИЕ(Перечисление.СодержимоеДокументов.ПустаяСсылка)
	|	И ДокументКадровогоЭДО.КатегорияДокумента = ЗНАЧЕНИЕ(Перечисление.КатегорииДокументовКадровогоЭДО.РасчетныйЛисток)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументКадровогоЭДО.Дата УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ДокументКадровогоЭДО", "Ссылка", Выборка.Ссылка) Тогда
			ОбработкаЗавершена = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.СодержимоеДокумента = Перечисления.СодержимоеДокументов.СодержитЗарплату;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьПроверкуОзнакомленияСРасчетнымиЛистками(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат502() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
		
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		ЗаписьНабора.НомерИтерации = 1;
		ЗаписьНабора.ДатаРегистрации = ТекущаяДатаСеанса();
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура УстановитьТребуетсяОбновитьНастройкиФункциональности() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУволенныхСотрудников(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьФормат503() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;

	ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗаполнитьОбъектыСОшибкамиЗаполнения() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.ОбъектПубликации КАК ОбъектПубликации,
	|	ОшибкиЗаполнения.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	РегистрСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.ОбъектПубликации ССЫЛКА Справочник.ФизическиеЛица";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УдалитьОбъектыСОшибкамиЗаполненияКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(Выборка.ОбъектПубликации);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ОбъектПубликации 	= Выборка.ОбъектПубликации;
		НоваяЗапись.БлокирующаяОшибка 	= Истина;
		НоваяЗапись.ОписаниеБлокирующейОшибки = Выборка.ОписаниеОшибки;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
	РегистрыСведений.УдалитьОшибкиЗаполненияПубликуемыхОбъектовКабинетСотрудника.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеФункциональностиСервиса(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.ТребуетсяОбновитьНастройкиФункциональности = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбновленияФизическихЛиц(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеФизическихЛиц();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ЗарегистрироватьОбработчикОбновленияРуководителей(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ИмяОбработчика = ИмяОбработчикаОбновлениеРуководителей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбработчика", ИмяОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбработчикиОбмена.Обработчик КАК Обработчик
	|ИЗ
	|	РегистрСведений.ОбработчикиОбменаКабинетСотрудника КАК ОбработчикиОбмена
	|ГДЕ
	|	ОбработчикиОбмена.Обработчик = &ИмяОбработчика";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ОбработчикиОбменаКабинетСотрудника", "Обработчик", ИмяОбработчика) Тогда
		ОбработкаЗавершена = Ложь;
	Иначе
		
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика;
		ЗаписьНабора.Выполнено = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура ПроверитьВерсиюФормата() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ВерсииФорматаОбмена = КабинетСотрудникаМенеджерОбмена.ВерсииФорматаОбмена();
	НоваяВерсия = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(Настройки.ВерсияDTO, ВерсииФорматаОбмена);
	Если НоваяВерсия <> Настройки.ВерсияDTO Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюDTO(НоваяВерсия);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьИсключенияИзПравил() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		Возврат;
	КонецЕсли;

	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", Настройки.Ответственный);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.ЭтоОтветственный
	|	И ИсключенияИзПравил.ФизическоеЛицо = &ФизическоеЛицо
	|	И ИсключенияИзПравил.Публикуется
	|	И ИсключенияИзПравил.Приложение = &Приложение";
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Настройки.Ответственный);
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.Приложение 		= Приложение;
	ЗаписьНабора.ФизическоеЛицо 	= Настройки.Ответственный;
	ЗаписьНабора.Публикуется 		= Истина;
	ЗаписьНабора.ЭтоОтветственный 	= Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеУровеньДоступаКИ(ПараметрыОбновления = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника") Или Не ВерсионированиеИспользуется() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляЗапроса КАК ПоляЗапроса
	|ИЗ
	|	РегистрСведений.НастройкиСервисаКабинетСотрудника КАК НастройкиСервисаКабинетСотрудника
	|ГДЕ
	|	НЕ НастройкиСервисаКабинетСотрудника.УдалитьОбновитьУровеньДоступаКИ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", "*");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.НастройкиСервисаКабинетСотрудника", "", "") Тогда
		ОбработкаВыполнена = Ложь;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.УдалитьОбновитьУровеньДоступаКИ = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);

КонецПроцедуры

Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника() Экспорт
	
	ВыполняетсяНачальнаяНастройка = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.НачальнаяНастройкаПрограммы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НачальнаяНастройкаПрограммы");
		ВыполняетсяНачальнаяНастройка = Модуль.ВыполняетсяНачальнаяНастройкаПрограммы();
	КонецЕсли;
	
	ПоказыватьПриглашение = Не(ВыполняетсяНачальнаяНастройка Или ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника"));
	
	Если ПоказыватьПриглашение <> Константы.ПоказыватьПриглашениеКабинетСотрудника.Получить() Тогда
		Константы.ПоказыватьПриглашениеКабинетСотрудника.Установить(ПоказыватьПриглашение);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудникаБазовойВерсии() Экспорт

	Если ЗарплатаКадры.ЭтоБазоваяВерсияКонфигурации() Тогда
		УстановитьЗначениеПоказыватьПриглашениеКабинетСотрудника();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСменыВерсий

Процедура ВыполнитьДействияПриПереходеНаВерсию(ПрежняяВерсия, НоваяВерсия) Экспорт

	Если ПрежняяВерсия = НоваяВерсия Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.1.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.1.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "3.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "3.0.3.1") < 0) Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		Константы.КонтролироватьОзнакомлениеСРасчетнымиЛистками.Установить(Истина);
		КабинетСотрудникаВнутренний.ЗарегистрироватьОбновлениеДанныхГрафиковРаботы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.2.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.2.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаПроверкаОзнакомленияСРасчетнымиЛистками();
		МенеджерЗаписи = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Обработчик = ИмяОбработчика;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			ЗарегистрироватьОбработчикПроверкаОзнакомленияСРасчетнымиЛистками();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.1") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.1") < 0) Тогда
		
		ИмяОбработчика = ИмяОбработчикаОбновлениеУволенныхСотрудников();
		НаборЗаписей = РегистрыСведений.ОбработчикиОбменаКабинетСотрудника.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик.Установить(ИмяОбработчика);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Обработчик = ИмяОбработчика; 
		ЗаписьНабора.Выполнено = Ложь;
		НаборЗаписей.Записать();
		
	КонецЕсли;

	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.66") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.66") < 0) Тогда
		КадровыйЭДО.УстановитьЗначениеВедетсяУчетСогласийНаПрисоединениеККЭДО(ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяВерсия) И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НоваяВерсия, "5.0.3.75") > 0
		И (ПустаяСтрока(ПрежняяВерсия) Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПрежняяВерсия, "5.0.3.75") < 0)
		И ИнтеграцияУправлениеПерсоналом.ДоступнаВыгрузкаВидовСправок() Тогда
		
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюAPI(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		ВыполнитьДействияПриПереходеНаВерсию(Настройки.ВерсияПриложения, "6.0.1.1");
		БизнесПроцессыЗаявокСотрудников.ОбработатьПереходНаВерсиюФормата_1_0();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюФормата(СтараяВерсия, НоваяВерсия) Экспорт

	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьПубликациюВидовСправок());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаОбновлениеФизическихЛиц());
		ЗарегистрироватьОбработчикОбмена(ИмяОбработчикаЗарегистрироватьОбновлениеУровнейДоступаКИ());
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КонецЕсли;
	
	Если ИнтеграцияУправлениеПерсоналом.ВерсияФорматаМеньшеВерсии(СтараяВерсия, "1.1")
		И ИнтеграцияУправлениеПерсоналом.ВерсияФорматаБольшеИлиРавнаВерсии(НоваяВерсия, "1.1") Тогда
		ИнтеграцияКабинетСотрудника.ВключитьСборГрафиковОтпусков();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Прочие

Процедура ПроверкаДоступностиАдресаПоИмениФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	КабинетСотрудникаМенеджерОбмена.ПроверитьДоступностьАдресаПоИмени(Ложь);

КонецПроцедуры

Функция ФизическоеЛицоПубликуется(ФизическоеЛицо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОбъектыСОшибками
	|		ПО ФизическиеЛица.Ссылка = ОбъектыСОшибками.Ссылка
	|			И (ОбъектыСОшибками.БлокирующаяОшибка)
	|			И (ОбъектыСОшибками.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо
	|	И ОбъектыСОшибками.БлокирующаяОшибка ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НастройкиПрограммы() Экспорт

	
	Настройки = Новый Структура("ИспользоватьДСВ");
	Настройки.ИспользоватьДСВ = Ложь;
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиПрограммы(Настройки);
	
	Возврат Настройки;
	
КонецФункции

Функция ЭтоПодписанСервиса(СтрокаРольПодписантаЭП) Экспорт

	РолиПодписантаСервиса = Новый Соответствие;
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП("Руководитель")), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.Сотрудник)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.НепосредственныйРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.РуководителиПоВсемМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.РуководительПоДополнительнымМестамРаботы)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.ВышестоящийРуководитель)), Истина);
	РолиПодписантаСервиса.Вставить(Врег(СтрокаРольПодписантаДляЭП(Перечисления.РолиПодписантовКЭДО.НеформальныйРуководитель)), Истина);
	
	Если РолиПодписантаСервиса[ВРег(СтрокаРольПодписантаЭП)] = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СтрокаРольПодписантаДляЭП(РольПодписанта) Экспорт
	
	Если ТипЗнч(РольПодписанта) = Тип("ПеречислениеСсылка.РолиПодписантовКЭДО") Тогда
		СтрокаРольПодписанта = ОбщегоНазначения.ИмяЗначенияПеречисления(РольПодписанта);
	Иначе
		СтрокаРольПодписанта = РольПодписанта;
	КонецЕсли;

	Возврат СтрШаблон("%1:%2", "РольПодписанта", СтрокаРольПодписанта);

КонецФункции

Функция РазмерФайлаСоответствуетТребованиям(ДвоичныеДанные) Экспорт

	Возврат ДвоичныеДанные.Размер() <= ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();

КонецФункции

Функция РасширениеФотографии(ДвоичныеДанные) Экспорт
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ФорматФайла = Картинка.Формат();
	Если ФорматФайла = ФорматКартинки.JPEG 
		Или ФорматФайла = ФорматКартинки.GIF
		Или ФорматФайла = ФорматКартинки.TIFF
		Или ФорматФайла = ФорматКартинки.PNG
		Или ФорматФайла = ФорматКартинки.BMP Тогда
		Возврат Строка(ФорматФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СистемнаяУчетнаяЗаписьНастроена()

	УстановитьПривилегированныйРежим(Истина);
	СистемнаяУчетнаяЗаписьНастроена = РаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СистемнаяУчетнаяЗаписьНастроена;

КонецФункции

Функция ПубликуемыеФизическиеЛица() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|		ПО ФизическиеЛица.Ссылка = ОшибкиЗаполнения.Ссылка
	|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
	|			И (ОшибкиЗаполнения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL
	|	И ФизическиеЛица.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	Выборка = Запрос.Выполнить().Выбрать();
	ПубликуемыеФизическиеЛица = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ПубликуемыеФизическиеЛица.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Возврат ПубликуемыеФизическиеЛица;

КонецФункции

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииФормата

Функция ВерсионированиеИспользуется() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеЗаполнено(Настройки.ВерсияAPI);

КонецФункции

Функция ВерсияФорматаМеньшеВерсии(ВерсияФормата, ВерсияДляСравнения) Экспорт

	Если ПустаяСтрока(ВерсияФормата) Тогда
		Возврат Истина;
	Иначе
		Возврат СравнитьВерсии(ВерсияФормата, ВерсияДляСравнения) < 0;
	КонецЕсли;

КонецФункции 

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0 либо 0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//             Меньше 0 если СтрокаВерсии1 < СтрокаВерсии2.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Версия1 = СтрРазделить(СтрокаВерсии1, ".");
	Версия2 = СтрРазделить(СтрокаВерсии2, ".");
	
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РасчетныеЛисткиПервойПоловиныМесяцаДоступны() Экспорт
	
	Возврат ВерсионированиеИспользуется();
	
КонецФункции

Функция ИспользуетсяВерсияФормата(ВерсияДляСравнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Настройки.ВерсияDTO) Тогда
		Возврат Ложь;
	Иначе
		Возврат СравнитьВерсии(Настройки.ВерсияDTO, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область НастройкиФункциональностиСервиса

Функция НовыеНастройкиФункциональностиСервиса() Экспорт

	ВерсияФормата = ВерсияФормата();
	
	НастройкиФункциональности = КабинетСотрудникаМенеджерОбмена.НовоеОписаниеНастроекФункциональностиСервиса(ВерсияФормата);
	КабинетСотрудникаВнутренний.ЗаполнитьНастройкиФункциональностиСервиса(НастройкиФункциональности, ВерсияФормата);
	
	НастройкиФункциональности.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	НастройкиФункциональности.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	НастройкиФункциональности.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
	НастройкиФункциональности.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
	НастройкиФункциональности.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
	НастройкиФункциональности.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
	НастройкиФункциональности.ИспользуетсяКЭДО = Настройки.ИспользуетсяКадровыйЭДО;
	СпособПолученияСогласия = Настройки.СпособПолученияСогласияНаПрисоединениеККЭДО;
	НастройкиФункциональности.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
	НастройкиФункциональности.ПолучениеСогласияКЭДОУНЭП 	= (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НастройкиФункциональности, "ИнтеграцияС1СПерсонал") Тогда
		НастройкиФункциональности.ИнтеграцияС1СПерсонал = Константы.ИспользуетсяПриложение1СПерсонал.Получить();
	КонецЕсли;
	
	Возврат НастройкиФункциональности;
	
КонецФункции

Функция ДоступнаяФункциональностьСервисаПоВерсииПриложения() Экспорт

	ДоступнаяФункциональность = КабинетСотрудникаВнутренний.ДоступнаяФункциональностьСервисаПоВерсииПриложения();
	
	ДоступнаяФункциональность.ЗапросМестаРаботыВЗаявлении 	= ИспользоватьФормат303();
	ДоступнаяФункциональность.ИспользуютсяОбсуждения 		= ПолучитьФункциональнуюОпцию("ИспользуютсяОбсужденияКабинетСотрудника");
	ДоступнаяФункциональность.РасширенныйЗапросНаИзменениеЛичнойИнформации = ИспользоватьФормат503();
	ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП 			= ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ДоступнаяФункциональность.ДоступноПолучениеКопииНаЭлектроннуюПочту 	= СистемнаяУчетнаяЗаписьНастроена();
	
	Если ИспользоватьФормат503() Тогда
		Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
		ДоступнаяФункциональность.РазделКомпания 	= Не Настройки.СкрытьРазделКомпания;
		ДоступнаяФункциональность.РазделСправки 	= Не Настройки.СкрытьРазделСправки;
		ДоступнаяФункциональность.РазделДокументы 	= Не Настройки.СкрытьРазделДокументы;
		ДоступнаяФункциональность.ДоступноПолучениеДокументаСЭП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") И Не Настройки.ПолучениеДокументаСЭПНедоступно;
	КонецЕсли;
	
	Если ИспользоватьФормат50366() Тогда
		НастройкиИнтеграции = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ДоступнаяФункциональность.ИспользуетсяКЭДО = НастройкиИнтеграции.ИспользуетсяКадровыйЭДО;
		СпособПолученияСогласия = НастройкиИнтеграции.СпособПолученияСогласияНаПрисоединениеККЭДО;  
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОНаБумаге = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.БумажныйДокумент);
		ДоступнаяФункциональность.ПолучениеСогласияКЭДОУНЭП = (СпособПолученияСогласия = Перечисления.СпособыПолученияСогласияНаПрисоединениеККЭДО.УНЭП);
	КонецЕсли;
	
	Возврат ДоступнаяФункциональность;

КонецФункции

#КонецОбласти

#КонецОбласти
