
//++ Локализация
#Область ПрограммныйИнтерфейс

// Осуществляет разбор выписки банка
//
// Параметры:
// 	ЭлектроннаяВыпискаБанка - Ссылка - Электронная выписка
//
Процедура РазобратьВыпискуБанка(ЭлектроннаяВыпискаБанка) Экспорт
	
	ДенежныеСредстваСерверЛокализация.РазобратьВыпискуБанка(ЭлектроннаяВыпискаБанка);
	
КонецПроцедуры

//++ НЕ УТ

// Осуществляет установку константы КаталогВыгрузкиПодтверждающихДокументов
//
// Параметры:
// 	ЗначениеКонстанты - Строка - Путь к каталогу выгрузки подтверждающих документов
//
Процедура УстановитьЗначениеКонстантыКаталогВыгрузкиПодтверждающихДокументов(ЗначениеКонстанты) Экспорт
	
	Константы.КаталогВыгрузкиПодтверждающихДокументов.Установить(ЗначениеКонстанты);
	
КонецПроцедуры

// Определяет значения заполнения документа "Командировка" на основании "Заявки на командировку"
// 
// Параметры:
//    ДокументОснование - ДокументСсылка.ЗаявкаНаКомандировку - Заявка на командировку
//
// Возвращаемое значение:
//    Структура - Значения заполнения
//
Функция ЗначенияЗаполненияКомандировкиНаОснованииЗаявки(ДокументОснование) Экспорт
	
	РеквизитыОбъекта = Документы.ЗаявкаНаКомандировку.РеквизитыОбъекта(ДокументОснование);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", РеквизитыОбъекта.Организация);
	ЗначенияЗаполнения.Вставить("Сотрудник", СотрудникПоФизЛицу(РеквизитыОбъекта.Сотрудник, РеквизитыОбъекта.Организация));
	ЗначенияЗаполнения.Вставить("ДатаНачала", РеквизитыОбъекта.ДатаНачала);
	ЗначенияЗаполнения.Вставить("ДатаОкончания", РеквизитыОбъекта.ДатаОкончания);
	ЗначенияЗаполнения.Вставить("ЗаявкаСотрудника", ДокументОснование);
	ЗначенияЗаполнения.Вставить("ЗаполнитьПоПараметрамЗаполнения", Истина);
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

// Определяет сотрудника по физическому лицу
// 
// Параметры:
//    ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//    Организация - СправочникСсылка.Организации - Организация, в которой работает сотрудник
//
// Возвращаемое значение:
//    СправочникСсылка.Сотрудники, Неопределено - Сотрудник или Неопределено, если установить сотрудника не удалось
// 
Функция СотрудникПоФизЛицу(ФизическоеЛицо, Организация) Экспорт
	
	Результат = Неопределено;
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(
		ФизическоеЛицо, Ложь, Организация, ТекущаяДатаСеанса());
	
	Если ОсновныеСотрудники <> Неопределено И ОсновныеСотрудники.Количество() Тогда
		Результат = ОсновныеСотрудники[0].Сотрудник;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Формирует данные заполнения для коммандировки и возвращает признак корректного заполнения.
// 
// Параметры:
//  Заявка - ДокументСсылка.ЗаявкаНаКомандировку - документ, на основании которого создается командировка.
//  ДанныеЗаполнения - Неопределено - данные для заполнения командировки.
// 
// Возвращаемое значение:
//  Булево
Функция СформироватьДанныеЗаполненияКомандировки(Заявка, ДанныеЗаполнения) Экспорт

	ДанныеЗаполнения = ЗначенияЗаполненияКомандировкиНаОснованииЗаявки(Заявка);
	
	Отказ = Ложь;
	
	Если Не ДенежныеСредстваСерверЛокализация.ЭтоДействующийСотрудник(ДанныеЗаполнения) Тогда
		
		ТекстОшибки = НСтр("ru = 'В заявке введен не действующий сотрудник';
							|en = 'Inactive employee is specified in the request'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;

КонецФункции

//-- НЕ УТ

// Возвращает номер банковского счета по уникальному идентификатору первичного документа.
// 
// Параметры:
//  ИдПервичногоДокумента - Строка - уникальный идентификатор объекта в информационной базе.
// 
// Возвращаемое значение:
// - Строка.
//
Функция БанковскийСчетПодтвержденияПоПервичномуДокументу(ИдПервичногоДокумента) Экспорт
	
	БанковскийСчет = "";
	
	ПервичныйДокумент = ДенежныеСредстваСерверЛокализация.ПервичныйДокументПоИдентификатору(ИдПервичногоДокумента);
			
	Если Не ПервичныйДокумент.Пустая() Тогда
		
		Если ПервичныйДокумент.Метаданные().Реквизиты.Найти("БанковскийСчет") <> Неопределено Тогда
			БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйДокумент, "БанковскийСчет.НомерСчета");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

#КонецОбласти
//-- Локализация