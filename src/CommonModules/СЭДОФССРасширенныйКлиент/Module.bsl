#Область СлужебныйПрограммныйИнтерфейс

// Открывает форму настроек организации в части социального ЭДО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо показать настройки.
//
Процедура ОткрытьНастройкиПолученияУведомленийОбЭЛН(Страхователь) Экспорт
	Измерения = Новый Структура("Страхователь", Страхователь);
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи.НастройкиПолученияУведомленийОбЭЛН"), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	ОткрытьФорму("РегистрСведений.НастройкиПолученияУведомленийОбЭЛН.ФормаЗаписи", ПараметрыФормы);
КонецПроцедуры

// Возникает в форме списка регистра СНИЛСВходящихСообщенийСЭДО при переходе по гиперссылке.
//
// Параметры:
//   ТекущаяСтрока - ДанныеФормыСтруктура - Сведения из сообщения СЭДО.
//   СтандартнаяОбработка - Булево
//
Процедура ПриОткрытииФормыСпискаСообщений111(ТекущаяСтрока, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НомерЛН",                ТекущаяСтрока.НомерЛН);
	ПараметрыФормы.Вставить("ГоловнаяОрганизация",    ТекущаяСтрока.ГоловнаяОрганизация);
	ПараметрыФормы.Вставить("ИдентификаторСообщения", ТекущаяСтрока.ИдентификаторСообщения);
	ПараметрыФормы.Вставить("ФизическоеЛицо",         ТекущаяСтрока.ФизическоеЛицо);
	ОткрытьФорму("РегистрСведений.СообщенияФССОбИзмененииСостоянийЭЛН.ФормаСписка", ПараметрыФормы, , Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#Область СозданиеНаОсновании

// Обработчик создания на основании документа СведенияОЗастрахованномЛицеФСС
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура СформироватьСведенияОЗастрахованномЛицеФСС(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	СтруктураРезультат = СЭДОФССРасширенныйВызовСервера.ЗначенияЗаполненияСведенийОЗастрахованномЛицеФСС(ПараметрКоманды);
	
	Если Не ПустаяСтрока(СтруктураРезультат.АдресХранилища) Тогда
		ПараметрыФормы = Новый Структура("АдресХранилища,Основание", СтруктураРезультат.АдресХранилища, ПараметрКоманды);
		ОткрытьФорму("ОбщаяФорма.СозданиеСведенияОЗастрахованномЛицеСЭДО", ПараметрыФормы);
	ИначеЕсли ЗначениеЗаполнено(СтруктураРезультат.ЗначенияЗаполнения) Тогда
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", СтруктураРезультат.ЗначенияЗаполнения);
		ОткрытьФорму("Документ.СведенияОЗастрахованномЛицеФСС.Форма.ФормаДокумента", ПараметрыФормы);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В документе отсутствуют сотрудники по которым можно сформировать документы.';
														|en = 'В документе отсутствуют сотрудники по которым можно сформировать документы.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Открывает диалог отключения подписки организации на уведомления ФСС об изменении состояний ЭЛН сотрудника
//
// Параметры:
//   Сотрудники - Массив, СправочникСсылка.Сотрудники - Сотрудники, для которых необходимо отключить подписки.
//
Процедура ОтключитьПодписку(Сотрудники) Экспорт
	ИзменитьПодписку(Ложь, Сотрудники);
КонецПроцедуры

// Возвращает признак необходимости обновления группы напоминания ФСС об отключении подписки на ЭЛН.
Функция ТребуетсяОбновитьНапоминаниеОбОтключенииПодпискиНаЭЛН(ИмяСобытия) Экспорт
	Возврат ИмяСобытия = ИмяСобытияПослеИзмененияПодписокНаЭЛН()
		Или ИмяСобытия = СЭДОФССКлиент.ИмяСобытияПослеПолученияСообщенийОтФСС()
		Или ИмяСобытия = "Запись_СогласиеНаУведомлениеОбЭЛН"
		Или ИмяСобытия = "Запись_ОтзывСогласияНаУведомлениеОбЭЛН"
		Или ЭтоСобытиеЗаписиКадровогоПриказа(ИмяСобытия);
КонецФункции

Функция ЭтоСобытиеЗаписиКадровогоПриказа(ИмяСобытия) Экспорт
	Возврат ИмяСобытия = "Запись_ВосстановлениеВДолжности"
		Или ИмяСобытия = "Запись_ЗачислениеВСпискиЧасти"
		Или ИмяСобытия = "Запись_ЗачислениеВСпискиЧастиСписком"
		Или ИмяСобытия = "Запись_ИсключениеИзСписковЧасти"
		Или ИмяСобытия = "Запись_ИсключениеИзСписковЧастиСписком"
		Или ИмяСобытия = "Запись_КадровыйПеревод"
		Или ИмяСобытия = "Запись_КадровыйПереводВоеннослужащего"
		Или ИмяСобытия = "Запись_КадровыйПереводВоеннослужащегоСписком"
		Или ИмяСобытия = "Запись_КадровыйПереводСписком"
		Или ИмяСобытия = "Запись_НазначениеПодработки"
		Или ИмяСобытия = "Запись_НачальнаяШтатнаяРасстановка"
		Или ИмяСобытия = "Запись_ПеремещениеВДругоеПодразделение"
		Или ИмяСобытия = "Запись_ПереносДанных"
		Или ИмяСобытия = "Запись_ПрекращениеПодработки"
		Или ИмяСобытия = "Запись_ПриемНаРаботу"
		Или ИмяСобытия = "Запись_ПриемНаРаботуСписком"
		Или ИмяСобытия = "Запись_Увольнение"
		Или ИмяСобытия = "Запись_УвольнениеСписком";
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ИменаСобытийШироковещательныхОповещений

Функция ИмяСобытияПослеИзмененияПодписокНаЭЛН() Экспорт
	Возврат "ПослеИзмененияПодписокНаУведомленияОбИзмененииСостоянийЭЛН";
КонецФункции

#КонецОбласти

#Область Согласия

Процедура ОткрытьСогласие(Согласие, Организация = Неопределено, Сотрудник = Неопределено) Экспорт
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(Согласие) Тогда
		ПараметрыФормы.Вставить("Ключ", Согласие);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыФормы.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ПараметрыФормы.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;
	ОткрытьФорму("Документ.СогласиеНаУведомлениеОбЭЛН.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

Процедура ИзменитьПометкуУдаленияСогласий(МассивСогласий, ПометкаУдаления, Обработчик = Неопределено) Экспорт
	ИзменяемыеСогласия = Новый Массив;
	Для Каждого Согласие Из МассивСогласий Цикл
		СведенияОСогласии = Новый Структура("Ссылка,ПометкаУдаления");
		ЗаполнитьЗначенияСвойств(СведенияОСогласии, Согласие);
		Если ЗначениеЗаполнено(СведенияОСогласии.Ссылка)
			И СведенияОСогласии.ПометкаУдаления <> ПометкаУдаления Тогда
			ИзменяемыеСогласия.Добавить(СведенияОСогласии.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Количество = ИзменяемыеСогласия.Количество();
	Если Количество = 0 Тогда
		Если Обработчик <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Обработчик, Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Количество = 1 Тогда
		ПредставлениеСогласий = Строка(ИзменяемыеСогласия[0]);
	Иначе
		ПредставлениеСогласий = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 согласие;;%1 согласия;%1 согласий;%1 согласия';
				|en = ';%1 consent;;%1 consents;%1 consents;%1 consents'"), 
			Количество);
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru = 'После пометки на удаление согласия пропадут из списка.
			|Если сотрудник решил не подписывать согласие,
			|то рекомендуется регистрировать отказ при помощи соответствующей кнопки.
			|
			|Примеры ситуаций, в которых согласия помечаются на удаление:
			|- Согласие утратило свою актуальность (сотрудник его не читал);
			|- Согласие было создано по ошибке.
			|
			|Пометить на удаление %1?';
			|en = 'Once marked for deletion, the consents will disappear from the list.
			|If an employee decided not to sign the consent,
			|it is recommended to record the refusal using the corresponding button.
			|
			|Examples of situations when the consents are marked for deletion:
			|- The consent is no longer relevant (employee did not read it);
			|-The consent was created by mistake.
			|
			|Mark %1 for deletion?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Пометить на удаление';
													|en = 'Mark for deletion'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		КнопкаПоУмолчанию = Неопределено;
	Иначе
		ТекстВопроса = НСтр("ru = 'Снять пометку удаления %1?';
							|en = 'Clear %1 deletion mark?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Снять пометку удаления';
													|en = 'Clear deletion mark'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, ПредставлениеСогласий);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Обработчик", Обработчик);
	Контекст.Вставить("ИзменяемыеСогласия", ИзменяемыеСогласия);
	Контекст.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОбработчикОтвета = Новый ОписаниеОповещения(
		"ПослеОтветаНаВопросОбИзмененииПометкиУдаленияСогласий",
		ЭтотОбъект,
		Контекст);
	
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, Кнопки, , КнопкаПоУмолчанию);
КонецПроцедуры

Процедура ПослеОтветаНаВопросОбИзмененииПометкиУдаленияСогласий(Ответ, Контекст) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если Контекст.Обработчик <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Контекст.Обработчик, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ИзмененныеСогласия = СЭДОФССРасширенныйВызовСервера.ИзменитьПометкуУдаления(Контекст.ИзменяемыеСогласия, Контекст.ПометкаУдаления);
	
	Количество = ИзмененныеСогласия.Количество();
	Если Количество > 0 Тогда
		Если Количество = 1 Тогда
			Если Контекст.ПометкаУдаления Тогда
				Заголовок = НСтр("ru = 'Помечено на удаление';
								|en = 'Marked for deletion'");
			Иначе
				Заголовок = НСтр("ru = 'Снята пометка удаления';
								|en = 'Deletion mark cleared'");
			КонецЕсли;
			Текст = Строка(ИзмененныеСогласия[0]);
			Ссылка = ПолучитьНавигационнуюСсылку(ИзмененныеСогласия[0]);
		Иначе
			ПредставлениеСогласий = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 согласие;;%1 согласия;%1 согласий;%1 согласия';
					|en = ';%1 consent;;%1 consents;%1 consents;%1 consents'"), 
				Количество);
			Если Контекст.ПометкаУдаления Тогда
				Текст = НСтр("ru = '%1 помечено на удаление';
							|en = '%1 marked for deletion'");
			Иначе
				Текст = НСтр("ru = 'Снята пометка удаления %1';
							|en = 'Deletion mark cleared %1'");
			КонецЕсли;
			Текст = СтрШаблон(Текст, ПредставлениеСогласий);
			Ссылка = Неопределено;
		КонецЕсли;
		ПоказатьОповещениеПользователя(Заголовок, Ссылка, Текст, БиблиотекаКартинок.Успешно32);
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(ИзмененныеСогласия);
	
	Если Контекст.Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.Обработчик, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Подписки

// Открывает диалог изменения подписки.
//
// Параметры:
//   ВключитьПодписку - Булево - Если Истина, то подписка будет включена. Если Ложь, то отключена.
//   МассивОснований - СправочникСсылка.Сотрудники,
//       Массив из СправочникСсылка.Сотрудники,
//       Массив из ДокументСсылка.СогласиеНаУведомлениеОбЭЛН - Основания заполнения списка физлиц и страхователей.
//
Процедура ИзменитьПодписку(ВключитьПодписку, МассивОснований) Экспорт
	ПараметрыФормы = Новый Структура("ВключитьПодписку, МассивОснований", ВключитьПодписку, МассивОснований);
	НеИскатьРанееОткрытуюФорму = Истина;
	БлокироватьОкноВладельца = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("РегистрСведений.СогласияНаУведомленияОбЭЛН.Форма.ИзменениеСоставаПодписок",
		ПараметрыФормы,
		,
		НеИскатьРанееОткрытуюФорму,
		,
		,
		,
		БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
