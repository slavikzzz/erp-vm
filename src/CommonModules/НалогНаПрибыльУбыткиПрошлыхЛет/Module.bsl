#Область ПрограммныйИнтерфейс

// Функция - Порядок учета убытков прошлых лет
// 
// Возвращаемое значение:
//  Структура
//
Функция ПорядокУчетаУбытковПрошлыхЛет() Экспорт
	
	// Учет убытков прошлых лет для целей налогообложения устроен совсем не так, как это следует из правил бухгалтерского учета.
	// А именно убытки прошлых лет к переносу на будущие годы отражаются по дебету счета 97 по статьям РБП специального вида.
	// При этом год получения убытка зашифрован в периоде списания расхода - это год, предшествующий году начала списания.
	//
	// В бухгалтерском учете накопленный убыток отражается на счете 84.02.
	// При этом в программе бухгалтерский учет убытка ведется сводно, а не по годам возникновения.
	// 
	// Поэтому здесь учитываются только суммы, отраженные по виду учета НУ.
	
	ПорядокУчета = Новый Структура;
	ПорядокУчета.Вставить("СчетУчетаУбытков",          ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет);
	ПорядокУчета.Вставить("СчетаУчетаУбытков",         БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПорядокУчета.СчетУчетаУбытков));
	ПорядокУчета.Вставить("СчетУчетаПрибыли",          ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД);
	ПорядокУчета.Вставить("ВидСтатьиРБП",              Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	ПорядокУчета.Вставить("ПредставлениеСчетаУбытков", Строка(ПорядокУчета.СчетУчетаУбытков));
	ПорядокУчета.Вставить("ПредставлениеСчетаПрибыли", Строка(ПорядокУчета.СчетУчетаПрибыли));
	ПорядокУчета.Вставить("ПредставлениеВидаСтатьи",   Строка(ПорядокУчета.ВидСтатьиРБП));
	
	Возврат ПорядокУчета;
	
КонецФункции

// Функция - Убыток перенесенный на будущее
//
// Параметры:
//  НачалоПериода	 - Дата - начало отчетного периода
//  КонецПериода	 - Дата - конец отчетного периода
//  Организации		 - Массив, ФиксированныйМассив из СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  Число - сумма убытка по НУ, перенесенная на будущий период
//
Функция УбытокПеренесенныйНаБудущее(НачалоПериода, КонецПериода, Организации) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ПодготовитьВТ_УбытокПеренесенныйНаБудущее(
		МенеджерВременныхТаблиц,
		НачалоПериода,
		КонецПериода,
		Организации,
		Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(СуммыУбытка.СуммаНУ), 0) КАК СуммаНУ
	|ИЗ
	|	УбытокПеренесенныйНаБудущее КАК СуммыУбытка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // ровно одна запись
	
	Возврат Выборка.СуммаНУ;
	
КонецФункции

// Создает временную таблицу "УбытокПеренесенныйНаБудущее", данные содержатся в разрезе вариантов н/о.
// Если раздельный учет не используется, вариант н/о только 1 - в виде пустой ссылки.
// 
// Содержит колонки:
// 	ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли;
// 	Сумма                         - Число - Сумма по налоговому учету.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//  НачалоПериода	 - Дата - начало отчетного периода
//  КонецПериода	 - Дата - конец отчетного периода
//  Организации		 - Массив, ФиксированныйМассив из СправочникСсылка.Организации -
//  ВРазрезеВариантовНалогообложения - Булево - Если истина, то данные будут в разрезе вариантов н/о
// 
Процедура ПодготовитьВТ_УбытокПеренесенныйНаБудущее(МенеджерВременныхТаблиц,
	НачалоПериода, КонецПериода, Организации, ВРазрезеВариантовНалогообложения = Ложь) Экспорт
	
	ПорядокУчета = ПорядокУчетаУбытковПрошлыхЛет();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериода);
	Запрос.УстановитьПараметр("Организации",       Организации);
	Запрос.УстановитьПараметр("СчетУчетаПрибыли",  ПорядокУчета.СчетУчетаПрибыли);
	Запрос.УстановитьПараметр("СчетаУчетаУбытков", ПорядокУчета.СчетаУчетаУбытков);
	Запрос.УстановитьПараметр("ВидыСубконто",      ВидыСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПолеВариантНалогообложенияПрибыли   КАК ВариантНалогообложенияПрибыли,
	|	ПереносУбытка.СубконтоДт1            КАК СтатьяУбытка,
	|	СУММА(ПереносУбытка.СуммаНУОборотДт) КАК СуммаНУ
	|ПОМЕСТИТЬ УбытокПеренесенныйНаБудущее
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		СчетДт В (&СчетаУчетаУбытков),
	|		&ВидыСубконто,
	|		СчетКт = &СчетУчетаПрибыли,
	|		,
	|		Организация В (&Организации)
	|	) КАК ПереносУбытка
	|
	|ГДЕ
	|	ПереносУбытка.СубконтоДт1 ССЫЛКА Справочник.УбыткиПрошлыхЛет
	|
	|СГРУППИРОВАТЬ ПО
	|	&ПолеВариантНалогообложенияПрибыли,
	|	ПереносУбытка.СубконтоДт1
	|
	|";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ВРазрезеВариантовНалогообложения,
		"ПереносУбытка.СубконтоДт2",
		ВидыСубконто);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Конструктор таблицы убытков, подлежащих переносу/перенесенных на будущее
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ВариантНалогообложенияПрибыли - СправочникСсылка.ВариантыНалогообложенияПрибыли -
// * Филиал                        - СправочникСсылка.Организации -
// * Подразделение                 - СправочникСсылка.СтруктураПредприятия - 
// * НаправлениеДеятельности       - СправочникСсылка.НаправленияДеятельности -
// * СчетУбытка                    - ПланСчетовСсылка.Хозрасчетный -
// * СубконтоУбытка                - Неопределено - Субконто РБП
// * СуммаУбытка                   - Число -
//
Функция НовыйУбыткиПеренесенныеНаБудущее() Экспорт
	
	ТаблицаПеренесенныхУбытков = Новый ТаблицаЗначений;
	
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("Филиал",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("Подразделение",
		БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("НаправлениеДеятельности",
		Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("СчетУбытка",    Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("СубконтоУбытка");
	ТаблицаПеренесенныхУбытков.Колонки.Добавить("СуммаУбытка",   ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	Возврат ТаблицаПеренесенныхУбытков;
	
КонецФункции

// Добавляет в таблицы движений данные по отложенным налогам исходя из перенесенных убытков
// 
// Параметры:
// 	Движения                      - КоллекцияДвижений - 
// 	Организация                   - СправочникСсылка.Организации -
// 	Период                        - Дата
// 	УбыткиПеренесенныеНаБудущее   - см. НовыйУбыткиПеренесенныеНаБудущее
// 	ВариантУчетаОтложенногоНалога - Неопределено, ПеречислениеСсылка.ВариантыУчетаОтложенногоНалога -
// 	                                 если не передан, будет получен из базы
// 	ИспользуетсяРаздельныйУчет    - Неопределено, Булево - если не передан, будет получен из базы
Процедура УчестьПереносУбыткаНаБудущееВРасчетеОтложенногоНалога(
	Движения,
	Организация,
	Период,
	УбыткиПеренесенныеНаБудущее,
	ВариантУчетаОтложенногоНалога = Неопределено,
	ИспользуетсяРаздельныйУчет = Неопределено) Экспорт
	
	Если УбыткиПеренесенныеНаБудущее.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонецГода = КонецГода(Период);
	
	Если ВариантУчетаОтложенногоНалога = Неопределено Тогда
		ВариантУчетаОтложенногоНалога =
			НалогНаПрибыльБухгалтерскийУчет.ВариантУчетаОтложенногоНалога(КонецГода, Организация);
	КонецЕсли;
	
	Если ИспользуетсяРаздельныйУчет = Неопределено Тогда
		ИспользуетсяРаздельныйУчет =
			РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(Организация, КонецГода);
	КонецЕсли;
	
	ПрименяетсяПБУ18           =
		НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ПрименяетсяПБУ18(ВариантУчетаОтложенногоНалога);
	ПрименяетсяБалансовыйМетод =
		НалогНаПрибыльБухгалтерскийУчетКлиентСервер.ЭтоБалансовыйМетод(ВариантУчетаОтложенногоНалога);
	
	Если Не ПрименяетсяПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	// перенос сальдо по счету 09 по виду актива "убыток текущего периода"
	
	ВидыСубконтоОН = Новый Массив;
	ВидыСубконтоОН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств);
	
	КонГраница = Новый Граница(КонецГода, ВидГраницы.Включая);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонГраница",     КонГраница);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("ВидыСубконтоОН", ВидыСубконтоОН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ПолеВариантНалогообложенияПрибыли КАК ВариантНалогообложенияПрибыли,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстатокДт, 0) КАК Сумма,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаУУОстатокДт, 0) КАК СуммаУУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонГраница,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы),
	|			&ВидыСубконтоОН,
	|			Организация = &Организация
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)
	|	) КАК ХозрасчетныйОстатки";
	
	РаздельныйУчетПоНалогуНаПрибыль.ОбработатьПолеВариантаНалогообложенияВЗапросе(
		Запрос,
		ИспользуетсяРаздельныйУчет,
		"ХозрасчетныйОстатки.Субконто2",
		ВидыСубконтоОН);
	
	Содержание = НСтр("ru = 'Перенос убытка на будущее';
						|en = 'Transfer loss to the future'");
	
	СчетОтложенногоНалога = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	
	СуммыОтложенныхНалогов = Новый Соответствие();
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Период;
		Проводка.Организация = Организация;
		Проводка.СчетДт      = СчетОтложенногоНалога;
		Проводка.СчетКт      = СчетОтложенногоНалога;
		Проводка.Сумма       = Выборка.Сумма;
		Проводка.СуммаУУ     = Выборка.СуммаУУ;
		Проводка.Содержание  = Содержание;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Выборка.ВариантНалогообложенияПрибыли);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли,
			Выборка.ВариантНалогообложенияПрибыли);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
		Если СвойстваСчета.Валютный Тогда
			ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
			Проводка.ВалютаДт = ВалютаРеглУчета;
			Проводка.ВалютаКт = ВалютаРеглУчета;
			Проводка.ВалютнаяСуммаДт = Проводка.Сумма;
			Проводка.ВалютнаяСуммаКт = Проводка.Сумма;
		КонецЕсли;
		
		СуммыОтложенныхНалогов.Вставить(Выборка.ВариантНалогообложенияПрибыли, Выборка.Сумма);
		
	КонецЦикла;
	
	Если ПрименяетсяБалансовыйМетод Тогда
		
		// Добавление убытков прошлых лет в регистр "Расчет отложенного налога"
		РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
			Период,
			Организация);
		
		РасчетОтложенногоНалога = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(
			Метаданные.РегистрыСведений.РасчетОтложенногоНалога);
		
		НаОтчетнуюДату                     = КонецГода + 1;
		ВидСубконтоРБП                     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов;
		ВидСубконтоВариантыНалогообложения =
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВариантыНалогообложенияПрибыли;
		
		// Сначала соберем суммы убытков в разрезе вариантов н/о
		СуммыУбытков        = Новый Соответствие();
		
		Для Каждого Убыток Из УбыткиПеренесенныеНаБудущее Цикл
			
			СуммаУбыткаОбщая = СуммыУбытков.Получить(Убыток.ВариантНалогообложенияПрибыли);
			Если НЕ ЗначениеЗаполнено(СуммаУбыткаОбщая) Тогда
				СуммаУбыткаОбщая = 0;
			КонецЕсли;
			СуммыУбытков.Вставить(Убыток.ВариантНалогообложенияПрибыли, СуммаУбыткаОбщая + Убыток.СуммаУбытка);
			
		КонецЦикла;
		
		// Заполним по данным убытков временные разницы и отложенный налог.
		// Записи регистра сведений делятся по подразделениям и направлениям деятельности,
		// поэтому необходимо брать общую сумму отложенного налога по варианту н/о и умножать на коэффициент.
		// Будет заполняться кэш погрешности в процессе расчета для дальнейшего устранения
		ОбщийКэшПогрешности = Новый Соответствие();
		
		Для Каждого Убыток Из УбыткиПеренесенныеНаБудущее Цикл
			
			Запись = РасчетОтложенногоНалога.Добавить();
			
			Запись.ОтчетнаяДата                  = НаОтчетнуюДату;
			Запись.ВариантНалогообложенияПрибыли = Убыток.ВариантНалогообложенияПрибыли;
			Запись.СчетОтложенногоНалога         = СчетОтложенногоНалога;
			Запись.ВидАктивовИОбязательств       = Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет;
			Запись.Счет                          = Убыток.СчетУбытка;
			Запись.Филиал                        = Убыток.Филиал;
			Запись.Подразделение                 = Убыток.Подразделение;
			Запись.НаправлениеДеятельности       = Убыток.НаправлениеДеятельности;
			
			УстановитьСубконтоЗаписиРасчетаОтложенныхНалогов(
				Запись, ВидСубконтоРБП, Убыток.СубконтоУбытка);
			УстановитьСубконтоЗаписиРасчетаОтложенныхНалогов(
				Запись, ВидСубконтоВариантыНалогообложения, Запись.ВариантНалогообложенияПрибыли);
			
			// Заполнение сумм
			Запись.НалоговаяСтоимость = Убыток.СуммаУбытка;
			Запись.ВременнаяРазница   = -Убыток.СуммаУбытка;
			
			// Расчет отложенного налога
			ОбщаяСуммаОтложенногоНалога = СуммыОтложенныхНалогов.Получить(Убыток.ВариантНалогообложенияПрибыли);
			Если Не ЗначениеЗаполнено(ОбщаяСуммаОтложенногоНалога) Тогда
				ОбщаяСуммаОтложенногоНалога = 0;
			КонецЕсли;
			ОбщаяСуммаУбытка            = СуммыУбытков.Получить(Убыток.ВариантНалогообложенияПрибыли);
			
			Если ОбщаяСуммаУбытка > 0 Тогда
				Запись.ОтложенныйНалог = ОбщаяСуммаОтложенногоНалога * (Убыток.СуммаУбытка / ОбщаяСуммаУбытка);
			КонецЕсли;
			Запись.ЭффектУвеличенияВременныхРазниц = Запись.ОтложенныйНалог;
			
			// Заполнение кэша погрешности
			КэшПогрешности = ОбщийКэшПогрешности.Получить(Запись.ВариантНалогообложенияПрибыли);
			Если КэшПогрешности = Неопределено Тогда
				КэшПогрешности = Новый Структура;
				КэшПогрешности.Вставить("СтрокаСМаксимальнойСуммой",       Запись);
				КэшПогрешности.Вставить("ИсходнаяСуммаОтложенногоНалога",  ОбщаяСуммаОтложенногоНалога);
				КэшПогрешности.Вставить("РасчетнаяСуммаОтложенногоНалога", 0);
			КонецЕсли;
			
			Если Запись.ОтложенныйНалог > КэшПогрешности.СтрокаСМаксимальнойСуммой.ОтложенныйНалог Тогда
				КэшПогрешности.СтрокаСМаксимальнойСуммой = Запись;
			КонецЕсли;
			КэшПогрешности.РасчетнаяСуммаОтложенногоНалога =
				КэшПогрешности.РасчетнаяСуммаОтложенногоНалога + Запись.ОтложенныйНалог;
			
			ОбщийКэшПогрешности.Вставить(Запись.ВариантНалогообложенияПрибыли, КэшПогрешности);
			
		КонецЦикла;
		
		// Устранение погрешности
		Для каждого КлючИЗначениеПогрешности Из ОбщийКэшПогрешности Цикл
			
			КэшПогрешности = КлючИЗначениеПогрешности.Значение;
			Погрешность    =
				КэшПогрешности.ИсходнаяСуммаОтложенногоНалога - КэшПогрешности.РасчетнаяСуммаОтложенногоНалога;
			
			Если Погрешность <> 0 Тогда
				КэшПогрешности.СтрокаСМаксимальнойСуммой.ОтложенныйНалог =
					КэшПогрешности.СтрокаСМаксимальнойСуммой.ОтложенныйНалог + Погрешность;
			КонецЕсли;
		КонецЦикла;
		
		ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
			Движения,
			РасчетОтложенногоНалога,
			РеквизитыЗаписи,
			"РасчетОтложенногоНалога");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСубконтоЗаписиРасчетаОтложенныхНалогов(Запись, ВидСубконто, ЗначениеСубконто)
	
	СвойстваСчетаУбытка = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Запись.Счет);
	
	Если СвойстваСчетаУбытка.ВидСубконто1 = ВидСубконто Тогда
		Запись.Субконто1 = ЗначениеСубконто;
	ИначеЕсли СвойстваСчетаУбытка.ВидСубконто2 = ВидСубконто Тогда
		Запись.Субконто2 = ЗначениеСубконто;
	ИначеЕсли СвойстваСчетаУбытка.ВидСубконто3 = ВидСубконто Тогда
		Запись.Субконто3 = ЗначениеСубконто;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти