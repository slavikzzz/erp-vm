
#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьАктивациюФизическихЛицКабинетСотрудника(МенеджерОбмена, РезультатВыгрузки) Экспорт

	Если Не ЗначениеЗаполнено(РезультатВыгрузки.Выгружено) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	СсылкаПубличныйИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(РезультатВыгрузки.Выгружено, ТипОбъекта);
	ИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомОбмен.СоответствиеНаоборот(СсылкаПубличныйИдентификатор);
	
	Данные = Новый Массив;
	Для каждого Ссылка Из РезультатВыгрузки.Выгружено Цикл
		Данные.Добавить(СсылкаПубличныйИдентификатор[Ссылка]);
	КонецЦикла;
	
	Результат = МенеджерОбмена.РезультатАктивацииФизическихЛиц(Данные);

	ФизическиеЛица = Новый Массив;
	Для каждого ЭлементКоллекции Из ИдентификаторСсылка Цикл
		ФизическиеЛица.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	РезультатВыгрузки.Выгружено = ФизическиеЛица;

КонецПроцедуры

Функция ВыгрузитьНастройкиПриложения(МенеджерОбмена = Неопределено) Экспорт
	
	Если МенеджерОбмена = Неопределено Тогда
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	КонецЕсли;
	
	БылиОшибки = Ложь;
	
	Если ИнтеграцияКабинетСотрудника.ТребуетсяОбновитьНастройкиФункциональности() Тогда
		ИспользуемаяФункциональность = ИнтеграцияКабинетСотрудника.ИспользуемаяФункциональностьСервиса();
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ИспользуемаяФункциональность;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиНастроек(ИспользуемаяФункциональность, ТипОбъекта);
		Если Не РезультатВыгрузки.БылиОшибки Тогда
			ИнтеграцияКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Ложь);
		КонецЕсли;
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	КонецЕсли;
	
	Если ИнтеграцияКабинетСотрудника.ТребуетсяОбновитьНастройкиЗаявленийНаОтпуск() Тогда
		НастройкиЗаявленийНаОтпуск = ИнтеграцияКабинетСотрудника.НастройкиЗаявленийНаОтпуск();
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.НастройкиЗаявленийНаОтпуск;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиНастроек(НастройкиЗаявленийНаОтпуск, ТипОбъекта);
		Если Не РезультатВыгрузки.БылиОшибки Тогда
			ИнтеграцияКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиЗаявленийНаОтпуск(НастройкиЗаявленийНаОтпуск);
		КонецЕсли;
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	КонецЕсли;
	
	НастройкиОтсутствий = ИнтеграцияКабинетСотрудника.НастройкиОтсутствийДляОбновления();
	Если ЗначениеЗаполнено(НастройкиОтсутствий) Тогда
		
		Настройки = НоваяНастройкиОтсутствий();
		Для каждого СтрокаТЗ Из НастройкиОтсутствий Цикл
			ЗаполнитьЗначенияСвойств(Настройки.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.НастройкиОтсутствий;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиНастроек(Настройки, ТипОбъекта);
		Если Не РезультатВыгрузки.БылиОшибки Тогда
			ИнтеграцияКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиОтсутствий(НастройкиОтсутствий);
		КонецЕсли;
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьДокументы(МенеджерОбмена) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	БылиОшибки = Ложь;
	ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
	
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗарегистрироватьДокументыНаПодпись();
		Исключение
			БылиОшибки = Истина;
			ШаблонОписания = НСтр(
			"ru = 'Произошла ошибка при регистрации изменений документов на подпись
			|Описание ошибки:
			|%1';
			|en = 'An error occurred upon registering the changes of the documents to sign
			|Error description:
			|%1'");
			Комментарий = СтрШаблон(ШаблонОписания, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		КонецПопытки;
	КонецЕсли;
	
	ТаблицаИзменений = ЗарегистрированныеИзмененияДокументовКЭДО();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	// Инициализации таблицы для отмены регистрации изменений.
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	ТипыДанныхЗаявкаСправкаСРаботы = Новый Соответствие;
	ТипыДанныхЗаявкаСправкаСРаботы.Вставить(БизнесПроцессыЗаявокСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы(),Истина);
	ТипыДанныхЗаявкаСправкаСРаботы.Вставить(ЗаявкиСотрудников.ТипЗаявкаСотрудникаСправкаСМестаРаботы(),Истина);

	Справки2НДФЛ 		= Новый Массив;
	СогласияКЭДО 		= Новый Массив;
	СправкиСРаботы 		= Новый Массив;
	ДокументыНаПодпись 	= Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		ТипДанных = ТипЗнч(СтрокаТЗ.ОснованиеДокумента);
		Если СтрокаТЗ.ПометкаУдаления Тогда
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		ИначеЕсли СтрокаТЗ.КатегорияДокумента = Перечисления.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника Тогда
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		ИначеЕсли ТипДанных = Тип("ДокументСсылка.СправкаНДФЛ") И ЗначениеЗаполнено(СтрокаТЗ.Заявка) Тогда
			Справки2НДФЛ.Добавить(СтрокаТЗ.Ссылка);
		ИначеЕсли ТипДанных = Тип("ДокументСсылка.СогласиеНаПрисоединениеККЭДО") Тогда
			СогласияКЭДО.Добавить(СтрокаТЗ.Ссылка);
		ИначеЕсли ТипыДанныхЗаявкаСправкаСРаботы[ТипДанных] = Истина Тогда
			СправкиСРаботы.Добавить(СтрокаТЗ.Ссылка);
		Иначе
			Если КадровыйЭДО.ЭтоТипОбъектаСПечатнымиФормами(ТипДанных) Тогда
				ДокументыНаПодпись.Добавить(СтрокаТЗ.Ссылка);
			Иначе
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОбработано = ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Если ЗначениеЗаполнено(Справки2НДФЛ) Тогда
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьСправки2НДФЛ(МенеджерОбмена, Справки2НДФЛ, ТаблицаОбработано);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыНаПодпись) Тогда
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьДокументыНаПодпись(МенеджерОбмена, ДокументыНаПодпись, ТаблицаОбработано);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправкиСРаботы) Тогда
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьСправкиСРаботы(МенеджерОбмена, СправкиСРаботы, ТаблицаОбработано);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СогласияКЭДО) Тогда
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьСогласияКЭДО(МенеджерОбмена, СогласияКЭДО, ТаблицаОбработано);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

	ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьРезультатыВыполненияЗаявок(МенеджерОбмена) Экспорт

	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	БылиОшибки = Ложь;
	
	ТаблицаИзменений = ЗарегистрированныеИзмененияЗаявок();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Отбор = Новый Структура("ТипДанных");
	ТипыДанных = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипДанных", Истина);
	
	Данные = ДанныеДляВыгрузкиРезультатовВыполненияЗаявок(МенеджерОбмена, ТаблицаИзменений);
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	
	ЗаявкаТипОбъекта = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		ЗаявкаТипОбъекта.Вставить(СтрокаТЗ.Ссылка, СтрокаТЗ.ТипОбъекта);
	КонецЦикла;
	
	Для каждого Ссылка Из Данные.ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= ЗаявкаТипОбъекта[Ссылка];
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Данные.СправкиОстаткиОтпусков) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.СправкаОстаткиОтпусков;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.СправкиОстаткиОтпусков, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		Для каждого Заявка Из РезультатВыгрузки.Выгружено Цикл
			РезультатыСогласования = Данные.СправкиРезультатыСогласования[Заявка];
			Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработанныеЗаявки = Новый Соответствие;
	Если ЗначениеЗаполнено(Данные.РезультатыСогласования) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НеВыгруженныеРезультатыСогласования = НеВыгруженныеРезультатыСогласования(Данные.РезультатыСогласования, РезультатВыгрузки.Выгружено);
		Для каждого СтрокаТЗ Из Данные.РезультатыСогласования Цикл
			Если НеВыгруженныеРезультатыСогласования[СтрокаТЗ.ИдентификаторОбъекта] = Неопределено Тогда
				ОбработанныеЗаявки.Вставить(Данные.ИдентификаторЗаявка[СтрокаТЗ.ИдентификаторОбъекта]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ОбработанныеЗаявки Цикл
		Заявка = КлючИЗначение.Ключ;
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Заявка;
		НоваяСтрока.ТипОбъекта 	= ЗаявкаТипОбъекта[Заявка];
	КонецЦикла;

	ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	
	Возврат БылиОшибки;
	
КонецФункции 

Функция ВыгрузитьИзмененияПрочихОбъектов(МенеджерОбмена) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	БылиОшибки = Ложь;
	ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
	
	ПеречисленияМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(ПеречисленияМенеджер.ДоступныеФункцииФизическогоЛица);
	ТипыОбъектов.Добавить(ПеречисленияМенеджер.ОграничениеДоступаКРабочимКонтактам);
	ТипыОбъектов.Добавить(ПеречисленияМенеджер.ПрименяемыеВычетыНДФЛ);
	Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		ТипыОбъектов.Добавить(ПеречисленияМенеджер.ПраздничныеДниГрафикаРаботы);
		ТипыОбъектов.Добавить(ПеречисленияМенеджер.ВидПредоставляемойСотрудникамСправки);
		Если ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0") Тогда
			ТипыОбъектов.Добавить(ПеречисленияМенеджер.ВидОтпуска);
			ТипыОбъектов.Добавить(ПеречисленияМенеджер.РабочееМестоОхраныТруда);
		КонецЕсли;
	КонецЕсли;
	
	// Получение всех зарегистрированных изменений для обмена по указанным типам объектов.
	ТаблицаИзменений = ЗарегистрированныеИзменения(ТипыОбъектов);
	
	ТаблицаИзменений.Индексы.Добавить("ТипОбъекта");
	Отбор = Новый Структура("ТипОбъекта");
	
	Для каждого ТипОбъекта Из ТипыОбъектов Цикл
		
		Отбор.ТипОбъекта = ТипОбъекта;
		
		НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
		Изменения 			= ТаблицаИзменений.СкопироватьКолонки();
		ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
		
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если СтрокаТЗ.ЕстьВПравилах Тогда
				ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
			Иначе
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъектов = ДанныеОбъектовДляВыгрузки(МенеджерОбмена, Изменения, ТипОбъекта);
		
		БылиОшибки = БылиОшибки Или ДанныеОбъектов.БылиОшибки;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеОбъектов.ОтменитьРегистрацию, ОтменитьРегистрацию);
		
		// Выгрузка объектов.
		Если ЗначениеЗаполнено(ДанныеОбъектов.ТаблицаДанных) Тогда
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеОбъектов.ТаблицаДанных, ТипОбъекта);
			БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			ИнтеграцияУправлениеПерсоналомОбмен.ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, Изменения, ОтменитьРегистрацию);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	БылиОшибкиЭтапа = ВыгрузитьМЧД(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	БылиОшибкиЭтапа = ВыгрузитьШаблоныДокументов(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	Если Не ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	БылиОшибкиЭтапа = ВыгрузитьГрафикиОтпусков(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	БылиОшибкиЭтапа = ВыгрузитьЗаработанныеПраваНаОтпуск(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	БылиОшибкиЭтапа = ВыгрузитьГрафикОтпусковПредприятия(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	БылиОшибкиЭтапа = ВыгрузитьДанныеГрафиковРаботы(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	БылиОшибкиЭтапа = ВыгрузитьПлановыеУдержания(МенеджерОбмена);
	БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ИнформационнаяСистемаДоступна() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	
	ИСДоступна = Неопределено;
	ДоступностьПриложения = МенеджерОбмена.ДоступностьПриложения();
	Если ЗначениеЗаполнено(ДоступностьПриложения) Тогда
		ИСДоступна = (ДоступностьПриложения.ДоступностьИнформационнойСистемы = "доступно");
	КонецЕсли;
	
	Возврат ИСДоступна;

КонецФункции

#Область ОбработчикиВыгрузкиОбъектов

#Область ВыгрузкаМЧД

Функция ВыгрузитьМЧД(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенность;
	ТаблицаИзменений = ЗарегистрированныеИзменения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОбъекта));
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	Данные = ДанныеДляВыгрузкиМЧД(ТаблицаИзменений);
	
	ДанныеМЧД = Данные.ДанныеМЧД;
	Если Не ЗначениеЗаполнено(ДанныеМЧД) Тогда
		Возврат БылиОшибки;
	КонецЕсли; 
	
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеМЧД, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Отбор = Новый Структура("ИдентификаторДокумента");
	ТаблицаРезультатыСогласования = Данные.РезультатыСогласования;
	РезультатыСогласования = НоваяТаблицаРезультатыСогласования();
	ИдентификаторыМЧД = Данные.ИдентификаторыМЧД;
	Для каждого МЧД Из РезультатВыгрузки.Выгружено Цикл
		Отбор.ИдентификаторДокумента = ИдентификаторыМЧД[МЧД];
		НайденныеСтроки = ТаблицаРезультатыСогласования.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЦикла;

	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	ИдентификаторОбъектаМЧД = Данные.ИдентификаторОбъектаМЧД;
	Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
		
		ВыгруженныеМЧД = Новый Соответствие;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		Для каждого Идентификатор Из РезультатВыгрузки.Выгружено Цикл
			ВыгруженныеМЧД.Вставить(ИдентификаторОбъектаМЧД[Идентификатор]);
		КонецЦикла;
		
		Для каждого КлючИЗначение Из ВыгруженныеМЧД Цикл
			Ссылка = КлючИЗначение.Ключ;
			НоваяСтрока = ТаблицаОбработано.Добавить();
			НоваяСтрока.Ссылка 		= Ссылка;
			НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенность;
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(МенеджерОбмена.Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеДляВыгрузкиМЧД(ТаблицаИзменений)

	Данные = Новый Структура("ДанныеМЧД,РезультатыСогласования,ИдентификаторыМЧД,ИдентификаторОбъектаМЧД");
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	МЧД = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ДанныеМЧД = ИнтеграцияУправлениеПерсоналом.ДанныеМЧД(МЧД);
	
	ТаблицаМЧД 				= НоваяТаблицаМЧД();
	РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	ИдентификаторОбъектаМЧД = Новый Соответствие;
	ИдентификаторыМЧД 		= Новый Соответствие;
	Если ЗначениеЗаполнено(ДанныеМЧД) Тогда 
		
		МЧД = ДанныеМЧД.ВыгрузитьКолонку("МЧД");
		МЧДПубличныйИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(МЧД, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.МашиночитаемаяДоверенность);
		
		Для каждого СтрокаТЗ Из ДанныеМЧД Цикл
			НоваяСтрока = ТаблицаМЧД.Добавить();
			НоваяСтрока.МЧД 			= СтрокаТЗ.МЧД;
			НоваяСтрока.Наименование 	= КадровыйЭДОВызовСервера.ИмяВыгружаемогоФайлаМЧД(СтрокаТЗ.МЧД);
			НоваяСтрока.Данные 			= СтрокаТЗ.Данные;
			НоваяСтрока.Размер 			= СтрокаТЗ.Размер;
			
			ДанныеДоверенности = СтрокаТЗ.Доверенность;
			ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДанныеДоверенности);
			
			УстановленныеПодписи = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(СтрокаТЗ.ФайлДоверенности);
			Для Каждого УстановленнаяПодпись Из УстановленныеПодписи Цикл
				
				Если ИнтеграцияУправлениеПерсоналомСлужебный.ЭтоПодписьИзПриложения(УстановленнаяПодпись) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПодписанта = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПодписантаИзПодписи(Приложение, УстановленнаяПодпись);
				
				НаборСвойствПодписиКЭДО = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(УстановленнаяПодпись, "НаборСвойствПодписиКЭДО");
				Если ЗначениеЗаполнено(НаборСвойствПодписиКЭДО) Тогда
					Для Каждого ЭлементСвойств Из НаборСвойствПодписиКЭДО Цикл
						НоваяСтрока = РезультатыСогласования.Добавить();
						НоваяСтрока.ИдентификаторОбъекта 				= Строка(Новый УникальныйИдентификатор);
						НоваяСтрока.Подписант 							= ДанныеПодписанта.Подписант;
						НоваяСтрока.ИмяПодписанта 						= ДанныеПодписанта.ИмяПодписанта;
						НоваяСтрока.ИдентификаторДокумента 				= МЧДПубличныйИдентификатор[СтрокаТЗ.МЧД];
						НоваяСтрока.РезультатСогласования 				= Перечисления.РезультатыСогласованияБЗК.Согласовано;
						НоваяСтрока.ЭлектроннаяПодпись 					= Base64Строка(УстановленнаяПодпись.Подпись);
						НоваяСтрока.ВерсияДокумента 					= ХешСумма;
						НоваяСтрока.ДатаПодписи							= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(УстановленнаяПодпись.ДатаПодписи);
						НоваяСтрока.РольПодписанта 						= Перечисления.РолиПодписантовКЭДО.Организация;
						НоваяСтрока.ИмяФайла 							= УстановленнаяПодпись.ИмяФайла;
						Если ЗначениеЗаполнено(ЭлементСвойств.МЧД) Тогда
							НоваяСтрока.МЧД = ЭлементСвойств.МЧД.Ссылка;
						КонецЕсли;
						ИдентификаторОбъектаМЧД.Вставить(НоваяСтрока.ИдентификаторОбъекта, СтрокаТЗ.МЧД);
					КонецЦикла;
				Иначе
					НоваяСтрока = РезультатыСогласования.Добавить();
					НоваяСтрока.ИдентификаторОбъекта 				= Строка(Новый УникальныйИдентификатор);
					НоваяСтрока.Подписант 							= ДанныеПодписанта.Подписант;
					НоваяСтрока.ИмяПодписанта 						= ДанныеПодписанта.ИмяПодписанта;
					НоваяСтрока.ИдентификаторДокумента 				= МЧДПубличныйИдентификатор[СтрокаТЗ.МЧД];
					НоваяСтрока.РезультатСогласования 				= Перечисления.РезультатыСогласованияБЗК.Согласовано;
					НоваяСтрока.ЭлектроннаяПодпись 					= Base64Строка(УстановленнаяПодпись.Подпись);
					НоваяСтрока.ВерсияДокумента 					= ХешСумма;
					НоваяСтрока.ДатаПодписи							= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(УстановленнаяПодпись.ДатаПодписи);
					НоваяСтрока.РольПодписанта 						= Перечисления.РолиПодписантовКЭДО.Организация;
					НоваяСтрока.ИмяФайла 							= УстановленнаяПодпись.ИмяФайла;
					ИдентификаторОбъектаМЧД.Вставить(НоваяСтрока.ИдентификаторОбъекта, СтрокаТЗ.МЧД);
				КонецЕсли;
				
				ИдентификаторыМЧД.Вставить(СтрокаТЗ.МЧД, МЧДПубличныйИдентификатор[СтрокаТЗ.МЧД]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

	Данные.ДанныеМЧД 				= ТаблицаМЧД;
	Данные.РезультатыСогласования 	= РезультатыСогласования;
	Данные.ИдентификаторОбъектаМЧД 	= ИдентификаторОбъектаМЧД;
	Данные.ИдентификаторыМЧД 		= ИдентификаторыМЧД;
	
	Возврат Данные;

КонецФункции

#КонецОбласти

#Область Выгрузка2НФДЛ

Функция ВыгрузитьСправки2НДФЛ(МенеджерОбмена, ДокументыКЭДО, ТаблицаОбработано)
	
	БылиОшибки = Ложь;
	Данные = ДанныеДляВыгрузки2НДФЛ(МенеджерОбмена, ДокументыКЭДО);
	
	ТаблицаСправок 					= Данные.Справки;
	ОтменитьРегистрацию 			= Данные.ОтменитьРегистрацию;
	ТаблицаРезультатыСогласования 	= Данные.РезультатыСогласования;
	ИдентификаторДокумент 			= Данные.ИдентификаторДокумент;
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	
	Для каждого Ссылка Из ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаСправок) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	ВыгруженныеДокументы 	= Новый Соответствие;
	
	// Выгрузка справок.
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Справка2НДФЛ;
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ТаблицаСправок, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Отбор = Новый Структура("ИдентификаторДокумента");
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ВыгруженныеДокументы.Вставить(ИдентификаторДокумент[ИдентификаторДокумента]);
		Отбор.ИдентификаторДокумента = ИдентификаторДокумента;
		НайденныеСтроки = ТаблицаРезультатыСогласования.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЦикла;
	
	// Выгрузка результатов согласования.
	Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НеВыгруженныеРезультатыСогласования = НеВыгруженныеРезультатыСогласования(РезультатыСогласования, РезультатВыгрузки.Выгружено);
		Если ЗначениеЗаполнено(НеВыгруженныеРезультатыСогласования) Тогда
			Для каждого СтрокаТЗ Из РезультатыСогласования Цикл
				Если НеВыгруженныеРезультатыСогласования[СтрокаТЗ.ИдентификаторОбъекта] = Истина Тогда
					ВыгруженныеДокументы.Удалить(ИдентификаторДокумент[СтрокаТЗ.ИдентификаторДокумента]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВыгруженныеДокументы Цикл
		Ссылка = КлючИЗначение.Ключ;
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		КадровыйЭДО.ЗарегистрироватьПубликациюДокументаКЭДО(Ссылка, ТекущаяДатаСеанса());
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ДанныеДляВыгрузки2НДФЛ(МенеджерОбмена, ДокументыКЭДО)
	
	Данные = Новый Структура("Справки,ОтменитьРегистрацию,РезультатыСогласования,ИдентификаторДокумент,БылиОшибки");
	Данные.Справки 					= НоваяТаблицаСправки2НДФЛ();
	Данные.ОтменитьРегистрацию 		= Новый Массив;
	Данные.РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	Данные.ИдентификаторДокумент 	= Новый Соответствие;
	Данные.БылиОшибки 				= Ложь; 
	
	ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
	
	ДанныеСправок = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеСправок2НДФЛ(ДокументыКЭДО);
	
	ЭлектроннаяПодписьКакОбъект = ЭлектроннаяПодписьКакОбъект();
	
	Для каждого СтрокаТЗ Из ДанныеСправок Цикл
		
		Если СтрокаТЗ.РезультатВыполнения <> Неопределено Тогда
			Если СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена
				Или СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована Тогда
				Данные.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ДокументКЭДО);
				Продолжить;
			ИначеЕсли СтрокаТЗ.РезультатВыполнения <> Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
				// Заявка еще не выполнена, пропускаем обработку документа.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронныйДокумент = Неопределено;
		ТребуетсяЭП = СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП;
		Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
			
			ЭлектронныйДокумент = ЭлектронныйДокумент(СтрокаТЗ.ДанныеЭлектронногоДокумента);
			Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Данные.БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			РезультатыСогласования = РезультатыСогласования(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДанныеЭлектронногоДокумента, ЭлектроннаяПодписьКакОбъект);
			Если Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
				// нет ЭП с соответствующей ролью подписанта
				Данные.БылиОшибки = Истина;
				ШаблонОписания = НСтр(
				"ru = 'Ошибка выгрузки электронного документа, отсутствует электронная подпись файла.
				|%1';
				|en = 'An error occurred when exporting the electronic document. The digital signature of the file is missing.
				|%1'");
				Комментарий = СтрШаблон(ШаблонОписания, Строка(СтрокаТЗ.ДокументКЭДО));
				ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
			
		Иначе
			ЭлектронныйДокумент = ЭлектронныйДокументПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент);
			Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Данные.БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСправки = Данные.Справки.Добавить();
		СтрокаСправки.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		СтрокаСправки.Организация 				= СтрокаТЗ.Организация;
		СтрокаСправки.ФизическоеЛицо 			= СтрокаТЗ.ФизическоеЛицо;
		СтрокаСправки.НалоговыйПериод 			= СтрокаТЗ.НалоговыйПериод;
		СтрокаСправки.СуммаДохода 				= СтрокаТЗ.СуммаДохода;
		СтрокаСправки.СуммаНалога 				= СтрокаТЗ.СуммаНалога;
		СтрокаСправки.ДатаСоздания 				= СтрокаТЗ.ДатаСоздания;
		СтрокаСправки.Комментарий 				= СтрокаТЗ.Комментарий; 
		СтрокаСправки.ЭлектронныйДокумент 		= ЭлектронныйДокумент;
		СтрокаСправки.ИдентификаторЗаявки 		= СтрокаТЗ.ИдентификаторЗаявки;
		
		Данные.ИдентификаторДокумент.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДокументКЭДО);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаДокументовНаПодпись

Функция ВыгрузитьДокументыНаПодпись(МенеджерОбмена, ДокументыКЭДО, ТаблицаОбработано)

	БылиОшибки = Ложь;
	Данные = ДанныеДляВыгрузкиДокументовНаПодпись(МенеджерОбмена, ДокументыКЭДО);
	
	ДокументыНаПодпись 				= Данные.ДокументыНаПодпись;
	ОтменитьРегистрацию 			= Данные.ОтменитьРегистрацию;
	ТаблицаРезультатыСогласования 	= Данные.РезультатыСогласования;
	ИдентификаторДокумент 			= Данные.ИдентификаторДокумент;
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	
	Для каждого Ссылка Из ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДокументыНаПодпись) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	ВыгруженныеДокументы 	= Новый Соответствие;
	
	// выгрузка документов
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДокументыНаПодпись, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Отбор = Новый Структура("ИдентификаторДокумента");
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ВыгруженныеДокументы.Вставить(ИдентификаторДокумент[ИдентификаторДокумента]);
		Отбор.ИдентификаторДокумента = ИдентификаторДокумента;
		НайденныеСтроки = ТаблицаРезультатыСогласования.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЦикла;
	
	// Выгрузка результатов согласования.
	Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НеВыгруженныеРезультатыСогласования = НеВыгруженныеРезультатыСогласования(РезультатыСогласования, РезультатВыгрузки.Выгружено);
		Если ЗначениеЗаполнено(НеВыгруженныеРезультатыСогласования) Тогда
			Для каждого СтрокаТЗ Из РезультатыСогласования Цикл
				Если НеВыгруженныеРезультатыСогласования[СтрокаТЗ.ИдентификаторОбъекта] = Истина Тогда
					ВыгруженныеДокументы.Удалить(ИдентификаторДокумент[СтрокаТЗ.ИдентификаторДокумента]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВыгруженныеДокументы Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= КлючИЗначение.Ключ;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		КадровыйЭДО.ЗарегистрироватьПубликациюДокументаКЭДО(КлючИЗначение.Ключ, ТекущаяДатаСеанса());
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции 

Функция ДанныеДляВыгрузкиДокументовНаПодпись(МенеджерОбмена, ДокументыКЭДО)
	
	Данные = Новый Структура("ДокументыНаПодпись,ОтменитьРегистрацию,РезультатыСогласования,ИдентификаторДокумент,БылиОшибки");
	Данные.ДокументыНаПодпись 		= НоваяТаблицаДокументыНаПодпись();
	Данные.ОтменитьРегистрацию 		= Новый Массив;
	Данные.РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	Данные.ИдентификаторДокумент 	= Новый Соответствие;
	Данные.БылиОшибки 				= Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника") Тогда
		Для каждого Ссылка Из ДокументыКЭДО Цикл
			Данные.ОтменитьРегистрацию.Добавить(Ссылка);
		КонецЦикла;
		Возврат Данные;
	КонецЕсли;
	
	ДанныеДокументов = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеДокументовНаПодпись(ДокументыКЭДО);
	
	ЭлектроннаяПодписьКакОбъект = ЭлектроннаяПодписьКакОбъект();
	
	Для каждого СтрокаТЗ Из ДанныеДокументов Цикл
		
		ЭлектронныйДокумент = ЭлектронныйДокумент(СтрокаТЗ.ДанныеЭлектронногоДокумента);
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Данные.БылиОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТЗ.РасчетныйЛисток Тогда
			РезультатыСогласования = РезультатыСогласования(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДанныеЭлектронногоДокумента, ЭлектроннаяПодписьКакОбъект);
			Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Данные.ДокументыНаПодпись.Добавить();
		НоваяСтрока.ИдентификаторДокумента			= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Организация						= СтрокаТЗ.Организация;
		НоваяСтрока.ФизическиеЛица					= СтрокаТЗ.ФизическиеЛица;
		НоваяСтрока.Дата							= СтрокаТЗ.ДатаДокумента;
		НоваяСтрока.НазваниеДокумента				= СтрокаТЗ.НазваниеДокумента;
		НоваяСтрока.ЭлектронныйДокумент				= ЭлектронныйДокумент;
		НоваяСтрока.ВозможноОбновлениеПредставлений = СтрокаТЗ.ВозможноОбновлениеПредставлений;
		НоваяСтрока.ВариантПодписания				= СтрокаТЗ.ВариантПодписания;
		Если СтрокаТЗ.РасчетныйЛисток Тогда
			НоваяСтрока.ОтправлятьУведомление = Ложь;
		Иначе
			НоваяСтрока.ОтправлятьУведомление = Истина;
		КонецЕсли;
		
		Данные.ИдентификаторДокумент.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДокументКЭДО);
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаСправокСРаботы

Функция ВыгрузитьСправкиСРаботы(МенеджерОбмена, ДокументыКЭДО, ТаблицаОбработано)

	БылиОшибки = Ложь;
	Данные = ДанныеДляВыгрузкиСправокСРаботы(МенеджерОбмена, ДокументыКЭДО);
	
	Справки 						= Данные.Справки;
	ОтменитьРегистрацию 			= Данные.ОтменитьРегистрацию;
	ТаблицаРезультатыСогласования 	= Данные.РезультатыСогласования;
	ИдентификаторДокумент 			= Данные.ИдентификаторДокумент;
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	
	Для каждого Ссылка Из ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Справки) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	ВыгруженныеДокументы 	= Новый Соответствие;
	
	// выгрузка справок
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.СправкаСМестаРаботы;
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Справки, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Отбор = Новый Структура("ИдентификаторДокумента");
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ВыгруженныеДокументы.Вставить(ИдентификаторДокумент[ИдентификаторДокумента]);
		Отбор.ИдентификаторДокумента = ИдентификаторДокумента;
		НайденныеСтроки = ТаблицаРезультатыСогласования.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЦикла;
	
	// Выгрузка результатов согласования.
	Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НеВыгруженныеРезультатыСогласования = НеВыгруженныеРезультатыСогласования(РезультатыСогласования, РезультатВыгрузки.Выгружено);
		Если ЗначениеЗаполнено(НеВыгруженныеРезультатыСогласования) Тогда
			Для каждого СтрокаТЗ Из РезультатыСогласования Цикл
				Если НеВыгруженныеРезультатыСогласования[СтрокаТЗ.ИдентификаторОбъекта] = Истина Тогда
					ВыгруженныеДокументы.Удалить(ИдентификаторДокумент[СтрокаТЗ.ИдентификаторДокумента]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВыгруженныеДокументы Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= КлючИЗначение.Ключ;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		КадровыйЭДО.ЗарегистрироватьПубликациюДокументаКЭДО(КлючИЗначение.Ключ, ТекущаяДатаСеанса());
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции 

Функция ДанныеДляВыгрузкиСправокСРаботы(МенеджерОбмена, ДокументыКЭДО)
	
	Данные = Новый Структура("Справки,ОтменитьРегистрацию,РезультатыСогласования,ИдентификаторДокумент,БылиОшибки");
	Данные.Справки 					= НоваяТаблицаСправкиСРаботы();
	Данные.ОтменитьРегистрацию 		= Новый Массив;
	Данные.РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	Данные.ИдентификаторДокумент 	= Новый Соответствие;
	Данные.БылиОшибки 				= Ложь; 
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);

	ДанныеСправок = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеСправокСРаботы(ДокументыКЭДО);
	
	ЭлектроннаяПодписьКакОбъект = ЭлектроннаяПодписьКакОбъект();
	
	Для каждого СтрокаТЗ Из ДанныеСправок Цикл
		
		Если СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена
			Или СтрокаТЗ.РезультатВыполнения = Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Аннулирована Тогда
			Данные.ОтменитьРегистрацию.Добавить(СтрокаТЗ.ДокументКЭДО);
			Продолжить;
		ИначеЕсли СтрокаТЗ.РезультатВыполнения <> Перечисления.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена Тогда
			// Заявка еще не выполнена, пропускаем обработку документа.
			Продолжить;
		КонецЕсли;
		
		ЭлектронныйДокумент = Неопределено;
		ТребуетсяЭП = (СтрокаТЗ.ВариантФормированияФайлаОтвета = Перечисления.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.ФайлСЭП);
		Если ТребуетсяЭП И СтрокаТЗ.ДанныеЭлектронногоДокумента <> Неопределено Тогда
			
			ЭлектронныйДокумент = ЭлектронныйДокумент(СтрокаТЗ.ДанныеЭлектронногоДокумента);
			Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Данные.БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
			РезультатыСогласования = РезультатыСогласования(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДанныеЭлектронногоДокумента, ЭлектроннаяПодписьКакОбъект);
			Если Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
				// нет ЭП с соответствующей ролью подписанта
				Данные.БылиОшибки = Истина;
				ШаблонОписания = НСтр(
				"ru = 'Ошибка выгрузки электронного документа, отсутствует электронная подпись файла.
				|%1';
				|en = 'An error occurred when exporting the electronic document. The digital signature of the file is missing.
				|%1'");
				Комментарий = СтрШаблон(ШаблонОписания, Строка(СтрокаТЗ.ДокументКЭДО));
				ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
			
		Иначе
			ЭлектронныйДокумент = ЭлектронныйДокументПоПрисоединенномуФайлу(СтрокаТЗ.ЭлектронныйДокумент);
			Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Данные.БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Данные.Справки.Добавить();
		НоваяСтрока.Идентификатор 		= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
		НоваяСтрока.Организация 		= СтрокаТЗ.Организация;
		НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.Комментарий 		= СтрокаТЗ.Комментарий;
		НоваяСтрока.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Данные.ИдентификаторДокумент.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.ДокументКЭДО);
		
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

#КонецОбласти

#Область ВыгрузкаСогласийКЭДО

Функция ВыгрузитьСогласияКЭДО(МенеджерОбмена, ДокументыКЭДО, ТаблицаОбработано)

	БылиОшибки = Ложь;
	Данные = ДанныеДляВыгрузкиСогласийКЭДО(МенеджерОбмена, ДокументыКЭДО);
	
	Согласия 						= Данные.Согласия;
	ДокументыНаПодпись 				= Данные.ДокументыНаПодпись;
	ОтменитьРегистрацию 			= Данные.ОтменитьРегистрацию;
	ТаблицаРезультатыСогласования 	= Данные.РезультатыСогласования;
	ИдентификаторДокумент 			= Данные.ИдентификаторДокумент;
	ДокументСогласие 				= Данные.ДокументСогласие;
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	
	Для каждого Ссылка Из ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Согласия) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	РезультатыСогласования 	= НоваяТаблицаРезультатыСогласования();
	СогласияКВыгрузке 		= НоваяТаблицаСогласияКЭДО();
	ВыгруженныеДокументы 	= Новый Соответствие;
	
	// выгрузка документов
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДокументыНаПодпись, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	
	Отбор = Новый Структура("ИдентификаторДокумента");
	Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		ВыгруженныеДокументы.Вставить(ИдентификаторДокумент[ИдентификаторДокумента]);
		Отбор.ИдентификаторДокумента = ИдентификаторДокумента;
		НайденныеСтроки = ТаблицаРезультатыСогласования.НайтиСтроки(Отбор);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(РезультатыСогласования.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЦикла;
	
	// Выгрузка результатов согласования.
	Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РезультатыСогласования, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		НеВыгруженныеРезультатыСогласования = НеВыгруженныеРезультатыСогласования(РезультатыСогласования, РезультатВыгрузки.Выгружено);
		Если ЗначениеЗаполнено(НеВыгруженныеРезультатыСогласования) Тогда
			Для каждого СтрокаТЗ Из РезультатыСогласования Цикл
				Если НеВыгруженныеРезультатыСогласования[СтрокаТЗ.ИдентификаторОбъекта] = Истина Тогда
					ВыгруженныеДокументы.Удалить(ИдентификаторДокумент[СтрокаТЗ.ИдентификаторДокумент]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВыгруженныеДокументы Цикл
		ЗаполнитьЗначенияСвойств(СогласияКВыгрузке.Добавить(), ДокументСогласие[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	// Выгрузка согласий.
	Если ЗначениеЗаполнено(СогласияКВыгрузке) Тогда
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.СогласиеНаПрисоединениеККЭДО;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(СогласияКВыгрузке, ТипОбъекта);
		БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		ВсеИдентификаторы = СогласияКВыгрузке.ВыгрузитьКолонку("Согласие");
		НеВыгруженныеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеИдентификаторы, РезультатВыгрузки.Выгружено);
		НеВыгруженныеСогласия = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(НеВыгруженныеОбъекты);
		Для каждого СтрокаТЗ Из СогласияКВыгрузке Цикл
			Если НеВыгруженныеСогласия[СтрокаТЗ.Согласие] = Истина Тогда
				ВыгруженныеДокументы.Удалить(ИдентификаторДокумент[СтрокаТЗ.ИдентификаторДокументаНаПодпись]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из ВыгруженныеДокументы Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= КлючИЗначение.Ключ;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		КадровыйЭДО.ЗарегистрироватьПубликациюДокументаКЭДО(КлючИЗначение.Ключ, ТекущаяДатаСеанса());
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции 

Функция ДанныеДляВыгрузкиСогласийКЭДО(МенеджерОбмена, ДокументыКЭДО)
	
	Данные = Новый Структура("Согласия,ДокументыНаПодпись,ОтменитьРегистрацию,РезультатыСогласования,ИдентификаторДокумент,ДокументСогласие,БылиОшибки");
	Данные.Согласия 						= НоваяТаблицаСогласияКЭДО();
	Данные.ДокументыНаПодпись 				= НоваяТаблицаДокументыНаПодпись();
	Данные.ОтменитьРегистрацию 				= Новый Массив;
	Данные.РезультатыСогласования 			= НоваяТаблицаРезультатыСогласования();
	Данные.ИдентификаторДокумент 			= Новый Соответствие;
	Данные.ДокументСогласие 				= Новый Соответствие;
	Данные.БылиОшибки 						= Ложь;
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);

	ДанныеСогласий 		= ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеСогласийКЭДО(ДокументыКЭДО);
	ДанныеДокументов 	= ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеДокументовНаПодпись(ДокументыКЭДО);
	
	ЭлектроннаяПодписьКакОбъект = ЭлектроннаяПодписьКакОбъект();
	
	Для каждого СтрокаТЗ Из ДанныеСогласий Цикл
		
		ДанныеДокументаНаПодпись = ДанныеДокументов.Найти(СтрокаТЗ.ДокументКЭДО, "ДокументКЭДО");
		
		ЭлектронныйДокумент = ЭлектронныйДокумент(ДанныеДокументаНаПодпись.ДанныеЭлектронногоДокумента);
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Данные.БылиОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		РезультатыСогласования = РезультатыСогласования(ДанныеДокументаНаПодпись.ИдентификаторДокумента, ДанныеДокументаНаПодпись.ДанныеЭлектронногоДокумента, ЭлектроннаяПодписьКакОбъект);
		Если ЗначениеЗаполнено(РезультатыСогласования) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
		КонецЕсли;
		
		НоваяСтрока = Данные.ДокументыНаПодпись.Добавить();
		НоваяСтрока.ИдентификаторДокумента 	= ДанныеДокументаНаПодпись.ИдентификаторДокумента;
		НоваяСтрока.Организация 			= ДанныеДокументаНаПодпись.Организация;
		НоваяСтрока.ФизическиеЛица 			= ДанныеДокументаНаПодпись.ФизическиеЛица;
		НоваяСтрока.Дата 					= ДанныеДокументаНаПодпись.ДатаДокумента;
		НоваяСтрока.НазваниеДокумента 		= ДанныеДокументаНаПодпись.НазваниеДокумента;
		НоваяСтрока.ЭлектронныйДокумент 	= ЭлектронныйДокумент;
		НоваяСтрока.ОтправлятьУведомление 	= Ложь;
		НоваяСтрока.ВозможноОбновлениеПредставлений = Истина;
			
		НоваяСтрокаСогласия = Данные.Согласия.Добавить();
		НоваяСтрокаСогласия.Согласие 						= СтрокаТЗ.Согласие;
		НоваяСтрокаСогласия.Организация 					= СтрокаТЗ.Организация;
		НоваяСтрокаСогласия.ФизическоеЛицо 					= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрокаСогласия.ИдентификаторДокументаНаПодпись = СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрокаСогласия.ДатаСоздания 					= СтрокаТЗ.ДатаСоздания;
		НоваяСтрокаСогласия.ОтправлятьУведомление 			= Истина;
		
		Данные.ИдентификаторДокумент.Вставить(ДанныеДокументаНаПодпись.ИдентификаторДокумента, СтрокаТЗ.ДокументКЭДО);
		Данные.ДокументСогласие.Вставить(СтрокаТЗ.ДокументКЭДО, НоваяСтрокаСогласия);
		
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

#КонецОбласти

#Область ВыгрузкаГрафикОтпусков

Функция ВыгрузитьГрафикиОтпусков(МенеджерОбмена)

	БылиОшибки = Ложь;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
	
	ТаблицаИзменений = ЗарегистрированныеИзмененияГрафиковОтпусков();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Изменения = ТаблицаИзменений.СкопироватьКолонки();
	СотрудникиФизическихЛиц = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Если Не СтрокаТЗ.ЕстьВПравилах Тогда
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		ИначеЕсли СтрокаТЗ.ФизическоеЛицоВыгружено Тогда
			ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
		КонецЕсли;
		ДополнитьСотрудникиФизическихЛиц(СотрудникиФизическихЛиц, СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.Ссылка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Изменения) Тогда
		
		Изменения = СрезТаблицы(Изменения, 500);
		Данные = ДанныеГрафиковОтпусков(Изменения);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Данные.ОтменитьРегистрацию, ОтменитьРегистрацию); 
		
		Если ЗначениеЗаполнено(Данные.ДанныеГрафиков) Тогда
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ДанныеГрафиков, ТипОбъекта);
			БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
				Сотрудники = СотрудникиФизическихЛиц[ФизическоеЛицо];
				Для каждого Ссылка Из Сотрудники Цикл
					НоваяСтрока = ТаблицаОбработано.Добавить();
					НоваяСтрока.Ссылка 		= Ссылка;
					НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(МенеджерОбмена.Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеГрафиковОтпусков(ТаблицаИзменений)
	
	Данные = Новый Структура("ДанныеГрафиков,ОтменитьРегистрацию");
	
	ДанныеГрафиков 		= НоваяТаблицаГрафиковОтпусков();
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	Сотрудники = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ДанныеГрафиковОтпусков = ИнтеграцияУправлениеПерсоналом.ДанныеГрафиковОтпусков(Сотрудники);
	Если Не ЗначениеЗаполнено(ДанныеГрафиковОтпусков) Тогда
		Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		КонецЦикла;
	Иначе
		
		Для каждого КлючИЗначение Из ДанныеГрафиковОтпусков Цикл
			
			ФизическоеЛицо = КлючИЗначение.Ключ;
			ПериодыГрафика = КлючИЗначение.Значение;
			
			ПериодыГрафикаОтпусков = НоваяТаблицаПериодыГрафикаОтпусков();
			Для каждого ПериодГрафика Из ПериодыГрафика Цикл
				НовыйПериод = ПериодыГрафикаОтпусков.Добавить();
				НовыйПериод.ДатаНачала 		= ПериодГрафика.ДатаНачала;
				НовыйПериод.ДатаОкончания 	= ПериодГрафика.ДатаОкончания;
			КонецЦикла;
			
			НоваяСтрока = ДанныеГрафиков.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			НоваяСтрока.ПериодыГрафика = ПериодыГрафикаОтпусков;	
			
		КонецЦикла;
		
	КонецЕсли;

	Данные.ДанныеГрафиков 		= ДанныеГрафиков;
	Данные.ОтменитьРегистрацию 	= ОтменитьРегистрацию;
	
	Возврат Данные;

КонецФункции


#КонецОбласти

#Область ВыгрузкаЗаработанныеПраваНаОтпуск

Функция ВыгрузитьЗаработанныеПраваНаОтпуск(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
	
	ТаблицаИзменений = ЗарегистрированныеИзмененияПраваНаОтпуск();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта");
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Изменения = ТаблицаИзменений.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Если Не СтрокаТЗ.ЕстьВПравилах Тогда
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		ИначеЕсли СтрокаТЗ.ФизическоеЛицоВыгружено Тогда
			ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Изменения) Тогда
		
		ДетализацияПоСотрудникам = ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0");
		
		Изменения = СрезТаблицы(Изменения, 250);
		Данные = ДанныеЗаработанныхПравНаОтпуск(Изменения, ДетализацияПоСотрудникам);
		
		Если ЗначениеЗаполнено(Данные) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Данные.ОтменитьРегистрацию, ОтменитьРегистрацию);
			
			ВыгруженыФизическиеЛица 	= Новый Массив;
			НеВыгруженыФизическиеЛица 	= Новый Массив;
			
			Если ЗначениеЗаполнено(Данные.ИнформацияОбОтпусках) Тогда
				
				ТипОбъектаИнформацияОбОтпусках = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ИнформацияОбИспользованииОтпуска;
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ИнформацияОбОтпусках, ТипОбъектаИнформацияОбОтпусках);
				БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
				
				ВсеФизическиеЛица = Данные.ИнформацияОбОтпусках.ВыгрузитьКолонку("ФизическоеЛицо");
				НеВыгруженыФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеФизическиеЛица, РезультатВыгрузки.Выгружено);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгруженыФизическиеЛица, РезультатВыгрузки.Выгружено);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Данные.ПрогнозируемыеНеиспользованныеДниОтпуска) Тогда
				
				ТипОбъектаБудущееИзменение = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.БудущееИзменениеОстаткаОтпусков;
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ПрогнозируемыеНеиспользованныеДниОтпуска, ТипОбъектаБудущееИзменение);
				БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
				
				ВсеФизическиеЛица = Данные.ПрогнозируемыеНеиспользованныеДниОтпуска.ВыгрузитьКолонку("ФизическоеЛицо");
				НеВыгруженоДляДополнения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеФизическиеЛица, РезультатВыгрузки.Выгружено);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеВыгруженыФизическиеЛица, НеВыгруженоДляДополнения, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгруженыФизическиеЛица, РезультатВыгрузки.Выгружено, Истина);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Данные.ОстаткиОтпусков) Тогда
				
				ТипОбъектаОстаткиОтпусков = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОстаткиОтпусков;
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ОстаткиОтпусков, ТипОбъектаОстаткиОтпусков);
				БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
				
				ВсеФизическиеЛица = Данные.ОстаткиОтпусков.ВыгрузитьКолонку("ФизическоеЛицо");
				НеВыгруженоДляДополнения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеФизическиеЛица, РезультатВыгрузки.Выгружено);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеВыгруженыФизическиеЛица, НеВыгруженоДляДополнения, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгруженыФизическиеЛица, РезультатВыгрузки.Выгружено, Истина);
				
			КонецЕсли;
			
			ВыгруженыФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыгруженыФизическиеЛица, НеВыгруженыФизическиеЛица);
			Для каждого ФизическоеЛицо Из ВыгруженыФизическиеЛица Цикл
				НоваяСтрока = ТаблицаОбработано.Добавить();
				НоваяСтрока.Ссылка 		= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
			КонецЦикла;
			
			ИнтеграцияКабинетСотрудника.ОбновитьАктуальностьИнформацииОбОтпусках(ВыгруженыФизическиеЛица, Данные.АктуальностьИнформацииОбОтпусках);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ОтменитьРегистрациюИзмененийПраваНаОтпуск(ТаблицаОбработано, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеЗаработанныхПравНаОтпуск(ТаблицаИзменений, ДетализацияПоСотрудникам)
	
	Данные = Новый Структура("ИнформацияОбОтпусках,ПрогнозируемыеНеиспользованныеДниОтпуска,ОстаткиОтпусков,АктуальностьИнформацииОбОтпусках,ОтменитьРегистрацию");
	
	ИнформацияОбОтпусках 						= НоваяТаблицаИнформацияОбОтпусках(ДетализацияПоСотрудникам);
	ПрогнозируемыеНеиспользованныеДниОтпуска 	= НоваяТаблицаПрогнозируемыеНеиспользованныеДниОтпуска();
	ОтменитьРегистрацию 						= ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта");
	ОстаткиОтпусковФизическихЛиц 				= НоваяТаблицаОстаткиОтпусков();
	АктуальностьИнформацииОбОтпусках 			= ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("АктуальностьИнформацииОбОтпусках");
	
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ДанныеОбОтпусках = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеОбОтпусках(ФизическиеЛица, ДетализацияПоСотрудникам);
	Если Не ЗначениеЗаполнено(ДанныеОбОтпусках) Тогда
		Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		КонецЦикла;
	Иначе
		
		Если ЗначениеЗаполнено(ДанныеОбОтпусках.ИнформацияОбОтпусках) Тогда 
			
			Если ДетализацияПоСотрудникам Тогда
				
				ДанныеОбОтпусках.ИнформацияОбОтпусках.Индексы.Добавить("ФизическоеЛицо");
				Отбор = Новый Структура("ФизическоеЛицо");
				
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОбОтпусках.ИнформацияОбОтпусках, "ФизическоеЛицо", Истина);
				Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
				
					Отбор.ФизическоеЛицо = ФизическоеЛицо;
					НайденныеСтроки = ДанныеОбОтпусках.ИнформацияОбОтпусках.НайтиСтроки(Отбор);
					ДанныеПоСотрудникам = НоваяТаблицаИнформацияОбОтпускахПоСотрудникам();
					Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
						НоваяСтрока = ДанныеПоСотрудникам.Добавить();
						НоваяСтрока.Сотрудник 						= СтрокаТЗ.Сотрудник;
						НоваяСтрока.ОстатокОтпуска 						= СтрокаТЗ.ОстатокОтпуска;
						НоваяСтрока.ДнейКомпенсации 					= СтрокаТЗ.ДнейКомпенсации;
						НоваяСтрока.ДопустимаяПродолжительностьОтпуска 	= СтрокаТЗ.ДопустимаяПродолжительностьОтпуска;
						Если ЗначениеЗаполнено(СтрокаТЗ.ИнформацияОПредыдущемОтпуске) Тогда
							ИнформацияОбОтпуске = НовоеОписаниеИнформацияОбОтпуске();
							ИнформацияОбОтпуске.ДатаНачала 		= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.ДатаНачала;
							ИнформацияОбОтпуске.ДатаОкончания 	= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.ДатаОкончания;
							ИнформацияОбОтпуске.КоличествоДней 	= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.КоличествоДней;
							НоваяСтрока.ИнформацияОПредыдущемОтпуске = ИнформацияОбОтпуске;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТЗ.ИнформацияОСледующемОтпуске) Тогда
							ИнформацияОбОтпуске = НовоеОписаниеИнформацияОбОтпуске();
							ИнформацияОбОтпуске.ДатаНачала 		= СтрокаТЗ.ИнформацияОСледующемОтпуске.ДатаНачала;
							ИнформацияОбОтпуске.ДатаОкончания 	= СтрокаТЗ.ИнформацияОСледующемОтпуске.ДатаОкончания;
							ИнформацияОбОтпуске.КоличествоДней 	= СтрокаТЗ.ИнформацияОСледующемОтпуске.КоличествоДней;
							НоваяСтрока.ИнформацияОСледующемОтпуске = ИнформацияОбОтпуске;
						КонецЕсли;
					КонецЦикла;
					
					НоваяСтрока = ИнформацияОбОтпусках.Добавить();
					НоваяСтрока.ФизическоеЛицо 		= ФизическоеЛицо;
					НоваяСтрока.ДанныеПоСотрудникам = ДанныеПоСотрудникам;
				
				КонецЦикла;
				
			Иначе
				
				Для каждого СтрокаТЗ Из ДанныеОбОтпусках.ИнформацияОбОтпусках Цикл
					НоваяСтрока = ИнформацияОбОтпусках.Добавить();
					НоваяСтрока.ФизическоеЛицо 						= СтрокаТЗ.ФизическоеЛицо;
					НоваяСтрока.ОстатокОтпуска 						= СтрокаТЗ.ОстатокОтпуска;
					НоваяСтрока.ДнейКомпенсации 					= СтрокаТЗ.ДнейКомпенсации;
					НоваяСтрока.ДопустимаяПродолжительностьОтпуска 	= СтрокаТЗ.ДопустимаяПродолжительностьОтпуска;
					Если ЗначениеЗаполнено(СтрокаТЗ.ИнформацияОПредыдущемОтпуске) Тогда
						ИнформацияОбОтпуске = НовоеОписаниеИнформацияОбОтпуске();
						ИнформацияОбОтпуске.ДатаНачала 		= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.ДатаНачала;
						ИнформацияОбОтпуске.ДатаОкончания 	= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.ДатаОкончания;
						ИнформацияОбОтпуске.КоличествоДней 	= СтрокаТЗ.ИнформацияОПредыдущемОтпуске.КоличествоДней;
						НоваяСтрока.ИнформацияОПредыдущемОтпуске = ИнформацияОбОтпуске;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрокаТЗ.ИнформацияОСледующемОтпуске) Тогда
						ИнформацияОбОтпуске = НовоеОписаниеИнформацияОбОтпуске();
						ИнформацияОбОтпуске.ДатаНачала 		= СтрокаТЗ.ИнформацияОСледующемОтпуске.ДатаНачала;
						ИнформацияОбОтпуске.ДатаОкончания 	= СтрокаТЗ.ИнформацияОСледующемОтпуске.ДатаОкончания;
						ИнформацияОбОтпуске.КоличествоДней 	= СтрокаТЗ.ИнформацияОСледующемОтпуске.КоличествоДней;
						НоваяСтрока.ИнформацияОСледующемОтпуске = ИнформацияОбОтпуске;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбОтпусках.ПрогнозируемыеНеиспользованныеДниОтпуска) Тогда
			Для каждого СтрокаТЗ Из ДанныеОбОтпусках.ПрогнозируемыеНеиспользованныеДниОтпуска Цикл
				НоваяСтрока = ПрогнозируемыеНеиспользованныеДниОтпуска.Добавить();
				НоваяСтрока.ФизическоеЛицо = СтрокаТЗ.ФизическоеЛицо;
				БудущееИзменение = НоваяТаблицаБудущееИзменениеОстаткаОтпусков();
				Для каждого СтрокаОстатки Из СтрокаТЗ.Остатки Цикл
					СтрокаБудущееИзменение = БудущееИзменение.Добавить();
					СтрокаБудущееИзменение.Период 			= СтрокаОстатки.Период;
					СтрокаБудущееИзменение.КоличествоДней 	= СтрокаОстатки.КоличествоДней;
					Если ДетализацияПоСотрудникам Тогда
						СтрокаБудущееИзменение.Сотрудник 	= СтрокаОстатки.Сотрудник;
						СтрокаБудущееИзменение.ВидОтпуска 	= СтрокаОстатки.ВидОтпуска;
					КонецЕсли;
				КонецЦикла;
				НоваяСтрока.БудущееИзменение = БудущееИзменение;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбОтпусках.ТекущиеОстаткиОтпусков) Тогда
			
			ДанныеОбОтпусках.ТекущиеОстаткиОтпусков.Индексы.Добавить("ФизическоеЛицо");
			Отбор = Новый Структура("ФизическоеЛицо");
			
			ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеОбОтпусках.ТекущиеОстаткиОтпусков, "ФизическоеЛицо", Истина);
			Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
				
					Отбор.ФизическоеЛицо = ФизическоеЛицо;
					НайденныеСтроки = ДанныеОбОтпусках.ТекущиеОстаткиОтпусков.НайтиСтроки(Отбор);
					ОстаткиПоСотрудникам = НоваяТаблицаОстаткиОтпусковПоСотрудникам();
					Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
						НоваяСтрока = ОстаткиПоСотрудникам.Добавить();
						НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
						НоваяСтрока.ВидОтпуска 		= СтрокаТЗ.ВидОтпуска;
						НоваяСтрока.ОстатокОтпуска 	= СтрокаТЗ.КоличествоДней;
					КонецЦикла;
					
					НоваяСтрока = ОстаткиОтпусковФизическихЛиц.Добавить();
					НоваяСтрока.ФизическоеЛицо 				= ФизическоеЛицо;
					НоваяСтрока.ОстаткиОтпусковСотрудников 	= ОстаткиПоСотрудникам;
					
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбОтпусках.АктуальностьИнформацииОбОтпусках) Тогда
			АктуальностьИнформацииОбОтпусках = ДанныеОбОтпусках.АктуальностьИнформацииОбОтпусках;
		КонецЕсли;
		
	КонецЕсли;
	
	Данные.ИнформацияОбОтпусках 					= ИнформацияОбОтпусках;
	Данные.ПрогнозируемыеНеиспользованныеДниОтпуска = ПрогнозируемыеНеиспользованныеДниОтпуска;
	Данные.АктуальностьИнформацииОбОтпусках 		= АктуальностьИнформацииОбОтпусках;
	Данные.ОтменитьРегистрацию 						= ОтменитьРегистрацию;
	Данные.ОстаткиОтпусков 							= ОстаткиОтпусковФизическихЛиц;
	
	Возврат Данные;

КонецФункции

Процедура ОтменитьРегистрациюИзмененийПраваНаОтпуск(ТаблицаОбработано, ОтменитьРегистрацию)

	Для каждого СтрокаТЗ Из ТаблицаОбработано Цикл
		ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОтменитьРегистрацию) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ОтменитьРегистрацию;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтменитьРегистрацию", ОтменитьРегистрацию);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтменитьРегистрацию.Ссылка КАК Ссылка,
		|	ОтменитьРегистрацию.ТипОбъекта КАК ТипОбъекта
		|ПОМЕСТИТЬ ВТОтменитьРегистрацию
		|ИЗ
		|	&ОтменитьРегистрацию КАК ОтменитьРегистрацию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.Ссылка КАК Ссылка,
		|	ОтменитьИзменения.ТипОбъекта КАК ТипОбъекта
		|ИЗ
		|	ВТОтменитьРегистрацию КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК ИзмененияДляОбмена
		|		ПО ОтменитьИзменения.Ссылка = ИзмененияДляОбмена.Ссылка
		|			И ОтменитьИзменения.ТипОбъекта = ИзмененияДляОбмена.ТипОбъекта";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка 		= Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта 	= Выборка.ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации изменений.
			|%1';
			|en = 'An error occurred when canceling registration changes.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР().Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаГрафикаОтпусковПредприятия

Функция ВыгрузитьГрафикОтпусковПредприятия(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПредприятия;
	ТипыОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОбъекта);
	
	ТаблицаИзменений = ЗарегистрированныеИзменения(ТипыОбъектов);
	
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Ссылки = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ДанныеГрафиковОтпусковПредприятия(Ссылки);
	
	Если Не ЗначениеЗаполнено(Данные.ТаблицаДанных) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ТаблицаДанных, ТипОбъекта);
	БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
	Для каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Данные.ИдентификаторДокумент[ИдентификаторДокумента];
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Попытка
		ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(МенеджерОбмена.Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеГрафиковОтпусковПредприятия(Ссылки)
	
	Данные = Новый Структура("ТаблицаДанных,ИдентификаторДокумент");
	
	ДанныеДокументов = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеГрафиковОтпусковПредприятия(Ссылки);
	Если Не ЗначениеЗаполнено(ДанныеДокументов) Тогда
		Возврат Данные;
	КонецЕсли;
	
	ИдентификаторДокумент = Новый Соответствие;
	ТаблицаДанных = НоваяТаблицаГрафикОтпусковПредприятия();
	
	Для каждого СтрокаТЗ Из ДанныеДокументов Цикл
	
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторДокумента;
		НоваяСтрока.Год 					= СтрокаТЗ.Год;
		НоваяСтрока.Состояние 				= СтрокаТЗ.Состояние;
		НоваяСтрока.ИнициаторСбора 			= СтрокаТЗ.ИнициаторСбора;
		
		ИдентификаторДокумент.Вставить(СтрокаТЗ.ИдентификаторДокумента, СтрокаТЗ.Ссылка);
	
	КонецЦикла;
	
	Данные.ИдентификаторДокумент 	= ИдентификаторДокумент;
	Данные.ТаблицаДанных 			= ТаблицаДанных;
	
	Возврат Данные;

КонецФункции

#КонецОбласти

#Область ВыгрузкаДанныхГрафиковРаботы

Функция ВыгрузитьДанныеГрафиковРаботы(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	ТаблицаИзменений = ИнтеграцияКабинетСотрудникаВнутренний.ИзмененияДанныхГрафиковРаботы();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	// Инициализации таблицы для отмены регистрации изменений, если объекта не соответствует правилам.
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("ГрафикРаботы,Год,ВерсияДанных");
	
	ОшибкаВыгрузки = ТаблицаИзменений.СкопироватьКолонки("ГрафикРаботы,Год");
	
	Изменения = ТаблицаИзменений.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Если СтрокаТЗ.ЕстьВПравилах И СтрокаТЗ.ГрафикВыгружался Тогда
			ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Изменения) Тогда
		
		Изменения = СрезТаблицы(Изменения, 10);
		Данные = ДанныеГрафиковРаботы(Изменения);
		Если ЗначениеЗаполнено(Данные) Тогда
			
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДанныеГрафикаРаботы;
			Для каждого СтрокаТЗ Из Данные Цикл
				// цикл по ГрафикРаботы,Год
				Если ЗначениеЗаполнено(СтрокаТЗ.ТаблицаДанных) Тогда
					РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(СтрокаТЗ.ТаблицаДанных, ТипОбъекта);
					БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
					Если РезультатВыгрузки.БылиОшибки Тогда
						ЗаполнитьЗначенияСвойств(ОшибкаВыгрузки.Добавить(), СтрокаТЗ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Отбор = Новый Структура("ГрафикРаботы,Год");
			Для каждого СтрокаТЗ Из Изменения Цикл
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
				Если ЗначениеЗаполнено(ОшибкаВыгрузки.НайтиСтроки(Отбор)) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтменитьРегистрацию) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	Попытка
		ИнтеграцияКабинетСотрудникаВнутренний.ОтменитьРегистрациюИзмененийДанныхГрафиковРаботы(ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеГрафиковРаботы(ТаблицаИзменений)
	
	ДанныеГрафиков = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеГрафиковРаботы(ТаблицаИзменений);
	Если Не ЗначениеЗаполнено(ДанныеГрафиков) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = ДанныеГрафиков.Скопировать();
	Данные.Свернуть("ГрафикРаботы,Год");
	Данные.Колонки.Добавить("ТаблицаДанных");
	
	Отбор = Новый Структура("ГрафикРаботы,Год");
	ДанныеГрафиков.Индексы.Добавить("ГрафикРаботы,Год");
	
	Для каждого СтрокаТЗ Из Данные Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		НайденныеСтроки = ДанныеГрафиков.НайтиСтроки(Отбор);
		ТаблицаДанных = НоваяТаблицаДанныеГрафиковРаботы();
		Для каждого СтрокаДанных Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ГрафикРаботы 	= СтрокаДанных.ГрафикРаботы;
			НоваяСтрока.Дата 			= СтрокаДанных.Дата;
			НоваяСтрока.ТипДня 			= ?(СтрокаДанных.Выходной, "выходной", "рабочий");
		КонецЦикла;
		СтрокаТЗ.ТаблицаДанных = ТаблицаДанных;
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

#КонецОбласти

#Область ВыгрузкаПлановыхУдержаний

Функция ВыгрузитьПлановыеУдержания(МенеджерОбмена)

	БылиОшибки = Ложь;
	НастройкиИспользуемаяФункциональность = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Если Не НастройкиИспользуемаяФункциональность.ЗаявленияНаДСВ Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ТаблицаИзменений = ИнтеграцияКабинетСотрудникаВнутренний.ИзмененияПлановыхУдержаний();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	// Инициализации таблицы для отмены регистрации изменений, если объекта не соответствует правилам.
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Организация,ФизическоеЛицо,КатегорияУдержания,ВерсияДанных");
	
	Изменения = ТаблицаИзменений.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Если СтрокаТЗ.ЕстьВПравилах Тогда
			ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
		Иначе
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Изменения) Тогда
		
		ТаблицаДанных = ДанныеПлановыхУдержаний(Изменения);
		
		Если ЗначениеЗаполнено(ТаблицаДанных) Тогда
			
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПлановоеУдержание;
			Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "Организация", Истина);
			Отбор = Новый Структура("Организация");
			ОтборИзменений = Новый Структура("Организация,ФизическоеЛицо");
			Для каждого Организация Из Организации Цикл
				Отбор.Организация = Организация;
				ОтборИзменений.Организация = Организация;
				ДанныеПоФизическимЛицам = ТаблицаДанных.Скопировать(Отбор);
				РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеПоФизическимЛицам, ТипОбъекта);
				БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
				Для каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
					ОтборИзменений.ФизическоеЛицо = ФизическоеЛицо;
					НайденныеСтроки = Изменения.НайтиСтроки(ОтборИзменений);
					Для каждого СтрокаИзменений Из НайденныеСтроки Цикл
						ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаИзменений);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ИнтеграцияКабинетСотрудникаВнутренний.ОтменитьРегистрациюИзмененийПлановыхУдержаний(ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ДанныеПлановыхУдержаний(ТаблицаИзменений)

	ТаблицаДанных = НоваяТаблицаДанныеПлановыхУдержаний();
	
	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПлановыхУдержаний(ТаблицаИзменений);
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из Данные Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Организация 	= СтрокаТЗ.Организация;
		НоваяСтрока.ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ПлановыеУдержания) Тогда
			ПлановыеУдержания = НоваяТаблицаПлановыеУдержанияФизическогоЛица();
			Для каждого СтрокаУдержаний Из СтрокаТЗ.ПлановыеУдержания Цикл
				НоваяСтрокаУдержаний = ПлановыеУдержания.Добавить();
				НоваяСтрокаУдержаний.ПредставлениеУдержания = СтрокаУдержаний.ПредставлениеУдержания;
				НоваяСтрокаУдержаний.ДатаОкончания 			= СтрокаУдержаний.ДатаОкончания;
			КонецЦикла;
			НоваяСтрока.ПлановыеУдержания = ПлановыеУдержания;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

#КонецОбласти

#Область ВыгрузкаШаблоновДокументов

Функция ВыгрузитьШаблоныДокументов(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	Если Не ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("2.2") Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ШаблонДокумента;
	ТаблицаИзменений = ЗарегистрированныеИзменения(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОбъекта));
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	Изменения 			= ТаблицаИзменений.СкопироватьКолонки();
	ТаблицаОбработано 	= ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаОбработано();
	
	Для каждого СтрокаТЗ Из ТаблицаИзменений Цикл
		Если СтрокаТЗ.ЕстьВПравилах Тогда
			ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
		Иначе
			ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
	
	Данные = ДанныеШаблоновДокументов(Изменения);
	
	БылиОшибки = БылиОшибки Или Данные.БылиОшибки;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Данные.ОтменитьРегистрацию, ОтменитьРегистрацию);
	
	// Выгрузка объектов.
	Если ЗначениеЗаполнено(Данные.ТаблицаДанных) Тогда
		
		ТаблицаДанных = Данные.ТаблицаДанных;
		
		Отбор = Новый Структура("ИмяПредопределенныхДанных");
		ТипыШаблонов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных,"ИмяПредопределенныхДанных", Истина);
		Для каждого ТипШаблона Из ТипыШаблонов Цикл
			Отбор.ИмяПредопределенныхДанных = ТипШаблона;
			ТаблицаДанныхШаблона = ТаблицаДанных.Скопировать(Отбор);
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиШаблоновДокументов(ТаблицаДанныхШаблона, ТипШаблона);
			БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			ИнтеграцияУправлениеПерсоналомОбмен.ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
		ИнтеграцияУправлениеПерсоналомОбмен.ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, Изменения, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ДанныеШаблоновДокументов(ТаблицаИзменений)
	
	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаШаблоныДокументов();
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	Ссылки = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеШаблоновДокументов(Ссылки);
	
	Для каждого СтрокаТЗ Из Данные Цикл
		Если СтрокаТЗ.НеВыгружать Тогда
			НоваяСтрока = ОтменитьРегистрацию.Добавить();
			НоваяСтрока.Ссылка 			= СтрокаТЗ.Шаблон;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ШаблонДокумента;
			НоваяСтрока.ВерсияДанных 	= ТаблицаИзменений.Найти(СтрокаТЗ.Шаблон, "Ссылка").ВерсияДанных;
		Иначе
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Шаблон 								= СтрокаТЗ.Шаблон;
			НоваяСтрока.ИмяПредопределенныхДанных 			= СтрокаТЗ.ИмяПредопределенныхДанных;
			НоваяСтрока.НаименованиеДокумента 				= СтрокаТЗ.НаименованиеДокумента;
			НоваяСтрока.ТребуетсяСогласование 				= СтрокаТЗ.ТребуетсяСогласование;
			НоваяСтрока.ДанныеМакета 						= СтрокаТЗ.ДанныеМакета;
			НоваяСтрока.УсловияОбластей 					= СтрокаТЗ.УсловияОбластей;
			НоваяСтрока.РеквизитыОбъектов 					= СтрокаТЗ.РеквизитыОбъектов;
			НоваяСтрока.НеИспользуется 						= СтрокаТЗ.ВАрхиве Или СтрокаТЗ.ПометкаУдаления;
			НоваяСтрока.КодДокументаКадровогоМероприятия 	= СтрокаТЗ.КодДокументаКадровогоМероприятия;
			НоваяСтрока.ТребуетПодписания				 	= СтрокаТЗ.ТребуетПодписания;
			НоваяСтрока.ТребуетсяНаличиеВложений			= СтрокаТЗ.ТребуетсяНаличиеВложений;
		КонецЕсли;
	КонецЦикла;
	
	Результат.ТаблицаДанных 		= ТаблицаДанных;
	Результат.ОтменитьРегистрацию 	= ОтменитьРегистрацию;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеДанныхОбъектов

Функция ДанныеОбъектовДляВыгрузки(МенеджерОбмена, ТаблицаИзменений, ТипОбъекта)
	
	ДанныеОбъектов = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат ДанныеОбъектов;
	КонецЕсли;
	
	Приложение = МенеджерОбмена.Приложение;
	ПеречисленияМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	
	Если ТипОбъекта = ПеречисленияМенеджер.ДоступныеФункцииФизическогоЛица Тогда
		
		ДанныеОбъектов = ДанныеДоступныеФункцииФизическихЛиц(ТаблицаИзменений, Приложение);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ОграничениеДоступаКРабочимКонтактам Тогда
		
		ДанныеОбъектов = ДанныеОграниченияДоступаКРабочимКонтактам(ТаблицаИзменений, Приложение);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ПрименяемыеВычетыНДФЛ Тогда
		
		ДанныеОбъектов = ДанныеПрименяемыхВычетовНДФЛ(ТаблицаИзменений, Приложение);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ВидПредоставляемойСотрудникамСправки Тогда
		
		ДанныеОбъектов = ДанныеВидовПредоставляемыхСотрудникамСправок(МенеджерОбмена, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ПраздничныеДниГрафикаРаботы Тогда
		
		ДанныеОбъектов = ДанныеПраздничныеДниГрафикаРаботы(ТаблицаИзменений, Приложение);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ВидОтпуска Тогда
		
		ДанныеОбъектов = ДанныеВидыОтпусков(ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.РабочееМестоОхраныТруда Тогда
		
		ДанныеОбъектов = ДанныеРабочихМестОхраныТруда(ТаблицаИзменений);
		
	КонецЕсли;
	
	Возврат ДанныеОбъектов;
	
КонецФункции 

Функция ДанныеДляВыгрузкиРезультатовВыполненияЗаявок(МенеджерОбмена, ТаблицаИзменений)
	
	Данные = Новый Структура("СправкиОстаткиОтпусков,ОтменитьРегистрацию,РезультатыСогласования,СправкиРезультатыСогласования,ИдентификаторЗаявка,БылиОшибки");
	Данные.СправкиОстаткиОтпусков 			= НоваяТаблицаСправкиОстаткиОтпусков();
	Данные.ОтменитьРегистрацию 				= Новый Массив;
	Данные.РезультатыСогласования 			= НоваяТаблицаРезультатыСогласования();
	Данные.СправкиРезультатыСогласования 	= Новый Соответствие;
	Данные.ИдентификаторЗаявка 				= Новый Соответствие;
	Данные.БылиОшибки 						= Ложь;
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	ИспользуетсяКадровыйЭДО = ПолучитьФункциональнуюОпцию("ИспользуетсяКадровыйЭДОКабинетСотрудника");
	РезультатыВыполненияЗаявок = ИнтеграцияУправлениеПерсоналомСлужебный.РезультатыВыполненияЗаявок(ТаблицаИзменений);
	Для каждого СтрокаТЗ Из РезультатыВыполненияЗаявок Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТЗ.ИдентификаторЗаявки) Или СтрокаТЗ.Аннулирована Тогда
			// не обрабатываем
			Данные.ОтменитьРегистрацию.Добавить(СтрокаТЗ.Заявка);
			Продолжить;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.РезультатВыполнения) Тогда
			Данные.БылиОшибки = Истина;
			ШаблонОписания = НСтр(
			"ru = 'Не установлен статус выполнения заявки.
			|%1';
			|en = 'The request execution status is not set.
			|%1'");
			Комментарий = СтрШаблон(ШаблонОписания, Строка(СтрокаТЗ.Заявка));
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			Продолжить;
		КонецЕсли;
		
		ИдентификаторОбъекта = Строка(Новый УникальныйИдентификатор); // Идентификатор результата согласования.
		Данные.ИдентификаторЗаявка.Вставить(ИдентификаторОбъекта, СтрокаТЗ.Заявка);
		
		// Электронный документ есть в заявках, полученных из приложения с использованием ЭП.
		РезультатыСогласования = Неопределено;
		Если ИспользуетсяКадровыйЭДО И ЗначениеЗаполнено(СтрокаТЗ.ЭлектронныйДокумент) И СтрокаТЗ.ЗаявкаПодписывается Тогда
			РезультатыСогласования = РезультатыСогласованияЗаявкиСПодписью(СтрокаТЗ, ИдентификаторОбъекта, СтрокаТЗ.Комментарий);
			Если РезультатыСогласования = Неопределено Тогда
				Данные.БылиОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РезультатыСогласования) Тогда
			РезультатыСогласования = НоваяТаблицаРезультатыСогласования();
			ДанныеПодписанта = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПодписантаПоИсполнителюЗаявки(Приложение, СтрокаТЗ.Исполнитель);
			НоваяСтрока = РезультатыСогласования.Добавить();
			НоваяСтрока.ИдентификаторОбъекта 	= ИдентификаторОбъекта;
			НоваяСтрока.Подписант 				= ДанныеПодписанта.Подписант;
			НоваяСтрока.ИмяПодписанта 			= ДанныеПодписанта.ИмяПодписанта;
			НоваяСтрока.ИдентификаторДокумента 	= СтрокаТЗ.ИдентификаторЗаявки;
			НоваяСтрока.РезультатСогласования 	= СтрокаТЗ.РезультатВыполнения;
			НоваяСтрока.Комментарий 			= СтрокаТЗ.Комментарий;
			НоваяСтрока.РольПодписанта 			= Перечисления.РолиПодписантовКЭДО.Исполнитель;
			НоваяСтрока.ИдентификаторЭлектронногоДокумента = СтрокаТЗ.ИдентификаторДокумента;
		КонецЕсли;
		
		Если СтрокаТЗ.ЭтоСогласованнаяСправкаОбОстаткеОтпуска Тогда
			
			Если ЗначениеЗаполнено(СтрокаТЗ.ФайлЗаявки) Тогда
				ОбъектФайл = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.ФайлЗаявки);
				Если Не ЗначениеЗаполнено(ОбъектФайл) Тогда
					Данные.БылиОшибки = Истина;
					Продолжить;
				КонецЕсли;
				НоваяСтрока = Данные.СправкиОстаткиОтпусков.Добавить();
				НоваяСтрока.Заявка 				= СтрокаТЗ.Заявка;
				НоваяСтрока.ИдентификаторЗаявки = СтрокаТЗ.ИдентификаторЗаявки;
				НоваяСтрока.ФизическоеЛицо 		= СтрокаТЗ.ФизическоеЛицо;
				НоваяСтрока.Вложение 			= ОбъектФайл;
				Данные.СправкиРезультатыСогласования.Вставить(СтрокаТЗ.Заявка, РезультатыСогласования);
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатыСогласования, Данные.РезультатыСогласования);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

Функция ДанныеДоступныеФункцииФизическихЛиц(ТаблицаИзменений, Приложение)

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДоступныеФункцииФизическихЛиц(); 
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетСогласийНаПрисоединениеККЭДО") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ФизическиеЛицаДляОбработки = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, ФизическиеЛица);
	
	Если ЗначениеЗаполнено(ФизическиеЛицаДляОбработки) Тогда
		Данные = ИнтеграцияУправлениеПерсоналом.ДоступныеФункцииФизическихЛиц(ФизическиеЛицаДляОбработки, Приложение);
		Для каждого СтрокаТЗ Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеОграниченияДоступаКРабочимКонтактам(ТаблицаИзменений, Приложение)

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицОграниченияДоступаКРабочимКонтактам();
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ФизическиеЛицаДляОбработки = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, ФизическиеЛица);
	
	ФизическиеЛицаДляОбработки = ОбщегоНазначенияБЗККлиентСервер.СрезМассива(ФизическиеЛицаДляОбработки,0,499);
	
	Данные = ИнтеграцияУправлениеПерсоналом.ОграниченияДоступаКРабочимКонтактам(ФизическиеЛицаДляОбработки, Приложение);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Для каждого СтрокаТЗ Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеПрименяемыхВычетовНДФЛ(ТаблицаИзменений, Приложение)

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных 		= НоваяТаблицаПрименяемыхВычетовНДФЛ();
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ФизическиеЛицаДляОбработки = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, ФизическиеЛица);
	
	Если ЗначениеЗаполнено(ФизическиеЛицаДляОбработки) Тогда
		
		Данные = ИнтеграцияУправлениеПерсоналом.ДанныеПрименяемыхВычетовНДФЛ(ФизическиеЛицаДляОбработки, Приложение);
		Для каждого СтрокаТЗ Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		КонецЦикла;
		
		ФизическиеЛицаСВычетами  = ОбщегоНазначения.ВыгрузитьКолонку(Данные, "ФизическоеЛицо", Истина);
		ФизическиеЛицаБезВычетов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛицаДляОбработки, ФизическиеЛицаСВычетами);
		Для каждого ФизическоеЛицо Из ФизическиеЛицаБезВычетов Цикл
			НоваяСтрока = ОтменитьРегистрацию.Добавить();
			НоваяСтрока.Ссылка 			= ФизическоеЛицо;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПрименяемыеВычетыНДФЛ;
			НоваяСтрока.ВерсияДанных 	= ТаблицаИзменений.Найти(ФизическоеЛицо, "Ссылка").ВерсияДанных;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.ТаблицаДанных 		= ТаблицаДанных;
	Результат.ОтменитьРегистрацию 	= ОтменитьРегистрацию;
	
	Возврат Результат;

КонецФункции

Функция ДанныеВидовПредоставляемыхСотрудникамСправок(МенеджерОбмена, ТаблицаИзменений)

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаВидовПредоставляемыхСотрудникамСправок();
	
	ВидыСправок = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеВидовПредоставляемыхСотрудникамСправок(ВидыСправок);
	Если ЗначениеЗаполнено(Данные) Тогда 
		
		Для каждого СтрокаТЗ Из Данные Цикл
			
			Если ПустаяСтрока(СтрокаТЗ.Представление) Тогда
				Продолжить;
			КонецЕсли;
			
			Образец = Неопределено;
			Если СтрокаТЗ.Используется И ЗначениеЗаполнено(СтрокаТЗ.Шаблон) Тогда
				Образец = ОбъектФайлПоПрисоединенномуФайлу(СтрокаТЗ.Шаблон);
				Если Не ЗначениеЗаполнено(Образец) Тогда
					Результат.БылиОшибки = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ВидСправки 					= СтрокаТЗ.ВидСправки;
			НоваяСтрока.Представление 				= СтрокаТЗ.Представление;
			НоваяСтрока.Описание 					= СтрокаТЗ.Описание;
			НоваяСтрока.Используется 				= СтрокаТЗ.Используется;
			НоваяСтрока.РеквизитДопУпорядочивания 	= СтрокаТЗ.РеквизитДопУпорядочивания;
			НоваяСтрока.Образец 					= Образец;
			
		КонецЦикла;
		
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеПраздничныеДниГрафикаРаботы(ТаблицаИзменений, Приложение)
	
	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаПраздничныеДниГрафикаРаботы();
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	Ссылки = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	ГрафикиРаботыДляОбработки = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, Ссылки);
	
	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПраздничныеДниГрафикаРаботы(ГрафикиРаботыДляОбработки);
	
	Отбор = Новый Структура("ГрафикРаботы");
	Данные.Индексы.Добавить("ГрафикРаботы");
	
	Для каждого ГрафикРаботы Из ГрафикиРаботыДляОбработки Цикл
		Отбор.ГрафикРаботы = ГрафикРаботы;
		НайденныеСтроки = Данные.НайтиСтроки(Отбор);
		Компоненты = НоваяТаблицаГодДатаПраздничногоДня();
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			НоваяСтрока = Компоненты.Добавить();
			НоваяСтрока.Год 	= СтрокаТЗ.Год;
			НоваяСтрока.Дата 	= СтрокаТЗ.Дата;
		КонецЦикла;
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ГрафикРаботы 	= ГрафикРаботы;
		НоваяСтрока.Компоненты 		= Компоненты;
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеВидыОтпусков(ТаблицаИзменений)

	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаВидыОтпусков();
	
	ВидыОтпусков = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеВидыОтпусков(ВидыОтпусков);
	Если ЗначениеЗаполнено(Данные) Тогда 
		Для каждого СтрокаТЗ Из Данные Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ВидОтпуска 		= СтрокаТЗ.Ссылка;
			НоваяСтрока.Наименование 	= СтрокаТЗ.Наименование;
			НоваяСтрока.ОсновнойОтпуск 	= СтрокаТЗ.ОсновнойОтпуск
		КонецЦикла;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеРабочихМестОхраныТруда(ТаблицаИзменений)
	
	Результат = ИнтеграцияУправлениеПерсоналомОбмен.НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеРабочихМестОхраныТруда();
	
	РабочиеМеста = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеРабочихМестОхраныТруда(РабочиеМеста);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		// Если настройка выключена, публикуем данные как не используемые.
		ИспользоватьРабочиеМестаОхраныТруда = ИнтеграцияКабинетСотрудника.ИспользоватьРабочиеМестаОхраныТруда();
		Для Каждого СтрокаТЗ Из Данные Цикл
			Если СтрокаТЗ.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.Используется = ИспользоватьРабочиеМестаОхраныТруда И Не СтрокаТЗ.ВАрхиве И Не СтрокаТЗ.ПометкаУдаления;
		КонецЦикла; 
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КонструкторыОбъектов

Функция НоваяТаблицаДоступныеФункцииФизическихЛиц()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|ИспользуетКЭДО";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицОграниченияДоступаКРабочимКонтактам()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|УровеньДоступа";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаПрименяемыхВычетовНДФЛ()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|Организация,
	|ИнформацияОВычетах";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаМЧД()

	ИменаКолонок = "
	|МЧД,
	|Наименование,
	|Данные,
	|Размер,
	|Подписи";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаВидовПредоставляемыхСотрудникамСправок()

	ИменаКолонок = "
	|ВидСправки,
	|Представление,
	|Описание,
	|Используется,
	|РеквизитДопУпорядочивания,
	|Образец";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаРезультатыСогласования()
	
	ИменаКолонок = "
	|ИдентификаторОбъекта,
	|ВерсияИзменений,
	|Подписант,
	|ИмяПодписанта,
	|ИдентификаторДокумента,
	|ИдентификаторЭлектронногоДокумента,
	|РезультатСогласования,
	|ЭлектроннаяПодпись,
	|РольПодписанта,
	|ВерсияДокумента,
	|Комментарий,
	|СертификатЭП,
	|ДатаПодписи,
	|ОбновитьПредставление,
	|ИмяФайла,
	|МЧД,
	|Подпись";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);
	
КонецФункции

Функция НоваяТаблицаСправки2НДФЛ()

	ИменаКолонок = "
	|ИдентификаторДокумента,
	|ИдентификаторЗаявки,
	|Организация,
	|ФизическоеЛицо,
	|НалоговыйПериод,
	|СуммаДохода,
	|СуммаНалога,
	|ДатаСоздания,
	|ЭлектронныйДокумент,
	|Комментарий";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НовыйЭлектронныйДокумент()

	Возврат Новый Структура("ИсходныйДокумент,ПредставленияДокумента,ОригиналВMXL,ВариантПодписания");

КонецФункции

Функция НоваяТаблицаДокументыНаПодпись()

	ИменаКолонок = "
	|ИдентификаторДокумента,
	|Организация,
	|Дата,
	|НазваниеДокумента,
	|ЭлектронныйДокумент,
	|Комментарий,
	|ФизическиеЛица,
	|ВозможноОбновлениеПредставлений,
	|ОтправлятьУведомление,
	|ВариантПодписания";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаСправкиСРаботы()

	ИменаКолонок = "
	|Идентификатор,
	|ИдентификаторЗаявки,
	|Организация,
	|ФизическоеЛицо,
	|ЭлектронныйДокумент,
	|Комментарий";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаСогласияКЭДО()

	ИменаКолонок = "
	|Согласие,
	|Организация,
	|ФизическоеЛицо,
	|ДатаСоздания,
	|ИдентификаторДокументаНаПодпись,
	|ВерсияИзменений,
	|ОтправлятьУведомление,
	|Вложения";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаСправкиОстаткиОтпусков()

	ИменаКолонок = "
	|Заявка,
	|ИдентификаторЗаявки,
	|Организация,
	|ФизическоеЛицо,
	|ЭлектронныйДокумент,
	|Вложение,
	|Комментарий";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);
	
КонецФункции

Функция НоваяТаблицаИнформацияОбОтпусках(ДетализацияПоСотрудникам)
	
	Если ДетализацияПоСотрудникам Тогда
		ИменаКолонок = "
		|ФизическоеЛицо,
		|ДанныеПоСотрудникам";
	Иначе
		ИменаКолонок = "
		|ФизическоеЛицо,
		|ОстатокОтпуска,
		|ДнейКомпенсации,
		|ДопустимаяПродолжительностьОтпуска,
		|ИнформацияОПредыдущемОтпуске,
		|ИнформацияОСледующемОтпуске";
	КонецЕсли;
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НовоеОписаниеИнформацияОбОтпуске()

	Описание = Новый Структура("
	|ДатаНачала,
	|ДатаОкончания,
	|КоличествоДней,
	|Комментарий");
	
	Возврат Описание;

КонецФункции

Функция НоваяТаблицаПрогнозируемыеНеиспользованныеДниОтпуска()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|БудущееИзменение";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаБудущееИзменениеОстаткаОтпусков()

	ИменаКолонок = "
	|Период,
	|КоличествоДней,
	|Сотрудник,
	|ВидОтпуска";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаГрафиковОтпусков()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|ПериодыГрафика";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаПериодыГрафикаОтпусков()

	ИменаКолонок = "
	|ДатаНачала,
	|ДатаОкончания";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаГрафикОтпусковПредприятия()

	ИменаКолонок = "
	|ИдентификаторДокумента,
	|Год,
	|Состояние,
	|ИнициаторСбора";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеГрафиковРаботы()

	ИменаКолонок = "
	|ГрафикРаботы,
	|Дата,
	|ТипДня";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеПлановыхУдержаний()

	ИменаКолонок = "
	|ФизическоеЛицо,
	|Организация,
	|ПлановыеУдержания";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);
	
КонецФункции

Функция НоваяТаблицаПлановыеУдержанияФизическогоЛица()

	ИменаКолонок = "
	|ПредставлениеУдержания,
	|ДатаОкончания,
	|СпособРасчета
	|Процент
	|Сумма";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаПраздничныеДниГрафикаРаботы()

	ИменаКолонок = "
	|ГрафикРаботы,
	|Компоненты";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаГодДатаПраздничногоДня()

	ИменаКолонок = "
	|Год,
	|Дата";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаСтрокиРасчетногоЛистка()
	
	ИменаКолонок = "
	|Организация,
	|Сотрудник,
	|СоставнаяЧастьЗарплаты,
	|Сумма,
	|ПредставлениеРабочегоМеста";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаРасчетныеЛистки()
	
	ИменаКолонок = "
	|ФизическоеЛицо,
	|Месяц,
	|ПерваяПоловинаМесяца,
	|СтрокиРасчетногоЛистка,
	|ДокументыНаПодпись";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);
	
КонецФункции

Функция НоваяТаблицаШаблоныДокументов()

	ИменаКолонок = "
	|Шаблон,
	|ИмяПредопределенныхДанных,
	|НаименованиеДокумента,
	|ТребуетсяСогласование,
	|ДанныеМакета,
	|УсловияОбластей,
	|РеквизитыОбъектов,
	|НеИспользуется,
	|КодДокументаКадровогоМероприятия,
	|ТребуетПодписания,
	|ТребуетсяНаличиеВложений";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяНастройкиОтсутствий()

	ИменаКолонок = "
	|ПричинаОтсутствия,
	|ОформлятьЗаднимЧислом,
	|КоличествоДнейДоНачалаОтсутствияДляИзмененияЗаявки";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаИнформацияОбОтпускахПоСотрудникам()

	ИменаКолонок = "
	|Сотрудник,
	|ОстатокОтпуска,
	|ДнейКомпенсации,
	|ДопустимаяПродолжительностьОтпуска,
	|ИнформацияОПредыдущемОтпуске,
	|ИнформацияОСледующемОтпуске";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаОстаткиОтпусков()

	ИменаКолонок = "
	|ФизическоеЛицо
	|ОстаткиОтпусковСотрудников";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаОстаткиОтпусковПоСотрудникам()

	ИменаКолонок = "
	|Сотрудник,
	|ВидОтпуска,
	|ОстатокОтпуска";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаВидыОтпусков()

	ИменаКолонок = "
	|ВидОтпуска,
	|Наименование,
	|ОсновнойОтпуск";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НовоеОписаниеЭлектроннаяПодпись() Экспорт
	
	Описание = Новый Структура("
	|ЭлектроннаяПодпись,
	|СертификатЭП,
	|ДатаПодписи,
	|МЧД");
	
	Возврат Описание;
	
КонецФункции

Функция НоваяТаблицаДанныеРабочихМестОхраныТруда()

	ИменаКолонок = "
	|РабочееМестоОхраныТруда,
	|Наименование,
	|Номер,
	|Организация,
	|Должность,
	|Используется";
	
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

#КонецОбласти

#Область РезультатыСогласованияЭлектронныеДокументы

Функция ОбъектФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл)

	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
		ИнтеграцияУправлениеПерсоналомОбмен.ЗаписатьОшибкуПолученияДанныхФайла(ИменаСобытийЖР, ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
	ИмяФайла = ИнтеграцияУправлениеПерсоналом.ИмяФайлаБезРасширения(ДанныеФайла.ИмяФайла, ДанныеФайла.Расширение);
	
	Возврат ОписаниеФайла(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ИмяФайла, ДанныеФайла.Расширение, ДанныеФайла.Размер, ХешСумма);

КонецФункции

Функция ЭлектронныйДокументПоПрисоединенномуФайлу(ПрисоединенныйФайл)
	
	ИсходныйДокумент = ОбъектФайлПоПрисоединенномуФайлу(ПрисоединенныйФайл);
	Если ИсходныйДокумент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлектронныйДокумент = НовыйЭлектронныйДокумент();
	ЭлектронныйДокумент.ИсходныйДокумент = ИсходныйДокумент;
	
	Возврат ЭлектронныйДокумент;

КонецФункции

Функция ЭлектронныйДокумент(ДанныеЭлектронногоДокумента)
	
	ЭлектронныйДокумент = НовыйЭлектронныйДокумент();
	
	Оригинал 		= ДанныеЭлектронногоДокумента.Оригинал;
	Представления 	= ДанныеЭлектронногоДокумента.Представления;
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Оригинал.АдресВоВременномХранилище);
	ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
	ИсходныйДокумент = ОписаниеФайла(Оригинал.АдресВоВременномХранилище, Оригинал.ИмяФайлаБезРасширения, Оригинал.РасширениеФайла, Оригинал.Размер, ХешСумма);
	
	ПредставленияДокумента = Новый Массив;
	Для каждого ПредставлениеДокумента Из Представления Цикл
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПредставлениеДокумента.АдресВоВременномХранилище);
		ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
		ОбъектФайл = ОписаниеФайла(ПредставлениеДокумента.АдресВоВременномХранилище, ПредставлениеДокумента.ИмяФайлаБезРасширения, ПредставлениеДокумента.РасширениеФайла, ПредставлениеДокумента.Размер, ХешСумма);
		ПредставленияДокумента.Добавить(ОбъектФайл);
	КонецЦикла;
		
	ЭлектронныйДокумент.ИсходныйДокумент = ИсходныйДокумент;
	Если ПредставленияДокумента.Количество() > 0 Тогда
		ЭлектронныйДокумент.ПредставленияДокумента = ПредставленияДокумента;
	КонецЕсли;
	ЭлектронныйДокумент.ВариантПодписания = ДанныеЭлектронногоДокумента.ВариантПодписания;
	
	Возврат ЭлектронныйДокумент;

КонецФункции

Функция РезультатыСогласования(ИдентификаторДокумента, ДанныеЭлектронногоДокумента, ЭлектроннаяПодписьКакОбъект)
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Подписи = ДанныеЭлектронногоДокумента.Подписи;
	
	Оригинал = ДанныеЭлектронногоДокумента.Оригинал;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Оригинал.АдресВоВременномХранилище);
	ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
	
	РезультатыСогласования = НоваяТаблицаРезультатыСогласования();
	Для каждого Подпись Из Подписи Цикл
		
		Если ИнтеграцияУправлениеПерсоналомСлужебный.ЭтоПодписьИзПриложения(Подпись) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПодписанта = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПодписантаИзПодписи(Приложение, Подпись);
		ДвоичныеДанныеПодпись = ПолучитьИзВременногоХранилища(Подпись.АдресВоВременномХранилище);
		
		НаборСвойствПодписиКЭДО = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(Подпись, "НаборСвойствПодписиКЭДО");
		Если ЗначениеЗаполнено(НаборСвойствПодписиКЭДО) Тогда
			Для Каждого ЭлементСвойств Из НаборСвойствПодписиКЭДО Цикл
				НоваяСтрока = РезультатыСогласования.Добавить();
				НоваяСтрока.ИдентификаторОбъекта 	= Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.Подписант 				= ДанныеПодписанта.Подписант;
				НоваяСтрока.ИмяПодписанта 			= ДанныеПодписанта.ИмяПодписанта;
				НоваяСтрока.ИдентификаторДокумента 	= ИдентификаторДокумента;
				НоваяСтрока.РезультатСогласования 	= Перечисления.РезультатыСогласованияБЗК.Согласовано;
				НоваяСтрока.ВерсияДокумента 		= ХешСумма;
				НоваяСтрока.ДатаПодписи				= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Подпись.ДатаПодписи);
				НоваяСтрока.РольПодписанта 			= ЭлементСвойств.РольПодписанта;
				Если ЭлектроннаяПодписьКакОбъект Тогда
					ОбъектПодпись = НовоеОписаниеЭлектроннаяПодпись();
					ОбъектПодпись.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
					ОбъектПодпись.ДатаПодписи 			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Подпись.ДатаПодписи);
					Если ЗначениеЗаполнено(ЭлементСвойств.МЧД) Тогда
						ОбъектПодпись.МЧД = ЭлементСвойств.МЧД.Ссылка;
					КонецЕсли;
					НоваяСтрока.Подпись = ОбъектПодпись;
				Иначе
					НоваяСтрока.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
					НоваяСтрока.ИмяФайла 			= Подпись.ИмяФайлаСРасширением;
					Если ЗначениеЗаполнено(ЭлементСвойств.МЧД) Тогда
						НоваяСтрока.МЧД = ЭлементСвойств.МЧД.Ссылка;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = РезультатыСогласования.Добавить();
			НоваяСтрока.ИдентификаторОбъекта 	= Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.Подписант 				= ДанныеПодписанта.Подписант;
			НоваяСтрока.ИмяПодписанта 			= ДанныеПодписанта.ИмяПодписанта;
			НоваяСтрока.ИдентификаторДокумента 	= ИдентификаторДокумента;
			НоваяСтрока.РезультатСогласования 	= Перечисления.РезультатыСогласованияБЗК.Согласовано;
			НоваяСтрока.ВерсияДокумента 		= ХешСумма;
			НоваяСтрока.ДатаПодписи				= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Подпись.ДатаПодписи);
			НоваяСтрока.РольПодписанта 			= Перечисления.РолиПодписантовКЭДО.Организация;
			Если ЭлектроннаяПодписьКакОбъект Тогда
				ОбъектПодпись = НовоеОписаниеЭлектроннаяПодпись();
				ОбъектПодпись.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
				ОбъектПодпись.ДатаПодписи 			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(Подпись.ДатаПодписи);
				НоваяСтрока.Подпись = ОбъектПодпись;
			Иначе
				НоваяСтрока.ЭлектроннаяПодпись 	= Base64Строка(ДвоичныеДанныеПодпись);
				НоваяСтрока.ИмяФайла 			= Подпись.ИмяФайлаСРасширением;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыСогласования;
	
КонецФункции

Функция РезультатыСогласованияЗаявкиСПодписью(ДанныеЗаявки, ИдентификаторОбъекта, Комментарий)
	
	ИдентификаторЗаявки 	= ДанныеЗаявки.ИдентификаторЗаявки;
	РезультатВыполнения 	= ДанныеЗаявки.РезультатВыполнения;
	ПрисоединенныйФайл 		= ДанныеЗаявки.ЭлектронныйДокумент;
	ИдентификаторДокумента 	= ДанныеЗаявки.ИдентификаторДокумента;
	
	Результат = Новый Структура("РезультатыСогласования,ОписаниеОшибки");
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Попытка
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
	Исключение
		ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
		ИнтеграцияУправлениеПерсоналомОбмен.ЗаписатьОшибкуПолученияДанныхФайла(ИменаСобытийЖР, ПрисоединенныйФайл, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	РезультатыСогласования = НоваяТаблицаРезультатыСогласования();
	Если ДанныеФайла.ПодписанЭП Тогда
		
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ХешСумма = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
		
		ЭлектроннаяПодписьКакОбъект = ЭлектроннаяПодписьКакОбъект();
		
		ПодписиДокумента = ЭлектроннаяПодписьКЭДО.УстановленныеПодписи(ПрисоединенныйФайл);
		Для каждого ПодписьДокумента Из ПодписиДокумента Цикл
			
			Если ИнтеграцияУправлениеПерсоналомСлужебный.ЭтоПодписьИзПриложения(ПодписьДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПодписанта = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеПодписантаИзПодписи(Приложение, ПодписьДокумента);
			
			НаборСвойствПодписиКЭДО = ИнтеграцияУправлениеПерсоналомОбмен.ЗначениеСвойстваОбъекта(ПодписьДокумента, "НаборСвойствПодписиКЭДО");
			Если ЗначениеЗаполнено(НаборСвойствПодписиКЭДО) Тогда
				Для Каждого ЭлементСвойств Из НаборСвойствПодписиКЭДО Цикл
					НоваяСтрока = РезультатыСогласования.Добавить();
					НоваяСтрока.ИдентификаторОбъекта 				= Строка(Новый УникальныйИдентификатор);
					НоваяСтрока.Подписант 							= ДанныеПодписанта.Подписант;
					НоваяСтрока.ИмяПодписанта 						= ДанныеПодписанта.ИмяПодписанта;
					НоваяСтрока.ИдентификаторДокумента 				= ИдентификаторЗаявки;
					НоваяСтрока.РезультатСогласования 				= РезультатВыполнения;
					НоваяСтрока.ВерсияДокумента 					= ХешСумма;
					НоваяСтрока.Комментарий 						= Комментарий;
					НоваяСтрока.ДатаПодписи							= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПодписьДокумента.ДатаПодписи);
					НоваяСтрока.ИдентификаторЭлектронногоДокумента 	= ИдентификаторДокумента;
					НоваяСтрока.РольПодписанта 						= Перечисления.РолиПодписантовКЭДО.Исполнитель;
					Если ЭлектроннаяПодписьКакОбъект Тогда
						ОбъектПодпись = НовоеОписаниеЭлектроннаяПодпись();
						ОбъектПодпись.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
						ОбъектПодпись.ДатаПодписи 			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПодписьДокумента.ДатаПодписи);
						Если ЗначениеЗаполнено(ЭлементСвойств.МЧД) Тогда
							ОбъектПодпись.МЧД = ЭлементСвойств.МЧД.Ссылка;
						КонецЕсли;
						НоваяСтрока.Подпись = ОбъектПодпись;
					Иначе
						НоваяСтрока.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
						НоваяСтрока.ИмяФайла 			= ПодписьДокумента.ИмяФайла;
						Если ЗначениеЗаполнено(ЭлементСвойств.МЧД) Тогда
							НоваяСтрока.МЧД = ЭлементСвойств.МЧД.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НоваяСтрока = РезультатыСогласования.Добавить();
				НоваяСтрока.ИдентификаторОбъекта 				= ИдентификаторОбъекта;
				НоваяСтрока.Подписант 							= ДанныеПодписанта.Подписант;
				НоваяСтрока.ИмяПодписанта 						= ДанныеПодписанта.ИмяПодписанта;
				НоваяСтрока.ИдентификаторДокумента 				= ИдентификаторЗаявки;
				НоваяСтрока.РезультатСогласования 				= РезультатВыполнения;
				НоваяСтрока.ВерсияДокумента 					= ХешСумма;
				НоваяСтрока.Комментарий 						= Комментарий;
				НоваяСтрока.ДатаПодписи							= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПодписьДокумента.ДатаПодписи);
				НоваяСтрока.ИдентификаторЭлектронногоДокумента 	= ИдентификаторДокумента;
				НоваяСтрока.РольПодписанта 						= Перечисления.РолиПодписантовКЭДО.Исполнитель;
				Если ЭлектроннаяПодписьКакОбъект Тогда
						ОбъектПодпись = НовоеОписаниеЭлектроннаяПодпись();
						ОбъектПодпись.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
						ОбъектПодпись.ДатаПодписи 			= ОбщегоНазначения.ПредставлениеЛокальнойДатыСоСмещением(ПодписьДокумента.ДатаПодписи);
						НоваяСтрока.Подпись = ОбъектПодпись;
					Иначе
						НоваяСтрока.ЭлектроннаяПодпись 	= Base64Строка(ПодписьДокумента.Подпись);
						НоваяСтрока.ИмяФайла 			= ПодписьДокумента.ИмяФайла;
					КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатыСогласования;

КонецФункции

Функция ОписаниеФайла(АдресФайла, ИмяФайла, Расширение, Размер, ХешСумма)

	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("АдресФайла", 			АдресФайла);
	ОписаниеФайла.Вставить("ИмяФайла", 				ИмяФайла);
	ОписаниеФайла.Вставить("Расширение", 			Расширение);
	ОписаниеФайла.Вставить("Размер", 				Размер);
	ОписаниеФайла.Вставить("ХешСумма", 				ХешСумма);
	ОписаниеФайла.Вставить("ИдентификаторФайла", 	"");
	
	Возврат ОписаниеФайла

КонецФункции

#КонецОбласти

#Область ПубликацияРасчетныхЛистков

Функция РезультатПубликацииРасчетныхЛистков(ДанныеДляПубликации, ПараметрыВыгрузки) Экспорт

	Результат = Новый Структура("БылиОшибки,НеОбработаны,КоличествоВыгружено", Ложь, Новый Массив, 0);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.ПубликацияРасчетныхЛистков;
	СобытиеОбмена = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СобытиеОбмена(Приложение, ВидСобытия);
	СобытиеОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписатьСобытиеНачалоВыгрузкиРЛ(ИменаСобытийЖР);
	
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, ПараметрыВыгрузки.ВестиПротокол);
	
	КоличествоВыгружено = 0;
	БылиОшибки = Ложь;
	Попытка
		// Проверка (установка) версий API и DTO для обмена, при смене версий выполняются соответствующие обработчики.
		МенеджерОбмена.ПроверитьВерсиюФорматаОбмена();
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	Если Не БылиОшибки Тогда
		
		Для каждого ЭлементКоллекции Из ДанныеДляПубликации Цикл
			
			ПараметрыВыгрузки.Месяц = НачалоМесяца(ЭлементКоллекции.Ключ);
			ФизическиеЛицаОрганизаций = ЭлементКоллекции.Значение;
			
			Для каждого ФизическиеЛицаОрганизации Из ФизическиеЛицаОрганизаций Цикл
				
				ПараметрыВыгрузки.Организация = ФизическиеЛицаОрганизации.Ключ;
				ПараметрыВыгрузки.СписокФизическихЛиц = ФизическиеЛицаОрганизации.Значение;
				
				Попытка
					РезультатВыгрузки = РезультатВыгрузкиРасчетныхЛистков(МенеджерОбмена, ПараметрыВыгрузки);
					БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
					КоличествоВыгружено = КоличествоВыгружено + РезультатВыгрузки.КоличествоВыгружено;
					Если ЗначениеЗаполнено(РезультатВыгрузки.НеОбработаны) Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НеОбработаны, РезультатВыгрузки.НеОбработаны);
					КонецЕсли;
				Исключение
					БылиОшибки = Истина;
					ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
						УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.БылиОшибки = БылиОшибки;
	Результат.КоличествоВыгружено = КоличествоВыгружено;
	
	ЗаписатьСобытиеОкончаниеВыгрузкиРЛ(ИменаСобытийЖР, БылиОшибки, КоличествоВыгружено);
	
	Возврат Результат;

КонецФункции

Функция РезультатВыгрузкиРасчетныхЛистков(МенеджерОбмена, ПараметрыВыгрузки)

	Результат = Новый Структура("КоличествоВыгружено,НеОбработаны,БылиОшибки", 0, Новый Массив, Ложь);

	Данные = ДанныеДляВыгрузкиРасчетныхЛистков(МенеджерОбмена, ПараметрыВыгрузки);
	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.НеОбработаны = Данные.НеОбработаны;
	
	// Выгрузка составных частей.
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВидСоставнойЧастиЗарплаты;
	РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.СоставныеЧастиЗарплаты, ТипОбъекта);
	Если РезультатВыгрузки.БылиОшибки = Истина Тогда
		Результат.БылиОшибки = Истина;
		Возврат Результат;
	КонецЕсли;
	
	СписокФизическихЛиц = ПараметрыВыгрузки.СписокФизическихЛиц;
	Если ЗначениеЗаполнено(Данные.НеОбработаны) Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокФизическихЛиц, Данные.НеОбработаны);
	КонецЕсли;
	
	РазмерПакета = 500;
	КоличествоДокументов = СписокФизическихЛиц.Количество();
	Пакеты = Новый Массив; 
	ПакетФизическихЛиц = Новый Массив;
	СчПакета = 0;
	Для Ид = 0 По КоличествоДокументов - 1 Цикл
		ФизическоеЛицо = СписокФизическихЛиц[Ид];
		Если СчПакета = РазмерПакета Тогда
			Пакеты.Добавить(ПакетФизическихЛиц);
			СчПакета = 0;
			ПакетФизическихЛиц = Новый Массив;
		КонецЕсли;
		СчПакета = СчПакета + 1;
		ПакетФизическихЛиц.Добавить(ФизическоеЛицо);
	КонецЦикла;
	Пакеты.Добавить(ПакетФизическихЛиц);
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= ПараметрыВыгрузки.Месяц;
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	ПовторнаяПубликация 	= ПараметрыВыгрузки.ПовторнаяПубликация;
	
	// Расширение файла расчетного листка.
	РасширениеФайла = "pdf";
	
	СтрокиРасчетныхЛистков 		= Данные.СтрокиРасчетныхЛистков;
	ДанныеДляРасчетныхЛистков 	= Данные.ДанныеДляРасчетныхЛистков;
	ДокументыКЭДО 				= ДанныеДляРасчетныхЛистков.ДокументыКЭДО;
	ФизическиеЛицаИменаФайлов 	= ДанныеДляРасчетныхЛистков.ФизическиеЛицаИменаФайлов;
	РасчетныеЛистыДокументы 	= ДанныеДляРасчетныхЛистков.РасчетныеЛистыДокументы;
	
	
	КоличествоВыгружено = 0;
	Для каждого ПакетФизическихЛиц Из Пакеты Цикл
		
		ДокументыНаПодпись 	= НоваяТаблицаДокументыНаПодпись();
		РасчетныеЛистки 	= НоваяТаблицаРасчетныеЛистки();
		РасчетныеЛистки.Колонки.Добавить("СтарыйФайл");
		РасчетныеЛистки.Колонки.Добавить("НовыйФайл");
		РасчетныеЛистки.Колонки.Добавить("ДокументКЭДО");
		РасчетныеЛистки.Колонки.Добавить("ИдентификаторДокумента");
		
		ИдентификаторРасчетныйЛисток 	= Новый Соответствие;
		ОпубликованныеДокументы 		= Новый Соответствие;
		ОпубликованныеФизическиеЛица 	= Новый Соответствие;
		
		Для каждого ФизическоеЛицо Из ПакетФизическихЛиц Цикл
			
			ТабличныйДокумент = РасчетныеЛистыДокументы[ФизическоеЛицо];
			
			НачатьТранзакцию();
			Попытка
				
				ТекущийФайлРасчетногоЛистка = Неопределено;
				ДокументКЭДООбъект = Неопределено;
				НовыйДокумент = Ложь;
				ДокументКЭДОСсылка = ДокументыКЭДО[ФизическоеЛицо];
				Если ДокументКЭДОСсылка = Неопределено Тогда
					НовыйДокумент = Истина;
					ДокументКЭДОСсылка = Документы.ДокументКадровогоЭДО.ПолучитьСсылку();
					ДокументКЭДООбъект = ИнтеграцияУправлениеПерсоналомСлужебный.НовыйДокументКЭДОРасчетныйЛисток(ДокументКЭДОСсылка, Организация, ФизическоеЛицо);
				Иначе
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументКЭДОСсылка);
					Блокировка.Заблокировать();
					ДокументКЭДООбъект = ДокументКЭДОСсылка.ПолучитьОбъект();
					ТекущийФайлРасчетногоЛистка = ДокументКЭДООбъект.ЭлектронныйДокумент;
				КонецЕсли;
				
				ИмяФайла = ФизическиеЛицаИменаФайлов[ФизическоеЛицо];
				ДанныеФайлаРЛ = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеФайлаРасчетногоЛистка(Организация, ФизическоеЛицо, ДокументКЭДОСсылка, ТабличныйДокумент, ИмяФайла, РасширениеФайла);
				ФайлРасчетногоЛистка = ДанныеФайлаРЛ.ФайлРасчетногоЛистка;
				
				ОбъектЭлектронныйДокумент = ЭлектронныйДокументПоПрисоединенномуФайлу(ФайлРасчетногоЛистка);
				Если Не ЗначениеЗаполнено(ОбъектЭлектронныйДокумент) Тогда
					Результат.БылиОшибки = Истина;
					Продолжить;
				КонецЕсли;
				
				// обновим ссылку на файл - ЭлектронныйДокумент
				ДокументКЭДООбъект.ЭлектронныйДокумент = ФайлРасчетногоЛистка;
				ДокументКЭДООбъект.Записать();
				КадровыйЭДО.ЗарегистрироватьДокументКЭДОКПересчетуСостояний(ДокументКЭДООбъект.Ссылка);
				
				Если НовыйДокумент Тогда
					МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Организация  			= Организация;
					МенеджерЗаписи.ФизическоеЛицо 			= ФизическоеЛицо;
					МенеджерЗаписи.Месяц 					= Месяц;
					МенеджерЗаписи.ПерваяПоловинаМесяца 	= ПерваяПоловинаМесяца;
					МенеджерЗаписи.СостояниеПубликации 		= Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.ОжидаетПубликации;
					МенеджерЗаписи.ДокументКадровогоЭДО 	= ДокументКЭДОСсылка;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				Результат.БылиОшибки = Истина;
				Продолжить;
			КонецПопытки;
			
			ИдентификаторДокумента = ДокументКЭДООбъект.ИдентификаторДокумента;
			
			НоваяСтрока = ДокументыНаПодпись.Добавить();
			НоваяСтрока.ИдентификаторДокумента			= ИдентификаторДокумента;
			НоваяСтрока.Организация						= Организация;
			НоваяСтрока.ФизическиеЛица					= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
			НоваяСтрока.Дата							= ТекущаяДатаСеанса();
			НоваяСтрока.НазваниеДокумента				= ИмяФайла;
			НоваяСтрока.ЭлектронныйДокумент				= ОбъектЭлектронныйДокумент;
			НоваяСтрока.ВозможноОбновлениеПредставлений = Истина;
			НоваяСтрока.ОтправлятьУведомление 			= Ложь;
			
			РасчетныйЛисток = РасчетныеЛистки.Добавить();
			РасчетныйЛисток.ФизическоеЛицо 			= ФизическоеЛицо;
			РасчетныйЛисток.Месяц 					= Месяц;
			РасчетныйЛисток.ПерваяПоловинаМесяца 	= ПерваяПоловинаМесяца;
			РасчетныйЛисток.СтрокиРасчетногоЛистка 	= СтрокиРасчетныхЛистков[ФизическоеЛицо];
			РасчетныйЛисток.ДокументыНаПодпись 		= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("ID",ИдентификаторДокумента));
			РасчетныйЛисток.ИдентификаторДокумента	= ИдентификаторДокумента;
			РасчетныйЛисток.СтарыйФайл 				= ТекущийФайлРасчетногоЛистка;
			РасчетныйЛисток.НовыйФайл 				= ФайлРасчетногоЛистка;
			РасчетныйЛисток.ДокументКЭДО 			= ДокументКЭДОСсылка;
			
			ИдентификаторРасчетныйЛисток.Вставить(ИдентификаторДокумента, РасчетныйЛисток);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДокументыНаПодпись) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДокументыНаПодпись, ТипОбъекта);
		Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
		
		РасчетныеЛисткиКВыгрузке = НоваяТаблицаРасчетныеЛистки();
		Для Каждого ИдентификаторДокумента Из РезультатВыгрузки.Выгружено Цикл
			ОпубликованныеДокументы.Вставить(ИдентификаторДокумента, Истина);
			ЗаполнитьЗначенияСвойств(РасчетныеЛисткиКВыгрузке.Добавить(), ИдентификаторРасчетныйЛисток[ИдентификаторДокумента]);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РасчетныеЛисткиКВыгрузке) Тогда
			
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РасчетныйЛисток;
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(РасчетныеЛисткиКВыгрузке, ТипОбъекта);
			Результат.БылиОшибки = Результат.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			КоличествоВыгружено = КоличествоВыгружено + РезультатВыгрузки.Выгружено.Количество();
			
			Для Каждого ФизическоеЛицо Из РезультатВыгрузки.Выгружено Цикл
				ОпубликованныеФизическиеЛица.Вставить(ФизическоеЛицо, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		БылиОшибки = ЗарегистрироватьВыгрузкуРасчетныхЛистков(ПараметрыВыгрузки, РасчетныеЛистки, ОпубликованныеДокументы, ОпубликованныеФизическиеЛица);
		Результат.БылиОшибки = Результат.БылиОшибки Или БылиОшибки;
		
	КонецЦикла;
	Результат.КоличествоВыгружено = КоличествоВыгружено;

	Возврат Результат;

КонецФункции

Функция ЗарегистрироватьВыгрузкуРасчетныхЛистков(ПараметрыВыгрузки, РасчетныеЛистки, ОпубликованныеДокументы, ОпубликованныеФизическиеЛица)
	
	БылиОшибки = Ложь;
	
	ТаблицаРЛ = Новый ТаблицаЗначений;
	ТаблицаРЛ.Колонки.Добавить("Организация");
	ТаблицаРЛ.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаРЛ.Колонки.Добавить("Месяц");
	ТаблицаРЛ.Колонки.Добавить("ПерваяПоловинаМесяца");
	ТаблицаРЛ.Колонки.Добавить("СостояниеПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДатаПубликации");
	ТаблицаРЛ.Колонки.Добавить("ДокументКадровогоЭДО");
	ТаблицаРЛ.Колонки.Добавить("Ответственный");
	
	ПодписиДокументовКУдалению = Новый ТаблицаЗначений;
	ПодписиДокументовКУдалению.Колонки.Добавить("Объект");
	ПодписиДокументовКУдалению.Колонки.Добавить("ФизическоеЛицо");
	
	ДокументыВозвратФайлов = Новый ТаблицаЗначений;
	ДокументыВозвратФайлов.Колонки.Добавить("ДокументКадровогоЭДО");
	ДокументыВозвратФайлов.Колонки.Добавить("ЭлектронныйДокумент");
	
	ФайлыКУдалению = Новый ТаблицаЗначений;
	ФайлыКУдалению.Колонки.Добавить("Файл");
	
	Организация 			= ПараметрыВыгрузки.Организация;
	Месяц 					= НачалоМесяца(ПараметрыВыгрузки.Месяц);
	ПерваяПоловинаМесяца 	= ПараметрыВыгрузки.ПерваяПоловинаМесяца;
	ДатаПубликации 			= ТекущаяДатаСеанса();
	ТекущийПользователь 	= Пользователи.ТекущийПользователь();
	
	Для каждого СтрокаТЗ Из РасчетныеЛистки Цикл
		
		ФизическоеЛицо 	= СтрокаТЗ.ФизическоеЛицо;
		ДокументКЭДО 	= СтрокаТЗ.ДокументКЭДО;
		
		Если ОпубликованныеФизическиеЛица[ФизическоеЛицо] = Неопределено Тогда
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.ОшибкаОбработки;
		Иначе
			СостояниеПубликации = Перечисления.СостоянияРасчетныхЛистковКабинетСотрудника.Опубликован;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРЛ.Добавить();
		НоваяСтрока.Организация 			= Организация;
		НоваяСтрока.ФизическоеЛицо 			= ФизическоеЛицо;
		НоваяСтрока.Месяц 					= Месяц;
		НоваяСтрока.ПерваяПоловинаМесяца 	= ПерваяПоловинаМесяца;
		НоваяСтрока.СостояниеПубликации 	= СостояниеПубликации;
		НоваяСтрока.ДатаПубликации 			= ДатаПубликации;
		НоваяСтрока.ДокументКадровогоЭДО 	= ДокументКЭДО;
		НоваяСтрока.Ответственный 			= ТекущийПользователь;
		
		НоваяСтрокаПодписи = ПодписиДокументовКУдалению.Добавить();
		НоваяСтрокаПодписи.Объект 			= ДокументКЭДО;
		НоваяСтрокаПодписи.ФизическоеЛицо 	= ФизическоеЛицо;
		
		Если ОпубликованныеДокументы[СтрокаТЗ.ИдентификаторДокумента] = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаТЗ.СтарыйФайл) Тогда
				// документ на подпись не опубликован, возвращаем прежний файл
				НоваяСтрока = ДокументыВозвратФайлов.Добавить();
				НоваяСтрока.ДокументКадровогоЭДО 	= ДокументКЭДО;
				НоваяСтрока.ЭлектронныйДокумент 	= СтрокаТЗ.СтарыйФайл;
				// новый файл удаляем
				НоваяСтрока = ФайлыКУдалению.Добавить();
				НоваяСтрока.Файл = СтрокаТЗ.НовыйФайл;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЗ.СтарыйФайл) Тогда
			НоваяСтрока = ФайлыКУдалению.Добавить();
			НоваяСтрока.Файл = СтрокаТЗ.СтарыйФайл;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РасчетныеЛисткиКабинетСотрудника");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРЛ;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Месяц", "Месяц");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПерваяПоловинаМесяца", "ПерваяПоловинаМесяца");
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодписиДокументовКЭДО");
		ЭлементБлокировки.ИсточникДанных = ПодписиДокументовКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ФизическоеЛицо", "ФизическоеЛицо");
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДокументКадровогоЭДО");
		ЭлементБлокировки.ИсточникДанных = ДокументыВозвратФайлов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ДокументКадровогоЭДО");
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДокументКадровогоЭДОПрисоединенныеФайлы");
		ЭлементБлокировки.ИсточникДанных = ФайлыКУдалению;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Файл");
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаРЛ Цикл
			МенеджерЗаписи = РегистрыСведений.РасчетныеЛисткиКабинетСотрудника.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
			КадровыйЭДО.ЗарегистрироватьПубликациюДокументаКЭДО(СтрокаТЗ.ДокументКадровогоЭДО, ДатаПубликации, Истина);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ПодписиДокументовКУдалению Цикл
			МенеджерЗаписи = РегистрыСведений.ПодписиДокументовКЭДО.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ДокументыВозвратФайлов Цикл
			ДокументОбъект = СтрокаТЗ.ДокументКадровогоЭДО.ПолучитьОбъект();
			ДокументОбъект.ЭлектронныйДокумент = СтрокаТЗ.ЭлектронныйДокумент;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ФайлыКУдалению Цикл
			ФайлОбъект = СтрокаТЗ.Файл.ПолучитьОбъект();
			ФайлОбъект.ДополнительныеСвойства.Вставить("УдалениеПечатныхФорм");
			ФайлОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр(
		"ru = 'Ошибка регистрации результатов выгрузки расчетных листков.
		|Описание ошибки:
		|%1';
		|en = 'An error occurred when registering the payslip export results.
		|Error details:
		|%1'");
		Комментарий = СтрШаблон(ШаблонОписания, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ИменаСобытийЖР = ИнтеграцияКабинетСотрудника.ИменаСобытийЖР();
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ДанныеДляВыгрузкиРасчетныхЛистков(МенеджерОбмена, ПараметрыВыгрузки)
	
	ДанныеДляРасчетныхЛистков = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеРасчетныхЛистовДляПубликации(ПараметрыВыгрузки);
	Если Не ЗначениеЗаполнено(ДанныеДляРасчетныхЛистков.ДанныеРасчетныхЛистков) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = Новый Структура("СоставныеЧастиЗарплаты,СтрокиРасчетныхЛистков,ДанныеДляРасчетныхЛистков,НеОбработаны");
	Данные.СоставныеЧастиЗарплаты 		= Новый Массив;
	Данные.НеОбработаны 				= Новый Массив;
	Данные.ДанныеДляРасчетныхЛистков 	= ДанныеДляРасчетныхЛистков;
	Данные.СтрокиРасчетныхЛистков 		= Новый Соответствие;
	
	Организация 			= ПараметрыВыгрузки.Организация;
	СписокФизическихЛиц 	= ПараметрыВыгрузки.СписокФизическихЛиц;
	ПовторнаяПубликация 	= ПараметрыВыгрузки.ПовторнаяПубликация;
	
	ДанныеРасчетныхЛистов 			= ДанныеДляРасчетныхЛистков.ДанныеРасчетныхЛистков; 
	ВидыМестВыплатыРегистраторов 	= ДанныеДляРасчетныхЛистков.ВидыМестВыплатыРегистраторов;
	ОписаниеСоставныхЧастейЗарплаты = ДанныеДляРасчетныхЛистков.ОписаниеСоставныхЧастейЗарплаты;
	РасчетныеЛистыДокументы 		= ДанныеДляРасчетныхЛистков.РасчетныеЛистыДокументы;
	
	ДанныеРасчетныхЛистов.Индексы.Добавить("ФизическоеЛицо");
	Отбор = Новый Структура("ФизическоеЛицо");
	
	СоставныеЧастиЗарплаты 	= Новый Соответствие;
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		ТабличныйДокумент = РасчетныеЛистыДокументы[ФизическоеЛицо];
		Если ТабличныйДокумент = Неопределено Тогда
			Данные.НеОбработаны.Добавить(ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		Отбор.ФизическоеЛицо = ФизическоеЛицо;
		СтрокиДанных = ДанныеРасчетныхЛистов.НайтиСтроки(Отбор);
		
		СтрокиРасчетногоЛистка = НоваяТаблицаСтрокиРасчетногоЛистка();
		Для каждого СтрокаДанных Из СтрокиДанных Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.Сотрудник)
				Или Не ЗначениеЗаполнено(СтрокаДанных.ВидРасчета) И Не ЗначениеЗаполнено(СтрокаДанных.Группа) Тогда
				Продолжить;
			КонецЕсли;
			
			Сумма = ?(СтрокаДанных.Сумма = Неопределено, 0, Число(СтрокаДанных.Сумма));
			
			Если СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо") Тогда
				Если Сумма < 0 Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгСотрудникаНаНачало"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгОрганизацииНаНачало"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо") Тогда
				Если Сумма < 0 Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгСотрудникаНаКонец"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ДолгОрганизацииНаКонец"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено") Тогда
				Если ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаКарту"];
				ИначеЕсли ВидыМестВыплатыРегистраторов[СтрокаДанных.РегистраторВыплаты] = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаСчет"];
				Иначе
					СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты["ВыплатаНаличными"];
				КонецЕсли;
			ИначеЕсли СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно")
				Или СтрокаДанных.Группа = ПредопределенноеЗначение("Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы") Тогда
				СоставнаяЧасть = ОписаниеСоставныхЧастейЗарплаты[СтрокаДанных.ВидРасчета];
			Иначе
				Продолжить;
			КонецЕсли;
			
			СоставныеЧастиЗарплаты.Вставить(СоставнаяЧасть.Идентификатор, СоставнаяЧасть);
			
			СтрокаРасчетногоЛистка = СтрокиРасчетногоЛистка.Добавить();
			СтрокаРасчетногоЛистка.Организация 					= Организация;
			СтрокаРасчетногоЛистка.Сотрудник 					= СтрокаДанных.Сотрудник;
			СтрокаРасчетногоЛистка.СоставнаяЧастьЗарплаты 		= СоставнаяЧасть.Идентификатор;
			СтрокаРасчетногоЛистка.Сумма 						= Сумма;
			СтрокаРасчетногоЛистка.ПредставлениеРабочегоМеста 	= СтрокаДанных.ПредставлениеРабочегоМеста;
			
		КонецЦикла;
		
		Если СтрокиРасчетногоЛистка.Количество() = 0 И Не ПовторнаяПубликация Тогда
			Данные.НеОбработаны.Добавить(ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		Данные.СтрокиРасчетныхЛистков.Вставить(ФизическоеЛицо, СтрокиРасчетногоЛистка);
		
	КонецЦикла;
	
	Для каждого ЭлементКоллекции Из СоставныеЧастиЗарплаты Цикл
		Данные.СоставныеЧастиЗарплаты.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Возврат Данные;
		
КонецФункции

Процедура ЗаписатьСобытиеНачалоВыгрузкиРЛ(ИменаСобытийЖР)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоВыгрузкиРЛ());

КонецПроцедуры
	
Процедура ЗаписатьСобытиеОкончаниеВыгрузкиРЛ(ИменаСобытийЖР, БылиОшибки, КоличествоВыгружено)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеВыгрузкиРЛ(БылиОшибки, КоличествоВыгружено));

КонецПроцедуры
	
Функция КомментарийЖРНачалоВыгрузкиРЛ()

	Комментарий = НСтр("ru = 'Начало выгрузки расчетных листков.';
						|en = 'Payslip export start.'");
	Возврат Комментарий;

КонецФункции

Функция КомментарийЖРОкончаниеВыгрузкиРЛ(БылиОшибки, КоличествоВыгружено)

	Комментарий = НСтр("ru = 'Окончание выгрузки расчетных листков. Выгружено: %1.';
						|en = 'Payslip export end. Exported: %1.'");
	Комментарий = СтрШаблон(Комментарий, КоличествоВыгружено);
	Если БылиОшибки Тогда
		Комментарий = СтрШаблон("%1 %2", Комментарий, НСтр("ru = 'Были ошибки.';
															|en = 'There were errors.'"));
	КонецЕсли;
	Возврат Комментарий;

КонецФункции

#КонецОбласти

#Область ПолучениеИзменений

Функция ЗарегистрированныеИзменения(ТипыОбъектов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Изменения.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОбъектов)
	|	И НЕ Изменения.ВыгружатьУдаление";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЗарегистрированныеИзмененияПраваНаОтпуск()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах,
	|	ЕСТЬNULL(ВыгруженныеОбъекты.Выгружался, ЛОЖЬ) КАК ФизическоеЛицоВыгружено
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Изменения.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|		ПО Изменения.Ссылка = ВыгруженныеОбъекты.Ссылка
	|			И (ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|			И (ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо))
	|			И (ВыгруженныеОбъекты.Выгружался)
	|ГДЕ
	|	Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск)
	|	И НЕ Изменения.ВыгружатьУдаление";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЗарегистрированныеИзмененияГрафиковОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах,
	|	ЕСТЬNULL(ВыгруженныеОбъекты.Выгружался, ЛОЖЬ) КАК ФизическоеЛицоВыгружено
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Изменения.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|			ПО Сотрудники.ФизическоеЛицо = ВыгруженныеОбъекты.Ссылка
	|				И (ВыгруженныеОбъекты.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.КабинетСотрудника))
	|				И (ВыгруженныеОбъекты.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо))
	|				И (ВыгруженныеОбъекты.Выгружался)
	|		ПО Изменения.Ссылка = Сотрудники.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков)
	|	И НЕ Изменения.ВыгружатьУдаление";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЗарегистрированныеИзмененияЗаявок()

	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправки2НДФЛ);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗапросСправкиСМестаРаботы);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаИзменениеЛичныхДанных);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНалоговыйВычет);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаОтпуск);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаНаКомпенсациюОтпуска);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаОстаткиОтпусков);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Отсутствие);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаДСВ);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОбращениеСотрудника);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаПереносОтпуска);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОтменаЗаявки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ТИПЗНАЧЕНИЯ(Изменения.Ссылка) КАК ТипДанных,
	|	Изменения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОбъектов)
	|	И НЕ Изменения.ВыгружатьУдаление";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ЗарегистрированныеИзмененияДокументовКЭДО()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись) КАК ТипОбъекта,
	|	ДокументКЭДО.ОснованиеДокумента КАК ОснованиеДокумента,
	|	ДокументКЭДО.КатегорияДокумента КАК КатегорияДокумента,
	|	ДокументКЭДО.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументыПоЗаявкам.Заявка КАК Заявка
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДокументКадровогоЭДО КАК ДокументКЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоЗаявкамКабинетСотрудника КАК ДокументыПоЗаявкам
	|			ПО ДокументКЭДО.ОснованиеДокумента = ДокументыПоЗаявкам.ДокументПоЗаявке
	|		ПО Изменения.Ссылка = ДокументКЭДО.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись)
	|	И НЕ Изменения.ВыгружатьУдаление";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область РаботаСКабинетами

Функция ИдентификаторыАктивныхФизическихЛиц() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Менеджеробмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	
	Возврат МенеджерОбмена.ИдентификаторыАктивныхФизическихЛиц();

КонецФункции

Функция РезультатДеактивацииФизическихЛиц(Идентификаторы) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	Менеджеробмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Ложь);
	
	Результат = МенеджерОбмена.РезультатДеактивацииФизическихЛиц(Идентификаторы);
	
	Возврат Результат.БылиОшибки;

КонецФункции

#КонецОбласти

#Область Прочие

Функция СрезТаблицы(Таблица, НомерКонечнойСтроки)
	
	СрезТаблицы = Таблица.СкопироватьКолонки();
	
	КоличествоСтрок = Таблица.Количество();
	КонечнаяСтрока = Мин(КоличествоСтрок, НомерКонечнойСтроки);
	Для Сч = 0 По КонечнаяСтрока - 1 Цикл
		ЗаполнитьЗначенияСвойств(СрезТаблицы.Добавить(), Таблица[Сч]);
	КонецЦикла;
	
	Возврат СрезТаблицы;

КонецФункции

Процедура ДополнитьСотрудникиФизическихЛиц(СотрудникиФизическихЛиц, ФизическоеЛицо, Сотрудник)
	
	СписокСотрудников = СотрудникиФизическихЛиц[ФизическоеЛицо];
	Если СписокСотрудников = Неопределено Тогда 
		СписокСотрудников = Новый Массив;
	КонецЕсли;
	СписокСотрудников.Добавить(Сотрудник);
	СотрудникиФизическихЛиц.Вставить(ФизическоеЛицо, СписокСотрудников);
	
КонецПроцедуры

Функция НеВыгруженныеРезультатыСогласования(РезультатыСогласования, Выгружено)

	ВсеИдентификаторы = РезультатыСогласования.ВыгрузитьКолонку("ИдентификаторОбъекта");
	НеВыгруженныеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВсеИдентификаторы, Выгружено);
	Возврат ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(НеВыгруженныеОбъекты);

КонецФункции

Функция ЭлектроннаяПодписьКакОбъект()

	Возврат ИнтеграцияКабинетСотрудника.ИспользуетсяВерсияDTO("3.0");

КонецФункции

#КонецОбласти

#КонецОбласти