////////////////////////////////////////////////////////////////////////////////
// Учет доходов и расходов: формирует расчет и формирование резервов по сомнительным долгам.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РезервыПоСомнительнымДолгам

// Рассчитывает сумму резерва по сомнительным долгам для целей налогового учета за налоговый период (с начала года),
// но без ограничения, предусмотренного п. 4 ст. 266 НК РФ.
//
// Параметры:
//  ОтчетныйПериод	 - Дата - Характеризует отчетный период - любая дата последнего месяца отчетного периода. 
//  Организация		 - СправочникСсылка.Организации - организация, по данным которой рассчитывается сумма резерва.
// 
// Возвращаемое значение:
//  Число - сумма резерва
//
Функция СуммаРезерваПоСомнительнымДолгамНУ(ОтчетныйПериод, Организация) Экспорт
	
	Если Не УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, ОтчетныйПериод) Тогда
		Возврат  0;
	КонецЕсли;
	
	ОтчетнаяДата = КонецМесяца(ОтчетныйПериод) + 1;
	Организации  = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДанныеДляНачисленияРезерва = ДанныеДляНачисленияРезерва(ОтчетнаяДата, Организации, МенеджерВременныхТаблиц);
	РасчетРезерва = РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц);
	
	Возврат РасчетРезерва.Итог("РезервНУ");
	
КонецФункции

// Начисляет суммы резерва по каждой задолженности отдельно в соответствии с учетной политикой.
// При начислении сумм для целей налогового учета, может учитываться ограничение, предусмотренное п. 4 ст. 266 НК РФ.
// Такое ограничение должно быть рассчитано ранее, выражено в виде доли и записано в регистр сведений ДолиСписанияКосвенныхРасходов.
//
// Параметры:
// 	СтруктураПараметров - ТаблицаЗначений - параметры получения таблицы резервов. Содержит колонки:
//		* Период - Дата - Дата среза остатков резерва
//		* Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить сумму резерва
// 	ТаблицаДолейКосвенныхРасходов	- ТаблицаЗначений - таблица, с долями косвенных расходов за текущий период.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйНачислениеРезерваПоСомнительнымДолгам.
//
Функция СформироватьТаблицуРасчетаРезервовПоСомнительнымДолгам(СтруктураПараметров, ТаблицаДолейКосвенныхРасходов) Экспорт
	
	ОтчетныйПериод = СтруктураПараметров[0].Период; 
	Организация = СтруктураПараметров[0].Организация;
	
	ФормироватьБУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгам(Организация, ОтчетныйПериод);
	ФормироватьНУ = УчетнаяПолитика.ФормироватьРезервыПоСомнительнымДолгамНУ(Организация, ОтчетныйПериод);
	
	Если Не ФормироватьБУ И Не ФормироватьНУ Тогда
		Возврат НовыйНачислениеРезерваПоСомнительнымДолгам();
	КонецЕсли;
	
	ОтчетнаяДата = КонецМесяца(ОтчетныйПериод) + 1;
	
	Если Не ФормироватьБУ Тогда
		ПрименятьПункт70Приказа34н = Ложь;
	Иначе
		НачалоСледующегоОтчетногоПериода = БухгалтерскийУчет.НачалоОтчетногоГода(ОтчетнаяДата, Организация);
		ПрименятьПункт70Приказа34н = (ОтчетнаяДата = НачалоСледующегоОтчетногоПериода); // см. ниже - выполнение формальных требований приказа
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДанныеДляНачисленияРезерва = ДанныеДляНачисленияРезерва(
		ОтчетнаяДата,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),
		МенеджерВременныхТаблиц,
		Истина, // нужны данные о состоянии резерва
		ПрименятьПункт70Приказа34н);
	
	РасчетРезервов = РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц);
		
	НачислениеРезерва = НовыйНачислениеРезерваПоСомнительнымДолгам(РасчетРезервов);
	
	// Ограничим суммы резервов для исчисления налога на прибыль
	// (п. 4 ст. 266 НК РФ).
	
	Если ФормироватьНУ Тогда
		
		КоэффициентОграничения = ТаблицаДолейКосвенныхРасходов[0].ДоляРезервовПоСомнительнымДолгамНУ;
		
		Если КоэффициентОграничения >= 1 Тогда
			НачислениеРезерва.ЗагрузитьКолонку(НачислениеРезерва.ВыгрузитьКолонку("РезервНУ"), "РезервНУВПределахОграничения");
		Иначе
			РезервНУВПределахОграничения = Окр(НачислениеРезерва.Итог("РезервНУ") * КоэффициентОграничения, 2);
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				РезервНУВПределахОграничения,
				НачислениеРезерва,
				"РезервНУВПределахОграничения",
				"РезервНУ");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Запись Из НачислениеРезерва Цикл
		
		// В соответствии с п. ПБУ 21 изменение оценочного значения включается в доходы или расходы.
		Изменение = Запись.Резерв - Запись.ОстатокРезерваПредыдущегоПериода;
		Если Изменение > 0 Тогда
			Если ФормироватьБУ Тогда
				Запись.Расходы = Изменение;
			КонецЕсли;
		Иначе	
			Запись.Доходы  = - Изменение;
		КонецЕсли;
			
		// В соответствии с п. 5 ст. 266 НК РФ разница в оценке резерва на отчетную дату и предыдущую отчетную дату 
		// включается в состав доходов или расходов.
		
		Разница = Запись.РезервНУВПределахОграничения - Запись.ОстатокРезерваПредыдущегоПериодаНУ;
		
		Если Разница > 0 Тогда
			Если ФормироватьНУ Тогда
				Запись.РасходыНУ = Разница;
			КонецЕсли;
		Иначе	
			Запись.ДоходыНУ  = - Разница;
		КонецЕсли;
			
		// П. 70 Положения по ведению бухгалтерского учета (Приказ Минфина РФ от 29.07.1998 N 34н)
		// Если до конца отчетного года, следующего за годом создания резерва сомнительных долгов, 
		// этот резерв в какой-либо части не будет использован,
		// то неизрасходованные суммы присоединяются при составлении бухгалтерского баланса на конец отчетного года к
		// финансовым результатам.
		
		Если ПрименятьПункт70Приказа34н Тогда
		
			Запись.НеизрасходованныеСуммыРезерваПрошлогоГода = Мин( // Неотрицательное
				Запись.ОстатокРезерваПредыдущегоГода,
				Запись.ОстатокРезерваПредыдущегоПериода,
				Запись.Резерв);
				
		КонецЕсли;
	КонецЦикла;
	
	// Заполним реквизиты для совместимости
	Для Каждого ОписаниеКолонки Из КолонкиДляСовместимости() Цикл
		НачислениеРезерва.ЗагрузитьКолонку(НачислениеРезерва.ВыгрузитьКолонку(ОписаниеКолонки.Значение), ОписаниеКолонки.Ключ);
	КонецЦикла;
	
	Возврат НачислениеРезерва;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетРезервов

// Получает из информационной базы данные для расчета и (если необходимо) начисления резервов.
// Для расчета резервов нужны данные о задолженности.
// Для начисления дополнительно могут быть нужны данные о состоянии ранее начисленных резервов на отчетную дату и начало отчетного периода.
//
// Параметры:
//  ОтчетнаяДата                         - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
//  Организации	                         - Массив - организации, по данным которых начисляется резерв.
//  МенеджерВременныхТаблиц	  			 - МенеджерВременныхТаблиц - используется для сохранения временных таблиц, 
//										   которые далее используются для отбора данных - см. ДанныеВстречнойЗадолженности.
//  ПолучатьСостояниеРезерва			 - Булево - нужны ли для дальнейшего расчета данные о состоянии резерва. Данные определяются на отчетную дату.
//  ПолучатьСостояниеРезерваНачалоГода	 - Булево - нужны ли, в дополнение к данным на отчетную дату, данные о состоянии резерва на начало отчетного года.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ДанныеДляНачисленияРезерва(ОтчетнаяДата, Организации, МенеджерВременныхТаблиц, ПолучатьСостояниеРезерва = Ложь, ПолучатьСостояниеРезерваНачалоГода = Ложь)
	
	ДатаКонцаМесяца  = ОтчетнаяДата - 1;
	
	// Получение данных о дебиторской задолженности.
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ГраницаКонцаМесяца      = Новый Граница(ДатаКонцаМесяца, ВидГраницы.Включая);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетнаяДата",       ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",        Организации);
	Запрос.УстановитьПараметр("ВидыСубконто",       ВидыСубконтоРасчетов);
	Запрос.УстановитьПараметр("ГраницаКонцаМесяца", ГраницаКонцаМесяца);
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ ОтборПоОрганизации
		|ИЗ 
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам 
		|ГДЕ 
		|	АналитикаУчетаПоПартнерам.Организация В (&Организации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|
		|///////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляНачисления.Организация КАК Организация,
		|	ДанныеДляНачисления.Контрагент КАК Контрагент,
		|	ДанныеДляНачисления.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДляНачисления.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	МАКСИМУМ(ДанныеДляНачисления.ДатаДолга) КАК ДатаДолга,
		|	СУММА(ДанныеДляНачисления.Задолженность) КАК Задолженность,
		|	СУММА(ДанныеДляНачисления.ЗадолженностьНУ) КАК ЗадолженностьНУ,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериода) КАК ОстатокРезерваПредыдущегоПериода,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериодаНУ) КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоГода) КАК ОстатокРезерваПредыдущегоГода
		|ПОМЕСТИТЬ ДанныеДляНачисления
		|ИЗ
		|	(ВЫБРАТЬ
		|		Аналитика.Организация КАК Организация,
		|		Аналитика.Контрагент КАК Контрагент,
		|		Аналитика.Договор КАК ДоговорКонтрагента,
		|		Задолженность.РасчетныйДокумент КАК ДокументРасчетовСКонтрагентом,
		|		НАЧАЛОПЕРИОДА(Задолженность.ДатаПлановогоПогашения, ДЕНЬ) КАК ДатаДолга,
		|		Задолженность.ДолгРеглОстаток КАК Задолженность,
		|		Задолженность.ДолгРеглОстаток КАК ЗадолженностьНУ,
		|		0 КАК ОстатокРезерваПредыдущегоПериода,
		|		0 КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|		0 КАК ОстатокРезерваПредыдущегоГода
		|	ИЗ
		|		РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
		|			&ГраницаКонцаМесяца,
		|			АналитикаУчетаПоПартнерам В (
		|				ВЫБРАТЬ 
		|					Т.КлючАналитики 
		|				ИЗ 
		|					ОтборПоОрганизации КАК Т)
		|			И ОбъектРасчетов.Объект <> НЕОПРЕДЕЛЕНО
		|			И ДатаПлановогоПогашения <> ДАТАВРЕМЯ(1,1,1)
		|			И Валюта = АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета) КАК Задолженность
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО 
		|			Аналитика.КлючАналитики = Задолженность.АналитикаУчетаПоПартнерам
		|	ГДЕ
		|		Задолженность.ДолгРеглОстаток <> 0
		|
		|%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%
		|
		|) КАК ДанныеДляНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляНачисления.Организация,
		|	ДанныеДляНачисления.Контрагент,
		|	ДанныеДляНачисления.ДоговорКонтрагента,
		|	ДанныеДляНачисления.ДокументРасчетовСКонтрагентом
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ДокументРасчетовСКонтрагентом";
		
	Иначе
		
		ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(МенеджерВременныхТаблиц, ДатаКонцаМесяца);
		
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
		|ПОМЕСТИТЬ ОтборПоОрганизации
		|ИЗ 
		|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам 
		|ГДЕ 
		|	АналитикаУчетаПоПартнерам.Организация В (&Организации)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КлючАналитики
		|;
		|
		|///////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задолженность.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	Задолженность.ЗаказКлиента              КАК ЗаказКлиента,
		|	Задолженность.Валюта                    КАК Валюта,
		|	Задолженность.РасчетныйДокумент         КАК РасчетныйДокумент,
		|	Задолженность.ДолгРеглОстаток           КАК ДолгРеглОстаток
		|ПОМЕСТИТЬ Задолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
		|			&ГраницаКонцаМесяца,
		|			АналитикаУчетаПоПартнерам В (
		|				ВЫБРАТЬ 
		|					Т.КлючАналитики 
		|				ИЗ 
		|					ОтборПоОрганизации КАК Т)
		|			И Валюта = АналитикаУчетаПоПартнерам.Организация.ВалютаРегламентированногоУчета) КАК Задолженность
		|ГДЕ
		|	Задолженность.ДолгРеглОстаток > 0
		|	И ЗаказКлиента.Объект <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	РасчетныйДокумент,
		|	Валюта
		|;
		|
		|///////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляНачисления.Организация КАК Организация,
		|	ДанныеДляНачисления.Контрагент КАК Контрагент,
		|	ДанныеДляНачисления.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДанныеДляНачисления.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	МАКСИМУМ(ДанныеДляНачисления.ДатаДолга) КАК ДатаДолга,
		|	СУММА(ДанныеДляНачисления.Задолженность) КАК Задолженность,
		|	СУММА(ДанныеДляНачисления.ЗадолженностьНУ) КАК ЗадолженностьНУ,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериода) КАК ОстатокРезерваПредыдущегоПериода,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериодаНУ) КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|	СУММА(ДанныеДляНачисления.ОстатокРезерваПредыдущегоГода) КАК ОстатокРезерваПредыдущегоГода
		|ПОМЕСТИТЬ ДанныеДляНачисления
		|ИЗ
		|	(ВЫБРАТЬ
		|		Аналитика.Организация КАК Организация,
		|		Аналитика.Контрагент КАК Контрагент,
		|		Аналитика.Договор КАК ДоговорКонтрагента,
		|		Задолженность.РасчетныйДокумент КАК ДокументРасчетовСКонтрагентом,
		|		НАЧАЛОПЕРИОДА(ТаблицаОстатков.ДатаПлатежа, ДЕНЬ) КАК ДатаДолга,
		|		Задолженность.ДолгРеглОстаток КАК Задолженность,
		|		Задолженность.ДолгРеглОстаток КАК ЗадолженностьНУ,
		|		0 КАК ОстатокРезерваПредыдущегоПериода,
		|		0 КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|		0 КАК ОстатокРезерваПредыдущегоГода
		|	ИЗ
		|		Задолженность КАК Задолженность
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО 
		|			Аналитика.КлючАналитики = Задолженность.АналитикаУчетаПоПартнерам
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК ТаблицаОстатков
		|		ПО Задолженность.АналитикаУчетаПоПартнерам = ТаблицаОстатков.АналитикаУчетаПоПартнерам
		|			И Задолженность.ЗаказКлиента = ТаблицаОстатков.ЗаказКлиента
		|			И Задолженность.РасчетныйДокумент = ТаблицаОстатков.РасчетныйДокумент
		|			И Задолженность.Валюта = ТаблицаОстатков.Валюта
		|
		|%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%
		|
		|) КАК ДанныеДляНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляНачисления.Организация,
		|	ДанныеДляНачисления.Контрагент,
		|	ДанныеДляНачисления.ДоговорКонтрагента,
		|	ДанныеДляНачисления.ДокументРасчетовСКонтрагентом
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ДокументРасчетовСКонтрагентом";
		
	КонецЕсли;
	
	Если Не ПолучатьСостояниеРезерва Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%", "");
	Иначе
		
		ТекстЗапросаДополнительныхДанных = 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|" + // следующий фрагмент можно редактировать конструктором запроса
		"ВЫБРАТЬ
		|	ОстаткиРезервов.Организация КАК Организация,
		|	ОстаткиРезервов.Субконто1 КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ОстаткиРезервов.Субконто2 = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВЫБОР
		|					КОГДА ОстаткиРезервов.Субконто1 ССЫЛКА Справочник.Организации
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				КОНЕЦ
		|		ИНАЧЕ ОстаткиРезервов.Субконто2
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ОстаткиРезервов.Субконто3 КАК ДокументРасчетовСКонтрагентом,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДолга,
		|	0 КАК Задолженность,
		|	0 КАК ЗадолженностьНУ,
		|	ОстаткиРезервов.СуммаОстатокКт КАК ОстатокРезерваПредыдущегоПериода,
		|	ОстаткиРезервов.СуммаНУОстатокКт КАК ОстатокРезерваПредыдущегоПериодаНУ,
		|	0 КАК ОстатокРезерваПредыдущегоГода
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ОтчетнаяДата,
		|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам)),
		|			&ВидыСубконто,
		|			Организация В (&Организации)
		|				И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК ОстаткиРезервов";
		
		Если ПолучатьСостояниеРезерваНачалоГода Тогда
			НачалоОтчетногоГода = БухгалтерскийУчет.НачалоОтчетногоГода(ОтчетнаяДата - 1, Организации[0]);
			Если ЗначениеЗаполнено(НачалоОтчетногоГода) Тогда
		
				// Следующий запрос отличается периодом и именем полей, в которые помещаются суммы
				
				Запрос.УстановитьПараметр("НачалоГода", НачалоОтчетногоГода);
				
				ТекстЗапросаДополнительныхДанных = ТекстЗапросаДополнительныхДанных + 
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|" + // следующий фрагмент можно редактировать конструктором запроса
				"ВЫБРАТЬ
				|	ОстаткиРезервов.Организация КАК Организация,
				|	ОстаткиРезервов.Субконто1 КАК Контрагент,
				|	ВЫБОР
				|		КОГДА ОстаткиРезервов.Субконто2 = НЕОПРЕДЕЛЕНО
				|			ТОГДА ВЫБОР
				|					КОГДА ОстаткиРезервов.Субконто1 ССЫЛКА Справочник.Организации
				|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка)
				|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				|				КОНЕЦ
				|		ИНАЧЕ ОстаткиРезервов.Субконто2
				|	КОНЕЦ КАК ДоговорКонтрагента,
				|	ОстаткиРезервов.Субконто3 КАК ДокументРасчетовСКонтрагентом,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДолга,
				|	0 КАК Задолженность,
				|	0 КАК ЗадолженностьНУ,
				|	0 КАК ОстатокРезерваПредыдущегоПериода,
				|	0 КАК ОстатокРезерваПредыдущегоПериодаНУ,
				|	ОстаткиРезервов.СуммаОстатокКт КАК ОстатокРезерваПредыдущегоГода
				|ИЗ
				|	РегистрБухгалтерии.Хозрасчетный.Остатки(
				|			&НачалоГода,
				|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам)),
				|			&ВидыСубконто,
				|			Организация В (&Организации)
				|				И Субконто3 <> НЕОПРЕДЕЛЕНО) КАК ОстаткиРезервов";
			КонецЕсли;
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ДОПОЛНИТЕЛЬНЫЕ ДАННЫЕ%", ТекстЗапросаДополнительныхДанных);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	// Сохраним выбранные данные во временную таблицу - для выбора встречного долга (см. ДанныеВстречнойЗадолженности)  
	// Дополним данные о задолженности и резервах показателями договоров и документов.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляНачисления.Организация КАК Организация,
	|	ДанныеДляНачисления.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	ДанныеДляНачисления КАК ДанныеДляНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляНачисления.Организация КАК Организация,
	|	ДанныеДляНачисления.Контрагент КАК Контрагент,
	|	ДанныеДляНачисления.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеДляНачисления.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаПризнанияЗадолженности,
	|	ДанныеДляНачисления.ДатаДолга КАК ДатаДолга,
	|	ДанныеДляНачисления.Задолженность КАК Задолженность,
	|	ДанныеДляНачисления.ЗадолженностьНУ КАК ЗадолженностьНУ,
	|	ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериода КАК ОстатокРезерваПредыдущегоПериода,
	|	ДанныеДляНачисления.ОстатокРезерваПредыдущегоПериодаНУ КАК ОстатокРезерваПредыдущегоПериодаНУ,
	|	ДанныеДляНачисления.ОстатокРезерваПредыдущегоГода КАК ОстатокРезерваПредыдущегоГода
	|ИЗ
	|	ДанныеДляНачисления КАК ДанныеДляНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДанныеДляНачисления.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДанныеДляНачисления.ДокументРасчетовСКонтрагентом = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Получает из информационной базы данные по встречной (кредиторской) задолженности перед контрагентами.
// Данные используются для расчета резервов.
// Ст. 266 НК РФ (с 01.01.2017):
// При наличии у налогоплательщика перед контрагентом встречного обязательства (кредиторской задолженности) 
// сомнительным долгом признается соответствующая задолженность перед налогоплательщиком в той части,
// которая превышает указанную кредиторскую задолженность налогоплательщика перед этим контрагентом.
//
// Параметры:
//  ОтчетнаяДата              - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
//  МенеджерВременныхТаблиц	  - МенеджерВременныхТаблиц - содержит временные таблицы, используемые для отбора данных.
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ДанныеВстречнойЗадолженности(ОтчетнаяДата, МенеджерВременныхТаблиц)
	
	// Определим счета расчетов.
	// Кредиторская задолженность перед контрагентами может числиться как:
	// - задолженность перед поставщиками на 60-х счетах
	// - авансы покупателей на счетах 62.02
	// - прочая задолженность перед поставщиками и покупателями
	// - задолженность по полученным кредитам и займам
	// Выбирается только кредиторская задолженность, номинированная в рублях.
	// Отбираются счета 
	// - 60 (за исключением 60.02)
	// - 62.02
	// - 66
	// - 67
	// - 76.02
	// - 76.05
	// - 76.06
	// - 76.09.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|	(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям),
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками), 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками), 
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным))
	|	И НЕ Хозрасчетный.Валютный";
		
	СчетаРасчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получение данных о дебиторской задолженности.
	
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.УстановитьПараметр("ОтчетнаяДата",  	ОтчетнаяДата);
	Запрос.УстановитьПараметр("СчетаРасчетов", 	СчетаРасчетов);
	Запрос.УстановитьПараметр("ВидыСубконто",  	ВидыСубконтоРасчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задолженность.Организация КАК Организация,
	|	Задолженность.Субконто1 КАК Контрагент,
	|	СУММА(ЕСТЬNULL(Задолженность.СуммаОстатокКт, 0)) КАК Задолженность,
	|	СУММА(ЕСТЬNULL(Задолженность.СуммаНУОстатокКт, 0)) КАК ЗадолженностьНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В (&СчетаРасчетов),
	|			&ВидыСубконто,
	|			(Организация, Субконто1) В
	|				(ВЫБРАТЬ
	|					Контрагенты.Организация,
	|					Контрагенты.Контрагент
	|				ИЗ
	|					Контрагенты КАК Контрагенты)) КАК Задолженность
	|ГДЕ
	|	Задолженность.СуммаОстатокКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.Организация,
	|	Задолженность.Субконто1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент";
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Рассчитывает резерв по сомнительным долгам по данным о задолженности покупателей,
// отраженной в бухгалтерском и налоговом учете.
// Эти данные должны быть предварительно получены с помощью ДанныеДляНачисленияРезерва().
// Для целей налогового учета не учитывается ограничение, предусмотренное п. 4 ст. 266 НК РФ.
//
// Параметры:
//  ДанныеДляНачисленияРезерва - см. ДанныеДляНачисленияРезерва
//  ОтчетнаяДата               - Дата - дата, на которую начисляется резерв. Обычно первое число месяца.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, см. НовыйРасчетРезерваПоСомнительнымДолгам - содержит детальный расчет резерва.
//
Функция РассчитатьРезерв(ДанныеДляНачисленияРезерва, ОтчетнаяДата, МенеджерВременныхТаблиц)
	
	РасчетРезерва = НовыйРасчетРезерваПоСомнительнымДолгам();
	
	Пока ДанныеДляНачисленияРезерва.Следующий() Цикл
		
		Запись = РасчетРезерва.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДляНачисленияРезерва);
		
		Если ЗначениеЗаполнено(ДанныеДляНачисленияРезерва.ДатаДолга) Тогда 
			СрокЗадолженности = (ОтчетнаяДата - ДанныеДляНачисленияРезерва.ДатаДолга) / 86400 - 1;
		Иначе
			СрокЗадолженности = 0;
		КонецЕсли;
		
		Запись.СрокЗадолженности = СрокЗадолженности;
		Запись.Просрочка = СрокЗадолженности;
		Запись.ДатаПризнанияЗадолженностиПросроченной = ДанныеДляНачисленияРезерва.ДатаДолга;
		
	КонецЦикла;
	
	// С 2017 года законом 401-ФЗ от 30.11.2016 внесена поправка в определение сомнительных долгов.
	// Если есть сомнительные долги, то нужно их уменьшить на суммы встречной задолженности перед контрагентом.
	Если ОтчетнаяДата >= '2017-01-01' И РасчетРезерва.Итог("Просрочка") > 0 Тогда
		ДанныеВстречнойЗадолженности = ДанныеВстречнойЗадолженности(ОтчетнаяДата, МенеджерВременныхТаблиц);
		РаспределитьВстречнуюЗадолженностьНаСомнительныеДолгиКонтрагентов(РасчетРезерва, ДанныеВстречнойЗадолженности);
	КонецЕсли;
	
	Для каждого Запись Из РасчетРезерва Цикл
		
		// КоэффициентРезервирования - это доля от суммы задолженности, на которую формируется резерв.
		// Коэффициент зависит от срока просрочки - чем более просроченная задолженность, тем больше резерв.
		// Если долг пока еще не вызывает сомнения, то и резерв не формируется (K = 0).
		Если Запись.Просрочка > 90 Тогда
			Запись.КоэффициентРезервирования = 1;
		ИначеЕсли Запись.Просрочка >= 45 Тогда
			Запись.КоэффициентРезервирования = 0.5;
		Иначе
			Запись.КоэффициентРезервирования = 0;	
		КонецЕсли;
		
		Запись.Резерв   = Макс(Запись.Задолженность - Запись.ВстречнаяЗадолженность, 0) * Запись.КоэффициентРезервирования;
		Запись.РезервНУ = Макс(Запись.ЗадолженностьНУ - Запись.ВстречнаяЗадолженностьНУ, 0) * Запись.КоэффициентРезервирования;
			
	КонецЦикла;
	
	Возврат РасчетРезерва;
	
КонецФункции

Процедура РаспределитьВстречнуюЗадолженностьНаСомнительныеДолгиКонтрагентов(РасчетРезерва, ДанныеВстречнойЗадолженности)
	
	ТаблицаСомнительныхДолговКонтрагента = РасчетРезерва.СкопироватьКолонки(
		"ДатаПризнанияЗадолженности,
		|Задолженность,
		|ЗадолженностьНУ");
	ТаблицаСомнительныхДолговКонтрагента.Колонки.Добавить("СтрокаРасчета");
	
	РасчетРезерва.Индексы.Добавить("Организация, Контрагент");
	
	Отбор = Новый Структура("Организация, Контрагент");
	Пока ДанныеВстречнойЗадолженности.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеВстречнойЗадолженности); 
		ЗаполнитьТаблицуСомнительныхДолговКонтрагента(РасчетРезерва, ТаблицаСомнительныхДолговКонтрагента, Отбор);
		
		// Распределение встречной задолженности в БУ
		РаспределяемаяСумма = ДанныеВстречнойЗадолженности.Задолженность;
		Если ТаблицаСомнительныхДолговКонтрагента.Итог("Задолженность") > РаспределяемаяСумма Тогда
			
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
			
				Если РаспределяемаяСумма = 0 Тогда
					Прервать;
				КонецЕсли; 
				
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность = Мин(СомнительныйДолг.Задолженность, РаспределяемаяСумма);
				РаспределяемаяСумма = РаспределяемаяСумма - СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность;
			
			КонецЦикла; 
			
		Иначе	
							
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженность = СомнительныйДолг.Задолженность;
			КонецЦикла; 
				
		КонецЕсли;	
		
		// Распределение встречной задолженности в НУ
		РаспределяемаяСумма = ДанныеВстречнойЗадолженности.ЗадолженностьНУ;
		Если ТаблицаСомнительныхДолговКонтрагента.Итог("ЗадолженностьНУ") > РаспределяемаяСумма Тогда
			
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
			
				Если РаспределяемаяСумма = 0 Тогда
					Прервать;
				КонецЕсли; 
				
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ = Мин(СомнительныйДолг.ЗадолженностьНУ, РаспределяемаяСумма);
				РаспределяемаяСумма = РаспределяемаяСумма - СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ;
			
			КонецЦикла; 
			
		Иначе	
							
			Для каждого СомнительныйДолг Из ТаблицаСомнительныхДолговКонтрагента Цикл
				СомнительныйДолг.СтрокаРасчета.ВстречнаяЗадолженностьНУ = СомнительныйДолг.ЗадолженностьНУ;
			КонецЦикла; 
				
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьТаблицуСомнительныхДолговКонтрагента(РасчетРезерва, ТаблицаСомнительныхДолговКонтрагента, Отбор)
	
	ТаблицаСомнительныхДолговКонтрагента.Очистить();
	Долги = РасчетРезерва.НайтиСтроки(Отбор);
	
	Для каждого СтрокаДолга Из Долги Цикл
		
		Если СтрокаДолга.Просрочка = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаСомнительныхДолговКонтрагента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДолга);
		НоваяСтрока.СтрокаРасчета = СтрокаДолга;
		
	КонецЦикла; 
	
	ТаблицаСомнительныхДолговКонтрагента.Сортировать("ДатаПризнанияЗадолженности");
		
КонецПроцедуры

#КонецОбласти

#Область Коллекции

Функция НовыйРасчетРезерваПоСомнительнымДолгам()
	
	ТипСрок  = ОбщегоНазначения.ОписаниеТипаЧисло(5,  0, ДопустимыйЗнак.Неотрицательный); // сроки исчисляем в календарных днях
	ТипСумма = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы.Сумма.Тип;
	
	РасчетРезерва = Новый ТаблицаЗначений;
	РасчетРезерва.Колонки.Добавить("Организация",                            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РасчетРезерва.Колонки.Добавить("Контрагент",                             ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "ТипЗначения"));
	РасчетРезерва.Колонки.Добавить("ДоговорКонтрагента",                     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ТипЗначения"));
	РасчетРезерва.Колонки.Добавить("ДокументРасчетовСКонтрагентом",          ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ТипЗначения"));
	РасчетРезерва.Колонки.Добавить("ДатаПризнанияЗадолженности",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетРезерва.Колонки.Добавить("СрокЗадолженности",                      ТипСрок);
	РасчетРезерва.Колонки.Добавить("СрокОплатыУстановленДоговором",          Новый ОписаниеТипов("Булево"));
	РасчетРезерва.Колонки.Добавить("СрокОплатыПоДоговору",                   ТипСрок);
	РасчетРезерва.Колонки.Добавить("СрокОплаты",                             ТипСрок);
	РасчетРезерва.Колонки.Добавить("ДатаПризнанияЗадолженностиПросроченной", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	РасчетРезерва.Колонки.Добавить("Просрочка",                              ТипСрок);
	РасчетРезерва.Колонки.Добавить("КоэффициентРезервирования",              ОбщегоНазначения.ОписаниеТипаЧисло(2, 1, ДопустимыйЗнак.Неотрицательный));
	РасчетРезерва.Колонки.Добавить("Задолженность",                          ТипСумма);
	РасчетРезерва.Колонки.Добавить("ЗадолженностьНУ",                        ТипСумма);
	РасчетРезерва.Колонки.Добавить("ВстречнаяЗадолженность",              	 ТипСумма);
	РасчетРезерва.Колонки.Добавить("ВстречнаяЗадолженностьНУ",               ТипСумма);
	РасчетРезерва.Колонки.Добавить("Резерв",                                 ТипСумма);
	РасчетРезерва.Колонки.Добавить("РезервНУ",                               ТипСумма);
	
	// Следующие колонки не имеют отношения к начислению резерва, но нужны только для того, чтобы с меньшими затратами,
	// заранее получить данные, нужные для начисления резерва.
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоПериода",       ТипСумма);
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоПериодаНУ",     ТипСумма);
	РасчетРезерва.Колонки.Добавить("ОстатокРезерваПредыдущегоГода",          ТипСумма);
		
	Возврат РасчетРезерва;
	
КонецФункции

Функция НовыйНачислениеРезерваПоСомнительнымДолгам(РасчетРезерва = Неопределено)
	
	ТипСумма = Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы.Сумма.Тип;
	
	Если РасчетРезерва = Неопределено Тогда
		НачислениеРезерва = НовыйРасчетРезерваПоСомнительнымДолгам();
	Иначе
		НачислениеРезерва = РасчетРезерва.Скопировать();
	КонецЕсли;
	
	// См. п. 70 Приказа Минфина 34н с учетом письма Минфина России от 12.07.2004 г. № 03-03-05/3/55.
	КвалификаторыНеотрицательнаяСумма = Новый КвалификаторыЧисла(
		ТипСумма.КвалификаторыЧисла.Разрядность,
		ТипСумма.КвалификаторыЧисла.РазрядностьДробнойЧасти,
		ДопустимыйЗнак.Неотрицательный);
	ТипНеотрицательнаяСумма = Новый ОписаниеТипов(ТипСумма,,,КвалификаторыНеотрицательнаяСумма);
	НачислениеРезерва.Колонки.Добавить("НеизрасходованныеСуммыРезерваПрошлогоГода", ТипНеотрицательнаяСумма);
		
	НачислениеРезерва.Колонки.Добавить("РезервНУВПределахОграничения",              ТипСумма); // см. п. 4 ст. 266 НК РФ
	
	НачислениеРезерва.Колонки.Добавить("Расходы",                                   ТипСумма);
	НачислениеРезерва.Колонки.Добавить("Доходы",                                    ТипСумма);
	НачислениеРезерва.Колонки.Добавить("РасходыНУ",                                 ТипСумма);
	НачислениеРезерва.Колонки.Добавить("ДоходыНУ",                                  ТипСумма);
	
	// Для совместимости:
	
	Для Каждого ОписаниеКолонки Из КолонкиДляСовместимости() Цикл
		Если НачислениеРезерва.Колонки.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НачислениеРезерва.Колонки.Добавить(ОписаниеКолонки.Ключ, НачислениеРезерва.Колонки[ОписаниеКолонки.Значение].ТипЗначения);
	КонецЦикла;
	
	Возврат НачислениеРезерва;
	
КонецФункции

Функция КолонкиДляСовместимости()
	
	// В регистре сведений РасчетРезервовПоСомнительнымДолгам хранятся не все данные расчета,
	// поэтому некоторые имена колонок могут оказаться неоднозначными.
	// Соответствие таких неоднозначных имен должно храниться только здесь.
	
	Колонки = Новый Структура; // Ключ - имя колонки для совместимости; Значение - актуальное имя колонки
	
	Колонки.Вставить("СуммаЗадолженности",                 "Задолженность");
	Колонки.Вставить("НачисленоРанееБУ",                   "ОстатокРезерваПредыдущегоПериода");
	Колонки.Вставить("НачисленоБУ",                        "Расходы");
	Колонки.Вставить("ВосстановленоБУ",                    "Доходы");
	
	Колонки.Вставить("СуммаЗадолженностиНУ",               "ЗадолженностьНУ");
	Колонки.Вставить("НачисленоРанееНУ",                   "ОстатокРезерваПредыдущегоПериодаНУ");
	Колонки.Вставить("НачисленоНУ",                        "РасходыНУ");
	Колонки.Вставить("ВосстановленоНУ",                    "ДоходыНУ");
	
	Колонки.Вставить("ПрисоединеноБУ",                     "НеизрасходованныеСуммыРезерваПрошлогоГода");
	Колонки.Вставить("НачисленоСНачалаГодаНУ",             "РезервНУВПределахОграничения");
	
	Колонки.Вставить("ДатаВозникновенияЗадолженности",     "ДатаПризнанияЗадолженностиПросроченной");
	Колонки.Вставить("СрокЗадолженности",                  "Просрочка");
	
	Возврат Колонки;
	
КонецФункции

#КонецОбласти

#КонецОбласти


