#Область ПрограммныйИнтерфейс

// Емкость упаковки по GTIN.
// Результат выполнения операции будет передан в ОписаниеОповещения в переданном параметре.
// 
// Параметры:
//  ПараметрыЗапроса - (см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных).
Процедура ЕмкостьУпаковкиПоGTIN(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ЕмкостьУпаковкиПоGTIN;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Получает места осуществления деятельности из ГИС МТ.
// Результат выполнения операции будет передан в ОписаниеОповещения в переданном параметре.
// 
// Параметры:
//  ПараметрыЗапроса - (см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных).
Процедура МестаОсуществленияДеятельности(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.МестаОсуществленияДеятельности;
	ПараметрыОбработки.ВидПродукции   = ПараметрыЗапроса.Параметры.ВидПродукции;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Получает места осуществления деятельности из ГИС МТ (метод получения списка).
// Результат выполнения операции будет передан в ОписаниеОповещения в переданном параметре.
// 
// Параметры:
//  ПараметрыЗапроса - (см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных).
Процедура СписокМестОсуществленияДеятельности(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.СписокМестОсуществленияДеятельности;
	ПараметрыОбработки.ВидПродукции   = ПараметрыЗапроса.Параметры.ВидПродукции;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Обновляет список CDN-площадок и время их отклика
// Результат выполнения операции будет передан в ОписаниеОповещения в переданном параметре.
// 
// Параметры:
//  ПараметрыЗапроса - (см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных).
Процедура АктуализацияСпискаCDNПлощадок(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                  = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                           = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                   = ДоступныеМетодыИнтерфейса.АктуализацияCDNПлощадок;
	ПараметрыОбработки.ПроверкаПоТокенуРозничнойПродажи = Истина;
	ПараметрыОбработки.УникальныйИдентификатор          = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                  = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет операцию авторизации ГИС МТ.
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура ВыполнитьАвторизациюГИСМТ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса         = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ВыполнитьАвторизацию;
	ПараметрыОбработки.ВидПродукции   = ПараметрыЗапроса.Параметры;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет операцию получения розничного токена в ГИС МТ.
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура АвторизацияГИСМТРозничныйТокен(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                  = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                           = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                   = ДоступныеМетодыИнтерфейса.ПолучениеРозничногоТокена;
	ПараметрыОбработки.ПроверкаПоТокенуРозничнойПродажи = Истина;
	ПараметрыОбработки.ОрганизацияПоСертификатам        = Не ЗначениеЗаполнено(ПараметрыЗапроса.Организация);
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет операцию инициализации локальной конфигурации Локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура ИнициализироватьКонфигурациюЛМЧЗ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                  = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                           = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                   = ДоступныеМетодыИнтерфейса.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ;
	ПараметрыОбработки.ПроверкаПоТокенуРозничнойПродажи = Истина;
	ПараметрыОбработки.УникальныйИдентификатор          = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                  = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет операцию обновления статуса конфигурации Локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура ОбновитьСтатусЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                     = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                      = ДоступныеМетодыИнтерфейса.ОбновлениеСтатусаЛокальногоМодуляЧЗ;
	ПараметрыОбработки.НеТребуетсяАвторизацияПоКлючуСессии = Истина;
	ПараметрыОбработки.УникальныйИдентификатор             = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                     = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет операцию изменения пароля администрирования конфигурации Локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура ИзменитьПарольДоступаКЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                     = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                      = ДоступныеМетодыИнтерфейса.СменаПароляАдминистрированияЛокальногоМодуляЧЗ;
	ПараметрыОбработки.НеТребуетсяАвторизацияПоКлючуСессии = Истина;
	ПараметрыОбработки.УникальныйИдентификатор             = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                     = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Выполняет настройку товарных групп конфигурации Локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура НастроитьСписокТоварныхГруппЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                     = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                      = ДоступныеМетодыИнтерфейса.НастройкаСпискаТоварныхГрупп;
	ПараметрыОбработки.ПроверкаПоТокенуРозничнойПродажи    = Истина;
	ПараметрыОбработки.УникальныйИдентификатор             = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                     = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

// Проверяет конфигурацию Локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыЗапроса - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных.
Процедура ПолучитьКонфигурациюЛокальнойКонфигурацииЛМЧЗ(ПараметрыЗапроса) Экспорт
	
	ПараметрыОбработки                                     = ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса);
	ДоступныеМетодыИнтерфейса                              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	ПараметрыОбработки.ИмяОбработчика                      = ДоступныеМетодыИнтерфейса.ПолучениеКонфигурацииЛокальногоМодуляЧЗ;
	ПараметрыОбработки.НеТребуетсяАвторизацияПоКлючуСессии = Истина;
	ПараметрыОбработки.УникальныйИдентификатор             = ПараметрыЗапроса.УникальныйИдентификатор;
	ПараметрыОбработки.ВыполнениеВФоне                     = Истина;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет результат авторизации на наличие ошибки.
// 
// Параметры:
//  РезультатАвторизации - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗавершенияОбработки.
// 
// Возвращаемое значение:
//  Булево - Авторизация ГИС МТ выполнена с ошибкой.
Функция АвторизацияГИСМТВыполненаСОшибкой(РезультатАвторизации) Экспорт
	
	ЕстьОшибка = Ложь;
	
	Если РезультатАвторизации <> Неопределено
		И РезультатАвторизации.ЕстьОшибки Тогда
		
		Если ЗначениеЗаполнено(РезультатАвторизации.ТекстОшибки) Тогда
			ПоказатьПредупреждение(, РезультатАвторизации.ТекстОшибки);
		КонецЕсли;
		
		ЕстьОшибка = Истина
		
	КонецЕсли;
	
	Возврат ЕстьОшибка;
	
КонецФункции

#Область ИнтерфейсИСМП

Процедура ОбработкаМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки)
	
	ПараметрыОбработки.ВыполнениеНаКлиенте = ПараметрыЗапроса.ВыполнениеНаКлиенте;
	ДоступныеМетодыИнтерфейса              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	
	АсинхронныйЗапуск = Ложь;
	#Если ВебКлиент Тогда
		АсинхронныйЗапуск = ПараметрыОбработки.ВыполнениеНаКлиенте;
	#КонецЕсли
	
	Если ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ВыполнитьАвторизацию Тогда
		Если Не ПараметрыОбработки.ВызовПослеАвторизации Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ПолучениеРозничногоТокена Тогда
		Если Не ПараметрыОбработки.ВызовПослеАвторизации Тогда
			ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
		КонецЕсли;
	ИначеЕсли Не ПараметрыЗапроса.ВыполнениеНаКлиенте Тогда
		ИнтерфейсИСМПОбщегоНазначенияВызовСервера.ЗапросМетодаИнтерфейсаСОбработкой(ПараметрыОбработки);
	Иначе
		ЗапросМетодаИнтерфейсаСОбработкой(ПараметрыОбработки, ПараметрыЗапроса, АсинхронныйЗапуск);
	КонецЕсли;
	
	Если Не АсинхронныйЗапуск Тогда
		Если ПараметрыОбработки.ВыполнениеВФоне И Не ПараметрыЗапроса.ВыполнениеНаКлиенте Тогда
			ОжидатьВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
		Иначе
			ОбработкаРезультатаВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ЗапросМетодаИнтерфейсаСОбработкой(ПараметрыОбработки, ПараметрыЗапроса, АсинхронныйЗапуск) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОбработки.Организация)
		И ПараметрыОбработки.ОрганизацияПоСертификатам = Неопределено Тогда
		ПараметрыОбработки.ОрганизацияПоСертификатам = Истина;
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессииРозница = Ложь;
	ТекстОшибки                           = Неопределено;
	
	ДоступныеМетодыИнтерфейса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
	
	Если ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ЕмкостьУпаковкиПоGTIN Тогда
		
		Если ПараметрыОбработки.ВыполнениеНаКлиенте Тогда
			
			ПараметрыОбработки.ЕстьОшибки  = Истина;
			ПараметрыОбработки.ТекстОшибки = НСтр("ru = 'Данный метод недоступен на клиенте.';
													|en = 'Данный метод недоступен на клиенте.'");
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.МестаОсуществленияДеятельности Тогда
		
		Если ПараметрыОбработки.ВыполнениеНаКлиенте Тогда
			
			ПараметрыОбработки.ЕстьОшибки  = Истина;
			ПараметрыОбработки.ТекстОшибки = НСтр("ru = 'Данный метод недоступен на клиенте.';
													|en = 'Данный метод недоступен на клиенте.'");
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.СписокМестОсуществленияДеятельности Тогда
		
		Если ПараметрыОбработки.ВыполнениеНаКлиенте Тогда
			
			ПараметрыОбработки.ЕстьОшибки  = Истина;
			ПараметрыОбработки.ТекстОшибки = НСтр("ru = 'Данный метод недоступен на клиенте.';
													|en = 'Данный метод недоступен на клиенте.'");
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.АктуализацияCDNПлощадок Тогда
		
		Если ПараметрыОбработки.ВыполнениеНаКлиенте Тогда
			
			ПараметрыОбработки.ЕстьОшибки  = Истина;
			ПараметрыОбработки.ТекстОшибки = НСтр("ru = 'Данный метод недоступен на клиенте.';
													|en = 'Данный метод недоступен на клиенте.'");
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ Тогда
		
		#Если ВебКлиент Тогда
		
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнфо.ВерсияПриложения, "8.3.21.0") < 0 Тогда
				ТекстОшибки = НСтр("ru = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.';
					|en = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.'");
				Возврат;
			КонецЕсли;
			
			РезультатНастройкиЛМЧЗ = Ждать ОбщегоНазначенияИСМПВебКлиент.ВыполнитьИнициализациюКонфигурацииЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#Иначе
			
			РезультатНастройкиЛМЧЗ = ОбщегоНазначенияИСМПКлиент.ВыполнитьИнициализациюКонфигурацииЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#КонецЕсли
		
		ТребуетсяОбновлениеКлючаСессииРозница = РезультатНастройкиЛМЧЗ.ТребуетсяОбновлениеКлючаСессииРозница;
		ТекстОшибки                           = РезультатНастройкиЛМЧЗ.ТекстОшибки;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ОбновлениеСтатусаЛокальногоМодуляЧЗ Тогда
		
		#Если ВебКлиент Тогда
		
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнфо.ВерсияПриложения, "8.3.21.0") < 0 Тогда
				ТекстОшибки = НСтр("ru = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.';
					|en = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.'");
				Возврат;
			КонецЕсли;
			
			РезультатНастройкиЛМЧЗ = Ждать ОбщегоНазначенияИСМПВебКлиент.ЗапроситьСтатусЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#Иначе
			
			РезультатНастройкиЛМЧЗ = ОбщегоНазначенияИСМПКлиент.ЗапроситьСтатусЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#КонецЕсли
		
		ТекстОшибки                           = РезультатНастройкиЛМЧЗ.ТекстОшибки;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.СменаПароляАдминистрированияЛокальногоМодуляЧЗ Тогда
		
		#Если ВебКлиент Тогда
		
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнфо.ВерсияПриложения, "8.3.21.0") < 0 Тогда
				ТекстОшибки = НСтр("ru = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.';
					|en = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.'");
				Возврат;
			КонецЕсли;
			
			РезультатНастройкиЛМЧЗ = Ждать ОбщегоНазначенияИСМПВебКлиент.ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.Параметры.НовыйПароль,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#Иначе
			
			РезультатНастройкиЛМЧЗ = ОбщегоНазначенияИСМПКлиент.ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.Параметры.НовыйПароль,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#КонецЕсли
		
		ТекстОшибки                           = РезультатНастройкиЛМЧЗ.ТекстОшибки;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.НастройкаСпискаТоварныхГрупп Тогда
		
		#Если ВебКлиент Тогда
		
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнфо.ВерсияПриложения, "8.3.21.0") < 0 Тогда
				ТекстОшибки = НСтр("ru = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.';
					|en = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.'");
				Возврат;
			КонецЕсли;
			
			РезультатНастройкиЛМЧЗ = Ждать ОбщегоНазначенияИСМПВебКлиент.НастроитьТоварныеГруппыЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.Параметры.ПараметрыНастройкиТоварныхГрупп,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#Иначе
			
			РезультатНастройкиЛМЧЗ = ОбщегоНазначенияИСМПКлиент.НастроитьТоварныеГруппыЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.Параметры.ПараметрыНастройкиТоварныхГрупп,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#КонецЕсли
		
		ТребуетсяОбновлениеКлючаСессииРозница = РезультатНастройкиЛМЧЗ.ТребуетсяОбновлениеКлючаСессииРозница;
		ТекстОшибки                           = РезультатНастройкиЛМЧЗ.ТекстОшибки;
		
	ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ПолучениеКонфигурацииЛокальногоМодуляЧЗ Тогда
		
		#Если ВебКлиент Тогда
		
			СистемнаяИнфо = Новый СистемнаяИнформация;
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнфо.ВерсияПриложения, "8.3.21.0") < 0 Тогда
				ТекстОшибки = НСтр("ru = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.';
					|en = 'Обмен с Локальным модулем ""Честный знак"" из веб-клиента недоступен для текущей версии платформы.
					|Используйте тонкий клиент.'");
				Возврат;
			КонецЕсли;
			
			РезультатНастройкиЛМЧЗ = Ждать ОбщегоНазначенияИСМПВебКлиент.ПолучитьКонфигурациюЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#Иначе
			
			РезультатНастройкиЛМЧЗ = ОбщегоНазначенияИСМПКлиент.ПолучитьКонфигурациюЛокальногоМодуляЧЗ(
				ПараметрыОбработки.Параметры.Организация,
				ПараметрыОбработки.Параметры.ПараметрыУстановки,
				ПараметрыОбработки.УникальныйИдентификатор);
			
		#КонецЕсли
		
		ТекстОшибки                           = РезультатНастройкиЛМЧЗ.ТекстОшибки;
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Внутренняя ошибка. Не описан метод интерфейса с запросом ключа авторизации %1';
				|en = 'Внутренняя ошибка. Не описан метод интерфейса с запросом ключа авторизации %1'"),
			ПараметрыОбработки.ИмяОбработчика);
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессииРозница Тогда
		
		ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессииРозница = Истина;
	
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ПараметрыОбработки.ЕстьОшибки  = Истина;
		ПараметрыОбработки.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		Если ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ
			Или ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ОбновлениеСтатусаЛокальногоМодуляЧЗ
			Или ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.СменаПароляАдминистрированияЛокальногоМодуляЧЗ
			Или ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.НастройкаСпискаТоварныхГрупп
			Или ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ПолучениеКонфигурацииЛокальногоМодуляЧЗ Тогда
			ПараметрыОбработки.Результат = РезультатНастройкиЛМЧЗ;
		Иначе
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не описан метод интерфейса с запросом ключа авторизации (после авторизации).';
									|en = 'Внутренняя ошибка. Не описан метод интерфейса с запросом ключа авторизации (после авторизации).'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если АсинхронныйЗапуск Тогда
		
		Если ПараметрыОбработки.ВыполнениеВФоне И Не ПараметрыЗапроса.ВыполнениеНаКлиенте Тогда
			ОжидатьВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
		Иначе
			ОбработкаРезультатаВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Асинх Процедура ПослеВыполненияЗапросаИнтерфейсаСОбработкой(ПараметрыОбработки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыОбработки) = Тип("Обещание") Тогда
		ПараметрыОбработки = Ждать ПараметрыОбработки;
	КонецЕсли;
	
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыЗапроса;
	
	Если ПараметрыОбработки.ВыполнениеВФоне И Не ПараметрыЗапроса.ВыполнениеНаКлиенте Тогда
		ОжидатьВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	Иначе
		ОбработкаРезультатаВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки)
	
	Результат = ПараметрыЗавершенияОбработки();
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыЗапроса",   ПараметрыЗапроса);
	ДополнительныеПараметры.Вставить("ПараметрыОбработки", ПараметрыОбработки);
	
	Если ПараметрыОбработки.ОрганизацияПоСертификатам <> Неопределено
		И ПараметрыОбработки.ОрганизацияПоСертификатам Тогда
		
		ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
			"ПоискОрганизацияПоСертификатамЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.НайтиДействительныеЛичныеСертификаты(ОповещениеПриЗапросеКлючаСессии);
		Возврат;
		
	ИначеЕсли ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
		
		Если ПараметрыОбработки.ВызовПослеАвторизации Тогда
			Результат.ЕстьОшибки  = Истина;
			Если ЗначениеЗаполнено(ПараметрыОбработки.ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить авторизацию ГИС МТ по причине:
						       |%1';
						       |en = 'Не удалось выполнить авторизацию ГИС МТ по причине:
						       |%1'"),
					ПараметрыОбработки.ТекстОшибки);
			КонецЕсли;
			Результат.ТекстОшибки = ТекстОшибки;
		Иначе
			
			ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
				"ЗапроситьКлючСессииЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(
					ПараметрыОбработки.Организация);
			
			ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
				ПараметрыЗапросаКлючаСессии,
				ОповещениеПриЗапросеКлючаСессии);
				
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессииРозница Тогда
		
		Если ПараметрыОбработки.ВызовПослеАвторизации Тогда
			Результат.ЕстьОшибки  = Истина;
			Если ЗначениеЗаполнено(ПараметрыОбработки.ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось выполнить авторизацию ГИС МТ по причине:
						       |%1';
						       |en = 'Не удалось выполнить авторизацию ГИС МТ по причине:
						       |%1'"),
					ПараметрыОбработки.ТекстОшибки);
			КонецЕсли;
			Результат.ТекстОшибки = ТекстОшибки;
		Иначе
			
			ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
				"ЗапроситьРозничныйКлючСессииЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииИСМПРозница(ПараметрыОбработки.Организация);
			
			ДополнительныеПараметры = ИнтерфейсАвторизацииИСМПКлиент.ДополнительныеПараметрыЗапросаКлючаСессии();
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ПараметрыОбработки.Параметры);
			
			ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
				ПараметрыЗапросаКлючаСессии,
				ОповещениеПриЗапросеКлючаСессии,
				ДополнительныеПараметры);
				
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбработки.ЕстьОшибки Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось запросить данные ГИС МТ по причине: %1';
				|en = 'Не удалось запросить данные ГИС МТ по причине: %1'"),
			ПараметрыОбработки.ТекстОшибки);
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = ТекстОшибки;
	Иначе
		Результат.Результат = ПараметрыОбработки.Результат;
	КонецЕсли;
	
	ЛогированиеЗапросовИСМПВызовСервера.ДописатьВТекущийЛогДанныеИзФоновогоЗадания(ПараметрыОбработки.Результат);
	ВыполнитьОбработкуОповещения(ПараметрыЗапроса.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

Процедура ОжидатьВыполненияМетодаИнтерфейсаСАвторизацией(ПараметрыЗапроса, ПараметрыОбработки)
	
	Если ПараметрыОбработки.ДлительнаяОперация <> Неопределено Тогда
		
		ВыводитьОкноОжидания = Истина;
		Если ТипЗнч(ПараметрыЗапроса.Параметры) = Тип("Структура") И ПараметрыЗапроса.Параметры.Свойство("НеВыводитьОкноОжидания") Тогда
			ВыводитьОкноОжидания = Не ПараметрыЗапроса.Параметры.НеВыводитьОкноОжидания;
		КонецЕсли;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		
		ДоступныеМетодыИнтерфейса              = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ДоступныеМетодыИнтерфейса();
		Если ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Инициализация конфигурации Локального модуля ""Честный Знак""';
																|en = 'Инициализация конфигурации Локального модуля ""Честный Знак""'");
		ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ОбновлениеСтатусаЛокальногоМодуляЧЗ Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Получение статуса системы Локальный модуль ""Честный Знак""';
																|en = 'Получение статуса системы Локальный модуль ""Честный Знак""'");
		ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.СменаПароляАдминистрированияЛокальногоМодуляЧЗ Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Смена пароля администратора системы Локальный модуль ""Честный Знак""';
																|en = 'Смена пароля администратора системы Локальный модуль ""Честный Знак""'");
		ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.НастройкаСпискаТоварныхГрупп Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Настройка товарных групп Локальный модуль ""Честный Знак""';
																|en = 'Настройка товарных групп Локальный модуль ""Честный Знак""'");
		ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.ПолучениеКонфигурацииЛокальногоМодуляЧЗ Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Получение конфигурации Локальный модуль ""Честный Знак""';
																|en = 'Получение конфигурации Локальный модуль ""Честный Знак""'");
		ИначеЕсли ПараметрыОбработки.ИмяОбработчика = ДоступныеМетодыИнтерфейса.АктуализацияCDNПлощадок Тогда
			ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Выполняется обновление CDN-площадок';
																|en = 'Выполняется обновление CDN-площадок'");
		КонецЕсли;
		
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.ПараметрыЗапроса        = ПараметрыЗапроса;
		ПараметрыЗавершенияДлительнойОперации.ПараметрыОбработки      = ПараметрыОбработки;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ПараметрыЗапроса.ОповещениеОЗавершении;
		ПараметрыЗавершенияДлительнойОперации.Организация             = ПараметрыЗапроса.Организация;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ПараметрыОбработки.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ИнтерфейсИСМПОбщегоНазначенияКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	Иначе
		
		Если ПараметрыОбработки.ОрганизацияПоСертификатам <> Неопределено
			И ПараметрыОбработки.ОрганизацияПоСертификатам Тогда
			
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ПараметрыЗапроса",   ПараметрыЗапроса);
			ДополнительныеПараметры.Вставить("ПараметрыОбработки", ПараметрыОбработки);
			
			ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
				"ПоискОрганизацияПоСертификатамЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			ЭлектроннаяПодписьКлиент.НайтиДействительныеЛичныеСертификаты(ОповещениеПриЗапросеКлючаСессии);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметрыДлительнойОперации) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОбмена = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации)
	
	СписокПолейЗаполнения = Новый Массив;
	СписокПолейЗаполнения.Добавить("ЕстьОшибки");
	СписокПолейЗаполнения.Добавить("ТребуетсяОбновлениеКлючаСессииРозница");
	СписокПолейЗаполнения.Добавить("ТекстОшибки");
	
	ДополнительныеПараметрыДлительнойОперации.ПараметрыОбработки.Результат = РезультатОбмена;
	
	Для Каждого ПолеЗаполнения Из СписокПолейЗаполнения Цикл
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметрыДлительнойОперации.ПараметрыОбработки, ПолеЗаполнения)
			Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РезультатОбмена, ПолеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПараметрыДлительнойОперации.ПараметрыОбработки[ПолеЗаполнения] = РезультатОбмена[ПолеЗаполнения];
		
	КонецЦикла;
	
	ОбработкаРезультатаВыполненияМетодаИнтерфейсаСАвторизацией(ДополнительныеПараметрыДлительнойОперации.ПараметрыЗапроса,
		ДополнительныеПараметрыДлительнойОперации.ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область Авторизация

Процедура ПоискОрганизацияПоСертификатамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ПараметрыОбработки.ОрганизацияПоСертификатам = Ложь;
	
	Если Результат = Неопределено
		Или Результат.Количество() = 0 Тогда
		ДополнительныеПараметры.ПараметрыОбработки.ЕстьОшибки  = Истина;
		ДополнительныеПараметры.ПараметрыОбработки.ТекстОшибки = НСтр("ru = 'Не найдено доступных сертификатов для подписи.';
																		|en = 'Не найдено доступных сертификатов для подписи.'");
	Иначе
		ДополнительныеПараметры.ПараметрыОбработки.Организация = Результат[0].Организация;
	КонецЕсли;
	
	ОбработкаМетодаИнтерфейсаСАвторизацией(ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры.ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие")
		Или (ДополнительныеПараметры.ПараметрыОбработки.Организация <> Неопределено
		И Результат[ДополнительныеПараметры.ПараметрыОбработки.Организация] = Неопределено) Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		
		Если ДополнительныеПараметры.ПараметрыОбработки.Организация = Неопределено Тогда
			Для Каждого КлючИЗначение Из Результат Цикл
				РезультатАвторизации = КлючИЗначение.Значение;
			КонецЦикла;
		Иначе
			РезультатАвторизации = Результат[ДополнительныеПараметры.ПараметрыОбработки.Организация];
		КонецЕсли;
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.';
								|en = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		Иначе
			ДополнительныеПараметры.ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Ложь;
			ДополнительныеПараметры.ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессииРозница = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ДополнительныеПараметры.ПараметрыОбработки.ЕстьОшибки  = Истина;
		ДополнительныеПараметры.ПараметрыОбработки.ТекстОшибки = ТекстОшибки;
	КонецЕсли;

	ДополнительныеПараметры.ПараметрыОбработки.ВызовПослеАвторизации = Истина;
	ОбработкаМетодаИнтерфейсаСАвторизацией(ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры.ПараметрыОбработки);
	
КонецПроцедуры

Процедура ЗапроситьРозничныйКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие")
		Или (ДополнительныеПараметры.ПараметрыОбработки.Организация <> Неопределено
		И Результат[ДополнительныеПараметры.ПараметрыОбработки.Организация] = Неопределено) Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		
		Если ДополнительныеПараметры.ПараметрыОбработки.Организация = Неопределено Тогда
			Для Каждого КлючИЗначение Из Результат Цикл
				РезультатАвторизации = КлючИЗначение.Значение;
			КонецЦикла;
		Иначе
			РезультатАвторизации = Результат[ДополнительныеПараметры.ПараметрыОбработки.Организация];
		КонецЕсли;
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.';
								|en = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		Иначе
			ДополнительныеПараметры.ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессии = Ложь;
			ДополнительныеПараметры.ПараметрыОбработки.ТребуетсяОбновлениеКлючаСессииРозница = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		
		РезультатВыполнения = ПараметрыЗавершенияОбработки();
		РезультатВыполнения.Результат  = Новый Структура("ОтказОтАвторизации", Истина);
		РезультатВыполнения.ТекстОшибки = ДополнительныеПараметры.ПараметрыОбработки.ТекстОшибки;
		РезультатВыполнения.ЕстьОшибки  = Истина;
		РезультатВыполнения.ОтказОтАвторизации = ОтказОтАвторизации;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПараметрыЗапроса.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
		
	ИначеЕсли ОшибкаАвторизации Тогда
		ДополнительныеПараметры.ПараметрыОбработки.ЕстьОшибки  = Истина;
	КонецЕсли;

	ДополнительныеПараметры.ПараметрыОбработки.ВызовПослеАвторизации = Истина;
	ОбработкаМетодаИнтерфейсаСАвторизацией(ДополнительныеПараметры.ПараметрыЗапроса, ДополнительныеПараметры.ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыОбработки

// Параметры запроса данных.
// 
// Возвращаемое значение:
//  Структура - Параметры запроса данных:
// * Параметры - Неопределено, Структура - Параметры запроса.
// * Организация - Неопределено, ОпределяемыйТип.Организация - Организация.
// * ОповещениеОЗавершении - Неопределено, ОписаниеОповещения - Точка возврата после выполенения метода.
// * УникальныйИдентификатор - Неопределено, УникальныйИдентификатор - уникальный идентификатор формы
// * ВыполнениеНаКлиенте - Булево - Истина, если выполняется запуск процедуры на клиенте
Функция ПараметрыЗапросаДанных() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Параметры",               Неопределено);
	ВозвращаемоеЗначение.Вставить("Организация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ОповещениеОЗавершении",   Неопределено);
	ВозвращаемоеЗначение.Вставить("УникальныйИдентификатор", Неопределено);
	ВозвращаемоеЗначение.Вставить("ВыполнениеНаКлиенте",     Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыОбработкиЗапросаДанных(ПараметрыЗапроса)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИмяОбработчика",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии",        Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ВызовПослеАвторизации",                 Ложь);
	ВозвращаемоеЗначение.Вставить("Результат",                             Неопределено);
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           Неопределено);
	ВозвращаемоеЗначение.Вставить("Параметры",                             ПараметрыЗапроса.Параметры);
	ВозвращаемоеЗначение.Вставить("Организация",                           ПараметрыЗапроса.Организация);
	ВозвращаемоеЗначение.Вставить("ОрганизацияПоСертификатам",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",                          Неопределено);
	ВозвращаемоеЗначение.Вставить("ПроверкаПоТокенуРозничнойПродажи",      Ложь);
	ВозвращаемоеЗначение.Вставить("НеТребуетсяАвторизацияПоКлючуСессии",   Ложь);
	ВозвращаемоеЗначение.Вставить("УникальныйИдентификатор",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ВыполнениеВФоне",                       Ложь);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ВыполнениеНаКлиенте",                   Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Параметры завершения обработки.
// 
// Возвращаемое значение:
//  Структура - Параметры завершения обработки:
// * ЕстьОшибки - Булево - Наличие ошибок.
// * ТекстОшибки - Неопределено - Текст Ошибки.
// * Результат - Неопределено - Результат.
// * ОтказОтАвторизации - Булево - признак отказа подписи
Функция ПараметрыЗавершенияОбработки() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                  Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("Результат",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ОтказОтАвторизации",          Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыЗавершенияДлительнойОперации()
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПараметрыОбработки");
	ПараметрыЗавершения.Вставить("ПараметрыЗапроса");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	ПараметрыЗавершения.Вставить("Организация");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
