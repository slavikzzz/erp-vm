#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаСотрудниковБронированияКомандировок;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(ШаблоныЗаданий) Экспорт

	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОтправкаСотрудниковБронированияКомандировок.Имя);

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт

	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОтправкаСотрудниковБронированияКомандировок.ИмяМетода);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	ИнтеграцияSmartway.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.4";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d54b61b2-fc21-4ede-a8dd-a6690b33f818");
	Обработчик.Процедура = "РегулярнаяОтправкаСотрудников.УстановитьИспользованиеОтбораПоПодразделениямПоУмолчанию";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет настройки регулярной отправки сотрудников по умолчанию.';
									|en = 'Fills default settings of regular employee sending.'");

КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Создает команду "Smartway" в форме элемента Сотрудники
Процедура СоздатьКомандуSmartwayВФормеСотрудника(Форма, ГруппаКнопки) Экспорт

	Если Форма.Команды.Найти("Smartway") = Неопределено Тогда
		КомандаSmartway = Форма.Команды.Добавить("Smartway");
		КомандаSmartway.Действие = "Подключаемый_Smartway";
		КомандаSmartway.Заголовок = НСтр("ru = 'Smartway';
										|en = 'Smartway'");
	КонецЕсли;

	// Добавляем кнопку
	Если ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Если Форма.Элементы.Найти("Smartway") = Неопределено Тогда
			Элемент = Форма.Элементы.Вставить("Smartway", Тип("КнопкаФормы"), ГруппаКнопки);
			Элемент.Вид = ВидКнопкиФормы.Гиперссылка;
			Элемент.ИмяКоманды = "Smartway";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

Процедура ДанныеСтатусаОтправкиСотрудникаПоУсловиюДлительнаяОперация(Параметры, АдресРезультата) Экспорт

	СистемаБронирования = Параметры.СистемаБронирования;
	ФизическоеЛицо = Параметры.ФизическоеЛицо;
	ДанныеСтатуса = ДанныеСтатусаОтправкиСотрудникаПоУсловию(СистемаБронирования, ФизическоеЛицо);
	ПоместитьВоВременноеХранилище(ДанныеСтатуса, АдресРезультата);

КонецПроцедуры

Функция ОтправитьСотрудниковВСистемуБронированияДлительнаяОперация(Параметры) Экспорт

	ПараметрыОтправкиСотрудников = СтруктураПараметровОтправкиСотрудников();
	ПараметрыОтправкиСотрудников.СистемаБронирования = Параметры.СистемаБронирования;
	ПараметрыОтправкиСотрудников.ФизическоеЛицо = Параметры.ФизическоеЛицо;
	РезультатОтправкиСотрудниковВСистемуБронирования(ПараметрыОтправкиСотрудников);
	ПараметрыОтправкиСотрудников.Удалить("ТаблицаОтправляемыхФизическихЛиц");
	
	Возврат ПараметрыОтправкиСотрудников;

КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура ОтправкаСотрудниковБронированияКомандировок() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаСотрудниковБронированияКомандировок);

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыОтправкиСотрудников = СтруктураПараметровОтправкиСотрудников();
	ПараметрыОтправкиСотрудников.СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();

	ОценкаПроизводительностиСуществует = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности");
	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности");
		ВремяНачала = МодульОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;

	ОтправитьСотрудниковБронированияКомандировок(ПараметрыОтправкиСотрудников);

	Если ОценкаПроизводительностиСуществует Тогда
		МодульОценкаПроизводительности.ЗакончитьЗамерВремени("ОтправкаСотрудниковБронированияКомандировок", ВремяНачала);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ЗарегистрироватьИзменениеФизическогоЛицаДляБронированияКомандировок(Источник, Отказ) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаИзмененияКадровыхДанныхДоступна(Источник) Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ПроверитьИзмененияКадровыхДанныхИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник);

КонецПроцедуры

Процедура ПроверитьИзменениеГражданстваФизическогоЛицаПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаИзмененияГражданстваДоступна(Источник) Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	СохранитьПрежнееЗначениеГражданства(СистемаБронирования, Источник);

КонецПроцедуры

Процедура ПроверитьИзменениеГражданстваФизическогоЛицаПриЗаписиНабораЗаписей(Источник, Отказ, Замещение) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаИзмененияГражданстваДоступна(Источник) Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ПроверитьИзменениеГражданстваИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник);

КонецПроцедуры

Процедура ПроверитьИзменениеДокументаФизическогоЛицаПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаИзмененияДокументаДоступна(Источник) Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	СохранитьПрежнееЗначениеДокумента(СистемаБронирования, Источник);

КонецПроцедуры

Процедура ПроверитьИзменениеДокументаФизическогоЛицаПриЗаписиНабораЗаписей(Источник, Отказ, Замещение) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ПроверкаИзмененияДокументаДоступна(Источник) Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ПроверитьИзменениеДокументаИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник);

КонецПроцедуры

Процедура ЗарегистрироватьИзменениеКадровойИсторииДляБронированияКомандировок(Источник, Отказ, Замещение) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат;
	КонецЕсли;

	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	ИспользуетсяОтборПоПодразделениям = РегистрыСведений.НастройкиСистемыБронированияКомандировок.ИспользуетсяОтборПоПодразделениям(СистемаБронирования);

	ПроверитьИзмененияПодразделенийИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник, ИспользуетсяОтборПоПодразделениям);
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторыСтруктур

Функция СтруктураНастройкаОтправкиСотрудника() Экспорт

	Настройки = РегистрыСведений.ФизическиеЛицаБронированияКомандировок.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();

	НастройкаСотрудника = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
		Настройки, Метаданные.РегистрыСведений.ФизическиеЛицаБронированияКомандировок);

	НастройкаСотрудника.Вставить("ОтправленоУдачно", Истина);

	Возврат НастройкаСотрудника;

КонецФункции

Функция СтруктураНастройкаОтправкиСотрудников() Экспорт

	Настройка = Новый Структура;
	Настройка.Вставить("СистемаБронирования", Перечисления.СистемыБронированияКомандировок.ПустаяСсылка());
	Настройка.Вставить("ИспользоватьОтборПоПодразделениям", Истина);
	Настройка.Вставить("ПодразделенияОтбора", Новый СписокЗначений);
	Настройка.Вставить("НеотправляемыеСотрудники", Новый СписокЗначений);
	Настройка.Вставить("ОтправляемыеСотрудники", Новый СписокЗначений);
	Настройка.Вставить("ДатаПоследнейОперации", Неопределено);
	Настройка.Вставить("ЧислоОтправленных", 0);
	Настройка.Вставить("ЧислоНеотправленных", 0);

	Возврат Настройка;

КонецФункции

Функция СтруктураРезультатСохраненияНастройки() Экспорт

	Возврат Новый Структура("Выполнено, ТекстОшибки", Ложь, "");

КонецФункции

#КонецОбласти

Функция НастройкаОтправкиСотрудника(СистемаБронирования, ФизическоеЛицо) Экспорт

	Настройка = СтруктураНастройкаОтправкиСотрудника();
	Настройка.СистемаБронирования = СистемаБронирования;
	Настройка.ФизическоеЛицо = ФизическоеЛицо;

	РегистрыСведений.ФизическиеЛицаБронированияКомандировок.ПолучитьНастройкуОтправкиСотрудника(Настройка);

	Возврат Настройка;

КонецФункции

Функция НастройкиОтправкиСотрудников(СистемаБронирования) Экспорт

	Настройки = НастройкиСистемыБронированияКомандировок(СистемаБронирования);

	Таблица = ПодразделенияБронированияКомандировокНастройки(СистемаБронирования);

	Если Таблица <> Неопределено Тогда
		Для Каждого Строка Из Таблица Цикл
			Настройки.ПодразделенияОтбора.Добавить(Строка.Подразделение,,Строка.ВключатьПодчиненныеПодразделения);
		КонецЦикла;
	КонецЕсли;

	ПричинаНепосредственно = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.Непосредственно;

	ТаблицаОбрабатываемыхНепосредственно = СотрудникиБронированияКомандировок(СистемаБронирования, Неопределено, ПричинаНепосредственно, Неопределено);
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаОбрабатываемыхНепосредственно, "ПричинаОтправки, Отправляется");

	Отбор = Новый Структура("ПричинаОтправки, Отправляется", ПричинаНепосредственно, Ложь);
	МассивНеОтправлять = ТаблицаОбрабатываемыхНепосредственно.НайтиСтроки(Отбор);
	Если МассивНеОтправлять.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивНеОтправлять Цикл
			ДобавитьЭлементВСписок(Настройки.НеотправляемыеСотрудники, Элемент.ФизическоеЛицо);
		КонецЦикла;
	КонецЕсли;

	Отбор = Новый Структура("ПричинаОтправки, Отправляется", ПричинаНепосредственно, Истина);
	МассивОтправлять = ТаблицаОбрабатываемыхНепосредственно.НайтиСтроки(Отбор);
	Если МассивОтправлять.Количество() > 0 Тогда
		Для Каждого Элемент Из МассивОтправлять Цикл
			ДобавитьЭлементВСписок(Настройки.ОтправляемыеСотрудники, Элемент.ФизическоеЛицо);
		КонецЦикла;
	КонецЕсли;

	ТаблицаРезультатыПоследнейОправки = РезультатыПоследнейОправки(СистемаБронирования);
	Если ТаблицаРезультатыПоследнейОправки.Количество() > 0 Тогда
		Настройки.ДатаПоследнейОперации = ТаблицаРезультатыПоследнейОправки[0].ДатаПоследнейОперации;
		Настройки.ЧислоОтправленных = ТаблицаРезультатыПоследнейОправки[0].ЧислоОтправленных;
		Настройки.ЧислоНеотправленных = ТаблицаРезультатыПоследнейОправки[0].ЧислоНеотправленных;
	КонецЕсли;

	Возврат Настройки;

КонецФункции

Процедура ПроверитьИспользуетсяАвтоматическаяОтправкаСотрудников() Экспорт

	Если ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат;
	КонецЕсли;

	ВызватьИсключение
	НСтр("ru = 'Для настройки регулярной отправки информации о сотрудниках в сервис бронирования командировок должны быть включены опции:
		|- Использовать интеграцию с сервисами бронирования билетов и гостиниц,
		|- Отправлять информацию о сотрудниках в сервис бронирования автоматически.';
		|en = 'To set up regular sending of information on employees to the business trip booking service, enable the following options:
		|- Use integration with ticket and hotel booking services
		|- Send information on employees to the booking service automatically.'");

КонецПроцедуры

Процедура СохранитьНастройкуОтправкиСотрудника(НоваяНастройка, РезультатСохранения) Экспорт

	СистемаБронирования = НоваяНастройка.СистемаБронирования;
	ФизическоеЛицо = НоваяНастройка.ФизическоеЛицо;
	Отправляется = НоваяНастройка.Отправляется;

	Попытка
		РегистрыСведений.ФизическиеЛицаБронированияКомандировок.ЗарегистрироватьНастройкуОтправкиСотрудника(НоваяНастройка);
		РезультатСохранения.Выполнено = Истина;
	Исключение
		РезультатСохранения.ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьНастройкиОтправкиСотрудников(НовыеНастройки, РезультатСохранения) Экспорт

	СистемаБронирования = НовыеНастройки.СистемаБронирования;

	Попытка
		СохранитьНастройкиПодразделений(НовыеНастройки);
		СтруктураМассивыИзИсключаемыхСписков = ПодготовитьМассивыИзмененныхСотрудниковИзИсключаемыхСписков(НовыеНастройки);
		СтруктураМассивыПоУсловию = ПодготовитьМассивыИзмененныхСотрудниковОтправляемыхПоУсловию(НовыеНастройки);
		СохранитьИзмененияВСпискахСотрудников(СистемаБронирования, СтруктураМассивыИзИсключаемыхСписков, СтруктураМассивыПоУсловию);
		РезультатСохранения.Выполнено = Истина;
	Исключение
		РезультатСохранения.ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияСотрудниковПринудительно(СистемаБронирования, ФизическоеЛицо = Неопределено) Экспорт

	СписокФизическихЛиц = Неопределено;

	Если ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("Массив") Тогда
		СписокФизическихЛиц = ФизическоеЛицо;
	КонецЕсли;

	Таблица = СотрудникиБронированияКомандировок(СистемаБронирования, СписокФизическихЛиц, Неопределено, Истина);
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Список = Таблица.ВыгрузитьКолонку("ФизическоеЛицо");

	РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
		СистемаБронирования, Список);

КонецПроцедуры

Функция СотрудникиБронированияКомандировок(СистемаБронирования, ФизическоеЛицо, ПричинаОтправки, Отправляется) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СистемаБронирования", СистемаБронирования);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаБронированияКомандировок.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФизическиеЛицаБронированияКомандировок.ПричинаОтправки КАК ПричинаОтправки,
	|	ФизическиеЛицаБронированияКомандировок.Отправляется КАК Отправляется
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаБронированияКомандировок КАК ФизическиеЛицаБронированияКомандировок
	|ГДЕ
	|	ФизическиеЛицаБронированияКомандировок.СистемаБронирования = &СистемаБронирования";

	Если ФизическоеЛицо <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		ОтборЗапроса.Добавить("ФизическиеЛицаБронированияКомандировок.ФизическоеЛицо В (&ФизическоеЛицо)");
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;

	Если Отправляется <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		ОтборЗапроса.Добавить("ФизическиеЛицаБронированияКомандировок.Отправляется = &Отправляется");
		Запрос.УстановитьПараметр("Отправляется", Отправляется);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;

	Если ПричинаОтправки <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		ОтборЗапроса.Добавить("ФизическиеЛицаБронированияКомандировок.ПричинаОтправки = &ПричинаОтправки");
		Запрос.УстановитьПараметр("ПричинаОтправки", ПричинаОтправки);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонструкторыТаблиц

Функция ОписаниеТаблицыОтправляемыхФизическихЛиц()

	Таблица = БронированиеКомандировок.ТаблицаФизическихЛиц();
	Таблица.Колонки.Добавить("Архивный", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Организации", Новый ОписаниеТипов("Массив"));

	Возврат Таблица;

КонецФункции

#КонецОбласти

#Область КонструкторыСтруктур

Функция СтруктураПараметровОтправкиСотрудников()

	Параметры = Новый Структура;
	Параметры.Вставить("СистемаБронирования", Неопределено);
	Параметры.Вставить("ФизическоеЛицо", Неопределено);
	Параметры.Вставить("ТаблицаОтправляемыхФизическихЛиц", Неопределено);
	Параметры.Вставить("Выполнено", Ложь);
	Параметры.Вставить("ТекстОшибки", "");

	Возврат Параметры;

КонецФункции

Функция СтруктураПроверяемыеДанныеСотрудника()

	ПроверяемыеДанные = Новый Структура;
	ПроверяемыеДанные.Вставить("ФИО", Неопределено);
	ПроверяемыеДанные.Вставить("ДатаРождения", Неопределено);
	ПроверяемыеДанные.Вставить("Пол", Неопределено);
	ПроверяемыеДанные.Вставить("МобильныйТелефон", Неопределено);
	ПроверяемыеДанные.Вставить("ЭлектроннаяПочта", Неопределено);

	Возврат ПроверяемыеДанные;

КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Функция ПроверкаИзмененияКадровыхДанныхДоступна(Источник)

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Источник.ЭтоГруппа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат Ложь;
	КонецЕсли; 

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();
	Если Не СотрудникОтправляетсяВСистемуБронирования(СистемаБронирования, Источник.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.СотрудникВключенВСписокОтправки(
		СистемаБронирования, Источник.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Процедура ПроверитьИзмененияКадровыхДанныхИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник)

	МобильныйТелефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Источник, Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица);
	ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Источник, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);

	НовыеЗначения = СтруктураПроверяемыеДанныеСотрудника();
	НовыеЗначения.Вставить("ФИО", Источник.ФИО);
	НовыеЗначения.Вставить("ДатаРождения", Источник.ДатаРождения);
	НовыеЗначения.Вставить("Пол", Источник.Пол);
	НовыеЗначения.Вставить("МобильныйТелефон", МобильныйТелефон);
	НовыеЗначения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);

	ПрежниеЗначенияСтруктура = Источник.ДополнительныеСвойства["ПрежниеЗначения"];

	ЕстьИзменения = Ложь;
	Для Каждого КлючИЗначение Из НовыеЗначения Цикл
		ЗначениеСравнения = ?(ПрежниеЗначенияСтруктура.Свойство(КлючИЗначение.Ключ), ПрежниеЗначенияСтруктура[КлючИЗначение.Ключ], Неопределено);
		Если КлючИЗначение.Значение <> ЗначениеСравнения Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьИзменения Тогда
		РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
			СистемаБронирования, Источник.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ПроверкаИзмененияГражданстваДоступна(Источник)

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Свойство("ПропускатьПроверкуРегулярнойОтправки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Источник.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ФизическоеЛицо = Источник.Отбор.ФизическоеЛицо.Значение;
	Использование = Источник.Отбор["ФизическоеЛицо"].Использование;
	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();

	Если Не Использование
		Или Не ЗначениеЗаполнено(ФизическоеЛицо)
		Или Не СотрудникОтправляетсяВСистемуБронирования(СистемаБронирования, ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.СотрудникВключенВСписокОтправки(
		СистемаБронирования, ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Процедура СохранитьПрежнееЗначениеГражданства(СистемаБронирования, Источник)

	ФизическоеЛицо = Источник.Отбор.ФизическоеЛицо.Значение;

	УстановитьПривилегированныйРежим(Истина);
	Таблица = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "Страна");
	УстановитьПривилегированныйРежим(Ложь);

	СоответствиеПрежнееЗначениеГражданства = Новый Соответствие;
	СоответствиеПрежнееЗначениеГражданства.Вставить(ФизическоеЛицо, Таблица);
	Источник.ДополнительныеСвойства.Вставить("СоответствиеПрежнееЗначениеГражданстваБронированияКомандировок", СоответствиеПрежнееЗначениеГражданства);

КонецПроцедуры

Процедура ПроверитьИзменениеГражданстваИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник)

	Если Не Источник.ДополнительныеСвойства.Свойство("СоответствиеПрежнееЗначениеГражданстваБронированияКомандировок") Тогда
		Возврат;
	КонецЕсли;

	СоответствиеПрежнееЗначениеГражданства = Источник.ДополнительныеСвойства["СоответствиеПрежнееЗначениеГражданстваБронированияКомандировок"];
	ТаблицаПрежнееЗначения = СоответствиеПрежнееЗначениеГражданства.Получить(Источник[0].ФизическоеЛицо);

	Если ТаблицаПрежнееЗначения.Количество() > 0 Тогда
		Если ТаблицаПрежнееЗначения[0].Страна <> Источник[0].Страна Тогда
			РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
				СистемаБронирования, Источник[0].ФизическоеЛицо);
		КонецЕсли;
	Иначе
		РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
			СистемаБронирования, Источник[0].ФизическоеЛицо);
	КонецЕсли;

КонецПроцедуры

Функция ПроверкаИзмененияДокументаДоступна(Источник)

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Источник.ДополнительныеСвойства.Свойство("ПропускатьПроверкуРегулярнойОтправки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Источник.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ФизическоеЛицо = Источник.Отбор.Физлицо.Значение;
	Использование = Источник.Отбор["Физлицо"].Использование;
	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();

	Если Не Использование
		Или Не ЗначениеЗаполнено(ФизическоеЛицо)
		Или Не СотрудникОтправляетсяВСистемуБронирования(СистемаБронирования, ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.СотрудникВключенВСписокОтправки(
		СистемаБронирования, ФизическоеЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Процедура СохранитьПрежнееЗначениеДокумента(СистемаБронирования, Источник)

	ФизическоеЛицо = Источник[0].Физлицо;
	ВидДокумента = Источник[0].ВидДокумента;

	УстановитьПривилегированныйРежим(Истина);
	Таблица = КадровыйУчет.ДокументыФизическихЛиц(ФизическоеЛицо, Истина, ВидДокумента);
	УстановитьПривилегированныйРежим(Ложь);

	СоответствиеПрежнееЗначениеДокумента = Новый Соответствие;
	СоответствиеПрежнееЗначениеДокумента.Вставить(ФизическоеЛицо, Таблица);
	Источник.ДополнительныеСвойства.Вставить("СоответствиеПрежнееЗначениеДокументаБронированияКомандировок", СоответствиеПрежнееЗначениеДокумента);

КонецПроцедуры

Процедура ПроверитьИзменениеДокументаИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования, Источник)

	Если Не Источник.ДополнительныеСвойства.Свойство("СоответствиеПрежнееЗначениеДокументаБронированияКомандировок") Тогда
		Возврат;
	КонецЕсли;

	СоответствиеПрежнееЗначениеДокумента = Источник.ДополнительныеСвойства["СоответствиеПрежнееЗначениеДокументаБронированияКомандировок"];
	ТаблицаПрежнееЗначения = СоответствиеПрежнееЗначениеДокумента.Получить(Источник[0].Физлицо);
	
	Если ТаблицаПрежнееЗначения.Количество() = 0 Тогда
		РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
			СистемаБронирования, Источник[0].Физлицо);
	Иначе
		ПрежниеСерияНомер = СерияНомерДокументаСтрокой(ТаблицаПрежнееЗначения[0].Серия, ТаблицаПрежнееЗначения[0].Номер);
		НовыеСерияНомер = СерияНомерДокументаСтрокой(Источник[0].Серия, Источник[0].Номер);
		Если ПрежниеСерияНомер <> НовыеСерияНомер Тогда
			РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
				СистемаБронирования, Источник[0].Физлицо);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьИзмененияПодразделенийИЗарегистрироватьНеобходимостьОтправки(СистемаБронирования,
	Источник,
	ИспользуетсяОтборПоПодразделениям)

	РегулярнаяОтправкаСотрудниковВнутренний.ПроверитьИзмененияПодразделенийИЗарегистрироватьНеобходимостьОтправки(
		СистемаБронирования,
		Источник,
		ИспользуетсяОтборПоПодразделениям);
	
КонецПроцедуры

#КонецОбласти

Функция ИспользуетсяАвтоматическаяОтправкаСотрудников()

	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуСотрудниковБронированияКомандировок") Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции

Функция НастройкиСистемыБронированияКомандировок(СистемаБронирования)

	Настройки = СтруктураНастройкаОтправкиСотрудников();
	Настройки.СистемаБронирования = СистемаБронирования;

	ИспользуетсяОтборПоПодразделениям = РегистрыСведений.НастройкиСистемыБронированияКомандировок.ИспользуетсяОтборПоПодразделениям(СистемаБронирования);
	Настройки.ИспользоватьОтборПоПодразделениям = ИспользуетсяОтборПоПодразделениям;

	Возврат Настройки;

КонецФункции

Функция ДанныеСтатусаОтправкиСотрудникаПоУсловию(СистемаБронирования, ФизическоеЛицо)

	ДанныеСтатуса = Новый Структура;
	ДанныеСтатуса.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	ДанныеСтатуса.Вставить("ПодразделенияМассив", Новый Массив);
	ДанныеСтатуса.Вставить("ОтправляетсяПоУсловию", Ложь);
	ДанныеСтатуса.Вставить("Уволен", Ложь);

	ТаблицаСотрудников = МестаРаботыСотрудников(ФизическоеЛицо, Неопределено, Неопределено, Ложь);
	Если ТаблицаСотрудников.Количество() = 0 Тогда
		ДанныеСтатуса.Уволен = Истина;
		Возврат ДанныеСтатуса;
	КонецЕсли;

	ИмяОпции = "ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	Если ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы Тогда
		ПодразделенияСотрудника = ТаблицаСотрудников.ВыгрузитьКолонку("МестоВСтруктуреПредприятия");
	КонецЕсли;

	ИспользуетсяОтборПоПодразделениям = РегистрыСведений.НастройкиСистемыБронированияКомандировок.ИспользуетсяОтборПоПодразделениям(СистемаБронирования);

	Если ИспользуетсяОтборПоПодразделениям Тогда
		ПодразделенияОтбора = СписокПодразделенийСотрудникаВходящихВНастройкуОтбораПоПодразделениям(СистемаБронирования, ПодразделенияСотрудника);
		ДанныеСтатуса.ОтправляетсяПоУсловию = ?(ПодразделенияОтбора.Количество() <> 0, Истина, Ложь);
		ДанныеСтатуса.ПодразделенияМассив = ?(ПодразделенияОтбора.Количество() <> 0, ПодразделенияОтбора, ПодразделенияСотрудника);
	Иначе
		ДанныеСтатуса.ОтправляетсяПоУсловию = ?(ТаблицаСотрудников.Количество() <> 0, Истина, Ложь);
		ДанныеСтатуса.ПодразделенияМассив = ПодразделенияСотрудника;
	КонецЕсли;

	Возврат ДанныеСтатуса;

КонецФункции

Функция ИзмененныеСотрудникиИзСписков(Знач МассивДоИзменений, Знач МассивПослеИзменений)

	ДобавленыВСписок = Новый Массив;
	УдаленыИзСписка = Новый Массив;
	СтруктураМассивыИзмененных = Новый Структура("ДобавленыВСписок, УдаленыИзСписка", ДобавленыВСписок, УдаленыИзСписка);

	МассивыИдентичны = ОбщегоНазначения.КоллекцииИдентичны(МассивДоИзменений, МассивПослеИзменений);
	Если МассивыИдентичны Тогда
		Возврат СтруктураМассивыИзмененных;
	КонецЕсли;

	КоличествоДоИзменений = МассивДоИзменений.Количество();
	КоличествоПослеИзменений = МассивПослеИзменений.Количество();

	Если КоличествоДоИзменений = 0 И КоличествоПослеИзменений <> 0 Тогда
		ДобавленыВСписок = МассивПослеИзменений;
	ИначеЕсли КоличествоДоИзменений <> 0 И КоличествоПослеИзменений = 0 Тогда
		УдаленыИзСписка = МассивДоИзменений;
	Иначе
		ДобавленыВСписок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивПослеИзменений, МассивДоИзменений);
		УдаленыИзСписка = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивДоИзменений, МассивПослеИзменений);
	КонецЕсли;

	СтруктураМассивыИзмененных.ДобавленыВСписок = ДобавленыВСписок;
	СтруктураМассивыИзмененных.УдаленыИзСписка = УдаленыИзСписка;
	Возврат СтруктураМассивыИзмененных;

КонецФункции

Функция МестаРаботыСотрудников(ФизическоеЛицо, МассивКадровыхПолей, СписокПодразделений, ЭтоОтправка)

	ДатаПолученияДанных = ТекущаяДатаСеанса();
	
	Если ТипЗнч(МассивКадровыхПолей) = Тип("Массив") Тогда
		ВыбираемыеПоля = МассивКадровыхПолей;
	Иначе
		ВыбираемыеПоля = Новый Массив;
	КонецЕсли;

	ВыбираемыеПоля.Добавить("ГоловнаяОрганизация");
	
	ИмяОпции = "ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	Если ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы Тогда
		ВыбираемыеПоля.Добавить("МестоВСтруктуреПредприятия")
	КонецЕсли;
	
	ВыбираемыеПоля.Добавить("ДатаУвольнения");

	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.КадровыеДанные = ВыбираемыеПоля;

	Если ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Параметры.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ИначеЕсли ТипЗнч(ФизическоеЛицо) = Тип("Массив") Тогда
		Параметры.СписокФизическихЛиц = ФизическоеЛицо;
	КонецЕсли;

	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ОформленПоТрудовомуДоговору", "=", Истина);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ДатаПриема", "<>", Дата(1,1,1));
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ДатаПриема", "<=", ДатаПолученияДанных);
	
	Если Не ЭтоОтправка Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда 
			ТекстВидСобытияУвольнение = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ВидСобытия", "<>", ТекстВидСобытияУвольнение); 
		Иначе
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Параметры.Отборы, "ДатаУвольнения", "<", ДатаПолученияДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокПодразделений <> Неопределено Тогда
		
		РегулярнаяОтправкаСотрудниковВнутренний.ДобавитьОтборПоДолжностиПоШтатномуРасписанию(Параметры, СписокПодразделений);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, Параметры);
	УстановитьПривилегированныйРежим(Ложь);

	Возврат ТаблицаСотрудников;

КонецФункции

Функция МассивПолейКадровыхДанных()

	ПоляКадровыеДанные = Новый Массив;

	ПоляКадровыеДанные.Добавить("Фамилия");
	ПоляКадровыеДанные.Добавить("Имя");
	ПоляКадровыеДанные.Добавить("Отчество");
	ПоляКадровыеДанные.Добавить("ФИО");
	ПоляКадровыеДанные.Добавить("Пол");
	ПоляКадровыеДанные.Добавить("ДатаРождения");
	ПоляКадровыеДанные.Добавить("Страна");
	ПоляКадровыеДанные.Добавить("ДокументВид");
	ПоляКадровыеДанные.Добавить("ДокументСерия");
	ПоляКадровыеДанные.Добавить("ДокументНомер");
	ПоляКадровыеДанные.Добавить("ДокументСрокДействия");
	ПоляКадровыеДанные.Добавить("ТелефонМобильныйПредставление");
	ПоляКадровыеДанные.Добавить("EMailПредставление");

	Возврат ПоляКадровыеДанные;

КонецФункции

Функция СписокПодразделенийСотрудникаВходящихВНастройкуОтбораПоПодразделениям(Знач СистемаБронирования, Знач СписокПодразделенийСотрудника)

	ВходятСписок = Новый Массив;
	Если СписокПодразделенийСотрудника.Количество() = 0 Тогда
		Возврат ВходятСписок;
	КонецЕсли;

	ТаблицаВсехПодразделений = ПодразделенияБронированияКомандировок(СистемаБронирования);
	Если ТаблицаВсехПодразделений = Неопределено Тогда
		Возврат ВходятСписок;
	КонецЕсли;
	СписокВсехПодразделений = ТаблицаВсехПодразделений.ВыгрузитьКолонку("Подразделение");

	НеВходятСписок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПодразделенийСотрудника, СписокВсехПодразделений);
	ВходятСписок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПодразделенийСотрудника, НеВходятСписок);

	Возврат ВходятСписок;

КонецФункции

Функция ПодразделенияБронированияКомандировок(СистемаБронирования)

	Возврат РегулярнаяОтправкаСотрудниковВнутренний.ПодразделенияБронированияКомандировок(СистемаБронирования);
	
КонецФункции

Функция ПодразделенияБронированияКомандировокНастройки(СистемаБронирования)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СистемаБронирования", СистемаБронирования);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияБронированияКомандировок.Подразделение КАК Подразделение,
		|	ПодразделенияБронированияКомандировок.ВключатьПодчиненныеПодразделения КАК ВключатьПодчиненныеПодразделения
		|ИЗ
		|	РегистрСведений.ПодразделенияБронированияКомандировок КАК ПодразделенияБронированияКомандировок
		|ГДЕ
		|	ПодразделенияБронированияКомандировок.СистемаБронирования = &СистемаБронирования";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Таблица = Неопределено;
	КонецЕсли;

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция СотрудникОтправляетсяВСистемуБронирования(СистемаБронирования, ФизическоеЛицо)

	Таблица = СотрудникиБронированияКомандировок(СистемаБронирования, ФизическоеЛицо, Неопределено, Истина);
	Возврат ?(Таблица.Количество() > 0, Истина, Ложь);

КонецФункции

Функция РезультатыПоследнейОправки(СистемаБронирования)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СистемаБронирования", СистемаБронирования);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.СистемаБронирования КАК СистемаБронирования,
	|	МАКСИМУМ(ЕСТЬNULL(Сотрудники.ДатаУдачнойОтправки, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1))) КАК ДатаПоследнейУдачнойОтправки,
	|	МАКСИМУМ(ЕСТЬNULL(Сотрудники.ДатаНеудачнойОтправки, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1))) КАК ДатаПоследнейНеудачнойОтправки
	|ПОМЕСТИТЬ ВТ_ДатыПоследнихОпераций
	|ИЗ
	|	РегистрСведений.ФизическиеЛицаБронированияКомандировок КАК Сотрудники
	|ГДЕ
	|	Сотрудники.СистемаБронирования = &СистемаБронирования
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.СистемаБронирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыПоследнихОпераций.СистемаБронирования КАК СистемаБронирования,
	|	ВЫБОР
	|		КОГДА ВТ_ДатыПоследнихОпераций.ДатаПоследнейУдачнойОтправки >= ВТ_ДатыПоследнихОпераций.ДатаПоследнейНеудачнойОтправки
	|			ТОГДА ВТ_ДатыПоследнихОпераций.ДатаПоследнейУдачнойОтправки
	|		ИНАЧЕ ВТ_ДатыПоследнихОпераций.ДатаПоследнейНеудачнойОтправки
	|	КОНЕЦ КАК ДатаПоследнейОперации
	|ПОМЕСТИТЬ ВТ_ДатаПоследнейОперации
	|ИЗ
	|	ВТ_ДатыПоследнихОпераций КАК ВТ_ДатыПоследнихОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатаПоследнейОперации.СистемаБронирования КАК СистемаБронирования,
	|	ВТ_ДатаПоследнейОперации.ДатаПоследнейОперации КАК ДатаПоследнейОперации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеотправленныеСотрудники.ФизическоеЛицо) КАК ЧислоНеотправленных,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтправленныеСотрудники.ФизическоеЛицо) КАК ЧислоОтправленных
	|ИЗ
	|	ВТ_ДатаПоследнейОперации КАК ВТ_ДатаПоследнейОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаБронированияКомандировок КАК ОтправленныеСотрудники
	|		ПО ВТ_ДатаПоследнейОперации.СистемаБронирования = ОтправленныеСотрудники.СистемаБронирования
	|			И ВТ_ДатаПоследнейОперации.ДатаПоследнейОперации = ОтправленныеСотрудники.ДатаУдачнойОтправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФизическиеЛицаБронированияКомандировок КАК НеотправленныеСотрудники
	|		ПО ВТ_ДатаПоследнейОперации.СистемаБронирования = НеотправленныеСотрудники.СистемаБронирования
	|			И ВТ_ДатаПоследнейОперации.ДатаПоследнейОперации = НеотправленныеСотрудники.ДатаНеудачнойОтправки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДатаПоследнейОперации.СистемаБронирования,
	|	ВТ_ДатаПоследнейОперации.ДатаПоследнейОперации";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьМассивыИзмененныхСотрудниковИзИсключаемыхСписков(НовыеНастройки)

	СтруктураМассивыИзмененных = Новый Структура;
	СтруктураМассивыИзмененных.Вставить("ИзмененныеНеотправляемыеДобавленыВСписок", Новый Массив);
	СтруктураМассивыИзмененных.Вставить("ИзмененныеНеотправляемыеУдаленыИзСписка", Новый Массив);
	СтруктураМассивыИзмененных.Вставить("ИзмененныеОтправляемыеДобавленыВСписок", Новый Массив);
	СтруктураМассивыИзмененных.Вставить("ИзмененныеОтправляемыеУдаленыИзСписка", Новый Массив);

	СистемаБронирования = НовыеНастройки.СистемаБронирования;

	ПредыдущиеНастройки = НастройкиОтправкиСотрудников(СистемаБронирования);
	ПредыдущиеНеотправляемые = ПредыдущиеНастройки.НеотправляемыеСотрудники.ВыгрузитьЗначения();
	ПредыдущиеОтправляемые = ПредыдущиеНастройки.ОтправляемыеСотрудники.ВыгрузитьЗначения();

	НовыеНеотправляемые = НовыеНастройки.НеотправляемыеСотрудники.ВыгрузитьЗначения();
	НовыеОтправляемые = НовыеНастройки.ОтправляемыеСотрудники.ВыгрузитьЗначения();

	СтруктураМассивыИзмененныхНеОтправлять = ИзмененныеСотрудникиИзСписков(ПредыдущиеНеотправляемые, НовыеНеотправляемые);
	СтруктураМассивыИзмененныхОтправлять = ИзмененныеСотрудникиИзСписков(ПредыдущиеОтправляемые, НовыеОтправляемые);

	СтруктураМассивыИзмененных.ИзмененныеНеотправляемыеДобавленыВСписок = СтруктураМассивыИзмененныхНеОтправлять.ДобавленыВСписок;
	СтруктураМассивыИзмененных.ИзмененныеНеотправляемыеУдаленыИзСписка 	= СтруктураМассивыИзмененныхНеОтправлять.УдаленыИзСписка;
	СтруктураМассивыИзмененных.ИзмененныеОтправляемыеДобавленыВСписок 	= СтруктураМассивыИзмененныхОтправлять.ДобавленыВСписок;
	СтруктураМассивыИзмененных.ИзмененныеОтправляемыеУдаленыИзСписка 	= СтруктураМассивыИзмененныхОтправлять.УдаленыИзСписка;

	Возврат СтруктураМассивыИзмененных;

КонецФункции

Функция ПодготовитьМассивыИзмененныхСотрудниковОтправляемыхПоУсловию(НовыеНастройки)

	СтруктураМассивыИзмененных = Новый Структура;
	СтруктураМассивыИзмененных.Вставить("ИзмененныеПоУсловиюДобавленыВСписок", Новый Массив);
	СтруктураМассивыИзмененных.Вставить("ИзмененныеПоУсловиюУдаленыИзСписка", Новый Массив);

	СистемаБронирования = НовыеНастройки.СистемаБронирования;
	ПричинаПоУсловию = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.ПоУсловию;
	
	ПредыдущиеНастройки = НастройкиОтправкиСотрудников(СистемаБронирования);

	ТаблицаОтправляемыхПоУсловиюПредыдущие = СотрудникиБронированияКомандировок(СистемаБронирования, Неопределено, ПричинаПоУсловию, Истина);
	ПредыдущиеПоУсловию = ТаблицаОтправляемыхПоУсловиюПредыдущие.ВыгрузитьКолонку("ФизическоеЛицо");

	Если НовыеНастройки.ИспользоватьОтборПоПодразделениям Тогда
		ТаблицаВсехПодразделений = ПодразделенияБронированияКомандировок(СистемаБронирования);
		Если ТаблицаВсехПодразделений = Неопределено Тогда
			ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
			ТаблицаФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Иначе
			СписокПодразделений = ТаблицаВсехПодразделений.ВыгрузитьКолонку("Подразделение");
			ТаблицаФизическихЛиц = МестаРаботыСотрудников(Неопределено, Неопределено, СписокПодразделений, Ложь);
		КонецЕсли;
	Иначе
		ТаблицаФизическихЛиц = МестаРаботыСотрудников(Неопределено, Неопределено, Неопределено, Ложь);
	КонецЕсли;
	ТаблицаФизическихЛиц.Свернуть("ФизическоеЛицо"); 
	ФизическиеЛица = ТаблицаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо");
	НеотправляемыеСотрудники = НовыеНастройки.НеотправляемыеСотрудники.ВыгрузитьЗначения();
	НовыеПоУсловию = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛица, НеотправляемыеСотрудники);

	СтруктураМассивыИзмененныхПоУсловию = ИзмененныеСотрудникиИзСписков(ПредыдущиеПоУсловию, НовыеПоУсловию);

	СтруктураМассивыИзмененных.ИзмененныеПоУсловиюДобавленыВСписок = СтруктураМассивыИзмененныхПоУсловию.ДобавленыВСписок;
	СтруктураМассивыИзмененных.ИзмененныеПоУсловиюУдаленыИзСписка = СтруктураМассивыИзмененныхПоУсловию.УдаленыИзСписка;
	
	Возврат СтруктураМассивыИзмененных;

КонецФункции

Процедура УстановитьИспользованиеОтбораПоПодразделениямПоУмолчанию() Экспорт

	РегистрыСведений.НастройкиСистемыБронированияКомандировок.ЗарегистрироватьИзмененияНастроекСистемыБронирования(
		Перечисления.СистемыБронированияКомандировок.Smartway, Истина);

КонецПроцедуры

Процедура ЗарегистрироватьУспешнуюОтправку(ТекстСообщения)

	ИмяСобытия = НСтр("ru = 'Бронирование командировок.Регулярная выгрузка сотрудников';
						|en = 'Business trip booking.Regular export of employees'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);

КонецПроцедуры

Процедура ЗарегистрироватьОшибкуОтправки(ПредставлениеОшибки)

	ИмяСобытия = НСтр("ru = 'Бронирование командировок.Регулярная выгрузка сотрудников';
						|en = 'Business trip booking.Regular export of employees'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, 
		УровеньЖурналаРегистрации.Ошибка, , ,
		ПредставлениеОшибки);

КонецПроцедуры

Процедура ЗаполнитьДанныеОтправляемыхСотрудников(СистемаБронирования, ДанныеФизическиЛиц, ТаблицаФизическихЛиц)

	Если ТаблицаФизическихЛиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивФизическихЛиц = ТаблицаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо");

	ТаблицаМестРаботыСКадровымиДанными = МестаРаботыСотрудников(МассивФизическихЛиц, МассивПолейКадровыхДанных(), Неопределено, Истина);

	Если ТаблицаМестРаботыСКадровымиДанными.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаОтправляемыхСотрудников = СотрудникиБронированияКомандировок(СистемаБронирования, МассивФизическихЛиц, Неопределено, Истина);

	ЗагранпаспортРФ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ");
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаЗагранпаспортовРФ = КадровыйУчет.ДокументыФизическихЛиц(МассивФизическихЛиц, Истина, ЗагранпаспортРФ);
	УстановитьПривилегированныйРежим(Ложь);

	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаМестРаботыСКадровымиДанными, "ФизическоеЛицо");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаОтправляемыхСотрудников, "ФизическоеЛицо");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(ТаблицаЗагранпаспортовРФ, "ФизическоеЛицо, ВидДокумента");

	Для Каждого ЭлементФизическоеЛицо Из МассивФизическихЛиц Цикл

		ОтборФизическоеЛицо = Новый Структура("ФизическоеЛицо",ЭлементФизическоеЛицо);
		МестаРаботы = ТаблицаМестРаботыСКадровымиДанными.НайтиСтроки(ОтборФизическоеЛицо);

		Если МестаРаботы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		МассивОтправляемых = ТаблицаОтправляемыхСотрудников.НайтиСтроки(ОтборФизическоеЛицо);

		ОтборЗагранпаспорт = Новый Структура("ФизическоеЛицо, ВидДокумента",ЭлементФизическоеЛицо, ЗагранпаспортРФ);
		МассивЗагранпаспортов = ТаблицаЗагранпаспортовРФ.НайтиСтроки(ОтборЗагранпаспорт);

		НовоеФизическоеЛицо = ДанныеФизическиЛиц.Добавить();
		НовоеФизическоеЛицо.Идентификатор 		= ЭлементФизическоеЛицо.УникальныйИдентификатор();
		НовоеФизическоеЛицо.Ссылка 				= ЭлементФизическоеЛицо.Ссылка;
		НовоеФизическоеЛицо.Фамилия 			= МестаРаботы[0].Фамилия;
		НовоеФизическоеЛицо.Имя 				= МестаРаботы[0].Имя;
		НовоеФизическоеЛицо.Отчество 			= МестаРаботы[0].Отчество;
		НовоеФизическоеЛицо.ФамилияЛатиницей	= СтроковыеФункции.СтрокаЛатиницей(МестаРаботы[0].Фамилия);
		НовоеФизическоеЛицо.ИмяЛатиницей 		= СтроковыеФункции.СтрокаЛатиницей(МестаРаботы[0].Имя);
		НовоеФизическоеЛицо.ОтчествоЛатиницей 	= СтроковыеФункции.СтрокаЛатиницей(МестаРаботы[0].Отчество);
		НовоеФизическоеЛицо.ДатаРождения 		= МестаРаботы[0].ДатаРождения;
		НовоеФизическоеЛицо.Пол 				= МестаРаботы[0].Пол;
		НовоеФизическоеЛицо.Гражданство 		= МестаРаботы[0].Страна;
		НовоеФизическоеЛицо.Телефон 			= НомерТелефонаСтрокой(МестаРаботы[0].ТелефонМобильныйПредставление);
		НовоеФизическоеЛицо.EMail 				= МестаРаботы[0].EMailПредставление;
		НовоеФизическоеЛицо.Документы 			= БронированиеКомандировок.ТаблицаДокументовФизическихЛиц();

		ИностранныйПаспорт = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию("Иностранный паспорт", Истина);
		
		Если МестаРаботы[0].ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ 
			Или (ИностранныйПаспорт <> Неопределено И МестаРаботы[0].ДокументВид = ИностранныйПаспорт) Тогда

			ПаспортСерияНомер = СерияНомерДокументаСтрокой(МестаРаботы[0].ДокументСерия, МестаРаботы[0].ДокументНомер);

			Паспорт = НовоеФизическоеЛицо.Документы.Добавить();
			Паспорт.ФизическоеЛицо = ЭлементФизическоеЛицо;
			Паспорт.ВидДокумента = МестаРаботы[0].ДокументВид;
			Паспорт.НомерДокумента = ПаспортСерияНомер;
			Паспорт.СрокДействияДокумента = МестаРаботы[0].ДокументСрокДействия;
			
		КонецЕсли;

		Если МассивЗагранпаспортов.Количество() > 0 Тогда

			СерияНомерЗагранпаспорт = СерияНомерДокументаСтрокой(МассивЗагранпаспортов[0].Серия, МассивЗагранпаспортов[0].Номер);

			Загранпаспорт = НовоеФизическоеЛицо.Документы.Добавить();
			Загранпаспорт.ФизическоеЛицо = ЭлементФизическоеЛицо;
			Загранпаспорт.ВидДокумента = МассивЗагранпаспортов[0].ВидДокумента;
			Загранпаспорт.НомерДокумента = СерияНомерЗагранпаспорт;
			Загранпаспорт.СрокДействияДокумента = МассивЗагранпаспортов[0].СрокДействия;

		КонецЕсли;

		НовоеФизическоеЛицо.Архивный = Ложь;
		Если МассивОтправляемых.Количество() = 0 Тогда
			НовоеФизическоеЛицо.Архивный = Истина;
		Иначе
			Если МассивОтправляемых[0].Отправляется Тогда
				Если МестаРаботы.Количество() > 0 Тогда
					СотрудникУволен = Истина;
					Для Каждого Элемент Из МестаРаботы Цикл
						Если Не ЗначениеЗаполнено(Элемент.ДатаУвольнения) Тогда
							СотрудникУволен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					НовоеФизическоеЛицо.Архивный = СотрудникУволен;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если МестаРаботы.Количество() > 0 Тогда
			Для Каждого Элемент Из МестаРаботы Цикл
				Если Элемент.ДатаУвольнения >= ТекущаяДатаСеанса() Или Не ЗначениеЗаполнено(Элемент.ДатаУвольнения) 
					Или НовоеФизическоеЛицо.Архивный Тогда
					ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.ГоловнаяОрганизация, "ИНН");
					ДобавитьЭлементВСписок(НовоеФизическоеЛицо.Организации, ИНН);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура РезультатОтправкиСотрудниковВСистемуБронирования(ПараметрыОтправки)

	Если Не ЗначениеЗаполнено(ПараметрыОтправки.СистемаБронирования) Тогда
		ПараметрыОтправки.Удалить("ТаблицаОтправляемыхФизическихЛиц");
		ПараметрыОтправки.ТекстОшибки = НСтр("ru = 'Система бронирования командировок не определена';
											|en = 'Business trip booking system is not determined'");
		Возврат;
	КонецЕсли;

	ОтправитьСотрудниковБронированияКомандировок(ПараметрыОтправки);

КонецПроцедуры

Процедура ОтправитьСотрудниковБронированияКомандировок(ПараметрыОтправки)

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПараметрыОтправки.СистемаБронирования) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СистемаБронирования", ПараметрыОтправки.СистемаБронирования);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИзмененияФизическихЛицБронированияКомандировок.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ИзмененияФизическихЛицБронированияКомандировок КАК ИзмененияФизическихЛицБронированияКомандировок
	|ГДЕ
	|	ИзмененияФизическихЛицБронированияКомандировок.СистемаБронирования = &СистемаБронирования";

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	Если ПараметрыОтправки.ФизическоеЛицо <> Неопределено Тогда
		ОтборЗапроса.Добавить("ИзмененияФизическихЛицБронированияКомандировок.ФизическоеЛицо = &ФизическоеЛицо");
		Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыОтправки.ФизическоеЛицо);
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;

	Пока Истина Цикл
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияФизическихЛицБронированияКомандировок");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();

			ТаблицаОтправляемых = РезультатЗапроса.Выгрузить();
			ТаблицаОтправляемых.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
			ТаблицаОтправляемых.Колонки.Добавить("Отправлено", Новый ОписаниеТипов("Булево"));

			ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц = ТаблицаОтправляемых;
			ОтправитьСотрудниковБронированияКомандировокСписком(ПараметрыОтправки);
			ОбработатьРезультатыОтправкиСотрудников(ПараметрыОтправки);

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;

		Если ПараметрыОтправки.ФизическоеЛицо <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОтправитьСотрудниковБронированияКомандировокСписком(ПараметрыОтправки)

	ДанныеФизическихЛиц = ОписаниеТаблицыОтправляемыхФизическихЛиц();
	СистемаБронирования = ПараметрыОтправки.СистемаБронирования;
	ТаблицаОтправляемыхФизическихЛиц = ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц;
	ЗаполнитьДанныеОтправляемыхСотрудников(СистемаБронирования, ДанныеФизическихЛиц, ТаблицаОтправляемыхФизическихЛиц);
	ДанныеФизическихЛицПоОрганизациям = ДанныеФизическихЛицПоОрганизациям(ДанныеФизическихЛиц);
	Для Каждого ДанныеФизическихЛицОрганизации Из ДанныеФизическихЛицПоОрганизациям Цикл
		Попытка
			ИнтеграцияSmartway.ОтправитьСотрудников(СистемаБронирования, ДанныеФизическихЛицОрганизации.Значение, ПараметрыОтправки);
			ПараметрыОтправки.Выполнено = Истина;
		Исключение
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОтправки(ПредставлениеОшибки);
			ПараметрыОтправки.ТекстОшибки = ПредставлениеОшибки;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ДанныеФизическихЛицПоОрганизациям(ДанныеФизическихЛиц)
	
	МассивОрганизацийФизЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеФизическихЛиц, "Организации", Истина);
	Организации = Новый Массив;
	Для Каждого ОрганизацииФизЛица Из МассивОрганизацийФизЛиц Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ОрганизацииФизЛица, Истина); 
	КонецЦикла;
	
	ДанныеФизическихЛицПоОрганизациям = Новый Соответствие;
	Для Каждого Организация Из Организации Цикл
		ФизическиеЛица = ОписаниеТаблицыОтправляемыхФизическихЛиц();
		Для Каждого ДанныеФизическогоЛица Из ДанныеФизическихЛиц Цикл
			Если ДанныеФизическогоЛица.Организации.Найти(Организация) <> Неопределено Тогда
				НоваяСтрока = ФизическиеЛица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеФизическогоЛица);
			КонецЕсли;
		КонецЦикла;
		ДанныеФизическихЛицПоОрганизациям.Вставить(Организация, ФизическиеЛица);
	КонецЦикла;
	
	Возврат ДанныеФизическихЛицПоОрганизациям;
	
КонецФункции

Процедура ОбработатьРезультатыОтправкиСотрудников(ПараметрыОтправки)

	Таблица = ПараметрыОтправки.ТаблицаОтправляемыхФизическихЛиц;
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СистемаБронирования = ПараметрыОтправки.СистемаБронирования;
	ТекстУдачнаяОтправка = "";
	ТекстНеудачнаяОтправка = "";
	ЕстьУдачнаяОтправка = Ложь;
	ЕстьНеудачнаяОтправка = Ложь;

	ДатаОперации = ТекущаяДатаСеанса();

	Для Каждого Строка Из Таблица Цикл
		ФизическоеЛицо = Строка.ФизическоеЛицо;
		Настройка = НастройкаОтправкиСотрудника(СистемаБронирования, ФизическоеЛицо);
		Если Настройка.ПричинаОтправки = Неопределено Тогда
			РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.УдалитьСотрудниковИзСпискаОтправки(СистемаБронирования, ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		Настройка.СистемаБронирования = СистемаБронирования;
		Настройка.ФизическоеЛицо = ФизическоеЛицо;
		Настройка.Комментарий = Строка.Комментарий;
		Настройка.ОтправленоУдачно = Строка.Отправлено;

		Если Строка.Отправлено Тогда
			ЕстьУдачнаяОтправка = Истина;
			Настройка.ДатаУдачнойОтправки = ДатаОперации;
			Настройка.ДатаНеудачнойОтправки = Неопределено;
			Если ТекстУдачнаяОтправка = "" Тогда
				ТекстУдачнаяОтправка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Информация о сотрудниках %1 отправлена в систему бронирования командировок %2:';
						|en = 'Information on employees %1 is sent to the business trip booking system %2:'"),
					Формат(ДатаОперации, "ДЛФ=DT"), Строка(СистемаБронирования));
			КонецЕсли;
			ДополнитьТекстСообщенияДляЖурналаРегистрации(ТекстУдачнаяОтправка, ФизическоеЛицо, Строка.Комментарий);
		Иначе
			ЕстьНеудачнаяОтправка = Истина;
			Настройка.ДатаНеудачнойОтправки = ДатаОперации;
			Если Строка.Комментарий = "" Тогда
				Настройка.Комментарий = ПараметрыОтправки.ТекстОшибки;
			КонецЕсли;
			Если ТекстНеудачнаяОтправка = "" Тогда
				ТекстНеудачнаяОтправка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Информация о сотрудниках %1 не отправлена в систему бронирования командировок %2 из за наличия ошибок:';
						|en = 'Information on employees %1 is not sent to the business trip booking system %2 due to the following errors:'"),
					Формат(ДатаОперации, "ДЛФ=DT"), Строка(СистемаБронирования));
			КонецЕсли;
			ДополнитьТекстСообщенияДляЖурналаРегистрации(ТекстНеудачнаяОтправка, ФизическоеЛицо, Строка.Комментарий);
		КонецЕсли;

		РезультатСохранения = СтруктураРезультатСохраненияНастройки();
		СохранитьНастройкуОтправкиСотрудника(Настройка, РезультатСохранения);
	КонецЦикла;

	Если ЕстьУдачнаяОтправка Тогда
		ЗарегистрироватьУспешнуюОтправку(ТекстУдачнаяОтправка);
	КонецЕсли;
	Если ЕстьНеудачнаяОтправка Тогда
		ЗарегистрироватьОшибкуОтправки(ТекстНеудачнаяОтправка);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьТекстСообщенияДляЖурналаРегистрации(ТекстСообщения, ФизическоеЛицо, Комментарий)

	ТекстСообщения = ТекстСообщения + Символы.ПС + Строка(ФизическоеЛицо) + ?(СокрЛП(Комментарий)="", "", " (" + СокрЛП(Комментарий) + ")");

КонецПроцедуры

Процедура ДобавитьЭлементВСписок(Список, Элемент) Экспорт

	Если ТипЗнч(Список) = Тип("Массив") Тогда
		Если Список.Найти(Элемент) = Неопределено Тогда
			Список.Добавить(Элемент);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Список) = Тип("СписокЗначений") Тогда
		Если ТипЗнч(Элемент) = Тип("ЭлементСпискаЗначений") Тогда
			Если Список.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				Список.Добавить(Элемент.Значение);
			КонецЕсли;
		Иначе
			Если Список.НайтиПоЗначению(Элемент) = Неопределено Тогда
				Список.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьНастройкиПодразделений(НовыеНастройки)

	СистемаБронирования = НовыеНастройки.СистемаБронирования;
	ПредыдущиеНастройки = НастройкиОтправкиСотрудников(СистемаБронирования);

	ПодразделенияИдентичны = ОбщегоНазначения.КоллекцииИдентичны(ПредыдущиеНастройки.ПодразделенияОтбора, НовыеНастройки.ПодразделенияОтбора);
	Если НовыеНастройки.ИспользоватьОтборПоПодразделениям = ПредыдущиеНастройки.ИспользоватьОтборПоПодразделениям
		И ПодразделенияИдентичны Тогда
		Возврат;
	КонецЕсли;

	Если НовыеНастройки.ИспользоватьОтборПоПодразделениям <> ПредыдущиеНастройки.ИспользоватьОтборПоПодразделениям Тогда
		РегистрыСведений.НастройкиСистемыБронированияКомандировок.ЗарегистрироватьИзмененияНастроекСистемыБронирования(
			СистемаБронирования, НовыеНастройки.ИспользоватьОтборПоПодразделениям);
	КонецЕсли;
	Если Не ПодразделенияИдентичны Тогда
		РегистрыСведений.ПодразделенияБронированияКомандировок.ЗарегистрироватьИзмененияПодразделений(
			СистемаБронирования, НовыеНастройки.ПодразделенияОтбора);
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьИзмененияВСпискахСотрудников(СистемаБронирования, СтруктураМассивыИзИсключаемыхСписков, СтруктураМассивыПоУсловию)

	ПричинаПоУсловию = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.ПоУсловию;
	ПричинаНепосредственно = Перечисления.ПричиныОтправкиСотрудниковБронированияКомандировок.Непосредственно;

	НеотправляемыеДобавленыВСписок = СтруктураМассивыИзИсключаемыхСписков.ИзмененныеНеотправляемыеДобавленыВСписок;
	НеотправляемыеУдаленыИзСписка = СтруктураМассивыИзИсключаемыхСписков.ИзмененныеНеотправляемыеУдаленыИзСписка;
	ОтправляемыеДобавленыВСписок = СтруктураМассивыИзИсключаемыхСписков.ИзмененныеОтправляемыеДобавленыВСписок;
	ОтправляемыеУдаленыИзСписка = СтруктураМассивыИзИсключаемыхСписков.ИзмененныеОтправляемыеУдаленыИзСписка;

	ПоУсловиюДобавленыВСписок = СтруктураМассивыПоУсловию.ИзмененныеПоУсловиюДобавленыВСписок;
	ПоУсловиюУдаленыИзСписка = СтруктураМассивыПоУсловию.ИзмененныеПоУсловиюУдаленыИзСписка;

	НастройкаСотрудника = СтруктураНастройкаОтправкиСотрудника();
	НастройкаСотрудника.СистемаБронирования = СистемаБронирования;
	НастройкаСотрудника.ОтправленоУдачно = Ложь;

	Таблица = СотрудникиБронированияКомандировок(СистемаБронирования, Неопределено, ПричинаПоУсловию, Истина);
	СписокОтправляемыхПоУсловиюДоИзменений = Таблица.ВыгрузитьКолонку("ФизическоеЛицо");

	Для Каждого Элемент Из НеотправляемыеДобавленыВСписок Цикл
		НастройкаСотрудника.ФизическоеЛицо = Элемент;
		НастройкаСотрудника.ПричинаОтправки = ПричинаНепосредственно;
		НастройкаСотрудника.Отправляется = Ложь;
		РезультатСохранения = СтруктураРезультатСохраненияНастройки();
		СохранитьНастройкуОтправкиСотрудника(НастройкаСотрудника, РезультатСохранения);
	КонецЦикла;

	Для Каждого Элемент Из НеотправляемыеУдаленыИзСписка Цикл
		СотрудникДобавленВДругойСписокИсключаемых = ОтправляемыеДобавленыВСписок.Найти(Элемент);
		Если СотрудникДобавленВДругойСписокИсключаемых <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СотрудникДобавленВСписокОтправляемыхПоУсловию = ПоУсловиюДобавленыВСписок.Найти(Элемент);
		Если СотрудникДобавленВСписокОтправляемыхПоУсловию <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СотрудникИсключенИзСпискаОтправляемыхПоУсловию = ПоУсловиюУдаленыИзСписка.Найти(Элемент);
		Если СотрудникИсключенИзСпискаОтправляемыхПоУсловию <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СотрудникВСпискеОтправляемыхПоУсловиюДоИзменений = СписокОтправляемыхПоУсловиюДоИзменений.Найти(Элемент);
		Если СотрудникВСпискеОтправляемыхПоУсловиюДоИзменений <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.ФизическиеЛицаБронированияКомандировок.УдалитьСотрудниковИзСпискаОтправляемых(СистемаБронирования, Элемент);
	КонецЦикла;

	Для Каждого Элемент Из ОтправляемыеДобавленыВСписок Цикл
		НастройкаСотрудника.ФизическоеЛицо = Элемент;
		НастройкаСотрудника.ПричинаОтправки = ПричинаНепосредственно;
		НастройкаСотрудника.Отправляется = Истина;
		РезультатСохранения = СтруктураРезультатСохраненияНастройки();
		СохранитьНастройкуОтправкиСотрудника(НастройкаСотрудника, РезультатСохранения);
	КонецЦикла;

	Для Каждого Элемент Из ОтправляемыеУдаленыИзСписка Цикл
		СотрудникДобавленВДругойСписокИсключаемых = НеотправляемыеДобавленыВСписок.Найти(Элемент);
		Если СотрудникДобавленВДругойСписокИсключаемых <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СотрудникИсключенИзСпискаОтправляемыхПоУсловию = ПоУсловиюУдаленыИзСписка.Найти(Элемент);
		Если СотрудникИсключенИзСпискаОтправляемыхПоУсловию <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СотрудникВСпискеОтправляемыхПоУсловиюДоИзменений = СписокОтправляемыхПоУсловиюДоИзменений.Найти(Элемент);
		Если СотрудникВСпискеОтправляемыхПоУсловиюДоИзменений <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.ФизическиеЛицаБронированияКомандировок.УдалитьСотрудниковИзСпискаОтправляемых(СистемаБронирования, Элемент);
	КонецЦикла;

	Таблица = СотрудникиБронированияКомандировок(СистемаБронирования, Неопределено, ПричинаНепосредственно, Неопределено);
	СписокОтправляемыхНепосредственноПослеИзменений = Таблица.ВыгрузитьКолонку("ФизическоеЛицо");

	Для Каждого Элемент Из ПоУсловиюДобавленыВСписок Цикл
		НастройкаСотрудника.ФизическоеЛицо = Элемент;
		НастройкаСотрудника.ПричинаОтправки = ПричинаПоУсловию;
		НастройкаСотрудника.Отправляется = Истина;
		РезультатСохранения = СтруктураРезультатСохраненияНастройки();
		СохранитьНастройкуОтправкиСотрудника(НастройкаСотрудника, РезультатСохранения);
	КонецЦикла;

	Для Каждого Элемент Из ПоУсловиюУдаленыИзСписка Цикл
		СотрудникВСпискеОтправляемыхНепосредственно = СписокОтправляемыхНепосредственноПослеИзменений.Найти(Элемент);
		Если СотрудникВСпискеОтправляемыхНепосредственно <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РегистрыСведений.ФизическиеЛицаБронированияКомандировок.УдалитьСотрудниковИзСпискаОтправляемых(СистемаБронирования, Элемент);
	КонецЦикла;

КонецПроцедуры

Функция СерияНомерДокументаСтрокой(Серия, Номер)

	СерияНомер = СокрЛП(Серия) + СокрЛП(Номер);
	Возврат СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("- ", СерияНомер, "");

КонецФункции

Функция НомерТелефонаСтрокой(НомерТелефона)

	НомерБезСимволов = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -()#", НомерТелефона, "");
	Возврат ?(НомерБезСимволов = "", "", ?( Лев(НомерБезСимволов, 1) = "+", НомерБезСимволов, "+" + НомерБезСимволов));

КонецФункции

Процедура ПропускатьПроверкуРегулярнойОтправки(Форма, ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.Вставить("ПропускатьПроверкуРегулярнойОтправки", Ложь);

	Если Не ИспользуетсяАвтоматическаяОтправкаСотрудников() Тогда
		Возврат;
	КонецЕсли;

	Если Форма.СозданиеНового Тогда
		Возврат;
	КонецЕсли;

	СистемаБронирования = БронированиеКомандировок.ИспользуемаяСистемаБронирования();

	Если Не СотрудникОтправляетсяВСистемуБронирования(СистемаБронирования, Форма.ФизическоеЛицоСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.СотрудникВключенВСписокОтправки(
		СистемаБронирования, Форма.ФизическоеЛицоСсылка) Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ГражданствоФизическихЛицПрежняя.Страна <> Форма.ГражданствоФизическихЛиц.Страна Тогда

		РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
			СистемаБронирования, Форма.ФизическоеЛицоСсылка);
		ДополнительныеСвойства.ПропускатьПроверкуРегулярнойОтправки = Истина;
		Возврат;
		
	КонецЕсли;

	Если Форма.ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ 
		Или Форма.ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ Тогда

		ИзменилисьДанные = Ложь;

		Если Форма.ДокументыФизическихЛицПрежняя.Серия <> Форма.ДокументыФизическихЛиц.Серия Тогда
			ИзменилисьДанные = Истина;
		КонецЕсли;

		Если Форма.ДокументыФизическихЛицПрежняя.Номер <> Форма.ДокументыФизическихЛиц.Номер Тогда
			ИзменилисьДанные = Истина;
		КонецЕсли;

		Если Форма.ДокументыФизическихЛицПрежняя.СрокДействия <> Форма.ДокументыФизическихЛиц.СрокДействия Тогда
			ИзменилисьДанные = Истина;
		КонецЕсли;

		Если ИзменилисьДанные Тогда

			РегистрыСведений.ИзмененияФизическихЛицБронированияКомандировок.ЗарегистрироватьСотрудниковВСпискеОтправки(
				СистемаБронирования, Форма.ФизическоеЛицоСсылка);
			ДополнительныеСвойства.ПропускатьПроверкуРегулярнойОтправки = Истина;
			Возврат;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти