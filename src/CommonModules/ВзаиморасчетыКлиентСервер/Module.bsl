#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру параметров формирования надписи Валюты и курсы документа.
//
// Возвращаемое значение:
//  Структура - параметры для заполнения в форме, где:
//   * НеПоказыватьРасчеты - Булево.
//   * ВалютаДокумента - СправочникСсылка.Валюты.
//   * ВалютаВзаиморасчетов - СправочникСсылка.Валюты.
//   * ВалютаРеглУчета - СправочникСсылка.Валюты.
//   * СуммаДокумента - Число.
//   * СуммаВзаиморасчетов - Число.
//   * КурсЧислитель - Число.
//   * КурсЗнаменатель - Число.
//
Функция ПараметрыНадписиВалюты() Экспорт
	
	Возврат Новый Структура("НеПоказыватьРасчеты,
							|ВалютаДокумента,
							|ВалютаВзаиморасчетов,
							|ВалютаРеглУчета,
							|СуммаДокумента,
							|СуммаВзаиморасчетов,
							|КурсЧислитель,
							|КурсЗнаменатель", ЛОЖЬ);
	
КонецФункции

// Рассчитывает конечное сальдо в табличной части Группировка финансовых инструментов документа СверкаВзаиморасчетов.
//
// Параметры:
//  Группировка - ДанныеФормыКоллекция - Текущая строка табличной части группировки.
//  ДетальныеЗаписи - ДанныеФормыКоллекция - Табличная часть детальных записей финансовых инструментов.
//
Процедура РассчитатьКонечноеСальдоПоФинансовымИнструментам(Группировка, ДетальныеЗаписи) Экспорт
	
	Отбор = Новый Структура("Договор");
	ЗаполнитьЗначенияСвойств(Отбор, Группировка);
	
	ДеталиГруппировки = ДетальныеЗаписи.НайтиСтроки(Отбор);
	
	ОборотАктив = Новый Структура("Дт, Кт", 0, 0);
	ОборотПассив = Новый Структура("Дт, Кт", 0, 0);
	Для Каждого Запись Из ДеталиГруппировки Цикл
		Если Группировка.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем") Тогда
			ДобавитьОборот(ОборотПассив, Запись, "АрендныеОбязательства");
			ДобавитьОборот(ОборотАктив, Запись, "ОбеспечительныйПлатеж");
			ДобавитьОборот(ОборотПассив, Запись, "УслугаПоАренде");
			ДобавитьОборот(ОборотПассив, Запись, "ВыкупнаяСтоимость");
			
		ИначеЕсли Группировка.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором") Тогда
			ДобавитьОборот(ОборотПассив, Запись, "ОсновнойДолг");
			ДобавитьОборот(ОборотПассив, Запись, "Проценты");
			ДобавитьОборот(ОборотПассив, Запись, "Комиссия");
			
		Иначе
			ДобавитьОборот(ОборотАктив, Запись, "ОсновнойДолг");
			ДобавитьОборот(ОборотАктив, Запись, "Проценты");
			ДобавитьОборот(ОборотАктив, Запись, "Комиссия");
			
		КонецЕсли;
	КонецЦикла;
	
	Группировка.КонечноеСальдоДт = Группировка.НачальноеСальдоДт + ОборотАктив.Дт - ОборотАктив.Кт;
	Группировка.КонечноеСальдоКт = Группировка.НачальноеСальдоКт - ОборотПассив.Дт + ОборотПассив.Кт;
	Группировка.ОборотПриход = ОборотАктив.Дт + ОборотПассив.Дт;
	Группировка.ОборотРасход = ОборотАктив.Кт + ОборотПассив.Кт;
	
	// установим конечное сальдо, если не было начального
	Если Группировка.НачальноеСальдоДт = 0 Тогда
		Группировка.КонечноеСальдоДт = ОборотАктив.Дт - ОборотАктив.Кт;
	КонецЕсли;
		
	Если Группировка.НачальноеСальдоКт = 0 Тогда
		Группировка.КонечноеСальдоКт = -ОборотПассив.Дт + ОборотПассив.Кт;
	КонецЕсли;
	
	Если Группировка.ТипРасчетов <> ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем") Тогда
		КонечноеСальдо = Группировка.КонечноеСальдоДт - Группировка.КонечноеСальдоКт;
		Если КонечноеСальдо > 0 Тогда
			Группировка.КонечноеСальдоДт = КонечноеСальдо;
			Группировка.КонечноеСальдоКт = 0;
		Иначе
			Группировка.КонечноеСальдоДт = 0;
			Группировка.КонечноеСальдоКт = -КонечноеСальдо;
		КонецЕсли;
	КонецЕсли;
	
	Если Группировка.КонечноеСальдоДт < 0 Тогда
		Группировка.КонечноеСальдоКт = Группировка.КонечноеСальдоКт - Группировка.КонечноеСальдоДт;
		Группировка.КонечноеСальдоДт = 0;
	КонецЕсли;
	Если Группировка.КонечноеСальдоКт < 0 Тогда
		Группировка.КонечноеСальдоДт = Группировка.КонечноеСальдоДт - Группировка.КонечноеСальдоКт;
		Группировка.КонечноеСальдоКт = 0;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает конечное сальдо в табличной части Группировка взаиморасчетов документа СверкаВзаиморасчетов.
//
// Параметры:
//  Группировка - ДанныеФормыКоллекция - Текущая строка табличной части группировки.
//  ДетальныеЗаписи - ДанныеФормыКоллекция - Табличная часть детальных записей взаиморасчетов.
//  РеглСуммы - Булево - Использовать для расчета ресурсы с регл. суммами.
//
Процедура РассчитатьКонечноеСальдоПоВзаиморасчетам(Группировка, ДетальныеЗаписи, РеглСуммы = Ложь) Экспорт
	
	Отбор = Новый Структура("ТипРасчетов,ОбъектРасчетов,Партнер,Договор");
	ЗаполнитьЗначенияСвойств(Отбор, Группировка);
	
	СуммаДолг = ?(РеглСуммы, "СуммаДолгРегл", "СуммаДолг");
	СуммаАванс = ?(РеглСуммы, "СуммаАвансРегл", "СуммаАванс");
	ОборотПриход = ?(РеглСуммы, "ОборотПриходРегл", "ОборотПриход");
	ОборотРасход = ?(РеглСуммы, "ОборотРасходРегл", "ОборотРасход");
	НачальноеСальдо = ?(РеглСуммы, "НачальноеСальдоРегл", "НачальноеСальдо");
	КонечноеСальдо = ?(РеглСуммы, "КонечноеСальдоРегл", "КонечноеСальдо");
	
	ДеталиГруппировки = ДетальныеЗаписи.НайтиСтроки(Отбор);
	ОборотПоПриходу = 0;
	ОборотПоРасходу = 0;
	Для Каждого Запись Из ДеталиГруппировки Цикл
			
		Если Запись[СуммаДолг] > 0 Тогда
			ОборотПоПриходу = ОборотПоПриходу + Запись[СуммаДолг];
		Иначе
			ОборотПоРасходу = ОборотПоРасходу - Запись[СуммаДолг];
		КонецЕсли;
		
		Если Запись[СуммаАванс] > 0 Тогда
			ОборотПоРасходу = ОборотПоРасходу + Запись[СуммаАванс];
		Иначе
			ОборотПоПриходу = ОборотПоПриходу - Запись[СуммаАванс];
		КонецЕсли;
		
	КонецЦикла;
	
	Группировка[ОборотПриход] = ОборотПоПриходу;
	Группировка[ОборотРасход] = ОборотПоРасходу;
	Группировка[КонечноеСальдо] = Группировка[НачальноеСальдо] + Группировка[ОборотПриход] - Группировка[ОборотРасход];
	
КонецПроцедуры

// Рассчитывает конечное сальдо Дт/Кт в табличной части Итоговые записи взаиморасчетов документа СверкаВзаиморасчетов2_5_11.
//
// Параметры:
//  ИтоговаяЗапись - ДанныеФормыЭлементКоллекции - Текущая строка итоговых записей взаиморасчетов документа.
//  ДетальныеЗаписи - ДанныеФормыКоллекция - Табличная часть детальных записей взаиморасчетов.
//  СверкаПоДоговорам - Булево - Режим сверки итогов.
//  ЭтоПоляКонтрагента - Булево - Признак расчета по полям Организации (Ложь) или Контрагента (Истина).
//
Процедура РассчитатьКонечноеСальдоДтКт(ИтоговаяЗапись, ДетальныеЗаписи, СверкаПоДоговорам = Ложь, ЭтоПоляКонтрагента = Ложь) Экспорт

	ИмяПоля = Новый Структура;
	Если ЭтоПоляКонтрагента Тогда
		ИмяПоля.Вставить("НачальноеСальдоДт", "НачальноеСальдоДтКонтрагент");
		ИмяПоля.Вставить("НачальноеСальдоКт", "НачальноеСальдоКтКонтрагент");
		ИмяПоля.Вставить("СуммаДебет", "СуммаДебетКонтрагент");
		ИмяПоля.Вставить("СуммаКредит", "СуммаКредитКонтрагент");
		ИмяПоля.Вставить("ОборотДт", "ОборотДтКонтрагент");
		ИмяПоля.Вставить("ОборотКт", "ОборотКтКонтрагент");
		ИмяПоля.Вставить("КонечноеСальдоДт", "КонечноеСальдоДтКонтрагент");
		ИмяПоля.Вставить("КонечноеСальдоКт", "КонечноеСальдоКтКонтрагент");
	Иначе
		ИмяПоля.Вставить("НачальноеСальдоДт", "НачальноеСальдоДт");
		ИмяПоля.Вставить("НачальноеСальдоКт", "НачальноеСальдоКт");
		ИмяПоля.Вставить("СуммаДебет", "СуммаДебет");
		ИмяПоля.Вставить("СуммаКредит", "СуммаКредит");
		ИмяПоля.Вставить("ОборотДт", "ОборотДт");
		ИмяПоля.Вставить("ОборотКт", "ОборотКт");
		ИмяПоля.Вставить("КонечноеСальдоДт", "КонечноеСальдоДт");
		ИмяПоля.Вставить("КонечноеСальдоКт", "КонечноеСальдоКт");
	КонецЕсли;
	
	Отбор = Новый Структура("ТипРасчетов, Партнер, Договор");
	Если НЕ СверкаПоДоговорам Тогда
		Отбор.Вставить("ОбъектРасчетов");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, ИтоговаяЗапись);

	ДеталиГруппировки = ДетальныеЗаписи.НайтиСтроки(Отбор);
	ОборотДт = 0;
	ОборотКт = 0;
	Для Каждого Запись Из ДеталиГруппировки Цикл
		ОборотДт = ОборотДт + Запись[ИмяПоля.СуммаДебет];
		ОборотКт = ОборотКт + Запись[ИмяПоля.СуммаКредит];
	КонецЦикла;
	
	ИтоговаяЗапись[ИмяПоля.ОборотДт] = ОборотДт;
	ИтоговаяЗапись[ИмяПоля.ОборотКт] = ОборотКт;
	
	КонечноеСальдо = ИтоговаяЗапись[ИмяПоля.НачальноеСальдоДт] - ИтоговаяЗапись[ИмяПоля.НачальноеСальдоКт] + ОборотДт - ОборотКт;
	ИтоговаяЗапись[ИмяПоля.КонечноеСальдоДт] = Макс(КонечноеСальдо, 0);
	ИтоговаяЗапись[ИмяПоля.КонечноеСальдоКт] = Макс(-КонечноеСальдо, 0);
	
	Если ИтоговаяЗапись[ИмяПоля.НачальноеСальдоДт] <> 0
		И ИтоговаяЗапись[ИмяПоля.НачальноеСальдоКт] <> 0 Тогда
		ИтоговаяЗапись[ИмяПоля.КонечноеСальдоДт] = ИтоговаяЗапись[ИмяПоля.НачальноеСальдоДт] + ОборотДт;
		ИтоговаяЗапись[ИмяПоля.КонечноеСальдоКт] = ИтоговаяЗапись[ИмяПоля.НачальноеСальдоКт] + ОборотКт;
	КонецЕсли;
	
КонецПроцедуры

// Возвращет список типов договоро договоров с клиентами.
// 
// Возвращаемое значение:
// 	СписокЗначений - Список типов договоров с контрагентом, как с клиентом.
Функция ТипыДоговоровСКлиентом() Экспорт
	
	Типы = Новый СписокЗначений;
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомиссионером"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СХранителем"));
	//++ НЕ УТКА

	//++ Устарело_Переработка24
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем"));
	//-- Устарело_Переработка24
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СДавальцем2_5"));
	//-- НЕ УТКА
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентомНаЗакупку"));
	//++ НЕ УТ
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ПередачаВАренду"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Субаренда"));
	//-- НЕ УТ
	
	Возврат Типы;
КонецФункции

// Возвращет список типов договоро договоров с поставщиками.
// 
// Возвращаемое значение:
// 	СписокЗначений - Список типов договоров с контрагентом, как с поставщиком.
Функция ТипыДоговоровСПоставщиком() Экспорт
	
	Типы = Новый СписокЗначений;
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Импорт"));
	//++ Устарело_Переработка24
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком"));
	//-- Устарело_Переработка24
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком2_5"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПереработчиком2_5_ЕАЭС"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоклажедателем"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СКомитентом"));
	Типы.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ВвозИзЕАЭС"));
	
	Возврат Типы;
КонецФункции

// Конструктор структуры отбора для получения данных выбора
// 
// Возвращаемое значение:
//  Структура - Структура отбора данных выбора:
//   * ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами
//   * Организация - СправочникСсылка.Организации
//   * Контрагент - СправочникСсылка.Контрагенты
//   * ПодборДебиторскойЗадолженности - Булево
//   * УчитыватьФилиалы - Булево
//   * РедактируемыйДокумент - Неопределено
//   * Текст - Строка - Вводимый в поле выбора номер для поиска
//   * ТипыОснований - Массив из Тип
//   * ВводОстатков - Булево
//   * ВыборАванса - Булево
Функция СтруктураОтбораДанныхВыбора() Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипРасчетов",                    ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка"));
	СтруктураОтбора.Вставить("Организация",                    ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураОтбора.Вставить("Контрагент",                     ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
	СтруктураОтбора.Вставить("Партнер",                        ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	СтруктураОтбора.Вставить("ПодборДебиторскойЗадолженности", Ложь);
	СтруктураОтбора.Вставить("УчитыватьФилиалы",               Ложь);
	СтруктураОтбора.Вставить("РедактируемыйДокумент",          Неопределено);
	СтруктураОтбора.Вставить("Текст",                          "");
	СтруктураОтбора.Вставить("ТипыОснований",                  Новый Массив);
	СтруктураОтбора.Вставить("ВводОстатков",                   Ложь);
	СтруктураОтбора.Вставить("ВыборАванса",                    Ложь);
	
	Возврат СтруктураОтбора;
	
КонецФункции

#Область СверкаВзаиморасчетов2_5_11

// Процедура - Рассчитать реквизиты формы для итоговых записей
//  Выполняет построчный расчет значений реквизитов формы переданной таблицы
// Параметры:
//  ТаблицаФормы	 - ДанныеФормыКоллекция - Может принимать значения Объект.ИтоговыеЗаписи или Объект.ДетальныеЗаписи.
//  ЕстьРасхождения - Булево - Пользовательский признак отображения расхождений из шапки документа.
//															Если выключен, все строки считаются сопоставленными без расхождений.
//  ТекущаяСтрока	 - ДанныеФормыЭлементКоллекции - Строка таблицы формы. Если не указана, выполняется расчет для всех строк.
//
Процедура РассчитатьРеквизитыФормыИтоговыхЗаписей(ТаблицаФормы, ЕстьРасхождения, ТекущаяСтрока = Неопределено) Экспорт

	Если ТекущаяСтрока = Неопределено Тогда
		МассивСтрок = ТаблицаФормы.НайтиСтроки(Новый Структура());
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущаяСтрока);
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		Если Не ЕстьРасхождения Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 0;	// Сопоставленные
		ИначеЕсли СтрокаТабличнойЧасти.НомерДоговора <> СтрокаТабличнойЧасти.НомерДоговораКонтрагент
			Или СтрокаТабличнойЧасти.ДатаДоговора <> СтрокаТабличнойЧасти.ДатаДоговораКонтрагент Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 1;	// Не сопоставленные
		ИначеЕсли СтрокаТабличнойЧасти.НачальноеСальдоДт <> СтрокаТабличнойЧасти.НачальноеСальдоДтКонтрагент
			Или СтрокаТабличнойЧасти.НачальноеСальдоКт <> СтрокаТабличнойЧасти.НачальноеСальдоКтКонтрагент
			Или СтрокаТабличнойЧасти.ОборотДт <> СтрокаТабличнойЧасти.ОборотДтКонтрагент
			Или СтрокаТабличнойЧасти.ОборотКт <> СтрокаТабличнойЧасти.ОборотКтКонтрагент
			Или СтрокаТабличнойЧасти.КонечноеСальдоДт <> СтрокаТабличнойЧасти.КонечноеСальдоДтКонтрагент
			Или СтрокаТабличнойЧасти.КонечноеСальдоКт <> СтрокаТабличнойЧасти.КонечноеСальдоКтКонтрагент Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 2;	// Есть расхождения
		Иначе
			СтрокаТабличнойЧасти.ТипРасхождений = 0;	// Сопоставленные
		КонецЕсли;

		Если СтрокаТабличнойЧасти.ТипРасхождений > 0 Тогда
			СтрокаТабличнойЧасти.КоличествоРасхождений = 1;
		Иначе
			СтрокаТабличнойЧасти.КоличествоРасхождений = 0;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕстьДанныеОрганизации = Не СтрокаТабличнойЧасти.ТипРасчетов.Пустая();
		СтрокаТабличнойЧасти.ЕстьДанныеКонтрагента = СтрокаТабличнойЧасти.НачальноеСальдоДтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.НачальноеСальдоКтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.ОборотДтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.ОборотКтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.КонечноеСальдоДтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.КонечноеСальдоКтКонтрагент <> 0
			Или СтрокаТабличнойЧасти.НомерДоговораКонтрагент <> ""
			Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаДоговораКонтрагент)
			Или СтрокаТабличнойЧасти.НаименованиеДоговораКонтрагент <> "";
	КонецЦикла;

КонецПроцедуры

// Процедура - Рассчитать реквизиты формы для детальных записей
//  Выполняет построчный расчет значений реквизитов формы переданной таблицы
// Параметры:
//  ТаблицаФормы	 - ДанныеФормыКоллекция - Может принимать значения Объект.ИтоговыеЗаписи или Объект.ДетальныеЗаписи.
//  ЕстьРасхождения - Булево - Пользовательский признак отображения расхождений из шапки документа.
//															Если выключен, все строки считаются сопоставленными без расхождений.
//  ТекущаяСтрока	 - ДанныеФормыЭлементКоллекции - Строка таблицы формы. Если не указана, выполняется расчет для всех строк.
//
Процедура РассчитатьРеквизитыФормыДетальныхЗаписей(ТаблицаФормы, ЕстьРасхождения, ТекущаяСтрока = Неопределено) Экспорт

	Если ТекущаяСтрока = Неопределено Тогда
		МассивСтрок = ТаблицаФормы.НайтиСтроки(Новый Структура());
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущаяСтрока);
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		Если Не ЕстьРасхождения Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 0;	// Сопоставленные
		ИначеЕсли СтрокаТабличнойЧасти.НомерДокумента <> СтрокаТабличнойЧасти.НомерДокументаКонтрагент
			Или СтрокаТабличнойЧасти.ДатаДокумента <> СтрокаТабличнойЧасти.ДатаДокументаКонтрагент Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 1;	// Не сопоставленные
		ИначеЕсли СтрокаТабличнойЧасти.СуммаДебет <> СтрокаТабличнойЧасти.СуммаДебетКонтрагент
			Или СтрокаТабличнойЧасти.СуммаКредит <> СтрокаТабличнойЧасти.СуммаКредитКонтрагент Тогда
			СтрокаТабличнойЧасти.ТипРасхождений = 2;	// Есть расхождения
		Иначе
			СтрокаТабличнойЧасти.ТипРасхождений = 0;	// Сопоставленные
		КонецЕсли;

		Если СтрокаТабличнойЧасти.ТипРасхождений > 0 Тогда
			СтрокаТабличнойЧасти.КоличествоРасхождений = 1;
		Иначе
			СтрокаТабличнойЧасти.КоличествоРасхождений = 0;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕстьОборотДт = СтрокаТабличнойЧасти.СуммаДебет Или СтрокаТабличнойЧасти.СуммаДебетКонтрагент;
		СтрокаТабличнойЧасти.ЕстьОборотКт = СтрокаТабличнойЧасти.СуммаКредит Или СтрокаТабличнойЧасти.СуммаКредитКонтрагент;

		СтрокаТабличнойЧасти.ЕстьДанныеОрганизации = Не СтрокаТабличнойЧасти.ТипРасчетов.Пустая();
		СтрокаТабличнойЧасти.ЕстьДанныеКонтрагента = СтрокаТабличнойЧасти.СуммаДебетКонтрагент <> 0
			Или СтрокаТабличнойЧасти.СуммаКредитКонтрагент <> 0
			Или СтрокаТабличнойЧасти.НомерДокументаКонтрагент <> ""
			Или ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаДокументаКонтрагент)
			Или СтрокаТабличнойЧасти.НаименованиеДокументаКонтрагент <> "";
	КонецЦикла;

КонецПроцедуры

// Функция - Есть расхождения
//  Возвращает состояние сверки документа.
// Параметры:
//  Объект - ДокументОбъект.СверкаВзаиморасчетов2_5_11, ДанныеФормыСтруктура - Передаваемый объект.
//  ПодсчетКоличестваРасхождений - Булево - признак необходимости точного подсчета количества расхождений.
// 
// Возвращаемое значение:
//  Структура - Описание наличия расхождений. Содержит свойства:
//   * ЕстьРасхождения - Булево - Флаг наличия расхождений в документе;
//   * ЕстьРасхожденияИтогов - Булево - Флаг наличия расхождений в итоговых записях;
//   * КоличествоРасхожденийДеталей - Число - Количество расхождений в детальных записях.
//
Функция ЕстьРасхождения(Объект, ПодсчетКоличестваРасхождений = Ложь) Экспорт
	
	КоличествоРасхожденийДеталей = 0;
	ЕстьРасхожденияИтогов = Ложь;

	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда	// Вызов из формы, возможно использование реквизитов формы
		ЕстьРасхожденияИтогов = Объект.ИтоговыеЗаписи.Итог("КоличествоРасхождений") > 0;
		Если ПодсчетКоличестваРасхождений Тогда
			КоличествоРасхожденийДеталей = Объект.ДетальныеЗаписи.Итог("КоличествоРасхождений");
		КонецЕсли;
	Иначе	// Вызов из объекта, необходим построчный расчет
		ЕстьРасхожденияИтогов = Ложь;
		Для Каждого Строка Из Объект.ИтоговыеЗаписи Цикл
			Если Строка.НачальноеСальдоДт <> Строка.НачальноеСальдоДтКонтрагент
				Или Строка.НачальноеСальдоКт <> Строка.НачальноеСальдоКтКонтрагент
				Или Строка.ОборотДт <> Строка.ОборотДтКонтрагент
				Или Строка.ОборотКт <> Строка.ОборотКтКонтрагент   
				Или Строка.КонечноеСальдоДт <> Строка.КонечноеСальдоДтКонтрагент
				Или Строка.КонечноеСальдоКт <> Строка.КонечноеСальдоКтКонтрагент Тогда
				ЕстьРасхожденияИтогов = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Для Каждого Строка Из Объект.ДетальныеЗаписи Цикл
			Если Строка.НомерДокумента <> Строка.НомерДокументаКонтрагент
				Или Строка.ДатаДокумента <> Строка.ДатаДокументаКонтрагент
				Или Строка.СуммаДебет <> Строка.СуммаДебетКонтрагент   
				Или Строка.СуммаКредит <> Строка.СуммаКредитКонтрагент Тогда
				КоличествоРасхожденийДеталей = КоличествоРасхожденийДеталей + 1;
				Если Не ПодсчетКоличестваРасхождений Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЕстьРасхождения = ЕстьРасхожденияИтогов ИЛИ КоличествоРасхожденийДеталей > 0;
	Результат = Новый Структура("ЕстьРасхождения, ЕстьРасхожденияИтогов, КоличествоРасхожденийДеталей",
		ЕстьРасхождения, ЕстьРасхожденияИтогов, КоличествоРасхожденийДеталей);

	Возврат Результат;

КонецФункции

// Обновляет состояние сверки в форме документа
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой обновляем состояние сверки
Процедура ОбновитьСостояниеСверкиВФорме(Форма) Экспорт

	Если Форма.Объект.ЕстьРасхождения = Ложь Тогда
		Форма.СостояниеСверки = НСтр("ru = 'Нет расхождений';
									|en = 'No discrepancies'");
		Возврат;
	КонецЕсли;

	Результат = ЕстьРасхождения(Форма.Объект, Истина);
	Если Результат.ЕстьРасхождения = Ложь Тогда
		Форма.СостояниеСверки = НСтр("ru = 'Нет расхождений';
									|en = 'No discrepancies'");
		Возврат;
	КонецЕсли;

	Если Результат.ЕстьРасхожденияИтогов Тогда
		Форма.СостояниеСверки = НСтр("ru = 'Есть расхождения';
									|en = 'There are discrepancies'");
	Иначе
		Шаблон = НСтр("ru = 'Есть расхождения в детальных записях (%1 из %2)';
						|en = 'There are discrepancies in the detailed records (%1 out of %2)'");
		Форма.СостояниеСверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Результат.КоличествоРасхожденийДеталей,
			Форма.Объект.ДетальныеЗаписи.Количество());
	КонецЕсли;

КонецПроцедуры

// Процедура - Обновить состояние сверки объекта
//   Обновляет состояние сверки в реквизите объекта.
// Параметры:
//  Объект - ДокументОбъект.СверкаВзаиморасчетов2_5_11 - Целевой документ
//
Процедура ОбновитьСостояниеСверкиОбъекта(Объект) Экспорт

	Если Объект.ЕстьРасхождения = Ложь Тогда
		Объект.Состояние = НСтр("ru = 'Нет расхождений';
								|en = 'No discrepancies'");
		Возврат;
	КонецЕсли;

	Результат = ЕстьРасхождения(Объект, Ложь);
	Если Результат.ЕстьРасхождения = Ложь Тогда
		Объект.Состояние = НСтр("ru = 'Нет расхождений';
								|en = 'No discrepancies'");
		Возврат;
	КонецЕсли;

	Если Результат.ЕстьРасхожденияИтогов Тогда
		Объект.Состояние = НСтр("ru = 'Есть расхождения';
								|en = 'There are discrepancies'");
	Иначе
		Объект.Состояние = НСтр("ru = 'Есть расхождения в детальных записях';
								|en = 'There are discrepancies in the detailed records'");
	КонецЕсли;

КонецПроцедуры

// Функция - Есть несопоставленные детальные записи
//  Возвращает признак наличия несопоставленных строк табличной части
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция - 
// 
// Возвращаемое значение:
//  Булево - 
//
Функция ЕстьНесопоставленныеЗаписи(ТабличнаяЧасть) Экспорт

	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.ТипРасхождений = 1 Тогда	// Несопоставленная строка
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область Модульность

// Служебная процедура, заполняет текст гиперссылки правил оплаты 
// 
// Параметры:
//	Форма       - ФормаКлиентскогоПриложения - Договор, указанный в документе:
//	 * Элементы - ЭлементыФормы - элементы вызывающей формы
//	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//	СистемныеНастройки  - Структура - Системные настройки из дополненных параметров, если уже получены.
//
// Возвращаемое значение:
//  Строка - Форматируемая строка этапов оплаты
Функция ФорматируемаяСтрокаЭтаповОплаты(Форма, СтруктураПараметров, СистемныеНастройки) Экспорт
	
	ФормаОплаты               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ФормаОплаты);
	ГрафикОплаты              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ГрафикОплаты);
	ПорядокРасчетов           = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
	ЭтапыОплаты               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты);
	ДатаПлатежа               = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаПлатежа);
	СуммаКОплате              = СуммаКОплате(Форма, СтруктураПараметров);
	ЗаданГрафикИсполнения     = СтруктураПараметров.ЗаданГрафикИсполнения;
	ЭтоЗаказ                  = СтруктураПараметров.ЭтоЗаказ;
	ИспользоватьГрафикиОплаты = СистемныеНастройки.ИспользоватьГрафикиОплаты;
	
	ЕстьЭтапыОплаты = ЭтапыОплаты <> Неопределено;
	
	Если ЭтапыОплаты <> Неопределено Тогда
		КоличествоЭтаповОплаты    = ЭтапыОплаты.Количество();
	Иначе
		КоличествоЭтаповОплаты    = ?(ЗначениеЗаполнено(ДатаПлатежа), 1, 0);
	КонецЕсли;
	
	
	МассивСтрок = Новый Массив;
	
	Если ЭтоЗаказ И ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		
		МассивСтрок.Добавить(НСтр("ru = 'По платежам и накладным';
									|en = 'For payments and invoices'"));
		
	ИначеЕсли ЗаданГрафикИсполнения И ЭтоЗаказ
		И (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") 
			Или ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным"))Тогда
		
		МассивСтрок.Добавить(НСтр("ru = 'По графику договора';
									|en = 'By contract schedule'"));
		
	Иначе
		
		Если СуммаКОплате <= 0 И КоличествоЭтаповОплаты = 0 
			ИЛИ НЕ СтруктураПараметров.ИзменяетПланОплаты И НЕ СтруктураПараметров.ЗаказКакСчет 
			ИЛИ СуммаКОплате <= 0 И (СтруктураПараметров.ЭтоПродажаЗакупка ИЛИ СтруктураПараметров.ЭтоЗаказ) Тогда
			
			МассивСтрок.Добавить(НСтр("ru = 'Оплата не требуется';
										|en = 'Payments: not configured'"));
			
		Иначе
			
			МассивСтрок.Добавить(ПредставлениеФормыОплаты(ФормаОплаты));
			Если КоличествоЭтаповОплаты = 0 Тогда
				
				ТекстОшибки = ?(ЕстьЭтапыОплаты, НСтр("ru = 'этапы не указаны';
														|en = 'milestones are not set'"), НСтр("ru = 'не указана дата платежа';
																					|en = 'payment date is not specified'"));
				
				МассивСтрок.Добавить(", ");
				МассивСтрок.Добавить("<span style=""color: ПросроченныйДокумент"">" + ТекстОшибки +"</span>");
				
			ИначеЕсли Не ЕстьЭтапыОплаты Тогда
				
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Формат(ДатаПлатежа, "ДЛФ=D"));
				
			ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
				
				МассивСтрок.Добавить(" ");
				Для Сч=1 По КоличествоЭтаповОплаты Цикл
					СтрокаОплаты = ЭтапыОплаты[Сч-1];
					Если ЗначениеЗаполнено(СтрокаОплаты.ДатаПлатежа) И СтрокаОплаты.ПроцентПлатежа > 0 Тогда
						МассивСтрок.Добавить("<span style=""color: ГиперссылкаЦвет"">" + Формат(СтрокаОплаты.ДатаПлатежа, "ДЛФ=D") +"</span>");
						МассивСтрок.Добавить(" (" + Формат(СтрокаОплаты.ПроцентПлатежа, "ЧЦ=3; ЧДЦ=; ЧН=0") + "%)");
						Если сч < КоличествоЭтаповОплаты Тогда
							МассивСтрок.Добавить(", ");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(ГрафикОплаты)  И НЕ ЗаданГрафикИсполнения Тогда
				
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'по графику';
											|en = 'on schedule'") + " """ + Строка(ГрафикОплаты) + """");
				
			Иначе
				
				ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
					КоличествоЭтаповОплаты,
					НСтр("ru = 'этапы';
						|en = 'steps'"), НСтр("ru = 'этапа';
											|en = 'step'"), НСтр("ru = 'этапов';
																|en = 'steps'"), НСтр("ru = 'м';
																						|en = 'm'"));
					
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(НСтр("ru = 'в';
											|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок);
	
КонецФункции

// Формирует заголовок элемента НадписьВалюты
// 
// Параметры:
//	Форма       - ФормаКлиентскогоПриложения - Договор, указанный в документе:
//	 * Элементы - ЭлементыФормы - элементы вызывающей формы
//	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Процедура ОбновитьТекстГиперссылкиВалюты(Форма, СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров <> Неопределено Тогда
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(СтруктураПараметров);
	Иначе
		ДополненныеПараметрыМеханизма = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "Взаиморасчеты");
		МассивПараметров = ДополненныеПараметрыМеханизма.МассивПараметров; // Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма
	КонецЕсли;
	
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
	
		Если НЕ ЗначениеЗаполнено(СтруктураПараметров.КурсЧислитель)
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.НадписьВалюты) Тогда
			Продолжить;
		КонецЕсли;
		
		ВалютаДокумента          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаДокумента);
		ВалютаВзаиморасчетов     = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ВалютаВзаиморасчетов);
		КурсЧислитель            = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.КурсЧислитель);
		КурсЗнаменатель          = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.КурсЗнаменатель);
		Организация              = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.Организация);
		ДатаКурсаВалютыДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ДатаКурсаВалютыДокумента);
		
		НеПоказыватьРасчеты  = СтруктураПараметров.НеПоказыватьРасчеты;
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		
		НадписьВалютыЭлемент = Форма.Элементы[СтруктураПараметров.ЭлементыФормы.НадписьВалюты]; // ПолеФормы
		
		Если ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) И ВалютаДокумента = ВалютаВзаиморасчетов Тогда
			СуммаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(форма, СтруктураПараметров.СуммаДокументаФорма, , 0);
			СуммаВзаиморасчетов = СуммаДокумента;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) И ЗначениеЗаполнено(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС) Тогда
			ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
			СуммаДокумента = ТЧ.Итог(СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
			Если ТЧ.Количество() > 0 И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТЧ[0],"СуммаВзаиморасчетов") Тогда
				СуммаВзаиморасчетов = ТЧ.Итог("СуммаВзаиморасчетов");
			Иначе
				СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			СуммаВзаиморасчетов  = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаВзаиморасчетов);
			СуммаДокумента       = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
		КонецЕсли;
		
		Если СуммаДокумента = 0 Тогда
			ТекстСуммаДокумента = "";
		Иначе
			ТекстСуммаДокумента = " " + Формат(СуммаДокумента, "ЧДЦ=2");
		КонецЕсли;
		
		Если ВалютаДокумента = ВалютаВзаиморасчетов ИЛИ НеПоказыватьРасчеты Тогда
			
			НадписьВалюты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ и расчеты:%1 %2';
						|en = 'Document and AR/AP accounting:%1 %2'"),
					ТекстСуммаДокумента,
					ВалютаДокумента);
			
			Если ЗначениеЗаполнено(ДатаКурсаВалютыДокумента) Тогда
				НадписьВалюты = НадписьВалюты + " " + НСтр("ru = 'по курсу на дату:';
															|en = 'by rate as of the date:'") + " " + Формат(ДатаКурсаВалютыДокумента, "ДЛФ=D")
			КонецЕсли;
			
		Иначе
			
			ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ%1 %2';
						|en = 'Document %1 %2'"),
					ТекстСуммаДокумента,
					ВалютаДокумента);
			
			Если ЗначениеЗаполнено(ДатаКурсаВалютыДокумента) Тогда
				ТекстДокумент = ТекстДокумент + " " + НСтр("ru = 'по курсу на дату:';
															|en = 'by rate as of the date:'") + " " + Формат(ДатаКурсаВалютыДокумента, "ДЛФ=D");
				Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
					ТекстДокумент = ТекстДокумент + НСтр("ru = '(для упр. учета)';
														|en = '(for management accounting)'");
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаВзаиморасчетов = 0 Тогда
				ТекстСуммаВзаиморасчетов = "";
			Иначе
				ТекстСуммаВзаиморасчетов = " " + Формат(СуммаВзаиморасчетов, "ЧДЦ=2");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				ТекстВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			Иначе
				ТекстВалютаВзаиморасчетов = НСтр("ru = '<Не выбрана>';
												|en = '<Not selected>'")
			КонецЕсли;
			
			ТекстРасчеты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ', Расчеты%1 %2';
						|en = ', AR/AP accounting%1 %2'"),
					ТекстСуммаВзаиморасчетов,
					ТекстВалютаВзаиморасчетов);
			
			Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
				
				ТекстРасшифровка = "";
				
			ИначеЕсли ВалютаДокумента = ВалютаРегламентированногоУчета
				ИЛИ ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
				
				ВалютаНадписи = ?(ВалютаРегламентированногоУчета = ВалютаДокумента,
								ВалютаВзаиморасчетов,
								ВалютаДокумента);
				
				Если КурсЗнаменатель = 1 Тогда
					
						ТекстРасшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"(%1=%2 %3)",
							ВалютаНадписи,
							КурсЧислитель,
							ВалютаРегламентированногоУчета);
					
					Иначе
						
						ТекстРасшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '(%1 %2 за %3 %4)';
								|en = '(%1 %2 for %3 %4)'"),
							КурсЧислитель,
							ВалютаРегламентированногоУчета,
							КурсЗнаменатель,
							ВалютаНадписи);
						
				КонецЕсли;
				
			Иначе
				
				Если КурсЗнаменатель = 1 Тогда
					
					ТекстРасшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"(%1=%2 %3)",
						ВалютаДокумента,
						КурсЧислитель,
						ВалютаВзаиморасчетов);
				Иначе
					
					ТекстКурс = Строка(КурсЧислитель) + " " + ВалютаВзаиморасчетов;
					
					ТекстКратность= Строка(КурсЗнаменатель);
					
					ТекстРасшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"(%1=%2 %3)",
						ТекстКурс,
						ТекстКратность,
						ВалютаДокумента);
						
				КонецЕсли;
				
			КонецЕсли;
			
			НадписьВалюты = ТекстДокумент + ТекстРасчеты + " " + ТекстРасшифровка;
			
		КонецЕсли;
		
		НадписьВалютыЭлемент.Заголовок = НадписьВалюты;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает видимость кнопки зачета оплаты по порядку расчетов документа, если такая есть на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой находится команда зачета оплаты.
//	СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Процедура УстановитьВидимостьЗачетаОплаты(Форма, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ЭлементыФормы.ЗачетОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОбязательныеПараметры(СтруктураПараметров, "ПорядокРасчетов");
	
	ДоступенЗачетОплаты = СтруктураПараметров.ИзменяетРасчеты;
	ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПорядокРасчетов);
	
	Если СтруктураПараметров.ЭтоЗаказ Тогда
		ВидимостьЭлемента = ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
							И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным")
							И ДоступенЗачетОплаты;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.НакладнаяПоЗаказам,,Ложь) Тогда
		ВидимостьЭлемента = ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказам") И ДоступенЗачетОплаты;
	ИначеЕсли СтруктураПараметров.ЭтоСправочник Тогда
		ВидимостьЭлемента = (ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")
							Или ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамНакладным")) И ДоступенЗачетОплаты;
	Иначе
		ВидимостьЭлемента = ДоступенЗачетОплаты;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы, 
		СтруктураПараметров.ЭлементыФормы.ЗачетОплаты,
		"Видимость",
		ВидимостьЭлемента);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОборот(Обороты, Запись, ИмяРесурса)
	
	ЗначениеРесурса = Запись[ИмяРесурса];
	Если ЗначениеРесурса > 0 Тогда
		Обороты.Дт = Обороты.Дт + ЗначениеРесурса;
	Иначе
		Обороты.Кт = Обороты.Кт + (-ЗначениеРесурса);
	КонецЕсли;
	
КонецПроцедуры

//Проверяется заполненность переданных параметров в структуре, при незаполненности выдает исключение.
Процедура ПроверитьОбязательныеПараметры(СтруктураПараметров, ОбязательныеПараметры) Экспорт
	
	Реквизиты = СтрРазделить(ОбязательныеПараметры, ",");
	Для Каждого Реквизит Из Реквизиты Цикл
		Если НЕ СтруктураПараметров.Свойство(СокрЛП(Реквизит)) 
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров[СокрЛП(Реквизит)]) Тогда
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не заполнен обязательный параметр механизма ""Взаиморасчеты"":%1';
											|en = 'Parameter of the ""AR/AP accounting"" mechanism is required: %1'"),
										Реквизит));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   МассивПараметров - см. ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма
//   ИменаЭлементов - Строка, Массив из Строка - Имя поля формы.
//
// Возвращаемое значение:
//   Массив из Структура:
//    * СтруктураПараметров - см. ВзаиморасчетыСервер.ПараметрыМеханизма 
//    * ИспользуемыеЭлементыФормы - Массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма 
//
Функция МассивСтруктурПараметровПоЭлементам(МассивПараметров, ИменаЭлементов) Экспорт
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		Элементы = ИменаЭлементов;
	Иначе
		Элементы = Новый Массив;
		Элементы.Добавить(ИменаЭлементов);
	КонецЕсли;
	Результат = Новый Массив;
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		МассивНайденныхЭлементов = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			Если СтруктураПараметров.ИспользуемыеЭлементыФормы.Найти(Элемент) <> Неопределено Тогда
				МассивНайденныхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		Если МассивНайденныхЭлементов.Количество() > 0 Тогда
			СтруктураРезультата = Новый Структура;
			СтруктураРезультата.Вставить("СтруктураПараметров",       СтруктураПараметров);
			СтруктураРезультата.Вставить("ИспользуемыеЭлементыФормы", МассивНайденныхЭлементов);
			Результат.Добавить(СтруктураРезультата);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Параметры:
//   МассивПараметров - массив из см. ВзаиморасчетыСервер.ПараметрыМеханизма.
//   ИмяЭлемента - Строка.
//
// Возвращаемое значение:
//   см. ВзаиморасчетыСервер.ПараметрыМеханизма.
//
Функция СтруктураПараметровПоИмениЭлемента(МассивПараметров, ИмяЭлемента) Экспорт
	
	МассивСтруктурПараметров = МассивСтруктурПараметровПоЭлементам(МассивПараметров, ИмяЭлемента);
	
	Если МассивСтруктурПараметров.Количество() > 1 Тогда
		ВызватьИсключение(НСтр("ru = 'Элемент привязан к нескольким параметрам механизма взаиморасчетов.';
								|en = 'Item is linked to several parameters of AR/AP accounting.'"));
	ИначеЕсли МассивСтруктурПараметров.Количество() = 0 Тогда
		ВызватьИсключение(НСтр("ru = 'Элемент не привязан к параметрам механизма взаиморасчетов.';
								|en = 'Item is not linked to parameters of AR/AP accounting.'"));
	Иначе
		Возврат МассивСтруктурПараметров[0].СтруктураПараметров;
	КонецЕсли;
	
КонецФункции

// Возвращает информативное представление формы оплаты для документов
//
// Параметры:
// 		ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты. для которой нужно получить представление.
//
// Возвращаемое значение:
// 		Строка - представление формы оплаты.
//
Функция ПредставлениеФормыОплаты(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'К оплате';
							|en = 'Amount due'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная") Тогда
		Представление = НСтр("ru = 'К оплате безнал';
							|en = 'Amount due by bank transfer'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
		Представление = НСтр("ru = 'К оплате нал';
							|en = 'Amount due by cash'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'К оплате платежной картой';
							|en = 'Amount due by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ЭтоТабличнаяЧасть(Таблица) Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Таблица, "Колонки");
КонецФункции

Функция СуммаКОплате(Форма, СтруктураПараметров) Экспорт
	
	Если  ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда 
		СуммаВсего = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, "Форма.ИтогСуммаСНДСУвеличение");
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.СуммаДокументаФорма) Тогда
		СуммаВсего = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокументаФорма);
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.ПутьКДаннымТЧ) Тогда
		ТЧ = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.ПутьКДаннымТЧ);
		СуммаВсего = ИтогПоСуммамОдногоЗнака(ТЧ, СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС);
	Иначе
		СуммаВсего = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, СтруктураПараметров.СуммаДокумента);
	КонецЕсли;
	
	Возврат СуммаВсего;
	
КонецФункции

Функция ИтогПоСуммамОдногоЗнака(Таблица, ИмяКолонки, Отрицательные = Ложь) Экспорт
	
	Итог = 0;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если Отрицательные
				И СтрокаТаблицы[ИмяКолонки] < 0
			Или Не Отрицательные
				И СтрокаТаблицы[ИмяКолонки] > 0 Тогда
			Итог = Итог + СтрокаТаблицы[ИмяКолонки];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

#КонецОбласти
