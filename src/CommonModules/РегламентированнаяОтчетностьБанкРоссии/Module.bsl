////////////////////////////////////////////////////////////////////////////////
// Модуль содержит серверные процедуры и функции для заполнения данными шаблонов
// форм федерального статистического наблюдения в форматах .XLSM или .PDF,
// а также - другие методы для подготовки первичных статистических данных перед
// отправкой их в Банк России.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ДанныеВыгрузкиИзЗаполненногоМакетаШаблона(Форма, ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	ИмяВременнойПапкиZIP = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(ИмяВременнойПапкиZIP);
	
	ИмяВременнойПапкиXLSM = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(ИмяВременнойПапкиXLSM);
	
	// Распаковка архива с шаблоном и распаковка самого шаблона.
	ИмяФайлаАрхива = ИмяВременнойПапкиZIP + "archive.zip";
	
	АрхивШаблона = Форма.ОбъектОтчета(Форма.ИмяФормы).ПолучитьМакет(ПараметрыВыгрузки.ИмяМакетаШаблона);
	АрхивШаблона.Записать(ИмяФайлаАрхива);
	
	ЧтениеZip = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
	
	ИмяФайлаШаблона = ИмяВременнойПапкиZIP + ЧтениеZip.Элементы[0].Имя;
	
	ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], ИмяВременнойПапкиZIP, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеZip.Закрыть();
	
	ЧтениеZip = Новый ЧтениеZipФайла(ИмяФайлаШаблона); // распаковка содержимого .XLSM шаблона
	ЧтениеZip.ИзвлечьВсе(ИмяВременнойПапкиXLSM, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZip.Закрыть();
	
	УдалитьФайлы(ИмяФайлаАрхива);
	УдалитьФайлы(ИмяФайлаШаблона);
	
	// Подготовка распакованных файлов шаблона к обработке.
	ТЗОбработки = Новый ТаблицаЗначений;
	ТЗОбработки.Колонки.Добавить("ИД",          Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("Каталог",     Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("ИмяФайла",    Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("ТипФайла",    Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("ТипФайлаXML", Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("ЭтоКнига",    Новый ОписаниеТипов("Булево"));
	ТЗОбработки.Колонки.Добавить("ЭтоЛист",     Новый ОписаниеТипов("Булево"));
	ТЗОбработки.Колонки.Добавить("ИмяЛиста",    Новый ОписаниеТипов("Строка"));
	ТЗОбработки.Колонки.Добавить("ИДЛиста",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	ТЗОбработки.Колонки.Добавить("Статус",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0)));
	ТЗОбработки.Колонки.Добавить("СвязьСтрока");
	ТЗОбработки.Колонки.Добавить("Документ");
	ТЗОбработки.Колонки.Добавить("Свойства");
	ТЗОбработки.Колонки.Добавить("КэшЭлем",     Новый ОписаниеТипов("Структура"));
	
	НайденныеФайлы = НайтиФайлы(ИмяВременнойПапкиXLSM, "*", Истина);
	Для Каждого Файл Из НайденныеФайлы Цикл
		Если НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Файл.УстановитьВремяИзменения('19800101000000'); // сразу установим минимальную дату изменения файла
		
		Если Файл.Расширение <> ".xml" И Файл.Расширение <> ".vml" И Файл.Расширение <> ".rels" Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТЗОбработки.Добавить();
		НовСтрока.Каталог  = Файл.Путь;
		НовСтрока.ИмяФайла = Файл.Имя;
		Если Файл.Расширение = ".rels" Тогда
			НовСтрока.ТипФайла = "Relationships";
		ИначеЕсли Файл.ИмяБезРасширения = "[Content_Types]" Тогда
			НовСтрока.ТипФайла = "Types";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовСтрока.Документ = ДокументDOMИзФайлаXML(Файл.ПолноеИмя, НовСтрока.Свойства);
	КонецЦикла;
	
	ТЗОбработки.Сортировать("Каталог,ИмяФайла");
	
	ФайлРабочаяКнигаСтрока = Неопределено;
	СписокЛистовКорень     = Неопределено;
	СписокЛистовЭлементы   = Неопределено;
	
	ФайлыСвязейСтроки = ТЗОбработки.НайтиСтроки(Новый Структура("ТипФайла", "Relationships"));
	Для Каждого ФайлСвязейСтрока Из ФайлыСвязейСтроки Цикл
		
		СвязиИзДокумента = ФайлСвязейСтрока.Документ.ПолучитьЭлементыПоИмени("Relationship");
		Для Каждого СвязьИзДокумента Из СвязиИзДокумента Цикл
			
			ИД = СвязьИзДокумента.ПолучитьАтрибут("Id");
			ТипФайлаXML = СвязьИзДокумента.ПолучитьАтрибут("Type");
			ОтносительныйПутьКФайлу = СвязьИзДокумента.ПолучитьАтрибут("Target");
			
			Файл = Новый Файл(ФайлСвязейСтрока.Каталог + ".." + ПолучитьРазделительПути()
				+ СокрЛП(СтрЗаменить(ОтносительныйПутьКФайлу, "/", ПолучитьРазделительПути())));
			Если Файл.Существует() Тогда
				ФайлыПоСсылкеСтроки = ТЗОбработки.НайтиСтроки(Новый Структура("Каталог,ИмяФайла", Файл.Путь, Файл.Имя));
				Если ФайлыПоСсылкеСтроки.Количество() > 0 Тогда
					ФайлПоСсылкеСтрока = ФайлыПоСсылкеСтроки[0];
					
					ФайлПоСсылкеСтрока.ИД = ИД;
					ТипФайлаXMLСостав = СтрРазделить(ТипФайлаXML, "/");
					ФайлПоСсылкеСтрока.ТипФайла = ТипФайлаXMLСостав[ТипФайлаXMLСостав.ВГраница()];
					ФайлПоСсылкеСтрока.ТипФайлаXML = ТипФайлаXML;
					ФайлПоСсылкеСтрока.СвязьСтрока = ФайлСвязейСтрока;
					
					Если ФайлПоСсылкеСтрока.ТипФайла = "officeDocument" Тогда
						
						ФайлПоСсылкеСтрока.ЭтоКнига = Истина;
						ФайлПоСсылкеСтрока.Документ = ДокументDOMИзФайлаXML(Файл.ПолноеИмя, ФайлПоСсылкеСтрока.Свойства);
						
						ФайлРабочаяКнигаСтрока = ФайлПоСсылкеСтрока; // файл этого типа единственный в шаблоне
						СписокЛистовКорень = ФайлРабочаяКнигаСтрока.Документ.ПолучитьЭлементыПоИмени("sheets")[0];
						СписокЛистовЭлементы = СписокЛистовКорень.ПолучитьЭлементыПоИмени("sheet");
						
						Продолжить;
						
					ИначеЕсли ФайлПоСсылкеСтрока.ТипФайла = "worksheet" Тогда
						
						ФайлПоСсылкеСтрока.ЭтоЛист = Истина;
						
						Если СписокЛистовЭлементы <> Неопределено И СписокЛистовЭлементы.Количество() > 0 Тогда
							Разыменователь = ФайлРабочаяКнигаСтрока.Документ.СоздатьРазыменовательПИ();
							РезультатXPath = ФайлРабочаяКнигаСтрока.Документ.ВычислитьВыражениеXPath("xmlns:sheet[@r:id='" + ИД + "']",
								СписокЛистовКорень, Разыменователь, ТипРезультатаDOMXPath.ПервыйУпорядоченныйУзел);
							Если ТипЗнч(РезультатXPath.ОдиночныйУзелЗначение) = Тип("ЭлементDOM") Тогда
								ФайлПоСсылкеСтрока.ИмяЛиста = СокрЛП(РезультатXPath.ОдиночныйУзелЗначение.ПолучитьАтрибут("name"));
								ФайлПоСсылкеСтрока.ИДЛиста = Число(" " + РезультатXPath.ОдиночныйУзелЗначение.ПолучитьАтрибут("sheetId"));
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					ФайлПоСсылкеСтрока.Документ = ДокументDOMИзФайлаXML(Файл.ПолноеИмя, ФайлПоСсылкеСтрока.Свойства);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Подготовка дополнительных параметров выгрузки для оптимизации заполнения документов.
	ДопПараметрыШаблона = Новый Структура();
	ПараметрыВыгрузки.Вставить("ДопПараметрыШаблона", ДопПараметрыШаблона);
	
	ДопПараметрыШаблона.Вставить("ДокументРабочаяКнига", ФайлРабочаяКнигаСтрока.Документ);
	
	ФайлОбщиеСтроки = ТЗОбработки.Найти("sharedStrings", "ТипФайла");
	Если ФайлОбщиеСтроки <> Неопределено Тогда
		ФайлОбщиеСтроки.Статус = 1; // всегда будет модифицирован
		ДопПараметрыШаблона.Вставить("ДокументОбщиеСтроки", ФайлОбщиеСтроки.Документ);
		ДопПараметрыШаблона.Вставить("ИндексыОбщихСтрок", ИндексыОбщихСтрок(ФайлОбщиеСтроки.Документ));
	КонецЕсли;
	
	// Подготовка соответствия ссылок именованным областям.
	ИменаИСсылкиРабочейКниги = Новый СписокЗначений;
	КорневыеУзлыИменаИСсылки = ФайлРабочаяКнигаСтрока.Документ.ПолучитьЭлементыПоИмени("definedNames");
	Если КорневыеУзлыИменаИСсылки.Количество() > 0 Тогда
		УзлыИменаИСсылки = КорневыеУзлыИменаИСсылки[0].ПолучитьЭлементыПоИмени("definedName");
		Для Каждого УзелИмяИСсылка Из УзлыИменаИСсылки Цикл
			ИменаИСсылкиРабочейКниги.Добавить(УзелИмяИСсылка.ПолучитьАтрибут("name"), УзелИмяИСсылка.ТекстовоеСодержимое);
		КонецЦикла;
	КонецЕсли;
	ДопПараметрыШаблона.Вставить("ИменаИСсылкиРабочейКниги", ИменаИСсылкиРабочейКниги);
	
	// Внесение изменений в документы DOM распакованного шаблона.
	ЗаписатьДанныеВДокументыШаблона(Форма, ТекстВыгрузки, ПараметрыВыгрузки, ТЗОбработки);
	ЗаписатьДополнительнуюИнформациюВДокументыШаблона(ПолноеИмяПользователя(), ТЗОбработки);
	
	// Запись модифицированных файлов шаблона после обработки.
	Для Каждого СтрокаТаблицы Из ТЗОбработки Цикл
		Если СтрокаТаблицы.Статус > 0 Тогда
			ЗаписатьДокументDOMВФайлXML(СтрокаТаблицы.Документ,
				СтрокаТаблицы.Каталог + СтрокаТаблицы.ИмяФайла,
				СтрокаТаблицы.Свойства, СтрокаТаблицы.ТипФайла);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление дополнительных параметров шаблона (данные используются только на сервере).
	ПараметрыВыгрузки.Удалить("ДопПараметрыШаблона");
	
	// Упаковка измененных файлов в файл шаблона и создание нового архива с шаблоном.
	ЗаписьZip = Новый ЗаписьZipФайла(ИмяФайлаШаблона, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный);
	ЗаписьZip.Добавить(ИмяВременнойПапкиXLSM + "*.*",
		РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ЗаписьZip.Записать();
	
	ЗаписьZip = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный);
	ЗаписьZip.Добавить(ИмяФайлаШаблона);
	ЗаписьZip.Записать();
	
	АдресАрхиваШаблонаВоВремХранилище = ПоместитьВоВременноеХранилище(
		Новый ДвоичныеДанные(ИмяФайлаАрхива), Новый УникальныйИдентификатор);
	
	// Удаляются временные папки со всеми созданными файлами.
	УдалитьФайлы(ИмяВременнойПапкиXLSM);
	УдалитьФайлы(ИмяВременнойПапкиZIP);
	
	ДанныеВыгрузкиШаблона = Новый Структура;
	ДанныеВыгрузкиШаблона.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИмяФайлаШаблона + ".zip");
	ДанныеВыгрузкиШаблона.Вставить("АдресФайлаВыгрузки", АдресАрхиваШаблонаВоВремХранилище);
	ДанныеВыгрузкиШаблона.Вставить("ТипФайлаВыгрузки", "ОтчетФСНБР");
	
	Возврат ДанныеВыгрузкиШаблона;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеФайловШаблонаДанными

Функция ДокументDOMИзФайлаXML(ИмяФайлаXML, СвойстваФайлаXML) Экспорт
	
	Перем ДокументDOM;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	СвойстваФайлаXML = СвойстваИзФайлаXML(ИмяФайлаXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция СвойстваИзФайлаXML(ИмяФайлаXML)
	
	СвойстваИзФайла = Новый Структура;
	СвойстваИзФайла.Вставить("ОбъявлениеXML",       "");
	СвойстваИзФайла.Вставить("ИмяЭлемента",         "");
	СвойстваИзФайла.Вставить("СтрАтрибутыЭлемента", "");
	СвойстваИзФайла.Вставить("АтрибутыЭлемента", Новый СписокЗначений);
	СвойстваИзФайла.Вставить("АтрибутыЗаменить", Ложь);
	СвойстваИзФайла.Вставить("ЕстьРазделитель",  Ложь);
	
	КодировкаXML = "UTF-8";
	
	ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML( , , , , Ложь, Истина, Истина, Истина, Ложь);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайлаXML, ПараметрыЧтенияXML);
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.ОбъявлениеXML Тогда
			Если НЕ ПустаяСтрока(ЧтениеXML.КодировкаXML) Тогда
				КодировкаXML = ЧтениеXML.КодировкаXML;
			КонецЕсли;
			СтрАвтономный = ?(ЧтениеXML.Автономный, " standalone=""yes""", ""); 
			СвойстваИзФайла.ОбъявлениеXML = "<?xml"
				+ " version=""" + ЧтениеXML.ВерсияXML + """"
				+ " encoding=""" + КодировкаXML + """"
				+ СтрАвтономный + "?>";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			СвойстваИзФайла.ИмяЭлемента = ЧтениеXML.Имя;
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				СвойстваИзФайла.АтрибутыЭлемента.Добавить(ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаXML, КодировкаXML, , , Ложь);
	
	СтрОбъявлениеXML = ЧтениеТекста.ПрочитатьСтроку("<" + СвойстваИзФайла.ИмяЭлемента);
	Если СтрОбъявлениеXML <> Неопределено Тогда
		Если СтрДлина(СтрОбъявлениеXML) > 5
		 И  Лев(СтрОбъявлениеXML, 5) = "<?xml"
		 И Прав(СтрОбъявлениеXML, 1) = Символы.ПС Тогда
			СвойстваИзФайла.ЕстьРазделитель = Истина;
			СтрОбъявлениеXML = СокрП(СтрОбъявлениеXML);
		КонецЕсли;
		СвойстваИзФайла.ОбъявлениеXML = СтрОбъявлениеXML;
		
		СтрАтрибутыЭлемента = ЧтениеТекста.ПрочитатьСтроку(">");
		Если СтрАтрибутыЭлемента <> Неопределено Тогда
			Если СтрДлина(СтрАтрибутыЭлемента) > 0
			 И Прав(СтрАтрибутыЭлемента, 1) = "/" Тогда
				СтрАтрибутыЭлемента = Лев(СтрАтрибутыЭлемента, СтрДлина(СтрАтрибутыЭлемента) - 1);
			КонецЕсли;
			СвойстваИзФайла.СтрАтрибутыЭлемента = СтрАтрибутыЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеТекста.Закрыть();
	
	СтрАтрибутыЭлементаВПорядкеСчитывания = "";
	Для Каждого АтрибутЭлемента Из СвойстваИзФайла.АтрибутыЭлемента Цикл
		СтрАтрибутыЭлементаВПорядкеСчитывания = СтрАтрибутыЭлементаВПорядкеСчитывания
			+ " " + АтрибутЭлемента.Значение + "=""" + АтрибутЭлемента.Представление + """";
	КонецЦикла;
	Если СвойстваИзФайла.СтрАтрибутыЭлемента <> СтрАтрибутыЭлементаВПорядкеСчитывания Тогда
		СвойстваИзФайла.АтрибутыЗаменить = Истина;
	КонецЕсли;
	
	Возврат СвойстваИзФайла;
	
КонецФункции

Функция АтрибутыСовпадают(АтрибутыЭлементаDOM, АтрибутыЭлемента)
	
	АтрибутыЭлементаDOMСписок = Новый СписокЗначений;
	
	Для Каждого АтрибутЭлементаDOM Из АтрибутыЭлементаDOM Цикл
		АтрибутЭлемента = АтрибутыЭлемента.НайтиПоЗначению(АтрибутЭлементаDOM.Имя);
		Если АтрибутЭлемента = Неопределено
		 ИЛИ АтрибутЭлемента.Представление <> АтрибутЭлементаDOM.ТекстовоеСодержимое Тогда
			Возврат Ложь;
		КонецЕсли;
		АтрибутыЭлементаDOMСписок.Добавить(АтрибутЭлементаDOM.Имя, АтрибутЭлементаDOM.ТекстовоеСодержимое);
	КонецЦикла;
	
	Для Каждого АтрибутЭлемента Из АтрибутыЭлемента Цикл
		АтрибутЭлементаDOM = АтрибутыЭлементаDOMСписок.НайтиПоЗначению(АтрибутЭлемента.Значение);
		Если АтрибутЭлементаDOM = Неопределено
		 ИЛИ АтрибутЭлементаDOM.Представление <> АтрибутЭлемента.Представление Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ИмяЛистаИСсылка(ПолнаяСсылка)
	
	ЭлементыПолнойСсылки = СтрРазделить(ПолнаяСсылка, "!");
	
	СтруктураПолнойСсылки = Новый Структура("ИмяЛиста,Ссылка",
		СтрЗаменить(ЭлементыПолнойСсылки[0], "'", ""), ?(ЭлементыПолнойСсылки.ВГраница() > 0, ЭлементыПолнойСсылки[1], ""));
	
	Возврат СтруктураПолнойСсылки;
	
КонецФункции

Функция КоординатыОбласти(СсылкаНаОбласть) Экспорт
	
	Координаты = Новый Структура("Строка1,Столбец1,Строка2,Столбец2", 0, 0, 0, 0);
	
	ЧастиСтрСсылки = СтрРазделить(СтрЗаменить(СсылкаНаОбласть, "$", ""), ":");
	
	СтрЦифры = "0123456789";
	
	Для Ном = 1 По Мин(ЧастиСтрСсылки.Количество(), 2) Цикл
		
		СтрСтрока = "";
		СтрСтолбец = "";
		
		ЧастьСтрСсылки = СокрЛП(ЧастиСтрСсылки[Ном - 1]);
		Для НомСим = 1 По СтрДлина(ЧастьСтрСсылки) Цикл
			Сим = Сред(ЧастьСтрСсылки, НомСим, 1);
			Если СтрНайти(СтрЦифры, Сим) > 0 Тогда
				СтрСтрока = СтрСтрока + Сим;
			Иначе
				СтрСтолбец = СтрСтолбец + Сим;
			КонецЕсли;
		КонецЦикла;
		
		ИмяКлючаСтрока  = "Строка"  + СокрЛ(Ном);
		ИмяКлючаСтолбец = "Столбец" + СокрЛ(Ном);
		
		Координаты[ИмяКлючаСтрока]  = Число(" " + СтрСтрока);
		Координаты[ИмяКлючаСтолбец] = ПорядковыйНомерИзСимвольногоКода(СтрСтолбец);
		
	КонецЦикла;
	
	Возврат Координаты;
	
КонецФункции

Функция СимвольнаяИЧисловаяЧастиИД(СтрокаИД)
	
	СоставнойИД = Новый Структура("СимвольнаяЧасть,ЧисловаяЧасть", "", 0);
	
	СтрЦифры = "0123456789";
	
	СтрЧисловаяЧасть = "";
	СтрСимвольнаяЧасть = "";
	
	Для НомСим = 1 По СтрДлина(СтрокаИД) Цикл
		Сим = Сред(СтрокаИД, НомСим, 1);
		Если СтрНайти(СтрЦифры, Сим) > 0 Тогда
			СтрЧисловаяЧасть = СтрЧисловаяЧасть + Сим;
		Иначе
			СтрСимвольнаяЧасть = СтрСимвольнаяЧасть + Сим;
		КонецЕсли;
	КонецЦикла;
	
	СоставнойИД.СимвольнаяЧасть = СтрСимвольнаяЧасть;
	СоставнойИД.ЧисловаяЧасть = Число(" " + СтрЧисловаяЧасть);
	
	Возврат СоставнойИД;
	
КонецФункции

Функция ИндексыОбщихСтрок(ДокументDOM)
	
	УникальныеСтроки = Новый Соответствие;
	
	ИндексСтроки = 0;
	
	УзелВсеСтроки = ДокументDOM.ЭлементДокумента;
	Если УзелВсеСтроки.ЛокальноеИмя = "sst" Тогда
		
		УзелСтрока = УзелВсеСтроки.ПервыйДочерний;
		Пока УзелСтрока <> Неопределено Цикл
			Если УзелСтрока.ЛокальноеИмя = "si" Тогда
				УзелСодержимое = УзелСтрока.ПервыйДочерний;
				ЗначениеУзла = ?(УзелСодержимое = Неопределено, "", УзелСодержимое.ТекстовоеСодержимое);
				УникальныеСтроки.Вставить(ЗначениеУзла, Формат(ИндексСтроки, "ЧН=; ЧГ="));
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
			
			УзелСтрока = УзелСтрока.СледующийСоседний;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат УникальныеСтроки;
	
КонецФункции

Функция СтрИндексОбщейСтроки(ДобавляемаяСтрока, ПараметрыВыгрузки)
	
	ДокументDOM = ПараметрыВыгрузки.ДопПараметрыШаблона.ДокументОбщиеСтроки;
	ИндОбщихСтрок = ПараметрыВыгрузки.ДопПараметрыШаблона.ИндексыОбщихСтрок;
	
	СтрИндОбщейСтроки = Неопределено;
	
	УзелВсеСтроки = ДокументDOM.ЭлементДокумента;
	Если УзелВсеСтроки.ЛокальноеИмя = "sst" Тогда
		
		СтрИндОбщейСтроки = ИндОбщихСтрок[ДобавляемаяСтрока];
		
		Если СтрИндОбщейСтроки = Неопределено Тогда
			
			УзелСтрока = УзелВсеСтроки.ПоследнийДочерний;
			Пока УзелСтрока <> Неопределено И УзелСтрока.ЛокальноеИмя <> "si" Цикл
				УзелСтрока = УзелСтрока.ПредыдущийСоседний;
			КонецЦикла;
			
			КоличествоУникальныхСтрокСтр = УзелВсеСтроки.ПолучитьАтрибут("uniqueCount");
			НовКоличествоУникальныхСтрок = Число(" " + КоличествоУникальныхСтрокСтр) + 1;
			НовКоличествоУникальныхСтрокСтр = Формат(НовКоличествоУникальныхСтрок, "ЧН=; ЧГ=");
			УзелВсеСтроки.УстановитьАтрибут("uniqueCount", НовКоличествоУникальныхСтрокСтр);
			
			ИндОбщихСтрок.Вставить(ДобавляемаяСтрока, КоличествоУникальныхСтрокСтр);
			
			СтрИндОбщейСтроки = КоличествоУникальныхСтрокСтр;
			
			НовУзелТекст = ДокументDOM.СоздатьЭлемент(УзелВсеСтроки.URIПространстваИмен, "t");
			НовУзелТекст.ТекстовоеСодержимое = ДобавляемаяСтрока;
			НовУзелСтрока = ДокументDOM.СоздатьЭлемент(УзелВсеСтроки.URIПространстваИмен, "si");
			НовУзелСтрока.ДобавитьДочерний(НовУзелТекст);
			Если УзелСтрока <> Неопределено И УзелСтрока.СледующийСоседний <> Неопределено Тогда
				УзелВсеСтроки.ВставитьПеред(НовУзелСтрока, УзелСтрока.СледующийСоседний);
			Иначе
				УзелВсеСтроки.ДобавитьДочерний(НовУзелСтрока);
			КонецЕсли;
			НовУзелТекст.ОтменитьСоответствиеПространстваИмен(УзелВсеСтроки.URIПространстваИмен);
			НовУзелСтрока.ОтменитьСоответствиеПространстваИмен(УзелВсеСтроки.URIПространстваИмен);
			
		КонецЕсли;
		
		НовКоличествоСтрок = Число(" " + УзелВсеСтроки.ПолучитьАтрибут("count")) + 1;
		УзелВсеСтроки.УстановитьАтрибут("count", Формат(НовКоличествоСтрок, "ЧН=; ЧГ="));
		
	КонецЕсли;
	
	Возврат СтрИндОбщейСтроки;
	
КонецФункции

Функция ПорядковыйНомерИзСимвольногоКода(Знач СимвольныйКод)
	
	ПорядковыйНомер = 0;
	
	НаборСимволов = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	ДлинаКода   = СтрДлина(СимвольныйКод);
	ДлинаНабора = СтрДлина(НаборСимволов);
	
	ВесРазряда = 1;
	Для Инд = 0 По ДлинаКода - 1 Цикл
		Сим = ВРег(Сред(СимвольныйКод, ДлинаКода - Инд, 1));
		ПорядковыйНомер = ПорядковыйНомер + ВесРазряда * СтрНайти(НаборСимволов, Сим);
		ВесРазряда = ВесРазряда * ДлинаНабора;
	КонецЦикла;
	
	Возврат ПорядковыйНомер;
	
КонецФункции

Функция СимвольныйКодИзПорядковогоНомера(Знач ПорядковыйНомер)
	
	НаборСимволов = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	ДлинаНабора = СтрДлина(НаборСимволов);
	
	СимвольныйКод = "";
	
	Пока ПорядковыйНомер > 0 Цикл
		Остаток = ПорядковыйНомер % ДлинаНабора;
		Остаток = ?(Остаток > 0, Остаток, ДлинаНабора);
		ПорядковыйНомер = Окр((ПорядковыйНомер - Остаток) / ДлинаНабора);
		СимвольныйКод = Сред(НаборСимволов, Остаток, 1) + СимвольныйКод;
	КонецЦикла;
	
	Возврат СимвольныйКод;
	
КонецФункции

Функция НоваяТаблицаКэшированныхУзлов()
	
	ТаблицаКэшированныхУзлов = Новый ТаблицаЗначений;
	
	ТаблицаКэшированныхУзлов.Колонки.Добавить("Ном", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7,0)));
	ТаблицаКэшированныхУзлов.Колонки.Добавить("Док");
	ТаблицаКэшированныхУзлов.Колонки.Добавить("Таб");
	
	ТаблицаКэшированныхУзлов.Индексы.Добавить("Ном");
	
	Возврат ТаблицаКэшированныхУзлов;
	
КонецФункции

Функция ФорматированноеЗначение(Знач Значение)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧРД=.; ЧН=; ЧГ=");
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Значение = Строка(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция УзелЯчейкиЛиста(ФайлЛистаСтрока, СсылкаСтрока)
	
	КоординатыЯчейки = КоординатыОбласти(СсылкаСтрока);
	
	ДанныеЛиста = ФайлЛистаСтрока.КэшЭлем.sheetData;
	
	НомСтроки = КоординатыЯчейки.Строка1;
	СтрокаЛиста = ДанныеЛиста.Таб.Найти(НомСтроки, "Ном");
	Если СтрокаЛиста = Неопределено Тогда // добавим новый узел строки листа
		ПредыдущаяСтрокаЛиста = Неопределено;
		СледующаяСтрокаЛиста  = Неопределено;
		Если ДанныеЛиста.Таб.Количество() > 0 Тогда
			ПоследняяСтрокаЛиста = ДанныеЛиста.Таб[ДанныеЛиста.Таб.Количество() - 1];
			Если НомСтроки > ПоследняяСтрокаЛиста.Ном Тогда
				ПредыдущаяСтрокаЛиста = ПоследняяСтрокаЛиста;
				СледующаяСтрокаЛиста  = ПоследняяСтрокаЛиста;
			Иначе
				Для Каждого СледующаяСтрокаЛиста Из ДанныеЛиста.Таб Цикл
					Если НомСтроки < СледующаяСтрокаЛиста.Ном Тогда
						Прервать;
					КонецЕсли;
					ПредыдущаяСтрокаЛиста = СледующаяСтрокаЛиста;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НовУзелСтрока = ДанныеЛиста.Док.ДокументВладелец.СоздатьЭлемент(ДанныеЛиста.Док.URIПространстваИмен, "row");
		Если ПредыдущаяСтрокаЛиста = СледующаяСтрокаЛиста Тогда
			СтрокаЛиста = ДанныеЛиста.Таб.Добавить();
			СтрокаЛиста.Док = ДанныеЛиста.Док.ДобавитьДочерний(НовУзелСтрока);
		Иначе
			СтрокаЛиста = ДанныеЛиста.Таб.Вставить(ДанныеЛиста.Таб.Индекс(СледующаяСтрокаЛиста));
			СтрокаЛиста.Док = ДанныеЛиста.Док.ВставитьПеред(НовУзелСтрока, СледующаяСтрокаЛиста.Док);
		КонецЕсли;
		Если СледующаяСтрокаЛиста <> Неопределено Тогда
			Для Каждого УзелАтрибут Из СледующаяСтрокаЛиста.Док.Атрибуты Цикл
				Если СтрНайти("'r','spans','x14ac:dyDescent'", "'" + УзелАтрибут.Имя + "'") = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаЛиста.Док.УстановитьАтрибут(УзелАтрибут.URIПространстваИмен, УзелАтрибут.Имя, УзелАтрибут.Значение);
			КонецЦикла;
		КонецЕсли;
		СтрокаЛиста.Док.ОтменитьСоответствиеПространстваИмен(ДанныеЛиста.Док.URIПространстваИмен);
		
		СтрокаЛиста.Ном = НомСтроки;
		СтрокаЛиста.Таб = НоваяТаблицаКэшированныхУзлов();
		СтрокаЛиста.Док.УстановитьАтрибут("r", Формат(НомСтроки, "ЧГ="));
		УзелФорматЛиста = Неопределено;
		Если ФайлЛистаСтрока.КэшЭлем.Свойство("sheetFormatPr", УзелФорматЛиста) Тогда
			URIПоПрефиксу = УзелФорматЛиста.Док.НайтиURIПространстваИмен("x14ac");
			УзелАтрибута = УзелФорматЛиста.Док.ПолучитьУзелАтрибута(URIПоПрефиксу, "dyDescent");
			Если УзелАтрибута <> Неопределено Тогда
				СтрокаЛиста.Док.УстановитьАтрибут(УзелАтрибута.URIПространстваИмен, УзелАтрибута.Имя, УзелАтрибута.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомСтолбца = КоординатыЯчейки.Столбец1;
	ЯчейкаЛиста = СтрокаЛиста.Таб.Найти(НомСтолбца, "Ном");
	Если ЯчейкаЛиста = Неопределено Тогда // добавим новый узел ячейки листа
		ПредыдущаяЯчейкаЛиста = Неопределено;
		СледующаяЯчейкаЛиста  = Неопределено;
		Если СтрокаЛиста.Таб.Количество() > 0 Тогда
			ПоследняяЯчейкаСтроки = СтрокаЛиста.Таб[СтрокаЛиста.Таб.Количество() - 1];
			Если НомСтолбца > ПоследняяЯчейкаСтроки.Ном Тогда
				ПредыдущаяЯчейкаЛиста = ПоследняяЯчейкаСтроки;
				СледующаяЯчейкаЛиста  = ПоследняяЯчейкаСтроки;
			Иначе
				Для Каждого СледующаяЯчейкаЛиста Из СтрокаЛиста.Таб Цикл
					Если НомСтолбца < СледующаяЯчейкаЛиста.Ном Тогда
						Прервать;
					КонецЕсли;
					ПредыдущаяЯчейкаЛиста = СледующаяЯчейкаЛиста;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НовУзелСтолбец = СтрокаЛиста.Док.ДокументВладелец.СоздатьЭлемент(СтрокаЛиста.Док.URIПространстваИмен, "c");
		Если ПредыдущаяЯчейкаЛиста = СледующаяЯчейкаЛиста Тогда
			ЯчейкаЛиста = СтрокаЛиста.Таб.Добавить();
			ЯчейкаЛиста.Док = СтрокаЛиста.Док.ДобавитьДочерний(НовУзелСтолбец);
		Иначе
			ЯчейкаЛиста = СтрокаЛиста.Таб.Вставить(СтрокаЛиста.Таб.Индекс(СледующаяЯчейкаЛиста));
			ЯчейкаЛиста.Док = СтрокаЛиста.Док.ВставитьПеред(НовУзелСтолбец, СледующаяЯчейкаЛиста.Док);
		КонецЕсли;
		Если СледующаяЯчейкаЛиста <> Неопределено Тогда
			Для Каждого УзелАтрибут Из СледующаяЯчейкаЛиста.Док.Атрибуты Цикл
				Если СтрНайти("'r','s'", "'" + УзелАтрибут.Имя + "'") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ЯчейкаЛиста.Док.УстановитьАтрибут(УзелАтрибут.URIПространстваИмен, УзелАтрибут.Имя, УзелАтрибут.Значение);
			КонецЦикла;
		КонецЕсли;
		ЯчейкаЛиста.Док.ОтменитьСоответствиеПространстваИмен(СтрокаЛиста.Док.URIПространстваИмен);
		
		ЯчейкаЛиста.Ном = НомСтолбца;
		ЯчейкаЛиста.Док.УстановитьАтрибут("r", СимвольныйКодИзПорядковогоНомера(НомСтолбца) + Формат(НомСтроки, "ЧГ="));
		ФорматСтолбцов = Неопределено;
		Если ФайлЛистаСтрока.КэшЭлем.Свойство("cols", ФорматСтолбцов) Тогда
			ЗначениеАтрибутаСтиль = Неопределено;
			
			НайденныйСтолбец = ФорматСтолбцов.Таб.Найти(НомСтолбца, "Ном");
			Если НайденныйСтолбец <> Неопределено Тогда
				ЗначениеАтрибутаСтиль = НайденныйСтолбец.Док.ПолучитьАтрибут("style");
			Иначе
				Для Каждого НайденныйСтолбец Из ФорматСтолбцов.Таб Цикл
					Если НомСтолбца >= НайденныйСтолбец.Ном
					   И НомСтолбца <= Число(" " + НайденныйСтолбец.Док.ПолучитьАтрибут("max")) Тогда
						ЗначениеАтрибутаСтиль = НайденныйСтолбец.Док.ПолучитьАтрибут("style");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеАтрибутаСтиль <> Неопределено  Тогда
				ЯчейкаЛиста.Док.УстановитьАтрибут("s", ЗначениеАтрибутаСтиль);
			КонецЕсли;
		КонецЕсли;
		
		ЧастиДиапазона = СтрРазделить(Строка(СтрокаЛиста.Док.ПолучитьАтрибут("spans")), ":");
		Если ЧастиДиапазона.Количество() = 2 Тогда
			НомНач = Число(" " + ЧастиДиапазона[0]);
			НомКон = Число(" " + ЧастиДиапазона[1]);
			ОбновитьДиапазон = Ложь;
			Если НомСтолбца < НомНач Тогда
				ЧастиДиапазона[0] = Формат(НомСтолбца, "ЧГ=");
				ОбновитьДиапазон = Истина;
			КонецЕсли;
			Если НомСтолбца > НомКон Тогда
				ЧастиДиапазона[1] = Формат(НомСтолбца, "ЧГ=");
				ОбновитьДиапазон = Истина;
			КонецЕсли;
			Если ОбновитьДиапазон Тогда
				СтрокаЛиста.Док.УстановитьАтрибут("spans", СтрСоединить(ЧастиДиапазона, ":"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЯчейкаЛиста.Док;
	
КонецФункции

Функция ПримечанияЛистаДокументDOM()
	
	URIПространстваИмен = "http://schemas.openxmlformats.org/spreadsheetml/2006/main";
	
	ДокументПримечанияЛиста = Новый ДокументDOM(URIПространстваИмен, "comments");
	ДокументПримечанияЛиста.ВерсияXML = "1.0";
	ДокументПримечанияЛиста.Автономный = Истина;
	
	КорневойЭлементДокумента = ДокументПримечанияЛиста.ЭлементДокумента;
	
	УзелАвторы = КорневойЭлементДокумента.ДобавитьДочерний(
		ДокументПримечанияЛиста.СоздатьЭлемент(URIПространстваИмен, "authors"));
	УзелАвтор = УзелАвторы.ДобавитьДочерний(
		ДокументПримечанияЛиста.СоздатьЭлемент(URIПространстваИмен, "author"));
	УзелАвтор.ТекстовоеСодержимое = СокрЛП(ПолноеИмяПользователя());
	УзелАвторы.ОтменитьСоответствиеПространстваИмен(URIПространстваИмен);
	
	УзелКомментарии = КорневойЭлементДокумента.ДобавитьДочерний(
		ДокументПримечанияЛиста.СоздатьЭлемент(URIПространстваИмен, "commentList"));
	УзелКомментарии.ОтменитьСоответствиеПространстваИмен(URIПространстваИмен);
	
	Возврат ДокументПримечанияЛиста;
	
КонецФункции

Процедура ЗаписатьДокументDOMВФайлXML(ДокументDOM, ИмяФайлаXML, СвойстваФайлаXML, ТипФайла)
	
	Кодировка = ДокументDOM.КодировкаИсточника;
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "UTF-8";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.УстановитьСтроку(Кодировка);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ТекстовоеСодержимоеФайлаXML = ЗаписьXML.Закрыть();
	
	Если ТипЗнч(СвойстваФайлаXML) = Тип("Структура") Тогда
		РазрешенаЗаменаАтрибутов = Истина;
		
		НайденныеЭлементы = ДокументDOM.ПолучитьЭлементыПоИмени(СвойстваФайлаXML.ИмяЭлемента);
		Если НайденныеЭлементы.Количество() > 0 И НайденныеЭлементы[0].ЕстьАтрибуты() Тогда
			РазрешенаЗаменаАтрибутов = АтрибутыСовпадают(НайденныеЭлементы[0].Атрибуты, СвойстваФайлаXML.АтрибутыЭлемента);
		Иначе
			РазрешенаЗаменаАтрибутов = Ложь;
		КонецЕсли;
		
		ПозицияНачалаЭлемента = СтрНайти(ТекстовоеСодержимоеФайлаXML, "<" + СвойстваФайлаXML.ИмяЭлемента);
		Если ПозицияНачалаЭлемента > 0 Тогда
			ТекстXMLБезОбъявления = Сред(ТекстовоеСодержимоеФайлаXML, ПозицияНачалаЭлемента);
			Если РазрешенаЗаменаАтрибутов
			   И ЗначениеЗаполнено(СвойстваФайлаXML.АтрибутыЭлемента)
			   И ЗначениеЗаполнено(СвойстваФайлаXML.СтрАтрибутыЭлемента)
			   И (СвойстваФайлаXML.АтрибутыЗаменить ИЛИ ТипФайла = "drawing") Тогда
				НачалоЭлемента = "<" + СвойстваФайлаXML.ИмяЭлемента + СвойстваФайлаXML.СтрАтрибутыЭлемента;
				ТекстXMLБезОбъявления = НачалоЭлемента + Сред(ТекстXMLБезОбъявления, СтрДлина(НачалоЭлемента) + 1);
			КонецЕсли;
			
			Разделитель = ?(СвойстваФайлаXML.ЕстьРазделитель, Символы.ВК + Символы.ПС, "");
			ТекстовоеСодержимоеФайлаXML = СвойстваФайлаXML.ОбъявлениеXML + Разделитель + ТекстXMLБезОбъявления;
		КонецЕсли;
	КонецЕсли;
	
	ПотокФайлаXML = Новый ФайловыйПоток(ИмяФайлаXML, РежимОткрытияФайла.Создать);
	
	ЗаписьТекста = Новый ЗаписьТекста(ПотокФайлаXML, Кодировка, Символы.ВК + Символы.ПС, Символы.ПС);
	ЗаписьТекста.Записать(ТекстовоеСодержимоеФайлаXML);
	ЗаписьТекста.Закрыть();
	
	ПотокФайлаXML.Закрыть(); // записывается без BOM
	
	Файл = Новый Файл(ИмяФайлаXML);
	Файл.УстановитьВремяИзменения('19800101000000'); // установим минимальную дату изменения файла
	
КонецПроцедуры

Процедура ЗаписатьДанныеВДокументыШаблона(Форма, ТекстВыгрузки, ПараметрыВыгрузки, ТЗОбработки)
	
	// Обычные разделы.
	Для Каждого ЭлементРазделОтчета Из Форма.мДанныеОтчета Цикл
		
		Если ЭтоМногострочныйРаздел(ЭлементРазделОтчета.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхРаздела = ЭлементРазделОтчета.Значение;
		
		Для Каждого ЭлементСтруктуры Из СтруктураДанныхРаздела Цикл
			
			ИмяИСсылка = НайтиЭлементСпискаПоСтроковомуЗначению(
				ПараметрыВыгрузки.ДопПараметрыШаблона.ИменаИСсылкиРабочейКниги, ЭлементСтруктуры.Ключ);
			
			Если ИмяИСсылка <> Неопределено Тогда
				
				УстановитьЗначениеВЯчейкеЛиста(ИмяИСсылка.Представление, ЭлементСтруктуры.Значение, ТЗОбработки, ПараметрыВыгрузки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Таблицы данных.
	Для Каждого ЭлементТаблицаРазделов Из ПараметрыВыгрузки.МетаданныеШаблона.ТаблицыРазделов Цикл
		
		ИмяТаблицыРаздела = ЭлементТаблицаРазделов.Ключ;
		ИмяСтартовойЯчейки = ИмяТаблицыРаздела + "_START";
		
		НачальныеИмяИСсылка = НайтиЭлементСпискаПоСтроковомуЗначению(
			ПараметрыВыгрузки.ДопПараметрыШаблона.ИменаИСсылкиРабочейКниги, ИмяСтартовойЯчейки);
		
		Если НачальныеИмяИСсылка <> Неопределено Тогда
			
			ИмяЛистаИСсылкаРазд = ИмяЛистаИСсылка(НачальныеИмяИСсылка.Представление);
			КоординатыЯчейки = КоординатыОбласти(ИмяЛистаИСсылкаРазд.Ссылка);
			
			КоличествоКолонок = ЭлементТаблицаРазделов.Значение.Колонки.Количество();
			
			Для НомСтр = 1 По ЭлементТаблицаРазделов.Значение.Количество() Цикл
				ДанныеСтроки = ЭлементТаблицаРазделов.Значение[НомСтр - 1];
				
				Для НомКол = 1 По КоличествоКолонок - 1 Цикл // колонку с индексом 0 пропускаем
					ЗначениеКолонки = ДанныеСтроки[НомКол];
					
					НомСтроки  = КоординатыЯчейки.Строка1  + НомСтр;
					НомСтолбца = КоординатыЯчейки.Столбец1 + НомКол - 1;
					ИмяЛистаИСсылкаРазд.Ссылка = СимвольныйКодИзПорядковогоНомера(НомСтолбца) + Формат(НомСтроки, "ЧГ=");
					
					Если НомКол = 1 И НЕ ЗначениеЗаполнено(ЗначениеКолонки) Тогда // незаполненный номер строки пропускаем
						Продолжить;
					КонецЕсли;
					
					УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылкаРазд, ЗначениеКолонки, ТЗОбработки, ПараметрыВыгрузки);
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Таблица ответов.
	ТаблицаОтветов = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Answer_Meta", ТаблицаОтветов) Тогда
		ИмяЛистаИСсылка = Новый Структура("ИмяЛиста,Ссылка", "Answer_Meta", "");
		КоличествоКолонок = ТаблицаОтветов.Колонки.Количество();
		
		Для НомСтр = 1 По ТаблицаОтветов.Количество() Цикл
			ДанныеСтроки = ТаблицаОтветов[НомСтр - 1];
			
			Для НомКол = 1 По КоличествоКолонок Цикл
				ЗначениеКолонки = ДанныеСтроки[НомКол - 1];
				Если НЕ ЗначениеЗаполнено(ЗначениеКолонки) Тогда
					Продолжить;
				КонецЕсли;
				ИмяЛистаИСсылка.Ссылка = СимвольныйКодИзПорядковогоНомера(НомКол) + Формат(НомСтр, "ЧГ=");
				
				УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылка, ЗначениеКолонки, ТЗОбработки, ПараметрыВыгрузки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Таблица ошибок.
	ТаблицаОшибок = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Errors_Meta", ТаблицаОшибок) Тогда
		ИмяЛистаИСсылка = Новый Структура("ИмяЛиста,Ссылка", "Errors_Meta", "");
		КоличествоКолонок = ТаблицаОшибок.Колонки.Количество();
		
		Для НомСтр = 1 По ТаблицаОшибок.Количество() Цикл
			ДанныеСтроки = ТаблицаОшибок[НомСтр - 1];
			
			Для НомКол = 1 По КоличествоКолонок Цикл
				ЗначениеКолонки = ДанныеСтроки[НомКол - 1];
				Если НЕ ЗначениеЗаполнено(ЗначениеКолонки) Тогда
					Продолжить;
				КонецЕсли;
				ИмяЛистаИСсылка.Ссылка = СимвольныйКодИзПорядковогоНомера(НомКол) + Формат(НомСтр, "ЧГ=");
				
				УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылка, ЗначениеКолонки, ТЗОбработки, ПараметрыВыгрузки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Данные опроса.
	СписокДанныеОпроса = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Survey_Meta", СписокДанныеОпроса) Тогда
		ИмяЛистаИСсылка = Новый Структура("ИмяЛиста,Ссылка", "Survey_Meta", "");
		КодКолонкиЛиста = СимвольныйКодИзПорядковогоНомера(2);
		
		КодПериода = "";
		ГодПериода = "2023";
		ДатаВерсииШаблона = '00010101';
		
		Для НомСтр = 1 По СписокДанныеОпроса.Количество() Цикл
			ЭлементДанных = СписокДанныеОпроса[НомСтр - 1];
			Если ЭлементДанных.Представление = "SURVEY_DATE" Тогда
				ДатаВерсииШаблона = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(ЭлементДанных.Значение);
			ИначеЕсли ЭлементДанных.Представление = "PERIODVALUE" Тогда
				КодПериода = ЭлементДанных.Значение;
			ИначеЕсли ЭлементДанных.Представление = "PERIODYEAR" Тогда
				ГодПериода = ЭлементДанных.Значение;
			КонецЕсли;
			Если НЕ ЭлементДанных.Пометка Тогда
				Продолжить;
			КонецЕсли;
			ИмяЛистаИСсылка.Ссылка = КодКолонкиЛиста + Формат(НомСтр, "ЧГ=");
			
			УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылка, ЭлементДанных.Значение, ТЗОбработки, ПараметрыВыгрузки);
		КонецЦикла;
		
		// Данные отчетного периода.
		Если ДатаВерсииШаблона >= '20230420' Тогда
			ИмяЛистаИСсылка.ИмяЛиста = "Meta";
			ИмяЛистаИСсылка.Ссылка = "E1";
			УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылка, КодПериода, ТЗОбработки, ПараметрыВыгрузки);
			ИмяЛистаИСсылка.Ссылка = "F1";
			УстановитьЗначениеВЯчейкеЛиста(ИмяЛистаИСсылка, ГодПериода, ТЗОбработки, ПараметрыВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДополнительнуюИнформациюВДокументыШаблона(ИмяРедактора, ТЗОбработки)
	
	ФайлОсновной = ТЗОбработки.Найти("core-properties", "ТипФайла");
	Если ФайлОсновной <> Неопределено Тогда
		ФайлОсновной.Статус = 1; // будет модифицирован
		
		УзлыИмяРедактора = ФайлОсновной.Документ.ПолучитьЭлементыПоИмени("cp:lastModifiedBy");
		Если УзлыИмяРедактора.Количество() > 0 Тогда
			УзлыИмяРедактора[0].ТекстовоеСодержимое = ИмяРедактора;
		КонецЕсли;
		УзлыВремяРедактирования = ФайлОсновной.Документ.ПолучитьЭлементыПоИмени("dcterms:modified");
		Если УзлыВремяРедактирования.Количество() > 0 Тогда
			УзлыВремяРедактирования[0].ТекстовоеСодержимое = XMLСтрока(ТекущаяУниверсальнаяДата()) + "Z";
		КонецЕсли;
	КонецЕсли;
	
	// Снимаем защиту у модифицированных листов.
	ФайлыЛистаСтроки = ТЗОбработки.НайтиСтроки(Новый Структура("ЭтоЛист,Статус", Истина, 1));
	Для Каждого ФайлЛистаСтрока Из ФайлыЛистаСтроки Цикл
		УзелЗащитыЛиста = Неопределено;
		Если ФайлЛистаСтрока.КэшЭлем.Свойство("sheetProtection", УзелЗащитыЛиста) Тогда
			УзелЗащитыЛиста.Док.РодительскийУзел.УдалитьДочерний(УзелЗащитыЛиста.Док);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеВЯчейкеЛиста(СтрокаАдреса, ЗначениеЯчейки, ТЗОбработки, ПараметрыВыгрузки, ДопПараметры = Неопределено)
	
	Если ТипЗнч(СтрокаАдреса) = Тип("Структура") Тогда
		ИмяЛистаИСсылкаРазд = СтрокаАдреса;
	Иначе
		ИмяЛистаИСсылкаРазд = ИмяЛистаИСсылка(СтрокаАдреса);
	КонецЕсли;
	
	ФайлыЛистаСтроки = ТЗОбработки.НайтиСтроки(Новый Структура("ЭтоЛист,ИмяЛиста", Истина, ИмяЛистаИСсылкаРазд.ИмяЛиста));
	Если ФайлыЛистаСтроки.Количество() > 0 Тогда
		
		ФайлЛистаСтрока = ФайлыЛистаСтроки[0];
		Если ФайлЛистаСтрока.Статус = 0 Тогда
			ЗаполнитьКэшЛиста(ФайлЛистаСтрока);
			ФайлЛистаСтрока.Статус = 1;
		КонецЕсли;
		
		УзелЯчейки = УзелЯчейкиЛиста(ФайлЛистаСтрока, ИмяЛистаИСсылкаРазд.Ссылка);
		
		УзлыЗначениеЯчейки = УзелЯчейки.ПолучитьЭлементыПоИмени("v");
		Если УзлыЗначениеЯчейки.Количество() > 0 Тогда
			УзелЗначениеЯчейки = УзлыЗначениеЯчейки[0]; 
		Иначе
			Если УзелЯчейки.ЕстьАтрибут("t") И УзелЯчейки.ПолучитьАтрибут("t") = "inlineStr" Тогда
				УзлыЛокальныеСтроки = УзелЯчейки.ПолучитьЭлементыПоИмени("is");
				Если УзлыЛокальныеСтроки.Количество() > 0 Тогда
					УзелЛокальнаяСтрока = УзлыЛокальныеСтроки[0];
					УзлыЗначениеЯчейки = УзелЛокальнаяСтрока.ПолучитьЭлементыПоИмени("t");
					Если УзлыЗначениеЯчейки.Количество() > 0 Тогда
						УзелЗначениеЯчейки = УзлыЗначениеЯчейки[0];
					Иначе
						УзелЗначениеЯчейки = УзелЛокальнаяСтрока.ДобавитьДочерний(
							УзелЛокальнаяСтрока.ДокументВладелец.СоздатьЭлемент(УзелЯчейки.URIПространстваИмен, "t"));
						УзелЗначениеЯчейки.ОтменитьСоответствиеПространстваИмен(УзелЯчейки.URIПространстваИмен);
					КонецЕсли;
				Иначе
					УзелЛокальнаяСтрока = УзелЯчейки.ДобавитьДочерний(
						УзелЯчейки.ДокументВладелец.СоздатьЭлемент(УзелЯчейки.URIПространстваИмен, "is"));
					УзелЗначениеЯчейки = УзелЛокальнаяСтрока.ДобавитьДочерний(
						УзелЛокальнаяСтрока.ДокументВладелец.СоздатьЭлемент(УзелЯчейки.URIПространстваИмен, "t"));
					УзелЛокальнаяСтрока.ОтменитьСоответствиеПространстваИмен(УзелЯчейки.URIПространстваИмен);
					УзелЗначениеЯчейки.ОтменитьСоответствиеПространстваИмен(УзелЯчейки.URIПространстваИмен);
				КонецЕсли;
			Иначе
				УзелЗначениеЯчейки = УзелЯчейки.ДобавитьДочерний(
					УзелЯчейки.ДокументВладелец.СоздатьЭлемент(УзелЯчейки.URIПространстваИмен, "v"));
				УзелЗначениеЯчейки.ОтменитьСоответствиеПространстваИмен(УзелЯчейки.URIПространстваИмен);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") И НЕ УзелЯчейки.ЕстьАтрибут("t") Тогда
			УзелЗначениеЯчейки.ТекстовоеСодержимое = ФорматированноеЗначение(ЗначениеЯчейки);
		ИначеЕсли УзелЯчейки.ЕстьАтрибут("t") И УзелЯчейки.ПолучитьАтрибут("t") = "inlineStr" Тогда
			УзелЗначениеЯчейки.ТекстовоеСодержимое = ФорматированноеЗначение(ЗначениеЯчейки);
		Иначе
			ФорматированноеЗначениеЯчейки = ФорматированноеЗначение(ЗначениеЯчейки);
			Если ФорматированноеЗначениеЯчейки <> "" ИЛИ УзелЯчейки.ЕстьАтрибут("t") Тогда
				УзелЯчейки.УстановитьАтрибут("t", "s");
				УзелЗначениеЯчейки.ТекстовоеСодержимое = СтрИндексОбщейСтроки(ФорматированноеЗначениеЯчейки, ПараметрыВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			
			ПримечаниеЯчейки = Неопределено;
			Если ДопПараметры.Свойство("Примечание", ПримечаниеЯчейки) Тогда
				УстановитьПримечаниеВЯчейкеЛиста(ФайлЛистаСтрока, ИмяЛистаИСсылкаРазд.Ссылка, ПримечаниеЯчейки);
			КонецЕсли;
			
		КонецЕсли;
		
		// Установим новые размеры листа.
		УзелРазмерыЛиста = Неопределено;
		Если ФайлЛистаСтрока.КэшЭлем.Свойство("dimension", УзелРазмерыЛиста) Тогда
			УзелАтрибута = УзелРазмерыЛиста.Док.ПолучитьУзелАтрибута("ref");
			Если УзелАтрибута <> Неопределено Тогда
				
				КоординатыЛиста  = КоординатыОбласти(УзелАтрибута.Значение);
				КоординатыЯчейки = КоординатыОбласти(ИмяЛистаИСсылкаРазд.Ссылка);
				
				Если КоординатыЯчейки.Строка1 > КоординатыЛиста.Строка2 ИЛИ КоординатыЯчейки.Столбец1 > КоординатыЛиста.Столбец2 Тогда
					НовоеЗначениеАтрибута
						= СимвольныйКодИзПорядковогоНомера(КоординатыЛиста.Столбец1) + Формат(КоординатыЛиста.Строка1, "ЧГ=") + ":"
						+ СимвольныйКодИзПорядковогоНомера(Макс(КоординатыЯчейки.Столбец1, КоординатыЛиста.Столбец2))
						+ Формат(Макс(КоординатыЯчейки.Строка1, КоординатыЛиста.Строка2), "ЧГ=");
					УзелАтрибута.Значение = НовоеЗначениеАтрибута;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКэшЛиста(ФайлЛистаСтрока)
	
	ТекущийКорневойУзел = ФайлЛистаСтрока.Документ.ПервыйДочерний;
	
	Пока ТекущийКорневойУзел <> Неопределено Цикл
		Если ТекущийКорневойУзел.ЛокальноеИмя = "worksheet" Тогда
			УзелДанныеЛиста = ТекущийКорневойУзел.ПервыйДочерний;
			
			Пока УзелДанныеЛиста <> Неопределено Цикл
				
				Если УзелДанныеЛиста.ЛокальноеИмя = "dimension" Тогда
					
					ДанныеУзла = Новый Структура("Док", УзелДанныеЛиста);
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "sheetFormatPr" Тогда
					
					ДанныеУзла = Новый Структура("Док", УзелДанныеЛиста);
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "cols" Тогда
					
					ДанныеУзла = Новый Структура("Док,Таб", УзелДанныеЛиста, НоваяТаблицаКэшированныхУзлов());
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
					НомУзла = 1;
					УзелСтолбец = УзелДанныеЛиста.ПервыйДочерний;
					Пока УзелСтолбец <> Неопределено Цикл
						Если УзелСтолбец.ЛокальноеИмя = "col" Тогда
							НовСтрока = ДанныеУзла.Таб.Добавить();
							НовСтрока.Док = УзелСтолбец;
							НомСтроки = Число(" " + УзелСтолбец.ПолучитьАтрибут("min"));
							Если НомСтроки > 0 Тогда
								НомУзла = НомСтроки;
							КонецЕсли;
							НовСтрока.Ном = НомУзла;
							НомУзла = НомУзла + 1;
						КонецЕсли;
						УзелСтолбец = УзелСтолбец.СледующийСоседний;
					КонецЦикла;
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "sheetData" Тогда
					
					ДанныеУзла = Новый Структура("Док,Таб", УзелДанныеЛиста, НоваяТаблицаКэшированныхУзлов());
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
					НомУзла = 1;
					УзелСтрока = УзелДанныеЛиста.ПервыйДочерний;
					Пока УзелСтрока <> Неопределено Цикл
						Если УзелСтрока.ЛокальноеИмя = "row" Тогда
							НовСтрока = ДанныеУзла.Таб.Добавить();
							НовСтрока.Док = УзелСтрока;
							НовСтрока.Таб = НоваяТаблицаКэшированныхУзлов();
							НомСтроки = Число(" " + УзелСтрока.ПолучитьАтрибут("r"));
							Если НомСтроки > 0 Тогда
								НомУзла = НомСтроки;
							КонецЕсли;
							НовСтрока.Ном = НомУзла;
							
							НомУзлаСтолбец = 1;
							УзелСтолбец = УзелСтрока.ПервыйДочерний;
							Пока УзелСтолбец <> Неопределено Цикл
								Если УзелСтолбец.ЛокальноеИмя = "c" Тогда
									НовСтолбец = НовСтрока.Таб.Добавить();
									НовСтолбец.Док = УзелСтолбец;
									НомСтолбца = КоординатыОбласти(УзелСтолбец.ПолучитьАтрибут("r")).Столбец1;
									Если НомСтолбца > 0 Тогда
										НомУзлаСтолбец = НомСтолбца;
									КонецЕсли;
									НовСтолбец.Ном = НомУзлаСтолбец;
									НомУзлаСтолбец = НомУзлаСтолбец + 1;
								КонецЕсли;
								УзелСтолбец = УзелСтолбец.СледующийСоседний;
							КонецЦикла;
							
							НомУзла = НомУзла + 1;
						КонецЕсли;
						УзелСтрока = УзелСтрока.СледующийСоседний;
					КонецЦикла;
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "sheetProtection" Тогда
					
					ДанныеУзла = Новый Структура("Док", УзелДанныеЛиста);
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "dataValidations" Тогда
					
					ДанныеУзла = Новый Структура("Док,Таб", УзелДанныеЛиста, НоваяТаблицаКэшированныхУзлов());
					ФайлЛистаСтрока.КэшЭлем.Вставить(УзелДанныеЛиста.ЛокальноеИмя, ДанныеУзла);
					
					НомУзла = 1;
					УзелКонтроль = УзелДанныеЛиста.ПервыйДочерний;
					Пока УзелКонтроль <> Неопределено Цикл
						Если УзелКонтроль.ЛокальноеИмя = "dataValidation" Тогда
							НовСтрока = ДанныеУзла.Таб.Добавить();
							НовСтрока.Док = УзелКонтроль;
							НовСтрока.Ном = НомУзла;
							НомУзла = НомУзла + 1;
						КонецЕсли;
						УзелКонтроль = УзелКонтроль.СледующийСоседний;
					КонецЦикла;
					
				ИначеЕсли УзелДанныеЛиста.ЛокальноеИмя = "extLst" Тогда
					
					URIПоПрефиксу = Неопределено;
					УзелДочерний = УзелДанныеЛиста.ПервыйДочерний;
					Если УзелДочерний <> Неопределено Тогда
						URIПоПрефиксу = УзелДочерний.НайтиURIПространстваИмен("x14");
					КонецЕсли;
					Если URIПоПрефиксу <> Неопределено Тогда
						УзлыКонтроль = УзелДанныеЛиста.ПолучитьЭлементыПоИмени(URIПоПрефиксу, "dataValidations");
						Если УзлыКонтроль.Количество() > 0 Тогда
							ДанныеУзла = Новый Структура("Док,Таб", УзлыКонтроль[0], НоваяТаблицаКэшированныхУзлов());
							ФайлЛистаСтрока.КэшЭлем.Вставить("x14_dataValidations", ДанныеУзла);
							
							НомУзла = 1;
							УзелКонтроль = УзлыКонтроль[0].ПервыйДочерний;
							Пока УзелКонтроль <> Неопределено Цикл
								Если УзелКонтроль.ИмяЭлемента = "x14:dataValidation" Тогда
									НовСтрока = ДанныеУзла.Таб.Добавить();
									НовСтрока.Док = УзелКонтроль;
									НовСтрока.Ном = НомУзла;
									НомУзла = НомУзла + 1;
								КонецЕсли;
								УзелКонтроль = УзелКонтроль.СледующийСоседний;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				УзелДанныеЛиста = УзелДанныеЛиста.СледующийСоседний;
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
		
		ТекущийКорневойУзел = ТекущийКорневойУзел.СледующийСоседний;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПримечаниеВЯчейкеЛиста(ФайлЛистаСтрока, СсылкаСтрока, ПримечаниеЯчейки)
	
	ФайлыСвязиЛистаСтроки = ФайлЛистаСтрока.Владелец().НайтиСтроки(
		Новый Структура("ТипФайла,ИмяФайла", "Relationships", ФайлЛистаСтрока.ИмяФайла + ".rels"));
	
	Если НЕ ЗначениеЗаполнено(ФайлыСвязиЛистаСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлСвязиЛистаСтрока = ФайлыСвязиЛистаСтроки[0];
	
	КорневойСвязиИзДокумента = ФайлСвязиЛистаСтрока.Документ.ЭлементДокумента;
	СвязиИзДокумента = КорневойСвязиИзДокумента.ПолучитьЭлементыПоИмени("Relationship");
	
	МаксИндексИД = 0;
	СимвольнаяЧастьИД = "rId";
	
	ФайлПримечанийЛистаСтрока = Неопределено;
	
	ТипПримечаниеXML = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments";
	
	Для Каждого СвязьИзДокумента Из СвязиИзДокумента Цикл
		
		ИД = СвязьИзДокумента.ПолучитьАтрибут("Id");
		ТипФайлаXML = СвязьИзДокумента.ПолучитьАтрибут("Type");
		ОтносительныйПутьКФайлу = СвязьИзДокумента.ПолучитьАтрибут("Target");
		
		СоставнойИД = СимвольнаяИЧисловаяЧастиИД(ИД);
		МаксИндексИД = Макс(МаксИндексИД, СоставнойИД.ЧисловаяЧасть);
		СимвольнаяЧастьИД = СоставнойИД.СимвольнаяЧасть;
		
		Если ВРег(ТипФайлаXML) = ВРег(ТипПримечаниеXML) Тогда
			Файл = Новый Файл(ФайлСвязиЛистаСтрока.Каталог + ".." + ПолучитьРазделительПути()
				+ СокрЛП(СтрЗаменить(ОтносительныйПутьКФайлу, "/", ПолучитьРазделительПути())));
			ФайлыПоСсылкеСтроки = ФайлСвязиЛистаСтрока.Владелец().НайтиСтроки(Новый Структура("Каталог,ИмяФайла", Файл.Путь, Файл.Имя));
			Если ФайлыПоСсылкеСтроки.Количество() > 0 Тогда
				 ФайлПримечанийЛистаСтрока = ФайлыПоСсылкеСтроки[0];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФайлПримечанийЛистаСтрока = Неопределено Тогда
		
		ФайлыТиповСтроки = ФайлСвязиЛистаСтрока.Владелец().НайтиСтроки(Новый Структура("ТипФайла", "Types"));
		
		ЭлементТипов = ФайлыТиповСтроки[0].Документ.ЭлементДокумента;
		
		ИмяЭлементаПереопределение = "Override";
		УзлыТиповПереопределение = ЭлементТипов.ПолучитьЭлементыПоИмени(ИмяЭлементаПереопределение);
		
		ТипРабочаяКнигаXML = "application/vnd.ms-excel.sheet.macroEnabled.main+xml";
		ТипыПримечанийXML = "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml";
		
		ИндексФайлаПримечаний = 0;
		ИмяФайлаПримечанийБР = "comments";
		ОтносительныйКаталогФайлаПримечаний = "/xl/";
		Для Каждого УзелТипаКонтекста Из УзлыТиповПереопределение Цикл
			ТипКонтекстаXML = УзелТипаКонтекста.ПолучитьАтрибут("ContentType");
			ОтносительныйПутьКФайлуКонтекста = УзелТипаКонтекста.ПолучитьАтрибут("PartName");
			Если ВРег(ТипКонтекстаXML) = ВРег(ТипыПримечанийXML) Тогда
				ЧастиПутиКФайлуПримечаний = СтрРазделить(ОтносительныйПутьКФайлуКонтекста, "/");
				ИмяФайлаПримечаний = ЧастиПутиКФайлуПримечаний[ЧастиПутиКФайлуПримечаний.ВГраница()];
				
				ЧастиИмениФайлаПримечаний = СимвольнаяИЧисловаяЧастиИД(СтрЗаменить(ИмяФайлаПримечаний, ".xml", ""));
				ИндексФайлаПримечаний = Макс(ИндексФайлаПримечаний, ЧастиИмениФайлаПримечаний.ЧисловаяЧасть);
				ИмяФайлаПримечанийБР = ЧастиИмениФайлаПримечаний.СимвольнаяЧасть;
				ОтносительныйКаталогФайлаПримечаний = СтрЗаменить(ОтносительныйПутьКФайлуКонтекста, ИмяФайлаПримечаний, "");
			ИначеЕсли ВРег(ТипКонтекстаXML)= ВРег(ТипРабочаяКнигаXML) Тогда
				ОтносительныйКаталогФайлаПримечаний = СтрЗаменить(ОтносительныйПутьКФайлуКонтекста, "workbook.xml", "");
			КонецЕсли;
		КонецЦикла;
		
		НовоеИмяФайлаПримечаний = ИмяФайлаПримечанийБР + Формат(ИндексФайлаПримечаний + 1, "ЧГ=") + ".xml";
		ОтносительныйПутьКФайлуПримечаний = ОтносительныйКаталогФайлаПримечаний + НовоеИмяФайлаПримечаний;
		
		// Добавление нового типа в словарь.
		НовыйУзелТипаПереопределение = ЭлементТипов.ДобавитьДочерний(
			ЭлементТипов.ДокументВладелец.СоздатьЭлемент(ЭлементТипов.URIПространстваИмен, ИмяЭлементаПереопределение));
		НовыйУзелТипаПереопределение.УстановитьАтрибут(ЭлементТипов.URIПространстваИмен,
			"ContentType", ТипыПримечанийXML);
		НовыйУзелТипаПереопределение.УстановитьАтрибут(ЭлементТипов.URIПространстваИмен,
			"PartName", ОтносительныйПутьКФайлуПримечаний);
		НовыйУзелТипаПереопределение.ОтменитьСоответствиеПространстваИмен(ЭлементТипов.URIПространстваИмен);
		
		ФайлыТиповСтроки[0].Статус = 1;
		
		// Добавление связи в компонент связей.
		ИДКомпонентаПримечаний = СимвольнаяЧастьИД + Формат(МаксИндексИД + 1, "ЧГ=");
		НовыйУзелСвязи = КорневойСвязиИзДокумента.ДобавитьДочерний(КорневойСвязиИзДокумента.ДокументВладелец.СоздатьЭлемент(
			КорневойСвязиИзДокумента.URIПространстваИмен, "Relationship"));
		НовыйУзелСвязи.УстановитьАтрибут(КорневойСвязиИзДокумента.URIПространстваИмен,
			"Id", ИДКомпонентаПримечаний);
		НовыйУзелСвязи.УстановитьАтрибут(КорневойСвязиИзДокумента.URIПространстваИмен,
			"Target", "../" + НовоеИмяФайлаПримечаний);
		НовыйУзелСвязи.УстановитьАтрибут(КорневойСвязиИзДокумента.URIПространстваИмен,
			"Type", ТипПримечаниеXML);
		НовыйУзелСвязи.ОтменитьСоответствиеПространстваИмен(КорневойСвязиИзДокумента.URIПространстваИмен);
		
		ФайлСвязиЛистаСтрока.Статус = 1;
		
		// Добавление записи в таблицу файлов для последующего создания файла примечаний.
		Файл = Новый Файл(ФайлСвязиЛистаСтрока.Каталог + ".." + ПолучитьРазделительПути()
			+  ".." + ПолучитьРазделительПути() + НовоеИмяФайлаПримечаний);
			
		ФайлПримечанийЛистаСтрока = ФайлСвязиЛистаСтрока.Владелец().Добавить();
		
		ФайлПримечанийЛистаСтрока.ИД          = ИДКомпонентаПримечаний;
		ФайлПримечанийЛистаСтрока.Каталог     = Файл.Путь;
		ФайлПримечанийЛистаСтрока.ИмяФайла    = Файл.Имя;
		ФайлПримечанийЛистаСтрока.ТипФайла    = "comments";
		ФайлПримечанийЛистаСтрока.ТипФайлаXML = ТипПримечаниеXML;
		ФайлПримечанийЛистаСтрока.СвязьСтрока = ФайлСвязиЛистаСтрока;
		
		ФайлПримечанийЛистаСтрока.Документ    = ПримечанияЛистаДокументDOM();
		
	КонецЕсли;
	
	ДобавитьПримечаниеВКомпонентПримечаний(ФайлПримечанийЛистаСтрока, СсылкаСтрока, ПримечаниеЯчейки);
	
	ФайлПримечанийЛистаСтрока.Статус = 1;
	
КонецПроцедуры

Процедура ДобавитьПримечаниеВКомпонентПримечаний(ФайлПримечанийЛистаСтрока, СсылкаСтрока, ПримечаниеСтрока)
	
	УзелСписокПримечаний = ФайлПримечанийЛистаСтрока.Документ.ПолучитьЭлементыПоИмени("commentList")[0];
	
	УзелПримечание = УзелСписокПримечаний.ДобавитьДочерний(УзелСписокПримечаний.ДокументВладелец.СоздатьЭлемент(
		УзелСписокПримечаний.URIПространстваИмен, "comment"));
	УзелПримечание.УстановитьАтрибут(УзелСписокПримечаний.URIПространстваИмен,
		"ref", СтрЗаменить(СсылкаСтрока, "$", ""));
	УзелПримечание.УстановитьАтрибут(УзелСписокПримечаний.URIПространстваИмен,
		"authorId", "0");
	
	УзелПримечаниеТекст = УзелПримечание.ДобавитьДочерний(УзелСписокПримечаний.ДокументВладелец.СоздатьЭлемент(
		УзелСписокПримечаний.URIПространстваИмен, "text"));
	УзелПримечаниеФрмТекст = УзелПримечаниеТекст.ДобавитьДочерний(УзелСписокПримечаний.ДокументВладелец.СоздатьЭлемент(
		УзелСписокПримечаний.URIПространстваИмен, "r"));
	
	//УзелПримечаниеСвойстваТекста = УзелПримечаниеФрмТекст.ДобавитьДочерний(
	//	УзелСписокПримечаний.ДокументВладелец.СоздатьЭлемент(УзелСписокПримечаний.URIПространстваИмен, "rPr"));
	УзелПримечаниеТекстСодержимое = УзелПримечаниеФрмТекст.ДобавитьДочерний(
		УзелСписокПримечаний.ДокументВладелец.СоздатьЭлемент(УзелСписокПримечаний.URIПространстваИмен, "t"));
	
	УзелПримечаниеТекстСодержимое.ТекстовоеСодержимое = СокрЛП(ПримечаниеСтрока);
	
	УзелПримечание.ОтменитьСоответствиеПространстваИмен(УзелСписокПримечаний.URIПространстваИмен);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция НайтиЭлементСпискаПоСтроковомуЗначению(СписокЭлементов, ЗначениеЭлемента)
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		Если ВРег(ЭлементСписка.Значение) = ВРег(ЗначениеЭлемента) Тогда
			Возврат ЭлементСписка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЭлементСпискаПоПредставлению(СписокЭлементов, Представление) Экспорт
	
	Для Каждого ЭлементСписка Из СписокЭлементов Цикл
		Если ВРег(ЭлементСписка.Представление) = ВРег(Представление) Тогда
			Возврат ЭлементСписка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПериодАнкеты(ДатаВПериоде, КодПериодичности = 3, РП = Истина, Римскими = Истина) Экспорт
	
	СтрПериод = "";
	
	СтрНомерГода = Формат(Год(ДатаВПериоде), "ЧЦ=4; ЧВН=; ЧГ=");
	
	Если КодПериодичности = 1 Тогда // неделя
		
		СтрНомерНедели = Строка(НеделяГода(ДатаВПериоде));
		СтрПериод = СтрНомерНедели + " " + ?(РП, НСтр("ru = 'недели';
														|en = 'недели'"), НСтр("ru = 'неделя';
																			|en = 'неделя'")) + " " + СтрНомерГода;
		
	ИначеЕсли КодПериодичности = 2 Тогда // месяц
		
		СтрНомерМесяца = Строка(Месяц(ДатаВПериоде));
		Если СтрНомерМесяца = "1" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Января';
									|en = 'Января'"), НСтр("ru = 'Январь';
														|en = 'Январь'"));
		ИначеЕсли СтрНомерМесяца = "2" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Февраля';
									|en = 'Февраля'"), НСтр("ru = 'Февраль';
														|en = 'Февраль'"));
		ИначеЕсли СтрНомерМесяца = "3" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Марта';
									|en = 'Марта'"), НСтр("ru = 'Март';
														|en = 'Март'"));
		ИначеЕсли СтрНомерМесяца = "4" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Апреля';
									|en = 'Апреля'"), НСтр("ru = 'Апрель';
														|en = 'Апрель'"));
		ИначеЕсли СтрНомерМесяца = "5" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Мая';
									|en = 'Мая'"), НСтр("ru = 'Май';
													|en = 'Май'"));
		ИначеЕсли СтрНомерМесяца = "6" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Июня';
									|en = 'Июня'"), НСтр("ru = 'Июнь';
														|en = 'Июнь'"));
		ИначеЕсли СтрНомерМесяца = "7" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Июля';
									|en = 'Июля'"), НСтр("ru = 'Июль';
														|en = 'Июль'"));
		ИначеЕсли СтрНомерМесяца = "8" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Августа';
									|en = 'Августа'"), НСтр("ru = 'Август';
														|en = 'Август'"));
		ИначеЕсли СтрНомерМесяца = "9" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Сентября';
									|en = 'Сентября'"), НСтр("ru = 'Сентабрь';
															|en = 'Сентабрь'"));
		ИначеЕсли СтрНомерМесяца = "10" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Октября';
									|en = 'Октября'"), НСтр("ru = 'Октябрь';
														|en = 'Октябрь'"));
		ИначеЕсли СтрНомерМесяца = "11" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Ноября';
									|en = 'Ноября'"), НСтр("ru = 'Ноябрь';
														|en = 'Ноябрь'"));
		ИначеЕсли СтрНомерМесяца = "12" Тогда
			СтрПериод = ?(РП, НСтр("ru = 'Декабря';
									|en = 'Декабря'"), НСтр("ru = 'Декабрь';
														|en = 'Декабрь'"));
		КонецЕсли;
		СтрПериод = СтрПериод + " " + СтрНомерГода;
		
	ИначеЕсли КодПериодичности = 3 Тогда // квартал
		
		СтрНомерКвартала = Формат(ДатаВПериоде, "ДФ=""к""");
		СтрПериод = СтрНомерКвартала;
		Если Римскими Тогда
			Если СтрНомерКвартала = "1" Тогда
				СтрПериод = "I";
			ИначеЕсли СтрНомерКвартала = "2" Тогда
				СтрПериод = "II";
			ИначеЕсли СтрНомерКвартала = "3" Тогда
				СтрПериод = "III";
			ИначеЕсли СтрНомерКвартала = "4" Тогда
				СтрПериод = "IV";
			КонецЕсли;
		КонецЕсли;
		СтрПериод = СтрПериод + " " + ?(РП, НСтр("ru = 'квартала';
												|en = 'квартала'"), НСтр("ru = 'квартал';
																		|en = 'квартал'")) + " " + СтрНомерГода;
		
	ИначеЕсли КодПериодичности = 4 Тогда // полугодие
		
		СтрНомерПолугодия = ?(Месяц(ДатаВПериоде) <= 6, "1", "2");
		СтрПериод = СтрНомерПолугодия;
		Если Римскими Тогда
			Если СтрНомерПолугодия = "1" Тогда
				СтрПериод = "I";
			ИначеЕсли СтрНомерПолугодия = "2" Тогда
				СтрПериод = "II";
			КонецЕсли;
		КонецЕсли;
		СтрПериод = СтрПериод + " " + ?(РП, НСтр("ru = 'полугодия';
												|en = 'полугодия'"), НСтр("ru = 'полугодие';
																		|en = 'полугодие'")) + " " + СтрНомерГода;
		
	ИначеЕсли КодПериодичности = 5 Тогда // 9 месяцев
		
		СтрПериод = НСтр("ru = 'За 9 месяцев';
						|en = 'За 9 месяцев'") + " " + СтрНомерГода;
		
	ИначеЕсли КодПериодичности = 6 Тогда // год
		
		СтрПериод = СтрНомерГода;
		
	КонецЕсли;
	
	Возврат СтрПериод;
	
КонецФункции

Функция ЭтоМногострочныйРаздел(СтруктураРаздела)
	
	Для Каждого ЭлементСтруктуры Из СтруктураРаздела Цикл
		
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
 
#КонецОбласти

#Область ФорматноЛогическийКонтроль

Функция ПреобразоватьЗначениеЕслиНеобходимо(ЗначениеОтвета, ВопросАнкеты) Экспорт
	
	ЗначениеПреобразовано = Ложь;
	
	ТипЗначения = ВопросАнкеты["QUESTION_VALUE_TYPE"];
	
	Если ТипЗначения = "Numeric" Тогда
		
		ОбязательностьЗаполнения = ВопросАнкеты["QUESTION_IS_MANDATORY"] = "True";
		ДопПроверкаЧисла         = СокрЛП(ВопросАнкеты["QUESTION_LOGICCONTROL"]);
		
		Если НЕ ОбязательностьЗаполнения Тогда
			Если СтрНайти(ДопПроверкаЧисла, "0") > 0 ИЛИ ПустаяСтрока(ДопПроверкаЧисла) Тогда
				Если ТипЗнч(ЗначениеОтвета) = Тип("Строка") Тогда
					ПроверяемоеЗначение = СтрЗаменить(СтрЗаменить(ЗначениеОтвета, " ", ""), Символы.НПП, "");
					Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(ПроверяемоеЗначение) Тогда
						ЗначениеОтвета = Число(" " + СтрЗаменить(ЗначениеОтвета, ",", "."));
					Иначе
						ЗначениеОтвета = "";
					КонецЕсли;
					ЗначениеПреобразовано = Истина;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЗначениеОтвета) = Тип("Число") Тогда
					Если НЕ ЗначениеЗаполнено(ЗначениеОтвета) Тогда
						ЗначениеОтвета = "";
						ЗначениеПреобразовано = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПреобразовано;
	
КонецФункции

Функция ВыполнитьПроверкуЗначения(Форма, ПараметрыВыгрузки, Описание, ВопросАнкеты, Знач ЗначениеОтвета, НомСтроки = 0) Экспорт
	
	РезультатПроверки = 0;
	
	ВариантыПроверок         = Число(" " + ВопросАнкеты["QUESTION_IS_WARNING"]);
	РазмерностьЗначения      = Число(" " + ВопросАнкеты["QUESTION_VALUE_SIZE"]);
	РазмерностьДробнойЧасти  = Число(" " + ВопросАнкеты["QUESTION_FRACTION_SIZE"]);
	
	ТипЗначения              = ВопросАнкеты["QUESTION_VALUE_TYPE"];
	ДопПроверкаЧисла         = СокрЛП(ВопросАнкеты["QUESTION_LOGICCONTROL"]);
	ОбязательностьЗаполнения = ВопросАнкеты["QUESTION_IS_MANDATORY"] = "True";
	
	ИмяСправочника           = ВопросАнкеты["QUESTION_DICTNAMEID"];
	ИмяСправочникаНСИ        = ВопросАнкеты["QUESTION_NSI"];
	
	ЗначениеОтветаСтр = ЗначениеПоФорматуВопроса(ЗначениеОтвета, ВопросАнкеты, ПараметрыВыгрузки);
	
	Если ПустаяСтрока(ЗначениеОтветаСтр) Тогда
		ТекстОписания = НСтр("ru = 'Поле не заполнено';
							|en = 'Поле не заполнено'");
		Если ТребуетсяПроверка(ВариантыПроверок, 1) Тогда // предупреждение об обязательном заполнении
			РезультатПроверки = 1;
			Описание = ТекстОписания;
		ИначеЕсли ОбязательностьЗаполнения Тогда
			РезультатПроверки = 2;
			Описание = ТекстОписания;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПроверки = 0 И РазмерностьЗначения > 0 И СтрДлина(ЗначениеОтветаСтр) > РазмерностьЗначения Тогда
		// Предупреждение о несоответствии формату.
		РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 16), 1, 2);
		Описание = СтрШаблон(НСтр("ru = 'Значение поля превышает допустимый размер в %1 символов';
									|en = 'Значение поля превышает допустимый размер в %1 символов'"),
			СокрЛ(РазмерностьЗначения));
	КонецЕсли;
	
	Если РезультатПроверки = 0 Тогда
		Если ТипЗначения = "Numeric" Тогда
			
			Если СтрДлина(ЗначениеОтветаСтр) > 0 Тогда
				Если СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
						СтрЗаменить(СтрЗаменить(ЗначениеОтветаСтр, ",", ""), ".", "")) = Неопределено Тогда
					// Предупреждение о несоответствии формату.
					РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 16), 1, 2);
					Описание = НСтр("ru = 'Значение поля не соответствует типу <число> или значение слишком большое';
									|en = 'Значение поля не соответствует типу <число> или значение слишком большое'");
				КонецЕсли;
			КонецЕсли;
			Если РезультатПроверки = 0 Тогда
				ЗначениеОтветаЧисло = Число(" " + ЗначениеОтветаСтр);
				Если ДопПроверкаЧисла = "+" Тогда
					Если ЗначениеОтветаЧисло <= 0 Тогда
						// Предупреждение об ошибке логического контроля.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 4), 1, 2);
						Описание = НСтр("ru = 'Число должно быть положительным';
										|en = 'Число должно быть положительным'");
					КонецЕсли; 
				ИначеЕсли ДопПроверкаЧисла = "-" Тогда
					Если ЗначениеОтветаЧисло >= 0 Тогда
						// Предупреждение об ошибке логического контроля.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 4), 1, 2);
						Описание = НСтр("ru = 'Число должно быть отрицательным';
										|en = 'Число должно быть отрицательным'");
					КонецЕсли; 
				ИначеЕсли ДопПроверкаЧисла = "0+" Тогда
					Если ЗначениеОтветаЧисло < 0 Тогда
						// Предупреждение об ошибке логического контроля.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 4), 1, 2);
						Описание = НСтр("ru = 'Число должно быть положительным или равным 0';
										|en = 'Число должно быть положительным или равным 0'");
					КонецЕсли; 
				ИначеЕсли ДопПроверкаЧисла = "-0" Тогда
					Если ЗначениеОтветаЧисло > 0 Тогда
						// Предупреждение об ошибке логического контроля.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 4), 1, 2);
						Описание = НСтр("ru = 'Число должно быть отрицательным или равным 0';
										|en = 'Число должно быть отрицательным или равным 0'");
					КонецЕсли; 
				ИначеЕсли ДопПроверкаЧисла = "-+" Тогда
					Если ЗначениеОтветаЧисло = 0 Тогда
						// Предупреждение об ошибке логического контроля.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 4), 1, 2);
						Описание = НСтр("ru = 'Число должно быть положительным или отрицательным, не равным 0';
										|en = 'Число должно быть положительным или отрицательным, не равным 0'");
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			Если РезультатПроверки = 0 Тогда
				ПозРазделителя = СтрНайти(СтрЗаменить(ЗначениеОтветаСтр, ",", "."), ".", НаправлениеПоиска.СКонца);
				Если ПозРазделителя > 0 И (СтрДлина(ЗначениеОтветаСтр) - ПозРазделителя) > РазмерностьДробнойЧасти Тогда
					Если РазмерностьДробнойЧасти = 0 Тогда
						// Предупреждение о несоответствии формату.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 16), 1, 2);
						Описание = НСтр("ru = 'Значение должно быть целым числом';
										|en = 'Значение должно быть целым числом'");
					Иначе
						// Предупреждение о несоответствии формату.
						РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 16), 1, 2);
						СловоИП = НСтр("ru = 'знак';
										|en = 'знак'"); СловоРПЕЧ = НСтр("ru = 'знака';
																		|en = 'знака'"); СловоРПМЧ = НСтр("ru = 'знаков';
																										|en = 'знаков'");
						Слово = СтрокаСЧислом(";" + СловоИП + ";;" + СловоРПЕЧ + ";" + СловоРПМЧ + ";" + СловоРПЕЧ,
							РазмерностьДробнойЧасти, ВидЧисловогоЗначения.Количественное, "L=ru");
						Описание = СтрШаблон(НСтр("ru = 'Допустимо %1 %2 после запятой';
													|en = 'Допустимо %1 %2 после запятой'"), СокрЛ(РазмерностьДробнойЧасти), Слово);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗначения = "Date" Тогда
			
			Если СтрДлина(ЗначениеОтветаСтр) > 0
			   И РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(ЗначениеОтветаСтр) = '00010101' Тогда
				// Предупреждение о несоответствии формату.
				РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, 16), 1, 2);
				Описание = НСтр("ru = 'Значение поля не соответствует типу <дата>';
								|en = 'Значение поля не соответствует типу <дата>'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатПроверки = 0 И СтрДлина(ЗначениеОтветаСтр) > 0 Тогда
		
		ТаблСправочник = Неопределено;
		СправочникиШаблона = Неопределено;
		ВариантПроверки = 0;
		Если ЗначениеЗаполнено(ИмяСправочника) Тогда
			Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("KeyValuePair_Meta", СправочникиШаблона) Тогда
				СправочникиШаблона.Свойство(ИмяСправочника, ТаблСправочник);
				ВариантПроверки = 2;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ИмяСправочникаНСИ) Тогда
			Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("NSI_Meta", СправочникиШаблона) Тогда
				СправочникиШаблона.Свойство(ИмяСправочникаНСИ, ТаблСправочник);
				ВариантПроверки = 8;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблСправочник <> Неопределено Тогда
			Если ТаблСправочник.Найти(ЗначениеОтветаСтр, "Ключ") = Неопределено Тогда
				// Предупреждение об отсутствии в справочнике.
				РезультатПроверки = ?(ТребуетсяПроверка(ВариантыПроверок, ВариантПроверки), 1, 2);
				Описание = НСтр("ru = 'Указанное значение отсутствует в справочнике';
								|en = 'Указанное значение отсутствует в справочнике'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектОтчета = Форма.ОбъектОтчета(Форма.ИмяФормы);
	ОбъектОтчета.ВыполнитьПроверкуЗначения(
		РезультатПроверки, Описание, ВопросАнкеты, ПараметрыВыгрузки, ЗначениеОтветаСтр, НомСтроки);
	
	Если РезультатПроверки = 1 Тогда
		Описание = "ПРЕДУПРЕЖДЕНИЕ: " + Описание;
	ИначеЕсли РезультатПроверки = 2 Тогда
		Описание = "ОШИБКА: " + Описание;
	КонецЕсли;
	
	Если РезультатПроверки > 0 Тогда
		ЗаписатьСообщениеОбОшибке(ВопросАнкеты, ПараметрыВыгрузки, Описание, НомСтроки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗначениеОтветаСтр) Тогда
		ЗаписатьЗначениеОтвета(ВопросАнкеты, ПараметрыВыгрузки, ЗначениеОтветаСтр, НомСтроки);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЗначениеПоФорматуВопроса(Знач Значение, ВопросАнкеты, ПараметрыВыгрузки) Экспорт
	
	ИмяВопроса               = ВопросАнкеты["QUESTION_NAME_ID"];
	ТипЗначения              = ВопросАнкеты["QUESTION_VALUE_TYPE"];
	РазмерностьДробнойЧасти  = ВопросАнкеты["QUESTION_FRACTION_SIZE"];
	ИмяСправочника           = ВопросАнкеты["QUESTION_DICTNAMEID"];
	ИмяСправочникаНСИ        = ВопросАнкеты["QUESTION_NSI"];
	
	ПредставлениеСправочника = "";
	КолонкиАнкеты = ВопросАнкеты.Владелец().Колонки;
	КолонкаПредставлениеСправочника = КолонкиАнкеты.Найти("QUESTION_NSIVIEWTYPE");
	Если КолонкаПредставлениеСправочника = Неопределено Тогда
		КолонкаПредставлениеСправочника = КолонкиАнкеты.Найти("QUESTION_NSIVIEW");
	КонецЕсли;
	Если КолонкаПредставлениеСправочника <> Неопределено Тогда
		ПредставлениеСправочника = ВопросАнкеты[КолонкаПредставлениеСправочника.Имя];
	КонецЕсли;
	
	ОбязательностьЗаполнения = ВопросАнкеты["QUESTION_IS_MANDATORY"] = "True";
	ДопПроверкаЧисла         = СокрЛП(ВопросАнкеты["QUESTION_LOGICCONTROL"]);
	
	Если НЕ ЗначениеЗаполнено(Значение)
		 И (СтрЧислоВхождений(ИмяВопроса, "RowID") = 1 ИЛИ СтрЧислоВхождений(ИмяВопроса, "RowNum") = 1)
		 И  ВопросАнкеты["QUESTION_TYPE"] = "TABLE" Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОбязательностьЗаполнения И ТипЗначения = "Numeric"
	  И (СтрНайти(ДопПроверкаЧисла, "0") > 0 ИЛИ ПустаяСтрока(ДопПроверкаЧисла)) Тогда
		СтрокаФормата = "ЧН=; ЧГ=";
	Иначе
		СтрокаФормата = "ЧГ=";
	КонецЕсли;
	Если НЕ ПустаяСтрока(РазмерностьДробнойЧасти) Тогда
		СтрокаФормата = "ЧДЦ=" + СокрЛП(РазмерностьДробнойЧасти) + "; " + СтрокаФормата;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, СтрокаФормата);
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Значение = Формат(Значение, "ДФ=dd.MM.yyyy");
	Иначе
		Значение = Строка(Значение);
		Если ТипЗначения = "Numeric" Тогда
			Значение = СтрЗаменить(СтрЗаменить(Значение, " ", ""), Символы.НПП, "");
			Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Значение) Тогда
				Значение = Формат(Число(" " + СтрЗаменить(Значение, ",", ".")), СтрокаФормата);
			Иначе
				Значение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Значение = СокрЛП(Значение);
	
	Если (ЗначениеЗаполнено(ИмяСправочника) ИЛИ ЗначениеЗаполнено(ИмяСправочникаНСИ))
		И ЗначениеЗаполнено(Значение) И СокрЛП(ПредставлениеСправочника) <> "1" Тогда
		
		ТаблСправочник = Неопределено;
		СправочникиШаблона = Неопределено;
		Если ЗначениеЗаполнено(ИмяСправочника) Тогда
			Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("KeyValuePair_Meta", СправочникиШаблона) Тогда
				СправочникиШаблона.Свойство(ИмяСправочника, ТаблСправочник);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ИмяСправочникаНСИ) Тогда
			Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("NSI_Meta", СправочникиШаблона) Тогда
				СправочникиШаблона.Свойство(ИмяСправочникаНСИ, ТаблСправочник);
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблСправочник <> Неопределено Тогда
			НайденнаяСтрока = ТаблСправочник.Найти(Значение, "Значение");
			Если НайденнаяСтрока <> Неопределено Тогда
				Значение = НайденнаяСтрока.Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ТребуетсяПроверка(Знач ВариантыПроверок, ВариантПроверки, Знач МаксимальныйВесРазряда = 16) Экспорт
	
	Если ВариантПроверки > ВариантыПроверок Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пока МаксимальныйВесРазряда > ВариантыПроверок Цикл
		МаксимальныйВесРазряда = Цел(МаксимальныйВесРазряда / 2);
	КонецЦикла;
	
	ВариантыПроверок = ВариантыПроверок - МаксимальныйВесРазряда;
	Если ВариантыПроверок >= 0 И ВариантПроверки = МаксимальныйВесРазряда Тогда
		Возврат Истина;
	КонецЕсли;
	
	Пока ВариантыПроверок >= ВариантПроверки Цикл
		МаксимальныйВесРазряда = Цел(МаксимальныйВесРазряда / 2);
		ВариантыПроверок = ВариантыПроверок - МаксимальныйВесРазряда;
		Если ВариантыПроверок >= 0 И ВариантПроверки = МаксимальныйВесРазряда Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаписатьСообщениеОбОшибке(ВопросАнкеты, ПараметрыВыгрузки, Описание, НомСтроки = 0) Экспорт
	
	ТаблицаОшибок = Неопределено;
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Errors_Meta", ТаблицаОшибок) Тогда
		
		ИмяПоказателя = ВопросАнкеты["QUESTION_NAME_ID"];
		ОписаниеПоказателя = ВопросАнкеты["QUESTION_TEXT"];
		
		АдресОшибки = ИмяПоказателя + "#" + Формат(НомСтроки, "ЧН=; ЧГ=");
		МестоОшибки = ?(НомСтроки > 0, "[Cтрока " + Формат(НомСтроки, "ЧГ=") + "] ", "") + ОписаниеПоказателя;
		
		НовСтрока = ТаблицаОшибок.Добавить();
		
		НовСтрока.АдресОшибки    = АдресОшибки;
		НовСтрока.МестоОшибки    = МестоОшибки;
		НовСтрока.ОписаниеОшибки = Описание;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗначениеОтвета(ВопросАнкеты, ПараметрыВыгрузки, ЗначениеОтвета, НомСтроки = 0)
	
	ТаблицаОтветов = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Answer_Meta", ТаблицаОтветов) Тогда
		
		КПВопроса = СокрЛП(ВопросАнкеты["QUESTION_KEYFIELD"]);
		
		Если КПВопроса <> "" Тогда
			ЗаписатьДанныеОпросаПоКлючу(ПараметрыВыгрузки, КПВопроса, ЗначениеОтвета);
		КонецЕсли;
		
		ИДВопроса = СокрЛП(ВопросАнкеты["QUESTION_ID"]);
		
		НовСтрока = ТаблицаОтветов.Добавить();
		
		НовСтрока.ИДВопроса      = ИДВопроса;
		НовСтрока.ЗначениеОтвета = ЗначениеОтвета;
		Если НомСтроки > 0 Тогда
			НовСтрока.НомСтрокиЛиста = НомСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьРезультатФорматноЛогическогоКонтроля(ПараметрыВыгрузки, ЕстьОшибки, ЕстьПредупреждения) Экспорт
	
	КлючРезультата = "FLK";
	
	ЗначениеРезультата = ?(ЕстьОшибки, 2, 1);
	
	ЗаписатьДанныеОпросаПоКлючу(ПараметрыВыгрузки, КлючРезультата, ЗначениеРезультата);
	
КонецПроцедуры

Процедура ЗаписатьДанныеОпросаПоКлючу(ПараметрыВыгрузки, Ключ, Значение) Экспорт
	
	СвойстваОпроса = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Survey_Meta", СвойстваОпроса) Тогда
		
		ЭлементСвойства = НайтиЭлементСпискаПоПредставлению(СвойстваОпроса, Ключ);
		
		Если ЭлементСвойства = Неопределено Тогда
			СвойстваОпроса.Добавить(Значение, Ключ, Истина);
		Иначе
			ЭлементСвойства.Значение = Значение;
			ЭлементСвойства.Пометка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеДанныхОпросаПоКлючу(ПараметрыВыгрузки, Ключ) Экспорт
	
	СвойстваОпроса = Неопределено;
	
	Если ПараметрыВыгрузки.МетаданныеШаблона.Свойство("Survey_Meta", СвойстваОпроса) Тогда
		
		ЭлементСвойства = НайтиЭлементСпискаПоПредставлению(СвойстваОпроса, Ключ);
		
		Если ЭлементСвойства <> Неопределено Тогда
			
			Возврат ЭлементСвойства.Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФИОСоответствуетТребованиям(ФИО) Экспорт
	
	Возврат СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ФИО, Истина, " -.");
	
КонецФункции

Функция КодПоОКПОСоответствуетТребованиям(ОКПО) Экспорт
	
	Перем ЭтоЮридическоеЛицо;
	
	Если СтрДлина(ОКПО) = 8 Тогда
		ЭтоЮридическоеЛицо = Истина;
	ИначеЕсли СтрДлина(ОКПО) = 10 Тогда
		ЭтоЮридическоеЛицо = Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ОКПО, ЭтоЮридическоеЛицо);
	
КонецФункции

Функция ИННСоответствуетТребованиям(ИНН) Экспорт
	
	Возврат РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИНН, Ложь);
	
КонецФункции

Функция ОГРНСоответствуетТребованиям(ОГРН) Экспорт
	
	Перем ТекстСообщения;
	
	Возврат РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(ОГРН, Истина, ТекстСообщения);
	
КонецФункции

Функция ОКТМОСоответствуетТребованиям(ОКТМО) Экспорт
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОКТМО)
		ИЛИ (СтрДлина(ОКТМО) <> 8 И СтрДлина(ОКТМО) <> 11) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НомерТелефонаСоответствуетТребованиям(СтрокаНомера) Экспорт
	
	ДлинаНомера = СтрДлина(СтрокаНомера);
	
	Для НомСимв = 1 По ДлинаНомера Цикл
		Сим = Сред(СтрокаНомера, НомСимв, 1);
		Если СтрНайти("0123456789()- +", Сим) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция АдресВебСервераСоответствуетТребованиям(Адрес) Экспорт
	
	ДлинаАдреса  = СтрДлина(Адрес);
	ПозицияТочки = СтрНайти(Адрес, ".", НаправлениеПоиска.СКонца);
	
	Если ДлинаАдреса < 4 ИЛИ ДлинаАдреса - ПозицияТочки < 2 ИЛИ ПозицияТочки < 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Адрес);
	
КонецФункции

Функция СтрокаПредставляетЛокДату(СтрДата) Экспорт
	
	ЧастиСтроки = СтрРазделить(СтрДата, ".");
	
	Если ЧастиСтроки.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(ЧастиСтроки[0]) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[0]) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ЧастиСтроки[1]) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[1]) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрДлина(ЧастиСтроки[2]) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастиСтроки[2]) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НетЦифрВСтроке(Стр) Экспорт
	
	Возврат СтрРазделить(Стр, "0123456789", Истина).Количество() <= 1;
	
КонецФункции

// Проверяет правильность кода ценной бумаги по контрольной цифре.
//
// Пример расчета контрольной цифры.
//
// Преобразуем любые латинские буквы в цифры :
// A = 10, G = 16, U = 30, V = 31, X = 33, Z = 35. AU0000XVGZA -> 10 30 0000 33 31 16 35 10
// Соберем нечетные и четные символы в группы:
// 103000003331163510 = (1, 3, 0, 0, 3, 3, 1, 3, 1), (0, 0, 0, 0, 3, 1, 6, 5, 0)
// Умножим цифры группы, содержащей крайний правый символ (это ВТОРАЯ группа) на 2:
// (0, 0, 0, 0, 6, 2, 12, 10, 0)
// Суммируем отдельные цифры:
// (1 + 3 + 0 + 0 + 3 + 3 + 1 + 3 + 1) + (0 + 0 + 0 + 0 + 6 + 2 + (1 + 2) + (1 + 0) + 0) = 27
// Получаем остаток от деления по модулю 10:
// 27 mod 10 = 7
// Вычтем цифру остатка из 10:
// 10 - 7 = 3
// Получаем остаток от деления результата по модулю 10 (этот последний шаг важен в случае,
// когда остаток от деления суммы равен 0, так как результирующее контрольное число будет равно 10):
// 3 mod 10 = 3
// Таким образом, контрольная цифра кода ценной бумаги равна трем.
//
// Параметры:
//  КодЦеннойБумаги - Строка - код для проверки.
//  Описание - Строка - возвращаемое описание ошибки в случае некорректного кода.
//
// Возвращаемое значение:
//  Булево - Истина, если верный.
//
Функция КодЦеннойБумагиСоответствуетТребованиям(Знач КодЦеннойБумаги, ТекстСообщения) Экспорт
	
	ДлинаКода = СтрДлина(КодЦеннойБумаги);
	
	Если ДлинаКода <> 12 Тогда
		ТекстСообщения = НСтр("ru = 'Если данный код является кодом ISIN, то он должен состоять из 12 символов!';
								|en = 'Если данный код является кодом ISIN, то он должен состоять из 12 символов!'");
		Возврат Ложь;
	КонецЕсли;
	
	ПоследнийСимвол = Прав(КодЦеннойБумаги, 1);
	
	Если СтрНайти("0123456789", ПоследнийСимвол) = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Если данный код является кодом ISIN, то последний символ всегда число!';
								|en = 'Если данный код является кодом ISIN, то последний символ всегда число!'");
		Возврат Ложь;
	КонецЕсли;
	
	ОшСим = "";
	Для НС = 1 По 11 Цикл
		Сим = Сред(КодЦеннойБумаги, НС, 1);
		КодСим = КодСимвола(Сим); 
		Если НЕ ((КодСим >= 48 И КодСим <= 57) ИЛИ (КодСим >= 65 И КодСим <= 90) ИЛИ (КодСим >= 97 И КодСим <= 122)) Тогда
			ОшСим = ОшСим + Сим + " ";
		КонецЕсли;
	КонецЦикла;
	
	Если ОшСим <> "" Тогда
		ТекстСообщения = НСтр("ru = 'Если данный код является кодом ISIN, то он содержит некорректные символы: ';
								|en = 'Если данный код является кодом ISIN, то он содержит некорректные символы: '") + ОшСим;
		Возврат Ложь;
	КонецЕсли;
	
	ПоследняяЦифраКода = Число(ПоследнийСимвол);
	
	КодЦеннойБумаги = ВРег(КодЦеннойБумаги);
	
	Цифры = Новый Массив;
	Для НС = 1 По 11 Цикл
		Сим = Сред(КодЦеннойБумаги, НС, 1);
		КодСим = КодСимвола(Сим);
		
		Если КодСим >= 48 И КодСим <= 57 Тогда
			ЧС = Число(Сим);
		Иначе
			ЧС = КодСим - 55;
		КонецЕсли;
		
		Если ЧС > 9 Тогда
			Цифры.Добавить(Цел(ЧС / 10));
			Цифры.Добавить(ЧС % 10);
		Иначе
			Цифры.Добавить(ЧС);
		КонецЕсли;
	КонецЦикла;
	
	СуммаЦифр = 0;
	
	КвоЦифр = Цифры.Количество();
	ПослЧет = (КвоЦифр % 2) = 0;
	Для Инд = 0 По КвоЦифр - 1 Цикл
		ЧС = Цифры[Инд];
		
		ПослЧет = НЕ ПослЧет;
		Если ПослЧет Тогда
			ЧС = ЧС * 2;
			Если ЧС > 9 Тогда
				СуммаЦифр = СуммаЦифр + Цел(ЧС / 10) + (ЧС % 10);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СуммаЦифр = СуммаЦифр + ЧС;
	КонецЦикла; 
	
	КонтрольнаяЦифра = (10 - (СуммаЦифр % 10)) % 10;
	
	Если КонтрольнаяЦифра <> ПоследняяЦифраКода Then
		ТекстСообщения = НСтр("ru = 'Если данный код является кодом ISIN, то он содержит ошибку. Проверьте правильность ввода!';
								|en = 'Если данный код является кодом ISIN, то он содержит ошибку. Проверьте правильность ввода!'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КодЭмитентаСоответствуетТребованиям(Знач КодЭмитента, ТекстСообщения) Экспорт
	
	ДлинаКода = СтрДлина(КодЭмитента);
	
	Если ДлинаКода <> 20 Тогда
		ТекстСообщения = НСтр("ru = 'Код LEI должен состоять из 20 символов!';
								|en = 'Код LEI должен состоять из 20 символов!'");
		Возврат Ложь;
	КонецЕсли;
	
	ЧастиКода = Новый Массив(20);
	
	ОшСим = "";
	Для НС = 1 По 20 Цикл
		Сим = Сред(КодЭмитента, НС, 1);
		КодСим = КодСимвола(Сим); 
		Если НЕ (КодСим >= 48 И КодСим <= 57) Тогда
			Если НЕ ((КодСим >= 65 И КодСим <= 90) ИЛИ (КодСим >= 97 И КодСим <= 122)) Тогда
				ОшСим = ОшСим + Сим + " ";
			КонецЕсли;
			ЧастиКода[НС - 1] = КодСим - 55;
		Иначе
			ЧастиКода[НС - 1] = Число(Сим);
		КонецЕсли;
	КонецЦикла;
	
	Если ОшСим <> "" Тогда
		ТекстСообщения = НСтр("ru = 'Код LEI содержит некорректные символы: ';
								|en = 'Код LEI содержит некорректные символы: '") + ОшСим;
		Возврат Ложь;
	КонецЕсли;
	
	КЦ = 0;
	Для Каждого ЧК Из ЧастиКода Цикл
		Если  ЧК < 10 Then
			КЦ = (КЦ * 10 + ЧК) % 97;
		Иначе
			КЦ = (КЦ * 100 + ЧК) % 97;
		КонецЕсли;
	КонецЦикла;
	
	Если КЦ <> 1 Then
		ТекстСообщения = НСтр("ru = 'Некорректный код. Проверьте правильность кода.';
								|en = 'Некорректный код. Проверьте правильность кода.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти