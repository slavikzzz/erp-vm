#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	МеханизмыДокумента.Добавить("ПодарочныеСертификаты");
	
	//++ НЕ УТ
	МеханизмыДокумента.Добавить("ИнтеграцияБЗК");
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	МеханизмыДокумента.Добавить("УчетУСНПСН");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Истина);
		//++ НЕ УТ
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") И Объект.ПроведеноБанком И Объект.НДФЛПоВедомостям
			И (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ ИЛИ Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения)
			И Объект.ДатаПроведенияБанком < Константы.ДатаНачалаКонтроляОстатковПриПеречисленииНДФЛ.Получить() Тогда
			ИнтеграцияБЗК.РассчитатьИЗарегистрироватьПеречисленныйНДФЛ(Объект, Отказ);
		КонецЕсли;
		//-- НЕ УТ
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	ФлагОбменСБанками = Ложь;
	ОшибкиЗаполнения = "";
	РасшифровкаБезРазбиения = Ложь;
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("ОбменСБанками")
		И ДополнительныеСвойства.ОбменСБанками Тогда
		ФлагОбменСБанками = Истина;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения")
		И ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов, МассивРеквизитовОперации, МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("ВидПеречисленияВБюджет");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не Объект.НДФЛПоВедомостям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	КонецЕсли;
	
	//++ НЕ УТ
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "СчетПоГосконтракту") <> Истина Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяЦелевыхСредств");
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	КонецЕсли;
	
	ПроверитьВедомостиНаВыплатуЗарплаты(Объект, ФлагОбменСБанками, ОшибкиЗаполнения, Отказ);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику 
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ОтражениеЗарплатыВФинансовомУчетеУП.ПроверитьЗаполнениеДокументаВыдачиЗайма(Объект, Отказ);
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ЗначенияРеквизитовБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.БанковскийСчет, "ОтдельныйСчетГОЗ, ТипСчета");
			Если Не ЗначенияРеквизитовБанковскогоСчета.ОтдельныйСчетГОЗ
				И ЗначенияРеквизитовБанковскогоСчета.ТипСчета <> Перечисления.ТипыБанковскихСчетов.Казначейский Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Должен быть выбран отдельный банковский счет ГОЗ';
						|en = 'Separate SDO bank account must be selected'"),
					Объект,
					"БанковскийСчет",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ДоговорСУчастникомГОЗ И ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ОтдельныйСчетГОЗ");
			Если Не ОтдельныйСчетГОЗ Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Должен быть выбран отдельный банковский счет ГОЗ';
						|en = 'Separate SDO bank account must be selected'"),
					Объект,
					"БанковскийСчетКонтрагента",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ПроверитьЗаполнениеДоговоровГОЗ(Объект, РасшифровкаБезРазбиения, Отказ);
		КонецЕсли;
	Иначе
	//-- НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорСЗаказчиком");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВходящегоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("НомерВходящегоДокумента");
	КонецЕсли;
	
	Если Не Объект.СписокКонтрагентов Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
		
	КонецЕсли;
	
	РеквизитыПлатежаВБюджет = Новый Массив;
	РеквизитыПлатежаВБюджет.Добавить("ВидПеречисленияВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("ПеречислениеВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("КодБК");
	РеквизитыПлатежаВБюджет.Добавить("КодОКАТО");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательДаты");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательНомера");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательОснования");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательПериода");
	РеквизитыПлатежаВБюджет.Добавить("СтатусСоставителя");
	
	РеквизитыДокумента = Объект.Метаданные().Реквизиты;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	Если ДатаНачалаПримененияПриказа126н <> '00010101' И Объект.Дата >= ДатаНачалаПримененияПриказа126н Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПоказательТипа");
	Иначе
		РеквизитыПлатежаВБюджет.Добавить("ПоказательТипа");
	КонецЕсли;
	
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		МассивНепроверяемыхРеквизитов.Добавить(РеквизитПлатежаВБюджет);
		Если Объект.ПеречислениеВБюджет Тогда
			Если Не ЗначениеЗаполнено(Объект[РеквизитПлатежаВБюджет]) Тогда
				Реквизит = РеквизитыДокумента.Найти(РеквизитПлатежаВБюджет);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено';
											|en = 'Field %1 is required'"), Реквизит.Синоним);
				Если ФлагОбменСБанками Тогда
					ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, МассивНепроверяемыхРеквизитов);
		ДенежныеСредстваСерверЛокализация.ПроверитьИННиКППНаСоответствие148н(Объект, Отказ);
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеКодаВидаДохода(Объект,
																		Объект.ХозяйственнаяОперация,
																		Отказ);
	ДенежныеСредстваСерверЛокализация.ПроверитьВыгрузкуРеестраНаЗачислениеДенежныхСредств(Объект, Отказ, ФлагОбменСБанками);
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеДокументаСФлагомСамозанятого(
		Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	ПодарочныеСертификатыСервер.ОбработкаПроверкиЗаполнения(Объект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	//++ Локализация
	Если ТипОснования = Тип("Структура")
		И ДанныеЗаполнения.Свойство("НесколькоЗаявокНаРасходованиеСредств") Тогда
		
		Если Не ДанныеЗаполнения.НесколькоЗаявокНаРасходованиеСредств
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование[0]) = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
			
			ДенежныеСредстваСерверЛокализация.ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(
				ДанныеЗаполнения.ДокументОснование[0], Объект, ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда
		
		ЗаполнитьПоСчетуФактуреНалоговогоАгента(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ДоговорЗаймаСотруднику") Тогда
		ДенежныеСредстваСерверЛокализация.ЗаполнитьПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ДанныеЗаполнения, Объект.РасшифровкаПлатежа, Ложь);
		
	ИначеЕсли ТипОснования = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивВедомостей") Тогда
		
		ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		Документы.ПоступлениеДенежныхДокументов.ЗаполнитьПоОснованию(Объект, ДанныеЗаполнения);
		ЗаполнитьРеквизитыЗначениямиПоУмолчанию(Объект);
		Возврат;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		
		ЗаполнитьПоОтчетуОператораСистемыПлатон(
			Объект,
			ДанныеЗаполнения,
			0,
			ДанныеЗаполнения);
	//-- НЕ УТ
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		
		ЗаполнитьПоЗаявлениюОВвозеТоваров(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		
		ЗаполнитьПоОперацииПоЯндексКассе(
			Объект,
			ДанныеЗаполнения,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.УведомлениеОЗачисленииВалюты") Тогда
		
		ДенежныеСредстваСерверЛокализация.ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(
			ДанныеЗаполнения,
			Объект,
			ДанныеЗаполнения);
			
	ИначеЕсли ТипОснования = Тип("Массив") И ДанныеЗаполнения.Количество() > 0 Тогда
		
		ТипОснования = ТипЗнч(ДанныеЗаполнения[0]);
		
		Если ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
			
			ЗаполнитьПоСчетуФактуреНалоговогоАгента(
				Объект,
				ДанныеЗаполнения[0], 
				ДанныеЗаполнения);
				
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
				
			ЗаполнитьПоЗаявлениюОВвозеТоваров(
				Объект,
				ДанныеЗаполнения[0], 
				ДанныеЗаполнения);
				
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("ЗаказПоставщику") Тогда
		
		ДокОснование = ДанныеЗаполнения.ЗаказПоставщику;
		КОплате = ДанныеЗаполнения.СуммаКОплате;
		
		Если ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
			ЗаполнитьПоОтчетуОператораСистемыПлатон(
				Объект, 
				ДокОснование, 
				КОплате, 
				ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ЗаказПоставщику) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
			Документы.ПоступлениеДенежныхДокументов.ЗаполнитьПоОснованию(Объект, ДанныеЗаполнения.ЗаказПоставщику);
			ЗаполнитьРеквизитыЗначениямиПоУмолчанию(Объект);
			Возврат;
		
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		Для каждого СтрокаМассива Из ДанныеЗаполнения.ДокументОснование Цикл
		
			Если ТипЗнч(СтрокаМассива) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
				ЗаполнитьПоПоступлениюДенежныхДокументов(
					Объект,
					СтрокаМассива, 
					0, 
					ДанныеЗаполнения);
				
			ИначеЕсли ТипЗнч(СтрокаМассива)= Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда	 
				ЗаполнитьПоОтчетуОператораСистемыПлатон(
					Объект,
					СтрокаМассива, 
					0, 
					ДанныеЗаполнения);
				
			КонецЕсли;
		КонецЦикла;
	//-- НЕ УТ
	ИначеЕсли ТипОснования = Тип("Структура")
		И ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		
		Если ДанныеЗаполнения.Свойство("СписокКонтрагентов")
			И ДанныеЗаполнения.СписокКонтрагентов Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Валюта)
				И ДанныеЗаполнения.Свойство("Валюта") Тогда
				Объект.Валюта = ДанныеЗаполнения.Валюта;
			КонецЕсли;
			
			Объект.СписокКонтрагентов = ДанныеЗаполнения.СписокКонтрагентов;
			ДенежныеСредстваСерверЛокализация.ЗаполнитьКонтрагентаРасшифровкиПлатежа(Объект);
			Объект.БанковскиеСчетаСпискаКонтрагентов.Загрузить(ДенежныеСредстваСерверЛокализация.РеестрКонтрагентов(Объект));
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Договор")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Договор)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения.Договор, "ДоговорССамозанятым") Тогда
			Объект.ОперацияССамозанятым =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Договор, "ДоговорССамозанятым");
		ИначеЕсли Не ДанныеЗаполнения.Свойство("ОперацияССамозанятым") Тогда
			
			ДанныеЗаполнения.Вставить("ОперацияССамозанятым", Ложь);
			ОписаниеРеквизитов = Новый Структура;
			ДенежныеСредстваСерверЛокализация.ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов);
			ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Объект, ДанныеЗаполнения, ОписаниеРеквизитов);
			Объект.ОперацияССамозанятым = ДанныеЗаполнения.ОперацияССамозанятым;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Контрагент")
			И Не Объект.СписокКонтрагентов Тогда
			Объект.Контрагент = ДанныеЗаполнения.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		ИГК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт.НомерГОЗ");
		Объект.НазначениеПлатежа = СтрЗаменить(Объект.НазначениеПлатежа, "<ИГК>", ИГК);
	КонецЕсли;
	//-- НЕ УТ
	
	ИнициализироватьДокумент(Объект, ДанныеЗаполнения);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	//++ Локализация
	ВыполнитьПроверкуВозвратовНеперечисленныхДенежныхСредств(Объект, Отказ);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	НеиспользуемыеРеквизиты = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если НЕ Объект.СписокФизЛиц Тогда
		
		НеиспользуемыеРеквизиты.Добавить("НомерДоговораСБанком");
		НеиспользуемыеРеквизиты.Добавить("ДатаДоговораСБанком");
		НеиспользуемыеРеквизиты.Добавить("ОтделениеБанка");
		НеиспользуемыеРеквизиты.Добавить("ФилиалОтделенияБанка");
		НеиспользуемыеРеквизиты.Добавить("КодировкаФайла");
		
	КонецЕсли;
	
	//++ НЕ УТ
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "СчетПоГосконтракту") <> Истина Тогда
		НеиспользуемыеРеквизиты.Добавить("СтатьяЦелевыхСредств");
		НеиспользуемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не Объект.СписокКонтрагентов Тогда
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	КонецЕсли;
	
	Для каждого НеиспользуемыйРеквизит Из НеиспользуемыеРеквизиты Цикл
		УдаляемыйРеквизит = МассивРеквизитовОперации.Найти(НеиспользуемыйРеквизит);
		Если УдаляемыйРеквизит <> Неопределено Тогда
			МассивРеквизитовОперации.Удалить(УдаляемыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	//++ НЕ УТ
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(Объект.ХозяйственнаяОперация) Тогда
		ПериодУчетнойПолитики = ?(ЗначениеЗаполнено(Объект.Дата), КонецМесяца(Объект.Дата), КонецМесяца(ТекущаяДатаСеанса()));
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"УчетнаяПолитикаБухУчета", Объект.Организация, ПериодУчетнойПолитики);
		Если ПараметрыУчетнойПолитики <> Неопределено Тогда
			Объект.ПроводкиПоРаботникам = ПараметрыУчетнойПолитики.ПроводкиПоРаботникам;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ПроверитьИзменениеТипаПлатежногоДокумента(Объект);
	
	Если Лев(Объект.ПоказательДаты, 1) = "0" И Сред(Объект.ПоказательДаты, 2, 2) = " ." Тогда
		Объект.ПоказательДаты = "0";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Объект.ПоказательДаты, ".", "")) Тогда
		Объект.ПоказательДаты = "";
	КонецЕсли;
	
	Если Объект.ПеречислениеВБюджет И Не ЗначениеЗаполнено(Объект.ИдентификаторПлатежа) Тогда
		Объект.ИдентификаторПлатежа = "0";
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты 
		И НЕ ЗначениеЗаполнено(Объект.ИдентификаторПлатежа) Тогда
		Объект.ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(Объект);
	КонецЕсли;
	
	ЭтоФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо;
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютныйПлатеж = (ЗначениеЗаполнено(Объект.Валюта) И Объект.Валюта <> ВалютаРегламентированногоУчета);
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОбменСБанками") Или Не Объект.ДополнительныеСвойства.ОбменСБанками Тогда
		Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
			Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю
			И ЭтоФизЛицо)
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам)
			Или ВалютныйПлатеж Тогда
			Объект.КодВидаДохода = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ОбменСБанками") Или Не Объект.ДополнительныеСвойства.ОбменСБанками Тогда
		Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Тогда
			Объект.КодВыплат = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже
		И Не (ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Или ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)) Тогда
		Объект.НомерВходящегоДокумента = СокрЛП(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина));
		Объект.ДатаВходящегоДокумента = Объект.Дата;
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ОчиститьНеиспользуемыеРеквизитыОплатыСамозанятым(Объект);
	
	//++ НЕ УТ
	Если Не Объект.ПеречислениеВБюджет И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		РеквизитыБанковскогоСчета =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчет, "ОтдельныйСчетГОЗ, ГосударственныйКонтракт.НомерГОЗ");
		Если РеквизитыБанковскогоСчета.ОтдельныйСчетГОЗ Тогда
			Объект.ИдентификаторПлатежа = РеквизитыБанковскогоСчета.ГосударственныйКонтрактНомерГОЗ;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	Если ПроведениеДокументов.СвойстваДокумента(Объект).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Ложь);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки
//  Префикс - Строка - Префикс, который будет использован для генерации нового номера
//
Процедура ПриУстановкеНовогоНомера(Объект, СтандартнаяОбработка, Префикс) Экспорт
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		Префикс = НСтр("ru = 'П';
						|en = 'P'");
	Иначе
		Префикс = "0";
	КонецЕсли;
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Если ДействуетФедеральныйЗакон345ФЗ(ОбъектКопирования.Дата) <> ДействуетФедеральныйЗакон345ФЗ(ТекущаяДатаСеанса()) Тогда
		Если ОбъектКопирования.ОчередностьПлатежа = 6 Тогда
			Объект.ОчередностьПлатежа = 5;
		Иначе
			Объект.ОчередностьПлатежа = 0;
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ПриИзмененииПравилПлатежейВБюджет(Объект, ОбъектКопирования.Дата, ТекущаяДатаСеанса());
	
	Если Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер
		Или Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер Тогда
		Объект.ПроведеноБанком = Истина;
		Объект.ДатаПроведенияБанком = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Объект.ДатаВыгрузкиРеестра = '00010101';
	
	Если Не Объект.ПеречислениеВБюджет Тогда
		Объект.ИдентификаторПлатежа = "";
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  ВидФормы - Строка - Имя стандартной формы
//  Параметры - Структура - Параметры формы
//  ВыбраннаяФорма - Строка, Форма - Содержит имя открываемой формы или объект метаданных Форма
//  ДополнительнаяИнформация - Структура - Дополнительная информация открытия формы
//  СтандартнаяОбработка - Булево - Признак стандартной обработки
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Если Параметры.Свойство("Основание") И ЗначениеЗаполнено(Параметры.Основание) Тогда
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("МассивВедомостей") Тогда
			
			СтруктураПараметров = Новый Структура("МассивВедомостей, ХозяйственнаяОперация");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Параметры.Основание);
			Если Не ЗначениеЗаполнено(СтруктураПараметров.ХозяйственнаяОперация) Тогда
				СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
			КонецЕсли;
			
			ДанныеВедомостей = ИнтеграцияБЗК.ДанныеВедомостей(СтруктураПараметров);
			Если ДанныеВедомостей.РеквизитыШапки = Неопределено Тогда
				Текст = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
							|en = 'Cannot execute this command for the specified object.'");
				ВызватьИсключение Текст;
			КонецЕсли;
			
			Если ДанныеВедомостей.МассивОшибок.Количество() = 0
				И ДанныеВедомостей.РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
				СтандартнаяОбработка = Ложь;
				ВыбраннаяФорма = "ФормаПомощникаСоздания";
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыПеречислением")
			Или ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ВедомостьПрочихДоходовПеречислением") Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаПомощникаСоздания";
			
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	КомандаСозданияСчетФактуры = Документы.СчетФактураНалоговыйАгент.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Если КомандаСозданияСчетФактуры <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаСозданияСчетФактуры,
															"ОперацияССамозанятым",
															Истина,
															ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Отчеты.КонтрольПлатежаНаСоответствие275ФЗ.ДобавитьКомандуОтчета(КомандыОтчетов);
	//-- НЕ УТ

	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	// Платежное поручение
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПлатежноеПоручение";
		КомандаПечати.Представление = НСтр("ru = 'Платежное поручение';
											|en = 'Payment order'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ) Тогда
		// Реестр перечисленных сумм НДФЛ
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПФ_MXL_РеестрПеречисленныхСумм";
		КомандаПечати.Представление = НСтр("ru = 'Реестр перечисленных сумм НДФЛ';
											|en = 'Registry of paid PIT amounts'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	//++ Локализация
	
	//++ НЕ УТ
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_РеестрПеречисленныхСумм") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_РеестрПеречисленныхСумм",
		НСтр("ru = 'Реестр перечисленных сумм НДФЛ';
			|en = 'Registry of paid PIT amounts'"),
		ПечатьРеестраПеречисленныхСуммНДФЛ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	//-- НЕ УТ
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПлатежноеПоручение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПлатежноеПоручение",
			НСтр("ru = 'Платежное поручение';
				|en = 'Payment order'"),
			СформироватьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.СписаниеБезналичныхДенежныхСредств.ПФ_MXL_ПлатежноеПоручение_ru");
			
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

//++ Локализация
Функция СформироватьПлатежноеПоручение(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеБезналичныхДенежныхСредств_ПлатежноеПоручение";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеБезналичныхДенежныхСредств.ПФ_MXL_ПлатежноеПоручение_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентовВрем
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизацийВрем
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Документ
	|ГДЕ
	|	Документ.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.БанковскийСчетКасса КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Ссылка.ФормаОплатыБезналичная
	|;
	|
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ КАК Город,
	|	БанковскиеСчета.ТекстКорреспондента КАК ТекстКорреспондента,
	|	БанковскиеСчета.ИННКорреспондента КАК ИННКорреспондента,
	|	БанковскиеСчета.КППКорреспондента КАК КППКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.Банк.БИКРКЦ.Наименование, """") КАК НаименованиеРКЦ
	|
	|ПОМЕСТИТЬ БанковскиеСчетаКонтрагентов
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	БанковскиеСчета.ИННКорреспондента,
	|	БанковскиеСчета.КППКорреспондента,
	|	ЕСТЬNULL(БанковскиеСчета.БанкДляРасчетов.БИКРКЦ.Наименование, """") КАК НаименованиеРКЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	"""",
	|	"""",
	|	БанковскиеСчета.Банк.БИКРКЦ.Наименование КАК НаименованиеРКЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.ТекстКорреспондента,
	|	"""",
	|	"""",
	|	БанковскиеСчета.БанкДляРасчетов.БИКРКЦ.Наименование КАК НаименованиеРКЦ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчетКонтрагента
	|		ИЗ
	|			БанковскиеСчетаКонтрагентовВрем КАК БанковскиеСчета
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.Владелец КАК Владелец,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.НаименованиеБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.БИКБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.КоррСчетБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчета.ГородБанка
	|	ИНАЧЕ
	|		БанковскиеСчета.Банк.Город
	|	КОНЕЦ КАК Город,
	|	БанковскиеСчета.Банк.БИКРКЦ.Наименование КАК НаименованиеРКЦ
	|ПОМЕСТИТЬ БанковскиеСчетаОрганизаций
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	(БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|		ИЗ
	|			БанковскиеСчетаОрганизацийВрем КАК БанковскиеСчета
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	ВЫБОР
	|		КОГДА ИностранныйБанк ТОГДА
	|			БанковскиеСчета.СчетВБанкеДляРасчетов
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|					БанковскиеСчета.КоррСчетБанка
	|				ИНАЧЕ
	|					БанковскиеСчета.Банк.КоррСчет
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Наименование
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.БИКБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Код
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.КоррСчетБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ,
	|	ВЫБОР КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		БанковскиеСчета.ГородБанкаДляРасчетов
	|	ИНАЧЕ
	|		БанковскиеСчета.БанкДляРасчетов.Город
	|	КОНЕЦ,
	|	БанковскиеСчета.БанкДляРасчетов.БИКРКЦ.Наименование
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|ГДЕ
	|	НЕ (БанковскиеСчета.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
	|		И БанковскиеСчета.БИКБанкаДляРасчетов = """"
	|		И БанковскиеСчета.СВИФТБанкаДляРасчетов = """")
	|	И БанковскиеСчета.Ссылка В (
	|		ВЫБРАТЬ
	|			БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|		ИЗ
	|			БанковскиеСчетаОрганизацийВрем КАК БанковскиеСчета
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДанныеДокумента.ИсправляемыйДокумент.Номер, ДанныеДокумента.Номер) КАК Номер,
	|	ЕСТЬNULL(ДанныеДокумента.ИсправляемыйДокумент.Дата, ДанныеДокумента.Дата) КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПлательщикНаименование,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ИННПлательщика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """"
	|				И НЕ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|				И ДанныеДокумента.ИННПлательщика <> """") ТОГДА
	|			""""
	|		ИНАЧЕ
	|			ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ДанныеДокумента.ТекстПлательщика КАК ТекстПлательщика,
	|	ДанныеДокумента.БанковскийСчет.ТекстКорреспондента КАК ТекстКорреспондента,
	|	
	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК ПолучательНаименование,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное КАК ПолучательНаименованиеСокращенное,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Получатель,
	|	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК ИННПолучателя,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.Ссылка ССЫЛКА Справочник.БанковскиеСчетаОрганизаций ТОГДА
	// КПП организации
	|			""""
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """")
	|	КОНЕЦ КАК КПППолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ТекстКорреспондента, """") КАК ТекстПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеРКЦ, """") КАК НаименованиеРКЦ,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДанныеДокумента.ВидПлатежа КАК ВидПлатежа,
	|	ДанныеДокумента.ОчередностьПлатежа КАК Очередность,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ДанныеДокумента.КодОКАТО КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательДаты КАК ПоказательДаты,
	|	ДанныеДокумента.ПоказательНомера КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательОснования КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода КАК ПоказательПериода,
	|	ДанныеДокумента.КодВыплат КАК ПоказательТипа,
	|	ДанныеДокумента.СтатусСоставителя КАК СтатусСоставителя,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.КодВидаДохода КАК КодВидаДохода,
	|
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НомерСчета, """") КАК НомерСчетаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеБанка, """") КАК НаименованиеБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БИК, """") КАК БИКБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КоррСчет, """") КАК СчетБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Город, """") КАК ГородБанкаПолучателя,
	|
	|	ДанныеДокумента.БанковскийСчет.ВариантВыводаМесяца КАК ВариантВыводаМесяца,
	|	ДанныеДокумента.БанковскийСчет.ВыводитьСуммуБезКопеек КАК ВыводитьСуммуБезКопеек,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ГородБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК Город,
	|
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.НомерСчета, """") КАК НомерСчетаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.НаименованиеБанка, """") КАК НаименованиеБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.БИК, """") КАК БИКБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.КоррСчет, """") КАК СчетБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.Город, """") КАК ГородБанкаПлательщика,
	|	ЕСТЬNULL(БанковскиеСчетаОрганизаций.НаименованиеРКЦ, """") КАК НаименованиеРКЦПлательщика
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		ДанныеДокумента.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
	|		ИЛИ 
	|		(ДанныеДокумента.БанковскийСчетПолучатель = БанковскиеСчетаКонтрагентов.Ссылка
	|		И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПлательщикНаименование,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ИННПлательщика = """" ТОГДА
	|			ДанныеДокумента.Организация.ИНН
	|		ИНАЧЕ
	|			ДанныеДокумента.ИННПлательщика
	|	КОНЕЦ КАК ИННПлательщика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КПППлательщика = """"
	|				И НЕ (ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|				И ДанныеДокумента.ИННПлательщика <> """") ТОГДА
	// КПП организации
	|			""""
	|		ИНАЧЕ
	|			ДанныеДокумента.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ДанныеДокумента.ТекстПлательщика КАК ТекстПлательщика,
	|	ЕстьNULL(Распределение.БанковскийСчетКасса.ТекстКорреспондента, ДанныеДокумента.БанковскийСчет.ТекстКорреспондента) КАК ТекстКорреспондента,
	|	
	|	БанковскиеСчетаКонтрагентов.Владелец.Наименование КАК ПолучательНаименование,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеПолное КАК ПолучательНаименованиеПолное,
	|	БанковскиеСчетаКонтрагентов.Владелец.НаименованиеСокращенное КАК ПолучательНаименованиеСокращенное,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Получатель,
	|	
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """" ТОГДА
	|			БанковскиеСчетаКонтрагентов.Владелец.ИНН
	|		ИНАЧЕ
	|			БанковскиеСчетаКонтрагентов.ИННКорреспондента
	|	КОНЕЦ КАК ИННПолучателя,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаКонтрагентов.Ссылка ССЫЛКА Справочник.БанковскиеСчетаОрганизаций ТОГДА
	// КПП организации
	|			""""
	|		ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КППКорреспондента, """")
	|	КОНЕЦ КАК КПППолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ТекстКорреспондента, """") КАК ТекстПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеРКЦ, """") КАК НаименованиеРКЦ,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	"""" КАК ВидПлатежа,
	|	0 КАК Очередность,
	|	ДанныеДокумента.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ДанныеДокумента.КодОКАТО КАК КодОКАТО,
	|	ДанныеДокумента.ПоказательДаты КАК ПоказательДаты,
	|	ДанныеДокумента.ПоказательНомера КАК ПоказательНомера,
	|	ДанныеДокумента.ПоказательОснования КАК ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода КАК ПоказательПериода,
	|	ДанныеДокумента.КодВыплат КАК ПоказательТипа,
	|	ДанныеДокумента.СтатусСоставителя КАК СтатусСоставителя,
	|	ЕстьNULL(Распределение.Сумма, ДанныеДокумента.СуммаДокумента) КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение) КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.КодВидаДохода КАК КодВидаДохода,
	|
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НомерСчета, """") КАК НомерСчетаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.НаименованиеБанка, """") КАК НаименованиеБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.БИК, """") КАК БИКБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.КоррСчет, """") КАК СчетБанкаПолучателя,
	|	ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Город, """") КАК ГородБанкаПолучателя,
	|
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВариантВыводаМесяца, ДанныеДокумента.БанковскийСчет.ВариантВыводаМесяца), ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаМесяцаВДатеДокумента.Числом)) КАК ВариантВыводаМесяца,
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВыводитьСуммуБезКопеек, ДанныеДокумента.БанковскийСчет.ВыводитьСуммуБезКопеек), ЛОЖЬ) КАК ВыводитьСуммуБезКопеек,
	|	ЕСТЬNULL(ЕстьNULL(Распределение.БанковскийСчетКасса.ВалютаДенежныхСредств, ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств), ДанныеДокумента.Валюта) КАК ВалютаДенежныхСредств,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ДанныеДокумента.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.НаименованиеБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет.РучноеИзменениеРеквизитовБанка ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ГородБанка
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК Город,
	|
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.НомерСчета, БанковскиеСчетаОрганизаций.НомерСчета), """") КАК НомерСчетаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.НаименованиеБанка, БанковскиеСчетаОрганизаций.НаименованиеБанка), """") КАК НаименованиеБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.БИК, БанковскиеСчетаОрганизаций.БИК), """") КАК БИКБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.КоррСчет, БанковскиеСчетаОрганизаций.КоррСчет), """") КАК СчетБанкаПлательщика,
	|	ЕСТЬNULL(ЕстьNULL(БанковскиеСчетаОрганизацийРаспределение.Город, БанковскиеСчетаОрганизаций.Город), """") КАК ГородБанкаПлательщика,
	|	ЕСТЬNULL(ЕСТЬNULL(БанковскиеСчетаОрганизацийРаспределение.НаименованиеРКЦ, """"), """") КАК НаименованиеРКЦПлательщика
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|	ПО
	|		ДанныеДокумента.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
	|		ИЛИ (ДанныеДокумента.БанковскийСчетПолучатель = БанковскиеСчетаКонтрагентов.Ссылка
	|			И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты))
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		ДанныеДокумента.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК Распределение
	|	ПО
	|		Распределение.Ссылка = ДанныеДокумента.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизацийРаспределение
	|	ПО
	|		Распределение.БанковскийСчетКасса = БанковскиеСчетаОрганизацийРаспределение.Ссылка
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ФормаОплатыБезналичная
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеКонтрагентов = ДенежныеСредстваСервер.СведенияОПолучателеПлательщикеПоДокументам(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Выборка.ТипПлатежногоДокумента <> Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Платежное поручение не формируется для типа документа: %1';
					|en = 'Payment order is not generated for the document type: %1'"),
				Выборка.ТипПлатежногоДокумента);
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				Выборка.Ссылка.ПолучитьОбъект(),
				"ТипПлатежногоДокумента",
				, // ПутьКДанным
				// Отказ
			);
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, Выборка.Ссылка);
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			// Заполним текст плательщика.
			Если Не ПустаяСтрока(Выборка.ТекстПлательщика) Тогда
				ТекстПлательщика = Выборка.ТекстПлательщика;
			Иначе
				Если Не ПустаяСтрока(Выборка.ТекстКорреспондента) Тогда
					ТекстПлательщика = Выборка.ТекстКорреспондента;
				Иначе
					// Наименование сокращенное плательщика
					ОтборНаименования = Новый Структура("Документ, Признак", Выборка.Ссылка, 4);
					СведенияОНаименовании = ДанныеКонтрагентов.НайтиСтроки(ОтборНаименования);
					ТекстПлательщика = ?(СведенияОНаименовании.Количество() > 0, 
										СведенияОНаименовании[0].ЗначениеРеквизита,
										Выборка.ПлательщикНаименование);
					Если ЗначениеЗаполнено(Выборка.БанкДляРасчетов) Тогда
						ТекстПлательщика = ТекстПлательщика
						+ " р/с " + СокрЛП(Выборка.НомерСчета)
						+ " в " + Строка(Выборка.Банк)
						+ " " + Выборка.Город;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета.Параметры.ТекстПлательщика = ТекстПлательщика;
			
			Если ПустаяСтрока(ТекстПлательщика) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У организации %1 не заполнено поле ""Сокращенное наименование""';
						|en = 'The ""Abbreviated name"" field is not populated for company %1'"),
					Выборка.Организация);
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					Выборка.Организация.ПолучитьОбъект(),
					"НаименованиеСокращенное");
			КонецЕсли;
			
			// Заполним текст получателя.
			Если Не ПустаяСтрока(Выборка.ТекстПолучателя) Тогда
				ТекстПолучателя = Выборка.ТекстПолучателя;
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Организации") Тогда
				// Наименование сокращенное получателя
				ОтборНаименования = Новый Структура("Документ, Признак", Выборка.Ссылка, 2);
				СведенияОНаименовании = ДанныеКонтрагентов.НайтиСтроки(ОтборНаименования);
				ТекстПолучателя = ?(СведенияОНаименовании.Количество() > 0, 
									СведенияОНаименовании[0].ЗначениеРеквизита,
									Выборка.ПолучательНаименованиеСокращенное);
			ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТекстПолучателя = Выборка.ПолучательНаименование;
			Иначе
				ОтборНаименования = Новый Структура("Документ, Признак", Выборка.Ссылка, 0);
				СведенияОНаименовании = ДанныеКонтрагентов.НайтиСтроки(ОтборНаименования);
				ТекстПолучателя = ?(СведенияОНаименовании.Количество() > 0, 
									СведенияОНаименовании[0].ЗначениеРеквизита,
									Выборка.ПолучательНаименованиеПолное);
			КонецЕсли;
			ОбластьМакета.Параметры.ТекстПолучателя = ТекстПолучателя;
			
			Если ПустаяСтрока(ТекстПолучателя) И ЗначениеЗаполнено(Выборка.Получатель) Тогда
				Если ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.Организации") Тогда
					ИмяПоля = "НаименованиеСокращенное";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У организации-получателя %1 не заполнено поле ""Сокращенное наименование""';
							|en = 'The ""Abbreviated name"" field is not populated for receiving company %1'"),
						Выборка.Получатель);
				ИначеЕсли ТипЗнч(Выборка.Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ИмяПоля = "ФИО";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У физического лица %1 не заполнено поле ""ФИО""';
							|en = 'The ""Full name"" field is not populated for individual %1'"),
						Выборка.Получатель);
				Иначе
					ИмяПоля = "НаименованиеПолное";
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'У контрагента %1 не заполнено поле ""Сокращенное наименование""';
							|en = 'The ""Abbreviated name"" field is not populated for counterparty %1'"),
						Выборка.Получатель);
				КонецЕсли; 
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					Выборка.Получатель.ПолучитьОбъект(),
					ИмяПоля);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.НаименованиеРКЦПлательщика) Тогда
				ОбластьМакета.Параметры.НаименованиеБанкаПлательщика =
					Выборка.НаименованиеБанкаПлательщика + " " + Выборка.ГородБанкаПлательщика;
			Иначе
				ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = Выборка.НаименованиеРКЦПлательщика
																		+ "//"
																		+ Выборка.НаименованиеБанкаПлательщика
																		+ " "
																		+ Выборка.ГородБанкаПлательщика;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.НаименованиеРКЦ) Тогда
				ОбластьМакета.Параметры.НаименованиеБанкаПолучателя =
					Выборка.НаименованиеРКЦ + "//" + Выборка.НаименованиеБанкаПолучателя + " " + Выборка.ГородБанкаПолучателя;
			Иначе
				ОбластьМакета.Параметры.НаименованиеБанкаПолучателя =
					Выборка.НаименованиеБанкаПолучателя + " " + Выборка.ГородБанкаПолучателя;
			КонецЕсли;
			
			// Заполним ИНН и КПП.
			ОбластьМакета.Параметры.ИННПлательщика = "ИНН " + ?(ПустаяСтрока(Выборка.ИННПлательщика), "0", Выборка.ИННПлательщика);
			ОбластьМакета.Параметры.ИННПолучателя = "ИНН " + ?(ПустаяСтрока(Выборка.ИННПолучателя), "0", Выборка.ИННПолучателя);
			
			ОтборКПППлательщика = Новый Структура("Документ, Признак", Выборка.Ссылка, 7);
			СведенияОКПППлательщика = ДанныеКонтрагентов.НайтиСтроки(ОтборКПППлательщика);
			КПППлательщика = "0";
			
			Если СведенияОКПППлательщика.Количество() > 0 Тогда
				КПППлательщика =
					?(СведенияОКПППлательщика[0].ЗначениеРеквизита = "", "0", СведенияОКПППлательщика[0].ЗначениеРеквизита);
			КонецЕсли;
			
			ОбластьМакета.Параметры.КПППлательщика =
				"КПП " + ?(ПустаяСтрока(Выборка.КПППлательщика), КПППлательщика, Выборка.КПППлательщика);
			
			ОтборКПП = Новый Структура("Документ, Признак", Выборка.Ссылка, 1);
			СведенияОКПП = ДанныеКонтрагентов.НайтиСтроки(ОтборКПП);
			КППКонтрагента = "0";
			
			Если СведенияОКПП.Количество() > 0 Тогда
				КППКонтрагента = ?(СведенияОКПП[0].ЗначениеРеквизита = "", "0", СведенияОКПП[0].ЗначениеРеквизита);
			КонецЕсли;
			
			ОбластьМакета.Параметры.КПППолучателя = "КПП " + ?(Выборка.КПППолучателя <> "", Выборка.КПППолучателя, КППКонтрагента);
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
				НомерДокументаДляПечати = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
					Выборка.Номер,
					Истина, // УдалитьПрефиксИнформационнойБазы
					Истина); // УдалитьПользовательскийПрефикс
				ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №';
																|en = 'PAYMENT ORDER No'", Метаданные.Языки.Русский.КодЯзыка) + " " + НомерДокументаДляПечати;
			Иначе
				ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ОБРАЗЕЦ ПЛАТЕЖНОГО ПОРУЧЕНИЯ';
																|en = 'PAYMENT ORDER SAMPLE'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			ОбластьМакета.Параметры.СуммаЧислом = ФормированиеПечатныхФорм.СуммаПлатежногоДокумента(
				Выборка.СуммаДокумента,
				Выборка.ВыводитьСуммуБезКопеек);
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(
				Выборка.СуммаДокумента,
				Выборка.ВалютаДенежныхСредств,
				Выборка.ВыводитьСуммуБезКопеек);
			Если Выборка.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Прописью Тогда
				ФорматДаты = "ДЛФ=ДД'";
			Иначе
				ФорматДаты = "ДЛФ=D'";
			КонецЕсли;
			ОбластьМакета.Параметры.ДатаДокумента = Формат(Выборка.ДатаДокумента, ФорматДаты);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
				ТабличныйДокумент,
				НомерСтрокиНачало,
				ОбъектыПечати,
				Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//++ НЕ УТ

Функция ПечатьРеестраПеречисленныхСуммНДФЛ(МассивОбъектов, ОбъектыПечати)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Списание.Организация,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	Списание.ПоказательОснования КАК ПоказательОснования,
	|	Списание.ПоказательПериода КАК ПоказательПериода,
	|	Списание.ДатаПроведенияБанком КАК ДатаПлатежа,
	|	Списание.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	Списание.Номер КАК Номер,
	|	Списание.Дата КАК Дата,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК РеквизитыПлатежногоПоручения,
	|	Списание.НастройкаСчетовУчета.Субконто2 КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Списание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению КАК Уплата
	|		ПО Списание.Ссылка = Уплата.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК Расчеты
	|		ПО Списание.Ссылка = Расчеты.Регистратор
	|ГДЕ
	|	Списание.Ссылка В(&МассивОбъектов)
	|	И Списание.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Списание.ПроведеноБанком
	|	И Списание.ПеречислениеВБюджет
	|	И (НЕ Уплата.Регистратор ЕСТЬ NULL ИЛИ НЕ Расчеты.Регистратор ЕСТЬ NULL)";
	
	РеквизитыПлатежа = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из РеквизитыПлатежа Цикл
		
		ДатаМесяц = Неопределено;
		ИнтеграцияБЗК.ЗаполнитьМесяцНалоговогоПериода(ДатаМесяц, Строка.ПоказательОснования, Строка.ПоказательПериода);
		Строка.МесяцНалоговогоПериода  = НачалоДня(КонецМесяца(ДатаМесяц));
		
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			?(ЗначениеЗаполнено(Строка.НомерВходящегоДокумента), Строка.НомерВходящегоДокумента, Строка.Номер));
		Строка.РеквизитыПлатежногоПоручения = РеквизитыПлатежногоПорученияПоДатеНомеру(Строка.ДатаПлатежа, НомерНаПечать);
		
	КонецЦикла;
	
	Если РеквизитыПлатежа.Количество() = 0 Тогда
		
		Текст = НСтр("ru = 'Печать реестра доступна при использовании подсистемы расчета зарплаты и заполненных реквизитах платежа в бюджет.
			|В документе должен быть выбран соответствующий тип налога, регистрация в налоговом органе и период.';
			|en = 'Register can be printed if the salary calculation subsystem is used and attributes of payment to budget are populated.
			|The corresponding tax type, registration with tax authority, and period should be selected in the document.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		Возврат Новый ТабличныйДокумент;
		
	КонецЕсли;
	
	ТабличныйДокумент = УчетНДФЛ.РеестрПеречисленныхСуммНалога(РеквизитыПлатежа);
	
	Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, МассивОбъектов[0]);
	КонецЕсли;
	Возврат ТабличныйДокумент;
	
КонецФункции
//-- НЕ УТ

// Возвращает строковое представление реквизитов платежного документа.
//
// Параметры:
//   ДатаПП - Дата - дата платежного поручения
//   НомерПП - Строка - номер платежного поручения.
//
// Возвращаемое значение:
//   Строка - строковое представление
//
Функция РеквизитыПлатежногоПорученияПоДатеНомеру(ДатаПП, НомерПП) Экспорт

	Возврат СтрШаблон(НСтр("ru = '№ %1 от %2';
							|en = 'No. %1 from %2'", Метаданные.Языки.Русский.КодЯзыка), НомерПП, Формат(ДатаПП, "ДЛФ=D"));

КонецФункции

//-- Локализация
#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстыОтражения = Новый Массив;
	
	//++ Локализация
	
	// Расчеты с партнерами
	
#Область ТекстОплатаАвансаПоставщикуДругойОрганизации // Дт 60.22 :: Кт 52, Дт 60.02 :: Кт 51
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Оплата аванса поставщику/другой организации (Дт 60.22 :: Кт 52, Дт 60.02 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, Расчеты.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр, Расчеты.СуммаУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата, Расчеты.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Расчеты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаОплатыВВалютеПлатежа, Расчеты.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаПредоплатыВВалютеПлатежа, ЕСТЬNULL(РасчетыПоДокументам.Предоплата, Расчеты.Сумма))
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ТОГДА ""Оплата аванса в другую организацию""
	|		ИНАЧЕ ""Оплата аванса поставщику""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК Расчеты
	|	ПО	
	|		Расчеты.Ссылка = Операция.Ссылка
	|		И Расчеты.Организация = Операция.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Расчеты.Ссылка = РасчетыПоДокументам.Ссылка
	|		И Расчеты.Контрагент = РасчетыПоДокументам.Контрагент
	|		И Расчеты.Договор = РасчетыПоДокументам.Договор
	|		И Расчеты.ГруппаФинансовогоУчета = РасчетыПоДокументам.ГруппаФинансовогоУчета
	|		И Расчеты.Подразделение = РасчетыПоДокументам.Подразделение
	|		И Расчеты.НаправлениеДеятельности = РасчетыПоДокументам.НаправлениеДеятельности
	|		И Расчеты.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И Расчеты.Валюта = РасчетыПоДокументам.Валюта
	|		И Расчеты.Организация = РасчетыПоДокументам.Организация
	|		И Расчеты.ОбъектРасчетов = РасчетыПоДокументам.ОбъектРасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|	ПО	
	|		Расчеты.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДенежныеСредстваКонтрагент КАК ДенежныеСредстваКонтрагент
	|	ПО
	|		ДенежныеСредстваКонтрагент.Ссылка = Расчеты.Ссылка
	|		И ДенежныеСредстваКонтрагент.Контрагент = Расчеты.Контрагент
	|		И ДенежныеСредстваКонтрагент.Договор = Расчеты.Договор
	|		И ДенежныеСредстваКонтрагент.ГруппаФинансовогоУчета = Расчеты.ГруппаФинансовогоУчета
	|		И ДенежныеСредстваКонтрагент.Подразделение = Расчеты.Подразделение
	|		И ВЫБОР КОГДА НаправленияДеятельности.УчетРасчетовСПоставщиками
	|			ТОГДА ДенежныеСредстваКонтрагент.НаправлениеДеятельности = Расчеты.НаправлениеДеятельности
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств  = Расчеты.СтатьяДвиженияДенежныхСредств
	|		И ДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов = Расчеты.Валюта
	|		И ДенежныеСредстваКонтрагент.Организация = Расчеты.Организация
	|		И ДенежныеСредстваКонтрагент.ОбъектРасчетов = Расчеты.ОбъектРасчетов
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|	И Операция.ПроведеноБанком
	|	И ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, Расчеты.СуммаРегл) <> 0
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстОплатаДолгаПоставщикуДругойОрганизации // Дт 60.21 :: Кт 52, Дт 60.01 :: Кт 51
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Оплата долга поставщику/другой организации  (Дт 60.21 :: Кт 52, Дт 60.01 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком 
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, Расчеты.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ДолгУпр, Расчеты.СуммаУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Долг, Расчеты.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЕСТЬNULL(РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств, Расчеты.СтатьяДвиженияДенежныхСредств)
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаОплатыВВалютеПлатежа, Расчеты.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаПостоплатыВВалютеПлатежа, ЕСТЬNULL(РасчетыПоДокументам.Долг, Расчеты.Сумма))
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ТОГДА ""Оплата долга в другую организацию""
	|		ИНАЧЕ ""Оплата долга поставщику""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК Расчеты
	|	ПО	
	|		Расчеты.Ссылка = Операция.Ссылка
	|		И Расчеты.Организация = Операция.Организация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Расчеты.Ссылка = РасчетыПоДокументам.Ссылка
	|		И Расчеты.Контрагент = РасчетыПоДокументам.Контрагент
	|		И Расчеты.Договор = РасчетыПоДокументам.Договор
	|		И Расчеты.ГруппаФинансовогоУчета = РасчетыПоДокументам.ГруппаФинансовогоУчета
	|		И Расчеты.Подразделение = РасчетыПоДокументам.Подразделение
	|		И Расчеты.НаправлениеДеятельности = РасчетыПоДокументам.НаправлениеДеятельности
	|		И Расчеты.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И Расчеты.Валюта = РасчетыПоДокументам.Валюта
	|		И Расчеты.Организация = РасчетыПоДокументам.Организация
	|		И Расчеты.ОбъектРасчетов = РасчетыПоДокументам.ОбъектРасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НаправленияДеятельности КАК НаправленияДеятельности
	|	ПО	
	|		Расчеты.НаправлениеДеятельности = НаправленияДеятельности.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДенежныеСредстваКонтрагент КАК ДенежныеСредстваКонтрагент
	|	ПО
	|		ДенежныеСредстваКонтрагент.Ссылка = Расчеты.Ссылка
	|		И ДенежныеСредстваКонтрагент.Контрагент = Расчеты.Контрагент
	|		И ДенежныеСредстваКонтрагент.Договор = Расчеты.Договор
	|		И ДенежныеСредстваКонтрагент.ГруппаФинансовогоУчета = Расчеты.ГруппаФинансовогоУчета
	|		И ДенежныеСредстваКонтрагент.Подразделение = Расчеты.Подразделение
	|		И ВЫБОР КОГДА НаправленияДеятельности.УчетРасчетовСПоставщиками
	|			ТОГДА ДенежныеСредстваКонтрагент.НаправлениеДеятельности = Расчеты.НаправлениеДеятельности
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств = Расчеты.СтатьяДвиженияДенежныхСредств
	|		И ДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов = Расчеты.Валюта
	|		И ДенежныеСредстваКонтрагент.Организация = Расчеты.Организация
	|		И ДенежныеСредстваКонтрагент.ОбъектРасчетов = Расчеты.ОбъектРасчетов   
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|	И Операция.ПроведеноБанком
	|	И ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстВозвратКлиентуАвансаПогашениеДолга
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Возврат аванса клиенту / в др. организацию, погашение долга клиента / др. организации
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл + РасчетыПоДокументам.ДолгРегл, РасчетыПоПретензиям.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр + РасчетыПоДокументам.ДолгУпр, РасчетыПоПретензиям.СуммаУпр) КАК СуммаУУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, 0) > 0
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыПолученные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	ЕСТЬNULL(РасчетыПоДокументам.ГруппаФинансовогоУчета, РасчетыПоПретензиям.ГруппаФинансовогоУчета) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.Валюта, РасчетыПоПретензиям.Валюта) КАК ВалютаДт,
	|	ЕСТЬNULL(РасчетыПоДокументам.Подразделение, РасчетыПоПретензиям.Подразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(РасчетыПоДокументам.НаправлениеДеятельности, РасчетыПоПретензиям.НаправлениеДеятельности) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЕСТЬNULL(РасчетыПоДокументам.Контрагент, РасчетыПоПретензиям.Контрагент) КАК СубконтоДт1,
	|	ЕСТЬNULL(РасчетыПоДокументам.Договор, РасчетыПоПретензиям.Договор) КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг, РасчетыПоПретензиям.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаКт,
	|	РасчетыПоПретензиям.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	РасчетыПоПретензиям.Валюта КАК ВалютаКт,
	|	РасчетыПоПретензиям.Подразделение КАК ПодразделениеКт,
	|	РасчетыПоПретензиям.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	РасчетыПоПретензиям.Контрагент КАК СубконтоКт1,
	|	РасчетыПоПретензиям.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг, РасчетыПоПретензиям.Сумма) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) И ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, 0) > 0
	|		ТОГДА ""Возврат клиенту аванса""
	|		КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) И ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) > 0
	|		ТОГДА ""Возврат денежных средств клиенту""
	|		КОГДА Операция.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) И ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) > 0
	|		ТОГДА ""Возврат денежных средств в другую организацию""
	|		ИНАЧЕ ""Возврат аванса в другую организацию"" КОНЕЦ КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСКлиентами КАК РасчетыПоПретензиям
	|	ПО
	|		РасчетыПоПретензиям.Ссылка = Операция.Ссылка
	|		И РасчетыПоПретензиям.ДокументОбъектаРасчетов = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		РасчетыПоПретензиям.Ссылка = РасчетыПоДокументам.Ссылка
	|		И РасчетыПоПретензиям.Валюта = РасчетыПоДокументам.Валюта
	|		И РасчетыПоПретензиям.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг <> 0
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|	И ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл + РасчетыПоДокументам.ДолгРегл, РасчетыПоПретензиям.СуммаРегл) + ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр + РасчетыПоДокументам.ДолгУпр, РасчетыПоПретензиям.СуммаУпр) <> 0
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстВозвратКлиентуДС
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Возврат клиенту / др. организации ДС в валюте регл.учета
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Расчеты.СуммаРегл КАК Сумма,
	|	Расчеты.СуммаУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Расчеты.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Расчеты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	СтрокиПлатежа.ВалютнаяСумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|		ТОГДА ""Возврат клиенту денежных средств""
	|		ИНАЧЕ ""Возврат денежных средств в другую организацию"" КОНЕЦ КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК СтрокиПлатежа
	|	ПО
	|		СтрокиПлатежа.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСКлиентами КАК Расчеты
	|	ПО
	|		Расчеты.Ссылка = Операция.Ссылка
	|		И Расчеты.ДокументОбъектаРасчетов = Операция.Ссылка
	|		И Расчеты.СтатьяДвиженияДенежныхСредств = СтрокиПлатежа.СтатьяДвиженияДенежныхСредств
	|		И Расчеты.Валюта = СтрокиПлатежа.ВалютаВзаиморасчетов
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|										ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
	// Банк
	
#Область ТекстСнятиеНаличныхВБанке
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Операция.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Операция.СуммаДокумента / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
	|	КОНЕЦ КАК СчетДт,
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте)
	|	КОНЕЦ
	|	КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанка)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеДенежныхСредствИзБанкаВИностраннойВалюте)
	|	КОНЕЦ
	|	КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Снятие наличных ДС"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Суммы.Регистратор = Операция.Ссылка 
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Выписка КАК Выписка
	|	ПО 
	|		Выписка.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстПеречислениеДСНаДругойСчет
	ТекстЗапроса = "
	|ВЫБРАТЬ // Перечисление ДС на другой счет - Дт 57 Кт 51
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком 
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Операция.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Операция.СуммаДокумента / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчетПолучатель.Подразделение КАК ПодразделениеДт,
	|	Операция.БанковскийСчетПолучатель.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
	|	КОНЕЦ
	|	КАК СчетДт,
	
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПеречислениеДенежныхСредствНаДругойСчет) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление ДС на другой счет"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Суммы.Регистратор = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстВозвратОплатыПоЭквайрингу // (Дт 57.03 :: Кт 52, 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу) КАК ВидСчетаДт,
	|	Операция.ДоговорЭквайринга КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.ДоговорЭквайринга.Подразделение КАК ПодразделениеДт,
	|	Операция.ДоговорЭквайринга.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.ДоговорЭквайринга КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Операция.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Возврат оплаты по эквайрингу"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки <> ""1""
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстКомиссияПоОперациямЭквайринга

	ТекстЗапроса = "
	|ВЫБРАТЬ // Поступление услуг (Дт 44 (данные регистра прочие расходы с хоз. операцией КомиссияПоЭквайрингу) :: Кт 57.03)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Операция.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Операция.Подразделение КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ДоговорыЭквайринга.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.СтатьяРасходов КАК СубконтоДт1,
	|	Операция.АналитикаРасходов КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее) КАК СубконтоДт3,
	|	
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу) КАК ВидСчетаКт,
	|	Операция.ДоговорЭквайринга КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	Операция.Валюта КАК ВалютаКт,
	|	ДоговорыЭквайринга.Подразделение КАК ПодразделениеКт,
	|	ДоговорыЭквайринга.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	Операция.Контрагент КАК СубконтоКт1,
	|	Операция.ДоговорЭквайринга КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Комиссия по операциям эквайринга"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|	ПО
	|		Операция.ДоговорЭквайринга = ДоговорыЭквайринга.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ДокументыКОтражению.Ссылка
	|		И Суммы.ИдентификаторСтроки = ""1""
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту)
	|	И Операция.ПроведеноБанком
	|	И Операция.СуммаКомиссии <> 0
	|	И Операция.ОтражатьКомиссию
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
#КонецОбласти

	// Конвертация валюты
	
#Область ТекстКонвертацияВалюты
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Конвертация валюты
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Операция.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Операция.СуммаДокумента / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчетПолучатель.Подразделение КАК ПодразделениеДт,
	|	Операция.БанковскийСчетПолучатель.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|	КОНЕЦ КАК СчетДт,
	|	Операция.Контрагент КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Операция.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Конвертация валюты"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстПлатежСКонвертациейВалюты
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Платеж с конвертацией валюты
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаРегл КАК Сумма,
	|	Суммы.СуммаУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|	КОНЕЦ КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Операция.СуммаВВалютеОтправителя КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Операция.СтатьяДвиженияДенежныхСредствКонвертация КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Операция.СуммаВВалютеОтправителя КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Конвертация валюты"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|
	|ГДЕ 
	|	Операция.ПлатежСКонвертацией
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПлатежСКонвертациейПрочиеДоходы    // (Дт 57:: Кт 91.1)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Положительная разница (доходы) от покупки иностранной валюты (Дт 52:: Кт 91.1)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.Сумма КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|	КОНЕЦ КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|		СтрокиВПути.СуммаРегл ИНАЧЕ СтрокиВПути.Сумма КОНЕЦ КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы) КАК ВидСчетаКт,
	|	Строки.СтатьяДоходов КАК АналитикаУчетаКт,
	|	Строки.Подразделение КАК МестоУчетаКт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Строки.СтатьяДоходов КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Положительная разница (доходы) от покупки иностранной валюты"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ПрочиеДоходы КАК Строки
	|	ПО 
	|		Строки.Регистратор = Операция.Ссылка
	|		И НЕ Строки.Сторно
	|		И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК СтрокиВПути
	|	ПО
	|		СтрокиВПути.Регистратор = Операция.Ссылка
	|		И НЕ СтрокиВПути.Сторно
	|		И СтрокиВПути.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И СтрокиВПути.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|
	|ГДЕ 
	|	Операция.ПлатежСКонвертацией
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПлатежСКонвертациейПрочиеРасходы   // (Дт 91.2 :: Кт 57)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Отрицательная разница (расходы) от покупки иностранной валюты (Дт 91.2 :: Кт 52)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.Сумма КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК ГруппаФинансовогоУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	Строки.АналитикаРасходов КАК СубконтоДт2,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL ТОГДА
	|			ВЫБОР КОГДА ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка) 
	|					ТОГДА ОбъектыСтроительства.СпособСтроительства
	|				ИНАЧЕ 
	|					ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный) 
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|		СтрокиВПути.СуммаРегл ИНАЧЕ СтрокиВПути.Сумма КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Отрицательная разница (расходы) от покупки иностранной валюты"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ПрочиеРасходы КАК Строки
	|	ПО 
	|		Строки.Регистратор = Операция.Ссылка
	|		И НЕ Строки.Сторно
	|		И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваВПути КАК СтрокиВПути
	|	ПО
	|		СтрокиВПути.Регистратор = Операция.Ссылка
	|		И НЕ СтрокиВПути.Сторно
	|		И СтрокиВПути.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И СтрокиВПути.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|	ПО 
	|		ОбъектыСтроительства.Ссылка = Строки.АналитикаРасходов
	|ГДЕ 
	|	Операция.ПлатежСКонвертацией
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	// Внутренняя передача
	
#Область ТекстВнутренняяПередачаДС
	ТекстЗапроса = "
	|ВЫБРАТЬ // Внутренняя передача ДС
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Операция.СуммаДокумента) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Операция.СуммаДокумента / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчетПолучатель.Подразделение КАК ПодразделениеДт,
	|	Операция.БанковскийСчетПолучатель.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям) КАК СчетДт,
	|	Операция.БанковскийСчетПолучатель.Владелец КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Операция.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Операция.СуммаДокумента КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Внутренняя передача ДС"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Суммы.Регистратор = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|	И Операция.ПроведеноБанком
	|
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
	// Налоги и сборы

#Область ТекстПеречислениеНалогов
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Перечисление налогов
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Операция.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Операция.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Операция.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Операция.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление налогов"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка 
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И НЕ (Операция.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары)
	|	   ИЛИ Операция.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПеречислениеНДСВБюджетПоОтдельнымОперациям
	
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Перечисление НДС в бюджет
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Строки.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Строки.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Строки.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Строки.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление НДС в бюджет"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка 
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И (Операция.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары)
	|	   ИЛИ Операция.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ТекстНалогиОбособленногоПодразделения

	ТекстЗапроса = "
	|ВЫБРАТЬ // Дт 68 :: Кт 79
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.СуммаУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Операция.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Операция.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Операция.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Операция.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	Операция.Валюта КАК ВалютаКт,
	|	
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям) КАК СчетКт,
	|	
	|	Операция.Организация КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление налога (обособленное подразделение)"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		Операция.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		И Операция.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И НЕ Операция.ТипНалога В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|	И Операция.Организация <> Организации.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Дт 79 :: Кт 68
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.СуммаУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям) КАК СчетДт,
	
	|	Организации.Ссылка КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	Операция.НастройкаСчетовУчета.СчетУчета КАК СчетКт,
	|	Операция.НастройкаСчетовУчета.Субконто1 КАК СубконтоКт1,
	|	Операция.НастройкаСчетовУчета.Субконто2 КАК СубконтоКт2,
	|	Операция.НастройкаСчетовУчета.Субконто3 КАК СубконтоКт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление налога (обособленное подразделение)"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		Операция.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		И Операция.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И НЕ Операция.ТипНалога В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|	И Операция.Организация <> Организации.Ссылка
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);

#КонецОбласти

#Область ТекстНДСВБюджетОбособленногоПодразделения

	ТекстЗапроса = "
	|ВЫБРАТЬ // Дт 68 :: Кт 79
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Строки.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Строки.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Строки.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Строки.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	Операция.Валюта КАК ВалютаКт,
	|	
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям) КАК СчетКт,
	|	
	|	Операция.Организация КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление НДС в бюджет (обособленное подразделение)"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка 
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		Операция.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		И Операция.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Операция.ТипНалога В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|	И Операция.Организация <> Организации.Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ // Дт 79 :: Кт 68
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоТекущимОперациям) КАК СчетДт,
	
	|	Организации.Ссылка КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	Строки.НастройкаСчетовУчета.СчетУчета КАК СчетКт,
	|	Строки.НастройкаСчетовУчета.Субконто1 КАК СубконтоКт1,
	|	Строки.НастройкаСчетовУчета.Субконто2 КАК СубконтоКт2,
	|	Строки.НастройкаСчетовУчета.Субконто3 КАК СубконтоКт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление НДС в бюджет (обособленное подразделение)"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка 
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		Операция.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		И Операция.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Операция.ТипНалога В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары),
	|							ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент))
	|	И Операция.ПроведеноБанком
	|	И Операция.Организация <> Организации.Ссылка
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);

#КонецОбласти

	// Кредиты, депозиты, займы контрагентам

#Область РасчетыПоКредитамЗаймам // (Дт 66.01, 66.02, 76.09 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Возврат кредита, займа / Оплата процентов по кредиту, займу / Оплата комиссии по кредиту, займу (Дт 66.01, 66.02, 76.09 :: Кт 51)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	РасчетыПоКредитам.СуммаРегл КАК Сумма,
	|	РасчетыПоКредитам.СуммаУпр КАК СуммаУУ,
	|
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКредиторамиОсновнойДолг)
	|		КОГДА РасчетыПоКредитам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКредиторамиПроценты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКредиторамиКомиссия)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	РасчетыПоКредитам.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	РасчетыПоКредитам.Валюта КАК ВалютаДт,
	|	РасчетыПоКредитам.Подразделение КАК ПодразделениеДт,
	|	РасчетыПоКредитам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	Операция.Контрагент КАК СубконтоДт1,
	|	РасчетыПоКредитам.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	РасчетыПоКредитам.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.ВалютнаяСумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|		ТОГДА ""Возврат кредита, займа""
	|		КОГДА РасчетыПоКредитам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА ""Оплата процентов по кредиту, займу""
	|		ИНАЧЕ ""Оплата комиссии по кредиту, займу""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыПоКредитамДепозитамЗаймам КАК РасчетыПоКредитам
	|	ПО
	|		Операция.Ссылка = РасчетыПоКредитам.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		РасчетыПоКредитам.Ссылка = Строки.Ссылка
	|		И РасчетыПоКредитам.Договор = Строки.ДоговорКредитаДепозита
	|		И РасчетыПоКредитам.СтатьяДвиженияДенежныхСредств = Строки.СтатьяДвиженияДенежныхСредств
	|		И РасчетыПоКредитам.ТипСуммы = Строки.ТипСуммыКредитаДепозита
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПереводНаДепозит           // (Дт 55.03 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Перевод на депозитный счет  (Дт 55.03 :: Кт 51)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	РасчетыПоДепозитам.СуммаРегл КАК Сумма,
	|	РасчетыПоДепозитам.СуммаУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСДебиторамиОсновнойДолг) КАК ВидСчетаДт,
	|	РасчетыПоДепозитам.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	РасчетыПоДепозитам.Валюта КАК ВалютаДт,
	|	РасчетыПоДепозитам.Подразделение КАК ПодразделениеДт,
	|	РасчетыПоДепозитам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	РасчетыПоДепозитам.Контрагент КАК СубконтоДт1,
	|	РасчетыПоДепозитам.Договор КАК СубконтоДт2,
	|	РасчетыПоДепозитам.СтатьяДвиженияДенежныхСредств КАК СубконтоДт3,
	|	
	|	РасчетыПоДепозитам.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.ВалютнаяСумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перевод на депозитный счет"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыПоКредитамДепозитамЗаймам КАК РасчетыПоДепозитам
	|	ПО 
	|		Операция.Ссылка = РасчетыПоДепозитам.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		РасчетыПоДепозитам.Ссылка = Строки.Ссылка
	|		И РасчетыПоДепозитам.Договор = Строки.ДоговорКредитаДепозита
	|		И РасчетыПоДепозитам.СтатьяДвиженияДенежныхСредств = Строки.СтатьяДвиженияДенежныхСредств
	|	
	|ГДЕ Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ВыдачаЗайма                     // (Дт 58.03 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Перечисление выданного займа (Дт 58.03 :: Кт 51)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	РасчетыПоЗаймам.СуммаРегл КАК Сумма,
	|	РасчетыПоЗаймам.СуммаУпр КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСДебиторамиОсновнойДолг) КАК ВидСчетаДт,
	|	РасчетыПоЗаймам.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	РасчетыПоЗаймам.Валюта КАК ВалютаДт,
	|	РасчетыПоЗаймам.Подразделение КАК ПодразделениеДт,
	|	РасчетыПоЗаймам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	РасчетыПоЗаймам.Контрагент КАК СубконтоДт1,
	|	РасчетыПоЗаймам.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	РасчетыПоЗаймам.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.ВалютнаяСумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перечисление выданного займа"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыПоКредитамДепозитамЗаймам КАК РасчетыПоЗаймам
	|	ПО 
	|		Операция.Ссылка = РасчетыПоЗаймам.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		РасчетыПоЗаймам.Ссылка = Строки.Ссылка
	|		И РасчетыПоЗаймам.Договор = Строки.ДоговорКредитаДепозита
	|		И РасчетыПоЗаймам.СтатьяДвиженияДенежныхСредств = Строки.СтатьяДвиженияДенежныхСредств
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	// Займы сотрудникам

#Область ВыдачаЗаймаСотруднику           // (Дт 73.01 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Перечисление займа сотруднику (Дт 73.01 :: Кт 51)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл КАК Сумма,
	|	Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам) КАК СчетДт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЕСТЬNULL(Строки.СтатьяДвиженияДенежныхСредств, Операция.СтатьяДвиженияДенежныхСредств) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Суммы.СуммаБезНДС + Суммы.СуммаНДС КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выдача займа сотруднику"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО 
	|		Операция.Ссылка = Строки.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки = ЕСТЬNULL(Строки.ИдентификаторСтроки, """")
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
	// Залог за тару
	
#Область ТекстВозвратКлиентуЗалогаЗаТару
	ТекстЗапроса = "
	|ВЫБРАТЬ // Возврат клиенту залога за тару
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	РасчетыПоДокументам.ЗалогЗаТаруРегл КАК Сумма,
	|	РасчетыПоДокументам.ЗалогЗаТаруРегл / КурсВалютыУпрУчета.Курс КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	РасчетыПоДокументам.ЗалогЗаТару КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	РасчетыПоДокументам.ЗалогЗаТару КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Возврат клиенту залога за тару"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСКлиентами КАК Расчеты
	|	ПО
	|		Расчеты.Ссылка = Операция.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСКлиентамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Расчеты.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
	|	И РасчетыПоДокументам.ЗалогЗаТаруРегл  <> 0
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
	// Заработная плата и подотчетники
	
#Область ТекстВыдачаПодотчетникуЧерезДСВПути // Дт 57.21 :: Кт 52, Дт 57.01 :: Кт 51
	ТекстЗапроса = "
	|ВЫБРАТЬ // Выдача подотчетнику  (Дт 57.21 :: Кт 52, Дт 57.01 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.СуммаУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПутиВал)
	|	КОНЕЦ КАК СчетДт,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выдача подотчетнику"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ВТЛицевыеСчетаСотрудников КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|	И Операция.ПроведеноБанком
	|	И Операция.СписокФизЛиц
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстВыдачаПодотчетнику // Дт 71.21 :: Кт 52, Дт 71.01 :: Кт 51
	ТекстЗапроса = "
	|ВЫБРАТЬ // Выдача подотчетнику  (Дт 71.21 :: Кт 52, Дт 71.01 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.СуммаУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетДт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Строки.ВалютнаяСумма
	|	ИНАЧЕ
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выдача подотчетнику"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		ВТРасшифровкаПлатежа КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|	И Операция.ПроведеноБанком
	|	И НЕ Операция.СписокФизЛиц
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстВыплатаЗарплатыНаЛицевыеСчета // (Дт 70 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Выплата зарплаты на лицевые счета  (Дт 70 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(ВыплатыСотрудникам.КВыплате * КурсВалютыДокумента.Курс, ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, ЕСТЬNULL(Строки.Сумма, Операция.СуммаДокумента))) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, ЕСТЬNULL(Строки.Сумма, Операция.СуммаДокумента) / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЕСТЬNULL(ВыплатыСотрудникам.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)) КАК СчетДт,
	|	ВЫБОР КОГДА Операция.ПроводкиПоРаботникам 
	|		ТОГДА Операция.ПодотчетноеЛицо
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	ЕСТЬNULL(Строки.Сумма, Операция.СуммаДокумента) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЕСТЬNULL(Строки.СтатьяДвиженияДенежныхСредств, Операция.СтатьяДвиженияДенежныхСредств) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	ЕСТЬNULL(Строки.Сумма, Операция.СуммаДокумента) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выплата зарплаты на лицевые счета"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыплатыСотрудникам КАК ВыплатыСотрудникам
	|	ПО
	|		Операция.Ссылка = ВыплатыСотрудникам.Ссылка
	|		И Строки.Ведомость = ВыплатыСотрудникам.Ведомость
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыДокумента
	|	ПО
	|		КурсВалютыДокумента.Валюта = Операция.Валюта
	|		И КурсВалютыДокумента.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстВыплатаЗарплатыПоЗарплатномуПроекту // (Дт 70 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Выплата зарплаты по зарплатному проекту  (Дт 70 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате * КурсВалютыДокумента.Курс, Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате * КурсВалютыДокумента.Курс / КурсВалютыУпрУчета.Курс, Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр)) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЕСТЬNULL(ВыплатыСотрудникам.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)) КАК СчетДт,
	|	ВЫБОР КОГДА Операция.ПроводкиПоРаботникам
	|		ТОГДА ВыплатыСотрудникам.ФизическоеЛицо
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	КОНЕЦ КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате, Суммы.СуммаБезНДС + Суммы.СуммаНДС)) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЕСТЬNULL(Строки.СтатьяДвиженияДенежныхСредств, Операция.СтатьяДвиженияДенежныхСредств) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате, Суммы.СуммаБезНДС + Суммы.СуммаНДС)) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выплата зарплаты по зарплатному проекту"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыплатыСотрудникам КАК ВыплатыСотрудникам
	|	ПО
	|		Операция.Ссылка = ВыплатыСотрудникам.Ссылка
	|		И Строки.Ведомость = ВыплатыСотрудникам.Ведомость
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Операция.Ссылка = Суммы.Регистратор
	|		И ЕСТЬNULL(Строки.ИдентификаторСтроки, """") = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыДокумента
	|	ПО
	|		КурсВалютыДокумента.Валюта = Операция.Валюта
	|		И КурсВалютыДокумента.Дата = Операция.ДатаПроведенияБанком
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути КАК ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути
	|	ПО (ИСТИНА)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьНачислениеЗарплаты КАК ИспользоватьНачислениеЗарплаты
	|	ПО (ИСТИНА)
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|	И Операция.ПроведеноБанком
	|	И НЕ (ВЫБОР
	|			КОГДА НЕ Операция.ПроведеноБанком
	|					ИЛИ НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|					ИЛИ Операция.Исправление
	|				ТОГДА Операция.Дата
	|			ИНАЧЕ КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|		КОНЕЦ >= ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути.Значение
	|		И ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути.Значение <> ДАТАВРЕМЯ(1,1,1)
	|	И ИспользоватьНачислениеЗарплаты.Значение)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Строки.СтатьяДвиженияДенежныхСредств,
	|	Операция.Организация,
	|	ВыплатыСотрудникам.ФизическоеЛицо,
	|	ВыплатыСотрудникам.СчетУчета,
	|	Операция.БанковскийСчет,
	|	Операция.ДатаПроведенияБанком,
	|	Операция.Валюта
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстВыплатаЗарплатыПоЗарплатномуПроектуЧерезПереводыВПути // (Дт 57.01 :: Кт 51)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Выплата зарплаты по зарплатному проекту  (Дт 57.01 :: Кт 51 )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате * КурсВалютыДокумента.Курс, Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл)) КАК Сумма,
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате * КурсВалютыДокумента.Курс / КурсВалютыУпрУчета.Курс, Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр)) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути) КАК СчетДт,
	|	ЕСТЬNULL(Строки.СтатьяДвиженияДенежныхСредств, Операция.СтатьяДвиженияДенежныхСредств) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате, Суммы.СуммаБезНДС + Суммы.СуммаНДС)) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства) КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЕСТЬNULL(Строки.СтатьяДвиженияДенежныхСредств, Операция.СтатьяДвиженияДенежныхСредств) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	СУММА(ЕСТЬNULL(ВыплатыСотрудникам.КВыплате, Суммы.СуммаБезНДС + Суммы.СуммаНДС)) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выплата зарплаты по зарплатному проекту"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВыплатыСотрудникам КАК ВыплатыСотрудникам
	|	ПО
	|		Операция.Ссылка = ВыплатыСотрудникам.Ссылка
	|		И Строки.Ведомость = ВыплатыСотрудникам.Ведомость
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Операция.Ссылка = Суммы.Регистратор
	|		И ЕСТЬNULL(Строки.ИдентификаторСтроки, """") = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыДокумента
	|	ПО
	|		КурсВалютыДокумента.Валюта = Операция.Валюта
	|		И КурсВалютыДокумента.Дата = Операция.ДатаПроведенияБанком
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВидимостьДатыНачалаПеречисленияЗарплатыЧерезПереводыВПути КАК ВидимостьДатыНачалаПеречисленияЗарплатыЧерезПереводыВПути
	|	ПО (ИСТИНА)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути КАК ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути
	|	ПО (ИСТИНА)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьНачислениеЗарплаты КАК ИспользоватьНачислениеЗарплаты
	|	ПО (ИСТИНА)
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|	И Операция.ПроведеноБанком
	|	И ВЫБОР
	|		КОГДА НЕ Операция.ПроведеноБанком
	|				ИЛИ НАЧАЛОПЕРИОДА(Операция.Дата) = Операция.ДатаПроведенияБанком
	|				ИЛИ Операция.Исправление
	|			ТОГДА Операция.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ >= ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути.Значение
	|	И ДатаНачалаПеречисленияЗарплатыЧерезПереводыВПути.Значение <> ДАТАВРЕМЯ(1,1,1)
	|	И ИспользоватьНачислениеЗарплаты.Значение
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Строки.СтатьяДвиженияДенежныхСредств,
	|	Операция.Организация,
	|	ВыплатыСотрудникам.ФизическоеЛицо,
	|	ВыплатыСотрудникам.СчетУчета,
	|	Операция.БанковскийСчет,
	|	Операция.ДатаПроведенияБанком,
	|	Операция.Валюта
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
	// Прочие списания
	
#Область ТекстПрочиеРасходы
	ТекстЗапроса = "
	|ВЫБРАТЬ // Прочие расходы в валюте регл.учета
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	Строки.АналитикаРасходов КАК СубконтоДт2,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL ТОГДА
	|				ВЫБОР КОГДА ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка) 
	|						ТОГДА ОбъектыСтроительства.СпособСтроительства
	|					ИНАЧЕ 
	|						ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный) 
	|				КОНЕЦ
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Суммы.СуммаБезНДС
	|	ИНАЧЕ
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Прочие расходы"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО 
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|	ПО 
	|		ОбъектыСтроительства.Ссылка = Строки.АналитикаРасходов
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|	И Операция.ПроведеноБанком
	|	И Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов 
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти
	
#Область ТекстПрочееСписание
	ТекстЗапроса = "
	|ВЫБРАТЬ // Прочее списание
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Строки.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Строки.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Строки.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Строки.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Строки.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Суммы.СуммаБезНДС
	|	ИНАЧЕ
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Прочее списание"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО 
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО 
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = Операция.ДатаПроведенияБанком
	|
	|ГДЕ 
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|	И Операция.ПроведеноБанком
	|	И Строки.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов 
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

// Взаимозачет

#Область ВзаимозачетСФилиалами // (Дт 6Х.ХХ :: Кт 79.02), (Дт 79.02 :: Кт 6Х.ХХ)

	ТекстЗапроса = ВзаимозачетЗадолженностиЛокализация.ТекстВзаимозачетаСФилиалами("СписаниеБезналичныхДенежныхСредств");
	ТекстЗапроса = ТекстЗапроса + "
	|	И Операция.ПроведеноБанком";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
#КонецОбласти

// Аренда
	
#Область ТекстОплатаАрендодателю
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // Оплата арендодателю (Дт <76.В, 76.Л, 76.ОЛП> :: Кт <51, 52> )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Расчеты.СуммаРегл КАК Сумма,
	|	Расчеты.СуммаУпр КАК СуммаУУ,
	|	
	|	ВЫБОР Расчеты.ТипСуммы
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАренде) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.УслугаПоАрендеАванс) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ОбеспечительныйПлатеж) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимость) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.ВыкупнаяСтоимостьАванс) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	Расчеты.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	Операция.БанковскийСчет.Подразделение КАК МестоУчетаКт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Расчеты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваБезналичные.Сумма, Суммы.СуммаБезНДС) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Оплата арендодателю"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РасчетыПоАренде КАК Расчеты
	|	ПО
	|		Расчеты.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|	ПО
	|		ДенежныеСредстваБезналичные.Регистратор = Расчеты.Ссылка
	|		И ДенежныеСредстваБезналичные.НастройкаХозяйственнойОперации = Расчеты.НастройкаХозяйственнойОперации
	|		И ДенежныеСредстваБезналичные.ИдентификаторФинЗаписи = Расчеты.ИдентификаторФинЗаписи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Расчеты.Ссылка
	|		И Суммы.ИдентификаторСтроки = Расчеты.ИдентификаторФинЗаписи
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаАрендодателю)
	|	И Операция.ПроведеноБанком
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	ТекстыОтражения.Добавить(ТекстОплатаДолгаАвансаПоставщикуДругойОрганизацииМежФилиальная());
	
	//-- Локализация
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстыЗапроса = Новый Массив;
	
	#Область Поставщики
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.Регистратор КАК Ссылка,
	|	Расчеты.Валюта,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК ОрганизацияАналитики,
	|	ОбъектыРасчетов.Организация,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	СУММА(Расчеты.Сумма) КАК Сумма,
	|	СУММА(Расчеты.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Расчеты.СуммаРегл) КАК СуммаРегл
	|	
	|ПОМЕСТИТЬ РасчетыСПоставщиками
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ПО ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ Расчеты.Сторно
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|ГДЕ
	|	ОбъектыРасчетов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И НЕ Расчеты.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами))
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.Валюта,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	ОбъектыРасчетов.Организация,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область РасчетыСПоставщикамиПоДокументам
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК ОрганизацияАналитики,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	СУММА(Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг) КАК Долг,
	|	СУММА(Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл) КАК ДолгРегл,
	|	Расчеты.ЗаказПоставщику КАК ОбъектРасчетов
	|ПОМЕСТИТЬ РасчетыСПоставщикамиПоДокументам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ЗаказПоставщику = ОбъектыРасчетов.Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	ОбъектыРасчетов.Организация,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.ЗаказПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Ссылка КАК Ссылка,
	|	Расчеты.Контрагент КАК Контрагент,
	|	Расчеты.Договор КАК Договор,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение КАК Подразделение,
	|	Расчеты.Организация,
	|	Расчеты.ОрганизацияАналитики,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СУММА(Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(-Расчеты.Долг) КАК Долг,
	|	СУММА(-Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(-Расчеты.ДолгРегл) КАК ДолгРегл,
	|	Расчеты.ОбъектРасчетов
	|ИЗ
	|	РасчетыСПоставщикамиНоваяАрхитектура КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Ссылка,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.Валюта,
	|	Расчеты.ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.Организация,
	|	Расчеты.ОрганизацияАналитики,
	|	Расчеты.ПредоплатаРегл <> 0,
	|	Расчеты.ОбъектРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Контрагент,
	|	Договор,
	|	ГруппаФинансовогоУчета,
	|	Подразделение,
	|	НаправлениеДеятельности,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.Валюта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщикамиМежФилиальные
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Контрагент КАК Контрагент,
	|	Т.Договор КАК Договор,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Т.Подразделение КАК Подразделение,
	|	Т.Организация КАК Организация,
	|	Т.ОрганизацияАналитики КАК ОрганизацияАналитики,
	|	Т.Валюта КАК Валюта,
	|	Т.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА СУММА(Т.Предоплата) > СУММА(Т.Долг)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|	КОНЕЦ КАК ВидСчета,
	|	Т.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ РасчетыСПоставщикамиМежФилиальные
	|ИЗ
	|	РасчетыСПоставщикамиПоДокументам КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	Т.Контрагент,
	|	Т.Договор,
	|	Т.НаправлениеДеятельности,
	|	Т.ГруппаФинансовогоУчета,
	|	Т.Подразделение,
	|	Т.Организация,
	|	Т.ОрганизацияАналитики,
	|	Т.Валюта,
	|	Т.СтатьяДвиженияДенежныхСредств,
	|	Т.ОбъектРасчетов";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыСКлиентами
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК ДокументОбъектаРасчетов,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.Регистратор <> ОбъектыРасчетов.Объект
	|		ТОГДА -1 КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1
	|		ИНАЧЕ 0 КОНЕЦ * Расчеты.Сумма) КАК Сумма,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.Регистратор <> ОбъектыРасчетов.Объект
	|		ТОГДА -1 КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1
	|		ИНАЧЕ 0 КОНЕЦ * Расчеты.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И Расчеты.Регистратор <> ОбъектыРасчетов.Объект
	|		ТОГДА -1 КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1
	|		ИНАЧЕ 0 КОНЕЦ * Расчеты.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ РасчетыСКлиентами
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ Расчеты.Сторно
	|		И НЕ Расчеты.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВзаимозачетЗадолженности),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами))
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыСКлиентамиПоДокументам
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Расчеты.ЗаказКлиента КАК ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.Объект КАК ДокументОбъектаРасчетов,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.Долг) КАК Долг,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ДолгРегл) КАК ДолгРегл,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ЗалогЗаТару) КАК ЗалогЗаТару,
	|	СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.ЗалогЗаТаруРегл) КАК ЗалогЗаТаруРегл
	|ПОМЕСТИТЬ РасчетыСКлиентамиПоДокументам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ЗаказКлиента = ОбъектыРасчетов.Ссылка)
	|ГДЕ
	|	ОбъектыРасчетов.Объект <> Расчеты.Регистратор ИЛИ Расчеты.Долг <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам.Организация,
	|	Расчеты.ЗаказКлиента,
	|	Расчеты.РасчетныйДокумент,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.Объект,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Ссылка КАК Ссылка,
	|	Расчеты.ОрганизацияАналитики,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.ДокументОбъектаРасчетов,
	|	Расчеты.ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СУММА(-Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(-Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(-Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг) КАК Долг,
	|	СУММА(Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл) КАК ДолгРегл,
	|	СУММА(Расчеты.ЗалогЗаТару) КАК ЗалогЗаТару,
	|	СУММА(Расчеты.ЗалогЗаТаруРегл) КАК ЗалогЗаТаруРегл
	|ИЗ
	|	РасчетыСКлиентамиНоваяАрхитектураДетально КАК Расчеты
	|ГДЕ
	|	НЕ Расчеты.НастройкаХозОперации В (ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносПлатежаМеждуФилиалами),
	|										ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса),
	|										ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПереносЗадолженностиМеждуФилиалами))
	|	И Расчеты.Долг - Расчеты.Предоплата <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Ссылка,
	|	Расчеты.ОрганизацияАналитики,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.ДокументОбъектаРасчетов,
	|	Расчеты.ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область Выписка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Платежи.ПлатежныйДокумент КАК Ссылка,
	|	МАКСИМУМ(Платежи.Период) КАК Дата
	|ПОМЕСТИТЬ Выписка
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваБезналичные КАК Платежи
	|	ПО
	|		ДокументыКОтражению.Ссылка = Платежи.ПлатежныйДокумент
	|		И НЕ Платежи.Сторно
	|
	|СГРУППИРОВАТЬ ПО
	|	Платежи.ПлатежныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыПоКредитамДепозитамЗаймам
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	ДанныеДоговора.Ссылка КАК Договор,
	|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДоговора.Контрагент КАК Контрагент,
	|	ДанныеДоговора.ТипДоговора КАК ТипДоговора,
	|	ДанныеДоговора.ТипСрочности КАК ТипСрочности,
	|	ДанныеДоговора.Подразделение КАК Подразделение,
	|	ДанныеДоговора.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДоговора.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ТипСуммы КАК ТипСуммы,
	|	Расчеты.СтатьяАналитики КАК СтатьяДвиженияДенежныхСредств,
	|
	|	СУММА(Расчеты.Сумма) КАК Сумма,
	|	СУММА(Расчеты.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Расчеты.СуммаРегл) КАК СуммаРегл
	|
	|ПОМЕСТИТЬ РасчетыПоКредитамДепозитамЗаймам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ Расчеты.Сторно
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
	|	ПО
	|		Расчеты.Договор = ДанныеДоговора.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	ДанныеДоговора.Ссылка,
	|	Расчеты.ТипСуммы,
	|	Расчеты.СтатьяАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор,
	|	СтатьяДвиженияДенежныхСредств,
	|	ТипСуммы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыПоАренде
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	ДанныеДоговора.Ссылка КАК Договор,
	|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДоговора.Контрагент КАК Контрагент,
	|	ДанныеДоговора.ТипДоговора КАК ТипДоговора,
	|	ДанныеДоговора.Подразделение КАК Подразделение,
	|	ДанныеДоговора.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДоговора.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ТипСуммы КАК ТипСуммы,
	|	Расчеты.СтатьяАналитики КАК СтатьяДвиженияДенежныхСредств,
	|	Расчеты.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации,
	|	Расчеты.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|
	|	СУММА(Расчеты.Сумма) КАК Сумма,
	|	СУММА(Расчеты.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Расчеты.СуммаРегл) КАК СуммаРегл
	|
	|ПОМЕСТИТЬ РасчетыПоАренде
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ Расчеты.Сторно
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыАренды КАК ДанныеДоговора
	|	ПО
	|		Расчеты.Договор = ДанныеДоговора.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.АналитикаУчетаПоПартнерам,
	|	ДанныеДоговора.Ссылка,
	|	Расчеты.ТипСуммы,
	|	Расчеты.СтатьяАналитики,
	|	Расчеты.НастройкаХозяйственнойОперации,
	|	Расчеты.ИдентификаторФинЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НастройкаХозяйственнойОперации,
	|	ИдентификаторФинЗаписи";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.Ссылка,
	|	Строки.ДоговорКредитаДепозита,
	|	Строки.СтатьяДвиженияДенежныхСредств,
	|	Строки.ТипСуммыКредитаДепозита,
	|	Строки.ВалютаВзаиморасчетов,
	|	Строки.НаправлениеДеятельности,
	|	СУММА(Строки.Сумма) КАК Сумма,
	|
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма)) КАК СуммаУпр,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДС + Суммы.СуммаНДС, Строки.Сумма)) КАК ВалютнаяСумма
	|
	|ПОМЕСТИТЬ ВТРасшифровкаПлатежа
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|	ПО
	|		ДокументыКОтражению.Ссылка = Строки.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.ДоговорКредитаДепозита,
	|	Строки.СтатьяДвиженияДенежныхСредств,
	|	Строки.ТипСуммыКредитаДепозита,
	|	Строки.ВалютаВзаиморасчетов,
	|	Строки.НаправлениеДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Строки.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ЛицевыеСчетаСотрудников
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Строки.Ссылка КАК Ссылка,
	|	Строки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Строки.ЛицевойСчет КАК ЛицевойСчет,
	|	Строки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	СУММА(Строки.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма)) КАК СуммаРегл,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма)) КАК СуммаУпр,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДС + Суммы.СуммаНДС, Строки.Сумма)) КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВТЛицевыеСчетаСотрудников
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.ЛицевыеСчетаСотрудников КАК Строки
	|	ПО
	|		ДокументыКОтражению.Ссылка = Строки.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.ФизическоеЛицо,
	|	Строки.ЛицевойСчет,
	|	Строки.СтатьяДвиженияДенежныхСредств
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Строки.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ДопУсловие = "ДанныеРегистра.ВалютаВзаиморасчетов <> ДанныеРегистра.ВалютаПлатежа";
	ТекстыЗапроса.Добавить(РеглУчетВыборкиСерверПовтИсп.ТекстВТПерваяЗаписьРегистра("ДвиженияДенежныеСредстваКонтрагент", ДопУсловие));
	
	#Область ДенежныеСредстваКонтрагент
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор КАК Ссылка,
	|	ДвиженияДенежныеСредстваКонтрагент.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.Договор
	|	КОНЕЦ КАК Договор,
	|	ДвиженияДенежныеСредстваКонтрагент.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.НаправлениеДеятельностиКонтрагента
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК ВалютаВзаиморасчетов,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ДвиженияДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДвиженияДенежныеСредстваКонтрагент.Организация КАК ОрганизацияАналитики,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОбъектыРасчетов.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОбъектыРасчетов.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГруппаФинансовогоУчета,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагент.СуммаПостоплатыВВалютеПлатежа) КАК СуммаПостоплатыВВалютеПлатежа,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагент.СуммаПредоплатыВВалютеПлатежа) КАК СуммаПредоплатыВВалютеПлатежа,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагент.СуммаОплатыВВалютеПлатежа) КАК СуммаОплатыВВалютеПлатежа,
	|	МИНИМУМ(ДвиженияДенежныеСредстваКонтрагент.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ДенежныеСредстваКонтрагент
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
	|	ПО
	|		ДокументыКОтражению.Ссылка = ДвиженияДенежныеСредстваКонтрагент.Регистратор
	|		И НЕ ДвиженияДенежныеСредстваКонтрагент.Сторно
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (ДвиженияДенежныеСредстваКонтрагент.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор,
	|	ДвиженияДенежныеСредстваКонтрагент.Контрагент,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.Договор
	|	КОНЕЦ,
	|	ДвиженияДенежныеСредстваКонтрагент.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОбъектыРасчетов.Подразделение
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ОбъектыРасчетов.ГруппаФинансовогоУчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.НаправлениеДеятельностиКонтрагента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДвиженияДенежныеСредстваКонтрагент.Организация <> ОбъектыРасчетов.Организация
	|		ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов
	|	КОНЕЦ,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаПлатежа,
	|	ДвиженияДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств,
	|	ДвиженияДенежныеСредстваКонтрагент.Организация,
	|	ОбъектыРасчетов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВыплатыСотрудникам
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ссылка КАК СтатьяРасходов,
	|	ВЫБОР СпособРасчетовСФизическимиЛицами
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПрочиеРасчетыСПерсоналом)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПрочимОперациям)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.Дивиденды)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ДивидендыСотрудникам)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоВыплатеДоходов)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)
	|	КОНЕЦ КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаСтатейРасходовЗарплаты
	|ИЗ
	|	Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходовЗарплата
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Строки.Ссылка КАК Ссылка,
	|	Строки.Ведомость КАК Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)) КАК СчетУчета,
	|	СУММА(РасшифровкаВедомости.КВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВыплатыСотрудникам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|		ПО ДокументыКОтражению.Ссылка = Строки.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК РасшифровкаВедомости
	|		ПО Строки.Ведомость = РасшифровкаВедомости.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаСтатейРасходовЗарплаты КАК СчетаУчета
	|		ПО РасшифровкаВедомости.СтатьяРасходов = СчетаУчета.СтатьяРасходов
	|	
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Операция.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)),
	|	СУММА(РасшифровкаВедомости.КВыплате)
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|		ПО Операция.Ссылка = Строки.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК РасшифровкаВедомости
	|		ПО Строки.Ведомость = РасшифровкаВедомости.Ссылка
	|			И Операция.ПодотчетноеЛицо = РасшифровкаВедомости.ФизическоеЛицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаСтатейРасходовЗарплаты КАК СчетаУчета
	|		ПО РасшифровкаВедомости.СтатьяРасходов = СчетаУчета.СтатьяРасходов
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)),
	|	СУММА(РасшифровкаВедомости.КВыплате)
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|		ПО ДокументыКОтражению.Ссылка = Строки.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК РасшифровкаВедомости
	|		ПО Строки.Ведомость = РасшифровкаВедомости.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаСтатейРасходовЗарплаты КАК СчетаУчета
	|		ПО РасшифровкаВедомости.СтатьяРасходов = СчетаУчета.СтатьяРасходов
	|	
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Операция.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)),
	|	СУММА(РасшифровкаВедомости.КВыплате)
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Строки
	|		ПО Операция.Ссылка = Строки.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК РасшифровкаВедомости
	|		ПО Строки.Ведомость = РасшифровкаВедомости.Ссылка
	|			И Операция.ПодотчетноеЛицо = РасшифровкаВедомости.ФизическоеЛицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаСтатейРасходовЗарплаты КАК СчетаУчета
	|		ПО РасшифровкаВедомости.СтатьяРасходов = СчетаУчета.СтатьяРасходов
	|	
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Строки.Ведомость,
	|	РасшифровкаВедомости.ФизическоеЛицо,
	|	ЕСТЬNULL(СчетаУчета.Счет,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Возврат ТекстЗапроса;
	
	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область Фискализация

//++ Локализация

// Возвращает параметры операции фискализации чека для печати чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Структура - Структура параметров операции фискализации чека
Функция ОсновныеПараметрыОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ОсновныеПараметрыОперации = ФормированиеФискальныхЧековСерверПереопределяемый.СтруктураОсновныхПараметровОперации();
	
	ОсновныеПараметрыОперации.ДокументСсылка       = Объект.Ссылка;
	ОсновныеПараметрыОперации.Организация          = Объект.Организация;
	ОсновныеПараметрыОперации.Контрагент           = Объект.Контрагент;
	ОсновныеПараметрыОперации.Партнер              = Форма.Партнер;
	ОсновныеПараметрыОперации.Валюта               = Объект.Валюта;
	ОсновныеПараметрыОперации.СуммаДокумента       = Объект.СуммаДокумента;
	
	ОсновныеПараметрыОперации.ИмяРеквизитаГиперссылкиНаФорме = "ФискальнаяОперацияСтатус";

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ОсновныеПараметрыОперации.ИмяКомандыПробитияЧека = "ПробитьЧек";
	КонецЕсли;
	
	Возврат ОсновныеПараметрыОперации;
	
КонецФункции

// Определяет, разрешено ли пробитие фискального чека по документу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// Возвращаемое значение:
// 	Булево - Истина, если разрешено пробитие чека
Функция РазрешеноПробитиеФискальныхЧековПоДокументу(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	РазрешеноПробитиеФискальныхЧековПоДокументу =
		(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо
		И Объект.ПроведеноБанком;
	
	Возврат РазрешеноПробитиеФискальныхЧековПоДокументу;
	
КонецФункции

// Формирует массив форматированных строк для формирования гиперссылки пробития фискального чека
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ-ссылка, по которому пробивается фискальный чек
// 	Форма - ФормаКлиентскогоПриложения - Форма документ, из которого печатается чек - содержит:
// 	* Объект - ДокументОбъект - Документ-объект, основной параметр формы.
// 	МассивПредставлений - Массив из ФорматированнаяСтрока - Массив форматированных строк для формирования гиперссылки
//    пробития фискального чека.
Процедура ОбновитьГиперссылкуПробитияФискальногоЧека(ДокументСсылка, Форма, МассивПредставлений) Экспорт
	
	ФискальнаяОперацияДанныеЖурнала = ФормированиеФискальныхЧековСервер.ДанныеПробитогоФискальногоЧекаПоДокументу(ДокументСсылка);
	
	Если ФискальнаяОперацияДанныеЖурнала <> Неопределено Тогда
		
		НомерЧекаККМ = ФискальнаяОперацияДанныеЖурнала.НомерЧекаККМ;
		ТекстСсылки = "ОткрытьЗаписьФискальнойОперации";
		
		ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуЧекПробит(МассивПредставлений, НомерЧекаККМ, ТекстСсылки);
		
	ИначеЕсли ФормированиеФискальныхЧековСервер.ЕстьПравоНаПробитиеФискальногоЧекаПоДокументу(ДокументСсылка) Тогда
		
		Если ФормированиеФискальныхЧековСервер.ЕстьПодключенноеОборудованиеККассамОрганизации(Форма.Объект.Организация) Тогда 
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиКомандуПробитьЧек(МассивПредставлений, "ПробитьЧек");
		Иначе
			ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений, "НастроитьОборудование");
		КонецЕсли;
		
	Иначе
		
		ФормированиеФискальныхЧековСервер.ДобавитьВПредставлениеГиперссылкиСтатусЧекНеПробит(МассивПредставлений);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет виды фискальных чеков, доступных по документу
// 
// Параметры:
// 	ВидыЧеков - ТаблицаЗначений - Таблица значений, содержащая виды фискальных чеков, доступных по документу
// 	Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция по документу
// 	ИмяКомандыПробитияЧека - Строка - Имя команды пробития чека
Процедура ЗаполнитьВидыФискальныхЧековПоДокументу(ВидыЧеков, Операция, ИмяКомандыПробитияЧека) Экспорт
	
	ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств;
	Если Операция = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ТипРасчетовДенежнымиСредствами = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	КонецЕсли;
	
	ВидЧека = ВидыЧеков.Добавить();
	ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек;
	ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
	ВидЧека.ВидЧекаКоррекции = Неопределено;
	
	Если ФормированиеФискальныхЧековСерверПереопределяемый.РазрешенКассовыйЧекКоррекцииДляТипаРасчетов(ТипРасчетовДенежнымиСредствами) Тогда
		ВидЧека = ВидыЧеков.Добавить();
		ВидЧека.ТипФискальногоДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции;
		ВидЧека.ТипРасчетаДенежнымиСредствами = ТипРасчетовДенежнымиСредствами;
		ВидЧека.ВидЧекаКоррекции = Перечисления.ВидыЧековКоррекции.НеприменениеККТ;
	КонецЕсли;
	
КонецПроцедуры

// Определяет систему налогообложения по документу
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	ПеречислениеСсылка.ТипыСистемНалогообложенияККТ - Система налогообложения по документу
Функция СистемаНалогообложенияПоДокументу(ДокументСсылка) Экспорт
	
	РасшифровкаПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "РасшифровкаПлатежа").Выгрузить();
	
	МассивОбъектовРасчетов = РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов");
	МассивОбъектовРасчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектовРасчетов, "Объект, НалогообложениеНДС");
	
	СистемаНалогообложения = Неопределено;
	
	Для Каждого ОбъектРасчетов Из МассивОбъектовРасчетов Цикл
		
		Если РозничныеПродажиЛокализация.ДокументЗакупкиПоПатенту(ОбъектРасчетов.Значение.Объект) Тогда
			СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СистемаНалогообложения = Неопределено Тогда
		НалогообложениеНДСПоОбъектамРасчетов = Новый Массив();
		Для Каждого ОбъектРасчетов Из МассивОбъектовРасчетов Цикл
			
			Если ЗначениеЗаполнено(ОбъектРасчетов.Значение.НалогообложениеНДС) Тогда
				Если НалогообложениеНДСПоОбъектамРасчетов.Найти(ОбъектРасчетов.Значение.НалогообложениеНДС) = Неопределено Тогда
					НалогообложениеНДСПоОбъектамРасчетов.Добавить(ОбъектРасчетов.Значение.НалогообложениеНДС);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НалогообложениеНДСПоОбъектамРасчетов.Количество() = 1 Тогда
			Если НалогообложениеНДСПоОбъектамРасчетов[0] = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
				СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
			ИначеЕсли НалогообложениеНДСПоОбъектамРасчетов[0] = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
				СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СистемаНалогообложения = Неопределено Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация");
		СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(РеквизитыДокумента.Организация);
	КонецЕсли;
	
	Возврат СистемаНалогообложения;
	
КонецФункции

// Возвращает наименование клиента, кто внес или получил денежные средства в качестве аванса
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ для определения системы налогообложения
// Возвращаемое значение:
// 	Строка - Наименование клиента платежа-аванса
Функция КлиентАвансовогоПлатежаНаименование(ДокументСсылка) Экспорт
	
	Клиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Контрагент");
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Клиент, "НаименованиеПолное");
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТекстЗапросаТаблицаЛимитыРасходаДенежныхСредств(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОплатаВедомостей(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОплатаВедомостейНаВыплатуЗарплаты(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛФизическиеЛица(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВзаиморасчетыПоЗаймамСотрудникам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаКУДиР(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ТекстЗапросаТаблицаРасчетыПоЕдиномуНалоговомуСчету(Запрос, ТекстыЗапроса, Регистры);

	//-- Локализация
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаЛимитыРасходаДенежныхСредств(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЛимитыРасходаДенежныхСредств";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаДанныеВедомостей", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаДанныеВедомостей(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВедомости.НомерСтрокиЗаявки             КАК НомерСтрокиЗаявки,
	|	ТаблицаВедомости.НомерСтрокиВедомости          КАК НомерСтрокиВедомости,
	|	&Период                                        КАК Период,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
	|			ТОГДА &Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьЛимитыРасходаПоПодразделениям
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		КОГДА &Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА &Подразделение 
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	
	|	ТаблицаВедомости.КВыплате * &КоэффициентПересчетаВВалютуУпр КАК РасходСверхЛимита
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныеВедомостей КАК ТаблицаВедомости
	|	ПО
	|		ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка
	|		И ТаблицаРасшифровкаПлатежа.Ведомость = ТаблицаВедомости.Ведомость
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьЛимитыРасходаДенежныхСредств
	|	И (ТаблицаРасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|		ИЛИ ТаблицаРасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств = НЕОПРЕДЕЛЕНО)
	|	И (&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|		ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
	|	И &ИспользоватьНачислениеЗарплаты
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДанныеВедомостей(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ТаблицаДанныеВедомостей";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаВедомости.НомерСтроки   КАК НомерСтрокиЗаявки,
	|	ТаблицаВедомости.Ведомость     КАК Ведомость,
	|	ТаблицаЗарплата.НомерСтроки    КАК НомерСтрокиВедомости,
	|	ТаблицаЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаЗарплата.КВыплате       КАК КВыплате
	|
	|ПОМЕСТИТЬ ТаблицаДанныеВедомостей
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаВедомости
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ТаблицаЗарплата
	|	ПО
	|		ТаблицаВедомости.Ведомость = ТаблицаЗарплата.Ссылка
	|
	|ГДЕ
	|	ТаблицаВедомости.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедомости.НомерСтроки   КАК НомерСтрокиЗаявки,
	|	ТаблицаВедомости.Ведомость     КАК Ведомость,
	|	ТаблицаЗарплата.НомерСтроки    КАК НомерСтрокиВедомости,
	|	ТаблицаЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаЗарплата.КВыплате       КАК КВыплате
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаВедомости
	|	ПО
	|		ТаблицаВедомости.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК ТаблицаЗарплата
	|	ПО
	|		ТаблицаЗарплата.Ссылка = ТаблицаВедомости.Ведомость
	|		И ТаблицаЗарплата.ФизическоеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедомости.НомерСтроки  КАК НомерСтрокиЗаявки,
	|	ТаблицаВедомости.Ведомость    КАК Ведомость,
	|	ТаблицаВыплата.НомерСтроки    КАК НомерСтрокиВедомости,
	|	ТаблицаВыплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаВыплата.КВыплате       КАК КВыплате
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаВедомости
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК ТаблицаВыплата
	|	ПО
	|		ТаблицаВедомости.Ведомость = ТаблицаВыплата.Ссылка
	|
	|ГДЕ
	|	ТаблицаВедомости.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВедомости.НомерСтроки  КАК НомерСтрокиЗаявки,
	|	ТаблицаВедомости.Ведомость    КАК Ведомость,
	|	ТаблицаВыплата.НомерСтроки    КАК НомерСтрокиВедомости,
	|	ТаблицаВыплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаВыплата.КВыплате       КАК КВыплате
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаВедомости
	|	ПО
	|		ТаблицаВедомости.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК ТаблицаВыплата
	|	ПО
	|		ТаблицаВыплата.Ссылка = ТаблицаВедомости.Ведомость
	|		И ТаблицаВыплата.ФизическоеЛицо = ДанныеДокумента.ПодотчетноеЛицо
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОплатаВедомостей(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТаблицаОплатаВедомостей";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаДанныеВедомостей", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаДанныеВедомостей(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВедомости.Ведомость КАК Ведомость,
	|	ТаблицаВедомости.ФизическоеЛицо КАК ФизическоеЛицо
	|
	|ИЗ
	|	ТаблицаДанныеВедомостей КАК ТаблицаВедомости
	|
	|ГДЕ
	|	&ИспользоватьНачислениеЗарплаты
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОплатаВедомостейНаВыплатуЗарплаты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОплатаВедомостейНаВыплатуЗарплаты";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаДанныеВедомостей", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаДанныеВедомостей(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                         КАК ДатаПлатежа,
	|	&Организация                    КАК Организация,
	|	ТаблицаВедомости.Ведомость      КАК Ведомость,
	|	ТаблицаВедомости.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ТаблицаДанныеВедомостей КАК ТаблицаВедомости
	|ГДЕ
	|	&ИспользоватьНачислениеЗарплаты
	|	И &ПроведеноБанком
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСчетаУчетаНалоговПоЗарплате(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ВтСчетаУчетаНалоговПоЗарплате";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ) КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК ВидСтрахования,
	|	ИСТИНА КАК УчетНДФЛ
	|ПОМЕСТИТЬ ВтСчетаУчетаНалоговПоЗарплате
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины),
	|	НЕОПРЕДЕЛЕНО,
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_нак),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииЛетчикам),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_шахтеры),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ДоплатаКПенсииШахтерам),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_ВредныеУсловияТруда),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПФР_ОПС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРПоСуммарномуТарифу),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФФОМС),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТФОМС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ТФОМС),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи),
	|	ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛФизическиеЛица(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ" + "ФизическиеЛица";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ", Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДФЛКПеречислению.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НДФЛКПеречислению.РегистрацияВНалоговомОргане
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ПО ТаблицаРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка
	|		И ДанныеДокумента.НДФЛПоВедомостям
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|	ПО ТаблицаРасшифровкаПлатежа.Ведомость = ОплатаВедомостей.Ведомость
	|		И ОплатаВедомостей.Организация = &Организация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|	ПО ОплатаВедомостей.Регистратор = НДФЛКПеречислению.Регистратор
	|		И НДФЛКПеречислению.Организация = &Организация
	|		И НДФЛКПеречислению.Период <= &Период
	|
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты И &ПроведеноБанком
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтСчетаУчетаНалоговПоЗарплате", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСчетаУчетаНалоговПоЗарплате(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	&Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НомерВходящегоДокумента <> """" ТОГДА &НомерВходящегоДокумента
	|		ИНАЧЕ &НомерНаПечать
	|	КОНЕЦ КАК ПлатежноеПоручениеНомер,
	|	ВЫБОР
	|		КОГДА &ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1,1,1) ТОГДА &ДатаВходящегоДокумента
	|		ИНАЧЕ &Период
	|	КОНЕЦ КАК ПлатежноеПоручениеДата,
	|	ДанныеДокумента.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеДокумента.ТипНалога КАК ТипНалога,
	|	ДанныеДокумента.ПоказательОснования,
	|	ДанныеДокумента.ПоказательПериода
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|		ПО ДанныеДокумента.НастройкаСчетовУчета = НастройкиСчетовУчета.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаУчетаНалоговПоЗарплате КАК СчетаНалоговВзносов
	|		ПО НастройкиСчетовУчета.СчетУчета = СчетаНалоговВзносов.Счет
	|			И СчетаНалоговВзносов.УчетНДФЛ
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты И &ПроведеноБанком
	|	И (&КонтролироватьОстаткиПриПеречисленииНДФЛ ИЛИ НЕ ДанныеДокумента.НДФЛПоВедомостям)
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И ДанныеДокумента.ТипНалога В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛ),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛСПревышения),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛДоходыКонтрагентов),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом))
	|	И ВЫРАЗИТЬ(НастройкиСчетовУчета.Субконто1 КАК Перечисление.ВидыПлатежейВГосБюджет) В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))";
	
	ДатаКонтроляОстатковНДФЛ = Константы.ДатаНачалаКонтроляОстатковПриПеречисленииНДФЛ.Получить();
	Если ЗначениеЗаполнено(ДатаКонтроляОстатковНДФЛ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтролироватьОстаткиПриПеречисленииНДФЛ",
			СтрШаблон("ДанныеДокумента.ДатаПроведенияБанком >= ДАТАВРЕМЯ(%1)",
				Формат(ДатаКонтроляОстатковНДФЛ, "ДФ='гггг, М, д'")));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтролироватьОстаткиПриПеречисленииНДФЛ", "ИСТИНА");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыСФондамиПоСтраховымВзносам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтСчетаУчетаНалоговПоЗарплате", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСчетаУчетаНалоговПоЗарплате(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	СчетаНалоговВзносов.ВидСтрахования КАК ВидОбязательногоСтрахованияСотрудников,
	|	ВЫБОР
	|		КОГДА &НомерВходящегоДокумента <> """" ТОГДА &НомерВходящегоДокумента
	|		ИНАЧЕ &НомерНаПечать
	|	КОНЕЦ КАК ПлатежноеПоручениеНомер,
	|	ВЫБОР
	|		КОГДА &ДатаВходящегоДокумента <> ДАТАВРЕМЯ(1,1,1) ТОГДА &ДатаВходящегоДокумента
	|		ИНАЧЕ &Период
	|	КОНЕЦ КАК ПлатежноеПоручениеДата,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	0 КАК ГодЗадолженностиПоЕСН
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|		ПО ДанныеДокумента.НастройкаСчетовУчета = НастройкиСчетовУчета.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчетаУчетаНалоговПоЗарплате КАК СчетаНалоговВзносов
	|		ПО НастройкиСчетовУчета.СчетУчета = СчетаНалоговВзносов.Счет
	|			И НЕ СчетаНалоговВзносов.УчетНДФЛ
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты И &ПроведеноБанком
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И ВЫРАЗИТЬ(НастройкиСчетовУчета.Субконто1 КАК Перечисление.ВидыПлатежейВГосБюджет) В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВзаиморасчетыПоЗаймамСотрудникам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВзаиморасчетыПоЗаймамСотрудникам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	&ПодотчетноеЛицо                       КАК ФизическоеЛицо,
	|	&Организация                           КАК Организация,
	|	ИСТИНА                                 КАК ЭтоПредоставлениеЗайма,
	|	ДанныеДокумента.ДоговорЗаймаСотруднику КАК ДоговорЗайма,
	|	ДанныеДокумента.Сумма                  КАК СуммаЗайма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	И &ПроведеноБанком
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКУДиР(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "КнигаУчетаДоходовИРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		Документы.СписаниеБезналичныхДенежныхСредств.ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаДействующихПатентов", ТекстыЗапроса) Тогда
		УчетУСНПСНСервер.ТекстЗапросаТаблицаДействующихПатентовПодразделениям(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.СуммаРегл   КАК СуммаРегл,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС    КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.ПодразделениеЗаказа КАК ПодразделениеЗаказа,
	|	ТаблицаРасшифровкаПлатежа.НалогообложениеНДС КАК НалогообложениеНДС
	|	ПОМЕСТИТЬ ВРТаблицаРасшифровкаПлатежа	
	|ИЗ
	|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР КОГДА ДанныеДокумента.Валюта = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА ДанныеДокумента.СуммаДокумента
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	0     КАК СуммаНДС,
	|	ДанныеДокумента.Подразделение как  ПодразделениеЗаказа,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|	
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента 
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ПроведеноБанком
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту);
	|
	|///////////////////////////////////////////////////////////////
	| 
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ТаблицаРасшифровкаПлатежа.Организация КАК Организация,
	|	&Ссылка КАК ДокументВозникновенияДоходовРасходов,
	|	СУММА(-ТаблицаРасшифровкаПлатежа.СуммаРегл)	КАК Графа4,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаРасшифровкаПлатежа.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту))
	|				ТОГДА -ТаблицаРасшифровкаПлатежа.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Графа5,
	|	0 КАК Графа6,
	|	0 КАК Графа7,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ТаблицаРасшифровкаПлатежа.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД),
	|											ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту))
	|				ТОГДА -ТаблицаРасшифровкаПлатежа.СуммаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаРасшифровкаПлатежа.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|				ТОГДА -ТаблицаРасшифровкаПлатежа.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДоходЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаРасшифровкаПлатежа.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|				ТОГДА -ТаблицаРасшифровкаПлатежа.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДоходПатент,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка)) КАК Патент,
	|	&Номер КАК Номер,
	|	&Дата КАК Дата,
	|	&НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	&ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&НазначениеПлатежа КАК ИнформацияОПлатеже,
	|	&Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств
	|	
	|ИЗ
	|	ВРТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДействующихПатентов КАК ТаблицаДействующихПатентов
	|		ПО ТаблицаРасшифровкаПлатежа.ПодразделениеЗаказа = ТаблицаДействующихПатентов.Подразделение
	|			И ТаблицаРасшифровкаПлатежа.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаПоПатенту)
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию))
	|	И &ПроведеноБанком
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасшифровкаПлатежа.НалогообложениеНДС,
	|	ТаблицаРасшифровкаПлатежа.Организация,
	|	ЕСТЬNULL(ТаблицаДействующихПатентов.Патент, ЗНАЧЕНИЕ(Справочник.Патенты.ПустаяСсылка))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)   КАК ДатаОтражения";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК Организации
	|	ПО
	|		Операция.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		И Операция.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И Операция.Организация <> Организации.Ссылка";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаОбъектовРасчетов", ТекстыЗапроса) Тогда
		Документы.СписаниеБезналичныхДенежныхСредств.ТекстЗапросаВременнаяТаблицаОбъектовРасчета(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстЗапроса = РеглУчетПроведениеСервер.ТекстЗапросаОтраженияПоОбъектамРасчетов("ТаблицаОбъектовРасчетов");
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		Документы.СписаниеБезналичныхДенежныхСредств.ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		Документы.СписаниеБезналичныхДенежныхСредств.ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	ТекстЗапроса = ДоходыИРасходыСервер.ДополнитьТекстЗапросаТаблицаОтражениеДокументовВРеглУчете();
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ

Функция ТекстЗапросаТаблицаРасчетыПоЕдиномуНалоговомуСчету(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоЕдиномуНалоговомуСчету";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) КАК Сумма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И ДанныеДокумента.ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ЕдиныйНалоговыйПлатеж)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции



//-- Локализация

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам() Экспорт
	
	//++ Локализация
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	Организации.Ссылка КАК Аналитика,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ДанныеДокумента.ТипНалога КАК Аналитика,
	//++ НЕ УТ
	|	ДанныеДокумента.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.РасчетыСФилиалами) КАК Статья,
	|	&Организация КАК Аналитика,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	Организации.Ссылка КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ДанныеДокумента.ТипНалога КАК Аналитика,
	//++ НЕ УТ
	|	ДанныеДокумента.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|
	|	ДанныеДокумента.ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеДокумента.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|		 И ДанныеДокумента.РегистрацияВНалоговомОргане = Организации.РегистрацияВНалоговомОргане
	|		 И ДанныеДокумента.Организация <> Организации.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	И &ПроведеноБанком";
	
	Возврат ТекстЗапроса;
	
	//-- Локализация
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеНаОсновании

//++ Локализация
Процедура ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеДокумента.Валюта,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент) 	КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента) 	КАК СчетУчета,
	|	ДанныеДокумента.Поставщик 								КАК Субконто1,
	|	ДанныеДокумента.Договор 								КАК Субконто2,
	|	ДанныеДокумента.ДокументОснование 						КАК Субконто3,
	//-- НЕ УТ
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
		//++ НЕ УТ
		НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
		
		ДанныеНастройкиСчетов = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ДанныеНастройкиСчетов.СчетУчета = Выборка.СчетУчета;
		ДанныеНастройкиСчетов.Субконто1 = Выборка.Субконто1;
		ДанныеНастройкиСчетов.Субконто2 = Выборка.Субконто2;
		ДанныеНастройкиСчетов.Субконто3 = Выборка.Субконто3;
		
		НоваяСтрока.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(ДанныеНастройкиСчетов);
		//-- НЕ УТ
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ТекущаяДата                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаНДС,
	|	&Ссылка                        КАК ДокументОснование,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары) 		КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате) 	КАК СчетУчета,
	|	ДанныеДокумента.Контрагент 									КАК Субконто1,
	|	ДанныеДокумента.Договор 									КАК Субконто2,
	|	ДанныеДокумента.Ссылка 										КАК Субконто3,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
		//++ НЕ УТ
		НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
		
		ДанныеНастройкиСчетов = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ДанныеНастройкиСчетов.СчетУчета = Выборка.СчетУчета;
		ДанныеНастройкиСчетов.Субконто1 = Выборка.Субконто1;
		ДанныеНастройкиСчетов.Субконто2 = Выборка.Субконто2;
		ДанныеНастройкиСчетов.Субконто3 = Выборка.Субконто3;
		
		НоваяСтрока.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(ДанныеНастройкиСчетов);
		//-- НЕ УТ
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	&ТекущаяДата КАК Дата,
	                      |	ДанныеДокумента.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	                      |
	                      |	ДанныеДокумента.Организация КАК Организация,
	                      |	ДанныеДокумента.Подразделение КАК Подразделение,
	                      |
	                      |	ДанныеДокумента.Эквайер.Партнер КАК Партнер,
	                      |	ДанныеДокумента.Эквайер КАК Контрагент,
	                      |	ДанныеДокумента.Эквайер.Наименование КАК КонтрагентНаименование,
	                      |	ДанныеДокумента.Эквайер.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	                      |
	                      |	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	                      |	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	                      |	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	                      |	ДанныеДокумента.СуммаДокумента КАК Сумма,
	                      |
	                      |	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	                      |	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	                      |	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	                      |
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	                      |	&Ссылка КАК ДокументОснование
	                      |
	                      |ИЗ
	                      |	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	                      |ГДЕ
	                      |	ДанныеДокумента.Ссылка = &Ссылка
	                      |	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Заявку на расходование денежных средств на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента';
			|en = 'It is not required to enter the Payment request based on the %1 document as it can only be entered based on the Payment receipt from customer operations'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			 НСтр("ru = 'Возврат средств по договору %1 по переводу № %2 пользователя № %3, без НДС';
					|en = 'Return under the %1 contract on transfer No. %2 of user No. %3, excluding VAT'"),
			 НСтр("ru = '<номер и дата Договора с Яндексом>';
					|en = '<number and date of Contract with Yandex>'"),
			 Формат(ДанныеЗаполнения.ИдентификаторТранзакции, "ЧГ="),
			 НСтр("ru = '<номер, присвоенный Плательщику Оператором>';
					|en = '<number assigned to the Payer by the Provider>'")));
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
	НоваяСтрока.Сумма 					= Выборка.Сумма;
	НоваяСтрока.СуммаВзаиморасчетов 	= Выборка.Сумма;
	НоваяСтрока.Партнер 				= Выборка.Партнер;
	НоваяСтрока.СтатьяРасходов 			= Выборка.СтатьяРасходов; 
	НоваяСтрока.АналитикаРасходов 		= Выборка.АналитикаРасходов; 
	НоваяСтрока.СтавкаНДС 				= Справочники.СтавкиНДС.БезНДС;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

//++ НЕ УТ

Процедура ЗаполнитьПоПоступлениюДенежныхДокументов(Объект, Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) КАК БанковскийСчет,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуОператораСистемыПлатон(Объект, Знач ДокументОснование, Знач СуммаКОплате, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетОператораСистемыПлатон КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		СуммаКОплате,
		ДанныеЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения)
	
	ДанныеЗаполнения.Вставить("Валюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация));
	
	ХозяйственнаяОперация = Неопределено;
	ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивВедомостей", ДанныеЗаполнения.МассивВедомостей);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Если ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		СтруктураПараметров.Вставить("Организация", ДанныеЗаполнения.Организация);
	КонецЕсли;
	
	ИнтеграцияБЗК.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	ДанныеВедомостей = ИнтеграцияБЗК.ДанныеВедомостей(СтруктураПараметров, МенеджерВременныхТаблиц);
	РеквизитыШапки = ДанныеВедомостей.РеквизитыШапки;
	
	Если РеквизитыШапки = Неопределено Тогда
		Текст = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
					|en = 'Cannot execute the command for the specified object'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", РеквизитыШапки.ХозяйственнаяОперация);
		ДанныеЗаполнения.Вставить("ПериодРегистрации", РеквизитыШапки.ПериодРегистрации);
	КонецЕсли;
	
	Если Не (ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация)) Тогда
		ДанныеЗаполнения.Вставить("Организация", РеквизитыШапки.Организация);
	КонецЕсли;
	
	Если Не (ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет)) Тогда
		
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация, ДанныеЗаполнения.Валюта);
		
		ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.ВидДохода) Тогда
		ДанныеЗаполнения.Вставить("КодВидаДохода", ИнтеграцияБЗК.ПолучитьКодВидаДохода(РеквизитыШапки.ВидДохода));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		РеквизитыШапки.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма
		|ИЗ
		|	ВТСостояниеВыплатыПоВедомостям КАК ДанныеВедомостей
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость";
		
	ИначеЕсли ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане") Тогда
		
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	ДанныеВедомостей.ТипНалога КАК ТипНалога,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.СуммаОплаты
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|
		|ГДЕ
		|	НЕ ДанныеВедомостей.ОшибкаПеречисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость,
		|	ДанныеВедомостей.ТипНалога";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	ДанныеВедомостей.ТипНалога КАК ТипНалога,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|
		|ГДЕ
		|	НЕ ДанныеВедомостей.ОшибкаПеречисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость,
		|	ДанныеВедомостей.ТипНалога";
		
	КонецЕсли;
	
	ВедомостиДокумента = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаОплаты <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Если НЕ ДанныеЗаполнения.Свойство("ТипНалога") Тогда
				ДанныеЗаполнения.Вставить("ТипНалога", Выборка.ТипНалога);
			ИначеЕсли Выборка.ТипНалога <> ДанныеЗаполнения.ТипНалога Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ВедомостиДокумента.Вставить(Выборка.Ведомость, Истина);
		
	КонецЦикла;
	
	Для Каждого Ведомость Из ДанныеЗаполнения.МассивВедомостей Цикл
		Если ВедомостиДокумента.Получить(Ведомость) = Неопределено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 уже оплачена и будет пропущена.';
					|en = '%1 is already paid and will be omitted.'"), Выборка.Ведомость);
			ОбщегоНазначения.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЦикла;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.Вставить("НДФЛПоВедомостям", Истина);
		Если ДанныеЗаполнения.Свойство("ТипНалога") И ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
			ДанныеЗаполнения.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины);
		Иначе
			ДанныеЗаполнения.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Если ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане") Тогда
			ДанныеЗаполнения.Вставить("Субконто2", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", Объект.РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыЗначениямиПоУмолчанию(Объект)
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Валюта);
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	СтруктураПараметров.Валюта      = Объект.Валюта;
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(
				Объект.БанковскийСчет).Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(
				Объект.БанковскийСчет).Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Объект.БанковскийСчетКонтрагента =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент, Объект.Валюта);
	Объект.НазначениеПлатежа =
		Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчетКонтрагента).ТекстНазначения;
		
	Если ДействуетФедеральныйЗакон345ФЗ(Объект.Дата) Тогда
		Объект.ОчередностьПлатежа = 5;
	Иначе
		Объект.ОчередностьПлатежа = 6;
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ИнициализироватьДокумент(Объект, ДанныеЗаполнения = Неопределено)
	
	//++ НЕ УТ
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(Объект.ХозяйственнаяОперация) Тогда
		ПериодУчетнойПолитики = ?(ЗначениеЗаполнено(Объект.Дата), КонецМесяца(Объект.Дата), КонецМесяца(ТекущаяДатаСеанса()));
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"УчетнаяПолитикаБухУчета", Объект.Организация, ПериодУчетнойПолитики);
		Если ПараметрыУчетнойПолитики <> Неопределено Тогда
			Объект.ПроводкиПоРаботникам = ПараметрыУчетнойПолитики.ПроводкиПоРаботникам;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		Или Не ДанныеЗаполнения.Свойство("ОчередностьПлатежа")
		Или Не ЗначениеЗаполнено(ДанныеЗаполнения.ОчередностьПлатежа) Тогда
		
		Если ДействуетФедеральныйЗакон345ФЗ(Объект.Дата) Тогда
			Объект.ОчередностьПлатежа = 5;
		Иначе
			Объект.ОчередностьПлатежа = 6;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			ДанныеЗаполнения.Вставить("ПеречислениеВБюджет", Истина);
		ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
			ДанныеЗаполнения.Вставить("ПеречислениеВБюджет", Истина);
			ДанныеЗаполнения.Вставить("ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж);
			Если Не ЗначениеЗаполнено(Объект.СтатусСоставителя) Тогда
				ДанныеЗаполнения.Вставить("СтатусСоставителя", "06");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.ПоказательОснования) Тогда
				Если Не ДанныеЗаполнения.Свойство("ПоказательОснования")
					ИЛИ (ДанныеЗаполнения.Свойство("ПоказательОснования")
					И Не ЗначениеЗаполнено(ДанныеЗаполнения.ПоказательОснования)) Тогда
						ДанныеЗаполнения.Вставить("ПоказательОснования", "ДЕ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
			И НЕ ЗначениеЗаполнено (Объект.ХозяйственнаяОперация)Тогда
			Объект.ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("БанковскийСчет")
			И НЕ ЗначениеЗаполнено (Объект.БанковскийСчет)Тогда
			Объект.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Организация")
			И НЕ ЗначениеЗаполнено (Объект.Организация)Тогда
			Объект.Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(Объект);
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ИННПлательщика") Тогда
			Объект.ИННПлательщика = РеквизитыПлательщика.ИННПлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("КПППлательщика") Тогда
			Объект.КПППлательщика = РеквизитыПлательщика.КПППлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ТекстПлательщика") Тогда
			Объект.ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И Не ДанныеЗаполнения.Свойство("ТипПлатежногоДокумента") Тогда
		
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
			
			ДанныеЗаполнения.Вставить("ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
			ДанныеЗаполнения.Вставить("ПроведеноБанком", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		//++ НЕ УТ
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			ДанныеДоговора = ДанныеОбменаСБанкомПоЗарплатномуПроекту(Объект.БанковскийСчет);
			ЗаполнитьЗначенияСвойств(Объект, ДанныеДоговора);
		КонецЕсли;
		//-- НЕ УТ
		
		Если Объект.КодировкаФайла = "" Тогда
			Объект.КодировкаФайла = "UTF-8";
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ОперацияССамозанятым) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Объект.ПеречислениеВБюджет = Ложь;
		Объект.ПлатежиПо275ФЗ = Ложь;
		ДенежныеСредстваСерверЛокализация.УстановитьКодВидаДоходаСамозанятого(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#Область Прочее

Процедура ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра, ИсточникиДанных) Экспорт
	
	//++ Локализация
	Если ИмяРегистра = "ЛимитыРасходаДенежныхСредств" Тогда
		ИсточникиДанных.Вставить("РасшифровкаПлатежа.Ведомость");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//    Настройки - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Операции = Перечисления.ХозяйственныеОперации;
	
	ОтборВыплатаСамозанятому = ДенежныеСредстваСервер.ОтборВыплатаСамозанятому();
	ОтборСписокКонтрагентов = ДенежныеСредстваСервер.ОтборСписокКонтрагентов(ОтборВыплатаСамозанятому);
	
	#Область Шапка
	// ТипНалога
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипНалога");
	Элемент.Поля.Добавить("ЗаполнитьПоПредыдущемуПлатежу");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Элемент.Свойства.Вставить("Видимость");
	
	//
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ОплатаНДСВБюджетПоОтдельнымОперациям", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	//++ НЕ УТ
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипНалога", Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Подобрать счета-фактуры';
												|en = 'Select tax invoices'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе, "ТипНалога", Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Подобрать заявления о ввозе';
												|en = 'Select import applications'"));
	//-- НЕ УТ
	
	// НадписьРеквизитыПлательщика
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Элемент.Свойства.Вставить("Видимость");
	
	// УведомлениеОЗачисленииВалюты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("УведомлениеОЗачисленииВалюты");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже);
	Элемент.Свойства.Вставить("Видимость");
	
	// СПАРК
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаИндексыСПАРКРиски");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	//++ НЕ УТ
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	//-- НЕ УТ
	
	Финансы.НовыйОтбор(Элемент.Условие, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользованиеСПАРКРазрешено", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// Группа реквизитов обмена с банком
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаРеквизитыОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(Элемент.Условие, "СписокФизЛиц", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьПеречислениеДенежныхСредствСпискуСотрудников", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область Реквизиты
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьСинхронизациюДанных", Ложь);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// ПеречислениеВБюджет
	ОтборОперацийПеречисленияВБюджет = Новый ОтборКомпоновкиДанных();
	ГруппаИли = Финансы.НовыйОтбор(ОтборОперацийПеречисленияВБюджет,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИлиИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИлиИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИлиИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИлиИ, "ОперацияССамозанятым", Ложь);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	//++ НЕ УТ
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	//-- НЕ УТ
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("Декорация1");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// УИП
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИП';
												|en = 'UIP'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИН';
												|en = 'Payment ID'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	// Код вида дохода
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВидаДохода");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДействуетУказание2019_5286У", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Код выплат
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВыплат");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Элемент.Свойства.Вставить("Видимость");
	
	// Рублевый платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("ВидПлатежа");
	Элемент.Поля.Добавить("ОчередностьПлатежа");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// СтраницаВалютныйКонтроль
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаВалютныйКонтроль");
	Элемент.Поля.Добавить("НадписьФайлыДляПередачиВБанк");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВалютнойОперации");
	Элемент.Поля.Добавить("КодВалютнойОперацииНаименованиеПолное");
	Элемент.Поля.Добавить("ИнформацияДляВалютногоКонтроля");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ЭтоТранзитныйСчет", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// НДФЛПоВедомостям
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// КодВалютнойОперацииНаименованиеПолное
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВалютнойОперацииНаименованиеПолное");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.КодВалютнойОперацииЗаполнен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйКонтроль", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ГОЗ
	// ТипПлатежаФЗ275
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипПлатежаФЗ275");
	Финансы.НовыйОтбор(Элемент.Условие, "ПлатежиПо275ФЗ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПлатежиПо275ФЗДополнительно
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПлатежиПо275ФЗДополнительно");
	
	ГруппаИли1 = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплаты", Ложь);
	
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ2,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли2, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Финансы.НовыйОтбор(ГруппаИли2, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
	Финансы.НовыйОтбор(ГруппаИли2, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	Финансы.НовыйОтбор(ГруппаИли2, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер);
	Финансы.НовыйОтбор(ГруппаИли2, "ТипПлатежногоДокумента", Перечисления.ТипыПлатежныхДокументов.ПлатежныйОрдер);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// СтатьяЦелевыхСредств
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтатьяЦелевыхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеДенежныхСредствНаДругойСчет);
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.БанковскийСчетПоГосконтракту", Истина);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// СтатьяЦелевыхСредств
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСтатьяЦелевыхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаАрендодателю);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.БанковскийСчетПоГосконтракту", Истина);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	//-- НЕ УТ
	
	#Область РасшифровкаПлатежа
	// Ведомость
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Ведомость");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВедомость");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);

	Финансы.НовыйОтбор(ГруппаИ, "НДФЛПоВедомостям", Истина);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область Команды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	ГруппаИЛИ = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИЛИ, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств", Ложь);
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплаты", Истина);
	
	ГруппаИ_2 = Финансы.НовыйОтбор(ГруппаИЛИ, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ_2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ_2, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ_2, "СписокФизЛиц", Истина);
	Финансы.НовыйОтбор(ГруппаИ_2, "Дополнительно.ИспользоватьПеречислениеДенежныхСредствСпискуСотрудников", Истина);
	
	ГруппаИ_3 = Финансы.НовыйОтбор(ГруппаИЛИ, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ_3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, ГруппаИ_3);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	ГруппаИЛИ = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИЛИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИЛИ);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Выгрузить реестр';
												|en = 'Export registry'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	#КонецОбласти
	
	ДенежныеСредстваСерверЛокализация.ЗаполнитьНастройкиПолейФормы(Настройки);
	
КонецПроцедуры

// Подбирает последний платеж в бюджет по указанному контрагенту с указанной хозоперацией
// и заполняет реквизиты платежа.
//
// Параметры:
//    Объект - ДанныеФормыКоллекция - Данные документа
//    ИсключаяРеквизиты - Строка - Список имен реквизитов, разделенный запятыми, которые необходимо исключить из заполнения.
//
// Возвращаемое значение:
//    Структура, Неопределено - реквизиты платежа (для получения реквизитов, отсутствующих у объекта), либо Неопределено.
//
Функция ПодобратьРеквизитыПлатежаВБюджет(Объект, ИсключаяРеквизиты = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация)
		Или Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеБезналичныхДенежныхСредств.ВидПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ОчередностьПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ВидПеречисленияВБюджет,
	|	СписаниеБезналичныхДенежныхСредств.СтатусСоставителя,
	|	СписаниеБезналичныхДенежныхСредств.КодБК,
	|	СписаниеБезналичныхДенежныхСредств.КодОКАТО,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательОснования,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательТипа,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне) ТОГДА
	|		СписаниеБезналичныхДенежныхСредств.ПоказательПериода
	|	КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательПериода,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательНомера,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств) ТОГДА
	|		0
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК ПоказательДаты,
	//++ НЕ УТ
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) ТОГДА
	|		СписаниеБезналичныхДенежныхСредств.НастройкаСчетовУчета
	|	ИНАЧЕ СписаниеРасшифровкаПлатежа.НастройкаСчетовУчета
	|	КОНЕЦ КАК НастройкаСчетовУчета,
	//-- НЕ УТ
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|	СписаниеРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ СписаниеРасшифровкаПлатежа.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СписаниеБезналичныхДенежныхСредств.ТипНалога КАК ТипНалога,
	|	СписаниеРасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов,
	|	СписаниеРасшифровкаПлатежа.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	СписаниеРасшифровкаПлатежа.Подразделение
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеРасшифровкаПлатежа
	|	ПО
	|		СписаниеРасшифровкаПлатежа.Ссылка = СписаниеБезналичныхДенежныхСредств.Ссылка
	|	
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Проведен
	|	И СписаниеБезналичныхДенежныхСредств.ПеречислениеВБюджет
	|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СписаниеБезналичныхДенежныхСредств.Контрагент = &Контрагент
	|	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеБезналичныхДенежныхСредств.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Объект.ПеречислениеВБюджет = Истина;
		
		Если ЗначениеЗаполнено(ИсключаяРеквизиты) Тогда
			ИсключаяРеквизиты = ИсключаяРеквизиты + ", СтатьяРасходов, АналитикаРасходов, Подразделение";
		Иначе
			ИсключаяРеквизиты = "СтатьяРасходов, АналитикаРасходов, Подразделение";
		КонецЕсли;
		
		РеквизитыПлатежа = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПлатежа,, ИсключаяРеквизиты);

		//++ НЕ УТ
		Объект.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.КопияНастройкиСчетовУчета(РеквизитыПлатежа.НастройкаСчетовУчета);
		//-- НЕ УТ
		
		Если Не Объект.РасшифровкаПлатежа.Количество() Тогда
			Объект.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0], РеквизитыПлатежа,
				"СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов, Подразделение");
		КонецЕсли;
		
		Если Не СтрНайти(ИсключаяРеквизиты, "СтатьяДвиженияДенежныхСредств") Тогда
			ЗаполнитьЗначенияСвойств(Объект.РасшифровкаПлатежа[0], РеквизитыПлатежа, "СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		
		//++ НЕ УТ
		Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			Объект.РасшифровкаПлатежа[0]["НастройкаСчетовУчета"] = НастройкаСчетовУчетаСервер.КопияНастройкиСчетовУчета(РеквизитыПлатежа.НастройкаСчетовУчета);
		КонецЕсли;
		//-- НЕ УТ
		
		Возврат РеквизитыПлатежа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДействуетФедеральныйЗакон345ФЗ(Период) Экспорт
	
	// Федеральный закон от 2 декабря 2013 г. N 345-ФЗ "О внесении изменения в статью 855 части второй Гражданского кодекса
	// Российской Федерации". Уточнена очередность списания денежных средств со счетов.
	
	ДатаВступленияВСилу = '20131214';
	
	Возврат Период >= ДатаВступленияВСилу Или (Период = '00010101' И ТекущаяДатаСеанса() >= ДатаВступленияВСилу);
	
КонецФункции

// Функция получает реквизиты документа для обмена с конфигурацией "Бухгалтерия предприятия".
//
// Параметры:
//	ДокументСсылка - ДокументСсылка - Документ, для которого необходимо получить реквизиты.
//
// Возвращаемое значение:
//	Структура - Структура реквизитов документа.
//
Функция РеквизитыДокументаДляОбменаСБухгалтерией(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.КорреспондирующийСчет <> """"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.СтатьяРасходов.КорреспондирующийСчет КАК КорреспондирующийСчет,
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СтатьяРасходов.КорреспондирующийСчет <> """"
	|	И ДанныеДокумента.Ссылка.ХозяйственнаяОперация =
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы)
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	Иначе
		КорреспондирующийСчет = "";
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		КорреспондирующийСчет = Выборка.КорреспондирующийСчет;
		СтатьяРасходов = Выборка.СтатьяРасходов;
	Иначе
		СтатьяРасходов = Неопределено;
	КонецЕсли;
	
	ВидОперации = "ПрочееСписание";
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы Тогда
		
		Если СтрНайти(КорреспондирующийСчет, "70") <> 0 Тогда
			ВидОперации = "ПеречислениеЗП";	
		КонецЕсли;
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		Если СтрНайти(КорреспондирующийСчет, "66") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "67") <> 0 Тогда
			ВидОперации = "РасчетыПоКредитамИЗаймам";
			
		ИначеЕсли СтрНайти(КорреспондирующийСчет, "76") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "60") <> 0
		 ИЛИ СтрНайти(КорреспондирующийСчет, "62") <> 0 Тогда
			ВидОперации = "ПрочиеРасчетыСКонтрагентами";
			
		ИначеЕсли СтрНайти(КорреспондирующийСчет, "70") <> 0 Тогда
			ВидОперации = "ПеречислениеЗП";	
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ВидОперации, Счет, СтатьяРасходов",
		ВидОперации,
		КорреспондирующийСчет,
		СтатьяРасходов);
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	Объект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - данные объекта.
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция.
//	МассивВсехРеквизитов - Массив из Строка - Массив всех имен реквизитов, зависимых от хозяйственной операции.
//	МассивРеквизитовОперации - Массив из Строка - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации)
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ВидПеречисленияВБюджет");
	МассивВсехРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ИдентификаторПлатежа");
	МассивВсехРеквизитов.Добавить("КодБК");
	МассивВсехРеквизитов.Добавить("КодОКАТО");
	МассивВсехРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ПеречислениеВБюджет");
	МассивВсехРеквизитов.Добавить("ПлатежиПо275ФЗ");
	МассивВсехРеквизитов.Добавить("ПоказательДаты");
	МассивВсехРеквизитов.Добавить("ПоказательНомера");
	МассивВсехРеквизитов.Добавить("ПоказательОснования");
	МассивВсехРеквизитов.Добавить("ПоказательПериода");
	МассивВсехРеквизитов.Добавить("ПоказательТипа");
	МассивВсехРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	МассивВсехРеквизитов.Добавить("СтатусСоставителя");
	МассивВсехРеквизитов.Добавить("ТипНалога");
	МассивВсехРеквизитов.Добавить("ИННПлательщика");
	МассивВсехРеквизитов.Добавить("КПППлательщика");
	МассивВсехРеквизитов.Добавить("ТекстПлательщика");
	МассивВсехРеквизитов.Добавить("НомерДоговораСБанком");
	МассивВсехРеквизитов.Добавить("ДатаДоговораСБанком");
	МассивВсехРеквизитов.Добавить("ОтделениеБанка");
	МассивВсехРеквизитов.Добавить("ФилиалОтделенияБанка");
	МассивВсехРеквизитов.Добавить("КодировкаФайла");
	МассивВсехРеквизитов.Добавить("СтатьяЦелевыхСредств");
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
		МассивРеквизитовОперации.Добавить("НомерДоговораСБанком");
		МассивРеквизитовОперации.Добавить("ДатаДоговораСБанком");
		МассивРеквизитовОперации.Добавить("ОтделениеБанка");
		МассивРеквизитовОперации.Добавить("ФилиалОтделенияБанка");
		МассивРеквизитовОперации.Добавить("КодировкаФайла");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РегистрацияВНалоговомОргане");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		МассивРеквизитовОперации.Добавить("ТипНалога");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//++ НЕ УТ
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
		КонецЕсли;
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		Иначе
			МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		Иначе
			МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		Иначе
			МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	//-- НЕ УТ
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
	КонецЕсли;
	
	ДопускаетсяПеречислениеВБюджет =
		(ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет().Найти(ХозяйственнаяОперация) <> Неопределено);
	
	Если ДопускаетсяПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ПеречислениеВБюджет");
	КонецЕсли;
	
	Если ДопускаетсяПеречислениеВБюджет И (ПеречислениеВБюджет = Неопределено Или ПеречислениеВБюджет) Тогда
		МассивРеквизитовОперации.Добавить("ВидПеречисленияВБюджет");
		МассивРеквизитовОперации.Добавить("КодБК");
		МассивРеквизитовОперации.Добавить("КодОКАТО");
		МассивРеквизитовОперации.Добавить("ПоказательДаты");
		МассивРеквизитовОперации.Добавить("ПоказательНомера");
		МассивРеквизитовОперации.Добавить("ПоказательОснования");
		МассивРеквизитовОперации.Добавить("ПоказательПериода");
		МассивРеквизитовОперации.Добавить("ПоказательТипа");
		МассивРеквизитовОперации.Добавить("СтатусСоставителя");
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

Процедура ПроверитьВедомостиНаВыплатуЗарплаты(Объект, ФлагОбменСБанками, ОшибкиЗаполнения, Отказ)
	
	Если НЕ ИспользуютсяВедомостиПриПеречислении(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = Новый Массив;
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Ведомость) Тогда
			МассивВедомостей.Добавить(СтрокаРасшифровки.Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = МассивВедомостей.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
	Если Не КоличествоСтрок = МассивВедомостей.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Одна и та же ведомость не может быть указана несколько раз';
							|en = 'You cannot specify the same paysheet several times'");
		Если ФлагОбменСБанками Тогда
			ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, "РасшифровкаПлатежа",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("МассивВедомостей", МассивВедомостей);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("ИсключитьДокументОплаты", Объект.Ссылка);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		СтруктураПараметров.Вставить("Работник", Объект.ПодотчетноеЛицо);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		СтруктураПараметров.Вставить("ТипНалога", Объект.ТипНалога);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнтеграцияБЗК.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	ДанныеВедомостей = ИнтеграцияБЗК.ДанныеВедомостей(СтруктураПараметров, МенеджерВременныхТаблиц);
	РеквизитыШапки = ДанныеВедомостей.РеквизитыШапки;
	
	Если РеквизитыШапки = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
							|en = 'Cannot execute this command for the specified object.'");
		Если ФлагОбменСБанками Тогда
			ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, "РасшифровкаПлатежа",, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = ДанныеВедомостей.МассивОшибок[0].Текст;
		Если ФлагОбменСБанками Тогда
			ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, "РасшифровкаПлатежа", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("РасшифровкаПлатежа",
		Объект.РасшифровкаПлатежа.Выгрузить(, "Ведомость, Сумма, НомерСтроки"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Ведомость КАК Ведомость,
	|	Таблица.Сумма КАК СуммаПлатежа
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК Таблица";
	
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаПоВедомости
		|ПОМЕСТИТЬ ИтогиВедомостей
		|ИЗ
		|	ВТСостояниеВыплатыПоВедомостям КАК ДанныеВедомостей
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	РасшифровкаПлатежа.Ведомость КАК Ведомость,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомости, 0) КАК СуммаПоВедомости,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаОплаты, 0) КАК СуммаОплаты
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиВедомостей КАК ИтогиВедомостей
		|		ПО РасшифровкаПлатежа.Ведомость = ИтогиВедомостей.Ведомость";
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
			Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		Иначе
			Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане",
				ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, Объект.ДатаПроведенияБанком));
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаПоВедомости,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаПоВедомостиВНО,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.ОшибкаПеречисления
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ОшибкаЗачисления
		|ПОМЕСТИТЬ ИтогиВедомостей
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	РасшифровкаПлатежа.Ведомость КАК Ведомость,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомости, 0) КАК СуммаПоВедомости,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомостиВНО, 0) КАК СуммаПоВедомостиВНО,
		|	ЕСТЬNULL(ИтогиВедомостей.ОшибкаЗачисления, 0) КАК ОшибкаЗачисления
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиВедомостей КАК ИтогиВедомостей
		|		ПО РасшифровкаПлатежа.Ведомость = ИтогиВедомостей.Ведомость";
		
	КонецЕсли;
	
	// Для блокирующих ошибок Пометка = Истина
	СписокОшибок = Новый СписокЗначений;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Выборка.НомерСтроки, "Ведомость");
		
		Если Выборка.СуммаОплаты = Выборка.СуммаПоВедомости Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 уже зарегистрированы выплаты';
					|en = 'Payments by the document %1 are already registered'"), Выборка.Ведомость);
			СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
			Продолжить;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			
			ЕстьОшибкиЗачисления = Выборка.ОшибкаЗачисления <> 0;
			Если Выборка.СуммаПлатежа = Выборка.СуммаПоВедомостиВНО - Выборка.ОшибкаЗачисления
				Или Выборка.СуммаПлатежа = Выборка.СуммаПоВедомостиВНО Тогда
				
				Если ЕстьОшибкиЗачисления И Выборка.СуммаПлатежа = Выборка.СуммаПоВедомостиВНО Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По ведомости %1 зарегистрированы ошибки при зачислении.
								|Сумма налога может быть уменьшена на сумму не зачисленных доходов: %2';
								|en = 'Errors of assignment are registered for the paysheet %1.
								|The tax amount may be decreased at the amount of non-assigned income:%2'"),
						Выборка.Ведомость, Выборка.ОшибкаЗачисления);
					СписокОшибок.Добавить(ИмяПоля, ТекстСообщения);
				КонецЕсли;
				
			ИначеЕсли Выборка.СуммаПлатежа = Выборка.СуммаПоВедомости - Выборка.ОшибкаЗачисления
					Или Выборка.СуммаПлатежа = Выборка.СуммаПоВедомости Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Регистрация в налоговом органе платежного документа отличается от данных ведомости %1.';
						|en = 'Registration of the payment document with a tax authority is different from the paysheet data %1.'"),
					Выборка.Ведомость);
				СписокОшибок.Добавить("", ТекстСообщения);
				
				Если ЕстьОшибкиЗачисления И Выборка.СуммаПлатежа = Выборка.СуммаПоВедомости Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По ведомости %1 зарегистрированы ошибки при зачислении.
								|Сумма налога может быть уменьшена на сумму не зачисленных доходов: %2';
								|en = 'Errors of assignment are registered for the paysheet %1.
								|The tax amount may be decreased at the amount of non-assigned income:%2'"),
						Выборка.Ведомость, Выборка.ОшибкаЗачисления);
					СписокОшибок.Добавить(ИмяПоля, ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сумма платежа не соответствует ведомости %1';
						|en = 'The payment amount does not match the paysheet %1'"), Выборка.Ведомость);
				СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.СуммаПлатежа <> Выборка.СуммаПоВедомости Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сумма платежа не соответствует ведомости %1';
					|en = 'The payment amount does not match the paysheet %1'"), Выборка.Ведомость);
			СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФлагОбменСБанками Тогда
		Для Каждого Ошибка Из СписокОшибок Цикл
			ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Ошибка.Представление);
		КонецЦикла;
	Иначе
		Для Каждого Ошибка Из СписокОшибок Цикл
			Если Ошибка.Пометка Тогда
				ОбщегоНазначения.СообщитьПользователю(Ошибка.Представление, Объект, Ошибка.Значение,, Отказ);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(Ошибка.Представление, Объект, Ошибка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуютсяВедомостиПриПеречислении(Объект)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДенежныеСредстваСервер.ОперацияПоЗарплате(Объект.ХозяйственнаяОперация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ ИЛИ Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения)
		И Объект.НДФЛПоВедомостям Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьЗаполнениеДоговоровГОЗ(Объект, РасшифровкаБезРазбиения, Отказ)
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		Возврат;
	КонецЕсли;
	
	ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт");
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если РасшифровкаБезРазбиения Тогда
			ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ОбъектРасчетов";
			КлючДанных = Неопределено;
		Иначе
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровки.НомерСтроки, "ОбъектРасчетов");
			КлючДанных = Объект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
			
			ОбъектДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ОбъектРасчетов, "Объект");
			
			Если ТипЗнч(ОбъектДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ПроверяемыйДоговор = ОбъектДоговор;
			Иначе
				ПроверяемыйДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ОбъектРасчетов, "Договор");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПроверяемыйДоговор) Тогда
				Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан договор с поставщиком / исполнителем.';
							|en = 'When payments are made out of SDO funds, a contract with supplier / contractor is to be specified.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, ИмяПоля,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ПроверитьИзменениеТипаПлатежногоДокумента(Объект)
	
	Если Не Объект.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ТипПлатежногоДокумента <> Объект.ТипПлатежногоДокумента Тогда
				Объект.Номер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуВозвратовНеперечисленныхДенежныхСредств(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Результат
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Поступления
	|ГДЕ
	|	Поступления.Проведен
	|	И Поступления.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС)
	|	И Поступления.ДокументВыдачи = &Списание";
	
	Запрос.УстановитьПараметр("Списание", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'По документу уже введено поступление денежных средств с операцией ""Возврат неперечисленной зарплаты""';
								|en = 'Inpayment with the ""Unremitted salary return"" transaction is already entered for the document'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	//++ НЕ УТ
	НастройкиСчетовУчета          = ОбщегоНазначения.ВыгрузитьКолонку(Объект.РасшифровкаПлатежа, "НастройкаСчетовУчета", Истина);
	НастройкиСчетовУчетаСубконто3 = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НастройкиСчетовУчета, "Субконто3");
	
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		СтрокаСчетаФактуры = СчетаФактуры.Добавить();
		СтрокаСчетаФактуры.СчетФактура = НастройкиСчетовУчетаСубконто3.Получить(СтрокаТЧ.НастройкаСчетовУчета);
		СтрокаСчетаФактуры.СуммаОплаты = СтрокаТЧ.Сумма;
	КонецЦикла;
	//-- НЕ УТ
	Если СчетаФактуры.Количество() = 0 Тогда
		СтрокаСчетаФактуры = СчетаФактуры.Добавить();
		СтрокаСчетаФактуры.СчетФактура = Объект.ДокументОснование;
		СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	КонецЕсли;
	
	РеквизитыДокументаОплаты = Новый Структура();
	РеквизитыДокументаОплаты.Вставить("ДатаПеречисленияВБюджет", Объект.ДатаПроведенияБанком);
	РеквизитыДокументаОплаты.Вставить("НомерДокумента",          Объект.НомерВходящегоДокумента);
	РеквизитыДокументаОплаты.Вставить("ДатаДокумента",           Объект.ДатаВходящегоДокумента);
	РеквизитыДокументаОплаты.Вставить("ТипНалога",               Объект.ТипНалога);
	
	УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, Объект.Ссылка, РеквизитыДокументаОплаты, Проведен);
	
КонецПроцедуры

//++ НЕ УТ

// Возвращает данные договора по зарплатному проекту.
// 
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - документ, по которому необходимо определить
// договор обмена с банком.
// 
// Возвращаемое значение:
//  Структура - Данные обмена с банком по зарплатному проекту:
// * НомерДоговораСБанком - Строка - номер договора с банком.
// * ДатаДоговораСБанком - Дата - дата договора с банком.
// * ОтделениеБанка - Строка - отделение банка.
// * ФилиалОтделенияБанка - Строка - филиал отделения банка.
// * КодировкаФайла - Строка - кодировка файла обмена.
//
Функция ДанныеОбменаСБанкомПоЗарплатномуПроекту(БанковскийСчет) Экспорт

	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("НомерДоговораСБанком", "");
	РеквизитыДоговора.Вставить("ДатаДоговораСБанком", Дата('00010101'));
	РеквизитыДоговора.Вставить("ОтделениеБанка", "");
	РеквизитыДоговора.Вставить("ФилиалОтделенияБанка", "");
	РеквизитыДоговора.Вставить("КодировкаФайла", "");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		ДанныеБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Владелец, Банк");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговораСБанком,
			|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговораСБанком,
			|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
			|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
			|	ПРЕДСТАВЛЕНИЕ(ЗарплатныеПроекты.КодировкаФайла) КАК КодировкаФайла
			|ИЗ
			|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
			|ГДЕ
			|	ЗарплатныеПроекты.Организация = &Организация
			|	И ЗарплатныеПроекты.Банк = &Банк
			|	И ЗарплатныеПроекты.ИспользоватьЭлектронныйДокументооборотСБанком
			|	И НЕ ЗарплатныеПроекты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Банк", ДанныеБанковскогоСчета.Банк);
		Запрос.УстановитьПараметр("Организация", ДанныеБанковскогоСчета.Владелец);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(РеквизитыДоговора, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыДоговора;

КонецФункции

//-- НЕ УТ

// Запускает процедуру сбора данных по документам, указанным в параметре, и процедуру создания файла реестра для
// зачисления банком денежных средств на каждый документ.
// 
// Параметры:
//  СтруктураПараметров - Структура:
//    * МассивДокументов - Массив из ДокументСсылка.СписаниеБезналичныхДенежныхСредств - список документов, для которых выполняется выгрузка файла.
//    * УникальныйИдентификаторФормы - Строка - идентификатор формы документа, из которого выполняется формирование файла
//    * МассивОписанийФайлов - Массив из Неопределено - пустой массив для заполнения структурой будущего файла
//
Процедура ВыгрузитьФайлыОбменаСБанком(СтруктураПараметров) Экспорт

	Если СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
	
		ДанныеДокументов = ДанныеВыгрузкиРеестраЗачисленияДенежныхСредств(СтруктураПараметров.МассивДокументов);
		СтруктураПараметров.Вставить("ВидОперации", "Зачисление");
		
	Иначе
		
		ДанныеДокументов = РеестрСамозанятыхПоДокументам(СтруктураПараметров.МассивДокументов);
		СтруктураПараметров.Вставить("ВидОперации", "ОплатаСамозанятому");
		
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ДанныеДокументов Цикл
		ОбменСБанкамиУТ.СоздатьФайлРеестраОбменаСБанком(СтрокаДанных.Ключ,
														СтрокаДанных.Значение,
														СтруктураПараметров);
	КонецЦикла;

КонецПроцедуры

// Возвращает собранные данные для списка переданных документов.
// 
// Параметры:
//  КоллекцияДокументов - Массив из ДокументСсылка.СписаниеБезналичныхДенежныхСредств - документы, по которым необходимо
// получить данные для выгрузки.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - содержит структуру данных отдельно по документам:
//  * Ключ - ДокументСсылка.СписаниеБезналичныхДенежныхСредств - документ.
//  * Значение - см. ДанныеВыгрузкиОсновныеРеквизиты.
//
Функция ДанныеВыгрузкиРеестраЗачисленияДенежныхСредств(КоллекцияДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ДатаФормирования КАК ДатаФормирования,
		|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Документ,
		|	СписаниеБезналичныхДенежныхСредств.Номер КАК Номер,
		|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
		|	СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК НомерРеестра,
		|	СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента КАК ДатаРеестра,
		|	СписаниеБезналичныхДенежныхСредств.Организация КАК Организация,
		|	СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников.НомерСтроки КАК НомерСтроки,
		|	СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников.ЛицевойСчет КАК ЛицевойСчет,
		|	СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников.Сумма КАК Сумма,
		|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет КАК БанковскийСчет,
		|	СписаниеБезналичныхДенежныхСредств.НомерДоговораСБанком КАК НомерДоговораСБанком,
		|	СписаниеБезналичныхДенежныхСредств.ДатаДоговораСБанком КАК ДатаДоговораСБанком,
		|	СписаниеБезналичныхДенежныхСредств.Валюта КАК Валюта,
		|	СписаниеБезналичныхДенежныхСредств.ОтделениеБанка КАК ОтделениеБанка,
		|	СписаниеБезналичныхДенежныхСредств.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
		|	СписаниеБезналичныхДенежныхСредств.КодировкаФайла КАК КодировкаФайла,
		|	СписаниеБезналичныхДенежныхСредств.КодВидаДохода КАК КодВидаДохода
		|ПОМЕСТИТЬ ТаблицаОсновныхДанных
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.ЛицевыеСчетаСотрудников КАК СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников
		|		ПО СписаниеБезналичныхДенежныхСредств.Ссылка = СписаниеБезналичныхДенежныхСредствЛицевыеСчетаСотрудников.Ссылка
		|ГДЕ
		|	СписаниеБезналичныхДенежныхСредств.Ссылка В(&Документы)
		|	И СписаниеБезналичныхДенежныхСредств.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Документ КАК Документ,
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ФИОФизическихЛиц.Период) КАК Период
		|ПОМЕСТИТЬ ПоследнееИзменениеФИОФизЛицПоДокументам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ТаблицаОсновныхДанных.Документ КАК Документ,
		|		ТаблицаОсновныхДанных.Дата КАК Дата,
		|		ТаблицаОсновныхДанных.ФизическоеЛицо КАК ФизическоеЛицо
		|	ИЗ
		|		ТаблицаОсновныхДанных КАК ТаблицаОсновныхДанных) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|		ПО ВложенныйЗапрос.ФизическоеЛицо = ФИОФизическихЛиц.ФизическоеЛицо
		|			И ВложенныйЗапрос.Дата >= ФИОФизическихЛиц.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Документ,
		|	ВложенныйЗапрос.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследнееИзменениеФИОФизЛицПоДокументам.Документ КАК Документ,
		|	ПоследнееИзменениеФИОФизЛицПоДокументам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФИОФизическихЛиц.Фамилия КАК Фамилия,
		|	ФИОФизическихЛиц.Имя КАК Имя,
		|	ФИОФизическихЛиц.Отчество КАК Отчество
		|ПОМЕСТИТЬ ФИОФизЛицРаздельно
		|ИЗ
		|	ПоследнееИзменениеФИОФизЛицПоДокументам КАК ПоследнееИзменениеФИОФизЛицПоДокументам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|		ПО ПоследнееИзменениеФИОФизЛицПоДокументам.ФизическоеЛицо = ФИОФизическихЛиц.ФизическоеЛицо
		|			И ПоследнееИзменениеФИОФизЛицПоДокументам.Период = ФИОФизическихЛиц.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОсновныхДанных.Документ КАК Документ,
		|	ТаблицаОсновныхДанных.Организация КАК Организация,
		|	ТаблицаОсновныхДанных.Номер КАК НомерДокумента,
		|	ТаблицаОсновныхДанных.Дата КАК ДатаДокумента,
		|	ТаблицаОсновныхДанных.НомерРеестра КАК НомерРеестра,
		|	ТаблицаОсновныхДанных.ДатаФормирования КАК ДатаФормирования,
		|	ТаблицаОсновныхДанных.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаОсновныхДанных.Сумма КАК Сумма,
		|	ЕСТЬNULL(ФИОФизЛицРаздельно.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизЛицРаздельно.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизЛицРаздельно.Отчество, """") КАК Отчество,
		|	ВЫБОР
		|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК НаименованиеОрганизации,
		|	Организации.ИНН КАК ИНН,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерРасчетногоСчетаОрганизации,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.БИКБанка = """"
		|			ТОГДА БанковскиеСчетаОрганизаций.Банк.Код
		|		ИНАЧЕ БанковскиеСчетаОрганизаций.БИКБанка
		|	КОНЕЦ КАК БИК,
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерЛицевогоСчета,
		|	БанковскиеСчетаОрганизаций.ИспользоватьОбменСБанком КАК ИспользоватьОбменСБанком,
		|	БанковскиеСчетаОрганизаций.ФорматОбмена КАК ФорматОбмена,
		|	1 КАК КоличествоЗаписей,
		|	ТаблицаОсновныхДанных.НомерДоговораСБанком КАК НомерДоговораСБанком,
		|	ТаблицаОсновныхДанных.ДатаДоговораСБанком КАК ДатаДоговораСБанком,
		|	ТаблицаОсновныхДанных.Валюта КАК Валюта,
		|	ТаблицаОсновныхДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОсновныхДанных.ДатаРеестра КАК ДатаРеестра,
		|	ТаблицаОсновныхДанных.ОтделениеБанка КАК ОтделениеБанка,
		|	ТаблицаОсновныхДанных.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
		|	ТаблицаОсновныхДанных.КодировкаФайла КАК КодировкаФайла,
		|	ТаблицаОсновныхДанных.КодВидаДохода КАК КодВидаДохода
		|ПОМЕСТИТЬ ИтоговаяТаблица
		|ИЗ
		|	ТаблицаОсновныхДанных КАК ТаблицаОсновныхДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ФИОФизЛицРаздельно КАК ФИОФизЛицРаздельно
		|		ПО ТаблицаОсновныхДанных.Документ = ФИОФизЛицРаздельно.Документ
		|			И ТаблицаОсновныхДанных.ФизическоеЛицо = ФИОФизЛицРаздельно.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|		ПО ТаблицаОсновныхДанных.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ТаблицаОсновныхДанных.Организация = Организации.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО ТаблицаОсновныхДанных.ЛицевойСчет = БанковскиеСчетаКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.Документ КАК Документ,
		|	ИтоговаяТаблица.Организация КАК Организация,
		|	ИтоговаяТаблица.НомерДокумента КАК НомерДокумента,
		|	ИтоговаяТаблица.ДатаДокумента КАК ДатаДокумента,
		|	ИтоговаяТаблица.НомерРеестра КАК НомерРеестра,
		|	ИтоговаяТаблица.ДатаФормирования КАК ДатаФормирования,
		|	СУММА(ИтоговаяТаблица.Сумма) КАК СуммаИтого,
		|	ИтоговаяТаблица.НаименованиеОрганизации КАК НаименованиеОрганизации,
		|	ИтоговаяТаблица.ИНН КАК ИНН,
		|	ИтоговаяТаблица.НомерРасчетногоСчетаОрганизации КАК РасчетныйСчетОрганизации,
		|	ИтоговаяТаблица.БИК КАК БИК,
		|	ИтоговаяТаблица.ИспользоватьОбменСБанком КАК ИспользоватьЭлектронныйДокументооборотСБанком,
		|	ИтоговаяТаблица.ФорматОбмена КАК ФорматОбмена,
		|	КОЛИЧЕСТВО(ИтоговаяТаблица.КоличествоЗаписей) КАК КоличествоЗаписей,
		|	ИтоговаяТаблица.НомерДоговораСБанком КАК НомерДоговора,
		|	ИтоговаяТаблица.ДатаДоговораСБанком КАК ДатаДоговора,
		|	ИтоговаяТаблица.ДатаРеестра КАК ДатаРеестра,
		|	ИтоговаяТаблица.ОтделениеБанка КАК ОтделениеБанка,
		|	ИтоговаяТаблица.КодировкаФайла КАК КодировкаФайла,
		|	ИтоговаяТаблица.КодВидаДохода КАК КодВидаДохода
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговаяТаблица.Документ,
		|	ИтоговаяТаблица.Организация,
		|	ИтоговаяТаблица.НомерДокумента,
		|	ИтоговаяТаблица.ДатаДокумента,
		|	ИтоговаяТаблица.НомерРеестра,
		|	ИтоговаяТаблица.ДатаФормирования,
		|	ИтоговаяТаблица.НаименованиеОрганизации,
		|	ИтоговаяТаблица.ИНН,
		|	ИтоговаяТаблица.НомерРасчетногоСчетаОрганизации,
		|	ИтоговаяТаблица.БИК,
		|	ИтоговаяТаблица.ИспользоватьОбменСБанком,
		|	ИтоговаяТаблица.ФорматОбмена,
		|	ИтоговаяТаблица.НомерДоговораСБанком,
		|	ИтоговаяТаблица.ДатаДоговораСБанком,
		|	ИтоговаяТаблица.ДатаРеестра,
		|	ИтоговаяТаблица.ОтделениеБанка,
		|	ИтоговаяТаблица.КодировкаФайла,
		|	ИтоговаяТаблица.КодВидаДохода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговаяТаблица.Документ КАК Документ,
		|	ИтоговаяТаблица.НомерСтроки КАК Нпп,
		|	ИтоговаяТаблица.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИтоговаяТаблица.Фамилия КАК Фамилия,
		|	ИтоговаяТаблица.Имя КАК Имя,
		|	ИтоговаяТаблица.Отчество КАК Отчество,
		|	ИтоговаяТаблица.Сумма КАК Сумма,
		|	ИтоговаяТаблица.НомерЛицевогоСчета КАК ЛицевойСчет,
		|	ИтоговаяТаблица.Валюта.Код КАК КодВалюты,
		|	ИтоговаяТаблица.ОтделениеБанка КАК ОтделениеБанка,
		|	ИтоговаяТаблица.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка
		|
		|ИЗ
		|	ИтоговаяТаблица КАК ИтоговаяТаблица
		|ИТОГИ ПО
		|	Документ";
	
	Запрос.УстановитьПараметр("ДатаФормирования", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Документы", КоллекцияДокументов);
	
	ДанныеДокументов = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаДокументов = МассивЗапросов[МассивЗапросов.ВГраница() - 1].Выгрузить();
	ВыборкаПоДокументам = МассивЗапросов[МассивЗапросов.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СписокДокументов = ТаблицаДокументов.Скопировать(, "Документ, Организация, БИК, КодировкаФайла");
	КодировкаПоДокументам = ЗаполнитьКодировкуРеестраЗачисленияДенежныхСредств(СписокДокументов);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ДанныеДокумента = ДанныеВыгрузкиОсновныеРеквизиты();
		
		СтрокаПоДокументу = ТаблицаДокументов.Найти(ВыборкаПоДокументам.Документ, "Документ");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, СтрокаПоДокументу);
		ДанныеДокумента.ИдПервичногоДокумента = СтрокаПоДокументу.Документ.УникальныйИдентификатор();
		ДанныеДокумента.ПлатежноеПоручение = Прав(СтрокаПоДокументу.НомерРеестра, 6);
		ДанныеДокумента.ДатаПлатежногоПоручения = СтрокаПоДокументу.ДатаРеестра;
		
		ДанныеДокумента.ИмяФайла = СтрШаблон("%1%2z.xml",
			СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ДанныеДокумента.ОтделениеБанка, 4),
			Прав(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ДанныеДокумента.НомерДокумента, 3), 3));
		
		ВыборкаПоФизическимЛицам = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаПоФизическимЛицам.Следующий() Цикл
			
			ДанныеСтроки = ДанныеВыгрузкиСписокФизическихЛиц();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВыборкаПоФизическимЛицам);
			
			Если СтрокаПоДокументу.ИспользоватьЭлектронныйДокументооборотСБанком 
				И СтрДлина(ВыборкаПоФизическимЛицам.ЛицевойСчет) <> 20 Тогда
				
				СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В строке №%1 у сотрудника %2 лицевой счет не соответствует формату в 20 цифр.
												     |Возможно банк не поддерживает такой формат.';
												     |en = 'In line #%1, the personal account of the %2 employee does not match the 20-digit format.
												     |The bank may not support this format.'"), 
										ВыборкаПоФизическимЛицам.Нпп,
										ВыборкаПоФизическимЛицам.ФизическоеЛицо);
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, ДанныеДокумента.Документ,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЛицевыеСчетаСотрудников", ВыборкаПоФизическимЛицам.Нпп, "НомерЛицевогоСчета"));
				
			КонецЕсли;
			
			ДанныеДокумента.Сотрудник.Добавить(ДанныеСтроки);
			
		КонецЦикла;
		
		ДанныеДокумента.КодировкаФайла = КодировкаПоДокументам.Получить(ДанныеДокумента.Документ);
		
		ДанныеДокументов.Вставить(ДанныеДокумента.Документ, ДанныеДокумента);
		
	КонецЦикла;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеДокументов;

КонецФункции

// Возвращает структуру документа, используемую для формирования файла обмена.
// 
// Возвращаемое значение:
//  Структура - Данные выгрузки основные реквизиты:
// * Документ - ДокументСсылка.СписаниеБезналичныхДенежныхСредств - пустая ссылка на документ
// * НомерДокумента - Строка - 
// * ДатаДокумента - Дата - 
// * НомерРеестра - Строка - 
// * ДатаРеестра - Дата - 
// * НаименованиеОрганизации - Строка - 
// * ИНН - Строка - 
// * Организация - СправочникСсылка.Организации - пустая ссылка на справочник
// * НомерДоговора - Строка - 
// * ДатаДоговора - Дата - 
// * РасчетныйСчетОрганизации - Строка - 
// * ИспользоватьЭлектронныйДокументооборотСБанком - Булево - 
// * БИК - Строка - 
// * ВидЗачисления - Строка - 
// * КодВидаДохода - Строка - 
// * КоличествоЗаписей - Число - 
// * СуммаИтого - Число - 
// * ИдПервичногоДокумента - Строка - 
// * ДатаФормирования - Дата - 
// * ИмяФайла - Строка - 
// * ПлатежноеПоручение - Строка - 
// * ДатаПлатежногоПоручения - Дата - 
// * ОтделениеБанка - Строка - 
// * Сотрудник - Массив из Неопределено - пустой массив.
// * КодировкаФайла - Строка - кодировка файла обмена.
//
Функция ДанныеВыгрузкиОсновныеРеквизиты() Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Документ", Документы.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерДокумента", "");
	ДанныеЗаполнения.Вставить("ДатаДокумента", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НомерРеестра", "");
	ДанныеЗаполнения.Вставить("ДатаРеестра", Дата("00010101"));
	ДанныеЗаполнения.Вставить("НаименованиеОрганизации", "");
	ДанныеЗаполнения.Вставить("ИНН", "");
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НомерДоговора", "");
	ДанныеЗаполнения.Вставить("ДатаДоговора", Дата("00010101"));
	ДанныеЗаполнения.Вставить("РасчетныйСчетОрганизации", "");
	ДанныеЗаполнения.Вставить("ИспользоватьЭлектронныйДокументооборотСБанком", Ложь);
	ДанныеЗаполнения.Вставить("БИК", "");
	ДанныеЗаполнения.Вставить("ВидЗачисления", "07");
	ДанныеЗаполнения.Вставить("КодВидаДохода", "");
	ДанныеЗаполнения.Вставить("КоличествоЗаписей", 0);
	ДанныеЗаполнения.Вставить("СуммаИтого", 0);
	ДанныеЗаполнения.Вставить("ИдПервичногоДокумента", "");
	ДанныеЗаполнения.Вставить("ДатаФормирования", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ИмяФайла", "");
	ДанныеЗаполнения.Вставить("ПлатежноеПоручение", "");
	ДанныеЗаполнения.Вставить("ДатаПлатежногоПоручения", Дата("00010101"));
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("Сотрудник", Новый Массив);
	ДанныеЗаполнения.Вставить("КодировкаФайла", "");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Возвращает структуру строки документа, используемую для формирования файла обмена.
//
// Возвращаемое значение:
//   Структура:
//    * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - пустая ссылка на справочник
//    * Нпп - Число
//    * Фамилия - Строка
//    * Имя - Строка
//    * Отчество - Строка
//    * ЛицевойСчет - Строка
//    * Сумма - Число
//    * КодВалюты - Строка
//    * ОтделениеБанка - Строка
//    * ФилиалОтделенияБанка - Строка
//
Функция ДанныеВыгрузкиСписокФизическихЛиц() Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Нпп", 0);
	ДанныеЗаполнения.Вставить("Фамилия", "");
	ДанныеЗаполнения.Вставить("Имя", "");
	ДанныеЗаполнения.Вставить("Отчество", "");
	ДанныеЗаполнения.Вставить("ЛицевойСчет", "");
	ДанныеЗаполнения.Вставить("Сумма", 0);
	ДанныеЗаполнения.Вставить("КодВалюты", "");
	ДанныеЗаполнения.Вставить("ОтделениеБанка", "");
	ДанныеЗаполнения.Вставить("ФилиалОтделенияБанка", "");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция РеестрСамозанятыхПоДокументам(СписокДокументов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
		|	Контрагенты.НаименованиеПолное КАК Контрагент,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаКонтрагентов.БанкДляРасчетов = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)
		|				И БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов = """"
		|			ТОГДА ВЫБОР
		|					КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка
		|						ТОГДА БанковскиеСчетаКонтрагентов.БИКБанка
		|					ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Код
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанкаДляРасчетов
		|					ТОГДА БанковскиеСчетаКонтрагентов.БИКБанкаДляРасчетов
		|				ИНАЧЕ БанковскиеСчетаКонтрагентов.БанкДляРасчетов.Код
		|			КОНЕЦ
		|	КОНЕЦ КАК БИКБанка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаКонтрагентов.ИННКорреспондента = """"
		|			ТОГДА РеестрСамозанятых.Контрагент.ИНН
		|		ИНАЧЕ БанковскиеСчетаКонтрагентов.ИННКорреспондента
		|	КОНЕЦ КАК ИНН,
		|	БанковскиеСчетаКонтрагентов.ТекстНазначения КАК НазначениеПлатежа,
		|	РеестрСамозанятых.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА РеестрСамозанятых.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ""1""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КодВидаДохода,
		|	РеестрСамозанятых.НомерСтроки КАК Номер,
		|	ДанныеДокумента.Номер КАК НомерДокумента,
		|	ДанныеДокумента.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств.БанковскиеСчетаСпискаКонтрагентов КАК РеестрСамозанятых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ПО РеестрСамозанятых.Ссылка = ДанныеДокумента.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО РеестрСамозанятых.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО РеестрСамозанятых.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В(&Ссылки)
		|	И ДанныеДокумента.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	РеестрСамозанятых.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылки", СписокДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РеестрыПоДокументам = Новый Соответствие;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Реестр = НовыйРеестр();
		
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ПустаяСтрока(СокрЛП(Выборка.НомерСчета)) Тогда
				
				СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В строке №%1 не заполнен номер счета самозанятого %2.';
													|en = 'Fill an account number of self-employed person %2 in line #%1'"), 
										Выборка.Номер,
										Выборка.Контрагент);
				ОбщегоНазначения.СообщитьПользователю(
					СообщениеОбОшибке, 
					ВыборкаПоДокументам.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"БанковскиеСчетаСпискаКонтрагентов", Выборка.Номер, "БанковскийСчетКонтрагента"));
				
			КонецЕсли;
			
			ТекстОшибки = "";
			ПравильныйНомерСчета = ДенежныеСредстваКлиентСерверЛокализация.ПроверитьКорректностьНомераСчета(
				Выборка.НомерСчета, , ТекстОшибки);
			
			Если Не ПравильныйНомерСчета Тогда
				
				СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В строке №%1 номер счета самозанятого %2 заполнен не корректно.
													|%3';
													|en = 'Line #%1 contains an incorrect account number of self-employed person %2.
													|%3'"), 
										Выборка.Номер,
										Выборка.Контрагент,
										ТекстОшибки);
				ОбщегоНазначения.СообщитьПользователю(
					СообщениеОбОшибке, 
					ВыборкаПоДокументам.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"БанковскиеСчетаСпискаКонтрагентов", Выборка.Номер, "БанковскийСчетКонтрагента"));
				
			КонецЕсли;
			
			Сведения = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.Контрагент);
			
			НоваяСтрока = Реестр.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Сведения);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
		ИмяФайла = СтрШаблон(НСтр("ru = 'Реестр выплат самозанятым № %1 от %2';
									|en = 'Registry of payments to self-employed persons No. %1 dated %2'"), 
						ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПоДокументам.НомерДокумента, Истина, Истина), 
						Формат(ВыборкаПоДокументам.ДатаДокумента, НСтр("ru = 'ДФ=''d MMMM''';
																		|en = 'DF=''d MMMM'''")));
		
		ДанныеПоДокументу = Новый Структура;
		ДанныеПоДокументу.Вставить("ИмяФайла", ИмяФайла);
		ДанныеПоДокументу.Вставить("Реестр", Реестр);
		
		РеестрыПоДокументам.Вставить(ВыборкаПоДокументам.Ссылка, ДанныеПоДокументу);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РеестрыПоДокументам;

КонецФункции

Функция НовыйРеестр()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НомерСчета", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Сумма", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип);
	Результат.Колонки.Добавить("БИКБанка", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодВидаДохода", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НазначениеПлатежа", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;

КонецФункции

Функция ЗаполнитьКодировкуРеестраЗачисленияДенежныхСредств(ТаблицаДокументов)

	//++ НЕ УТ

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Документ КАК Документ,
		|	Таблица.Организация КАК Организация,
		|	Таблица.БИК КАК БИК,
		|	Таблица.КодировкаФайла КАК КодировкаФайла
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблица.Документ КАК Документ,
		|	ПРЕДСТАВЛЕНИЕ(ЗарплатныеПроекты.КодировкаФайла) КАК КодировкаФайла
		|ПОМЕСТИТЬ КодировкаПоЗарплатномуПроекту
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
		|		ПО ИсходнаяТаблица.Организация = ЗарплатныеПроекты.Организация
		|			И ИсходнаяТаблица.БИК = ЗарплатныеПроекты.Банк.Код
		|ГДЕ
		|	ЗарплатныеПроекты.ИспользоватьЭлектронныйДокументооборотСБанком
		|	И НЕ ЗарплатныеПроекты.ПометкаУдаления
		|	И ИсходнаяТаблица.КодировкаФайла = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходнаяТаблица.Документ КАК Документ,
		|	ВЫБОР
		|		КОГДА ИсходнаяТаблица.КодировкаФайла = """"
		|			ТОГДА КодировкаПоЗарплатномуПроекту.КодировкаФайла
		|		ИНАЧЕ ИсходнаяТаблица.КодировкаФайла
		|	КОНЕЦ КАК КодировкаФайла
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ КодировкаПоЗарплатномуПроекту КАК КодировкаПоЗарплатномуПроекту
		|		ПО ИсходнаяТаблица.Документ = КодировкаПоЗарплатномуПроекту.Документ";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	//-- НЕ УТ
	
	КодировкаПоДокументам = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		
		Если СтрокаТаблицы.КодировкаФайла = "" Тогда
			СтрокаТаблицы.КодировкаФайла = "UTF-8";
		КонецЕсли;
		
		КодировкаПоДокументам.Вставить(СтрокаТаблицы.Документ, СтрокаТаблицы.КодировкаФайла);
		
	КонецЦикла;
	
	Возврат КодировкаПоДокументам;

КонецФункции

//-- Локализация
#КонецОбласти

//++ Локализация

//++ НЕ УТ

#Область ФрагментыПроводокРеглУчета

Функция ТекстОплатаДолгаАвансаПоставщикуДругойОрганизацииМежФилиальная()
	
	Текст = "
	|ВЫБРАТЬ //// Межфилиальная оплата долга/аванса поставщику/другой организации (Дт 60.01,60.02,60.21,60.22 :: Кт 51,52)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаПроведенияБанком
	|		ИЛИ Операция.Исправление ТОГДА
	|		Операция.Дата
	|	ИНАЧЕ
	|		КОНЕЦПЕРИОДА(Операция.ДатаПроведенияБанком, ДЕНЬ)
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл + РасчетыПоДокументам.ДолгРегл, Расчеты.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр + РасчетыПоДокументам.ДолгУпр, Расчеты.СуммаУпр) КАК СуммаУУ,
	|
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг, Расчеты.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Операция.БанковскийСчет КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		Операция.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		Операция.Валюта
	|	КОНЕЦ КАК ВалютаКт,
	|	Операция.БанковскийСчет.Подразделение КАК ПодразделениеКт,
	|	Операция.БанковскийСчет.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ВЫБОР КОГДА Операция.БанковскийСчет.ВалютаДенежныхСредств = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Расчеты.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	ВЫБОР КОГДА Операция.ПлатежСКонвертацией ТОГДА
	|		ДанныеРегистраДС.СуммаОплатыВВалютеПлатежа
	|	ИНАЧЕ
	|		ВЫБОР
	|			КОГДА НЕ ДанныеРегистраДС.СуммаПостоплатыВВалютеПлатежа ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|					ТОГДА ДанныеРегистраДС.СуммаПостоплатыВВалютеПлатежа
	|					ИНАЧЕ ДанныеРегистраДС.СуммаПредоплатыВВалютеПлатежа
	|				КОНЕЦ
	|			КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|			ТОГДА ЕСТЬNULL(РасчетыПоДокументам.Долг, Расчеты.Сумма)
	|			ИНАЧЕ ЕСТЬNULL(РасчетыПоДокументам.Предоплата, Расчеты.Сумма)
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0 И Операция.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ТОГДА ""Оплата долга другой организации""
	|		КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|		ТОГДА ""Оплата долга поставщику""
	|		КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ТОГДА ""Оплата аванса другой организации""
	|		ИНАЧЕ ""Оплата аванса поставщику""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК Операция
	|	ПО	
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК Расчеты
	|	ПО	
	|		Расчеты.Ссылка = Операция.Ссылка
	|		И Расчеты.Организация <> Операция.Организация
	|		И Расчеты.Сумма <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Расчеты.Ссылка = РасчетыПоДокументам.Ссылка
	|		И Расчеты.Контрагент = РасчетыПоДокументам.Контрагент
	|		И Расчеты.Договор = РасчетыПоДокументам.Договор
	|		И Расчеты.ГруппаФинансовогоУчета = РасчетыПоДокументам.ГруппаФинансовогоУчета
	|		И Расчеты.Подразделение = РасчетыПоДокументам.Подразделение
	|		И Расчеты.НаправлениеДеятельности = РасчетыПоДокументам.НаправлениеДеятельности
	|		И Расчеты.Валюта = РасчетыПоДокументам.Валюта
	|		И Расчеты.Организация = РасчетыПоДокументам.Организация
	|		И РасчетыПоДокументам.ОрганизацияАналитики = РасчетыПоДокументам.Организация
	|		И Расчеты.ОбъектРасчетов = РасчетыПоДокументам.ОбъектРасчетов
	|		И Расчеты.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДенежныеСредстваКонтрагент КАК ДанныеРегистраДС
	|	ПО
	|		ДанныеРегистраДС.Ссылка = Расчеты.Ссылка
	|		И ДанныеРегистраДС.Контрагент = Расчеты.Контрагент
	|		И ДанныеРегистраДС.Организация = Расчеты.Организация
	|		И ДанныеРегистраДС.Организация <> ДанныеРегистраДС.ОрганизацияАналитики
	|		И ДанныеРегистраДС.СтатьяДвиженияДенежныхСредств = Расчеты.СтатьяДвиженияДенежныхСредств
	|		И ДанныеРегистраДС.ОбъектРасчетов = Расчеты.ОбъектРасчетов
	|	
	|ГДЕ
	|	Операция.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|	И Операция.ПроведеноБанком";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

//-- Локализация

#КонецОбласти
