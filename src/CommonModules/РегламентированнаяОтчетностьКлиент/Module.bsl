////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие процедуры и функции для форм регламентированной
// отчетности.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьВБанки") Тогда
		МодульОтчетностьВБанкиСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтчетностьВБанкиСлужебныйКлиент");
		МодульОтчетностьВБанкиСлужебныйКлиент.ПослеЗапускаСистемы();
	КонецЕсли;
	
КонецПроцедуры

#Область ГрупповаяОтправка

Процедура ВернутьОшибку(Форма = Неопределено, ТекстОшибки = "") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВернутьОшибку(Форма, ТекстОшибки);
	
КонецПроцедуры

Процедура ПоказатьИВернутьОшибку(Форма = Неопределено, ТекстОшибки = "") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьИВернутьОшибку(Форма, ТекстОшибки);
	
КонецПроцедуры

Процедура СообщитьИВернутьОшибку(Форма, ТекстОшибки = "") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.СообщитьИВернутьОшибку(Форма, ТекстОшибки);
	
КонецПроцедуры

Процедура ОтборПериодНачалоВыбора(Форма, ОписаниеОповещения, СтандартнаяОбработка, ТекущаяДатаНаСервере) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяДатаСеанса = Неопределено;
	
	НачалоПериодаВыбор = Форма.НачалоПериода;
	КонецПериодаВыбор  = Форма.КонецПериода;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериодаВыбор) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаНаСервере;
		НачалоПериодаВыбор = НачалоКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КонецПериодаВыбор) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяДатаСеанса) Тогда
			ТекущаяДатаСеанса = ТекущаяДатаНаСервере;
		КонецЕсли;
		КонецПериодаВыбор = КонецКвартала(ТекущаяДатаСеанса);
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода, ВидПериода, ТолькоУказанныйПериод"
									 , НачалоПериодаВыбор, КонецПериодаВыбор, Неопределено, Форма.ТолькоУказанныйПериод);
									 
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтборВыбратьПериодЗавершение", 
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПолноеИмяФормыВыбораПериода = "Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборСтандартногоПериодаГодКвартал";
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ИмяФормыВыбораПериода(ПолноеИмяФормыВыбораПериода);
	
	ОткрытьФорму(ПолноеИмяФормыВыбораПериода, ПараметрыВыбора, , , , , ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтборВыбратьПериодЗавершение(РезультатВыбора, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура")
		ИЛИ НЕ РезультатВыбора.Свойство("НачалоПериода")
		ИЛИ НЕ РезультатВыбора.Свойство("КонецПериода") Тогда
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОписаниеОповещения, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ТолькоУказанныйПериод = ВходящийКонтекст.Форма.ТолькоУказанныйПериод;
	
	НачалоПериода = ?(ЗначениеЗаполнено(РезультатВыбора.НачалоПериода), НачалоДня(РезультатВыбора.НачалоПериода), РезультатВыбора.НачалоПериода);
	КонецПериода  = ?(ЗначениеЗаполнено(РезультатВыбора.КонецПериода),  КонецДня(РезультатВыбора.КонецПериода),  РезультатВыбора.КонецПериода);
	
	РезультатВыбора.Свойство("ТолькоУказанныйПериод", ТолькоУказанныйПериод);
	
	Если ТолькоУказанныйПериод = Неопределено Тогда
		ТолькоУказанныйПериод = Ложь;
	КонецЕсли;
	
	ПредставлениеПериодаОтчета = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП=Истина");
	ПериодОтчета = ?(ТолькоУказанныйПериод, "[ " + СокрП(ПредставлениеПериодаОтчета) + " ]", ПредставлениеПериодаОтчета);
	
	Результат = Новый Структура();
	Результат.Вставить("ПредставлениеПериодаОтчета", ПредставлениеПериодаОтчета);
	Результат.Вставить("ПериодОтчета", ПериодОтчета);
	Результат.Вставить("НачалоПериода", НачалоПериода);
	Результат.Вставить("КонецПериода", КонецПериода);
	Результат.Вставить("ТолькоУказанныйПериод", ТолькоУказанныйПериод);
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОписаниеОповещения, Результат);
	
КонецПроцедуры

Процедура ОнлайнПроверка(Форма, КонтекстЭДОКлиент, ТекущиеДанные, ЭтоОтчеты) Экспорт
	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		СообщитьИВернутьОшибку(Форма, Форма.ТекстОшибкиИнициализацииКонтекстаЭДО);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		НаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), 
			ТекущиеДанные.НаименованиеОтчета, 
			ТекущиеДанные.Наименование);
		
		Если ВыполнениеКомандыОтменено(
			Форма, 
			НаименованиеОтчета, 
			ТекущиеДанные.Организация, 
			"ОтправитьОтчет") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПроверяемыйОбъект = ?(ЭтоОтчеты, ТекущиеДанные.РегламентированныйОтчет, ТекущиеДанные.Ссылка);
		ОрганизацияПроверяемогоОбъекта = ТекущиеДанные.Организация;
		Если ЭтоОтчеты Тогда
			Представление = ТекущиеДанные.НаименованиеОтчета;
		Иначе
			Представление = ТекущиеДанные.Наименование;
		КонецЕсли;
		
		Если ТипЗнч(ПроверяемыйОбъект) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
			ОписаниеОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ПроверяемыйОбъект);
			
			Если Представление = "Движение средств по счету в банке за пределами РФ" Тогда
				Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв3" Тогда
					ПоказатьИВернутьОшибку(Форма, НСтр(
					"ru = 'Проверка в интернете формы отчета
					|в редакции постановления Правительства РФ
					|от 25.07.2015 № 761 не предусмотрена
					|законодательством. Форма сдается в бумажном виде';
					|en = 'Online verification of report form
					|under the Ordinance of the Government of the Russian Federation
					|No. 761 dated July 25, 2015 is not provided for
					|by law. The form must be submitted as hard copy'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;

			Если ОбработаноДействиеДляАлкоОтчета(Форма, ПроверяемыйОбъект, ОписаниеОтчета, "ПроверкаВыгрузкиВИнтернете") Тогда
			    Возврат;		
			КонецЕсли;	
		
		ИначеЕсли ТипЗнч(ПроверяемыйОбъект) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'Проверка в интернете макетов пенсионных дел не предусмотрена';
												|en = 'Online verification of pension case templates is not provided'"));
			Возврат;
			
		ИначеЕсли ТипЗнч(ПроверяемыйОбъект) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'Проверка в интернете заявлений о назначении пенсии не предусмотрена';
												|en = 'Online verification of pension award applications is not provided'"));
			Возврат;
			
		КонецЕсли;
		
		Если Представление = "Доходы, выплаченные иностранным организациям" Тогда
			ОписаниеДохИно = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ПроверяемыйОбъект);
			Если (ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2023Кв4"
				ИЛИ ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2020Кв1"
				ИЛИ ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1")
				И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
				Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
					Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = '%1 Проверка в интернете прервана.';
						|en = '%1 Online verification aborted.'"), ОписаниеДохИно.ТекстСообщения);
						СообщитьИВернутьОшибку(Форма, Текст);
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Представление = "Сведения о доле доходов от туристско-рекреационной деятельности" Тогда
			Если РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ПроверяемыйОбъект).ВыбраннаяФорма = "ФормаОтчета2018Кв1" Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде, печать с двухмерным
				|штрихкодом PDF417 формы отчета ""%1"",
				|рекомендованной письмом ФНС России от 16.01.2019 № СД-4-3/441@, не предусмотрены';
				|en = 'Exporting, checking export, printing with 2D
				|barcode PDF417 of the report ""%1"" form,
				|recommended by the letter of FTS of Russia dated 16.01.2019 No. SD-4-3/441@ are not provided'"), Представление);
				СообщитьИВернутьОшибку(Форма, Текст);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		КонтекстЭДОКлиент.ПроверитьВИнтернетеНачало(
			ПроверяемыйОбъект, 
			Представление, 
			ЭтоОтчеты, 
			ОрганизацияПроверяемогоОбъекта, 
			ТекущиеДанные.ВидКонтролирующегоОргана);
			
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

Процедура ОтчетыВыбор(Форма, Элемент, Поле, СтандартнаяОбработка) Экспорт
	
	ЭтоГрупповаяОтправка = ДлительнаяОтправкаКлиентСервер.ЭтоФормаГрупповойОтправкиПоФорме(Форма);
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Ссылка = ТекущиеДанные.РегламентированныйОтчет;
	
	Если Поле.Имя = "ОтчетыСтатус" Тогда
		
		ТекСтатус = СокрЛП(ТекущиеДанные.Статус);
		
		// обработка выбора статуса для отправки в Минобороны
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
				"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.СдачаОтчетностиВМинобороны") Тогда
			Если ТекущиеДанные.ВидКонтролирующегоОргана = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
				
				МодульДокументооборотСМинобороныКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДокументооборотСМинобороныКлиент");
				ВыбиратьСтатусОтправкиИзСписка = НЕ МодульДокументооборотСМинобороныКлиент.СтатусОтчетаУстановленВручную(Ссылка, ТекСтатус);
				Если ВыбиратьСтатусОтправкиИзСписка Тогда
					Если ЭтоГрупповаяОтправка Тогда 
						ПоказатьПредупреждение(, ДлительнаяОтправкаКлиентСервер.СообщениеПриПопыткеИзмененияСтатуса());
					Иначе
						ВыбратьСтатусОтправкиИзСписка(ТекущиеДанные, ТекСтатус, Ссылка, Истина, Форма);
					КонецЕсли;
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Форма.Используется1СОтчетность Тогда
			
			Если ЭтоГрупповаяОтправка Тогда 
				ПоказатьПредупреждение(, ДлительнаяОтправкаКлиентСервер.СообщениеПриПопыткеИзмененияСтатуса());
			ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ОбъектРеглОтчетностиОтправлялсяБезИспользования1СОтчетности(Ссылка) Тогда
				
				Если МожноИзменитьСтатусВручную(Ссылка) Тогда
					ВыбратьСтатусОтправкиИзСписка(ТекущиеДанные, ТекСтатус, Ссылка, Истина, Форма);
				КонецЕсли;
				
			Иначе
				
				ТекстПредупреждения = НСтр(
				"ru = 'Изменение вручную статуса отправленных регламентированных отчетов не предусмотрено.';
				|en = 'Manual change of the sent local reports status is not provided.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
			КонецЕсли;
			
		Иначе
			
			Если РегламентированнаяОтчетностьКлиентСервер.ОбъектНеОтправлялсяЧерез1СОтчетность(
				ТекущиеДанные.СостояниеСдачиОтчетности) Тогда
				
				Если ЭтоГрупповаяОтправка Тогда 
					ПоказатьПредупреждение(, ДлительнаяОтправкаКлиентСервер.СообщениеПриПопыткеИзмененияСтатуса());
				Иначе
					Если МожноИзменитьСтатусВручную(Ссылка) Тогда
						ВыбратьСтатусОтправкиИзСписка(ТекущиеДанные, ТекСтатус, Ссылка, Истина, Форма);
					КонецЕсли;
				КонецЕсли;

			Иначе
				
				// Переопределяем показ формы состояния отправки
				ОтображатьСтандартнуюФормуСостояния = Истина;
				Если НЕ ЗначениеЗаполнено(Форма.ИмяТипаДокументаРеестрДанныхЭЛН)
					ИЛИ ТипЗнч(Ссылка) <> Тип("ДокументСсылка." + Форма.ИмяТипаДокументаРеестрДанныхЭЛН) Тогда
					
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьСостояниеОтправкиОтчетаПереопределяемый(
						Ссылка, ОтображатьСтандартнуюФормуСостояния);
				КонецЕсли;
				
				// Если показ формы был выполнен в переопределяемой процедуре, то стандартную форму не показываем
				Если ОтображатьСтандартнуюФормуСостояния Тогда
					Форма.ПоказатьФормуСтатусовОтправкиИзСписка(Элемент);
				КонецЕсли;
				
			КонецЕсли;
			
		Конецесли;
		
	ИначеЕсли Поле.Имя = "ОтчетыЕстьКритическиеОшибкиОтправки" И ТекущиеДанные.ЕстьКритическиеОшибкиОтправки Тогда
		
		Форма.ПоказатьКритическиеОшибкиПоСсылке(Ссылка);
		
	Иначе
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда 
			Форма.ПодменитьСсылку(Ссылка);
		КонецЕсли;
		
		ПоказатьЗначение(,Ссылка);
		
		Если НЕ ЭтоГрупповаяОтправка Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
				И ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов")
				И ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				// Если в результате выполнения "ПоказатьЗначение" открыта форма клиентского приложения, не являющаяся
				// формой ни регламентированного отчета, ни электронного представления регламентированного отчета,
				// тогда необходимо оповестить динамический список отчетов в форме "1С-Отчетность" об изменении
				// индекса картинки (последнеее делается в случае присоединения файлов).
				
				АктивноеОкно = АктивноеОкно();
				
				Если АктивноеОкно <> Неопределено Тогда
					
					МассивУправлФорм = АктивноеОкно.Содержимое;
					
					Если МассивУправлФорм.Количество() > 0 Тогда
						
						Для каждого УправлФорма Из МассивУправлФорм Цикл
							
							Если УправлФорма.Параметры.Свойство("Ключ") Тогда
								
								Если УправлФорма.Параметры.Ключ = Ссылка Тогда
									
									ДопПарам = Новый Структура(
									"ВладелецФайла,Организация", Ссылка, ТекущиеДанные.Организация);
									
									УправлФорма.ОписаниеОповещенияОЗакрытии
									= Новый ОписаниеОповещения("ОтчетыВыборЗавершение", Форма, ДопПарам);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Оповестить("Пометка прочтенным", , Ссылка);
			
	КонецЕсли;
	
КонецПроцедуры

Функция МожноИзменитьСтатусВручную(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
						
		ТекстПредупреждения = НСтр("ru = 'Изменение вручную статуса электронных представлений регламентированных отчетов не предусмотрено.';
									|en = 'Manual change of the local reports electronic presentations status is not provided.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МакетыПенсионныхДел") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Изменение вручную статуса макетов пенсионных дел не предусмотрено';
									|en = 'Manual change of the pension case templates status is not provided'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат Ложь;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии") Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Изменение вручную статуса заявления о назначении и доставке пенсии не предусмотрено';
									|en = 'Manual change of the pension award and delivery application status is not provided'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Асинх Процедура ВыбратьСтатусОтправкиИзСписка(ТекущиеДанные, ТекСтатус, СсылкаНаОбъект, ЭтоОтчет, Форма) Экспорт
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", ТекущиеДанные.Организация);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", ТекущиеДанные.ВидКонтролирующегоОргана);
	ДополнительныеПараметры.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
	ДополнительныеПараметры.Вставить("ЭтоОтчет", ЭтоОтчет);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.ЗагрузитьЗначения(
		РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(СсылкаНаОбъект, ТекущиеДанные.ВидКонтролирующегоОргана));
	
	ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), ТекСтатус);
	ТекЭлемСпискаСтатусов = СписокСтатусов.НайтиПоЗначению(ТекСтатус);
	ДополнительныеПараметры.Вставить("ПредСтатусЭлемент", ТекЭлемСпискаСтатусов);
	
	ТекЭлемСпискаСтатусов = СписокСтатусов.НайтиПоЗначению(ТекСтатус);
	ВыбСтатусЭлемент = Ждать Форма.ВыбратьИзСпискаАсинх(СписокСтатусов, , ТекЭлемСпискаСтатусов);
	Если ВыбСтатусЭлемент <> Неопределено И ВыбСтатусЭлемент <> ТекЭлемСпискаСтатусов Тогда
		НовСтатус = ВыбСтатусЭлемент.Значение;
		Если ВыбСтатусЭлемент.Значение = НСтр("ru = 'Сдано';
												|en = 'Submitted'")
			И РегламентированнаяОтчетностьВызовСервера.ПодключенДокументооборотСКонтролирующимОрганом(
				ТекущиеДанные.Организация, ТекущиеДанные.ВидКонтролирующегоОргана) Тогда
				
			ТекстВопроса = ?(ЭтоОтчет, НСтр("ru = 'Вы уверены, что отчет уже сдан?';
											|en = 'Are you sure the report is already submitted?'"), НСтр("ru = 'Вы уверены, что уведомление уже сдано?';
																							|en = 'Are you sure the notification has already been submitted?'"));
			Если Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("НовСтатус", НовСтатус);
		ВыбратьСтатусОтправкиИзСпискаЗавершение(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьСтатусОтправкиИзСпискаЗавершение(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ПредСтатусЭлемент") Тогда
		ДополнительныеПараметры.Удалить("ПредСтатусЭлемент");
	КонецЕсли;
	
	УникальныйИдентификатор = ДополнительныеПараметры.Форма.УникальныйИдентификатор;
	ДополнительныеПараметры.Удалить("Форма");
	
	РегламентированнаяОтчетностьВызовСервера.СохранитьСтатусОтправки(ДополнительныеПараметры, УникальныйИдентификатор);
	
	// для Минобороны сохраняем дополнительно, чтобы обновить статус в списке
	Если ДополнительныеПараметры.КонтролирующийОрган = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
		Отчет = ДополнительныеПараметры.СсылкаНаОбъект;
		Отказ = Неопределено;
		РегламентированнаяОтчетностьВызовСервера.ЗаписьОбъектовРегламентированнойОтчетности(Отчет, Отказ);
	КонецЕсли;
	
	Отборы = Новый Массив;
	
	Если НЕ ДополнительныеПараметры.ЭтоОтчет Тогда
		Отборы.Добавить(Новый Структура("СтраницаЖурнала,Организация,Ссылка", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"),
		ДополнительныеПараметры.Организация, ДополнительныеПараметры.СсылкаНаОбъект));
		ТипЗначенияРегистра = Тип("РегистрСведенийКлючЗаписи.ЖурналОтправокВКонтролирующиеОрганы");
	Иначе
		Отборы.Добавить(Новый Структура("Организация,Ссылка",
		ДополнительныеПараметры.Организация, ДополнительныеПараметры.СсылкаНаОбъект));
		ТипЗначенияРегистра = Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы");
	КонецЕсли;
	
	Ключ = Новый(ТипЗначенияРегистра, Отборы);
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Организация", ДополнительныеПараметры.Организация);
	ПараметрОповещения.Вставить("Ссылка", ДополнительныеПараметры.СсылкаНаОбъект);
	Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
КонецПроцедуры

// Возвращает структуру с текстом выгрузки бухгалтерской отчетности
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, по которой требуется получить сведения.
//   ОтчетныйПериод - Дата - дата в пределах года, за который требуется получить сведения отчета;
//                  - Число - год, за который требуется получить сведения отчета.
// Возвращаемое значение:
//  Неопределено - в случае, если за указанный отчетный период не обнаружен актуальный отчет.
//  Структура - сведения о типе актуального отчета и текст электронного представления.
//   * ТипОтчетности - Строка - одно из значений, определяющих тип отчета: БО, БОМП, БОСОНКО.
//   * ЭлектронноеПредставление - Строка - текст электронного представления отчета
//
Функция ЭлектронноеПредставлениеБухгалтерскойОтчетности(Организация, ОтчетныйПериод) Экспорт
	
	ВыгружаемыйОтчет = РегламентированнаяОтчетностьВызовСервера.АктуальнаяБухгалтерскаяОтчетность(Организация, ОтчетныйПериод);
	
	ЭлектронноеПредставление = Неопределено;
	
	Если ВыгружаемыйОтчет <> Неопределено Тогда
		РеквизитыОтчета = РегламентированнаяОтчетностьВызовСервера.РеквизитыСохраненнойБухгалтерскойОтчетности(ВыгружаемыйОтчет);
		
		ТипОтчетности = РеквизитыОтчета.ИсточникОтчета;
		ТипОтчетности = СтрЗаменить(ТипОтчетности, "РегламентированныйОтчетБухОтчетность", "БО");
		
		ЭлектронноеПредставление = Новый Структура;
		ЭлектронноеПредставление.Вставить("ТипОтчетности", ТипОтчетности);
		ЭлектронноеПредставление.Вставить("ЭлектронноеПредставление", Неопределено);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", РеквизитыОтчета.ДатаНачала);
		ПараметрыФормы.Вставить("мСохраненныйДок",          ВыгружаемыйОтчет);
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  РеквизитыОтчета.ДатаОкончания);
		ПараметрыФормы.Вставить("мВыбраннаяФорма",          РеквизитыОтчета.ВыбраннаяФорма);
		ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
		
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(РеквизитыОтчета.ИсточникОтчета, РеквизитыОтчета.ВыбраннаяФорма);
		ФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
		
		ТекстВыгрузки = "";
		ВыгрузкаУспешна = ФормаОтчета.УниверсальнаяВыгрузка(ТекстВыгрузки, Ложь);
		
		Если ВыгрузкаУспешна Тогда
			ЭлектронноеПредставление.Вставить("ЭлектронноеПредставление", ТекстВыгрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлектронноеПредставление;
	
КонецФункции

Функция ВыполнениеКомандыОтменено(Форма, НаименованиеОтчета, Организация, НаименованиеКоманды = "") Экспорт
	
	Если (НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность упрощенная"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО (до 2015 года)") Тогда
		
		Если НаименованиеКоманды = "ПечатьОтчетШтрих" Тогда
			РеализованаПечатьPDF417 = (НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)")
				ИЛИ (НаименованиеОтчета = "Бухгалтерская отчетность упрощенная");
			
			Если НЕ РеализованаПечатьPDF417 Тогда
				Предупреждение = НСтр("ru = 'Для отчета не предусмотрена печать на бланках с двухмерным штрихкодом PDF417';
										|en = 'You cannot print the report on forms with a two-dimensional PDF417 barcode'");
				ПоказатьИВернутьОшибку(Форма, Предупреждение);
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
			Если НаименованиеКоманды = "ОтправитьОтчет" Тогда
				Предупреждение = ПредупреждениеОНевозможностиОтправкиОтчета(); 
			Иначе
				Предупреждение = ПредупреждениеОНевозможностиВыгрузкиОтчета();
			КонецЕсли;
			
			ПоказатьИВернутьОшибку(Форма, Предупреждение);
			
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОтчета = Строка(ПредопределенноеЗначение("Перечисление.ВидыЗаявленийНаЭДОВПФР.НаПодключение"))
		ИЛИ НаименованиеОтчета = Строка(ПредопределенноеЗначение("Перечисление.ВидыЗаявленийНаЭДОВПФР.НаОтключение")) Тогда
		
		Предупреждение = НСтр("ru = 'Проверка заявления в интернете не предусмотрена';
								|en = 'Application online verification is not provided'");
		ПоказатьИВернутьОшибку(Форма, Предупреждение);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбработаноДействиеДляАлкоОтчета(Форма, ДокументСсылкаАлкоОтчет, ОписаниеОтчета, 
										Действие, ВидПечати = Неопределено) Экспорт

	Если НЕ ТипЗнч(ДокументСсылкаАлкоОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		// Ничего не делаем, обработка продолжается дальше в вызывающей процедуре.
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		// Ничего не делаем, обработка продолжается дальше в вызывающей процедуре.
		Возврат Ложь;
	КонецЕсли;
	
	ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");
	
	НеСтандартнаяОбработка = Ложь;
	НужнаДлительнаяОперация = ОбщийМодульАЛКОКлиент.ОбработкаДействияСАлкоОтчетом(ОписаниеОтчета, Действие, НеСтандартнаяОбработка);
	
	Если НужнаДлительнаяОперация Тогда
	
		// Действие разрешено и отчет не табличный.
		ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");			
		ДлитОперация = ОбщийМодульАЛКОКлиент.ПолучитьПеречислениеВидыДлительныхОперацийРеглОтчетов(Действие);				
		
		ДлительныеОперацииАлко(Форма, ДокументСсылкаАлкоОтчет, ДлитОперация, ВидПечати);
		
		// Запустили действие и завершаем обработку в вызывающей процедуре.
	    Возврат Истина;
		
	Иначе
		
		// Предупреждение уже выдано в  ОбработкаДействияСАлкоОтчетом().
		// Возвращаем признак, нужно ли далее стандартно обрабатывать в процедуре, откуда вызвали,
		// или нужно прекращать дальнейшую обработку.
		// Истина 	- обработка в вызывающей процедуре будет прекращена.
		// Ложь		- обработка в вызывающей процедуре будет продолжена как с обычным табличным отчетом.
		Возврат НеСтандартнаяОбработка;
	
	КонецЕсли; 
	
КонецФункции

Процедура ДлительныеОперацииАлко(Форма, ДокументСсылкаАлкоОтчет, ВидДлОперации, ВидПечати = Неопределено) Экспорт

	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		Возврат;	
	КонецЕсли;
	
	Форма.СтруктураВспомДанныхДлитОперацииАЛКО = Новый Структура;
	Форма.СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидДлительнойОперации", ВидДлОперации);
	Форма.СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидПечати", ВидПечати);
		
	ФормаОтчетаДлитОперации = ИнициализацияОтчета(ДокументСсылкаАлкоОтчет);
	
	Форма.СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ФормаОтчетаДлитОперации", ФормаОтчетаДлитОперации);
		
	ФормаОтчетаДлитОперации.ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлОперации, ВидПечати, Форма);	

КонецПроцедуры

Процедура Подключаемый_ПроверитьВыполнениеДлительнойАлкоОперацииНаКлиенте(Форма) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьПоАлкогольнойПродукции") Тогда
		Возврат;	
	КонецЕсли;
	
	ОбщийМодульАЛКОКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьАЛКОКлиент");
		
	ФормаОтчетаДлитОперации = Форма.СтруктураВспомДанныхДлитОперацииАЛКО.ФормаОтчетаДлитОперации;
	ОперацияЗавершена = ОбщийМодульАЛКОКлиент.ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчетаДлитОперации);
	
	Если ОперацияЗавершена Тогда
		
		Форма.ПараметрыОбработчикаОжидания = Неопределено;
		Форма.СтруктураВспомДанныхДлитОперацииАЛКО = Неопределено;

	    Возврат;
		
	КонецЕсли;
	
	Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал * Форма.ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал > Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал = Форма.ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", Форма.ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

Процедура ОтправитьОтчетИзФормыСписка(Форма, ИмяКоманды, КонтекстЭДОКлиент, ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		ВернутьОшибку(Форма, НСтр("ru = 'Не выбрана строка для отправки';
									|en = 'No line selected to send'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("СправочникСсылка.МакетыПенсионныхДел")
		И Не ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтчетЕщеНеОтправлялся(ТекущиеДанные.РегламентированныйОтчет) Тогда
		
		ТекстСообщения = НСтр("ru = 'Макет пенсионного дела уже отправлен';
								|en = 'Pension case template has already been sent'");
		ПоказатьИВернутьОшибку(Форма, ТекстСообщения);
		Возврат;
		
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("СправочникСсылка.ЗаявлениеОНазначенииПенсии")
		И Не ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтчетЕщеНеОтправлялся(ТекущиеДанные.РегламентированныйОтчет) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заявление о назначении пенсии уже отправлено';
								|en = 'The pension award application has already been sent'");
		ПоказатьИВернутьОшибку(Форма, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	НаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование);
	Если ВыполнениеКомандыОтменено(Форма, НаименованиеОтчета, ТекущиеДанные.Организация, ИмяКоманды) Тогда
		Возврат;
	КонецЕсли;
					
	ТекущиеДанныеНаименованиеОтчета = ?(ТекущиеДанные.Свойство("НаименованиеОтчета"), ТекущиеДанные.НаименованиеОтчета, ТекущиеДанные.Наименование);
	
	Если ТекущиеДанныеНаименованиеОтчета =
		"(с 2019 г.) Алко Прил.09: Объем собранного винограда для производства винодельческой продукции"
		ИЛИ ТекущиеДанныеНаименованиеОтчета =
		"(с 2019 г.) Алко Прил.10: Объем винограда, использованного для производства вина, игристого вина (шампанского)"
		ИЛИ ТекущиеДанныеНаименованиеОтчета =
		"(с 2019 г.) Алко Прил.11: Объем винограда, использованного для производства винодельческой продукции с защищенным географическим указанием, с защищенным наименованием места происхождения и полного цикла производства дистиллятов" Тогда
		ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена';
											|en = 'Sending an electronic report form is not provided'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
	
	Если ОбработаноДействиеДляАлкоОтчета(Форма, ТекущиеДанные.РегламентированныйОтчет,  
										ОписаниеОтчета, "ОтправкаВКонтролирующийОрган") Тогда
	    Возврат;		
	КонецЕсли;
			
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИмяТипаДокументаРеестрДанныхЭЛН") И ЗначениеЗаполнено(Форма.ИмяТипаДокументаРеестрДанныхЭЛН)
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка." + Форма.ИмяТипаДокументаРеестрДанныхЭЛН) Тогда
		
		ТекстПредупреждения = СтрШаблон(НСтр("ru = 'Для отправки ""%1"" необходимо открыть форму документа.';
											|en = 'Open the document form to send ""%1"".'"), ТекущиеДанныеНаименованиеОтчета);
		ПоказатьИВернутьОшибку(Форма, ТекстСообщения);

		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы.
	Если ВебБраузер() = "MSIE" Тогда
		Если (ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов"))
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Декларация по НДС"
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
			ИЛИ ТекущиеДанныеНаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Для выгрузки (проверки выгрузки, проверки в интернете, отправки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""';
				|en = 'Open form of the ""%1"" local report in Internet Explorer for export (export check, online verification, sending)'"),
				ТекущиеДанныеНаименованиеОтчета);
			
			ПоказатьИВернутьОшибку(Форма, ТекстПредупреждения);
				
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Декларация по НДС" Тогда
		ТекстОшибки = Неопределено;
		Если ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			ОписаниеРегОтч = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
			
			ТекстОшибки = РегламентированнаяОтчетностьВызовСервера.ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(
				ОписаниеРегОтч.Организация,
				ТекущиеДанные.КодКонтролирующегоОргана, 
				ОписаниеРегОтч.ДатаКонцаПериодаОтчета, 
				ОписаниеРегОтч.НомерКорректировки);
				
		ИначеЕсли ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			
			ОписаниеЭлПредставления = РегламентированнаяОтчетностьВызовСервера.ОписаниеЭлектронногоПредставленияРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
			
			Если ОписаниеЭлПредставления.Количество() > 0 Тогда
				
				ТекстОшибки = РегламентированнаяОтчетностьВызовСервера.ТекстСообщенияОНепройденномКонтролеНомеровКорректировок(
					ОписаниеЭлПредставления.Организация,
					ТекущиеДанные.КодКонтролирующегоОргана, 
					ОписаниеЭлПредставления.ДатаКонцаПериодаОтчета,
					ОписаниеЭлПредставления.НомерКорректировки);
					
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПоказатьИВернутьОшибку(Форма, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Движение средств по счету в банке за пределами РФ"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв3" Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр(
			"ru = 'Отправка в электронном виде формы отчета
			|в редакции постановления Правительства РФ
			|от 25.07.2015 № 761 не предусмотрена
			|законодательством. Форма сдается в бумажном виде';
			|en = 'Sending the report in the electronic format
			|under the Ordinance of the Government of the Russian Federation
			|No. 761 dated July 25, 2015 is not provided for
			|by law. The form must be submitted as hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТекущиеДанныеНаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если (ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2023Кв4"
			ИЛИ ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2020Кв1"
			ИЛИ ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1")
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = '%1 Отправка прервана.';
						|en = '%1 Sending aborted.'"), ОписаниеДохИно.ТекстСообщения);
					
					СообщитьИВернутьОшибку(Форма, Текст);
					
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Сведения о доле доходов от туристско-рекреационной деятельности" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет).ВыбраннаяФорма = "ФормаОтчета2018Кв1" Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Выгрузка, проверка выгрузки, проверка в интернете, отправка в электронном виде, печать с двухмерным
			|штрихкодом PDF417 формы отчета ""%1"",
			|рекомендованной письмом ФНС России от 16.01.2019 № СД-4-3/441@, не предусмотрены';
			|en = 'Exporting, checking export, printing with 2D
			|barcode PDF417 of the report ""%1"" form,
			|recommended by the letter of FTS of Russia dated 16.01.2019 No. SD-4-3/441@ are not provided'"),
			ТекущиеДанныеНаименованиеОтчета);
			
			СообщитьИВернутьОшибку(Форма, Текст);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "РСВ-1 ПФР" И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) <> Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ОписаниеРСВ_1 = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' И НЕ (Форма.ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
			
			Текст = НСтр("ru = 'Внимание! Отправлять в электронном виде форму РСВ-1 необходимо
			|из специализированного рабочего места подготовки квартальной
			|отчетности в ПФР. Отправка прервана.';
			|en = 'Attention! It is necessary to send the RSV-1 form
			|in electronic format from a specialized computer for the preparation of PF quarterly
			|reporting. Sending aborted.'");
			
			ПоказатьИВернутьОшибку(Форма, Текст);
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Декларация по налогу на прибыль"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2019Кв4" И ОписаниеРегОтчета.Свойство("КорректирующаяФорма")
			И ОписаниеРегОтчета.КорректирующаяФорма = Ложь И ОписаниеРегОтчета.Свойство("ДатаКонцаПериодаОтчета")
			И КонецКвартала(ОписаниеРегОтчета.ДатаКонцаПериодаОтчета) >= КонецГода('20201231') Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'С 01.01.2021 не представляется первичная декларация по форме, утвержденной приказом ФНС России от 23.09.2019 № ММВ-7-3/475@, за налоговый период 2020 год';
												|en = 'After 01/01/2021, the primary declaration as per the form approved by order of the Federal Tax Service of Russia dated 09/23/2019 No. ММV-7-3/475@ for the 2020 fiscal period is not to be submitted'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Расчет по страховым взносам"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2020Кв1" И ОписаниеРегОтчета.Свойство("КорректирующаяФорма")
			И ОписаниеРегОтчета.КорректирующаяФорма = Ложь И ОписаниеРегОтчета.Свойство("ДатаКонцаПериодаОтчета")
			И КонецКвартала(ОписаниеРегОтчета.ДатаКонцаПериодаОтчета) >= КонецГода('20201231') Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'С 01.01.2021 не представляется первичный расчет по форме, утвержденной приказом ФНС России от 18.09.2019 № ММВ-7-11/470@, за расчетный период 2020 год';
												|en = 'After 01/01/2021, the primary calculation as per the form approved by order of the Federal Tax Service of Russia dated 09/18/2019 No. ММV-7-11/470@ for the 2020 payroll period is not to be submitted'"));
			Возврат;
		ИначеЕсли ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2025Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.РСВ 25к1", '20250101') Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Декларация по налогу на имущество"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2020Кв4" И ОписаниеРегОтчета.Свойство("КорректирующаяФорма")
			И ОписаниеРегОтчета.КорректирующаяФорма = Ложь И ОписаниеРегОтчета.Свойство("ДатаКонцаПериодаОтчета")
			И КонецКвартала(ОписаниеРегОтчета.ДатаКонцаПериодаОтчета) >= КонецГода('20201231') Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр("ru = 'С 01.01.2021 не представляется первичная декларация по форме, утвержденной приказом ФНС России от 28.07.2020 № ЕД-7-21/475@, за расчетный период 2020 год';
												|en = 'After 01/01/2021, the primary declaration as per the form approved by order of the Federal Tax Service of Russia dated 07/28/2020 No. ED-7-21/475@ for the 2020 payroll period is not to be submitted'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Уведомление о розничных ценах на табачные изделия"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2022Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.розн.цен табак 22к1", '20220316') Тогда
			ПоказатьИВернутьОшибку(Форма, НСтр(
			"ru = 'Отправка в электронном виде формы отчета в редакции
				  |приказа ФНС России от 12.01.2022 № ЕД-7-3/7@ не предусмотрена
				  |законодательством. Форма сдается в бумажном виде';
				  |en = 'Sending an electronic report form as amended by
				  | the order of the Federal Tax Service of Russia dated 01/12/2022 No. ED-7-3/7@ is not provided
				  | by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета =
		"Реестр для налоговых вычетов по акцизам на этиловый спирт (денатурированный этиловый спирт) (КНД 1150114)"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.реестр акц.эт.спирт") Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета будет реализована в будущих версиях программы';
				|en = 'Online submission of the report form will be available in future application versions'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета =
		"Извещение об уплате авансового платежа акциза по алкогольной и (или) спиртосодержащей продукции"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.изв.упл.аванс.алк.")
		ИЛИ ТекущиеДанныеНаименованиеОтчета =
		"Извещение об освобождении от уплаты авансового платежа акциза по алкогольной и (или) спиртосодержащей продукции"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.изв.осв.упл.ав.алк.") Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Расчет доли доходов от пассивной деятельности"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.дох.от пассивн.деят.", '20221015') Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Сведения для исчисления доплаты к пенсии, СЗВ-ДСО"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отправка СЗВ-ДСО", '20231006') Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы документа не предусмотрена';
				|en = 'Sending an electronic document form is not provided'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Декларация по налогу на сверхприбыль"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("налогу на сверхприбыль", '20240101') Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Расчет доли доходов личного фонда"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("доли доходов личного фонд", '20240101') Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "6-НДФЛ (с 2021 года)"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр 6-НДФЛ 5.04") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "6-НДФЛ (с 2021 года)"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.6-НДФЛ 24к2", '20240101') Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Движение средств по счету в банке за пределами РФ"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв4" Или ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2023Кв4" Тогда 
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Сбор за пользование объектами водных биологических ресурсов"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2017Кв4"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.водн.биорес.5.03") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		ИначеЕсли ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.водн.биорес.5.04", '20240226') Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Расчет по страховым взносам"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2023Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.РСВ 5.05") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета =
		"Сведения о доходах физического лица, направляемые в целях назначения социальных выплат"
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.св.о доход.соц.выпл.",
		'20240502') Тогда
		
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155110"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.01 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155119"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.02 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155121"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.03 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155120"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.04 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155111"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.05 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155117"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.06 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155112"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.07 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155113"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.08 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155114"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.09 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155115"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.10 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155122"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.11 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155123"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.12 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155116"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.13 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155118"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр р.НДС прилож.14 21к2") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155223"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.реестр.НДС 1155223") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155112"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.р.НДС прилож.07 24к1") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155112"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2025Кв2"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.р.НДС прилож.07 25к2",
			'20250401') Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155113"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.р.НДС прилож.08 24к1") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155114"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.р.НДС прилож.09 24к1") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Реестр по НДС: КНД 1155115"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2024Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.р.НДС прилож.10 24к1") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Акцизы на нефтяное сырье"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2021Кв4"
			И ТипЗнч(ОписаниеРегОтчета.ДатаНачалаПериодаОтчета) = Тип("Дата")
			И ОписаниеРегОтчета.ДатаНачалаПериодаОтчета >= '20240601'
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.акц.нефт.сырье 21к4") Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Декларация по НДС на услуги иностранных организаций в электронной форме"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ОписаниеРегОтчета = РегламентированнаяОтчетностьВызовСервера.ОписаниеРегОтчета(ТекущиеДанные.РегламентированныйОтчет);
		Если ОписаниеРегОтчета.ВыбраннаяФорма = "ФормаОтчета2025Кв1"
			И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.НДС иностр.орг.25к1",
			'20250224') Тогда
			ПоказатьИВернутьОшибку(Форма,
				НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
						   |законодательством. Форма сдается в бумажном виде';
						   |en = 'Sending an electronic report form is not provided 
						   |by the law. The form must be submitted as a hard copy'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета = "Расчет совокупного размера выручки"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("совокупного размера выруч") Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеНаименованиеОтчета =
			"Реестр для налоговых вычетов по акцизам на фармацевтическую субстанцию (КНД 1150151)"
		И ТипЗнч(ТекущиеДанные.РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.реестр акц.1150151",
			'20250501') Тогда
		ПоказатьИВернутьОшибку(Форма,
			НСтр("ru = 'Отправка в электронном виде формы отчета не предусмотрена
					   |законодательством. Форма сдается в бумажном виде';
					   |en = 'Sending an electronic report form is not provided 
					   |by the law. The form must be submitted as a hard copy'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьОтчетИзФормы1СОтчетность(
		Форма, 
		КонтекстЭДОКлиент, 
		ТекущиеДанные);
	
КонецПроцедуры

Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ Тогда
		ВернутьОшибку(ДополнительныеПараметры.Форма, НСтр("ru = 'Ошибка выгрузки';
															|en = 'Export error'"));
		Возврат;
	КонецЕсли;
	
	Ссылка = ДополнительныеПараметры.Ссылка;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьОтчетПослеПроверок", ЭтотОбъект, ДополнительныеПараметры);
	ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, Ссылка);
	
КонецПроцедуры

Процедура ОтправитьОтчетПослеПроверок(Отказ, ДополнительныеПараметры) Экспорт

	// Внимание!
	// ---------
	// В модуле объекта обработки ДокументооборотСКонтролирующимиОрганами есть процедура ОтправитьРегламентированныйОтчет(),
	// которая используется при отправке отчетов из мобильной бухгалтерии без взаимодействия с клиентским контекстом.
	// При изменениях необходимо синхронно менять обе процедуры.
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ДополнительныеПараметры.Форма, ДополнительныеПараметры.КонтролирующийОрган, , 
		Истина, ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.Организация);
	
КонецПроцедуры
	
Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат НСтр("ru = 'Не выбрана организация.';
				|en = 'Company is not selected.'");

КонецФункции

Функция ПриЗаписиРегламентированногоОтчетаНаКлиенте(Форма, КодИФНС = "не применимо", Автосохранение = Ложь, Вариант = Неопределено) Экспорт
	
	Если Вариант <> Неопределено И (Автосохранение И Вариант <> Форма.СтруктураРеквизитовФормы.мВариант) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Saving %1...'"), Форма.Заголовок), , , БиблиотекаКартинок.Записать);
		
	Возврат Истина;
	
КонецФункции

Процедура ВставитьДополнительнуюСтраницуНаКлиенте(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.Элементы.Страницы.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;
    	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			
			ЗаголовокСтраницы=Форма.Элементы.Страницы.ТекущаяСтраница.Заголовок;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';
																							|en = 'Maximum quantity of page copies in the ""%1"" section is %2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);
			
			Сообщение.Сообщить();
                
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе").Количество();
		
		// Если есть многострочность, то она очищена в проц роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		// Если многострочность есть, то она удалится и запустится Расчет на стадии роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		Если КолМногострочныхЧастей = 0 Тогда
				// Очищаем текущее поле
			Форма.ОчиститьТабличноеПолеНаКлиенте(ИмяТекТабличногоПоля);
		КонецЕсли;

		Если КолМногострочныхЧастей = 0 Тогда
			// Выполняем расчет показателей добавленной страницы
			Форма.РасчетНаКлиенте(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		Форма.Модифицированность = Истина;
				                                   
	КонецЕсли;
    		
КонецПроцедуры

Функция ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено) Экспорт
	
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		
		МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];

		Если ПолучитьЭталонную Тогда
						
			Если Форма.мСтруктураВариантыЗаполненияЭталон.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
				
				МассивВариантовЗаполненияСтраниц = Форма["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];
								
				НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();
				
				КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		Иначе
			
			НомерТекущейСтраницы = 1;
			
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;
			
			Если МногостраничностьЕсть Тогда
				
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					
					ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
					
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
					
					Если СтрТаблицаСтраницы.Количество() > 0 Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
					КонецЕсли;
					
				КонецЕсли;
				
				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						
						НоваяТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц.Добавить();
						
						КопироватьДанныеФормы(МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения, НоваяТаблицаВариантовЗаполнения.ТаблицаВариантовЗаполнения);
						
					КонецЦикла;
					
				КонецЕсли;
								
			КонецЕсли;
			
			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1].ТаблицаВариантовЗаполнения;
			
		КонецЕсли;
		    		
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции

Функция ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, Знач КодПоказателя) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мПоляПоискаПоказателяВТСП") Тогда
		ПоляПоиска = Форма.мПоляПоискаПоказателяВТСП;
	Иначе
		ПоляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	КонецЕсли;

	// В случае, если показатель многострочный (для импорта XML данных в зарплатных отчетах, тогда
	// определим его смысловую часть и найдем раздел.
	Если (Лев(КодПоказателя, 1) = "П") И (СтрНайти(КодПоказателя, "_") = 14) Тогда
		КодПоказателя = Сред(КодПоказателя, 1, СтрНайти(КодПоказателя, "_") - 1);
		// Временный обход для показателя по графе 10 раздела 3. В составе показателей
		// графы 10 нет, поэтому временно привяжем к разделу 3.
		Если КодПоказателя = "П000030001010" Тогда
			Возврат "Раздел3";
		КонецЕсли;
	КонецЕсли;

	МассивПолейПоиска = Новый Массив;
		
	Пока ЗначениеЗаполнено(ПоляПоиска) Цикл
		
		Индекс = СтрНайти(ПоляПоиска, ",");
		
		Если Индекс = 0 Тогда
			МассивПолейПоиска.Добавить(СокрЛП(ПоляПоиска));
			ПоляПоиска = "";
		Иначе
			МассивПолейПоиска.Добавить(СокрЛП(Лев(ПоляПоиска, Индекс - 1)));
			ПоляПоиска = Сред(ПоляПоиска, Индекс + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденнаяСтрока = Неопределено;
		
	Для Каждого Элемент Из Форма.мТаблицаСоставПоказателей Цикл
		
		Для Каждого ПолейПоиска Из МассивПолейПоиска Цикл
			
			Если СокрЛП(Элемент[ПолейПоиска]) = КодПоказателя Тогда
				
				Возврат Элемент.ИмяПоляТаблДокумента;
							
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЦикла;
		
	Возврат Неопределено;

КонецФункции

Процедура ПослеВставкиДополнительнойСтраницыНаКлиенте(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеВставкиДополнительнойСтраницы(Форма, ИмяВставляемойСтраницы, ПерейтиНаВставленныйЛист);

КонецПроцедуры

Функция НайтиСтрокиВДанныхФормыДерево(ЭлементыДанныхФормыДерево, ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок) Экспорт
	
	Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			МассивНайденныхСтрок.Добавить(ЭлементДерева);
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиСтрокиВДанныхФормыДерево(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение, МассивНайденныхСтрок);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат МассивНайденныхСтрок;
	
КонецФункции

Асинх Процедура МеханизмыОчисткиРегламентированныхОтчетов(Форма, РежимОчистки = Неопределено, ВыполняемоеОповещение = Неопределено) Экспорт

	Если РежимОчистки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Если РежимОчистки = "ОчиститьВесьОтчет" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		// Это описание оповещения будет выполнено после того как выполнена очистка
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОчисткиВсегоОтчета", ЭтотОбъект, ДополнительныеПараметры);
		Форма.Очистить(ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;

	ИмяСтраницы = СтрЗаменить(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела", "");
	ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "ОчиститьТекущийРаздел", "");
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Ложь);
	Многостраничность = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	ПредставлениеРазделаОтчета = НРег(ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы));
	СведенияОФЛ = (СтрНайти(НРег(ПредставлениеРазделаОтчета), "физ") > 0) И (СтрНайти(НРег(ПредставлениеРазделаОтчета), "лиц") > 0);

	ОчищенИлиОчищено = "очищен"; // Очищен раздел ...
	Если СтрНайти(НРег(ПредставлениеРазделаОтчета), "заявление") > 0 Тогда
		ОчищенИлиОчищено = "очищено"; // Очищено заявление ...
	КонецЕсли;

	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		Если Многостраничность Тогда
			КолВоСтраницВРазделе = Форма[Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы]].Количество();
			Если КолВоСтраницВРазделе > 1 Тогда
				ТекстВопроса = "Внимание! Будут удалены все страницы текущего раздела." + Символы.ПС + "Продолжить?";
			Иначе
				Если СведенияОФЛ Тогда
					ТекстВопроса = "Внимание! Будут очищены сведения о физическом лице." + Символы.ПС + "Продолжить?";
				Иначе
					ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС + "Продолжить?";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС + "Продолжить?";
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																					|en = '%1'"), ТекстВопроса);
		Если Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
						НомерСтраницыРазделаОтчета = 1;
					КонецЕсли;
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				КонецЕсли;
				
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
																					|en = 'Warning! The current page will be cleared.%1 Continue?'"), Символы.ПС);
		Если Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
			Форма.ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе);
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
						НомерСтраницыРазделаОтчета = 1;
					КонецЕсли;
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				КонецЕсли;
				
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			Если ВыполняемоеОповещение <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Асинх Процедура Очистить(Форма, ВыполняемоеОповещение = Неопределено, ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт
	Если ЗадаватьВопросПередОчисткой Тогда
		Если ПустаяСтрока(ТекстВопроса) Тогда
			ТекстВопроса = "Внимание! Будут очищены все разделы отчета." + Символы.ПС + "Продолжить?";
		КонецЕсли;
		
		Если КодВозвратаДиалога.Да <> Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ОчиститьНаСервере();
	Форма.Модифицированность = Истина;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
КонецПроцедуры

Процедура ПослеОчисткиВсегоОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОбновитьДеревоРазделовВФормеОтчета(Форма);
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДеревоРазделовВФормеОтчета(Форма) Экспорт
		
	Если НЕ Форма.Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		
		// Запоминаем текущий раздел, выбранный в дереве разделов формы отчета.
		ТекущийРазделОтчетаСокрНаим = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Форма.Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	КонецЕсли;
	
	Форма.СформироватьДеревоРазделовОтчетаНаКлиенте();
			
	Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
		
		Если НЕ НайденнаяСтрока = Неопределено 
			И НЕ НомерСтраницыРазделаОтчета = Неопределено 
			И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Если НайденнаяСтрока.ПолучитьЭлементы().Количество() = 1 Тогда
				НомерСтраницыРазделаОтчета = 1;
			КонецЕсли;
			
			НайденнаяСтрока2 = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			
			Если НайденнаяСтрока2 = Неопределено Тогда
				
				НомерСтраницыРазделаОтчета = НайденнаяСтрока.ПолучитьЭлементы().Количество();
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			Иначе
				
				НайденнаяСтрока = НайденнаяСтрока2;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Форма.Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	Иначе
		ИмяТекОбласти = ТекущаяОбласть.Имя;
		ПозицияНачалаИмениПараметра = СтрНайти(ИмяТекОбласти, "П0");
		ИмяАктивногоРаздела = Сред(ИмяТекОбласти, ПозицияНачалаИмениПараметра, ДлИмениОбласти);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаполнитьСведенияОбОрганизацииНаКлиенте(Форма, ОргСведения, ПБОЮЛ, Знач СписокСведений, Дополнения = "", РазделДляВывода = "Титульный") Экспорт
	Перем ДанныеПредставителя;
		
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	КодФНС = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
	КППТитульныйЛист = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1");
	
	РегламентированнаяОтчетностьВызовСервера.ПолучитьСведения(ОргСведения, ПБОЮЛ, Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокСведений, ДанныеПредставителя, КодФНС, КППТитульныйЛист);
	
	Результат = "";
	Титульный = Форма["ПолеТабличногоДокумента" + РазделДляВывода];

	// ЕСЛИ В ДЕКЛАРАЦИИ СТАРЫЙ ФОРМАТ "УПОЛНОМОЧЕННЫЙ ПРЕДСТАВИТЕЛЬ", ТОГДА ДАННЫЕ ПО ПРЕДСТАВИТЕЛЮ ПОЛУЧИМ В Т.Ч. ИЗ СПРАВОЧНИКА РЕГИСТРАЦИИИФНС.
	// Алкогольные декларации.
	Если (Титульный.Области.Найти("ИННУп") <> Неопределено)
	 ИЛИ (Титульный.Области.Найти("ИННУпП") <> Неопределено) Тогда
		        		
		// "Сольем" данные в общую структуру.
		Если ОргСведения.Свойство("ФИОУпПред") Тогда
			ОргСведения.Вставить("ФИОУпПред", ДанныеПредставителя.ФИОУпПред);
		КонецЕсли;

		Если ОргСведения.Свойство("ИННУпПред") Тогда
			ОргСведения.Вставить("ИННУпПред", ДанныеПредставителя.ИННУпПред);
		КонецЕсли;

	КонецЕсли;

	ФИО = Неопределено;
	Если НЕ ОргСведения.Свойство("ФИО", ФИО) Тогда
		ФИО = Неопределено;
	КонецЕсли;

	НаимЮЛПол = Неопределено;
	Если НЕ ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол) Тогда
		НаимЮЛПол = Неопределено;
	КонецЕсли;

	ТипНП = Неопределено;
	Если ОргСведения.Свойство("ТипНП", ТипНП) Тогда
		Форма.УправлениеЛистамиНаКлиенте(ТипНП);
	КонецЕсли;

	Для Каждого ПолученныйРезультат Из ОргСведения Цикл

		Результат = ПолученныйРезультат.Значение;
		Параметр  = ПолученныйРезультат.Ключ;

		Если Параметр = "ИННРук" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННРук", 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННБух" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННГБ" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННУпПред" Тогда
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННУП" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "НаимЮЛПол" Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		ИначеЕсли Параметр = "ТелОрганизации" Тогда
			Титульный.Области.ТелОрганизации.Значение = Результат;
		ИначеЕсли Параметр = "ИННЮЛ" Тогда
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, "0");
			Иначе
				Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 12, " ");
			КонецЕсли;

			ПроставитьНаВсехЛистахНаКлиенте(Форма, Результат, "ИНН", "", ,,, Истина, ПБОЮЛ);

		ИначеЕсли Параметр = "КППЮЛ" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 9, " ");
			ПроставитьНаВсехЛистахНаКлиенте(Форма, Результат, "КПП", "", ,,, Истина, ПБОЮЛ);
		ИначеЕсли Параметр = "ОГРН" Тогда
			Если Дополнения = "не предусмотрено для заполнения ФЛ" И ПБОЮЛ Тогда
				ОГРН = "             ";
				ОГРНКоордината = "ОГРН";
			Иначе
				ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
				ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, ?(ТипНП = 3, 15, 13), " ");
			КонецЕсли;

			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", ОГРНКоордината, СтрДлина(ОГРН), ОГРН);
		ИначеЕсли Параметр = "КодНО" Тогда
			Результат = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(Результат, 4, " ");
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Титульный", "КодИМНС", 4, Результат);
		ИначеЕсли Параметр = "НаимНО" Тогда
			Титульный.Области.ОргИМНС.Значение = Результат;
		ИначеЕсли Параметр = "ФИОРук" Тогда
			Титульный.Области.ОргДиректор.Значение  = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "НаимОППол" Тогда
			Если ТипНП = 2 Тогда
				// Если данной организация - обособленное подразделение, то запишем ее название, а в ячейку
				// под название организации, запишем название головной организации.
				Титульный.Области.ОбПодрНазв.Значение = Результат;
				Титульный.Области.ОргНазв.Значение = ОргСведения.НаимГоловнОрг;
			Иначе
				// Если заданная организация не обособка, тогда очистим ее поле.
				Титульный.Области.ОбПодрНазв.Значение = "";
			КонецЕсли;
		ИначеЕсли Параметр = "ФИОБух" Тогда
			Титульный.Области.ОргБухгалтер.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "ФИОУпПред" Тогда
			Титульный.Области.ОргУП.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли СтрНайти(Параметр, "ТитульныйЛистФИО_") > 0 Тогда
			Титульный.Области[Сред(Параметр, 18)].Значение = ФИО;
		ИначеЕсли Параметр = "НаимИОПол" Тогда
			Титульный.Области.ИноОргНазв.Значение = Результат;
		КонецЕсли;

		// Если дата подписи поменялась, то перепишем название в декл. только для ПБОЮЛов.
		Если (Параметр = "НаимЮЛПол" Или Параметр = "ФИО") И ПБОЮЛ Тогда
			Титульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		КонецЕсли;

	КонецЦикла;
    	
	// Если на титульном листе найдена область ДокУпПред - докуент уполномоченного представителя, тогда получим данные о представителе.
	// В отчете должна быть процедура ПроставитьСведенияОПредставителеОрганизации().
	Если Титульный.Области.Найти("ДокУпПред") <> Неопределено Тогда
		Попытка
			Форма.ПроставитьСведенияОПредставителеОрганизацииКлиент();
		Исключение
		КонецПопытки;
	КонецЕсли;

	Форма.ЗаполнитьДатуВЯчейкахНаКлиенте();
	Возврат ОргСведения;

КонецФункции

Процедура ПроставитьНаВсехЛистахНаКлиенте(Форма, Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина, ПБОЮЛ) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если СтрНайти(ПрефиксНаЛисте, "КПП") > 0 Тогда

		Попытка

			Если ПБОЮЛ Тогда
				Значение = "         ";
			КонецЕсли;

		Исключение

		КонецПопытки;

	КонецЕсли;

	ПереборЗнач = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Количество();

	// В тех отчетах, которые используют процедуру простановки показателей в отчете по собственному алгоритму, там в отчете
	// присутствует экспортная процедура ПроставитьВКвадратыЗначения.
	// Все остальные отчеты используют общую процедуру роПроставитьВКвадратыЗначения, которая находится в общем модуле РО.
	// По имени объекта и по названию формы будем запускать ту или иную процедуру. Ранее, механизм использовал конструкцию
	// Попытка ... Исключение ... КонецПопытки. Было не удобно работать в режиме "ОстанавливатьсяПоОшибкам".
	ФормаОтчета = Форма.СтруктураРеквизитовФормы.мВыбраннаяФорма;
	
	ИмяОбъектаМетаданных = Сред(Лев(Форма.ИмяФормы, СтрНайти(Форма.ИмяФормы, ".Форма") - 1), 7);

	ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Ложь;
	Если ((ИмяОбъектаМетаданных = "РегламентированныйОтчетДеятельностьИнОргВРФ") И (ФормаОтчета = "ФормаОтчета2004Кв1"))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетПрибыльИностраннойОрганизации") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1")))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетСтатистикаФорма1П ") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1"))) Тогда
		ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Истина;
	КонецЕсли;
		
	Пока ПереборЗнач > 0 Цикл

		ИмяДляРасчета = Форма.мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[ПереборЗнач-1].ИмяСтраницы;

		Если ЗначениеЗаполнено(ТолькоДляЛиста) Тогда
			ЛистыТолько = Новый Структура(ТолькоДляЛиста);
			Если НЕ ЛистыТолько.Свойство(ИмяДляРасчета) Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ЛистИсключение) Тогда
			ЛистыИскл = Новый Структура(ЛистИсключение);
			Если ЛистыИскл.Свойство(ИмяДляРасчета) Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		РезВыбор = (Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела));
		Если (НЕ ЛистыМногостраничные) Или (РезВыбор) Тогда
			
			Колво = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяДляРасчета);

			Для Инд = 1 По Колво Цикл
				// В случае, если в декларации нет своей специализированной процедуры простановки
				// тогда вызовем стандатную из этого модуля.
				// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
				Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
					Форма.ПроставитьВКвадратыЗначенияКлиент(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				Иначе
					РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ЛистыМногостраничные И (НЕ РезВыбор) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяДляРасчета);

			ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
			
			ИндА = 0;
			АктивныйНомерСтр = 0;
			Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

				ИндА = ИндА + 1;

				Колво = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяДляРасчета);

				Для Инд77 = 1 По Колво Цикл

					Если Страница.АктивнаяСтраница Тогда
						// В случае, если в декларации нет своей специализированной процедуры простановки
						// тогда вызовем стандатную из этого модуля.
						// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
						Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
							Форма.ПроставитьВКвадратыЗначенияКлиент(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						Иначе
							РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						КонецЕсли;

					Иначе

						Если НЕ ТолькоАктивныйЛистМногостраничнойчасти Тогда
							Для Инд = 1 По СтрДлина(Значение) Цикл
									Страница.Данные[0].Значение.Вставить(ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", "") + Строка(Инд), Сред(Значение, Инд, 1));
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

		ПереборЗнач = ПереборЗнач - 1;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроставитьИННКППНаВсехЛистахРегОтчетаНаКлиенте(Форма, ОргСведения, ПБОЮЛ, НачальноеЗаполнение = Истина, Знач ИННЮЛ = Неопределено, Знач КППЮЛ = Неопределено) Экспорт
    	
	Если ИННЮЛ = Неопределено Тогда
		РезультатИНН = ОргСведения.ИННЮЛ;
	Иначе
		РезультатИНН = ИННЮЛ;
	КонецЕсли;

	Если КППЮЛ = Неопределено Тогда
		РезультатКПП = ОргСведения.КППЮЛ;
	Иначе
		РезультатКПП = КППЮЛ;
	КонецЕсли;

	Если ЗначениеЗаполнено(РезультатИНН) Тогда
		РезультатИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатИНН, 12, "0");
	Иначе
		РезультатИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатИНН, 12, " ");
	КонецЕсли;

	РезультатКПП = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(РезультатКПП, 9, " ");

	Если НачальноеЗаполнение Тогда
		Для Каждого Страница Из Форма.мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			ИмяСтраницы = Страница.ИмяСтраницы;
			КолвоСтраниц = РегламентированнаяОтчетностьКлиентСервер.КолвоЛистоВРазделе(Форма, ИмяСтраницы);
			Для Инд = 1 По КолвоСтраниц Цикл
				Стр = Строка(Инд) + "_";
				РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "ИНН" + Стр, 12, РезультатИНН);
				РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "КПП" + Стр, 9, РезультатКПП);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ПроставитьНаВсехЛистахНаКлиенте(Форма, РезультатИНН, "ИНН", "", ,,, Истина, ПБОЮЛ);
		ПроставитьНаВсехЛистахНаКлиенте(Форма, РезультатКПП, "КПП", "", ,,, Истина, ПБОЮЛ);
	КонецЕсли;

КонецПроцедуры

Функция ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(Форма, Область, СтандартнаяОбработка) Экспорт
    
	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если (Область.Защита)
		 Или (СтрНайти(Область.Имя, "R") >0)
		 Или (СтрНайти(Область.Имя, "C") >0) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат Истина;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	КонецПопытки;

	Возврат Ложь; // Выбранная область не выделение.

КонецФункции

Функция ИННСоответствуетТребованиямБезТипаНаКлиенте(Форма, Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИННСоответствуетТребованиямНаКлиенте(Форма, ИНН, ВладелецИННФизЛицо);
	
КонецФункции

Функция ИННСоответствуетТребованиямНаКлиенте(Форма, Знач ИНН, Знач ТипЛица) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ПеречисленияЮрФизЛицо = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Форма.СтруктураРеквизитовФормы.ПеречисленияЮрФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли;
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла;
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли;
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла;
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
		
	Попытка
		
		Возврат ПолучитьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма." + ИмяФормы, Параметры, Владелец, КлючУникальности);
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения) Экспорт
	
	Если Форма.Модифицированность Тогда
	
		Отказ = Истина;
	
		Если ЗавершениеРаботы Тогда
	
			ТекстПредупреждения = НСтр("ru = 'Данные отчета были изменены.
											|Перед завершением работы рекомендуется записать отчет,
											|иначе измененные данные будут утеряны.';
											|en = 'Report data was changed.
											|Save the report before exit,
											|otherwise the changed data will be lost.'");
	
			Возврат;
	
		КонецЕсли;
	
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект, Форма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?';
										|en = 'The data has changed. Do you want to save the changes?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	// ПроцессыОбработкиДокументов
	//
	ИначеЕсли ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СтруктураРеквизитовФормы")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.СтруктураРеквизитовФормы, "мСохраненныйДок")
			И ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
	
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
	
		МодульПроцессыОбработкиДокументовКлиент.ПередЗакрытием(
			Форма, Новый Структура("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок),
			Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
			
	ИначеЕсли ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
			И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
	
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
	
		МодульПроцессыОбработкиДокументовКлиент.ПередЗакрытием(
			Форма, Новый Структура("Ссылка", Форма.Объект.Ссылка),
			Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);		
	
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ВопросСохранитьИзмененияЗавершение(Ответ, Форма) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Форма.СохранитьНаКлиенте(,Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Форма.Модифицированность = Ложь;
		
		Форма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

Процедура ПоказатьСтраницыОтчетаНаКлиенте(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат;
	КонецЕсли;
    
	// обновляем исходное дерево значений 
	КопироватьДанныеФормы(Форма.мДеревоВыбранныхСтраниц, Форма.мДеревоСтраницОтчета);
	
	Если РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.мДеревоСтраницОтчета.ПолучитьЭлементы(), "ПоказатьСтраницу", 1) = Неопределено Тогда
		Форма.Элементы.Отчет.Видимость = Ложь;
	ИначеЕсли Форма.Элементы.Отчет.Видимость = Ложь Тогда
		Форма.Элементы.Отчет.Видимость = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененииВидаДокументаИКорректировки(Форма, РазделДокумента = Неопределено, ВидДок = Неопределено, НомКоррект = Неопределено) Экспорт

	ВыбранКорректирующийВидДок = (Форма.ВидДокументаПредставление = "Корректирующий");
	
	Форма.СтруктураРеквизитовФормы.ВидДокумента = ?(ВыбранКорректирующийВидДок, 1, 0);
	
	Если РазделДокумента <> Неопределено Тогда

		Если ВидДок <> Неопределено Тогда
			РазделДокумента.Области[ВидДок].Значение = ?(ВыбранКорректирующийВидДок, "3", "1");
		КонецЕсли;

		Если НомКоррект <> Неопределено Тогда
			РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;

			Если НЕ ВыбранКорректирующийВидДок Тогда
				РазделДокумента.Области[НомКоррект].Значение = "";
			Иначе
				РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Форма.Элементы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#Если НЕ ВебКлиент Тогда

Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Длг.Заголовок = "Укажите каталог";
	Длг.Каталог   = ПутьДляВыгрузки;
	Если Длг.Выбрать() Тогда
		ПутьДляВыгрузки = Длг.Каталог+?(Прав(Длг.Каталог, 1) <> РазделительПутиОС, РазделительПутиОС, "");
		Возврат ПутьДляВыгрузки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецЕсли

Асинх Функция РезультатПодключенияРасширенияРаботыСФайламиАсинх() Экспорт 
	Если Ждать ПодключитьРасширениеРаботыСФайламиАсинх() Тогда
		Возврат Истина;
	Иначе
		Ждать УстановитьРасширениеРаботыСФайламиАсинх();
		Если Ждать ПодключитьРасширениеРаботыСФайламиАсинх() Тогда
			Возврат Истина;
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось подключить расширение работы с файлами.';
										|en = 'Cannot connect 1C:Enterprise Extension.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Выбор каталога файловой системы в асинхронном режиме.
// 
// Параметры:
//   ПутьДляВыгрузки - Строка - первоначальный путь для выбора каталога.
//   Заголовок - Строка - заголовок окна выбора каталога.
// 
// Возвращаемое значение:
//   Строка - путь к выбранному каталогу, включая конечный разделитель пути.
//
Асинх Функция ПолучитьПутьВыгрузкиАсинх(ПутьДляВыгрузки = "", Заголовок = "") Экспорт
	РезультатВыбора = "";
	Если НЕ ЗначениеЗаполнено(Заголовок) Тогда
		Заголовок = НСтр("ru = 'Выберите каталог для сохранения';
						|en = 'Select a directory for saving'");
	КонецЕсли;
	
	Если Ждать РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда
		ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораКаталога.Каталог = ПутьДляВыгрузки;
		ДиалогВыбораКаталога.Заголовок = Заголовок;
		
		ВыбранныйКаталог = Ждать ДиалогВыбораКаталога.ВыбратьАсинх();
		
		РезультатВыбора = ?(ВыбранныйКаталог = Неопределено, "", ВыбранныйКаталог[0]);
		Если ЗначениеЗаполнено(РезультатВыбора) Тогда
			РезультатВыбора = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РезультатВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатВыбора;
КонецФункции

Функция СформироватьТекстСообщения(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = СтрНайти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = СтрНайти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1))
					   + Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции

Функция ПредупреждениеОНевозможностиВыгрузкиОтчета() Экспорт
	
	Возврат НСтр("ru = 'Отчет не может быть выгружен.
	|Выгрузить этот отчет могут только организации.
	|Для индивидуальных предпринимателей выгрузка не предусмотрена форматом ФНС.
	|Это связано с тем, что индивидуальные предприниматели не обязаны сдавать бухгалтерскую отчетность (пп. 5 п. 1 ст. 23 НК РФ).';
	|en = 'Cannot export the report.
	|Only companies can export this report.
	|Export in FTS format is not available for individual entrepreneurs as individual entrepreneurs are not obliged to submit accounting reporting (subcl. 5 cl. 1 art. 23 of the Tax Code of the Russian Federation).
	|'");
	
КонецФункции

Функция ПредупреждениеОНевозможностиОтправкиОтчета() Экспорт
	
	Возврат НСтр("ru = 'Отчет не может быть отправлен.
	|Отправить этот отчет могут только организации.
	|Для индивидуальных предпринимателей отправка не предусмотрена форматом ФНС.
	|Это связано с тем, что индивидуальные предприниматели не обязаны сдавать бухгалтерскую отчетность (пп. 5 п. 1 ст. 23 НК РФ).';
	|en = 'Cannot send the report.
	|Only companies can send this report.
	|Sending in FTS format is not available for individual entrepreneurs as individual entrepreneurs are not obliged to submit accounting reporting (subcl. 5 cl. 1 art. 23 of the Tax Code of the Russian Federation).
	|'");
	
КонецФункции

Процедура ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета() Экспорт
	
	ПоказатьПредупреждение(, ПредупреждениеОНевозможностиВыгрузкиОтчета());
	
КонецПроцедуры

Процедура ПоказатьПредупреждениеОНевозможностиОтправкиОтчета() Экспорт
	
	ПоказатьПредупреждение(, ПредупреждениеОНевозможностиОтправкиОтчета());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вывести машиночитаемую форму уведомления о спецрежимах.

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахПоСсылке(Форма, Ссылка) Экспорт
	ФормаРеквизиты = Новый Структура("Объект, Модифицированность");
	ЗаполнитьЗначенияСвойств(ФормаРеквизиты, Форма);
	Если ТипЗнч(ФормаРеквизиты.Объект) = Тип("ДанныеФормыСтруктура")
		И ТипЗнч(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ФормаРеквизиты.Объект, "Ссылка")) =
			Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И (ФормаРеквизиты.Модифицированность = Истина Или ФормаРеквизиты.Объект.Ссылка.Пустая()) Тогда 
		Форма.СохранитьНаКлиенте();
	КонецЕсли;
	
	Выгрузка = УведомлениеОСпецрежимахНалогообложенияВызовСервера.СформироватьВыгрузкуИПолучитьДанные(Ссылка);
	Если Выгрузка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма, Выгрузка);
	#Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма, Выгрузка);
	#КонецЕсли	
КонецПроцедуры

Процедура ПечатьPDF417ИзФормыОтчетности(Форма, Ссылка) Экспорт
	Выгрузка = УведомлениеОСпецрежимахНалогообложенияВызовСервера.ДанныеДляПечатиPDF417(Ссылка);
	Если Выгрузка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма, Выгрузка);
	#Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма, Выгрузка);
	#КонецЕсли	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(Форма) Экспорт
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте();
	КонецЕсли;
	
	Выгрузка = Форма.СформироватьВыгрузкуИПолучитьДанные();
	Если Выгрузка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма, Выгрузка);
	#Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма, Выгрузка);
	#КонецЕсли	
КонецПроцедуры

#Если ВебКлиент Тогда
Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = "";
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахЧерезВебСервис(ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище, ДополнительныеПараметры.Выгрузка.Данные) Тогда
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ПараметрыСформированногоОтчета.Свойство("ИдФайл", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли;
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	Если ЗначениеЗаполнено(ВебБраузер) И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
									|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(Форма, ДополнительныеПараметры.Выгрузка);
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеПолученияФайлов(ПолученныеФайлы, ПараметрыСохранения) Экспорт
	ВремКаталог = ПараметрыСохранения.ВремКаталог;
	ВремФайл = ПараметрыСохранения.ВремФайл;
	ИмяКнопки = ПараметрыСохранения.ИмяКнопки;
	Форма = ПараметрыСохранения.Форма;
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	КомпонентаУжеУстанавливалась = Истина;
	
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Apply'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимах", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для формирования машиночитаемой формы необходимо установить%1библиотечный модуль печати двухмерного штрихкода PDF417.';
																					|en = 'To generate a machine-readable form, install the %1 library print module of 2D PDF417 barcode. '"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимах(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Если не удалось создать объект и пользователь не против, то запускаем установку компоненты.
		ОповещениеПослеУстановки = Новый ОписаниеОповещения(
			"ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимахПослеУстановки", ЭтотОбъект,
			Новый Структура("ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма",
							 ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма));
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина,
				ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог, ОповещениеПослеУстановки) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
										|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
		Иначе
			Возврат; // будет выполнена процедура оповещения
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(
		ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершениеУведомленияОСпецрежимахПослеУстановки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
									|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
	КонецЕсли;
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл    = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки   = ДополнительныеПараметры.ИмяКнопки;
	Форма       = ДополнительныеПараметры.Форма;
	
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	КомпонентаУжеУстанавливалась = Истина;
	
	ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(
		ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Вывести машиночитаемую форму.

Процедура ВывестиМашиночитаемуюФорму(Форма, ИмяКнопки) Экспорт
	
	// Специальная проверка для регл. отчета "Единая (упрощенная) налоговая декларация".
	Если Форма.ИмяФормы = "Отчет.РегламентированныйОтчетЕУНД.Форма.ФормаОтчета2007Кв3" Тогда
		НаименованиеНО = "";
		Форма.СтруктураДанныхТитульный.Свойство("ОргИМНС", НаименованиеНО);
		Если НЕ ЗначениеЗаполнено(НаименованиеНО) Тогда
			ТекстПредупреждения = НСтр(
			"ru = 'На титульном листе не указано наименование налогового органа, в который представляется декларация.
			|Внесите исправление в справочник организаций и обновите сведения в декларации (меню ""Еще"" - ""Обновить"").';
			|en = 'Cover page does not contain the name of the tax authority to which the declaration is submitted.
			|Correct the company catalog and update the declaration information (in ""More"" – ""Update"").'");
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюМЧБРегламентированногоОтчета(ОписаниеОповещения, Форма, Отказ);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	
	#Если ВебКлиент Тогда
		ВывестиМашиночитаемуюФормуВВебКлиенте(Форма, ИмяКнопки);
	#Иначе
		ВывестиМашиночитаемуюФормуВТонкомКлиенте(Форма, ИмяКнопки);
	#КонецЕсли	
		
КонецПроцедуры

#Если ВебКлиент Тогда

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыводЧерезВебСервис = ДополнительныеПараметры.ВыводЧерезВебСервис;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	
	Если ВыводЧерезВебСервис Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервис", ЭтотОбъект, ДополнительныеПараметры);
		СформироватьТекстВыгрузки(Форма, Неопределено, Истина, , ФайлВыгрузкиВоВременномХранилище, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
									|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(Форма.ИмяФормы, НаименованиеИФНС, ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище) Тогда
		
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли;
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
		
	КонецЕсли;
	
	ВебБраузер = ВебБраузер();
	
	Если ЗначениеЗаполнено(ВебБраузер)
		И НЕ ВебБраузер = "MSIE" Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
									|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);

КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЧерезВебСервисПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершение(ДополнительныеПараметры) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеУстановкиРасширенияЗавершениеПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		Возврат;
	КонецЕсли;
		
	ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяКнопки)
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогВремФайлов = ВыбранныеФайлы[0];
	
	РазделительПутиОС = ПолучитьРазделительПути();
	
	ВремФайл = КаталогВремФайлов + РазделительПутиОС + "ФайлВыгрузки_" + Новый УникальныйИдентификатор + ".tmp";
	
	Если НЕ ДопПараметры.Форма.Окно = Неопределено Тогда
		ДопПараметры.Форма.Окно.Активизировать();
	КонецЕсли;
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ДопПараметры.ИмяКнопки);
	ДополнительныеПараметры.Вставить("КаталогВремФайлов", КаталогВремФайлов);
	ДополнительныеПараметры.Вставить("Форма", ДопПараметры.Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	
	СформироватьТекстВыгрузки(ДопПараметры.Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
		
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	КаталогВремФайлов = ДополнительныеПараметры.КаталогВремФайлов;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = Новый Файл(ДополнительныеПараметры.ВремФайл);
	
	Если НЕ ФайлВыгрузки.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ВерФормВыгрузки = Строка(РегламентированнаяОтчетностьВызовСервера.ВерсияФорматаВыгрузки(Форма.СтруктураРеквизитовФормы.мСохраненныйДок, Лев(СтрЗаменить(Форма.ИмяФормы, "Отчет.", ""), СтрНайти(СтрЗаменить(Форма.ИмяФормы, "Отчет.", ""), ".") - 1)));
	
	ТекстДок = Новый ТекстовыйДокумент;
	
	ТекстДок.Прочитать(ВремФайл, ?(СтрЧислоВхождений(ВерФормВыгрузки, "Версия 2") > 0 ИЛИ СтрЧислоВхождений(ВерФормВыгрузки, "Версия 3") > 0, "cp866", "windows-1251"));
	
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок, Новый УникальныйИдентификатор);
	
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = РегламентированнаяОтчетностьВызовСервера.СформироватьСтруктуруПараметровФайлаВыгрузкиНаСервере(Адрес, ВерФормВыгрузки);
	
	Если НЕ СтруктураПараметров.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РазделительПутиОС = ПолучитьРазделительПути();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = РазделительПутиОС, КаталогВремФайлов, КаталогВремФайлов + РазделительПутиОС);
	ВремКаталог = КаталогВремФайлов + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВремКаталог);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	
	ОповещениеПослеВыгрузкиШаблонов = Новый ОписаниеОповещения(
		"ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузкиПродолжение", ЭтотОбъект,
		Новый Структура("ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма",
						 ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма));
	
	// Выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, СтруктураПараметров["КНД"],
		?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]),
		ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ОповещениеПослеВыгрузкиШаблонов);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПослеФормированияВыгрузкиПродолжение(Результат, ДополнительныеПараметрыОповещения) Экспорт
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм =
		ДополнительныеПараметрыОповещения.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	ВремКаталог = ДополнительныеПараметрыОповещения.ВремКаталог;
	ВремФайл    = ДополнительныеПараметрыОповещения.ВремФайл;
	ИмяКнопки   = ДополнительныеПараметрыОповещения.ИмяКнопки;
	Форма       = ДополнительныеПараметрыОповещения.Форма;
	
	КомпонентаУжеУстанавливалась = Истина;
	
	// Пытаемся создать объект для формирования машиночитаемой формы.
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	
	Если ТаксДокПринт = Неопределено Тогда
		// Если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту.
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Apply'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВВебКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для формирования машиночитаемой формы необходимо установить%1библиотечный модуль печати двухмерного штрихкода PDF417.';
																					|en = 'To generate a machine-readable form, install the %1 library print module of 2D PDF417 barcode. '"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// Если не удалось создать объект и пользователь не против, то запускаем установку компоненты.
		ОповещениеПослеУстановки = Новый ОписаниеОповещения(
			"ВопросУстановитьКомпонентуВВебКлиентеЗавершениеПослеУстановки", ЭтотОбъект,
			Новый Структура("ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма",
							 ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, Форма));
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина,
				ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог, ОповещениеПослеУстановки) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
										|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
		Иначе
			Возврат; // будет выполнена процедура оповещения
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВВебКлиентеЗавершениеПослеУстановки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
									|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
	КонецЕсли;
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл    = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки   = ДополнительныеПараметры.ИмяКнопки;
	Форма       = ДополнительныеПараметры.Форма;
	
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	КомпонентаУжеУстанавливалась = Истина;
	
	ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

Процедура ВопросОткрытьСправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьСправку("v8help://1cv8/FeatureIE");
	КонецЕсли;
	
КонецПроцедуры

Процедура АктивизироватьОсновноеОкно()

	ОкнаКлиентПрил = ПолучитьОкна();
	
	ОсновноеОкно = Неопределено;
	Для Каждого ОткрытоеОкно Из ОкнаКлиентПрил Цикл
		Если ОткрытоеОкно.Основное Тогда
			ОсновноеОкно = ОткрытоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ОсновноеОкно = Неопределено Тогда
		ОсновноеОкно.Активизировать();
	КонецЕсли;

КонецПроцедуры

#Иначе

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтоВебКлиент = Ложь;
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент);
	
	Если ВыводЧерезВебСервис Тогда
		Форма = ДополнительныеПараметры.Форма;
		ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезСервис", ЭтотОбъект, ДополнительныеПараметры);
		СформироватьТекстВыгрузки(Форма, Неопределено, Истина, , ФайлВыгрузкиВоВременномХранилище, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	СформироватьТекстВыгрузки(Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЧерезСервис(Результат, ДополнительныеПараметры) Экспорт
	// Попытаться напечатать через сервис
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузкиВоВременномХранилище = ДополнительныеПараметры.ФайлВыгрузкиВоВременномХранилище;
	АдресПараметровПроксиВоВременномХранилище = ДополнительныеПараметры.АдресПараметровПроксиВоВременномХранилище;
	ПараметрыСформированногоОтчета = Новый Структура;
	НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
	Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуЧерезВебСервис(Форма.ИмяФормы, НаименованиеИФНС, ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище) Тогда
		
		РасширениеФайлаОтчета = "pdf";
		ИмяФайлаВыгрузки = Неопределено;
		Если ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузки) И ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
			ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
			ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + "." + РасширениеФайлаОтчета;
		Иначе
			ИмяФайлаОтчета = "" + Новый УникальныйИдентификатор() + "." + РасширениеФайлаОтчета;
		КонецЕсли;
		
		// Дополним список параметров для получения отчета
		ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		
		// Откроем специальную форму длительной операции. Из нее с возрастающим периодом
		// производится вызов серверной процедуры для проверки готовности отчета на веб-сервисе.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
		ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
		
		ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
		Возврат;
		
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = Новый Файл(ВремФайл);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ФайлВыгрузки", ФайлВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки", ЭтотОбъект, ДополнительныеПараметры);
	СформироватьТекстВыгрузки(Форма, ВремФайл, Истина, , ,ОписаниеОповещения);
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеПослеФормированияВыгрузки(Результат, ДополнительныеПараметры) Экспорт
	
	РазделительПутиОС = ПолучитьРазделительПути();
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	Форма = ДополнительныеПараметры.Форма;
	ФайлВыгрузки = ДополнительныеПараметры.ФайлВыгрузки;
	
	Если Не ФайлВыгрузки.Существует() Тогда
		Возврат;
	КонецЕсли;
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = СформироватьСтруктуруПараметровФайлаВыгрузкиНаКлиенте(ВремФайл);
	
	КаталогВремФайлов = ПолучитьИмяВременногоФайла();
	ВремКаталог = КаталогВремФайлов + РазделительПутиОС + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ВремКаталог);
	
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	Если НЕ ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]), ДистрибутивКомпонентыПечатиМашиночитаемыхФорм) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаУжеУстанавливалась = Истина;
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВремКаталог", ВремКаталог);
		ДополнительныеПараметры.Вставить("ВремФайл", ВремФайл);
		ДополнительныеПараметры.Вставить("ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
		ДополнительныеПараметры.Вставить("ТаксДокПринт", ТаксДокПринт);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Set'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьКомпонентуВТонкомКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для формирования машиночитаемой формы необходимо установить%1библиотечный модуль печати двухмерного штрихкода PDF417.';
																					|en = 'To generate a machine-readable form, install the %1 library print module of 2D PDF417 barcode. '"), Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	Иначе
		ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросУстановитьКомпонентуВТонкомКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВремКаталог = ДополнительныеПараметры.ВремКаталог;
	ВремФайл = ДополнительныеПараметры.ВремФайл;
	ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
	ТаксДокПринт = ДополнительныеПараметры.ТаксДокПринт;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
										|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
			КомпонентаУжеУстанавливалась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма);
	
КонецПроцедуры

#КонецЕсли

Функция СоздатьОбъектДляФормированияМашиночитаемойФормы() Экспорт

#Если ВебКлиент Тогда
	ЭтоВебКлиент = Истина;
#Иначе	
	ЭтоВебКлиент = Ложь;
#КонецЕсли

#Если НЕ МобильныйКлиент Тогда
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если НЕ ЭтоВебКлиент И СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		КонтейнерМетодов = ПолучитьОбщуюФормуПоИмени("МетодыКомпонентыПечатиМашиночитаемыхФорм");
		Если КонтейнерМетодов.COMОбъектДоступен Тогда
			Возврат КонтейнерМетодов;
		КонецЕсли;
		КонтейнерМетодов = Неопределено;
	Иначе
		Попытка
			Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint2");
		Исключение
			Попытка
				Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
#КонецЕсли

	Возврат Неопределено;

КонецФункции

Функция УстановитьКомпонентуПечатиМашиночитаемыхФорм(ЖдатьЗавершения, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм,
													 ВремКаталог = "", ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если ЖдатьЗавершения = Неопределено Тогда
		ЖдатьЗавершения = Истина;
	КонецЕсли;
		
	// сохраняем дистрибутив во временный файл с расширением = исходное имя файла дистрибутива
	#Если ВебКлиент Тогда
		ВремФайлДистрибутива = ВремКаталог + ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Представление;
	#Иначе
		ВремФайлДистрибутива = ПолучитьИмяВременногоФайла(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Представление);
	#КонецЕсли
		
	Попытка
		#Если ВебКлиент Тогда
			ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремФайлДистрибутива, ПоместитьВоВременноеХранилище(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Значение, Новый УникальныйИдентификатор));
			
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"УстановитьКомпонентуПечатиМашиночитаемыхФормВебклиентОбработатьПолучениеФайлов", ЭтотОбъект,
				Новый Структура("ВремФайлДистрибутива, ЖдатьЗавершения, ВыполняемоеОповещение",
								 ВремФайлДистрибутива, ЖдатьЗавершения, ВыполняемоеОповещение));
			НачатьПолучениеФайловССервера(ОповещениеОЗавершении, ПолучаемыеФайлы);
			
			Возврат Истина;
		#Иначе
			ДистрибутивКомпонентыПечатиМашиночитаемыхФорм[0].Значение.Записать(ВремФайлДистрибутива);
		#КонецЕсли
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сохранить дистрибутив компоненты печати машиночитаемых форм во временный файл!%1';
																							|en = 'Cannot save distribution of print component of machine-readable forms to a temporary file.%1'"), Символы.ПС + ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	Результат = УстановитьКомпонентуПечатиМашиночитаемыхФормЗавершение(ВремФайлДистрибутива, ЖдатьЗавершения);
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьКомпонентуПечатиМашиночитаемыхФормЗавершение(ВремФайлДистрибутива, ЖдатьЗавершения)
	
	// запускаем инсталляцию
	Попытка
		ЗапуститьПриложение(ВремФайлДистрибутива, , ЖдатьЗавершения);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'При попытке установки компоненты печати машиночитаемых форм произошла ошибка!%1';
																							|en = 'An error occurred while trying to install a component for printing machine-readable forms.%1'"), Символы.ПС + ОписаниеОшибки()));
		Возврат Ложь;
	КонецПопытки;
	
	// возвращаем признак
	Если ЖдатьЗавершения Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Возврат КомпонентаПечатиМашиночитаемыхФормДоступна();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция КомпонентаПечатиМашиночитаемыхФормДоступна() Экспорт
	
	Возврат (СоздатьОбъектДляФормированияМашиночитаемойФормы() <> Неопределено);
	
КонецФункции

Процедура УстановитьКомпонентуПечатиМашиночитаемыхФормВебклиентОбработатьПолучениеФайлов(
	ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВремФайлДистрибутива = ДополнительныеПараметры.ВремФайлДистрибутива;
	
	Если ПолученныеФайлы = Неопределено Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		ПоказатьПредупреждение(,НСтр("ru = 'Установка компоненты отменена.';
									|en = 'Component installation is canceled.'"));
		Возврат;
	КонецЕсли;
	
	ЖдатьЗавершения       = ДополнительныеПараметры.ЖдатьЗавершения;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Результат = УстановитьКомпонентуПечатиМашиночитаемыхФормЗавершение(ВремФайлДистрибутива, ЖдатьЗавершения);
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечатиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерезапускаПрограммыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сейчас будет запущена программа установки компоненты печати.%1Возможно, в ходе установки потребуется завершение сеанса работы ""1С:Предприятие"".%2Продолжить?';
																					|en = 'The print component installer will start now.%1When installing, you may need to end 1C:Enterprise session.%2Continue?'"), Символы.ПС, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросПерезапускаПрограммыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УстановитьКомпонентуПечатиМашиночитаемыхФорм(Ложь, ДополнительныеПараметры.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ДополнительныеПараметры.ВремКаталог);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм, СписокПечатаемыхЛистов, ДополнительныеПараметры = Неопределено) Экспорт

	Если ПризнакНумеруемыхФорм = Неопределено Тогда
		ПризнакНумеруемыхФорм = Истина;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("СписокПечатаемыхЛистов", СписокПечатаемыхЛистов);
	ПараметрыФормы.Вставить("ВидПечати",              ВидПечати);
	ПараметрыФормы.Вставить("ЗаголовокФормы",         Форма.Заголовок);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЗаголовокФормы") Тогда
			Если ЗначениеЗаполнено(ДополнительныеПараметры.ЗаголовокФормы) Тогда
				ПараметрыФормы.Вставить("ЗаголовокФормы", ДополнительныеПараметры.ЗаголовокФормы);
			КонецЕсли;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЕстьВыходЗаГраницы") И ДополнительныеПараметры.ЕстьВыходЗаГраницы = Истина Тогда
			ПараметрыФормы.Вставить("ЕстьВыходЗаГраницы", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СвойстваФормы = Новый Структура("СтруктураРеквизитовФормы");
	ЗаполнитьЗначенияСвойств(СвойстваФормы, Форма);
	
	Если ТипЗнч(СвойстваФормы.СтруктураРеквизитовФормы) = Тип("Структура") Тогда
		Если СвойстваФормы.СтруктураРеквизитовФормы.Свойство("ДополнительныеПараметрыПечати") Тогда
			ПараметрыФормы.Вставить("ДополнительныеПараметрыПечати",
				СвойстваФормы.СтруктураРеквизитовФормы.ДополнительныеПараметрыПечати);
		КонецЕсли;
		
		Если СвойстваФормы.СтруктураРеквизитовФормы.Свойство("ПоследнийЦиклОбмена")
		   И ЗначениеЗаполнено(СвойстваФормы.СтруктураРеквизитовФормы.ПоследнийЦиклОбмена) Тогда
			ПоказатьПечатныйБланкРегламентированногоОтчетаСЭЦП(Форма, ПараметрыФормы);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуПредварительногоПросмотраЗавершение(Форма, ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуПредварительногоПросмотраЗавершение(Форма, ПараметрыФормы)
	
	// ПроцессыОбработкиДокументов
	//
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
		
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
		
		МодульПроцессыОбработкиДокументовКлиент.ПриОткрытииФормыПредварительногоПросмотраРегламентированногоОтчета(
			Форма, ПараметрыФормы);
		
	Иначе
		
		ВывестиНаПечатьИлиНаПредварительныйПросмотрФормуРегламентированногоОтчета(Форма, ПараметрыФормы);
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ВывестиНаПечатьИлиНаПредварительныйПросмотрФормуРегламентированногоОтчета(Форма, ПараметрыФормы) Экспорт
	
	ПредварительныйПросмотр = ПолучитьОбщуюФормуПоИмени("ПечатьРегламентированныхОтчетов",
		ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
	ПараметрыФормы.СписокПечатаемыхЛистов.Очистить();
	
	Если НЕ ПредварительныйПросмотр = Неопределено Тогда
		
		Если ПараметрыФормы.ВидПечати = "ПечататьСразу" Тогда
			
			ПредварительныйПросмотр.ПечататьСразу();
			
		ИначеЕсли ПараметрыФормы.ВидПечати = "СформироватьБланк" Тогда // для печати из цикла обмена в ЭДО
			
			ПредварительныйПросмотр.СформироватьБланк();
			
		ИначеЕсли ПараметрыФормы.ВидПечати = "СформироватьБланкPDF" Тогда
					
			ПредварительныйПросмотр.СформироватьБланкPDF(
				ПараметрыФормы.ДополнительныеПараметрыПечати.АдресБланкаPDFВоВременномХранилище);
			
		ИначеЕсли ПараметрыФормы.ВидПечати = "ПоказатьБланкPDF" Тогда
			
			ПредварительныйПросмотр.ПоказатьБланкPDF();
			
		Иначе
			
			ПредварительныйПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
		
			ПредварительныйПросмотр.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПечатныйБланкРегламентированногоОтчетаСЭЦП(Форма, ПараметрыФормы)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьПечатныйБланкРегламентированногоОтчетаСЭЦПЗавершение", 
		ЭтотОбъект,
		ПараметрыФормы);
	
	ДокументооборотСКОКлиент.ПолучитьТабДокОтчетаСЭЦП(
		Форма,, 
		ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПоказатьПечатныйБланкРегламентированногоОтчетаСЭЦПЗавершение(Результат, ПараметрыФормы) Экспорт
	
	Форма = Результат.Форма;
	
	Если НЕ Результат.Выполнено Тогда
		
		ОткрытьФормуПредварительногоПросмотраЗавершение(Форма, ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	ПечатныйДокументСЭЦП = Результат.ПечатныйДокументСЭЦП;
	
	Если ТипЗнч(ПечатныйДокументСЭЦП) = Тип("ТабличныйДокумент") Тогда
		ДополнительныеПараметрыПечати = Неопределено;
		
		Если НЕ ПараметрыФормы.Свойство("ДополнительныеПараметрыПечати", ДополнительныеПараметрыПечати)
			ИЛИ ТипЗнч(ДополнительныеПараметрыПечати) <> Тип("Структура") Тогда
			
			ДополнительныеПараметрыПечати = Новый Структура();
			ПараметрыФормы.Вставить("ДополнительныеПараметрыПечати", ДополнительныеПараметрыПечати);
		КонецЕсли;
		
		ДополнительныеПараметрыПечати.Вставить("ТабДокШтампыЭЦП", ПечатныйДокументСЭЦП);
	КонецЕсли;
	
	ОткрытьФормуПредварительногоПросмотраЗавершение(Форма, ПараметрыФормы);
	
КонецПроцедуры

// Процедура формирует набор табличных документов регламентированного отчета,
// собирает в пакет и выводит в формате PDF в файл, который откроется ассоциированным приложением.
// Альтернативный вариант для печати из цикла обмена в журнале обмена с контролирующими органами.
// Сформированный PDF-файл содержит штампы электронных подписей.
//
// Параметры:
//   СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на регламентированный отчет.
//   ТабДокЭЦП - ТабличныйДокумент - табличный документ, содержащий визуализацию (штамп) электронных подписей.
//
Процедура ПоказатьПечатныйБланкРегламентированногоОтчетаPDFcЭЦП(СсылкаНаОтчет, ТабДокЭЦП) Экспорт
	
	Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(СсылкаНаОтчет);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ТабДокШтампыЭЦП", ТабДокЭЦП);
		
		НапечататьОтчеты(СписокОтчетов, "ПоказатьБланкPDF", ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует набор табличных документов регламентированного отчета для отображения и печати из цикла обмена
// в журнале обмена с контролирующими органами. В табличных документах набора размещаются штампы электронных подписей.
//
// Параметры:
//   СсылкаНаОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на регламентированный отчет.
//   ТабДокЭЦП - ТабличныйДокумент - табличный документ, содержащий визуализацию (штамп) электронных подписей.
//   УИД - УникальныйИдентификатор - уникальный идентификатор формы, во временное хранилище которой надо поместить
//                                   набор табличных документов для печати.
//
// Возвращаемое значение:
//   Структура, содержащая адреса табличных документов пакета в ключе "Состав",
//             (свойства структуры копируют свойства объекта "ПакетОтображаемыхДокументов").
//   В случае ошибки или невозможности сформировать печатные формы - функция возвращает значение Неопределено.
//
Функция СформироватьПечатныйБланкРегламентированногоОтчетаСЭЦП(СсылкаНаОтчет, ТабДокЭЦП, УИД = Неопределено) Экспорт
	
	УИДВременногоХранилища = ?(ТипЗнч(УИД) = Тип("УникальныйИдентификатор"), УИД, Новый УникальныйИдентификатор);
	АдресПакетаДокументов = ПоместитьВоВременноеХранилище(Неопределено, УИДВременногоХранилища);
	
	Если ТипЗнч(СсылкаНаОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(СсылкаНаОтчет);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ТабДокШтампыЭЦП", ТабДокЭЦП);
		ДополнительныеПараметры.Вставить("АдресПакетаДокументов", АдресПакетаДокументов);
		ДополнительныеПараметры.Вставить("УИДВременногоХранилища", УИДВременногоХранилища);
		
		НапечататьОтчеты(СписокОтчетов, "СформироватьБланк", ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПакетДокументов = ПолучитьИзВременногоХранилища(АдресПакетаДокументов);
	
	Если ТипЗнч(ПакетДокументов) = Тип("Структура") Тогда
		Возврат ПакетДокументов;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура АктивизироватьЯчейку(Форма, Ячейка) Экспорт
		
	ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(Форма.РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", Ячейка.Раздел);
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено
		И ЗначениеЗаполнено(Ячейка.Страница)
		И ТекущаяСтраницаРаздела.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ТекущаяСтраницаРаздела = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущаяСтраницаРаздела.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", Число(Ячейка.Страница));
		
	КонецЕсли;
	
	Если НЕ ТекущаяСтраницаРаздела = Неопределено Тогда
		
		Форма.СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
		Форма.Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРаздела.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	НайденныйЭлемент = Форма.Элементы.Найти("ТабличныйДокумент");
	
	Если НЕ НайденныйЭлемент = Неопределено Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ТабличныйДокумент;
		
	КонецЕсли;
		
	Если ТипЗнч(Форма.СтруктураРеквизитовФормы) = Тип("Структура")
		И Форма.СтруктураРеквизитовФормы.Свойство("ЯчейкаПозиционирования") Тогда 
		
		Форма.СтруктураРеквизитовФормы.ЯчейкаПозиционирования = Ячейка.ИмяЯчейки;
	КонецЕсли;
	
	НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено
		    И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
		Иначе
			
			НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
		Иначе
			
			НайденнаяОбласть = Форма.ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	
			Иначе
				
				Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть = Форма.ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
						
КонецПроцедуры

// Функция выводит на печать/предварительный просмотр регламентированные отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на регламентированные отчеты.
//   ВидПечати                - Строка - вид печати ("ПоказатьБланк", "ПоказатьБланкPDF", "СформироватьБланк",
//													 "СформироватьБланкPDF" или "ПечататьСразу").
// Возвращаемое значение:
//   Булево - Ложь - если не был найден регл. отчет.
//
Функция НапечататьОтчеты(СписокСсылокНаРеглОтчеты, ВидПечати = "ПоказатьБланк", ДополнительныеПараметры = Неопределено) Экспорт
	
	Для Каждого Стр Из СписокСсылокНаРеглОтчеты Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			ПредставлениеДокументаРеглОтч = "";
			
			Отчет = ИнициализацияОтчета(Стр.Значение, ПредставлениеДокументаРеглОтч);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СвойстваФормы = Новый Структура("СтруктураРеквизитовФормы");
			ЗаполнитьЗначенияСвойств(СвойстваФормы, Отчет);
			
			Если ТипЗнч(СвойстваФормы.СтруктураРеквизитовФормы) = Тип("Структура") Тогда
				Если ДополнительныеПараметры <> Неопределено Тогда
					СвойстваФормы.СтруктураРеквизитовФормы.Вставить("ДополнительныеПараметрыПечати", ДополнительныеПараметры);
				КонецЕсли;
				
				Если ВидПечати = "СформироватьБланк" ИЛИ ВидПечати = "ПоказатьБланкPDF" Тогда
					Если СвойстваФормы.СтруктураРеквизитовФормы.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки") Тогда
						СвойстваФормы.СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Отчет.Печать(ВидПечати, Истина);
			
			Если ДополнительныеПараметры <> Неопределено
			   И ДополнительныеПараметры.Свойство("АдресБланкаPDFВоВременномХранилище")
			   И ТипЗнч(СвойстваФормы.СтруктураРеквизитовФормы) = Тип("Структура") Тогда
			   
				ДополнительныеПараметры.АдресБланкаPDFВоВременномХранилище =
					Отчет.СтруктураРеквизитовФормы.ДополнительныеПараметрыПечати.АдресБланкаPDFВоВременномХранилище;
					
			КонецЕсли;		
			
			Отчет = Неопределено;
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.';
																							|en = '%1. Cannot print the report. Maybe, the report does not support printing without opening the form.'"), ПредставлениеДокументаРеглОтч);
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ИнициализацияОтчета(Док, ПредставлениеДокументаРеглОтч = Неопределено) Экспорт
	
	ПараметрыФормыИзСохраненногоОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(Док, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыФормыИзСохраненногоОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыФормыИзСохраненногоОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок",          ПараметрыФормыИзСохраненногоОтчета.мСохраненныйДок);
	ПараметрыФормы.Вставить("мПериодичность",           ПараметрыФормыИзСохраненногоОтчета.мПериодичность);
	ПараметрыФормы.Вставить("Организация",              ПараметрыФормыИзСохраненногоОтчета.Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыФормыИзСохраненногоОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыФормыИзСохраненногоОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ВыбФормаОтчета = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';
								|en = 'Old version of the report form is not supported by the current configuration version.'");
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ВерсияФормыСовпадаетСВерсиейСохраненногоОтчета(Док, ВыбФормаОтчета.СтруктураРеквизитовФормы.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
		
	Возврат ВыбФормаОтчета;
	
КонецФункции

// Функция выгружает в электронном виде регламентированные отчеты.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СписокЗначений - список ссылок на регламентированные отчеты.
//	 КаталогСохранения        - Строка - каталог, в котором будет сохранен сформированный файл выгрузки.
//   СообщенияОбОшибках       - Массив - массив структур, содержащий сообщения об ошибках.
// 		 					             Если параметр не указан, то сообщения об ошибках,
// 							             обнаруженных при проверке выгрузки, выводятся
// 							             в специальной форме, иначе возвращаются в параметре.
//   ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно - Булево - признак интерактивного сохранения файла выгрузки в веб-клиенте.
//   ВыгружатьСОшибками - Булево - признак выгрузки с ошибками.
//   ФайлВыгрузкиВоВременномХранилище - Структура - файл выгрузки во временном хранилище.
//   УникальныйИДФормы - Строка - уникальный идентификатор формы.
//
// Возвращаемое значение:
//   Булево - Истина - выгрузка выполнена,
//            Ложь   - выгрузка прервана.
//
// Пример:
//   СообщенияОбОшибках = Новый Массив;
//	 РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, "C:\Temp\", СообщенияОбОшибках);
//
Функция ВыгрузитьОтчеты(СписокСсылокНаРеглОтчеты, КаталогСохранения = Неопределено, СообщенияОбОшибках = Неопределено, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина, ВыгружатьСОшибками = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, УникальныйИДФормы = Неопределено) Экспорт

	Попытка
		Если ТипЗнч(СписокСсылокНаРеглОтчеты) <> Тип("СписокЗначений") ИЛИ СписокСсылокНаРеглОтчеты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверки = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыгрузки(СписокСсылокНаРеглОтчеты);
		
		Если РезультатПроверки = 1 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru = 'У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!';
										|en = 'The selected reports have different Company attributes. Batch export is not available.'"));
			
		ИначеЕсли РезультатПроверки = 2 Тогда
			
			ПоказатьПредупреждение(,НСтр("ru = 'У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!';
										|en = 'The selected reports have different generation period end dates. Batch export is not available.'"));
			
		Иначе
			
			ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента");
			
			ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СписокСсылокНаРеглОтчеты, , , , , Истина, КаталогСохранения, СообщенияОбОшибках, ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно, ВыгружатьСОшибками, ФайлВыгрузкиВоВременномХранилище, УникальныйИДФормы);
			
		КонецЕсли;
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Функция проверяет возможность выгрузки в электронном виде регламентированных отчетов.
//
// Параметры:
//   СписокСсылокНаРеглОтчеты - СпискоЗначений - список ссылок на регламентированные отчеты.
//   СообщенияОбОшибках       - Массив - массив структур, содержащий сообщения об ошибках.
// 							             Если параметр не указан, то сообщения об ошибках,
// 							             обнаруженных при проверке выгрузки, выводятся
// 							             в специальной форме, иначе возвращаются в параметре.
//
// Возвращаемое значение:
//   Булево - Истина - проверка выполнена,
//            Ложь   - проверка прервана.
//
// Пример:
//   СообщенияОбОшибках = Новый Массив;
//   РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СписокСсылок, СообщенияОбОшибках);
//
Функция ПроверитьРегламентированныеОтчеты(СписокСсылокНаРеглОтчеты, СообщенияОбОшибках = Неопределено) Экспорт
	
	Попытка
		
		Если ТипЗнч(СписокСсылокНаРеглОтчеты) <> Тип("СписокЗначений") ИЛИ СписокСсылокНаРеглОтчеты.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента");
	
		ФормаВыгрузкиРеглОтчета.Проверить(СписокСсылокНаРеглОтчеты, СообщенияОбОшибках);
		
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ПослеЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	Форма.СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено;
	
	Попытка
		Источник = Новый Структура();
		Источник.Вставить("Ссылка", Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
		Источник.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
		Источник.Вставить("ВидДокумента");
		Форма.СтруктураРеквизитовФормы.Свойство("ВидДокумента", Источник.ВидДокумента);
		
		Если Форма.СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = Истина Тогда
			Оповестить("Позиционирование в списке отчетов", Источник);
		Иначе
			Оповестить("Запись_РегламентированныйОтчет", Источник);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСписка(Форма, ВыполняемоеОповещение = Неопределено, ДопТекстОписания = "") Экспорт

	// Получим таблицу соответствующих периоду форм.
	ТаблицаВыбораФормы = РегламентированнаяОтчетностьКлиентСервер.ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", Форма.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("ТаблицаВыбораФормы", ТаблицаВыбораФормы);
	
	ВыборФормыОтчета = ПолучитьОбщуюФормуПоИмени("ВыборФормыОтчета", ПараметрыФормы, Форма);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ДопТекстОписания", ДопТекстОписания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыборФормыОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВыборФормыОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВыборФормыОтчета.Открыть();
	
КонецПроцедуры

Процедура ВыбратьФормуОтчетаИзДействующегоСпискаЗавершение(ВыбСтрока, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Форма = ДополнительныеПараметры.Форма;
	Результат = Неопределено;
	
	Если Не ВыбСтрока = Неопределено Тогда
		
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ОписаниеОтчета", ВыбСтрока.ОписаниеОтчета);
		
		ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтрОтбора);
		
		Результат = ВыбСтрока[0].ФормаОтчета;
		
		Форма.ОписаниеНормативДок = ВыбСтрока[0].ОписаниеОтчета;
		
		СохрОписаниеНормативДок = Форма.ОписаниеНормативДок;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = ДополнительныеПараметры.ДопТекстОписания;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(СохрОписаниеНормативДок)
		   И ЗначениеЗаполнено(ДополнительныеПараметры.ДопТекстОписания) Тогда
			Форма.ОписаниеНормативДок = Форма.ОписаниеНормативДок + "
			|" + СохрОписаниеНормативДок + ".";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКодОКВЭДНаТитульномЛисте(Форма, СтандартнаяОбработка) Экспорт
	
	Титульный = Форма.ТабличныйДокумент;
	НачЗначение = СокрЛП(Титульный.Области.ОКВЭД);

	СтандартнаяОбработка = Ложь;
	ВводЗначений = ПолучитьОбщуюФормуПоИмени("ФормаВводаОКВЭД");
	
	ВводЗначений.ОКВЭД = НачЗначение;
	ДополнительныеПараметры = Новый Структура("Титульный, Форма", Титульный, Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьКодОКВЭДНаТитульномЛистеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВводЗначений.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВводЗначений.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВводЗначений.Открыть();

КонецПроцедуры

Процедура УстановитьКодОКВЭДНаТитульномЛистеЗавершение(ЗначОКВЭД, ДополнительныеПараметры) Экспорт
	
	Титульный = ДополнительныеПараметры.Титульный;
	Форма = ДополнительныеПараметры.Форма;
	
	Если НЕ ЗначОКВЭД = Неопределено Тогда
		
		Форма.Модифицированность = Истина;
		
		РезультатВвода = ЗначОКВЭД;
		
		Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
			РезультатВвода = "";
		КонецЕсли;
		
		Титульный.Области.ОКВЭД = РезультатВвода;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьИУстановитьТерриториальныйОрганФНС(Форма, СтандартнаяОбработка, ИмяТитульногоЛиста, ВыполняемоеОповещение = Неопределено) Экспорт
	Титульный = Форма["ТабличныйДокумент"];
		
	КодИМНС = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КодИМНС");
	КПП     = РегламентированнаяОтчетностьКлиентСервер.ВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КПП1");
		
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, Форма);
	
	ФормаВыбораНалоговогоОргана.Элементы.ТаблицаНОНаименование.Видимость       = Истина;
	ФормаВыбораНалоговогоОргана.Элементы.ТаблицаНОПолноеНаименование.Видимость = Ложь;
	ФормаВыбораНалоговогоОргана.Элементы.ТаблицаНОПредставитель.Видимость      = Ложь;
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() > 1 Тогда
		ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, Титульный, Форма", ВыполняемоеОповещение, Титульный, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИУстановитьТерриториальныйОрганФНСЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации"".';
														|en = 'Specify tax authority code in the ""Companies"" catalog.'"));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выбора инспекции необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
														|en = 'To select an inspection, make a corresponding entry in the ""Registrations with tax authority"" catalog.'"));
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
КонецПроцедуры

Процедура ВыбратьИУстановитьТерриториальныйОрганФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	Титульный = ДополнительныеПараметры.Титульный;
	Форма = ДополнительныеПараметры.Форма;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ВыбранноеНаименованиеНО = ?(ЗначениеЗаполнено(РезультатВыбора.ПолноеНаименование),
		РезультатВыбора.ПолноеНаименование, РезультатВыбора.Наименование);
		
		Если ВыбранноеНаименованиеНО <> "Пустое значение" Тогда
			
			Титульный.Области.КодИМНС.Значение = ВыбранныйКодНО;
			Титульный.Области.ОргИМНС.Значение = ВыбранноеНаименованиеНО;
			// Если есть в декларации лист ФизЛиц, тогда считаем ФИО на листе, если оно пустое, то КПП на листе Ф.Л. не проставляем.
			ЛистФЛЕсть = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, "ФизЛица", "МногострочностьВРазделе") <> Неопределено;
			ЛистФЛ = "";
			Если ЛистФЛЕсть Тогда
				Попытка
					ФИОФЛ = Форма["ПолеТабличногоДокументаФизЛица"].Области.ФизЛицФИО.Значение;
					Если ПустаяСтрока(ФИОФЛ) Тогда
						// Если на листе нет ФИО, значит лист не заполняем, пропускае простановку КПП.
						ЛистФЛ = "ФизЛица";
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Титульный.Области.КПП1.Значение = РезультатВыбора.КПП;
			
		Иначе
			
			Титульный.Области.КодИМНС.Значение = "";
			Титульный.Области.ОргИМНС.Значение = "";
			
			Титульный.Области.КПП1.Значение = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

Функция ВебБраузер() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ВебБраузер = СисИнфо.ИнформацияПрограммыПросмотра;
	
	Если СтрЧислоВхождений(ВРег(ВебБраузер), "MSIE") > 0 Или СтрЧислоВхождений(ВРег(ВебБраузер), "TRIDENT") > 0 Тогда
		ВебБраузер = "MSIE";
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "FIREFOX") > 0 Тогда
		ВебБраузер = "FIREFOX";
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "CHROME") > 0 Тогда
		ВебБраузер = "CHROME";
	ИначеЕсли СтрЧислоВхождений(ВРег(ВебБраузер), "SAFARI") > 0 Тогда
		ВебБраузер = "SAFARI";
	КонецЕсли;
	
	Возврат ВебБраузер;
КонецФункции

Функция ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417() Экспорт
			
	Возврат Истина;
		
КонецФункции

Процедура ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		ПоказатьПредупреждение(,"Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		ПоказатьПредупреждение(,"Отчет не найден!");
		Возврат;
	КонецЕсли;

	РегламентированнаяОтчетностьВызовСервера.ПроверитьДоступностьОтчета(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ОрганизацияОтбор);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ДатаНач);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ДатаКон);
	ПараметрыФормы.Вставить("мПериодичность", Периодичность);
	
	Если ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
		ОткрытьФорму("Отчет." + ИсточникОтчета + ".Форма." + РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1(), ПараметрыФормы);
	Иначе
		ОткрытьФорму("Отчет." + ИсточникОтчета + ".Форма.ОсновнаяФорма", ПараметрыФормы);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНапоминанияПользователяКалендарьБухгалтера() Экспорт
	
	Напоминания = РегламентированнаяОтчетностьВызовСервера.СформироватьНапоминанияПользователяКалендарьБухгалтера();
	
	Если Напоминания <> Неопределено И Напоминания.Количество() > 0 Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Напоминания", Напоминания);
						
		ОткрытьФорму("Обработка.КалендарьБухгалтера.Форма.ФормаНапоминания", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКонтрольныеСоотношенияПоШаблону(РезультатПроверки, ОбработкаКС, ФормаВладелец) Экспорт
	
	ОбработкаКС = ФормаВладелец.ОбработкаКС;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыФормы.Вставить("ТекстДляЗаголовочнойЧасти", ФормаВладелец.СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	Если ТипЗнч(РезультатПроверки) = Тип("Структура") И РезультатПроверки.Свойство("ЭтоАвтопроверкаСтатистики") Тогда
		ПараметрыФормы.Вставить("ЭтоАвтопроверкаСтатистики");
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНайденныхОшибок > 0 Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			
			ОбработкаКС = ОткрытьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
										ПараметрыФормы, ФормаВладелец, "_Форма_КонтрольныеСоотношения_");
				
		Иначе
										
			Если ОбработкаКС.Открыта() Тогда
				
				ОбработкаКС.Активизировать();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
				
			Иначе
				
				ОбработкаКС.Открыть();
				Оповестить("ОбновитьКС", ПараметрыФормы, ФормаВладелец);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаВладелец.ОбработкаКС = ОбработкаКС;
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура("ПараметрыФормы, Форма", ПараметрыФормы, ФормаВладелец);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВывестиФормуПросмотраСоотношенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'В отчете не обнаружены ошибки по соотношениям показателей.
			|Вывести форму для просмотра соотношений?';
			|en = 'No errors of indicator ratios are found in the report.
			|Display the form to view the ratios?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВопросВывестиФормуПросмотраСоотношенийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
	Форма = ДополнительныеПараметры.Форма;
	ОбработкаКС = Форма.ОбработкаКС;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			
			ОбработкаКС = ОткрытьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
									   ПараметрыФормы, Форма, "_Форма_КонтрольныеСоотношения_");
			
		Иначе
									   
			Если ОбработкаКС.Открыта() Тогда
				
				ОбработкаКС.Активизировать();
				
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
				
			Иначе
				
				ОбработкаКС.Открыть();
				
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ОбработкаКС = ОбработкаКС;
		
	Иначе	
		
		Если ОбработкаКС <> Неопределено Тогда
			
			Если ОбработкаКС.Открыта() Тогда
				
				ОбработкаКС.Закрыть();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьФайлы(ВыгружаемыеДанные) Экспорт 
	
	#Если НЕ ВебКлиент Тогда
		ПутьВыгрузки = ПолучитьПутьВыгрузки();
		Если ПутьВыгрузки = Ложь Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Для Каждого ФайлВыгрузки Из ВыгружаемыеДанные Цикл
		#Если ВебКлиент Тогда
			Попытка
				НачатьПолучениеФайлаССервера(ФайлВыгрузки.АдресФайлаВыгрузки, ФайлВыгрузки.ИмяФайлаВыгрузки);
			Исключение
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки 
							   + """! Возможно, нет прав для записи в выбранный каталог,"
							   + " нет доступа к файлу, т. к. файл открыт в другой программе,"
							   + " недостаточно места на диске или не подключено расширение для работы с файлами.";
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																														|en = '%1'"), ТекстСообщения));
			КонецПопытки;
		#Иначе
			ДвоичныйФайл = ПолучитьИзВременногоХранилища(ФайлВыгрузки.АдресФайлаВыгрузки);
			Попытка
				ДвоичныйФайл.Записать(ПутьВыгрузки + ФайлВыгрузки.ИмяФайлаВыгрузки);
				ТекстСообщения = "Файл выгрузки регламентированного отчета """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """ сохранен в каталог """ + ПутьВыгрузки + """.";
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																														|en = '%1'"), ТекстСообщения));
			Исключение
				ТекстСообщения = "Не удалось записать файл """ + ФайлВыгрузки.ИмяФайлаВыгрузки + """! Возможно, нет прав для записи в выбранный каталог, нет доступа к файлу, т. к. файл открыт в другой программе, недостаточно места на диске.";
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																														|en = '%1'"), ТекстСообщения));
			КонецПопытки;
		#КонецЕсли
	КонецЦикла;
КонецПроцедуры

// Процедура возвращает в параметрах даты  начала и конца периода
// расчитанные по строковому представлению периода, сформированному ранее 
// функцией ПредставлениеПериода().
//
// Параметры:
//  СтрПредставлениеПериода		- Строка - сформированная функцией ПредставлениеПериода().
//  ДатаНачала					- Дата - дата начала периода.
//  ДатаКонца					- Дата - дата конца периода.
//
// Пример:
//  СтрПредставлениеПериода = "Октябрь 2014 г. - Декабрь 2014 г.";
//  РегламентированнаяОтчетностьКлиент.ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца);
//
Процедура ПолучитьНачалоКонецПериода(СтрПредставлениеПериода, ДатаНачала, ДатаКонца) Экспорт
	
	// Вначале нужно определить - имеем дело с интервалом дат или
	// одинарным периодом
	ПозицияТире = СтрНайти(СтрПредставлениеПериода,"-");
	
	Если ПозицияТире > 0 Тогда
		// Интервал дат.
		СтрПервыйОдинарныйПериод = СокрЛП(Лев(СтрПредставлениеПериода, ПозицияТире-1));
		СтрВторойОдинарныйПериод = СокрЛП(Сред(СтрПредставлениеПериода, ПозицияТире+1));
		ДатаНачалаПервогоПериода = "";
		ДатаКонцаПервогоПериода = "";
		ДатаНачалаВторогоПериода = "";
		ДатаКонцаВторогоПериода = "";
		// Используем рекурсию.
		ПолучитьНачалоКонецПериода(СтрПервыйОдинарныйПериод, ДатаНачалаПервогоПериода, ДатаКонцаПервогоПериода);
		ПолучитьНачалоКонецПериода(СтрВторойОдинарныйПериод, ДатаНачалаВторогоПериода, ДатаКонцаВторогоПериода);
		ДатаНачала	= ДатаНачалаПервогоПериода;
		ДатаКонца	= ДатаКонцаВторогоПериода;
		Возврат;
		
	КонецЕсли;
	
	// Одинарный период.
			
	Если СтрНайти(Врег(СтрПредставлениеПериода), "ПОЛУГОДИЕ") > 0 Тогда
		// Первые 6 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 6, 1));
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "ГОД") > 0 Тогда
		
	    СтрГодДаты = СтрЗаменить(Врег(СтрПредставлениеПериода), "ГОДОВАЯ", "");
		СтрГодДаты = СокрЛП(СтрЗаменить(СтрГодДаты, "Г.", ""));
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецГода(ДатаНачала);
		
	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "МЕСЯЦЕВ") > 0 Тогда
		// 9 месяцев.
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		ГодДаты = Число(СтрГодДаты);
		
		ДатаНачала = Дата(ГодДаты, 1, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодДаты, 9, 1));

	ИначеЕсли СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ") > 0 Тогда
		
	    ПозСтрКвартал = СтрНайти(Врег(СтрПредставлениеПериода), "КВАРТАЛ");
		СтрНомерКвартала = Лев(СтрПредставлениеПериода, ПозСтрКвартал-1);
		НомерКвартала = Число(СокрЛП(СтрНомерКвартала));
		СтрГодКвартала = СтрЗаменить(Врег(СтрПредставлениеПериода), СтрНомерКвартала+"КВАРТАЛ", "");
		СтрГодКвартала	= СокрЛП(СтрЗаменить(СтрГодКвартала, "Г.", ""));
	    ГодКвартала = Число(СтрГодКвартала);
		МесяцНачалаКвартала = НомерКвартала*3 - 2;
		МесяцКонцаКвартала  = НомерКвартала*3;
		
		ДатаНачала = Дата(ГодКвартала, МесяцНачалаКвартала, 1);
		ДатаКонца  = КонецМесяца(Дата(ГодКвартала, МесяцКонцаКвартала, 1));
		
	Иначе
		// В представлении месяц  или год.
		СоответствиеМесяцев = Новый Соответствие;
		СоответствиеМесяцев.Вставить("ЯНВАРЬ", 	1);
		СоответствиеМесяцев.Вставить("ФЕВРАЛЬ", 2);
		СоответствиеМесяцев.Вставить("МАРТ", 	3);
		СоответствиеМесяцев.Вставить("АПРЕЛЬ", 	4);
		СоответствиеМесяцев.Вставить("МАЙ", 	5);
		СоответствиеМесяцев.Вставить("ИЮНЬ", 	6);
		СоответствиеМесяцев.Вставить("ИЮЛЬ", 	7);
		СоответствиеМесяцев.Вставить("АВГУСТ", 	8);
		СоответствиеМесяцев.Вставить("СЕНТЯБРЬ", 9);
		СоответствиеМесяцев.Вставить("ОКТЯБРЬ", 10);
		СоответствиеМесяцев.Вставить("НОЯБРЬ", 	11);
		СоответствиеМесяцев.Вставить("ДЕКАБРЬ", 12);
		
		СтрПредставлениеПериода = СокрЛП(СтрЗаменить(Врег(СтрПредставлениеПериода), "Г.", ""));
		СтрГодДаты = Прав(СокрЛП(СтрПредставлениеПериода), 4);
		
		СтрМесяцДаты = СокрЛП(СтрЗаменить(СтрПредставлениеПериода, СтрГодДаты, ""));
		
		ГодДаты = Число(СтрГодДаты);
		
		Если ПустаяСтрока(стрМесяцДаты) Тогда
		    // Годовая.
			ДатаНачала = Дата(ГодДаты, 1, 1);
			ДатаКонца  = КонецГода(ДатаНачала);
		Иначе
			// Месяц.
			МесяцДаты  = СоответствиеМесяцев.Получить(стрМесяцДаты);
		
			ДатаНачала = Дата(ГодДаты, МесяцДаты, 1);
			ДатаКонца  = КонецМесяца(ДатаНачала);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура ищет окно по имени формы, если находит то активизирует его.
// Необходима при работе Веб-клиента для предотвращения дублирования открытых окон.
// Необходимость связана с некорректностью нахождения окон открытых форм 
// по Уникальности процедурой ОткрытьФорму() в Веб-клиенте.
//
// Параметры:
//   ИмяФормыДляПоиска - Строка - имя формы, открытое окно которой нужно найти.
//   ВызывающаяФорма - Форма - форма, окно которой будет пропущено при просмотре окон.
//							   Параметр необходим в случае, если процедура вызывается 
//							   из формы до ее открытия. Иногда при обращении к содержимому окна
//							   такой формы возникает ошибка.
//   Результат - Булево - возвращается Истина, если окно найдено,
//					      Ложь, если окно не найдено,
//						  Неопределено, если неверные параметры.
//
Процедура ВебКлиентНайтиАктивизироватьОкно(ИмяФормыДляПоиска, ВызывающаяФорма, Результат = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ИмяФормыДляПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипЗнч(ВызывающаяФорма) = Тип("ФормаКлиентскогоПриложения")) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытыеОкна = ПолучитьОкна();
	
	Для Каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		
		// Обход ошибки платформы, при вызове из формы до открытия формы,
		// обращение к содержимому окна этой формы вызывает ошибку.
		// Поэтому переданная в качестве параметра вызывающая форма
		// позволяет обойти этот момент.
		Если ОткрытоеОкно = Неопределено ИЛИ ОткрытоеОкно = ВызывающаяФорма.Окно Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Содержимое = ОткрытоеОкно.Содержимое;
		
		Если Содержимое.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОсновнаяФорма = Содержимое[0];
		ИмяФормыОкна = ОсновнаяФорма.ИмяФормы;
		
		Если ИмяФормыОкна = ИмяФормыДляПоиска Тогда
			
			Результат = Истина;
			
			ЗаголовокОкна = ОткрытоеОкно.Заголовок;
			
			ВладелецФормы = ОсновнаяФорма.ВладелецФормы;
			Если ВладелецФормы <> Неопределено Тогда
				
				ВладелецФормы.Активизировать();
				
			КонецЕсли;
			
			Оповестить(ЗаголовокОкна, "Активизировать");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Ложь;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс взаимодействия с конфигурациями (библиотеками) - потребителями.

// Функция автоматически формирует регламентированный отчет заданного вида для указанной организации
// за нужный отчетный период, сохраняет его в ИБ и возвращает ссылку.
//
// Параметры:
//	 ИсточникОтчета - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
// 	 Организация    - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаОкончания  - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   ДатаНачала     - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//   КорректирующийОтчет - Булево - признак корректирующего отчета.
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет - ссылка на сформированный регламентированный отчет.
//
// Пример:
//   РегламентированнаяОтчетностьКлиент.СформироватьАвтоматическиРеглОтчет("РегламентированныйОтчетРСВ1", Организация, '20110930', '20110101');
//
Функция СформироватьАвтоматическиРеглОтчет(ИсточникОтчета, Организация, ДатаОкончания, ДатаНачала = '00010101', КорректирующийОтчет = Ложь) Экспорт
	
	ТекФорма = ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, , КорректирующийОтчет);
	
	Если ТекФорма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ТекФорма.СохранитьНаКлиенте();
		
	Возврат ТекФорма.СтруктураРеквизитовФормы.мСохраненныйДок;
		
КонецФункции

// Процедура обновляет сохраненные данные регламентированного отчета 
// заданного вида для указанной организации за нужный отчетный период.
//
// Параметры:
//   ИсточникОтчета        - Строка - строка с наименованием регламентированного отчета (совпадает с именем объекта метаданных).
//   Организация           - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//   ДатаОкончания         - Дата - дата окончания отчетного периода (правая граница отчетного периода).
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный регламентированный отчет, данные которого нужно получить.
//   ДатаНачала            - Дата - дата начала отчетного периода (левая граница отчетного преиода).
//
// Пример:
//   РегламентированнаяОтчетностьКлиент.ОбновитьДанныеРеглОтчета("РегламентированныйОтчетРСВ1", Организация, '20110930', СсылкаНаСохрРеглОтчет, '20110101');
//
Процедура ОбновитьДанныеРеглОтчета(ИсточникОтчета, Организация, ДатаОкончания, СсылкаНаСохрРеглОтчет, ДатаНачала = '00010101') Экспорт
	
	ТекФорма = ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет);
	
	Если ТекФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекФорма.СохранитьНаКлиенте();
		
КонецПроцедуры

// Процедура открывает форму сохраненного регл. отчета.
//
// Параметры:
//   СсылкаНаСохрРеглОтчет - ДокументСсылка.РегламентированныйОтчет - ссылка на сохраненный
//							 регламентированный отчет, форму которого необходимо открыть.
//   НеОтображатьПредупреждение - Булево - признак отображения предупреждения в форме регл. отчета.
//
// Пример:
//   ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, Истина);
//
Процедура ОткрытьФормуРеглОтчета(СсылкаНаСохрРеглОтчет, НеОтображатьПредупреждение = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                       СсылкаНаСохрРеглОтчет);
	ПараметрыФормы.Вставить("НеОтображатьПредупреждение", НеОтображатьПредупреждение);
	ПараметрыФормы.Вставить("ОткрытьФормуОтчета",         Истина);
	
	ОткрытьФорму("Документ.РегламентированныйОтчет.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму навигации по ошибкам выгрузки.
//
// Параметры:
//   СообщенияОбОшибках - Массив - массив структур, содержащий сообщения об ошибках.
//   ДопПараметрыФормы  - Произвольный - любые передаваемые дополнительные параметры.
//
Процедура ОткрытьФормуНавигацииПоОшибкамВыгрузки(СообщенияОбОшибках, ДопПараметрыФормы = Неопределено) Экспорт
	
	ТаблицаСообщенийСтруктура = Новый Структура("ТаблицаСообщений", СообщенияОбОшибках);
	
	ПараметрыФормы = Новый Структура("ВладелецТС", ТаблицаСообщенийСтруктура);
	
	Если ТипЗнч(ДопПараметрыФормы) = Тип("Структура")  Тогда
		Для Каждого КлючИЗначениеПараметра Из ДопПараметрыФормы Цикл
			ПараметрыФормы.Вставить(КлючИЗначениеПараметра.Ключ, КлючИЗначениеПараметра.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Оповестить("ЗакрытьФормуНавигацииПоОшибкамВыгрузки");
	
	ОткрытьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаНавигацииПоОшибкам", ПараметрыФормы);
	
КонецПроцедуры

// Процедура открывает форму выбора кода по ОКВЭД.
//
// Параметры:
//  ВыполняемоеОповещение - ОписаниеОповещения - описание оповещения, которое будет вызвано после выполнения
//  						 данной операции.
//  						 Дополнительные параметры передаются в свойстве ДополнительныеПараметры описания оповещения -
//  						 Структура - структура с полями:
//  						   * ВариантОКВЭД (обязателен)   - Строка - вариант классификатора ("ОКВЭД" или "ОКВЭД2");
//  						   * ТекущийКод   (необязателен) - Строка - код по ОКВЭД (для позиционирования в списке выбора).
//  						 Возвращаемый результат выбора - Структура - структура с полями (обязательными):
//  						   * КодОКВЭД          - Строка - код по ОКВЭД;
//  						   * НаименованиеОКВЭД - Строка - наименование по ОКВЭД.
//  СтандартнаяОбработка  - Булево - признак выполнения ВыполняемоеОповещение.
//  						 Если выполняется - необходимо установить Ложь. Значение по умолчанию - Истина.
//
Процедура ОткрытьФормуВыбораКодаПоОКВЭД(ВыполняемоеОповещение, СтандартнаяОбработка = Истина) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуВыбораКодаПоОКВЭД(
	ВыполняемоеОповещение, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура открывает форму для заполнения регистрирующего органа организации.
//
// Параметры:
//  Организация           - СправочникСсылка.Организации - ссылка на элемент справочника организаций.
//  ВыполняемоеОповещение - ОписаниеОповещения - описание оповещения, которое будет вызвано после выполнения
//                          данной операции.
//
Процедура ОткрытьФормуДляЗаполненияРегистрирующегоОргана(Организация, ВыполняемоеОповещение) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуДляЗаполненияРегистрирующегоОргана(
	Организация, ВыполняемоеОповещение);
	
КонецПроцедуры

// Процедура открывает форму настроек непосредственно перед автозаполнением регламентированного отчета
// (например, сразу после нажатия кнопки "Заполнить" в форме регламентированного отчета), если в последнем
// поддерживается такая возможность.
//
// Параметры:
//  ВыполняемоеОповещение - ОписаниеОповещения - описание оповещения, которое будет вызвано после выполнения
//                          данной операции.
//                          Параметры передаются в свойстве ДополнительныеПараметры описания оповещения -
//                          Структура - структура с проивольными полями, позволяющими идентифицировать отчет.
//                          Возвращаемый результат - Структура - структура с полями (обязательно одно из полей):
//                            * НастройкиАвтозаполнения - Структура - параметы автозаполнения, которые будут переданы
//                                                        в свойстве "НастройкиАвтозаполнения" параметров отчета
//                                                        процедуры "ЗаполнитьОтчет" общего модуля
//                                                        "РегламентированнаяОтчетностьПереопределяемый";
//                            * ТекстПриОтказе - Строка - текст для выдачи предупреждения и прерывания автозаполнения.
//
// Пример:
//   ПараметрыОтчета = Новый Структура();
//   ПараметрыОтчета.Вставить("ИДОтчета",                "РегламентированныйОтчетДвижениеСредствПоСчетуВБанкеЗаПределамиРФ");
//   ПараметрыОтчета.Вставить("ИДРедакцииОтчета",        "ФормаОтчета2023Кв4");
//   ПараметрыОтчета.Вставить("Организация",             Организация);
//   ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
//   ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ДатаКонцаПериодаОтчета);
//   Оп = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ПараметрыОтчета);
//   РегламентированнаяОтчетностьКлиент.ОткрытьФормуНастроекПередАвтозаполнениемРеглОтчета(Оп);
//
Процедура ОткрытьФормуНастроекПередАвтозаполнениемРеглОтчета(ВыполняемоеОповещение) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуНастроекПередАвтозаполнениемРеглОтчета(
	ВыполняемоеОповещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции механизма расшифровки.

Процедура ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьРасшифровкуОтчета(ИДОтчета, ИДРедакцииОтчета, ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции стыковки с сервисом сдачи отчетности через представителя.

/////////////////////////////////////////////////////////////
// ВНИМАНИЕ!!! 
// Не удалять метод. Используется в 1С:УП Калуги Астрал
/////////////////////////////////////////////////////////////
	
Процедура ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	ТипЗнчСсылкаНаОтчет = ТипЗнч(СсылкаНаОтчет);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("КонтролирующийОрган", КонтролирующийОрган);
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет", СсылкаНаОтчет);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаЧерезПредставителяПослеСохранения", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		Если ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка.РегламентированныйОтчет")
			ИЛИ ТипЗнчСсылкаНаОтчет = Тип("Неопределено") Тогда
			
			Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
			
		Иначе // все, кроме документа РегламентированныйОтчет
			ПоказатьПредупреждение(,НСтр("ru = 'Необходимо записать отчет перед отправкой.';
										|en = 'Save the report before sending.'"));
		КонецЕсли;
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	СсылкаНаОтчет = ДополнительныеПараметры.СсылкаНаОтчет;
	Форма = ДополнительныеПараметры.Форма;

	Если СсылкаНаОтчет = Неопределено Тогда
		СсылкаНаОтчет = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Форма);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СсылкаНаОтчет", СсылкаНаОтчет);
	
	// запрашиваем подтверждение
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправкаЧерезПредставителяПослеСохраненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	

	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ДополнительныеПараметры.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправкаЧерезПредставителяПослеСохраненияПодтверждениеОтправкиОтчетаЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	КонтекстЭДОКлиент.ПодтверждениеОтправкиОтчета(
		ДополнительныеПараметры.Форма, 
		ОписаниеОповещения, 
		ДополнительныеПараметры.СсылкаНаОтчет);
	
КонецПроцедуры

Процедура ОтправкаЧерезПредставителяПослеСохраненияПодтверждениеОтправкиОтчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
	
	// регистрируем заявку на отправку
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьЗаявкуНаОтправкуОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СдачаОтчетностиЧерезСервисСпецоператораКлиент.ЗарегистрироватьЗаявкуНаОтправкуОтчета(Форма, КонтролирующийОрган, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЗарегистрироватьЗаявкуНаОтправкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(ДополнительныеПараметры.Форма, ДополнительныеПараметры.КонтролирующийОрган);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ОбновитьПанельСостоянияОтправкиВРегламентированномОтчете(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ОткрытьПротоколОтправки(Форма, КонтролирующийОрган = "ФНС") Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколОтправки(Форма, КонтролирующийОрган);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		Форма, 
		КонтролирующийОрган = "ФНС", 
		КодРегионаВФорме = Неопределено, 
		ЭтоОтправкаИзФормыОтчетность = Ложь, 
		СсылкаНаОтчет = Неопределено, 
		Организация = Неопределено, 
		АдресГотовыхДанных = Неопределено, 
		ИмяФайлаГотовыхДанных = Неопределено) Экспорт
		
	ДокументооборотСКОКлиент.ЗапоминаниеОшибок("Сброс");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(
		Форма, 
		КонтролирующийОрган, 
		КодРегионаВФорме,  
		ЭтоОтправкаИзФормыОтчетность, 
		СсылкаНаОтчет, 
		Организация, 
		АдресГотовыхДанных, 
		ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВИнтернетеПоСсылке(Ссылка, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

Процедура ПроверитьВИнтернете(Форма, КонтролирующийОрган = "ФНС", АдресГотовыхДанных = Неопределено, ИмяФайлаГотовыхДанных = Неопределено) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВИнтернете(Форма, КонтролирующийОрган, АдресГотовыхДанных, ИмяФайлаГотовыхДанных);
	
КонецПроцедуры

// Для открытия истории отправки на форме УправлениеОбменом, закладка ФНС страница Отчетность
// Источник - это либо форма регламентированного отчета, либо непосредственно ссылка на отчет/ документ/ элемент справочника
// В случае, если история отправки открывается для объекта, не входящего в БРО, Источник - обязательно ссылка, а не форма
//
// Параметры:
//  Источник				 - ДокументСсылка, СправочникСсылка - отправляемый объект, для которого открывается история.
//  ТипКонтролирующихОрганов - Перечисления.ТипыКонтролирующихОрганов - орган, в который отправляется объект.
//  Организация				 - Справочники.Организации - Организация отправляемого объекта.
//  ИмяСобытия				 - Строка - Имя сообщения для отпределения того, на какой закладке открыть форму управления обменом.
//
Процедура ОткрытьИсториюОтправки(
	Знач Источник,
	Знач ТипКонтролирующихОрганов,
	Знач Организация = Неопределено,
	Знач ИмяСобытия = Неопределено) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Источник",                 Источник);
	ДополнительныеПараметры.Вставить("ТипКонтролирующихОрганов", ТипКонтролирующихОрганов);
	ДополнительныеПараметры.Вставить("Организация",              Организация);
	ДополнительныеПараметры.Вставить("ИмяСобытия",               ИмяСобытия);

	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьИсториюОтправкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

#Область ПроцедурыИФункцииРаботыСОтчетамиСтатистики

Процедура ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация, ОрганизацияДоступна = Истина, ПредупредитьОПовторномВыполнении = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",         Организация);
	ПараметрыФормы.Вставить("ОрганизацияДоступна", ОрганизацияДоступна);
	ПараметрыФормы.Вставить("ПредупредитьОПовторномВыполнении", ПредупредитьОПовторномВыполнении);
	
	РезультатВыбора = ОткрытьФорму(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.НастройкиФорматаВыгрузкиОтчетовСтатистики", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Область, СтруктураРеквизитовФормы) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        "");
		РоссийскийАдрес.Вставить("Регион",          "");
		РоссийскийАдрес.Вставить("Район",           "");
		РоссийскийАдрес.Вставить("Город",           "");
		РоссийскийАдрес.Вставить("НаселенныйПункт", "");
		РоссийскийАдрес.Вставить("Улица",           "");
		РоссийскийАдрес.Вставить("Дом",             "");
		РоссийскийАдрес.Вставить("Корпус",          "");
		РоссийскийАдрес.Вставить("Квартира",        "");
		РоссийскийАдрес.Вставить("ТипДома",         "");
		РоссийскийАдрес.Вставить("ТипКорпуса",      "");
		РоссийскийАдрес.Вставить("ТипКвартиры",     "");
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес);
		
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,"
								  + РоссийскийАдрес["Индекс"] + ","
								  + РоссийскийАдрес["Регион"] + ","
								  + РоссийскийАдрес["Район"] + ","
								  + РоссийскийАдрес["Город"] + ","
								  + РоссийскийАдрес["НаселенныйПункт"] + ","
								  + РоссийскийАдрес["Улица"] + ","
								  + РоссийскийАдрес["Дом"] + ","
								  + РоссийскийАдрес["Корпус"] + ","
								  + РоссийскийАдрес["Квартира"] + ","
								  + РоссийскийАдрес["ТипДома"] + ","
								  + РоссийскийАдрес["ТипКорпуса"] + ","
								  + РоссийскийАдрес["ТипКвартиры"];
								  
		Если СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,,,,,,,,," Тогда
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;
		
		Область.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьЗаполнение(ЭтаФорма) Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ЭтаФорма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ИДОтчета", ИДОтчета);
	ПараметрыФормы.Вставить("ИДРедакцииОтчета", ИДРедакцииОтчета);
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуНастройкиАвтозаполнения(ПараметрыФормы);
	
КонецПроцедуры

Процедура НастроитьЗаполнениеТекущегоПоказателя(ЭтаФорма, ИмяЭлемента = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	Если СтрЧислоВхождений(ЭтаФормаИмя, "ВнешнийОтчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "ВнешнийОтчет.", "");
	ИначеЕсли СтрЧислоВхождений(ЭтаФормаИмя, "Отчет.") > 0 Тогда
		ЭтаФормаИмя = СтрЗаменить(ЭтаФормаИмя, "Отчет.", "");
	КонецЕсли;
	ИДОтчета = Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") - 1);
	ИДРедакцииОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ЭтаФорма.СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ИДОтчета", ИДОтчета);
	ПараметрыФормы.Вставить("ИДРедакцииОтчета", ИДРедакцииОтчета);
	
	ТекущаяОбластьИмя = ЭтаФорма.Элементы[ИмяЭлемента].ТекущаяОбласть.Имя;
	Позиция = СтрНайти(ТекущаяОбластьИмя, "_");
	ДлинаСмысловойЧастиПоказателя = ?(Позиция = 0, СтрДлина(ТекущаяОбластьИмя), Позиция - 1);
	ИДТекущегоПоказателя = Лев(ТекущаяОбластьИмя, ДлинаСмысловойЧастиПоказателя);
	
	ПараметрыФормы.Вставить("ИДТекущегоПоказателя", ИДТекущегоПоказателя);
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуНастройкиАвтозаполнения(ПараметрыФормы);
	
КонецПроцедуры

Процедура ОбработкаАдресаВСтатистическомОтчете(Форма, Область, СтандартнаяОбработка) Экспорт 
	СтандартнаяОбработка = Ложь;
	
	ЗначенияПолей = Новый СписокЗначений;
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	Если НЕ СтруктураАдреса = Неопределено Тогда
		ЗначенияПолей.Добавить(СтруктураАдреса.Индекс,          "Индекс");
		ЗначенияПолей.Добавить(СтруктураАдреса.Регион,          "Регион");
		ЗначенияПолей.Добавить(СтруктураАдреса.Район,           "Район");
		ЗначенияПолей.Добавить(СтруктураАдреса.Город,           "Город");
		ЗначенияПолей.Добавить(СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт");
		ЗначенияПолей.Добавить(СтруктураАдреса.Улица,           "Улица");
		ЗначенияПолей.Добавить(СтруктураАдреса.Дом,             "Дом");
		ЗначенияПолей.Добавить(СтруктураАдреса.Корпус,          "Корпус");
		ЗначенияПолей.Добавить(СтруктураАдреса.Квартира,        "Квартира");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипДома,         "ТипДома");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипКорпуса,      "ТипКорпуса");
		ЗначенияПолей.Добавить(СтруктураАдреса.ТипКвартиры,     "ТипКвартиры");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление",           РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки));
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Область", Область);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = Форма;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

Процедура ОбработкаАдресаВСтатистическомОтчетеJSON(Форма, Область, СтандартнаяОбработка) Экспорт 
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей",           Форма.СтруктураРеквизитовФормы.Адрес_JSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Область", Область);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
КонецПроцедуры

Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	ОбновитьАдресВТабличномДокументеСтатистическойОтчетностиJSON(Результат, Параметры.Область, Параметры.Форма.СтруктураРеквизитовФормы);
	Параметры.Форма.Модифицированность = Истина;
КонецПроцедуры

Процедура ОбновитьАдресВТабличномДокументеСтатистическойОтчетностиJSON(Результат, Область, СтруктураРеквизитовФормы) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.Адрес_JSON = Результат.Значение;
		Область.Значение = Результат.Представление;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаАдресаВСтатистическомОтчетеJSON2(Форма, Область, ИмяКлючаВСтруктуре = "", СтандартнаяОбработка) Экспорт 
	
	Перем Адрес_JSON;
	
	СтандартнаяОбработка = Ложь;
	
	КлючИмя = ?(ИмяКлючаВСтруктуре = "", Область.Имя, ИмяКлючаВСтруктуре);
	Форма.СтруктураРеквизитовФормы.Адреса_JSON.Свойство(КлючИмя, Адрес_JSON);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей",           Адрес_JSON);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", Форма.СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Область", Область);
	ДополнительныеПараметры.Вставить("КлючИмя", КлючИмя);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуКонтактнойИнформацииЗавершение2", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
КонецПроцедуры

Процедура ОткрытьФормуКонтактнойИнформацииЗавершение2(Результат, Параметры) Экспорт
	ОбновитьАдресВТабличномДокументеСтатистическойОтчетностиJSON2(Результат,
		Параметры.Область, Параметры.КлючИмя, Параметры.Форма.СтруктураРеквизитовФормы);
	Параметры.Форма.Модифицированность = Истина;
КонецПроцедуры

Процедура ОбновитьАдресВТабличномДокументеСтатистическойОтчетностиJSON2(Результат, Область, КлючИмя, СтруктураРеквизитовФормы) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.Адреса_JSON.Вставить(КлючИмя, Результат.Значение);
		Область.Значение = Результат.Представление;
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ПредставлениеНуля(ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Форма = ДополнительныеПараметры.Форма;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		
		Область.Формат = "";
		
		Если Область.Значение = 0 Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>");
			Список.Добавить("ЧН=0", "  Отображать как ""0""  ");
			
			СписокЭлемент = Ждать Форма.ВыбратьИзСпискаАсинх(Список, ДополнительныеПараметры.Элемент);
			Если СписокЭлемент <> Неопределено Тогда
				
				НовыйФормат = СписокЭлемент.Значение;
				
				Если СписокЭлемент.Значение = "ЧН=' '" И ДополнительныеПараметры.Свойство("ВосстанавливатьЭталонФормата") Тогда
					ИмяМакета = Форма.СтруктураРеквизитовФормы.ИмяМакетаТабличногоДокумента;
					Если СтрНайти(ИмяМакета, "_") = 0 Тогда
						НаимТекущегоРаздела =
							ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.СтруктураРеквизитовФормы, "НаимТекущегоРаздела", "");
						Если ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда
							ИмяМакета = ИмяМакета + "_" + НаимТекущегоРаздела;
						КонецЕсли;
					КонецЕсли;
					
					НовыйФормат = РегламентированнаяОтчетностьВызовСервера.ПолучитьЭталонФорматаОбласти(Форма.ИмяФормы, ИмяМакета, Область.Имя);
				КонецЕсли;
				
				Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, НовыйФормат);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораПоляОбособленныхПодразделений(Форма, Область, СтандартнаяОбработка, ИмяТД = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	Если Область.Имя = "ИсключитьДанныеОбособленныхПодразделений" Тогда
		СтандартнаяОбработка = Ложь;
		ИсключитьДанныеОбособленныхПодразделений = Не Форма.ИсключитьДанныеОбособленныхПодразделений;
		Форма.ИсключитьДанныеОбособленныхПодразделений = ИсключитьДанныеОбособленныхПодразделений;
		Область.Значение = ИсключитьДанныеОбособленныхПодразделений;
		ОблОбособленноеПодразделение = Форма[ИмяТД].Области.ОбособленноеПодразделение;
		Если ИсключитьДанныеОбособленныхПодразделений Тогда
			ОблОбособленноеПодразделение.Значение = "";
			ОблОбособленноеПодразделение.Защита = Истина;
			ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,255);
		Иначе
			ОблОбособленноеПодразделение.Значение = Форма.ОбособленноеПодразделение;
			ОблОбособленноеПодразделение.Защита = Ложь;
			ОблОбособленноеПодразделение.ЦветФона = Новый Цвет(255,255,192);
		КонецЕсли;
		Форма.Модифицированность = Истина;
		Форма.ИсключитьДанныеОбособленныхПодразделенийПриИзменении(Неопределено);
	ИначеЕсли Область.Имя = "ОбособленноеПодразделение" И ЗначениеЗаполнено(Форма.ИмяСправочникаОбособленныхПодразделений) И Область.Защита = Ложь Тогда
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОбработкаВыбораПоляОбособленныхПодразделений(Форма, СтандартнаяОбработка);
		Если СтандартнаяОбработка <> Ложь Тогда
			СтандартнаяОбработка = Ложь;
			Отбор = Новый Структура("Владелец", Форма.СтруктураРеквизитовФормы.Организация);
			Если ЗначениеЗаполнено(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения) Тогда
				Отбор.Вставить(Форма.ИмяРеквизитаПризнакаОбособленногоПодразделения, Истина);
			КонецЕсли;
			Параметры = Новый Структура("Отбор, РежимВыбора", Отбор, Истина);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораОбособленногоПодразделения", ЭтотОбъект, Новый Структура("Форма", Форма));
			ОткрытьФорму("Справочник." + Форма.ИмяСправочникаОбособленныхПодразделений + ".ФормаВыбора",Параметры,Форма,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли Область.Имя = "РегистрацияРеспондента" Или Область.Имя = "ИсключитьДанныеТОСП" Или Область.Имя = "СоставРегистрации" Тогда
		СтандартнаяОбработка = Ложь;
		ОбщийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РегистрацииВОрганеСтатистикиФормыКлиент"); 
		ОбщийМодуль.ОбработкаВыбораПоляРегистрацияРеспондента(Форма, Область);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораОбособленногоПодразделения(Ответ, ДопПараметры) Экспорт 
	Если Ответ <> Неопределено Тогда
		Форма = ДопПараметры.Форма;
		Форма.Модифицированность = Истина;
		Форма.ОбособленноеПодразделение = Ответ;
		Форма.ИсключитьДанныеОбособленныхПодразделений = Ложь;
		
		Если ЗначениеЗаполнено(Форма.ОбособленноеПодразделение) Тогда
			РегламентированнаяОтчетностьВызовСервера.ОпределитьНаличиеКодаПодразделенияВСправочникеОрганыФСГС(Форма.ОбособленноеПодразделение);
		КонецЕсли;
		
		Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено Тогда
			Если Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти("ОбособленноеПодразделение") <> Неопределено Тогда
				Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОбособленноеПодразделение.Значение = Ответ;
			КонецЕсли;
			Если Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти("ИсключитьДанныеОбособленныхПодразделений") <> Неопределено Тогда
				Форма.ПолеТабличногоДокументаФормаОтчета.Области.ИсключитьДанныеОбособленныхПодразделений.Значение = Ложь;
			КонецЕсли;
		ИначеЕсли Форма.Элементы.Найти("ТабличныйДокумент") <> Неопределено Тогда
			Если Форма.ТабличныйДокумент.Области.Найти("ОбособленноеПодразделение") <> Неопределено Тогда
				Форма.ТабличныйДокумент.Области.ОбособленноеПодразделение.Значение = Ответ;
			КонецЕсли;
			Если Форма.ТабличныйДокумент.Области.Найти("ИсключитьДанныеОбособленныхПодразделений") <> Неопределено Тогда
				Форма.ТабличныйДокумент.Области.ИсключитьДанныеОбособленныхПодразделений.Значение = Ложь;
			КонецЕсли;
		КонецЕсли;
		Форма.ОбособленноеПодразделениеПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

Процедура ВыборОтчетаПредидущегоПериода(Форма, Область, СтандартнаяОбработка, ИмяТД = "ПолеТабличногоДокументаФормаОтчета") Экспорт
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ОблИмя = Область.Имя;
	Если ОблИмя = "ВыбратьОтчетПрошлогоПериода" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Форма.ОтчетПредидущегоПериода) Тогда
			ПоказатьЗначение(, Форма.ОтчетПредидущегоПериода);
		ИначеЕсли ЗначениеЗаполнено(Форма.ВыгрузкаПредидущегоПериода.ПолучитьТекст()) Тогда
			ВПП = Новый ТекстовыйДокумент;
			ВПП.УстановитьТекст(Форма.ВыгрузкаПредидущегоПериода.ПолучитьТекст());
			ВПП.Показать("Текст выгрузки отчета прошлого периода");
		Иначе 
			ОО = Новый ОписаниеОповещения("ОбработкаВыбораОтчетаПредидущегоПериода", 
										ЭтотОбъект,
										Новый Структура("Форма,Область,ИмяТД", Форма, Область, ИмяТД));
			ОткрытьФорму("ОбщаяФорма.ВыборОтчетаПредыдущегоПериода", 
						Форма.СформироватьПараметрыВыбораОтчетаПредыдущегоПериода(), 
						Форма,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли ОблИмя = "ОчиститьВыбратьОтчетПрошлогоПериода" Тогда
		СтандартнаяОбработка = Ложь;
		Форма.ВыгрузкаПредидущегоПериода = "";
		Форма.ОтчетПредидущегоПериода = Неопределено;
		Форма.Модифицированность = Истина;
		Форма[ИмяТД].Области.Найти("ВыбратьОтчетПрошлогоПериода").Значение = "Выбор отчета предыдущего периода";
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаВыбораОтчетаПредидущегоПериода(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ТекстВыгрузки")
		И ДопПараметры.Свойство("Источник") Тогда
		
		Форма = ДопПараметры.Форма;
		Форма.Модифицированность = Истина;
		Форма.ВыгрузкаПредидущегоПериода = ДопПараметры.ТекстВыгрузки;
		Форма.ОтчетПредидущегоПериода = ДопПараметры.Источник;
		
		Если Не ЗначениеЗаполнено(ДопПараметры.ТекстВыгрузки.ПолучитьТекст()) Тогда
			ДопПараметры.Область.Значение = "Выбор отчета предыдущего периода";
		ИначеЕсли ЗначениеЗаполнено(ДопПараметры.Источник) Тогда
			ДопПараметры.Область.Значение = "" + ДопПараметры.Источник;
		Иначе
			ДопПараметры.Область.Значение = "Данные предыдущего периода загружены из файла";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Форма) Экспорт
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости(Форма);
	
КонецПроцедуры

Процедура ПередВыгрузкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';
								|en = 'Old version of the report form is not supported by the current configuration version.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);

КонецПроцедуры

Процедура ПередОтправкойРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		
		Текст = НСтр("ru = 'Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';
					|en = 'Old version of the report form is not supported by the current configuration version.'");
		СообщитьИВернутьОшибку(Неопределено, Текст);
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);

КонецПроцедуры

Процедура ПередПечатьюРегламентированногоОтчета(ВыполняемоеОповещение, ДокументСсылка) Экспорт
	
	ПредставлениеДокументаРеглОтч = Неопределено;
	
	ПараметрыОтчета = РегламентированнаяОтчетностьВызовСервера.ПолучитьПараметрыФормыИзСохраненногоОтчета(ДокументСсылка, ПредставлениеДокументаРеглОтч);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мСохраненныйДок",          ДокументСсылка);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",          ПараметрыОтчета.мВыбраннаяФорма);
	ПараметрыФормы.Вставить("БезОткрытияФормы",         Истина);
	
	// Для совместимости с универсальным отчетом статистики
	Если ПараметрыОтчета.ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ВыбраннаяФорма = ?(СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") = 0, ПараметрыОтчета.мВыбраннаяФорма
						 , Лев(ПараметрыОтчета.мВыбраннаяФорма, СтрНайти(ПараметрыОтчета.мВыбраннаяФорма, "_") - 1));
	Иначе
		ВыбраннаяФорма = ПараметрыОтчета.мВыбраннаяФорма;
	КонецЕсли;
	
	Отказ = Ложь;
	Попытка
		ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ПараметрыОтчета.ИсточникОтчета, ВыбраннаяФорма);
		ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы, , Новый УникальныйИдентификатор);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Устаревшая редакция формы отчета не поддерживается текущей версией конфигурации.';
								|en = 'Old version of the report form is not supported by the current configuration version.'");
		Сообщение.Сообщить();
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Отказ);
		Возврат;
	КонецПопытки;
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ВыполняемоеОповещение, ТекФорма, Отказ);
	
КонецПроцедуры

#Область НоваяФормаРегламентированнойОтчетности

Процедура ПечатьПереопределяемый(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Печать(Ссылка, ИмяМакетаДляПечати, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Выгрузить(Ссылка, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить(Ссылка, УникальныйИдентификаторФормы);
	
КонецПроцедуры

Процедура СоздатьНовыйОбъект(Организация, Тип, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.СоздатьНовыйОбъект(Организация, Тип, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(Ссылка, ОписаниеРСВ_1, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыгрузитьПереопределяемый(Ссылка) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.Выгрузить(Ссылка);
	
КонецПроцедуры

Процедура ФормаРегламентированнойОтчетности_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ФормаРегламентированнойОтчетности_ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма);
	
КонецПроцедуры

#КонецОбласти

Процедура СпрятатьСсылкуУдалитьСтраницу(Форма) Экспорт 
	Если Форма.Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = Форма.ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьТекущуюСтрокуВДеревеРазделов(Форма, НовыйUID) Экспорт
	UID_Пустой = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	Если НовыйUID <> Неопределено Тогда
		НомСтр = РегламентированнаяОтчетностьКлиентСервер.НайтиИДВДереве(Форма.Разделы.ПолучитьЭлементы(), НовыйUID, UID_Пустой);
		Если НомСтр <> Неопределено Тогда
			Форма.Элементы.Разделы.ТекущаяСтрока = НомСтр;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область УведомленияОСпецрежимах
Процедура ОткрытьФормуВыбораРегистрацииВИФНС(Форма, Инфо, ИмяКБПроцедуры = "ОбработкаКодаНОЗавершение") Экспорт 
	ПараметрыРегистрации = Новый Структура("Владелец", Форма.Объект.Организация);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыРегистрации);
	
	ДополнительныеПараметры = Новый Структура("Инфо", Инфо);
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяКБПроцедуры, Форма, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.ФормаВыбора", ПараметрыФормы, Форма,,,,ОписаниеОповещения ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОткрытьФормуВыбораФИО(Форма, СтандартнаяОбработка, ИмяПоля, ИмяСтраницы, ОповещениеОбОкончании = Неопределено) Экспорт 
	Если ТипЗнч(ОповещениеОбОкончании) = Тип("ОписаниеОповещения") Тогда
		ВыборФИО = ОповещениеОбОкончании;
	Иначе
		ВыборФИО = Новый ОписаниеОповещения("ВыборФИОЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыВыборФИО = Новый Структура;
	ПараметрыВыборФИО.Вставить("Фамилия", Форма.Объект.ПодписантФамилия);
	ПараметрыВыборФИО.Вставить("Имя", Форма.Объект.ПодписантИмя);
	ПараметрыВыборФИО.Вставить("Отчество", Форма.Объект.ПодписантОтчество);
	ПараметрыВыборФИО.Вставить("ИмяПоля", ИмяПоля);
	ПараметрыВыборФИО.Вставить("ИмяСтраницы", ИмяСтраницы);
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФИО", ПараметрыВыборФИО, Форма, , , , ВыборФИО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ВыборФИОЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Форма = Неопределено;
		ИмяПоля = Неопределено;
		ИмяСтраницы = Неопределено;
		Ответ.Свойство("Форма", Форма);
		Ответ.Свойство("ИмяПоля", ИмяПоля);
		Ответ.Свойство("ИмяСтраницы", ИмяСтраницы);
		Ответ.Свойство("Фамилия", Форма.Объект.ПодписантФамилия);
		Ответ.Свойство("Имя", Форма.Объект.ПодписантИмя);
		Ответ.Свойство("Отчество", Форма.Объект.ПодписантОтчество);
		Представление = СокрЛП(Форма.Объект.ПодписантФамилия + " " + Форма.Объект.ПодписантИмя + " " + Форма.Объект.ПодписантОтчество);
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			Форма[ИмяПоля].Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение = Представление;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
			Форма[ИмяСтраницы][0].ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ = Представление;
		КонецЕсли;
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Создание уведомления о спецрежимах
//
// Параметры:
//  Организация						 - СправочникСсылка.Организации - Организация, по которой будет создаваться сверка.
//  ВидУведомления					 - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения - вид уведомления
//  Данные							 - Структура - данные, которые буду переданы в форму при создании (например, для заполнения)
//
Процедура СоздатьУведомлениеОСпецрежимах(Организация, ВидУведомления, Данные) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидУведомления", ВидУведомления);
	ПараметрыФормы.Вставить("Данные", Данные);
	ПараметрыФормы.Вставить("Создание_УведомлениеОСпецрежимахНалогообложения", Истина);
	ПараметрыФормы.Вставить("УчитыватьУведомленияНеВходящиеВБРО", Истина);
	
	ОткрытьФорму("Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораВидаСообщения", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
#КонецОбласти

// Процедура обрабатывает регламентированный отчет с последующим открытием формы с присоединенными файлами
// (выполняется сохранение регламентированного отчета в случае, если он не сохранен).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма регламентированного отчета.
//
Асинх Процедура СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(Форма) Экспорт
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНайти(Форма.ИмяФормы, "Отчет.РегламентированныйОтчет") > 0
			Или СтрНайти(Форма.ИмяФормы, "Отчет.EF_РегламентированныйОтчет") > 0 Тогда
			
			ИсточникОтчета = Сред(Форма.ИмяФормы, 7);
			ПозицияРазделителя = СтрНайти(ИсточникОтчета, ".");
			Если ПозицияРазделителя <> 0 Тогда
				ИсточникОтчета = Лев(ИсточникОтчета, ПозицияРазделителя - 1);
			КонецЕсли;
			СвойстваВидаОтправляемыхДокументов =
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваВидаОтправляемыхДокументов(ИсточникОтчета);
			ТипПолучателя = ?(СвойстваВидаОтправляемыхДокументов = Неопределено,
				Неопределено, СвойстваВидаОтправляемыхДокументов.ТипПолучателя);
				
			Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
				ТекстПредупреждения = НСтр("ru = 'Обратите внимание, присоединенные файлы не отправляются при отправке отчета.
					|
					|Отправить дополнительные файлы для отчета возможно в 1С-Отчетности, разделе ""Письма"", воспользовавшись меню ""Создать"" - ""Пакет с доп. документами для ФНС"".';
					|en = 'Please note that attachments are not sent when sending the report.
					|
					|To send additional files for the report, use 1C Reporting. For that, in 1C Reporting, go to Emails, click Create - Package with additional documents for FTS.'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Обратите внимание, присоединенные файлы не отправляются при отправке отчета';
											|en = 'Please note that attachments are not sent when sending the report'");
			КонецЕсли;
			Ждать ПредупреждениеАсинх(ТекстПредупреждения);
			
			ДопПараметры = Новый Структура;
			Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				ДопПараметры.Вставить("Форма", Форма);
				ДопПараметры.Вставить("ТипВладельцаФайла", Тип("ДокументСсылка.РегламентированныйОтчет"));
				Оп = Новый ОписаниеОповещения("ОткрытьФормуПрисоединенныеФайлы", ЭтотОбъект, ДопПараметры);
				Форма.СохранитьНаКлиенте(, Оп);
			Иначе
				ДопПараметры.Вставить("ВладелецФайла",  Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
				ДопПараметры.Вставить("Организация",    Форма.СтруктураРеквизитовФормы.Организация);
				ДопПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
				ДопПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
				ОткрытьФормуПрисоединенныеФайлы(, ДопПараметры);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура обрабатывает уведомление о спецрежимах налогообложения с последующим открытием формы с
// присоединенными файлами (выполняется сохранение уведомления в случае, если оно не сохранено).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма уведомления о спецрежимах налогообложения.
//
Асинх Процедура СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(Форма) Экспорт
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.РегламентированноеУведомление")
			Или СтрНачинаетсяС(Форма.ИмяФормы, "Отчет.EF_РегламентированноеУведомление") Тогда
			Ждать ПредупреждениеАсинх(НСтр("ru = 'Обратите внимание, присоединенные файлы не отправляются при отправке уведомления.
				|
				|Отправить дополнительные файлы для уведомления ФНС возможно в 1С-Отчетности, разделе ""Письма"", воспользовавшись меню ""Создать"" - ""Пакет с доп. документами для ФНС"".';
				|en = 'Please note that attachments are not sent when sending the notification.
				|
				| To send additional files for the FTS notification, use 1C Reporting. For that, in 1C Reporting, go to Emails, click Create - Package with additional documents for FTS.'"));
			
			Если Форма.Объект.Ссылка.Пустая() Тогда
				Форма.СохранитьНаКлиенте();
			КонецЕсли;
			
			ДопПараметры = Новый Структура();
			ДопПараметры.Вставить("ВладелецФайла",  Форма.Объект.Ссылка);
			ДопПараметры.Вставить("Организация",    Форма.Объект.Организация);
			ДопПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
			ДопПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
			ОткрытьФормуПрисоединенныеФайлы(, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура открывает форму с присоединенными файлами.
//
// Параметры:
//  ДопПараметры - структура. Варианты:
//    1) Ключи:
//      "ВладелецФайла"  - ДокументСсылка, СправочникСсылка - ссылка на объект в регистре сведений "Журнал отчетов статусы";
//      "Организация"    - ссылка на элемент справочника организаций;
//      "ТолькоПросмотр" - Булево - признак открытия формы с присоединенными файлами только на просмотр;
//      "Заголовок"      - Строка - текст в заголовке формы, следующий после "Присоединенные файлы: ";
//    2) Ключи (если тип владельца присоединенного файла - ДокументСсылка.РегламентированныйОтчет
//             или ДокументСсылка.УведомлениеОСпецрежимахНалогообложения; документ должен быть сохранен):
//      "Форма"             - ФормаКлиентскогоПриложения - форма регламентированного отчета или уведомления
//                            о спецрежимах налогообложения;
//      "ТипВладельцаФайла" - Тип - Тип("ДокументСсылка.РегламентированныйОтчет") или
//                            Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения").
//
Процедура ОткрытьФормуПрисоединенныеФайлы(Результат, ДопПараметры) Экспорт
	Форма = Неопределено;
	ТипВладельцаФайла = Неопределено;
	
	Если ДопПараметры.Свойство("Форма", Форма) И ДопПараметры.Свойство("ТипВладельцаФайла", ТипВладельцаФайла) Тогда
		
		Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
			Если ДопПараметры.Свойство("ТипВладельцаФайла") Тогда
				Если ДопПараметры.ТипВладельцаФайла = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ВладелецФайла",  Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
					ДополнительныеПараметры.Вставить("Организация",    Форма.СтруктураРеквизитовФормы.Организация);
					ДополнительныеПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
					ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
					ДопПараметры = ДополнительныеПараметры;
				ИначеЕсли ДопПараметры.ТипВладельцаФайла = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ВладелецФайла",  Форма.Объект.Ссылка);
					ДополнительныеПараметры.Вставить("Организация",    Форма.Объект.Организация);
					ДополнительныеПараметры.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
					ДополнительныеПараметры.Вставить("ЗаголовокФормы", "Присоединенные файлы: " + Форма.Заголовок);
					ДопПараметры = ДополнительныеПараметры;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДопПараметры.ВладелецФайла)
		= Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		
		ТекстПредупреждения = НСтр(
		"ru = 'Присоединение файлов к электронным представлениям регламентированных отчетов не предусмотрено';
		|en = 'Cannot attach files to electronic presentations of local reports'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	Иначе
		
		Если ТипЗнч(ДопПараметры.ВладелецФайла) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Если РегламентированнаяОтчетностьВызовСервера.ВозможноПрисоединениеФайловКОбъекту(
				ДопПараметры.ВладелецФайла) Тогда
				
				ПараметрыПроверки = Новый Структура;
				
				ПараметрыПроверки.Вставить("Владелец", ДопПараметры.ВладелецФайла);
				ПараметрыПроверки.Вставить("ТекстПредупреждения", "");
				ПараметрыПроверки.Вставить("СтандартнаяОбработка", Истина);
				
				ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки);
				
				Если НЕ ПараметрыПроверки.СтандартнаяОбработка Тогда
					Если ЗначениеЗаполнено(ПараметрыПроверки.ТекстПредупреждения) Тогда
						ТекстПредупреждения = ПараметрыПроверки.ТекстПредупреждения;
					Иначе
						ТекстПредупреждения = НСтр(
						"ru = 'Присоединение файлов к отчетам данного вида из формы списка отчетов не предусмотрено';
						|en = 'Cannot attach files to the reports of this kind from the report list form'");
					КонецЕсли;
					
					ПоказатьПредупреждение(, ТекстПредупреждения);
					Возврат;
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр(
				"ru = 'Присоединение файлов к отчетам данного вида не предусмотрено';
				|en = 'You cannot attach files to reports of this kind'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ДопПарам = Новый Структура(
		"ВладелецФайла,Организация", ДопПараметры.ВладелецФайла, ДопПараметры.Организация);
		
		Оп = Новый ОписаниеОповещения(
		"ОткрытьФормуПрисоединенныеФайлыЗавершение", ЭтотОбъект, ДопПарам);
		
		ПараметрыОткрываемойФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДопПараметры);
		Если ПараметрыОткрываемойФормы.Свойство("Организация") Тогда
			ПараметрыОткрываемойФормы.Удалить("Организация");
		КонецЕсли;
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
		ПараметрыОткрываемойФормы,
		,
		ПараметрыОткрываемойФормы.ВладелецФайла,
		,
		,
		Оп,
		РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПрисоединенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ВладелецФайла) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		
		ОповеститьСписокУведомленийОбИзмененииИндексаКартинки(ДополнительныеПараметры);
		
	Иначе
		
		ОповеститьСписокОтчетовОбИзмененииИндексаКартинки(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещает динамический список отчетов об изменении индекса картинки.
//
// Параметры:
//  ДополнительныеПараметры - структура:
//    "ВладелецФайла" - ДокументСсылка, СправочникСсылка - ссылка на объект
//                      в регистре сведений "Журнал отчетов статусы";
//    "Организация"   - ссылка на элемент справочника организаций.
//
Процедура ОповеститьСписокОтчетовОбИзмененииИндексаКартинки(ДополнительныеПараметры) Экспорт
	
	Отборы = Новый Массив;
	Отборы.Добавить(Новый Структура("Организация,Ссылка",
	ДополнительныеПараметры.Организация, ДополнительныеПараметры.ВладелецФайла));
	
	Ключ = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтчетовСтатусы"), Отборы);
	
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещает динамический список уведомлений об изменении индекса картинки.
//
// Параметры:
//  ДополнительныеПараметры - структура:
//    "ВладелецФайла" - ДокументСсылка, СправочникСсылка - ссылка на объект
//                      в регистре сведений "Журнал отправок в контролирующие органы";
//    "Организация"   - ссылка на элемент справочника организаций.
//
Процедура ОповеститьСписокУведомленийОбИзмененииИндексаКартинки(ДополнительныеПараметры)
	
	Отборы = Новый Массив;
	
	Отборы.Добавить(Новый Структура(
	"СтраницаЖурнала,Организация,Ссылка",
	ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Уведомления"),
	ДополнительныеПараметры.Организация, ДополнительныеПараметры.ВладелецФайла));
	
	Ключ = Новый(Тип("РегистрСведенийКлючЗаписи.ЖурналОтправокВКонтролирующиеОрганы"), Отборы);
	
	Если НЕ Ключ.Пустой() Тогда
		ОповеститьОбИзменении(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Процедура определяет, открывать или нет из формы "1С-Отчетность" файлы, присоединенные к объекту.
//
// Параметры:
//  ПараметрыПроверки - Структура:
//   "Владелец"             - СправочникСсылка, ДокументСсылка - ссылка на объект;
//   "ТекстПредупреждения"  - Строка - если заполнен и СтандартнаяОбработка = Ложь, то будет выведено предупреждение;
//   "СтандартнаяОбработка" - Булево - если Ложь, открытие присоединенных файлов не выполняется.
//
Процедура ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(ПараметрыПроверки) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(
		ПараметрыПроверки);
		
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВладельцаПриОткрытииПрисоединенныхФайловИзСпискаОтчетов(
		ПараметрыПроверки);
	
КонецПроцедуры

#Область РучнойВводСтатусовОтправки

// Процедура предназначена для установки вручную статуса отправки из форм регламентированных отчетов
// и уведомлений о спецрежимах налогообложения, путем выбора значения из выпадающего списка.
//
// Параметры:
//  ПараметрыИзменения - Структура, ключи:
//    "Форма" - ФормаКлиентскогоПриложения - форма регл. отчета или уведомления о спецрежимах налогообложения;
//    "Организация" - СправочникСсылка.Организации - организация;
//    "КонтролирующийОрган" - Перечисление.ТипыКонтролирующихОрганов - контролирующий орган;
//    "ТекстВопроса" (необязательный) - Строка - текст предупреждения при попытке установить статус "Сдано".
//
Асинх Процедура ИзменитьСтатусОтправки(ПараметрыИзменения) Экспорт
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.ЗагрузитьЗначения(РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(
		ПараметрыИзменения.Форма, ПараметрыИзменения.КонтролирующийОрган));
	
	ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), ПараметрыИзменения.Форма.ТекущийЭлемент.Заголовок);
	ТекЭлемСпискаСтатусов = СписокСтатусов.НайтиПоЗначению(ТекСтатус);
	ПараметрыИзменения.Вставить("ПредСтатусЭлемент", ТекЭлемСпискаСтатусов);
	
	ВыбСтатусЭлемент = Ждать ПараметрыИзменения.Форма.ВыбратьИзСпискаАсинх(СписокСтатусов, , ТекЭлемСпискаСтатусов);
	Если ВыбСтатусЭлемент <> Неопределено
		И ВыбСтатусЭлемент <> ПараметрыИзменения.ПредСтатусЭлемент Тогда
		
		ПараметрыИзменения.Вставить("НовСтатус", ВыбСтатусЭлемент.Значение);
		Если ВыбСтатусЭлемент.Значение = НСтр("ru = 'Сдано';
												|en = 'Submitted'") 
			Или ВыбСтатусЭлемент.Значение = ДокументооборотСКОКлиентСервер.СтатусСданоЕстьЗамечания() Тогда
			Если РегламентированнаяОтчетностьВызовСервера.ПодключенДокументооборотСКонтролирующимОрганом(
				ПараметрыИзменения.Организация, ПараметрыИзменения.КонтролирующийОрган) Тогда
				
				ТекстВопроса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыИзменения, "ТекстВопроса", НСтр("ru = 'Вы уверены, что отчет уже сдан?';
																														|en = 'Are you sure the report is already submitted?'"));
				Если КодВозвратаДиалога.Да <> Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыИзменения.Форма.Элементы.НаименованиеЭтапа.Заголовок = ПараметрыИзменения.НовСтатус;
		
		// не устанавливаем признак модифицированности для Минобороны если изменили статус
		КонтролирующийОрган = Неопределено;
		Если НЕ ПараметрыИзменения.Свойство("КонтролирующийОрган", КонтролирующийОрган) 
			ИЛИ КонтролирующийОрган <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.Минобороны") Тогда
			ПараметрыИзменения.Форма.Модифицированность = Истина;
		КонецЕсли;
	
		Если ПараметрыИзменения.Свойство("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ПараметрыИзменения.ОписаниеОповещения, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать СоздатьОбъектДляФормированияМашиночитаемойФормы.
//
Функция СоздатьОбъектДляФормированияМашичитаемойФормы() Экспорт
	
#Если НЕ МобильныйКлиент Тогда
	Попытка
		Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint2");
	Исключение
		Попытка
			Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
#Иначе
	Возврат Неопределено;
#КонецЕсли
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаАдресаВФорматеФИАС

Функция АдресВФорматеФИАСПоДаннымСтраницыРеглОтчета(ТабличныйДокумент, ДополнительныеПараметры) Экспорт
	
	СтруктураМногострочныхЧастей = ДополнительныеПараметры.СтруктураМногострочныхЧастей;
	РегионНаименование = ДополнительныеПараметры.РегионНаименование;
	СоответствиеПоказателейСтраницыРеквизитамАдреса
	= ДополнительныеПараметры.СоответствиеПоказателейСтраницыРеквизитамАдреса;
	
	ВозвращаемыйАдрес = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	
	ВозвращаемыйАдрес.Вставить("Страна",    "РОССИЯ");
	ВозвращаемыйАдрес.Вставить("КодСтраны", "643");
	ВозвращаемыйАдрес.Вставить("ТипАдреса", "Муниципальный");
	ВозвращаемыйАдрес.Вставить("Регион",    РегионНаименование);
	
	Если ВозвращаемыйАдрес.Свойство("ДополнительныеКоды") Тогда
		ВозвращаемыйАдрес.ДополнительныеКоды.Вставить("ОКАТО", "");// обход ошибки в БСП
	КонецЕсли;
	
	ОдноименныеСвойства = Новый Массив;
	ОдноименныеСвойства.Добавить("ИдентификаторАдресногоОбъекта");
	ОдноименныеСвойства.Добавить("Индекс");
	ОдноименныеСвойства.Добавить("КодРегиона");
	ОдноименныеСвойства.Добавить("РегионСокращение");
	ОдноименныеСвойства.Добавить("МуниципальныйРайон");
	ОдноименныеСвойства.Добавить("МуниципальныйРайонСокращение");
	ОдноименныеСвойства.Добавить("Поселение");
	ОдноименныеСвойства.Добавить("ПоселениеСокращение");
	ОдноименныеСвойства.Добавить("НаселенныйПункт");
	ОдноименныеСвойства.Добавить("НаселенныйПунктСокращение");
	ОдноименныеСвойства.Добавить("Территория");
	ОдноименныеСвойства.Добавить("ТерриторияСокращение");
	ОдноименныеСвойства.Добавить("Улица");
	ОдноименныеСвойства.Добавить("УлицаСокращение");
	ОдноименныеСвойства.Добавить("НомерЗемельногоУчастка");
	
	ПомещениеВЗданииТип = "";
	ПомещениеВЗданииНомер = "";
	ПомещениеВКвартиреТип = "";
	ПомещениеВКвартиреНомер = "";
	
	Для Каждого Элем Из СоответствиеПоказателейСтраницыРеквизитамАдреса Цикл
		
		Обл = ТабличныйДокумент.Области.Найти(Элем.Ключ);
		
		Если Обл <> Неопределено Тогда
			
			// Немногострочные данные.
			//
			ЗначениеОбласти = СокрЛП(Обл.Значение);
			
			Если ОдноименныеСвойства.Найти(Элем.Значение) <> Неопределено Тогда
				ВозвращаемыйАдрес.Вставить(Элем.Значение, ЗначениеОбласти);
			ИначеЕсли Элем.Значение = "ПомещениеВЗданииТип" Тогда
				ПомещениеВЗданииТип = ЗначениеОбласти;
			ИначеЕсли Элем.Значение = "ПомещениеВЗданииНомер" Тогда
				ПомещениеВЗданииНомер = ЗначениеОбласти;
			ИначеЕсли Элем.Значение = "ПомещениеВКвартиреТип" Тогда
				ПомещениеВКвартиреТип = ЗначениеОбласти;
			ИначеЕсли Элем.Значение = "ПомещениеВКвартиреНомер" Тогда
				ПомещениеВКвартиреНомер = ЗначениеОбласти;
			КонецЕсли;
			
		ИначеЕсли СтруктураМногострочныхЧастей.Свойство(Элем.Ключ)
			И ТипЗнч(Элем.Значение) = Тип("Массив") И Элем.Значение.Количество() >= 2
			И ТипЗнч(Элем.Значение[0]) = Тип("Строка") И Элем.Значение[0] = "Здания"
			И ТипЗнч(Элем.Значение[1]) = Тип("Структура") Тогда
			
			// Многострочные данные (здание, сооружение, объект незавершенного строительства).
			//
			ИмяПокЗданиеТип   = Неопределено;
			ИмяПокЗданиеНомер = Неопределено;
			СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса = Элем.Значение[1];
			Для Каждого ЭлемСоответствия Из СоответствиеМногострочнойЧастиМножественномуРеквизитуАдреса Цикл
				Если ЭлемСоответствия.Значение = "ЗданиеТип" Тогда
					ИмяПокЗданиеТип = ЭлемСоответствия.Ключ;
				ИначеЕсли ЭлемСоответствия.Значение = "ЗданиеНомер" Тогда
					ИмяПокЗданиеНомер = ЭлемСоответствия.Ключ;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ИмяПокЗданиеТип) И ЗначениеЗаполнено(ИмяПокЗданиеНомер) Тогда
				ТипыЗданийНеЯвляющихсяКорпусами = СтрРазделить("дом,домовладение,владение", ",", Ложь);
				Ном = 1;
				Постфикс = "_1";
				ОблЗданиеТип   = ТабличныйДокумент.Области.Найти(ИмяПокЗданиеТип   + "_1");
				ОблЗданиеНомер = ТабличныйДокумент.Области.Найти(ИмяПокЗданиеНомер + "_1");
				ЗданиеНеЯвляющеесяКорпусомНайдено = Ложь;
				Корпуса = Новый Массив;
				Пока ОблЗданиеТип <> Неопределено И ОблЗданиеНомер <> Неопределено Цикл
					ЗданиеТип   = СокрЛП(ОблЗданиеТип.Значение);
					ЗданиеНомер = СокрЛП(ОблЗданиеНомер.Значение);
					Если ЗначениеЗаполнено(ЗданиеТип) И ЗначениеЗаполнено(ЗданиеНомер) Тогда
						Если ТипыЗданийНеЯвляющихсяКорпусами.Найти(НРег(ЗданиеТип)) <> Неопределено Тогда
							Если НЕ ЗданиеНеЯвляющеесяКорпусомНайдено Тогда
								ВозвращаемыйАдрес.Вставить("Здание", Новый Структура("ТипЗдания, Номер", ЗданиеТип, ЗданиеНомер));
								ЗданиеНеЯвляющеесяКорпусомНайдено = Истина;
							КонецЕсли;
						Иначе
							Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", ЗданиеТип, ЗданиеНомер));
						КонецЕсли;
					КонецЕсли;
					Ном = Ном + 1;
					Постфикс = "_" + Формат(Ном, "ЧГ=");
					ОблЗданиеТип   = ТабличныйДокумент.Области.Найти(ИмяПокЗданиеТип   + Постфикс);
					ОблЗданиеНомер = ТабличныйДокумент.Области.Найти(ИмяПокЗданиеНомер + Постфикс);
				КонецЦикла;
				ВозвращаемыйАдрес.Вставить("Корпуса", Корпуса);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Помещения = Новый Массив;
	Если ЗначениеЗаполнено(ПомещениеВЗданииТип) И ЗначениеЗаполнено(ПомещениеВЗданииНомер) Тогда
		Помещения.Добавить(Новый Структура("ТипПомещения, Номер", ПомещениеВЗданииТип, ПомещениеВЗданииНомер));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПомещениеВКвартиреТип) И ЗначениеЗаполнено(ПомещениеВКвартиреНомер) Тогда
		Помещения.Добавить(Новый Структура("ТипПомещения, Номер", ПомещениеВКвартиреТип, ПомещениеВКвартиреНомер));
	КонецЕсли;
	ВозвращаемыйАдрес.Вставить("Помещения", Помещения);
	
	Возврат ВозвращаемыйАдрес;
	
КонецФункции

#КонецОбласти

// См. РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуВыбораКонтрагента
//
Процедура ОткрытьФормуВыбораКонтрагента(Владелец, ВыполняемоеОповещение) Экспорт
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуВыбораКонтрагента(Владелец, ВыполняемоеОповещение);
	
КонецПроцедуры

Функция АвтозаполнениеБудетРеализованоВБудущихВерсиях(Форма) Экспорт 
	СтруктураРеквизитовФормы = Форма.СтруктураРеквизитовФормы;
	Если (НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить) И СтруктураРеквизитовФормы.Свойство("НастройкиВидимостиЭлементовФормы") Тогда
		Если СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы["ПостояннаяВидимость"] Тогда
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ТекстПредупреждения) Тогда
				ТекстПредупреждения = СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ТекстПредупреждения;
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Автоматическое заполнение редакции формы будет реализовано в будущих версиях программы.';
											|en = 'Автоматическое заполнение редакции формы будет реализовано в будущих версиях программы.'");
			КонецЕсли;
			Если СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ПоказыватьВФорме Тогда
				ПараметрыСообщения = Новый Структура;
				Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ОбщаяФормаЗаголовок) Тогда
					ОбщаяФормаЗаголовок = СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ОбщаяФормаЗаголовок;
				Иначе
					ОбщаяФормаЗаголовок = НСтр("ru = ''")
				КонецЕсли;
				ПараметрыСообщения.Вставить("Заголовок", ОбщаяФормаЗаголовок);
				ПараметрыСообщения.Вставить("ТекстПредупреждения", ТекстПредупреждения);
				ПараметрыСообщения.Вставить("ГиперссылкаТекст", СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ОбщаяФормаСсылка);
				ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетностьСообщение", ПараметрыСообщения);
			Иначе
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьИсториюОтправкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Источник = ДополнительныеПараметры.Источник;
	ТипКонтролирующихОрганов = ДополнительныеПараметры.ТипКонтролирующихОрганов;
	Организация = ДополнительныеПараметры.Организация;
	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	// Если нет доступа к ЭДО, просто выходим
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав для использования модуля документооборота!';
									|en = 'Insufficient rights to use the data interchange module.'"));
		Возврат;
	КонецЕсли;
	
	// Если в параметр передали форму, то получаем из нее ссылку, определяем организацию
	Если Организация = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
			Организация = ДокументооборотСКОКлиентСервер.ПолучитьОрганизациюПоФорме(Источник);
			Источник = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СсылкаНаОтчетПоФорме(Источник);
		Иначе
			Организация = КонтекстЭДОКлиент.ПолучитьРеквизитНаСервере(Источник, "Организация");
		КонецЕсли;
	КонецЕсли;
	
	// Если объект не записан, историю отправки не показываем
	Если Источник = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Объект не записан.';
									|en = 'Object not saved.'"));
		Возврат;
	КонецЕсли;
	
	// Открываем форму цикла обмена
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УправлениеОбменом");
	
	Если ИмяСобытия = Неопределено Тогда
		
		// Для регламентированных отчетов из БРО имя события жестко определены
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			
			Если ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			
				// Определяем имя события для регламентированных отчетов
				ИсточникОтчета = КонтекстЭДОКлиент.ПолучитьРеквизитНаСервере(Источник, "ИсточникОтчета");
				Если ИсточникОтчета = "РегламентированныйОтчетЗаявлениеОВвозеТоваров" Тогда
					ИмяСобытия = "Показать циклы обмена заявления";
				ИначеЕсли ИсточникОтчета = "РегламентированныйОтчетУведомлениеОКонтролируемыхСделках" Тогда
					ИмяСобытия = "Показать циклы обмена уведомления";
				Иначе
					ИмяСобытия = "Показать циклы обмена";
				КонецЕсли;
				
			ИначеЕсли ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
				
				ИмяСобытия = "Показать циклы обмена отчета ПФР";
				
			ИначеЕсли ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
				
				ИмяСобытия = "Показать циклы обмена отчета статистики";
				
			ИначеЕсли ТипКонтролирующихОрганов = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ЦБ") Тогда
				
				ИмяСобытия = "Показать циклы обмена отчета ЦБ";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
			
			ИмяСобытия = "Показать циклы обмена уведомления";
			
		Иначе
			
			// Если это не регламентированный отчет, то имя события определяется в переопределяемой функции
			ИмяСобытия = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ИмяСобытияОткрытияИсторииОтправки(Источник);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Оповестить(ИмяСобытия, Источник);
	
КонецПроцедуры

Функция ПолучитьАвтоматическиСформированнуюФормуРеглОтчета(ИсточникОтчета, Организация, ДатаНачала, ДатаОкончания, СсылкаНаСохрРеглОтчет = Неопределено, КорректирующийОтчет = Ложь)
	
	ИмяФормыОтчета = РегламентированнаяОтчетностьВызовСервера.ИмяФормыРеглОтчетаДействующейВОтчетномПериоде(ИсточникОтчета, ДатаОкончания, СсылкаНаСохрРеглОтчет);
	
	Если ИмяФормыОтчета = Неопределено Тогда
		Возврат ИмяФормыОтчета;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоГода(ДатаОкончания);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета",             ДатаНачала);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",              ДатаОкончания);
	ПараметрыФормы.Вставить("Организация", 						    Организация);
	ПараметрыФормы.Вставить("мВыбраннаяФорма",                      ИмяФормыОтчета);
	ПараметрыФормы.Вставить("мСохраненныйДок", 						СсылкаНаСохрРеглОтчет);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	ПараметрыФормы.Вставить("БезОткрытияФормы",						Истина);
	Если КорректирующийОтчет Тогда
		ПараметрыФормы.Вставить("ВидДокумента",	1);
	КонецЕсли;
	
	// Для совместимости с универсальным отчетом статистики
	Если ИсточникОтчета = "РегламентированныйОтчетСтатистикаПрочиеФормы" Тогда
		ИмяТекФормыОтчета = ?(СтрНайти(ИмяФормыОтчета, "_") = 0, ИмяФормыОтчета
						 , Лев(ИмяФормыОтчета, СтрНайти(ИмяФормыОтчета, "_") - 1));
	Иначе
		ИмяТекФормыОтчета = ИмяФормыОтчета;
	КонецЕсли;
	
	ПолныйПутьКФорме = РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(ИсточникОтчета, ИмяТекФормыОтчета);
	ТекФорма = ПолучитьФорму(ПолныйПутьКФорме, ПараметрыФормы);
	
	Если ТекФорма = Неопределено Тогда
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось открыть отчет!';
								|en = 'Cannot open the report.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Возврат ТекФорма;
	
КонецФункции

Процедура УдалитьВременныйКаталогШаблонов(ВремКаталог)
	
	Попытка
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечати(ОписаниеОшибки, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог)
	
	КодОшибки = Сред(ОписаниеОшибки, СтрНайти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Не удалось установить параметр печати!';
									|en = 'Cannot set print option.'");
		
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'При попытке печати в компоненте печати возникла неизвестная ошибка!';
									|en = 'Unknown error occurred in the print component while trying to print.'");
		
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось найти файл выгрузки отчета!';
									|en = 'Print component could not find the report export file.'");
		
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к файлу выгрузки отчета!';
									|en = 'Print component could not access the report export file.'");
		
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать формат файла выгрузки!';
									|en = 'Print component could not recognize the export file format.'");
		
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать формат файла выгрузки!';
									|en = 'Print component could not recognize the export file format.'");
		
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки!';
			|en = 'Print component could not recognize the export format version from the export text.'");
		
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось распознать форму по КНД в файле выгрузки!';
									|en = 'Print component could not recognize the form by the CTD in the export file.'");
		
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки!';
			|en = 'Print component could not generate a machine-readable form due to an invalid export file.'");
		
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОшибку0x8004003CЗавершение", ЭтотОбъект);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Отсутствует шаблон для формирования машиночитаемой формы.%1Возможно, необходимо зарегистрировать в информационной базе внешний шаблон.%2Показать список зарегистрированных шаблонов?';
			|en = 'The template to generate a machine-readable form is missing.%1You may need to register an external template in the infobase.%2Show list of registered templates?'"),
			Символы.ПС, Символы.ПС);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
			НСтр("ru = 'Ошибка при формировании машиночитаемой формы';
				|en = 'An error occurred when generating the machine-readable form'"));
		
		Возврат;
		
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось найти каталог с шаблонами для печати!';
									|en = 'Print component could not find a directory with print templates.'");
		
	ИначеЕсли КодОшибки = "0x80040047" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к каталогу с шаблонами для печати!';
									|en = 'Print component was unable to access the directory with print templates.'");
		
	ИначеЕсли КодОшибки = "0x80040050" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Компоненте печати не удалось сформировать машиночитаемую форму из-за ошибки в шаблоне печати или подмены шаблона!';
			|en = 'Print component could not generate a machine-readable form due to an error in the print template or template replacement.'");
		
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll)!';
			|en = 'Cannot find one of the auxiliary libraries used by the print component (GNIVCPDOC.dll).'");
		
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела!';
			|en = 'One of the auxiliary libraries used by the print component (GNIVCPDOC.dll) is replaced or obsolete.'");
		
	ИначеЕсли КодОшибки = "0x8004006E" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Пакет ""Microsoft XML 4.0 SP 2"", используемый компонентой печати, отсутствует или нарушена его целостность!';
			|en = 'The ""Microsoft XML 4.0 SP 2"" package used by the print components is absent or tampered.'");
		
	ИначеЕсли КодОшибки = "0x80040078" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Пакет ""Windows Script 5.6"", используемый компонентой печати, отсутствует или нарушена его целостность!';
			|en = 'The ""Windows Script 5.6"" package used by the print components is absent or tampered.'");
		
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена!';
			|en = 'One of the auxiliary libraries used by the print component (GNIVCPDOC.dll) is damaged.'");
		
	ИначеЕсли КодОшибки = "0x8004003D" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось получить доступ к файлу требуемого шаблона!';
									|en = 'Print component could not access the requested template file.'");
		
	ИначеЕсли КодОшибки = "0x80040065" Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Компоненте печати не удалось обнаружить в системе ни одного принтера!';
									|en = 'Print component could not find any printers in the system.'");
		
	ИначеЕсли КодОшибки = "0x80040064" Тогда
		
		Возврат;
		
	Иначе
		
		ТекстПредупреждения = ОписаниеОшибки;
		
	КонецЕсли;

	ТекстПредупреждения = НСтр("ru='Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.
							|Хотите переустановить компоненту сейчас?
							|
							|Подробнее:
							|" + ?(ЗначениеЗаполнено(ТекстПредупреждения),
		ТекстПредупреждения, НСтр("ru = '<подробная информация отсутствует>';
									|en = '<detailed information is not available>'")));
	
	ДополнительныеПараметры = Новый Структура("ВремКаталог, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм",
		ВремКаталог, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОшибкуМодуляПечатиЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																	|en = '%1'"), ТекстПредупреждения),
				РежимДиалогаВопрос.ДаНет,
				,
				,
				НСтр("ru = 'Ошибка при формировании машиночитаемой формы';
					|en = 'An error occurred when generating the machine-readable form'"));
	
КонецПроцедуры

Процедура ОбработатьОшибку0x8004003CЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм.Форма.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьНаименованиеИФНСПолучателяОтчета(Форма)
	
	ОргИМНС = Неопределено;
	
	Попытка
		ФормаТитульный = Форма.СтруктураДанныхТитульный;
	Исключение
		ФормаТитульный = Форма.СтруктураДанныхБаланс;
	КонецПопытки;
	
	Если ФормаТитульный.Свойство("ОргИМНС", ОргИМНС) Тогда
		Возврат ОргИМНС;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, Знач КНД, Знач ВерсияФорматаВыгрузки,
									   ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВыполняемоеОповещение = Неопределено)
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	// Если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон.
	КоличествоВыгруженныхШаблонов = 0;
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		ИспользуемыйШаблон = Неопределено;
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	ШаблоныМашиночитаемыхФорм = РегламентированнаяОтчетностьВызовСервера.ПолучитьШаблоныМашиночитаемыхФорм(Форма.ИмяФормы, ПрефиксИмениМакетаШаблона, КоличествоВыгруженныхШаблонов, ТочныеПараметрыШаблонаЗаданы, ПрефиксИмениШаблона, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
	
	ПолучаемыеФайлы = Новый Массив;
	
	Для Каждого Элемент Из ШаблоныМашиночитаемыхФорм Цикл
		
		Попытка
			
			#Если ВебКлиент Тогда
				ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремКаталог + Элемент.Представление, ПоместитьВоВременноеХранилище(Элемент.Значение, Новый УникальныйИдентификатор));
				ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
			#Иначе
				Элемент.Значение.Записать(ВремКаталог + Элемент.Представление);
			#КонецЕсли
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось выгрузить шаблон машиночитаемой формы ""%1"" во временный каталог!%2';
																							|en = 'Cannot export a template of the ""%1"" machine-readable form to the temporary directory.%2'"), Элемент.Представление, Символы.ПС + ОписаниеОшибки());
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
	
	#Если ВебКлиент Тогда
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполняемоеОповещение.ДополнительныеПараметры.Вставить(
				"ДистрибутивКомпонентыПечатиМашиночитаемыхФорм", ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучаемыеФайлы) Тогда
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"ВыгрузитьШаблоныПечатиВКаталогВебКлиентПослеПолучения", ЭтотОбъект,
				Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение));
			НачатьПолучениеФайловССервера(ОповещениеОЗавершении, ПолучаемыеФайлы);
		ИначеЕсли ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Процедура ВыгрузитьШаблоныПечатиВКаталогВебКлиентПослеПолучения(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось выгрузить шаблоны машиночитаемых форм во временный каталог!';
								|en = 'Cannot upload machine readable form templates to a temporary directory!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметровФайлаВыгрузкиНаКлиенте(ФайлВыгрузки)

	Возврат РегламентированнаяОтчетностьКлиентСервер.СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки);

КонецФункции

Процедура СформироватьТекстВыгрузки(Форма, ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы = Ложь, ФайлВыгрузкиВоВременномХранилище = Неопределено, ВыполняемоеОповещение = Неопределено)
		
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , Форма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(Форма.СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн, , , ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы, , , , , ФайлВыгрузкиВоВременномХранилище, , ВыполняемоеОповещение);
	
КонецПроцедуры

#Если ВебКлиент Тогда

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиенте(Форма, Выгрузка)
	ВебБраузер = ВебБраузер();
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(
		АдресПараметровПроксиВоВременномХранилище,, Истина, ВебБраузер);
		
	Если ВыводЧерезВебСервис Тогда
		РегламентированнаяОтчетностьВызовСервера.ПолучитьШаблонПоИмени(Выгрузка);
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище",
		РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(
			Выгрузка.ТестВыгрузки,
			Строка(Новый УникальныйИдентификатор),
			Выгрузка.КодировкаВыгрузки,
			Форма.УникальныйИдентификатор ));
		
		ДП = Новый Структура;
		ДП.Вставить("ИмяКнопки", "");
		ДП.Вставить("Форма", Форма);
		ДП.Вставить("Выгрузка", Выгрузка);
		ДП.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ДП.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ДП.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДП.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЧерезВебСервис", ЭтотОбъект, ДП);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	Иначе
		Если ЗначениеЗаполнено(ВебБраузер) И НЕ ВебБраузер = "MSIE" Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
										|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
			Возврат;
		КонецЕсли;
		ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(Форма, Выгрузка);
	КонецЕсли;
КонецПроцедуры

Асинх Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПродолжение(Форма, Выгрузка)
	Если Не Ждать РезультатПодключенияРасширенияРаботыСФайламиАсинх() Тогда 
		Возврат;
	КонецЕсли;
	
	КаталогВремФайлов = Ждать ПолучитьПутьВыгрузкиАсинх("", "Выберите каталог для размещения временных файлов.");
	Если Не ЗначениеЗаполнено(КаталогВремФайлов) Тогда 
		Возврат;
	КонецЕсли;
	
	ВремФайл = КаталогВремФайлов + "ФайлВыгрузки_" + Новый УникальныйИдентификатор + ".tmp";
	
	Если НЕ Форма.Окно = Неопределено Тогда
		Форма.Окно.Активизировать();
	КонецЕсли;
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	РегламентированнаяОтчетностьВызовСервера.ПолучитьШаблонПоИмени(Выгрузка);
	
	Текст = Новый ТекстовыйДокумент;
	КодировкаФайлаВыгрузки = Выгрузка.КодировкаВыгрузки;
	Текст.УстановитьТекст(Выгрузка.ТестВыгрузки);
	
	Попытка
		Ждать Текст.ЗаписатьАсинх(ВремФайл, КодировкаФайлаВыгрузки);
	Исключение
		Возврат;
	КонецПопытки;
	
	ФайлВыгрузки = Новый Файл(ВремФайл);
	Если НЕ Ждать ФайлВыгрузки.СуществуетАсинх() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДок = Новый ТекстовыйДокумент;
	Ждать ТекстДок.ПрочитатьАсинх(ВремФайл, Выгрузка.КодировкаВыгрузки);
	Адрес = ПоместитьВоВременноеХранилище(ТекстДок, Новый УникальныйИдентификатор);
	СтруктураПараметров = РегламентированнаяОтчетностьВызовСервера.СформироватьСтруктуруПараметровФайлаВыгрузкиНаСервере(Адрес, Выгрузка.КодировкаВыгрузки);
	
	Если НЕ СтруктураПараметров.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	РазделительПутиОС = ПолучитьРазделительПути();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = РазделительПутиОС, КаталогВремФайлов, КаталогВремФайлов + РазделительПутиОС);
	ВремКаталог = КаталогВремФайлов + "ШаблоныМЧБ_" + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	Ждать СоздатьКаталогАсинх(ВремКаталог);
	
	ОписаниеПолучаемыеФайлы = Новый ОписаниеПередаваемогоФайла(ВремКаталог + Выгрузка.ИмяФайла, ПоместитьВоВременноеХранилище(Выгрузка.Данные, Новый УникальныйИдентификатор));
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ОписаниеПолучаемыеФайлы);
	ОО = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеПослеПолученияФайлов", ЭтотОбъект, Новый Структура("ВремКаталог, ВремФайл, ИмяКнопки, Форма", 
		ВремКаталог, ВремФайл, "", Форма));
	НачатьПолучениеФайловССервера(ОО, ПолучаемыеФайлы);
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			АктивизироватьОсновноеОкно();
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
		
		ТаксДокПринт = Неопределено;
		
		Если НЕ Форма.Окно = Неопределено Тогда
			Форма.Окно.Активизировать();
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru = 'Формирование бланка формы прервано. Не удалось подключить вспомогательную
			|компоненту для формирования бланков форм с двухмерным штрихкодом PDF417.
			|Возможно, браузер не настроен в соответствии с особенностями настройки веб-браузера.
			|Открыть справочную информацию с описанием особенностей настроек веб-браузера?';
			|en = 'Form blank generation is canceled. Cannot connect to the secondary
			|component to generate form blanks with 2D PDF417 barcode.
			|Maybe, the browser is not configured according to the web browser configuration features.
			|Open help information with description of web browser configuration?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОткрытьСправкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиенте(Форма, ИмяКнопки) 
	
	ЭтоВебКлиент = Истина;
	ВебБраузер = ВебБраузер();
	
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент, ВебБраузер);
	
	Если Не ВыводЧерезВебСервис Тогда
		Если ЗначениеЗаполнено(ВебБраузер)
			И НЕ ВебБраузер = "MSIE" Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Внимание! Печать бланка формы с двухмерным штрихкодом PDF417 в Веб-клиенте поддерживается только в браузере Internet Explorer.';
										|en = 'Warning! You can print a form with 2D PDF417 barcode in Web client only using Microsoft Internet Explorer.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	ДополнительныеПараметры.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
	ДополнительныеПараметры.Вставить("ВыводЧерезВебСервис", ВыводЧерезВебСервис);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПодключитьРасширениеРаботыСФайламиПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	// сохраняем форму, если она не сохранена
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеПродолжение(Форма, ИмяКнопки)
		
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Заголовок = "Выберите каталог для размещения временных файлов.";
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ИмяКнопки", ИмяКнопки);
	
	АктивизироватьОсновноеОкно();
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВВебКлиентеПродолжениеПослеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораКаталога.Показать(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВВебКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C("Наименование налогового органа-получателя", НаименованиеИФНС);
			КонецЕсли;
			Если ИмяКнопки = "ПечататьСразуСДвухмернымШтрихкодомPDF417" Тогда
				ТаксДокПринт.PrintFile(ВремФайл, "", "", 0);
			Иначе
				АктивизироватьОсновноеОкно();
				ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			КонецЕсли;
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
		
		ТаксДокПринт = Неопределено;
		
		Если НЕ Форма.Окно = Неопределено Тогда
			Форма.Окно.Активизировать();
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru = 'Формирование бланка формы прервано. Не удалось подключить вспомогательную
			|компоненту для формирования бланков форм с двухмерным штрихкодом PDF417.
			|Возможно, браузер не настроен в соответствии с особенностями настройки веб-браузера.
			|Открыть справочную информацию с описанием особенностей настроек веб-браузера?';
			|en = 'Form blank generation is canceled. Cannot connect to the secondary
			|component to generate form blanks with 2D PDF417 barcode.
			|Maybe, the browser is not configured according to the web browser configuration features.
			|Open help information with description of web browser configuration?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОткрытьСправкуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	КонецЕсли;
	
КонецПроцедуры

#Иначе

Асинх Процедура ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахВТонкомКлиенте(Форма, Выгрузка)
	ЭтоВебКлиент = Ложь;
	АдресПараметровПроксиВоВременномХранилище = "";
	ВыводЧерезВебСервис = РегламентированнаяОтчетностьВызовСервера.ПроверитьВозможностьВыводаМашиночитаемойФормыЧерезВебСервис(АдресПараметровПроксиВоВременномХранилище,, ЭтоВебКлиент);
	
	Если ВыводЧерезВебСервис Тогда
		РегламентированнаяОтчетностьВызовСервера.ПолучитьШаблонПоИмени(Выгрузка);
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		ФайлВыгрузкиВоВременномХранилище.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ФайлВыгрузкиВоВременномХранилище.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ФайлВыгрузкиВоВременномХранилище.Вставить("АдресФайлаВыгрузкиВоВременномХранилище",
			РегламентированнаяОтчетностьВызовСервера.ПоместитьФайлВыгрузкиВоВременноеХранилищеНаСервере(Выгрузка.ТестВыгрузки,
				Строка(Новый УникальныйИдентификатор), Выгрузка.КодировкаВыгрузки, Форма.УникальныйИдентификатор));
			
		ДП = Новый Структура;
		ДП.Вставить("ИмяКнопки", "");
		ДП.Вставить("Форма", Форма);
		ДП.Вставить("Выгрузка", Выгрузка);
		ДП.Вставить("КодировкаФайлаВыгрузки", Выгрузка.КодировкаВыгрузки);
		ДП.Вставить("ИмяФайлаВыгрузки", Выгрузка.ИмяФайла);
		ДП.Вставить("ФайлВыгрузкиВоВременномХранилище", ФайлВыгрузкиВоВременномХранилище);
		ДП.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
		ПараметрыСформированногоОтчета = Новый Структура;
		
		Если РегламентированнаяОтчетностьВызовСервера.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимахЧерезВебСервис(ФайлВыгрузкиВоВременномХранилище, ПараметрыСформированногоОтчета, АдресПараметровПроксиВоВременномХранилище, ДП.Выгрузка.Данные) Тогда
			ИмяФайлаВыгрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыСформированногоОтчета, "ИдФайл", "");
			Если ЗначениеЗаполнено(ИмяФайлаВыгрузки) Тогда
				ПозицияТочки = СтрНайти(ИмяФайлаВыгрузки, ".");
				ИмяФайлаОтчета = ?(ПозицияТочки = 0, ИмяФайлаВыгрузки, Лев(ИмяФайлаВыгрузки, ПозицияТочки - 1)) + ".pdf";
			Иначе
				ИмяФайлаОтчета = Строка(Новый УникальныйИдентификатор) + ".pdf";
			КонецЕсли;
			
			ПараметрыСформированногоОтчета.Вставить("АдресПараметровПроксиВоВременномХранилище", АдресПараметровПроксиВоВременномХранилище);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ПараметрыВызоваЭкспортнойПроцедуры", ПараметрыСформированногоОтчета);
			ПараметрыФормы.Вставить("ИмяФайлаОтчета", ИмяФайлаОтчета);
			
			ПолучитьОбщуюФормуПоИмени("ДлительнаяОперацияПриПолученииМЧБ", ПараметрыФормы, Форма).Открыть();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ВременныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СохраняемыйФайл = Новый ТекстовыйДокумент;
	СохраняемыйФайл.УстановитьТекст(Выгрузка.ТестВыгрузки);
	Ждать СохраняемыйФайл.ЗаписатьАсинх(ИмяВременногоФайла, Выгрузка.КодировкаВыгрузки);
	Ждать СоздатьКаталогАсинх(ВременныйКаталог);
	Ждать Выгрузка.Данные.ЗаписатьАсинх(ВременныйКаталог + Выгрузка.ИмяФайла);
	
	ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Установить';
															|en = 'Install'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
															|en = 'Cancel'"));

		Если Ждать ВопросАсинх("Для формирования машиночитаемой формы необходимо установить" + Символы.ПС 
			+ "библиотечный модуль печати двухмерного штрихкода PDF417", СписокКнопок) <> КодВозвратаДиалога.Да Тогда 
			
			Возврат;
		КонецЕсли;
		
		ДистрибутивКомпонентыПечатиМашиночитаемыхФорм = Новый СписокЗначений;
		РегламентированнаяОтчетностьВызовСервера.ПолучитьДистрибутивКомпонентыПечатиМашиночитаемыхФорм(ДистрибутивКомпонентыПечатиМашиночитаемыхФорм);
		Для Каждого Элемент Из ДистрибутивКомпонентыПечатиМашиночитаемыхФорм Цикл
			Попытка
				Ждать Элемент.Значение.ЗаписатьАсинх(ВременныйКаталог + Элемент.Представление);
			Исключение
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					"Не удалось выгрузить шаблон машиночитаемой формы """ + Элемент.Представление 
					+ """ во временный каталог!" + Символы.ПС + ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
		Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВременныйКаталог) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.';
										|en = 'Generation of machine-readable form is canceled: the subcomponent is not installed in the application.'"));
			Возврат;
		Иначе
			ТаксДокПринт = СоздатьОбъектДляФормированияМашиночитаемойФормы();
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ТаксДокПринт.PrintTiffFolder = ВременныйКаталог;
		ТаксДокПринт.PreviewFile1C(ИмяВременногоФайла, 0);
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ВременныйКаталог);
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиентеЗавершение(ВремКаталог, ВремФайл, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, Знач ИмяКнопки, ТаксДокПринт, Форма)
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C("Наименование налогового органа-получателя", НаименованиеИФНС);
			КонецЕсли;
			Если ИмяКнопки = "ПечататьСразуСДвухмернымШтрихкодомPDF417" Тогда
				ТаксДокПринт.PrintFile(ВремФайл, "", "", 0);
			Иначе
				ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			КонецЕсли;
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание, ДистрибутивКомпонентыПечатиМашиночитаемыхФорм, ВремКаталог);
			ТаксДокПринт = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	
	УдалитьВременныйКаталогШаблонов(ВремФайл);
	УдалитьВременныйКаталогШаблонов(ВремКаталог);
	
КонецПроцедуры

Процедура ВывестиМашиночитаемуюФормуВТонкомКлиенте(Форма, ИмяКнопки)
	
	// сохраняем форму, если она не сохранена
	ДополнительныеПараметры = Новый Структура("Форма, ИмяКнопки", Форма, ИмяКнопки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВывестиМашиночитаемуюФормуВТонкомКлиентеПродолжение", ЭтотОбъект, ДополнительныеПараметры);

	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

Функция ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы)
	Для Каждого СтрокаУровня1 Из Форма.мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Попытка
				Результат = СтрокаУровня1.Представление;
			Исключение
				Результат = ИмяСтраницы;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Процедура ВывестиСостояние(ТекстСообщения, Прогресс = Неопределено, Пояснение = Неопределено, Картинка = Неопределено) Экспорт
	
	// Если запущен бублик, то состояние не должно выводиться
	ДлительнаяОтправкаКлиент.ВывестиСостояние(ТекстСообщения, Картинка); // Универсальная
	
КонецПроцедуры

Функция НовыеПараметрыФормы() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыФормы.Вставить("мСохраненныйДок");
	ПараметрыФормы.Вставить("мСкопированаФорма");
	ПараметрыФормы.Вставить("мПериодичность");
	ПараметрыФормы.Вставить("Организация");
	ПараметрыФормы.Вставить("мВыбраннаяФорма");
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417",
		ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());
	
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ПриАктивизацииСтатистическогоОтчета(Форма) Экспорт 
	
	// ПроцессыОбработкиДокументов
	//
	Если Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Не Форма.СтруктураРеквизитовФормы.ИспользуетсяНастройкаПодписантов Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено
		И Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюНастроитьПодписанта") <> Неопределено Тогда
		Область = Форма["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть;
		Команда = Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчетаКонтекстноеМенюНастроитьПодписанта");
		Если Область <> Неопределено
			И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И ЗначениеЗаполнено(Область.Имя)
			И Область.СодержитЗначение = Истина Тогда
			
			ОбластьИмя = Область.Имя;
			Команда.Доступность = (ОбластьИмя = "ОргДолжностьИсп") Или (ОбластьИмя = "ОргИсполнитель")
									Или (ОбластьИмя = "ОргТелефонИсп") Или (ОбластьИмя = "ОргАдресЭлектроннойПочты");
		Иначе
			Команда.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СобратьЗаполненныеДанныеПодписантов(Форма) Экспорт 
	Результат = Новый Структура;
	Результат.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	Результат.Вставить("ОбособленноеПодразделение", Форма.ОбособленноеПодразделение);
	Результат.Вставить("ДатаПодписи", Форма.ДатаПодписи);
	Результат.Вставить("ИмяОбъектаМетаданных", СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".")[1]);
	
	Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено Тогда
		ТабДок = Форма["ПолеТабличногоДокументаФормаОтчета"];
	ИначеЕсли Форма.Элементы.Найти("ТабличныйДокумент") <> Неопределено Тогда
		ТабДок = Форма["ТабличныйДокумент"];
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Если ТабДок <> Неопределено Тогда
		Результат.Вставить("ТекущееПоле", "");
		
		Обл = ТабДок.Области.Найти("ОргИсполнитель");
		Если Обл <> Неопределено Тогда
			Результат.Вставить("ФИОПодписантСтатистика", Обл.Значение);
			Если Обл.Имя = ТабДок.ТекущаяОбласть.Имя Тогда
				Результат.ТекущееПоле = "ФИОПодписантСтатистика";
			КонецЕсли;
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргДолжностьИсп");
		Если Обл <> Неопределено Тогда
			Результат.Вставить("ДолжностьПодписантСтатистика", Обл.Значение);
			Если Обл.Имя = ТабДок.ТекущаяОбласть.Имя Тогда
				Результат.ТекущееПоле = "ДолжностьПодписантСтатистика";
			КонецЕсли;
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргТелефонИсп");
		Если Обл <> Неопределено Тогда
			Результат.Вставить("ТелефонПодписантСтатистика", Обл.Значение);
			Если Обл.Имя = ТабДок.ТекущаяОбласть.Имя Тогда
				Результат.ТекущееПоле = "ТелефонПодписантСтатистика";
			КонецЕсли;
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргАдресЭлектроннойПочты");
		Если Обл <> Неопределено Тогда
			Результат.Вставить("ЕмейлПодписантСтатистика", Обл.Значение);
			Если Обл.Имя = ТабДок.ТекущаяОбласть.Имя Тогда
				Результат.ТекущееПоле = "ЕмейлПодписантСтатистика";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ОбновитьДанныеПодписанта(Форма, Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Форма.Элементы.Найти("ПолеТабличногоДокументаФормаОтчета") <> Неопределено Тогда
			ТабДок = Форма["ПолеТабличногоДокументаФормаОтчета"];
		ИначеЕсли Форма.Элементы.Найти("ТабличныйДокумент") <> Неопределено Тогда
			ТабДок = Форма["ТабличныйДокумент"];
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Стр = "";
		Обл = ТабДок.Области.Найти("ОргИсполнитель");
		Если Обл <> Неопределено И Результат.Свойство("ФИОПодписантСтатистика") Тогда
			Результат.Свойство("ФИОПодписантСтатистика", Обл.Значение);
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргДолжностьИсп");
		Если Обл <> Неопределено И Результат.Свойство("ДолжностьПодписантСтатистика") Тогда
			Результат.Свойство("ДолжностьПодписантСтатистика", Обл.Значение);
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргТелефонИсп");
		Если Обл <> Неопределено И Результат.Свойство("ТелефонПодписантСтатистика") Тогда
			Результат.Свойство("ТелефонПодписантСтатистика", Обл.Значение);
		КонецЕсли;
		Обл = ТабДок.Области.Найти("ОргАдресЭлектроннойПочты");
		Если Обл <> Неопределено И Результат.Свойство("ЕмейлПодписантСтатистика") Тогда
			Результат.Свойство("ЕмейлПодписантСтатистика", Обл.Значение);
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
КонецФункции

#Область КонтрольныеСоотношения

Процедура ПроверитьКонтрольныеСоотношения(Форма, ОбработкаКС, НеОткрыватьПриОтсутствииОшибок = Ложь) Экспорт

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("НеОткрыватьПриОтсутствииОшибок", НеОткрыватьПриОтсутствииОшибок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.Модифицированность Тогда
		Форма.СохранитьНаКлиенте(, ОписаниеОповещения)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношенияПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	РезультатПроверки = Форма.ПроверитьКонтрольныеСоотношенияВОтчете();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношенияЗавершение", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Если РезультатПроверки.Свойство("Статус") Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка контрольных соотношений';
												|en = 'Checking control correlations'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПроверки, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		АдресРезультата = ПоместитьВоВременноеХранилище(РезультатПроверки, Форма.УникальныйИдентификатор);
		ПараметрыРезультатаПроверки = Новый Структура("Статус,АдресРезультата", "Выполнено", АдресРезультата);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ПараметрыРезультатаПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось выполнить проверку. Информация для технической поддержки: ';
								|en = 'Cannot perform check. Information for technical support:'")
			+ Результат.ПодробноеПредставлениеОшибки;
		Сообщение.Сообщить();
	ИначеЕсли НЕ Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ОбработкаКС = Форма.ОбработкаКС;
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверки);
	ПараметрыФормы.Вставить("ТекстДляЗаголовочнойЧасти", Форма.СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Ложь);
	
	Если ТипЗнч(РезультатПроверки) = Тип("Структура") И РезультатПроверки.Свойство("ЭтоАвтопроверкаСтатистики") Тогда
		ПараметрыФормы.Вставить("ЭтоАвтопроверкаСтатистики");
	КонецЕсли;
	
	Если РезультатПроверки.КоличествоНайденныхОшибок > 0 Тогда
		
		Если ОбработкаКС = Неопределено Тогда
			
			ОбработкаКС = ОткрытьФорму("Обработка.РегламентированнаяОтчетностьСоотношенияПоказателей.Форма.КонтрольныеСоотношения",
										ПараметрыФормы, Форма, "_Форма_КонтрольныеСоотношения_");
				
		Иначе
										
			Если ОбработкаКС.Открыта() Тогда
				
				ОбработкаКС.Активизировать();
				
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
				
			Иначе
				
				ОбработкаКС.Открыть();
				
				Оповестить("ОбновитьКС", ПараметрыФормы, Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ОбработкаКС = ОбработкаКС;
		
	ИначеЕсли ДополнительныеПараметры.НеОткрыватьПриОтсутствииОшибок = Ложь Тогда
		
		ДополнительныеПараметры = Новый Структура("ПараметрыФормы, Форма", ПараметрыФормы, Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВывестиФормуПросмотраСоотношенийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'В отчете не обнаружены ошибки по соотношениям показателей.
			|Вывести форму для просмотра соотношений?';
			|en = 'No errors of indicator ratios are found in the report.
			|Display the form to view the ratios?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения_СКП(Форма, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДополнительныеПараметры.Свойство("СообщениеПриОтсутствииОшибок") Тогда
		ДополнительныеПараметры.Вставить("СообщениеПриОтсутствииОшибок", Ложь);
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("Записать") Тогда
		ДополнительныеПараметры.Вставить("Записать", Ложь);
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("ИскатьКопии") Тогда
		ДополнительныеПараметры.Вставить("ИскатьКопии", Ложь);
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("ПараметрыПоискаКопий") Тогда
		ДополнительныеПараметры.Вставить("ПараметрыПоискаКопий");
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("ИсточникОтчета") Тогда
		ДополнительныеПараметры.Вставить("ИсточникОтчета", "");
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("ИмяФормы") Тогда
		ДополнительныеПараметры.Вставить("ИмяФормы", "");
	КонецЕсли;
	
	Если НЕ ДополнительныеПараметры.Свойство("Сценарий") Тогда
		ДополнительныеПараметры.Вставить("Сценарий", "");
	КонецЕсли;

	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("Форма"							, Форма);
	ПараметрыПроцедуры.Вставить("СообщениеПриОтсутствииОшибок"	, ДополнительныеПараметры.СообщениеПриОтсутствииОшибок);
	ПараметрыПроцедуры.Вставить("ИскатьКопии"					, ДополнительныеПараметры.ИскатьКопии);
	ПараметрыПроцедуры.Вставить("ПараметрыПоискаКопий"			, ДополнительныеПараметры.ПараметрыПоискаКопий);
	ПараметрыПроцедуры.Вставить("ИсточникОтчета"				, ДополнительныеПараметры.ИсточникОтчета);
	ПараметрыПроцедуры.Вставить("ИмяФормы"						, ДополнительныеПараметры.ИмяФормы);
	ПараметрыПроцедуры.Вставить("Сценарий"						, ДополнительныеПараметры.Сценарий);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношения_СКП_ПоискКопий", 
		ЭтотОбъект, ПараметрыПроцедуры);
	
	Если Форма.Модифицированность ИЛИ ДополнительныеПараметры.Записать Тогда
		Форма.СохранитьНаКлиенте(, ОписаниеОповещения)
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения_СКП_ПоискКопий(Результат, ДополнительныеПараметры) Экспорт
	
	ПродолжитьПроверки = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношения_СКП_Продолжение", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	АнализироватьРезультатФормы = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношения_СКП_ПоискКопийЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
		
	Если ДополнительныеПараметры.ИскатьКопии И НЕ ДополнительныеПараметры.Сценарий = "Служебный" Тогда
			
		РезультатПоиска = 
			ДополнительныеПараметры.Форма.ВыполнитьПоискКопийРеглОтчетов(ДополнительныеПараметры.ПараметрыПоискаКопий);
			
			Если РезультатПоиска.ЕстьКопии Тогда
			
				ОткрытьФорму("Отчет.ПроверкаКонтрольныхСоотношений.Форма.ФормаПоискаКопий", 
					РезультатПоиска, ДополнительныеПараметры.Форма,,,,
					АнализироватьРезультатФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Иначе
	
				ВыполнитьОбработкуОповещения(ПродолжитьПроверки);
	
			КонецЕсли;
	
	Иначе
	
		ВыполнитьОбработкуОповещения(ПродолжитьПроверки);
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения_СКП_ПоискКопийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношения_СКП_Продолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
		
	Если Результат = КодВозвратаДиалога.Пропустить Тогда
	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	
	ИначеЕсли Результат = "ПрограммнаяПометкаУдаленияОтчета" Тогда
		
		ПроверитьКонтрольныеСоотношения_СКП_ПоискКопий(Результат, ДополнительныеПараметры)
		
	Иначе
		
		Возврат;
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения_СКП_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ПередаватьПараметры = ДополнительныеПараметры.ИсточникОтчета + ДополнительныеПараметры.ИмяФормы = 
		"РегламентированныйОтчетРасчетПоСтраховымВзносамФормаОтчета2023Кв3"
		ИЛИ 
		ДополнительныеПараметры.ИсточникОтчета + ДополнительныеПараметры.ИмяФормы = 
		"РегламентированныйОтчетРасчетПоСтраховымВзносамФормаОтчета2025Кв1";
	
	Если ПередаватьПараметры Тогда
		СтруктураПараметров = Новый Структура("Сценарий");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры, "Сценарий");
		РезультатПроверки = Форма.ПроверитьКонтрольныеСоотношенияВОтчете(СтруктураПараметров);
	Иначе
		РезультатПроверки = Форма.ПроверитьКонтрольныеСоотношенияВОтчете();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьКонтрольныеСоотношения_СКП_Завершение", ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Если РезультатПроверки.Свойство("Статус") Тогда
			
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется проверка контрольных соотношений';
												|en = 'Checking control correlations'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатПроверки, ОписаниеОповещения, ПараметрыОжидания);
		
	Иначе
		
		АдресРезультата = ПоместитьВоВременноеХранилище(РезультатПроверки, Форма.УникальныйИдентификатор);
		СтруктураРезультата = Новый Структура("Статус,АдресРезультата", "Выполнено", АдресРезультата);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКонтрольныеСоотношения_СКП_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось выполнить проверку. Информация для технической поддержки: ';
								|en = 'Cannot perform check. Information for technical support:'")
			+ Результат.ПодробноеПредставлениеОшибки;
		Сообщение.Сообщить();
		
	ИначеЕсли НЕ Результат.Статус = "Выполнено" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.ЧислоОшибок = 0 И НЕ ДополнительныеПараметры.СообщениеПриОтсутствииОшибок Тогда
		
		Возврат;
		
	ИначеЕсли РезультатПроверки.ЧислоОшибок = 0 Тогда
	
		ПоказатьПредупреждение(, НСтр("ru = 'При проверке контрольных соотношений ошибки не обнаружены';
										|en = 'No errors detected while checking the control correlations'"), 5);
		Возврат;
		
	КонецЕсли;
	
	Форма 					= ДополнительныеПараметры.Форма;
	ФормаОтчетаПроверкиКС 	= Форма.ФормаОтчетаПроверкиКС;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РезультатПроверки"				, РезультатПроверки);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца"	, НЕ ДополнительныеПараметры.Сценарий = "Служебный");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"		, Истина);
	
	Если ФормаОтчетаПроверкиКС = Неопределено Тогда
	
		ФормаОтчетаПроверкиКС = ОткрытьФорму("Отчет.ПроверкаКонтрольныхСоотношений.Форма.ФормаОтчета", 
			ПараметрыФормы, Форма);
		Форма.ФормаОтчетаПроверкиКС = ФормаОтчетаПроверкиКС;
	
	Иначе
		Если ФормаОтчетаПроверкиКС.Открыта() Тогда
			
			ФормаОтчетаПроверкиКС.Активизировать();
			Оповестить("ОбновитьПроверкиКС", ПараметрыФормы, Форма);
		
		Иначе
			
			ФормаОтчетаПроверкиКС.Открыть();
			Оповестить("ОбновитьПроверкиКС", ПараметрыФормы, Форма);
		
		КонецЕсли; 
	КонецЕсли; 
	
	
КонецПроцедуры

#КонецОбласти

Процедура ОткрытьФормуВыбораСпискаКонтрактов(СтруктураПараметров) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("РегламентированнаяОтчетность.ОтчетностьВМинистерствоОбороны") Тогда
		
		МодульРегламентированнаяОтчетностьКлиентПереопределяемый
		= ОбщегоНазначенияКлиент.ОбщийМодуль("РегламентированнаяОтчетностьКлиентПереопределяемый");
		
		МодульРегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуВыбораСпискаКонтрактов(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцессыОбработкиДокументов

Процедура ВыполнитьЗадачу(Форма, Команда, Источник) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
	
		МодульПроцессыОбработкиДокументовКлиент.ВыполнитьЗадачу(Форма, Команда, Новый Структура("Ссылка", Источник));
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КомментарийНаправившегоОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
	
		МодульПроцессыОбработкиДокументовКлиент.КомментарийНаправившегоОткрытие(Форма, Элемент, СтандартнаяОбработка);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КомментарийСледующемуНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ПроцессыОбработкиДокументов") Тогда
	
		МодульПроцессыОбработкиДокументовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПроцессыОбработкиДокументовКлиент");
	
		МодульПроцессыОбработкиДокументовКлиент.КомментарийСледующемуНачалоВыбора(
			Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗапретРедактированияСданныхОтчетов

// Вызывается из процедуры обработчика команды "РазрешитьРедактированиеРеквизитовОбъекта"
// размещенной в форме регламентированного отчета.
//
Процедура РазрешитьРедактированиеРеквизитовОтчета(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ЗапретРедактированияРеквизитовОбъектовКлиент");
		
		ЗаблокированныеРеквизиты = МодульЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(Форма);
		
		Если ЗаблокированныеРеквизиты.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Редактирование реквизитов отчета уже разрешено.';
											|en = 'Report attribute editing is already allowed.'"));
			Возврат;
		КонецЕсли;
		
		ЗаголовокДиалога = НСтр("ru = 'Разрешение редактирования реквизитов отчета';
								|en = 'Permission to edit report attributes'");
		
		ТекстВопроса =  НСтр("ru = 'После редактирования реквизитов этого успешно сданного отчета 
			|на печатных бланках не будут выводиться штампы визуализации ЭП.';
			|en = 'After you edit attributes of the submitted report, 
			|digital signature stamps will not be displayed in letterheads.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Разрешить';
													|en = 'Allow'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
													|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОтчетаПослеПодтверждения", ЭтотОбъект,
				Новый Структура("Форма,ЗаблокированныеРеквизиты", Форма, ЗаблокированныеРеквизиты)),
			ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, ЗаголовокДиалога);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает разрешенность редактирования для тех реквизитов, описание которых подготовлено в форме.
// В структуре "Параметры" используются ключи "Форма"," ЗаблокированныеРеквизиты".
//
Процедура РазрешитьРедактированиеРеквизитовОтчетаПослеПодтверждения(Ответ, Параметры) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ЗапретРедактированияРеквизитовОбъектовКлиент");
		
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(
		Параметры.Форма, Параметры.ЗаблокированныеРеквизиты);
		
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Параметры.Форма);
		
		ИменаПолейТабличногоДокумента = СтрРазделить("ТабличныйДокумент;ПолеТабличногоДокументаФормаОтчета;ПредставлениеУведомления", ";");
		
		Для Каждого ИмяПоляТабличногоДокумента Из ИменаПолейТабличногоДокумента Цикл
			ЭлементФормыПолеТабличногоДокумента = Параметры.Форма.Элементы.Найти(ИмяПоляТабличногоДокумента);
			Если НЕ ЭлементФормыПолеТабличногоДокумента = Неопределено Тогда
				ЭлементФормыПолеТабличногоДокумента.ЧерноБелыйПросмотр = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ЭлементНаименованиеЭтапа = Параметры.Форма.Элементы.Найти("НаименованиеЭтапа");
		Если ЭлементНаименованиеЭтапа <> Неопределено И ЭлементНаименованиеЭтапа.Заголовок = НСтр("ru = 'Сдано';
																									|en = 'Submitted:'") Тогда
			ЭлементНаименованиеЭтапа.Заголовок = ДокументооборотСКОКлиентСервер.СтатусСданМодифицирован(); //статус будет сохранен при записи отчета.
		КонецЕсли;
		
		ЭлементОбновить = Параметры.Форма.Элементы.Найти("Обновить");
		Если ЭлементОбновить <> Неопределено Тогда
			ЭлементОбновить.Видимость = Истина; 
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Разрешено редактирование реквизитов отчета';
								|en = 'Report attributes can be edited'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Установка разрешения редактирования отчета';
											|en = 'Allow report editing'"), ,ТекстСообщения);
		
		Попытка
			Параметры.Форма.РазрешитьРедактированиеРеквизитовОбъекта();
		Исключение
			ПоказатьПредупреждение(, НСтр("ru = 'Установленный режим редактирования не поддерживает 
				|возможность выбора значений из списка в полях формы отчета.';
				|en = 'The set edit mode does not support 
				|selection of values from the list in the report form fields.'"));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти