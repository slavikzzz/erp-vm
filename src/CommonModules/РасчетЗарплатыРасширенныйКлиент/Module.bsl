
#Область СлужебныйПрограммныйИнтерфейс

// Процедура предназначена для описания действий, 
// выполняемых по команде расшифровки значения показателя.
//
// Параметры:
//	- Форма - управляемая форма документа, выполняющего начисление.
//	- ОписаниеТаблицы - описание таблицы документа с данными показателей.
//	- Элемент - таблица формы
//	- ВыбраннаяСтрока - идентификатор строки таблицы.
//	- Поле - поле формы, в котором размещена команда расшифровки.
//	- СтандартнаяОбработка - признак необходимости выполнения стандартной обработки, 
//							используется для отметки о выполнении команды расшифровки.
//
Процедура ВыполнитьКомандуРасшифровкиЗначенияПоказателя(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ОповещениеЗавершения = Неопределено) Экспорт
	
	Перем ПересчитыватьСотрудника;
	
	РасчетЗарплатыРасширенныйКлиентПереопределяемый.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПересчитыватьСотрудника);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ОписаниеТаблицы", ОписаниеТаблицы);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если СтандартнаяОбработка Тогда 
		// Если это показатель сдельного заработка - открываем соответствующую форму, если нет - идем далее.
		ОбработкаРасшифровкиСдельногоЗаработка(Форма, ОписаниеТаблицы, Элемент, Поле, СтандартнаяОбработка);
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоДовольствияКлиент");
			Модуль.РасшифровкаЗначенияПоказателяДенежногоДовольствия(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		КонецЕсли; 		
		Если СтандартнаяОбработка Тогда
			Оповещение = Новый ОписаниеОповещения("ВыполнитьКомандуРасшифровкиЗначенияПоказателяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			УчетСреднегоЗаработкаКлиент.РасшифровкаЗначенияПоказателяСреднегоЗаработка(Форма, ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПересчитыватьСотрудника, Оповещение);
		КонецЕсли;
	Иначе 
		Результат = Новый Структура("ПересчитыватьСотрудника, СтандартнаяОбработка", ПересчитыватьСотрудника, СтандартнаяОбработка);
		ВыполнитьКомандуРасшифровкиЗначенияПоказателяЗавершение(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуРасшифровкиЗначенияПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ПересчитыватьСотрудника = Результат.ПересчитыватьСотрудника;
	СтандартнаяОбработка = Результат.СтандартнаяОбработка;
	
	Форма = ДополнительныеПараметры.Форма;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	// Если команда выполнена - считаем, что выполнено редактирование таблицы.
	Если Не СтандартнаяОбработка Тогда
		РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудника);
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения в строке документа, 
// выполняющего начисления, значений показателей, 
// а также сведений сотрудника (подразделение, график работы и др.).
// Используется при изменении одного или нескольких полей, влияющих на такие сведения.
//
// Параметры:
//	Форма						- управляемая форма документа.
//	ОписаниеТаблицыВидовРасчета	- структура, содержащая сведения об изменяемой таблицы начислений
//	ЗаполнятьСведенияСотрудников- булево, определяет необходимость обновления кадровых данных
//	ЗаполнятьЗначенияПоказателей- булево, определяет необходимость обновления значений показателей.
//
Процедура ДополнитьСтрокуРасчета(Форма, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников = Истина, ЗаполнятьЗначенияПоказателей = Истина) Экспорт
	
	СтрокаТаблицы = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		// Если для таблицы контролируется заполнение значений показателей,
		// не перезаполняем показатели, если они интерактивно изменялись.
		ИспользуетсяФиксЗаполнение = СтрокаТаблицы.Свойство("ФиксЗаполнение");
		Если ИспользуетсяФиксЗаполнение
			И СтрокаТаблицы["ФиксЗаполнение"] Тогда
			ЗаполнятьЗначенияПоказателей = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ДополнитьСтроку(СтрокаТаблицы.ПолучитьИдентификатор(), ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
	
	Если ЗаполнятьЗначенияПоказателей И ИспользуетсяФиксЗаполнение Тогда
		// Подменим прежние значения, чтобы отличить заполнение по строке 
		// от интерактивного изменения показателей.
		РеквизитКонтроляПолей = "КонтролируемыеПоля" + ОписаниеТаблицы.ИмяТаблицы;
		СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
		КонтролируемыеПоля = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма[РеквизитКонтроляПолей]);
		ГруппаПолей = КонтролируемыеПоля["ФиксЗаполнение"];
		
		Для Каждого ИмяПоля Из ГруппаПолей Цикл
			Если Не СтрокаТаблицы.Свойство(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			СтарыеЗначенияКонтролируемыхПолей[ОписаниеТаблицы.ИмяТаблицы + ИмяПоля] = СтрокаТаблицы[ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму, показывающую, какие удержания были рассчитаны при расчете начислений в документе.
//
// Параметры:
//   Объект            - ДанныеФормыСтруктура - Основной реквизит формы документа.
//   ИмяДокумента      - Строка               - Имя документа (объекта метаданных).
//   ОписаниеДокумента - Структура            - См. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента().
//   Обработчик        - ОписаниеОповещения   - Описание процедуры, вызываемой при окончании редактировании с параметрами:
//       * АдресРезультата - Неопределено, КодВозвратаДиалога, Строка - 
//           При успешном окончании редактирования удержаний процедура будет вызвана с параметром типа "Строка",
//           в котором хранится адрес временного хранилища, в котором размещена Структура с полями:
//               ** Удержания - ДанныеФормыКоллекция
//               ** ПогашениеЗаймов - ДанныеФормыКоллекция
//               ** ИзмененныеДанные - ДанныеФормыКоллекция
//           При отказе от редактирования процедура будет вызвана с параметром типа "Неопределено" или "КодВозвратаДиалога".
//           Пример чтения результатов процедуры см. в форме документа БольничныйЛист.
//       * ДополнительныеПараметры - Произвольный - Значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ПодробнееОРасчетеУдержаний(Объект, ИмяДокумента, ОписаниеДокумента, Обработчик) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект",            Объект);
	ПараметрыФормы.Вставить("ИмяДокумента",      ИмяДокумента);
	ПараметрыФормы.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеУдержаний", ПараметрыФормы, , , , , Обработчик);
	
КонецПроцедуры

// Осуществляет старт процесса по заполнению документа с клиента.
// Проверяет наличие исправленных строк и выполняет диалог с пользователем в случае их наличия.
//
Процедура ЗаполнитьДокументНачисленияЗарплаты(Форма) Экспорт
	
	Если Не Форма.ЕстьИсправленныеСтроки() Тогда
		// Если строки документа не содержат ручных исправлений, то просто заполняем документ, как будто он пустой.
		Форма.ЗаполнитьДанныеФормыНаКлиенте();
		Возврат;
	КонецЕсли;
	
	// Если есть исправленные строки, то необходимо выяснить как именно заполнять: 
	// полным перезаполнением или обновлением с учетом исправлений.
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДокументНачисленияЗарплатыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Документ содержит ручные исправления (выделены шрифтом). 
                         |Сохранить их при перезаполнении?';
                         |en = 'Document contains manual changes (in bold).
                         |Save them when repopulating? '");
						 
	КнопкиОтвета = Новый СписокЗначений;
	КнопкиОтвета.Добавить("Перезаполнить", НСтр("ru = 'Сохранить';
												|en = 'Save'"));
	КнопкиОтвета.Добавить("Заполнить", НСтр("ru = 'Не сохранять';
											|en = 'Do not save'"));
	КнопкиОтвета.Добавить("Отмена", НСтр("ru = 'Отмена';
										|en = 'Cancel'"));
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиОтвета, , "Заполнить", НСтр("ru = 'Заполнение документа';
																				|en = 'Fill in document'"));
	
КонецПроцедуры

// Завершение процесса заполнения документа.
// Старт осуществляется методом ЗаполнитьДокументНачисленияЗарплаты.
//
Процедура ЗаполнитьДокументНачисленияЗарплатыЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Параметры.Форма;
	
	Если Результат = "Заполнить" Тогда
		Форма.ЗаполнитьДанныеФормыНаКлиенте();
	ИначеЕсли Результат = "Перезаполнить" Тогда
		Форма.ПерезаполнитьДанныеФормыНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛКорректировкиВыплатыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ОписаниеТаблицыКорректировкиВыплаты, МесяцНачисления, Организация) Экспорт
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(
		Форма, ОписаниеТаблицыКорректировкиВыплаты, ВыбраннаяСтрока, МесяцНачисления, Организация);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛПерераспределитьКорректировкиВыплаты(СтрокаКорректировкиВыплаты, РаботаВБюджетномУчреждении) Экспорт
	ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьКорректировкиВыплаты(СтрокаКорректировкиВыплаты, РаботаВБюджетномУчреждении);
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(Форма, КорректировкиВыплаты, Организация, МесяцНачисления, Элемент, СтандартнаяОбработка = Истина) Экспорт
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыКорректировкиВыплаты();
	ОписаниеТаблицы.ПутьКДанным = "КорректировкиВыплаты";
	ОписаниеТаблицы.ПроверяемыеРеквизиты = "ФизическоеЛицо";
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Истина;
	
	Если СтрНайти(Элемент.Имя, "КорректировкаВыплаты") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КорректировкиВыплаты.Количество() = 0 Тогда
		Если Форма.УчитываемыеСотрудники.Количество() = 1 И Форма.ЕдинственныйСотрудник Тогда
			НоваяСтрокаКорректировкиВыплаты = КорректировкиВыплаты.Добавить();
			НоваяСтрокаКорректировкиВыплаты.ФизическоеЛицо = Форма.УчитываемыеСотрудники[0];
			НоваяСтрокаКорректировкиВыплаты.РезультатРаспределения = Новый ФиксированныйМассив(Новый Массив);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыбраннаяСтрока = КорректировкиВыплаты[0].ПолучитьИдентификатор();
	
	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	ОбработчикПослеЗакрытия = Новый ОписаниеОповещения("ФормаПодробнееОРасчетеНДФЛРаспределениеПоИсточникамФинансированияПослеЗакрытия", ЭтотОбъект);
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(Форма, ОписаниеТаблицы, ВыбраннаяСтрока, МесяцНачисления, Организация, ОбработчикПослеЗакрытия);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ФормаПодробнееОРасчетеНДФЛРаспределениеПоИсточникамФинансированияПослеЗакрытия(РезультатОповещения, ДополнительныеПараметры) Экспорт
	
	Если РезультатОповещения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиентСервер.ФормаПодробнееОРасчетеНДФЛУстановитьВидимостьЭлементов(РезультатОповещения.Форма);
	
КонецПроцедуры

#Область РаспределениеПоТерриториямУсловиямТруда

Функция ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда() Экспорт
	
	ПараметрыДляВыбора = Новый Структура(
		"Форма, 
		|ОписаниеДокумента,
		|ОписаниеТаблицы");
		
	Возврат ПараметрыДляВыбора;
	
КонецФункции

Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора) Экспорт
	
	ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поле.Имя, "_");
	Если ЧастиИмени.Найти("РаспределениеПоТерриториямУсловиямТруда") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Форма = ПараметрыДляВыбора.Форма;
	ОписаниеТаблицы = ПараметрыДляВыбора.ОписаниеТаблицы;
	
	// Подготовим строки распределения по соответствующей выбранной строке.
	// Откроем форму распределения.
	// По результатам редактирования в форме распределения:
	// - перенесем результаты редактирования в таблицу распределения,
	// - выполним перерасчет результата.
	
	ИмяТаблицы = ПараметрыДляВыбора.ОписаниеТаблицы.ИмяТаблицы;
	
	ПараметрыФормы = Новый Структура(
		"Распределение, 
		|Начисление, 
		|Сотрудник, 
		|Организация,
		|Договор,
		|ПоказыватьУсловияТруда,
		|ТолькоПросмотр");
	ПараметрыФормы.ПоказыватьУсловияТруда = Истина;
	
	Форма.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
	
	ДополнительныеПараметры = Новый Структура(
		"Форма, 
		|ИмяТаблицы, 
		|ВыбраннаяСтрока,
		|ОписаниеТаблицы");
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.ИмяТаблицы = ИмяТаблицы;
	ДополнительныеПараметры.ВыбраннаяСтрока = ВыбраннаяСтрока;
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ФормаРаспределениеНачисленийПоТерриториямУсловиямТрудаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.РаспределениеНачисленийПоТерриториямУсловиямТруда", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор, , , ОбработчикЗавершения);
	
КонецПроцедуры

Процедура ФормаРаспределениеНачисленийПоТерриториямУсловиямТрудаПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	
	Форма.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатЗакрытия, ОписаниеТаблицы, ВыбраннаяСтрока);
	
	СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбслуживанияИсправленийВДокументе

Процедура ДокументыВыполненияНачисленийПриАктивацииСтроки(Форма, ИмяТаблицы, НачисленияВСтроках) Экспорт 
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РеквизитКонтроляПолей = "КонтролируемыеПоля" + ИмяТаблицы;
		КонтролируемыеПоля = Форма[РеквизитКонтроляПолей];
		УстановитьЗначенияКонтролируемыхПолей(ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей());
	КонецЕсли;
	
КонецПроцедуры	

// Вызывается при окончании редактирования строки одной из коллекций документа, участвующего в расчете.
// Использование процедуры в форме документа-начисления предполагает наличие в форме 
// процедуры РассчитатьСотрудника.
//
Процедура СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудникаБезусловно = Неопределено, ПроводитьПерерасчет = Истина, ОписаниеДокумента = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ОписаниеТаблицы.ИмяТаблицы;
	СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
	
	КонтролируемыеПоля = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма[РеквизитКонтроляПолей]);
	КнопкаОтменыИсправления = Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы + "ОтменитьИсправление");
	
	// Если используются поля ОтработаноДней(Часов), 
	// для строк с начислениями отработанного времени синхронизируем их с ОплаченоДней(Часов), т.к. отображаются только
	// последние.
	Если ДанныеСтроки.Свойство("ВидВремени") И ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ДанныеСтроки.ВидВремени) Тогда
		Если ДанныеСтроки.Свойство("ОтработаноДней") И ДанныеСтроки.Свойство("ОплаченоДней") Тогда
			ДанныеСтроки.ОтработаноДней = ДанныеСтроки.ОплаченоДней;
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ОтработаноЧасов") И ДанныеСтроки.Свойство("ОплаченоЧасов") Тогда
			ДанныеСтроки.ОтработаноЧасов = ДанныеСтроки.ОплаченоЧасов;
		КонецЕсли;
	КонецЕсли;
	
	// Для начислений, которые не рассчитываются - не устанавливаем признак ФиксРасчет.
	УстанавливатьФиксРасчет = Истина;
	ВидРасчета = Неопределено;
	Если ОписаниеДокумента <> Неопределено И ОписаниеДокумента.УстанавливатьФиксРасчет <> Неопределено Тогда 
		УстанавливатьФиксРасчет = ОписаниеДокумента.УстанавливатьФиксРасчет;
	ИначеЕсли ОписаниеТаблицы.СодержитПолеВидРасчета Тогда 
		ВидРасчета = ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
	ИначеЕсли ОписаниеДокумента <> Неопределено И ОписаниеДокумента.НачисленияИмя = ОписаниеТаблицы.ИмяТаблицы И ОписаниеДокумента.ВидНачисленияВШапке Тогда 
		ВидРасчета = Форма.Объект[ОписаниеДокумента.ВидНачисленияИмя];
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидРасчета) Тогда 
		ОписаниеВидаРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		Если ОписаниеВидаРасчета.ЭтоНачисление И Не ОписаниеВидаРасчета.Рассчитывается И ОписаниеВидаРасчета.СпособВыполненияНачисления = ПредопределенноеЗначение("Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета") Тогда
			УстанавливатьФиксРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСотрудника = Ложь;
	
	// Проверка контролируемых полей, т.е. наличия исправлений.
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		ИмяГруппыПолей = ЭлементСтруктуры.Ключ;
		ГруппаПолей = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаПолей, ЭлементСтруктуры.Значение);
		Для Каждого ИмяПоля Из ГруппаПолей Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) И СтарыеЗначенияКонтролируемыхПолей[ОписаниеТаблицы.ИмяТаблицы + ИмяПоля] <> ДанныеСтроки[ИмяПоля] Тогда
				ПересчитатьСотрудника = Истина;
				Если ИмяГруппыПолей = "ФиксЗаполнение" И Лев(ИмяПоля, 8) = "Значение" Тогда
					// Если это контроль заполнения значений показателей, то исключаем значения тех показателей, 
					// которые вводятся непосредственно в документе, т.к. их изменение не считается исправлением.
					НомерПоказателя = Сред(ИмяПоля, 9);
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерПоказателя) Тогда 
						ПоказательИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.СведенияОПоказателеРасчетаЗарплаты(ДанныеСтроки["Показатель" + НомерПоказателя]);
						Если ПоказательИнфо <> Неопределено И ПоказательИнфо.ВводитсяНепосредственноПриРасчете Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ИмяГруппыПолей <> "ФиксРасчет" Или УстанавливатьФиксРасчет Тогда
					ДанныеСтроки[ИмяГруппыПолей] = Истина;
				КонецЕсли;
				Если ОписаниеТаблицы.ЭтоПерерасчеты И ДанныеСтроки.ФиксСторно Тогда
					ДанныеСтроки.ФиксСтрока = Истина;
				КонецЕсли;
				Если КнопкаОтменыИсправления <> Неопределено Тогда
					КнопкаОтменыИсправления.Доступность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Рассчитать данные документа по сотруднику.
	Если ПроводитьПерерасчет И (ПересчитатьСотрудника Или ПересчитыватьСотрудникаБезусловно = Истина) Тогда
		Если РасчетЗарплатыРасширенныйКлиентСервер.СтрокаЗаполненаДляРасчета(Форма, ДанныеСтроки, ОписаниеТаблицы) Тогда
			Форма.РассчитатьСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], ОписаниеТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	// Уже после расчета заполняем значения контролируемых полей.
	УстановитьЗначенияКонтролируемыхПолей(ОписаниеТаблицы.ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей);
	
КонецПроцедуры

Процедура СтрокаРасчетаПриНачалеРедактирования(Форма, ИмяТаблицы, ДанныеСтроки, НоваяСтрока, Копирование) Экспорт
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаПоТочностиПоказателя(ДанныеСтроки, Форма, ИмяТаблицы, 2);
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ФиксСтрока") Тогда
		ДанныеСтроки.ФиксСтрока = Истина;
	КонецЕсли;
	
КонецПроцедуры	

// Отмена исправления в документе.
// Использование процедуры в форме документа-начисления предполагает наличие в форме 
// процедуры ЗаполнитьНачисленияСотрудника.
Процедура ОтменитьИсправление(Форма, ОписаниеТаблицы) Экспорт 
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтролируемыеПоля = Форма["КонтролируемыеПоля" + ИмяТаблицы];
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		ДанныеСтроки[ЭлементСтруктуры.Ключ] = Ложь;
	КонецЦикла;
	Если ДанныеСтроки.Свойство("ФиксСтрока") Тогда
		ДанныеСтроки.ФиксСтрока = Ложь;
	КонецЕсли;
	
	// Перезаполнить данные документа по сотруднику.
	Форма.ПерезаполнитьНачисленияСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], Ложь);
		
	// Уже после расчета заполняем значения контролируемых полей.
	СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
	УстановитьЗначенияКонтролируемыхПолей(ОписаниеТаблицы.ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей);
	
КонецПроцедуры

// Отмена исправления в документе.
// Использование процедуры в форме документа-начисления предполагает наличие в форме 
// процедуры ЗаполнитьНачисленияСотрудника.
Процедура ОтменитьВсеИсправления(Форма, ОписаниеТаблицы) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ИмяТаблицы);
	
	Если ДанныеНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ФиксСтрокаЕсть = ДанныеНачислений[0].Свойство("ФиксСтрока");
	
	// Для накопления уникальных ссылок на пересчитываемых сотрудников.
	СотрудникиДляПересчета = Новый Соответствие;
	
	КонтролируемыеПоля = Форма["КонтролируемыеПоля" + ИмяТаблицы];
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		СтруктураОтбора = Новый Структура(ЭлементСтруктуры.Ключ, Истина);
		ИсправленныеСтроки = ДанныеНачислений.НайтиСтроки(СтруктураОтбора);
		Для Каждого ИсправленнаяСтрока Из ИсправленныеСтроки Цикл
			СотрудникиДляПересчета[ИсправленнаяСтрока[ОписаниеТаблицы.ИмяРеквизитаСотрудник]] = 0;
			ИсправленнаяСтрока[ЭлементСтруктуры.Ключ] = Ложь;
			Если ФиксСтрокаЕсть Тогда
				ИсправленнаяСтрока.ФиксСтрока = Ложь;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	СотрудникиМассив = Новый Массив;
	Для Каждого КлючЗначение Из СотрудникиДляПересчета Цикл
		СотрудникиМассив.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если СотрудникиМассив.Количество() > 0 Тогда
		// Перезаполнить данные документа по сотруднику.
		Форма.ПерезаполнитьНачисленияСотрудника(СотрудникиМассив, Ложь);
	КонецЕсли;
	
КонецПроцедуры	

// Обновление данных выбранных сотрудников в таблицах документа, выполняющего начисления.
// Использование метода предполагает в форме документа наличие процедуры ПересчитатьСотрудника.
//
// Параметры:
//	Форма
//	ИмяТаблицы - имя таблицы документа, как оно указывается в описании расчетного документа, 
//		см. РасчетЗарплатыРасширенный.ОписаниеРасчетногоДокумента.
//	ВедущееПоле - имя поля, содержащего ведущее поле для обновления (Сотрудник или ФизическоеЛицо).
//	ТипВедущегоПоля - тип значения, являющегося ведущим для обновления (Сотрудник или ФизическоеЛицо).
//
Процедура ПересчитатьСотрудника(Форма, ИмяТаблицы, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	ИдентификаторыСтрок = Форма.Элементы[ИмяТаблицы].ВыделенныеСтроки;
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные.НомерСтроки;
	Форма.ПересчитатьСотрудника(ИмяТаблицы, ИдентификаторыСтрок, ВедущееПоле, ТипВедущегоПоля);
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		РеквизитКонтроляПолей = "КонтролируемыеПоля" + ИмяТаблицы;
		КонтролируемыеПоля = Форма[РеквизитКонтроляПолей];
		УстановитьЗначенияКонтролируемыхПолей(ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей());
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияКонтролируемыхПолей(ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		Для Каждого ИмяПоля Из ЭлементСтруктуры.Значение Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) Тогда
				СтарыеЗначенияКонтролируемыхПолей[ИмяТаблицы + ИмяПоля] = ДанныеСтроки[ИмяПоля];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

Функция ДобавитьСотрудникаКРасчету(Форма, Сотрудник, ОписаниеТаблицы, ОтображатьКнопкуПересчета = Истина) Экспорт
	
	СотрудникДобавлен = Ложь;
	
	Если НЕ Форма.РассчитыватьДокументыПриРедактировании Тогда
		
		// Если начисление не рассчитывается и не нужно считать НДФЛ и вычеты - расчет сотрудника не требуется.
		Если Не ТребуетсяРасчетСотрудника(Форма, Сотрудник, ОписаниеТаблицы) Тогда 
			СотрудникДобавлен = Истина;
			Возврат СотрудникДобавлен;
		КонецЕсли;	
			
		Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ФизическоеЛицо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ФизическоеЛицоСотрудника(Сотрудник);
		Иначе
			ФизическоеЛицо = Сотрудник;
		КонецЕсли;
		
		ЗарегистрированноеОписаниеТаблицы = Неопределено;
		Для каждого ТаблицаССотрудниками Из Форма.СотрудникиКРасчету Цикл
			
			Если ТаблицаССотрудниками.Значение.СписокСотрудников.Получить(ФизическоеЛицо) <> Неопределено Тогда
				ЗарегистрированноеОписаниеТаблицы = ТаблицаССотрудниками.Значение.ОписаниеТаблицы;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеВедущейТаблицы = Неопределено;
		Если ЗарегистрированноеОписаниеТаблицы <> Неопределено Тогда
			
			ИмяВедущейТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ВедущаяТаблицаРасчета(
				ЗарегистрированноеОписаниеТаблицы.ИмяТаблицы, ОписаниеТаблицы.ИмяТаблицы);
				
			Если ИмяВедущейТаблицы = ЗарегистрированноеОписаниеТаблицы.ИмяТаблицы Тогда
				ОписаниеВедущейТаблицы = ЗарегистрированноеОписаниеТаблицы;
			Иначе
				
				ОписаниеВедущейТаблицы = ОписаниеТаблицы;
				
				СписокСотрудников = Форма.СотрудникиКРасчету.Получить(ЗарегистрированноеОписаниеТаблицы.ИмяТаблицы).СписокСотрудников;
				СписокСотрудников.Удалить(ФизическоеЛицо);
				
				Если СписокСотрудников.Количество() = 0 Тогда
					Форма.СотрудникиКРасчету.Удалить(ЗарегистрированноеОписаниеТаблицы.ИмяТаблицы);
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе
			ОписаниеВедущейТаблицы = ОписаниеТаблицы;
		КонецЕсли; 
		
		Если ОписаниеВедущейТаблицы <> ЗарегистрированноеОписаниеТаблицы Тогда
			
			ТаблицаССотрудниками = Форма.СотрудникиКРасчету.Получить(ОписаниеВедущейТаблицы.ИмяТаблицы);
			Если ТаблицаССотрудниками = Неопределено Тогда
				ТаблицаССотрудниками = Новый Структура("ОписаниеТаблицы,СписокСотрудников", ОписаниеВедущейТаблицы, Новый Соответствие);
			КонецЕсли; 
			
			ТаблицаССотрудниками.СписокСотрудников.Вставить(ФизическоеЛицо, Истина);
			Форма.СотрудникиКРасчету.Вставить(ОписаниеВедущейТаблицы.ИмяТаблицы, ТаблицаССотрудниками);
			
		КонецЕсли; 
		
		СотрудникДобавлен = Истина;
		РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(Форма, Истина, ОтображатьКнопкуПересчета);
		
	КонецЕсли;
	
	Возврат СотрудникДобавлен;
	
КонецФункции

Функция ТребуетсяРасчетСотрудника(Форма, Сотрудник, ОписаниеТаблицы)
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьСтатьиФинансированияЗарплата")
		Или Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеТерритории")
		Или Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОсобыеУсловияТрудаВОрганизации") Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	ТребуетсяРасчет = Истина;
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат ТребуетсяРасчет;
	КонецЕсли;
	
	ВидРасчета = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], 
		?(Форма.Объект.Свойство(ОписаниеТаблицы.ИмяРеквизитаВидРасчета), Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], Неопределено));
	
	Если Не ЗначениеЗаполнено(ВидРасчета) Или ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда 
		Возврат ТребуетсяРасчет;
	КонецЕсли;
	
	ОписаниеВидаРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	
	КодВычетаНДФЛ = ОписаниеВидаРасчета.КодВычетаНДФЛ;
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета.КодВычетаНДФЛ) Тогда 
		Если ОписаниеТаблицы.СодержитПолеКодВычета Тогда 
			КодВычетаНДФЛ = ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаКодВычета];
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяРасчетВычета = ЗначениеЗаполнено(КодВычетаНДФЛ);
	
	ТребуетсяРасчетНалоговУдержаний = Истина;
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда 
		ТребуетсяРасчетНалоговУдержаний = Истина;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеВидаРасчета.КодДоходаНДФЛ) Тогда
		ТребуетсяРасчетНалоговУдержаний = Истина;
	ИначеЕсли Форма.Объект.Свойство("РассчитыватьУдержания") Тогда 
		ТребуетсяРасчетНалоговУдержаний = Форма.Объект.РассчитыватьУдержания;
	ИначеЕсли Форма.Объект.Свойство("ПорядокВыплаты") Тогда 
		ТребуетсяРасчетНалоговУдержаний = Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Межрасчет");
	КонецЕсли;
	
	Если Не ТребуетсяРасчетВычета И Не ТребуетсяРасчетНалоговУдержаний 
		И (Не ОписаниеВидаРасчета.Рассчитывается Или ДанныеСтроки.ФиксРасчет) Тогда 
		ТребуетсяРасчет = Ложь;
	КонецЕсли;
	
	Возврат ТребуетсяРасчет;
		
КонецФункции

Процедура ОчиститьСписокСотрудниковКРасчету(Форма, Сотрудники = Неопределено) Экспорт
	
	Если Сотрудники = Неопределено Тогда
		Форма.СотрудникиКРасчету.Очистить();
	Иначе
		
		Если ТипЗнч(Сотрудники) =  Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(Сотрудники) =  Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			СотрудникиКРасчету = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
			
		Иначе
			СотрудникиКРасчету = Сотрудники;
		КонецЕсли;
		
		Для каждого СотрудникКРасчету Из СотрудникиКРасчету Цикл
			
			Если ТипЗнч(СотрудникКРасчету) =  Тип("СправочникСсылка.Сотрудники") Тогда
				УдаляемоеФизическоеЛицо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ФизическоеЛицоСотрудника(СотрудникКРасчету);
			Иначе
				УдаляемоеФизическоеЛицо = СотрудникКРасчету;
			КонецЕсли;
			
			ПричиныРасчетаКУдалению = Новый Массив;
			Для каждого ПричинаРасчета Из Форма.СотрудникиКРасчету Цикл
				
				ПричинаРасчета.Значение.СписокСотрудников.Удалить(УдаляемоеФизическоеЛицо);
				Если ПричинаРасчета.Значение.СписокСотрудников.Количество() = 0 Тогда
					ПричиныРасчетаКУдалению.Добавить(ПричинаРасчета.Ключ);
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ПричинаРасчетаКУдалению Из  ПричиныРасчетаКУдалению Цикл
				Форма.СотрудникиКРасчету.Удалить(ПричинаРасчетаКУдалению);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(Форма, Форма.СотрудникиКРасчету.Количество() > 0);
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаСоСпискомСотрудников(Форма, ИмяОбработчика, Отказ = Ложь, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Форма.СотрудникиКРасчету.Количество() > 0 Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, Форма, ПараметрыЗаписи);
		
		ТекстВопроса = НСтр("ru = 'Перед записью документа необходимо провести перерасчет измененных строк.
			|Продолжить?';
			|en = 'Recalculate the changed lines before writing the document.
			|Continue?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРасчетСотрудникаПередЗаписьюДокумента(Форма, ИмяОбработчика, ДополнительныеПараметры, РегистрацияНачисленийДоступна = Истина, ВыполнятьПредварительныйРасчетДокумента = Истина, РассчитыватьБезусловно = Ложь) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ИмяОбработчика, Форма, ДополнительныеПараметры);
	Если Форма.РасчетНеобходимоВыполнить И РегистрацияНачисленийДоступна Тогда
		
		Если Не РассчитыватьБезусловно Тогда
			
			ТекстВопроса = НСтр("ru = 'Перед записью документа необходимо провести перерасчет изменений.
				|Продолжить?';
				|en = 'Recalculate changes before writing the document.
				|Continue?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ВыполнятьПредварительныйРасчетДокумента Тогда
			Форма.РасчетНеобходимоВыполнить = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ВыполнитьРасчетСотрудниковПередЗаписьюДокумента(Форма, ОписаниеОповещения, РегистрацияНачисленийДоступна = Истина, ВыполнятьПредварительныйРасчетДокумента = Истина, РассчитыватьБезусловно = Ложь) Экспорт
	
	РасчетНеобходимоВыполнить = РасчетЗарплатыРасширенныйКлиентСервер.ТребуетсяРасчетМногосотрудниковогоДокумента(Форма);
	Если РасчетНеобходимоВыполнить И РегистрацияНачисленийДоступна Тогда
		
		Если Не РассчитыватьБезусловно Тогда
			
			ТекстВопроса = НСтр("ru = 'Перед записью документа необходимо провести перерасчет изменений.
				|Продолжить?';
				|en = 'Recalculate changes before writing the document.
				|Continue?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ВыполнятьПредварительныйРасчетДокумента Тогда
			
			Для каждого СтрокаСотрудники Из Форма.Объект.Сотрудники Цикл
				СтрокаСотрудники.ТребуетсяРасчет = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

Процедура ПередНачаломДобавленияСтрокиПерерасчета(Элемент, Отказ, Копирование) Экспорт 
	
	Если Не Копирование Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Сторно Или ТекущиеДанные.ФиксСторно Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Копирование сторнирующей записи невозможно';
										|en = 'Reversing entry cannot be copied'"));
	КонецЕсли;
	
КонецПроцедуры

// Проверка возможности удаления строки перерасчета и отказ при необходимости.
//
Процедура ПередУдалениемСтрокиПерерасчета(Форма, ИмяТаблицы, Элемент, Отказ) Экспорт
	
	УдалениеСторно = Ложь;
	Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
		ТекущиеДанные = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ФиксСторно Или (ТекущиеДанные.Свойство("Сторно") И ТекущиеДанные.Сторно) Тогда
			УдалениеСторно = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
 	Если УдалениеСторно Тогда
		Отказ = Истина;
		
		ИмяРеквизита = ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаРазрешеноРедактироватьСторно(ИмяТаблицы);
		
		Если Форма[ИмяРеквизита] Тогда
			
			ИдентификаторыСтрок = Новый Массив;
			Для Каждого ИдентификаторСтроки Из Элемент.ВыделенныеСтроки Цикл
				ИдентификаторыСтрок.Добавить(ИдентификаторСтроки);
			КонецЦикла;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ИдентификаторыСтрок);
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
			ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеСтрокиПерерасчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(ОписаниеОповещения, НСтр(
				"ru = 'Вы уверены, что хотите удалить сторнирующую строку?
				|Все связанные расчеты будет необходимо проверить и исправить вручную.';
				|en = 'Are you sure you want to delete the reversing line?
				|You will need to manually check and correct all related calculations.'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ПоказатьПредупреждение(, НСтр(
				"ru = 'Удаление сторнирующих строк не рекомендуется!
				|Если Вы уверены, что это необходимо, разрешите редактирование сторнирующих строк в меню ""Еще...""';
				|en = 'It is not recommended to delete reversing lines.
				|If you are sure that it is necessary, allow editing reversing lines in the ""More actions"" menu.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделенныеСотрудникиКоллекции(Коллекция, ИдентификаторыСтрок, ПолеСотрудник = "Сотрудник") Экспорт
	
	Сотрудники = Новый Массив;
	
	Для Каждого	ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		Строка = Коллекция.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка <> Неопределено
			И ЗначениеЗаполнено(Строка[ПолеСотрудник]) Тогда
			
			Сотрудники.Добавить(Строка[ПолеСотрудник]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сотрудники;
	
КонецФункции

#КонецОбласти

Процедура ДоначислитьЗарплатуСейчас(Организация, Период, Отбор = Неопределено) Экспорт
	
	ДоступныеДоначисления = ПерерасчетЗарплатыВызовСервера.ДокументыПерерасчета(Организация, Период, Отбор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
	ДополнительныеПараметры.Вставить("Отбор", Отбор);
	
	Если ДоступныеДоначисления.Документы.Количество() > 1 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимДоначисления", Истина);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация", Организация);
		СтруктураОтбора.Вставить("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
		СтруктураОтбора.Вставить("Ссылка", ДоступныеДоначисления.Документы);
		
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
		
		Оповещение = Новый ОписаниеОповещения("ДоначислитьСейчасЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаСписка",
			ПараметрыОткрытия, ЭтотОбъект, "РежимДоначисления", , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ДоступныеДоначисления.Документы.Количество() = 1 Тогда
			ДокументДоначисления = ДоступныеДоначисления.Документы[0];
		Иначе
			ДокументДоначисления = ПредопределенноеЗначение("Документ.НачислениеЗарплаты.ПустаяСсылка");
		КонецЕсли;
		
		ДоначислитьСейчасЗавершение(ДокументДоначисления, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьРедактированиеСторно(Форма, ИмяКоманды) Экспорт
	
	Форма[ИмяКоманды] = Не Форма[ИмяКоманды];
	Форма.Элементы[ИмяКоманды].Пометка = Форма[ИмяКоманды];
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РасчетЗарплатыРасширенныйКлиент.ПодробнееОРасчетеУдержаний.
// Процедура открывает общую форму, показывающую, какие удержания были рассчитаны при расчете начислений в документе.
//
// Параметры:
//	Объект			- основной реквизит формы документа.
//	ИмяДокумента	- имя документа.
//	Владелец		- элемент, в который необходимо возвратить результат оповещения.
//
// Возвращаемое значение
//	Форма при закрытии отправляет оповещение владельцу, с которым передается содержимое ТЧ Удержания и Показатели.
//
Процедура ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, ИмяДокумента, Владелец, ОписаниеДокумента) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект",		Объект);
	ПараметрыФормы.Вставить("ИмяДокумента",	ИмяДокумента);
	ПараметрыФормы.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	ОткрытьФорму("ОбщаяФорма.ПодробнееОРасчетеУдержаний", ПараметрыФормы, Владелец);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаРасшифровкиСдельногоЗаработка(Форма, ОписаниеТаблицы, Элемент, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "КомандаРасшифровки";
	ПозицияКоманды = СтрНайти(Поле.Имя, ИмяКоманды);
	Если ПозицияКоманды = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерПоказателя = Сред(Поле.Имя, ПозицияКоманды + СтрДлина(ИмяКоманды));
	ТекущийПоказатель = Неопределено;
	Если Не ТекущиеДанные.Свойство("Показатель" + НомерПоказателя, ТекущийПоказатель)
		Или ТекущийПоказатель <> ОбщегоНазначенияКлиент.ПредопределенныйЭлемент(
			"Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОбъект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	ВидРасчета = ?(ОписаниеТаблицы.СодержитПолеВидРасчета,
		ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], ФормаОбъект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
		
	ПараметрыФормы = Новый Структура("Сотрудник", ТекущиеДанные.Сотрудник);
	ПараметрыФормы.Вставить("Организация", ФормаОбъект.Организация);
	ПараметрыФормы.Вставить("Начисление", ВидРасчета);
	ПараметрыФормы.Вставить("ДатаНачала", ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаДатаНачала]);
	ПараметрыФормы.Вставить("ДатаОкончания", ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания]);
	
	ПараметрыФормы.Вставить("ВремяВЧасах", ТекущиеДанные.ВремяВЧасах);
	ПараметрыФормы.Вставить("Отработано",
		?(ТекущиеДанные.ВремяВЧасах,
			ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаОтработаноЧасов],
			ТекущиеДанные[ОписаниеТаблицы.ИмяРеквизитаОтработаноДней]));
	ПараметрыФормы.Вставить("ЗначениеПоказателя", ТекущиеДанные["Значение" + НомерПоказателя]);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРасшифровкиСдельногоЗаработка", ПараметрыФормы); 

КонецПроцедуры

Процедура ДоначислитьСейчасЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", Результат);
		
		ЗначенияЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ЗначенияЗаполнения.Вставить("Организация", ДополнительныеПараметры.Организация);
			ЗначенияЗаполнения.Вставить("МесяцНачисления", ДополнительныеПараметры.МесяцНачисления);
			ЗначенияЗаполнения.Вставить("РежимДоначисления", Истина);
			Если ЗначениеЗаполнено(ДополнительныеПараметры.Отбор) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗначенияЗаполнения, ДополнительныеПараметры.Отбор);
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияЗаполнения.Вставить("ЗаполнитьПриОткрытии", Истина);
		
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаОбъекта", ПараметрыОткрытия, , "РежимДоначисления");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо = Неопределено, Сотрудник = Неопределено, ВидРасчета = Неопределено) Экспорт
	
	РасчетЗарплатыКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо, Сотрудник, ВидРасчета);
	
КонецПроцедуры

Процедура ПроверитьПовторениеКонтролируемыхНачислений(Форма, Отказ, ПараметрыЗаписи, ОписаниеТаблицыНачислений) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ПрошлиПроверкуПериодичныхНачислений") Тогда
		Возврат;		
	КонецЕсли;
	
	Объект = Форма.Объект;
	КонтролируемыеНачисления = РасчетЗарплатыРасширенныйВызовСервера.ТаблицаПовторенийКонтролируемыхНачислений(Объект, ОписаниеТаблицыНачислений);
	
	Если КонтролируемыеНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Отказ", Отказ);	
	
	ТекстВопроса = "";
	Для Каждого КлючПовторения Из КонтролируемыеНачисления Цикл
		Сотрудник = КлючПовторения.Ключ;
		НачислениеИРегистратор = КлючПовторения.Значение;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сотруднику %1 начисление %2 уже регистрировалось документом %3.';
											|en = 'The %2 accrual has already been registered for the %1 employee under the %3 document.'")+Символы.ПС;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, Сотрудник, НачислениеИРегистратор.Начисление, НачислениеИРегистратор.Регистратор);
	КонецЦикла;
	ТекстВопроса = ТекстВопроса + НСтр("ru = 'Провести документ?';
										|en = 'Post the document?'");
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПовторениеКонтролируемыхНачисленийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

Процедура ПроверитьПовторениеКонтролируемыхНачисленийЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
	ПараметрыЗаписи.Вставить("ПрошлиПроверкуПериодичныхНачислений", Истина);
	
	Форма.Записать(ПараметрыЗаписи);	

КонецПроцедуры

Процедура УдалениеСтрокиПерерасчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ТаблицаОбъекта = Форма.Объект[ДополнительныеПараметры.ИмяТаблицы];
	ДобавлятьИзмененныеДанные = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИзмененныеДанные");
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ТекущиеДанные = ТаблицаОбъекта.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДобавлятьИзмененныеДанные Тогда
			Форма.ДобавитьИзмененныеДанныеПерерасчета(ТекущиеДанные);
		КонецЕсли;
		ТаблицаОбъекта.Удалить(ТекущиеДанные);
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	Форма.ПослеУдаленияПерерасчета();
	
КонецПроцедуры

Процедура ЗаполнитьПоказатели(Форма, ИмяПоляПВР = "Начисление") Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект[ИмяПоляПВР]) Тогда 
		ТекстСообщения = НСтр("ru = 'Не указан вид расчета';
								|en = 'Calculation kind is not specified'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект." + ИмяПоляПВР);
		Возврат;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(Форма.Объект[ИмяПоляПВР]);
	Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ОписаниеПоказателя.ВводитсяНепосредственноПриРасчете 
			Или (ОписаниеПоказателя.ОтображатьВДокументахНачисления И Не ОписаниеПоказателя.ЗначениеРассчитываетсяАвтоматически) Тогда
			МассивПоказателей.Добавить(ОписаниеПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("МассивПоказателей", МассивПоказателей);
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, Форма);	
	
КонецПроцедуры

#КонецОбласти